uint64_t sub_1B67DAEC4(uint64_t result, int a2, __int16 *a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;

  v7 = 1 << (a2 - 1);
  if (a2 <= 0)
    v7 = 0;
  if ((int)result >= 1)
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v10 = -2;
      do
      {
        v11 = ((v7 + (*(__int16 *)(a5 + v9) + 0x2000) * *a3) >> a2) + *a4;
        if (v11 >= 511)
          v11 = 511;
        *(_WORD *)(a7 + v9) = v11 & ~(unsigned __int16)(v11 >> 31);
        v12 = ((v7 + (*(__int16 *)(a5 + v9 + 2) + 0x2000) * a3[1]) >> a2) + a4[1];
        if (v12 >= 511)
          v12 = 511;
        *(_WORD *)(a7 + v9 + 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        v10 += 2;
        v9 += 4;
      }
      while (v10 < 0xA);
      ++v8;
      a5 += 24;
      a7 += 2 * a6;
    }
    while (v8 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DAF7C(uint64_t result, int a2, __int16 *a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;

  v7 = 1 << (a2 - 1);
  if (a2 <= 0)
    v7 = 0;
  if ((int)result >= 1)
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v10 = -2;
      do
      {
        v11 = ((v7 + (*(__int16 *)(a5 + v9) + 0x2000) * *a3) >> a2) + *a4;
        if (v11 >= 511)
          v11 = 511;
        *(_WORD *)(a7 + v9) = v11 & ~(unsigned __int16)(v11 >> 31);
        v12 = ((v7 + (*(__int16 *)(a5 + v9 + 2) + 0x2000) * a3[1]) >> a2) + a4[1];
        if (v12 >= 511)
          v12 = 511;
        *(_WORD *)(a7 + v9 + 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        v10 += 2;
        v9 += 4;
      }
      while (v10 < 0x16);
      ++v8;
      a5 += 48;
      a7 += 2 * a6;
    }
    while (v8 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB034(uint64_t result, int a2, __int16 *a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;

  v7 = 1 << (a2 - 1);
  if (a2 <= 0)
    v7 = 0;
  if ((int)result >= 1)
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v10 = -2;
      do
      {
        v11 = ((v7 + (*(__int16 *)(a5 + v9) + 0x2000) * *a3) >> a2) + *a4;
        if (v11 >= 511)
          v11 = 511;
        *(_WORD *)(a7 + v9) = v11 & ~(unsigned __int16)(v11 >> 31);
        v12 = ((v7 + (*(__int16 *)(a5 + v9 + 2) + 0x2000) * a3[1]) >> a2) + a4[1];
        if (v12 >= 511)
          v12 = 511;
        *(_WORD *)(a7 + v9 + 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        v10 += 2;
        v9 += 4;
      }
      while (v10 < 0x2E);
      ++v8;
      a5 += 96;
      a7 += 2 * a6;
    }
    while (v8 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB0EC(uint64_t result, char a2, __int16 *a3, __int16 *a4, uint64_t a5, __int16 *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << a2;
    v13 = a2 + 1;
    v14 = (a7[1] + a4[1] + 1) << a2;
    do
    {
      v15 = 0;
      v16 = -2;
      do
      {
        v17 = (v12 + (*(__int16 *)(a5 + v15) + 0x2000) * *a3 + (*(__int16 *)(a8 + v15) + 0x2000) * *a6) >> v13;
        if (v17 >= 511)
          v17 = 511;
        *(_WORD *)(a10 + v15) = v17 & ~(unsigned __int16)(v17 >> 31);
        v18 = (v14 + (*(__int16 *)(a5 + v15 + 2) + 0x2000) * a3[1] + (*(__int16 *)(a8 + v15 + 2) + 0x2000) * a6[1]) >> v13;
        if (v18 >= 511)
          v18 = 511;
        *(_WORD *)(a10 + v15 + 2) = v18 & ~(unsigned __int16)(v18 >> 31);
        v16 += 2;
        v15 += 4;
      }
      while (v16 < 0xA);
      ++v10;
      a5 += 24;
      a8 += 24;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB1E0(uint64_t result, char a2, __int16 *a3, __int16 *a4, uint64_t a5, __int16 *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << a2;
    v13 = a2 + 1;
    v14 = (a7[1] + a4[1] + 1) << a2;
    do
    {
      v15 = 0;
      v16 = -2;
      do
      {
        v17 = (v12 + (*(__int16 *)(a5 + v15) + 0x2000) * *a3 + (*(__int16 *)(a8 + v15) + 0x2000) * *a6) >> v13;
        if (v17 >= 511)
          v17 = 511;
        *(_WORD *)(a10 + v15) = v17 & ~(unsigned __int16)(v17 >> 31);
        v18 = (v14 + (*(__int16 *)(a5 + v15 + 2) + 0x2000) * a3[1] + (*(__int16 *)(a8 + v15 + 2) + 0x2000) * a6[1]) >> v13;
        if (v18 >= 511)
          v18 = 511;
        *(_WORD *)(a10 + v15 + 2) = v18 & ~(unsigned __int16)(v18 >> 31);
        v16 += 2;
        v15 += 4;
      }
      while (v16 < 0x16);
      ++v10;
      a5 += 48;
      a8 += 48;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB2D4(uint64_t result, char a2, __int16 *a3, __int16 *a4, uint64_t a5, __int16 *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << a2;
    v13 = a2 + 1;
    v14 = (a7[1] + a4[1] + 1) << a2;
    do
    {
      v15 = 0;
      v16 = -2;
      do
      {
        v17 = (v12 + (*(__int16 *)(a5 + v15) + 0x2000) * *a3 + (*(__int16 *)(a8 + v15) + 0x2000) * *a6) >> v13;
        if (v17 >= 511)
          v17 = 511;
        *(_WORD *)(a10 + v15) = v17 & ~(unsigned __int16)(v17 >> 31);
        v18 = (v14 + (*(__int16 *)(a5 + v15 + 2) + 0x2000) * a3[1] + (*(__int16 *)(a8 + v15 + 2) + 0x2000) * a6[1]) >> v13;
        if (v18 >= 511)
          v18 = 511;
        *(_WORD *)(a10 + v15 + 2) = v18 & ~(unsigned __int16)(v18 >> 31);
        v16 += 2;
        v15 += 4;
      }
      while (v16 < 0x2E);
      ++v10;
      a5 += 96;
      a8 += 96;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB3C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t i;
  int v7;

  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      for (i = 0; i != 24; i += 2)
      {
        v7 = (*(__int16 *)(a2 + i) + *(__int16 *)(a3 + i) + 16416) >> 6;
        if (v7 >= 511)
          v7 = 511;
        *(_WORD *)(a5 + i) = v7 & ~(unsigned __int16)(v7 >> 31);
      }
      ++v5;
      a2 += 24;
      a3 += 24;
      a5 += 2 * a4;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t i;
  int v7;

  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      for (i = 0; i != 48; i += 2)
      {
        v7 = (*(__int16 *)(a2 + i) + *(__int16 *)(a3 + i) + 16416) >> 6;
        if (v7 >= 511)
          v7 = 511;
        *(_WORD *)(a5 + i) = v7 & ~(unsigned __int16)(v7 >> 31);
      }
      ++v5;
      a2 += 48;
      a3 += 48;
      a5 += 2 * a4;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB498(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t i;
  int v7;

  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      for (i = 0; i != 96; i += 2)
      {
        v7 = (*(__int16 *)(a2 + i) + *(__int16 *)(a3 + i) + 16416) >> 6;
        if (v7 >= 511)
          v7 = 511;
        *(_WORD *)(a5 + i) = v7 & ~(unsigned __int16)(v7 >> 31);
      }
      ++v5;
      a2 += 96;
      a3 += 96;
      a5 += 2 * a4;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB500(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  if ((int)result >= 1)
  {
    do
    {
      v6 = *a4;
      *(_DWORD *)(a6 + 8) = *((_DWORD *)a4 + 2);
      *(_QWORD *)a6 = v6;
      a4 = (uint64_t *)((char *)a4 + a3);
      a6 += a5;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB52C(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;

  if ((int)result >= 1)
  {
    do
    {
      v6 = *a4;
      *(_QWORD *)(a6 + 16) = *((_QWORD *)a4 + 2);
      *(_OWORD *)a6 = v6;
      a4 = (__int128 *)((char *)a4 + a3);
      a6 += a5;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB558(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, _OWORD *a6)
{
  __int128 v6;
  __int128 v7;

  if ((int)result >= 1)
  {
    do
    {
      v6 = *a4;
      v7 = a4[2];
      a6[1] = a4[1];
      a6[2] = v7;
      *a6 = v6;
      a4 = (__int128 *)((char *)a4 + a3);
      a6 = (_OWORD *)((char *)a6 + a5);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB584(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = a4 - 3;
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v11 += byte_1B6920C55[8 * (a2 & 3) - 8 + v10] * *(unsigned __int8 *)(v9 + v10);
          ++v10;
        }
        while (v10 != 8);
        v12 = (v11 + 32) >> 6;
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a6 + v8++) = v12 & ~(v12 >> 31);
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB614(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = a4 - 3;
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v11 += byte_1B6920C55[8 * (a2 & 3) - 8 + v10] * *(unsigned __int8 *)(v9 + v10);
          ++v10;
        }
        while (v10 != 8);
        v12 = (v11 + 32) >> 6;
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a6 + v8++) = v12 & ~(v12 >> 31);
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB6A4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = a4 - 3;
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v11 += byte_1B6920C55[8 * (a2 & 3) - 8 + v10] * *(unsigned __int8 *)(v9 + v10);
          ++v10;
        }
        while (v10 != 8);
        v12 = (v11 + 32) >> 6;
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a6 + v8++) = v12 & ~(v12 >> 31);
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB734(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 3 * a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -8;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        v14 = (v10 + 32) >> 6;
        if (v14 >= 255)
          v14 = 255;
        *(_BYTE *)(a6 + v8++) = v14 & ~(v14 >> 31);
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB7C8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 3 * a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -8;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        v14 = (v10 + 32) >> 6;
        if (v14 >= 255)
          v14 = 255;
        *(_BYTE *)(a6 + v8++) = v14 & ~(v14 >> 31);
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB85C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 3 * a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -8;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        v14 = (v10 + 32) >> 6;
        if (v14 >= 255)
          v14 = 255;
        *(_BYTE *)(a6 + v8++) = v14 & ~(v14 >> 31);
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DB8F0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  int v23;
  _QWORD v24[214];

  v24[213] = *MEMORY[0x1E0C80C00];
  if ((int)result >= -6)
  {
    v6 = 0;
    v7 = a4 - 3 * a3 - 3;
    v8 = v24;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v12 += byte_1B6920C55[8 * (a2 & 3) - 8 + v11] * *(unsigned __int8 *)(v10 + v11);
          ++v11;
        }
        while (v11 != 8);
        *((_WORD *)v8 + v9++) = v12;
        ++v10;
      }
      while (v9 != 12);
      v8 += 3;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 6);
    if ((int)result >= 1)
    {
      v14 = 0;
      v15 = (__int16 *)v24;
      do
      {
        v16 = 0;
        v17 = v15;
        do
        {
          v18 = 0;
          v19 = -8;
          v20 = v17;
          do
          {
            v21 = *v20;
            v20 += 12;
            v18 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v19] * v21;
          }
          while (!__CFADD__(v19++, 1));
          v23 = (v18 + 2048) >> 12;
          if (v23 >= 255)
            v23 = 255;
          *(_BYTE *)(a6 + v16++) = v23 & ~(v23 >> 31);
          ++v17;
        }
        while (v16 != 12);
        ++v14;
        a6 += a5;
        v15 += 12;
      }
      while (v14 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DBA44(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  int v23;
  _BYTE v24[3408];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -6)
  {
    v6 = 0;
    v7 = a4 - 3 * a3 - 3;
    v8 = v24;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v12 += byte_1B6920C55[8 * (a2 & 3) - 8 + v11] * *(unsigned __int8 *)(v10 + v11);
          ++v11;
        }
        while (v11 != 8);
        *(_WORD *)&v8[2 * v9++] = v12;
        ++v10;
      }
      while (v9 != 24);
      v8 += 48;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 6);
    if ((int)result >= 1)
    {
      v14 = 0;
      v15 = (__int16 *)v24;
      do
      {
        v16 = 0;
        v17 = v15;
        do
        {
          v18 = 0;
          v19 = -8;
          v20 = v17;
          do
          {
            v21 = *v20;
            v20 += 24;
            v18 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v19] * v21;
          }
          while (!__CFADD__(v19++, 1));
          v23 = (v18 + 2048) >> 12;
          if (v23 >= 255)
            v23 = 255;
          *(_BYTE *)(a6 + v16++) = v23 & ~(v23 >> 31);
          ++v17;
        }
        while (v16 != 24);
        ++v14;
        a6 += a5;
        v15 += 24;
      }
      while (v14 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DBB98()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  int v23;
  _BYTE v24[6816];
  uint64_t v25;

  result = MEMORY[0x1E0C80A78]();
  v25 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -6)
  {
    v6 = 0;
    v7 = v3 - 3 * v2 - 3;
    v8 = v24;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v12 += byte_1B6920C55[8 * (v1 & 3) - 8 + v11] * *(unsigned __int8 *)(v10 + v11);
          ++v11;
        }
        while (v11 != 8);
        *(_WORD *)&v8[2 * v9++] = v12;
        ++v10;
      }
      while (v9 != 48);
      v8 += 96;
      v7 += v2;
    }
    while (v6++ != (_DWORD)result + 6);
    if ((int)result >= 1)
    {
      v14 = 0;
      v15 = (__int16 *)v24;
      do
      {
        v16 = 0;
        v17 = v15;
        do
        {
          v18 = 0;
          v19 = -8;
          v20 = v17;
          do
          {
            v21 = *v20;
            v20 += 48;
            v18 += byte_1B6920C55[8 * ((v1 >> 16) & 3) + v19] * v21;
          }
          while (!__CFADD__(v19++, 1));
          v23 = (v18 + 2048) >> 12;
          if (v23 >= 255)
            v23 = 255;
          *(_BYTE *)(v5 + v16++) = v23 & ~(v23 >> 31);
          ++v17;
        }
        while (v16 != 48);
        ++v14;
        v5 += v4;
        v15 += 48;
      }
      while (v14 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DBD04(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v15;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 2);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v13 = *v12;
          v12 += 2;
          v10 += byte_1B6920C6D[4 * (a2 & 7) + v11] * v13;
        }
        while (!__CFADD__(v11++, 1));
        v15 = (v10 + 32) >> 6;
        if (v15 >= 255)
          v15 = 255;
        *(_BYTE *)(a6 + v8++) = v15 & ~(v15 >> 31);
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DBD90(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v15;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 2);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v13 = *v12;
          v12 += 2;
          v10 += byte_1B6920C6D[4 * (a2 & 7) + v11] * v13;
        }
        while (!__CFADD__(v11++, 1));
        v15 = (v10 + 32) >> 6;
        if (v15 >= 255)
          v15 = 255;
        *(_BYTE *)(a6 + v8++) = v15 & ~(v15 >> 31);
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DBE1C(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v15;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 2);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v13 = *v12;
          v12 += 2;
          v10 += byte_1B6920C6D[4 * (a2 & 7) + v11] * v13;
        }
        while (!__CFADD__(v11++, 1));
        v15 = (v10 + 32) >> 6;
        if (v15 >= 255)
          v15 = 255;
        *(_BYTE *)(a6 + v8++) = v15 & ~(v15 >> 31);
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DBEA8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        v14 = (v10 + 32) >> 6;
        if (v14 >= 255)
          v14 = 255;
        *(_BYTE *)(a6 + v8++) = v14 & ~(v14 >> 31);
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DBF38(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        v14 = (v10 + 32) >> 6;
        if (v14 >= 255)
          v14 = 255;
        *(_BYTE *)(a6 + v8++) = v14 & ~(v14 >> 31);
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DBFC8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        v14 = (v10 + 32) >> 6;
        if (v14 >= 255)
          v14 = 255;
        *(_BYTE *)(a6 + v8++) = v14 & ~(v14 >> 31);
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC058(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  BOOL v15;
  int v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  int v25;
  _QWORD v26[202];

  v26[201] = *MEMORY[0x1E0C80C00];
  if ((int)result >= -2)
  {
    v6 = 0;
    v7 = a4 - a3 - 2;
    v8 = v26;
    do
    {
      v9 = 0;
      v10 = (unsigned __int8 *)v7;
      do
      {
        v11 = 0;
        v12 = -4;
        v13 = v10;
        do
        {
          v14 = *v13;
          v13 += 2;
          v11 += byte_1B6920C6D[4 * (a2 & 7) + v12] * v14;
          v15 = __CFADD__(v12++, 1);
        }
        while (!v15);
        *((_WORD *)v8 + v9++) = v11;
        ++v10;
      }
      while (v9 != 12);
      v8 += 3;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 2);
    if ((int)result >= 1)
    {
      v17 = 0;
      v18 = (__int16 *)v26;
      do
      {
        v19 = 0;
        v20 = v18;
        do
        {
          v21 = 0;
          v22 = -4;
          v23 = v20;
          do
          {
            v24 = *v23;
            v23 += 12;
            v21 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v22] * v24;
            v15 = __CFADD__(v22++, 1);
          }
          while (!v15);
          v25 = (v21 + 2048) >> 12;
          if (v25 >= 255)
            v25 = 255;
          *(_BYTE *)(a6 + v19++) = v25 & ~(v25 >> 31);
          ++v20;
        }
        while (v19 != 12);
        ++v17;
        a6 += a5;
        v18 += 12;
      }
      while (v17 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DC1A4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  BOOL v15;
  int v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  int v25;
  _BYTE v26[3216];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -2)
  {
    v6 = 0;
    v7 = a4 - a3 - 2;
    v8 = v26;
    do
    {
      v9 = 0;
      v10 = (unsigned __int8 *)v7;
      do
      {
        v11 = 0;
        v12 = -4;
        v13 = v10;
        do
        {
          v14 = *v13;
          v13 += 2;
          v11 += byte_1B6920C6D[4 * (a2 & 7) + v12] * v14;
          v15 = __CFADD__(v12++, 1);
        }
        while (!v15);
        *(_WORD *)&v8[2 * v9++] = v11;
        ++v10;
      }
      while (v9 != 24);
      v8 += 48;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 2);
    if ((int)result >= 1)
    {
      v17 = 0;
      v18 = (__int16 *)v26;
      do
      {
        v19 = 0;
        v20 = v18;
        do
        {
          v21 = 0;
          v22 = -4;
          v23 = v20;
          do
          {
            v24 = *v23;
            v23 += 24;
            v21 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v22] * v24;
            v15 = __CFADD__(v22++, 1);
          }
          while (!v15);
          v25 = (v21 + 2048) >> 12;
          if (v25 >= 255)
            v25 = 255;
          *(_BYTE *)(a6 + v19++) = v25 & ~(v25 >> 31);
          ++v20;
        }
        while (v19 != 24);
        ++v17;
        a6 += a5;
        v18 += 24;
      }
      while (v17 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DC2F0()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  BOOL v15;
  int v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  int v25;
  _BYTE v26[6432];
  uint64_t v27;

  result = MEMORY[0x1E0C80A78]();
  v27 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -2)
  {
    v6 = 0;
    v7 = v3 - v2 - 2;
    v8 = v26;
    do
    {
      v9 = 0;
      v10 = (unsigned __int8 *)v7;
      do
      {
        v11 = 0;
        v12 = -4;
        v13 = v10;
        do
        {
          v14 = *v13;
          v13 += 2;
          v11 += byte_1B6920C6D[4 * (v1 & 7) + v12] * v14;
          v15 = __CFADD__(v12++, 1);
        }
        while (!v15);
        *(_WORD *)&v8[2 * v9++] = v11;
        ++v10;
      }
      while (v9 != 48);
      v8 += 96;
      v7 += v2;
    }
    while (v6++ != (_DWORD)result + 2);
    if ((int)result >= 1)
    {
      v17 = 0;
      v18 = (__int16 *)v26;
      do
      {
        v19 = 0;
        v20 = v18;
        do
        {
          v21 = 0;
          v22 = -4;
          v23 = v20;
          do
          {
            v24 = *v23;
            v23 += 48;
            v21 += byte_1B6920C6D[4 * ((v1 >> 16) & 7) + v22] * v24;
            v15 = __CFADD__(v22++, 1);
          }
          while (!v15);
          v25 = (v21 + 2048) >> 12;
          if (v25 >= 255)
            v25 = 255;
          *(_BYTE *)(v5 + v19++) = v25 & ~(v25 >> 31);
          ++v20;
        }
        while (v19 != 48);
        ++v17;
        v5 += v4;
        v18 += 48;
      }
      while (v17 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DC454(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t i;

  if ((int)result >= 1)
  {
    v6 = 0;
    do
    {
      for (i = 0; i != 12; ++i)
        *(_WORD *)(a6 + 2 * i) = (*(unsigned __int8 *)(a4 + i) << 6) - 0x2000;
      ++v6;
      a4 += a3;
      a6 += 2 * a5;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC49C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t i;

  if ((int)result >= 1)
  {
    v6 = 0;
    do
    {
      for (i = 0; i != 24; ++i)
        *(_WORD *)(a6 + 2 * i) = (*(unsigned __int8 *)(a4 + i) << 6) - 0x2000;
      ++v6;
      a4 += a3;
      a6 += 2 * a5;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC4E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t i;

  if ((int)result >= 1)
  {
    v6 = 0;
    do
    {
      for (i = 0; i != 48; ++i)
        *(_WORD *)(a6 + 2 * i) = (*(unsigned __int8 *)(a4 + i) << 6) - 0x2000;
      ++v6;
      a4 += a3;
      a6 += 2 * a5;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC52C(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = a4 - 3;
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v11 += byte_1B6920C55[8 * (a2 & 3) - 8 + v10] * *(unsigned __int8 *)(v9 + v10);
          ++v10;
        }
        while (v10 != 8);
        *(_WORD *)(a6 + 2 * v8++) = v11 - 0x2000;
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC5A8(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = a4 - 3;
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v11 += byte_1B6920C55[8 * (a2 & 3) - 8 + v10] * *(unsigned __int8 *)(v9 + v10);
          ++v10;
        }
        while (v10 != 8);
        *(_WORD *)(a6 + 2 * v8++) = v11 - 0x2000;
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC624(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = a4 - 3;
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v11 += byte_1B6920C55[8 * (a2 & 3) - 8 + v10] * *(unsigned __int8 *)(v9 + v10);
          ++v10;
        }
        while (v10 != 8);
        *(_WORD *)(a6 + 2 * v8++) = v11 - 0x2000;
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC6A0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 3 * a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -8;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC720(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 3 * a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -8;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC7A0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 3 * a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -8;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DC820(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  _QWORD v23[214];

  v23[213] = *MEMORY[0x1E0C80C00];
  if ((int)result >= -6)
  {
    v6 = 0;
    v7 = a4 - 3 * a3 - 3;
    v8 = v23;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v12 += byte_1B6920C55[8 * (a2 & 3) - 8 + v11] * *(unsigned __int8 *)(v10 + v11);
          ++v11;
        }
        while (v11 != 8);
        *((_WORD *)v8 + v9++) = v12 - 0x2000;
        ++v10;
      }
      while (v9 != 12);
      v8 += 3;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 6);
    if ((int)result >= 1)
    {
      v14 = 0;
      v15 = (__int16 *)v23;
      do
      {
        v16 = 0;
        v17 = v15;
        do
        {
          v18 = 0;
          v19 = -8;
          v20 = v17;
          do
          {
            v21 = *v20;
            v20 += 12;
            v18 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v19] * v21;
          }
          while (!__CFADD__(v19++, 1));
          *(_WORD *)(a6 + 2 * v16++) = v18 >> 6;
          ++v17;
        }
        while (v16 != 12);
        ++v14;
        a6 += 2 * a5;
        v15 += 12;
      }
      while (v14 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DC964(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  _BYTE v23[3408];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -6)
  {
    v6 = 0;
    v7 = a4 - 3 * a3 - 3;
    v8 = v23;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v12 += byte_1B6920C55[8 * (a2 & 3) - 8 + v11] * *(unsigned __int8 *)(v10 + v11);
          ++v11;
        }
        while (v11 != 8);
        *(_WORD *)&v8[2 * v9++] = v12 - 0x2000;
        ++v10;
      }
      while (v9 != 24);
      v8 += 48;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 6);
    if ((int)result >= 1)
    {
      v14 = 0;
      v15 = (__int16 *)v23;
      do
      {
        v16 = 0;
        v17 = v15;
        do
        {
          v18 = 0;
          v19 = -8;
          v20 = v17;
          do
          {
            v21 = *v20;
            v20 += 24;
            v18 += byte_1B6920C55[8 * ((a2 >> 16) & 3) + v19] * v21;
          }
          while (!__CFADD__(v19++, 1));
          *(_WORD *)(a6 + 2 * v16++) = v18 >> 6;
          ++v17;
        }
        while (v16 != 24);
        ++v14;
        a6 += 2 * a5;
        v15 += 24;
      }
      while (v14 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DCAA8()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  _BYTE v23[6816];
  uint64_t v24;

  result = MEMORY[0x1E0C80A78]();
  v24 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -6)
  {
    v6 = 0;
    v7 = v3 - 3 * v2 - 3;
    v8 = v23;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v12 += byte_1B6920C55[8 * (v1 & 3) - 8 + v11] * *(unsigned __int8 *)(v10 + v11);
          ++v11;
        }
        while (v11 != 8);
        *(_WORD *)&v8[2 * v9++] = v12 - 0x2000;
        ++v10;
      }
      while (v9 != 48);
      v8 += 96;
      v7 += v2;
    }
    while (v6++ != (_DWORD)result + 6);
    if ((int)result >= 1)
    {
      v14 = 0;
      v15 = (__int16 *)v23;
      do
      {
        v16 = 0;
        v17 = v15;
        do
        {
          v18 = 0;
          v19 = -8;
          v20 = v17;
          do
          {
            v21 = *v20;
            v20 += 48;
            v18 += byte_1B6920C55[8 * ((v1 >> 16) & 3) + v19] * v21;
          }
          while (!__CFADD__(v19++, 1));
          *(_WORD *)(v5 + 2 * v16++) = v18 >> 6;
          ++v17;
        }
        while (v16 != 48);
        ++v14;
        v5 += 2 * v4;
        v15 += 48;
      }
      while (v14 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DCC04(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int16 v13;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 2);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v13 = *v12;
          v12 += 2;
          v10 += byte_1B6920C6D[4 * (a2 & 7) + v11] * v13;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DCC7C(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int16 v13;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 2);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v13 = *v12;
          v12 += 2;
          v10 += byte_1B6920C6D[4 * (a2 & 7) + v11] * v13;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DCCF4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int16 v13;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - 2);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v13 = *v12;
          v12 += 2;
          v10 += byte_1B6920C6D[4 * (a2 & 7) + v11] * v13;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DCD6C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 12);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DCDE8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 24);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DCE64(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((int)result >= 1)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a4 - a3);
    do
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = 0;
        v11 = -4;
        v12 = v9;
        do
        {
          v10 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v11] * *v12;
          v12 += a3;
        }
        while (!__CFADD__(v11++, 1));
        *(_WORD *)(a6 + 2 * v8++) = v10 - 0x2000;
        ++v9;
      }
      while (v8 != 48);
      ++v6;
      a6 += 2 * a5;
      v7 += a3;
    }
    while (v6 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DCEE0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  BOOL v15;
  int v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  _QWORD v25[202];

  v25[201] = *MEMORY[0x1E0C80C00];
  if ((int)result >= -2)
  {
    v6 = 0;
    v7 = a4 - a3 - 2;
    v8 = v25;
    do
    {
      v9 = 0;
      v10 = (unsigned __int8 *)v7;
      do
      {
        v11 = 0;
        v12 = -4;
        v13 = v10;
        do
        {
          v14 = *v13;
          v13 += 2;
          v11 += byte_1B6920C6D[4 * (a2 & 7) + v12] * v14;
          v15 = __CFADD__(v12++, 1);
        }
        while (!v15);
        *((_WORD *)v8 + v9++) = v11 - 0x2000;
        ++v10;
      }
      while (v9 != 12);
      v8 += 3;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 2);
    if ((int)result >= 1)
    {
      v17 = 0;
      v18 = (__int16 *)v25;
      do
      {
        v19 = 0;
        v20 = v18;
        do
        {
          v21 = 0;
          v22 = -4;
          v23 = v20;
          do
          {
            v24 = *v23;
            v23 += 12;
            v21 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v22] * v24;
            v15 = __CFADD__(v22++, 1);
          }
          while (!v15);
          *(_WORD *)(a6 + 2 * v19++) = v21 >> 6;
          ++v20;
        }
        while (v19 != 12);
        ++v17;
        a6 += 2 * a5;
        v18 += 12;
      }
      while (v17 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DD01C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  BOOL v15;
  int v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  _BYTE v25[3216];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -2)
  {
    v6 = 0;
    v7 = a4 - a3 - 2;
    v8 = v25;
    do
    {
      v9 = 0;
      v10 = (unsigned __int8 *)v7;
      do
      {
        v11 = 0;
        v12 = -4;
        v13 = v10;
        do
        {
          v14 = *v13;
          v13 += 2;
          v11 += byte_1B6920C6D[4 * (a2 & 7) + v12] * v14;
          v15 = __CFADD__(v12++, 1);
        }
        while (!v15);
        *(_WORD *)&v8[2 * v9++] = v11 - 0x2000;
        ++v10;
      }
      while (v9 != 24);
      v8 += 48;
      v7 += a3;
    }
    while (v6++ != (_DWORD)result + 2);
    if ((int)result >= 1)
    {
      v17 = 0;
      v18 = (__int16 *)v25;
      do
      {
        v19 = 0;
        v20 = v18;
        do
        {
          v21 = 0;
          v22 = -4;
          v23 = v20;
          do
          {
            v24 = *v23;
            v23 += 24;
            v21 += byte_1B6920C6D[4 * ((a2 >> 16) & 7) + v22] * v24;
            v15 = __CFADD__(v22++, 1);
          }
          while (!v15);
          *(_WORD *)(a6 + 2 * v19++) = v21 >> 6;
          ++v20;
        }
        while (v19 != 24);
        ++v17;
        a6 += 2 * a5;
        v18 += 24;
      }
      while (v17 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DD158()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  BOOL v15;
  int v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  _BYTE v25[6432];
  uint64_t v26;

  result = MEMORY[0x1E0C80A78]();
  v26 = *MEMORY[0x1E0C80C00];
  if ((int)result >= -2)
  {
    v6 = 0;
    v7 = v3 - v2 - 2;
    v8 = v25;
    do
    {
      v9 = 0;
      v10 = (unsigned __int8 *)v7;
      do
      {
        v11 = 0;
        v12 = -4;
        v13 = v10;
        do
        {
          v14 = *v13;
          v13 += 2;
          v11 += byte_1B6920C6D[4 * (v1 & 7) + v12] * v14;
          v15 = __CFADD__(v12++, 1);
        }
        while (!v15);
        *(_WORD *)&v8[2 * v9++] = v11 - 0x2000;
        ++v10;
      }
      while (v9 != 48);
      v8 += 96;
      v7 += v2;
    }
    while (v6++ != (_DWORD)result + 2);
    if ((int)result >= 1)
    {
      v17 = 0;
      v18 = (__int16 *)v25;
      do
      {
        v19 = 0;
        v20 = v18;
        do
        {
          v21 = 0;
          v22 = -4;
          v23 = v20;
          do
          {
            v24 = *v23;
            v23 += 48;
            v21 += byte_1B6920C6D[4 * ((v1 >> 16) & 7) + v22] * v24;
            v15 = __CFADD__(v22++, 1);
          }
          while (!v15);
          *(_WORD *)(v5 + 2 * v19++) = v21 >> 6;
          ++v20;
        }
        while (v19 != 48);
        ++v17;
        v5 += 2 * v4;
        v18 += 48;
      }
      while (v17 != (_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_1B67DD2AC(uint64_t result, int a2, __int16 *a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  __int16 *v9;
  __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;

  v7 = 1 << (a2 - 1);
  if (a2 <= 0)
    v7 = 0;
  if ((int)result >= 1)
  {
    v8 = 0;
    v9 = (__int16 *)(a5 + 2);
    do
    {
      v10 = v9;
      v11 = 1;
      do
      {
        v12 = ((v7 + (*(v10 - 1) + 0x2000) * *a3) >> a2) + *a4;
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v11 - 1) = v12 & ~(v12 >> 31);
        v13 = ((v7 + (*v10 + 0x2000) * a3[1]) >> a2) + a4[1];
        if (v13 >= 255)
          v13 = 255;
        *(_BYTE *)(a7 + v11) = v13 & ~(v13 >> 31);
        v14 = v11 - 1;
        v11 += 2;
        v10 += 2;
      }
      while (v14 < 0xA);
      ++v8;
      a7 += a6;
      v9 += 12;
    }
    while (v8 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD364(uint64_t result, int a2, __int16 *a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  __int16 *v9;
  __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;

  v7 = 1 << (a2 - 1);
  if (a2 <= 0)
    v7 = 0;
  if ((int)result >= 1)
  {
    v8 = 0;
    v9 = (__int16 *)(a5 + 2);
    do
    {
      v10 = v9;
      v11 = 1;
      do
      {
        v12 = ((v7 + (*(v10 - 1) + 0x2000) * *a3) >> a2) + *a4;
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v11 - 1) = v12 & ~(v12 >> 31);
        v13 = ((v7 + (*v10 + 0x2000) * a3[1]) >> a2) + a4[1];
        if (v13 >= 255)
          v13 = 255;
        *(_BYTE *)(a7 + v11) = v13 & ~(v13 >> 31);
        v14 = v11 - 1;
        v11 += 2;
        v10 += 2;
      }
      while (v14 < 0x16);
      ++v8;
      a7 += a6;
      v9 += 24;
    }
    while (v8 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD41C(uint64_t result, int a2, __int16 *a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  __int16 *v9;
  __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;

  v7 = 1 << (a2 - 1);
  if (a2 <= 0)
    v7 = 0;
  if ((int)result >= 1)
  {
    v8 = 0;
    v9 = (__int16 *)(a5 + 2);
    do
    {
      v10 = v9;
      v11 = 1;
      do
      {
        v12 = ((v7 + (*(v10 - 1) + 0x2000) * *a3) >> a2) + *a4;
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v11 - 1) = v12 & ~(v12 >> 31);
        v13 = ((v7 + (*v10 + 0x2000) * a3[1]) >> a2) + a4[1];
        if (v13 >= 255)
          v13 = 255;
        *(_BYTE *)(a7 + v11) = v13 & ~(v13 >> 31);
        v14 = v11 - 1;
        v11 += 2;
        v10 += 2;
      }
      while (v14 < 0x2E);
      ++v8;
      a7 += a6;
      v9 += 48;
    }
    while (v8 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD4D4(uint64_t result, char a2, __int16 *a3, __int16 *a4, uint64_t a5, __int16 *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << a2;
    v13 = a2 + 1;
    v14 = (a7[1] + a4[1] + 1) << a2;
    do
    {
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = (v12 + (*(__int16 *)(a5 + v15 - 2) + 0x2000) * *a3 + (*(__int16 *)(a8 + v15 - 2) + 0x2000) * *a6) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v16 - 1) = v17 & ~(v17 >> 31);
        v18 = (v14 + (*(__int16 *)(a5 + v15) + 0x2000) * a3[1] + (*(__int16 *)(a8 + v15) + 0x2000) * a6[1]) >> v13;
        if (v18 >= 255)
          v18 = 255;
        *(_BYTE *)(a10 + v16) = v18 & ~(v18 >> 31);
        v19 = v16 - 1;
        v16 += 2;
        v15 += 4;
      }
      while (v19 < 0xA);
      ++v10;
      a5 += 24;
      a8 += 24;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD5C8(uint64_t result, char a2, __int16 *a3, __int16 *a4, uint64_t a5, __int16 *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << a2;
    v13 = a2 + 1;
    v14 = (a7[1] + a4[1] + 1) << a2;
    do
    {
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = (v12 + (*(__int16 *)(a5 + v15 - 2) + 0x2000) * *a3 + (*(__int16 *)(a8 + v15 - 2) + 0x2000) * *a6) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v16 - 1) = v17 & ~(v17 >> 31);
        v18 = (v14 + (*(__int16 *)(a5 + v15) + 0x2000) * a3[1] + (*(__int16 *)(a8 + v15) + 0x2000) * a6[1]) >> v13;
        if (v18 >= 255)
          v18 = 255;
        *(_BYTE *)(a10 + v16) = v18 & ~(v18 >> 31);
        v19 = v16 - 1;
        v16 += 2;
        v15 += 4;
      }
      while (v19 < 0x16);
      ++v10;
      a5 += 48;
      a8 += 48;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD6BC(uint64_t result, char a2, __int16 *a3, __int16 *a4, uint64_t a5, __int16 *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << a2;
    v13 = a2 + 1;
    v14 = (a7[1] + a4[1] + 1) << a2;
    do
    {
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = (v12 + (*(__int16 *)(a5 + v15 - 2) + 0x2000) * *a3 + (*(__int16 *)(a8 + v15 - 2) + 0x2000) * *a6) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v16 - 1) = v17 & ~(v17 >> 31);
        v18 = (v14 + (*(__int16 *)(a5 + v15) + 0x2000) * a3[1] + (*(__int16 *)(a8 + v15) + 0x2000) * a6[1]) >> v13;
        if (v18 >= 255)
          v18 = 255;
        *(_BYTE *)(a10 + v16) = v18 & ~(v18 >> 31);
        v19 = v16 - 1;
        v16 += 2;
        v15 += 4;
      }
      while (v19 < 0x2E);
      ++v10;
      a5 += 96;
      a8 += 96;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD7B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t i;
  int v7;

  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      for (i = 0; i != 12; ++i)
      {
        v7 = (*(__int16 *)(a2 + 2 * i) + *(__int16 *)(a3 + 2 * i) + 16448) >> 7;
        if (v7 >= 255)
          v7 = 255;
        *(_BYTE *)(a5 + i) = v7 & ~(v7 >> 31);
      }
      ++v5;
      a2 += 24;
      a3 += 24;
      a5 += a4;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t i;
  int v7;

  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      for (i = 0; i != 24; ++i)
      {
        v7 = (*(__int16 *)(a2 + 2 * i) + *(__int16 *)(a3 + 2 * i) + 16448) >> 7;
        if (v7 >= 255)
          v7 = 255;
        *(_BYTE *)(a5 + i) = v7 & ~(v7 >> 31);
      }
      ++v5;
      a2 += 48;
      a3 += 48;
      a5 += a4;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD878(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t i;
  int v7;

  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      for (i = 0; i != 48; ++i)
      {
        v7 = (*(__int16 *)(a2 + 2 * i) + *(__int16 *)(a3 + 2 * i) + 16448) >> 7;
        if (v7 >= 255)
          v7 = 255;
        *(_BYTE *)(a5 + i) = v7 & ~(v7 >> 31);
      }
      ++v5;
      a2 += 96;
      a3 += 96;
      a5 += a4;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1B67DD8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v11;
  STACK[0x4038] = *MEMORY[0x1E0C80C00];
  v20 = byte_1B6920C45[(v19 >> 2) - 1];
  v22 = v11 + 512;
  v23 = v19;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t *))(v11
                                                                                        + 512
                                                                                        + (((unint64_t)((v21 & 3) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v21 & 0x30000) != 0) << 7))
                                                                                        + 8 * v20))(v16, v21, v24, v25, v19, &STACK[0x2020]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v22
                                                                                + (((unint64_t)((v15 & 3) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v15 & 0x30000) != 0) << 7))
                                                                                + 8 * v20))(v17, v15, v13, a9, v23, &v27);
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, uint64_t, uint64_t))(v18 + 8 * v20 + 1152))(v17, &STACK[0x2020], &v27, a10, a11);
}

uint64_t sub_1B67DDA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v11;
  STACK[0x2038] = *MEMORY[0x1E0C80C00];
  v20 = byte_1B6920C45[(v19 >> 1) - 1];
  v22 = v11 + 768;
  v23 = 2 * v19;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t *))(v11
                                                                                         + 768
                                                                                         + (((unint64_t)((v21 & 7) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v21 & 0x70000) != 0) << 7))
                                                                                         + 8 * v20))(v16, v21, v24, v25, v23, &STACK[0x1020]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v22
                                                                                + (((unint64_t)((v15 & 7) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v15 & 0x70000) != 0) << 7))
                                                                                + 8 * v20))(v17, v15, v13, a9, v23, &v27);
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, uint64_t, uint64_t))(v18 + 8 * v20 + 1152))(v17, &STACK[0x1020], &v27, a10, a11);
}

uint64_t sub_1B67DDB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _WORD v25[2];
  _WORD v26[2];
  uint64_t v27;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  STACK[0x2028] = *MEMORY[0x1E0C80C00];
  v22 = v11 + 8 * byte_1B6920C45[(v20 >> 2) - 1];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(v22
                                                                               + (((unint64_t)((v21 & 3) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v21 & 0x30000) != 0) << 7))
                                                                               + 512))(v18, v21, v23, a9, v20, &v27);
  v26[0] = v15;
  v26[1] = v15;
  v25[0] = v13;
  v25[1] = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t *, uint64_t, uint64_t))(v22 + 1024))(v19, v17, v26, v25, &v27, a10, a11);
}

uint64_t sub_1B67DDCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  STACK[0x1008] = *MEMORY[0x1E0C80C00];
  v22 = v11 + 8 * byte_1B6920C45[(v20 >> 1) - 1];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(v22
                                                                               + (((unint64_t)((v21 & 7) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v21 & 0x70000) != 0) << 7))
                                                                               + 768))(v18, v21, v23, a9, 2 * v20, &v25);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v22 + 1024))(v19, v17, v15, v13, &v25, a10, a11);
}

uint64_t sub_1B67DDDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _WORD vars0[2];
  _WORD vars0_4[2];
  _WORD vars8[2];
  _WORD vars8_4[2];

  v14 = MEMORY[0x1E0C80A78]();
  v16 = v15;
  v18 = v17;
  v36 = v19;
  v21 = v20;
  v22 = v14;
  v23 = a11;
  v24 = a10;
  v35 = a14;
  v34 = a13;
  v25 = a12;
  v26 = a9;
  STACK[0x4078] = *MEMORY[0x1E0C80C00];
  v28 = byte_1B6920C45[(v27 >> 2) - 1];
  v30 = v14 + 512;
  v31 = v27;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t *))(v14
                                                                                        + 512
                                                                                        + (((unint64_t)((v29 & 3) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v29 & 0x30000) != 0) << 7))
                                                                                        + 8 * v28))(v20, v29, v32, v26, v27, &STACK[0x2060]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v30
                                                                                + (((unint64_t)((v25 & 3) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v25 & 0x30000) != 0) << 7))
                                                                                + 8 * v28))(v21, v25, v34, v35, v31, &a9);
  vars8_4[0] = v18;
  vars8_4[1] = v18;
  vars8[0] = v16;
  vars8[1] = v16;
  vars0_4[0] = v24;
  vars0_4[1] = v24;
  vars0[0] = v23;
  vars0[1] = v23;
  return (*(uint64_t (**)(uint64_t, _QWORD, _WORD *, _WORD *, unint64_t *, _WORD *, _WORD *, uint64_t *))(v22 + 8 * v28 + 1088))(v21, v36, vars8_4, vars8, &STACK[0x2060], vars0_4, vars0, &a9);
}

uint64_t sub_1B67DDF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v14 = MEMORY[0x1E0C80A78]();
  v29 = v15;
  v30 = v16;
  v28 = v17;
  v19 = v18;
  v20 = v14;
  STACK[0x2058] = *MEMORY[0x1E0C80C00];
  v22 = byte_1B6920C45[(v21 >> 1) - 1];
  v24 = v14 + 768;
  v25 = 2 * v21;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t *))(v14
                                                                                         + 768
                                                                                         + (((unint64_t)((v23 & 7) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v23 & 0x70000) != 0) << 7))
                                                                                         + 8 * v22))(v18, v23, v26, a9, v25, &STACK[0x1040]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v24
                                                                                + (((unint64_t)((a12 & 7) != 0) << 6) | ((unint64_t)((a12 & 0x70000) != 0) << 7))
                                                                                + 8 * v22))(v19, a12, a13, a14, v25, &v31);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t *))(v20 + 8 * v22 + 1088))(v19, v28, v29, v30, &STACK[0x1040], a10, a11, &v31);
}

double sub_1B67DE0F4(int a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, _QWORD *a6)
{
  int v6;
  double result;
  uint64_t v8;

  v6 = a1 + 2;
  do
  {
    result = *a4;
    v8 = *(_QWORD *)((char *)a4 + 2 * a3);
    *a6 = *(_QWORD *)a4;
    *(_QWORD *)((char *)a6 + 2 * a5) = v8;
    a6 = (_QWORD *)((char *)a6 + 4 * a5);
    a4 = (double *)((char *)a4 + 4 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1B67DE130(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  int v6;
  int v7;

  v6 = result + 2;
  do
  {
    v7 = *(_DWORD *)((char *)a4 + a3);
    *a6 = *a4;
    *(_DWORD *)((char *)a6 + a5) = v7;
    a6 = (_DWORD *)((char *)a6 + a5 + a5);
    a4 = (_DWORD *)((char *)a4 + 2 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

__n128 sub_1B67DE164(int a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  int v6;
  __n128 result;
  __n128 v8;

  v6 = a1 + 2;
  do
  {
    result = *a4;
    v8 = *(__n128 *)((char *)a4 + 2 * a3);
    *a6 = *a4;
    *(__n128 *)((char *)a6 + 2 * a5) = v8;
    a6 = (__n128 *)((char *)a6 + 4 * a5);
    a4 = (__n128 *)((char *)a4 + 4 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

double sub_1B67DE1A0(int a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  int v6;
  double v11;
  double result;
  uint64_t v20;

  v6 = a1 + 2;
  do
  {
    _X11 = (char *)a4 + 4 * a3;
    _X12 = (uint64_t *)((char *)a4 + a3);
    _X13 = (char *)a4 + 5 * a3;
    v11 = *a4;
    _X3 = (char *)a4 + 15;
    result = v11;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    a4 = (double *)((char *)_X12 + a3);
    v20 = *_X12;
    _X12 = (uint64_t *)((char *)_X12 + 15);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    *a6 = result;
    *(_QWORD *)((char *)a6 + a5) = v20;
    a6 = (double *)((char *)a6 + a5 + a5);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1B67DE1FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v7;
  char v8;
  _OWORD *v9;
  int v10;
  _OWORD *v11;
  __int128 v12;

  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = (_OWORD *)(a4 + 2 * v6);
    v10 = result + 2;
    v11 = (_OWORD *)(a6 + 2 * v6);
    do
    {
      v12 = *(_OWORD *)((char *)v9 + 2 * a3);
      *v11 = *v9;
      *(_OWORD *)((char *)v11 + 2 * a5) = v12;
      v11 = (_OWORD *)((char *)v11 + 4 * a5);
      v9 = (_OWORD *)((char *)v9 + 4 * a3);
      v10 -= 2;
    }
    while (v10 > 2);
    v7 = 0;
    v6 = 8;
  }
  while ((v8 & 1) != 0);
  return result;
}

char *sub_1B67DE25C(int a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, _OWORD *a6)
{
  int v6;
  char *v10;
  __int128 v15;
  __int128 v16;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *result;
  __int128 v31;
  __int128 v32;
  __int128 v36;
  _OWORD *v40;

  v6 = a1 + 4;
  do
  {
    _X15 = &a4[4 * a3];
    _X16 = &a4[a3];
    _X17 = &a4[5 * a3];
    v10 = &a4[2 * a3];
    _X1 = &a4[6 * a3];
    _X6 = &a4[3 * a3];
    _X7 = &a4[7 * a3];
    v15 = *(_OWORD *)a4;
    _X3 = a4 + 31;
    v16 = v15;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    v24 = &_X16[2 * a3];
    v25 = *(_OWORD *)_X16;
    _X16 += 31;
    v26 = v25;
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0xF]
    }
    v31 = *(_OWORD *)v10;
    result = v10 + 31;
    v32 = v31;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#0xF]
    }
    v36 = *(_OWORD *)_X6;
    _X6 += 31;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0xF]
    }
    a4 = &v24[a3];
    *a6 = v16;
    *(_OWORD *)((char *)a6 + a5) = v26;
    v40 = (_OWORD *)((char *)a6 + a5 + a5);
    *v40 = v32;
    a6 = (_OWORD *)((char *)v40 + a5 + a5);
    v6 -= 4;
    *(_OWORD *)((char *)v40 + a5) = v36;
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1B67DE314(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  unint64_t v6;
  int v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  BOOL v11;

  v6 = 0;
  do
  {
    v7 = result + 2;
    v8 = a4;
    v9 = a6;
    do
    {
      v10 = *(_OWORD *)((char *)v8 + 2 * a3);
      *v9 = *v8;
      *(_OWORD *)((char *)v9 + 2 * a5) = v10;
      v9 = (_OWORD *)((char *)v9 + 4 * a5);
      v8 = (_OWORD *)((char *)v8 + 4 * a3);
      v7 -= 2;
    }
    while (v7 > 2);
    ++a6;
    ++a4;
    v11 = v6 >= 0x18;
    v6 += 8;
  }
  while (!v11);
  return result;
}

__n128 sub_1B67DE378(int a1, uint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, char *a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v20;
  __int128 v21;
  __int128 v27;
  __int128 v28;
  __int128 v34;
  __int128 v35;
  char *v40;
  char *v41;
  char *v42;

  v6 = 3 * a3;
  v7 = a1 + 4;
  v8 = 2 * a3;
  do
  {
    result = *(__n128 *)_X3;
    v10 = *(_OWORD *)(_X3 + 16);
    __asm { PRFUM           #0, [X3,#0x3F] }
    _X15 = _X3 + 4 * a3 + 31;
    __asm
    {
      PRFUM           #0, [X15,#-0x1F]
      PRFM            #0, [X15]
    }
    _X15 = _X3 + a3;
    v20 = *(_OWORD *)(_X3 + a3);
    v21 = *(_OWORD *)(_X3 + a3 + 16);
    __asm { PRFUM           #0, [X15,#0x3F] }
    _X16 = _X3 + 5 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0x1F]
    }
    _X16 = _X3 + v8;
    v27 = *(_OWORD *)(_X3 + 2 * a3);
    v28 = *(_OWORD *)(_X3 + v8 + 16);
    __asm { PRFUM           #0, [X16,#0x3F] }
    _X16 = _X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0x1F]
    }
    _X16 = _X3 + v6;
    v34 = *(_OWORD *)(_X3 + 3 * a3);
    v35 = *(_OWORD *)(_X3 + v6 + 16);
    __asm { PRFUM           #0, [X16,#0x3F] }
    _X16 = _X3 + 7 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0x1F]
    }
    _X3 += a3 + 2 * a3 + a3;
    *(__n128 *)a6 = result;
    *((_OWORD *)a6 + 1) = v10;
    v40 = &a6[a5];
    *(_OWORD *)v40 = v20;
    *((_OWORD *)v40 + 1) = v21;
    v41 = &a6[a5 + a5];
    *(_OWORD *)v41 = v27;
    *((_OWORD *)v41 + 1) = v28;
    v42 = &v41[a5];
    a6 = &v42[a5];
    v7 -= 4;
    *(_OWORD *)v42 = v34;
    *((_OWORD *)v42 + 1) = v35;
  }
  while (v7 > 4);
  return result;
}

uint64_t sub_1B67DE434(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  unint64_t v6;
  int v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  BOOL v11;

  v6 = 0;
  do
  {
    v7 = result + 2;
    v8 = a4;
    v9 = a6;
    do
    {
      v10 = *(_OWORD *)((char *)v8 + 2 * a3);
      *v9 = *v8;
      *(_OWORD *)((char *)v9 + 2 * a5) = v10;
      v9 = (_OWORD *)((char *)v9 + 4 * a5);
      v8 = (_OWORD *)((char *)v8 + 4 * a3);
      v7 -= 2;
    }
    while (v7 > 2);
    ++a6;
    ++a4;
    v11 = v6 >= 0x38;
    v6 += 8;
  }
  while (!v11);
  return result;
}

__n128 sub_1B67DE498(int a1, uint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, uint64_t a6)
{
  int v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v28;

  v6 = a1 + 2;
  do
  {
    result = *(__n128 *)_X3;
    v8 = *(_OWORD *)(_X3 + 16);
    v9 = *(_OWORD *)(_X3 + 32);
    v10 = *(_OWORD *)(_X3 + 48);
    __asm { PRFUM           #0, [X3,#0x7F] }
    _X11 = _X3 + 4 * a3;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0x3F]
    }
    _X11 = _X3 + a3;
    v20 = *(_OWORD *)(_X3 + a3);
    v21 = *(_OWORD *)(_X3 + a3 + 16);
    v22 = *(_OWORD *)(_X3 + a3 + 32);
    v23 = *(_OWORD *)(_X3 + a3 + 48);
    __asm { PRFUM           #0, [X11,#0x7F] }
    _X12 = _X3 + 5 * a3;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x3F]
    }
    _X3 += a3 + a3;
    *(__n128 *)a6 = result;
    *(_OWORD *)(a6 + 16) = v8;
    *(_OWORD *)(a6 + 32) = v9;
    *(_OWORD *)(a6 + 48) = v10;
    v28 = (_OWORD *)(a6 + a5);
    *v28 = v20;
    v28[1] = v21;
    a6 += a5 + a5;
    v6 -= 2;
    v28[2] = v22;
    v28[3] = v23;
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1B67DE504(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x4_t *a6)
{
  int16x8_t v6;
  int v8;
  int16x4_t v9;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6);
  v8 = result + 1;
  do
  {
    v9 = (int16x4_t)_X8[1];
    __asm { PRFUM           #0, [X8,#0x1E] }
    _X13 = &_X8[a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x4_t)*_X8, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 6uLL),
                                    *(int16x4_t *)v6.i8,
                                    3),
                                  v9,
                                  v6,
                                  4),
                                (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 2uLL),
                                v6,
                                5),
                              (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 4uLL),
                              v6,
                              6),
                            (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 6uLL),
                            v6,
                            7),
                          6uLL),
            (uint16x4_t)0xFC00FC00FC00FC00);
    --v8;
    _X8 = (int8x8_t *)((char *)_X8 + 2 * a3);
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v8 > 1);
  return result;
}

uint64_t sub_1B67DE5A4(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6;
  int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int8x16_t v16;

  v6 = qword_1B6920C90[(a2 & 3) - 1];
  v7 = result + 1;
  v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X10 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X10,#-3]
      PRFUM           #0, [X10,#0xC]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9), *(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 3uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 6uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 5uLL),
                           v13),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 7uLL),
                         v15),
            6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1B67DE650(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int v16;
  int8x16_t v17;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  v7 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v8 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  v9 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v10 = vdupq_laneq_s16(v6, 5);
  v11 = vdupq_laneq_s16(v6, 6);
  v12 = vdupq_laneq_s16(v6, 7);
  v13 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  v14 = vdupq_laneq_s16(v6, 4);
  _X8 = (int8x16_t *)(a4 - 6);
  v16 = result + 1;
  do
  {
    v17 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x2E] }
    _X13 = &_X8->i8[8 * a3];
    v24 = (int16x8_t)vextq_s8(*_X8, v17, 8uLL);
    v25 = (int16x8_t)vextq_s8(*_X8, v17, 0xEuLL);
    v26 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v17, 2uLL), v8), (int16x8_t)vextq_s8(*_X8, v17, 4uLL), v9), (int16x8_t)vextq_s8(*_X8, v17, 0xAuLL), v10), (int16x8_t)vextq_s8(*_X8, v17, 0xCuLL), v11);
    v27 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v17, 6uLL), v13);
    v28 = vmlaq_s16(v26, v25, v12);
    v29 = (uint16x8_t)vmulq_s16(v24, v14);
    v30 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v27.i8);
    v31 = (int32x4_t)vaddl_high_u16(v27, v29);
    *(uint16x4_t *)v27.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16(v30, *(int16x4_t *)v28.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v27.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v31, v28), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    *a6 = v27;
    --v16;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (uint16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v16 > 1);
  return result;
}

uint64_t sub_1B67DE72C(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6;
  int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int8x16_t v16;

  v6 = qword_1B6920C90[(a2 & 3) - 1];
  v7 = result + 1;
  v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X10 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X10,#-3]
      PRFUM           #0, [X10,#0xC]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9), *(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 3uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 6uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 5uLL),
                           v13),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 7uLL),
                         v15),
            6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1B67DE7D8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  sub_1B67DE650(a1, a2, a3, a4, a5, a6);
  return sub_1B67DE650(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67DE838(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B67E7B7C(16, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B67DE85C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67DE650(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67DE8D8(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B67E7B7C(32, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B67DE8FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67DE650(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67DE978(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B67E7B7C(64, a1, a2, a3, a4, a5, a6);
}

char *sub_1B67DE99C(int a1, unint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, uint16x4_t *a6)
{
  int16x8_t v7;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v25;
  int16x4_t v26;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int16x4_t *v48;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x4_t v60;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x4_t v66;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  char *result;
  int16x4_t v73;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  uint16x4_t *v82;
  uint16x4_t *v83;

  _X9 = (int16x4_t *)((char *)a4 - 6 * a3);
  v7 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  _X8 = (int16x4_t *)((char *)a4 - 4 * a3);
  v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  v10 = v9;
  v11 = *_X8;
  _X8 = (int16x4_t *)((char *)_X8 + 14);
  v12 = v11;
  _X10 = (int16x4_t *)((char *)a4 - 2 * a3);
  v14 = *_X10;
  _X10 = (int16x4_t *)((char *)_X10 + 14);
  v15 = v14;
  _X13 = (int16x4_t *)((char *)a4 + 2 * a3);
  _X11 = (char *)&a4[1] + 6;
  v18 = *a4;
  v19 = *_X13;
  _X13 = (int16x4_t *)((char *)_X13 + 14);
  v20 = v19;
  _X14 = (int16x4_t *)((char *)a4 + 4 * a3);
  v22 = *_X14;
  _X14 = (int16x4_t *)((char *)_X14 + 14);
  v23 = v22;
  _X15 = (int16x4_t *)((char *)a4 + 6 * a3);
  v25 = *_X15;
  _X15 = (int16x4_t *)((char *)_X15 + 14);
  v26 = v25;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X13]
    PRFM            #0, [X14]
    PRFM            #0, [X15]
  }
  v38 = a1 + 4;
  v39 = 3 * a3;
  v40 = 8 * a3;
  v41 = 22 * a3;
  v42 = 12 * a3;
  v43 = 10 * a3;
  v44 = 2 * a5;
  v45 = 14 * a3;
  do
  {
    _X2 = (int16x4_t *)((char *)a4 + v43);
    _X1 = (int16x4_t *)((char *)a4 + v42);
    v48 = (int16x4_t *)((char *)a4 + v45);
    _X16 = (char *)a4 + v41;
    _X17 = &a4[v39];
    a4 = (int16x4_t *)((char *)a4 + v40);
    v51 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v7.i8, 1), v10, *(int16x4_t *)v7.i8, 0), v15, *(int16x4_t *)v7.i8, 2), v18, *(int16x4_t *)v7.i8, 3);
    v52 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v15, *(int16x4_t *)v7.i8, 1), v12, *(int16x4_t *)v7.i8, 0), v18, *(int16x4_t *)v7.i8, 2);
    v53 = vmull_lane_s16(v18, *(int16x4_t *)v7.i8, 1);
    v54 = vmlal_lane_s16(vmull_lane_s16(v20, *(int16x4_t *)v7.i8, 1), v18, *(int16x4_t *)v7.i8, 0);
    _X4 = (char *)&a4[1] + 6;
    v18 = *a4;
    __asm { PRFM            #0, [X4] }
    v57 = vmlal_laneq_s16(v51, v20, v7, 4);
    v58 = vmlal_lane_s16(v52, v20, *(int16x4_t *)v7.i8, 3);
    v59 = vmlal_lane_s16(vmlal_lane_s16(v53, v15, *(int16x4_t *)v7.i8, 0), v20, *(int16x4_t *)v7.i8, 2);
    v10 = v20;
    v60 = *_X2;
    _X2 = (int16x4_t *)((char *)_X2 + 14);
    v20 = v60;
    __asm { PRFM            #0, [X2] }
    v62 = vmlal_laneq_s16(v57, v23, v7, 5);
    v63 = vmlal_laneq_s16(v58, v23, v7, 4);
    v64 = vmlal_lane_s16(v59, v23, *(int16x4_t *)v7.i8, 3);
    v65 = vmlal_lane_s16(v54, v23, *(int16x4_t *)v7.i8, 2);
    v12 = v23;
    v66 = *_X1;
    _X1 = (int16x4_t *)((char *)_X1 + 14);
    v23 = v66;
    __asm { PRFM            #0, [X1] }
    v68 = vmlal_laneq_s16(v62, v26, v7, 6);
    v69 = vmlal_laneq_s16(v63, v26, v7, 5);
    v70 = vmlal_laneq_s16(v64, v26, v7, 4);
    v71 = vmlal_lane_s16(v65, v26, *(int16x4_t *)v7.i8, 3);
    v15 = v26;
    v73 = *v48;
    result = (char *)&v48[1] + 6;
    v26 = v73;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#6]
      PRFUM           #0, [X17,#6]
    }
    v79 = vmlal_laneq_s16(vmlal_laneq_s16(v69, *a4, v7, 6), v20, v7, 7);
    v80 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v70, *a4, v7, 5), v20, v7, 6), v23, v7, 7);
    v81 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v71, *a4, v7, 4), v20, v7, 5), v23, v7, 6), v73, v7, 7);
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v68, *a4, v7, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(uint16x4_t *)((char *)a6 + v44) = vmin_u16((uint16x4_t)vqrshrun_n_s32(v79, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v82 = (uint16x4_t *)((char *)a6 + v44 + v44);
    *v82 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v80, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v83 = (uint16x4_t *)((char *)v82 + v44);
    *v83 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v81, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v38 -= 4;
    a6 = (uint16x4_t *)((char *)v83 + v44);
  }
  while (v38 > 4);
  return result;
}

uint8x8_t sub_1B67DEB60(int a1, unint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, _DWORD *a6)
{
  double v9;
  uint8x8_t result;
  int8x8_t v11;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t *v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v35;
  double v42;
  double v43;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v55;
  uint8x8_t v56;
  uint64_t v57;
  int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  uint8x8_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  uint8x8_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  double v95;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x8_t v103;
  uint16x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint8x8_t v110;
  int16x8_t v114;
  int16x8_t v115;
  _DWORD *v116;
  _DWORD *v117;

  _X8 = (uint8x8_t *)((char *)a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X8 + a3);
  v9 = *(double *)_X8;
  _X8 = (uint8x8_t *)((char *)_X8 + 15);
  *(double *)&result = v9;
  v11 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  v21 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  v27 = (uint8x8_t *)((char *)_X9 + a3);
  v28 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)v27 + 4 * a3;
  _X9 = (char *)&v27[1] + 7;
  v35 = *v27;
  _X10 = (uint8x8_t *)((char *)v27 + a3);
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  v42 = *(double *)_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v43 = v42;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  v49 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  v50 = v49;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X11 = (char *)_X10 + 4 * a3;
  v55 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v56 = v55;
  v57 = 4 * a3;
  __asm { PRFM            #0, [X10] }
  v59 = a1 + 4;
  v60 = 11 * a3;
  __asm
  {
    PRFM            #0, [X11]
    PRFUM           #0, [X11,#7]
  }
  v63 = a3;
  v64 = 7 * a3;
  v65 = 5 * a3;
  v66 = 10 * a3;
  v67 = (uint8x8_t)vdup_lane_s8(v11, 1);
  v68 = 6 * a3;
  v69 = (uint8x8_t)vdup_lane_s8(v11, 0);
  v70 = 9 * a3;
  v71 = (uint8x8_t)vdup_lane_s8(v11, 2);
  v72 = (uint8x8_t)vdup_lane_s8(v11, 3);
  v73 = (uint8x8_t)vdup_lane_s8(v11, 4);
  v74 = (uint8x8_t)vdup_lane_s8(v11, 5);
  v75 = (uint8x8_t)vdup_lane_s8(v11, 6);
  v76 = (uint8x8_t)vdup_lane_s8(v11, 7);
  do
  {
    _X0 = &a4[v63];
    _X17 = (uint8x8_t *)((char *)a4 + v65);
    _X2 = (char *)a4 + v70;
    _X1 = (uint8x8_t *)((char *)a4 + v68);
    _X19 = (char *)a4 + v66;
    _X7 = (uint8x8_t *)((char *)a4 + v64);
    _X20 = (char *)a4 + v60;
    a4 = (uint8x8_t *)((char *)a4 + v57);
    v84 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v22, v67), result, v69), v29, v71), v35, v72);
    v85 = vmlsl_u8(vmlsl_u8(vmull_u8(v29, v67), v22, v69), v35, v71);
    v86 = vmull_u8(v35, v67);
    v87 = vmlsl_u8(vmull_u8(*(uint8x8_t *)&v43, v67), v35, v69);
    _X6 = (char *)&a4[1] + 7;
    v35 = *a4;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X0]
      PRFUM           #0, [X0,#7]
    }
    v92 = vmlal_u8(v84, *(uint8x8_t *)&v43, v73);
    v93 = vmlal_u8(v85, *(uint8x8_t *)&v43, v72);
    v94 = vmlsl_u8(vmlsl_u8(v86, v29, v69), *(uint8x8_t *)&v43, v71);
    *(double *)&result = v43;
    v95 = *(double *)_X17;
    _X17 = (uint8x8_t *)((char *)_X17 + 15);
    v43 = v95;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X2]
      PRFUM           #0, [X2,#7]
    }
    v99 = vmlsl_u8(vmlal_u8(v92, v56, v75), v50, v74);
    v100 = vmlal_u8(v93, v50, v73);
    v101 = vmlal_u8(v94, v50, v72);
    v102 = vmlsl_u8(v87, v50, v71);
    v22 = v50;
    v103 = *_X1;
    _X1 = (uint8x8_t *)((char *)_X1 + 15);
    v50 = v103;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#7]
    }
    v107 = vmlsl_u8(vmlal_u8(v100, *a4, v75), v56, v74);
    v108 = vmlal_u8(v101, v56, v73);
    v109 = vmlal_u8(v102, v56, v72);
    v29 = v56;
    v110 = *_X7;
    _X7 = (uint8x8_t *)((char *)_X7 + 15);
    v56 = v110;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#7]
    }
    v114 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v108, *(uint8x8_t *)&v43, v75), *a4, v74), v50, v76);
    v115 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v109, *a4, v73), v50, v75), *(uint8x8_t *)&v43, v74), v110, v76);
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v99, *a4, v76), 6uLL).u32[0];
    *(_DWORD *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v107, *(uint8x8_t *)&v43, v76), 6uLL).u32[0];
    v116 = (_DWORD *)((char *)a6 + a5 + a5);
    *v116 = vqrshrun_n_s16(v114, 6uLL).u32[0];
    v117 = (_DWORD *)((char *)v116 + a5);
    a6 = (_DWORD *)((char *)v117 + a5);
    v59 -= 4;
    *v117 = vqrshrun_n_s16(v115, 6uLL).u32[0];
  }
  while (v59 > 4);
  return result;
}

int16x8_t sub_1B67DEDA8(int a1, unint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  int16x8_t v6;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v14;
  int16x8_t result;
  int16x8_t v17;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v42;
  int v43;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;

  v6 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  _X8 = &a4->i8[-6 * a3];
  v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  v9 = v8;
  _X10 = &a4->i8[-4 * a3];
  v11 = *(int16x8_t *)_X10;
  _X10 += 30;
  v12 = v11;
  _X11 = &a4->i8[-2 * a3];
  v14 = *(int16x8_t *)_X11;
  _X11 += 30;
  result = v14;
  _X12 = &a4[1].i8[14];
  v17 = *a4;
  _X13 = &a4->i8[2 * a3];
  v19 = *(int16x8_t *)_X13;
  _X13 += 30;
  v20 = v19;
  _X14 = &a4->i8[4 * a3];
  v22 = *(int16x8_t *)_X14;
  _X14 += 30;
  v23 = v22;
  _X15 = &a4->i8[6 * a3];
  v25 = *(int16x8_t *)_X15;
  _X15 += 30;
  v26 = v25;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X12]
    PRFM            #0, [X13]
  }
  v36 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v37 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  v38 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v39 = vdupq_laneq_s16(v6, 5);
  v40 = vdupq_laneq_s16(v6, 6);
  __asm { PRFM            #0, [X14] }
  v42 = vdupq_laneq_s16(v6, 7);
  v43 = a1 + 2;
  __asm { PRFM            #0, [X15] }
  v45 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  v46 = vdupq_laneq_s16(v6, 4);
  do
  {
    v47 = result;
    v48 = v17;
    result = v20;
    v17 = v23;
    v20 = v26;
    _X16 = (uint64_t)&a4[1].i64[a3 + 1] + 6;
    v23 = *(int16x8_t *)((char *)a4 + 8 * a3);
    __asm { PRFM            #0, [X16] }
    _X17 = (uint64_t)&a4[1].i64[1] + 10 * a3 + 6;
    v26 = *(int16x8_t *)((char *)a4 + 10 * a3);
    __asm { PRFM            #0, [X17] }
    _X16 = &a4->i8[18 * a3];
    _X17 = &a4->i8[20 * a3];
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X17,#0xE]
    }
    v59 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v40), v17, v39), v47, v38), v12, v37), v9, v36);
    v60 = (uint16x8_t)vmulq_s16(v48, v45);
    v61 = (uint16x8_t)vmulq_s16(result, v46);
    v62 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v61.i8);
    v63 = vmlaq_s16(v59, v23, v42);
    v64 = (int32x4_t)vaddl_high_u16(v60, v61);
    v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v39), v48, v38), v47, v37), v12, v36);
    v66 = vaddw_s16(v62, *(int16x4_t *)v63.i8);
    v67 = vmlaq_s16(vmlaq_s16(v65, v23, v40), v26, v42);
    v68 = (uint16x8_t)vmulq_s16(result, v45);
    v69 = (uint16x8_t)vmulq_s16(v17, v46);
    *(uint16x4_t *)v66.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v66, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v66.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v64, v63), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *a6 = v66;
    *(uint16x4_t *)v66.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v68.i8, *(uint16x4_t *)v69.i8), *(int16x4_t *)v67.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v66.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v68, v69), v67), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v66;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v43 -= 2;
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    v12 = v48;
    v9 = v47;
  }
  while (v43 > 2);
  return result;
}

char *sub_1B67DEF54(int a1, unint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, int8x8_t *a6)
{
  uint8x8_t v9;
  uint8x8_t v10;
  int8x8_t v11;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t *v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v35;
  uint8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v55;
  uint8x8_t v56;
  uint64_t v57;
  int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  uint8x8_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  uint8x8_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint8x8_t *v82;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint8x8_t v95;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x8_t v103;
  uint16x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  char *result;
  uint8x8_t v111;
  int8x8_t *v115;
  int8x8_t *v116;

  _X8 = (uint8x8_t *)((char *)a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X8 + a3);
  v9 = *_X8;
  _X8 = (uint8x8_t *)((char *)_X8 + 15);
  v10 = v9;
  v11 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  v21 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  v27 = (uint8x8_t *)((char *)_X9 + a3);
  v28 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)v27 + 4 * a3;
  _X9 = (char *)&v27[1] + 7;
  v35 = *v27;
  _X10 = (uint8x8_t *)((char *)v27 + a3);
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  v42 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v43 = v42;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  v49 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  v50 = v49;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X11 = (char *)_X10 + 4 * a3;
  v55 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v56 = v55;
  v57 = 4 * a3;
  __asm { PRFM            #0, [X10] }
  v59 = a1 + 4;
  v60 = 11 * a3;
  __asm
  {
    PRFM            #0, [X11]
    PRFUM           #0, [X11,#7]
  }
  v63 = a3;
  v64 = 7 * a3;
  v65 = 5 * a3;
  v66 = 10 * a3;
  v67 = (uint8x8_t)vdup_lane_s8(v11, 1);
  v68 = 6 * a3;
  v69 = (uint8x8_t)vdup_lane_s8(v11, 0);
  v70 = 9 * a3;
  v71 = (uint8x8_t)vdup_lane_s8(v11, 2);
  v72 = (uint8x8_t)vdup_lane_s8(v11, 3);
  v73 = (uint8x8_t)vdup_lane_s8(v11, 4);
  v74 = (uint8x8_t)vdup_lane_s8(v11, 5);
  v75 = (uint8x8_t)vdup_lane_s8(v11, 6);
  v76 = (uint8x8_t)vdup_lane_s8(v11, 7);
  do
  {
    _X19 = &a4[v63];
    _X7 = (uint8x8_t *)((char *)a4 + v65);
    _X6 = (char *)a4 + v70;
    _X2 = (uint8x8_t *)((char *)a4 + v68);
    _X1 = (char *)a4 + v66;
    v82 = (uint8x8_t *)((char *)a4 + v64);
    _X17 = (char *)a4 + v60;
    a4 = (uint8x8_t *)((char *)a4 + v57);
    v84 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v22, v67), v10, v69), v29, v71), v35, v72);
    v85 = vmlsl_u8(vmlsl_u8(vmull_u8(v29, v67), v22, v69), v35, v71);
    v86 = vmull_u8(v35, v67);
    v87 = vmlsl_u8(vmull_u8(v43, v67), v35, v69);
    _X20 = (char *)&a4[1] + 7;
    v35 = *a4;
    __asm
    {
      PRFM            #0, [X20]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#7]
    }
    v92 = vmlal_u8(v84, v43, v73);
    v93 = vmlal_u8(v85, v43, v72);
    v94 = vmlsl_u8(vmlsl_u8(v86, v29, v69), v43, v71);
    v10 = v43;
    v95 = *_X7;
    _X7 = (uint8x8_t *)((char *)_X7 + 15);
    v43 = v95;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X6]
      PRFUM           #0, [X6,#7]
    }
    v99 = vmlsl_u8(vmlal_u8(v92, v56, v75), v50, v74);
    v100 = vmlal_u8(v93, v50, v73);
    v101 = vmlal_u8(v94, v50, v72);
    v102 = vmlsl_u8(v87, v50, v71);
    v22 = v50;
    v103 = *_X2;
    _X2 = (uint8x8_t *)((char *)_X2 + 15);
    v50 = v103;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#7]
    }
    v107 = vmlsl_u8(vmlal_u8(v100, *a4, v75), v56, v74);
    v108 = vmlal_u8(v101, v56, v73);
    v109 = vmlal_u8(v102, v56, v72);
    v29 = v56;
    v111 = *v82;
    result = (char *)&v82[1] + 7;
    v56 = v111;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#7]
    }
    *(int8x8_t *)v108.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v108, v43, v75), *a4, v74), v50, v76), 6uLL);
    *(int8x8_t *)v109.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v109, *a4, v73), v50, v75), v43, v74), v111, v76), 6uLL);
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v99, *a4, v76), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v107, v43, v76), 6uLL);
    v115 = (int8x8_t *)((char *)a6 + a5 + a5);
    *v115 = *(int8x8_t *)v108.i8;
    v116 = (int8x8_t *)((char *)v115 + a5);
    *v116 = *(int8x8_t *)v109.i8;
    a6 = (int8x8_t *)((char *)v116 + a5);
    v59 -= 4;
  }
  while (v59 > 4);
  return result;
}

double sub_1B67DF19C(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67DEDA8(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67DEDA8(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

uint8x16_t sub_1B67DF1FC(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v42;
  uint8x16_t result;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v55;
  uint8x16_t v56;
  int v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;

  v6 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  _X8 = (_OWORD *)(a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  v10 = *(uint8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v11 = v10;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  v21 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  v28 = *(uint8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  v35 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v36 = v35;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  v42 = *(uint8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  result = v42;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  v49 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v50 = v49;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  v55 = *(uint8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  v56 = v55;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v60 = a1 + 2;
  v61 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v62 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v63 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v64 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  v65 = (uint8x16_t)vdupq_lane_s8(v6, 4);
  v66 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  v67 = (uint8x16_t)vdupq_lane_s8(v6, 6);
  v68 = (uint8x16_t)vdupq_lane_s8(v6, 7);
  do
  {
    v69 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v62.i8), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v61.i8);
    v70 = vmlsl_high_u8(vmull_high_u8(v29, v62), v22, v61);
    v71 = vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v62.i8), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v63.i8);
    v72 = vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v22, v62), v11, v61), v29, v63);
    v11 = v29;
    v29 = result;
    result = v56;
    v73 = vmlal_u8(v71, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v64.i8);
    v74 = vmlal_high_u8(v72, v36, v64);
    v75 = vmlsl_u8(v69, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v63.i8);
    v76 = vmlsl_high_u8(v70, v36, v63);
    v22 = v36;
    v36 = v50;
    _X14 = a4 + 4 * a3 + 31;
    v50 = *(uint8x16_t *)(a4 + 4 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = a4 + 8 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = a4 + 5 * a3 + 31;
    v56 = *(uint8x16_t *)(a4 + 5 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = a4 + 9 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v73, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v68.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v74, v29, v65), result, v67), v36, v66), v50, v68), 6uLL);
    *(int8x16_t *)((char *)a6 + a5) = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(v75, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v64.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)v56.i8, *(uint8x8_t *)v68.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(v76, v29, v64), v36, v65),
                                                         v50,
                                                         v67),
                                                       result,
                                                       v66),
                                                     v56,
                                                     v68),
                                        6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    v60 -= 2;
    a4 += 2 * a3;
  }
  while (v60 > 2);
  return result;
}

void sub_1B67DF3EC(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67DEDA8(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

double sub_1B67DF468(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67DF1FC(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67DF1FC(a1, v11, a3, a4 + 16, a5, a6 + 1).u64[0];
  return result;
}

void sub_1B67DF4C8(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67DEDA8(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

double sub_1B67DF544(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67DF1FC(a1, a2, a3, a4, a5, a6);
  sub_1B67DF1FC(a1, v11, a3, a4 + 16, a5, a6 + 1);
  sub_1B67DF1FC(a1, v11, a3, a4 + 32, a5, a6 + 2);
  *(_QWORD *)&result = sub_1B67DF1FC(a1, v11, a3, a4 + 48, a5, a6 + 3).u64[0];
  return result;
}

uint64_t sub_1B67DF5DC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x4_t *a6)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int8x8_t v23;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int8x8_t v32;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v41;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int8x8_t v50;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int8x8_t v59;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int8x8_t v68;
  int16x4_t v73;
  int v74;
  uint64_t v75;
  int32x4_t v76;
  int16x4_t v78;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  v7 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6 * a3);
  v9 = *(int16x4_t *)((char *)&_X8[-1] + 2);
  _X8 = (int8x8_t *)((char *)_X8 - 6);
  v10 = (int16x4_t)_X8[1];
  __asm { PRFUM           #0, [X8,#0x1E] }
  _X9 = &_X8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X8 + 2 * a3);
  v20 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 2uLL), *(int16x4_t *)v6.i8, 1), v9, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 6uLL), *(int16x4_t *)v6.i8, 3), v10, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 6uLL),
            v6,
            7),
          2uLL);
  v21 = *_X9;
  v22 = _X9[1];
  v23 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v29 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 2uLL), *(int16x4_t *)v6.i8, 1), v21, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 6uLL), *(int16x4_t *)v6.i8, 3), v22, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v22, v23, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v22, v23, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v22, v23, 6uLL),
            v6,
            7),
          2uLL);
  v30 = *_X9;
  v31 = _X9[1];
  v32 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v38 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 2uLL), *(int16x4_t *)v6.i8, 1), v30, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 6uLL), *(int16x4_t *)v6.i8, 3), v31, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v31, v32, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v31, v32, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v31, v32, 6uLL),
            v6,
            7),
          2uLL);
  v39 = *_X9;
  v40 = _X9[1];
  v41 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v47 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v6.i8, 1), v39, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL), *(int16x4_t *)v6.i8, 3), v40, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v40, v41, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v40, v41, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v40, v41, 6uLL),
            v6,
            7),
          2uLL);
  v48 = *_X9;
  v49 = _X9[1];
  v50 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v56 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 2uLL), *(int16x4_t *)v6.i8, 1), v48, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 6uLL), *(int16x4_t *)v6.i8, 3), v49, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v49, v50, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v49, v50, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v49, v50, 6uLL),
            v6,
            7),
          2uLL);
  v57 = *_X9;
  v58 = _X9[1];
  v59 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v65 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 2uLL), *(int16x4_t *)v6.i8, 1), v57, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 6uLL), *(int16x4_t *)v6.i8, 3), v58, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v58, v59, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v58, v59, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v58, v59, 6uLL),
            v6,
            7),
          2uLL);
  v66 = *_X9;
  v67 = _X9[1];
  v68 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X9 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 2uLL), *(int16x4_t *)v6.i8, 1), v66, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 6uLL), *(int16x4_t *)v6.i8, 3), v67, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v67, v68, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v67, v68, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v67, v68, 6uLL),
            v6,
            7),
          2uLL);
  v74 = result + 1;
  v75 = 8 * a3;
  do
  {
    v76 = vmlal_lane_s16(vmull_lane_s16(v29, *(int16x4_t *)v7.i8, 1), v20, *(int16x4_t *)v7.i8, 0);
    v20 = v29;
    v29 = v38;
    v38 = v47;
    v47 = v56;
    _X13 = a4 + v75;
    v56 = v65;
    v78 = *(int16x4_t *)(a4 + v75 + 2);
    __asm { PRFM            #0, [X13,#0x18] }
    _X13 = a4 + 16 * a3 - 6;
    v65 = v73;
    __asm { PRFM            #0, [X13] }
    v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v78, 2uLL), *(int16x4_t *)v6.i8, 1), *(int16x4_t *)(a4 + v75 - 6), *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v78, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v78, 6uLL), *(int16x4_t *)v6.i8,
                      3),
                    v78,
                    v6,
                    4),
                  (int16x4_t)vext_s8((int8x8_t)v78, *(int8x8_t *)(a4 + v75 + 10), 2uLL),
                  v6,
                  5),
                (int16x4_t)vext_s8((int8x8_t)v78, *(int8x8_t *)(a4 + v75 + 10), 4uLL),
                v6,
                6),
              (int16x4_t)vext_s8((int8x8_t)v78, *(int8x8_t *)(a4 + v75 + 10), 6uLL),
              v6,
              7),
            2uLL);
    __asm { PRFUM           #0, [X13,#0x16] }
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v76, v29, *(int16x4_t *)v7.i8, 2), v38, *(int16x4_t *)v7.i8, 3), v47, v7, 4), v56, v7, 5), v65, v7, 6),
                            v73,
                            v7,
                            7),
                          0xAuLL),
            (uint16x4_t)0xFC00FC00FC00FC00);
    --v74;
    a4 += 2 * a3;
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v74 > 1);
  return result;
}

uint64_t sub_1B67DF93C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  uint8x16_t v9;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v35;
  int8x16_t v36;
  uint8x16_t v42;
  uint8x16_t v43;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  uint64_t v53;
  int8x16_t v57;
  int8x16_t v58;
  int v61;
  uint8x16_t v62;
  int8x16_t v63;
  uint8x8_t v64;
  int8x16_t v65;
  uint8x8_t v66;
  int8x16_t v67;
  uint8x8_t v69;
  uint8x16_t v70;
  int8x16_t v71;
  uint8x8_t v72;
  int8x16_t v73;
  uint8x8_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int16x8_t v83;
  int8x16_t v84;

  v6 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  _X8 = -3 * a3 + a4;
  v8 = *(uint8x16_t *)(_X8 - 3);
  _X8 -= 3;
  v9 = v8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = _X8 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(_X8 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  v21 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v22 = v21;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  v28 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v29 = v28;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  v35 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  v36 = v35;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  v42 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v43 = v42;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X10 = (char *)_X9 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X9 + a3);
  v49 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  v50 = v49;
  v51 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1B6920C90[(a2 & 3) - 1]);
  __asm { PRFM            #0, [X9] }
  v53 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0xF]
  }
  _X12 = (char *)_X11 + 4 * a3;
  v57 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  v58 = v57;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X12]
  }
  v61 = result + 1;
  v62 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v63 = vdupq_lane_s8(v6, 2);
  v64 = (uint8x8_t)vextq_s8(v63, v63, 8uLL).u64[0];
  v65 = vdupq_lane_s8(v6, 3);
  v66 = (uint8x8_t)vextq_s8(v65, v65, 8uLL).u64[0];
  v67 = vdupq_lane_s8(v6, 4);
  __asm { PRFUM           #0, [X12,#0xF] }
  v69 = (uint8x8_t)vextq_s8(v67, v67, 8uLL).u64[0];
  v70 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v71 = vdupq_lane_s8(v6, 6);
  v72 = (uint8x8_t)vextq_s8(v71, v71, 8uLL).u64[0];
  v73 = vdupq_lane_s8(v6, 7);
  v74 = (uint8x8_t)vextq_s8(v73, v73, 8uLL).u64[0];
  v75 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  do
  {
    v76 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v70.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v62.i8);
    v77 = vmull_high_u8((uint8x16_t)v22, v70);
    v78 = vmull_high_u8(v9, v62);
    v9 = (uint8x16_t)v22;
    v22 = v29;
    v29 = v36;
    v36 = (int8x16_t)v43;
    v43 = (uint8x16_t)v50;
    v50 = v58;
    _X11 = a4 + v53;
    v58 = *(int8x16_t *)(a4 + v53 - 3);
    _X12 = a4 + 8 * a3 - 3;
    __asm
    {
      PRFUM           #0, [X11,#0x1C]
      PRFM            #0, [X12]
    }
    v83 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v76, *(uint8x8_t *)v22.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v71.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v75.i8), *(uint8x8_t *)v58.i8, *(uint8x8_t *)v73.i8);
    *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)v77.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v78, (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v64));
    v84 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v77, (uint8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v66), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), v69), (uint8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), v72);
    *(int16x4_t *)v84.i8 = vsub_s16(*(int16x4_t *)v84.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v43, v75), (uint8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), v74));
    *(int16x4_t *)v83.i8 = vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 2uLL), *(int16x4_t *)v51.i8, 1), *(int16x4_t *)v83.i8, *(int16x4_t *)v51.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL), *(int16x4_t *)v51.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 6uLL), *(int16x4_t *)v51.i8,
                                       3),
                                     v83,
                                     v51,
                                     4),
                                   (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xCuLL),
                                   v51,
                                   6),
                                 (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xAuLL),
                                 v51,
                                 5),
                               (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xEuLL),
                               v51,
                               7),
                             6uLL);
    __asm { PRFUM           #0, [X12,#0xF] }
    *a6 = vqrshrun_n_s16(v83, 6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5);
    --v61;
    a4 += a3;
  }
  while (v61 > 1);
  return result;
}

uint64_t sub_1B67DFB50(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x8_t v6;
  int16x8_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  int16x8_t v30;
  int16x8_t v39;
  uint16x8_t v40;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int8x16_t v85;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int8x16_t v111;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  int v121;
  uint64_t v122;
  int16x8_t v123;
  int16x8_t v125;
  int8x16_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int16x8_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  _X8 = (int8x16_t *)(a4 - 6 * a3);
  v8 = *(int16x8_t *)((char *)&_X8[-1] + 10);
  _X8 = (int8x16_t *)((char *)_X8 - 6);
  v9 = _X8[1];
  v10 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 2uLL);
  v11 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 4uLL);
  v12 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 6uLL);
  v13 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 8uLL);
  v14 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xAuLL);
  v15 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xCuLL);
  v16 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xEuLL);
  v17 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v18 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  v19 = vmlaq_lane_s16(vmulq_n_s16(v8, v6.i16[0]), v10, *(int16x4_t *)v6.i8, 1);
  v20 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v21 = vmlaq_lane_s16(v19, v11, *(int16x4_t *)v6.i8, 2);
  v22 = vdupq_laneq_s16(v6, 5);
  v23 = vmlaq_laneq_s16(v21, v14, v6, 5);
  v24 = vdupq_laneq_s16(v6, 6);
  v25 = vmlaq_laneq_s16(v23, v15, v6, 6);
  v26 = vdupq_laneq_s16(v6, 7);
  v27 = vmlaq_laneq_s16(v25, v16, v6, 7);
  v28 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  v29 = (uint16x8_t)vmulq_lane_s16(v12, *(int16x4_t *)v6.i8, 3);
  v30 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  __asm { PRFUM           #0, [X8,#0x2E] }
  _X9 = &_X8->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  v39 = vdupq_laneq_s16(v6, 4);
  v40 = (uint16x8_t)vmulq_laneq_s16(v13, v6, 4);
  _X9 = (int8x16_t *)((char *)_X8 + 2 * a3);
  v42 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v40.i8, *(uint16x4_t *)v29.i8), *(int16x4_t *)v27.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v29, v40), v27), 2uLL);
  v43 = *(int16x8_t *)_X9;
  v44 = _X9[1];
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  v49 = (int16x8_t)vextq_s8(*_X9, v44, 2uLL);
  v50 = (int16x8_t)vextq_s8(*_X9, v44, 4uLL);
  v51 = (int16x8_t)vextq_s8(*_X9, v44, 6uLL);
  v52 = (int16x8_t)vextq_s8(*_X9, v44, 8uLL);
  _X9 = &_X9->i8[2 * a3];
  v54 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v43, v6.i16[0]), v49, *(int16x4_t *)v6.i8, 1), v50, *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xEuLL), v6, 7);
  v55 = (uint16x8_t)vmulq_lane_s16(v51, *(int16x4_t *)v6.i8, 3);
  v56 = (uint16x8_t)vmulq_laneq_s16(v52, v6, 4);
  v57 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)v55.i8), *(int16x4_t *)v54.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v55, v56), v54), 2uLL);
  v58 = *(int16x8_t *)_X9;
  v59 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v65 = (int16x8_t)vextq_s8((int8x16_t)v58, v59, 6uLL);
  v66 = (int16x8_t)vextq_s8((int8x16_t)v58, v59, 8uLL);
  v67 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v58, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 0xEuLL), v6,
          7);
  v68 = (uint16x8_t)vmulq_lane_s16(v65, *(int16x4_t *)v6.i8, 3);
  v69 = (uint16x8_t)vmulq_laneq_s16(v66, v6, 4);
  v70 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v69.i8, *(uint16x4_t *)v68.i8), *(int16x4_t *)v67.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v68, v69), v67), 2uLL);
  v71 = *(int16x8_t *)_X9;
  v72 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v78 = (int16x8_t)vextq_s8((int8x16_t)v71, v72, 6uLL);
  v79 = (int16x8_t)vextq_s8((int8x16_t)v71, v72, 8uLL);
  v80 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v71, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 0xEuLL), v6,
          7);
  v81 = (uint16x8_t)vmulq_lane_s16(v78, *(int16x4_t *)v6.i8, 3);
  v82 = (uint16x8_t)vmulq_laneq_s16(v79, v6, 4);
  v83 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v82.i8, *(uint16x4_t *)v81.i8), *(int16x4_t *)v80.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v81, v82), v80), 2uLL);
  v84 = *(int16x8_t *)_X9;
  v85 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v91 = (int16x8_t)vextq_s8((int8x16_t)v84, v85, 6uLL);
  v92 = (int16x8_t)vextq_s8((int8x16_t)v84, v85, 8uLL);
  v93 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v84, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 0xEuLL), v6,
          7);
  v94 = (uint16x8_t)vmulq_lane_s16(v91, *(int16x4_t *)v6.i8, 3);
  v95 = (uint16x8_t)vmulq_laneq_s16(v92, v6, 4);
  v96 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v94.i8), *(int16x4_t *)v93.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v94, v95), v93), 2uLL);
  v97 = *(int16x8_t *)_X9;
  v98 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
  v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
  v106 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v97, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL), v6,
           7);
  v107 = (uint16x8_t)vmulq_lane_s16(v104, *(int16x4_t *)v6.i8, 3);
  v108 = (uint16x8_t)vmulq_laneq_s16(v105, v6, 4);
  v109 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v108.i8, *(uint16x4_t *)v107.i8), *(int16x4_t *)v106.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v107, v108), v106), 2uLL);
  v110 = *(int16x8_t *)_X9;
  v111 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  v116 = (int16x8_t)vextq_s8((int8x16_t)v110, v111, 6uLL);
  v117 = (int16x8_t)vextq_s8((int8x16_t)v110, v111, 8uLL);
  v118 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v110, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 0xEuLL), v6,
           7);
  v119 = (uint16x8_t)vmulq_lane_s16(v116, *(int16x4_t *)v6.i8, 3);
  v120 = (uint16x8_t)vmulq_laneq_s16(v117, v6, 4);
  v121 = result + 1;
  v122 = 8 * a3;
  v123 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v120.i8, *(uint16x4_t *)v119.i8), *(int16x4_t *)v118.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v119, v120), v118), 2uLL);
  do
  {
    _X13 = a4 + v122;
    v125 = *(int16x8_t *)(a4 + v122 - 6);
    v126 = *(int8x16_t *)(a4 + v122 + 10);
    v127 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 2uLL);
    v128 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 4uLL);
    v129 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 6uLL);
    v130 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 8uLL);
    v131 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 0xAuLL);
    v132 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 0xCuLL);
    v133 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 0xEuLL);
    v134 = vmlaq_s16(vmulq_s16(v125, v17), v127, v18);
    v135 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v30.i8, 1), *(int16x4_t *)v42.i8, *(int16x4_t *)v30.i8, 0);
    v136 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v30.i8, 1), v42, *(int16x4_t *)v30.i8, 0);
    v42 = v57;
    v57 = v70;
    v70 = v83;
    v83 = v96;
    v96 = v109;
    v109 = v123;
    __asm { PRFM            #0, [X13,#0x28] }
    _X13 = a4 + 16 * a3 - 6;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    v141 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v134, v128, v20), v131, v22), v132, v24), v133, v26);
    v142 = (uint16x8_t)vmulq_s16(v129, v28);
    v143 = (uint16x8_t)vmulq_s16(v130, v39);
    v144 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v143.i8, *(uint16x4_t *)v142.i8);
    v145 = (int32x4_t)vaddl_high_u16(v142, v143);
    v146 = vaddw_s16(v144, *(int16x4_t *)v141.i8);
    v147 = vaddw_high_s16(v145, v141);
    *(int16x4_t *)v145.i8 = vshrn_n_s32(v146, 2uLL);
    *(uint16x4_t *)v146.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v135, *(int16x4_t *)v57.i8, *(int16x4_t *)v30.i8, 2), *(int16x4_t *)v70.i8, *(int16x4_t *)v30.i8, 3), *(int16x4_t *)v83.i8, v30, 4), *(int16x4_t *)v96.i8, v30,
                                                   5),
                                                 *(int16x4_t *)v109.i8,
                                                 v30,
                                                 6),
                                               *(int16x4_t *)v145.i8,
                                               v30,
                                               7),
                                             0xAuLL),
                               (uint16x4_t)0xFC00FC00FC00FC00);
    v146.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v136, v57, *(int16x4_t *)v30.i8, 2), v70, *(int16x4_t *)v30.i8, 3), v83, v30, 4), v96, v30, 5), v109, v30, 6),
                                                      vshrn_n_s32(v147, 2uLL),
                                                      v30,
                                                      7),
                                                    0xAuLL),
                                      (uint16x4_t)0xFC00FC00FC00FC00);
    v123 = vshrn_high_n_s32(*(int16x4_t *)v145.i8, v147, 2uLL);
    *a6 = v146;
    --v121;
    a4 += 2 * a3;
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v121 > 1);
  return result;
}

uint64_t sub_1B67DFFAC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  int16x8_t v15;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v24;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v71;
  int16x8_t v72;
  uint16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint8x8_t v79;
  uint8x8_t v80;
  uint8x8_t v81;
  uint8x8_t v82;
  uint8x8_t v83;
  uint8x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16_t v94;
  int8x16_t v100;
  uint8x8_t v105;
  uint8x8_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;

  v6 = qword_1B6920C90[(a2 & 3) - 1];
  v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v13 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v14 = (uint8x8_t)vdup_lane_s8(v6, 7);
  v15 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1B6920C90[((a2 >> 16) & 3) - 1]);
  _X9 = -3 * a3 + a4;
  v17 = *(int8x16_t *)(_X9 - 3);
  _X9 -= 3;
  v18 = v17;
  __asm { PRFUM           #0, [X9,#0x1F] }
  v24 = 4 * a3;
  _X10 = _X9 + 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0xF]
  }
  _X9 = (_OWORD *)(_X9 + a3);
  _X10 = (char *)_X9 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X9 + a3);
  v31 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  v32 = v31;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X11 + a3);
  v38 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  v39 = v38;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  v45 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v46 = v45;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X11 + a3);
  v52 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  v53 = v52;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  v59 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL), v8), *(uint8x8_t *)v18.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL),
                     v14);
  v60 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v61 = v60;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 1uLL), v8), *(uint8x8_t *)v32.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 7uLL),
                     v14);
  v67 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v71 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 1uLL), v8), *(uint8x8_t *)v39.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 7uLL),
                     v14);
  v72 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 1uLL), v8), *(uint8x8_t *)v46.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 7uLL),
                     v14);
  v73 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 1uLL), v8), *(uint8x8_t *)v53.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 5uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 7uLL), v14);
  v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 1uLL), v8), *(uint8x8_t *)v61.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 7uLL),
                     v14);
  v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 1uLL), v8), *(uint8x8_t *)v67.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 7uLL),
                     v14);
  v76 = result + 2;
  v77 = 8 * a3 - 3;
  v78 = 5 * a3;
  v79 = v7;
  v80 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v81 = v9;
  v82 = v10;
  v83 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v84 = (uint8x8_t)vdup_lane_s8(v6, 5);
  do
  {
    v85 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v59.i8, *(int16x4_t *)v15.i8, 0);
    v86 = vmlsl_high_lane_s16(vmull_high_lane_s16(v66, *(int16x4_t *)v15.i8, 1), v59, *(int16x4_t *)v15.i8, 0);
    v59 = v71;
    v87 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 0);
    v88 = vmlsl_high_lane_s16(vmull_high_lane_s16(v71, *(int16x4_t *)v15.i8, 1), v66, *(int16x4_t *)v15.i8, 0);
    v66 = v72;
    v89 = vmlal_lane_s16(vmlsl_lane_s16(v85, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 2), *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 3);
    v90 = vmlal_high_lane_s16(vmlsl_high_lane_s16(v86, v71, *(int16x4_t *)v15.i8, 2), v72, *(int16x4_t *)v15.i8, 3);
    v91 = vmlsl_lane_s16(v87, *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 2);
    v92 = vmlsl_high_lane_s16(v88, v72, *(int16x4_t *)v15.i8, 2);
    v72 = v74;
    v71 = (int16x8_t)v73;
    _X14 = a4 + v24;
    v94 = *(int8x16_t *)(a4 + v24 - 3);
    __asm { PRFUM           #0, [X14,#0x1C] }
    _X14 = a4 + v77;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = a4 + v78;
    v100 = *(int8x16_t *)(a4 + v78 - 3);
    __asm { PRFUM           #0, [X14,#0x1C] }
    _X14 = a4 + v77 + a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    v105 = (uint8x8_t)vdup_lane_s8(v6, 6);
    v106 = (uint8x8_t)vdup_lane_s8(v6, 7);
    v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 1uLL), v80), *(uint8x8_t *)v94.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 7uLL),
                       v106);
    v107 = vmlal_laneq_s16(vmlal_laneq_s16(v89, *(int16x4_t *)v71.i8, v15, 4), *(int16x4_t *)v75.i8, v15, 6);
    v108 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v90, v71, v15, 4), v75, v15, 6);
    v109 = vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v91, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 3), *(int16x4_t *)v72.i8, v15, 4), *(int16x4_t *)v74.i8, v15, 6), *(int16x4_t *)v75.i8, v15, 5);
    v110 = vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v92, v71, *(int16x4_t *)v15.i8, 3), v72, v15, 4), v74, v15, 6), v75, v15, 5);
    v73 = (uint16x8_t)v75;
    v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 1uLL), v80), *(uint8x8_t *)v100.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 7uLL),
                       v106);
    *a6 = vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(v107, *(int16x4_t *)v72.i8, v15, 5), *(int16x4_t *)v74.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(v108, v72, v15, 5), v74, v15, 7), 6uLL), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(v109, *(int16x4_t *)v75.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(v110, v75, v15, 7), 6uLL), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5 + a5);
    v76 -= 2;
    a4 += 2 * a3;
  }
  while (v76 > 2);
  return result;
}

uint64_t sub_1B67E0404(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67DFB50(a1, a2, a3, a4, a5, a6);
  return sub_1B67DFB50(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E0464(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67DFFAC(a1, a2, a3, a4, a5, a6);
  return sub_1B67DFFAC(a1, v11, a3, a4 + 8, a5, a6 + 1);
}

uint64_t sub_1B67E04C4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67DFB50(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E0540(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  BOOL v14;

  v11 = 0;
  v12 = a2;
  do
  {
    result = sub_1B67DFFAC(a1, v12, a3, a4 + v11, a5, (int8x8_t *)(a6 + v11));
    v14 = v11 >= 0x18;
    v11 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sub_1B67E05B8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67DFB50(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E0634(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  BOOL v14;

  v11 = 0;
  v12 = a2;
  do
  {
    result = sub_1B67DFFAC(a1, v12, a3, a4 + v11, a5, (int8x8_t *)(a6 + v11));
    v14 = v11 >= 0x38;
    v11 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sub_1B67E06AC(uint64_t result, char a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, uint16x4_t *a6)
{
  int16x4_t v6;
  int v7;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = result + 1;
  do
  {
    __asm { PRFUM           #0, [X3,#0x1E] }
    _X12 = (char *)&_X3[a3 - 1] + 4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x12]
    }
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    --v7;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1B67E0728(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6;
  int v7;
  uint64_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int8x16_t v13;
  int8x16_t v23;

  v6 = qword_1B6920CB0[(a2 & 7) - 1];
  v7 = result + 2;
  v8 = 4 * a3 - 2;
  v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X12 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X3 + a3;
    v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X12,#0x1D] }
    _X12 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), *(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12), 6uLL).u32[0];
    *(_DWORD *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), *(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12), 6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5 + a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1B67E07F0(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int v12;
  int8x16_t v13;
  int16x8_t v21;
  int16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = vdupq_lane_s16(v6, 0);
  v8 = vdupq_lane_s16(v6, 3);
  v9 = vdupq_lane_s16(v6, 1);
  v10 = vdupq_lane_s16(v6, 2);
  _X8 = (int8x16_t *)(a4 - 4);
  v12 = result + 1;
  do
  {
    v13 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x3E] }
    _X13 = &_X8->i8[8 * a3];
    __asm { PRFM            #0, [X13] }
    v21 = (int16x8_t)vextq_s8(*_X8, v13, 8uLL);
    v22 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v13, 0xCuLL), v8);
    v23 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v13, 4uLL), v9);
    v24 = (uint16x8_t)vmulq_s16(v21, v10);
    v25 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23.i8);
    v26 = (int32x4_t)vaddl_high_u16(v23, v24);
    v27 = vaddw_s16(v25, *(int16x4_t *)v22.i8);
    v28 = vaddw_high_s16(v26, v22);
    *(uint16x4_t *)v26.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v26.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v28, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    __asm { PRFUM           #0, [X13,#0x1E] }
    *a6 = v26;
    --v12;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1B67E089C(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6;
  int v7;
  uint64_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int8x16_t v13;
  int8x16_t v23;

  v6 = qword_1B6920CB0[(a2 & 7) - 1];
  v7 = result + 2;
  v8 = 4 * a3 - 2;
  v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X12 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X3 + a3;
    v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X12,#0x1D] }
    _X12 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), *(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), *(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5 + a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1B67E0964(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  sub_1B67E07F0(a1, a2, a3, a4, a5, a6);
  return sub_1B67E07F0(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E09C4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, uint16x8_t a12, double a13, int8x16_t a14)
{
  int8x8_t v14;
  int8x16_t *v15;
  int v16;
  uint8x16_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;

  v14 = qword_1B6920CB0[(a2 & 7) - 1];
  v15 = (int8x16_t *)(a4 - 2);
  v16 = result + 2;
  v17 = (uint8x16_t)vdupq_lane_s8(v14, 0);
  v18 = (uint8x8_t)vdup_lane_s8(v14, 1);
  v19 = (uint8x8_t)vdup_lane_s8(v14, 2);
  v20 = (uint8x8_t)vdup_lane_s8(v14, 3);
  do
  {
    v21 = *v15;
    a12.i64[0] = v15[1].i64[0];
    v22 = (int8x16_t *)((char *)v15 + a3);
    a14.i64[0] = v22[1].i64[0];
    v23 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v19), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v20);
    v24 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, (int8x16_t)a12, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, (int8x16_t)a12, 0xCuLL), v19), (uint8x16_t)v21, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, (int8x16_t)a12, 0xEuLL), v20);
    v25 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v22, *v22, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(*v22, *v22, 4uLL), v19), *(uint8x8_t *)v22->i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v22, *v22, 6uLL), v20);
    v26 = (uint8x8_t)vextq_s8(*v22, a14, 0xAuLL).u64[0];
    v27 = (uint8x8_t)vextq_s8(*v22, a14, 0xCuLL).u64[0];
    a14 = vextq_s8(*v22, a14, 0xEuLL);
    a12 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v26, v18), v27, v19), *(uint8x16_t *)v22, v17), *(uint8x8_t *)a14.i8, v20);
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16(v23, 6uLL), v24, 6uLL);
    *(int8x16_t *)((char *)a6 + a5) = vqrshrun_high_n_s16(vqrshrun_n_s16(v25, 6uLL), (int16x8_t)a12, 6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    v16 -= 2;
    v15 = (int8x16_t *)((char *)v22 + a3);
  }
  while (v16 > 2);
  return result;
}

uint64_t sub_1B67E0AA8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67E07F0(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E0B24(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  int8x8_t v13;
  int8x16_t *v14;
  unint64_t *v15;
  int v16;
  uint8x16_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint8x8_t v23;
  uint8x8_t v24;

  v13 = qword_1B6920CB0[(a2 & 7) - 1];
  v14 = a6 + 1;
  v15 = (unint64_t *)(a4 + 30);
  v16 = result + 1;
  v17 = (uint8x16_t)vdupq_lane_s8(v13, 0);
  v18 = (uint8x8_t)vdup_lane_s8(v13, 1);
  v19 = (uint8x8_t)vdup_lane_s8(v13, 2);
  v20 = (uint8x8_t)vdup_lane_s8(v13, 3);
  do
  {
    v21 = *((int8x16_t *)v15 - 2);
    v22 = *((int8x16_t *)v15 - 1);
    a13.i64[0] = *v15;
    v23 = (uint8x8_t)vextq_s8(v22, a13, 0xAuLL).u64[0];
    v24 = (uint8x8_t)vextq_s8(v22, a13, 0xCuLL).u64[0];
    a13 = vextq_s8(v22, a13, 0xEuLL);
    v14[-1] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v19), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v20), 6uLL), (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v22, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v22, 0xCuLL), v19), (uint8x16_t)v21,
                               v17),
                             (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v22, 0xEuLL),
                             v20),
                6uLL);
    *v14 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL), v19), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 6uLL), v20), 6uLL), (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v23, v18), v24, v19), (uint8x16_t)v22, v17), *(uint8x8_t *)a13.i8, v20), 6uLL);
    v14 = (int8x16_t *)((char *)v14 + a5);
    v15 = (unint64_t *)((char *)v15 + a3);
    --v16;
  }
  while (v16 > 1);
  return result;
}

uint64_t sub_1B67E0BF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67E07F0(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E0C74(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int8x16_t v25;

  sub_1B67E0B24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return sub_1B67E0B24(a1, a2, a3, a4 + 32, a5, a6 + 2, v19, v20, v21, v22, v23, v24, v25);
}

int16x4_t *sub_1B67E0CD4(int a1, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, uint16x4_t *a6)
{
  int16x4_t v7;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v16;
  int16x4_t v18;
  int16x4_t v19;
  int v21;
  int32x4_t v22;
  int16x4_t *result;
  int32x4_t v26;
  int32x4_t v29;
  int16x4_t v30;
  int32x4_t v36;

  _X9 = (int16x4_t *)((char *)_X3 - 2 * a3);
  v7 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X11 = (int16x4_t *)((char *)_X3 + 2 * a3);
  v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  v10 = v9;
  __asm { PRFM            #0, [X9] }
  v16 = *_X3;
  __asm { PRFUM           #0, [X3,#0xE] }
  v18 = *_X11;
  _X11 = (int16x4_t *)((char *)_X11 + 14);
  v19 = v18;
  __asm { PRFM            #0, [X11] }
  v21 = a1 + 2;
  do
  {
    v22 = vmlal_lane_s16(vmull_lane_s16(v16, v7, 1), v10, v7, 0);
    _X16 = (int16x4_t *)((char *)_X3 + 6 * a3);
    _X17 = (char *)_X3 + 14 * a3;
    result = &_X3[2 * a3];
    _X3 = (int16x4_t *)((char *)_X3 + 4 * a3);
    v26 = vmlal_lane_s16(vmull_lane_s16(v19, v7, 1), v16, v7, 0);
    _X15 = (char *)&_X3[1] + 6;
    v16 = *_X3;
    __asm { PRFM            #0, [X15] }
    v29 = vmlal_lane_s16(v22, v19, v7, 2);
    v10 = v19;
    v30 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    v19 = v30;
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFM            #0, [X0]
      PRFUM           #0, [X17,#6]
      PRFUM           #0, [X0,#6]
    }
    v36 = vmlal_lane_s16(vmlal_lane_s16(v26, *_X3, v7, 2), v30, v7, 3);
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v29, *_X3, v7, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(uint16x4_t *)((char *)a6 + 2 * a5) = vmin_u16((uint16x4_t)vqrshrun_n_s32(v36, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    a6 = (uint16x4_t *)((char *)a6 + 4 * a5);
    v21 -= 2;
  }
  while (v21 > 2);
  return result;
}

double sub_1B67E0DB0(int a1, unint64_t a2, uint64_t a3, double *_X3, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6;
  uint8x8_t v9;
  double result;
  uint8x8_t v23;
  int v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  double v34;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x8_t v43;
  _DWORD *v47;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)_X3 - a3 + 15;
  v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  result = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + a3 + 15;
  v23 = *(uint8x8_t *)((char *)_X3 + a3);
  _X8 = (uint64_t)_X3 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  v28 = a1 + 2;
  v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)_X3 + 2 * a3 + 15;
    v34 = *(double *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    _X14 = (_QWORD *)((char *)_X3 + 3 * a3);
    _X15 = (char *)_X3 + 7 * a3;
    _X3 = (double *)((char *)_X3 + a3 + a3);
    v41 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)&result, v29), v23, v31), v9, v30);
    v42 = vmull_u8(v23, v29);
    v9 = v23;
    v43 = *(uint8x8_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 15);
    v23 = v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v41, *(uint8x8_t *)&v34, v32), 6uLL).u32[0];
    v47 = (_DWORD *)((char *)a6 + a5);
    a6 = (_DWORD *)((char *)a6 + a5 + a5);
    v28 -= 2;
    *v47 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v42, *(uint8x8_t *)&v34, v31), *(uint8x8_t *)&result, v30), v43, v32), 6uLL).u32[0];
    result = v34;
  }
  while (v28 > 2);
  return result;
}

int16x8_t sub_1B67E0EBC(int a1, unint64_t a2, uint64_t a3, int16x8_t *_X3, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6;
  int16x8_t v8;
  int16x8_t result;
  int16x8_t v15;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int v25;
  uint16x8_t v29;
  int16x8_t v31;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int16x8_t v36;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  uint16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;

  v6 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X8 = &_X3->i8[-2 * a3];
  v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  result = v8;
  __asm { PRFM            #0, [X8] }
  v15 = *_X3;
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X8 = &_X3->i8[2 * a3];
  v18 = *(int16x8_t *)_X8;
  _X8 += 30;
  v19 = v18;
  __asm { PRFM            #0, [X8] }
  v21 = vdupq_lane_s16(v6, 0);
  v22 = vdupq_lane_s16(v6, 3);
  v23 = vdupq_lane_s16(v6, 1);
  v24 = vdupq_lane_s16(v6, 2);
  v25 = a1 + 2;
  do
  {
    _X15 = &_X3->i8[6 * a3];
    _X16 = &_X3->i8[14 * a3];
    _X0 = &_X3[a3];
    _X3 = (int16x8_t *)((char *)_X3 + 4 * a3);
    v29 = (uint16x8_t)vmulq_s16(v15, v23);
    _X17 = &_X3[1].i8[14];
    v31 = *_X3;
    __asm { PRFM            #0, [X17] }
    v33 = vmulq_s16(result, v21);
    result = v19;
    v34 = (uint16x8_t)vmulq_s16(v19, v24);
    v35 = (uint16x8_t)vmulq_s16(v19, v23);
    v36 = *(int16x8_t *)_X15;
    _X15 += 30;
    v19 = v36;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X16]
      PRFM            #0, [X0]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X0,#0xE]
    }
    v42 = vmlaq_s16(v33, *_X3, v22);
    v43 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v34.i8);
    v44 = (int32x4_t)vaddl_high_u16(v29, v34);
    v45 = vaddw_s16(v43, *(int16x4_t *)v42.i8);
    v46 = vaddw_high_s16(v44, v42);
    v47 = vmlaq_s16(vmulq_s16(v15, v21), v36, v22);
    v48 = (uint16x8_t)vmulq_s16(*_X3, v24);
    v49 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v35.i8);
    v50 = (int32x4_t)vaddl_high_u16(v48, v35);
    v51 = vaddw_s16(v49, *(int16x4_t *)v47.i8);
    v52 = vaddw_high_s16(v50, v47);
    *(uint16x4_t *)v50.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v45, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v50.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v46, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *a6 = v50;
    *(uint16x4_t *)v46.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v51, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v46.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v52, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v46;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v25 -= 2;
    v15 = v31;
  }
  while (v25 > 2);
  return result;
}

double sub_1B67E0FE4(int a1, unint64_t a2, uint64_t a3, double *_X3, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v9;
  double result;
  uint8x8_t v23;
  int v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  double v34;
  uint16x8_t v39;
  uint16x8_t v40;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)_X3 - a3 + 15;
  v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  result = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + a3 + 15;
  v23 = *(uint8x8_t *)((char *)_X3 + a3);
  _X8 = (uint64_t)_X3 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  v28 = a1 + 2;
  v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)_X3 + 2 * a3 + 15;
    v34 = *(double *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    v39 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)&result, v29), v23, v31), v9, v30);
    v40 = vmull_u8(v23, v29);
    v9 = v23;
    _X14 = (uint64_t)_X3 + 3 * a3 + 15;
    v23 = *(uint8x8_t *)((char *)_X3 + 3 * a3);
    _X15 = (char *)_X3 + 7 * a3;
    _X3 = (double *)((char *)_X3 + a3 + a3);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v39, *(uint8x8_t *)&v34, v32), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v40, *(uint8x8_t *)&v34, v31), *(uint8x8_t *)&result, v30), v23, v32), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5 + a5);
    v28 -= 2;
    result = v34;
  }
  while (v28 > 2);
  return result;
}

double sub_1B67E10F0(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E0EBC(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E0EBC(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

uint8x16_t sub_1B67E1150(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6;
  uint8x16_t v9;
  uint8x16_t result;
  uint8x16_t v23;
  int v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v34;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  _X8 = (uint64_t)&_X3[1].i64[1] - a3 + 7;
  v9 = *(uint8x16_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  result = *_X3;
  __asm { PRFUM           #0, [X3,#0x1F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (uint64_t)&_X3[1].i64[1] + a3 + 7;
  v23 = *(uint8x16_t *)((char *)_X3 + a3);
  _X8 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  v28 = a1 + 2;
  v29 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v30 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v31 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v32 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)&_X3[1].i64[1] + 2 * a3 + 7;
    v34 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    v39 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v29.i8);
    v40 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v30), v23, v31), v9, v29);
    v41 = vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v30.i8);
    v42 = vmull_high_u8(v23, v30);
    v9 = v23;
    _X14 = (uint64_t)&_X3[1].i64[1] + 3 * a3 + 7;
    v23 = *(uint8x16_t *)((char *)_X3 + 3 * a3);
    _X15 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v39, *(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v40, v34, v32), 6uLL);
    *(int8x16_t *)((char *)a6 + a5) = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v41, *(uint8x8_t *)v34.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v32.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v42, v34, v31), result, v29), v23, v32), 6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    v28 -= 2;
    result = v34;
  }
  while (v28 > 2);
  return result;
}

void sub_1B67E1284(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67E0EBC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

uint8x16_t sub_1B67E1300(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t result;
  uint8x16_t v19;
  uint8x16_t v25;
  uint8x16_t v26;
  int v31;
  uint64_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v38;
  uint8x16_t v39;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t *v59;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X8 = &_X3->i8[-a3];
  v9 = *(uint8x16_t *)((char *)_X3 - a3);
  v8 = *(uint8x16_t *)((char *)_X3 - a3 + 16);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  v19 = *_X3;
  result = _X3[1];
  __asm { PRFUM           #0, [X3,#0x3F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  _X8 = &_X3->i8[a3];
  v26 = *(uint8x16_t *)((char *)_X3 + a3);
  v25 = *(uint8x16_t *)((char *)&_X3[1] + a3);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  v31 = a1 + 2;
  v32 = 2 * a3;
  v33 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v34 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v35 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v36 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X13 = &_X3->i8[v32];
    v38 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    v39 = *(uint8x16_t *)((char *)&_X3[1] + v32);
    __asm { PRFUM           #0, [X13,#0x3F] }
    _X13 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1F]
    }
    _X13 = (uint8x16_t *)((char *)_X3 + 3 * a3);
    _X14 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    v46 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v33.i8);
    v47 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v19, v34), v26, v35), v9, v33);
    v48 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v33.i8);
    v49 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v34), v25, v35), v8, v33);
    v50 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v38.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v33.i8);
    v51 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v26, v34), v38, v35), v19, v33);
    v52 = vmull_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v34.i8);
    v53 = vmull_high_u8(v25, v34);
    v9 = v26;
    v8 = v25;
    v26 = *_X13;
    v25 = _X13[1];
    __asm
    {
      PRFUM           #0, [X13,#0x3F]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x1F]
    }
    v57 = (int16x8_t)vmlsl_u8(v50, *(uint8x8_t *)_X13->i8, *(uint8x8_t *)v36.i8);
    v58 = (int16x8_t)vmlsl_high_u8(v51, *_X13, v36);
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v46, *(uint8x8_t *)v38.i8, *(uint8x8_t *)v36.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v47, v38, v36), 6uLL);
    a6[1] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v48, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v36.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v49, v39, v36), 6uLL);
    v59 = (int8x16_t *)((char *)a6 + a5);
    v31 -= 2;
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    *v59 = vqrshrun_high_n_s16(vqrshrun_n_s16(v57, 6uLL), v58, 6uLL);
    v59[1] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v52, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v33.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v36.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v53, v39, v35), result, v33), v25, v36), 6uLL);
    v19 = v38;
    result = v39;
  }
  while (v31 > 2);
  return result;
}

void sub_1B67E1488(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67E0EBC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

double sub_1B67E1504(int a1, unsigned int a2, uint64_t a3, uint8x16_t *a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E1300(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E1300(a1, v11, a3, a4 + 2, a5, a6 + 2).u64[0];
  return result;
}

uint64_t sub_1B67E1564(uint64_t result, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, uint16x4_t *a6)
{
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v9;
  int16x8_t v10;
  int16x4_t v19;
  int16x4_t v25;
  int16x4_t v30;
  int v31;
  int32x4_t v32;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X9 = (char *)_X3 + 2 * (-2 - a3);
  v9 = *(int16x4_t *)_X9;
  v10 = *(int16x8_t *)(_X9 + 4);
  __asm { PRFUM           #0, [X9,#0x22] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x12]
  }
  v19 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, v6, 1), v9, v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL), v6, 2), v10, v6, 3), 2uLL);
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X10 = (uint64_t)&_X3[a3 - 1] + 4;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x12]
  }
  _X10 = (uint64_t *)((char *)&_X3[-1] + 2 * a3 + 4);
  v25 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 2uLL);
  v10.i64[0] = *_X10;
  __asm { PRFUM           #0, [X10,#0x22] }
  _X10 = &_X10[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x12]
  }
  v30 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)((char *)_X3 + 2 * a3), v6, 1), *(int16x4_t *)v10.i8, v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&_X3->i8[2 * a3], *(int8x16_t *)&_X3->i8[2 * a3], 4uLL), v6, 2), *(int16x8_t *)&_X3->i8[2 * a3], v6, 3), 2uLL);
  v31 = result + 1;
  do
  {
    v32 = vmlal_lane_s16(vmull_lane_s16(v25, v7, 1), v19, v7, 0);
    v19 = v25;
    v25 = v30;
    _X13 = (char *)_X3 + 4 * a3;
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = (char *)_X3 + 12 * a3 - 4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v30 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)((char *)_X3 + 4 * a3), v6, 1), *(int16x4_t *)((char *)_X3 + 4 * a3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&_X3->i8[4 * a3], *(int8x16_t *)&_X3->i8[4 * a3], 4uLL), v6, 2), *(int16x8_t *)&_X3->i8[4 * a3], v6, 3), 2uLL);
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v32, v25, v7, 2), v30, v7, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
    --v31;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v31 > 1);
  return result;
}

uint64_t sub_1B67E16B8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6;
  int16x4_t v7;
  uint8x16_t v9;
  int8x16_t v19;
  int8x16_t v26;
  int8x16_t v27;
  int v31;
  uint64_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  uint8x8_t v36;
  int8x16_t v37;
  uint8x8_t v38;
  uint8x16_t v39;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  v7 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[(a2 & 7) - 1]).u64[0];
  _X8 = (uint8x16_t *)(a4 - a3 - 2);
  v9 = *_X8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X8 = &_X8->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = a4 - 2;
  v19 = *(int8x16_t *)(a4 - 2);
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = a4 - 2 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(a4 - 2 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  v26 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v27 = v26;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v31 = result + 1;
  v32 = 2 * a3;
  v33 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v34 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v35 = vdupq_lane_s8(v6, 2);
  v36 = (uint8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
  v37 = vdupq_lane_s8(v6, 3);
  v38 = (uint8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
  do
  {
    v39 = (uint8x16_t)v19;
    v19 = v27;
    _X11 = a4 + v32;
    v27 = *(int8x16_t *)(a4 + v32 - 2);
    __asm { PRFUM           #0, [X11,#0x1D] }
    _X11 = a4 + 6 * a3 - 2;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    v45 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v33.i8), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v37.i8);
    v46 = (int8x16_t)vmlal_u8(vmull_high_u8(v9, v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), v38);
    *(int16x4_t *)v46.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v39, v34), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v36), *(int16x4_t *)v46.i8);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v45, v46, 0xCuLL);
    *(int16x4_t *)v47.i8 = vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), v7, 1), v45, v7, 2), *(int16x4_t *)v45.i8, v7, 0), *(int16x4_t *)v47.i8, v7, 3), 6uLL);
    *a6 = vqrshrun_n_s16(v47, 6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5);
    --v31;
    a4 += a3;
    v9 = v39;
  }
  while (v31 > 1);
  return result;
}

uint64_t sub_1B67E17DC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6;
  int16x4_t v7;
  int8x16_t v9;
  int16x8_t v10;
  uint64_t v16;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v33;
  int8x16_t v34;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  int v58;
  int32x4_t v59;
  int32x4_t v60;
  int16x8_t v62;
  int8x16_t v63;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X9 = (_OWORD *)(a4 + 2 * (-2 - a3));
  v10 = *(int16x8_t *)_X9;
  v9 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x3E] }
  v16 = 4 * a3;
  _X9 = (char *)_X9 + 8 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  v20 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 4uLL);
  v21 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 8uLL);
  v22 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 0xCuLL);
  v23 = vdupq_lane_s16(v6, 0);
  v24 = vmulq_n_s16(v10, v6.i16[0]);
  v25 = vdupq_lane_s16(v6, 3);
  v26 = vmlaq_lane_s16(v24, v22, v6, 3);
  v27 = vdupq_lane_s16(v6, 1);
  v28 = (uint16x8_t)vmulq_lane_s16(v20, v6, 1);
  v29 = vdupq_lane_s16(v6, 2);
  v30 = (uint16x8_t)vmulq_lane_s16(v21, v6, 2);
  v31 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v28.i8), *(int16x4_t *)v26.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v28, v30), v26), 2uLL);
  _X9 = a4 - 4;
  v33 = *(int16x8_t *)(a4 - 4);
  v34 = *(int8x16_t *)(a4 + 12);
  __asm { PRFUM           #0, [X9,#0x3E] }
  _X10 = a4 - 4 + 8 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X10 = (_OWORD *)(a4 - 4 + 2 * a3);
  v40 = (int16x8_t)vextq_s8((int8x16_t)v33, v34, 4uLL);
  v41 = (int16x8_t)vextq_s8((int8x16_t)v33, v34, 8uLL);
  v42 = vmlaq_lane_s16(vmulq_n_s16(v33, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v33, v34, 0xCuLL), v6, 3);
  v43 = (uint16x8_t)vmulq_lane_s16(v40, v6, 1);
  v44 = (uint16x8_t)vmulq_lane_s16(v41, v6, 2);
  v45 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v43.i8), *(int16x4_t *)v42.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v43, v44), v42), 2uLL);
  v46 = *(int16x8_t *)_X10;
  v47 = *((int8x16_t *)_X10 + 1);
  __asm { PRFUM           #0, [X10,#0x3E] }
  _X10 = (char *)_X10 + 8 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  v52 = (int16x8_t)vextq_s8((int8x16_t)v46, v47, 4uLL);
  v53 = (int16x8_t)vextq_s8((int8x16_t)v46, v47, 8uLL);
  v54 = vmlaq_lane_s16(vmulq_n_s16(v46, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v46, v47, 0xCuLL), v6, 3);
  v55 = (uint16x8_t)vmulq_lane_s16(v52, v6, 1);
  v56 = (uint16x8_t)vmulq_lane_s16(v53, v6, 2);
  v57 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)v55.i8), *(int16x4_t *)v54.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v55, v56), v54), 2uLL);
  v58 = result + 1;
  do
  {
    v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v45.i8, v7, 1), *(int16x4_t *)v31.i8, v7, 0);
    v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v45, v7, 1), v31, v7, 0);
    v31 = v45;
    v45 = v57;
    _X13 = a4 + v16;
    v62 = *(int16x8_t *)(a4 + v16 - 4);
    v63 = *(int8x16_t *)(a4 + v16 + 12);
    __asm { PRFUM           #0, [X13,#0x3A] }
    _X13 = a4 + 12 * a3 - 4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    v68 = (int16x8_t)vextq_s8((int8x16_t)v62, v63, 4uLL);
    v69 = (int16x8_t)vextq_s8((int8x16_t)v62, v63, 8uLL);
    v70 = vmlaq_s16(vmulq_s16(v62, v23), (int16x8_t)vextq_s8((int8x16_t)v62, v63, 0xCuLL), v25);
    v71 = (uint16x8_t)vmulq_s16(v68, v27);
    v72 = (uint16x8_t)vmulq_s16(v69, v29);
    v73 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v71.i8);
    v74 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v71, v72), v70);
    *(int16x4_t *)v70.i8 = vshrn_n_s32(vaddw_s16(v73, *(int16x4_t *)v70.i8), 2uLL);
    *(uint16x4_t *)v59.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v59, *(int16x4_t *)v45.i8, v7, 2), *(int16x4_t *)v70.i8, v7, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v59.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v60, v45, v7, 2), vshrn_n_s32(v74, 2uLL), v7, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v57 = vshrn_high_n_s32(*(int16x4_t *)v70.i8, v74, 2uLL);
    *a6 = v59;
    --v58;
    a4 += 2 * a3;
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v58 > 1);
  return result;
}

uint64_t sub_1B67E19C8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  int8x16_t v12;
  int16x4_t v13;
  int8x16_t v23;
  int8x16_t v30;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int v37;
  uint64_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  int8x16_t v42;
  int32x4_t v47;
  int32x4_t v48;

  v6 = qword_1B6920CB0[(a2 & 7) - 1];
  v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  _X8 = (int8x16_t *)(a4 - a3 - 2);
  v12 = *_X8;
  v13 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[((a2 >> 16) & 7) - 1]).u64[0];
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X8 = &_X8->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = a4 - 2;
  v23 = *(int8x16_t *)(a4 - 2);
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = a4 - 2 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(a4 - 2 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  v30 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v34 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL), v9), *(uint8x8_t *)v12.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 6uLL), v10);
  v35 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v9), *(uint8x8_t *)v23.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v10);
  v36 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), v9), *(uint8x8_t *)v30.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 6uLL), v10);
  v37 = result + 1;
  v38 = 2 * a3;
  v39 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v40 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X11 = a4 + v38;
    v42 = *(int8x16_t *)(a4 + v38 - 2);
    __asm { PRFUM           #0, [X11,#0x1D] }
    _X11 = a4 + 6 * a3 - 2;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    v47 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v13, 1), *(int16x4_t *)v36.i8, v13, 2), *(int16x4_t *)v34.i8, v13, 0);
    v48 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v35, v13, 1), v36, v13, 2), v34, v13, 0);
    v34 = v35;
    v35 = v36;
    v36 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v39), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v9), *(uint8x8_t *)v42.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v40);
    *a6 = vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(v47, *(int16x4_t *)v36.i8, v13, 3), 6uLL), vmlsl_high_lane_s16(v48, v36, v13, 3), 6uLL), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5);
    --v37;
    a4 += a3;
  }
  while (v37 > 1);
  return result;
}

uint64_t sub_1B67E1B40(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67E17DC(a1, a2, a3, a4, a5, a6);
  return sub_1B67E17DC(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E1BA0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  int8x16_t v11;
  int8x8_t v12;
  uint8x16_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  int16x4_t v17;
  int8x16_t v19;
  int8x16_t v31;
  int8x16_t v41;
  uint64_t v47;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int v58;
  uint64_t v59;
  uint8x8_t v60;
  uint8x8_t v61;
  int16x8_t v62;
  int8x16_t v64;
  int32x4_t v68;
  int32x4_t v69;

  v12 = qword_1B6920CB0[(a2 & 7) - 1];
  v13 = (uint8x16_t)vdupq_lane_s8(v12, 0);
  v14 = (uint8x8_t)vdup_lane_s8(v12, 1);
  v15 = (uint8x8_t)vdup_lane_s8(v12, 2);
  v16 = (uint8x8_t)vdup_lane_s8(v12, 3);
  v17 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[((a2 >> 16) & 7) - 1]).u64[0];
  _X8 = _X3 - a3;
  v19 = *(int8x16_t *)(_X3 - a3 - 2);
  __asm
  {
    PRFUM           #0, [X8,#0x1D]
    PRFUM           #0, [X8,#0x3E]
    PRFUM           #0, [X8,#0x4D]
  }
  a10.i64[0] = *(_QWORD *)(_X3 - a3 + 14);
  __asm { PRFUM           #0, [X8,#0x1D] }
  _X8 = _X3 - a3 + 14 + 4 * (a3 - 16);
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  v31 = *(int8x16_t *)(_X3 - 2);
  __asm
  {
    PRFUM           #0, [X3,#0x1D]
    PRFUM           #0, [X3,#0x3E]
    PRFUM           #0, [X3,#0x4D]
  }
  a11.i64[0] = *(_QWORD *)(_X3 + 14);
  __asm { PRFUM           #0, [X3,#0x1D] }
  _X10 = _X3 + 14 + 4 * (a3 - 16);
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#7]
  }
  _X10 = (int8x16_t *)(_X3 + 14 + a3 - 16);
  _X11 = &_X10[4].i8[15];
  v41 = *_X10;
  __asm
  {
    PRFUM           #0, [X10,#0x1F]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X11]
  }
  _X8 = (uint64_t *)(_X3 + 14 + a3);
  _X9 = (char *)_X8 + 4 * a3 - 64;
  v47 = *_X8;
  _X8 = (uint64_t *)((char *)_X8 + 15);
  v11.i64[0] = v47;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v51 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), v15), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 6uLL), v16);
  v52 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xAuLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xCuLL), v15), (uint8x16_t)v19, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xEuLL), v16);
  v53 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v15), *(uint8x8_t *)v31.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 6uLL), v16);
  v54 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xAuLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xCuLL), v15), (uint8x16_t)v31, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xEuLL), v16);
  v55 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 4uLL), v15), *(uint8x8_t *)v41.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 6uLL), v16);
  v56 = (int32x4_t)vextq_s8(*_X10, v11, 0xAuLL);
  v57 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v56.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v11, 0xCuLL), v15), (uint8x16_t)v41, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v11, 0xEuLL), v16);
  v58 = result + 1;
  v59 = 2 * a3;
  v60 = (uint8x8_t)vdup_lane_s8(v12, 1);
  v61 = (uint8x8_t)vdup_lane_s8(v12, 3);
  do
  {
    v62 = v53;
    v53 = v55;
    _X11 = _X3 + v59;
    v64 = *(int8x16_t *)(_X3 + v59 - 2);
    __asm
    {
      PRFUM           #0, [X11,#0x1D]
      PRFUM           #0, [X11,#0x3E]
      PRFUM           #0, [X11,#0x4D]
    }
    v56.i64[0] = *(_QWORD *)(_X3 + v59 + 14);
    v55 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 2uLL), v60), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 4uLL), v15), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 6uLL), v61);
    v68 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v54.i8, v17, 1), *(int16x4_t *)v57.i8, v17, 2), *(int16x4_t *)v52.i8, v17, 0);
    v69 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v54, v17, 1), v57, v17, 2), v52, v17, 0);
    v52 = v54;
    v54 = v57;
    __asm { PRFUM           #0, [X11,#0x1D] }
    _X11 = _X3 + 6 * a3 - 50;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    v57 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v64, (int8x16_t)v56, 0xAuLL), v60), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, (int8x16_t)v56, 0xCuLL), v15), (uint8x16_t)v64, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, (int8x16_t)v56, 0xEuLL), v61);
    v56 = vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v62, v17, 1), v53, v17, 2), v51, v17, 0), v55, v17, 3);
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v62.i8, v17, 1), *(int16x4_t *)v53.i8, v17, 2), *(int16x4_t *)v51.i8, v17, 0), *(int16x4_t *)v55.i8, v17, 3), 6uLL), v56, 6uLL), 6uLL), vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(v68, *(int16x4_t *)v57.i8, v17, 3), 6uLL), vmlsl_high_lane_s16(v69, v57, v17, 3),
              6uLL),
            6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5);
    --v58;
    _X3 += a3;
    v51 = v62;
  }
  while (v58 > 1);
  return result;
}

uint64_t sub_1B67E1E10(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67E17DC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint8x16_t sub_1B67E1E8C(int a1, unint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x8_t v18;
  uint8x16_t result;
  uint8x16_t v24;
  uint8x8_t v29;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x8_t v42;
  uint8x8_t v43;
  int16x4_t v44;
  int v48;
  int8x16_t *v49;
  uint64_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint8x8_t v57;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x4_t v78;
  int32x4_t v79;
  int16x4_t v80;
  int32x4_t v81;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X8 = _X3 - a3;
  v8 = *(uint8x16_t *)(_X3 - a3 - 2);
  v9 = *(uint8x16_t *)(_X3 - a3 + 14);
  __asm
  {
    PRFUM           #0, [X8,#0x3D]
    PRFUM           #0, [X8,#0x7E]
    PRFUM           #0, [X8,#0x9D]
  }
  _X8 = (uint8x8_t *)(_X3 - a3 + 30);
  v18 = *_X8;
  __asm { PRFUM           #0, [X8,#0xF] }
  _X8 = (char *)&_X8[-16] + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  result = *(uint8x16_t *)(_X3 - 2);
  v24 = *(uint8x16_t *)(_X3 + 14);
  __asm
  {
    PRFUM           #0, [X3,#0x3D]
    PRFUM           #0, [X3,#0x7E]
    PRFUM           #0, [X3,#0x9D]
  }
  _X8 = _X3 + 30;
  v29 = *(uint8x8_t *)(_X3 + 30);
  __asm { PRFUM           #0, [X8,#0xF] }
  _X10 = _X3 + 30 + 4 * (a3 - 32);
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#7]
  }
  _X10 = (uint8x16_t *)(_X3 + 30 + a3 - 32);
  v35 = *_X10;
  v36 = _X10[1];
  __asm
  {
    PRFUM           #0, [X10,#0x3F]
    PRFM            #0, [X10,#0x80]
    PRFUM           #0, [X10,#0x9F]
  }
  _X8 = (_QWORD *)(_X3 + 30 + a3);
  _X9 = (char *)_X8 + 4 * a3 - 128;
  v42 = *(uint8x8_t *)_X8;
  _X8 = (_QWORD *)((char *)_X8 + 15);
  v43 = v42;
  v44 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[(a2 & 7) - 1]).u64[0];
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v48 = a1 + 1;
  v49 = a6 + 1;
  v50 = 2 * a3;
  v51 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v52 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v53 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v54 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    v55 = v24;
    v56 = result;
    v24 = v36;
    result = v35;
    v57 = v29;
    v29 = v43;
    _X12 = _X3 + v50;
    v35 = *(uint8x16_t *)(_X3 + v50 - 2);
    v36 = *(uint8x16_t *)(_X3 + v50 + 14);
    __asm
    {
      PRFUM           #0, [X12,#0x3D]
      PRFUM           #0, [X12,#0x7E]
      PRFUM           #0, [X12,#0x9D]
    }
    v43 = *(uint8x8_t *)(_X3 + v50 + 30);
    _X13 = _X3 + 6 * a3 - 98;
    __asm
    {
      PRFUM           #0, [X12,#0x2D]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v53.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v51.i8), *(uint8x8_t *)v35.i8, *(uint8x8_t *)v54.i8);
    v67 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v56, v52), result, v53), v8, v51), v35, v54);
    v68 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v53.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v51.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v54.i8);
    v69 = (int16x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v67, 0xCuLL).u64[0];
    v70 = (int16x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL).u64[0];
    v71 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL), v44, 1), v66, v44, 2), *(int16x4_t *)v66.i8, v44, 0), v69, v44, 3);
    v72 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(v69, v44, 1), *(int16x4_t *)v67.i8, v44, 2), v66, v44, 0), v70, v44, 3);
    v66.i64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v68, 0xCuLL).u64[0];
    v73 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v70, v44, 1), v67, v44, 2), *(int16x4_t *)v67.i8, v44, 0), *(int16x4_t *)v66.i8, v44, 3);
    v74 = (int16x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL).u64[0];
    v75 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, v44, 1), *(int16x4_t *)v68.i8, v44, 2), v67, v44, 0), v74, v44, 3);
    v76 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v55, v52), v24, v53), v9, v51), v36, v54);
    v77 = (int8x16_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(v57, *(uint8x8_t *)v52.i8), v29, *(uint8x8_t *)v53.i8), v18, *(uint8x8_t *)v51.i8), v43, *(uint8x8_t *)v54.i8);
    v78 = (int16x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v76, 0xCuLL).u64[0];
    v79 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v74, v44, 1), v68, v44, 2), *(int16x4_t *)v68.i8, v44, 0), v78, v44, 3);
    v80 = (int16x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL).u64[0];
    v81 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(v78, v44, 1), *(int16x4_t *)v76.i8, v44, 2), v68, v44, 0), v80, v44, 3);
    v68.i64[0] = vextq_s8((int8x16_t)v76, v77, 0xCuLL).u64[0];
    v49[-1] = vqrshrun_high_n_s16(vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(v71, 6uLL), v72, 6uLL), 6uLL), vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), v75, 6uLL), 6uLL);
    *v49 = vqrshrun_high_n_s16(vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(v79, 6uLL), v81, 6uLL), 6uLL), vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v80, v44, 1), v76, v44, 2), *(int16x4_t *)v76.i8, v44, 0), *(int16x4_t *)v68.i8, v44, 3), 6uLL), vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v68.i8, v44, 1), *(int16x4_t *)v77.i8, v44, 2), v76, v44, 0),
                 (int16x4_t)*(_OWORD *)&vextq_s8(v77, v77, 4uLL),
                 v44,
                 3),
               6uLL),
             6uLL);
    --v48;
    v49 = (int8x16_t *)((char *)v49 + a5);
    _X3 += a3;
    v18 = v57;
    v8 = v56;
    v9 = v55;
  }
  while (v48 > 1);
  return result;
}

uint64_t sub_1B67E20F0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67E17DC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

double sub_1B67E216C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E1E8C(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E1E8C(a1, v11, a3, a4 + 32, a5, a6 + 2).u64[0];
  return result;
}

uint64_t sub_1B67E21CC(uint64_t result, uint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, int16x4_t *a6)
{
  int v6;
  int16x4_t v7;

  v6 = result + 2;
  do
  {
    v7 = *(int16x4_t *)((char *)a4 + 2 * a3);
    *a6 = vadd_s16(vshl_n_s16(*a4, 4uLL), (int16x4_t)0xE000E000E000E000);
    *(int16x4_t *)((char *)a6 + 2 * a5) = vadd_s16(vshl_n_s16(v7, 4uLL), (int16x4_t)0xE000E000E000E000);
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    a4 = (int16x4_t *)((char *)a4 + 4 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

uint8x8_t sub_1B67E221C(int a1, uint8x8_t result, uint8x8_t a3, uint64_t a4, uint64_t a5, __int32 *a6, uint64_t a7, double *a8)
{
  int v8;

  v8 = a1 + 2;
  do
  {
    result.i32[0] = *(__int32 *)((char *)a6 + a5);
    a3.i32[0] = *a6;
    a3 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3), 6uLL);
    *a8 = *(double *)&a3;
    result = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(result), 6uLL);
    *(double *)((char *)a8 + 2 * a7) = *(double *)&result;
    a6 = (__int32 *)((char *)a6 + 2 * a5);
    a8 = (double *)((char *)a8 + 4 * a7);
    v8 -= 2;
  }
  while (v8 > 2);
  return result;
}

uint64_t sub_1B67E2264(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int16x8_t *a6)
{
  int16x8_t v6;
  int v7;
  int16x8_t v8;

  v6.i64[0] = 0xE000E000E000E000;
  v6.i64[1] = 0xE000E000E000E000;
  v7 = result + 2;
  do
  {
    v8 = *(int16x8_t *)((char *)a4 + 2 * a3);
    *a6 = vaddq_s16(vshlq_n_s16(*a4, 4uLL), v6);
    *(int16x8_t *)((char *)a6 + 2 * a5) = vaddq_s16(vshlq_n_s16(v8, 4uLL), v6);
    a6 = (int16x8_t *)((char *)a6 + 4 * a5);
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    v7 -= 2;
  }
  while (v7 > 2);
  return result;
}

uint16x8_t sub_1B67E22B4(int a1, uint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, uint16x8_t *a6)
{
  int v6;
  uint8x8_t *v8;
  uint8x8_t v11;
  uint8x8_t v20;
  uint16x8_t result;

  v6 = a1 + 2;
  do
  {
    _X13 = (char *)a4 + 4 * a3;
    v8 = (uint8x8_t *)((char *)a4 + a3);
    _X15 = (char *)a4 + 5 * a3;
    v11 = *a4;
    _X3 = (char *)&a4[1] + 7;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)&v8[1] + 7;
    v20 = *v8;
    a4 = (uint8x8_t *)((char *)v8 + a3);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vshll_n_u8(v11, 6uLL);
    result = vshll_n_u8(v20, 6uLL);
    *(uint16x8_t *)((char *)a6 + 2 * a5) = result;
    v6 -= 2;
    a6 = (uint16x8_t *)((char *)a6 + 4 * a5);
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1B67E2320(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int16x8_t v7;
  char v8;
  char v9;
  int16x8_t *v10;
  int v11;
  int16x8_t *v12;
  int16x8_t v13;

  v6 = 0;
  v7.i64[0] = 0xE000E000E000E000;
  v7.i64[1] = 0xE000E000E000E000;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = (int16x8_t *)(a4 + 2 * v6);
    v11 = result + 2;
    v12 = (int16x8_t *)(a6 + 2 * v6);
    do
    {
      v13 = *(int16x8_t *)((char *)v10 + 2 * a3);
      *v12 = vaddq_s16(vshlq_n_s16(*v10, 4uLL), v7);
      *(int16x8_t *)((char *)v12 + 2 * a5) = vaddq_s16(vshlq_n_s16(v13, 4uLL), v7);
      v12 = (int16x8_t *)((char *)v12 + 4 * a5);
      v10 = (int16x8_t *)((char *)v10 + 4 * a3);
      v11 -= 2;
    }
    while (v11 > 2);
    v8 = 0;
    v6 = 8;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint16x8_t sub_1B67E2394(int a1, uint64_t a2, uint64_t a3, uint8x16_t *a4, uint64_t a5, uint16x8_t *a6)
{
  int v6;
  uint64_t v7;
  uint8x16_t v16;
  uint8x16_t v17;
  char *v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v36;
  uint16x8_t *v40;
  uint16x8_t *v41;
  uint16x8_t result;
  uint16x8_t *v43;

  v6 = a1 + 4;
  v7 = 2 * a5;
  do
  {
    _X16 = &a4->i8[4 * a3];
    _X17 = &a4->i8[a3];
    _X0 = &a4->i8[5 * a3];
    _X1 = &a4->i8[2 * a3];
    _X4 = &a4->i8[6 * a3];
    _X6 = &a4->i8[3 * a3];
    _X7 = &a4->i8[7 * a3];
    v16 = *a4;
    _X3 = &a4[1].i8[15];
    v17 = v16;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    v25 = &_X17[2 * a3];
    v26 = *(uint8x16_t *)_X17;
    _X17 += 31;
    v27 = v26;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X0]
      PRFUM           #0, [X0,#0xF]
    }
    v31 = *(uint8x16_t *)_X1;
    _X1 += 31;
    v32 = v31;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X4]
      PRFUM           #0, [X4,#0xF]
    }
    v36 = *(uint8x16_t *)_X6;
    _X6 += 31;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0xF]
    }
    a4 = (uint8x16_t *)&v25[a3];
    *a6 = vshll_n_u8(*(uint8x8_t *)v17.i8, 6uLL);
    a6[1] = vshll_high_n_u8(v17, 6uLL);
    v40 = (uint16x8_t *)((char *)a6 + v7);
    *v40 = vshll_n_u8(*(uint8x8_t *)v27.i8, 6uLL);
    v40[1] = vshll_high_n_u8(v27, 6uLL);
    v41 = (uint16x8_t *)((char *)a6 + v7 + v7);
    *v41 = vshll_n_u8(*(uint8x8_t *)v32.i8, 6uLL);
    v41[1] = vshll_high_n_u8(v32, 6uLL);
    result = vshll_n_u8(*(uint8x8_t *)v36.i8, 6uLL);
    v43 = (uint16x8_t *)((char *)v41 + v7);
    v6 -= 4;
    a6 = (uint16x8_t *)((char *)v43 + v7);
    *v43 = result;
    v43[1] = vshll_high_n_u8(v36, 6uLL);
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1B67E2470(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v6;
  int16x8_t v7;
  int v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t v11;
  BOOL v12;

  v6 = 0;
  v7.i64[0] = 0xE000E000E000E000;
  v7.i64[1] = 0xE000E000E000E000;
  do
  {
    v8 = result + 2;
    v9 = a4;
    v10 = a6;
    do
    {
      v11 = *(int16x8_t *)((char *)v9 + 2 * a3);
      *v10 = vaddq_s16(vshlq_n_s16(*v9, 4uLL), v7);
      *(int16x8_t *)((char *)v10 + 2 * a5) = vaddq_s16(vshlq_n_s16(v11, 4uLL), v7);
      v10 = (int16x8_t *)((char *)v10 + 4 * a5);
      v9 = (int16x8_t *)((char *)v9 + 4 * a3);
      v8 -= 2;
    }
    while (v8 > 2);
    ++a6;
    ++a4;
    v12 = v6 >= 0x18;
    v6 += 8;
  }
  while (!v12);
  return result;
}

uint16x8_t sub_1B67E24E8(int a1, uint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v35;
  uint8x16_t v36;
  uint16x8_t *v41;
  uint16x8_t *v42;
  uint16x8_t result;
  uint16x8_t *v44;

  v6 = 3 * a3;
  v7 = a1 + 4;
  v8 = 2 * a3;
  v9 = 2 * a5;
  do
  {
    v10 = *_X3;
    v11 = _X3[1];
    __asm { PRFUM           #0, [X3,#0x3F] }
    _X16 = &_X3[1].i8[4 * a3 + 15];
    __asm
    {
      PRFUM           #0, [X16,#-0x1F]
      PRFM            #0, [X16]
    }
    _X16 = &_X3->i8[a3];
    v21 = *(uint8x16_t *)((char *)_X3 + a3);
    v22 = *(uint8x16_t *)((char *)&_X3[1] + a3);
    __asm { PRFUM           #0, [X16,#0x3F] }
    _X17 = &_X3->i8[5 * a3];
    __asm
    {
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0x1F]
    }
    _X17 = &_X3->i8[v8];
    v28 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    v29 = *(uint8x16_t *)((char *)&_X3[1] + v8);
    __asm { PRFUM           #0, [X17,#0x3F] }
    _X17 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0x1F]
    }
    _X17 = &_X3->i8[v6];
    v35 = *(uint8x16_t *)((char *)_X3 + 3 * a3);
    v36 = *(uint8x16_t *)((char *)&_X3[1] + v6);
    __asm { PRFUM           #0, [X17,#0x3F] }
    _X17 = &_X3->i8[7 * a3];
    __asm
    {
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0x1F]
    }
    _X3 = (uint8x16_t *)((char *)_X3 + 2 * a3 + a3 + a3);
    *a6 = vshll_n_u8(*(uint8x8_t *)v10.i8, 6uLL);
    a6[1] = vshll_high_n_u8(v10, 6uLL);
    a6[2] = vshll_n_u8(*(uint8x8_t *)v11.i8, 6uLL);
    a6[3] = vshll_high_n_u8(v11, 6uLL);
    v41 = (uint16x8_t *)((char *)a6 + v9);
    *v41 = vshll_n_u8(*(uint8x8_t *)v21.i8, 6uLL);
    v41[1] = vshll_high_n_u8(v21, 6uLL);
    v41[2] = vshll_n_u8(*(uint8x8_t *)v22.i8, 6uLL);
    v41[3] = vshll_high_n_u8(v22, 6uLL);
    v42 = (uint16x8_t *)((char *)a6 + v9 + v9);
    *v42 = vshll_n_u8(*(uint8x8_t *)v28.i8, 6uLL);
    v42[1] = vshll_high_n_u8(v28, 6uLL);
    v42[2] = vshll_n_u8(*(uint8x8_t *)v29.i8, 6uLL);
    v42[3] = vshll_high_n_u8(v29, 6uLL);
    result = vshll_n_u8(*(uint8x8_t *)v35.i8, 6uLL);
    v44 = (uint16x8_t *)((char *)v42 + v9);
    *v44 = result;
    v44[1] = vshll_high_n_u8(v35, 6uLL);
    v7 -= 4;
    a6 = (uint16x8_t *)((char *)v44 + v9);
    v44[2] = vshll_n_u8(*(uint8x8_t *)v36.i8, 6uLL);
    v44[3] = vshll_high_n_u8(v36, 6uLL);
  }
  while (v7 > 4);
  return result;
}

uint64_t sub_1B67E25F8(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v6;
  int16x8_t v7;
  int v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t v11;
  BOOL v12;

  v6 = 0;
  v7.i64[0] = 0xE000E000E000E000;
  v7.i64[1] = 0xE000E000E000E000;
  do
  {
    v8 = result + 2;
    v9 = a4;
    v10 = a6;
    do
    {
      v11 = *(int16x8_t *)((char *)v9 + 2 * a3);
      *v10 = vaddq_s16(vshlq_n_s16(*v9, 4uLL), v7);
      *(int16x8_t *)((char *)v10 + 2 * a5) = vaddq_s16(vshlq_n_s16(v11, 4uLL), v7);
      v10 = (int16x8_t *)((char *)v10 + 4 * a5);
      v9 = (int16x8_t *)((char *)v9 + 4 * a3);
      v8 -= 2;
    }
    while (v8 > 2);
    ++a6;
    ++a4;
    v12 = v6 >= 0x38;
    v6 += 8;
  }
  while (!v12);
  return result;
}

uint16x8_t sub_1B67E2670(int a1, uint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  int v6;
  uint64_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint16x8_t *v29;
  uint16x8_t result;

  v6 = a1 + 2;
  v7 = 2 * a5;
  do
  {
    v8 = *_X3;
    v9 = _X3[1];
    v10 = _X3[2];
    v11 = _X3[3];
    __asm { PRFUM           #0, [X3,#0x7F] }
    _X12 = &_X3->i8[4 * a3];
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x3F]
    }
    _X12 = &_X3->i8[a3];
    v21 = *(uint8x16_t *)((char *)_X3 + a3);
    v22 = *(uint8x16_t *)((char *)&_X3[1] + a3);
    v23 = *(uint8x16_t *)((char *)&_X3[2] + a3);
    v24 = *(uint8x16_t *)((char *)&_X3[3] + a3);
    __asm { PRFUM           #0, [X12,#0x7F] }
    _X13 = &_X3->i8[5 * a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x3F]
    }
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    *a6 = vshll_n_u8(*(uint8x8_t *)v8.i8, 6uLL);
    a6[1] = vshll_high_n_u8(v8, 6uLL);
    a6[2] = vshll_n_u8(*(uint8x8_t *)v9.i8, 6uLL);
    a6[3] = vshll_high_n_u8(v9, 6uLL);
    a6[4] = vshll_n_u8(*(uint8x8_t *)v10.i8, 6uLL);
    a6[5] = vshll_high_n_u8(v10, 6uLL);
    a6[6] = vshll_n_u8(*(uint8x8_t *)v11.i8, 6uLL);
    a6[7] = vshll_high_n_u8(v11, 6uLL);
    v29 = (uint16x8_t *)((char *)a6 + v7);
    *v29 = vshll_n_u8(*(uint8x8_t *)v21.i8, 6uLL);
    v29[1] = vshll_high_n_u8(v21, 6uLL);
    v29[2] = vshll_n_u8(*(uint8x8_t *)v22.i8, 6uLL);
    v29[3] = vshll_high_n_u8(v22, 6uLL);
    result = vshll_n_u8(*(uint8x8_t *)v23.i8, 6uLL);
    v29[4] = result;
    v29[5] = vshll_high_n_u8(v23, 6uLL);
    v6 -= 2;
    a6 = (uint16x8_t *)((char *)a6 + v7 + v7);
    v29[6] = vshll_n_u8(*(uint8x8_t *)v24.i8, 6uLL);
    v29[7] = vshll_high_n_u8(v24, 6uLL);
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1B67E2730(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int16x8_t v6;
  int v8;
  int16x4_t v9;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6);
  v8 = result + 1;
  do
  {
    v9 = (int16x4_t)_X8[1];
    __asm { PRFUM           #0, [X8,#0x1E] }
    _X13 = &_X8[a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    *a6 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x4_t)*_X8, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 6uLL), *(int16x4_t *)v6.i8, 3), v9,
                      v6,
                      4),
                    (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 2uLL),
                    v6,
                    5),
                  (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 4uLL),
                  v6,
                  6),
                (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 6uLL),
                v6,
                7),
              2uLL),
            (int16x4_t)0xE000E000E000E000);
    --v8;
    _X8 = (int8x8_t *)((char *)_X8 + 2 * a3);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v8 > 1);
  return result;
}

uint64_t sub_1B67E27D0(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6;
  int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int8x16_t v16;
  uint8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  int16x4_t v30;
  uint16x8_t v31;

  v6 = qword_1B6920C90[(a2 & 3) - 1];
  v7 = result + 1;
  v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X11 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X11,#-3]
      PRFUM           #0, [X11,#0xC]
    }
    v25 = (uint8x8_t)vextq_s8(v16, v16, 3uLL).u64[0];
    v26 = (uint8x8_t)vextq_s8(v16, v16, 4uLL).u64[0];
    v27 = (uint8x8_t)vextq_s8(v16, v16, 5uLL).u64[0];
    v28 = (uint8x8_t)vextq_s8(v16, v16, 6uLL).u64[0];
    v29 = (uint8x8_t)vextq_s8(v16, v16, 7uLL).u64[0];
    v30 = (int16x4_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9).u64[0];
    v31 = vmlal_u8(vmull_u8(*(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10);
    *(int16x4_t *)v31.i8 = vsub_s16(v30, *(int16x4_t *)v31.i8);
    *a6 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(vmlal_u8(v31, v25, v11), v26, v12), v28, v14), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v27, v13), v29, v15));
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1B67E2884(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int v16;
  int8x16_t v17;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  v7 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v8 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  v9 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v10 = vdupq_laneq_s16(v6, 5);
  v11 = vdupq_laneq_s16(v6, 6);
  v12 = vdupq_laneq_s16(v6, 7);
  v13 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  v14 = vdupq_laneq_s16(v6, 4);
  _X8 = (int8x16_t *)(a4 - 6);
  v16 = result + 1;
  do
  {
    v17 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x2E] }
    _X13 = &_X8->i8[8 * a3];
    v24 = (int16x8_t)vextq_s8(*_X8, v17, 8uLL);
    v25 = (int16x8_t)vextq_s8(*_X8, v17, 0xEuLL);
    v26 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v17, 2uLL), v8), (int16x8_t)vextq_s8(*_X8, v17, 4uLL), v9), (int16x8_t)vextq_s8(*_X8, v17, 0xAuLL), v10), (int16x8_t)vextq_s8(*_X8, v17, 0xCuLL), v11);
    v27 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v17, 6uLL), v13);
    v28 = vmlaq_s16(v26, v25, v12);
    v29 = (uint16x8_t)vmulq_s16(v24, v14);
    v30 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v27.i8);
    v31 = (int32x4_t)vaddl_high_u16(v27, v29);
    *(int16x4_t *)v27.i8 = vadd_s16(vshrn_n_s32(vaddw_s16(v30, *(int16x4_t *)v28.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
    v27.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v31, v28), 2uLL), (int16x4_t)0xE000E000E000E000);
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    *a6 = v27;
    --v16;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (uint16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v16 > 1);
  return result;
}

uint64_t sub_1B67E2960(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int8x16_t v16;

  v6 = qword_1B6920C90[(a2 & 3) - 1];
  v7 = result + 1;
  v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X11 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X11,#-3]
      PRFUM           #0, [X11,#0xC]
    }
    *a6 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9), *(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 3uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 6uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 5uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 7uLL), v15);
    a6 = (uint16x8_t *)((char *)a6 + 2 * a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1B67E2A0C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  sub_1B67E2884(a1, a2, a3, a4, a5, a6);
  return sub_1B67E2884(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E2A6C(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  return sub_1B67E7A88(16, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B67E2A90(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67E2884(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E2B0C(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  return sub_1B67E7A88(32, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B67E2B30(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67E2884(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E2BAC(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  return sub_1B67E7A88(64, a1, a2, a3, a4, a5, a6);
}

char *sub_1B67E2BD0(int a1, unint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, int16x4_t *a6)
{
  int16x8_t v7;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v25;
  int16x4_t v26;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int16x4_t *v48;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x4_t v60;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x4_t v66;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  char *result;
  int16x4_t v73;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x4_t *v82;
  int16x4_t *v83;

  _X9 = (int16x4_t *)((char *)a4 - 6 * a3);
  v7 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  _X8 = (int16x4_t *)((char *)a4 - 4 * a3);
  v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  v10 = v9;
  v11 = *_X8;
  _X8 = (int16x4_t *)((char *)_X8 + 14);
  v12 = v11;
  _X10 = (int16x4_t *)((char *)a4 - 2 * a3);
  v14 = *_X10;
  _X10 = (int16x4_t *)((char *)_X10 + 14);
  v15 = v14;
  _X13 = (int16x4_t *)((char *)a4 + 2 * a3);
  _X11 = (char *)&a4[1] + 6;
  v18 = *a4;
  v19 = *_X13;
  _X13 = (int16x4_t *)((char *)_X13 + 14);
  v20 = v19;
  _X14 = (int16x4_t *)((char *)a4 + 4 * a3);
  v22 = *_X14;
  _X14 = (int16x4_t *)((char *)_X14 + 14);
  v23 = v22;
  _X15 = (int16x4_t *)((char *)a4 + 6 * a3);
  v25 = *_X15;
  _X15 = (int16x4_t *)((char *)_X15 + 14);
  v26 = v25;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X13]
    PRFM            #0, [X14]
    PRFM            #0, [X15]
  }
  v38 = a1 + 4;
  v39 = 3 * a3;
  v40 = 8 * a3;
  v41 = 22 * a3;
  v42 = 12 * a3;
  v43 = 10 * a3;
  v44 = 2 * a5;
  v45 = 14 * a3;
  do
  {
    _X2 = (int16x4_t *)((char *)a4 + v43);
    _X1 = (int16x4_t *)((char *)a4 + v42);
    v48 = (int16x4_t *)((char *)a4 + v45);
    _X16 = (char *)a4 + v41;
    _X17 = &a4[v39];
    a4 = (int16x4_t *)((char *)a4 + v40);
    v51 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v7.i8, 1), v10, *(int16x4_t *)v7.i8, 0), v15, *(int16x4_t *)v7.i8, 2), v18, *(int16x4_t *)v7.i8, 3);
    v52 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v15, *(int16x4_t *)v7.i8, 1), v12, *(int16x4_t *)v7.i8, 0), v18, *(int16x4_t *)v7.i8, 2);
    v53 = vmull_lane_s16(v18, *(int16x4_t *)v7.i8, 1);
    v54 = vmlal_lane_s16(vmull_lane_s16(v20, *(int16x4_t *)v7.i8, 1), v18, *(int16x4_t *)v7.i8, 0);
    _X4 = (char *)&a4[1] + 6;
    v18 = *a4;
    __asm { PRFM            #0, [X4] }
    v57 = vmlal_laneq_s16(v51, v20, v7, 4);
    v58 = vmlal_lane_s16(v52, v20, *(int16x4_t *)v7.i8, 3);
    v59 = vmlal_lane_s16(vmlal_lane_s16(v53, v15, *(int16x4_t *)v7.i8, 0), v20, *(int16x4_t *)v7.i8, 2);
    v10 = v20;
    v60 = *_X2;
    _X2 = (int16x4_t *)((char *)_X2 + 14);
    v20 = v60;
    __asm { PRFM            #0, [X2] }
    v62 = vmlal_laneq_s16(v57, v23, v7, 5);
    v63 = vmlal_laneq_s16(v58, v23, v7, 4);
    v64 = vmlal_lane_s16(v59, v23, *(int16x4_t *)v7.i8, 3);
    v65 = vmlal_lane_s16(v54, v23, *(int16x4_t *)v7.i8, 2);
    v12 = v23;
    v66 = *_X1;
    _X1 = (int16x4_t *)((char *)_X1 + 14);
    v23 = v66;
    __asm { PRFM            #0, [X1] }
    v68 = vmlal_laneq_s16(v62, v26, v7, 6);
    v69 = vmlal_laneq_s16(v63, v26, v7, 5);
    v70 = vmlal_laneq_s16(v64, v26, v7, 4);
    v71 = vmlal_lane_s16(v65, v26, *(int16x4_t *)v7.i8, 3);
    v15 = v26;
    v73 = *v48;
    result = (char *)&v48[1] + 6;
    v26 = v73;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#6]
      PRFUM           #0, [X17,#6]
    }
    v79 = vmlal_laneq_s16(vmlal_laneq_s16(v69, *a4, v7, 6), v20, v7, 7);
    v80 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v70, *a4, v7, 5), v20, v7, 6), v23, v7, 7);
    v81 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v71, *a4, v7, 4), v20, v7, 5), v23, v7, 6), v73, v7, 7);
    *a6 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v68, *a4, v7, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int16x4_t *)((char *)a6 + v44) = vadd_s16(vshrn_n_s32(v79, 2uLL), (int16x4_t)0xE000E000E000E000);
    v82 = (int16x4_t *)((char *)a6 + v44 + v44);
    *v82 = vadd_s16(vshrn_n_s32(v80, 2uLL), (int16x4_t)0xE000E000E000E000);
    v83 = (int16x4_t *)((char *)v82 + v44);
    *v83 = vadd_s16(vshrn_n_s32(v81, 2uLL), (int16x4_t)0xE000E000E000E000);
    v38 -= 4;
    a6 = (int16x4_t *)((char *)v83 + v44);
  }
  while (v38 > 4);
  return result;
}

int16x4_t *sub_1B67E2D94(int a1, unint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, int16x4_t *a6)
{
  uint16x8_t v6;
  int8x8_t v7;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v36;
  uint8x8_t v37;
  uint8x8_t v43;
  uint8x8_t v44;
  uint8x8_t v50;
  uint8x8_t v51;
  uint64_t v52;
  uint8x8_t v57;
  uint8x8_t v58;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v66;
  uint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  uint8x8_t v73;
  uint8x8_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint8x8_t v77;
  uint8x8_t v78;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  int16x4_t v90;
  int16x4_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  int16x4_t v98;
  uint8x8_t v99;
  uint8x8_t v100;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint8x8_t v108;
  uint16x8_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint8x8_t v115;
  uint16x8_t v119;
  int16x4_t *v120;
  int16x4_t *result;

  v7 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  _X8 = (uint8x8_t *)((char *)a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X8 + a3);
  v11 = *_X8;
  _X8 = (uint8x8_t *)((char *)_X8 + 15);
  v12 = v11;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  v22 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v23 = v22;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  v29 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  v30 = v29;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  v36 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v37 = v36;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  v43 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  v44 = v43;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (uint8x8_t *)((char *)_X10 + a3);
  v50 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  v51 = v50;
  v52 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X13 = (char *)_X11 + 4 * a3;
  v57 = *_X11;
  _X11 = (uint8x8_t *)((char *)_X11 + 15);
  v58 = v57;
  __asm { PRFM            #0, [X11] }
  v60 = a1 + 4;
  v61 = 11 * a3;
  v62 = a3;
  v63 = 7 * a3;
  __asm
  {
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  v66 = 5 * a3;
  v67 = 10 * a3;
  v68 = (uint8x8_t)vdup_lane_s8(v7, 1);
  v69 = 6 * a3;
  v70 = 2 * a5;
  v71 = (uint8x8_t)vdup_lane_s8(v7, 0);
  v72 = 9 * a3;
  v73 = (uint8x8_t)vdup_lane_s8(v7, 2);
  v74 = (uint8x8_t)vdup_lane_s8(v7, 3);
  v75 = (uint8x8_t)vdup_lane_s8(v7, 4);
  v76 = (uint8x8_t)vdup_lane_s8(v7, 5);
  v77 = (uint8x8_t)vdup_lane_s8(v7, 6);
  v78 = (uint8x8_t)vdup_lane_s8(v7, 7);
  do
  {
    _X2 = &a4[v62];
    _X0 = (uint8x8_t *)((char *)a4 + v66);
    _X4 = (char *)a4 + v72;
    _X1 = (uint8x8_t *)((char *)a4 + v69);
    _X7 = (char *)a4 + v67;
    _X6 = (uint8x8_t *)((char *)a4 + v63);
    _X20 = (char *)a4 + v61;
    a4 = (uint8x8_t *)((char *)a4 + v52);
    v86 = vmull_u8(v23, v68);
    v87 = vmull_u8(v37, v68);
    v88 = vmull_u8(v37, v71);
    *(int16x4_t *)v86.i8 = vsub_s16(*(int16x4_t *)v86.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v12, v71), v30, v73));
    v89 = vmlal_u8(v86, v37, v74);
    v90 = (int16x4_t)vmlal_u8(vmull_u8(v23, v71), v37, v73).u64[0];
    _X19 = (char *)&a4[1] + 7;
    v37 = *a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFM            #0, [X2]
      PRFUM           #0, [X2,#7]
    }
    v95 = (int16x4_t)vmull_u8(v44, v68).u64[0];
    v96 = vmlal_u8(v89, v44, v75);
    *(int16x4_t *)v6.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmull_u8(v30, v68), v90);
    v97 = vmlal_u8(v6, v44, v74);
    v98 = (int16x4_t)vmlal_u8(vmull_u8(v30, v71), v44, v73).u64[0];
    v99 = *_X0;
    _X0 = (uint8x8_t *)((char *)_X0 + 15);
    v100 = v99;
    v12 = v44;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X4]
      PRFUM           #0, [X4,#7]
    }
    v104 = vmull_u8(v51, v76);
    v105 = vmlal_u8(v97, v51, v75);
    *(int16x4_t *)v87.i8 = vsub_s16(*(int16x4_t *)v87.i8, v98);
    v106 = vmlal_u8(v87, v51, v74);
    v107 = vmlal_u8(v88, v51, v73);
    v23 = v51;
    v108 = *_X1;
    _X1 = (uint8x8_t *)((char *)_X1 + 15);
    v51 = v108;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#7]
    }
    v112 = vmull_u8(v58, v76);
    v96.i64[0] = vmlal_u8(v96, v58, v77).u64[0];
    v113 = vmlal_u8(v106, v58, v75);
    *(int16x4_t *)v107.i8 = vsub_s16(v95, *(int16x4_t *)v107.i8);
    v114 = vmlal_u8(v107, v58, v74);
    v30 = v58;
    v115 = *_X6;
    _X6 = (uint8x8_t *)((char *)_X6 + 15);
    v58 = v115;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#7]
    }
    v119 = vmull_u8(*a4, v76);
    *a6 = vsub_s16(*(int16x4_t *)v96.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v104, *a4, v78));
    v6 = vmlal_u8(v105, v37, v77);
    *(int16x4_t *)((char *)a6 + v70) = vsub_s16(*(int16x4_t *)v6.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v112, v100, v78));
    v120 = (int16x4_t *)((char *)a6 + v70 + v70);
    *v120 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v113, v100, v77), (int16x4_t)*(_OWORD *)&vmlal_u8(v119, v51, v78));
    result = (int16x4_t *)((char *)v120 + v70);
    v60 -= 4;
    a6 = (int16x4_t *)((char *)result + v70);
    *result = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(v114, v37, v75), v51, v77), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v100, v76), v115, v78));
    v44 = v100;
  }
  while (v60 > 4);
  return result;
}

int16x8_t sub_1B67E2FF0(int a1, unint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  int16x8_t v6;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v14;
  int16x8_t result;
  int16x8_t v17;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v42;
  int v43;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;

  v6 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  _X8 = &a4->i8[-6 * a3];
  v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  v9 = v8;
  _X10 = &a4->i8[-4 * a3];
  v11 = *(int16x8_t *)_X10;
  _X10 += 30;
  v12 = v11;
  _X11 = &a4->i8[-2 * a3];
  v14 = *(int16x8_t *)_X11;
  _X11 += 30;
  result = v14;
  _X12 = &a4[1].i8[14];
  v17 = *a4;
  _X13 = &a4->i8[2 * a3];
  v19 = *(int16x8_t *)_X13;
  _X13 += 30;
  v20 = v19;
  _X14 = &a4->i8[4 * a3];
  v22 = *(int16x8_t *)_X14;
  _X14 += 30;
  v23 = v22;
  _X15 = &a4->i8[6 * a3];
  v25 = *(int16x8_t *)_X15;
  _X15 += 30;
  v26 = v25;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X12]
    PRFM            #0, [X13]
  }
  v36 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v37 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  v38 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v39 = vdupq_laneq_s16(v6, 5);
  v40 = vdupq_laneq_s16(v6, 6);
  __asm { PRFM            #0, [X14] }
  v42 = vdupq_laneq_s16(v6, 7);
  v43 = a1 + 2;
  __asm { PRFM            #0, [X15] }
  v45 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  v46 = vdupq_laneq_s16(v6, 4);
  do
  {
    v47 = result;
    v48 = v17;
    result = v20;
    v17 = v23;
    v20 = v26;
    _X16 = (uint64_t)&a4[1].i64[a3 + 1] + 6;
    v23 = *(int16x8_t *)((char *)a4 + 8 * a3);
    __asm { PRFM            #0, [X16] }
    _X17 = (uint64_t)&a4[1].i64[1] + 10 * a3 + 6;
    v26 = *(int16x8_t *)((char *)a4 + 10 * a3);
    __asm { PRFM            #0, [X17] }
    _X16 = &a4->i8[18 * a3];
    _X17 = &a4->i8[20 * a3];
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X17,#0xE]
    }
    v59 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v40), v17, v39), v47, v38), v12, v37), v9, v36);
    v60 = (uint16x8_t)vmulq_s16(v48, v45);
    v61 = (uint16x8_t)vmulq_s16(result, v46);
    v62 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v61.i8);
    v63 = vmlaq_s16(v59, v23, v42);
    v64 = (int32x4_t)vaddl_high_u16(v60, v61);
    v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v39), v48, v38), v47, v37), v12, v36);
    v66 = vaddw_s16(v62, *(int16x4_t *)v63.i8);
    v67 = vmlaq_s16(vmlaq_s16(v65, v23, v40), v26, v42);
    v68 = (uint16x8_t)vmulq_s16(result, v45);
    v69 = (uint16x8_t)vmulq_s16(v17, v46);
    *(int16x4_t *)v66.i8 = vadd_s16(vshrn_n_s32(v66, 2uLL), (int16x4_t)0xE000E000E000E000);
    v66.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v64, v63), 2uLL), (int16x4_t)0xE000E000E000E000);
    *a6 = v66;
    *(int16x4_t *)v66.i8 = vadd_s16(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v68.i8, *(uint16x4_t *)v69.i8), *(int16x4_t *)v67.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
    v66.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v68, v69), v67), 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v66;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v43 -= 2;
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    v12 = v48;
    v9 = v47;
  }
  while (v43 > 2);
  return result;
}

uint16x8_t *sub_1B67E319C(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v35;
  uint8x8_t v36;
  uint8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint8x8_t v56;
  uint8x8_t v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  uint8x8_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint8x8_t v77;
  uint16x8_t v78;
  uint8x8_t v80;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint8x8_t v102;
  uint16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  uint8x8_t v109;
  uint16x8_t *v113;
  uint16x8_t *result;

  v6 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  _X8 = (_QWORD *)(a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_QWORD *)((char *)_X8 + a3);
  v10 = *(uint8x8_t *)_X8;
  _X8 = (_QWORD *)((char *)_X8 + 15);
  v11 = v10;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_QWORD *)((char *)_X10 + a3);
  v21 = *(uint8x8_t *)_X10;
  _X10 = (_QWORD *)((char *)_X10 + 15);
  v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_QWORD *)((char *)_X9 + a3);
  v28 = *(uint8x8_t *)_X9;
  _X9 = (_QWORD *)((char *)_X9 + 15);
  v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_QWORD *)((char *)_X10 + a3);
  v35 = *(uint8x8_t *)_X10;
  _X10 = (_QWORD *)((char *)_X10 + 15);
  v36 = v35;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_QWORD *)((char *)_X9 + a3);
  v42 = *(uint8x8_t *)_X9;
  _X9 = (_QWORD *)((char *)_X9 + 15);
  v43 = v42;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_QWORD *)((char *)_X10 + a3);
  v49 = *(uint8x8_t *)_X10;
  _X10 = (_QWORD *)((char *)_X10 + 15);
  v50 = v49;
  v51 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X13 = (char *)_X11 + 4 * a3;
  v56 = *(uint8x8_t *)_X11;
  _X11 = (_QWORD *)((char *)_X11 + 15);
  v57 = v56;
  __asm { PRFM            #0, [X11] }
  v59 = a1 + 4;
  v60 = 11 * a3;
  v61 = 8 * a3;
  v62 = 7 * a3;
  __asm
  {
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  v65 = 5 * a3;
  v66 = 10 * a3;
  v67 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v68 = 6 * a3;
  v69 = 2 * a5;
  v70 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v71 = 9 * a3;
  v72 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v73 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v74 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v75 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v76 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v77 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    v78 = vmlsl_u8(vmull_u8(v22, v67), v11, v70);
    v11 = v43;
    _X1 = a4 + v51 + 15;
    v80 = *(uint8x8_t *)(a4 + v51);
    __asm { PRFM            #0, [X1] }
    _X1 = a4 + v61;
    __asm
    {
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#7]
    }
    v85 = vmlal_u8(vmlal_u8(vmlsl_u8(v78, v29, v72), v36, v73), v43, v74);
    v86 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v29, v67), v22, v70), v36, v72), v43, v73);
    v87 = vmlsl_u8(vmlsl_u8(vmull_u8(v36, v67), v29, v70), v43, v72);
    v88 = vmull_u8(v43, v67);
    _X1 = a4 + v65 + 15;
    v43 = *(uint8x8_t *)(a4 + v65);
    _X2 = a4 + v71;
    _X4 = (_QWORD *)(a4 + v68);
    _X6 = a4 + v66;
    _X7 = (_QWORD *)(a4 + v62);
    _X19 = a4 + v60;
    a4 += v51;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X2]
      PRFUM           #0, [X2,#7]
    }
    v98 = vmlsl_u8(vmlal_u8(v85, v57, v76), v50, v75);
    v99 = vmlal_u8(v86, v50, v74);
    v100 = vmlal_u8(v87, v50, v73);
    v101 = vmlsl_u8(vmlsl_u8(v88, v36, v70), v50, v72);
    v22 = v50;
    v102 = *(uint8x8_t *)_X4;
    _X4 = (_QWORD *)((char *)_X4 + 15);
    v50 = v102;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X6]
      PRFUM           #0, [X6,#7]
    }
    v106 = vmlsl_u8(vmlal_u8(v99, v80, v76), v57, v75);
    v107 = vmlal_u8(v100, v57, v74);
    v108 = vmlal_u8(v101, v57, v73);
    v29 = v57;
    v109 = *(uint8x8_t *)_X7;
    _X7 = (_QWORD *)((char *)_X7 + 15);
    v57 = v109;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#7]
    }
    *a6 = vmlsl_u8(v98, v80, v77);
    *(uint16x8_t *)((char *)a6 + v69) = vmlsl_u8(v106, v43, v77);
    v113 = (uint16x8_t *)((char *)a6 + v69 + v69);
    *v113 = vmlsl_u8(vmlsl_u8(vmlal_u8(v107, v43, v76), v80, v75), v50, v77);
    result = (uint16x8_t *)((char *)v113 + v69);
    *result = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v108, v80, v74), v50, v76), v43, v75), v109, v77);
    v59 -= 4;
    a6 = (uint16x8_t *)((char *)result + v69);
    v36 = v80;
  }
  while (v59 > 4);
  return result;
}

double sub_1B67E33DC(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E2FF0(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E2FF0(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

uint8x16_t sub_1B67E343C(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  uint8x16_t *v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v21;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t *v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t result;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v55;
  uint8x16_t v56;
  int v60;
  uint64_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t *v88;

  v6 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  _X8 = (_OWORD *)(a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  v9 = (uint8x16_t *)((char *)_X8 + a3);
  v10 = *(uint8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v11 = v10;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = &v9->i8[4 * a3];
  _X9 = &v9[1].i8[15];
  v21 = *v9;
  _X10 = &v9->i8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &_X10[4 * a3];
  _X9 = &_X10[a3];
  v28 = *(uint8x16_t *)_X10;
  _X10 += 31;
  v29 = v28;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &_X9[4 * a3];
  v34 = (uint8x16_t *)&_X9[a3];
  v35 = *(uint8x16_t *)_X9;
  _X9 += 31;
  v36 = v35;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &v34->i8[4 * a3];
  _X9 = &v34[1].i8[15];
  result = *v34;
  _X10 = &v34->i8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = &_X10[4 * a3];
  _X11 = &_X10[a3];
  v49 = *(uint8x16_t *)_X10;
  _X10 += 31;
  v50 = v49;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = &_X11[4 * a3];
  v55 = *(uint8x16_t *)_X11;
  _X11 += 31;
  v56 = v55;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v60 = a1 + 2;
  v61 = 2 * a5;
  v62 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v63 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v64 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v65 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  v66 = (uint8x16_t)vdupq_lane_s8(v6, 4);
  v67 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  v68 = (uint8x16_t)vdupq_lane_s8(v6, 6);
  v69 = (uint8x16_t)vdupq_lane_s8(v6, 7);
  do
  {
    v70 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v62.i8);
    v71 = vmlsl_high_u8(vmull_high_u8(v29, v63), v21, v62);
    v72 = vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v62.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v64.i8);
    v73 = vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v21, v63), v11, v62), v29, v64);
    v11 = v29;
    v29 = result;
    v74 = vmlal_u8(v72, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v65.i8);
    v75 = vmlal_high_u8(v73, v36, v65);
    v76 = vmlsl_u8(v70, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v64.i8);
    v77 = vmlsl_high_u8(v71, v36, v64);
    v21 = v36;
    v36 = v50;
    result = v56;
    _X15 = a4 + 4 * a3 + 31;
    v50 = *(uint8x16_t *)(a4 + 4 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = a4 + 8 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    _X15 = a4 + 5 * a3 + 31;
    v56 = *(uint8x16_t *)(a4 + 5 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = a4 + 9 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    *a6 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v74, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v68.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v69.i8);
    a6[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v75, v29, v66), result, v68), v36, v67), v50, v69);
    v88 = (uint16x8_t *)((char *)a6 + v61);
    *v88 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(v76, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v68.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v56.i8, *(uint8x8_t *)v69.i8);
    v88[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(v77, v29, v65), v36, v66), v50, v68), result, v67), v56, v69);
    v60 -= 2;
    a4 += 2 * a3;
    a6 = (uint16x8_t *)((char *)a6 + v61 + v61);
  }
  while (v60 > 2);
  return result;
}

void sub_1B67E3628(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67E2FF0(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

double sub_1B67E36A4(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E343C(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E343C(a1, v11, a3, a4 + 16, a5, a6 + 2).u64[0];
  return result;
}

void sub_1B67E3704(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67E2FF0(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

double sub_1B67E3780(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E343C(a1, a2, a3, a4, a5, a6);
  sub_1B67E343C(a1, v11, a3, a4 + 16, a5, a6 + 2);
  sub_1B67E343C(a1, v11, a3, a4 + 32, a5, a6 + 4);
  *(_QWORD *)&result = sub_1B67E343C(a1, v11, a3, a4 + 48, a5, a6 + 6).u64[0];
  return result;
}

uint64_t sub_1B67E3818(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int8x8_t v23;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int8x8_t v32;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v41;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int8x8_t v50;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int8x8_t v59;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int8x8_t v68;
  int16x4_t v73;
  int v74;
  uint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x4_t v79;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  v7 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6 * a3);
  v9 = *(int16x4_t *)((char *)&_X8[-1] + 2);
  _X8 = (int8x8_t *)((char *)_X8 - 6);
  v10 = (int16x4_t)_X8[1];
  __asm { PRFUM           #0, [X8,#0x1E] }
  _X9 = &_X8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X8 + 2 * a3);
  v20 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 2uLL), *(int16x4_t *)v6.i8, 1), v9, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 6uLL), *(int16x4_t *)v6.i8, 3), v10, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 6uLL),
            v6,
            7),
          2uLL);
  v21 = *_X9;
  v22 = _X9[1];
  v23 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v29 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 2uLL), *(int16x4_t *)v6.i8, 1), v21, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 6uLL), *(int16x4_t *)v6.i8, 3), v22, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v22, v23, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v22, v23, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v22, v23, 6uLL),
            v6,
            7),
          2uLL);
  v30 = *_X9;
  v31 = _X9[1];
  v32 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v38 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 2uLL), *(int16x4_t *)v6.i8, 1), v30, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 6uLL), *(int16x4_t *)v6.i8, 3), v31, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v31, v32, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v31, v32, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v31, v32, 6uLL),
            v6,
            7),
          2uLL);
  v39 = *_X9;
  v40 = _X9[1];
  v41 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v47 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v6.i8, 1), v39, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL), *(int16x4_t *)v6.i8, 3), v40, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v40, v41, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v40, v41, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v40, v41, 6uLL),
            v6,
            7),
          2uLL);
  v48 = *_X9;
  v49 = _X9[1];
  v50 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v56 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 2uLL), *(int16x4_t *)v6.i8, 1), v48, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 6uLL), *(int16x4_t *)v6.i8, 3), v49, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v49, v50, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v49, v50, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v49, v50, 6uLL),
            v6,
            7),
          2uLL);
  v57 = *_X9;
  v58 = _X9[1];
  v59 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  v65 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 2uLL), *(int16x4_t *)v6.i8, 1), v57, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 6uLL), *(int16x4_t *)v6.i8, 3), v58, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v58, v59, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v58, v59, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v58, v59, 6uLL),
            v6,
            7),
          2uLL);
  v66 = *_X9;
  v67 = _X9[1];
  v68 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X9 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 2uLL), *(int16x4_t *)v6.i8, 1), v66, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 6uLL), *(int16x4_t *)v6.i8, 3), v67, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v67, v68, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v67, v68, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v67, v68, 6uLL),
            v6,
            7),
          2uLL);
  v74 = result + 1;
  v75 = 8 * a3;
  do
  {
    v76.i64[0] = 0x38000000380000;
    v76.i64[1] = 0x38000000380000;
    v77 = vmlal_lane_s16(vmlal_lane_s16(v76, v20, *(int16x4_t *)v7.i8, 0), v29, *(int16x4_t *)v7.i8, 1);
    v20 = v29;
    v29 = v38;
    v38 = v47;
    v47 = v56;
    v56 = v65;
    _X13 = a4 + v75;
    v79 = *(int16x4_t *)(a4 + v75 + 2);
    __asm { PRFM            #0, [X13,#0x18] }
    v65 = v73;
    _X13 = a4 + 16 * a3 - 6;
    __asm { PRFM            #0, [X13] }
    v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v79, 2uLL), *(int16x4_t *)v6.i8, 1), *(int16x4_t *)(a4 + v75 - 6), *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v79, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v79, 6uLL), *(int16x4_t *)v6.i8,
                      3),
                    v79,
                    v6,
                    4),
                  (int16x4_t)vext_s8((int8x8_t)v79, *(int8x8_t *)(a4 + v75 + 10), 2uLL),
                  v6,
                  5),
                (int16x4_t)vext_s8((int8x8_t)v79, *(int8x8_t *)(a4 + v75 + 10), 4uLL),
                v6,
                6),
              (int16x4_t)vext_s8((int8x8_t)v79, *(int8x8_t *)(a4 + v75 + 10), 6uLL),
              v6,
              7),
            2uLL);
    __asm { PRFUM           #0, [X13,#0x16] }
    *a6 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v77, v29, *(int16x4_t *)v7.i8, 2), v38, *(int16x4_t *)v7.i8, 3), v47, v7, 4), v56, v7, 5), v65, v7, 6), v73, v7, 7), 6uLL);
    --v74;
    a4 += 2 * a3;
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v74 > 1);
  return result;
}

uint64_t sub_1B67E3B74(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  uint8x16_t v9;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v35;
  uint8x16_t v42;
  uint8x16_t v43;
  int16x8_t v45;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v53;
  int8x16_t v57;
  int8x16_t v58;
  int v61;
  uint8x16_t v62;
  int8x16_t v63;
  uint8x8_t v64;
  int8x16_t v65;
  uint8x8_t v66;
  int8x16_t v67;
  uint8x8_t v69;
  uint8x16_t v70;
  int8x16_t v71;
  uint8x8_t v72;
  int8x16_t v73;
  uint8x8_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int16x8_t v83;
  int8x16_t v84;

  v6 = qword_1B6920C90[((a2 >> 16) & 3) - 1];
  _X8 = -3 * a3 + a4;
  v8 = *(uint8x16_t *)(_X8 - 3);
  _X8 -= 3;
  v9 = v8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = _X8 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(_X8 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  v21 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v22 = v21;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  v27 = (int8x16_t *)((char *)_X10 + a3);
  v28 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v29 = v28;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &v27->i8[4 * a3];
  _X10 = &v27[1].i8[15];
  v35 = *v27;
  _X9 = &v27->i8[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &_X9[4 * a3];
  _X10 = &_X9[a3];
  v42 = *(uint8x16_t *)_X9;
  _X9 += 31;
  v43 = v42;
  __asm { PRFM            #0, [X9] }
  v45 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1B6920C90[(a2 & 3) - 1]);
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = &_X10[4 * a3];
  _X11 = &_X10[a3];
  v50 = *(int8x16_t *)_X10;
  _X10 += 31;
  v51 = v50;
  __asm { PRFM            #0, [X10] }
  v53 = 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X12 = &_X11[4 * a3];
  v57 = *(int8x16_t *)_X11;
  _X11 += 31;
  v58 = v57;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X12]
  }
  v61 = result + 1;
  v62 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v63 = vdupq_lane_s8(v6, 2);
  v64 = (uint8x8_t)vextq_s8(v63, v63, 8uLL).u64[0];
  v65 = vdupq_lane_s8(v6, 3);
  v66 = (uint8x8_t)vextq_s8(v65, v65, 8uLL).u64[0];
  v67 = vdupq_lane_s8(v6, 4);
  __asm { PRFUM           #0, [X12,#0xF] }
  v69 = (uint8x8_t)vextq_s8(v67, v67, 8uLL).u64[0];
  v70 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v71 = vdupq_lane_s8(v6, 6);
  v72 = (uint8x8_t)vextq_s8(v71, v71, 8uLL).u64[0];
  v73 = vdupq_lane_s8(v6, 7);
  v74 = (uint8x8_t)vextq_s8(v73, v73, 8uLL).u64[0];
  v75 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  do
  {
    v76 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v70.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v62.i8);
    v77 = vmull_high_u8((uint8x16_t)v22, v70);
    v78 = vmull_high_u8(v9, v62);
    v9 = (uint8x16_t)v22;
    v22 = v29;
    v29 = v35;
    v35 = (int8x16_t)v43;
    v43 = (uint8x16_t)v51;
    v51 = v58;
    _X12 = a4 + v53;
    v58 = *(int8x16_t *)(a4 + v53 - 3);
    __asm { PRFUM           #0, [X12,#0x1C] }
    _X12 = a4 + 8 * a3 - 3;
    __asm { PRFM            #0, [X12] }
    v83 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v76, *(uint8x8_t *)v22.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v35.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v51.i8, *(uint8x8_t *)v71.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v75.i8), *(uint8x8_t *)v58.i8, *(uint8x8_t *)v73.i8);
    *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)v77.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v78, (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v64));
    v84 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v77, (uint8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v66), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), v69), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), v72);
    *(int16x4_t *)v84.i8 = vsub_s16(*(int16x4_t *)v84.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v43, v75), (uint8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), v74));
    __asm { PRFUM           #0, [X12,#0xF] }
    *a6 = vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 2uLL), *(int16x4_t *)v45.i8, 1), *(int16x4_t *)v83.i8, *(int16x4_t *)v45.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL), *(int16x4_t *)v45.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 6uLL), *(int16x4_t *)v45.i8,
                      3),
                    v83,
                    v45,
                    4),
                  (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xCuLL),
                  v45,
                  6),
                (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xAuLL),
                v45,
                5),
              (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xEuLL),
              v45,
              7),
            6uLL);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
    --v61;
    a4 += a3;
  }
  while (v61 > 1);
  return result;
}

uint64_t sub_1B67E3D8C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  int16x8_t v6;
  int16x8_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  int16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v51;
  int16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int8x16_t v96;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int v119;
  uint64_t v120;
  int16x8_t v121;
  int16x8_t v123;
  int8x16_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int16x8_t v140;
  uint16x8_t v141;
  uint16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;

  v6 = xmmword_1B6920CF0[(a2 & 3) - 1];
  _X8 = (int8x16_t *)(a4 - 6 * a3);
  v8 = *(int16x8_t *)((char *)&_X8[-1] + 10);
  _X8 = (int8x16_t *)((char *)_X8 - 6);
  v9 = _X8[1];
  v10 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 2uLL);
  v11 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 4uLL);
  v12 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 6uLL);
  v13 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 8uLL);
  v14 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xAuLL);
  v15 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xCuLL);
  v16 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v17 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xEuLL);
  v18 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  v19 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v20 = vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v8, v6.i16[0]), v10, *(int16x4_t *)v6.i8, 1), v11, *(int16x4_t *)v6.i8, 2);
  v21 = vdupq_laneq_s16(v6, 5);
  v22 = vdupq_laneq_s16(v6, 6);
  v23 = vmlaq_laneq_s16(vmlaq_laneq_s16(v20, v14, v6, 5), v15, v6, 6);
  v24 = vdupq_laneq_s16(v6, 7);
  v25 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  v26 = vmlaq_laneq_s16(v23, v17, v6, 7);
  v27 = xmmword_1B6920CF0[((a2 >> 16) & 3) - 1];
  __asm { PRFUM           #0, [X8,#0x2E] }
  _X9 = &_X8->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  v36 = (uint16x8_t)vmulq_lane_s16(v12, *(int16x4_t *)v6.i8, 3);
  v37 = vdupq_laneq_s16(v6, 4);
  v38 = (uint16x8_t)vmulq_laneq_s16(v13, v6, 4);
  _X9 = (int8x16_t *)((char *)_X8 + 2 * a3);
  v40 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v36.i8), *(int16x4_t *)v26.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v36, v38), v26), 2uLL);
  v41 = *(int16x8_t *)_X9;
  v42 = _X9[1];
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  v47 = (int16x8_t)vextq_s8(*_X9, v42, 2uLL);
  v48 = (int16x8_t)vextq_s8(*_X9, v42, 4uLL);
  v49 = (int16x8_t)vextq_s8(*_X9, v42, 6uLL);
  _X9 = &_X9->i8[2 * a3];
  v51 = (int16x8_t)vextq_s8((int8x16_t)v41, v42, 8uLL);
  v52 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v41, v6.i16[0]), v47, *(int16x4_t *)v6.i8, 1), v48, *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v41, v42, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v41, v42, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v41, v42, 0xEuLL), v6, 7);
  v53 = (uint16x8_t)vmulq_lane_s16(v49, *(int16x4_t *)v6.i8, 3);
  v54 = (uint16x8_t)vmulq_laneq_s16(v51, v6, 4);
  v55 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v53.i8), *(int16x4_t *)v52.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v53, v54), v52), 2uLL);
  v56 = *(int16x8_t *)_X9;
  v57 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v63 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 6uLL);
  v64 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
  v65 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v56, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xEuLL), v6,
          7);
  v66 = (uint16x8_t)vmulq_lane_s16(v63, *(int16x4_t *)v6.i8, 3);
  v67 = (uint16x8_t)vmulq_laneq_s16(v64, v6, 4);
  v68 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v66.i8), *(int16x4_t *)v65.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v66, v67), v65), 2uLL);
  v69 = *(int16x8_t *)_X9;
  v70 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 6uLL);
  v77 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
  v78 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v69, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xEuLL), v6,
          7);
  v79 = (uint16x8_t)vmulq_lane_s16(v76, *(int16x4_t *)v6.i8, 3);
  v80 = (uint16x8_t)vmulq_laneq_s16(v77, v6, 4);
  v81 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8), *(int16x4_t *)v78.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78), 2uLL);
  v82 = *(int16x8_t *)_X9;
  v83 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
  v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
  v91 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v82, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL), v6,
          7);
  v92 = (uint16x8_t)vmulq_lane_s16(v89, *(int16x4_t *)v6.i8, 3);
  v93 = (uint16x8_t)vmulq_laneq_s16(v90, v6, 4);
  v94 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v92.i8), *(int16x4_t *)v91.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v92, v93), v91), 2uLL);
  v95 = *(int16x8_t *)_X9;
  v96 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  v102 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 6uLL);
  v103 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 8uLL);
  v104 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v95, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xEuLL), v6,
           7);
  v105 = (uint16x8_t)vmulq_lane_s16(v102, *(int16x4_t *)v6.i8, 3);
  v106 = (uint16x8_t)vmulq_laneq_s16(v103, v6, 4);
  v107 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v105.i8), *(int16x4_t *)v104.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v105, v106), v104), 2uLL);
  v108 = *(int16x8_t *)_X9;
  v109 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  v114 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 6uLL);
  v115 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 8uLL);
  v116 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v108, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xEuLL), v6,
           7);
  v117 = (uint16x8_t)vmulq_lane_s16(v114, *(int16x4_t *)v6.i8, 3);
  v118 = (uint16x8_t)vmulq_laneq_s16(v115, v6, 4);
  v119 = result + 1;
  v120 = 8 * a3;
  v121 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v118.i8, *(uint16x4_t *)v117.i8), *(int16x4_t *)v116.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v117, v118), v116), 2uLL);
  do
  {
    _X13 = a4 + v120;
    v123 = *(int16x8_t *)(a4 + v120 - 6);
    v124 = *(int8x16_t *)(a4 + v120 + 10);
    v125 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 2uLL);
    v126 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 4uLL);
    v127 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 6uLL);
    v128 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 8uLL);
    v129 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 0xAuLL);
    v130 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 0xCuLL);
    v131 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 0xEuLL);
    v132 = vmlaq_s16(vmulq_s16(v123, v16), v125, v18);
    v125.i64[0] = 0x38000000380000;
    v125.i64[1] = 0x38000000380000;
    v133.i64[0] = 0x38000000380000;
    v133.i64[1] = 0x38000000380000;
    v134 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v125, *(int16x4_t *)v40.i8, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v55.i8, *(int16x4_t *)v27.i8, 1);
    v135 = vmlal_high_lane_s16(vmlal_high_lane_s16(v133, v40, *(int16x4_t *)v27.i8, 0), v55, *(int16x4_t *)v27.i8, 1);
    v40 = v55;
    v55 = v68;
    v68 = v81;
    v81 = v94;
    v94 = v107;
    v107 = v121;
    __asm { PRFM            #0, [X13,#0x28] }
    _X13 = a4 + 16 * a3 - 6;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    v140 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v132, v126, v19), v129, v21), v130, v22), v131, v24);
    v141 = (uint16x8_t)vmulq_s16(v127, v25);
    v142 = (uint16x8_t)vmulq_s16(v128, v37);
    v143 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v142.i8, *(uint16x4_t *)v141.i8);
    v144 = (int32x4_t)vaddl_high_u16(v141, v142);
    v145 = vaddw_s16(v143, *(int16x4_t *)v140.i8);
    v146 = vaddw_high_s16(v144, v140);
    *(int16x4_t *)v144.i8 = vshrn_n_s32(v145, 2uLL);
    v147 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v134, *(int16x4_t *)v55.i8, *(int16x4_t *)v27.i8, 2), *(int16x4_t *)v68.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v81.i8, v27, 4), *(int16x4_t *)v94.i8, v27, 5), *(int16x4_t *)v107.i8, v27, 6), *(int16x4_t *)v144.i8, v27,
             7);
    v121 = vshrn_high_n_s32(*(int16x4_t *)v144.i8, v146, 2uLL);
    *a6 = vshrn_high_n_s32(vshrn_n_s32(v147, 6uLL), vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v135, v55, *(int16x4_t *)v27.i8, 2), v68, *(int16x4_t *)v27.i8, 3), v81, v27, 4), v94, v27, 5), v107, v27, 6),
              vshrn_n_s32(v146, 2uLL),
              v27,
              7),
            6uLL);
    --v119;
    a4 += 2 * a3;
    a6 = (int16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v119 > 1);
  return result;
}

uint64_t sub_1B67E41E0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  int16x8_t v15;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  int16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v71;
  int16x8_t v72;
  uint16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint8x8_t v79;
  uint8x8_t v80;
  uint8x8_t v81;
  uint8x8_t v82;
  uint8x8_t v83;
  uint8x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16_t v94;
  int8x16_t v100;
  uint8x8_t v105;
  uint8x8_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;

  v6 = qword_1B6920C90[(a2 & 3) - 1];
  v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 5);
  v13 = (uint8x8_t)vdup_lane_s8(v6, 6);
  v14 = (uint8x8_t)vdup_lane_s8(v6, 7);
  v15 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1B6920C90[((a2 >> 16) & 3) - 1]);
  _X8 = -3 * a3 + a4;
  v17 = *(int8x16_t *)(_X8 - 3);
  _X8 -= 3;
  v18 = v17;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = _X8 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(_X8 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  v30 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v31 = v30;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  v37 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v38 = v37;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  v44 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  v45 = v44;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  v51 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  v52 = v51;
  v53 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X11 + a3);
  v59 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL), v8), *(uint8x8_t *)v18.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL),
                     v14);
  v60 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  v61 = v60;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 1uLL), v8), *(uint8x8_t *)v31.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 7uLL),
                     v14);
  v67 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v71 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 1uLL), v8), *(uint8x8_t *)v38.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 7uLL),
                     v14);
  v72 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 1uLL), v8), *(uint8x8_t *)v45.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 7uLL),
                     v14);
  v73 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 1uLL), v8), *(uint8x8_t *)v52.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 5uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 7uLL), v14);
  v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 1uLL), v8), *(uint8x8_t *)v61.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 7uLL),
                     v14);
  v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 1uLL), v8), *(uint8x8_t *)v67.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 7uLL),
                     v14);
  v76 = result + 2;
  v77 = 8 * a3 - 3;
  v78 = 5 * a3;
  v79 = v7;
  v80 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v81 = v9;
  v82 = v10;
  v83 = (uint8x8_t)vdup_lane_s8(v6, 4);
  v84 = (uint8x8_t)vdup_lane_s8(v6, 5);
  do
  {
    v85 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v59.i8, *(int16x4_t *)v15.i8, 0);
    v86 = vmlsl_high_lane_s16(vmull_high_lane_s16(v66, *(int16x4_t *)v15.i8, 1), v59, *(int16x4_t *)v15.i8, 0);
    v59 = v71;
    v87 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 0);
    v88 = vmlsl_high_lane_s16(vmull_high_lane_s16(v71, *(int16x4_t *)v15.i8, 1), v66, *(int16x4_t *)v15.i8, 0);
    v66 = v72;
    v89 = vmlal_lane_s16(vmlsl_lane_s16(v85, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 2), *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 3);
    v90 = vmlal_high_lane_s16(vmlsl_high_lane_s16(v86, v71, *(int16x4_t *)v15.i8, 2), v72, *(int16x4_t *)v15.i8, 3);
    v91 = vmlsl_lane_s16(v87, *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 2);
    v92 = vmlsl_high_lane_s16(v88, v72, *(int16x4_t *)v15.i8, 2);
    v72 = v74;
    v71 = (int16x8_t)v73;
    _X16 = a4 + v53;
    v94 = *(int8x16_t *)(a4 + v53 - 3);
    __asm { PRFUM           #0, [X16,#0x1C] }
    _X16 = a4 + v77;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    _X16 = a4 + v78;
    v100 = *(int8x16_t *)(a4 + v78 - 3);
    __asm { PRFUM           #0, [X16,#0x1C] }
    _X16 = a4 + v77 + a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    v105 = (uint8x8_t)vdup_lane_s8(v6, 6);
    v106 = (uint8x8_t)vdup_lane_s8(v6, 7);
    v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 1uLL), v80), *(uint8x8_t *)v94.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 7uLL),
                       v106);
    v107 = vmlal_laneq_s16(vmlal_laneq_s16(v89, *(int16x4_t *)v71.i8, v15, 4), *(int16x4_t *)v75.i8, v15, 6);
    v108 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v90, v71, v15, 4), v75, v15, 6);
    v109 = vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v91, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 3), *(int16x4_t *)v72.i8, v15, 4), *(int16x4_t *)v74.i8, v15, 6), *(int16x4_t *)v75.i8, v15, 5);
    v110 = vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v92, v71, *(int16x4_t *)v15.i8, 3), v72, v15, 4), v74, v15, 6), v75, v15, 5);
    v73 = (uint16x8_t)v75;
    v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 1uLL), v80), *(uint8x8_t *)v100.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 7uLL),
                       v106);
    *a6 = vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(v107, *(int16x4_t *)v72.i8, v15, 5), *(int16x4_t *)v74.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(v108, v72, v15, 5), v74, v15, 7), 6uLL);
    *(int16x8_t *)((char *)a6 + 2 * a5) = vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(v109, *(int16x4_t *)v75.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(v110, v75, v15, 7), 6uLL);
    a6 = (int16x8_t *)((char *)a6 + 4 * a5);
    v76 -= 2;
    a4 += 2 * a3;
  }
  while (v76 > 2);
  return result;
}

uint64_t sub_1B67E4634(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67E3D8C(a1, a2, a3, a4, a5, a6);
  return sub_1B67E3D8C(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E4694(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67E41E0(a1, a2, a3, a4, a5, a6);
  return sub_1B67E41E0(a1, v11, a3, a4 + 8, a5, a6 + 1);
}

uint64_t sub_1B67E46F4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67E3D8C(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E4770(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    v12 += 8;
    result = sub_1B67E41E0(a1, v11, a3, v12 + a4, a5, a6++);
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E47E8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67E3D8C(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E4864(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    v12 += 8;
    result = sub_1B67E41E0(a1, v11, a3, v12 + a4, a5, a6++);
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E48DC(uint64_t result, char a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, int16x4_t *a6)
{
  int16x4_t v6;
  int v7;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = result + 1;
  do
  {
    __asm { PRFUM           #0, [X3,#0x1E] }
    _X12 = (char *)&_X3[a3 - 1] + 4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x12]
    }
    *a6 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
    --v7;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1B67E4958(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6;
  int v7;
  uint64_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int8x16_t v13;
  int8x16_t v23;

  v6 = qword_1B6920CB0[(a2 & 7) - 1];
  v7 = result + 2;
  v8 = 4 * a3 - 2;
  v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X14 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = _X3 + a3;
    v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X14,#0x1D] }
    _X14 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    *a6 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12));
    *(int16x4_t *)((char *)a6 + 2 * a5) = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12));
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1B67E4A24(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int v12;
  int8x16_t v13;
  int16x8_t v21;
  int16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = vdupq_lane_s16(v6, 0);
  v8 = vdupq_lane_s16(v6, 3);
  v9 = vdupq_lane_s16(v6, 1);
  v10 = vdupq_lane_s16(v6, 2);
  _X8 = (int8x16_t *)(a4 - 4);
  v12 = result + 1;
  do
  {
    v13 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x3E] }
    _X13 = &_X8->i8[8 * a3];
    __asm { PRFM            #0, [X13] }
    v21 = (int16x8_t)vextq_s8(*_X8, v13, 8uLL);
    v22 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v13, 0xCuLL), v8);
    v23 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v13, 4uLL), v9);
    v24 = (uint16x8_t)vmulq_s16(v21, v10);
    v25 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23.i8);
    v26 = (int32x4_t)vaddl_high_u16(v23, v24);
    v27 = vaddw_s16(v25, *(int16x4_t *)v22.i8);
    v28 = vaddw_high_s16(v26, v22);
    *(int16x4_t *)v26.i8 = vadd_s16(vshrn_n_s32(v27, 2uLL), (int16x4_t)0xE000E000E000E000);
    v26.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v28, 2uLL), (int16x4_t)0xE000E000E000E000);
    __asm { PRFUM           #0, [X13,#0x1E] }
    *a6 = v26;
    --v12;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1B67E4AD0(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  int v7;
  uint64_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int8x16_t v13;
  int8x16_t v23;

  v6 = qword_1B6920CB0[(a2 & 7) - 1];
  v7 = result + 2;
  v8 = 4 * a3 - 2;
  v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X14 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = _X3 + a3;
    v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X14,#0x1D] }
    _X14 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    *a6 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), *(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12);
    *(uint16x8_t *)((char *)a6 + 2 * a5) = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), *(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12);
    a6 = (uint16x8_t *)((char *)a6 + 4 * a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1B67E4B94(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  sub_1B67E4A24(a1, a2, a3, a4, a5, a6);
  return sub_1B67E4A24(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E4BF4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12, double a13, int8x16_t a14)
{
  int8x8_t v14;
  int8x16_t *v15;
  int v16;
  uint64_t v17;
  uint8x16_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  int8x16_t *v29;

  v14 = qword_1B6920CB0[(a2 & 7) - 1];
  v15 = (int8x16_t *)(a4 - 2);
  v16 = result + 2;
  v17 = 2 * a5;
  v18 = (uint8x16_t)vdupq_lane_s8(v14, 0);
  v19 = (uint8x8_t)vdup_lane_s8(v14, 1);
  v20 = (uint8x8_t)vdup_lane_s8(v14, 2);
  v21 = (uint8x8_t)vdup_lane_s8(v14, 3);
  do
  {
    v22 = *v15;
    a12.i64[0] = v15[1].i64[0];
    v23 = (int8x16_t *)((char *)v15 + a3);
    a14.i64[0] = v23[1].i64[0];
    v24 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL), v20), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 6uLL), v21);
    v25 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, a12, 0xAuLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, a12, 0xCuLL), v20), (uint8x16_t)v22, v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, a12, 0xEuLL), v21);
    v26 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v23, *v23, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(*v23, *v23, 4uLL), v20), *(uint8x8_t *)v23->i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v23, *v23, 6uLL), v21);
    v27 = (uint8x8_t)vextq_s8(*v23, a14, 0xAuLL).u64[0];
    v28 = (uint8x8_t)vextq_s8(*v23, a14, 0xCuLL).u64[0];
    a14 = vextq_s8(*v23, a14, 0xEuLL);
    a12 = (int8x16_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v27, v19), v28, v20), *(uint8x16_t *)v23, v18), *(uint8x8_t *)a14.i8, v21);
    *a6 = v24;
    a6[1] = v25;
    v29 = (int8x16_t *)&a6->i8[v17];
    *v29 = (int8x16_t)v26;
    v29[1] = a12;
    v16 -= 2;
    v15 = (int8x16_t *)((char *)v23 + a3);
    a6 = (uint16x8_t *)((char *)a6 + v17 + v17);
  }
  while (v16 > 2);
  return result;
}

uint64_t sub_1B67E4CCC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67E4A24(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E4D48(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  int8x8_t v13;
  int v14;
  int8x16_t *v15;
  uint16x8_t *v16;
  uint8x16_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint16x8_t v27;

  v13 = qword_1B6920CB0[(a2 & 7) - 1];
  v14 = result + 1;
  v15 = (int8x16_t *)(a4 + 14);
  v16 = a6 + 2;
  v17 = (uint8x16_t)vdupq_lane_s8(v13, 0);
  v18 = (uint8x8_t)vdup_lane_s8(v13, 1);
  v19 = (uint8x8_t)vdup_lane_s8(v13, 2);
  v20 = (uint8x8_t)vdup_lane_s8(v13, 3);
  do
  {
    v21 = v15[-1];
    a13.i64[0] = v15[1].i64[0];
    v22 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v19), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v20);
    v23 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, *v15, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, *v15, 0xCuLL), v19), (uint8x16_t)v21, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, *v15, 0xEuLL), v20);
    v24 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v15, *v15, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(*v15, *v15, 4uLL), v19), *(uint8x8_t *)v15->i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v15, *v15, 6uLL), v20);
    v25 = (uint8x8_t)vextq_s8(*v15, a13, 0xAuLL).u64[0];
    v26 = (uint8x8_t)vextq_s8(*v15, a13, 0xCuLL).u64[0];
    a13 = vextq_s8(*v15, a13, 0xEuLL);
    v27 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v25, v18), v26, v19), *(uint8x16_t *)v15, v17), *(uint8x8_t *)a13.i8, v20);
    v16[-2] = v22;
    v16[-1] = v23;
    *v16 = v24;
    v16[1] = v27;
    --v14;
    v15 = (int8x16_t *)((char *)v15 + a3);
    v16 = (uint16x8_t *)((char *)v16 + 2 * a5);
  }
  while (v14 > 1);
  return result;
}

uint64_t sub_1B67E4E14(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12;
  uint64_t result;

  v12 = -8;
  do
  {
    result = sub_1B67E4A24(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E4E90(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int8x16_t v25;

  sub_1B67E4D48(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return sub_1B67E4D48(a1, a2, a3, a4 + 32, a5, a6 + 4, v19, v20, v21, v22, v23, v24, v25);
}

int16x4_t *sub_1B67E4EF0(int a1, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, int16x4_t *a6)
{
  int16x4_t v7;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v16;
  int16x4_t v18;
  int16x4_t v19;
  int v21;
  int32x4_t v22;
  int16x4_t *result;
  int32x4_t v26;
  int32x4_t v29;
  int16x4_t v30;
  int32x4_t v36;

  _X9 = (int16x4_t *)((char *)_X3 - 2 * a3);
  v7 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X11 = (int16x4_t *)((char *)_X3 + 2 * a3);
  v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  v10 = v9;
  __asm { PRFM            #0, [X9] }
  v16 = *_X3;
  __asm { PRFUM           #0, [X3,#0xE] }
  v18 = *_X11;
  _X11 = (int16x4_t *)((char *)_X11 + 14);
  v19 = v18;
  __asm { PRFM            #0, [X11] }
  v21 = a1 + 2;
  do
  {
    v22 = vmlal_lane_s16(vmull_lane_s16(v16, v7, 1), v10, v7, 0);
    _X16 = (int16x4_t *)((char *)_X3 + 6 * a3);
    _X17 = (char *)_X3 + 14 * a3;
    result = &_X3[2 * a3];
    _X3 = (int16x4_t *)((char *)_X3 + 4 * a3);
    v26 = vmlal_lane_s16(vmull_lane_s16(v19, v7, 1), v16, v7, 0);
    _X15 = (char *)&_X3[1] + 6;
    v16 = *_X3;
    __asm { PRFM            #0, [X15] }
    v29 = vmlal_lane_s16(v22, v19, v7, 2);
    v10 = v19;
    v30 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    v19 = v30;
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFM            #0, [X0]
      PRFUM           #0, [X17,#6]
      PRFUM           #0, [X0,#6]
    }
    v36 = vmlal_lane_s16(vmlal_lane_s16(v26, *_X3, v7, 2), v30, v7, 3);
    *a6 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v29, *_X3, v7, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int16x4_t *)((char *)a6 + 2 * a5) = vadd_s16(vshrn_n_s32(v36, 2uLL), (int16x4_t)0xE000E000E000E000);
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    v21 -= 2;
  }
  while (v21 > 2);
  return result;
}

uint8x8_t sub_1B67E4FCC(int a1, unint64_t a2, uint64_t a3, uint8x8_t *_X3, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6;
  uint8x8_t v9;
  uint8x8_t v17;
  uint8x8_t result;
  int v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v34;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x4_t v41;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)&_X3[1] - a3 + 7;
  v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v17 = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + 4 * a3 + a3;
  _X8 = (uint64_t)&_X3[1] + a3 + 7;
  result = *(uint8x8_t *)((char *)_X3 + a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v28 = a1 + 2;
  v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X16 = (uint64_t)&_X3[1] + 2 * a3 + 7;
    v34 = *(uint8x8_t *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X16] }
    _X16 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#7]
    }
    v39 = vmull_u8(v9, v30);
    v40 = vmull_u8(result, v29);
    v41 = (int16x4_t)vmlal_u8(vmull_u8(v17, v29), result, v31).u64[0];
    v9 = result;
    _X16 = (uint64_t)&_X3[1] + 3 * a3 + 7;
    result = *(uint8x8_t *)((char *)_X3 + 3 * a3);
    _X17 = (char *)_X3 + 7 * a3;
    _X3 = (uint8x8_t *)((char *)_X3 + a3 + a3);
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#7]
    }
    *a6 = vsub_s16(v41, (int16x4_t)*(_OWORD *)&vmlal_u8(v39, v34, v32));
    *(int16x4_t *)((char *)a6 + 2 * a5) = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v40, v34, v31), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v17, v30), result, v32));
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    v28 -= 2;
    v17 = v34;
  }
  while (v28 > 2);
  return result;
}

int16x8_t sub_1B67E50D8(int a1, unint64_t a2, uint64_t a3, int16x8_t *_X3, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6;
  int16x8_t v8;
  int16x8_t result;
  int16x8_t v15;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int v25;
  uint16x8_t v29;
  int16x8_t v31;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int16x8_t v36;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  uint16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;

  v6 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X8 = &_X3->i8[-2 * a3];
  v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  result = v8;
  __asm { PRFM            #0, [X8] }
  v15 = *_X3;
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X8 = &_X3->i8[2 * a3];
  v18 = *(int16x8_t *)_X8;
  _X8 += 30;
  v19 = v18;
  __asm { PRFM            #0, [X8] }
  v21 = vdupq_lane_s16(v6, 0);
  v22 = vdupq_lane_s16(v6, 3);
  v23 = vdupq_lane_s16(v6, 1);
  v24 = vdupq_lane_s16(v6, 2);
  v25 = a1 + 2;
  do
  {
    _X15 = &_X3->i8[6 * a3];
    _X16 = &_X3->i8[14 * a3];
    _X0 = &_X3[a3];
    _X3 = (int16x8_t *)((char *)_X3 + 4 * a3);
    v29 = (uint16x8_t)vmulq_s16(v15, v23);
    _X17 = &_X3[1].i8[14];
    v31 = *_X3;
    __asm { PRFM            #0, [X17] }
    v33 = vmulq_s16(result, v21);
    result = v19;
    v34 = (uint16x8_t)vmulq_s16(v19, v24);
    v35 = (uint16x8_t)vmulq_s16(v19, v23);
    v36 = *(int16x8_t *)_X15;
    _X15 += 30;
    v19 = v36;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X16]
      PRFM            #0, [X0]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X0,#0xE]
    }
    v42 = vmlaq_s16(v33, *_X3, v22);
    v43 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v34.i8);
    v44 = (int32x4_t)vaddl_high_u16(v29, v34);
    v45 = vaddw_s16(v43, *(int16x4_t *)v42.i8);
    v46 = vaddw_high_s16(v44, v42);
    v47 = vmlaq_s16(vmulq_s16(v15, v21), v36, v22);
    v48 = (uint16x8_t)vmulq_s16(*_X3, v24);
    v49 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v35.i8);
    v50 = (int32x4_t)vaddl_high_u16(v48, v35);
    v51 = vaddw_s16(v49, *(int16x4_t *)v47.i8);
    v52 = vaddw_high_s16(v50, v47);
    *(int16x4_t *)v50.i8 = vadd_s16(vshrn_n_s32(v45, 2uLL), (int16x4_t)0xE000E000E000E000);
    v50.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v46, 2uLL), (int16x4_t)0xE000E000E000E000);
    *a6 = v50;
    *(int16x4_t *)v46.i8 = vadd_s16(vshrn_n_s32(v51, 2uLL), (int16x4_t)0xE000E000E000E000);
    v46.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v52, 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v46;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v25 -= 2;
    v15 = v31;
  }
  while (v25 > 2);
  return result;
}

double sub_1B67E5200(int a1, unint64_t a2, uint64_t a3, double *_X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v9;
  double result;
  uint8x8_t v24;
  int v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  double v34;
  uint16x8_t v39;
  uint16x8_t v40;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)_X3 - a3 + 15;
  v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  result = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + 4 * a3 + a3;
  _X8 = (uint64_t)_X3 + a3 + 15;
  v24 = *(uint8x8_t *)((char *)_X3 + a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v28 = a1 + 2;
  v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X15 = (uint64_t)_X3 + 2 * a3 + 15;
    v34 = *(double *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    v39 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)&result, v29), v24, v31), v9, v30);
    v40 = vmull_u8(v24, v29);
    v9 = v24;
    _X15 = (uint64_t)_X3 + 3 * a3 + 15;
    v24 = *(uint8x8_t *)((char *)_X3 + 3 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = (char *)_X3 + 7 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vmlsl_u8(v39, *(uint8x8_t *)&v34, v32);
    *(uint16x8_t *)((char *)a6 + 2 * a5) = vmlsl_u8(vmlsl_u8(vmlal_u8(v40, *(uint8x8_t *)&v34, v31), *(uint8x8_t *)&result, v30), v24, v32);
    _X3 = (double *)((char *)_X3 + a3 + a3);
    a6 = (uint16x8_t *)((char *)a6 + 4 * a5);
    v28 -= 2;
    result = v34;
  }
  while (v28 > 2);
  return result;
}

double sub_1B67E5304(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E50D8(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E50D8(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

uint8x16_t sub_1B67E5364(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  uint8x16_t v9;
  uint8x16_t result;
  uint8x16_t v24;
  int v28;
  uint64_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v35;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t *v50;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  _X8 = (uint64_t)&_X3[1].i64[1] - a3 + 7;
  v9 = *(uint8x16_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  result = *_X3;
  __asm { PRFUM           #0, [X3,#0x1F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  _X8 = (uint64_t)&_X3[1].i64[1] + a3 + 7;
  v24 = *(uint8x16_t *)((char *)_X3 + a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v28 = a1 + 2;
  v29 = 2 * a5;
  v30 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v31 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v32 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v33 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)&_X3[1].i64[1] + 2 * a3 + 7;
    v35 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = &_X3->i8[3 * a3];
    _X16 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    v42 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v32.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v30.i8);
    v43 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v31), v24, v32), v9, v30);
    v44 = vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v31.i8);
    v45 = vmull_high_u8(v24, v31);
    v9 = v24;
    v46 = *(uint8x16_t *)_X14;
    _X14 += 31;
    v24 = v46;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    *a6 = vmlsl_u8(v42, *(uint8x8_t *)v35.i8, *(uint8x8_t *)v33.i8);
    a6[1] = vmlsl_high_u8(v43, v35, v33);
    v50 = (uint16x8_t *)((char *)a6 + v29);
    v28 -= 2;
    *v50 = vmlsl_u8(vmlsl_u8(vmlal_u8(v44, *(uint8x8_t *)v35.i8, *(uint8x8_t *)v32.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v33.i8);
    v50[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v45, v35, v32), result, v30), v46, v33);
    a6 = (uint16x8_t *)((char *)a6 + v29 + v29);
    result = v35;
  }
  while (v28 > 2);
  return result;
}

void sub_1B67E5488(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67E50D8(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

uint8x16_t sub_1B67E5504(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t result;
  uint8x16_t v19;
  uint8x16_t v25;
  uint8x16_t v26;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v39;
  uint8x16_t v40;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t *v60;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X8 = &_X3->i8[-a3];
  v9 = *(uint8x16_t *)((char *)_X3 - a3);
  v8 = *(uint8x16_t *)((char *)_X3 - a3 + 16);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  v19 = *_X3;
  result = _X3[1];
  __asm { PRFUM           #0, [X3,#0x3F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  _X8 = &_X3->i8[a3];
  v26 = *(uint8x16_t *)((char *)_X3 + a3);
  v25 = *(uint8x16_t *)((char *)&_X3[1] + a3);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  v31 = a1 + 2;
  v32 = 2 * a3;
  v33 = 2 * a5;
  v34 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v35 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v36 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v37 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X14 = &_X3->i8[v32];
    v39 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    v40 = *(uint8x16_t *)((char *)&_X3[1] + v32);
    __asm { PRFUM           #0, [X14,#0x3F] }
    _X14 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x1F]
    }
    _X15 = (uint8x16_t *)((char *)_X3 + 3 * a3);
    _X14 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    v47 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v34.i8);
    v48 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v19, v35), v26, v36), v9, v34);
    v49 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v34.i8);
    v50 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v35), v25, v36), v8, v34);
    v51 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v34.i8);
    v52 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v26, v35), v39, v36), v19, v34);
    v53 = vmull_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v35.i8);
    v54 = vmull_high_u8(v25, v35);
    v9 = v26;
    v8 = v25;
    v26 = *_X15;
    v25 = _X15[1];
    __asm
    {
      PRFUM           #0, [X15,#0x3F]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x1F]
    }
    v58 = vmlsl_u8(v51, *(uint8x8_t *)_X15->i8, *(uint8x8_t *)v37.i8);
    v59 = vmlsl_high_u8(v52, *_X15, v37);
    *a6 = vmlsl_u8(v47, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v37.i8);
    a6[1] = vmlsl_high_u8(v48, v39, v37);
    a6[2] = vmlsl_u8(v49, *(uint8x8_t *)v40.i8, *(uint8x8_t *)v37.i8);
    a6[3] = vmlsl_high_u8(v50, v40, v37);
    v60 = (uint16x8_t *)((char *)a6 + v33);
    *v60 = v58;
    v60[1] = v59;
    v31 -= 2;
    a6 = (uint16x8_t *)((char *)a6 + v33 + v33);
    v60[2] = vmlsl_u8(vmlsl_u8(vmlal_u8(v53, *(uint8x8_t *)v40.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v37.i8);
    v60[3] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v54, v40, v36), result, v34), v25, v37);
    v19 = v39;
    result = v40;
  }
  while (v31 > 2);
  return result;
}

void sub_1B67E5678(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11;
  unint64_t v12;

  v11 = a2;
  v12 = -8;
  do
  {
    sub_1B67E50D8(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

double sub_1B67E56F4(int a1, unsigned int a2, uint64_t a3, uint8x16_t *a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v11;
  double result;

  v11 = a2;
  sub_1B67E5504(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = sub_1B67E5504(a1, v11, a3, a4 + 2, a5, a6 + 4).u64[0];
  return result;
}

uint64_t sub_1B67E5754(uint64_t result, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, int16x4_t *a6)
{
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v9;
  int16x8_t v10;
  int16x4_t v19;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v31;
  int v32;
  int32x4_t v33;
  int32x4_t v34;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X9 = (char *)_X3 + 2 * (-2 - a3);
  v9 = *(int16x4_t *)_X9;
  v10 = *(int16x8_t *)(_X9 + 4);
  __asm { PRFUM           #0, [X9,#0x22] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x12]
  }
  v19 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, v6, 1), v9, v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL), v6, 2), v10, v6, 3), 2uLL);
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X10 = (uint64_t)&_X3[a3 - 1] + 4;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x12]
  }
  _X10 = (int16x4_t *)((char *)_X3 + 2 * a3 - 4);
  v25 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 2uLL);
  v26 = *_X10;
  __asm { PRFUM           #0, [X10,#0x22] }
  _X10 = &_X10[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x12]
  }
  v31 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)((char *)_X3 + 2 * a3), v6, 1), v26, v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&_X3->i8[2 * a3], *(int8x16_t *)&_X3->i8[2 * a3], 4uLL), v6, 2), *(int16x8_t *)&_X3->i8[2 * a3], v6, 3), 2uLL);
  v32 = result + 1;
  do
  {
    v33.i64[0] = 0x38000000380000;
    v33.i64[1] = 0x38000000380000;
    v34 = vmlal_lane_s16(vmlal_lane_s16(v33, v19, v7, 0), v25, v7, 1);
    v19 = v25;
    v25 = v31;
    _X13 = (char *)_X3 + 4 * a3;
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = (char *)_X3 + 12 * a3 - 4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v31 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)((char *)_X3 + 4 * a3), v6, 1), *(int16x4_t *)((char *)_X3 + 4 * a3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&_X3->i8[4 * a3], *(int8x16_t *)&_X3->i8[4 * a3], 4uLL), v6, 2), *(int16x8_t *)&_X3->i8[4 * a3], v6, 3), 2uLL);
    *a6 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v34, v25, v7, 2), v31, v7, 3), 6uLL);
    --v32;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v32 > 1);
  return result;
}

uint64_t sub_1B67E58A4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  int16x4_t v9;
  int8x16_t v19;
  int8x16_t v26;
  int8x16_t v27;
  int v31;
  uint64_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  uint8x8_t v36;
  int8x16_t v37;
  uint8x8_t v38;
  uint8x16_t v39;
  int16x8_t v45;
  int8x16_t v46;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X8 = (uint8x16_t *)(a4 - a3 - 2);
  v8 = *_X8;
  v9 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[(a2 & 7) - 1]).u64[0];
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X8 = &_X8->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = a4 - 2;
  v19 = *(int8x16_t *)(a4 - 2);
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = a4 - 2 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(a4 - 2 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  v26 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  v27 = v26;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v31 = result + 1;
  v32 = 2 * a3;
  v33 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v34 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v35 = vdupq_lane_s8(v6, 2);
  v36 = (uint8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
  v37 = vdupq_lane_s8(v6, 3);
  v38 = (uint8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
  do
  {
    v39 = (uint8x16_t)v19;
    v19 = v27;
    _X12 = a4 + v32;
    v27 = *(int8x16_t *)(a4 + v32 - 2);
    __asm { PRFUM           #0, [X12,#0x1D] }
    _X12 = a4 + 6 * a3 - 2;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    v45 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v33.i8), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v37.i8);
    v46 = (int8x16_t)vmlal_u8(vmull_high_u8(v8, v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), v38);
    *(int16x4_t *)v46.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v39, v34), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v36), *(int16x4_t *)v46.i8);
    *a6 = vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), v9, 1), v45, v9, 2), *(int16x4_t *)v45.i8, v9, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, v46, 0xCuLL), v9, 3), 6uLL);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
    --v31;
    a4 += a3;
    v8 = v39;
  }
  while (v31 > 1);
  return result;
}

uint64_t sub_1B67E59C8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  int16x4_t v6;
  int16x4_t v7;
  int8x16_t v9;
  int16x8_t v10;
  uint64_t v16;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v33;
  int8x16_t v34;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  int v58;
  int16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;

  v6 = qword_1B6920D20[2 * (a2 & 7) - 2];
  v7 = qword_1B6920D20[2 * ((a2 >> 16) & 7) - 2];
  _X9 = (_OWORD *)(a4 + 2 * (-2 - a3));
  v10 = *(int16x8_t *)_X9;
  v9 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x3E] }
  v16 = 4 * a3;
  _X9 = (char *)_X9 + 8 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  v20 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 4uLL);
  v21 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 8uLL);
  v22 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 0xCuLL);
  v23 = vdupq_lane_s16(v6, 0);
  v24 = vmulq_n_s16(v10, v6.i16[0]);
  v25 = vdupq_lane_s16(v6, 3);
  v26 = vmlaq_lane_s16(v24, v22, v6, 3);
  v27 = vdupq_lane_s16(v6, 1);
  v28 = (uint16x8_t)vmulq_lane_s16(v20, v6, 1);
  v29 = vdupq_lane_s16(v6, 2);
  v30 = (uint16x8_t)vmulq_lane_s16(v21, v6, 2);
  v31 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v28.i8), *(int16x4_t *)v26.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v28, v30), v26), 2uLL);
  _X9 = a4 - 4;
  v33 = *(int16x8_t *)(a4 - 4);
  v34 = *(int8x16_t *)(a4 + 12);
  __asm { PRFUM           #0, [X9,#0x3E] }
  _X10 = a4 - 4 + 8 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X10 = (_OWORD *)(a4 - 4 + 2 * a3);
  v40 = (int16x8_t)vextq_s8((int8x16_t)v33, v34, 4uLL);
  v41 = (int16x8_t)vextq_s8((int8x16_t)v33, v34, 8uLL);
  v42 = vmlaq_lane_s16(vmulq_n_s16(v33, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v33, v34, 0xCuLL), v6, 3);
  v43 = (uint16x8_t)vmulq_lane_s16(v40, v6, 1);
  v44 = (uint16x8_t)vmulq_lane_s16(v41, v6, 2);
  v45 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v43.i8), *(int16x4_t *)v42.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v43, v44), v42), 2uLL);
  v46 = *(int16x8_t *)_X10;
  v47 = *((int8x16_t *)_X10 + 1);
  __asm { PRFUM           #0, [X10,#0x3E] }
  _X10 = (char *)_X10 + 8 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  v52 = (int16x8_t)vextq_s8((int8x16_t)v46, v47, 4uLL);
  v53 = (int16x8_t)vextq_s8((int8x16_t)v46, v47, 8uLL);
  v54 = vmlaq_lane_s16(vmulq_n_s16(v46, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v46, v47, 0xCuLL), v6, 3);
  v55 = (uint16x8_t)vmulq_lane_s16(v52, v6, 1);
  v56 = (uint16x8_t)vmulq_lane_s16(v53, v6, 2);
  v57 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)v55.i8), *(int16x4_t *)v54.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v55, v56), v54), 2uLL);
  v58 = result + 1;
  do
  {
    _X13 = a4 + v16;
    v60 = *(int16x8_t *)(a4 + v16 - 4);
    v61 = *(int8x16_t *)(a4 + v16 + 12);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v60, v61, 4uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v60, v61, 8uLL);
    v64 = vmlaq_s16(vmulq_s16(v60, v23), (int16x8_t)vextq_s8((int8x16_t)v60, v61, 0xCuLL), v25);
    v65 = (uint16x8_t)vmulq_s16(v62, v27);
    v66 = (int32x4_t)vmulq_s16(v63, v29);
    v67 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v66.i8, *(uint16x4_t *)v65.i8);
    v68 = (int32x4_t)vaddl_high_u16(v65, (uint16x8_t)v66);
    v66.i64[0] = 0x38000000380000;
    v66.i64[1] = 0x38000000380000;
    v69.i64[0] = 0x38000000380000;
    v69.i64[1] = 0x38000000380000;
    v70 = vmlal_lane_s16(vmlal_lane_s16(v66, *(int16x4_t *)v31.i8, v7, 0), *(int16x4_t *)v45.i8, v7, 1);
    v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v69, v31, v7, 0), v45, v7, 1);
    v31 = v45;
    v45 = v57;
    __asm { PRFUM           #0, [X13,#0x3A] }
    _X13 = a4 + 12 * a3 - 4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    v76 = vaddw_s16(v67, *(int16x4_t *)v64.i8);
    v77 = vaddw_high_s16(v68, v64);
    *(int16x4_t *)v76.i8 = vshrn_n_s32(v76, 2uLL);
    v78 = vmlal_lane_s16(vmlal_lane_s16(v70, *(int16x4_t *)v45.i8, v7, 2), *(int16x4_t *)v76.i8, v7, 3);
    v57 = vshrn_high_n_s32(*(int16x4_t *)v76.i8, v77, 2uLL);
    *a6 = vshrn_high_n_s32(vshrn_n_s32(v78, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v71, v45, v7, 2), vshrn_n_s32(v77, 2uLL), v7, 3), 6uLL);
    --v58;
    a4 += 2 * a3;
    a6 = (int16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v58 > 1);
  return result;
}

uint64_t sub_1B67E5BAC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  int8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  int8x16_t v12;
  int8x16_t v22;
  int16x4_t v23;
  int8x16_t v30;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int v37;
  uint64_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  int8x16_t v42;
  int32x4_t v47;
  int32x4_t v48;

  v6 = qword_1B6920CB0[(a2 & 7) - 1];
  v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  _X8 = (int8x16_t *)(a4 - a3 - 2);
  v12 = *_X8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X8 = &_X8->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = a4 - 2;
  v22 = *(int8x16_t *)(a4 - 2);
  v23 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[((a2 >> 16) & 7) - 1]).u64[0];
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = a4 - 2 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(a4 - 2 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  v30 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  v34 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL), v9), *(uint8x8_t *)v12.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 6uLL), v10);
  v35 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL), v9), *(uint8x8_t *)v22.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 6uLL), v10);
  v36 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), v9), *(uint8x8_t *)v30.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 6uLL), v10);
  v37 = result + 1;
  v38 = 2 * a3;
  v39 = (uint8x8_t)vdup_lane_s8(v6, 1);
  v40 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X12 = a4 + v38;
    v42 = *(int8x16_t *)(a4 + v38 - 2);
    __asm { PRFUM           #0, [X12,#0x1D] }
    _X12 = a4 + 6 * a3 - 2;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    v47 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v23, 1), *(int16x4_t *)v36.i8, v23, 2), *(int16x4_t *)v34.i8, v23, 0);
    v48 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v35, v23, 1), v36, v23, 2), v34, v23, 0);
    v34 = v35;
    v35 = v36;
    v36 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v39), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v9), *(uint8x8_t *)v42.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v40);
    *a6 = vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(v47, *(int16x4_t *)v36.i8, v23, 3), 6uLL), vmlsl_high_lane_s16(v48, v36, v23, 3), 6uLL);
    a6 = (int16x8_t *)((char *)a6 + 2 * a5);
    --v37;
    a4 += a3;
  }
  while (v37 > 1);
  return result;
}

uint64_t sub_1B67E5D24(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67E59C8(a1, a2, a3, a4, a5, a6);
  return sub_1B67E59C8(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1B67E5D84(uint64_t result, unint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, int16x8_t *a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  int8x16_t v11;
  int8x8_t v12;
  uint8x16_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  int16x4_t v17;
  int8x16_t v19;
  int8x16_t v31;
  int8x16_t v41;
  uint64_t v47;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int v58;
  int16x8_t *v59;
  uint64_t v60;
  uint8x8_t v61;
  uint8x8_t v62;
  int16x8_t v63;
  int8x16_t v65;
  int32x4_t v69;
  int32x4_t v70;

  v12 = qword_1B6920CB0[(a2 & 7) - 1];
  v13 = (uint8x16_t)vdupq_lane_s8(v12, 0);
  v14 = (uint8x8_t)vdup_lane_s8(v12, 1);
  v15 = (uint8x8_t)vdup_lane_s8(v12, 2);
  v16 = (uint8x8_t)vdup_lane_s8(v12, 3);
  v17 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[((a2 >> 16) & 7) - 1]).u64[0];
  _X8 = _X3 - a3;
  v19 = *(int8x16_t *)(_X3 - a3 - 2);
  __asm
  {
    PRFUM           #0, [X8,#0x1D]
    PRFUM           #0, [X8,#0x3E]
    PRFUM           #0, [X8,#0x4D]
  }
  a10.i64[0] = *(_QWORD *)(_X3 - a3 + 14);
  __asm { PRFUM           #0, [X8,#0x1D] }
  _X8 = _X3 - a3 + 14 + 4 * (a3 - 16);
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  v31 = *(int8x16_t *)(_X3 - 2);
  __asm
  {
    PRFUM           #0, [X3,#0x1D]
    PRFUM           #0, [X3,#0x3E]
    PRFUM           #0, [X3,#0x4D]
  }
  a11.i64[0] = *(_QWORD *)(_X3 + 14);
  __asm { PRFUM           #0, [X3,#0x1D] }
  _X10 = _X3 + 14 + 4 * (a3 - 16);
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#7]
  }
  _X10 = (int8x16_t *)(_X3 + 14 + a3 - 16);
  _X11 = &_X10[4].i8[15];
  v41 = *_X10;
  __asm
  {
    PRFUM           #0, [X10,#0x1F]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X11]
  }
  _X8 = (uint64_t *)(_X3 + 14 + a3);
  _X9 = (char *)_X8 + 4 * a3 - 64;
  v47 = *_X8;
  _X8 = (uint64_t *)((char *)_X8 + 15);
  v11.i64[0] = v47;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v51 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), v15), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 6uLL), v16);
  v52 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xAuLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xCuLL), v15), (uint8x16_t)v19, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xEuLL), v16);
  v53 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v15), *(uint8x8_t *)v31.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 6uLL), v16);
  v54 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xAuLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xCuLL), v15), (uint8x16_t)v31, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xEuLL), v16);
  v55 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 4uLL), v15), *(uint8x8_t *)v41.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 6uLL), v16);
  v56 = (int32x4_t)vextq_s8(*_X10, v11, 0xAuLL);
  v57 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v56.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v11, 0xCuLL), v15), (uint8x16_t)v41, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v11, 0xEuLL), v16);
  v58 = result + 1;
  v59 = a6 + 1;
  v60 = 2 * a3;
  v61 = (uint8x8_t)vdup_lane_s8(v12, 1);
  v62 = (uint8x8_t)vdup_lane_s8(v12, 3);
  do
  {
    v63 = v53;
    v53 = v55;
    _X13 = _X3 + v60;
    v65 = *(int8x16_t *)(_X3 + v60 - 2);
    __asm
    {
      PRFUM           #0, [X13,#0x1D]
      PRFUM           #0, [X13,#0x3E]
      PRFUM           #0, [X13,#0x4D]
    }
    v56.i64[0] = *(_QWORD *)(_X3 + v60 + 14);
    v55 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 2uLL), v61), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL), v15), *(uint8x8_t *)v65.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 6uLL), v62);
    v69 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v54.i8, v17, 1), *(int16x4_t *)v57.i8, v17, 2), *(int16x4_t *)v52.i8, v17, 0);
    v70 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v54, v17, 1), v57, v17, 2), v52, v17, 0);
    v52 = v54;
    v54 = v57;
    __asm { PRFUM           #0, [X13,#0x1D] }
    _X13 = _X3 + 6 * a3 - 50;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    v57 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v65, (int8x16_t)v56, 0xAuLL), v61), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, (int8x16_t)v56, 0xCuLL), v15), (uint8x16_t)v65, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, (int8x16_t)v56, 0xEuLL), v62);
    v56 = vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v63, v17, 1), v53, v17, 2), v51, v17, 0), v55, v17, 3);
    v59[-1] = vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v63.i8, v17, 1), *(int16x4_t *)v53.i8, v17, 2), *(int16x4_t *)v51.i8, v17, 0), *(int16x4_t *)v55.i8, v17, 3), 6uLL), v56, 6uLL);
    *v59 = vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(v69, *(int16x4_t *)v57.i8, v17, 3), 6uLL), vmlsl_high_lane_s16(v70, v57, v17, 3), 6uLL);
    --v58;
    v59 = (int16x8_t *)((char *)v59 + 2 * a5);
    _X3 += a3;
    v51 = v63;
  }
  while (v58 > 1);
  return result;
}

uint64_t sub_1B67E5FF4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67E59C8(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1B67E6070(uint64_t result, unint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, int16x8_t *a6)
{
  int8x8_t v6;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x8_t v18;
  int16x4_t v19;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x8_t v30;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x8_t v43;
  uint8x8_t v44;
  int v48;
  uint64_t v49;
  int16x8_t *v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint8x8_t v57;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x4_t v79;
  int8x16_t v80;
  int16x4_t v81;
  int32x4_t v82;
  int16x4_t v83;
  int32x4_t v84;

  v6 = qword_1B6920CB0[((a2 >> 16) & 7) - 1];
  _X8 = _X3 - a3;
  v8 = *(uint8x16_t *)(_X3 - a3 - 2);
  v9 = *(uint8x16_t *)(_X3 - a3 + 14);
  __asm
  {
    PRFUM           #0, [X8,#0x3D]
    PRFUM           #0, [X8,#0x7E]
    PRFUM           #0, [X8,#0x9D]
  }
  _X8 = (uint8x8_t *)(_X3 - a3 + 30);
  v18 = *_X8;
  v19 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1B6920CB0[(a2 & 7) - 1]).u64[0];
  __asm { PRFUM           #0, [X8,#0xF] }
  _X8 = (char *)&_X8[-16] + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  v24 = *(uint8x16_t *)(_X3 - 2);
  v25 = *(uint8x16_t *)(_X3 + 14);
  __asm
  {
    PRFUM           #0, [X3,#0x3D]
    PRFUM           #0, [X3,#0x7E]
    PRFUM           #0, [X3,#0x9D]
  }
  _X8 = _X3 + 30;
  v30 = *(uint8x8_t *)(_X3 + 30);
  __asm { PRFUM           #0, [X8,#0xF] }
  _X10 = _X3 + 30 + 4 * (a3 - 32);
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#7]
  }
  _X10 = (uint8x16_t *)(_X3 + 30 + a3 - 32);
  v36 = *_X10;
  v37 = _X10[1];
  __asm
  {
    PRFUM           #0, [X10,#0x3F]
    PRFM            #0, [X10,#0x80]
    PRFUM           #0, [X10,#0x9F]
  }
  _X8 = (_QWORD *)(_X3 + 30 + a3);
  _X9 = (char *)_X8 + 4 * a3 - 128;
  v43 = *(uint8x8_t *)_X8;
  _X8 = (_QWORD *)((char *)_X8 + 15);
  v44 = v43;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  v48 = result + 1;
  v49 = 2 * a3;
  v50 = a6 + 2;
  v51 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  v52 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  v53 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  v54 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    v55 = v25;
    v56 = v24;
    v25 = v37;
    v24 = v36;
    v57 = v30;
    v30 = v44;
    _X13 = _X3 + v49;
    v36 = *(uint8x16_t *)(_X3 + v49 - 2);
    v37 = *(uint8x16_t *)(_X3 + v49 + 14);
    __asm
    {
      PRFUM           #0, [X13,#0x3D]
      PRFUM           #0, [X13,#0x7E]
      PRFUM           #0, [X13,#0x9D]
    }
    v44 = *(uint8x8_t *)(_X3 + v49 + 30);
    __asm { PRFUM           #0, [X13,#0x2D] }
    _X13 = _X3 + 6 * a3 - 98;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v53.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v51.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v54.i8);
    v67 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v56, v52), v24, v53), v8, v51), v36, v54);
    v68 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v53.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v51.i8), *(uint8x8_t *)v37.i8, *(uint8x8_t *)v54.i8);
    v69 = (int16x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v67, 0xCuLL).u64[0];
    v70 = (int16x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL).u64[0];
    v71 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL), v19, 1), v66, v19, 2), *(int16x4_t *)v66.i8, v19, 0), v69, v19, 3);
    v72 = vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(v69, v19, 1), *(int16x4_t *)v67.i8, v19, 2), v66, v19, 0);
    v66.i64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v68, 0xCuLL).u64[0];
    v73 = vmlsl_lane_s16(v72, v70, v19, 3);
    v74 = vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v70, v19, 1), v67, v19, 2), *(int16x4_t *)v67.i8, v19, 0);
    v75 = (int16x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL).u64[0];
    v76 = vmlsl_lane_s16(v74, *(int16x4_t *)v66.i8, v19, 3);
    v77 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, v19, 1), *(int16x4_t *)v68.i8, v19, 2), v67, v19, 0), v75, v19, 3);
    v78 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v55, v52), v25, v53), v9, v51), v37, v54);
    v79 = vshrn_n_s32(v71, 6uLL);
    v80 = (int8x16_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(v57, *(uint8x8_t *)v52.i8), v30, *(uint8x8_t *)v53.i8), v18, *(uint8x8_t *)v51.i8), v44, *(uint8x8_t *)v54.i8);
    v81 = (int16x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v78, 0xCuLL).u64[0];
    v82 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v75, v19, 1), v68, v19, 2), *(int16x4_t *)v68.i8, v19, 0), v81, v19, 3);
    v83 = (int16x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL).u64[0];
    v84 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(v81, v19, 1), *(int16x4_t *)v78.i8, v19, 2), v68, v19, 0), v83, v19, 3);
    v68.i64[0] = vextq_s8((int8x16_t)v78, v80, 0xCuLL).u64[0];
    v50[-2] = vshrn_high_n_s32(v79, v73, 6uLL);
    v50[-1] = vshrn_high_n_s32(vshrn_n_s32(v76, 6uLL), v77, 6uLL);
    --v48;
    _X3 += a3;
    *v50 = vshrn_high_n_s32(vshrn_n_s32(v82, 6uLL), v84, 6uLL);
    v50[1] = vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v83, v19, 1), v78, v19, 2), *(int16x4_t *)v78.i8, v19, 0), *(int16x4_t *)v68.i8, v19, 3), 6uLL), vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v68.i8, v19, 1), *(int16x4_t *)v80.i8, v19, 2), v78, v19, 0), (int16x4_t)*(_OWORD *)&vextq_s8(v80, v80, 4uLL), v19,
                 3),
               6uLL);
    v50 = (int16x8_t *)((char *)v50 + 2 * a5);
    v18 = v57;
    v8 = v56;
    v9 = v55;
  }
  while (v48 > 1);
  return result;
}

uint64_t sub_1B67E62CC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v11 = a2;
  v12 = -8;
  do
  {
    result = sub_1B67E59C8(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1B67E6348(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11;

  v11 = a2;
  sub_1B67E6070(a1, a2, a3, a4, a5, a6);
  return sub_1B67E6070(a1, v11, a3, a4 + 32, a5, a6 + 4);
}

uint64_t sub_1B67E63A8(uint64_t result, int16x8_t *a2, int16x8_t *a3, uint64_t a4, _QWORD *a5)
{
  int v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  v5 = result + 2;
  v6.i64[0] = 0x2000200020002000;
  v6.i64[1] = 0x2000200020002000;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v8 = *a2++;
    v9 = v8;
    v10 = *a3++;
    v11 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v9, v10), v6), 3uLL), (int16x8_t)0), v7);
    *a5 = v11.i64[0];
    *(_QWORD *)((char *)a5 + 2 * a4) = v11.i64[1];
    a5 = (_QWORD *)((char *)a5 + 4 * a4);
    v5 -= 2;
  }
  while (v5 > 2);
  return result;
}

int8x8_t sub_1B67E63FC(int a1, int16x8_t *a2, int16x8_t *a3, uint64_t a4, _DWORD *a5)
{
  int v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t result;

  v5 = a1 + 2;
  do
  {
    v6 = *a2++;
    v7 = v6;
    v8 = *a3++;
    result = vqrshrun_n_s16(vhaddq_s16(v7, v8), 6uLL);
    *a5 = result.i32[0];
    *(_DWORD *)((char *)a5 + a4) = result.i32[1];
    a5 = (_DWORD *)((char *)a5 + 2 * a4);
    v5 -= 2;
  }
  while (v5 > 2);
  return result;
}

uint64_t sub_1B67E6434(uint64_t result, int16x8_t *a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  int v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  v5 = result + 2;
  v6.i64[0] = 0x2000200020002000;
  v6.i64[1] = 0x2000200020002000;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v8 = *a2;
    v9 = a2[1];
    a2 += 2;
    v10 = *a3;
    v11 = a3[1];
    a3 += 2;
    *a5 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v8, v10), v6), 3uLL), (int16x8_t)0), v7);
    *(int16x8_t *)((char *)a5 + 2 * a4) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v9, v11), v6), 3uLL), (int16x8_t)0), v7);
    a5 = (int16x8_t *)((char *)a5 + 4 * a4);
    v5 -= 2;
  }
  while (v5 > 2);
  return result;
}

int8x8_t sub_1B67E6498(int a1, int16x8_t *a2, int16x8_t *a3, uint64_t a4, int8x8_t *a5)
{
  int v5;
  int16x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t *v9;
  int8x8_t *v10;
  int8x8_t result;

  v5 = a1 + 4;
  do
  {
    v6 = vhaddq_s16(a2[3], a3[3]);
    v7 = vqrshrun_n_s16(vhaddq_s16(a2[1], a3[1]), 6uLL);
    v8 = vqrshrun_n_s16(vhaddq_s16(a2[2], a3[2]), 6uLL);
    *a5 = vqrshrun_n_s16(vhaddq_s16(*a2, *a3), 6uLL);
    *(int8x8_t *)((char *)a5 + a4) = v7;
    v9 = (int8x8_t *)((char *)a5 + a4 + a4);
    *v9 = v8;
    v10 = (int8x8_t *)((char *)v9 + a4);
    v5 -= 4;
    result = vqrshrun_n_s16(v6, 6uLL);
    *v10 = result;
    a2 += 4;
    a3 += 4;
    a5 = (int8x8_t *)((char *)v10 + a4);
  }
  while (v5 > 4);
  return result;
}

uint64_t sub_1B67E6504(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  char v8;
  char v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int v12;
  int16x8_t *v13;
  int16x8_t v14;

  v5 = 0;
  v6.i64[0] = 0x2000200020002000;
  v6.i64[1] = 0x2000200020002000;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = (int16x8_t *)(a2 + 2 * v5);
    v11 = (int16x8_t *)(a3 + 2 * v5);
    v12 = result + 2;
    v13 = (int16x8_t *)(a5 + 2 * v5);
    do
    {
      v14 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v10[2], v11[2]), v6), 3uLL), (int16x8_t)0), v7);
      *v13 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*v10, *v11), v6), 3uLL), (int16x8_t)0), v7);
      *(int16x8_t *)((char *)v13 + 2 * a4) = v14;
      v13 = (int16x8_t *)((char *)v13 + 4 * a4);
      v12 -= 2;
      v10 += 4;
      v11 += 4;
    }
    while (v12 > 2);
    v8 = 0;
    v5 = 8;
  }
  while ((v9 & 1) != 0);
  return result;
}

int8x16_t sub_1B67E65A0(int a1, int16x8_t *a2, int16x8_t *a3, uint64_t a4, int8x16_t *a5)
{
  int v5;
  int16x8_t v6;
  int8x8_t v7;
  int8x16_t result;

  v5 = a1 + 2;
  do
  {
    v6 = vhaddq_s16(a2[3], a3[3]);
    v7 = vqrshrun_n_s16(vhaddq_s16(a2[2], a3[2]), 6uLL);
    result = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(*a2, *a3), 6uLL), vhaddq_s16(a2[1], a3[1]), 6uLL);
    *a5 = result;
    *(int8x16_t *)((char *)a5 + a4) = vqrshrun_high_n_s16(v7, v6, 6uLL);
    a5 = (int8x16_t *)((char *)a5 + 2 * a4);
    v5 -= 2;
    a2 += 4;
    a3 += 4;
  }
  while (v5 > 2);
  return result;
}

uint64_t sub_1B67E65FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5)
{
  unint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  int v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t v12;
  BOOL v13;

  v5 = 0;
  v6.i64[0] = 0x2000200020002000;
  v6.i64[1] = 0x2000200020002000;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v8 = (int16x8_t *)(a2 + 2 * v5);
    v9 = result + 2;
    v10 = a5;
    v11 = (int16x8_t *)(a3 + 2 * v5);
    do
    {
      v12 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v8[4], v11[4]), v6), 3uLL), (int16x8_t)0), v7);
      *v10 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*v8, *v11), v6), 3uLL), (int16x8_t)0), v7);
      *(int16x8_t *)((char *)v10 + 2 * a4) = v12;
      v10 = (int16x8_t *)((char *)v10 + 4 * a4);
      v9 -= 2;
      v8 += 8;
      v11 += 8;
    }
    while (v9 > 2);
    ++a5;
    v13 = v5 >= 0x18;
    v5 += 8;
  }
  while (!v13);
  return result;
}

int8x16_t sub_1B67E6698(int a1, int16x8_t *a2, int16x8_t *a3, uint64_t a4, int8x16_t *a5)
{
  int8x16_t *v5;
  int v6;
  int8x16_t result;
  int8x16_t v8;

  v5 = a5 + 1;
  v6 = a1 + 1;
  do
  {
    result = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(*a2, *a3), 6uLL), vhaddq_s16(a2[1], a3[1]), 6uLL);
    v8 = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(a2[2], a3[2]), 6uLL), vhaddq_s16(a2[3], a3[3]), 6uLL);
    v5[-1] = result;
    *v5 = v8;
    v5 = (int8x16_t *)((char *)v5 + a4);
    --v6;
    a2 += 4;
    a3 += 4;
  }
  while (v6 > 1);
  return result;
}

uint64_t sub_1B67E66F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5)
{
  unint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  int v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t v12;
  BOOL v13;

  v5 = 0;
  v6.i64[0] = 0x2000200020002000;
  v6.i64[1] = 0x2000200020002000;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v8 = (int16x8_t *)(a2 + 2 * v5);
    v9 = result + 2;
    v10 = a5;
    v11 = (int16x8_t *)(a3 + 2 * v5);
    do
    {
      v12 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v8[8], v11[8]), v6), 3uLL), (int16x8_t)0), v7);
      *v10 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*v8, *v11), v6), 3uLL), (int16x8_t)0), v7);
      *(int16x8_t *)((char *)v10 + 2 * a4) = v12;
      v10 = (int16x8_t *)((char *)v10 + 4 * a4);
      v9 -= 2;
      v8 += 16;
      v11 += 16;
    }
    while (v9 > 2);
    ++a5;
    v13 = v5 >= 0x38;
    v5 += 8;
  }
  while (!v13);
  return result;
}

int8x16_t sub_1B67E678C(int a1, int16x8_t *a2, int16x8_t *a3, uint64_t a4, int8x16_t *a5)
{
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t result;
  int8x16_t v9;

  v5 = a5 + 2;
  v6 = a1 + 1;
  do
  {
    v7 = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(a2[2], a3[2]), 6uLL), vhaddq_s16(a2[3], a3[3]), 6uLL);
    v5[-2] = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(*a2, *a3), 6uLL), vhaddq_s16(a2[1], a3[1]), 6uLL);
    v5[-1] = v7;
    result = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(a2[4], a3[4]), 6uLL), vhaddq_s16(a2[5], a3[5]), 6uLL);
    v9 = vqrshrun_high_n_s16(vqrshrun_n_s16(vhaddq_s16(a2[6], a3[6]), 6uLL), vhaddq_s16(a2[7], a3[7]), 6uLL);
    *v5 = result;
    v5[1] = v9;
    v5 = (int8x16_t *)((char *)v5 + a4);
    --v6;
    a2 += 8;
    a3 += 8;
  }
  while (v6 > 1);
  return result;
}

uint64_t sub_1B67E6818(uint64_t result, int a2, const float *a3, const float *a4, int16x8_t *a5, uint64_t a6, _QWORD *a7)
{
  int16x4_t v7;
  int32x4_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;

  v7 = (int16x4_t)vld1_dup_f32(a3);
  v8 = vmovl_s16(v7);
  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v10 = vdupq_n_s32(-a2);
  v11 = result + 2;
  v12.i64[0] = 0x200000002000;
  v12.i64[1] = 0x200000002000;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v14 = *a5++;
    v15 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, *(int16x4_t *)v14.i8), v8), v10)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, v14), v8), v10)), v9), (int16x8_t)0), v13);
    *a7 = v15.i64[0];
    *(_QWORD *)((char *)a7 + 2 * a6) = v15.i64[1];
    a7 = (_QWORD *)((char *)a7 + 4 * a6);
    v11 -= 2;
  }
  while (v11 > 2);
  return result;
}

uint64_t sub_1B67E6894(uint64_t result, int a2, const float *a3, const float *a4, int8x16_t *a5, uint64_t a6, _DWORD *a7)
{
  int16x4_t v7;
  int16x4_t v8;
  int32x4_t v9;
  int v10;
  int8x16_t v11;
  int16x8_t v12;
  int8x8_t v13;

  v7 = (int16x4_t)vld1_dup_f32(a3);
  v8 = (int16x4_t)vld1_dup_f32(a4);
  v9 = vdupq_n_s32(-a2);
  v10 = result + 2;
  do
  {
    v11 = *a5++;
    *(int16x4_t *)v12.i8 = vadd_s16(v8, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v11.i8, v7), v9)));
    v12.u64[1] = (unint64_t)vadd_s16(v8, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v7), v9)));
    v13 = vqmovun_s16(v12);
    *a7 = v13.i32[0];
    *(_DWORD *)((char *)a7 + a6) = v13.i32[1];
    a7 = (_DWORD *)((char *)a7 + 2 * a6);
    v10 -= 2;
  }
  while (v10 > 2);
  return result;
}

uint64_t sub_1B67E68FC(uint64_t result, int a2, const float *a3, const float *a4, int16x8_t *a5, uint64_t a6, int16x8_t *a7)
{
  int16x4_t v7;
  int32x4_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;

  v7 = (int16x4_t)vld1_dup_f32(a3);
  v8 = vmovl_s16(v7);
  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v10 = vdupq_n_s32(-a2);
  v11 = result + 2;
  v12.i64[0] = 0x200000002000;
  v12.i64[1] = 0x200000002000;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v14 = *a5;
    v15 = a5[1];
    a5 += 2;
    *a7 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, *(int16x4_t *)v14.i8), v8), v10)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, v14), v8), v10)), v9), (int16x8_t)0), v13);
    *(int16x8_t *)((char *)a7 + 2 * a6) = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, *(int16x4_t *)v15.i8), v8), v10)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, v15), v8), v10)), v9), (int16x8_t)0), v13);
    a7 = (int16x8_t *)((char *)a7 + 4 * a6);
    v11 -= 2;
  }
  while (v11 > 2);
  return result;
}

uint64_t sub_1B67E69A0(uint64_t result, int a2, const float *a3, const float *a4, int8x16_t *a5, uint64_t a6, _QWORD *a7)
{
  int16x4_t v7;
  int32x4_t v8;
  int16x4_t v9;
  int v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;

  v7 = (int16x4_t)vld1_dup_f32(a4);
  v8 = vdupq_n_s32(-a2);
  v9 = (int16x4_t)vld1_dup_f32(a3);
  v10 = result + 2;
  do
  {
    v11 = *a5;
    v12 = a5[1];
    a5 += 2;
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v11.i8, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v9), v8)));
    *(int8x8_t *)v11.i8 = vqmovun_s16(v13);
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v12.i8, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), v9), v8)));
    *a7 = v11.i64[0];
    *(int8x8_t *)((char *)a7 + a6) = vqmovun_s16(v13);
    a7 = (_QWORD *)((char *)a7 + 2 * a6);
    v10 -= 2;
  }
  while (v10 > 2);
  return result;
}

uint64_t sub_1B67E6A30(uint64_t result, int a2, const float *a3, const float *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int16x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int32x4_t v11;
  char v12;
  int32x4_t v13;
  int16x8_t v14;
  char v15;
  int16x4_t *v16;
  int v17;
  int16x8_t *v18;
  int16x8_t v19;

  v7 = 0;
  v8 = (int16x4_t)vld1_dup_f32(a3);
  v9 = vmovl_s16(v8);
  v10 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = vdupq_n_s32(-a2);
  v12 = 1;
  v13.i64[0] = 0x200000002000;
  v13.i64[1] = 0x200000002000;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v15 = v12;
    v16 = (int16x4_t *)(a5 + 2 * v7);
    v17 = result + 2;
    v18 = (int16x8_t *)(a7 + 2 * v7);
    do
    {
      v19 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v13, v16[4]), v9), v11)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v13, *(int16x8_t *)v16[4].i8), v9), v11)), v10), (int16x8_t)0), v14);
      *v18 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v13, *v16), v9), v11)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v13, *(int16x8_t *)v16->i8), v9), v11)), v10), (int16x8_t)0), v14);
      *(int16x8_t *)((char *)v18 + 2 * a6) = v19;
      v18 = (int16x8_t *)((char *)v18 + 4 * a6);
      v17 -= 2;
      v16 += 8;
    }
    while (v17 > 2);
    v12 = 0;
    v7 = 8;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_1B67E6B00(uint64_t result, int a2, const float *a3, const float *a4, int8x16_t *a5, uint64_t a6, int8x16_t *a7)
{
  int16x4_t v7;
  int32x4_t v8;
  int16x4_t v9;
  int v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;

  v7 = (int16x4_t)vld1_dup_f32(a4);
  v8 = vdupq_n_s32(-a2);
  v9 = (int16x4_t)vld1_dup_f32(a3);
  v10 = result + 1;
  do
  {
    v11 = *a5;
    v12 = a5[1];
    a5 += 2;
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v11.i8, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v9), v8)));
    *(int8x8_t *)v11.i8 = vqmovun_s16(v13);
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v12.i8, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), v9), v8)));
    *a7 = vqmovun_high_s16(*(int8x8_t *)v11.i8, v13);
    a7 = (int8x16_t *)((char *)a7 + a6);
    --v10;
  }
  while (v10 > 1);
  return result;
}

uint64_t sub_1B67E6B88(uint64_t result, int a2, const float *a3, const float *a4, uint64_t a5, uint64_t a6, int16x8_t *a7)
{
  unint64_t v7;
  int16x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x4_t *v14;
  int v15;
  int16x8_t *v16;
  int16x8_t v17;
  BOOL v18;

  v7 = 0;
  v8 = (int16x4_t)vld1_dup_f32(a3);
  v9 = vmovl_s16(v8);
  v10 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = vdupq_n_s32(-a2);
  v12.i64[0] = 0x200000002000;
  v12.i64[1] = 0x200000002000;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v14 = (int16x4_t *)(a5 + 2 * v7);
    v15 = result + 2;
    v16 = a7;
    do
    {
      v17 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, v14[8]), v9), v11)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, *(int16x8_t *)v14[8].i8), v9), v11)), v10), (int16x8_t)0), v13);
      *v16 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, *v14), v9), v11)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, *(int16x8_t *)v14->i8), v9), v11)), v10), (int16x8_t)0), v13);
      *(int16x8_t *)((char *)v16 + 2 * a6) = v17;
      v16 = (int16x8_t *)((char *)v16 + 4 * a6);
      v15 -= 2;
      v14 += 16;
    }
    while (v15 > 2);
    ++a7;
    v18 = v7 >= 0x18;
    v7 += 8;
  }
  while (!v18);
  return result;
}

uint64_t sub_1B67E6C58(uint64_t result, int a2, const float *a3, const float *a4, uint64_t a5, uint64_t a6, int8x16_t *a7)
{
  int16x4_t v7;
  int32x4_t v8;
  int16x4_t v9;
  int8x16_t *v10;
  int v11;
  int8x16_t v12;
  int16x8_t v13;
  int8x8_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;

  v7 = (int16x4_t)vld1_dup_f32(a4);
  v8 = vdupq_n_s32(-a2);
  v9 = (int16x4_t)vld1_dup_f32(a3);
  v10 = a7 + 1;
  v11 = result + 1;
  do
  {
    v12 = *(int8x16_t *)(a5 + 16);
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)a5, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5, *(int8x16_t *)a5, 8uLL), v9), v8)));
    v14 = vqmovun_s16(v13);
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v12.i8, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), v9), v8)));
    v15 = vqmovun_high_s16(v14, v13);
    v16 = *(int8x16_t *)(a5 + 32);
    v17 = *(int8x16_t *)(a5 + 48);
    *(int16x4_t *)v18.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v16.i8, v9), v8)));
    v18.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v9), v8)));
    *(int8x8_t *)v16.i8 = vqmovun_s16(v18);
    *(int16x4_t *)v18.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v17.i8, v9), v8)));
    v18.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v9), v8)));
    v10[-1] = v15;
    *v10 = vqmovun_high_s16(*(int8x8_t *)v16.i8, v18);
    v10 = (int8x16_t *)((char *)v10 + a6);
    --v11;
    a5 += 64;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1B67E6D44(uint64_t result, int a2, const float *a3, const float *a4, uint64_t a5, uint64_t a6, int16x8_t *a7)
{
  unint64_t v7;
  int16x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x4_t *v14;
  int v15;
  int16x8_t *v16;
  int16x8_t v17;
  BOOL v18;

  v7 = 0;
  v8 = (int16x4_t)vld1_dup_f32(a3);
  v9 = vmovl_s16(v8);
  v10 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = vdupq_n_s32(-a2);
  v12.i64[0] = 0x200000002000;
  v12.i64[1] = 0x200000002000;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v14 = (int16x4_t *)(a5 + 2 * v7);
    v15 = result + 2;
    v16 = a7;
    do
    {
      v17 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, v14[16]), v9), v11)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, *(int16x8_t *)v14[16].i8), v9), v11)), v10), (int16x8_t)0), v13);
      *v16 = vminq_s16(vmaxq_s16(vaddq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmulq_s32(vaddw_s16(v12, *v14), v9), v11)), vrshlq_s32(vmulq_s32(vaddw_high_s16(v12, *(int16x8_t *)v14->i8), v9), v11)), v10), (int16x8_t)0), v13);
      *(int16x8_t *)((char *)v16 + 2 * a6) = v17;
      v16 = (int16x8_t *)((char *)v16 + 4 * a6);
      v15 -= 2;
      v14 += 32;
    }
    while (v15 > 2);
    ++a7;
    v18 = v7 >= 0x38;
    v7 += 8;
  }
  while (!v18);
  return result;
}

uint64_t sub_1B67E6E14(uint64_t result, int a2, const float *a3, const float *a4, uint64_t a5, uint64_t a6, int8x16_t *a7)
{
  int16x4_t v7;
  int32x4_t v8;
  int16x4_t v9;
  int8x16_t *v10;
  int v11;
  int8x16_t v12;
  int16x8_t v13;
  int8x8_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;

  v7 = (int16x4_t)vld1_dup_f32(a4);
  v8 = vdupq_n_s32(-a2);
  v9 = (int16x4_t)vld1_dup_f32(a3);
  v10 = a7 + 2;
  v11 = result + 1;
  do
  {
    v12 = *(int8x16_t *)(a5 + 16);
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)a5, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5, *(int8x16_t *)a5, 8uLL), v9), v8)));
    v14 = vqmovun_s16(v13);
    *(int16x4_t *)v13.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v12.i8, v9), v8)));
    v13.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), v9), v8)));
    v15 = vqmovun_high_s16(v14, v13);
    v16 = *(int8x16_t *)(a5 + 32);
    v17 = *(int8x16_t *)(a5 + 48);
    *(int16x4_t *)v18.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v16.i8, v9), v8)));
    v18.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v9), v8)));
    *(int8x8_t *)v16.i8 = vqmovun_s16(v18);
    *(int16x4_t *)v18.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v17.i8, v9), v8)));
    v18.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v9), v8)));
    v19 = vqmovun_high_s16(*(int8x8_t *)v16.i8, v18);
    v20 = *(int16x8_t *)(a5 + 64);
    v21 = *(int8x16_t *)(a5 + 80);
    *(int16x4_t *)v22.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v20.i8, v9), v8)));
    v22.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), v9), v8)));
    *(int16x4_t *)v20.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v21.i8, v9), v8)));
    v20.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v9), v8)));
    v23 = vqmovun_high_s16(vqmovun_s16(v22), v20);
    v24 = *(int8x16_t *)(a5 + 96);
    v25 = *(int8x16_t *)(a5 + 112);
    *(int16x4_t *)v26.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v24.i8, v9), v8)));
    v26.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), v9), v8)));
    *(int8x8_t *)v24.i8 = vqmovun_s16(v26);
    *(int16x4_t *)v26.i8 = vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16(*(int16x4_t *)v25.i8, v9), v8)));
    v26.u64[1] = (unint64_t)vadd_s16(v7, vmovn_s32(vrshlq_s32(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), v9), v8)));
    v10[-2] = v15;
    v10[-1] = v19;
    *v10 = v23;
    v10[1] = vqmovun_high_s16(*(int8x8_t *)v24.i8, v26);
    v10 = (int8x16_t *)((char *)v10 + a6);
    --v11;
    a5 += 128;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1B67E6FBC(uint64_t result, int a2, const float *a3, __int16 *a4, int16x8_t *a5, const float *a6, __int16 *a7, int16x8_t *a8, uint64_t a9, _QWORD *a10)
{
  int16x4_t v11;
  int32x4_t v12;
  int16x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;

  v11 = (int16x4_t)vld1_dup_f32(a3);
  v12 = vmovl_s16(v11);
  v13 = (int16x4_t)vld1_dup_f32(a6);
  v14 = vmovl_s16(v13);
  v15 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v16 = vdupq_n_s32(~a2);
  v17 = result + 2;
  v18.i64[0] = 0x200000002000;
  v18.i64[1] = 0x200000002000;
  v19.i64[0] = 0xFC00FC00FC00FC00;
  v19.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v20 = *a5++;
    v21 = v20;
    v22 = *a8++;
    v23 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_s16(v18, *(int16x4_t *)v21.i8), v12), vaddw_s16(v18, *(int16x4_t *)v22.i8), v14), v16)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_high_s16(v18, v21), v12), vaddw_high_s16(v18, v22), v14), v16)), (int16x8_t)0), v19);
    *a10 = v23.i64[0];
    *(_QWORD *)((char *)a10 + 2 * a9) = v23.i64[1];
    a10 = (_QWORD *)((char *)a10 + 4 * a9);
    v17 -= 2;
  }
  while (v17 > 2);
  return result;
}

uint64_t sub_1B67E7080(uint64_t result, int a2, const float *a3, __int16 *a4, int8x16_t *a5, const float *a6, __int16 *a7, int8x16_t *a8, uint64_t a9, _DWORD *a10)
{
  int16x4_t v10;
  int16x4_t v11;
  int32x4_t v12;
  int32x4_t v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;

  v10 = (int16x4_t)vld1_dup_f32(a3);
  v11 = (int16x4_t)vld1_dup_f32(a6);
  v12 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v14 = vdupq_n_s32(~a2);
  v15 = result + 2;
  do
  {
    v16 = *a5++;
    v17 = v16;
    v18 = *a8++;
    *(int8x8_t *)v17.i8 = vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v12, *(int16x4_t *)v17.i8, v10), *(int16x4_t *)v18.i8, v11), v14), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v12, (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v10), (int16x4_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), v11), v14)));
    *a10 = v17.i32[0];
    *(_DWORD *)((char *)a10 + a9) = v17.i32[1];
    a10 = (_DWORD *)((char *)a10 + 2 * a9);
    v15 -= 2;
  }
  while (v15 > 2);
  return result;
}

uint64_t sub_1B67E711C(uint64_t result, int a2, const float *a3, __int16 *a4, int16x8_t *a5, const float *a6, __int16 *a7, int16x8_t *a8, uint64_t a9, int16x8_t *a10)
{
  int16x4_t v11;
  int32x4_t v12;
  int16x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int16x8_t v25;

  v11 = (int16x4_t)vld1_dup_f32(a3);
  v12 = vmovl_s16(v11);
  v13 = (int16x4_t)vld1_dup_f32(a6);
  v14 = vmovl_s16(v13);
  v15 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v16 = vdupq_n_s32(~a2);
  v17 = result + 2;
  v18.i64[0] = 0x200000002000;
  v18.i64[1] = 0x200000002000;
  v19.i64[0] = 0xFC00FC00FC00FC00;
  v19.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v20 = *a5;
    v21 = a5[1];
    a5 += 2;
    v22 = vmlaq_s32(v15, vaddw_s16(v18, *(int16x4_t *)v20.i8), v12);
    v23 = vmlaq_s32(v15, vaddw_high_s16(v18, v20), v12);
    v24 = *a8;
    v25 = a8[1];
    a8 += 2;
    *a10 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(v22, vaddw_s16(v18, *(int16x4_t *)v24.i8), v14), v16)), vrshlq_s32(vmlaq_s32(v23, vaddw_high_s16(v18, v24), v14), v16)), (int16x8_t)0), v19);
    *(int16x8_t *)((char *)a10 + 2 * a9) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_s16(v18, *(int16x4_t *)v21.i8), v12), vaddw_s16(v18, *(int16x4_t *)v25.i8), v14), v16)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_high_s16(v18, v21), v12), vaddw_high_s16(v18, v25), v14), v16)), (int16x8_t)0), v19);
    a10 = (int16x8_t *)((char *)a10 + 4 * a9);
    v17 -= 2;
  }
  while (v17 > 2);
  return result;
}

uint64_t sub_1B67E721C(uint64_t result, int a2, const float *a3, __int16 *a4, int8x16_t *a5, const float *a6, __int16 *a7, int8x16_t *a8, uint64_t a9, int8x8_t *a10)
{
  int32x4_t v11;
  int32x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;

  v11 = vdupq_n_s32(~a2);
  v12 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v13 = (int16x4_t)vld1_dup_f32(a3);
  v14 = (int16x4_t)vld1_dup_f32(a6);
  v15 = result + 2;
  do
  {
    v16 = *a5;
    v17 = a5[1];
    a5 += 2;
    v18 = *a8;
    v19 = a8[1];
    a8 += 2;
    *a10 = vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v12, *(int16x4_t *)v16.i8, v13), *(int16x4_t *)v18.i8, v14), v11), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v12, (int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v13), (int16x4_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), v14), v11)));
    *(int8x8_t *)((char *)a10 + a9) = vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v12, *(int16x4_t *)v17.i8, v13), *(int16x4_t *)v19.i8, v14), v11), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v12, (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v13), (int16x4_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v14), v11)));
    a10 = (int8x8_t *)((char *)a10 + 2 * a9);
    v15 -= 2;
  }
  while (v15 > 2);
  return result;
}

uint64_t sub_1B67E72E4(uint64_t result, int a2, const float *a3, __int16 *a4, uint64_t a5, const float *a6, __int16 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  int16x4_t v11;
  int32x4_t v12;
  int16x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  char v17;
  int32x4_t v18;
  int16x8_t v19;
  char v20;
  int16x4_t *v21;
  int16x4_t *v22;
  int v23;
  int16x8_t *v24;
  int16x8_t v25;

  v10 = 0;
  v11 = (int16x4_t)vld1_dup_f32(a3);
  v12 = vmovl_s16(v11);
  v13 = (int16x4_t)vld1_dup_f32(a6);
  v14 = vmovl_s16(v13);
  v15 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v16 = vdupq_n_s32(~a2);
  v17 = 1;
  v18.i64[0] = 0x200000002000;
  v18.i64[1] = 0x200000002000;
  v19.i64[0] = 0xFC00FC00FC00FC00;
  v19.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v20 = v17;
    v21 = (int16x4_t *)(a5 + 2 * v10);
    v22 = (int16x4_t *)(a8 + 2 * v10);
    v23 = result + 2;
    v24 = (int16x8_t *)(a10 + 2 * v10);
    do
    {
      v25 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_s16(v18, v21[4]), v12), vaddw_s16(v18, v22[4]), v14), v16)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_high_s16(v18, *(int16x8_t *)v21[4].i8), v12), vaddw_high_s16(v18, *(int16x8_t *)v22[4].i8), v14), v16)), (int16x8_t)0), v19);
      *v24 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_s16(v18, *v21), v12), vaddw_s16(v18, *v22), v14), v16)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v15, vaddw_high_s16(v18, *(int16x8_t *)v21->i8), v12), vaddw_high_s16(v18, *(int16x8_t *)v22->i8), v14), v16)), (int16x8_t)0), v19);
      *(int16x8_t *)((char *)v24 + 2 * a9) = v25;
      v24 = (int16x8_t *)((char *)v24 + 4 * a9);
      v23 -= 2;
      v21 += 8;
      v22 += 8;
    }
    while (v23 > 2);
    v17 = 0;
    v10 = 8;
  }
  while ((v20 & 1) != 0);
  return result;
}

uint64_t sub_1B67E741C(uint64_t result, int a2, const float *a3, __int16 *a4, int8x16_t *a5, const float *a6, __int16 *a7, int8x16_t *a8, uint64_t a9, int8x16_t *a10)
{
  int32x4_t v10;
  int32x4_t v11;
  int16x4_t v13;
  int16x4_t v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;

  v10 = vdupq_n_s32(~a2);
  v11 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v13 = (int16x4_t)vld1_dup_f32(a3);
  v14 = (int16x4_t)vld1_dup_f32(a6);
  v15 = result + 1;
  do
  {
    v16 = *a5;
    v17 = a5[1];
    a5 += 2;
    v18 = *a8;
    v19 = a8[1];
    a8 += 2;
    *a10 = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v16.i8, v13), *(int16x4_t *)v18.i8, v14), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v13), (int16x4_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), v14), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v17.i8, v13), *(int16x4_t *)v19.i8, v14), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v13), (int16x4_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL),
                              v14),
                            v10)));
    a10 = (int8x16_t *)((char *)a10 + a9);
    --v15;
  }
  while (v15 > 1);
  return result;
}

uint64_t sub_1B67E74DC(uint64_t result, int a2, const float *a3, __int16 *a4, uint64_t a5, const float *a6, __int16 *a7, uint64_t a8, uint64_t a9, int16x8_t *a10)
{
  unint64_t v10;
  int16x4_t v12;
  int32x4_t v13;
  int16x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x4_t *v20;
  int v21;
  int16x8_t *v22;
  int16x4_t *v23;
  int16x8_t v24;
  BOOL v25;

  v10 = 0;
  v12 = (int16x4_t)vld1_dup_f32(a3);
  v13 = vmovl_s16(v12);
  v14 = (int16x4_t)vld1_dup_f32(a6);
  v15 = vmovl_s16(v14);
  v16 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v17 = vdupq_n_s32(~a2);
  v18.i64[0] = 0x200000002000;
  v18.i64[1] = 0x200000002000;
  v19.i64[0] = 0xFC00FC00FC00FC00;
  v19.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v20 = (int16x4_t *)(a5 + 2 * v10);
    v21 = result + 2;
    v22 = a10;
    v23 = (int16x4_t *)(a8 + 2 * v10);
    do
    {
      v24 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_s16(v18, v20[8]), v13), vaddw_s16(v18, v23[8]), v15), v17)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_high_s16(v18, *(int16x8_t *)v20[8].i8), v13), vaddw_high_s16(v18, *(int16x8_t *)v23[8].i8), v15), v17)), (int16x8_t)0), v19);
      *v22 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_s16(v18, *v20), v13), vaddw_s16(v18, *v23), v15), v17)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_high_s16(v18, *(int16x8_t *)v20->i8), v13), vaddw_high_s16(v18, *(int16x8_t *)v23->i8), v15), v17)), (int16x8_t)0), v19);
      *(int16x8_t *)((char *)v22 + 2 * a9) = v24;
      v22 = (int16x8_t *)((char *)v22 + 4 * a9);
      v21 -= 2;
      v20 += 16;
      v23 += 16;
    }
    while (v21 > 2);
    ++a10;
    v25 = v10 >= 0x18;
    v10 += 8;
  }
  while (!v25);
  return result;
}

uint64_t sub_1B67E7614(uint64_t result, int a2, const float *a3, __int16 *a4, uint64_t a5, const float *a6, __int16 *a7, int16x4_t *a8, uint64_t a9, int8x16_t *a10)
{
  int32x4_t v10;
  int32x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int8x16_t *v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;

  v10 = vdupq_n_s32(~a2);
  v11 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v12 = (int16x4_t)vld1_dup_f32(a3);
  v13 = (int16x4_t)vld1_dup_f32(a6);
  v14 = a10 + 1;
  v15 = result + 1;
  do
  {
    v16 = *(int8x16_t *)(a5 + 16);
    v17 = *(int8x16_t *)(a5 + 32);
    v18 = *(int8x16_t *)(a5 + 48);
    v19 = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v17.i8, v12), a8[4], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[4].i8, *(int8x16_t *)a8[4].i8, 8uLL), v13), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v18.i8, v12), a8[6], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[6].i8, *(int8x16_t *)a8[6].i8, 8uLL), v13), v10)));
    v14[-1] = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)a5, v12), *a8, v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5, *(int8x16_t *)a5, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), v13), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v16.i8, v12), a8[2], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[2].i8, *(int8x16_t *)a8[2].i8, 8uLL), v13),
                               v10)));
    *v14 = v19;
    v14 = (int8x16_t *)((char *)v14 + a9);
    --v15;
    a5 += 64;
    a8 += 8;
  }
  while (v15 > 1);
  return result;
}

uint64_t sub_1B67E7748(uint64_t result, int a2, const float *a3, __int16 *a4, uint64_t a5, const float *a6, __int16 *a7, uint64_t a8, uint64_t a9, int16x8_t *a10)
{
  unint64_t v10;
  int16x4_t v12;
  int32x4_t v13;
  int16x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x4_t *v20;
  int v21;
  int16x8_t *v22;
  int16x4_t *v23;
  int16x8_t v24;
  BOOL v25;

  v10 = 0;
  v12 = (int16x4_t)vld1_dup_f32(a3);
  v13 = vmovl_s16(v12);
  v14 = (int16x4_t)vld1_dup_f32(a6);
  v15 = vmovl_s16(v14);
  v16 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v17 = vdupq_n_s32(~a2);
  v18.i64[0] = 0x200000002000;
  v18.i64[1] = 0x200000002000;
  v19.i64[0] = 0xFC00FC00FC00FC00;
  v19.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v20 = (int16x4_t *)(a5 + 2 * v10);
    v21 = result + 2;
    v22 = a10;
    v23 = (int16x4_t *)(a8 + 2 * v10);
    do
    {
      v24 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_s16(v18, v20[16]), v13), vaddw_s16(v18, v23[16]), v15), v17)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_high_s16(v18, *(int16x8_t *)v20[16].i8), v13), vaddw_high_s16(v18, *(int16x8_t *)v23[16].i8), v15), v17)), (int16x8_t)0), v19);
      *v22 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_s16(v18, *v20), v13), vaddw_s16(v18, *v23), v15), v17)), vrshlq_s32(vmlaq_s32(vmlaq_s32(v16, vaddw_high_s16(v18, *(int16x8_t *)v20->i8), v13), vaddw_high_s16(v18, *(int16x8_t *)v23->i8), v15), v17)), (int16x8_t)0), v19);
      *(int16x8_t *)((char *)v22 + 2 * a9) = v24;
      v22 = (int16x8_t *)((char *)v22 + 4 * a9);
      v21 -= 2;
      v20 += 32;
      v23 += 32;
    }
    while (v21 > 2);
    ++a10;
    v25 = v10 >= 0x38;
    v10 += 8;
  }
  while (!v25);
  return result;
}

uint64_t sub_1B67E7880(uint64_t result, int a2, const float *a3, __int16 *a4, uint64_t a5, const float *a6, __int16 *a7, int16x4_t *a8, uint64_t a9, int8x16_t *a10)
{
  int32x4_t v10;
  int32x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int8x16_t *v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;

  v10 = vdupq_n_s32(~a2);
  v11 = (int32x4_t)vdupq_n_s64(((*a7 + *a4) << a2) | ((unint64_t)((a7[1] + a4[1]) << a2) << 32));
  v12 = (int16x4_t)vld1_dup_f32(a3);
  v13 = (int16x4_t)vld1_dup_f32(a6);
  v14 = a10 + 2;
  v15 = result + 1;
  do
  {
    v16 = *(int8x16_t *)(a5 + 16);
    v17 = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)a5, v12), *a8, v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5, *(int8x16_t *)a5, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), v13), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v16.i8, v12), a8[2], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[2].i8, *(int8x16_t *)a8[2].i8, 8uLL), v13),
                           v10)));
    v18 = *(int8x16_t *)(a5 + 32);
    v19 = *(int8x16_t *)(a5 + 48);
    v20 = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v18.i8, v12), a8[4], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[4].i8, *(int8x16_t *)a8[4].i8, 8uLL), v13), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v19.i8, v12), a8[6], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[6].i8, *(int8x16_t *)a8[6].i8, 8uLL), v13), v10)));
    v21 = *(int8x16_t *)(a5 + 64);
    v22 = *(int8x16_t *)(a5 + 80);
    v23 = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v21.i8, v12), a8[8], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[8].i8, *(int8x16_t *)a8[8].i8, 8uLL), v13), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v22.i8, v12), a8[10], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[10].i8, *(int8x16_t *)a8[10].i8, 8uLL), v13), v10)));
    v24 = *(int8x16_t *)(a5 + 96);
    v25 = *(int8x16_t *)(a5 + 112);
    v26 = vqmovun_high_s16(vqmovun_s16(vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v24.i8, v12), a8[12], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[12].i8, *(int8x16_t *)a8[12].i8, 8uLL), v13), v10))), vuzp1q_s16((int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, *(int16x4_t *)v25.i8, v12), a8[14], v13), v10), (int16x8_t)vrshlq_s32(vmlal_s16(vmlal_s16(v11, (int16x4_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), v12), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8[14].i8, *(int8x16_t *)a8[14].i8, 8uLL), v13), v10)));
    v14[-2] = v17;
    v14[-1] = v20;
    *v14 = v23;
    v14[1] = v26;
    v14 = (int8x16_t *)((char *)v14 + a9);
    --v15;
    a5 += 128;
    a8 += 16;
  }
  while (v15 > 1);
  return result;
}

uint64_t sub_1B67E7A88(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x8_t *a7)
{
  int8x8_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  int8x8_t v19;
  int8x16_t v20;
  uint16x8_t v21;
  BOOL v22;

  v7 = qword_1B6920C90[(a3 & 3) - 1];
  v8 = (int8x8_t *)(a5 - 3);
  v9 = a5 + 5;
  v10 = (uint8x8_t)vdup_lane_s8(v7, 0);
  v11 = (uint8x8_t)vdup_lane_s8(v7, 1);
  v12 = (uint8x8_t)vdup_lane_s8(v7, 2);
  v13 = (uint8x8_t)vdup_lane_s8(v7, 3);
  v14 = (uint8x8_t)vdup_lane_s8(v7, 4);
  v15 = (uint8x8_t)vdup_lane_s8(v7, 5);
  v16 = (uint8x8_t)vdup_lane_s8(v7, 6);
  v17 = (uint8x8_t)vdup_lane_s8(v7, 7);
  do
  {
    v18 = 0;
    v19 = *v8;
    do
    {
      v20 = *(int8x16_t *)(v9 + v18);
      v21 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 1uLL), v11), (uint8x8_t)v19, v10), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 2uLL), v12), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 3uLL), v13), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 4uLL), v14), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 6uLL), v16), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 5uLL), v15), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 7uLL), v17);
      v19 = (int8x8_t)vextq_s8(v20, v20, 8uLL).u64[0];
      *a7 = v21;
      a7[1] = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL), v11), *(uint8x8_t *)v20.i8, v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 2uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 3uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 6uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 5uLL), v15),
                (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL),
                v17);
      a7 += 2;
      v18 += 16;
    }
    while (v18 < result);
    v8 = (int8x8_t *)((char *)v8 + a4);
    a7 = (uint16x8_t *)((char *)a7 + 2 * (a6 - result));
    v9 += a4;
    v22 = __OFSUB__(a2--, 1);
  }
  while (!((a2 < 0) ^ v22 | (a2 == 0)));
  return result;
}

uint64_t sub_1B67E7B7C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int8x8_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  int8x8_t v19;
  int8x16_t v20;
  int16x8_t v21;
  BOOL v22;

  v7 = qword_1B6920C90[(a3 & 3) - 1];
  v8 = (int8x8_t *)(a5 - 3);
  v9 = a5 + 5;
  v10 = (uint8x8_t)vdup_lane_s8(v7, 0);
  v11 = (uint8x8_t)vdup_lane_s8(v7, 1);
  v12 = (uint8x8_t)vdup_lane_s8(v7, 2);
  v13 = (uint8x8_t)vdup_lane_s8(v7, 3);
  v14 = (uint8x8_t)vdup_lane_s8(v7, 4);
  v15 = (uint8x8_t)vdup_lane_s8(v7, 5);
  v16 = (uint8x8_t)vdup_lane_s8(v7, 6);
  v17 = (uint8x8_t)vdup_lane_s8(v7, 7);
  do
  {
    v18 = 0;
    v19 = *v8;
    do
    {
      v20 = *(int8x16_t *)(v9 + v18);
      v21 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 1uLL), v11), (uint8x8_t)v19, v10), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 2uLL), v12), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 3uLL), v13), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 4uLL), v14), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 6uLL), v16), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 5uLL), v15),
                         (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 7uLL),
                         v17);
      v19 = (int8x8_t)vextq_s8(v20, v20, 8uLL).u64[0];
      *(int8x16_t *)(a7 + v18) = vqrshrun_high_n_s16(vqrshrun_n_s16(v21, 6uLL), (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL), v11), *(uint8x8_t *)v20.i8, v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 2uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 3uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), v14),
                                                    (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 6uLL),
                                                    v16),
                                                  (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 5uLL),
                                                  v15),
                                                (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL),
                                                v17),
                                   6uLL);
      v18 += 16;
    }
    while (v18 < result);
    v8 = (int8x8_t *)((char *)v8 + a4);
    a7 += v18 + a6 - result;
    v9 += a4;
    v22 = __OFSUB__(a2--, 1);
  }
  while (!((a2 < 0) ^ v22 | (a2 == 0)));
  return result;
}

void sub_1B67E7C80()
{
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67E7C94(uint64_t a1, char *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  char v6;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 24) = 64;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 > a3)
    return 4294954387;
  result = 4294954387;
  if ((*a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 56) = *a2 >> 5;
    v6 = *a2;
    *(_BYTE *)(a1 + 24) = *a2 & 0x1F;
    if ((v6 & 0x1E) != 0xA && v3 >= a3)
      return 4294954387;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B67E7CF4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) < 0x14uLL) & (0x8003Eu >> *(_BYTE *)(a1 + 24));
}

uint64_t sub_1B67E7D14(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) < 0xEuLL) & (0x21C0u >> *(_BYTE *)(a1 + 24));
}

BOOL sub_1B67E7D30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) - 7 < 2;
}

uint64_t sub_1B67E7D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v3 = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 35;
  do
  {
    v5 = 0;
    if (v3)
      v6 = 65;
    else
      v6 = 17;
    if (v3 == 3)
      v7 = 3;
    else
      v7 = 1;
    v8 = v4;
    do
    {
      if (v3)
        v9 = (char *)&unk_1B6920659 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
      else
        v9 = (char *)&unk_1B6920648;
      memcpy((void *)(a1 + v8), v9, v6);
      v5 += v7;
      v8 += 65 * v7;
    }
    while (v5 < 6);
    ++v3;
    v4 += 390;
  }
  while (v3 != 4);
  *(_BYTE *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1595) = 0u;
  *(_OWORD *)(a1 + 1611) = 0u;
  *(_OWORD *)(a1 + 1627) = 0u;
  *(_OWORD *)(a1 + 1643) = 0u;
  *(_OWORD *)(a1 + 1659) = 0u;
  *(_OWORD *)(a1 + 1675) = 0u;
  *(_QWORD *)(a1 + 1689) = 0;
  *(_QWORD *)(a1 + 1712) = a2;
  return a1;
}

uint64_t sub_1B67E7E40(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  __int16 v18;
  __int16 v19;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 2696);
    v8 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    do
    {
      *((_DWORD *)v8 - 1) = v6;
      *v8 = -1;
      v8 += 2;
      *(_DWORD *)(v7 + 4 * v6++) = -1;
    }
    while (v5 != v6);
  }
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 2688) = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(*(_QWORD *)a1 + 600))
  {
    sub_1B67D59F4((_QWORD *)(a1 + 40), *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 2000));
    bzero((void *)(a1 + 1512), 0x300uLL);
    v9 = 0;
    do
    {
      v10 = 0;
      a2 = *(_QWORD *)(a1 + 8);
      for (i = 16; i != 288; i += 16)
      {
        if (*(_QWORD *)(*(_QWORD *)(a2 + 744) + i))
          ++v10;
      }
      if (v9 >= v10)
      {
        *(_DWORD *)(a1 + 2300) = 0;
        goto LABEL_15;
      }
      v12 = sub_1B67E7FE0((void **)(a1 + 16 * v9++ + 1256), a3);
    }
    while (!(_DWORD)v12);
    v13 = v12;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v13;
    v19 = 0;
    v14 = MEMORY[0x1E0C81028];
    v15 = "8x8 collocated sad array creation failed\n";
    v16 = (uint8_t *)&v19;
    goto LABEL_19;
  }
LABEL_15:
  v13 = sub_1B685D040(a1 + 2304, *(_DWORD *)(*(_QWORD *)(a2 + 584) + 3424), *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 2000), *(_DWORD *)(*(_QWORD *)(a2 + 584) + 3248), *(char *)(a2 + 640));
  if ((_DWORD)v13 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v18 = 0;
    v14 = MEMORY[0x1E0C81028];
    v15 = "Initialize rdcost_ failed\n";
    v16 = (uint8_t *)&v18;
LABEL_19:
    _os_log_error_impl(&dword_1B676B000, v14, OS_LOG_TYPE_ERROR, v15, v16, 2u);
  }
  return v13;
}

uint64_t sub_1B67E7FE0(void **memptr, unint64_t a2)
{
  void *v4;
  uint64_t result;

  if ((unint64_t)memptr[1] >= a2)
    return 0;
  if (a2 > 0x1900000)
    return 4294954392;
  v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, 4 * a2, 0x100004052888210uLL) || !*memptr)
    return 4294954392;
  bzero(*memptr, 4 * a2);
  result = 0;
  memptr[1] = (void *)a2;
  return result;
}

BOOL sub_1B67E8080(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 < 0)
    v2 = -v2;
  v3 = *(_DWORD *)(a2 + 36);
  if (v3 < 0)
    v3 = -v3;
  return v2 < v3;
}

void *sub_1B67E80A4(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x2AAAAAAAAAAAAAALL)
    v1 = 0x2AAAAAAAAAAAAAALL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(48 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

__n128 sub_1B67E810C(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  uint64_t v9;
  __n128 *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 *v16;
  uint64_t v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  __n128 v25;
  __n128 *v27;
  unint64_t v28;
  __n128 *v29;
  unint64_t v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;

  if (a4 >= 2)
  {
    v9 = (uint64_t)a1;
    if (a4 == 2)
    {
      v10 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        result = *(__n128 *)v9;
        v11 = *(__n128 *)(v9 + 16);
        v12 = *(__n128 *)(v9 + 32);
        v14 = a2[-2];
        v13 = a2[-1];
        *(__n128 *)v9 = *v10;
        *(__n128 *)(v9 + 16) = v14;
        *(__n128 *)(v9 + 32) = v13;
        a2[-2] = v11;
        a2[-1] = v12;
        *v10 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v27 = a5;
      v28 = a4 >> 1;
      v29 = &a1[3 * (a4 >> 1)];
      v30 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v31 = sub_1B67E83D8(a1, v29, a3, v30, a5, result);
        v32 = &v27[3 * v28];
        result = sub_1B67E83D8((__n128 *)(v9 + 48 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v32, v31);
        v33 = &v27[3 * a4];
        v34 = v32;
        while (v34 != v33)
        {
          if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a3)(v34, v27, result))
          {
            result = *v34;
            v35 = v34[2];
            *(__n128 *)(v9 + 16) = v34[1];
            *(__n128 *)(v9 + 32) = v35;
            *(__n128 *)v9 = result;
            v34 += 3;
          }
          else
          {
            result = *v27;
            v36 = v27[2];
            *(__n128 *)(v9 + 16) = v27[1];
            *(__n128 *)(v9 + 32) = v36;
            *(__n128 *)v9 = result;
            v27 += 3;
          }
          v9 += 48;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              v37 = 0;
              do
              {
                v38 = v9 + v37 * 16;
                result = v34[v37];
                v39 = v34[v37 + 2];
                *(__n128 *)(v38 + 16) = v34[v37 + 1];
                *(__n128 *)(v38 + 32) = v39;
                *(__n128 *)v38 = result;
                v37 += 3;
              }
              while (&v34[v37] != v33);
            }
            return result;
          }
        }
        if (v27 != v32)
        {
          v40 = 0;
          do
          {
            v41 = v9 + v40 * 16;
            result = v27[v40];
            v42 = v27[v40 + 2];
            *(__n128 *)(v41 + 16) = v27[v40 + 1];
            *(__n128 *)(v41 + 32) = v42;
            *(__n128 *)v41 = result;
            v40 += 3;
          }
          while (&v27[v40] != v32);
        }
      }
      else
      {
        sub_1B67E810C(a1, v29, a3, v30, a5, a6);
        sub_1B67E810C(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v27, a6);
        sub_1B67E8680(v9, (_OWORD *)(v9 + 48 * (a4 >> 1)), a2, (uint64_t (**)(_QWORD, _QWORD))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v27, a6);
      }
    }
    else if (a1 != a2)
    {
      v16 = a1 + 3;
      if (&a1[3] != a2)
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 = v16;
          if ((*a3)(v16, v19))
          {
            v20 = v18[1];
            v43 = *v18;
            v44 = v20;
            v45 = v18[2];
            v21 = v17;
            while (1)
            {
              v22 = (_OWORD *)(v9 + v21);
              v23 = *(_OWORD *)(v9 + v21 + 16);
              v22[3] = *(_OWORD *)(v9 + v21);
              v22[4] = v23;
              v22[5] = *(_OWORD *)(v9 + v21 + 32);
              if (!v21)
                break;
              v21 -= 48;
              if ((((uint64_t (*)(__n128 *, uint64_t))*a3)(&v43, v21 + v9) & 1) == 0)
              {
                v24 = (_OWORD *)(v9 + v21 + 48);
                goto LABEL_15;
              }
            }
            v24 = (_OWORD *)v9;
LABEL_15:
            v25 = v44;
            *v24 = v43;
            v24[1] = v25;
            result = v45;
            v24[2] = v45;
          }
          v16 = v18 + 3;
          v17 += 48;
        }
        while (&v18[3] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1B67E83D8(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v10;
  __n128 v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  __n128 v32;
  unint64_t v33;
  __n128 *v34;
  __n128 v35;
  unint64_t v36;
  __n128 *v37;
  __n128 v38;

  if (a4)
  {
    v6 = a5;
    v10 = a1;
    if (a4 == 2)
    {
      v12 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        v13 = *v12;
        v14 = v12[2];
        v6[1] = v12[1];
        v6[2] = v14;
        *v6 = v13;
        result = *v10;
        v15 = v10[1];
        v16 = v10[2];
      }
      else
      {
        v27 = *v10;
        v28 = v10[2];
        v6[1] = v10[1];
        v6[2] = v28;
        *v6 = v27;
        result = *v12;
        v15 = v12[1];
        v16 = v12[2];
      }
      v6[4] = v15;
      v6[5] = v16;
      v6[3] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      v11 = a1[2];
      a5[1] = a1[1];
      a5[2] = v11;
      *a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v29 = &a1[3 * (a4 >> 1)];
      sub_1B67E810C(a1, v29, a3, a4 >> 1, a5, a4 >> 1);
      sub_1B67E810C(&v10[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v6[3 * (a4 >> 1)], a4 - (a4 >> 1));
      v30 = &v10[3 * (a4 >> 1)];
      while (v30 != a2)
      {
        if ((*a3)(v30, v10))
        {
          result = *v30;
          v31 = v30[2];
          v6[1] = v30[1];
          v6[2] = v31;
          *v6 = result;
          v30 += 3;
        }
        else
        {
          result = *v10;
          v32 = v10[2];
          v6[1] = v10[1];
          v6[2] = v32;
          *v6 = result;
          v10 += 3;
        }
        v6 += 3;
        if (v10 == v29)
        {
          if (v30 != a2)
          {
            v33 = 0;
            do
            {
              v34 = &v6[v33];
              result = v30[v33];
              v35 = v30[v33 + 2];
              v34[1] = v30[v33 + 1];
              v34[2] = v35;
              *v34 = result;
              v33 += 3;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v10 != v29)
      {
        v36 = 0;
        do
        {
          v37 = &v6[v36];
          result = v10[v36];
          v38 = v10[v36 + 2];
          v37[1] = v10[v36 + 1];
          v37[2] = v38;
          *v37 = result;
          v36 += 3;
        }
        while (&v10[v36] != v29);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      v17 = a1[2];
      a5[1] = a1[1];
      a5[2] = v17;
      *a5 = result;
      v18 = a1 + 3;
      if (&a1[3] != a2)
      {
        v19 = 0;
        v20 = a5;
        do
        {
          v21 = v20;
          v20 += 3;
          v22 = v20;
          if ((*a3)(v18, v21))
          {
            v23 = v21[1];
            *v20 = *v21;
            v20[1] = v23;
            v20[2] = v21[2];
            v22 = v6;
            if (v21 != v6)
            {
              v24 = v19;
              while (1)
              {
                v22 = (__n128 *)((char *)v6 + v24);
                if (!(*a3)(v18, (__n128 *)((char *)v6 + v24 - 48)))
                  break;
                v25 = *(__n128 *)((char *)v6 + v24 - 32);
                *v22 = *(__n128 *)((char *)v6 + v24 - 48);
                v22[1] = v25;
                v22[2] = *(__n128 *)((char *)v6 + v24 - 16);
                v24 -= 48;
                if (!v24)
                {
                  v22 = v6;
                  break;
                }
              }
            }
          }
          result = *v18;
          v26 = v18[2];
          v22[1] = v18[1];
          v22[2] = v26;
          *v22 = result;
          v18 += 3;
          v19 += 48;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1B67E8680(uint64_t result, _OWORD *a2, _OWORD *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unsigned int (**v20)(_OWORD *, uint64_t);
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD);
  unint64_t v26;
  _OWORD *v27;
  int v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  int64_t v36;
  const void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t (**v89)(_QWORD, _QWORD);
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;

  if (a6)
  {
    v10 = a6;
    v15 = (_OWORD *)result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      while (1)
      {
        result = (*a4)(a2, v15);
        if ((result & 1) != 0)
          break;
        v15 += 3;
        if (!--a5)
          return result;
      }
      v89 = a4;
      v90 = a7;
      v87 = v10;
      v88 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          v99 = v15[1];
          v104 = v15[2];
          v95 = *v15;
          v78 = *a2;
          v79 = a2[2];
          v15[1] = a2[1];
          v15[2] = v79;
          *v15 = v78;
          a2[1] = v99;
          a2[2] = v104;
          *a2 = v95;
          return result;
        }
        if (a5 >= 0)
          v23 = a5;
        else
          v23 = a5 + 1;
        v24 = v23 >> 1;
        v21 = &v15[3 * (v23 >> 1)];
        if (a3 == a2)
        {
          v18 = a3;
          v29 = a3;
        }
        else
        {
          v85 = v23 >> 1;
          v86 = a8;
          v25 = *v89;
          v26 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          v18 = a2;
          do
          {
            v27 = &v18[3 * (v26 >> 1)];
            v28 = v25(v27, v21);
            if (v28)
              v26 += ~(v26 >> 1);
            else
              v26 >>= 1;
            if (v28)
              v18 = v27 + 3;
          }
          while (v26);
          v29 = a2;
          v24 = v85;
          a8 = v86;
        }
        v17 = 0xAAAAAAAAAAAAAAABLL * (v18 - v29);
      }
      else
      {
        if (v10 >= 0)
          v16 = v10;
        else
          v16 = v10 + 1;
        v17 = v16 >> 1;
        v18 = &a2[3 * (v16 >> 1)];
        if (a2 == v15)
        {
          v21 = a2;
          v22 = a2;
        }
        else
        {
          v84 = v16 >> 1;
          v19 = 0xAAAAAAAAAAAAAAABLL * (a2 - v15);
          v20 = (unsigned int (**)(_OWORD *, uint64_t))a4;
          v21 = v15;
          do
          {
            if ((*v20)(v18, (uint64_t)&v21[3 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v21 += 3 * (v19 >> 1) + 3;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          v22 = v15;
          v17 = v84;
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * (v21 - v22);
      }
      a3 = v18;
      if (v21 != a2)
      {
        a3 = v21;
        if (a2 != v18)
        {
          if (v21 + 3 == a2)
          {
            v97 = v21[1];
            v101 = v21[2];
            v92 = *v21;
            v36 = (char *)v18 - (char *)a2;
            v37 = a2;
            v38 = (char *)v18 - (char *)a2;
            v39 = v17;
            memmove(v21, v37, v38);
            v17 = v39;
            a3 = (_OWORD *)((char *)v21 + v36);
            *a3 = v92;
            a3[1] = v97;
            a3[2] = v101;
          }
          else if (a2 + 3 == v18)
          {
            a3 = v21 + 3;
            v98 = *(v18 - 2);
            v102 = *(v18 - 1);
            v93 = *(v18 - 3);
            if (v18 - 3 != v21)
            {
              v40 = v17;
              memmove(v21 + 3, v21, (char *)(v18 - 3) - (char *)v21);
              v17 = v40;
            }
            v21[1] = v98;
            v21[2] = v102;
            *v21 = v93;
          }
          else
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
            if (v30 == 0xAAAAAAAAAAAAAAABLL * (v18 - a2))
            {
              v31 = 0;
              do
              {
                v32 = &a2[v31];
                v33 = &v21[v31];
                v96 = v21[v31 + 1];
                v100 = v21[v31 + 2];
                v91 = v21[v31];
                v34 = a2[v31];
                v35 = a2[v31 + 2];
                v33[1] = a2[v31 + 1];
                v33[2] = v35;
                *v33 = v34;
                v32[1] = v96;
                v32[2] = v100;
                *v32 = v91;
                if (&v21[v31 + 3] == a2)
                  break;
                v31 += 3;
              }
              while (v32 + 3 != v18);
              a3 = a2;
            }
            else
            {
              v41 = 0xAAAAAAAAAAAAAAABLL * (v18 - a2);
              v42 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v21[3 * v42];
                do
                {
                  v45 = *(v44 - 3);
                  v46 = *(v44 - 2);
                  v47 = *(v44 - 1);
                  v44 -= 3;
                  v103 = v47;
                  v94 = v45;
                  v48 = &v44[a2 - v21];
                  v49 = v44;
                  do
                  {
                    v50 = v49;
                    v49 = v48;
                    v51 = *v48;
                    v52 = v48[2];
                    v50[1] = v48[1];
                    v50[2] = v52;
                    *v50 = v51;
                    v53 = 0xAAAAAAAAAAAAAAABLL * (v18 - v48);
                    v54 = __OFSUB__(v30, v53);
                    v56 = v30 - v53;
                    v55 = (v56 < 0) ^ v54;
                    v48 = &v21[3 * v56];
                    if (v55)
                      v48 = &v49[a2 - v21];
                  }
                  while (v48 != v44);
                  v49[1] = v46;
                  v49[2] = v103;
                  *v49 = v94;
                }
                while (v44 != v21);
              }
              a3 = &v21[v18 - a2];
            }
          }
        }
      }
      a5 -= v24;
      v10 = v87 - v17;
      if (v24 + v17 >= a5 + v87 - v17)
      {
        v58 = a5;
        v59 = v17;
        result = sub_1B67E8680(a3, v18, v88, v89, v58, v87 - v17, v90, a8);
        v18 = v21;
        a4 = v89;
        v10 = v59;
        a5 = v24;
      }
      else
      {
        v57 = v21;
        a4 = v89;
        result = sub_1B67E8680(v15, v57, a3, v89, v24, v17, v90, a8);
        v15 = a3;
        a3 = v88;
      }
      a2 = v18;
      a7 = v90;
      if (!v10)
        return result;
    }
    if (a5 <= v10)
    {
      if (v15 != a2)
      {
        v69 = 0;
        do
        {
          v70 = &a7[v69 * 16];
          v71 = v15[v69];
          v72 = v15[v69 + 2];
          *((_OWORD *)v70 + 1) = v15[v69 + 1];
          *((_OWORD *)v70 + 2) = v72;
          *(_OWORD *)v70 = v71;
          v69 += 3;
        }
        while (&v15[v69] != a2);
        v73 = &a7[v69 * 16];
        if (&a7[v69 * 16] != a7)
        {
          while (a2 != a3)
          {
            result = (*a4)(a2, a7);
            if ((_DWORD)result)
            {
              v74 = *a2;
              v75 = a2[2];
              v15[1] = a2[1];
              v15[2] = v75;
              *v15 = v74;
              a2 += 3;
            }
            else
            {
              v76 = *(_OWORD *)a7;
              v77 = *((_OWORD *)a7 + 2);
              v15[1] = *((_OWORD *)a7 + 1);
              v15[2] = v77;
              *v15 = v76;
              a7 += 48;
            }
            v15 += 3;
            if (a7 == v73)
              return result;
          }
          return (uint64_t)memmove(v15, a7, v73 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      v60 = 0;
      do
      {
        v61 = &a7[v60 * 16];
        v62 = a2[v60];
        v63 = a2[v60 + 2];
        *((_OWORD *)v61 + 1) = a2[v60 + 1];
        *((_OWORD *)v61 + 2) = v63;
        *(_OWORD *)v61 = v62;
        v60 += 3;
      }
      while (&a2[v60] != a3);
      v64 = &a7[v60 * 16];
      if (&a7[v60 * 16] != a7)
      {
        v65 = a3 - 3;
        while (a2 != v15)
        {
          result = (*a4)(v64 - 48, a2 - 3);
          if ((_DWORD)result)
            v66 = (char *)(a2 - 3);
          else
            v66 = v64 - 48;
          if ((_DWORD)result)
            a2 -= 3;
          else
            v64 -= 48;
          v68 = *((_OWORD *)v66 + 1);
          v67 = *((_OWORD *)v66 + 2);
          *v65 = *(_OWORD *)v66;
          v65[1] = v68;
          v65[2] = v67;
          v65 -= 3;
          if (v64 == a7)
            return result;
        }
        v80 = 0;
        do
        {
          v81 = &v65[v80 / 0x10];
          v82 = *(_OWORD *)&v64[v80 - 48];
          v83 = *(_OWORD *)&v64[v80 - 16];
          v81[1] = *(_OWORD *)&v64[v80 - 32];
          v81[2] = v83;
          *v81 = v82;
          v80 -= 48;
        }
        while (&v64[v80] != a7);
      }
    }
  }
  return result;
}

BOOL sub_1B67E8C90(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24);
}

BOOL sub_1B67E8CA4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) > *(_DWORD *)(a2 + 28);
}

_QWORD *sub_1B67E8CB8(_QWORD *a1)
{
  void **v2;
  void **v3;
  NSObject *v4;
  void *v5;

  v2 = (void **)(a1 + 9826);
  v3 = (void **)(a1 + 9769);
  v4 = a1[9828];
  if (v4)
    dispatch_release(v4);
  if (*v2)
  {
    free(*v2);
    *v2 = 0;
    v2[1] = 0;
  }
  v5 = v3[11];
  if (v5)
  {
    free(v5);
    v3[11] = 0;
    v3[12] = 0;
  }
  if (*v3)
  {
    free(*v3);
    *v3 = 0;
    v3[1] = 0;
  }
  return sub_1B67C7524(a1);
}

uint64_t sub_1B67E8D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v1 = 0;
  v2 = *(int *)(a1 + 4);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 1368);
    if (v2 <= (*(_DWORD *)(v3 + 2020) * *(_DWORD *)(v3 + 2016) - 1))
    {
      if (*(_BYTE *)(a1 + 8))
        return 1;
      if (!*(_BYTE *)(v3 + 174) || *(unsigned __int8 *)(a1 + 12) <= 2u)
      {
        v1 = *(unsigned __int8 *)(a1 + 600);
        if (!*(_BYTE *)(a1 + 600))
        {
          v5 = *(_DWORD *)(a1 + 16);
          if (v5 < 0)
            return v1;
          if (v5 >= *(_DWORD *)(v3 + 2004))
            return v1;
          if (*(_BYTE *)(a1 + 20))
          {
            v1 = 0;
            v6 = *(int *)(a1 + 272);
            if ((v6 & 0x80000000) != 0 || v6 > (*(_DWORD *)(v3 + 260) - 1))
              return v1;
          }
        }
        if (*(unsigned __int8 *)(a1 + 10) > 1u
          || (!*(_BYTE *)(a1 + 498)
           || (!*(_BYTE *)(a1 + 538) ? (v4 = *(char *)(a1 + 501)) : (v4 = *(char *)(a1 + 500)),
               v4 > *(unsigned __int8 *)(a1 + 539)))
          && *(unsigned __int8 *)(a1 + 542) <= 4u)
        {
          v7 = *(char **)(a1 + 1384);
          v8 = v7[9] + (uint64_t)*(char *)(a1 + 543) + 26;
          v9 = -(uint64_t)*(unsigned __int8 *)(v3 + 2001);
          v10 = v8 > 51 || v8 < v9;
          if (!v10
            && (!v7[16]
             || (unint64_t)(v7[14] + (uint64_t)*(char *)(a1 + 544) + 12) <= 0x18
             && (unint64_t)(v7[15] + (uint64_t)*(char *)(a1 + 545) + 12) <= 0x18)
            && (!v7[29]
             || (*(_BYTE *)(a1 + 548) + 6) <= 0xCu
             && (*(_BYTE *)(a1 + 549) + 6) <= 0xCu))
          {
            return 1;
          }
        }
      }
      return 0;
    }
  }
  return v1;
}

uint64_t sub_1B67E8E9C(BOOL *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int v11;
  unint64_t v12;
  char v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = (uint64_t)(a1 + 3488);
  *a1 = sub_1B67C9094((uint64_t)(a1 + 3488), 1) != 0;
  v7 = a1[601];
  if (v7)
    v7 = sub_1B67C9094(v6, 1) != 0;
  a1[1] = v7;
  v8 = sub_1B67C9140(v6);
  a1[2] = v8;
  v9 = v8;
  if (v8 > 0x3Fu)
    return 4294954387;
  *(_BYTE *)(a2 + 352) = v8;
  if (!a3)
    return 0;
  if (*a1)
  {
    *(_DWORD *)(a2 + 344) = 0;
  }
  else
  {
    v12 = *(unsigned __int8 *)(a2 + v8 + 150);
    if (v12 > 0xF)
      return 4294954387;
    v13 = *(_BYTE *)(a2 + v12 + 132);
    if ((v13 - 7) < 0xFDu)
      return 4294954387;
    if (*(_BYTE *)(a2 + v8 + 214))
    {
      v14 = sub_1B67C9094(v6, 1) == 0;
      v13 = *(_BYTE *)(a2 + v12 + 132);
    }
    else
    {
      v14 = 1;
    }
    v15 = ((*(_DWORD *)(a2 + 4 * v12 + 4) + ~(-1 << v13)) >> v13)
        * ((*(_DWORD *)(a2 + 4 * v12 + 68) + ~(-1 << v13)) >> v13);
    v16 = 31 - __clz(v15);
    if (!v15)
      v16 = 0;
    if ((v15 & (v15 - 1)) != 0)
      v17 = v16 + 1;
    else
      v17 = v16;
    *(_DWORD *)(a2 + 344) = sub_1B67C90EC(v6, v17);
    if (!v14)
      return 4294954386;
  }
  if (*(_BYTE *)(a2 + v9 + 278))
    sub_1B67C9094(v6, *(unsigned __int8 *)(a2 + v9 + 278));
  v11 = sub_1B67C9140(v6);
  *(_DWORD *)(a2 + 348) = v11;
  if (v11 <= 2)
    return 0;
  else
    return 4294954387;
}

uint64_t sub_1B67E9030(BOOL *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  NSObject *v57;
  const char *v58;
  unsigned __int16 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v76;
  unsigned int v77;
  unsigned __int16 *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned __int16 *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned __int16 *v108;
  int v109;
  BOOL v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned __int8 v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned __int8 v134;
  int v135;
  int32x2_t v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned __int8 *v143;
  int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  int32x4_t v151;
  int32x4_t v152;
  uint32x4_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  uint32x4_t v158;
  BOOL v159;
  unsigned int v160;
  int v161;
  int v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  int v166;
  uint64_t v167;
  int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  _BOOL4 v179;
  unsigned __int8 v180;
  int v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned int v187;
  uint64_t v188;
  __int128 v189;

  v8 = (uint64_t)(a1 + 3488);
  v9 = sub_1B67C9094((uint64_t)(a1 + 3488), 1);
  if (v9)
  {
    *(_WORD *)(a1 + 1) = 0;
    *((_DWORD *)a1 + 1) = 0;
    a1[8] = 0;
    *((_WORD *)a1 + 5) = 258;
    a1[12] = 0;
    *((_DWORD *)a1 + 4) = 0;
    a1[20] = 0;
    *((_DWORD *)a1 + 68) = 0;
    *((_OWORD *)a1 + 31) = 0u;
    *((_OWORD *)a1 + 32) = 0u;
    *((_OWORD *)a1 + 33) = 0u;
    *(_QWORD *)(a1 + 542) = 0;
    a1[550] = 1;
    *((_DWORD *)a1 + 138) = 0;
    a1[556] = 0;
    *((_WORD *)a1 + 288) = 0;
  }
  *a1 = v9 != 0;
  v10 = a1[601];
  if (v10)
    v10 = sub_1B67C9094(v8, 1) != 0;
  a1[1] = v10;
  v11 = sub_1B67C9140(v8);
  a1[2] = v11;
  if (!a4 && *a1 != a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294954387;
    LOWORD(v189) = 0;
    v57 = MEMORY[0x1E0C81028];
    v58 = "first_slice_in_pic_flag mismatch\n";
LABEL_71:
    _os_log_error_impl(&dword_1B676B000, v57, OS_LOG_TYPE_ERROR, v58, (uint8_t *)&v189, 2u);
    return 4294954387;
  }
  if (!a4 && !*a1)
  {
    v14 = (unsigned __int8 *)*((_QWORD *)a1 + 173);
    if (!v14 || (v15 = *((_QWORD *)a1 + 171)) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v189) = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Missing SPS or PPS for secondary slice\n", (uint8_t *)&v189, 2u);
      }
      return 4294954385;
    }
    if (*v14 != v11 || *(unsigned __int8 *)(v15 + 172) != v14[1])
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294954387;
      LOWORD(v189) = 0;
      v57 = MEMORY[0x1E0C81028];
      v58 = "Secondary slice points to different SPS/PPS\n";
      goto LABEL_71;
    }
    goto LABEL_16;
  }
  v25 = (uint64_t *)(a2 + 16 * v11 + 512);
  if ((v11 & 0xC0) != 0)
    v25 = (uint64_t *)(a2 + 1568);
  sub_1B67B665C((_QWORD *)a1 + 173, *v25, v25[1]);
  v26 = *((_QWORD *)a1 + 173);
  if (!v26)
    return 4294954387;
  v27 = *(_QWORD *)(v26 + 1712);
  v28 = *(unsigned __int8 *)(v26 + 1);
  v29 = v27 + 1552;
  v30 = v27 + 16 * v28 + 256;
  v31 = (unsigned __int8 **)(v28 <= 0xF ? v30 : v29);
  v32 = *v31;
  if (!*v31)
    return 4294954387;
  v33 = *((_QWORD *)v32 + 259);
  v34 = *v32;
  v35 = (uint64_t *)(v33 + 1536);
  v36 = (uint64_t *)(v33 + 16 * v34);
  if (v34 <= 0xF)
    v37 = v36;
  else
    v37 = v35;
  v38 = *v37;
  v39 = (std::__shared_weak_count *)v37[1];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
  }
  if (v38)
  {
    v42 = v32[1];
    v43 = v42 + 1;
    v44 = (unsigned __int8 *)(v38 + 172);
    v45 = v32 + 198;
    do
    {
      v47 = *v45++;
      v46 = v47;
      v48 = *v44++;
      if (v46 > v48)
        goto LABEL_146;
      --v43;
    }
    while (v43);
    if (*(_BYTE *)(v38 + 240) && !v32[1920])
    {
      *(_QWORD *)(v32 + 1924) = *(_QWORD *)(v38 + 244);
      v32[1932] = *(_BYTE *)(v38 + 252);
    }
    v49 = 0;
    v12 = 4294954387;
    if (v42 > 6 || v42 > *(unsigned __int8 *)(v38 + 169))
      goto LABEL_147;
    v50 = v32[173];
    if (v50 > 3)
      goto LABEL_64;
    v49 = 0;
    v51 = *((_DWORD *)v32 + 44);
    if (v51 < 1)
      goto LABEL_147;
    v52 = v32[156] - 1;
    v53 = v32[163];
    v54 = word_1B69220CC[3 * v52 + v53];
    if (v51 > v54)
      goto LABEL_147;
    v49 = 0;
    v55 = *((_DWORD *)v32 + 45);
    if (v55 < 1 || v55 > v54)
      goto LABEL_147;
    if ((v55 * v51) > dword_1B6922084[3 * v52 + v53]
      || (v56 = v32[2008], ((v51 | v55) & ~(-1 << v56)) != 0)
      || v32[184]
      && (*((unsigned __int16 *)v32 + 93) > (uint64_t)(v51 / byte_1B692BFF0[2 * v50] + ~*((unsigned __int16 *)v32 + 94))
       || *((unsigned __int16 *)v32 + 95) > (uint64_t)(v55 / byte_1B692BFF0[2 * v50 + 1]
                                                    + ~*((unsigned __int16 *)v32 + 96)))
      || v32[194] > 6u
      || v32[195] > 6u
      || (v65 = v32[196], v65 > 0xC))
    {
LABEL_64:
      v49 = 0;
      goto LABEL_147;
    }
    v66 = 0;
    v67 = v42 + 1;
    v68 = v32 + 198;
    while (1)
    {
      v69 = v68[v66 + 7];
      v70 = v68[v66];
      if (v69 > v70)
        break;
      v71 = *(_DWORD *)&v32[4 * v66 + 212];
      if (v71 > 0xFFFFFFFD)
        break;
      if (v66)
      {
        v72 = &v32[(v66 - 1)];
        v73 = v72[198];
        v74 = v72[205];
      }
      else
      {
        v73 = 0;
        v74 = 0;
      }
      if (v70 < v73 || v70 > *(unsigned __int8 *)(v38 + v66 + 172))
        break;
      v49 = 0;
      if (v69 < v74 || v69 > *(unsigned __int8 *)(v38 + v66 + 179))
        goto LABEL_147;
      if (*(_DWORD *)(v38 + 188 + 4 * v66) - 1 < v71 - 1)
        break;
      if (v67 == ++v66)
      {
        if (v32[280])
        {
          v76 = *((unsigned int *)v32 + 71);
          if ((_DWORD)v76)
          {
            v77 = v65 + 4;
            v78 = (unsigned __int16 *)(v32 + 288);
            do
            {
              v79 = *v78++;
              if (v77 < v79)
                goto LABEL_146;
            }
            while (--v76);
          }
        }
        if (v56 - 3 > 3)
          break;
        v80 = v32[2009];
        if ((v80 - 3) > 3u)
          break;
        v49 = 0;
        v81 = v32[2011];
        if (v80 >= 5)
          v80 = 5;
        v12 = 4294954387;
        if (v81 <= v80 && v81 >= 2)
        {
          v49 = 0;
          v82 = v32[2010];
          if (v82 <= v81 && v82 >= 2)
          {
            if (v32[250])
            {
              if (v56 >= 5)
                v56 = 5;
              if (v32[251] >= v32[2000] || v32[252] >= v32[2002])
                goto LABEL_64;
              v49 = 0;
              v83 = v32[258];
              if (v83 > v80)
                goto LABEL_147;
              if (v56 > v83)
                goto LABEL_147;
              v49 = 0;
              v84 = v32[259];
              if (v84 > v80 || v56 > v84)
                goto LABEL_147;
            }
            if (!v32[327] && !v32[328] && !v32[329] && !v32[330] && !v32[331] && !v32[332] && !v32[333] && !v32[334])
            {
              v85 = v32[335];
              v49 = v85 == 0;
              if (v85)
                v12 = 4294954387;
              else
                v12 = 0;
              goto LABEL_147;
            }
            goto LABEL_64;
          }
        }
        goto LABEL_147;
      }
    }
  }
LABEL_146:
  v49 = 0;
  v12 = 4294954387;
LABEL_147:
  if (v39)
  {
    v86 = (unint64_t *)&v39->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v49)
  {
    v88 = *v31;
    v89 = *((_DWORD *)*v31 + 504);
    *(_DWORD *)(v26 + 1688) = v89;
    v90 = *((_DWORD *)v88 + 505);
    *(_DWORD *)(v26 + 1692) = v90;
    if (*(_BYTE *)(v26 + 1696))
    {
      if (*(_BYTE *)(v26 + 26))
      {
        LODWORD(v91) = *(unsigned __int16 *)(v26 + 22);
        if (*(_WORD *)(v26 + 22))
        {
          v92 = 0;
          v93 = 0;
          v94 = *(_QWORD *)(v26 + 1624);
          do
          {
            v95 = v91 + 1;
            v96 = v92 / v95;
            v92 += v89;
            *(_WORD *)(v94 + 2 * v93) = ~(_WORD)v96 + v92 / v95;
            v91 = *(unsigned __int16 *)(v26 + 22);
            ++v93;
          }
          while (v93 < v91);
        }
        LODWORD(v97) = *(unsigned __int16 *)(v26 + 24);
        if (*(_WORD *)(v26 + 24))
        {
          v98 = 0;
          v99 = 0;
          v100 = *(_QWORD *)(v26 + 1640);
          do
          {
            v101 = v97 + 1;
            v102 = v98 / v101;
            v98 += v90;
            *(_WORD *)(v100 + 2 * v99) = ~(_WORD)v102 + v98 / v101;
            v97 = *(unsigned __int16 *)(v26 + 24);
            ++v99;
          }
          while (v99 < v97);
        }
      }
      if (*(_WORD *)(v26 + 22))
      {
        v103 = *(unsigned __int16 **)(v26 + 1624);
        v104 = *(unsigned __int16 *)(v26 + 22);
        v105 = v89;
        do
        {
          v106 = *v103++;
          v105 += ~v106;
          --v104;
        }
        while (v104);
      }
      else
      {
        v105 = v89;
      }
      v107 = *(unsigned __int16 *)(v26 + 24);
      if (*(_WORD *)(v26 + 24))
      {
        v108 = *(unsigned __int16 **)(v26 + 1640);
        do
        {
          v109 = *v108++;
          v90 += ~v109;
          --v107;
        }
        while (v107);
      }
      v12 = 4294954387;
      v110 = __OFSUB__(v105, 1);
      v111 = v105 - 1;
      if (v111 < 0 != v110)
        return v12;
      v110 = __OFSUB__(v90, 1);
      v112 = v90 - 1;
      if (v112 < 0 != v110)
        return v12;
      *(_WORD *)(*(_QWORD *)(v26 + 1624) + 2 * *(unsigned __int16 *)(v26 + 22)) = v111;
      *(_WORD *)(*(_QWORD *)(v26 + 1640) + 2 * *(unsigned __int16 *)(v26 + 24)) = v112;
      v12 = sub_1B67C8D4C((void **)(v26 + 1656), v89);
      if ((_DWORD)v12)
        return v12;
      v12 = sub_1B67C8D4C((void **)(v26 + 1672), *(int *)(v26 + 1692));
      if ((_DWORD)v12)
        return v12;
      v12 = sub_1B67C8E04(*(_DWORD *)(v26 + 1688), *(unsigned __int16 *)(v26 + 22) + 1, *(_QWORD *)(v26 + 1624), *(_QWORD *)(v26 + 1656));
      if ((_DWORD)v12)
        return v12;
      v12 = sub_1B67C8E04(*(_DWORD *)(v26 + 1692), *(unsigned __int16 *)(v26 + 24) + 1, *(_QWORD *)(v26 + 1640), *(_QWORD *)(v26 + 1672));
      if ((_DWORD)v12)
        return v12;
      v88 = *v31;
    }
    if (!*(_BYTE *)(v26 + 34))
    {
      memcpy((void *)(v26 + 35), v88 + 336, 0x618uLL);
      v88 = *v31;
    }
    v113 = v88[2009];
    v114 = *(unsigned __int8 *)(v26 + 13);
    *(_DWORD *)(v26 + 1620) = v113 - v114;
    v115 = *(_QWORD *)(v26 + 1712);
    v116 = *(unsigned __int8 *)(v26 + 1);
    v117 = (uint64_t *)(v115 + 1552);
    v118 = (uint64_t *)(v115 + 16 * v116 + 256);
    if (v116 > 0xF)
      v118 = v117;
    v119 = *v118;
    if (!v119)
      goto LABEL_208;
    if (*(unsigned __int8 *)(v26 + 7) > 0xEu || *(unsigned __int8 *)(v26 + 8) > 0xEu)
      return 4294954387;
    v120 = *(char *)(v26 + 9);
    v12 = 4294954387;
    if (v120 <= 25 && -26 - *(unsigned __int8 *)(v119 + 2001) <= v120)
    {
      v121 = *(unsigned __int8 *)(v119 + 241);
      if (v114 <= v121
        && (*(_BYTE *)(v26 + 14) + 12) <= 0x18u
        && (*(_BYTE *)(v26 + 15) + 12) <= 0x18u
        && (!*(_BYTE *)(v26 + 20)
         || *(_DWORD *)(v119 + 2016) - 1 >= *(unsigned __int16 *)(v26 + 22)
         && *(_DWORD *)(v119 + 2020) - 1 >= *(unsigned __int16 *)(v26 + 24))
        && (!*(_BYTE *)(v26 + 29)
         || *(_BYTE *)(v26 + 31)
         || (*(_BYTE *)(v26 + 32) + 6) <= 0xCu && (*(_BYTE *)(v26 + 33) + 6) <= 0xCu)
        && *(unsigned __int8 *)(v119 + 2009) - 2 >= *(unsigned __int16 *)(v26 + 1596)
        && (!*(_BYTE *)(v26 + 20) || !*(_BYTE *)(v26 + 21)))
      {
        if (!*(_BYTE *)(v26 + 1600))
          goto LABEL_208;
        if (*(unsigned __int8 *)(v119 + 2011) - 2 >= *(unsigned __int8 *)(v26 + 1601)
          && *(unsigned __int8 *)(v26 + 1604) <= v121)
        {
          v122 = *(unsigned __int8 *)(v119 + 2000);
          if (v122 <= 0xA)
            v122 = 10;
          if (v122 - 10 >= *(unsigned __int8 *)(v26 + 1618))
          {
            v123 = *(unsigned __int8 *)(v119 + 2002);
            if (v123 <= 10)
              v123 = 10;
            if (!*(_BYTE *)(v26 + 1601)
              && v123 - 10 >= *(unsigned __int8 *)(v26 + 1619)
              && !*(_BYTE *)(v26 + 1602)
              && !*(_BYTE *)(v26 + 1603))
            {
LABEL_208:
              v124 = *(unsigned __int8 *)(*((_QWORD *)a1 + 173) + 1);
              if (v124 <= 0xF)
                v125 = (uint64_t *)(a2 + 16 * v124 + 256);
              else
                v125 = (uint64_t *)(a2 + 1552);
              sub_1B67B665C((_QWORD *)a1 + 171, *v125, v125[1]);
              v15 = *((_QWORD *)a1 + 171);
              if (!v15)
                return 4294954387;
              if (*a1)
              {
                v20 = 0;
                a1[8] = 0;
                *((_DWORD *)a1 + 1) = 0;
                goto LABEL_214;
              }
              v14 = (unsigned __int8 *)*((_QWORD *)a1 + 173);
LABEL_16:
              v16 = v14[2];
              if (v16)
              {
                LOBYTE(v16) = sub_1B67C9094(v8, 1) != 0;
                v15 = *((_QWORD *)a1 + 171);
              }
              a1[8] = v16;
              v17 = *(_DWORD *)(v15 + 2020) * *(_DWORD *)(v15 + 2016);
              v18 = 31 - __clz(v17);
              if (!v17)
                v18 = 0;
              if ((v17 & (v17 - 1)) != 0)
                v19 = v18 + 1;
              else
                v19 = v18;
              v20 = sub_1B67C90EC(v8, v19);
              *((_DWORD *)a1 + 1) = v20;
              if (a1[8])
                goto LABEL_24;
LABEL_214:
              *((_DWORD *)a1 + 154) = v20;
              a1[1197] = 0;
              v126 = *((_QWORD *)a1 + 173);
              if (*(_BYTE *)(v126 + 4))
                a1[9] = sub_1B67C9094(v8, *(unsigned __int8 *)(v126 + 4));
              v127 = sub_1B67C9140(v8);
              a1[10] = v127;
              if (v127 > 2u)
                return 4294954387;
              if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 3))
                v128 = sub_1B67C9094(v8, 1) != 0;
              else
                v128 = 1;
              a1[11] = v128;
              if (*(_BYTE *)(*((_QWORD *)a1 + 171) + 174))
                a1[12] = sub_1B67C9094(v8, 2);
              if (a1[600])
              {
                if (a1[10] != 2)
                {
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    return 4294954387;
                  LOWORD(v189) = 0;
                  v57 = MEMORY[0x1E0C81028];
                  v58 = "IDR nalu must have only I slices\n";
                  goto LABEL_71;
                }
              }
              else
              {
                *((_DWORD *)a1 + 4) = sub_1B67C9094(v8, *(unsigned __int8 *)(*((_QWORD *)a1 + 171) + 196) + 4);
                v129 = sub_1B67C9094(v8, 1);
                a1[20] = v129 != 0;
                if (v129)
                {
                  v130 = *((_QWORD *)a1 + 171);
                  v131 = *(_DWORD *)(v130 + 260);
                  v132 = 31 - __clz(v131);
                  if (!v131)
                    v132 = 0;
                  if ((v131 & (v131 - 1)) != 0)
                    ++v132;
                  if (v132)
                  {
                    v133 = sub_1B67C9094(v8, v132);
                    v130 = *((_QWORD *)a1 + 171);
                    v131 = *(_DWORD *)(v130 + 260);
                  }
                  else
                  {
                    v133 = 0;
                  }
                  *((_DWORD *)a1 + 68) = v133;
                  if (v133 >= v131)
                    return 4294954387;
                }
                else
                {
                  v12 = sub_1B688EE54((uint64_t)(a1 + 24), v8, *((_QWORD *)a1 + 171), *(_DWORD *)(*((_QWORD *)a1 + 171) + 260));
                  if ((_DWORD)v12)
                    return v12;
                  v130 = *((_QWORD *)a1 + 171);
                }
                if (*(_BYTE *)(v130 + 280))
                {
                  v12 = sub_1B689018C((unsigned int *)a1 + 69, v130, (uint64_t)(a1 + 24), v8);
                  if ((_DWORD)v12)
                    return v12;
                  v130 = *((_QWORD *)a1 + 171);
                }
                v134 = *(_BYTE *)(v130 + 322);
                if (v134)
                  v134 = sub_1B67C9094(v8, 1) != 0;
                a1[498] = v134;
              }
              *((_WORD *)a1 + 248) = 0;
              if (*(_BYTE *)(*((_QWORD *)a1 + 171) + 249))
              {
                a1[496] = sub_1B67C9094(v8, 1) != 0;
                if (*(_BYTE *)(*((_QWORD *)a1 + 171) + 173))
                  a1[497] = sub_1B67C9094(v8, 1) != 0;
              }
              *((_WORD *)a1 + 250) = 0;
              if (a1[10] > 1u)
                goto LABEL_300;
              v135 = sub_1B67C9094(v8, 1);
              a1[499] = v135 != 0;
              if (v135)
              {
                v137 = sub_1B67C9140(v8);
                a1[500] = v137 + 1;
                if (v137 > 0xEu)
                  return 4294954387;
                if (!a1[10])
                {
                  v138 = sub_1B67C9140(v8);
                  a1[501] = v138 + 1;
                  if (v138 >= 0xFu)
                    return 4294954387;
                }
              }
              else
              {
                v139 = *((_QWORD *)a1 + 173);
                a1[500] = *(_BYTE *)(v139 + 7) + 1;
                if (!a1[10])
                  a1[501] = *(_BYTE *)(v139 + 8) + 1;
              }
              if (a1[20])
                v140 = *(_QWORD *)(*((_QWORD *)a1 + 171) + 264) + 248 * *((int *)a1 + 68);
              else
                v140 = (uint64_t)(a1 + 24);
              v141 = *(unsigned __int8 *)(v140 + 160);
              if (*(_BYTE *)(v140 + 160))
              {
                v142 = 0;
                v143 = (unsigned __int8 *)(v140 + 2);
                do
                {
                  v144 = *v143;
                  v143 += 4;
                  v142 += v144;
                  --v141;
                }
                while (v141);
              }
              else
              {
                v142 = 0;
              }
              v145 = *(unsigned __int8 *)(v140 + 161);
              if (*(_BYTE *)(v140 + 161))
              {
                v146 = (unsigned __int8 *)(v140 + 66);
                do
                {
                  v147 = *v146;
                  v146 += 4;
                  v142 += v147;
                  --v145;
                }
                while (v145);
              }
              v148 = *((_DWORD *)a1 + 70) + *((_DWORD *)a1 + 69);
              v149 = v148 - 1;
              if (v148 >= 1)
              {
                v150 = (v148 + 3) & 0xFFFFFFFC;
                v136.i32[0] = v149;
                v151 = (int32x4_t)v142;
                v152 = (int32x4_t)xmmword_1B6917630;
                v153 = (uint32x4_t)vdupq_n_s32(*((unsigned __int16 *)a1 + 246));
                v154.i64[0] = 0xFF000000FFLL;
                v154.i64[1] = 0xFF000000FFLL;
                v155.i64[0] = 0x100000001;
                v155.i64[1] = 0x100000001;
                v156.i64[0] = 0x400000004;
                v156.i64[1] = 0x400000004;
                do
                {
                  v157 = (int8x16_t)v151;
                  v158 = (uint32x4_t)v152;
                  v151 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v153, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)v152, v154))), v155), v151);
                  v152 = vaddq_s32(v152, v156);
                  v150 -= 4;
                }
                while (v150);
                v142 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v158, (uint32x4_t)vdupq_lane_s32(v136, 0)), v157, (int8x16_t)v151));
              }
              if (v142 > *(unsigned __int8 *)(*((_QWORD *)a1 + 171)
                                             + *(unsigned __int8 *)(*((_QWORD *)a1 + 171) + 1)
                                             + 198))
                return 4294954387;
              if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 1595))
                v159 = v142 >= 2;
              else
                v159 = 0;
              if (v159)
              {
                v160 = __clz(v142) ^ 0x1F;
                if ((v142 & (v142 - 1)) != 0)
                  v161 = v160 + 1;
                else
                  v161 = v160;
                v162 = sub_1B67C9094(v8, 1);
                a1[502] = v162 != 0;
                if (v162 && a1[500] >= 1)
                {
                  v163 = 0;
                  do
                  {
                    v164 = sub_1B67C9094(v8, v161);
                    a1[v163 + 503] = v164;
                    if (v142 <= v164)
                      return 4294954387;
                  }
                  while (++v163 < a1[500]);
                }
                if (a1[10])
                {
                  a1[519] = 0;
                  goto LABEL_288;
                }
                v183 = sub_1B67C9094(v8, 1);
                a1[519] = v183 != 0;
                if (v183 && a1[501] >= 1)
                {
                  v184 = 0;
                  do
                  {
                    v185 = sub_1B67C9094(v8, v161);
                    a1[v184 + 520] = v185;
                    if (v142 <= v185)
                      return 4294954387;
                  }
                  while (++v184 < a1[501]);
                }
              }
              else
              {
                a1[502] = 0;
                a1[519] = 0;
              }
              if (!a1[10])
                a1[536] = sub_1B67C9094(v8, 1) != 0;
LABEL_288:
              v165 = *(_BYTE *)(*((_QWORD *)a1 + 173) + 6);
              if (v165)
                v165 = sub_1B67C9094(v8, 1) != 0;
              a1[537] = v165;
              *((_WORD *)a1 + 269) = 1;
              if (a1[498])
              {
                if (a1[10] || (v166 = sub_1B67C9094(v8, 1), a1[538] = v166 != 0, v166))
                {
                  if (a1[500] <= 1)
                    goto LABEL_295;
                  goto LABEL_294;
                }
                if (a1[501] >= 2)
LABEL_294:
                  a1[539] = sub_1B67C9140(v8);
              }
LABEL_295:
              v167 = *((_QWORD *)a1 + 173);
              if (*(_BYTE *)(v167 + 17) && a1[10] || *(_BYTE *)(v167 + 18) && !a1[10])
              {
                v180 = sub_1B67C9140(v8);
                a1[540] = v180;
                if ((v180 & 0xF8) != 0)
                  return 4294954387;
                if (*(_BYTE *)(*((_QWORD *)a1 + 171) + 173))
                {
                  v181 = sub_1B67C9140(v8);
                  v182 = (-((v181 + 1) & 1) ^ ((v181 + 1) >> 1)) + ((v181 + 1) & 1);
                  a1[541] = (-((v181 + 1) & 1) ^ ((v181 + 1) >> 1)) + ((v181 + 1) & 1);
                  v180 = a1[540];
                }
                else
                {
                  LOBYTE(v182) = a1[541];
                }
                v186 = v182 + v180;
                v187 = (v182 + v180);
                a1[630] = v186;
                if (v187 > 7)
                  return 4294954387;
                v188 = *((_QWORD *)a1 + 171);
                *((_DWORD *)a1 + 158) = v180 - *(unsigned __int8 *)(v188 + 2000) + 14;
                *((_DWORD *)a1 + 159) = v187 - *(unsigned __int8 *)(v188 + 2002) + 14;
                v12 = sub_1B67EA4A4((uint64_t)a1, a1[500], (uint64_t)(a1 + 736), (uint64_t)(a1 + 640));
                if ((_DWORD)v12)
                  return v12;
                if (!a1[10])
                {
                  v12 = sub_1B67EA4A4((uint64_t)a1, a1[501], (uint64_t)(a1 + 928), (uint64_t)(a1 + 832));
                  if ((_DWORD)v12)
                    return v12;
                }
              }
              a1[542] = sub_1B67C9140(v8);
LABEL_300:
              v168 = sub_1B67C9140(v8);
              a1[543] = (-((v168 + 1) & 1) ^ ((v168 + 1) >> 1)) + ((v168 + 1) & 1);
              v169 = a1[548];
              v170 = a1[549];
              v171 = *((_QWORD *)a1 + 173);
              LOBYTE(v172) = *(_BYTE *)(v171 + 16);
              if ((_BYTE)v172)
              {
                v173 = sub_1B67C9140(v8);
                a1[544] = (-((v173 + 1) & 1) ^ ((v173 + 1) >> 1)) + ((v173 + 1) & 1);
                v174 = sub_1B67C9140(v8);
                v172 = (-((v174 + 1) & 1) ^ ((v174 + 1) >> 1)) + ((v174 + 1) & 1);
                v171 = *((_QWORD *)a1 + 173);
              }
              else
              {
                a1[544] = 0;
              }
              a1[545] = v172;
              if (!*(_BYTE *)(v171 + 29))
                goto LABEL_312;
              if (*(_BYTE *)(v171 + 30))
              {
                v175 = sub_1B67C9094(v8, 1);
                a1[546] = v175 != 0;
                if (v175)
                {
                  v176 = sub_1B67C9094(v8, 1);
                  a1[547] = v176 != 0;
                  if (v176)
                  {
LABEL_312:
                    v179 = v169 != a1[548] || v170 != a1[549];
                    if (!*a1 && v179)
                      *((_QWORD *)a1 + 421) = sub_1B67EFF8C;
                    a1[550] = *(_BYTE *)(*((_QWORD *)a1 + 173) + 28)
                           && (a1[496] || a1[497] || !a1[547])
                           && sub_1B67C9094(v8, 1) != 0;
LABEL_24:
                    v21 = *((_QWORD *)a1 + 173);
                    if (*(_BYTE *)(v21 + 20) || *(_BYTE *)(v21 + 21))
                    {
                      v22 = sub_1B67C9140(v8);
                      *((_DWORD *)a1 + 138) = v22;
                      if (v22)
                      {
                        if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 21)
                          && v22 > *(_DWORD *)(*((_QWORD *)a1 + 171) + 2020))
                        {
                          return 4294954387;
                        }
                        v23 = sub_1B67C9140(v8);
                        a1[556] = v23;
                        if ((v23 & 0xE0) != 0)
                          return 4294954387;
                        v12 = sub_1B67E7FE0((void **)a1 + 70, *((unsigned int *)a1 + 138));
                        if ((_DWORD)v12)
                          return v12;
                        if (*((_DWORD *)a1 + 138))
                        {
                          v24 = 0;
                          do
                            *(_DWORD *)(*((_QWORD *)a1 + 70) + 4 * v24++) = sub_1B67C90EC(v8, a1[556] + 1);
                          while (v24 < *((unsigned int *)a1 + 138));
                        }
                      }
                    }
                    else
                    {
                      *((_DWORD *)a1 + 138) = 0;
                    }
                    if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 1598))
                    {
                      v59 = sub_1B67C9140(v8);
                      *((_WORD *)a1 + 288) = v59;
                      if (v59 > 0x100u)
                        return 4294954387;
                      v12 = sub_1B67C2364((void **)a1 + 73, v59, 0x10uLL);
                      if ((_DWORD)v12)
                        return v12;
                      if (*((_WORD *)a1 + 288))
                      {
                        v60 = 0;
                        do
                          *(_BYTE *)(*((_QWORD *)a1 + 73) + v60++) = sub_1B67C9094(v8, 8);
                        while (v60 < *((unsigned __int16 *)a1 + 288));
                      }
                    }
                    v61 = *((_QWORD *)a1 + 439) + 1;
                    *((_QWORD *)a1 + 439) = v61;
                    *((_DWORD *)a1 + 883) = 0;
                    v62 = *((_QWORD *)a1 + 440);
                    if (v61 > v62)
                      *((_QWORD *)a1 + 439) = v62;
                    if (!sub_1B67E8D30((uint64_t)a1))
                      return 4294954387;
                    a1[620] = 5 - a1[542];
                    *((_DWORD *)a1 + 19651) = *((_DWORD *)a1 + 138) + 1;
                    v63 = *((_QWORD *)a1 + 9824);
                    if (v63)
                      LOBYTE(v63) = *(_BYTE *)(v63 + 87);
                    a1[78600] = v63;
                    a1[628] = 2 * a1[548];
                    a1[629] = 2 * a1[549];
                    sub_1B67C8710((uint64_t)a1);
                    if (*a1)
                    {
                      sub_1B67D02B8((_QWORD *)a1 + 178, *(unsigned __int8 *)(*((_QWORD *)a1 + 171) + 2000), *(unsigned __int8 *)(*((_QWORD *)a1 + 171) + 323), *(unsigned __int8 *)(*((_QWORD *)a1 + 173) + 10));
                      sub_1B67CF370((uint64_t)(a1 + 1840), *(unsigned __int8 *)(*((_QWORD *)a1 + 171) + 2000));
                      sub_1B67D59F4((_QWORD *)a1 + 263, *(unsigned __int8 *)(*((_QWORD *)a1 + 171) + 2000));
                      sub_1B67F067C((_QWORD *)a1 + 415, (uint64_t)a1, 0);
                      *((_WORD *)a1 + 1728) = 0;
                      *((_QWORD *)a1 + 434) = *((_QWORD *)a1 + 433);
                    }
                    v64 = *((_DWORD *)a1 + 1);
                    LODWORD(v189) = *((_DWORD *)a1 + 154);
                    DWORD1(v189) = v64;
                    DWORD2(v189) = *((_DWORD *)a1 + 138);
                    WORD6(v189) = *((_WORD *)a1 + 314);
                    sub_1B67EA764((char **)a1 + 433, &v189);
                    if (a1[496] || a1[497])
                      a1[3456] = 1;
                    if (!a1[547])
                      a1[3457] = 1;
                    v12 = 0;
                    if (a4)
                    {
                      *(_BYTE *)(a4 + 352) = a1[2];
                      *(_DWORD *)(a4 + 344) = *((_DWORD *)a1 + 1);
                      *(_DWORD *)(a4 + 348) = a1[10];
                      *(_BYTE *)(a4 + 353) = a1[543] + 26;
                    }
                    return v12;
                  }
                  v177 = sub_1B67C9140(v8);
                  a1[548] = (-((v177 + 1) & 1) ^ ((v177 + 1) >> 1)) + ((v177 + 1) & 1);
                  v178 = sub_1B67C9140(v8);
                  LODWORD(v171) = (-((v178 + 1) & 1) ^ ((v178 + 1) >> 1)) + ((v178 + 1) & 1);
LABEL_311:
                  a1[549] = v171;
                  goto LABEL_312;
                }
                v171 = *((_QWORD *)a1 + 173);
              }
              else
              {
                a1[546] = 0;
              }
              *(_WORD *)(a1 + 547) = *(_WORD *)(v171 + 31);
              LOBYTE(v171) = *(_BYTE *)(v171 + 33);
              goto LABEL_311;
            }
          }
        }
      }
    }
  }
  return v12;
}

uint64_t sub_1B67EA4A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  int v30;
  __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  if (a2 < 1)
    return 0;
  v39 = v4;
  v40 = v5;
  v10 = 0;
  v11 = 0;
  v12 = a1 + 3488;
  do
    v11 |= (unsigned __int16)(sub_1B67C9094(v12, 1) << v10++);
  while (a2 != v10);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1368) + 173))
  {
    v13 = 0;
    v14 = 0;
    do
      v14 |= (unsigned __int16)(sub_1B67C9094(v12, 1) << v13++);
    while (a2 != v13);
  }
  else
  {
    v14 = 0;
  }
  v16 = 0;
  v35 = a3;
  v36 = a2;
  while (1)
  {
    v17 = 1 << *(_BYTE *)(a1 + 540);
    if ((v11 & 1) != 0)
    {
      v19 = sub_1B67C9140(v12);
      v20 = (-((v19 + 1) & 1) ^ ((v19 + 1) >> 1)) + ((v19 + 1) & 1);
      v21 = sub_1B67C9140(v12);
      result = 4294954387;
      if ((unint64_t)((v20 << 48) + 0x80FFFFFFFFFFFFLL) > 0x100FFFFFFFFFFFELL)
        return result;
      v22 = (-((v21 + 1) & 1) ^ ((v21 + 1) >> 1)) + ((v21 + 1) & 1);
      if ((unsigned __int16)(v22 + 128) > 0xFFu)
        return result;
      LOWORD(v17) = v20 + v17;
      v18 = v22 << *(_BYTE *)(*(_QWORD *)(a1 + 1368) + 194);
    }
    else
    {
      LOWORD(v18) = 0;
    }
    *(_WORD *)(a4 + 6 * v16) = v18;
    *(_WORD *)(a3 + 6 * v16) = v17;
    v23 = 1 << *(_BYTE *)(a1 + 630);
    v37 = v23;
    v38 = v23;
    if ((v14 & 1) != 0)
      break;
    *(_DWORD *)(a4 + 6 * v16 + 2) = 0;
    v24 = v23;
LABEL_29:
    v34 = a3 + 6 * v16;
    *(_WORD *)(v34 + 2) = v24;
    *(_WORD *)(v34 + 4) = v23;
    ++v16;
    v11 >>= 1;
    v14 >>= 1;
    if (v16 == v36)
      return 0;
  }
  v25 = 0;
  v26 = 1;
  while (1)
  {
    v27 = v26;
    v28 = sub_1B67C9140(v12);
    v29 = (-((v28 + 1) & 1) ^ ((v28 + 1) >> 1)) + ((v28 + 1) & 1);
    v30 = sub_1B67C9140(v12);
    if ((unint64_t)((v29 << 48) + 0x80FFFFFFFFFFFFLL) > 0x100FFFFFFFFFFFELL
      || ((unint64_t)((-((v30 + 1) & 1) ^ ((v30 + 1) >> 1)) + ((v30 + 1) & 1)) << 48)
       + 0x200FFFFFFFFFFFFLL > 0x400FFFFFFFFFFFELL)
    {
      return 4294954387;
    }
    v26 = 0;
    v32 = *(&v37 + v25) + v29;
    *(&v37 + v25) = v32;
    v33 = (__int16)((-((v30 + 1) & 1) ^ ((v30 + 1) >> 1))
                  + ((v30 + 1) & 1)
                  - (v32 << 7 >> *(_BYTE *)(a1 + 630))
                  + 128);
    if (v33 >= 127)
      v33 = 127;
    if (v33 <= -128)
      v33 = -128;
    *(_WORD *)(a4 + 6 * v16 + 2 * v25 + 2) = v33 << *(_BYTE *)(*(_QWORD *)(a1 + 1368) + 195);
    v25 = 1;
    if ((v27 & 1) == 0)
    {
      v24 = v37;
      LOWORD(v23) = v38;
      a3 = v35;
      goto LABEL_29;
    }
  }
}

void sub_1B67EA764(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_1B6773BAC();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_1B6773BF4();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 2);
        v5 -= 16;
        v15 = *(_QWORD *)(v5 + 6);
        *((_QWORD *)v13 - 2) = v14;
        v13 -= 16;
        *(_QWORD *)(v13 + 6) = v15;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
}

uint64_t sub_1B67EA85C(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

BOOL sub_1B67EA8A4(uint64_t a1)
{
  return **(_BYTE **)(a1 + 96) == 49;
}

BOOL sub_1B67EA8B8(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 1) == 49;
}

uint64_t sub_1B67EA8CC()
{
  return 0;
}

BOOL sub_1B67EA8D4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 2) == 49;
}

BOOL sub_1B67EA8E8(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 3) == 49;
}

BOOL sub_1B67EA8FC(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 4) == 49;
}

BOOL sub_1B67EA910(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 5) == 49;
}

BOOL sub_1B67EA924(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 6) == 49;
}

uint64_t sub_1B67EA938()
{
  return 0;
}

BOOL sub_1B67EA940(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 7) == 49;
}

BOOL sub_1B67EA954(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 8) == 49;
}

BOOL sub_1B67EA968(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 9) == 49;
}

BOOL sub_1B67EA97C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 10) == 49;
}

BOOL sub_1B67EA990(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 11) == 49;
}

BOOL sub_1B67EA9A4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 96) + 12) == 49;
}

uint64_t sub_1B67EA9B8(uint64_t a1)
{
  return *(char *)(a1 + 112);
}

uint64_t sub_1B67EA9C0(uint64_t a1)
{
  return *(char *)(a1 + 113);
}

uint64_t sub_1B67EA9C8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1B67EA9D0(uint64_t a1)
{
  return *(char *)(a1 + 114);
}

uint64_t sub_1B67EA9D8(uint64_t a1)
{
  return *(char *)(a1 + 115);
}

uint64_t sub_1B67EA9E0(uint64_t a1)
{
  return *(char *)(a1 + 116);
}

uint64_t sub_1B67EA9E8(uint64_t a1)
{
  return *(char *)(a1 + 117);
}

uint64_t sub_1B67EA9F0(uint64_t a1)
{
  return *(char *)(a1 + 118);
}

uint64_t sub_1B67EA9F8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1B67EAA00(uint64_t a1)
{
  return *(char *)(a1 + 119);
}

uint64_t sub_1B67EAA08(uint64_t a1)
{
  return *(char *)(a1 + 120);
}

uint64_t sub_1B67EAA10(uint64_t a1)
{
  return *(char *)(a1 + 121);
}

uint64_t sub_1B67EAA18(uint64_t a1)
{
  return *(char *)(a1 + 122);
}

uint64_t sub_1B67EAA20(uint64_t a1)
{
  return *(char *)(a1 + 123);
}

uint64_t sub_1B67EAA28(uint64_t a1)
{
  return *(char *)(a1 + 124);
}

void sub_1B67EAA34(_QWORD *a1)
{
  sub_1B67EC604(a1);
  JUMPOUT(0x1BCC9814CLL);
}

CFStringRef sub_1B67EAA58(uint64_t a1)
{
  int *v2;
  int *i;
  uint64_t v4;
  std::string *v5;
  std::string::size_type size;
  int *v7;
  int *j;
  std::string *v9;
  CFStringRef v10;
  std::string v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  sub_1B6781C7C(&v12, "FLS;");
  v2 = *(int **)(a1 + 48);
  for (i = *(int **)(a1 + 56); v2 != i; ++v2)
  {
    v4 = *v2;
    std::string::append(&v12, off_1E6A16E30[v4]);
    std::string::append(&v12, ":");
    std::to_string(&v13, *(char *)(a1 + v4 + 112));
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v13;
    else
      v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append(&v12, (const std::string::value_type *)v5, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append(&v12, ";");
  }
  v7 = *(int **)(a1 + 72);
  for (j = *(int **)(a1 + 80); v7 != j; ++v7)
  {
    std::string::append(&v12, off_1E6A16E30[*v7]);
    std::string::append(&v12, ";");
  }
  if (*(_DWORD *)(a1 + 36) == 1)
    std::string::append(&v12, "CABAC;");
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v12;
  else
    v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
  strncpy((char *)&v13, (const char *)v9, 0x96uLL);
  v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)&v13, 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1B67EAC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B67EAC70(uint64_t result)
{
  **(_BYTE **)(result + 96) = 48;
  *(_BYTE *)(*(_QWORD *)(result + 96) + 1) = 48;
  return result;
}

uint64_t sub_1B67EAC88(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 96) + 4) = 48;
  return result;
}

uint64_t sub_1B67EAC98(uint64_t a1, char *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  int64_t size;
  std::string *p_str;
  char *v12;
  char *v13;
  std::string::size_type v14;
  int64_t v15;
  std::string *v16;
  char *v17;
  char *v18;
  std::string::size_type v19;
  std::string *v20;
  void *v22;
  std::string *v23;
  int64_t v25;
  std::string *v26;
  char *v27;
  char *v28;
  std::string::size_type v29;
  void *v30;
  int v31;
  std::string *v32;
  int v34;
  std::string::size_type v35;
  std::string *p_p;
  int64_t v37;
  std::string *v38;
  char *v39;
  char *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v46;
  size_t v47;
  _QWORD *v48;
  std::string *v49;
  size_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  _DWORD *v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  std::string v81;
  _BYTE __dst[64];
  std::string v83;
  std::string __str;
  std::string __p;
  std::string v86;
  __int128 v87;
  _BYTE v88[7];
  char v89;
  std::string v90;
  _DWORD v91[2];
  std::string v92;
  char *v93;

  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 40) = 1;
  memset(&__p, 0, sizeof(__p));
  if (!a2)
    return 0;
  sub_1B6781C7C(&__str, a2);
  if (!strncmp(a2, "FLBN;", 5uLL))
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    v12 = (char *)p_str + size;
    if (size >= 5)
    {
      v20 = p_str;
      do
      {
        if (size == 4)
          break;
        v13 = (char *)memchr(v20, 70, size - 4);
        if (!v13)
          break;
        if (*(_DWORD *)v13 == 1312967750 && v13[4] == 59)
          goto LABEL_14;
        v20 = (std::string *)(v13 + 1);
        size = v12 - (char *)v20;
      }
      while (v12 - (char *)v20 > 4);
    }
    v13 = v12;
LABEL_14:
    if (v13 == v12)
      v14 = -1;
    else
      v14 = v13 - (char *)p_str;
    std::string::basic_string(&v92, &__str, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v90);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v92;
  }
  else if (!strncmp(a2, "FLBA;", 5uLL))
  {
    v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__str;
    else
      v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __str.__r_.__value_.__l.__size_;
    v17 = (char *)v16 + v15;
    if (v15 >= 5)
    {
      v23 = v16;
      do
      {
        if (v15 == 4)
          break;
        v18 = (char *)memchr(v23, 70, v15 - 4);
        if (!v18)
          break;
        if (*(_DWORD *)v18 == 1094863942 && v18[4] == 59)
          goto LABEL_27;
        v23 = (std::string *)(v18 + 1);
        v15 = v17 - (char *)v23;
      }
      while (v17 - (char *)v23 > 4);
    }
    v18 = v17;
LABEL_27:
    if (v18 == v17)
      v19 = 4;
    else
      v19 = v18 - (char *)v16 + 5;
    std::string::basic_string(&v83, &__str, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v92);
    if ((*((_BYTE *)&v83.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!v83.__r_.__value_.__l.__size_ || (v83.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        operator delete(v83.__r_.__value_.__l.__data_);
        goto LABEL_122;
      }
      sub_1B67EB704(__dst, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&v83.__r_.__value_.__s + 23) || (*((_BYTE *)&v83.__r_.__value_.__s + 23) & 1) != 0)
        goto LABEL_122;
      *(std::string *)__dst = v83;
    }
    memset(&__dst[32], 0, 24);
    v93 = 0;
    sub_1B67EBE44(&v93, a4);
    sub_1B6781C7C(&v92, v93);
    v25 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v92;
    else
      v26 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = v92.__r_.__value_.__l.__size_;
    v27 = (char *)v26 + v25;
    if (v25 >= 5)
    {
      v32 = v26;
      do
      {
        if (v25 == 4)
          break;
        v28 = (char *)memchr(v32, 70, v25 - 4);
        if (!v28)
          break;
        if (*(_DWORD *)v28 == 1094863942 && v28[4] == 59)
          goto LABEL_67;
        v32 = (std::string *)(v28 + 1);
        v25 = v27 - (char *)v32;
      }
      while (v27 - (char *)v32 > 4);
    }
    v28 = v27;
LABEL_67:
    if (v28 == v27)
      v29 = 4;
    else
      v29 = v28 - (char *)v26 + 5;
    std::string::basic_string(&v90, &v92, v29, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v87);
    v30 = (void *)v90.__r_.__value_.__r.__words[0];
    v91[0] = v90.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v91 + 3) = *(_DWORD *)((char *)&v90.__r_.__value_.__r.__words[2] + 3);
    v31 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1B67EB704(&v87, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    }
    else
    {
      v87 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
      *(_DWORD *)v88 = v91[0];
      *(_DWORD *)&v88[3] = *(_DWORD *)((char *)v91 + 3);
      v89 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    }
    v34 = __dst[23];
    if ((__dst[23] & 0x80000000) != 0)
      sub_1B67EB704(&v86, *(void **)__dst, *(unint64_t *)&__dst[8]);
    else
      v86 = *(std::string *)__dst;
    sub_1B67EC014(&v90, (uint64_t)&v87, &v86);
    *(std::string *)&__dst[32] = v90;
    *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
    v90.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (v89 < 0)
      operator delete((void *)v87);
    if (v31 < 0)
      operator delete(v30);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(*(void **)__dst);
    std::operator+<char>();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v92;
    if ((__dst[55] & 0x80000000) != 0)
      operator delete(*(void **)&__dst[32]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v83.__r_.__value_.__r.__words[0];
      goto LABEL_102;
    }
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      sub_1B67EB704(&v81, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      v81 = __str;
    sub_1B67EB78C((std::string::size_type *)&v92, &v81);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v92;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v81.__r_.__value_.__r.__words[0];
LABEL_102:
      operator delete(v22);
    }
  }
  v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = __p.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 24) = v35 + 1;
  v9 = sub_1B67EBDA0((void **)(a1 + 8), v35 + 1);
  if ((_DWORD)v9)
    goto LABEL_207;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  memcpy(*(void **)(a1 + 8), p_p, *(_QWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 32) = 1;
  v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &__p;
  else
    v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = __p.__r_.__value_.__l.__size_;
  v39 = (char *)v38 + v37;
  if (v37 >= 5)
  {
    v44 = v38;
    do
    {
      if (v37 == 4)
        break;
      v40 = (char *)memchr(v44, 70, v37 - 4);
      if (!v40)
        break;
      if (*(_DWORD *)v40 == 1312967750 && v40[4] == 59)
        goto LABEL_116;
      v44 = (std::string *)(v40 + 1);
      v37 = v39 - (char *)v44;
    }
    while (v39 - (char *)v44 > 4);
  }
  v40 = v39;
LABEL_116:
  if (v40 == v39)
    v41 = 4;
  else
    v41 = v40 - (char *)v38 + 5;
  std::string::basic_string(&v92, &__p, v41, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v90);
  v42 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v43 = v92.__r_.__value_.__l.__size_;
    if ((v92.__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      v9 = 4294954394;
      goto LABEL_206;
    }
    goto LABEL_133;
  }
  if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 1) != 0)
  {
LABEL_122:
    v9 = 4294954394;
    goto LABEL_207;
  }
  v43 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
LABEL_133:
  if (v43)
  {
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = v92.__r_.__value_.__l.__size_;
    if (a3)
      std::string::basic_string(&v90, &v92, 0, v42 >> 1, (std::allocator<char> *)&v87);
    else
      std::string::basic_string(&v90, &v92, v42 >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v87);
    v46 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = v90.__r_.__value_.__l.__size_;
    if (v46 <= 0xD)
      v47 = 13;
    else
      v47 = v46;
    v48 = (_QWORD *)(a1 + 96);
    v9 = sub_1B67EBDA0((void **)(a1 + 96), v47);
    if (!(_DWORD)v9)
    {
      memset(*(void **)(a1 + 96), 48, v47);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v90;
      else
        v49 = (std::string *)v90.__r_.__value_.__r.__words[0];
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      else
        v50 = v90.__r_.__value_.__l.__size_;
      memcpy(*(void **)(a1 + 96), v49, v50);
      v51 = 0;
      v52 = 0;
      do
      {
        *(_BYTE *)(a1 + v51 + 112) = -1;
        if (dword_1B6920F90[5 * v51 + 2] != *(_DWORD *)(a1 + 36) && ((_DWORD)v51 == 4 || (_DWORD)v51 == 1))
          *(_BYTE *)(*v48 + v51) = 48;
        if (*(_BYTE *)(*v48 + v51) == 49)
        {
          if (v51 == 12)
          {
            v54 = *(char **)(a1 + 80);
            v53 = *(_QWORD *)(a1 + 88);
            if ((unint64_t)v54 >= v53)
            {
              v59 = *(char **)(a1 + 72);
              v60 = (v54 - v59) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_212;
              v62 = v53 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL;
              v64 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v63)
                v64 = v61;
              if (v64)
              {
                v64 = (unint64_t)sub_1B6773BC0(v64);
                v59 = *(char **)(a1 + 72);
                v54 = *(char **)(a1 + 80);
              }
              else
              {
                v65 = 0;
              }
              v72 = (_DWORD *)(v64 + 4 * v60);
              *v72 = 12;
              v55 = v72 + 1;
              while (v54 != v59)
              {
                v73 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *--v72 = v73;
              }
              *(_QWORD *)(a1 + 72) = v72;
              *(_QWORD *)(a1 + 80) = v55;
              *(_QWORD *)(a1 + 88) = v64 + 4 * v65;
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v54 = 12;
              v55 = v54 + 4;
            }
            *(_QWORD *)(a1 + 80) = v55;
          }
          else
          {
            v57 = *(char **)(a1 + 56);
            v56 = *(_QWORD *)(a1 + 64);
            if ((unint64_t)v57 >= v56)
            {
              v66 = *(char **)(a1 + 48);
              v67 = (v57 - v66) >> 2;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 62)
LABEL_212:
                sub_1B6773BAC();
              v69 = v56 - (_QWORD)v66;
              if (v69 >> 1 > v68)
                v68 = v69 >> 1;
              v63 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL;
              v70 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v63)
                v70 = v68;
              if (v70)
              {
                v70 = (unint64_t)sub_1B6773BC0(v70);
                v66 = *(char **)(a1 + 48);
                v57 = *(char **)(a1 + 56);
              }
              else
              {
                v71 = 0;
              }
              v74 = (_DWORD *)(v70 + 4 * v67);
              *v74 = v51;
              v58 = v74 + 1;
              while (v57 != v66)
              {
                v75 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *--v74 = v75;
              }
              *(_QWORD *)(a1 + 48) = v74;
              *(_QWORD *)(a1 + 56) = v58;
              *(_QWORD *)(a1 + 64) = v70 + 4 * v71;
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_DWORD *)v57 = v51;
              v58 = v57 + 4;
            }
            *(_QWORD *)(a1 + 56) = v58;
            *(_BYTE *)(a1 + v51 + 112) = v52++;
          }
        }
        ++v51;
      }
      while (v51 != 13);
      if (*(_BYTE *)*v48 == 49)
      {
        v76 = 1;
      }
      else
      {
        v77 = 1;
        v78 = 12;
        while (v77 != 13)
        {
          v79 = v77++;
          if (v79 != 12 && *(_BYTE *)(*v48 + v79) == 49)
          {
            v78 = v77 - 2;
            break;
          }
        }
        v76 = v78 < 0xC;
      }
      v9 = 0;
      *(_BYTE *)(a1 + 33) = v76;
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_207;
    goto LABEL_206;
  }
  v9 = 4294954394;
  if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_206:
    operator delete(v92.__r_.__value_.__l.__data_);
LABEL_207:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1B67EB594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  int v55;
  uint64_t v56;

  if (*(char *)(v56 - 161) < 0)
    operator delete(*(void **)(v56 - 184));
  if (v55 < 0)
    operator delete(v54);
  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  if (a21 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(exception_object);
}

BOOL sub_1B67EB6C0(uint64_t a1)
{
  unint64_t v1;
  BOOL v2;

  v1 = 0;
  v2 = 1;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + v1) == 49 && ((0x1B80uLL >> v1) & 1) == 0)
      break;
    v2 = v1++ < 0xC;
  }
  while (v1 != 13);
  return v2;
}

void *sub_1B67EB704(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1B6781D28();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1B67EB78C(std::string::size_type *a1, const std::string *a2)
{
  std::string::size_type v2;
  std::string *v4;
  int v5;
  int v6;
  std::string::size_type v7;
  int64_t v8;
  std::string::size_type v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  int64_t v17;
  int64_t v18;
  int64_t size;
  char *v20;
  int v21;
  std::string *v22;
  int64_t v23;
  char *v24;
  char *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string::size_type v28;
  char *v29;
  std::string *v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  char *v34;
  int v35;
  std::string *v36;
  int64_t v37;
  char *v38;
  char *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  int v49;
  std::string::size_type *v50;
  std::string::size_type v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string __str;
  std::string v58;
  char v59;
  std::string v60;
  uint64_t v61;

  v2 = (std::string::size_type)a2;
  v61 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = std::string::basic_string(&v60, a2, 0, 5uLL, (std::allocator<char> *)&v58);
  v5 = std::string::compare(v4, "FLS2;");
  v6 = v5;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      if (dword_1EF137CD0 >= 1)
      {
        v7 = v2;
        if (*(char *)(v2 + 23) < 0)
          v7 = *(_QWORD *)v2;
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "invalid FLS2 prefix: %{public}s\n", v7);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(v2 + 23) < 0)
            v2 = *(_QWORD *)v2;
          LODWORD(v60.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = v2;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "invalid FLS2 prefix: %{public}s\n", (uint8_t *)&v60, 0xCu);
        }
      }
      return;
    }
  }
  else if (v5)
  {
    goto LABEL_3;
  }
  if (*(char *)(v2 + 23) < 0)
  {
    v9 = *(_QWORD *)v2;
    v8 = *(_QWORD *)(v2 + 8);
  }
  else
  {
    v8 = *(unsigned __int8 *)(v2 + 23);
    v9 = v2;
  }
  v10 = (_BYTE *)(v9 + v8);
  if (v8 >= 1)
  {
    v11 = (void *)v9;
    do
    {
      v12 = memchr(v11, 124, v8);
      if (!v12)
        break;
      if (*v12 == 124)
        goto LABEL_20;
      v11 = v12 + 1;
      v8 = v10 - (_BYTE *)v11;
    }
    while (v10 - (_BYTE *)v11 > 0);
  }
  v12 = v10;
LABEL_20:
  if (v12 == v10)
    v13 = -1;
  else
    v13 = (uint64_t)&v12[-v9];
  std::string::basic_string(&v60, (const std::string *)v2, 5uLL, v13 - 5, (std::allocator<char> *)&v58);
  v50 = a1;
  std::string::basic_string(&v58, (const std::string *)v2, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__str);
  v14 = 0;
  v51 = 0;
  memset(&__str, 0, sizeof(__str));
  do
  {
    v15 = off_1E6A16E30[v14];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v60;
    else
      v16 = (std::string *)v60.__r_.__value_.__r.__words[0];
    v17 = strlen(off_1E6A16E30[v14]);
    if (v17)
    {
      v18 = v17;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        size = v60.__r_.__value_.__l.__size_;
      if (size >= v17)
      {
        v20 = (char *)v16 + size;
        v21 = *v15;
        v22 = v16;
        do
        {
          v23 = size - v18;
          if (v23 == -1)
            break;
          v24 = (char *)memchr(v22, v21, v23 + 1);
          if (!v24)
            break;
          v25 = v24;
          if (!memcmp(v24, v15, v18))
          {
            if (v25 == v20 || v25 - (char *)v16 == -1)
              break;
            goto LABEL_41;
          }
          v22 = (std::string *)(v25 + 1);
          size = v20 - (v25 + 1);
        }
        while (size >= v18);
      }
      std::string::append(&__str, "0");
    }
    else
    {
LABEL_41:
      std::string::append(&__str, "1");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        v26 = __str.__r_.__value_.__l.__size_;
      else
        v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v51 = v26;
    }
    ++v14;
  }
  while (v14 != 13);
  v27 = 0;
  v28 = 0;
  memset(&v56, 0, sizeof(v56));
  do
  {
    v29 = off_1E6A16E30[v27];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v58;
    else
      v30 = (std::string *)v58.__r_.__value_.__r.__words[0];
    v31 = strlen(off_1E6A16E30[v27]);
    if (v31)
    {
      v32 = v31;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      else
        v33 = v58.__r_.__value_.__l.__size_;
      if (v33 >= v31)
      {
        v34 = (char *)v30 + v33;
        v35 = *v29;
        v36 = v30;
        do
        {
          v37 = v33 - v32;
          if (v37 == -1)
            break;
          v38 = (char *)memchr(v36, v35, v37 + 1);
          if (!v38)
            break;
          v39 = v38;
          if (!memcmp(v38, v29, v32))
          {
            if (v39 == v34 || v39 - (char *)v30 == -1)
              break;
            goto LABEL_64;
          }
          v36 = (std::string *)(v39 + 1);
          v33 = v34 - (v39 + 1);
        }
        while (v33 >= v32);
      }
      std::string::append(&v56, "0");
    }
    else
    {
LABEL_64:
      std::string::append(&v56, "1");
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        v28 = v56.__r_.__value_.__l.__size_;
      else
        v28 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    ++v27;
  }
  while (v27 != 13);
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0uLL;
  if (v51 > v28)
    v28 = v51;
  *((_BYTE *)&v54.__r_.__value_.__s + 23) = 5;
  v54.__r_.__value_.__r.__words[0] = 0x3B4E424C46;
  std::string::basic_string(&v53, &__str, 0, v28, (std::allocator<char> *)&v52);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v53;
  else
    v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    v41 = v53.__r_.__value_.__l.__size_;
  v42 = std::string::append(&v54, (const std::string::value_type *)v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&v52, &v56, 0, v28, (std::allocator<char> *)&v59);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v52;
  else
    v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    v45 = v52.__r_.__value_.__l.__size_;
  v46 = std::string::append(&v55, (const std::string::value_type *)v44, v45);
  v47 = v46->__r_.__value_.__r.__words[0];
  v50[1] = v46->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v50 + 15) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1]
                                                                            + 7);
  v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v49 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
  *v50 = v47;
  *((_BYTE *)v50 + 23) = v48;
  if (v49 < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
}

void sub_1B67EBCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (a17 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (*(char *)(v48 - 137) < 0)
    operator delete(*(void **)(v48 - 160));
  if (*(char *)(v48 - 105) < 0)
    operator delete(*(void **)(v48 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B67EBDA0(void **memptr, size_t size)
{
  void *v4;
  uint64_t result;
  uint64_t v6;

  if ((unint64_t)memptr[1] >= size)
    return 0;
  if (size > 0x6400000)
    return 4294954392;
  v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, size, 0x100004077774924uLL) || !*memptr)
    return 4294954392;
  v6 = 0;
  do
    *((_BYTE *)*memptr + v6++) = 0;
  while (size != v6);
  result = 0;
  memptr[1] = (void *)size;
  return result;
}

size_t sub_1B67EBE44(_QWORD *a1, int a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  size_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  BOOL v18;
  size_t result;
  size_t i;

  strncpy(byte_1EF138FE8, "FLBA;", 0x96uLL);
  if (a2 == 42)
  {
    dword_1EF1390E2 = 0;
    v4 = (__int128 *)"0000001111";
  }
  else if (a2 == 20)
  {
    dword_1EF1390E2 = 0;
    v4 = (__int128 *)"010000000001";
  }
  else
  {
    dword_1EF1390E2 = 0;
    if (a2 == 1)
      v4 = (__int128 *)"101111";
    else
      v4 = &xmmword_1B6921094;
  }
  v5 = v4[3];
  xmmword_1EF1390A2 = v4[2];
  unk_1EF1390B2 = v5;
  v6 = v4[5];
  xmmword_1EF1390C2 = v4[4];
  unk_1EF1390D2 = v6;
  v7 = v4[1];
  xmmword_1EF139082 = *v4;
  unk_1EF139092 = v7;
  if (sub_1B67EE434())
  {
    dword_1EF139146 = 0;
    v8 = (__int128 *)"1111111111111";
  }
  else
  {
    dword_1EF139146 = 0;
    v8 = (__int128 *)"1111111111110";
  }
  v9 = v8[3];
  xmmword_1EF139106 = v8[2];
  unk_1EF139116 = v9;
  v10 = v8[5];
  xmmword_1EF139126 = v8[4];
  unk_1EF139136 = v10;
  v11 = v8[1];
  xmmword_1EF1390E6 = *v8;
  unk_1EF1390F6 = v11;
  if ((_BYTE)xmmword_1EF139082)
    v12 = strnlen((const char *)&xmmword_1EF139082, 0x96uLL);
  else
    v12 = 0;
  v13 = strnlen((const char *)&xmmword_1EF1390E6, 0x96uLL);
  v14 = v13;
  if ((v12 + 7) >> 3 <= (v13 + 7) >> 3)
    v15 = (v13 + 7) >> 3;
  else
    v15 = (v12 + 7) >> 3;
  v16 = 8 * v15;
  strcat(byte_1EF138FE8, (const char *)&xmmword_1EF139082);
  if (v12 < 8 * v15)
  {
    v17 = v12 - v16;
    do
    {
      *(_WORD *)&byte_1EF138FE8[strlen(byte_1EF138FE8)] = 48;
      v18 = __CFADD__(v17++, 1);
    }
    while (!v18);
  }
  result = (size_t)strcat(byte_1EF138FE8, (const char *)&xmmword_1EF1390E6);
  v18 = v14 >= v16;
  for (i = v14 - v16; !v18; ++i)
  {
    result = strlen(byte_1EF138FE8);
    *(_WORD *)&byte_1EF138FE8[result] = 48;
    v18 = __CFADD__(i, 1);
  }
  *a1 = byte_1EF138FE8;
  return result;
}

void sub_1B67EC014(std::string *a1, uint64_t a2, std::string *__str)
{
  std::string::size_type size;
  std::string::size_type v7;
  unint64_t v8;
  unint64_t v9;
  std::string *p_buf;
  std::string::size_type v11;
  std::string *p_p;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string buf;
  std::string *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::basic_string(&v23, __str, size >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&buf);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    v7 = __str->__r_.__value_.__l.__size_;
  else
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::basic_string(&v22, __str, 0, v7 >> 1, (std::allocator<char> *)&buf);
  if (*(char *)(a2 + 23) < 0)
    v8 = *(_QWORD *)(a2 + 8);
  else
    v8 = *(unsigned __int8 *)(a2 + 23);
  std::string::basic_string(&v21, (const std::string *)a2, v8 >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&buf);
  if (*(char *)(a2 + 23) < 0)
    v9 = *(_QWORD *)(a2 + 8);
  else
    v9 = *(unsigned __int8 *)(a2 + 23);
  std::string::basic_string(&__p, (const std::string *)a2, 0, v9 >> 1, (std::allocator<char> *)&buf);
  sub_1B67EC3DC(&buf, (uint64_t)&__p, (uint64_t)&v23);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v11 = buf.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)p_buf, v11);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v13 = &v23;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = a1;
    else
      v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
    v25 = v14;
    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SetupNDU Encoder: localFLB %{public}s  remoteFLB %{public}s  finalFLB %{public}s", (uint8_t *)&buf, 0x20u);
  }
  sub_1B67EC3DC(&buf, (uint64_t)&v22, (uint64_t)&v21);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &buf;
  else
    v15 = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v16 = buf.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v17 = &v21;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
    v18 = &v22;
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = a1;
    else
      v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
    v25 = v19;
    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SetupNDU Decoder: localFLB %{public}s  remoteFLB %{public}s  finalFLB %{public}s", (uint8_t *)&buf, 0x20u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1B67EC340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  _Unwind_Resume(exception_object);
}

void sub_1B67EC3DC(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type size;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string *v13;
  int v14;
  std::string *p_dst;
  std::string::value_type v16;
  std::string __p;
  std::string __dst;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (!a2 || !a3)
    return;
  if (*(char *)(a2 + 23) < 0)
    v5 = *(_QWORD *)(a2 + 8);
  else
    v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(char *)(a3 + 23);
  if (v6 < 0)
    v7 = *(_QWORD *)(a3 + 8);
  else
    v7 = *(unsigned __int8 *)(a3 + 23);
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
  {
    sub_1B67EB704(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    if ((*(_BYTE *)(a3 + 23) & 0x80) == 0)
      goto LABEL_14;
LABEL_16:
    sub_1B67EB704(&__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    goto LABEL_17;
  }
  __dst = *(std::string *)a2;
  if ((v6 & 0x80) != 0)
    goto LABEL_16;
LABEL_14:
  __p = *(std::string *)a3;
  while (1)
  {
LABEL_17:
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size >= v8)
      break;
    std::string::append(&__dst, "0");
  }
  while (1)
  {
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = __p.__r_.__value_.__l.__size_;
    if (v10 >= v8)
      break;
    std::string::append(&__p, "0");
  }
  if (v8)
  {
    v12 = 0;
    while (1)
    {
      v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v12 == 12)
        break;
      if (v13->__r_.__value_.__s.__data_[v12] == 49)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v14 = p_dst->__r_.__value_.__s.__data_[v12];
        goto LABEL_37;
      }
      v16 = 48;
LABEL_41:
      std::string::push_back(this, v16);
      if (v8 == ++v12)
      {
        v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        goto LABEL_43;
      }
    }
    v14 = v13->__r_.__value_.__s.__data_[12];
LABEL_37:
    if (v14 == 49)
      v16 = 49;
    else
      v16 = 48;
    goto LABEL_41;
  }
LABEL_43:
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B67EC5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B67EC604(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = off_1E6A15350;
  v3 = a1 + 12;
  v2 = (void *)a1[12];
  if (v2)
  {
    free(v2);
    *v3 = 0;
    v3[1] = 0;
  }
  return sub_1B67EC644(a1);
}

_QWORD *sub_1B67EC644(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &unk_1E6A154D0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    a1[2] = 0;
  }
  return a1;
}

_QWORD *sub_1B67EC6AC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6A152A0;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B67EC6E8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6A152A0;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67EC734(uint64_t a1)
{
  int v1;
  int v3;

  v1 = *(char *)(a1 + 268);
  if ((v1 & 0x80000000) == 0 && ((*(unsigned __int8 *)(a1 + 186) >> v1) & 1) != 0)
    return 1;
  v3 = *(char *)(a1 + 269);
  if (v3 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v3) & 1;
}

uint64_t sub_1B67EC778(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 270);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC79C(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 271);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC7C0()
{
  return 0;
}

uint64_t sub_1B67EC7C8()
{
  return 0;
}

uint64_t sub_1B67EC7D0(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 273);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC7F4(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 274);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC818()
{
  return 0;
}

uint64_t sub_1B67EC820(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 275);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC844(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 276);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC868(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 277);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC88C(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 278);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

uint64_t sub_1B67EC8B0(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 279);
  if (v1 < 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
}

_QWORD *sub_1B67EC8D4(_QWORD *result, int a2)
{
  char v2;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;

  if ((a2 & 0x80000000) == 0)
  {
    v2 = a2;
    v3 = result;
    v5 = (char *)result[25];
    v4 = result[26];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (char *)result[24];
      v8 = (v5 - v7) >> 2;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62)
        sub_1B6773BAC();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 1 > v9)
        v9 = v10 >> 1;
      v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
      v12 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v11)
        v12 = v9;
      if (v12)
      {
        v12 = (unint64_t)sub_1B6773BC0(v12);
        v7 = (char *)v3[24];
        v5 = (char *)v3[25];
      }
      else
      {
        v13 = 0;
      }
      v14 = (_DWORD *)(v12 + 4 * v8);
      v15 = v12 + 4 * v13;
      *v14 = 0;
      v6 = v14 + 1;
      while (v5 != v7)
      {
        v16 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *--v14 = v16;
      }
      v3[24] = v14;
      v3[25] = v6;
      v3[26] = v15;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_DWORD *)v5 = 0;
      v6 = v5 + 4;
    }
    v3[25] = v6;
    result = (_QWORD *)std::__sort<std::__less<int,int> &,int *>();
    *((_BYTE *)v3 + 268) = v2;
    *((_BYTE *)v3 + 186) |= 1 << v2;
  }
  return result;
}

uint64_t sub_1B67EC9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  __int16 v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;

  v9 = a3 - 1;
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + a3 - 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v11 = *(_QWORD *)(a1 + 192);
  v12 = *(_QWORD *)(a1 + 200);
  v13 = (v12 - v11) >> 2;
  v14 = *(unsigned __int8 *)(a1 + 186);
  if ((v14 & 0x80) != 0)
  {
    v9 = v9 != 0;
    v15 = a3;
    while (1)
    {
      v16 = v15 - 1;
      if ((unint64_t)(v15 - 1) < 2)
        break;
      v17 = *(char *)(a2 - 2 + v15--);
      if ((v17 & 0x80000000) == 0)
      {
        v9 = v16 - 1;
        break;
      }
    }
  }
  v18 = v9 - *(int *)(a1 + 4 * v13 + 216);
  if (v12 != v11)
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 + v18;
    if (v13 <= 1)
      v13 = 1;
    do
    {
      switch(*(_DWORD *)(v11 + 4 * v19))
      {
        case 0:
          if (((v14 >> v19) & 1) != 0)
          {
            v22 = (unsigned __int8 *)(v21 + v20);
            *(_DWORD *)(a1 + 8) = 8 * *v22;
            *(_DWORD *)(a1 + 12) = 8 * v22[1];
            goto LABEL_16;
          }
          break;
        case 1:
          if (((v14 >> v19) & 1) != 0)
          {
            v23 = (unsigned __int16 *)(v21 + v20);
            v24 = bswap32(*v23) >> 16;
            LODWORD(v23) = bswap32(v23[1]) >> 16;
            *(_DWORD *)(a1 + 8) = v24;
            *(_DWORD *)(a1 + 12) = (_DWORD)v23;
            goto LABEL_22;
          }
          break;
        case 2:
          if (((v14 >> v19) & 1) != 0)
          {
            v25 = (unsigned __int8 *)(v21 + v20);
            v26 = *v25;
            *(_WORD *)(a1 + 16) = v26 << 8;
            *(_WORD *)(a1 + 16) = v25[1] | (unsigned __int16)(v26 << 8);
LABEL_16:
            v20 += 2;
          }
          break;
        case 3:
          if (((v14 >> v19) & 1) != 0)
          {
            v27 = (unsigned __int8 *)(v21 + v20);
            *(_DWORD *)(a1 + 20) = 16 * *v27;
            *(_DWORD *)(a1 + 24) = 16 * v27[1];
            *(_DWORD *)(a1 + 28) = 16 * (char)v27[2];
            *(_DWORD *)(a1 + 32) = 16 * (char)v27[3];
            goto LABEL_22;
          }
          break;
        case 4:
          *(_BYTE *)(a1 + 80) = (v14 >> *(_BYTE *)(a1 + 272)) & 1;
          break;
        case 5:
          if (((v14 >> v19) & 1) != 0)
          {
            v28 = (_BYTE *)(v21 + v20);
            LOBYTE(v10) = *v28;
            *(float *)&v29 = (float)LODWORD(v10) / 255.0;
            *(float *)(a1 + 52) = *(float *)&v29;
            LOBYTE(v29) = v28[1];
            *(float *)&v30 = (float)v29 / 255.0;
            *(float *)(a1 + 56) = *(float *)&v30;
            LOBYTE(v30) = v28[2];
            *(float *)&v31 = (float)v30 / 255.0;
            *(float *)(a1 + 60) = *(float *)&v31;
            LOBYTE(v31) = v28[3];
            v10 = (float)v31 / 255.0;
            *(float *)(a1 + 64) = v10;
LABEL_22:
            v20 += 4;
          }
          break;
        case 6:
          if (((v14 >> v19) & 1) != 0)
          {
            v32 = (unsigned __int8 *)(v21 + v20);
            *(_DWORD *)(a1 + 68) = 16 * *v32;
            *(_DWORD *)(a1 + 72) = 16 * v32[1];
            *(_DWORD *)(a1 + 76) = v32[2];
            goto LABEL_30;
          }
          break;
        case 7:
          if (((v14 >> v19) & 1) != 0)
          {
            *(_QWORD *)(a1 + 88) = bswap64(*(_QWORD *)(v21 + v20));
            goto LABEL_35;
          }
          break;
        case 8:
          *(_BYTE *)(a1 + 96) = (v14 >> *(_BYTE *)(a1 + 276)) & 1;
          break;
        case 9:
          if (((v14 >> v19) & 1) != 0)
          {
            v33 = (unsigned __int16 *)(v21 + v20);
            *(_WORD *)(a1 + 98) = bswap32(*v33) >> 16;
            *(_WORD *)(a1 + 100) = bswap32(v33[1]) >> 16;
LABEL_30:
            v20 += 3;
          }
          break;
        case 0xA:
          if (((v14 >> v19) & 1) != 0)
            *(_BYTE *)(a1 + 102) = *(_BYTE *)(v21 + v20++);
          break;
        case 0xB:
          if (((v14 >> v19) & 1) != 0)
          {
            v34 = (unsigned __int16 *)(v21 + v20);
            *(_WORD *)(a1 + 104) = bswap32(*v34) >> 16;
            *(_WORD *)(a1 + 106) = bswap32(v34[1]) >> 16;
            *(_WORD *)(a1 + 108) = bswap32(v34[2]) >> 16;
            *(_WORD *)(a1 + 110) = bswap32(v34[3]) >> 16;
LABEL_35:
            v20 += 8;
          }
          break;
        default:
          break;
      }
      ++v19;
    }
    while (v13 != v19);
  }
  *a5 = a3 - v18;
  return 0;
}

uint64_t sub_1B67ECCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, a4);
  return sub_1B67ECFA0(a1, a2 + a5, a6 - a5);
}

uint64_t sub_1B67ECD44(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  if ((*(_BYTE *)(a2 + 44) & 7) != 0)
    return 0;
  result = sub_1B67ECFA0(a1, *(_QWORD *)(a2 + 24), 0);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 24) + result + (*(int *)(a2 + 44) >> 3);
  *(_QWORD *)(a2 + 24) = v5;
  if (v5 >= v4)
  {
    *(_BYTE *)(a2 + 48) = 1;
    *(_QWORD *)(a2 + 24) = v4;
  }
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1B67ECDB0(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v4;
  BOOL v5;
  char *v6;
  _BYTE *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;

  *(_BYTE *)(a1 + 186) = a2;
  v4 = (_QWORD *)(a1 + 192);
  if (*(_BYTE *)(a3 + 32))
    v5 = v4 == (_QWORD *)(a3 + 48);
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(char **)(a3 + 48);
    v7 = *(_BYTE **)(a3 + 56);
    v8 = v7 - v6;
    v9 = (v7 - v6) >> 2;
    v10 = *(_QWORD *)(a1 + 208);
    v11 = *(char **)(a1 + 192);
    if (v9 <= (v10 - (uint64_t)v11) >> 2)
    {
      v14 = (void **)(a1 + 200);
      v16 = *(_BYTE **)(a1 + 200);
      v17 = (v16 - v11) >> 2;
      if (v17 < v9)
      {
        v18 = &v6[4 * v17];
        if (v16 != v11)
        {
          memmove(*(void **)(a1 + 192), v6, v16 - v11);
          v11 = (char *)*v14;
        }
        v8 = v7 - v18;
        if (v7 == v18)
          goto LABEL_24;
        v19 = v11;
        v20 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      if (v11)
      {
        *(_QWORD *)(a1 + 200) = v11;
        operator delete(v11);
        v10 = 0;
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_38;
      v12 = v10 >> 1;
      if (v10 >> 1 <= v9)
        v12 = (v7 - v6) >> 2;
      v13 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v12;
      if (v13 >> 62)
LABEL_38:
        sub_1B6773BAC();
      v11 = (char *)sub_1B6773BC0(v13);
      *(_QWORD *)(a1 + 200) = v11;
      v14 = (void **)(a1 + 200);
      *(_QWORD *)(a1 + 192) = v11;
      *(_QWORD *)(a1 + 208) = &v11[4 * v15];
    }
    if (v7 == v6)
    {
LABEL_24:
      *v14 = &v11[v8];
      goto LABEL_25;
    }
    v19 = v11;
    v20 = v6;
LABEL_23:
    memmove(v19, v20, v8);
    goto LABEL_24;
  }
LABEL_25:
  *(_QWORD *)(a1 + 273) = -1;
  *(_QWORD *)(a1 + 268) = -1;
  v21 = (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2;
  if (*(_QWORD *)(a1 + 200) == *(_QWORD *)(a1 + 192))
  {
    *(_DWORD *)(a1 + 216) = 0;
  }
  else
  {
    v22 = 0;
    if (v21 <= 1)
      v23 = 1;
    else
      v23 = (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2;
    do
    {
      *(_BYTE *)(a1 + *(int *)(*(_QWORD *)(a1 + 192) + 4 * v22) + 268) = v22;
      ++v22;
    }
    while (v23 != v22);
    v24 = 0;
    *(_DWORD *)(a1 + 216) = 0;
    v25 = *(unsigned __int8 *)(a1 + 186);
    do
    {
      if (((v25 >> v24) & 1) != 0)
        v26 = dword_1B6920F90[5 * *(int *)(*(_QWORD *)(a1 + 192) + 4 * v24) + 4];
      else
        v26 = 0;
      *(_DWORD *)(a1 + 4 * v24 + 220) = *(_DWORD *)(a1 + 4 * v24 + 216) + v26;
      ++v24;
    }
    while (v23 != v24);
  }
  return *(unsigned int *)(a1 + 4 * v21 + 216);
}

uint64_t sub_1B67ECFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  unsigned int v12;
  _WORD *v13;
  _BYTE *v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BYTE *v22;
  int v23;
  char v24;
  char v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = a3;
  v6 = (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2;
  if (*(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 192))
  {
    v7 = 0;
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2;
    do
    {
      switch(*(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v7))
      {
        case 0:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) != 0)
          {
            v10 = (_BYTE *)(a2 + v8);
            *v10 = *(_DWORD *)(a1 + 8) >> 3;
            v11 = *(_DWORD *)(a1 + 12) >> 3;
            goto LABEL_12;
          }
          break;
        case 1:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) != 0)
          {
            v12 = *(unsigned __int16 *)(a1 + 12);
            v13 = (_WORD *)(a2 + v8);
            *v13 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
            v13[1] = bswap32(v12) >> 16;
            goto LABEL_36;
          }
          break;
        case 2:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) != 0)
          {
            v10 = (_BYTE *)(a2 + v8);
            *v10 = *(_BYTE *)(a1 + 17);
            LOBYTE(v11) = *(_BYTE *)(a1 + 16);
LABEL_12:
            v10[1] = v11;
            v8 += 2;
          }
          break;
        case 3:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) != 0)
          {
            v14 = (_BYTE *)(a2 + v8);
            *v14 = *(_DWORD *)(a1 + 20) >> 4;
            v14[1] = *(_DWORD *)(a1 + 24) >> 4;
            v14[2] = *(_DWORD *)(a1 + 28) >> 4;
            v15 = *(_DWORD *)(a1 + 32) >> 4;
            goto LABEL_26;
          }
          break;
        case 4:
          v16 = *(unsigned __int8 *)(a1 + 80);
          v17 = *(_BYTE *)(a1 + 272);
          goto LABEL_32;
        case 5:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0)
            break;
          v18 = (int)(float)((float)(*(float *)(a1 + 52) * 255.0) + 0.5);
          if (v18 >= 255)
            v18 = 255;
          v14 = (_BYTE *)(a2 + v8);
          *v14 = v18 & ~(v18 >> 31);
          v19 = (int)(float)((float)(*(float *)(a1 + 56) * 255.0) + 0.5);
          if (v19 >= 255)
            v19 = 255;
          v14[1] = v19 & ~(v19 >> 31);
          v20 = (int)(float)((float)(*(float *)(a1 + 60) * 255.0) + 0.5);
          if (v20 >= 255)
            v20 = 255;
          v14[2] = v20 & ~(v20 >> 31);
          v21 = (int)(float)((float)(*(float *)(a1 + 64) * 255.0) + 0.5);
          if (v21 >= 255)
            v21 = 255;
          v15 = v21 & ~(v21 >> 31);
LABEL_26:
          v14[3] = v15;
          goto LABEL_36;
        case 6:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) != 0)
          {
            v22 = (_BYTE *)(a2 + v8);
            *v22 = *(_DWORD *)(a1 + 68) >> 4;
            v22[1] = *(_DWORD *)(a1 + 72) >> 4;
            v22[2] = *(_DWORD *)(a1 + 76);
            v8 += 3;
          }
          break;
        case 7:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0)
            break;
          *(_QWORD *)(a2 + v8) = bswap64(*(_QWORD *)(a1 + 88));
          goto LABEL_41;
        case 8:
          v16 = *(unsigned __int8 *)(a1 + 96);
          v17 = *(_BYTE *)(a1 + 276);
LABEL_32:
          v23 = 1 << v17;
          v24 = *(_BYTE *)(a1 + 186);
          if (v16)
            v25 = v24 | v23;
          else
            v25 = v24 & ~(_BYTE)v23;
          *(_BYTE *)(a1 + 186) = v25;
          break;
        case 9:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0)
            break;
          v26 = (_WORD *)(a2 + v8);
          *v26 = bswap32(*(unsigned __int16 *)(a1 + 98)) >> 16;
          v26[1] = bswap32(*(unsigned __int16 *)(a1 + 100)) >> 16;
LABEL_36:
          v8 += 4;
          break;
        case 0xA:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) != 0)
            *(_BYTE *)(a2 + v8++) = *(_BYTE *)(a1 + 102);
          break;
        case 0xB:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0)
            break;
          v27 = (_WORD *)(a2 + v8);
          *v27 = bswap32(*(unsigned __int16 *)(a1 + 104)) >> 16;
          v27[1] = bswap32(*(unsigned __int16 *)(a1 + 106)) >> 16;
          v27[2] = bswap32(*(unsigned __int16 *)(a1 + 108)) >> 16;
          v27[3] = bswap32(*(unsigned __int16 *)(a1 + 110)) >> 16;
LABEL_41:
          v8 += 8;
          break;
        default:
          break;
      }
      ++v7;
    }
    while (v9 != v7);
  }
  v28 = *(int *)(a1 + 4 * v6 + 216);
  v29 = ~v28 + a3;
  if (v29 <= 0)
  {
    v30 = *(_BYTE *)(a1 + 186);
    v3 = v28 + 1;
  }
  else
  {
    *(_BYTE *)(a2 + v28) = 0;
    memset((void *)(a2 + v28 + 1), 128, v29 - 1);
    v30 = *(_BYTE *)(a1 + 186) | 0x80;
    *(_BYTE *)(a1 + 186) = v30;
    v28 = v3 - 1;
  }
  *(_BYTE *)(a2 + v28) = v30;
  return v3;
}

void sub_1B67ED300(uint64_t a1, const std::string *a2)
{
  std::string::size_type v2;
  std::string *v4;
  int v5;
  std::string *v6;
  int v7;
  int v8;
  std::string::size_type v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string::size_type v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  int v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string __str;
  std::string v41;
  uint64_t v42;

  v2 = (std::string::size_type)a2;
  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  memset(&__str, 0, sizeof(__str));
  v4 = std::string::basic_string(&v41, a2, 0, 5uLL, (std::allocator<char> *)&v39);
  v5 = std::string::compare(v4, "FLBA;");
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v5)
  {
    v6 = std::string::basic_string(&v41, (const std::string *)v2, 0, 5uLL, (std::allocator<char> *)&v39);
    v7 = std::string::compare(v6, "FLBN;");
    v8 = v7;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if (v8)
        goto LABEL_6;
    }
    else if (v7)
    {
LABEL_6:
      if (dword_1EF137CD0 >= 1)
      {
        v9 = v2;
        if (*(char *)(v2 + 23) < 0)
          v9 = *(_QWORD *)v2;
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "invalid FLB prefix: %{public}s\n", v9);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(v2 + 23) < 0)
            v2 = *(_QWORD *)v2;
          LODWORD(v41.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = v2;
          v10 = MEMORY[0x1E0C81028];
          v11 = "invalid FLB prefix: %{public}s\n";
          v12 = 12;
LABEL_74:
          _os_log_impl(&dword_1B676B000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v41, v12);
          goto LABEL_75;
        }
      }
      goto LABEL_75;
    }
  }
  std::string::basic_string(&v41, (const std::string *)v2, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v39);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v41;
  v13 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__s.__data_[8] & 1) == 0)
      goto LABEL_21;
  }
  else if ((*((_BYTE *)&v41.__r_.__value_.__s + 23) & 1) == 0)
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_21:
    std::string::basic_string(&v41, &__str, 0, size >> 1, (std::allocator<char> *)&v39);
    v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __str.__r_.__value_.__l.__size_;
    std::string::basic_string(&v39, &__str, v15 >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v38);
    v16 = 0;
    memset(&v38, 0, sizeof(v38));
    do
    {
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v41;
      else
        v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if (v17->__r_.__value_.__s.__data_[v16] == 49)
      {
        std::string::append(&v38, off_1E6A16E30[v16]);
        std::string::append(&v38, ";");
      }
      ++v16;
    }
    while (v16 != 13);
    v18 = 0;
    memset(&v37, 0, sizeof(v37));
    do
    {
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v39;
      else
        v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if (v19->__r_.__value_.__s.__data_[v18] == 49)
      {
        std::string::append(&v37, off_1E6A16E30[v18]);
        std::string::append(&v37, ";");
      }
      ++v18;
    }
    while (v18 != 13);
    HIDWORD(v34.__r_.__value_.__r.__words[1]) = 0;
    v34.__r_.__value_.__r.__words[2] = 0x500000000000000;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = 59;
    LODWORD(v34.__r_.__value_.__l.__data_) = 844319814;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v38;
    else
      v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v21 = v38.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v34, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v35, "|");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v27 = v37.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v36, (const std::string::value_type *)v26, v27);
    v29 = v28->__r_.__value_.__r.__words[0];
    *(_QWORD *)(a1 + 8) = v28->__r_.__value_.__l.__size_;
    *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v31 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    *(_QWORD *)a1 = v29;
    *(_BYTE *)(a1 + 23) = v30;
    if (v31 < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    goto LABEL_75;
  }
  if (dword_1EF137CD0 >= 1)
  {
    v32 = v2;
    if (*(char *)(v2 + 23) < 0)
      v32 = *(_QWORD *)v2;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = __str.__r_.__value_.__l.__size_;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "FLB %{public}s its size %lu is not even\n", v32, v13);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v2 + 23) < 0)
        v2 = *(_QWORD *)v2;
      v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = __str.__r_.__value_.__l.__size_;
      LODWORD(v41.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = v2;
      WORD2(v41.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = v33;
      v10 = MEMORY[0x1E0C81028];
      v11 = "FLB %{public}s its size %lu is not even\n";
      v12 = 22;
      goto LABEL_74;
    }
  }
LABEL_75:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1B67ED814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B67ED8E0()
{
  if (qword_1EF13914C || !mach_timebase_info((mach_timebase_info_t)&qword_1EF13914C))
    return mach_absolute_time();
  fwrite("Failed to initialize time!", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  return 0;
}

uint64_t sub_1B67ED940(uint64_t result)
{
  uint64_t v1;
  mach_timebase_info *v2;
  int v3;

  if (!*(_BYTE *)(result + 32))
  {
    v1 = result;
    v3 = *(_DWORD *)(result + 16);
    v2 = (mach_timebase_info *)(result + 16);
    if (v3 || *(_DWORD *)(v1 + 20) || (result = mach_timebase_info(v2), !(_DWORD)result))
    {
      *(_BYTE *)(v1 + 32) = 1;
      result = mach_absolute_time();
      *(_QWORD *)(v1 + 24) = result;
    }
  }
  return result;
}

double sub_1B67ED98C(uint64_t a1)
{
  uint64_t v2;
  double result;
  unint64_t v4;
  uint64_t v5;

  v2 = mach_absolute_time();
  if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(unsigned int *)(a1 + 20);
    v5 = (v2 - *(_QWORD *)(a1 + 24)) * *(unsigned int *)(a1 + 16);
    *(_BYTE *)(a1 + 32) = 0;
    result = (double)(v5 / v4) / 1000000000.0;
    *(double *)a1 = *(double *)a1 + result;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_1B67ED9E8()
{
  int v0;
  int v1;
  io_registry_entry_t v2;
  io_object_t v3;
  const __CFData *CFProperty;
  const __CFData *v5;
  CFTypeID v6;
  unint64_t Length;
  const UInt8 *BytePtr;
  int v9;
  const __CFBoolean *v10;
  BOOL v11;
  uint64_t v12;
  size_t v13;
  int v14;
  size_t v15;
  char __s1[100];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  dword_1EDBB4CB0 |= 2u;
  v12 = 0;
  v13 = 8;
  sysctlbyname("hw.cachelinesize", &v12, &v13, 0, 0);
  v13 = 4;
  if (!sysctlbyname("hw.physicalcpu", &v14, &v13, 0, 0) && v13 == 4)
    dword_1EDBB4C20 = v14;
  v13 = 4;
  sysctlbyname("hw.logicalcpu", &v14, &v13, 0, 0);
  v15 = 100;
  if (sysctlbyname("hw.machine", __s1, &v15, 0, 0))
  {
    v0 = 0;
  }
  else if (strstr(__s1, "iPhone"))
  {
    v0 = 1;
  }
  else if (strstr(__s1, "iPad"))
  {
    v0 = 2;
  }
  else if (strstr(__s1, "x86_64"))
  {
    v0 = 3;
  }
  else if (strstr(__s1, "arm64"))
  {
    v0 = 4;
  }
  else if (strstr(__s1, "AppleTV"))
  {
    v0 = 5;
  }
  else
  {
    v0 = 0;
  }
  dword_1EDBB4CCC = v0;
  if (sub_1B67EE0A8())
    v1 = 13;
  else
    v1 = 0;
  v2 = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAB8], "IODeviceTree:/arm-io");
  if (v2)
  {
    v3 = v2;
    CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v2, CFSTR("compatible"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (!CFProperty)
    {
      IOObjectRelease(v3);
      goto LABEL_118;
    }
    v5 = CFProperty;
    v6 = CFGetTypeID(CFProperty);
    if (v6 != CFDataGetTypeID())
      goto LABEL_117;
    Length = CFDataGetLength(v5);
    BytePtr = CFDataGetBytePtr(v5);
    if ((uint64_t)Length >= 11)
    {
      if (*BytePtr == 97 && BytePtr[1] == 114 && BytePtr[2] == 109)
      {
        if (BytePtr[3] == 45)
        {
          if (BytePtr[4] == 105 && BytePtr[5] == 111 && BytePtr[6] == 44)
          {
            if (BytePtr[7] == 116 && BytePtr[8] == 55 && BytePtr[9] == 48 && BytePtr[10] == 48)
            {
              v1 = 7;
LABEL_117:
              IOObjectRelease(v3);
              CFRelease(v5);
              goto LABEL_118;
            }
            if (BytePtr[6] == 44 && BytePtr[7] == 115 && BytePtr[8] == 56 && BytePtr[9] == 48 && BytePtr[10] == 48)
            {
              v1 = 8;
              goto LABEL_117;
            }
          }
          if (Length <= 0xB)
          {
LABEL_114:
            if (sub_1B67EE0A8())
              v1 = 13;
            else
              v1 = 254;
            goto LABEL_117;
          }
          if (BytePtr[4] == 105 && BytePtr[5] == 111 && BytePtr[6] == 44)
          {
            if (BytePtr[7] == 116
              && BytePtr[8] == 56
              && BytePtr[9] == 48
              && BytePtr[10] == 49
              && BytePtr[11] - 48 < 3)
            {
              v1 = 9;
              goto LABEL_117;
            }
            if (BytePtr[6] == 44)
            {
              if (BytePtr[7] == 116 && BytePtr[8] == 56 && BytePtr[9] == 48 && BytePtr[10] == 49 && BytePtr[11] == 53)
              {
                v1 = 10;
                goto LABEL_117;
              }
              if (BytePtr[6] == 44)
              {
                if (BytePtr[7] == 116 && BytePtr[8] == 56 && BytePtr[9] == 48 && BytePtr[10] == 50)
                {
                  v9 = BytePtr[11];
                  v1 = 11;
                  if (v9 == 48 || v9 == 55)
                    goto LABEL_117;
                }
                if (BytePtr[6] == 44)
                {
                  if (BytePtr[7] == 116
                    && BytePtr[8] == 56
                    && BytePtr[9] == 48
                    && BytePtr[10] == 51
                    && BytePtr[11] == 48)
                  {
                    v1 = 12;
                    goto LABEL_117;
                  }
                  if (BytePtr[6] == 44)
                  {
                    if (BytePtr[7] == 116
                      && BytePtr[8] == 56
                      && BytePtr[9] == 49
                      && BytePtr[10] == 48
                      && (BytePtr[11] | 2) == 0x33)
                    {
                      v1 = 13;
                      goto LABEL_117;
                    }
                    if (BytePtr[6] == 44)
                    {
                      if (BytePtr[7] == 116
                        && BytePtr[8] == 56
                        && BytePtr[9] == 49
                        && BytePtr[10] == 49
                        && (BytePtr[11] | 2) == 0x32)
                      {
                        v1 = 14;
                        goto LABEL_117;
                      }
                      if (BytePtr[6] == 44)
                      {
                        if (BytePtr[7] == 116
                          && BytePtr[8] == 56
                          && BytePtr[9] == 49
                          && BytePtr[10] == 50
                          && BytePtr[11] == 48)
                        {
                          v1 = 15;
                          goto LABEL_117;
                        }
                        if (BytePtr[6] == 44)
                        {
                          if (BytePtr[7] == 116
                            && BytePtr[8] == 56
                            && BytePtr[9] == 49
                            && BytePtr[10] == 51
                            && BytePtr[11] == 48)
                          {
                            v1 = 16;
                            goto LABEL_117;
                          }
                          if (BytePtr[6] == 44
                            && BytePtr[7] == 116
                            && BytePtr[8] == 56
                            && BytePtr[9] == 49
                            && BytePtr[10] == 52
                            && BytePtr[11] == 48)
                          {
                            v1 = 17;
                            goto LABEL_117;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_112;
        }
        if (Length < 0xC)
          goto LABEL_114;
      }
      if (Length <= 0xD)
        goto LABEL_114;
      goto LABEL_113;
    }
LABEL_112:
    if (Length < 0xE)
      goto LABEL_114;
LABEL_113:
    if (!strncmp((const char *)BytePtr, "arm-io,vmapple", 0xEuLL))
    {
      v1 = 255;
      goto LABEL_117;
    }
    goto LABEL_114;
  }
LABEL_118:
  dword_1EDBB4CC4 = v1;
  if (dword_1EDBB4CCC == 2)
  {
    v10 = (const __CFBoolean *)MGCopyAnswer();
    v11 = CFBooleanGetValue(v10) != 0;
  }
  else
  {
    v11 = 0;
  }
  byte_1EF1386B8 = v11;
}

uint64_t sub_1B67EE0A8()
{
  uint64_t result;
  const __CFArray *v1;
  CFTypeID v2;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  CFTypeID v5;
  const void *v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  int valuePtr;

  result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E0CA91B0]);
    if (result)
    {
      v1 = (const __CFArray *)result;
      v2 = CFGetTypeID((CFTypeRef)result);
      if (v2 != CFArrayGetTypeID())
        return 0;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, 0);
      if (!ValueAtIndex)
        return 0;
      v4 = ValueAtIndex;
      v5 = CFGetTypeID(ValueAtIndex);
      if (v5 != CFDictionaryGetTypeID())
        return 0;
      v6 = (const void *)*MEMORY[0x1E0CA9158];
      valuePtr = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(v4, v6);
      if (Value
        && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFNumberGetTypeID())
        && (CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr), valuePtr == 3))
      {
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B67EE188()
{
  byte_1EF1385E0 = espresso_create_context() != 0;
  return espresso_context_destroy();
}

void sub_1B67EE1B4()
{
  CFIndex Count;
  CFIndex v1;
  CFIndex v2;
  const void *v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  CFTypeID TypeID;
  const void *Value;
  const void *v8;
  io_registry_entry_t v9;
  io_object_t v10;
  const __CFString *CFProperty;
  CFTypeID v12;
  CFStringRef v13;
  CFTypeID v14;
  CFComparisonResult v15;
  CFComparisonResult v16;
  CFComparisonResult v17;
  BOOL v18;
  char v19;
  CFArrayRef listOfVideoEncodersOut;

  listOfVideoEncodersOut = 0;
  if (VTCopyVideoEncoderList(0, &listOfVideoEncodersOut))
    goto LABEL_27;
  Count = CFArrayGetCount(listOfVideoEncodersOut);
  if (Count < 1)
    goto LABEL_27;
  v1 = Count;
  v2 = 0;
  v3 = (const void *)*MEMORY[0x1E0CEDCF8];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(listOfVideoEncodersOut, v2);
    if (ValueAtIndex)
    {
      v5 = ValueAtIndex;
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v5))
      {
        Value = CFDictionaryGetValue(v5, v3);
        if (Value)
        {
          v8 = Value;
          if (CFEqual(Value, CFSTR("com.apple.videotoolbox.videoencoder.h264.gva"))
            || CFEqual(v8, CFSTR("com.apple.videotoolbox.videoencoder.hevc.gva")))
          {
            break;
          }
        }
      }
    }
    if (v1 == ++v2)
      goto LABEL_27;
  }
  v9 = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAA8], "IOService:/");
  if (!v9)
    goto LABEL_25;
  v10 = v9;
  CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(v9, CFSTR("board-id"), 0, 0);
  IOObjectRelease(v10);
  if (!CFProperty)
    goto LABEL_25;
  v12 = CFGetTypeID(CFProperty);
  if (v12 == CFDataGetTypeID())
  {
    v13 = CFStringCreateFromExternalRepresentation(0, (CFDataRef)CFProperty, 0);
    CFRelease(CFProperty);
    CFProperty = v13;
    if (!v13)
      goto LABEL_25;
LABEL_17:
    v15 = CFStringCompare(CFProperty, CFSTR("Mac-F60DEB81FF30ACF6"), 0);
    v16 = CFStringCompare(CFProperty, CFSTR("Mac-7BA5B2D9E42DDD94"), 0);
    v17 = CFStringCompare(CFProperty, CFSTR("Mac-27AD2F918AE68F61"), 0);
    CFRelease(CFProperty);
    if (v15)
    {
      if (v16)
        v18 = v17 == kCFCompareEqualTo;
      else
        v18 = 1;
      v19 = !v18;
    }
    else
    {
      v19 = 0;
    }
    goto LABEL_26;
  }
  v14 = CFGetTypeID(CFProperty);
  if (v14 == CFStringGetTypeID())
    goto LABEL_17;
  CFRelease(CFProperty);
LABEL_25:
  v19 = 1;
LABEL_26:
  byte_1EF139160 = v19;
LABEL_27:
  if (listOfVideoEncodersOut)
    CFRelease(listOfVideoEncodersOut);
}

uint64_t sub_1B67EE3C8()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&qword_1EF139178);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&qword_1EF139178, &v3, (void (__cdecl *)(void *))sub_1B67EE424);
  }
  return byte_1EF139170;
}

void sub_1B67EE424()
{
  byte_1EF139170 = 1;
}

BOOL sub_1B67EE434()
{
  if (qword_1EF1385E8 != -1)
    dispatch_once(&qword_1EF1385E8, &unk_1E6A16EB8);
  if (!byte_1EF1385E0)
    return 0;
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  return byte_1EF1386B8 || dword_1EDBB4CCC == 4 || dword_1EDBB4CCC == 5;
}

_QWORD *sub_1B67EE4DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E6A14DC0;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[1];
      (*(void (**)(_QWORD *))(*v2 + 16))(v2);
      v2 = v3;
    }
    while (v3);
  }
  return a1;
}

void sub_1B67EE524(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *a1 = &off_1E6A14DC0;
  v1 = (_QWORD *)a1[1];
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)v1[1];
      (*(void (**)(_QWORD *))(*v1 + 16))(v1);
      v1 = v2;
    }
    while (v2);
  }
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67EE57C(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 24) == a3)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), a2);
  else
    return 0;
}

void sub_1B67EE5B4()
{
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67EE5C8(uint64_t a1, _BYTE *a2, int a3, _BYTE *a4)
{
  unint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v4 = 0xCBF29CE484222325;
    v5 = *a2;
    if (*a2)
    {
      v6 = a2 + 1;
      do
      {
        v4 = 0x100000001B3 * (v4 ^ v5);
        v7 = *v6++;
        v5 = v7;
      }
      while (v7);
    }
    if (v4 <= 1)
      v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  *a4 = 1;
  if (*(_DWORD *)(a1 + 24) != a3)
    return 0;
  v8 = *(uint64_t **)(a1 + 32);
  v9 = *v8;
  if (*v8)
  {
    while (!v4 || v9 != v4)
    {
      v10 = v8[2];
      v8 += 2;
      v9 = v10;
      if (!v10)
        goto LABEL_14;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (!v4)
  {
LABEL_17:
    v11 = 0;
    **(_DWORD **)(a1 + 40) = *((_DWORD *)v8 + 2);
    return v11;
  }
  return 4294954394;
}

void sub_1B67EE678()
{
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67EE68C(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 24) == a3
    && (free(**(void ***)(a1 + 32)), **(_QWORD **)(a1 + 32) = 0, a2)
    && (**(_QWORD **)(a1 + 32) = strdup(a2)) == 0)
  {
    return 4294954392;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B67EE700(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6A14C38;
  free(**(void ***)(a1 + 32));
  **(_QWORD **)(a1 + 32) = 0;
  return a1;
}

void sub_1B67EE740(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6A14C38;
  free(**(void ***)(a1 + 32));
  **(_QWORD **)(a1 + 32) = 0;
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67EE790(uint64_t a1, char *__s1, int a3, _BYTE *a4)
{
  int v8;
  char v9;

  *a4 = 0;
  if (__s1)
  {
    if (!strcmp(__s1, "0") || !strcmp(__s1, "false"))
    {
      v9 = 0;
    }
    else if (!strcmp(__s1, "1"))
    {
      v9 = 1;
    }
    else
    {
      v8 = strcmp(__s1, "true");
      v9 = 1;
      if (v8)
        goto LABEL_11;
    }
    *a4 = 1;
  }
  else
  {
    v9 = 1;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 24) == a3)
    **(_BYTE **)(a1 + 32) = v9;
  return 0;
}

_QWORD *sub_1B67EE854(_QWORD *result, uint64_t a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4;
  v9 = result;
  v10 = *a4;
  if (!*a4)
  {
LABEL_7:
    result = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
    if (!result)
      return result;
    result[1] = v9[1];
    result[2] = a2;
    *((_DWORD *)result + 6) = 0;
    *result = off_1E6A150C8;
    result[4] = v6;
    result[5] = a3;
    if (v10)
    {
      while (!a5 || v10 != a5)
      {
        v16 = v6[2];
        v6 += 2;
        v10 = v16;
        if (!v16)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if (a5)
      {
LABEL_14:
        v9[1] = result;
        return result;
      }
    }
    *a3 = *((_DWORD *)v6 + 2);
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *a4;
  while (1)
  {
    v13 = v11;
    v14 = a4;
    if (v11)
      break;
LABEL_6:
    ++v11;
    v12 = a4[2 * v11];
    if (!v12)
      goto LABEL_7;
  }
  while (1)
  {
    v15 = *v14;
    v14 += 2;
    if (v12 == v15)
      return result;
    if (!--v13)
      goto LABEL_6;
  }
}

uint64_t sub_1B67EE928(uint64_t a1, int a2, char *__filename)
{
  uint64_t v3;
  FILE *v5;
  FILE *v6;
  int v7;
  unint64_t v8;
  size_t v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  NSObject *v13;
  const char *v14;
  uint32_t v15;
  void *v17;
  void *v18;
  int v19;
  unsigned __int8 *v20;
  int v22;
  size_t v23;
  uint64_t v24;

  v3 = (uint64_t)__filename;
  v24 = *MEMORY[0x1E0C80C00];
  if (__filename)
  {
    if (*(_BYTE *)(a1 + 20))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294954394;
      LOWORD(v22) = 0;
      v13 = MEMORY[0x1E0C81028];
      v14 = "Config file within a config file not supported!\n";
      v15 = 2;
LABEL_23:
      _os_log_error_impl(&dword_1B676B000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v22, v15);
      return 4294954394;
    }
    *(_BYTE *)(a1 + 20) = 1;
    v5 = fopen(__filename, "r");
    if (!v5)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294954394;
      v22 = 136315138;
      v23 = v3;
      v13 = MEMORY[0x1E0C81028];
      v14 = "Unable to open config file '%s'\n";
      v15 = 12;
      goto LABEL_23;
    }
    v6 = v5;
    v7 = fseek(v5, 0, 2);
    v8 = MEMORY[0x1BCC984E8](v6);
    if (v7 || (v9 = v8) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v22) = 0;
        v10 = MEMORY[0x1E0C81028];
        v11 = "Unable to determine filesize\n";
        v12 = 2;
        goto LABEL_26;
      }
LABEL_14:
      v3 = 4294954386;
LABEL_15:
      fclose(v6);
      return v3;
    }
    if (v8 > 0x4000)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v22 = 134217984;
        v23 = v9;
        v10 = MEMORY[0x1E0C81028];
        v11 = "Config file unreasonably large (%zu)\n";
        v12 = 12;
LABEL_26:
        _os_log_error_impl(&dword_1B676B000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v22, v12);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
    v17 = operator new[](v8 + 1, MEMORY[0x1E0DE4E10]);
    if (!v17)
    {
      v3 = 4294954392;
      goto LABEL_15;
    }
    v18 = v17;
    fseek(v6, 0, 0);
    fread(v18, 1uLL, v9, v6);
    *((_BYTE *)v18 + v9) = 0;
    if (*(_BYTE *)v3)
    {
      v20 = (unsigned __int8 *)(v3 + 1);
      while (*v20++)
        ;
    }
    v3 = sub_1B67EEC28(a1, v19, (char *)v18);
    fclose(v6);
    MEMORY[0x1BCC9811C](v18, 0x1000C8077774924);
  }
  return v3;
}

_QWORD *sub_1B67EEBAC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, _QWORD), int a4)
{
  _QWORD *result;
  int v9;

  a3(a1, a2, 0);
  result = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (result)
  {
    result[1] = *(_QWORD *)(a1 + 8);
    result[2] = a2;
    *result = off_1E6A150F0;
    result[4] = a1;
    result[5] = a3;
    *((_DWORD *)result + 6) = a4;
    v9 = *(_DWORD *)(a1 + 16);
    if (v9 <= a4)
      v9 = a4;
    *(_DWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1B67EEC28(uint64_t a1, int a2, char *__s1)
{
  char *v3;
  int v4;
  char *v5;
  int v6;
  char *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *i;
  int v27;
  char v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  uint32_t v38;
  char *v40;
  int v41;
  char *__stringp;
  char *__s;
  void *__p[2];
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  _OWORD v50[64];
  _BYTE buf[24];
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!__s1)
  {
    v34 = 0;
    v3 = 0;
    goto LABEL_66;
  }
  v3 = strdup(__s1);
  if (!v3)
  {
    v34 = 4294954392;
    goto LABEL_66;
  }
  v4 = 0;
  __stringp = v3;
  __s = 0;
  v40 = v3;
  while (1)
  {
    v5 = strsep(&__stringp, "\r\n");
    __s = v5;
    if (!v5)
    {
      v34 = 0;
      goto LABEL_65;
    }
    while (1)
    {
      v6 = *v5;
      if (v6 != 32 && v6 != 9)
        break;
      __s = ++v5;
    }
    sub_1B67EF0E4(v5);
    v8 = __s;
    v9 = *__s;
    if (!*__s || v9 == 35)
      goto LABEL_58;
    if (v9 == 45)
      break;
    buf[0] = 0;
    v24 = strsep(&__s, ":");
    v25 = v24;
    if (!v24)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_64;
      LODWORD(v50[0]) = 136315394;
      *(_QWORD *)((char *)v50 + 4) = 0;
      WORD6(v50[0]) = 1024;
      *(_DWORD *)((char *)v50 + 14) = v4;
      v35 = MEMORY[0x1E0C81028];
      v36 = "%s:%d: Parse error (expected <option> : <argument>)\n";
      v37 = (uint8_t *)v50;
      v38 = 18;
      goto LABEL_68;
    }
    sub_1B67EF0E4(v24);
    for (i = __s; ; __s = i)
    {
      v27 = *i;
      if (v27 != 32 && v27 != 9)
        break;
      ++i;
    }
    v29 = *v25;
    v30 = 0xCBF29CE484222325;
    if (*v25)
    {
      v31 = (unsigned __int8 *)(v25 + 1);
      do
      {
        v30 = 0x100000001B3 * (v30 ^ v29);
        v32 = *v31++;
        v29 = v32;
      }
      while (v32);
    }
    if (v30 <= 1)
      v33 = 1;
    else
      v33 = v30;
    v34 = sub_1B67EF12C(*(_QWORD *)(a1 + 8), v33, i, 0, (uint64_t)buf);
    if ((_DWORD)v34)
      goto LABEL_65;
LABEL_58:
    ++v4;
  }
  v10 = 1;
  memset(v50, 0, 512);
  do
  {
    v11 = v10;
    while (1)
    {
      v12 = *v8++;
      if (v12 != 32 && v12 != 9)
        break;
      __s = v8;
    }
    *((_QWORD *)v50 + v11) = strsep(&__s, " \t");
    v10 = v11 + 1;
    v8 = __s;
  }
  while (v11 <= 0x7E && __s);
  if (!__s)
  {
    v41 = v4;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    if ((int)v10 >= 2)
    {
      v14 = 0;
      do
      {
        sub_1B6781C7C(__p, *((char **)v50 + v14 + 1));
        v15 = v48;
        if ((unint64_t)v48 >= v49)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v48[-v47] >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_1B6773BAC();
          if (0x5555555555555556 * ((uint64_t)(v49 - v47) >> 3) > v18)
            v18 = 0x5555555555555556 * ((uint64_t)(v49 - v47) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v47) >> 3) >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v18;
          v53 = &v49;
          if (v19)
            v19 = (unint64_t)sub_1B67EF48C(v19);
          else
            v20 = 0;
          v21 = v19 + 24 * v17;
          *(_QWORD *)buf = v19;
          *(_QWORD *)&buf[8] = v21;
          v52 = v19 + 24 * v20;
          v22 = *(_OWORD *)__p;
          *(_QWORD *)(v21 + 16) = v46;
          *(_OWORD *)v21 = v22;
          __p[1] = 0;
          v46 = 0;
          __p[0] = 0;
          *(_QWORD *)&buf[16] = v21 + 24;
          sub_1B67EF4D0(&v47, buf);
          v23 = v48;
          sub_1B67EF554((uint64_t)buf);
          v48 = v23;
          if (SHIBYTE(v46) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v16 = *(_OWORD *)__p;
          *((_QWORD *)v48 + 2) = v46;
          *v15 = v16;
          v48 = (char *)v15 + 24;
        }
        ++v14;
      }
      while (v11 != v14);
    }
    v34 = sub_1B67EF200(a1, &v47);
    *(_QWORD *)buf = &v47;
    sub_1B67EF5B4((void ***)buf);
    v4 = v41;
    if ((_DWORD)v34)
      goto LABEL_65;
    goto LABEL_58;
  }
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    goto LABEL_64;
  *(_DWORD *)buf = 136315650;
  *(_QWORD *)&buf[4] = 0;
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v4;
  *(_WORD *)&buf[18] = 1024;
  *(_DWORD *)&buf[20] = 128;
  v35 = MEMORY[0x1E0C81028];
  v36 = "%s:%d: Too many options (max %d)\n";
  v37 = buf;
  v38 = 24;
LABEL_68:
  _os_log_error_impl(&dword_1B676B000, v35, OS_LOG_TYPE_ERROR, v36, v37, v38);
LABEL_64:
  v34 = 4294954394;
LABEL_65:
  v3 = v40;
LABEL_66:
  free(v3);
  return v34;
}

void sub_1B67EF0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  __p = &a21;
  sub_1B67EF5B4((void ***)&__p);
  _Unwind_Resume(a1);
}

size_t sub_1B67EF0E4(const char *a1)
{
  size_t result;
  const char *i;
  int v4;

  result = strlen(a1);
  for (i = &a1[result - 1]; i > a1; --i)
  {
    v4 = *(unsigned __int8 *)i;
    if (v4 != 32 && v4 != 9)
      break;
    *i = 0;
  }
  return result;
}

uint64_t sub_1B67EF12C(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  BOOL v12;

  if (!a2
    && strlen(__s) >= 3
    && ((*__s << 16) | (__s[1] << 8) | __s[2]) == 0xE28094)
  {
    return 4294954394;
  }
  while (1)
  {
    if (!a1)
      return 0;
    v11 = *(_QWORD *)(a1 + 16);
    if (a2)
      break;
    if (!v11)
      return (**(uint64_t (***)(uint64_t, char *, uint64_t, uint64_t))a1)(a1, __s, a4, a5);
LABEL_14:
    a1 = *(_QWORD *)(a1 + 8);
  }
  if (v11)
    v12 = v11 == a2;
  else
    v12 = 0;
  if (!v12)
    goto LABEL_14;
  return (**(uint64_t (***)(uint64_t, char *, uint64_t, uint64_t))a1)(a1, __s, a4, a5);
}

uint64_t sub_1B67EF200(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  size_t v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t result;
  char *v19;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  BOOL v27;
  char v29;
  _BYTE __dst[1024];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 16);
  if ((v2 & 0x80000000) != 0)
    return 0;
  v5 = *a2;
  v4 = a2[1];
  while (1)
  {
    v6 = v4 - v5;
    if (v6)
      break;
    v4 = v5;
LABEL_43:
    v27 = (int)v2 <= 0;
    v2 = (v2 - 1);
    if (v27)
      return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  while (1)
  {
    v29 = 0;
    v10 = (_BYTE *)(v5 + 24 * v7);
    if ((char)v10[23] < 0)
      v10 = *(_BYTE **)v10;
    v11 = strlen(v10);
    if (v11)
      break;
LABEL_40:
    v7 = ++v8;
    v5 = *a2;
    v4 = a2[1];
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
    if (v9 <= v8)
      goto LABEL_43;
  }
  if (*v10 != 45)
  {
    result = sub_1B67EF12C(*(_QWORD *)(a1 + 8), 0, v10, v2, (uint64_t)&v29);
    if ((_DWORD)result)
      return result;
    goto LABEL_40;
  }
  v12 = &v10[v11];
  v13 = v11 - 1;
  do
  {
    if (!v13)
    {
      v17 = strchr(v12, 61);
      if (!v17)
        goto LABEL_40;
LABEL_17:
      if ((unint64_t)(v17 - v12) > 0x3FE)
        goto LABEL_40;
      v10 = __dst;
      memcpy(__dst, v12, v17 - v12);
      __dst[v17 - v12] = 0;
      LOBYTE(v14) = __dst[0];
      if (!__dst[0])
        goto LABEL_40;
      v19 = v17 + 1;
      v20 = 1;
      goto LABEL_26;
    }
    v15 = *++v10;
    v14 = v15;
    --v13;
  }
  while (v15 == 45);
  v16 = strchr(v10, 61);
  if (v16)
  {
    v17 = v16;
    v12 = v10;
    goto LABEL_17;
  }
  if (v9 <= v8 + 1)
  {
    v19 = 0;
  }
  else
  {
    v19 = (char *)(v5 + 24 * (v8 + 1));
    if (v19[23] < 0)
      v19 = *(char **)v19;
  }
  v20 = 0;
  v21 = 0xCBF29CE484222325;
  if (v14)
  {
LABEL_26:
    v22 = v10 + 1;
    v21 = 0xCBF29CE484222325;
    do
    {
      v21 = 0x100000001B3 * (v21 ^ (char)v14);
      v23 = *v22++;
      LOBYTE(v14) = v23;
    }
    while (v23);
  }
  if (v21 <= 1)
    v24 = 1;
  else
    v24 = v21;
  result = sub_1B67EF12C(*(_QWORD *)(a1 + 8), v24, v19, v2, (uint64_t)&v29);
  if (!(_DWORD)result)
  {
    if (v29)
      v25 = v20;
    else
      v25 = 1;
    if (v29)
      v26 = 0;
    else
      v26 = v20;
    if ((v26 & 1) == 0)
    {
      v8 += v25 ^ 1;
      goto LABEL_40;
    }
    return 4294954394;
  }
  return result;
}

void *sub_1B67EF48C(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_1B6773BF4();
  return operator new(24 * a1);
}

uint64_t *sub_1B67EF4D0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 24;
      v6 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B67EF554(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B67EF5B4(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1B67EF62C(_QWORD *result, uint64_t a2, _DWORD *a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = result;
  *a3 = a4;
  v7 = result[1];
  if (v7)
  {
    v8 = result[1];
    while (*(_QWORD *)(v8 + 16) != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14D10;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

uint64_t sub_1B67EF6AC(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) != a3)
    return 0;
  __endptr = 0;
  *__error() = 0;
  v6 = strtoll(a2, &__endptr, 10);
  if (*__error())
    return 4294954394;
  v7 = *__endptr || v6 < (uint64_t)0xFFFFFFFF80000000;
  if (v7 || v6 >= 0x80000000)
    return 4294954394;
  result = 0;
  **(_DWORD **)(a1 + 32) = v6;
  return result;
}

void sub_1B67EF758()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B67EF76C(_QWORD *result, uint64_t a2, _WORD *a3, __int16 a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = result;
  *a3 = a4;
  v7 = result[1];
  if (v7)
  {
    v8 = result[1];
    while (*(_QWORD *)(v8 + 16) != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14D68;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

uint64_t sub_1B67EF7EC(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -32768 && v6 < 0x8000)
    {
      result = 0;
      **(_WORD **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1B67EF894()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B67EF8A8(_QWORD *result, uint64_t a2, _BYTE *a3, char a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = result;
  *a3 = a4;
  v7 = result[1];
  if (v7)
  {
    v8 = result[1];
    while (*(_QWORD *)(v8 + 16) != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14C60;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

uint64_t sub_1B67EF928(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -128 && v6 < 128)
    {
      result = 0;
      **(_BYTE **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1B67EF9D0()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B67EF9E4(_QWORD *result, uint64_t a2, _BYTE *a3, char a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = result;
  *a3 = a4;
  v7 = result[1];
  if (v7)
  {
    v8 = result[1];
    while (*(_QWORD *)(v8 + 16) != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = &off_1E6A14C88;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1B67EFA68()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B67EFA7C(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  *a3 = 0;
  v6 = result[1];
  if (v6)
  {
    v7 = result[1];
    while (*(_QWORD *)(v7 + 16) != a2)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v6;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14C38;
      result[4] = a3;
      v5[1] = result;
    }
  }
  return result;
}

_QWORD *sub_1B67EFAFC(_QWORD *result, uint64_t a2, _DWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  *a3 = 0;
  v6 = result[1];
  if (v6)
  {
    v7 = result[1];
    while (*(_QWORD *)(v7 + 16) != a2)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v6;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14D40;
      result[4] = a3;
      v5[1] = result;
    }
  }
  return result;
}

uint64_t sub_1B67EFB7C(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  unint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
    {
      result = 0;
      **(_DWORD **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1B67EFC20()
{
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B67EFC34(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  unint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && v6 < 0x10000)
    {
      result = 0;
      **(_WORD **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1B67EFCD8()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B67EFCEC(_QWORD *result, uint64_t a2, float *a3, float a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = result;
  *a3 = a4;
  v7 = result[1];
  if (v7)
  {
    v8 = result[1];
    while (*(_QWORD *)(v8 + 16) != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14CE0;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

uint64_t sub_1B67EFD6C(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  double v6;
  uint64_t result;
  float v8;
  char *v9;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) != a3)
    return 0;
  v9 = 0;
  *__error() = 0;
  v6 = strtod(a2, &v9);
  if (*__error() || *v9 || v6 < -3.40282347e38 || v6 > 3.40282347e38)
    return 4294954394;
  result = 0;
  v8 = v6;
  **(float **)(a1 + 32) = v8;
  return result;
}

void sub_1B67EFE2C()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B67EFE40(_QWORD *result, uint64_t a2, double *a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = result;
  *a3 = a4;
  v7 = result[1];
  if (v7)
  {
    v8 = result[1];
    while (*(_QWORD *)(v8 + 16) != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *result = off_1E6A14CB8;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

uint64_t sub_1B67EFEC0(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  double v6;
  BOOL v7;
  uint64_t result;
  char *v10;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 24) != a3)
    return 0;
  v10 = 0;
  *__error() = 0;
  v6 = strtod(a2, &v10);
  if (*__error())
    return 4294954394;
  v7 = *v10 || v6 < -1.79769313e308;
  if (v7 || v6 > 1.79769313e308)
    return 4294954394;
  result = 0;
  **(double **)(a1 + 32) = v6;
  return result;
}

void sub_1B67EFF78()
{
  JUMPOUT(0x1BCC9814CLL);
}

void sub_1B67EFF8C(_QWORD *a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  char v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char v90;
  _OWORD v91[8];
  _OWORD v92[4];
  _OWORD v93[8];
  _OWORD v94[4];
  _DWORD v95[2];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v9 = a1[170];
  v90 = *(_BYTE *)(v9 + 284) - 8;
  bzero(a6, 0x280uLL);
  v87 = *(_QWORD *)(v9 + 488);
  v10 = a1[173];
  v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  v95[0] = v11;
  v95[1] = v10;
  memset(v94, 0, sizeof(v94));
  memset(v93, 0, sizeof(v93));
  memset(v92, 0, sizeof(v92));
  v83 = (a5 >> 3);
  v85 = a4;
  v80 = a5;
  v81 = a4 >> 3;
  memset(v91, 0, sizeof(v91));
  if (a5 >= 8)
  {
    v12 = 0;
    if (v81 <= 1)
      v13 = 1;
    else
      v13 = v81;
    if ((int)v83 <= 1)
      v14 = 1;
    else
      v14 = v83;
    v82 = v14;
    do
    {
      if (v85 >= 8)
      {
        v15 = 0;
        v16 = a3 + 8 * v12;
        v17 = *(_QWORD *)(v9 + 496) + 2 * (((uint64_t)a2 >> 3) + *(_QWORD *)(v9 + 488) * ((uint64_t)v16 >> 3));
        do
        {
          v18 = sub_1B67C8BC0(a1, (a2 + 8 + 8 * (int)v15) >> *(_BYTE *)(a1[171] + 2009), v16 >> *(_BYTE *)(a1[171] + 2009));
          v19 = *(char *)(v18 + 12);
          v20 = *(_BYTE *)(v18 + 13);
          v21 = v15 + 1;
          v22 = (*(__int16 *)(v17 + 2 * v15) >> 9) + (*(__int16 *)(v17 + 2 * (v15 + 1)) >> 9) + 1;
          *((_BYTE *)v94 + 8 * v15 + v12) = v20 + (v22 >> 1) - 2;
          v23 = v19 + (v22 >> 1);
          if (v23 >= 51)
            v23 = 51;
          if (v23 <= 15)
            v23 = 15;
          a6[8 * v15 + 512 + v12] = byte_1B692B685[v23 - 15] << v90;
          if ((v15 & 1) != 0)
          {
            v24 = 0;
            v25 = -*(unsigned __int8 *)(a1[171] + 2003);
            v26 = v20 + 2;
            v27 = 1;
            do
            {
              v28 = v27;
              v29 = (v22 + 2 * v95[v24]) >> 1;
              if (v29 >= 57)
                v30 = 57;
              else
                v30 = (v22 + 2 * v95[v24]) >> 1;
              if (v29 <= v25)
                v30 = v25;
              if (v30 >= 30)
                LOBYTE(v30) = byte_1B692B6F0[v30 - 30];
              v27 = 0;
              *((_BYTE *)&v93[4 * v24] + 8 * (v15 >> 1) + v12) = v26 + v30;
              v24 = 1;
            }
            while ((v28 & 1) != 0);
          }
          ++v15;
        }
        while (v21 != v13);
      }
      ++v12;
    }
    while (v12 != v82);
  }
  v32 = v83;
  v31 = a3;
  v33 = a3 == 0;
  if ((int)v83 <= v33)
  {
    v51 = v80;
  }
  else
  {
    v34 = a3 == 0;
    if (v81 <= 1)
      v35 = 1;
    else
      v35 = v81;
    v86 = v35;
    do
    {
      if (v85 >= 8)
      {
        v36 = 0;
        v37 = a3 + 8 * v34;
        v38 = *(_QWORD *)(v9 + 496) + 2 * (((uint64_t)a2 >> 3) + *(_QWORD *)(v9 + 488) * ((uint64_t)v37 >> 3));
        do
        {
          v39 = sub_1B67C8BC0(a1, (a2 + 8 * (int)v36) >> *(_BYTE *)(a1[171] + 2009), v37 >> *(_BYTE *)(a1[171] + 2009));
          v40 = *(char *)(v39 + 12);
          v41 = *(_BYTE *)(v39 + 13);
          v42 = (*(__int16 *)(v38 + 2 * (v36 - v87)) >> 9) + (*(__int16 *)(v38 + 2 * v36) >> 9) + 1;
          *((_BYTE *)v92 + 8 * v34 + v36) = v41 + (v42 >> 1) - 2;
          v43 = v40 + (v42 >> 1);
          if (v43 >= 51)
            v43 = 51;
          if (v43 <= 15)
            v43 = 15;
          a6[8 * v34 + 576 + v36] = byte_1B692B685[v43 - 15] << v90;
          if ((v34 & 1) == 0)
          {
            v44 = 0;
            v45 = -*(unsigned __int8 *)(a1[171] + 2003);
            v46 = v41 + 2;
            v47 = 1;
            do
            {
              v48 = v47;
              v49 = (v42 + 2 * v95[v44]) >> 1;
              if (v49 >= 57)
                v50 = 57;
              else
                v50 = (v42 + 2 * v95[v44]) >> 1;
              if (v49 <= v45)
                v50 = v45;
              if (v50 >= 30)
                LOBYTE(v50) = byte_1B692B6F0[v50 - 30];
              v47 = 0;
              *((_BYTE *)&v91[4 * v44] + 8 * (v34 >> 1) + v36) = v46 + v50;
              v44 = 1;
            }
            while ((v48 & 1) != 0);
          }
          ++v36;
        }
        while (v36 != v86);
      }
      ++v34;
      v32 = v83;
    }
    while (v34 != v83);
    v31 = a3;
    v51 = v80;
  }
  if (v85 >= 8)
  {
    v52 = 0;
    v53 = a6;
    LODWORD(v54) = v51 >> 2;
    if (v51 >> 2 <= 1)
      v54 = 1;
    else
      v54 = v54;
    if (v81 <= 1)
      v55 = 1;
    else
      v55 = v81;
    do
    {
      if (v51 >= 4)
      {
        v56 = 0;
        v57 = &a6[32 * (v52 >> 1) + 257];
        v58 = *(_QWORD *)(v9 + 640)
            + ((uint64_t)v31 >> 2)
            + *(_QWORD *)(v9 + 616) * ((uint64_t)(a2 + 8 + 8 * (int)v52) >> 3);
        do
        {
          if (*(_BYTE *)(v58 + v56))
          {
            v59 = *((char *)v94 + 8 * v52 + (v56 >> 1)) + 2 * *(unsigned __int8 *)(v58 + v56);
            if (v59 >= 53)
              v59 = 53;
            if (v59 <= 17)
              v59 = 17;
            v53[v56] = byte_1B692B6B6[v59 - 17] << v90;
          }
          ++v56;
        }
        while (v54 != v56);
        if ((v52 & 1) != 0)
        {
          v60 = 0;
          do
          {
            if (*(unsigned __int8 *)(v58 + v60) >= 2u)
            {
              v61 = (char *)v93 + 8 * (v52 >> 1) + (v60 >> 1);
              v62 = *v61;
              if (v62 >= 53)
                v62 = 53;
              if (v62 <= 17)
                v62 = 17;
              v63 = byte_1B692B6B6[v62 - 17];
              v64 = v61[64];
              if (v64 >= 53)
                v64 = 53;
              if (v64 <= 17)
                v64 = 17;
              v65 = byte_1B692B6B6[v64 - 17];
              *(v57 - 1) = v63 << v90;
              *v57 = v65 << v90;
            }
            ++v60;
            v57 += 2;
          }
          while (v54 != v60);
        }
      }
      ++v52;
      v53 += 16;
    }
    while (v52 != v55);
  }
  if ((int)v32 > v33)
  {
    v66 = v31 == 0;
    LODWORD(v67) = v85 >> 2;
    if (v85 >> 2 <= 1)
      v67 = 1;
    else
      v67 = v67;
    v68 = &a6[16 * (v31 == 0) + 128];
    do
    {
      if (v85 >= 4)
      {
        v69 = 0;
        v70 = v66 >> 1;
        v71 = &a6[32 * v70 + 385];
        v72 = *(_QWORD *)(v9 + 624) + ((uint64_t)a2 >> 2) + *(_QWORD *)(v9 + 608) * ((uint64_t)(v31 + 8 * (int)v66) >> 3);
        do
        {
          if (*(_BYTE *)(v72 + v69))
          {
            v73 = *((char *)v92 + 8 * v66 + (v69 >> 1)) + 2 * *(unsigned __int8 *)(v72 + v69);
            if (v73 >= 53)
              v73 = 53;
            if (v73 <= 17)
              v73 = 17;
            v68[v69] = byte_1B692B6B6[v73 - 17] << v90;
          }
          ++v69;
        }
        while (v67 != v69);
        if ((v66 & 1) == 0)
        {
          v74 = 0;
          do
          {
            if (*(unsigned __int8 *)(v72 + v74) >= 2u)
            {
              v75 = (char *)v91 + 8 * v70 + (v74 >> 1);
              v76 = *v75;
              if (v76 >= 53)
                v76 = 53;
              if (v76 <= 17)
                v76 = 17;
              v77 = byte_1B692B6B6[v76 - 17];
              v78 = v75[64];
              if (v78 >= 53)
                v78 = 53;
              if (v78 <= 17)
                v78 = 17;
              v79 = byte_1B692B6B6[v78 - 17];
              *(v71 - 1) = v77 << v90;
              *v71 = v79 << v90;
            }
            ++v74;
            v71 += 2;
          }
          while (v67 != v74);
        }
      }
      ++v66;
      v68 += 16;
    }
    while (v66 != v32);
  }
}

uint64_t sub_1B67F067C(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v9;
  unint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  BOOL v13;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char **v38;
  char *v39;

  a1[4] = sub_1B67F0BD4;
  a1[5] = sub_1B67EFF8C;
  a1[7] = sub_1B67F0EFC;
  a1[8] = sub_1B67F12DC;
  v3 = *(unsigned __int8 **)(a2 + 1368);
  v4 = v3[2000];
  if (v4 > 0xA)
    return 4294954386;
  v9 = v3[173];
  if (v9 < 2)
  {
    v11 = v9 == 0;
    if (v3[173])
      v12 = 0;
    else
      v12 = v4 == 8;
    if (v12)
    {
      a1[10] = sub_1B67F4CC4;
      a1[11] = sub_1B67F4D44;
      a1[12] = sub_1B67F4DB4;
      a1[13] = sub_1B67F4EBC;
      a1[14] = sub_1B67F4FDC;
      a1[15] = sub_1B67F5070;
      v17 = sub_1B67F6C40;
      if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19) && !v3[255])
        v17 = sub_1B67F6904;
      v13 = 0;
      v16 = sub_1B67F72B8;
      *a1 = v17;
      a1[1] = 0;
      if (a3)
        v16 = sub_1B67F70F4;
      v11 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v10 = atomic_load(&qword_1EF139180);
    if (v10 != -1)
    {
      v39 = &v37;
      v38 = &v39;
      std::__call_once(&qword_1EF139180, &v38, (void (__cdecl *)(void *))nullsub_21);
    }
    v11 = 0;
    v3 = *(unsigned __int8 **)(a2 + 1368);
    v4 = v3[2000];
    v9 = 1;
  }
  v13 = v9 == 1;
  if (v13 && v4 == 8)
  {
    a1[10] = sub_1B67F4CC4;
    a1[11] = sub_1B67F4D44;
    a1[12] = sub_1B67F4DB4;
    a1[13] = sub_1B67F4EBC;
    a1[14] = sub_1B67F4FDC;
    a1[15] = sub_1B67F5070;
    v15 = sub_1B67F55C4;
    if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19) && !v3[255])
      v15 = sub_1B67F50F8;
    v16 = sub_1B67F6044;
    *a1 = v15;
    a1[1] = 0;
    if (a3)
      v16 = sub_1B67F5D3C;
    v13 = 1;
LABEL_28:
    a1[2] = v16;
    a1[3] = 0;
  }
  v18 = *(_QWORD *)(a2 + 1368);
  v19 = *(unsigned __int8 *)(v18 + 2000);
  if (v11 && v19 == 9)
  {
    a1[10] = sub_1B67F4398;
    a1[11] = sub_1B67F4418;
    a1[12] = sub_1B67F448C;
    a1[13] = sub_1B67F4598;
    a1[14] = sub_1B67F46BC;
    a1[15] = sub_1B67F4750;
    v21 = sub_1B67F3A38;
    if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19) && !*(_BYTE *)(v18 + 255))
      v21 = sub_1B67F36FC;
    *a1 = v21;
    a1[1] = 0;
    v22 = sub_1B67F40C0;
    if (a3)
      v22 = sub_1B67F3EFC;
    a1[2] = v22;
    a1[3] = 0;
    v18 = *(_QWORD *)(a2 + 1368);
    v19 = *(unsigned __int8 *)(v18 + 2000);
  }
  v23 = !v13;
  if (v19 != 9)
    v23 = 1;
  if ((v23 & 1) == 0)
  {
    a1[10] = sub_1B67F4398;
    a1[11] = sub_1B67F4418;
    a1[12] = sub_1B67F448C;
    a1[13] = sub_1B67F4598;
    a1[14] = sub_1B67F46BC;
    a1[15] = sub_1B67F4750;
    v24 = sub_1B67F237C;
    if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19) && !*(_BYTE *)(v18 + 255))
      v24 = sub_1B67F1E8C;
    *a1 = v24;
    a1[1] = 0;
    v25 = sub_1B67F2E00;
    if (a3)
      v25 = sub_1B67F2AF8;
    a1[2] = v25;
    a1[3] = 0;
    v18 = *(_QWORD *)(a2 + 1368);
    v19 = *(unsigned __int8 *)(v18 + 2000);
  }
  v26 = !v11;
  if (v19 != 10)
    v26 = 1;
  if ((v26 & 1) == 0)
  {
    a1[10] = sub_1B67F1A4C;
    a1[11] = sub_1B67F1ACC;
    a1[12] = sub_1B67F1B40;
    a1[13] = sub_1B67F1C4C;
    a1[14] = sub_1B67F1D70;
    a1[15] = sub_1B67F1E04;
    v27 = sub_1B67F3A38;
    if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19) && !*(_BYTE *)(v18 + 255))
      v27 = sub_1B67F36FC;
    *a1 = v27;
    a1[1] = 0;
    v28 = sub_1B67F40C0;
    if (a3)
      v28 = sub_1B67F3EFC;
    a1[2] = v28;
    a1[3] = 0;
    v18 = *(_QWORD *)(a2 + 1368);
    v19 = *(unsigned __int8 *)(v18 + 2000);
  }
  v29 = !v13;
  if (v19 != 10)
    v29 = 1;
  if ((v29 & 1) == 0)
  {
    a1[10] = sub_1B67F1A4C;
    a1[11] = sub_1B67F1ACC;
    a1[12] = sub_1B67F1B40;
    a1[13] = sub_1B67F1C4C;
    a1[14] = sub_1B67F1D70;
    a1[15] = sub_1B67F1E04;
    v30 = sub_1B67F237C;
    if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19) && !*(_BYTE *)(v18 + 255))
      v30 = sub_1B67F1E8C;
    *a1 = v30;
    a1[1] = 0;
    if (a3)
      v31 = sub_1B67F2AF8;
    else
      v31 = sub_1B67F2E00;
    a1[2] = v31;
    a1[3] = 0;
    v18 = *(_QWORD *)(a2 + 1368);
  }
  a1[4] = sub_1B687D7A0;
  a1[5] = sub_1B687D2A0;
  a1[8] = sub_1B687DA30;
  v32 = *(unsigned __int8 *)(v18 + 2000);
  if (v32 == 10)
  {
    a1[10] = sub_1B687F330;
    a1[11] = sub_1B687F838;
    a1[12] = sub_1B687FCAC;
    a1[13] = sub_1B687FE50;
    v33 = sub_1B687FF3C;
    goto LABEL_72;
  }
  if (v32 == 8)
  {
    a1[10] = sub_1B687E070;
    a1[11] = sub_1B687E550;
    a1[12] = sub_1B687E980;
    a1[13] = sub_1B687EABC;
    a1[14] = sub_1B687EB48;
    v33 = sub_1B6880664;
LABEL_72:
    a1[15] = v33;
  }
  result = 0;
  v34 = 5;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 12))
    v34 = 4;
  v35 = 8;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 12))
    v35 = 7;
  v36 = a1[v35];
  a1[6] = a1[v34];
  a1[9] = v36;
  a1[16] = 0;
  return result;
}

void sub_1B67F0BD4(uint64_t a1, int a2, int a3, int a4, int a5, int8x16_t *a6)
{
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int8x16_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int8x16_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *i8;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  _BYTE v59[3];

  v12 = *(_QWORD *)(a1 + 1360);
  v13 = *(char *)(a1 + 629);
  v14 = *(char *)(a1 + 628);
  v15 = *(_BYTE *)(v12 + 284);
  bzero(a6, 0x280uLL);
  v16 = *(char *)(a1 + 621);
  v17 = *(_QWORD *)(a1 + 1384);
  v18 = *(char *)(v17 + 14) + v16;
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2003);
  v20 = -v19;
  if (v18 >= 57)
    v21 = 57;
  else
    v21 = *(char *)(v17 + 14) + v16;
  if (v18 <= v20)
    v22 = -v19;
  else
    v22 = v21;
  if (v22 >= 30)
    v22 = byte_1B692B6F0[v22 - 30];
  v23 = v15 - 8;
  v24 = *(char *)(v17 + 15) + v16;
  if (v24 >= 57)
    v25 = 57;
  else
    v25 = v24;
  if (v24 <= v20)
    v26 = v20;
  else
    v26 = v25;
  if (v26 >= 30)
    v26 = byte_1B692B6F0[v26 - 30];
  v27 = v16 + v14;
  if (v16 + v14 >= 51)
    v27 = 51;
  if (v27 <= 15)
    v27 = 15;
  v28 = byte_1B692B685[v27 - 15] << v23;
  v29 = v22 + v13;
  if (v29 >= 51)
    v29 = 51;
  if (v29 <= 15)
    v29 = 15;
  v30 = vdupq_n_s8(v28);
  a6[38] = v30;
  a6[39] = v30;
  a6[36] = v30;
  a6[37] = v30;
  a6[34] = v30;
  a6[35] = v30;
  a6[32] = v30;
  a6[33] = v30;
  v31 = byte_1B692B6B6[v29 - 15] << v23;
  v32 = v26 + v13;
  if (v32 >= 51)
    v32 = 51;
  if (v32 <= 15)
    v32 = 15;
  v33 = byte_1B692B6B6[v32 - 15] << v23;
  v59[0] = 0;
  v34 = v16 + v13;
  if (v34 >= 53)
    v35 = 53;
  else
    v35 = v34;
  if (v35 <= 17)
    v35 = 17;
  v59[1] = byte_1B692B6B6[v35 - 17] << v23;
  if (v34 >= 51)
    v34 = 51;
  if (v34 <= 15)
    v34 = 15;
  v59[2] = byte_1B692B6B6[v34 - 15] << v23;
  if (a4 >= 8)
  {
    v36 = 0;
    LODWORD(v37) = a5 >> 2;
    if (a5 >> 2 <= 1)
      v37 = 1;
    else
      v37 = v37;
    v38 = a6;
    do
    {
      if (a5 >= 4)
      {
        v39 = &a6[2 * (v36 >> 1) + 16].i8[1];
        v40 = (unsigned __int8 *)(*(_QWORD *)(v12 + 640)
                                + ((uint64_t)a3 >> 2)
                                + *(_QWORD *)(v12 + 616) * ((uint64_t)(a2 + 8 + 8 * (int)v36) >> 3));
        v41 = v40;
        v42 = v38;
        v43 = v37;
        do
        {
          v44 = *v41++;
          v42->i8[0] = v59[v44];
          v42 = (int8x16_t *)((char *)v42 + 1);
          --v43;
        }
        while (v43);
        v45 = v37;
        if ((v36 & 1) != 0)
        {
          do
          {
            v46 = *v40++;
            if (v46 >= 2)
            {
              *(v39 - 1) = v31;
              *v39 = v33;
            }
            v39 += 2;
            --v45;
          }
          while (v45);
        }
      }
      ++v36;
      ++v38;
    }
    while (v36 != a4 >> 3);
  }
  v47 = (a5 >> 3);
  if ((int)v47 > (a3 == 0))
  {
    v48 = a3 == 0;
    LODWORD(v49) = a4 >> 2;
    if (a4 >> 2 <= 1)
      v49 = 1;
    else
      v49 = v49;
    i8 = a6[(a3 == 0) + 8].i8;
    do
    {
      if (a4 >= 4)
      {
        v51 = &a6[2 * (v48 >> 1) + 24].i8[1];
        v52 = (unsigned __int8 *)(*(_QWORD *)(v12 + 624)
                                + ((uint64_t)a2 >> 2)
                                + *(_QWORD *)(v12 + 608) * ((uint64_t)(a3 + 8 * (int)v48) >> 3));
        v53 = v52;
        v54 = i8;
        v55 = v49;
        do
        {
          v56 = *v53++;
          *v54++ = v59[v56];
          --v55;
        }
        while (v55);
        v57 = v49;
        if ((v48 & 1) == 0)
        {
          do
          {
            v58 = *v52++;
            if (v58 >= 2)
            {
              *(v51 - 1) = v31;
              *v51 = v33;
            }
            v51 += 2;
            --v57;
          }
          while (v57);
        }
      }
      ++v48;
      i8 += 16;
    }
    while (v48 != v47);
  }
}

void sub_1B67F0EFC(uint64_t a1, int a2, int a3, int a4, int a5, int8x16_t *a6)
{
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int8x16_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  int v43;
  _BOOL8 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  char *v53;
  uint64_t v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  char *v69;
  uint64_t v70;
  int v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  char *v76;
  _BYTE v77[3];

  v12 = *(_QWORD *)(a1 + 1360);
  v13 = *(char *)(a1 + 629);
  v14 = *(char *)(a1 + 628);
  v15 = *(_BYTE *)(v12 + 284);
  bzero(a6, 0x2F0uLL);
  v16 = *(char *)(a1 + 621);
  v17 = *(_QWORD *)(a1 + 1384);
  v18 = *(char *)(v17 + 14) + v16;
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2003);
  v20 = -v19;
  if (v18 >= 57)
    v21 = 57;
  else
    v21 = *(char *)(v17 + 14) + v16;
  if (v18 <= v20)
    v22 = -v19;
  else
    v22 = v21;
  if (v22 >= 30)
    v22 = byte_1B692B6F0[v22 - 30];
  v23 = v15 - 8;
  v24 = *(char *)(v17 + 15) + v16;
  if (v24 >= 57)
    v25 = 57;
  else
    v25 = v24;
  if (v24 <= v20)
    v26 = v20;
  else
    v26 = v25;
  if (v26 >= 30)
    v26 = byte_1B692B6F0[v26 - 30];
  v27 = v16 + v14;
  if (v16 + v14 >= 51)
    v27 = 51;
  if (v27 <= 15)
    v27 = 15;
  v28 = vdupq_n_s8(byte_1B692B685[v27 - 15] << v23);
  a6[45] = v28;
  a6[46] = v28;
  a6[43] = v28;
  a6[44] = v28;
  a6[39] = v28;
  a6[40] = v28;
  a6[37] = v28;
  a6[38] = v28;
  v29 = v22 + v13;
  if (v29 >= 51)
    v29 = 51;
  if (v29 <= 15)
    v29 = 15;
  v30 = byte_1B692B6B6[v29 - 15];
  a6[41] = v28;
  a6[42] = v28;
  v31 = v30 << v23;
  v32 = v26 + v13;
  if (v32 >= 51)
    v32 = 51;
  if (v32 <= 15)
    v32 = 15;
  v33 = byte_1B692B6B6[v32 - 15] << v23;
  v77[0] = 0;
  v34 = v16 + v13;
  if (v34 >= 53)
    v35 = 53;
  else
    v35 = v34;
  if (v35 <= 17)
    v35 = 17;
  v36 = byte_1B692B6B6[v35 - 17] << v23;
  if (v34 >= 51)
    v34 = 51;
  if (v34 <= 15)
    v34 = 15;
  v37 = byte_1B692B6B6[v34 - 15];
  v77[1] = v36;
  v77[2] = v37 << v23;
  if (a2)
    v38 = -1;
  else
    v38 = 0;
  v39 = a4 + a2 < *(_DWORD *)(v12 + 276);
  v40 = (a4 >> 3);
  if ((int)v40 > (a2 == 0))
  {
    v41 = a2 == 0;
    v42 = a5 + a3 < *(_DWORD *)(v12 + 280);
    v43 = (a5 >> 2) - v42;
    v44 = a3 != 0;
    if (a3)
      v45 = -1;
    else
      v45 = 0;
    if (a3)
      v46 = -1;
    else
      v46 = 0;
    v47 = ((uint64_t)a5 >> 2) - v42 - v46;
    v48 = &a6->i8[20 * (a2 == 0) - v44 + 2];
    v49 = ((uint64_t)a3 >> 2) - v44;
    do
    {
      v50 = *(_QWORD *)(v12 + 616) * ((uint64_t)(a2 + 8 * (int)v41) >> 3);
      v51 = *(_QWORD *)(v12 + 640);
      if (v43 > v45)
      {
        v52 = (unsigned __int8 *)(v51 + v49 + v50);
        v53 = v48;
        v54 = v47;
        do
        {
          v55 = *v52++;
          *v53++ = v77[v55];
          --v54;
        }
        while (v54);
      }
      if ((v41 & 1) == 0 && v43 > v45)
      {
        v56 = (unsigned __int8 *)(v51 + v49 + v50);
        v57 = 2 * v45 + 3;
        v58 = v47;
        do
        {
          v59 = *v56++;
          if (v59 >= 2)
          {
            v60 = &a6[20].i8[34 * (v41 >> 1)];
            v60[v57 - 1] = v31;
            v60[v57] = v33;
          }
          v57 += 2;
          --v58;
        }
        while (v58);
      }
      ++v41;
      v48 += 20;
    }
    while (v41 != v40);
  }
  v61 = (a5 >> 3);
  if ((int)v61 > (a3 == 0))
  {
    v62 = (a4 >> 2) - v39;
    v63 = a3 == 0;
    v64 = &a6[10].i8[20 * v63 - (v38 & 1) + 2];
    v65 = ((uint64_t)a2 >> 2) - (v38 & 1);
    do
    {
      v66 = *(_QWORD *)(v12 + 608) * ((uint64_t)(a3 + 8 * (int)v63) >> 3);
      v67 = *(_QWORD *)(v12 + 624);
      if (v62 > v38)
      {
        v68 = (unsigned __int8 *)(v67 + v65 + v66);
        v69 = v64;
        v70 = (v38 & 1) + (uint64_t)v62;
        do
        {
          v71 = *v68++;
          *v69++ = v77[v71];
          --v70;
        }
        while (v70);
      }
      if ((v63 & 1) == 0 && v62 > v38)
      {
        v72 = (unsigned __int8 *)(v67 + v65 + v66);
        v73 = 2 * v38 + 3;
        v74 = (v38 & 1) + (uint64_t)v62;
        do
        {
          v75 = *v72++;
          if (v75 >= 2)
          {
            v76 = &a6[28].i8[34 * (v63 >> 1) + 8];
            v76[v73 - 1] = v31;
            v76[v73] = v33;
          }
          v73 += 2;
          --v74;
        }
        while (v74);
      }
      ++v63;
      v64 += 20;
    }
    while (v63 != v61);
  }
}

void sub_1B67F12DC(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  char *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  _BOOL4 v96;
  int v97;
  _BOOL4 v98;
  char v99;
  int v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  int v105;
  int v106;
  _BOOL8 v107;
  int v108;
  uint64_t v109;
  _BYTE v111[432];
  _DWORD v112[2];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 1360);
  v99 = *(_BYTE *)(a1 + 629);
  v12 = v99 + 2;
  v13 = *(char *)(a1 + 628);
  v14 = *(_BYTE *)(v11 + 284) - 8;
  bzero(a6, 0x2F0uLL);
  v15 = *(_QWORD *)(v11 + 488);
  v16 = *(_QWORD *)(a1 + 1384);
  v17 = *(char *)(v16 + 14);
  if (a2)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = 0;
  v104 = v18;
  v105 = a3;
  if (a3)
    v19 = 0xFFFFFFFFLL;
  else
    v19 = 0;
  v106 = a2;
  v97 = a5;
  v98 = a4 + a2 < *(_DWORD *)(v11 + 276);
  v103 = (_QWORD *)v11;
  v20 = *(_DWORD *)(v11 + 280);
  v21 = *(char *)(v16 + 15);
  v112[0] = v17;
  v112[1] = v21;
  v96 = a5 + a3 < v20;
  v101 = a4;
  v22 = (a4 >> 3);
  v108 = v19;
  v109 = (a5 >> 3);
  if ((int)v109 > (int)v19)
  {
    v107 = a2 == 0;
    v102 = (uint64_t)a2 >> 3;
    v23 = v19 << 63 >> 63;
    do
    {
      v24 = v23 + 1;
      if ((int)v22 > v107)
      {
        v25 = v103[64] + 2 * (v102 + v103[61] * ((uint64_t)(a3 + 8 * (int)v23) >> 3));
        v26 = v107;
        do
        {
          v27 = (*(__int16 *)(v25 + 2 * v26 - 2) >> 9) + (*(__int16 *)(v25 + 2 * v26) >> 9) + 1;
          v111[9 * v26 + 360 + v24] = v99 - 2 + (v27 >> 1);
          v28 = v13 + (v27 >> 1);
          if (v28 >= 51)
            v28 = 51;
          if (v28 <= 15)
            v28 = 15;
          a6[10 * v26 + 592 + v24] = byte_1B692B685[v28 - 15] << v14;
          if ((v26 & 1) == 0)
          {
            v29 = 0;
            v30 = -*(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2003);
            v31 = 1;
            do
            {
              v32 = v31;
              v33 = (v27 + 2 * v112[v29]) >> 1;
              if (v33 >= 57)
                v34 = 57;
              else
                v34 = (v27 + 2 * v112[v29]) >> 1;
              if (v33 <= v30)
                v34 = v30;
              if (v34 >= 30)
                LOBYTE(v34) = byte_1B692B6F0[v34 - 30];
              v31 = 0;
              v111[72 * v29 + 144 + 9 * (v26 >> 1) + v24] = v34 + v12;
              v29 = 1;
            }
            while ((v32 & 1) != 0);
          }
          ++v26;
        }
        while (v26 != v22);
      }
      v23 = v24;
    }
    while (v24 != v109);
  }
  v35 = a3;
  v100 = a3 == 0;
  if ((int)v109 > v100)
  {
    v36 = a3 == 0;
    do
    {
      if ((int)v22 > (int)v18)
      {
        v37 = v18 << 63 >> 63;
        v38 = v103[64] + 2 * (((uint64_t)v106 >> 3) + v103[61] * ((uint64_t)(v105 + 8 * (int)v36) >> 3));
        do
        {
          v39 = (*(__int16 *)(v38 + 2 * (v37 - v15)) >> 9) + (*(__int16 *)(v38 + 2 * v37) >> 9) + 1;
          ++v37;
          v111[9 * v36 + 288 + v37] = v99 - 2 + (v39 >> 1);
          v40 = v13 + (v39 >> 1);
          if (v40 >= 51)
            v40 = 51;
          if (v40 <= 15)
            v40 = 15;
          a6[10 * v36 + 672 + v37] = byte_1B692B685[v40 - 15] << v14;
          if ((v36 & 1) == 0)
          {
            v41 = 0;
            v42 = -*(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2003);
            v43 = 1;
            do
            {
              v44 = v43;
              v45 = (v39 + 2 * v112[v41]) >> 1;
              if (v45 >= 57)
                v46 = 57;
              else
                v46 = (v39 + 2 * v112[v41]) >> 1;
              if (v45 <= v42)
                v46 = v42;
              if (v46 >= 30)
                LOBYTE(v46) = byte_1B692B6F0[v46 - 30];
              v43 = 0;
              v111[72 * v41 + 9 * (v36 >> 1) + v37] = v46 + v12;
              v41 = 1;
            }
            while ((v44 & 1) != 0);
          }
        }
        while (v37 != (uint64_t)v101 >> 3);
      }
      ++v36;
    }
    while (v36 != v109);
    v35 = v105;
  }
  if ((int)v22 > (v106 == 0))
  {
    v47 = (v97 >> 2) - v96;
    v48 = v106 == 0;
    v49 = &a6[20 * v48];
    v50 = ((uint64_t)v35 >> 2) - (v108 & 1);
    do
    {
      v51 = v103[77] * ((uint64_t)(v106 + 8 * (int)v48) >> 3);
      v52 = v103[80];
      if (v47 > v108)
      {
        v53 = (unsigned __int8 *)(v52 + v50 + v51);
        v54 = 2 - (v108 & 1);
        v55 = (v108 & 1) + (uint64_t)v47;
        do
        {
          v57 = *v53++;
          v56 = v57;
          if (v57)
          {
            v58 = (char)v111[9 * v48 + 360 + ((int)v54 >> 1)] + 2 * v56;
            if (v58 >= 53)
              v58 = 53;
            if (v58 <= 17)
              v58 = 17;
            v49[v54] = byte_1B692B6B6[v58 - 17] << v14;
          }
          ++v54;
          --v55;
        }
        while (v55);
      }
      if ((v48 & 1) == 0 && v47 > v108)
      {
        v59 = v48 >> 1;
        v60 = (unsigned __int8 *)(v52 + v50 + v51);
        v61 = v108 + 2;
        v62 = 2 * v108 + 3;
        v63 = (v108 & 1) + (uint64_t)v47;
        do
        {
          v64 = *v60++;
          if (v64 >= 2)
          {
            v65 = &v111[9 * v59 + 144 + (v61 >> 1)];
            v66 = *v65;
            if (v66 >= 53)
              v66 = 53;
            if (v66 <= 17)
              v66 = 17;
            v67 = byte_1B692B6B6[v66 - 17];
            v68 = v65[72];
            if (v68 >= 53)
              v68 = 53;
            if (v68 <= 17)
              v68 = 17;
            v69 = byte_1B692B6B6[v68 - 17];
            v70 = &a6[34 * v59 + 320];
            v70[v62 - 1] = v67 << v14;
            v70[v62] = v69 << v14;
          }
          v62 += 2;
          ++v61;
          --v63;
        }
        while (v63);
      }
      ++v48;
      v49 += 20;
    }
    while (v48 != v22);
  }
  if ((int)v109 > v100)
  {
    v71 = (v101 >> 2) - v98;
    v72 = v35 == 0;
    v73 = &a6[20 * v72 - (v104 & 1) + 162];
    v74 = ((uint64_t)v106 >> 2) - (v104 & 1);
    do
    {
      v75 = v103[76] * ((uint64_t)(v35 + 8 * (int)v72) >> 3);
      v76 = v103[78];
      if (v71 > v104)
      {
        v77 = (unsigned __int8 *)(v76 + v74 + v75);
        v78 = v104 + 2;
        v79 = v73;
        v80 = (v104 & 1) + (uint64_t)v71;
        do
        {
          v82 = *v77++;
          v81 = v82;
          if (v82)
          {
            v83 = (char)v111[9 * v72 + 288 + (v78 >> 1)] + 2 * v81;
            if (v83 >= 53)
              v83 = 53;
            if (v83 <= 17)
              v83 = 17;
            *v79 = byte_1B692B6B6[v83 - 17] << v14;
          }
          ++v79;
          ++v78;
          --v80;
        }
        while (v80);
      }
      if ((v72 & 1) == 0 && v71 > v104)
      {
        v84 = v72 >> 1;
        v85 = (unsigned __int8 *)(v76 + v74 + v75);
        v86 = v104 + 2;
        v87 = 2 * v104 + 3;
        v88 = (v104 & 1) + (uint64_t)v71;
        do
        {
          v89 = *v85++;
          if (v89 >= 2)
          {
            v90 = &v111[9 * v84 + (v86 >> 1)];
            v91 = *v90;
            if (v91 >= 53)
              v91 = 53;
            if (v91 <= 17)
              v91 = 17;
            v92 = byte_1B692B6B6[v91 - 17];
            v93 = v90[72];
            if (v93 >= 53)
              v93 = 53;
            if (v93 <= 17)
              v93 = 17;
            v94 = byte_1B692B6B6[v93 - 17];
            v95 = &a6[34 * v84 + 456];
            v95[v87 - 1] = v92 << v14;
            v95[v87] = v94 << v14;
          }
          v87 += 2;
          ++v86;
          --v88;
        }
        while (v88);
      }
      ++v72;
      v73 += 20;
    }
    while (v72 != v109);
  }
}

_WORD *sub_1B67F1A4C(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;
  int v12;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      v12 = *a4++;
      result = sub_1B67F3210(v9, a2, 1, *(unsigned __int8 *)(a3 + (v10 >> 3)), v12);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1B67F1ACC(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  _WORD *v9;
  int i;
  int v11;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      v11 = *a4++;
      result = sub_1B67F3210(v9, 1, a2, *(unsigned __int8 *)(a3 + (i >> 3)), v11);
      v9 += 4;
    }
  }
  return result;
}

unsigned __int16 *sub_1B67F1B40(unsigned __int16 *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t i;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      v5 = *(unsigned __int8 *)(a3 + (i & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (i & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        v6 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        v7 = *(result - 2);
        v8 = *result;
        v9 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 >= v6)
          v10 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        else
          v10 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 <= -v6)
          v11 = -v6;
        else
          v11 = v10;
        v12 = v11 + v7;
        if (v11 + v7 >= 1023)
          v12 = 1023;
        *(result - 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        v13 = v8 - v11;
        if (v13 >= 1023)
          v13 = 1023;
        *result = v13 & ~(unsigned __int16)(v13 >> 31);
      }
      if ((v5 & 0x80) == 0)
      {
        v14 = *(result - 1);
        v15 = result[1];
        v16 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 >= v5)
          v17 = v5;
        else
          v17 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 <= -v5)
          v18 = -v5;
        else
          v18 = v17;
        v19 = v18 + v14;
        if (v18 + v14 >= 1023)
          v19 = 1023;
        *(result - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
        v20 = v15 - v18;
        if (v20 >= 1023)
          v20 = 1023;
        result[1] = v20 & ~(unsigned __int16)(v20 >> 31);
      }
      result += a2;
    }
  }
  return result;
}

unint64_t sub_1B67F1C4C(unint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = -1 * a2;
    v6 = (_WORD *)(result + 2);
    v7 = a4;
    v8 = a2;
    v9 = -2 * a2;
    do
    {
      v10 = *(unsigned __int8 *)(a3 + (v4 & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (v4 & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        v11 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        result = (unint64_t)&v6[v5];
        v12 = (unsigned __int16)v6[v5 - 1];
        v13 = (unsigned __int16)*(v6 - 1);
        v14 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        if (v14 >= v11)
          v15 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        else
          v15 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        if (v14 <= -v11)
          v16 = -v11;
        else
          v16 = v15;
        v17 = v16 + v12;
        if (v16 + v12 >= 1023)
          v17 = 1023;
        *(_WORD *)(result - 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v18 = v13 - v16;
        if (v18 >= 1023)
          v18 = 1023;
        *(v6 - 1) = v18 & ~(unsigned __int16)(v18 >> 31);
      }
      if ((v10 & 0x80) == 0)
      {
        v19 = (unsigned __int16)v6[v5];
        result = (unsigned __int16)*v6;
        v20 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        if (v20 >= v10)
          v21 = v10;
        else
          v21 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        if (v20 <= -v10)
          v22 = -v10;
        else
          v22 = v21;
        v23 = v22 + v19;
        if (v22 + v19 >= 1023)
          v23 = 1023;
        v6[v5] = v23 & ~(unsigned __int16)(v23 >> 31);
        v24 = result - v22;
        if (v24 >= 1023)
          v24 = 1023;
        *v6 = v24 & ~(unsigned __int16)(v24 >> 31);
      }
      ++v4;
      v6 += 2;
    }
    while (v7 != v4);
  }
  return result;
}

_WORD *sub_1B67F1D70(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  _WORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = 8 * a2;
    v10 = a3;
    v11 = a4;
    do
    {
      sub_1B67F3210(v7, a2, 2, v10, v11);
      result = sub_1B67F3210(v7 + 1, a2, 2, v10, v11);
      v8 += 4;
      v7 = (_WORD *)((char *)v7 + v9);
    }
    while (v8 < a5);
  }
  return result;
}

_WORD *sub_1B67F1E04(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  _WORD *v7;
  int v8;
  unsigned int v9;
  int v10;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = a3;
    v10 = a4;
    do
    {
      sub_1B67F3210(v7, 2, a2, v9, v10);
      result = sub_1B67F3210(v7 + 1, 2, a2, v9, v10);
      v8 += 4;
      v7 += 8;
    }
    while (v8 < a5);
  }
  return result;
}

uint64_t sub_1B67F1E8C(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  int v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t *v101;
  int v102;
  _BOOL8 v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  _BOOL8 v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  int *v116;
  int v117;
  _DWORD *v118;
  uint64_t vars0;
  uint64_t *vars8;
  uint64_t v121;
  uint64_t v122;
  signed int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;

  v65 = a3;
  v66 = result;
  v67 = *(_QWORD *)(a2 + 1360);
  v117 = *(_DWORD *)(v67 + 276);
  v69 = *(_QWORD *)(v67 + 112);
  v68 = *(_QWORD *)(v67 + 120);
  v70 = *a3;
  v118 = (_DWORD *)v67;
  if (*a3 < *(_DWORD *)(v67 + 280))
  {
    v70 &= 0xFFFFFFF0;
    *a3 = v70;
  }
  v71 = *(_DWORD *)(result + 128);
  if (v71 < v70)
  {
    v124 = (v117 - 1) & 0xFFFFFFC0;
    vars8 = &a49;
    v121 = 16 * v69;
    v72 = 16 * v68;
    v116 = v65;
    v122 = v68;
    vars0 = 16 * v68;
    do
    {
      v73 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v118 + 16))(v118, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v118 + 16))(v118, 0, (*(int *)(v66 + 128) >> 1), 1);
      v130 = result;
      v74 = *(_DWORD *)(v66 + 128);
      v75 = *v65 - v74;
      if (v75 >= 64)
        v76 = 64;
      else
        v76 = v75;
      v126 = ((int)v76 >> 3);
      v127 = (((int)v76 + 8) >> 4);
      v125 = v76;
      v77 = 0;
      if (v124 >= 1)
      {
        v78 = ((int)v76 >> 1);
        do
        {
          v128 = v77;
          (*(void (**)(uint64_t))(v66 + 48))(a2);
          v79 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v66 + 80))(v73 + i, v69, (char *)&STACK[0x5C0] + v79, (char *)&STACK[0x5C0] + i - 528, v76);
            v79 += 8;
          }
          v81 = *(_DWORD *)(v66 + 128);
          v82 = v69;
          if ((int)v126 > (v81 == 0))
          {
            v83 = v81 == 0;
            v84 = v126 - v83;
            v85 = &a33 + 2 * v83;
            v86 = &STACK[0x600] + v83;
            v87 = v73 + v121 * v83;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v66 + 88))(v87, v82, v86, v85, 64);
              v85 += 2;
              ++v86;
              v87 += v121;
              --v84;
            }
            while (v84);
          }
          v69 = v82;
          v88 = 0;
          do
          {
            v89 = v88 + 32;
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v66 + 96))(v88 + 32 + v130, v122, (char *)&a49 + v88, v78);
            v88 = v89;
          }
          while (v89 != 128);
          v90 = *(_DWORD *)(v66 + 128);
          v72 = vars0;
          if ((int)v127 > (v90 == 0))
          {
            v91 = v90 == 0;
            v92 = v127 - v91;
            v93 = &a65 + 4 * v91;
            v94 = v130 + vars0 * v91;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 104))(v94, v122, v93, 32);
              v93 += 4;
              v94 += vars0;
              --v92;
            }
            while (v92);
          }
          v73 += 128;
          v130 += 128;
          v77 = v128 + 64;
          v76 = v125;
        }
        while (v128 + 64 < v124);
        v74 = *(_DWORD *)(v66 + 128);
      }
      v95 = v117 - v77;
      if (v117 != v77)
      {
        result = (*(uint64_t (**)(uint64_t))(v66 + 48))(a2);
        v129 = v95;
        v96 = v69;
        if (v95 >= 16)
        {
          v97 = v76;
          v98 = v73 + 16;
          v99 = (v129 >> 3) - 1;
          v100 = &a17;
          v101 = &STACK[0x5C0];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v66 + 80))(v98, v96, v101, v100, v97);
            v100 += 16;
            ++v101;
            v98 += 16;
            --v99;
          }
          while (v99);
        }
        v102 = *(_DWORD *)(v66 + 128);
        v69 = v96;
        if ((int)v126 > (v102 == 0))
        {
          v103 = v102 == 0;
          v104 = v126 - v103;
          v105 = &a33 + 2 * v103;
          v106 = &STACK[0x600] + v103;
          v107 = v73 + v121 * v103;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v66 + 88))(v107, v96, v106, v105, v129);
            v105 += 2;
            ++v106;
            v107 += v121;
            --v104;
          }
          while (v104);
        }
        if (v129 >= 24)
        {
          v108 = v130 + 32;
          v109 = ((v129 + 8) >> 4) - 1;
          v110 = &a49;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v66 + 96))(v108, v122, v110, (v125 >> 1));
            v110 += 4;
            v108 += 32;
            --v109;
          }
          while (v109);
        }
        v74 = *(_DWORD *)(v66 + 128);
        LODWORD(v76) = v125;
        if ((int)v127 > (v74 == 0))
        {
          v111 = v74 == 0;
          v112 = v127 - v111;
          v113 = &a65 + 4 * v111;
          v114 = v130 + v72 * v111;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v66 + 104))(v114, v122, v113, (v129 >> 1));
            v113 += 4;
            v114 += v72;
            --v112;
          }
          while (v112);
          v74 = *(_DWORD *)(v66 + 128);
          LODWORD(v76) = v125;
        }
      }
      v71 = v74 + v76;
      *(_DWORD *)(v66 + 128) = v71;
      v65 = v116;
    }
    while (v71 < *v116);
  }
  v115 = v118[70];
  if (v115 >= v71)
    v115 = v71;
  *v65 = v115;
  if (*(_DWORD *)(v66 + 128) < v118[70])
  {
    if (v115 <= 4)
      v115 = 4;
    *v65 = v115 - 4;
  }
  return result;
}

uint64_t sub_1B67F237C(uint64_t result, uint64_t a2, int *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *__dst, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, int a20,int a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  int v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t i;
  int v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t *v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BOOL8 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t *v131;
  int v132;
  _BOOL8 v133;
  uint64_t v134;
  uint64_t *v135;
  unint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  int v141;
  _BOOL8 v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  int v147;
  _DWORD *v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  signed int v158;
  int v159;
  _OWORD *__dsta;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  uint64_t v168;

  v70 = a3;
  v71 = result;
  v72 = *(_QWORD *)(a2 + 1360);
  v147 = *(_DWORD *)(v72 + 276);
  v73 = *(_QWORD *)(v72 + 112);
  v74 = *(_QWORD *)(v72 + 120);
  v75 = *a3;
  v148 = (_DWORD *)v72;
  if (*a3 < *(_DWORD *)(v72 + 280))
  {
    v75 &= 0xFFFFFFF0;
    *a3 = v75;
  }
  v76 = *(_DWORD *)(result + 128);
  if (v76 < v75)
  {
    v158 = (v147 - 1) & 0xFFFFFFC0;
    v151 = v74;
    vars0 = &a56;
    __dsta = (_OWORD *)(a2 + 4392);
    v149 = v70;
    v154 = 16 * v74;
    v155 = 16 * v73;
    vars8 = v73;
    do
    {
      v77 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v148 + 16))(v148, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v148 + 16))(v148, 0, (*(int *)(v71 + 128) >> 1), 1);
      v78 = *(unsigned int *)(v71 + 128);
      v79 = *v70 - v78;
      if (v79 >= 64)
        v80 = 64;
      else
        v80 = v79;
      if ((_DWORD)v78)
        v81 = (v78 - 8);
      else
        v81 = 0;
      v82 = v80 + 8;
      if ((_DWORD)v78)
        v83 = v82;
      else
        v83 = v80;
      v159 = v80;
      v163 = v81;
      v168 = v83;
      v161 = ((int)v80 >> 3);
      v162 = (v82 >> 4);
      v84 = 0;
      if (v158 >= 1)
      {
        v85 = ((int)v80 >> 1);
        v156 = (int)v81 >> 1;
        v150 = ((int)v83 >> 1);
        v86 = a2;
        do
        {
          v164 = result;
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v71 + 48))(v86, v84, *(unsigned int *)(v71 + 128), 64, v80, &a24);
          v166 = v84;
          v87 = (_OWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v86 + 1360) + 16))(*(_QWORD *)(v86 + 1360), v84, v81, 0);
          v88 = v81;
          if ((int)v83 >= 1)
          {
            v89 = 2 * *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
            v90 = __dsta;
            do
            {
              *v90 = *v87;
              v91 = v87[1];
              v92 = v87[2];
              v93 = v87[4];
              v90[3] = v87[3];
              v90[4] = v93;
              v90[1] = v91;
              v90[2] = v92;
              v94 = v87[5];
              v95 = v87[6];
              v96 = v87[8];
              v90[7] = v87[7];
              v90[8] = v96;
              v90[5] = v94;
              v90[6] = v95;
              v87 = (_OWORD *)((char *)v87 + v89);
              v90 += 9;
              --v83;
            }
            while (v83);
          }
          v97 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v71 + 80))(v77 + i, vars8, (char *)&STACK[0x600] + v97, (char *)&STACK[0x600] + i - 528, v80);
            v97 += 8;
          }
          sub_1B67C8A6C(a2, v166, v88, 72, v168, 0);
          v99 = *(_DWORD *)(v71 + 128);
          if ((int)v161 > (v99 == 0))
          {
            v100 = v99 == 0;
            v101 = v161 - v100;
            v102 = &a40 + 2 * v100;
            v103 = &STACK[0x640] + v100;
            v104 = v77 + v155 * v100;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v71 + 88))(v104, vars8, v103, v102, 64);
              v102 += 2;
              ++v103;
              v104 += v155;
              --v101;
            }
            while (v101);
          }
          sub_1B67C8A6C(a2, v166, v163, 72, v168, 0);
          v105 = (_OWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 1360) + 16))(*(_QWORD *)(a2 + 1360), v166 >> 1, v156, 1);
          if ((int)v168 >= 2)
          {
            v106 = 2 * *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 120);
            v107 = __dsta;
            v108 = v150;
            do
            {
              *v107 = *v105;
              v109 = v105[1];
              v110 = v105[2];
              v111 = v105[4];
              v107[3] = v105[3];
              v107[4] = v111;
              v107[1] = v109;
              v107[2] = v110;
              v112 = v105[5];
              v113 = v105[6];
              v114 = v105[8];
              v107[7] = v105[7];
              v107[8] = v114;
              v107[5] = v112;
              v107[6] = v113;
              v105 = (_OWORD *)((char *)v105 + v106);
              v107 += 9;
              --v108;
            }
            while (v108);
          }
          v115 = 0;
          v74 = v151;
          do
          {
            v116 = v115 + 32;
            (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(v71 + 96))(v115 + 32 + v164, v151, (char *)&a56 + v115, v85);
            v115 = v116;
          }
          while (v116 != 128);
          sub_1B67C8A6C(a2, v166, v163, 72, v168, 1);
          v117 = *(_DWORD *)(v71 + 128);
          if ((int)v162 > (v117 == 0))
          {
            v118 = v117 == 0;
            v119 = v162 - v118;
            v120 = &a70 + 4 * v118;
            v121 = v164 + v154 * v118;
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v71 + 104))(v121, v151, v120, 32);
              v120 += 4;
              v121 += v154;
              --v119;
            }
            while (v119);
          }
          v83 = v168;
          v86 = a2;
          v81 = v163;
          sub_1B67C8A6C(a2, v166, v163, 72, v168, 1);
          v77 += 128;
          result = v164 + 128;
          v84 = v166 + 64;
          v80 = v159;
        }
        while ((int)v84 < v158);
        v78 = *(unsigned int *)(v71 + 128);
        v70 = v149;
      }
      if (v147 != (_DWORD)v84)
      {
        v165 = result;
        v157 = (v147 - v84);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(a2, v84, v78);
        v167 = v84;
        v122 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a2 + 1360) + 16))(*(_QWORD *)(a2 + 1360), v84, v81, 0);
        if ((int)v83 >= 1)
        {
          v123 = (char *)v122;
          v124 = v168;
          v125 = 2 * (int)v157;
          v126 = 2 * *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
          v127 = (char *)__dsta;
          do
          {
            memcpy(v127, v123, v125);
            v123 += v126;
            v127 += v125;
            --v124;
          }
          while (v124);
        }
        if ((int)v157 >= 16)
        {
          v128 = v77 + 16;
          v129 = (v157 >> 3) - 1;
          v130 = &a24;
          v131 = &STACK[0x600];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, _QWORD))(v71 + 80))(v128, vars8, v131, v130, v159);
            v130 += 16;
            ++v131;
            v128 += 16;
            --v129;
          }
          while (v129);
        }
        sub_1B67C8A6C(a2, v167, v163, v157, v168, 0);
        v132 = *(_DWORD *)(v71 + 128);
        if ((int)v161 > (v132 == 0))
        {
          v133 = v132 == 0;
          v134 = v161 - v133;
          v135 = &a40 + 2 * v133;
          v136 = &STACK[0x640] + v133;
          v137 = v77 + v155 * v133;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v71 + 88))(v137, vars8, v136, v135, v157);
            v135 += 2;
            ++v136;
            v137 += v155;
            --v134;
          }
          while (v134);
        }
        sub_1B67C8A6C(a2, v167, v163, v157, v168, 0);
        sub_1B67C8888(a2, v167, v163, v157, v168, 1);
        LODWORD(v80) = v159;
        if ((int)v157 >= 24)
        {
          v138 = v165 + 32;
          v139 = ((v157 + 8) >> 4) - 1;
          v140 = &a56;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v71 + 96))(v138, v74, v140, (v159 >> 1));
            v140 += 4;
            v138 += 32;
            --v139;
          }
          while (v139);
        }
        sub_1B67C8A6C(a2, v167, v163, v157, v168, 1);
        v141 = *(_DWORD *)(v71 + 128);
        if ((int)v162 > (v141 == 0))
        {
          v142 = v141 == 0;
          v143 = v162 - v142;
          v144 = &a70 + 4 * v142;
          v145 = v165 + v154 * v142;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v71 + 104))(v145, v74, v144, ((int)v157 >> 1));
            v144 += 4;
            v145 += v154;
            --v143;
          }
          while (v143);
        }
        result = sub_1B67C8A6C(a2, v167, v163, v157, v168, 1);
        LODWORD(v78) = *(_DWORD *)(v71 + 128);
        v70 = v149;
      }
      v76 = v78 + v80;
      *(_DWORD *)(v71 + 128) = v76;
    }
    while (v76 < *v70);
  }
  v146 = v148[70];
  if (v146 >= v76)
    v146 = v76;
  *v70 = v146;
  if (*(_DWORD *)(v71 + 128) < v148[70])
  {
    if (v146 <= 4)
      v146 = 4;
    *v70 = v146 - 4;
  }
  return result;
}

uint64_t sub_1B67F2AF8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  _WORD v51[380];

  v5 = *(_DWORD **)(a2 + 1360);
  v6 = v5[69];
  v7 = v5[70];
  v8 = *(_QWORD *)(a2 + 1368);
  v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(_BYTE *)(v8 + 2009);
  v10 = (a3 << v8);
  v11 = (a4 << v8);
  v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v6)
    v13 = (v6 - v10);
  else
    v13 = v9;
  if ((int)(v10 + v9) >= v6)
    v14 = (((v6 - (int)v10) >> 1) + 2);
  else
    v14 = v12;
  if ((int)(v11 + v9) >= v7)
    v15 = v7 - v11;
  else
    v15 = v9;
  if ((int)(v11 + v9) >= v7)
    v16 = (((v7 - (int)v11) >> 1) + 2);
  else
    v16 = v12;
  v50 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 72))(a2, v10, v11, v13);
  v44 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, v10, v11, 0);
  v47 = v5;
  v17 = *((_QWORD *)v5 + 14);
  v49 = v10;
  v45 = v13;
  v46 = v10 == 0;
  v18 = ((int)v13 >> 3);
  if ((int)v18 > v46)
  {
    v19 = v18 - ((_DWORD)v10 == 0);
    v20 = &v51[10 * (v49 == 0)];
    v21 = &v51[5 * (v49 == 0) + 296];
    v22 = v44 - 16 * v17 + 16 * (v49 == 0);
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 80))(v22, v17, v21, v20, (v50 + 8));
      v20 += 10;
      v21 += 5;
      v22 += 16;
      --v19;
    }
    while (v19);
  }
  v23 = v11 == 0;
  v24 = (v50 >> 3);
  v48 = v11;
  if ((int)v24 <= v23)
  {
    LODWORD(v26) = v45 + 8;
  }
  else
  {
    v25 = (_DWORD)v11 == 0;
    v26 = (v45 + 8);
    v27 = v24 - v25;
    v28 = &v51[10 * v25 + 80];
    v29 = &v51[5 * v25 + 336];
    v30 = v44 + 16 * v17 * v25 - 16;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v30, v17, v29, v28, v26);
      v28 += 10;
      v29 += 5;
      v30 += 16 * v17;
      --v27;
    }
    while (v27);
    v23 = v11 == 0;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v47 + 16))(v47, (v49 >> 1), ((int)v11 >> 1), 1);
  v32 = result;
  v33 = v47[15];
  v34 = ((int)v26 >> 4);
  if ((int)v34 > v46)
  {
    v35 = v49 == 0;
    v36 = v34 - v35;
    v37 = &v51[17 * v35 + 160];
    v38 = result - 4 * v33 + 32 * v35;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v38, v33, v37, v16);
      v37 += 17;
      v38 += 32;
      --v36;
    }
    while (v36);
  }
  v39 = ((v50 + 8) >> 4);
  if ((int)v39 > v23)
  {
    v40 = v48 == 0;
    v41 = v39 - v40;
    v42 = &v51[17 * v40 + 228];
    v43 = v32 + 16 * v33 * v40 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 104))(v43, v33, v42, v14);
      v42 += 17;
      v43 += 16 * v33;
      --v41;
    }
    while (v41);
  }
  return result;
}

uint64_t sub_1B67F2E00(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unint64_t *vars0;
  unint64_t *vars8;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  _BOOL4 v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;

  v61 = result;
  v62 = *(_QWORD *)(a2 + 1360);
  v63 = *(_DWORD *)(v62 + 276);
  v64 = *(_DWORD *)(v62 + 280);
  v65 = *(_QWORD *)(v62 + 112);
  v66 = *(_QWORD *)(v62 + 120);
  v129 = v62;
  v67 = *(_QWORD *)(a2 + 1368);
  v68 = *(unsigned __int8 *)(v67 + 2013);
  v69 = *(_BYTE *)(v67 + 2009);
  v70 = a3 << v69;
  v71 = a4 << v69;
  v72 = (a4 << v69) - 16;
  if (*(_DWORD *)(v67 + 2016) - 1 == a3)
  {
    v73 = v71 < 16;
    if (v71 >= 16)
      v74 = v72;
    else
      v74 = 0;
    if (!v73)
      v72 = 0;
    v75 = v72 + v68;
    if (v70 <= 63)
      v76 = 0;
    else
      v76 = (v70 - 1) & 0xFFFFFFC0;
    v119 = v76;
    v77 = v63 - v76;
    *(_DWORD *)(result + 128) = v74 + v75 - 8;
    v108 = v74;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4)
    {
      v75 = v64 - v74;
      *(_DWORD *)(result + 128) = v64;
    }
  }
  else
  {
    if (!a3 || (v70 & 0x3F) != 0)
      return result;
    v78 = v71 < 16;
    if (v71 >= 16)
      v79 = v72;
    else
      v79 = 0;
    if (!v78)
      v72 = 0;
    v80 = v72 + v68;
    if (v70 >= 64)
      v81 = v70 - 64;
    else
      v81 = 0;
    v119 = v81;
    if (v70 >= 64)
      v77 = 64;
    else
      v77 = v70;
    v108 = v79;
    v82 = v64 - v79;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4)
      v75 = v82;
    else
      v75 = v80;
  }
  if (v75 >= 1)
  {
    v83 = 0;
    vars0 = &STACK[0x680];
    v124 = 16 * v65;
    v84 = 16 * v66;
    v117 = v77;
    v118 = v63;
    v109 = v75;
    do
    {
      v110 = v83;
      if (v75 - v83 >= 64)
        v85 = 64;
      else
        v85 = (v75 - v83);
      if (v77 >= 1)
      {
        v86 = 0;
        v87 = v83 + v108 == 0;
        v123 = v110 + v108;
        v122 = ((int)v85 >> 3);
        v116 = v122 - v87;
        v121 = (((int)v85 + 8) >> 4);
        v114 = v121 - v87;
        v115 = v124 * v87;
        v113 = v84 * v87;
        v130 = v110 + v108 == 0;
        vars8 = &STACK[0x600] + 4 * v87;
        do
        {
          if (v77 - v86 >= 64)
            v88 = 64;
          else
            v88 = (v77 - v86);
          v128 = v86;
          v89 = v86 + v119;
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v61 + 48))(a2, v89, v123, v88, v85, &a29);
          v126 = v89;
          v90 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v129 + 16))(v129, v89, v123, 0);
          v91 = v90;
          v125 = (int)v88 + (int)v89 < v63;
          LODWORD(v92) = (int)v88 >> 3;
          if ((int)v88 + (int)v89 >= v63)
            v92 = v92;
          else
            v92 = (v92 + 1);
          if ((int)v92 >= 2)
          {
            v93 = v92 - 1;
            v94 = v90 + 16;
            v95 = &a29;
            v96 = &STACK[0x680];
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 80))(v94, v65, v96, v95, v85);
              v95 += 16;
              ++v96;
              v94 += 16;
              --v93;
            }
            while (v93);
          }
          if ((int)v122 > v130)
          {
            v97 = v116;
            v98 = v91 + v115;
            v99 = &STACK[0x6C0] + (v110 + v108 == 0);
            v100 = &a45 + 2 * (v110 + v108 == 0);
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 88))(v98, v65, v99, v100, v88);
              v100 += 2;
              ++v99;
              v98 += v124;
              --v97;
            }
            while (v97);
          }
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v129 + 16))(v129, (v126 >> 1), ((v110 + v108) >> 1), 1);
          v127 = result;
          v101 = (v125 + (((int)v88 + 8) >> 4));
          v84 = 16 * v66;
          if ((int)v101 >= 2)
          {
            v102 = v101 - 1;
            v103 = result + 32;
            v104 = &a61;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v61 + 96))(v103, v66, v104, ((int)v85 >> 1));
              v104 += 4;
              v103 += 32;
              --v102;
            }
            while (v102);
          }
          if ((int)v121 > v130)
          {
            v105 = v127 + v113;
            v106 = vars8;
            v107 = v114;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, _QWORD))(v61 + 104))(v105, v66, v106, ((int)v88 >> 1));
              v106 += 4;
              v105 += 16 * v66;
              --v107;
            }
            while (v107);
          }
          v86 = v128 + 64;
          v77 = v117;
          v63 = v118;
        }
        while (v128 + 64 < v117);
      }
      v75 = v109;
      v83 = v110 + 64;
    }
    while (v110 + 64 < v109);
  }
  return result;
}

_WORD *sub_1B67F3210(_WORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  signed int v70;
  __int16 v71;
  signed int v72;
  unsigned int v73;
  signed int v74;
  signed int v75;
  signed int v76;
  __int16 v77;
  signed int v78;
  unsigned int v79;
  signed int v80;
  signed int v81;
  unsigned int v82;
  int v83;
  signed int v84;
  signed int v85;
  signed int v86;
  signed int v87;
  __int16 v88;
  __int16 v89;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = -v17;
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8))
      goto LABEL_37;
    v22 = (unsigned __int16)result[-4 * a3] - v6;
    if (v22 < 0)
      v22 = v6 - (unsigned __int16)result[-4 * a3];
    v23 = (unsigned __int16)result[3 * a3] - v11;
    if (v23 < 0)
      v23 = v11 - (unsigned __int16)result[3 * a3];
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      v25 = 1;
    }
    else
    {
      v24 = v6 - v11;
      if (v24 < 0)
        v24 = -v24;
      v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17))
      goto LABEL_49;
    v26 = v14[3 * a3];
    v27 = v14[-4 * a3] - v16;
    if (v27 < 0)
      v27 = -v27;
    v28 = v26 - v19;
    if (v28 < 0)
      v28 = -v28;
    if (v27 + v28 >= a4 >> 3)
      goto LABEL_49;
    v29 = v16 - v19;
    if (v16 - v19 < 0)
      v29 = v19 - v16;
    if (v29 >= (5 * a5 + 1) >> 1)
      v25 = 1;
    if (v25)
    {
LABEL_49:
      v30 = v17 + v8;
      v31 = (a4 + (a4 >> 1)) >> 3;
      v32 = a5 >> 1;
      v33 = -(a5 >> 1);
      v34 = 4;
      do
      {
        v35 = (unsigned __int16)result[-2 * a3];
        v36 = (unsigned __int16)result[-a3];
        v37 = (unsigned __int16)*result;
        v38 = (unsigned __int16)result[a3];
        v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0)
          v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        else
          v40 = -v39;
        if (v40 < 10 * a5)
        {
          if (v39 >= a5)
            v42 = a5;
          else
            v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          if (v39 <= -a5)
            v43 = -a5;
          else
            v43 = v42;
          v44 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32)
            v45 = a5 >> 1;
          else
            v45 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 <= v33)
            v46 = -(a5 >> 1);
          else
            v46 = v45;
          v47 = v46 + v35;
          if (v47 >= 1023)
            v47 = 1023;
          v48 = v47 & ~(v47 >> 31);
          if (v30 < v31)
            LOWORD(v35) = v48;
          v41 = (unsigned __int16)result[v9];
          v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32)
            v50 = a5 >> 1;
          else
            v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 <= v33)
            v51 = -(a5 >> 1);
          else
            v51 = v50;
          v52 = v51 + v38;
          if (v52 >= 1023)
            v52 = 1023;
          v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31)
            LOWORD(v38) = v53;
          v54 = v43 + v36;
          if (v54 >= 1023)
            v54 = 1023;
          v55 = v54 & ~(v54 >> 31);
          v56 = v37 - v43;
          if (v56 >= 1023)
            v56 = 1023;
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *result = v56 & ~(unsigned __int16)(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v34;
      }
      while (v34);
    }
    else
    {
      v57 = 2 * a5;
      v58 = 2 * a2;
      v59 = 4;
      do
      {
        v60 = (unsigned __int16)result[-3 * a3];
        v61 = (unsigned __int16)result[-2 * a3];
        v62 = (unsigned __int16)result[-a3];
        v63 = (unsigned __int16)result[a3];
        v64 = (unsigned __int16)result[v9];
        v65 = (unsigned __int16)result[3 * a3];
        LOWORD(v66) = v57 + v60;
        v67 = (unsigned __int16)*result;
        v68 = v67 + v62;
        v69 = v61 + 4;
        v70 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 < v57 + v60)
          v66 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 <= v60 - v57)
          v71 = v60 - v57;
        else
          v71 = v66;
        result[-3 * a3] = v71;
        v72 = v61 - v57;
        LOWORD(v73) = v57 + v61;
        v74 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 < v57 + v61)
          v73 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 > v72)
          LOWORD(v72) = v73;
        result[-2 * a3] = v72;
        v75 = v62 - v57;
        v76 = (v60 + 2 * v62 + 2 * v61 + 2 * v67 + v63 + 4) >> 3;
        if (v76 >= v57 + v62)
          v77 = v57 + v62;
        else
          v77 = v76;
        if (v76 > v75)
          LOWORD(v75) = v77;
        result[-a3] = v75;
        v78 = v67 - v57;
        LOWORD(v79) = v57 + v67;
        v80 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 < v57 + v67)
          v79 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 > v78)
          LOWORD(v78) = v79;
        *result = v78;
        v81 = v63 - v57;
        LOWORD(v82) = v57 + v63;
        v83 = v64 + v63 + v68;
        v84 = (v83 + 2) >> 2;
        if (v84 < v57 + v63)
          v82 = (v83 + 2) >> 2;
        if (v84 > v81)
          LOWORD(v81) = v82;
        result[a3] = v81;
        v85 = v64 - v57;
        v86 = v57 + v64;
        v87 = (v83 + 2 * v64 + 2 * v65 + 4) >> 3;
        if (v87 >= v86)
          v88 = v86;
        else
          v88 = v87;
        if (v87 <= v85)
          v89 = v85;
        else
          v89 = v88;
        result[v9] = v89;
        result = (_WORD *)((char *)result + v58);
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

uint64_t sub_1B67F36FC(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t i;
  int v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t *v50;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  int v56;
  int *v57;
  int v58;
  _DWORD *v59;
  signed int v61;
  uint64_t vars0;
  int vars8_4;
  unsigned int vars8_4a;

  v25 = a3;
  v26 = result;
  v27 = *(_QWORD *)(a2 + 1360);
  v58 = *(_DWORD *)(v27 + 276);
  v28 = *(_QWORD *)(v27 + 112);
  v29 = *a3;
  v59 = (_DWORD *)v27;
  if (*a3 < *(_DWORD *)(v27 + 280))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  v30 = *(_DWORD *)(result + 128);
  if (v30 < v29)
  {
    v61 = (v58 - 1) & 0xFFFFFFC0;
    v31 = 16 * v28;
    v57 = v25;
    do
    {
      v32 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v59 + 16))(v59, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v59 + 16))(v59, 0, (*(int *)(v26 + 128) >> 1), 1);
      v33 = *(_DWORD *)(v26 + 128);
      v34 = *v25 - v33;
      if (v34 >= 64)
        v35 = 64;
      else
        v35 = v34;
      v36 = (int)v35 >> 3;
      vars0 = ((int)v35 >> 3);
      v37 = 0;
      if (v61 >= 1)
      {
        do
        {
          vars8_4 = v37;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          v38 = 0;
          for (i = 16; i != 144; i += 16)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 80))(v32 + i, v28, (char *)&STACK[0x540] + v38, (char *)&STACK[0x540] + i - 528, v35);
            v38 += 8;
          }
          v40 = *(_DWORD *)(v26 + 128);
          if (v36 > (v40 == 0))
          {
            v41 = v40 == 0;
            v42 = vars0 - v41;
            v43 = &a25 + 2 * v41;
            v44 = &STACK[0x580] + v41;
            v45 = v32 + v31 * v41;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 88))(v45, v28, v44, v43, 64);
              v43 += 2;
              ++v44;
              v45 += v31;
              --v42;
            }
            while (v42);
          }
          v32 += 128;
          v37 = vars8_4 + 64;
          v36 = (int)v35 >> 3;
        }
        while (vars8_4 + 64 < v61);
        v33 = *(_DWORD *)(v26 + 128);
      }
      v46 = v58 - v37;
      if (v58 != v37)
      {
        result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        vars8_4a = v46;
        if (v46 >= 16)
        {
          v47 = v32 + 16;
          v48 = (v46 >> 3) - 1;
          v49 = &a9;
          v50 = &STACK[0x540];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 80))(v47, v28, v50, v49, v35);
            v49 += 16;
            ++v50;
            v47 += 16;
            --v48;
          }
          while (v48);
        }
        v33 = *(_DWORD *)(v26 + 128);
        if ((int)vars0 > (v33 == 0))
        {
          v51 = v33 == 0;
          v52 = vars0 - v51;
          v53 = &a25 + 2 * v51;
          v54 = &STACK[0x580] + v51;
          v55 = v32 + v31 * v51;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v26 + 88))(v55, v28, v54, v53, vars8_4a);
            v53 += 2;
            ++v54;
            v55 += v31;
            --v52;
          }
          while (v52);
          v33 = *(_DWORD *)(v26 + 128);
        }
      }
      v30 = v33 + v35;
      *(_DWORD *)(v26 + 128) = v30;
      v25 = v57;
    }
    while (v30 < *v57);
  }
  v56 = v59[70];
  if (v56 >= v30)
    v56 = v30;
  *v25 = v56;
  if (*(_DWORD *)(v26 + 128) < v59[70])
  {
    if (v56 <= 4)
      v56 = 4;
    *v25 = v56 - 4;
  }
  return result;
}

uint64_t sub_1B67F3A38(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t i;
  int v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t *v69;
  int v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  int v76;
  int *v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  signed int vars0_4;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;

  v29 = a3;
  v30 = a2;
  v31 = result;
  v32 = *(_QWORD *)(a2 + 1360);
  v78 = *(_DWORD *)(v32 + 276);
  v33 = *(_QWORD *)(v32 + 112);
  v34 = *a3;
  v79 = (_DWORD *)v32;
  if (*a3 < *(_DWORD *)(v32 + 280))
  {
    v34 &= 0xFFFFFFF0;
    *a3 = v34;
  }
  v35 = *(_DWORD *)(result + 128);
  if (v35 < v34)
  {
    vars0_4 = (v78 - 1) & 0xFFFFFFC0;
    v82 = (_OWORD *)(a2 + 4392);
    v36 = 16 * v33;
    v77 = v29;
    do
    {
      v37 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v79 + 16))(v79, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v79 + 16))(v79, 0, (*(int *)(v31 + 128) >> 1), 1);
      v38 = *(unsigned int *)(v31 + 128);
      v39 = *v29 - v38;
      if (v39 >= 64)
        v40 = 64;
      else
        v40 = v39;
      if ((_DWORD)v38)
        v41 = (v38 - 8);
      else
        v41 = 0;
      if ((_DWORD)v38)
        v42 = (v40 + 8);
      else
        v42 = v40;
      v86 = ((int)v40 >> 3);
      v87 = v42;
      v85 = v41;
      v43 = 0;
      if (vars0_4 >= 1)
      {
        do
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v31 + 48))(v30, v43, *(unsigned int *)(v31 + 128), 64, v40, &a13);
          v88 = v43;
          v44 = (_OWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v30 + 1360) + 16))(*(_QWORD *)(v30 + 1360), v43, v41, 0);
          if ((int)v42 >= 1)
          {
            v45 = 2 * *(_QWORD *)(*(_QWORD *)(v30 + 1360) + 112);
            v46 = v82;
            do
            {
              *v46 = *v44;
              v47 = v44[1];
              v48 = v44[2];
              v49 = v44[4];
              v46[3] = v44[3];
              v46[4] = v49;
              v46[1] = v47;
              v46[2] = v48;
              v50 = v44[5];
              v51 = v44[6];
              v52 = v44[8];
              v46[7] = v44[7];
              v46[8] = v52;
              v46[5] = v50;
              v46[6] = v51;
              v44 = (_OWORD *)((char *)v44 + v45);
              v46 += 9;
              --v42;
            }
            while (v42);
          }
          v53 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v31 + 80))(v37 + i, v33, (char *)&STACK[0x580] + v53, (char *)&STACK[0x580] + i - 528, v40);
            v53 += 8;
          }
          sub_1B67C8A6C(v30, v88, v41, 72, v87, 0);
          v55 = *(_DWORD *)(v31 + 128);
          if ((int)v86 > (v55 == 0))
          {
            v56 = v55 == 0;
            v57 = v86 - v56;
            v58 = &a29 + 2 * v56;
            v59 = &STACK[0x5C0] + v56;
            v60 = v37 + v36 * v56;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v31 + 88))(v60, v33, v59, v58, 64);
              v58 += 2;
              ++v59;
              v60 += v36;
              --v57;
            }
            while (v57);
          }
          v30 = a2;
          v41 = v85;
          v42 = v87;
          result = sub_1B67C8A6C(a2, v88, v85, 72, v87, 0);
          v37 += 128;
          v43 = (v88 + 64);
        }
        while ((int)v43 < vars0_4);
        v38 = *(unsigned int *)(v31 + 128);
      }
      if (v78 != (_DWORD)v43)
      {
        v81 = (v78 - v43);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, v43, v38);
        v89 = v43;
        v61 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v30 + 1360) + 16))(*(_QWORD *)(v30 + 1360), v43, v41, 0);
        if ((int)v42 >= 1)
        {
          v62 = (char *)v61;
          v63 = (char *)v82;
          v64 = 2 * (int)v81;
          v80 = 2 * *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
          v65 = v87;
          do
          {
            memcpy(v63, v62, v64);
            v62 += v80;
            v63 += v64;
            --v65;
          }
          while (v65);
        }
        if ((int)v81 >= 16)
        {
          v66 = v37 + 16;
          v67 = (v81 >> 3) - 1;
          v68 = &a13;
          v69 = &STACK[0x580];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v31 + 80))(v66, v33, v69, v68, v40);
            v68 += 16;
            ++v69;
            v66 += 16;
            --v67;
          }
          while (v67);
        }
        sub_1B67C8A6C(a2, v89, v85, v81, v87, 0);
        v70 = *(_DWORD *)(v31 + 128);
        if ((int)v86 > (v70 == 0))
        {
          v71 = v70 == 0;
          v72 = v86 - v71;
          v73 = &a29 + 2 * v71;
          v74 = &STACK[0x5C0] + v71;
          v75 = v37 + v36 * v71;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v31 + 88))(v75, v33, v74, v73, v81);
            v73 += 2;
            ++v74;
            v75 += v36;
            --v72;
          }
          while (v72);
        }
        v30 = a2;
        result = sub_1B67C8A6C(a2, v89, v85, v81, v87, 0);
        LODWORD(v38) = *(_DWORD *)(v31 + 128);
      }
      v35 = v38 + v40;
      *(_DWORD *)(v31 + 128) = v35;
      v29 = v77;
    }
    while (v35 < *v77);
  }
  v76 = v79[70];
  if (v76 >= v35)
    v76 = v35;
  *v29 = v76;
  if (*(_DWORD *)(v31 + 128) < v79[70])
  {
    if (v76 <= 4)
      v76 = 4;
    *v29 = v76 - 4;
  }
  return result;
}

uint64_t sub_1B67F3EFC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  _WORD v29[380];

  v5 = *(_QWORD *)(a2 + 1360);
  v6 = *(_DWORD *)(v5 + 276);
  v7 = *(_DWORD *)(v5 + 280);
  v8 = *(_QWORD *)(a2 + 1368);
  v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(_BYTE *)(v8 + 2009);
  v10 = (a3 << v8);
  v11 = (a4 << v8);
  if ((int)(v10 + v9) >= v6)
    v12 = (v6 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v7)
    v13 = (v7 - v11);
  else
    v13 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 72))(a2, v10, v11, v12, v13, v29);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, v10, v11, 0);
  v28 = result;
  v15 = *(_QWORD *)(v5 + 112);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v29[10 * ((_DWORD)v10 == 0)];
    v19 = &v29[5 * ((_DWORD)v10 == 0) + 296];
    v20 = result - 16 * v15 + 16 * ((_DWORD)v10 == 0);
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 80))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v29[10 * v22 + 80];
    v26 = &v29[5 * v22 + 336];
    v27 = v28 + 16 * v15 * v22 - 16;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1B67F40C0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t vars8;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;

  v33 = result;
  v34 = *(_QWORD *)(a2 + 1360);
  v35 = *(_DWORD *)(v34 + 276);
  v36 = *(_DWORD *)(v34 + 280);
  v78 = v34;
  v37 = *(_QWORD *)(v34 + 112);
  v38 = *(_QWORD *)(a2 + 1368);
  v39 = *(unsigned __int8 *)(v38 + 2013);
  v40 = *(_BYTE *)(v38 + 2009);
  v41 = a3 << v40;
  v42 = a4 << v40;
  v43 = (a4 << v40) - 16;
  if (*(_DWORD *)(v38 + 2016) - 1 == a3)
  {
    v44 = v42 < 16;
    if (v42 >= 16)
      v45 = v43;
    else
      v45 = 0;
    if (!v44)
      v43 = 0;
    v46 = v43 + v39;
    if (v41 <= 63)
      v47 = 0;
    else
      v47 = (v41 - 1) & 0xFFFFFFC0;
    v77 = v47;
    v48 = v35 - v47;
    *(_DWORD *)(result + 128) = v45 + v46 - 8;
    v70 = v45;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4)
    {
      v46 = v36 - v45;
      *(_DWORD *)(result + 128) = v36;
    }
  }
  else
  {
    if (!a3 || (v41 & 0x3F) != 0)
      return result;
    v49 = v42 < 16;
    if (v42 >= 16)
      v50 = v43;
    else
      v50 = 0;
    if (!v49)
      v43 = 0;
    v51 = v43 + v39;
    if (v41 >= 64)
      v52 = v41 - 64;
    else
      v52 = 0;
    v77 = v52;
    if (v41 >= 64)
      v48 = 64;
    else
      v48 = v41;
    v70 = v50;
    v53 = v36 - v50;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4)
      v46 = v53;
    else
      v46 = v51;
  }
  if (v46 >= 1)
  {
    v54 = 0;
    v55 = 16 * v37;
    v75 = v48;
    v76 = v35;
    v71 = v46;
    do
    {
      v72 = v54;
      if (v46 - v54 >= 64)
        v56 = 64;
      else
        v56 = (v46 - v54);
      if (v48 >= 1)
      {
        v57 = 0;
        v81 = v54 + v70;
        v58 = v54 + v70 == 0;
        v80 = ((int)v56 >> 3);
        vars8 = v80 - v58;
        v73 = v55 * v58;
        do
        {
          if (v48 - v57 >= 64)
            v59 = 64;
          else
            v59 = (v48 - v57);
          v60 = v57 + v77;
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v33 + 48))(a2, v60, v81, v59, v56, &a17);
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v78 + 16))(v78, v60, v81, 0);
          v82 = result;
          LODWORD(v61) = (int)v59 >> 3;
          if ((int)v59 + (int)v60 >= v35)
            v61 = v61;
          else
            v61 = (v61 + 1);
          if ((int)v61 >= 2)
          {
            v62 = v61 - 1;
            v63 = result + 16;
            v64 = &a17;
            v65 = &STACK[0x5C0];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v33 + 80))(v63, v37, v65, v64, v56);
              v64 += 16;
              ++v65;
              v63 += 16;
              --v62;
            }
            while (v62);
          }
          if ((int)v80 > (v72 + v70 == 0))
          {
            v66 = &STACK[0x600] + (v72 + v70 == 0);
            v67 = v82 + v73;
            v68 = &a33 + 2 * (v72 + v70 == 0);
            v69 = vars8;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v33 + 88))(v67, v37, v66, v68, v59);
              v68 += 2;
              ++v66;
              v67 += v55;
              --v69;
            }
            while (v69);
          }
          v57 += 64;
          v48 = v75;
          v35 = v76;
        }
        while (v57 < v75);
      }
      v46 = v71;
      v54 = v72 + 64;
    }
    while (v72 + 64 < v71);
  }
  return result;
}

_WORD *sub_1B67F4398(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;
  int v12;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      v12 = *a4++;
      result = sub_1B67F47D8(v9, a2, 1, *(unsigned __int8 *)(a3 + (v10 >> 3)), v12);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1B67F4418(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  _WORD *v9;
  int i;
  int v11;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      v11 = *a4++;
      result = sub_1B67F47D8(v9, 1, a2, *(unsigned __int8 *)(a3 + (i >> 3)), v11);
      v9 += 4;
    }
  }
  return result;
}

unsigned __int16 *sub_1B67F448C(unsigned __int16 *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t i;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      v5 = *(unsigned __int8 *)(a3 + (i & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (i & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        v6 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        v7 = *(result - 2);
        v8 = *result;
        v9 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 >= v6)
          v10 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        else
          v10 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 <= -v6)
          v11 = -v6;
        else
          v11 = v10;
        v12 = v11 + v7;
        if (v11 + v7 >= 511)
          v12 = 511;
        *(result - 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        v13 = v8 - v11;
        if (v13 >= 511)
          v13 = 511;
        *result = v13 & ~(unsigned __int16)(v13 >> 31);
      }
      if ((v5 & 0x80) == 0)
      {
        v14 = *(result - 1);
        v15 = result[1];
        v16 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 >= v5)
          v17 = v5;
        else
          v17 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 <= -v5)
          v18 = -v5;
        else
          v18 = v17;
        v19 = v18 + v14;
        if (v18 + v14 >= 511)
          v19 = 511;
        *(result - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
        v20 = v15 - v18;
        if (v20 >= 511)
          v20 = 511;
        result[1] = v20 & ~(unsigned __int16)(v20 >> 31);
      }
      result += a2;
    }
  }
  return result;
}

unint64_t sub_1B67F4598(unint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = -1 * a2;
    v6 = (_WORD *)(result + 2);
    v7 = a4;
    v8 = a2;
    v9 = -2 * a2;
    do
    {
      v10 = *(unsigned __int8 *)(a3 + (v4 & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (v4 & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        v11 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        result = (unint64_t)&v6[v5];
        v12 = (unsigned __int16)v6[v5 - 1];
        v13 = (unsigned __int16)*(v6 - 1);
        v14 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        if (v14 >= v11)
          v15 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        else
          v15 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        if (v14 <= -v11)
          v16 = -v11;
        else
          v16 = v15;
        v17 = v16 + v12;
        if (v16 + v12 >= 511)
          v17 = 511;
        *(_WORD *)(result - 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v18 = v13 - v16;
        if (v18 >= 511)
          v18 = 511;
        *(v6 - 1) = v18 & ~(unsigned __int16)(v18 >> 31);
      }
      if ((v10 & 0x80) == 0)
      {
        v19 = (unsigned __int16)v6[v5];
        result = (unsigned __int16)*v6;
        v20 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        if (v20 >= v10)
          v21 = v10;
        else
          v21 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        if (v20 <= -v10)
          v22 = -v10;
        else
          v22 = v21;
        v23 = v22 + v19;
        if (v22 + v19 >= 511)
          v23 = 511;
        v6[v5] = v23 & ~(unsigned __int16)(v23 >> 31);
        v24 = result - v22;
        if (v24 >= 511)
          v24 = 511;
        *v6 = v24 & ~(unsigned __int16)(v24 >> 31);
      }
      ++v4;
      v6 += 2;
    }
    while (v7 != v4);
  }
  return result;
}

_WORD *sub_1B67F46BC(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  _WORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = 8 * a2;
    v10 = a3;
    v11 = a4;
    do
    {
      sub_1B67F47D8(v7, a2, 2, v10, v11);
      result = sub_1B67F47D8(v7 + 1, a2, 2, v10, v11);
      v8 += 4;
      v7 = (_WORD *)((char *)v7 + v9);
    }
    while (v8 < a5);
  }
  return result;
}

_WORD *sub_1B67F4750(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  _WORD *v7;
  int v8;
  unsigned int v9;
  int v10;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = a3;
    v10 = a4;
    do
    {
      sub_1B67F47D8(v7, 2, a2, v9, v10);
      result = sub_1B67F47D8(v7 + 1, 2, a2, v9, v10);
      v8 += 4;
      v7 += 8;
    }
    while (v8 < a5);
  }
  return result;
}

_WORD *sub_1B67F47D8(_WORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  signed int v70;
  __int16 v71;
  signed int v72;
  unsigned int v73;
  signed int v74;
  signed int v75;
  signed int v76;
  __int16 v77;
  signed int v78;
  unsigned int v79;
  signed int v80;
  signed int v81;
  unsigned int v82;
  int v83;
  signed int v84;
  signed int v85;
  signed int v86;
  signed int v87;
  __int16 v88;
  __int16 v89;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = -v17;
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8))
      goto LABEL_37;
    v22 = (unsigned __int16)result[-4 * a3] - v6;
    if (v22 < 0)
      v22 = v6 - (unsigned __int16)result[-4 * a3];
    v23 = (unsigned __int16)result[3 * a3] - v11;
    if (v23 < 0)
      v23 = v11 - (unsigned __int16)result[3 * a3];
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      v25 = 1;
    }
    else
    {
      v24 = v6 - v11;
      if (v24 < 0)
        v24 = -v24;
      v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17))
      goto LABEL_49;
    v26 = v14[3 * a3];
    v27 = v14[-4 * a3] - v16;
    if (v27 < 0)
      v27 = -v27;
    v28 = v26 - v19;
    if (v28 < 0)
      v28 = -v28;
    if (v27 + v28 >= a4 >> 3)
      goto LABEL_49;
    v29 = v16 - v19;
    if (v16 - v19 < 0)
      v29 = v19 - v16;
    if (v29 >= (5 * a5 + 1) >> 1)
      v25 = 1;
    if (v25)
    {
LABEL_49:
      v30 = v17 + v8;
      v31 = (a4 + (a4 >> 1)) >> 3;
      v32 = a5 >> 1;
      v33 = -(a5 >> 1);
      v34 = 4;
      do
      {
        v35 = (unsigned __int16)result[-2 * a3];
        v36 = (unsigned __int16)result[-a3];
        v37 = (unsigned __int16)*result;
        v38 = (unsigned __int16)result[a3];
        v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0)
          v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        else
          v40 = -v39;
        if (v40 < 10 * a5)
        {
          if (v39 >= a5)
            v42 = a5;
          else
            v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          if (v39 <= -a5)
            v43 = -a5;
          else
            v43 = v42;
          v44 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32)
            v45 = a5 >> 1;
          else
            v45 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 <= v33)
            v46 = -(a5 >> 1);
          else
            v46 = v45;
          v47 = v46 + v35;
          if (v47 >= 511)
            v47 = 511;
          v48 = v47 & ~(v47 >> 31);
          if (v30 < v31)
            LOWORD(v35) = v48;
          v41 = (unsigned __int16)result[v9];
          v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32)
            v50 = a5 >> 1;
          else
            v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 <= v33)
            v51 = -(a5 >> 1);
          else
            v51 = v50;
          v52 = v51 + v38;
          if (v52 >= 511)
            v52 = 511;
          v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31)
            LOWORD(v38) = v53;
          v54 = v43 + v36;
          if (v54 >= 511)
            v54 = 511;
          v55 = v54 & ~(v54 >> 31);
          v56 = v37 - v43;
          if (v56 >= 511)
            v56 = 511;
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *result = v56 & ~(unsigned __int16)(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v34;
      }
      while (v34);
    }
    else
    {
      v57 = 2 * a5;
      v58 = 2 * a2;
      v59 = 4;
      do
      {
        v60 = (unsigned __int16)result[-3 * a3];
        v61 = (unsigned __int16)result[-2 * a3];
        v62 = (unsigned __int16)result[-a3];
        v63 = (unsigned __int16)result[a3];
        v64 = (unsigned __int16)result[v9];
        v65 = (unsigned __int16)result[3 * a3];
        LOWORD(v66) = v57 + v60;
        v67 = (unsigned __int16)*result;
        v68 = v67 + v62;
        v69 = v61 + 4;
        v70 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 < v57 + v60)
          v66 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 <= v60 - v57)
          v71 = v60 - v57;
        else
          v71 = v66;
        result[-3 * a3] = v71;
        v72 = v61 - v57;
        LOWORD(v73) = v57 + v61;
        v74 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 < v57 + v61)
          v73 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 > v72)
          LOWORD(v72) = v73;
        result[-2 * a3] = v72;
        v75 = v62 - v57;
        v76 = (v60 + 2 * v62 + 2 * v61 + 2 * v67 + v63 + 4) >> 3;
        if (v76 >= v57 + v62)
          v77 = v57 + v62;
        else
          v77 = v76;
        if (v76 > v75)
          LOWORD(v75) = v77;
        result[-a3] = v75;
        v78 = v67 - v57;
        LOWORD(v79) = v57 + v67;
        v80 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 < v57 + v67)
          v79 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 > v78)
          LOWORD(v78) = v79;
        *result = v78;
        v81 = v63 - v57;
        LOWORD(v82) = v57 + v63;
        v83 = v64 + v63 + v68;
        v84 = (v83 + 2) >> 2;
        if (v84 < v57 + v63)
          v82 = (v83 + 2) >> 2;
        if (v84 > v81)
          LOWORD(v81) = v82;
        result[a3] = v81;
        v85 = v64 - v57;
        v86 = v57 + v64;
        v87 = (v83 + 2 * v64 + 2 * v65 + 4) >> 3;
        if (v87 >= v86)
          v88 = v86;
        else
          v88 = v87;
        if (v87 <= v85)
          v89 = v85;
        else
          v89 = v88;
        result[v9] = v89;
        result = (_WORD *)((char *)result + v58);
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

_BYTE *sub_1B67F4CC4(_BYTE *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  _BYTE *v9;
  int v10;
  uint64_t v11;
  int v12;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 4 * a2;
    do
    {
      v12 = *a4++;
      result = sub_1B67F6454(v9, a2, 1, *(unsigned __int8 *)(a3 + (v10 >> 3)), v12);
      v10 += 4;
      v9 += v11;
    }
    while (v10 < a5);
  }
  return result;
}

_BYTE *sub_1B67F4D44(_BYTE *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  _BYTE *v9;
  uint64_t v10;
  int v11;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    do
    {
      v11 = *a4++;
      result = sub_1B67F6454(&v9[v10], 1, a2, *(unsigned __int8 *)(a3 + (v10 >> 3)), v11);
      v10 += 4;
    }
    while ((int)v10 < a5);
  }
  return result;
}

unsigned __int8 *sub_1B67F4DB4(unsigned __int8 *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t i;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      v5 = *(unsigned __int8 *)(a3 + (i & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (i & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        v6 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        v7 = *(result - 2);
        v8 = *result;
        v9 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 >= v6)
          v10 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        else
          v10 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 <= -v6)
          v11 = -v6;
        else
          v11 = v10;
        v12 = v11 + v7;
        if (v11 + v7 >= 255)
          v12 = 255;
        *(result - 2) = v12 & ~(v12 >> 31);
        v13 = v8 - v11;
        if (v13 >= 255)
          v13 = 255;
        *result = v13 & ~(v13 >> 31);
      }
      if ((v5 & 0x80) == 0)
      {
        v14 = *(result - 1);
        v15 = result[1];
        v16 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 >= v5)
          v17 = v5;
        else
          v17 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 <= -v5)
          v18 = -v5;
        else
          v18 = v17;
        v19 = v18 + v14;
        if (v18 + v14 >= 255)
          v19 = 255;
        *(result - 1) = v19 & ~(v19 >> 31);
        v20 = v15 - v18;
        if (v20 >= 255)
          v20 = 255;
        result[1] = v20 & ~(v20 >> 31);
      }
      result += a2;
    }
  }
  return result;
}

uint64_t sub_1B67F4EBC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = (_BYTE *)(result + 1);
    v6 = a4;
    do
    {
      v7 = *(unsigned __int8 *)(a3 + (v4 & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (v4 & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        v8 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        result = v5[-a2 - 1];
        v9 = *(v5 - 1);
        v10 = (v5[-2 * a2 - 1] - v5[a2 - 1] + 4 * (v9 - (int)result) + 4) >> 3;
        if (v10 >= v8)
          v11 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        else
          v11 = (v5[-2 * a2 - 1] - v5[a2 - 1] + 4 * (v9 - (int)result) + 4) >> 3;
        if (v10 <= -v8)
          v12 = -v8;
        else
          v12 = v11;
        v13 = v12 + result;
        if (v12 + (int)result >= 255)
          v13 = 255;
        v5[-a2 - 1] = v13 & ~(v13 >> 31);
        v14 = v9 - v12;
        if (v14 >= 255)
          v14 = 255;
        *(v5 - 1) = v14 & ~(v14 >> 31);
      }
      if ((v7 & 0x80) == 0)
      {
        v15 = v5[-a2];
        v16 = *v5;
        v17 = (v5[-2 * a2] - v5[a2] + 4 * (v16 - v15) + 4) >> 3;
        if (v17 >= v7)
          result = v7;
        else
          result = v17;
        if (v17 <= -v7)
          v18 = -v7;
        else
          v18 = result;
        v19 = v18 + v15;
        if (v18 + v15 >= 255)
          v19 = 255;
        v5[-a2] = v19 & ~(v19 >> 31);
        v20 = v16 - v18;
        if (v20 >= 255)
          v20 = 255;
        *v5 = v20 & ~(v20 >> 31);
      }
      ++v4;
      v5 += 2;
    }
    while (v6 != v4);
  }
  return result;
}

_BYTE *sub_1B67F4FDC(_BYTE *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  _BYTE *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = 4 * a2;
    v10 = a3;
    v11 = a4;
    do
    {
      sub_1B67F6454(v7, a2, 2, v10, v11);
      result = sub_1B67F6454(v7 + 1, a2, 2, v10, v11);
      v8 += 4;
      v7 += v9;
    }
    while (v8 < a5);
  }
  return result;
}

_BYTE *sub_1B67F5070(_BYTE *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  _BYTE *v7;
  int v8;
  unsigned int v9;
  int v10;

  if (a5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = a3;
    v10 = a4;
    do
    {
      sub_1B67F6454(v7, 2, a2, v9, v10);
      result = sub_1B67F6454(v7 + 1, 2, a2, v9, v10);
      v8 += 4;
      v7 += 8;
    }
    while (v8 < a5);
  }
  return result;
}

uint64_t sub_1B67F50F8(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t *v100;
  int v101;
  _BOOL8 v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _BOOL8 v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  int *v115;
  int v116;
  _DWORD *v117;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v120;
  signed int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;

  v65 = a3;
  v66 = result;
  v67 = *(_QWORD *)(a2 + 1360);
  v116 = *(_DWORD *)(v67 + 276);
  v68 = *(_QWORD *)(v67 + 112);
  v69 = *(_QWORD *)(v67 + 120);
  v70 = *a3;
  v117 = (_DWORD *)v67;
  if (*a3 < *(_DWORD *)(v67 + 280))
  {
    v70 &= 0xFFFFFFF0;
    *a3 = v70;
  }
  v71 = *(_DWORD *)(result + 128);
  if (v71 < v70)
  {
    v122 = (v116 - 1) & 0xFFFFFFC0;
    v120 = 8 * v68;
    vars0 = v69;
    vars8 = 8 * v69;
    v115 = v65;
    do
    {
      v72 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v117 + 16))(v117, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v117 + 16))(v117, 0, (*(int *)(v66 + 128) >> 1), 1);
      v73 = result;
      v74 = *(_DWORD *)(v66 + 128);
      v75 = *v65 - v74;
      if (v75 >= 64)
        v76 = 64;
      else
        v76 = v75;
      v124 = ((int)v76 >> 3);
      v125 = (((int)v76 + 8) >> 4);
      v123 = v76;
      v77 = 0;
      if (v122 >= 1)
      {
        v78 = ((int)v76 >> 1);
        do
        {
          v79 = &a17;
          v126 = v77;
          (*(void (**)(uint64_t))(v66 + 48))(a2);
          v80 = 0;
          do
          {
            v81 = v80 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v66 + 80))(v80 + 8 + v72, v68, (char *)&STACK[0x5C0] + v80, v79, v76);
            v79 += 16;
            v80 = v81;
          }
          while (v81 != 64);
          v82 = *(_DWORD *)(v66 + 128);
          if ((int)v124 > (v82 == 0))
          {
            v83 = v82 == 0;
            v84 = v124 - v83;
            v85 = &a33 + 2 * v83;
            v86 = &STACK[0x600] + v83;
            v87 = v72 + v120 * v83;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v66 + 88))(v87, v68, v86, v85, 64);
              v85 += 2;
              ++v86;
              v87 += v120;
              --v84;
            }
            while (v84);
          }
          v88 = &a49;
          v89 = 16;
          v69 = vars0;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 96))(v73 + v89, vars0, v88, v78);
            v89 += 16;
            v88 += 4;
          }
          while (v89 != 80);
          v90 = *(_DWORD *)(v66 + 128);
          if ((int)v125 > (v90 == 0))
          {
            v91 = v90 == 0;
            v92 = v125 - v91;
            v93 = &a65 + 4 * v91;
            v94 = v73 + vars8 * v91;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 104))(v94, vars0, v93, 32);
              v93 += 4;
              v94 += vars8;
              --v92;
            }
            while (v92);
          }
          v72 += 64;
          v73 += 64;
          v77 = v126 + 64;
          v76 = v123;
        }
        while (v126 + 64 < v122);
        v74 = *(_DWORD *)(v66 + 128);
      }
      v95 = v116 - v77;
      if (v116 != v77)
      {
        result = (*(uint64_t (**)(uint64_t))(v66 + 48))(a2);
        v127 = v95;
        if (v95 >= 16)
        {
          v96 = v76;
          v97 = v72 + 8;
          v98 = (v127 >> 3) - 1;
          v99 = &a17;
          v100 = &STACK[0x5C0];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v66 + 80))(v97, v68, v100, v99, v96);
            v99 += 16;
            ++v100;
            v97 += 8;
            --v98;
          }
          while (v98);
        }
        v101 = *(_DWORD *)(v66 + 128);
        if ((int)v124 > (v101 == 0))
        {
          v102 = v101 == 0;
          v103 = v124 - v102;
          v104 = &a33 + 2 * v102;
          v105 = &STACK[0x600] + v102;
          v106 = v72 + v120 * v102;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v66 + 88))(v106, v68, v105, v104, v127);
            v104 += 2;
            ++v105;
            v106 += v120;
            --v103;
          }
          while (v103);
        }
        if (v127 >= 24)
        {
          v107 = v73 + 16;
          v108 = ((v127 + 8) >> 4) - 1;
          v109 = &a49;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v66 + 96))(v107, v69, v109, (v123 >> 1));
            v109 += 4;
            v107 += 16;
            --v108;
          }
          while (v108);
        }
        v74 = *(_DWORD *)(v66 + 128);
        LODWORD(v76) = v123;
        if ((int)v125 > (v74 == 0))
        {
          v110 = v74 == 0;
          v111 = v125 - v110;
          v112 = &a65 + 4 * v110;
          v113 = v73 + vars8 * v110;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v66 + 104))(v113, v69, v112, (v127 >> 1));
            v112 += 4;
            v113 += vars8;
            --v111;
          }
          while (v111);
          v74 = *(_DWORD *)(v66 + 128);
          LODWORD(v76) = v123;
        }
      }
      v71 = v74 + v76;
      *(_DWORD *)(v66 + 128) = v71;
      v65 = v115;
    }
    while (v71 < *v115);
  }
  v114 = v117[70];
  if (v114 >= v71)
    v114 = v71;
  *v65 = v114;
  if (*(_DWORD *)(v66 + 128) < v117[70])
  {
    if (v114 <= 4)
      v114 = 4;
    *v65 = v114 - 4;
  }
  return result;
}

uint64_t sub_1B67F55C4(uint64_t result, uint64_t a2, int *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, void *__dst, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  int v97;
  _BOOL8 v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t i;
  int v112;
  _BOOL8 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t *v125;
  int v126;
  _BOOL8 v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  int v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int v140;
  int v141;
  _DWORD *v142;
  int *v143;
  uint64_t v144;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  signed int v151;
  unsigned int v152;
  char *__dsta;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v158;
  int v159;
  unsigned int v160;
  uint64_t v161;

  v70 = a3;
  v71 = a2;
  v72 = result;
  v73 = *(_QWORD *)(a2 + 1360);
  v141 = *(_DWORD *)(v73 + 276);
  v74 = *(_QWORD *)(v73 + 112);
  v75 = *(_QWORD *)(v73 + 120);
  v76 = *a3;
  v142 = (_DWORD *)v73;
  if (*a3 < *(_DWORD *)(v73 + 280))
  {
    v76 &= 0xFFFFFFF0;
    *a3 = v76;
  }
  v77 = *(_DWORD *)(result + 128);
  if (v77 < v76)
  {
    v151 = (v141 - 1) & 0xFFFFFFC0;
    vars0 = &a55;
    vars8 = v74;
    __dsta = (char *)(a2 + 4392);
    v143 = v70;
    v147 = 8 * v75;
    v148 = 8 * v74;
    do
    {
      v78 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v142 + 16))(v142, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v142 + 16))(v142, 0, (*(int *)(v72 + 128) >> 1), 1);
      v79 = *(unsigned int *)(v72 + 128);
      if (*v70 - (int)v79 >= 64)
        v80 = 64;
      else
        v80 = *v70 - v79;
      if ((_DWORD)v79)
        v81 = (v79 - 8);
      else
        v81 = 0;
      v82 = v80 + 8;
      if ((_DWORD)v79)
        v83 = v82;
      else
        v83 = v80;
      v152 = v80;
      v161 = v83;
      v160 = v81;
      v155 = (v82 >> 4);
      v156 = result;
      v154 = (v80 >> 3);
      v84 = 0;
      if (v151 >= 1)
      {
        v85 = (v80 >> 1);
        v149 = (int)v81 >> 1;
        v144 = ((int)v83 >> 1);
        v86 = v83;
        do
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *))(v72 + 48))(v71, v84, *(unsigned int *)(v72 + 128), 64, v152, &a23);
          v158 = v84;
          v87 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v71 + 1360) + 16))(*(_QWORD *)(v71 + 1360), v84, v81, 0);
          v88 = v71;
          if ((int)v86 >= 1)
          {
            v89 = *(_QWORD *)(*(_QWORD *)(v71 + 1360) + 112);
            v90 = __dsta;
            do
            {
              *(_OWORD *)v90 = *(_OWORD *)v87;
              v91 = *(_OWORD *)(v87 + 16);
              v92 = *(_OWORD *)(v87 + 32);
              v93 = *(_OWORD *)(v87 + 48);
              v90[8] = *(_QWORD *)(v87 + 64);
              *((_OWORD *)v90 + 2) = v92;
              *((_OWORD *)v90 + 3) = v93;
              *((_OWORD *)v90 + 1) = v91;
              v87 += v89;
              v90 += 9;
              --v86;
            }
            while (v86);
          }
          v94 = 0;
          v95 = &a23;
          do
          {
            v96 = v94 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, _QWORD))(v72 + 80))(v94 + 8 + v78, vars8, (char *)&STACK[0x600] + v94, v95, v152);
            v95 += 16;
            v94 = v96;
          }
          while (v96 != 64);
          sub_1B67C8928(v88, v158, v160, 72, v161, 0);
          v97 = *(_DWORD *)(v72 + 128);
          if ((int)v154 > (v97 == 0))
          {
            v98 = v97 == 0;
            v99 = v154 - v98;
            v100 = &a39 + 2 * v98;
            v101 = &STACK[0x640] + v98;
            v102 = v78 + v148 * v98;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v72 + 88))(v102, vars8, v101, v100, 64);
              v100 += 2;
              ++v101;
              v102 += v148;
              --v99;
            }
            while (v99);
          }
          sub_1B67C8928(a2, v158, v160, 72, v161, 0);
          v103 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 1360) + 16))(*(_QWORD *)(a2 + 1360), v158 >> 1, v149, 1);
          if ((int)v161 >= 2)
          {
            v104 = *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 120);
            v105 = __dsta;
            v106 = v144;
            do
            {
              *(_OWORD *)v105 = *(_OWORD *)v103;
              v107 = *(_OWORD *)(v103 + 16);
              v108 = *(_OWORD *)(v103 + 32);
              v109 = *(_OWORD *)(v103 + 48);
              v105[8] = *(_QWORD *)(v103 + 64);
              *((_OWORD *)v105 + 2) = v108;
              *((_OWORD *)v105 + 3) = v109;
              *((_OWORD *)v105 + 1) = v107;
              v103 += v104;
              v105 += 9;
              --v106;
            }
            while (v106);
          }
          v110 = &a55;
          for (i = 16; i != 80; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v72 + 96))(v156 + i, v75, v110, v85);
            v110 += 4;
          }
          sub_1B67C8928(a2, v158, v160, 72, v161, 1);
          v112 = *(_DWORD *)(v72 + 128);
          if ((int)v155 > (v112 == 0))
          {
            v113 = v112 == 0;
            v114 = v155 - v113;
            v115 = &a70 + 4 * v113;
            v116 = v156 + v147 * v113;
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v72 + 104))(v116, v75, v115, 32);
              v115 += 4;
              v116 += v147;
              --v114;
            }
            while (v114);
          }
          v71 = a2;
          v81 = v160;
          v86 = v161;
          result = sub_1B67C8928(a2, v158, v160, 72, v161, 1);
          v78 += 64;
          v156 += 64;
          v84 = v158 + 64;
        }
        while ((int)v84 < v151);
        v79 = *(unsigned int *)(v72 + 128);
        v70 = v143;
      }
      if (v141 == (_DWORD)v84)
      {
        v71 = a2;
      }
      else
      {
        v150 = (v141 - v84);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(a2, v84, v79);
        v159 = v84;
        v117 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a2 + 1360) + 16))(*(_QWORD *)(a2 + 1360), v84, v81, 0);
        if ((int)v161 >= 1)
        {
          v118 = (char *)v117;
          v119 = *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
          v120 = __dsta;
          v121 = v161;
          do
          {
            memcpy(v120, v118, (int)v150);
            v118 += v119;
            v120 += (int)v150;
            --v121;
          }
          while (v121);
        }
        if ((int)v150 >= 16)
        {
          v122 = v78 + 8;
          v123 = (v150 >> 3) - 1;
          v124 = &a23;
          v125 = &STACK[0x600];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, _QWORD))(v72 + 80))(v122, vars8, v125, v124, v152);
            v124 += 16;
            ++v125;
            v122 += 8;
            --v123;
          }
          while (v123);
        }
        sub_1B67C8928(a2, v159, v160, v150, v161, 0);
        v126 = *(_DWORD *)(v72 + 128);
        if ((int)v154 > (v126 == 0))
        {
          v127 = v126 == 0;
          v128 = v154 - v127;
          v129 = &a39 + 2 * v127;
          v130 = &STACK[0x640] + v127;
          v131 = v78 + v148 * v127;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v72 + 88))(v131, vars8, v130, v129, v150);
            v129 += 2;
            ++v130;
            v131 += v148;
            --v128;
          }
          while (v128);
        }
        sub_1B67C8928(a2, v159, v160, v150, v161, 0);
        sub_1B67C87EC(a2, v159, v160, v150, v161, 1);
        if ((int)v150 >= 24)
        {
          v132 = v156 + 16;
          v133 = ((v150 + 8) >> 4) - 1;
          v134 = &a55;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v72 + 96))(v132, v75, v134, ((int)v152 >> 1));
            v134 += 4;
            v132 += 16;
            --v133;
          }
          while (v133);
        }
        sub_1B67C8928(a2, v159, v160, v150, v161, 1);
        v135 = *(_DWORD *)(v72 + 128);
        if ((int)v155 > (v135 == 0))
        {
          v136 = v135 == 0;
          v137 = v155 - v136;
          v138 = &a70 + 4 * v136;
          v139 = v156 + v147 * v136;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v72 + 104))(v139, v75, v138, ((int)v150 >> 1));
            v138 += 4;
            v139 += v147;
            --v137;
          }
          while (v137);
        }
        v71 = a2;
        result = sub_1B67C8928(a2, v159, v160, v150, v161, 1);
        LODWORD(v79) = *(_DWORD *)(v72 + 128);
        v70 = v143;
      }
      v77 = v79 + v152;
      *(_DWORD *)(v72 + 128) = v77;
    }
    while (v77 < *v70);
  }
  v140 = v142[70];
  if (v140 >= v77)
    v140 = v77;
  *v70 = v140;
  if (*(_DWORD *)(v72 + 128) < v142[70])
  {
    if (v140 <= 4)
      v140 = 4;
    *v70 = v140 - 4;
  }
  return result;
}

uint64_t sub_1B67F5D3C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  _QWORD *v46;
  int v47;
  int v48;
  int v49;
  _WORD v50[380];

  v5 = *(_DWORD **)(a2 + 1360);
  v6 = v5[69];
  v7 = v5[70];
  v8 = *(_QWORD *)(a2 + 1368);
  v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(_BYTE *)(v8 + 2009);
  v10 = (a3 << v8);
  v11 = (a4 << v8);
  v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v6)
    v13 = (v6 - v10);
  else
    v13 = v9;
  if ((int)(v10 + v9) >= v6)
    v14 = (((v6 - (int)v10) >> 1) + 2);
  else
    v14 = v12;
  if ((int)(v11 + v9) >= v7)
    v15 = v7 - v11;
  else
    v15 = v9;
  if ((int)(v11 + v9) >= v7)
    v16 = (((v7 - (int)v11) >> 1) + 2);
  else
    v16 = v12;
  v49 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 72))(a2, v10, v11, v13);
  v43 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, v10, v11, 0);
  v46 = v5;
  v17 = *((_QWORD *)v5 + 14);
  v48 = v10;
  v44 = v13;
  v45 = v10 == 0;
  v18 = ((int)v13 >> 3);
  if ((int)v18 > v45)
  {
    v19 = v18 - ((_DWORD)v10 == 0);
    v20 = &v50[10 * (v48 == 0)];
    v21 = &v50[5 * (v48 == 0) + 296];
    v22 = v43 - 8 * v17 + 8 * (v48 == 0);
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 80))(v22, v17, v21, v20, (v49 + 8));
      v20 += 10;
      v21 += 5;
      v22 += 8;
      --v19;
    }
    while (v19);
  }
  v23 = v11 == 0;
  v24 = (v49 >> 3);
  v47 = v11;
  if ((int)v24 <= v23)
  {
    LODWORD(v26) = v44 + 8;
  }
  else
  {
    v25 = (_DWORD)v11 == 0;
    v26 = (v44 + 8);
    v27 = v24 - v25;
    v28 = &v50[10 * v25 + 80];
    v29 = &v50[5 * v25 + 336];
    v30 = v43 + 8 * v17 * v25 - 8;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v30, v17, v29, v28, v26);
      v28 += 10;
      v29 += 5;
      v30 += 8 * v17;
      --v27;
    }
    while (v27);
    v23 = v11 == 0;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v46 + 16))(v46, (v48 >> 1), ((int)v11 >> 1), 1);
  v32 = result;
  v33 = v46[15];
  v34 = ((int)v26 >> 4);
  if ((int)v34 > v45)
  {
    v35 = v34 - (v48 == 0);
    v36 = &v50[17 * (v48 == 0) + 160];
    v37 = result - 2 * v33 + 16 * (v48 == 0);
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v37, v33, v36, v16);
      v36 += 17;
      v37 += 16;
      --v35;
    }
    while (v35);
  }
  v38 = ((v49 + 8) >> 4);
  if ((int)v38 > v23)
  {
    v39 = v47 == 0;
    v40 = v38 - v39;
    v41 = &v50[17 * v39 + 228];
    v42 = v32 + 8 * v33 * v39 - 4;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 104))(v42, v33, v41, v14);
      v41 += 17;
      v42 += 8 * v33;
      --v40;
    }
    while (v40);
  }
  return result;
}

uint64_t sub_1B67F6044(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unint64_t *vars0;
  unint64_t *vars8;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  _BOOL4 v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;

  v61 = result;
  v62 = *(_QWORD *)(a2 + 1360);
  v63 = *(_DWORD *)(v62 + 276);
  v64 = *(_DWORD *)(v62 + 280);
  v65 = *(_QWORD *)(v62 + 112);
  v66 = *(_QWORD *)(v62 + 120);
  v129 = v62;
  v67 = *(_QWORD *)(a2 + 1368);
  v68 = *(unsigned __int8 *)(v67 + 2013);
  v69 = *(_BYTE *)(v67 + 2009);
  v70 = a3 << v69;
  v71 = a4 << v69;
  v72 = (a4 << v69) - 16;
  if (*(_DWORD *)(v67 + 2016) - 1 == a3)
  {
    v73 = v71 < 16;
    if (v71 >= 16)
      v74 = v72;
    else
      v74 = 0;
    if (!v73)
      v72 = 0;
    v75 = v72 + v68;
    if (v70 <= 63)
      v76 = 0;
    else
      v76 = (v70 - 1) & 0xFFFFFFC0;
    v119 = v76;
    v77 = v63 - v76;
    *(_DWORD *)(result + 128) = v74 + v75 - 8;
    v108 = v74;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4)
    {
      v75 = v64 - v74;
      *(_DWORD *)(result + 128) = v64;
    }
  }
  else
  {
    if (!a3 || (v70 & 0x3F) != 0)
      return result;
    v78 = v71 < 16;
    if (v71 >= 16)
      v79 = v72;
    else
      v79 = 0;
    if (!v78)
      v72 = 0;
    v80 = v72 + v68;
    if (v70 >= 64)
      v81 = v70 - 64;
    else
      v81 = 0;
    v119 = v81;
    if (v70 >= 64)
      v77 = 64;
    else
      v77 = v70;
    v108 = v79;
    v82 = v64 - v79;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4)
      v75 = v82;
    else
      v75 = v80;
  }
  if (v75 >= 1)
  {
    v83 = 0;
    vars0 = &STACK[0x680];
    v124 = 8 * v65;
    v84 = 8 * v66;
    v117 = v77;
    v118 = v63;
    v109 = v75;
    do
    {
      v110 = v83;
      if (v75 - v83 >= 64)
        v85 = 64;
      else
        v85 = (v75 - v83);
      if (v77 >= 1)
      {
        v86 = 0;
        v87 = v83 + v108 == 0;
        v123 = v110 + v108;
        v122 = ((int)v85 >> 3);
        v116 = v122 - v87;
        v121 = (((int)v85 + 8) >> 4);
        v114 = v121 - v87;
        v115 = v124 * v87;
        v113 = v84 * v87;
        v130 = v110 + v108 == 0;
        vars8 = &STACK[0x600] + 4 * v87;
        do
        {
          if (v77 - v86 >= 64)
            v88 = 64;
          else
            v88 = (v77 - v86);
          v128 = v86;
          v89 = v86 + v119;
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v61 + 48))(a2, v89, v123, v88, v85, &a29);
          v126 = v89;
          v90 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v129 + 16))(v129, v89, v123, 0);
          v91 = v90;
          v125 = (int)v88 + (int)v89 < v63;
          LODWORD(v92) = (int)v88 >> 3;
          if ((int)v88 + (int)v89 >= v63)
            v92 = v92;
          else
            v92 = (v92 + 1);
          if ((int)v92 >= 2)
          {
            v93 = v92 - 1;
            v94 = v90 + 8;
            v95 = &a29;
            v96 = &STACK[0x680];
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 80))(v94, v65, v96, v95, v85);
              v95 += 16;
              ++v96;
              v94 += 8;
              --v93;
            }
            while (v93);
          }
          if ((int)v122 > v130)
          {
            v97 = v116;
            v98 = v91 + v115;
            v99 = &STACK[0x6C0] + (v110 + v108 == 0);
            v100 = &a45 + 2 * (v110 + v108 == 0);
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 88))(v98, v65, v99, v100, v88);
              v100 += 2;
              ++v99;
              v98 += v124;
              --v97;
            }
            while (v97);
          }
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v129 + 16))(v129, (v126 >> 1), ((v110 + v108) >> 1), 1);
          v127 = result;
          v101 = (v125 + (((int)v88 + 8) >> 4));
          v84 = 8 * v66;
          if ((int)v101 >= 2)
          {
            v102 = v101 - 1;
            v103 = result + 16;
            v104 = &a61;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v61 + 96))(v103, v66, v104, ((int)v85 >> 1));
              v104 += 4;
              v103 += 16;
              --v102;
            }
            while (v102);
          }
          if ((int)v121 > v130)
          {
            v105 = v127 + v113;
            v106 = vars8;
            v107 = v114;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, _QWORD))(v61 + 104))(v105, v66, v106, ((int)v88 >> 1));
              v106 += 4;
              v105 += 8 * v66;
              --v107;
            }
            while (v107);
          }
          v86 = v128 + 64;
          v77 = v117;
          v63 = v118;
        }
        while (v128 + 64 < v117);
      }
      v75 = v109;
      v83 = v110 + 64;
    }
    while (v110 + 64 < v109);
  }
  return result;
}

_BYTE *sub_1B67F6454(_BYTE *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  signed int v69;
  char v70;
  signed int v71;
  unsigned int v72;
  signed int v73;
  signed int v74;
  signed int v75;
  char v76;
  signed int v77;
  unsigned int v78;
  signed int v79;
  signed int v80;
  unsigned int v81;
  int v82;
  signed int v83;
  signed int v84;
  signed int v85;
  signed int v86;
  char v87;
  char v88;

  v5 = result[-2 * a3];
  if (a3 < 1)
  {
    v11 = *result;
    v6 = result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = result[2 * a3];
    if (a3 < 0)
    {
      v13 = result[a3] - 2 * v10 + result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = result[-a3];
    v7 = v6 - 2 * v5 + result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = result[2 * a3];
    v11 = *result;
  }
  v13 = v11 + v10 - 2 * result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = -v17;
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8))
      goto LABEL_37;
    v22 = result[-4 * a3] - v6;
    if (v22 < 0)
      v22 = v6 - result[-4 * a3];
    v23 = result[3 * a3] - v11;
    if (v23 < 0)
      v23 = v11 - result[3 * a3];
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      v25 = 1;
    }
    else
    {
      v24 = v6 - v11;
      if (v24 < 0)
        v24 = -v24;
      v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17))
      goto LABEL_49;
    v26 = v14[3 * a3];
    v27 = v14[-4 * a3] - v16;
    if (v27 < 0)
      v27 = -v27;
    v28 = v26 - v19;
    if (v28 < 0)
      v28 = -v28;
    if (v27 + v28 >= a4 >> 3)
      goto LABEL_49;
    v29 = v16 - v19;
    if (v16 - v19 < 0)
      v29 = v19 - v16;
    if (v29 >= (5 * a5 + 1) >> 1)
      v25 = 1;
    if (v25)
    {
LABEL_49:
      v30 = v17 + v8;
      v31 = (a4 + (a4 >> 1)) >> 3;
      v32 = a5 >> 1;
      v33 = 4;
      v34 = -(a5 >> 1);
      do
      {
        v35 = result[-2 * a3];
        v36 = result[-a3];
        v37 = *result;
        v38 = result[a3];
        v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0)
          v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        else
          v40 = -v39;
        if (v40 < 10 * a5)
        {
          if (v39 >= a5)
            v42 = a5;
          else
            v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          if (v39 <= -a5)
            v43 = -a5;
          else
            v43 = v42;
          v44 = (int)(v43 - v35 + ((result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32)
            v45 = a5 >> 1;
          else
            v45 = (int)(v43 - v35 + ((result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 <= v34)
            v46 = -(a5 >> 1);
          else
            v46 = v45;
          v47 = v46 + v35;
          if (v47 >= 255)
            v47 = 255;
          v48 = v47 & ~(v47 >> 31);
          if (v30 < v31)
            LOBYTE(v35) = v48;
          v41 = result[v9];
          v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32)
            v50 = a5 >> 1;
          else
            v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 <= v34)
            v51 = -(a5 >> 1);
          else
            v51 = v50;
          v52 = v51 + v38;
          if (v52 >= 255)
            v52 = 255;
          v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31)
            LOBYTE(v38) = v53;
          v54 = v43 + v36;
          if (v54 >= 255)
            v54 = 255;
          v55 = v54 & ~(v54 >> 31);
          v56 = v37 - v43;
          if (v56 >= 255)
            v56 = 255;
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *result = v56 & ~(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v33;
      }
      while (v33);
    }
    else
    {
      v57 = 2 * a5;
      v58 = 4;
      do
      {
        v59 = result[-3 * a3];
        v60 = result[-2 * a3];
        v61 = result[-a3];
        v62 = result[a3];
        v63 = result[v9];
        v64 = result[3 * a3];
        LOBYTE(v65) = v57 + v59;
        v66 = *result;
        v67 = v66 + v61;
        v68 = v60 + 4;
        v69 = (v60 + 4 + 2 * result[-4 * a3] + 3 * v59 + v66 + v61) >> 3;
        if (v69 < v57 + v59)
          v65 = (v60 + 4 + 2 * result[-4 * a3] + 3 * v59 + v66 + v61) >> 3;
        if (v69 <= v59 - v57)
          v70 = v59 - v57;
        else
          v70 = v65;
        result[-3 * a3] = v70;
        v71 = v60 - v57;
        LOBYTE(v72) = v57 + v60;
        v73 = (v67 + v60 + v59 + 2) >> 2;
        if (v73 < v57 + v60)
          v72 = (v67 + v60 + v59 + 2) >> 2;
        if (v73 > v71)
          LOBYTE(v71) = v72;
        result[-2 * a3] = v71;
        v74 = v61 - v57;
        v75 = (v59 + 2 * v61 + 2 * v60 + 2 * v66 + v62 + 4) >> 3;
        if (v75 >= v57 + v61)
          v76 = v57 + v61;
        else
          v76 = v75;
        if (v75 > v74)
          LOBYTE(v74) = v76;
        result[-a3] = v74;
        v77 = v66 - v57;
        LOBYTE(v78) = v57 + v66;
        v79 = (v68 + 2 * v61 + 2 * v66 + 2 * v62 + v63) >> 3;
        if (v79 < v57 + v66)
          v78 = (v68 + 2 * v61 + 2 * v66 + 2 * v62 + v63) >> 3;
        if (v79 > v77)
          LOBYTE(v77) = v78;
        *result = v77;
        v80 = v62 - v57;
        LOBYTE(v81) = v57 + v62;
        v82 = v63 + v62 + v67;
        v83 = (v82 + 2) >> 2;
        if (v83 < v57 + v62)
          v81 = (v82 + 2) >> 2;
        if (v83 > v80)
          LOBYTE(v80) = v81;
        result[a3] = v80;
        v84 = v63 - v57;
        v85 = v57 + v63;
        v86 = (v82 + 2 * v63 + 2 * v64 + 4) >> 3;
        if (v86 >= v85)
          v87 = v85;
        else
          v87 = v86;
        if (v86 <= v84)
          v88 = v84;
        else
          v88 = v87;
        result[v9] = v88;
        result += a2;
        --v58;
      }
      while (v58);
    }
  }
  return result;
}

uint64_t sub_1B67F6904(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t *v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  int v57;
  int *v58;
  int v59;
  _DWORD *v60;
  signed int v62;
  uint64_t vars0;
  int vars8_4;
  unsigned int vars8_4a;

  v25 = a3;
  v26 = result;
  v27 = *(_QWORD *)(a2 + 1360);
  v59 = *(_DWORD *)(v27 + 276);
  v28 = *(_QWORD *)(v27 + 112);
  v29 = *a3;
  v60 = (_DWORD *)v27;
  if (*a3 < *(_DWORD *)(v27 + 280))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  v30 = *(_DWORD *)(result + 128);
  if (v30 < v29)
  {
    v62 = (v59 - 1) & 0xFFFFFFC0;
    v31 = 8 * v28;
    v58 = v25;
    do
    {
      v32 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v60 + 16))(v60, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v60 + 16))(v60, 0, (*(int *)(v26 + 128) >> 1), 1);
      v33 = *(_DWORD *)(v26 + 128);
      v34 = *v25 - v33;
      if (v34 >= 64)
        v35 = 64;
      else
        v35 = v34;
      v36 = (int)v35 >> 3;
      vars0 = ((int)v35 >> 3);
      v37 = 0;
      if (v62 >= 1)
      {
        do
        {
          v38 = &a9;
          vars8_4 = v37;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          v39 = 0;
          do
          {
            v40 = v39 + 8;
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 80))(v39 + 8 + v32, v28, (char *)&STACK[0x540] + v39, v38, v35);
            v38 += 16;
            v39 = v40;
          }
          while (v40 != 64);
          v41 = *(_DWORD *)(v26 + 128);
          if (v36 > (v41 == 0))
          {
            v42 = v41 == 0;
            v43 = vars0 - v42;
            v44 = &a25 + 2 * v42;
            v45 = &STACK[0x580] + v42;
            v46 = v32 + v31 * v42;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 88))(v46, v28, v45, v44, 64);
              v44 += 2;
              ++v45;
              v46 += v31;
              --v43;
            }
            while (v43);
          }
          v32 += 64;
          v37 = vars8_4 + 64;
          v36 = (int)v35 >> 3;
        }
        while (vars8_4 + 64 < v62);
        v33 = *(_DWORD *)(v26 + 128);
      }
      v47 = v59 - v37;
      if (v59 != v37)
      {
        result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        vars8_4a = v47;
        if (v47 >= 16)
        {
          v48 = v32 + 8;
          v49 = (v47 >> 3) - 1;
          v50 = &a9;
          v51 = &STACK[0x540];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 80))(v48, v28, v51, v50, v35);
            v50 += 16;
            ++v51;
            v48 += 8;
            --v49;
          }
          while (v49);
        }
        v33 = *(_DWORD *)(v26 + 128);
        if ((int)vars0 > (v33 == 0))
        {
          v52 = v33 == 0;
          v53 = vars0 - v52;
          v54 = &a25 + 2 * v52;
          v55 = &STACK[0x580] + v52;
          v56 = v32 + v31 * v52;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v26 + 88))(v56, v28, v55, v54, vars8_4a);
            v54 += 2;
            ++v55;
            v56 += v31;
            --v53;
          }
          while (v53);
          v33 = *(_DWORD *)(v26 + 128);
        }
      }
      v30 = v33 + v35;
      *(_DWORD *)(v26 + 128) = v30;
      v25 = v58;
    }
    while (v30 < *v58);
  }
  v57 = v60[70];
  if (v57 >= v30)
    v57 = v30;
  *v25 = v57;
  if (*(_DWORD *)(v26 + 128) < v60[70])
  {
    if (v57 <= 4)
      v57 = 4;
    *v25 = v57 - 4;
  }
  return result;
}

uint64_t sub_1B67F6C40(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t *v66;
  int v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  int v73;
  int *v74;
  int v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  signed int vars0_4;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;

  v29 = a3;
  v30 = a2;
  v31 = result;
  v32 = *(_QWORD *)(a2 + 1360);
  v75 = *(_DWORD *)(v32 + 276);
  v33 = *(_QWORD *)(v32 + 112);
  v34 = *a3;
  v76 = (_DWORD *)v32;
  if (*a3 < *(_DWORD *)(v32 + 280))
  {
    v34 &= 0xFFFFFFF0;
    *a3 = v34;
  }
  v35 = *(_DWORD *)(result + 128);
  if (v35 < v34)
  {
    vars0_4 = (v75 - 1) & 0xFFFFFFC0;
    v79 = (char *)(a2 + 4392);
    v36 = 8 * v33;
    v74 = v29;
    do
    {
      v37 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v76 + 16))(v76, 0);
      result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v76 + 16))(v76, 0, (*(int *)(v31 + 128) >> 1), 1);
      v38 = *(unsigned int *)(v31 + 128);
      v39 = *v29 - v38;
      if (v39 >= 64)
        v40 = 64;
      else
        v40 = v39;
      if ((_DWORD)v38)
        v41 = (v38 - 8);
      else
        v41 = 0;
      if ((_DWORD)v38)
        v42 = (v40 + 8);
      else
        v42 = v40;
      v83 = ((int)v40 >> 3);
      v84 = v42;
      v82 = v41;
      v43 = 0;
      if (vars0_4 >= 1)
      {
        do
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v31 + 48))(v30, v43, *(unsigned int *)(v31 + 128), 64, v40, &a13);
          v85 = v43;
          v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v30 + 1360) + 16))(*(_QWORD *)(v30 + 1360), v43, v41, 0);
          if ((int)v42 >= 1)
          {
            v45 = *(_QWORD *)(*(_QWORD *)(v30 + 1360) + 112);
            v46 = v79;
            do
            {
              *(_OWORD *)v46 = *(_OWORD *)v44;
              v47 = *(_OWORD *)(v44 + 16);
              v48 = *(_OWORD *)(v44 + 32);
              v49 = *(_OWORD *)(v44 + 48);
              *((_QWORD *)v46 + 8) = *(_QWORD *)(v44 + 64);
              *((_OWORD *)v46 + 2) = v48;
              *((_OWORD *)v46 + 3) = v49;
              *((_OWORD *)v46 + 1) = v47;
              v44 += v45;
              v46 += 72;
              --v42;
            }
            while (v42);
          }
          v50 = 0;
          v51 = &a13;
          do
          {
            v52 = v50 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v31 + 80))(v50 + 8 + v37, v33, (char *)&STACK[0x580] + v50, v51, v40);
            v51 += 16;
            v50 = v52;
          }
          while (v52 != 64);
          sub_1B67C8928(v30, v85, v41, 72, v84, 0);
          v53 = *(_DWORD *)(v31 + 128);
          if ((int)v83 > (v53 == 0))
          {
            v54 = v53 == 0;
            v55 = v83 - v54;
            v56 = &a29 + 2 * v54;
            v57 = &STACK[0x5C0] + v54;
            v58 = v37 + v36 * v54;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v31 + 88))(v58, v33, v57, v56, 64);
              v56 += 2;
              ++v57;
              v58 += v36;
              --v55;
            }
            while (v55);
          }
          v30 = a2;
          v41 = v82;
          v42 = v84;
          result = sub_1B67C8928(a2, v85, v82, 72, v84, 0);
          v37 += 64;
          v43 = (v85 + 64);
        }
        while ((int)v43 < vars0_4);
        v38 = *(unsigned int *)(v31 + 128);
      }
      if (v75 != (_DWORD)v43)
      {
        v78 = (v75 - v43);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, v43, v38);
        v86 = v43;
        v59 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v30 + 1360) + 16))(*(_QWORD *)(v30 + 1360), v43, v41, 0);
        if ((int)v42 >= 1)
        {
          v60 = (char *)v59;
          v77 = *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
          v61 = v79;
          v62 = v84;
          do
          {
            memcpy(v61, v60, (int)v78);
            v60 += v77;
            v61 += (int)v78;
            --v62;
          }
          while (v62);
        }
        if ((int)v78 >= 16)
        {
          v63 = v37 + 8;
          v64 = (v78 >> 3) - 1;
          v65 = &a13;
          v66 = &STACK[0x580];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v31 + 80))(v63, v33, v66, v65, v40);
            v65 += 16;
            ++v66;
            v63 += 8;
            --v64;
          }
          while (v64);
        }
        sub_1B67C8928(a2, v86, v82, v78, v84, 0);
        v67 = *(_DWORD *)(v31 + 128);
        if ((int)v83 > (v67 == 0))
        {
          v68 = v67 == 0;
          v69 = v83 - v68;
          v70 = &a29 + 2 * v68;
          v71 = &STACK[0x5C0] + v68;
          v72 = v37 + v36 * v68;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v31 + 88))(v72, v33, v71, v70, v78);
            v70 += 2;
            ++v71;
            v72 += v36;
            --v69;
          }
          while (v69);
        }
        v30 = a2;
        result = sub_1B67C8928(a2, v86, v82, v78, v84, 0);
        LODWORD(v38) = *(_DWORD *)(v31 + 128);
      }
      v35 = v38 + v40;
      *(_DWORD *)(v31 + 128) = v35;
      v29 = v74;
    }
    while (v35 < *v74);
  }
  v73 = v76[70];
  if (v73 >= v35)
    v73 = v35;
  *v29 = v73;
  if (*(_DWORD *)(v31 + 128) < v76[70])
  {
    if (v73 <= 4)
      v73 = 4;
    *v29 = v73 - 4;
  }
  return result;
}

uint64_t sub_1B67F70F4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  _WORD v29[380];

  v5 = *(_QWORD *)(a2 + 1360);
  v6 = *(_DWORD *)(v5 + 276);
  v7 = *(_DWORD *)(v5 + 280);
  v8 = *(_QWORD *)(a2 + 1368);
  v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(_BYTE *)(v8 + 2009);
  v10 = (a3 << v8);
  v11 = (a4 << v8);
  if ((int)(v10 + v9) >= v6)
    v12 = (v6 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v7)
    v13 = (v7 - v11);
  else
    v13 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 72))(a2, v10, v11, v12, v13, v29);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, v10, v11, 0);
  v28 = result;
  v15 = *(_QWORD *)(v5 + 112);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v29[10 * ((_DWORD)v10 == 0)];
    v19 = &v29[5 * ((_DWORD)v10 == 0) + 296];
    v20 = result - 8 * v15 + 8 * ((_DWORD)v10 == 0);
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 80))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v29[10 * v22 + 80];
    v26 = &v29[5 * v22 + 336];
    v27 = v28 + 8 * v15 * v22 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1B67F72B8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t vars8;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;

  v33 = result;
  v34 = *(_QWORD *)(a2 + 1360);
  v35 = *(_DWORD *)(v34 + 276);
  v36 = *(_DWORD *)(v34 + 280);
  v78 = v34;
  v37 = *(_QWORD *)(v34 + 112);
  v38 = *(_QWORD *)(a2 + 1368);
  v39 = *(unsigned __int8 *)(v38 + 2013);
  v40 = *(_BYTE *)(v38 + 2009);
  v41 = a3 << v40;
  v42 = a4 << v40;
  v43 = (a4 << v40) - 16;
  if (*(_DWORD *)(v38 + 2016) - 1 == a3)
  {
    v44 = v42 < 16;
    if (v42 >= 16)
      v45 = v43;
    else
      v45 = 0;
    if (!v44)
      v43 = 0;
    v46 = v43 + v39;
    if (v41 <= 63)
      v47 = 0;
    else
      v47 = (v41 - 1) & 0xFFFFFFC0;
    v77 = v47;
    v48 = v35 - v47;
    *(_DWORD *)(result + 128) = v45 + v46 - 8;
    v70 = v45;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4)
    {
      v46 = v36 - v45;
      *(_DWORD *)(result + 128) = v36;
    }
  }
  else
  {
    if (!a3 || (v41 & 0x3F) != 0)
      return result;
    v49 = v42 < 16;
    if (v42 >= 16)
      v50 = v43;
    else
      v50 = 0;
    if (!v49)
      v43 = 0;
    v51 = v43 + v39;
    if (v41 >= 64)
      v52 = v41 - 64;
    else
      v52 = 0;
    v77 = v52;
    if (v41 >= 64)
      v48 = 64;
    else
      v48 = v41;
    v70 = v50;
    v53 = v36 - v50;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4)
      v46 = v53;
    else
      v46 = v51;
  }
  if (v46 >= 1)
  {
    v54 = 0;
    v55 = 8 * v37;
    v75 = v48;
    v76 = v35;
    v71 = v46;
    do
    {
      v72 = v54;
      if (v46 - v54 >= 64)
        v56 = 64;
      else
        v56 = (v46 - v54);
      if (v48 >= 1)
      {
        v57 = 0;
        v81 = v54 + v70;
        v58 = v54 + v70 == 0;
        v80 = ((int)v56 >> 3);
        vars8 = v80 - v58;
        v73 = v55 * v58;
        do
        {
          if (v48 - v57 >= 64)
            v59 = 64;
          else
            v59 = (v48 - v57);
          v60 = v57 + v77;
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(v33 + 48))(a2, v60, v81, v59, v56, &a17);
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v78 + 16))(v78, v60, v81, 0);
          v82 = result;
          LODWORD(v61) = (int)v59 >> 3;
          if ((int)v59 + (int)v60 >= v35)
            v61 = v61;
          else
            v61 = (v61 + 1);
          if ((int)v61 >= 2)
          {
            v62 = v61 - 1;
            v63 = result + 8;
            v64 = &a17;
            v65 = &STACK[0x5C0];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v33 + 80))(v63, v37, v65, v64, v56);
              v64 += 16;
              ++v65;
              v63 += 8;
              --v62;
            }
            while (v62);
          }
          if ((int)v80 > (v72 + v70 == 0))
          {
            v66 = &STACK[0x600] + (v72 + v70 == 0);
            v67 = v82 + v73;
            v68 = &a33 + 2 * (v72 + v70 == 0);
            v69 = vars8;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v33 + 88))(v67, v37, v66, v68, v59);
              v68 += 2;
              ++v66;
              v67 += v55;
              --v69;
            }
            while (v69);
          }
          v57 += 64;
          v48 = v75;
          v35 = v76;
        }
        while (v57 < v75);
      }
      v46 = v71;
      v54 = v72 + 64;
    }
    while (v72 + 64 < v71);
  }
  return result;
}

uint64_t sub_1B67F7590(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  signed int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  if (*(unsigned __int8 *)(a2 + 284) <= 8u)
  {
    v4 = result;
    v5 = *(_DWORD *)(a2 + 276);
    v6 = *(_DWORD *)(a2 + 280);
    v7 = v6 >> 1;
    v8 = *(_QWORD *)(a2 + 120);
    v9 = *a4;
    if (v6 >> 1 >= *a4 >> 1)
      v7 = *a4 >> 1;
    v10 = 2 * (v7 & 0xFFFFFFF8);
    if (v10 <= 4)
      v10 = 4;
    v11 = v10 - 4;
    v12 = v9 < v6;
    if (v9 < v6)
      v13 = v11;
    else
      v13 = 2 * v7;
    if (v12)
      v14 = v7 & 0xFFFFFFF8;
    else
      v14 = v7;
    *a4 = v13;
    if (a3 >= 51)
      v15 = 51;
    else
      v15 = a3;
    if (v15 <= 15)
      v15 = 15;
    v16 = v15 - 15;
    v17 = byte_1B692B685[v16];
    v18 = byte_1B692B6B6[v16];
    v28 = *(_DWORD *)(result + 132);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, v28, 1);
    v29 = result;
    *(_DWORD *)(v4 + 132) = v14;
    if ((_DWORD)v18)
      v19 = v5 < 2;
    else
      v19 = 1;
    if (!v19)
    {
      v20 = 0;
      v21 = v14 - v28;
      v22 = v5 >> 1;
      v23 = result + 4 * v8;
      v27 = v22;
      do
      {
        if ((v20 | 4) < v22)
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(v29 + 2 * (v20 | 4), v8, v17, v18, v21);
        v24 = v20 + 8;
        if (v20 + 8 < v22)
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(v29 + 2 * v24, v8, v17, v18, v21);
        if (v28)
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 120))(v29 + 2 * v20, v8, v17, v18, 8);
        if ((int)v21 >= 5)
        {
          v25 = 4;
          v26 = v23;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 120))(v26, v8, v17, v18, 8);
            v25 += 4;
            v26 += 4 * v8;
          }
          while ((int)v21 > v25);
        }
        v23 += 16;
        v20 = v24;
        v22 = v27;
      }
      while (v24 < v27);
    }
  }
  return result;
}

__n128 sub_1B67F778C(int8x8_t *a1, uint64_t a2)
{
  unsigned int v2;
  int8x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  __n128 result;

  v2 = a1[-1].u8[7];
  v3 = vdup_n_s8(v2);
  *(_BYTE *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  v4 = *(int8x16_t *)a1->i8;
  v5 = vextq_s8(v4, v4, 8uLL);
  *(uint8x8_t *)&v6 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *a1, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), (uint8x8_t)*a1);
  *((uint8x8_t *)&v6 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1->i8, v5, 9uLL)), *(uint8x8_t *)v5.i8);
  *(_OWORD *)a2 = v6;
  *(_BYTE *)(a2 + 15) = v4.i8[15];
  v7 = *(int8x16_t *)a1[2].i8;
  v8 = vextq_s8(v7, v7, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v7.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL)), *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v8, 9uLL)), *(uint8x8_t *)v8.i8);
  *(__n128 *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 31) = v7.i8[15];
  return result;
}

__n128 sub_1B67F7824(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  int8x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint8x8_t v6;
  int8x16_t v7;
  uint8x8_t v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  __int128 v13;
  __n128 result;

  v2 = a1[-1].u8[15];
  v3 = vdup_n_s8(v2);
  *(_BYTE *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  v4 = *a1;
  v5 = a1[1];
  v6 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  v7 = vextq_s8(v5, v5, 8uLL);
  v8 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)&v9 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v8, v6);
  *((uint8x8_t *)&v9 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL)), *(uint8x8_t *)v7.i8);
  *(int8x16_t *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 31) = v5.i8[15];
  v10 = a1[2];
  v11 = a1[3];
  v12 = vextq_s8(v11, v11, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v10.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 1uLL)), *(uint8x8_t *)v10.i8);
  *(uint8x8_t *)&v13 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 1uLL)), *(uint8x8_t *)v11.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  *((uint8x8_t *)&v13 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v12, 9uLL)), *(uint8x8_t *)v12.i8);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 63) = v11.i8[15];
  return result;
}

void sub_1B67F790C(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint8x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x8_t *v16;
  BOOL v17;

  v2 = a1[-1].u8[15];
  v3 = a1[3].u8[15];
  v4 = v3 + v2 - 2 * a1[1].u8[15];
  if (v4 < 0)
    v4 = 2 * a1[1].u8[15] - (v3 + v2);
  if (v4 > 7)
    goto LABEL_7;
  v5 = a1[7].u8[15];
  v6 = v5 + v2 - 2 * a1[5].u8[15];
  if (v6 < 0)
    v6 = 2 * a1[5].u8[15] - (v5 + v2);
  if (v6 < 8)
  {
    v7 = 0;
    v8 = (uint8x8_t)vdup_n_s8(v2);
    *(_BYTE *)(a2 - 1) = v2;
    v9 = (int16x8_t)vmovl_u8(v8);
    v10 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v5), v8);
    v11 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v3), v8);
    v12 = vmulq_s16(v10, (int16x8_t)xmmword_1B6917640);
    v13 = vmulq_s16(v11, (int16x8_t)xmmword_1B6917640);
    v14 = vshlq_n_s16(v10, 3uLL);
    v15 = vshlq_n_s16(v11, 3uLL);
    do
    {
      v16 = (int8x8_t *)(a2 + v7);
      v16[8] = vqmovun_s16(vrsraq_n_s16(v9, v12, 6uLL));
      *v16 = vqmovun_s16(vrsraq_n_s16(v9, v13, 6uLL));
      v12 = vaddq_s16(v12, v14);
      v13 = vaddq_s16(v13, v15);
      v17 = v7 >= 0x38;
      v7 += 8;
    }
    while (!v17);
  }
  else
  {
LABEL_7:
    sub_1B67F79CC(a1, a2);
  }
}

__n128 sub_1B67F79CC(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  int8x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  int8x16_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int8x16_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  __int128 v32;
  __n128 result;

  v2 = a1[-1].u8[15];
  v3 = vdup_n_s8(v2);
  *(_BYTE *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[4].u8[0] + 2) >> 2;
  v4 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  v9 = (uint8x8_t)vextq_s8(v5, v5, 8uLL).u64[0];
  v10 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v11 = vextq_s8(v6, v6, 8uLL);
  v12 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  v13 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL));
  v14 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL));
  v15 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 9uLL));
  v16 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 1uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)v5.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  *(uint8x8_t *)v7.i8 = vrhadd_u8(v14, *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&v17 = vrhadd_u8(v16, *(uint8x8_t *)v6.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v12, v8);
  v5.u64[1] = (unint64_t)vrhadd_u8(v13, v9);
  *(int8x16_t *)a2 = v4;
  *(int8x16_t *)(a2 + 16) = v5;
  v7.u64[1] = (unint64_t)vrhadd_u8(v15, v10);
  *((uint8x8_t *)&v17 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v11, 9uLL)), *(uint8x8_t *)v11.i8);
  *(int8x16_t *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v17;
  *(_BYTE *)(a2 + 63) = v6.i8[15];
  v18 = a1[4];
  v19 = a1[5];
  v21 = a1[6];
  v20 = a1[7];
  v22 = (uint8x8_t)vextq_s8(v19, v19, 8uLL).u64[0];
  v23 = (uint8x8_t)vextq_s8(v21, v21, 8uLL).u64[0];
  v24 = vextq_s8(v20, v20, 8uLL);
  v25 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 1uLL));
  v26 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 9uLL));
  v27 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL));
  v28 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 9uLL));
  v29 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL));
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v18.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL)), *(uint8x8_t *)v18.i8);
  *(uint8x8_t *)v18.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(uint8x8_t *)v19.i8 = vrhadd_u8(v25, *(uint8x8_t *)v19.i8);
  v30 = vrhadd_u8(v26, v22);
  *(uint8x8_t *)v21.i8 = vrhadd_u8(v27, *(uint8x8_t *)v21.i8);
  v31 = vrhadd_u8(v28, v23);
  *(uint8x8_t *)&v32 = vrhadd_u8(v29, *(uint8x8_t *)v20.i8);
  result.n128_u64[1] = v18.i64[0];
  v19.u64[1] = (unint64_t)v30;
  v21.u64[1] = (unint64_t)v31;
  *((uint8x8_t *)&v32 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v24, 9uLL)), *(uint8x8_t *)v24.i8);
  *(__n128 *)(a2 + 64) = result;
  *(int8x16_t *)(a2 + 80) = v19;
  *(int8x16_t *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v32;
  *(_BYTE *)(a2 + 127) = v20.i8[15];
  return result;
}

int8x8_t sub_1B67F7B64(uint64_t a1, int8x8_t *a2, uint64_t a3, _DWORD *a4)
{
  uint16x8_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  int16x4_t v9;
  int16x4_t v10;
  uint16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x8_t result;
  _DWORD *v15;

  v7 = a2[1];
  v8 = (uint8x8_t)vdup_lane_s8(v7, 4);
  v9 = (int16x4_t)vmull_u8((uint8x8_t)0x807060504030201, (uint8x8_t)vdup_lane_s8(*a2, 4)).u64[0];
  v10 = (int16x4_t)vmovl_u8((uint8x8_t)v7).u64[0];
  v11 = vmovl_u8((uint8x8_t)*a2);
  *(int16x4_t *)v4.i8 = vmul_n_s16((int16x4_t)0x100020003, v11.i16[0]);
  *(int16x4_t *)v5.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 1);
  *(int16x4_t *)v6.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 2);
  *(int16x4_t *)v11.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 3);
  *(int16x4_t *)v12.i8 = vmla_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v4, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 0)), v10, (int16x4_t)0x3000300030003);
  *(int16x4_t *)v13.i8 = vadd_s16((int16x4_t)*(_OWORD *)&vaddw_u8(vmlal_u8(v6, (uint8x8_t)0x807060504030201, v8), (uint8x8_t)v7), vdup_lane_s16(v9, 2));
  v12.u64[1] = (unint64_t)vadd_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v5, (uint8x8_t)0x807060504030201, v8), vadd_s16(v10, v10)), vdup_lane_s16(v9, 1));
  v13.u64[1] = (unint64_t)vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v11, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 3));
  *(int8x8_t *)v11.i8 = vrshrn_n_s16(v12, 3uLL);
  *a4 = v11.i32[0];
  *(_DWORD *)((char *)a4 + a3) = v11.i32[1];
  result = vrshrn_n_s16(v13, 3uLL);
  v15 = (_DWORD *)((char *)a4 + a3 + a3);
  *v15 = result.i32[0];
  *(_DWORD *)((char *)v15 + a3) = result.i32[1];
  return result;
}

int8x8_t sub_1B67F7C10(uint64_t a1, int8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4;
  const char *v5;
  uint8x8_t v6;
  const char *v7;
  uint8x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x8_t result;
  int8x8_t *v25;
  int8x8_t *v26;
  int8x8_t *v27;
  int8x8_t *v28;
  int8x8_t *v29;

  v4 = (uint8x8_t)a2[2];
  v5 = (const char *)&a2[3];
  v6 = (uint8x8_t)vld1_dup_s8(v5);
  v7 = (const char *)&a2[1];
  v8 = (uint8x8_t)vld1_dup_s8(v7);
  v9 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v8);
  v10 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  v11 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  v12 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  v13 = vdupq_laneq_s16(v9, 4);
  v14 = vdupq_laneq_s16(v9, 5);
  v15 = vdupq_laneq_s16(v9, 6);
  v16 = vmull_u8((uint8x8_t)0x807060504030201, v6);
  v17 = vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 7), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), vdupq_laneq_s16(v9, 7));
  v18 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 0), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x707070707070707), vdupq_lane_s16(*(int16x4_t *)v9.i8, 0));
  v19 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 1), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x606060606060606), v10);
  v20 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 2), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x505050505050505), v11);
  v21 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 3), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 2uLL)), v12);
  v22 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 4), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x303030303030303), v13);
  v23 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 5), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 1uLL)), v14);
  result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v16, v4), (uint8x8_t)vdup_lane_s8(*a2, 6), (uint8x8_t)0x1020304050607), v15), 4uLL);
  *a4 = vrshrn_n_s16(v18, 4uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v19, 4uLL);
  v25 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v25 = vrshrn_n_s16(v20, 4uLL);
  v26 = (int8x8_t *)((char *)v25 + a3);
  *v26 = vrshrn_n_s16(v21, 4uLL);
  v27 = (int8x8_t *)((char *)v26 + a3);
  *v27 = vrshrn_n_s16(v22, 4uLL);
  v28 = (int8x8_t *)((char *)v27 + a3);
  *v28 = vrshrn_n_s16(v23, 4uLL);
  v29 = (int8x8_t *)((char *)v28 + a3);
  *v29 = result;
  *(int8x8_t *)((char *)v29 + a3) = vrshrn_n_s16(v17, 4uLL);
  return result;
}

int8x16_t sub_1B67F7D6C(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  const char *v4;
  uint8x8_t v5;
  const char *v6;
  uint8x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  uint8x8_t v15;
  uint16x8_t v16;
  uint8x8_t v17;
  uint16x8_t v18;
  uint8x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint8x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint8x16_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t *v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int8x16_t *v50;
  int16x8_t v51;
  uint8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t result;

  v4 = (const char *)(a2 + 48);
  v5 = (uint8x8_t)vld1_dup_s8(v4);
  v6 = (const char *)(a2 + 16);
  v7 = (uint8x8_t)vld1_dup_s8(v6);
  v8 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v7);
  v9 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v7);
  v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  v13 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  v14 = *(int8x16_t *)a2;
  v15 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0);
  v16 = vmull_u8(v15, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  v17 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 1);
  v18 = vmull_u8(v15, (uint8x8_t)0x1020304050607);
  v19 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 2);
  v20 = vmull_u8(v19, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  v21 = vmull_u8(v19, (uint8x8_t)0x1020304050607);
  v22 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 3);
  v23 = vmull_u8(v22, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  v24 = vmull_u8(v22, (uint8x8_t)0x1020304050607);
  v25.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v25.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v26 = *(uint8x16_t *)(a2 + 32);
  v27 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v16, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xF0F0F0F0F0F0F0FLL), v10);
  v28 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v18, v26, v25), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v10);
  v18.i64[0] = 0xE0E0E0E0E0E0E0ELL;
  v18.i64[1] = 0xE0E0E0E0E0E0E0ELL;
  v29 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(v17, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xE0E0E0E0E0E0E0ELL), v11);
  v30 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(v17, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v18), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v11);
  v31.i64[0] = 0xD0D0D0D0D0D0D0DLL;
  v31.i64[1] = 0xD0D0D0D0D0D0D0DLL;
  v32 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v20, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xD0D0D0D0D0D0D0DLL), v12);
  v33 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v21, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v12);
  v31.i64[0] = 0xC0C0C0C0C0C0C0CLL;
  v31.i64[1] = 0xC0C0C0C0C0C0C0CLL;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16(v27, 5uLL), v28, 5uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v29, 5uLL), v30, 5uLL);
  v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *v34 = vrshrn_high_n_s16(vrshrn_n_s16(v32, 5uLL), v33, 5uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v23, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xC0C0C0C0C0C0C0CLL), v13), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v24, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v13), 5uLL);
  v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  v36 = vdupq_laneq_s16(v8, 4);
  v37 = vdupq_laneq_s16(v8, 5);
  v38 = vdupq_laneq_s16(v8, 6);
  v39 = vdupq_laneq_s16(v8, 7);
  *(int8x8_t *)v8.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 4);
  *(int8x8_t *)v31.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 5);
  *(int8x8_t *)v29.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 6);
  *(int8x8_t *)v21.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 7);
  v24.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v24.i64[1] = 0xB0B0B0B0B0B0B0BLL;
  v40 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xB0B0B0B0B0B0B0BLL), v36);
  v41 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v24), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v36);
  v8.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v8.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  v42 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xA0A0A0A0A0A0A0ALL), v37);
  v43 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v37);
  v8.i64[0] = 0x909090909090909;
  v8.i64[1] = 0x909090909090909;
  v44 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x909090909090909), v38);
  v45 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v38);
  v8.i64[0] = 0x303030303030303;
  v8.i64[1] = 0x303030303030303;
  *v35 = vrshrn_high_n_s16(vrshrn_n_s16(v40, 5uLL), v41, 5uLL);
  *(int8x16_t *)((char *)v35 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v42, 5uLL), v43, 5uLL);
  v46 = (int8x16_t *)((char *)v35 + a3 + a3);
  *v46 = vrshrn_high_n_s16(vrshrn_n_s16(v44, 5uLL), v45, 5uLL);
  *(int8x16_t *)((char *)v46 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 3uLL)), v39), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 3uLL), *(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v39),
                                       5uLL);
  v47 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
  v48 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  v49 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  v50 = (int8x16_t *)((char *)v35 + 4 * a3);
  v51 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  *(int8x8_t *)v44.i8 = vdup_laneq_s8(v14, 8);
  *(int8x8_t *)v29.i8 = vdup_laneq_s8(v14, 9);
  *(int8x8_t *)v21.i8 = vdup_laneq_s8(v14, 10);
  *(int8x8_t *)v41.i8 = vdup_laneq_s8(v14, 11);
  v52.i64[0] = 0x707070707070707;
  v52.i64[1] = 0x707070707070707;
  v53 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x707070707070707), v47);
  v54 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x1020304050607), v26, v52), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v47);
  v44.i64[0] = 0x606060606060606;
  v44.i64[1] = 0x606060606060606;
  v55 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x606060606060606), v48);
  v56 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v44), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v48);
  v29.i64[0] = 0x505050505050505;
  v29.i64[1] = 0x505050505050505;
  *v50 = vrshrn_high_n_s16(vrshrn_n_s16(v53, 5uLL), v54, 5uLL);
  *(int8x16_t *)((char *)v50 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v55, 5uLL), v56, 5uLL);
  v57 = (int8x16_t *)((char *)v50 + a3 + a3);
  *v57 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x505050505050505), v49), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v29), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v49),
           5uLL);
  *(int8x16_t *)((char *)v57 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 2uLL)), v51), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 2uLL), *(uint8x8_t *)v41.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v51),
                                       5uLL);
  v58 = (int8x16_t *)((char *)v50 + 4 * a3);
  v59 = vdupq_laneq_s16(v9, 4);
  v60 = vdupq_laneq_s16(v9, 5);
  v61 = vdupq_laneq_s16(v9, 6);
  v62 = vdupq_laneq_s16(v9, 7);
  *(int8x8_t *)v51.i8 = vdup_laneq_s8(v14, 12);
  *(int8x8_t *)v53.i8 = vdup_laneq_s8(v14, 13);
  *(int8x8_t *)v55.i8 = vdup_laneq_s8(v14, 14);
  *(int8x8_t *)v14.i8 = vdup_laneq_s8(v14, 15);
  *v58 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x303030303030303), v59), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v59),
           5uLL);
  v63 = (int8x16_t *)((char *)v58 + a3);
  *v63 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 1uLL)), v60), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 1uLL), *(uint8x8_t *)v53.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v60), 5uLL);
  v64 = (int8x16_t *)((char *)v63 + a3);
  *v64 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(vmull_u8((uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8), *(uint8x8_t *)v55.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), v61), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vaddw_high_u8(vmull_u8(*(uint8x8_t *)v55.i8, (uint8x8_t)0x1020304050607), v26), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v61), 5uLL);
  result = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), v62), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v5), *(uint8x8_t *)v14.i8, (uint8x8_t)0x1020304050607), v62), 5uLL);
  *(int8x16_t *)((char *)v64 + a3) = result;
  return result;
}

_OWORD *sub_1B67F8180(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  const char *i8;
  uint8x8_t v14;
  const char *v15;
  uint8x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *result;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  _OWORD v47[4];
  _OWORD v48[4];
  _OWORD v49[4];
  uint64_t v50;

  v4 = 0;
  v50 = *MEMORY[0x1E0C80C00];
  v49[0] = xmmword_1B6917650;
  v49[1] = xmmword_1B6917660;
  v49[2] = xmmword_1B6917670;
  v49[3] = xmmword_1B6917680;
  v5 = a2[1];
  v6 = a2[4];
  v7 = a2[5];
  v8 = vmovl_high_u8(*a2);
  v48[0] = vmovl_u8(*(uint8x8_t *)a2->i8);
  v48[1] = v8;
  v48[2] = vmovl_u8(*(uint8x8_t *)v5.i8);
  v48[3] = vmovl_high_u8(v5);
  v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
  v10 = (int16x8_t)vmovl_high_u8(v6);
  v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
  v12 = (int16x8_t)vmovl_high_u8(v7);
  i8 = a2[6].i8;
  v14 = (uint8x8_t)vld1_dup_s8(i8);
  v15 = a2[2].i8;
  v16 = (uint8x8_t)vld1_dup_s8(v15);
  v17 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v14);
  v18 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v14);
  v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v14);
  v20 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v14);
  v47[0] = vmull_u8((uint8x8_t)0x807060504030201, v16);
  v47[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v16);
  v21 = 4 * a3;
  v22 = 7 * a3;
  v23 = 6 * a3;
  v24 = 5 * a3;
  v25 = 3 * a3 + 16;
  v26 = 2 * a3 + 16;
  v47[2] = vmull_u8((uint8x8_t)0x1817161514131211, v16);
  v47[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v16);
  v27 = a3 + 16;
  result = v47;
  do
  {
    v29 = (int16x8_t)v47[v4];
    v30 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 0);
    v31 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 1);
    v32 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 2);
    v33 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 3);
    v34 = (int16x8_t)v48[v4];
    v35 = (int16x8_t)v49[v4];
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1B6917650, *(int16x4_t *)v34.i8, 0), v30), v9, *(int16x4_t *)v35.i8, 0), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1B6917660, *(int16x4_t *)v34.i8, 0), v30), v10, *(int16x4_t *)v35.i8, 0), 6uLL);
    v36 = (int8x16_t *)((char *)a4 + v27);
    v36[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1B6917650, *(int16x4_t *)v34.i8, 1), v31), v9, *(int16x4_t *)v35.i8, 1), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1B6917660, *(int16x4_t *)v34.i8, 1), v31), v10, *(int16x4_t *)v35.i8, 1), 6uLL);
    v37 = (int8x16_t *)((char *)a4 + v26);
    v37[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1B6917650, *(int16x4_t *)v34.i8, 2), v32), v9, *(int16x4_t *)v35.i8, 2), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1B6917660, *(int16x4_t *)v34.i8, 2), v32), v10, *(int16x4_t *)v35.i8, 2), 6uLL);
    v38 = (int8x16_t *)((char *)a4 + v25);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1B6917650, *(int16x4_t *)v34.i8, 3), v33), v9, *(int16x4_t *)v35.i8, 3), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1B6917660, *(int16x4_t *)v34.i8, 3), v33), v10, *(int16x4_t *)v35.i8, 3), 6uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v19), v11, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1B6917670, *(int16x4_t *)v34.i8, 0), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v20), v12, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1B6917680, *(int16x4_t *)v34.i8, 0), 6uLL);
    *v36 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v19), v11, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1B6917670, *(int16x4_t *)v34.i8, 1), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v20), v12, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1B6917680, *(int16x4_t *)v34.i8, 1), 6uLL);
    *v37 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v19), v11, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1B6917670, *(int16x4_t *)v34.i8, 2), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v20), v12, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1B6917680, *(int16x4_t *)v34.i8, 2), 6uLL);
    *v38 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v19), v11, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1B6917670, *(int16x4_t *)v34.i8, 3), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v20), v12, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1B6917680, *(int16x4_t *)v34.i8, 3), 6uLL);
    v39 = (int8x16_t *)((char *)a4 + v21);
    v40 = vdupq_laneq_s16(v29, 4);
    v41 = vdupq_laneq_s16(v29, 5);
    v42 = vdupq_laneq_s16(v29, 6);
    v43 = vdupq_laneq_s16(v29, 7);
    *v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1B6917650, v34, 4), v40), v9, v35, 4), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1B6917660, v34, 4), v40), v10, v35, 4), 6uLL);
    v44 = (int8x16_t *)((char *)a4 + v24);
    *v44 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1B6917650, v34, 5), v41), v9, v35, 5), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1B6917660, v34, 5), v41), v10, v35, 5), 6uLL);
    v45 = (int8x16_t *)((char *)a4 + v23);
    *v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1B6917650, v34, 6), v42), v9, v35, 6), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1B6917660, v34, 6), v42), v10, v35, 6), 6uLL);
    v46 = (int8x16_t *)((char *)a4 + v22);
    *v46 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1B6917650, v34, 7), v43), v9, v35, 7), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1B6917660, v34, 7), v43), v10, v35, 7), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v19), v11, v35, 4), (int16x8_t)xmmword_1B6917670, v34, 4), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v20), v12, v35, 4), (int16x8_t)xmmword_1B6917680, v34, 4), 6uLL);
    v44[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v19), v11, v35, 5), (int16x8_t)xmmword_1B6917670, v34, 5), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v20), v12, v35, 5), (int16x8_t)xmmword_1B6917680, v34, 5), 6uLL);
    v45[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v19), v11, v35, 6), (int16x8_t)xmmword_1B6917670, v34, 6), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v20), v12, v35, 6), (int16x8_t)xmmword_1B6917680, v34, 6), 6uLL);
    v46[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v19), v11, v35, 7), (int16x8_t)xmmword_1B6917670, v34, 7), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v20), v12, v35, 7), (int16x8_t)xmmword_1B6917680, v34, 7), 6uLL);
    a4 = (int8x16_t *)((char *)v39 + v21);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

_OWORD *sub_1B67F859C(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  const char *i8;
  uint8x8_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *result;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint8x8_t v37;
  int8x8_t v38;
  int8x16_t v39;
  uint8x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  uint8x8_t v46;
  int8x16_t v47;
  uint8x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint8x8_t v59;
  uint8x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  _OWORD v79[8];
  _OWORD v80[4];
  _OWORD v81[8];
  uint64_t v82;

  v4 = 0;
  v82 = *MEMORY[0x1E0C80C00];
  v81[0] = xmmword_1B6917690;
  v81[1] = xmmword_1B69176A0;
  v81[2] = xmmword_1B69176B0;
  v81[3] = xmmword_1B69176C0;
  v81[4] = xmmword_1B6917650;
  v81[5] = xmmword_1B6917660;
  v81[6] = xmmword_1B6917670;
  v81[7] = xmmword_1B6917680;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[10];
  v11 = a2[11];
  v80[0] = *a2;
  v80[1] = v5;
  v80[2] = v6;
  v80[3] = v7;
  v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
  i8 = a2[12].i8;
  v13 = (uint8x8_t)vld1_dup_s8(i8);
  v14 = a2[4].i8;
  *(int8x8_t *)v5.i8 = vld1_dup_s8(v14);
  v77 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v13);
  v78 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v13);
  v76 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v13);
  v75 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v13);
  v74 = (int16x8_t)vmull_u8((uint8x8_t)0x2827262524232221, v13);
  v73 = (int16x8_t)vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, v13);
  v71 = (int16x8_t)vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, v13);
  v79[0] = vmull_u8((uint8x8_t)0x807060504030201, *(uint8x8_t *)v5.i8);
  v79[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, *(uint8x8_t *)v5.i8);
  v79[2] = vmull_u8((uint8x8_t)0x1817161514131211, *(uint8x8_t *)v5.i8);
  v79[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, *(uint8x8_t *)v5.i8);
  v79[4] = vmull_u8((uint8x8_t)0x2827262524232221, *(uint8x8_t *)v5.i8);
  v79[5] = vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, *(uint8x8_t *)v5.i8);
  v79[6] = vmull_u8((uint8x8_t)0x3837363534333231, *(uint8x8_t *)v5.i8);
  v79[7] = vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, *(uint8x8_t *)v5.i8);
  v15 = 4 * a3;
  v16 = a3 + 48;
  v17 = 2 * a3 + 48;
  v18 = v17 + a3;
  v19 = 5 * a3;
  v20 = 6 * a3;
  v21 = 7 * a3;
  result = v79;
  v23 = (int16x8_t)vmovl_high_u8(v8);
  v24 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
  v25 = (int16x8_t)vmovl_high_u8(v9);
  v26 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
  v27 = (int16x8_t)vmovl_high_u8(v10);
  v28 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
  v30 = (int16x8_t)vmull_u8((uint8x8_t)0x3837363534333231, v13);
  v29 = (int16x8_t)vmovl_high_u8(v11);
  do
  {
    v31 = (int16x8_t)v79[v4];
    v32 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 0);
    v33 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 1);
    v34 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 2);
    v35 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 3);
    v36 = (int16x8_t)v81[v4];
    v37 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)((char *)v80 + 8 * v4), 0);
    v38 = *(int8x8_t *)((char *)v80 + 8 * v4);
    v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v77), v37, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 0), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v78), v37, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 0), 7uLL);
    v40 = (uint8x8_t)vdup_lane_s8(v38, 1);
    v41 = (int16x8_t)vmovl_u8(v37);
    v42 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v77), v40, (uint8x8_t)0x38393A3B3C3D3E3FLL);
    v43 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v78), v40, (uint8x8_t)0x3031323334353637);
    v44 = (int16x8_t)vmovl_u8(v40);
    v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(v42, v24, *(int16x4_t *)v36.i8, 1), 7uLL), vmlaq_lane_s16(v43, v23, *(int16x4_t *)v36.i8, 1), 7uLL);
    v46 = (uint8x8_t)vdup_lane_s8(v38, 2);
    v47 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v77), v46, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 2), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v78), v46, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 2), 7uLL);
    v48 = (uint8x8_t)vdup_lane_s8(v38, 3);
    v49 = (int16x8_t)vmovl_u8(v46);
    v50 = (int16x8_t)vmovl_u8(v48);
    *a4 = v39;
    v51 = (int8x16_t *)((char *)a4 + v16);
    v51[-3] = v45;
    v52 = (int8x16_t *)((char *)a4 + v17);
    v52[-3] = v47;
    v53 = (int8x16_t *)((char *)a4 + v18);
    v53[-3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v77), v48, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 3), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v78), v48, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 3), 7uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v76), v26, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1B69176B0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v75), v25, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1B69176C0, v41), 7uLL);
    v51[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v76), v26, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1B69176B0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v75), v25, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1B69176C0, v44), 7uLL);
    v52[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v76), v26, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1B69176B0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v75), v25, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1B69176C0, v49), 7uLL);
    v53[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v76), v26, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1B69176B0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v75), v25, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1B69176C0, v50), 7uLL);
    a4[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v74), v28, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1B6917650, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v73), v27, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1B6917660, v41), 7uLL);
    v51[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v74), v28, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1B6917650, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v73), v27, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1B6917660, v44), 7uLL);
    v52[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v74), v28, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1B6917650, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v73), v27, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1B6917660, v49), 7uLL);
    v53[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v74), v28, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1B6917650, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v73), v27, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1B6917660, v50), 7uLL);
    a4[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v30), v72, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1B6917670, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v71), v29, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1B6917680, v41), 7uLL);
    *v51 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v30), v72, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1B6917670, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v71), v29, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1B6917680, v44), 7uLL);
    *v52 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v30), v72, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1B6917670, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v71), v29, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1B6917680, v49), 7uLL);
    *v53 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v30), v72, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1B6917670, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v71), v29, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1B6917680, v50), 7uLL);
    v54 = (int8x16_t *)((char *)a4 + v15);
    v55 = vdupq_laneq_s16(v31, 4);
    v56 = vdupq_laneq_s16(v31, 5);
    v57 = vdupq_laneq_s16(v31, 6);
    v58 = vdupq_laneq_s16(v31, 7);
    v59 = (uint8x8_t)vdup_lane_s8(v38, 4);
    v60 = (uint8x8_t)vdup_lane_s8(v38, 5);
    v61 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v77), v59, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 4), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v78), v59, (uint8x8_t)0x3031323334353637), v23, v36, 4), 7uLL);
    *(int8x8_t *)v44.i8 = vdup_lane_s8(v38, 6);
    v62 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v77), *(uint8x8_t *)v44.i8, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 6), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v78), *(uint8x8_t *)v44.i8, (uint8x8_t)0x3031323334353637), v23, v36, 6), 7uLL);
    v63 = (int16x8_t)vmovl_u8(v59);
    v64 = (int16x8_t)vmovl_u8(v60);
    v65 = (uint8x8_t)vdup_lane_s8(v38, 7);
    v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v44.i8);
    v67 = (int16x8_t)vmovl_u8(v65);
    *v54 = v61;
    v68 = (int8x16_t *)((char *)a4 + v19);
    *v68 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v77), v60, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 5), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v78), v60, (uint8x8_t)0x3031323334353637), v23, v36, 5), 7uLL);
    v69 = (int8x16_t *)((char *)a4 + v20);
    *v69 = v62;
    v70 = (int8x16_t *)((char *)a4 + v21);
    *v70 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v77), v65, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 7), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v78), v65, (uint8x8_t)0x3031323334353637), v23, v36, 7), 7uLL);
    v54[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v76), v26, v36, 4), (int16x8_t)xmmword_1B69176B0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v75), v25, v36, 4), (int16x8_t)xmmword_1B69176C0, v63), 7uLL);
    v68[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v76), v26, v36, 5), (int16x8_t)xmmword_1B69176B0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v75), v25, v36, 5), (int16x8_t)xmmword_1B69176C0, v64), 7uLL);
    v69[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v76), v26, v36, 6), (int16x8_t)xmmword_1B69176B0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v75), v25, v36, 6), (int16x8_t)xmmword_1B69176C0, v66), 7uLL);
    v70[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v76), v26, v36, 7), (int16x8_t)xmmword_1B69176B0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v75), v25, v36, 7), (int16x8_t)xmmword_1B69176C0, v67), 7uLL);
    v54[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v74), v28, v36, 4), (int16x8_t)xmmword_1B6917650, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v73), v27, v36, 4), (int16x8_t)xmmword_1B6917660, v63), 7uLL);
    v68[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v74), v28, v36, 5), (int16x8_t)xmmword_1B6917650, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v73), v27, v36, 5), (int16x8_t)xmmword_1B6917660, v64), 7uLL);
    v69[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v74), v28, v36, 6), (int16x8_t)xmmword_1B6917650, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v73), v27, v36, 6), (int16x8_t)xmmword_1B6917660, v66), 7uLL);
    v70[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v74), v28, v36, 7), (int16x8_t)xmmword_1B6917650, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v73), v27, v36, 7), (int16x8_t)xmmword_1B6917660, v67), 7uLL);
    v54[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v30), v72, v36, 4), (int16x8_t)xmmword_1B6917670, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v71), v29, v36, 4), (int16x8_t)xmmword_1B6917680, v63), 7uLL);
    v68[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v30), v72, v36, 5), (int16x8_t)xmmword_1B6917670, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v71), v29, v36, 5), (int16x8_t)xmmword_1B6917680, v64), 7uLL);
    v69[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v30), v72, v36, 6), (int16x8_t)xmmword_1B6917670, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v71), v29, v36, 6), (int16x8_t)xmmword_1B6917680, v66), 7uLL);
    v70[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v30), v72, v36, 7), (int16x8_t)xmmword_1B6917670, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v71), v29, v36, 7), (int16x8_t)xmmword_1B6917680, v67), 7uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + v15 + v15);
  }
  while (v4 != 8);
  return result;
}

int16x8_t sub_1B67F8D78(uint16x8_t a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, _BYTE *a5)
{
  int8x8_t v5;
  int16x8_t result;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;

  v5 = (int8x8_t)a3[1];
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*a3), vdup_n_s16(a3[-1].u8[7])), 1uLL);
  result.i64[0] = vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(v5, 0)).u64[0];
  result.i64[1] = result.i64[0];
  v7 = vqmovun_s16(result).u32[0];
  v8 = vdup_lane_s8(v5, 1).u32[0];
  v9 = vdup_lane_s8(v5, 2).u32[0];
  v10 = vdup_lane_s8(v5, 3).u32[0];
  *a5 = v7;
  a5[1] = v8;
  a5[2] = v9;
  a5[3] = v10;
  v11 = &a5[a4];
  *v11 = BYTE1(v7);
  v11[1] = BYTE1(v8);
  v11[2] = BYTE1(v9);
  v11[3] = BYTE1(v10);
  v12 = &v11[a4];
  *v12 = BYTE2(v7);
  v12[1] = BYTE2(v8);
  v12[2] = BYTE2(v9);
  v12[3] = BYTE2(v10);
  v13 = &v12[a4];
  *v13 = HIBYTE(v7);
  v13[1] = HIBYTE(v8);
  v13[2] = HIBYTE(v9);
  v13[3] = HIBYTE(v10);
  return result;
}

double sub_1B67F8DC0(uint64_t a1, uint8x8_t *a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  const char *v5;
  uint8x8_t v6;
  unint64_t v7;
  int16x8_t v8;
  int8x8_t v9;
  uint64_t v10;
  double result;
  _QWORD v12[9];

  v4 = 0;
  v12[8] = *MEMORY[0x1E0C80C00];
  v5 = (char *)&a2[-1] + 7;
  v6 = (uint8x8_t)vld1_dup_s8(v5);
  v7 = (unint64_t)a2[2];
  v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8((int8x8_t)v7, 0));
  v9 = (int8x8_t)vshrd_n_u64(v7, 8uLL);
  v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*a2, v6), 1uLL));
  v12[0] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  v12[1] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  v12[2] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  v12[3] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  v12[4] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  v12[5] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  v12[6] = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  v12[7] = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    result = *(double *)&v12[v4];
    *a4 = result;
    a4 = (double *)((char *)a4 + a3);
    ++v4;
  }
  while (v4 != 8);
  return result;
}

void sub_1B67F8E98(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  int8x16_t v6;
  unint64_t v7;
  int16x8_t v8;
  int8x8_t v9;
  uint64_t v10;
  int16x8_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a2 - 1);
  v6 = *(int8x16_t *)(a2 + 32);
  v7 = vextq_s8(v6, v6, 8uLL).u64[0];
  v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v6.i8, 0));
  v9 = (int8x8_t)vshrd_n_u64(v6.u64[0], 8uLL);
  v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*(uint8x8_t *)a2, (uint8x8_t)vdup_n_s8(v5)), 1uLL));
  v11 = vshrq_n_s16((int16x8_t)vsubl_high_u8(*(uint8x16_t *)a2, (uint8x16_t)vdupq_n_s8(v5)), 1uLL);
  v16 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  v17 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  v18 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  v19 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  v23 = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    *(int8x8_t *)&v12 = *(int8x8_t *)((char *)&v16 + v4);
    *((_QWORD *)&v12 + 1) = v7;
    *a4 = v12;
    a4 = (_OWORD *)((char *)a4 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  v13 = 0;
  v14 = (uint64_t)vqmovun_s16(vaddq_s16(v11, v8));
  v16 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x38uLL), v9, 7uLL);
  v17 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x30uLL), v9, 7uLL);
  v18 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x28uLL), v9, 7uLL);
  v19 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x20uLL), v9, 7uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x18uLL), v9, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x10uLL), v9, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v14, 8uLL), v9, 7uLL);
  v23 = vext_s8((int8x8_t)v14, v9, 7uLL);
  do
  {
    *(int8x8_t *)&v15 = *(int8x8_t *)((char *)&v16 + v13);
    *((_QWORD *)&v15 + 1) = v7;
    *a4 = v15;
    a4 = (_OWORD *)((char *)a4 + a3);
    v13 += 8;
  }
  while (v13 != 64);
}

void sub_1B67F9000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  int v7;

  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = (_OWORD *)(a4 + 16);
  v7 = 32;
  do
  {
    *(v6 - 1) = v4;
    *v6 = v5;
    v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

void sub_1B67F9020(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  int v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 64;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

int8x8_t sub_1B67F9048(uint16x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int8x8_t v5;
  _DWORD *v6;
  int8x8_t result;

  v5 = *(int8x8_t *)a3;
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(a3 + 8)), vdup_n_s16(*(unsigned __int8 *)(a3 - 1))), 1uLL);
  *a5 = vqmovun_s16((int16x8_t)vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a3, 0))).u32[0];
  *(_DWORD *)((char *)a5 + a4) = vdup_lane_s8(v5, 1).u32[0];
  v6 = (_DWORD *)((char *)a5 + a4 + a4);
  *v6 = vdup_lane_s8(v5, 2).u32[0];
  result = vdup_lane_s8(v5, 3);
  *(_DWORD *)((char *)v6 + a4) = result.i32[0];
  return result;
}

int8x8_t sub_1B67F9094(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4;
  const char *v5;
  uint8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  int8x8_t result;
  int8x8_t *v14;
  int8x8_t *v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int8x8_t *v18;

  v4 = *(int8x8_t *)a2;
  v5 = (const char *)(a2 - 1);
  v6 = (uint8x8_t)vld1_dup_s8(v5);
  *a4 = vqmovun_s16(vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0)), (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 16), v6), 1uLL));
  v7 = vdup_lane_s8(v4, 1);
  v8 = vdup_lane_s8(v4, 2);
  v9 = vdup_lane_s8(v4, 3);
  v10 = vdup_lane_s8(v4, 4);
  v11 = vdup_lane_s8(v4, 5);
  v12 = vdup_lane_s8(v4, 6);
  result = vdup_lane_s8(v4, 7);
  *(int8x8_t *)((char *)a4 + a3) = v7;
  v14 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v14 = v8;
  v15 = (int8x8_t *)((char *)v14 + a3);
  *v15 = v9;
  v16 = (int8x8_t *)((char *)v15 + a3);
  *v16 = v10;
  v17 = (int8x8_t *)((char *)v16 + a3);
  *v17 = v11;
  v18 = (int8x8_t *)((char *)v17 + a3);
  *v18 = v12;
  *(int8x8_t *)((char *)v18 + a3) = result;
  return result;
}

int8x16_t sub_1B67F9110(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4;
  int16x8_t v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t result;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;

  v4 = *(int8x16_t *)a2;
  v5 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0));
  *a4 = vqmovun_high_s16(vqmovun_s16(vsraq_n_s16(v5, (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 32), (uint8x8_t)vdup_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL)), vsraq_n_s16(v5, (int16x8_t)vsubl_high_u8(*(uint8x16_t *)(a2 + 32), (uint8x16_t)vdupq_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL));
  *(int8x16_t *)((char *)a4 + a3) = vdupq_lane_s8(*(int8x8_t *)v4.i8, 1);
  v6 = (int8x16_t *)((char *)a4 + a3 + a3);
  *v6 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 2);
  v7 = (int8x16_t *)((char *)v6 + a3);
  *v7 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 3);
  v8 = (int8x16_t *)((char *)v7 + a3);
  *v8 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 4);
  v9 = (int8x16_t *)((char *)v8 + a3);
  *v9 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 5);
  v10 = (int8x16_t *)((char *)v9 + a3);
  *v10 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 6);
  v11 = (int8x16_t *)((char *)v10 + a3);
  *v11 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 7);
  result = vdupq_laneq_s8(v4, 8);
  v13 = (int8x16_t *)((char *)v11 + a3);
  *v13 = result;
  v14 = (int8x16_t *)((char *)v13 + a3);
  *v14 = vdupq_laneq_s8(v4, 9);
  v15 = (int8x16_t *)((char *)v14 + a3);
  *v15 = vdupq_laneq_s8(v4, 10);
  v16 = (int8x16_t *)((char *)v15 + a3);
  *v16 = vdupq_laneq_s8(v4, 11);
  v17 = (int8x16_t *)((char *)v16 + a3);
  *v17 = vdupq_laneq_s8(v4, 12);
  v18 = (int8x16_t *)((char *)v17 + a3);
  *v18 = vdupq_laneq_s8(v4, 13);
  v19 = (int8x16_t *)((char *)v18 + a3);
  *v19 = vdupq_laneq_s8(v4, 14);
  *(int8x16_t *)((char *)v19 + a3) = vdupq_laneq_s8(v4, 15);
  return result;
}

int8x16_t sub_1B67F9200(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  __int128 v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t result;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  _OWORD v22[2];
  uint64_t v23;

  v4 = 0;
  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v22[0] = *a2;
  v22[1] = v5;
  do
  {
    v6 = *(int8x8_t *)((char *)v22 + v4);
    v7 = vdupq_lane_s8(v6, 0);
    v8 = vdupq_lane_s8(v6, 1);
    v9 = vdupq_lane_s8(v6, 2);
    v10 = vdupq_lane_s8(v6, 3);
    v11 = vdupq_lane_s8(v6, 4);
    v12 = vdupq_lane_s8(v6, 5);
    v13 = vdupq_lane_s8(v6, 6);
    result = vdupq_lane_s8(v6, 7);
    *a4 = v7;
    a4[1] = v7;
    v15 = (int8x16_t *)((char *)a4 + a3);
    *v15 = v8;
    v15[1] = v8;
    v16 = (int8x16_t *)((char *)a4 + a3 + a3);
    *v16 = v9;
    v16[1] = v9;
    v17 = (int8x16_t *)((char *)v16 + a3);
    *v17 = v10;
    v17[1] = v10;
    v18 = (int8x16_t *)((char *)v17 + a3);
    *v18 = v11;
    v18[1] = v11;
    v19 = (int8x16_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v20 = (int8x16_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v21 = (int8x16_t *)((char *)v20 + a3);
    *v21 = result;
    v21[1] = result;
    a4 = (int8x16_t *)((char *)v21 + a3);
    v4 += 8;
  }
  while (v4 != 32);
  return result;
}

int8x16_t sub_1B67F92C8(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int8x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t result;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  _OWORD v24[4];
  uint64_t v25;

  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v24[0] = *a2;
  v24[1] = v5;
  v24[2] = v6;
  v24[3] = v7;
  do
  {
    v8 = *(int8x8_t *)((char *)v24 + v4);
    v9 = vdupq_lane_s8(v8, 0);
    v10 = vdupq_lane_s8(v8, 1);
    v11 = vdupq_lane_s8(v8, 2);
    v12 = vdupq_lane_s8(v8, 3);
    v13 = vdupq_lane_s8(v8, 4);
    v14 = vdupq_lane_s8(v8, 5);
    v15 = vdupq_lane_s8(v8, 6);
    result = vdupq_lane_s8(v8, 7);
    *a4 = v9;
    a4[1] = v9;
    a4[2] = v9;
    a4[3] = v9;
    v17 = (int8x16_t *)((char *)a4 + a3);
    *v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    v18 = (int8x16_t *)((char *)a4 + a3 + a3);
    *v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    v19 = (int8x16_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    v20 = (int8x16_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    v21 = (int8x16_t *)((char *)v20 + a3);
    *v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    v22 = (int8x16_t *)((char *)v21 + a3);
    *v22 = v15;
    v22[1] = v15;
    v22[2] = v15;
    v22[3] = v15;
    v23 = (int8x16_t *)((char *)v22 + a3);
    *v23 = result;
    v23[1] = result;
    v23[2] = result;
    v23[3] = result;
    a4 = (int8x16_t *)((char *)v23 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  return result;
}

int16x8_t sub_1B67F93BC(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  int8x8_t v4;
  int16x4_t v5;
  int16x4_t v6;
  uint16x8_t v7;
  uint8x8_t v8;
  int16x8_t result;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;

  v4 = (int8x8_t)a2[1];
  v5 = (int16x4_t)vpaddl_u8((uint8x8_t)vext_s8((int8x8_t)vshld_n_s64(*a2, 0x20uLL), v4, 4uLL));
  v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  v8 = vqrshrn_n_u16(v7, 3uLL);
  result = (int16x8_t)vaddw_u8(vmull_u8(v8, (uint8x8_t)0x303030303030302), *(uint8x8_t *)a2);
  *(int8x8_t *)v7.i8 = vrshrn_n_s16(result, 2uLL);
  *a4 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)*a2, (uint8x8_t)v4), v8, (uint8x8_t)0x303030303030302), 2uLL).u32[0];
  v10 = (char *)a4 + a3;
  *v10 = v7.i8[1];
  v10[1] = v8.i8[1];
  v10[2] = v8.i8[1];
  v10[3] = v8.i8[1];
  v11 = (char *)a4 + a3 + a3;
  *v11 = v7.i8[2];
  v11[1] = v8.i8[2];
  v11[2] = v8.i8[2];
  v11[3] = v8.i8[2];
  v12 = &v11[a3];
  *v12 = v7.i8[3];
  v12[1] = v8.i8[3];
  v12[2] = v8.i8[3];
  v12[3] = v8.i8[3];
  return result;
}

int8x8_t sub_1B67F9424(uint64_t a1, uint8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4;
  int16x4_t v5;
  int16x4_t v6;
  uint16x8_t v7;
  uint64_t v8;
  int8x8_t result;
  int8x8_t *v10;
  int8x8_t *v11;
  int8x8_t *v12;
  int8x8_t *v13;
  int8x8_t *v14;

  v4 = a2[2];
  v5 = vpadd_s16((int16x4_t)vpaddl_u8(v4), (int16x4_t)vpaddl_u8(*a2));
  v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  *(uint8x8_t *)v7.i8 = vqrshrn_n_u16(v7, 4uLL);
  v8 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(vmull_u8(*(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), *a2), 2uLL);
  result = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], v4), *(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), 2uLL);
  *a4 = result;
  *(int8x8_t *)((char *)a4 + a3) = vext_s8((int8x8_t)vshld_n_s64(v8, 0x30uLL), *(int8x8_t *)v7.i8, 7uLL);
  v10 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v10 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x28uLL), *(int8x8_t *)v7.i8, 7uLL);
  v11 = (int8x8_t *)((char *)v10 + a3);
  *v11 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x20uLL), *(int8x8_t *)v7.i8, 7uLL);
  v12 = (int8x8_t *)((char *)v11 + a3);
  *v12 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x18uLL), *(int8x8_t *)v7.i8, 7uLL);
  v13 = (int8x8_t *)((char *)v12 + a3);
  *v13 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x10uLL), *(int8x8_t *)v7.i8, 7uLL);
  v14 = (int8x8_t *)((char *)v13 + a3);
  *v14 = vext_s8((int8x8_t)vshld_n_s64(v8, 8uLL), *(int8x8_t *)v7.i8, 7uLL);
  *(int8x8_t *)((char *)v14 + a3) = vext_s8((int8x8_t)v8, *(int8x8_t *)v7.i8, 7uLL);
  return result;
}

void sub_1B67F94E0(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint8x16_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x8_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  uint64_t v10;
  int8x8_t v11;
  __int8 *v12;
  uint64_t i;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = (int16x8_t)vmovl_high_u8(*a2);
  v6 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2->i8), *a2), v4), *(uint8x8_t *)v4.i8);
  v6.i64[0] = vpaddq_s16(v6, v6).u64[0];
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  v6.i64[1] = v6.i64[0];
  v7 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v6, 5uLL);
  v8 = vmull_u8((uint8x8_t)v7, (uint8x8_t)0x303030303030302);
  v9 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v10 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(v8, *(uint8x8_t *)a2->i8), 2uLL);
  v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], *(uint8x8_t *)v4.i8), (uint8x8_t)v7, (uint8x8_t)0x303030303030302), 2uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v7, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v7, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v7, 7uLL);
  v23 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v7, 7uLL);
  v24 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v7, 7uLL);
  v25 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v7, 7uLL);
  v26 = vext_s8((int8x8_t)v10, v7, 7uLL);
  *a4 = vrshrn_high_n_s16(v11, (int16x8_t)vaddw_high_u8((uint16x8_t)v9, v4), 2uLL);
  v12 = &a4->i8[a3];
  for (i = 8; i != 64; i += 8)
  {
    *(int8x8_t *)&v14 = *(int8x8_t *)((char *)&v19 + i);
    *((int8x8_t *)&v14 + 1) = v7;
    *(_OWORD *)v12 = v14;
    v12 += a3;
  }
  v15 = 0;
  v16 = 0;
  v17 = (uint64_t)vrshrn_n_s16(vaddq_s16(v9, v5), 2uLL);
  v19 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x38uLL), v7, 7uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x30uLL), v7, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x28uLL), v7, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x20uLL), v7, 7uLL);
  v23 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x18uLL), v7, 7uLL);
  v24 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x10uLL), v7, 7uLL);
  v25 = vext_s8((int8x8_t)vshld_n_s64(v17, 8uLL), v7, 7uLL);
  v26 = vext_s8((int8x8_t)v17, v7, 7uLL);
  do
  {
    *(int8x8_t *)&v18 = *(int8x8_t *)((char *)&v19 + v16);
    *((int8x8_t *)&v18 + 1) = v7;
    *(_OWORD *)&v12[v15] = v18;
    v16 += 8;
    v15 += a3;
  }
  while (v16 != 64);
}

void sub_1B67F9674(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4;
  uint16x8_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int v8;

  v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 64)), *(uint8x8_t *)(a2 + 64)), *(uint8x16_t *)(a2 + 80)), *(uint8x8_t *)(a2 + 80));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 6uLL), v5, 6uLL);
  v7 = a4 + 1;
  v8 = 32;
  do
  {
    v7[-1] = v6;
    *v7 = v6;
    v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1B67F96D0(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4;
  uint16x8_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int v8;

  v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 32)), *(uint8x8_t *)(a2 + 32)), *(uint8x16_t *)(a2 + 48)),
                                    *(uint8x8_t *)(a2 + 48)),
                                  *(uint8x16_t *)(a2 + 128)),
                                *(uint8x8_t *)(a2 + 128)),
                              *(uint8x16_t *)(a2 + 144)),
                            *(uint8x8_t *)(a2 + 144)),
                          *(uint8x16_t *)(a2 + 160)),
                        *(uint8x8_t *)(a2 + 160)),
                      *(uint8x16_t *)(a2 + 176)),
                    *(uint8x8_t *)(a2 + 176));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 7uLL), v5, 7uLL);
  v7 = a4 + 2;
  v8 = 64;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *v7 = v6;
    v7[1] = v6;
    v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

uint64_t sub_1B67F9758(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, double a5, int8x16_t a6)
{
  int v6;
  unint64_t v7;
  unsigned int v8;
  int8x8_t *v9;
  unint64_t v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  int16x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unsigned int v16;
  uint8x8_t v17;
  uint8x8_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned __int32 *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = byte_1B6921758[(int)result];
  v7 = byte_1B6921758[(int)result];
  v8 = result - 18;
  if ((int)result < 18)
  {
    if ((v6 & 0x80) == 0)
      goto LABEL_5;
    v19 = a2 + 1;
    v8 = 18 - result;
    v9 = (int8x8_t *)a2;
  }
  else
  {
    v9 = (int8x8_t *)(a2 + 1);
    if ((v6 & 0x80000000) == 0)
    {
      ++a2;
LABEL_5:
      v10 = vshrd_n_u64(*a2, 8uLL);
      v28 = *a2;
      v29 = v10;
      v30 = vshrd_n_u64(v28, 0x10uLL);
      v31 = vshrd_n_u64(v28, 0x18uLL);
      v32 = vshrd_n_u64(v28, 0x20uLL);
      v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + (v7 >> 5) + 1), (uint8x8_t)vdup_n_s8(v7 & 0x1F)), (uint8x8_t)*(&v28 + (v7 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v7 & 0x1F))), 5uLL).u32[0];
      v12 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + (v7 >> 4) + 1), (uint8x8_t)vdup_n_s8(2 * (v7 & 0xF))), (uint8x8_t)*(&v28 + (v7 >> 4)), (uint8x8_t)vdup_n_s8(32 - 2 * (v7 & 0xF))), 5uLL).u32[0];
      v13 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ((3 * v7) >> 5) + 1), (uint8x8_t)vdup_n_s8((3 * v7) & 0x1F)), (uint8x8_t)*(&v28 + ((3 * v7) >> 5)), (uint8x8_t)vdup_n_s8(32 - ((3 * v7) & 0x1F)));
      v14 = v7 >> 3;
      v15 = (uint8x8_t)*(&v28 + (v7 >> 3));
      v16 = 4 * (v7 & 7);
      v17 = (uint8x8_t)vdup_n_s8(32 - v16);
      v18 = (uint8x8_t)*(&v28 + (v14 + 1));
      goto LABEL_9;
    }
    v19 = a2;
  }
  a6.i64[0] = *v19;
  v20 = (unint64_t)vext_s8(vqtbl1_s8(a6, qword_1B6921780[4 * v8 + 3]), *v9, 4uLL);
  v21 = vshrd_n_u64(v20, 0x20uLL);
  BYTE3(v20) = *((_BYTE *)a2 - 1);
  v28 = v21;
  v29 = vshrd_n_u64(v20, 0x18uLL);
  v30 = vshrd_n_u64(v20, 0x10uLL);
  v31 = vshrd_n_u64(v20, 8uLL);
  v32 = v20;
  v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ~(v6 >> 5)), (uint8x8_t)vdup_n_s8(v7 & 0x1F)), (uint8x8_t)*(&v28 + -(v6 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v7 & 0x1F))), 5uLL).u32[0];
  v12 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ~(v6 >> 4)), (uint8x8_t)vdup_n_s8(2 * (v7 & 0xF))), (uint8x8_t)*(&v28 + -(v6 >> 4)), (uint8x8_t)vdup_n_s8(32 - 2 * (v7 & 0xF))), 5uLL).u32[0];
  v13 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ~((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8((3 * v6) & 0x1F)), (uint8x8_t)*(&v28 + -((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8(32 - ((3 * v6) & 0x1Fu)));
  v15 = (uint8x8_t)*(&v28 + -(v6 >> 3));
  v16 = 4 * (v7 & 7);
  v17 = (uint8x8_t)vdup_n_s8(32 - v16);
  v18 = (uint8x8_t)*(&v28 + ~(v6 >> 3));
LABEL_9:
  v22 = vrshrn_n_s16(v13, 5uLL).u32[0];
  v23 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v18, (uint8x8_t)vdup_n_s8(v16)), v15, v17), 5uLL).u32[0];
  if ((int)result > 17)
  {
    *(_DWORD *)a4 = v11;
    *(_DWORD *)(a4 + a3) = v12;
    v27 = (unsigned __int32 *)(a4 + a3 + a3);
    *v27 = v22;
    *(unsigned __int32 *)((char *)v27 + a3) = v23;
  }
  else
  {
    *(_BYTE *)a4 = v11;
    *(_BYTE *)(a4 + 1) = v12;
    *(_BYTE *)(a4 + 2) = v22;
    *(_BYTE *)(a4 + 3) = v23;
    v24 = (_BYTE *)(a4 + a3);
    *v24 = BYTE1(v11);
    v24[1] = BYTE1(v12);
    v24[2] = BYTE1(v22);
    v24[3] = BYTE1(v23);
    v25 = &v24[a3];
    *v25 = BYTE2(v11);
    v25[1] = BYTE2(v12);
    v25[2] = BYTE2(v22);
    v25[3] = BYTE2(v23);
    v26 = &v25[a3];
    *v26 = HIBYTE(v11);
    v26[1] = HIBYTE(v12);
    v26[2] = HIBYTE(v22);
    v26[3] = HIBYTE(v23);
  }
  return result;
}

uint64_t sub_1B67F99EC(int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5;
  int v6;

  v5 = byte_1B6921758[a1];
  v6 = byte_1B6921758[a1];
  if (a1 < 18)
  {
    if ((v6 & 0x80) == 0)
      return sub_1B67FFAC4(byte_1B6921758[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    *(int8x8_t *)a5.i8 = a2[2];
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1B6921780[4 * (18 - a1) + 3]);
    a5.i8[7] = a2[-1].i8[7];
  }
  else
  {
    if ((v5 & 0x80000000) == 0)
    {
      a2 += 2;
      return sub_1B67FFAC4(byte_1B6921758[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    }
    *(int8x8_t *)a5.i8 = *a2;
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1B6921780[4 * (a1 - 18) + 3]);
    a5.i8[7] = a2[-1].i8[7];
    a2 += 2;
  }
  return sub_1B67FF7CC(byte_1B6921758[a1], v5, a1 < 18, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

uint64_t sub_1B67F9AA0(int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  double *v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int8x8_t v29;
  int8x8_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  double *v40;
  uint64_t v41;
  double *v42;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int8x8_t v55;
  int8x8_t v56;
  int8x8_t v57;
  uint64_t v58;
  _BOOL4 v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v7 = byte_1B6921758[a1];
  v8 = byte_1B6921758[a1];
  if (a1 >= 18)
  {
    if ((v7 & 0x80000000) == 0)
    {
      v9 = a2[2];
      v10 = a2[3];
      goto LABEL_6;
    }
    v37 = vqtbl1q_s8(*a2, *(int8x16_t *)qword_1B6921780[4 * (a1 - 18) + 2].i8);
    v35 = vextq_s8(v37, v37, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v66.i64[0] = v37.i64[0];
    v66.i64[1] = v35.i64[0];
    v36 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      v9 = *a2;
      v10 = a2[1];
LABEL_6:
      v66 = v9;
      v67.i64[0] = v10.i64[0];
      v60 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      v62 = *(int8x8_t *)v10.i8;
      v11 = v7;
      v12 = a1 > 17;
      v13 = a1 < 18;
      v67.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      v64 = 8 * a3;
      v65 = 8;
      sub_1B67FFAC4(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v60);
      v14 = *(&v64 + v12);
      sub_1B67FFAC4(v8, v8, a1 < 18, a3, (double *)((char *)a4 + v14), v60, v62);
      v15 = (double *)((char *)a4 + *(&v64 + v13));
      v16 = (unint64_t)(9 * v11) >> 8;
      v17 = *(double *)&v66.i64[v16];
      v18 = *(double *)&v66.i64[(v16 + 1)];
      v19 = *(double *)&v66.i64[(v16 + 2)];
      v20 = (9 * v11);
      v21 = v66.u64[(v16 + 3)];
      v22 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 4uLL));
      v23 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 4uLL));
      v24 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 4uLL));
      v25 = COERCE_DOUBLE(vshrd_n_u64(v21, 0x20uLL));
      if (v20 >= 0x80)
      {
        v19 = v24;
        v18 = v23;
        v17 = v22;
        *(double *)&v21 = v25;
        v20 -= 128;
      }
      v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 2uLL));
      v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 2uLL));
      v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 2uLL));
      if (v20 >= 0x40)
        *(double *)&v29 = v28;
      else
        *(double *)&v29 = v19;
      if (v20 >= 0x40)
        *(double *)&v30 = v27;
      else
        *(double *)&v30 = v18;
      if (v20 < 0x40)
      {
        v31 = v20;
      }
      else
      {
        v17 = v26;
        v31 = v20 - 64;
      }
      v32 = a1 < 18;
      sub_1B67FFAC4(v31, v8, v32, a3, v15, *(int8x8_t *)&v17, v30);
      return sub_1B67FFAC4(v31, v8, v32, a3, (double *)((char *)v15 + v14), v30, v29);
    }
    v34 = vqtbl1q_s8(a2[2], *(int8x16_t *)qword_1B6921780[4 * (18 - a1) + 2].i8);
    v35 = vextq_s8(v34, v34, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v66.i64[0] = v34.i64[0];
    v66.i64[1] = v35.i64[0];
    v36 = *a2;
  }
  v67 = v36;
  v61 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
  v63 = *(int8x8_t *)v36.i8;
  v38 = a1 > 17;
  v39 = a1 < 18;
  v64 = 8 * a3;
  v65 = 8;
  v40 = (double *)&v66.i64[(9 * (int)v7) >> 8];
  sub_1B67FF7CC(v7, v7, v39, a3, a4, *(int8x8_t *)v35.i8, *(int8x8_t *)v36.i8);
  v41 = *(&v64 + v38);
  sub_1B67FF7CC(v7, v7, a1 < 18, a3, (double *)((char *)a4 + v41), v63, v61);
  v42 = (double *)((char *)a4 + *(&v64 + v39));
  v43 = (9 * v7) | 0xFFFFFF00;
  v45 = v40[3];
  v44 = v40[4];
  v47 = *((uint64_t *)v40 + 1);
  v46 = v40[2];
  v48 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v44, 4uLL));
  v49 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v45, 4uLL));
  v50 = COERCE_DOUBLE(vext_s8((int8x8_t)v47, *(int8x8_t *)&v46, 4uLL));
  v51 = COERCE_DOUBLE(vshld_n_s64(v47, 0x20uLL));
  if (v43 <= 0xFFFFFF7F)
  {
    v44 = v48;
    v45 = v49;
    v46 = v50;
    *(double *)&v47 = v51;
    v43 += 128;
  }
  v52 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v44, 6uLL));
  v53 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v45, 6uLL));
  v54 = COERCE_DOUBLE(vext_s8((int8x8_t)v47, *(int8x8_t *)&v46, 6uLL));
  if (v43 <= 0xFFFFFFBF)
    *(double *)&v55 = v52;
  else
    *(double *)&v55 = v44;
  if (v43 <= 0xFFFFFFBF)
    *(double *)&v56 = v53;
  else
    *(double *)&v56 = v45;
  if (v43 <= 0xFFFFFFBF)
    *(double *)&v57 = v54;
  else
    *(double *)&v57 = v46;
  if (v43 <= 0xFFFFFFBF)
    v58 = v43 + 64;
  else
    v58 = v43;
  v59 = a1 < 18;
  sub_1B67FF7CC(v58, v7, v59, a3, v42, v57, v56);
  return sub_1B67FF7CC(v58, v7, v59, a3, (double *)((char *)v42 + v41), v56, v55);
}

uint64_t sub_1B67F9E34(uint64_t result, int8x16x2_t *a2, uint64_t a3, double *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *val;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int8x8_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  uint64_t v40;
  _BOOL4 v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16x2_t *v46;
  int8x16_t *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unsigned int v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  int8x8_t v74;
  int8x8_t v75;
  int8x8_t v76;
  int8x8_t v77;
  int8x8_t v78;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint64_t v89;
  int8x16x2_t v90;

  v89 = *MEMORY[0x1E0C80C00];
  v6 = byte_1B6921758[(int)result];
  v7 = (char)v6;
  v82 = result;
  if ((int)result >= 18)
  {
    if ((v6 & 0x80) == 0)
    {
      val = a2[2].val;
      v8 = 7;
      v9 = 3;
      v10 = 5;
LABEL_6:
      v12 = a2->val[v8];
      v13 = a2[v9].val[0];
      v14 = a2->val[v10];
      v85 = *val;
      v86 = v14;
      v83 = 8 * a3;
      v84 = 8;
      v15 = *(&v83 + ((int)result > 17));
      v81 = *(&v83 + ((int)result < 18));
      v87 = v13;
      v88 = v12;
      v16 = 4;
      v17 = v6;
      do
      {
        v18 = *(double *)&v85.i64[v17 >> 8];
        v19 = *(double *)&v85.i64[(v17 >> 8) + 1];
        v20 = *((double *)&v85 + (v17 >> 8) + 2);
        v21 = *((double *)&v85 + (v17 >> 8) + 3);
        v22 = *((double *)&v85 + (v17 >> 8) + 4);
        v23 = *((unint64_t *)&v85 + (v17 >> 8) + 5);
        v24 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 4uLL));
        v25 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 4uLL));
        v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 4uLL));
        v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 4uLL));
        v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, (int8x8_t)v23, 4uLL));
        v29 = COERCE_DOUBLE(vshrd_n_u64(v23, 0x20uLL));
        v30 = v17 - 128;
        if (v17 < 0x80u)
        {
          v30 = v17;
        }
        else
        {
          v22 = v28;
          v21 = v27;
          v20 = v26;
          v19 = v25;
          v18 = v24;
          *(double *)&v23 = v29;
        }
        v31 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 2uLL));
        v32 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 2uLL));
        v33 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 2uLL));
        v34 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 2uLL));
        v35 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, (int8x8_t)v23, 2uLL));
        if (v30 >= 0x40)
          *(double *)&v36 = v35;
        else
          *(double *)&v36 = v22;
        if (v30 >= 0x40)
          *(double *)&v37 = v34;
        else
          *(double *)&v37 = v21;
        if (v30 >= 0x40)
          *(double *)&v38 = v33;
        else
          *(double *)&v38 = v20;
        if (v30 >= 0x40)
          *(double *)&v39 = v32;
        else
          *(double *)&v39 = v19;
        if (v30 < 0x40)
        {
          v40 = v30;
        }
        else
        {
          v18 = v31;
          v40 = v30 - 64;
        }
        v41 = (int)result < 18;
        sub_1B67FFAC4(v40, v6, v41, a3, a4, *(int8x8_t *)&v18, v39);
        sub_1B67FFAC4(v40, v6, v41, a3, (double *)((char *)a4 + v15), v39, v38);
        sub_1B67FFAC4(v40, v6, v41, a3, (double *)((char *)a4 + 2 * v15), v38, v37);
        sub_1B67FFAC4(v40, v6, v41, a3, (double *)((char *)a4 + 3 * v15), v37, v36);
        result = v82;
        a4 = (double *)((char *)a4 + v81);
        v17 += 8 * v6;
        --v16;
      }
      while (v16);
      return result;
    }
    v47 = (int8x16_t *)&qword_1B6921780[4 * (result - 18)];
    v48 = vqtbl2q_s8(*a2, v47[1]);
    v85 = vqtbl2q_s8(*a2, *v47);
    v49 = vextq_s8(v48, v48, 8uLL);
    v49.i8[7] = a2[-1].val[1].i8[15];
    v86.i64[0] = v48.i64[0];
    v86.i64[1] = v49.i64[0];
    v46 = a2 + 2;
    v45 = 5;
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v8 = 3;
      v9 = 1;
      v10 = 1;
      val = (int8x16_t *)a2;
      goto LABEL_6;
    }
    v42 = (int8x16_t *)&qword_1B6921780[4 * (18 - result)];
    v90 = a2[2];
    v43 = vqtbl2q_s8(v90, v42[1]);
    v85 = vqtbl2q_s8(v90, *v42);
    v44 = vextq_s8(v43, v43, 8uLL);
    v44.i8[7] = a2[-1].val[1].i8[15];
    v86.i64[0] = v43.i64[0];
    v86.i64[1] = v44.i64[0];
    v45 = 1;
    v46 = a2;
  }
  v50 = a2->val[v45];
  v87 = v46->val[0];
  v88 = v50;
  v83 = 8 * a3;
  v84 = 8;
  v51 = *(&v83 + ((int)result > 17));
  v52 = *(&v83 + ((int)result < 18));
  v53 = 4;
  v54 = v7;
  do
  {
    v55 = (double *)&v86.i64[(v54 >> 8) + 1];
    v57 = v55[4];
    v56 = v55[5];
    v59 = v55[2];
    v58 = v55[3];
    v61 = *v55;
    v60 = v55[1];
    v62 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v57, *(int8x8_t *)&v56, 4uLL));
    v63 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v58, *(int8x8_t *)&v57, 4uLL));
    v64 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v59, *(int8x8_t *)&v58, 4uLL));
    v65 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v60, *(int8x8_t *)&v59, 4uLL));
    v66 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v55, *(int8x8_t *)&v60, 4uLL));
    v67 = COERCE_DOUBLE(vshld_n_s64(*(_QWORD *)v55, 0x20uLL));
    v68 = (v54 | 0xFFFFFF00) + 128;
    if ((v54 | 0xFFFFFF00) > 0xFFFFFF7F)
    {
      v68 = v54 | 0xFFFFFF00;
    }
    else
    {
      v56 = v62;
      v57 = v63;
      v58 = v64;
      v59 = v65;
      v60 = v66;
      v61 = v67;
    }
    v69 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v57, *(int8x8_t *)&v56, 6uLL));
    v70 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v58, *(int8x8_t *)&v57, 6uLL));
    v71 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v59, *(int8x8_t *)&v58, 6uLL));
    v72 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v60, *(int8x8_t *)&v59, 6uLL));
    v73 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v61, *(int8x8_t *)&v60, 6uLL));
    if (v68 <= 0xFFFFFFBF)
      *(double *)&v74 = v69;
    else
      *(double *)&v74 = v56;
    if (v68 <= 0xFFFFFFBF)
      *(double *)&v75 = v70;
    else
      *(double *)&v75 = v57;
    if (v68 <= 0xFFFFFFBF)
      *(double *)&v76 = v71;
    else
      *(double *)&v76 = v58;
    if (v68 <= 0xFFFFFFBF)
      *(double *)&v77 = v72;
    else
      *(double *)&v77 = v59;
    if (v68 <= 0xFFFFFFBF)
      *(double *)&v78 = v73;
    else
      *(double *)&v78 = v60;
    if (v68 <= 0xFFFFFFBF)
      v79 = v68 + 64;
    else
      v79 = v68;
    v80 = (int)result < 18;
    sub_1B67FF7CC(v79, v7, v80, a3, a4, v78, v77);
    sub_1B67FF7CC(v79, v7, v80, a3, (double *)((char *)a4 + v51), v77, v76);
    sub_1B67FF7CC(v79, v7, v80, a3, (double *)((char *)a4 + 2 * v51), v76, v75);
    sub_1B67FF7CC(v79, v7, v80, a3, (double *)((char *)a4 + 3 * v51), v75, v74);
    result = v82;
    a4 = (double *)((char *)a4 + v52);
    v54 += 8 * v7;
    --v53;
  }
  while (v53);
  return result;
}

uint64_t sub_1B67FA2A4(uint64_t result, _OWORD *a2, uint64_t a3, double *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  unint64_t v53;
  double v54;
  double v55;
  double v56;
  unsigned int v57;
  int8x8_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  int8x8_t v68;
  int8x8_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int8x8_t v75;
  uint64_t v76;
  _BOOL4 v77;
  double *v78;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  double *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  double *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  unsigned int v110;
  int8x8_t v111;
  int8x8_t v112;
  int8x8_t v113;
  int8x8_t v114;
  int8x8_t v115;
  int8x8_t v116;
  int8x8_t v117;
  int8x8_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  int8x8_t v128;
  int8x8_t v129;
  int8x8_t v130;
  int8x8_t v131;
  int8x8_t v132;
  int8x8_t v133;
  int8x8_t v134;
  int8x8_t v135;
  int8x8_t v136;
  uint64_t v137;
  _BOOL4 v138;
  double *v139;
  double *v140;
  double *v141;
  double *v142;
  double *v143;
  double *v144;
  double *v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[8];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v6 = byte_1B6921758[(int)result];
  v7 = (char)v6;
  v146 = result;
  if ((int)result >= 18)
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v15 = a2 + 8;
      v8 = 15;
      v9 = 14;
      v10 = 13;
      v11 = 12;
      v12 = 11;
      v13 = 10;
      v14 = 9;
      goto LABEL_6;
    }
    v29 = word_1B6921880[(result - 11)];
    v30 = 2 * (char)v6;
    v31 = ((2 * (char)v6) | 1) * v29 + 128;
    do
    {
      v151[v30++] = *((_BYTE *)a2 + (v31 >> 8) - 1);
      v31 += v29;
    }
    while (v30 != -1);
    HIBYTE(v150) = *((_BYTE *)a2 - 1);
    v152 = v147;
    v153 = v148;
    v154 = v149;
    v155 = v150;
    v25 = a2[8];
    v26 = a2[9];
    v27 = a2[10];
    v28 = a2[11];
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v8 = 7;
      v9 = 6;
      v10 = 5;
      v11 = 4;
      v12 = 3;
      v13 = 2;
      v14 = 1;
      v15 = a2;
LABEL_6:
      v16 = a2[v12];
      v17 = a2[v13];
      v18 = a2[v14];
      v152 = *v15;
      v153 = v18;
      v154 = v17;
      v155 = v16;
      v19 = a2[v10];
      v20 = a2[v9];
      v21 = a2[v8];
      v156 = a2[v11];
      v157 = v19;
      v158 = v20;
      v159 = v21;
      *(_QWORD *)&v147 = 8 * a3;
      *((_QWORD *)&v147 + 1) = 8;
      goto LABEL_15;
    }
    v22 = word_1B6921880[(int)result - 11];
    v23 = 2 * (char)v6;
    v24 = ((2 * (char)v6) | 1) * v22 + 128;
    do
    {
      v151[v23++] = *((_BYTE *)a2 + (v24 >> 8) + 127);
      v24 += v22;
    }
    while (v23 != -1);
    HIBYTE(v150) = *((_BYTE *)a2 - 1);
    v152 = v147;
    v153 = v148;
    v154 = v149;
    v155 = v150;
    v25 = *a2;
    v26 = a2[1];
    v27 = a2[2];
    v28 = a2[3];
  }
  v156 = v25;
  v157 = v26;
  v158 = v27;
  v159 = v28;
  *(_QWORD *)&v147 = 8 * a3;
  *((_QWORD *)&v147 + 1) = 8;
  if ((v6 & 0x80) == 0)
  {
    v6 = (char)v6;
LABEL_15:
    v32 = *((_QWORD *)&v147 + ((int)result > 17));
    v33 = *((_QWORD *)&v147 + ((int)result < 18)) - 7 * v32;
    v34 = 8;
    v35 = v6;
    do
    {
      v36 = (char *)&v152 + 8 * (v35 >> 8);
      v37 = *(double *)v36;
      v38 = *((double *)v36 + 1);
      v39 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v36, *(int8x8_t *)&v38, 4uLL));
      v40 = *((double *)v36 + 2);
      v41 = *((double *)v36 + 3);
      v42 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v38, *(int8x8_t *)&v40, 4uLL));
      v43 = *((double *)v36 + 4);
      v44 = *((double *)v36 + 5);
      v45 = *((double *)v36 + 6);
      v46 = *((double *)v36 + 7);
      v47 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v40, *(int8x8_t *)&v41, 4uLL));
      v48 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v43, 4uLL));
      v49 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v43, *(int8x8_t *)&v44, 4uLL));
      v50 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 4uLL));
      v51 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 4uLL));
      v52 = *((double *)v36 + 8);
      v53 = *((unint64_t *)v36 + 9);
      v54 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v52, 4uLL));
      v55 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v52, (int8x8_t)v53, 4uLL));
      v56 = COERCE_DOUBLE(vshrd_n_u64(v53, 0x20uLL));
      v57 = v35;
      if (v35 < 0x80u)
      {
        v58 = (int8x8_t)v53;
      }
      else
      {
        v52 = v55;
        v46 = v54;
        v45 = v51;
        v44 = v50;
        v43 = v49;
        v41 = v48;
        v40 = v47;
        v38 = v42;
        v37 = v39;
        *(double *)&v58 = v56;
      }
      if (v35 >= 0x80u)
        v57 = v35 - 128;
      v59 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v37, *(int8x8_t *)&v38, 2uLL));
      v60 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v38, *(int8x8_t *)&v40, 2uLL));
      v61 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v40, *(int8x8_t *)&v41, 2uLL));
      v62 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v43, 2uLL));
      v63 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v43, *(int8x8_t *)&v44, 2uLL));
      v64 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 2uLL));
      v65 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 2uLL));
      v66 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v52, 2uLL));
      v67 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v52, v58, 2uLL));
      if (v57 >= 0x40)
        *(double *)&v68 = v67;
      else
        *(double *)&v68 = v52;
      if (v57 >= 0x40)
        *(double *)&v69 = v66;
      else
        *(double *)&v69 = v46;
      if (v57 >= 0x40)
        *(double *)&v70 = v65;
      else
        *(double *)&v70 = v45;
      if (v57 >= 0x40)
        *(double *)&v71 = v64;
      else
        *(double *)&v71 = v44;
      if (v57 >= 0x40)
        *(double *)&v72 = v63;
      else
        *(double *)&v72 = v43;
      if (v57 >= 0x40)
        *(double *)&v73 = v62;
      else
        *(double *)&v73 = v41;
      if (v57 >= 0x40)
        *(double *)&v74 = v61;
      else
        *(double *)&v74 = v40;
      if (v57 >= 0x40)
        *(double *)&v75 = v60;
      else
        *(double *)&v75 = v38;
      if (v57 < 0x40)
      {
        v76 = v57;
      }
      else
      {
        v37 = v59;
        v76 = v57 - 64;
      }
      v77 = (int)result < 18;
      sub_1B67FFAC4(v76, v6, v77, a3, a4, *(int8x8_t *)&v37, v75);
      v78 = (double *)((char *)a4 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v78, v75, v74);
      v79 = (double *)((char *)v78 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v79, v74, v73);
      v80 = (double *)((char *)v79 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v80, v73, v72);
      v81 = (double *)((char *)v80 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v81, v72, v71);
      v82 = (double *)((char *)v81 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v82, v71, v70);
      v83 = (double *)((char *)v82 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v83, v70, v69);
      v84 = (double *)((char *)v83 + v32);
      sub_1B67FFAC4(v76, v6, v77, a3, v84, v69, v68);
      result = v146;
      v35 += 8 * v6;
      a4 = (double *)((char *)v84 + v33);
      --v34;
    }
    while (v34);
    return result;
  }
  v85 = *((_QWORD *)&v147 + ((int)result > 17));
  v86 = 8 * (char)v6;
  v87 = *((_QWORD *)&v147 + ((int)result < 18)) - 7 * v85;
  v88 = 8;
  v6 = (char)v6;
  do
  {
    v89 = (double *)&v155 + (v6 >> 8) + 1;
    v91 = v89[8];
    v90 = v89[9];
    v92 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v91, *(int8x8_t *)&v90, 4uLL));
    v94 = v89[6];
    v93 = v89[7];
    v95 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v93, *(int8x8_t *)&v91, 4uLL));
    v97 = v89[4];
    v96 = v89[5];
    v99 = v89[2];
    v98 = v89[3];
    v100 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v94, *(int8x8_t *)&v93, 4uLL));
    v101 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v96, *(int8x8_t *)&v94, 4uLL));
    v102 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v97, *(int8x8_t *)&v96, 4uLL));
    v103 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v98, *(int8x8_t *)&v97, 4uLL));
    v104 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v99, *(int8x8_t *)&v98, 4uLL));
    v106 = *v89;
    v105 = v89[1];
    v107 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v105, *(int8x8_t *)&v99, 4uLL));
    v108 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v89, *(int8x8_t *)&v105, 4uLL));
    v109 = COERCE_DOUBLE(vshld_n_s64(*(_QWORD *)v89, 0x20uLL));
    v110 = v6 | 0xFFFFFF00;
    if ((v6 | 0xFFFFFF00) <= 0xFFFFFF7F)
      v90 = v92;
    if (v110 > 0xFFFFFF7F)
    {
      *(double *)&v111 = v93;
    }
    else
    {
      v91 = v95;
      *(double *)&v111 = v100;
    }
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v112 = v101;
    else
      *(double *)&v112 = v94;
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v113 = v102;
    else
      *(double *)&v113 = v96;
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v114 = v103;
    else
      *(double *)&v114 = v97;
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v115 = v104;
    else
      *(double *)&v115 = v98;
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v116 = v107;
    else
      *(double *)&v116 = v99;
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v117 = v108;
    else
      *(double *)&v117 = v105;
    if (v110 <= 0xFFFFFF7F)
      *(double *)&v118 = v109;
    else
      *(double *)&v118 = v106;
    if (v110 <= 0xFFFFFF7F)
      v110 += 128;
    v119 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v91, *(int8x8_t *)&v90, 6uLL));
    v120 = COERCE_DOUBLE(vext_s8(v111, *(int8x8_t *)&v91, 6uLL));
    v121 = COERCE_DOUBLE(vext_s8(v112, v111, 6uLL));
    v122 = COERCE_DOUBLE(vext_s8(v113, v112, 6uLL));
    v123 = COERCE_DOUBLE(vext_s8(v114, v113, 6uLL));
    v124 = COERCE_DOUBLE(vext_s8(v115, v114, 6uLL));
    v125 = COERCE_DOUBLE(vext_s8(v116, v115, 6uLL));
    v126 = COERCE_DOUBLE(vext_s8(v117, v116, 6uLL));
    v127 = COERCE_DOUBLE(vext_s8(v118, v117, 6uLL));
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v128 = v119;
    else
      *(double *)&v128 = v90;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v129 = v120;
    else
      *(double *)&v129 = v91;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v130 = v121;
    else
      v130 = v111;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v131 = v122;
    else
      v131 = v112;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v132 = v123;
    else
      v132 = v113;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v133 = v124;
    else
      v133 = v114;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v134 = v125;
    else
      v134 = v115;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v135 = v126;
    else
      v135 = v116;
    if (v110 <= 0xFFFFFFBF)
      *(double *)&v136 = v127;
    else
      v136 = v117;
    if (v110 <= 0xFFFFFFBF)
      v137 = v110 + 64;
    else
      v137 = v110;
    v138 = (int)result < 18;
    sub_1B67FF7CC(v137, v7, v138, a3, a4, v136, v135);
    v139 = (double *)((char *)a4 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v139, v135, v134);
    v140 = (double *)((char *)v139 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v140, v134, v133);
    v141 = (double *)((char *)v140 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v141, v133, v132);
    v142 = (double *)((char *)v141 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v142, v132, v131);
    v143 = (double *)((char *)v142 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v143, v131, v130);
    v144 = (double *)((char *)v143 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v144, v130, v129);
    v145 = (double *)((char *)v144 + v85);
    sub_1B67FF7CC(v137, v7, v138, a3, v145, v129, v128);
    result = v146;
    v6 += v86;
    a4 = (double *)((char *)v145 + v87);
    --v88;
  }
  while (v88);
  return result;
}

int8x8_t sub_1B67FA978(uint64_t a1, int16x4_t *a2, uint64_t a3, int8x8_t *a4)
{
  const __int16 *v4;
  uint8x8_t v5;
  uint8x8_t v6;
  const __int16 *v7;
  uint8x8_t v8;
  uint16x8_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x8_t result;
  int8x8_t *v18;

  v4 = (const __int16 *)&a2[1];
  v5 = (uint8x8_t)vld1_dup_s16(v4);
  v6 = (uint8x8_t)a2[2];
  v7 = (const __int16 *)&a2[3];
  v8 = (uint8x8_t)vld1_dup_s16(v7);
  v9 = vmull_u8((uint8x8_t)0x404030302020101, v8);
  v10 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  v11 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  v12 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
  v13 = (int16x8_t)vdupq_laneq_s32(v10, 2);
  v14 = (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vdupq_laneq_s32(v10, 3), (uint8x8_t)0x404030302020101, v8), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 3));
  v15 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 0)), (uint8x8_t)0x404030302020101, v8), v11), v6, (uint8x8_t)0x303030303030303);
  v16 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 1)), (uint8x8_t)0x404030302020101, v8), v12), v6, (uint8x8_t)0x202020202020202);
  result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v9, v6), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 2)), v13), 3uLL);
  *a4 = vrshrn_n_s16(v15, 3uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v16, 3uLL);
  v18 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v18 = result;
  *(int8x8_t *)((char *)v18 + a3) = vrshrn_n_s16(v14, 3uLL);
  return result;
}

int8x16_t sub_1B67FAA30(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  const __int16 *v4;
  uint8x8_t v5;
  const __int16 *v6;
  uint8x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  int16x8_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint8x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint8x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint8x16_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  int16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  uint8x16_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int8x16_t result;
  int8x16_t *v58;
  int8x16_t *v59;

  v4 = (const __int16 *)(a2 + 16);
  v5 = (uint8x8_t)vld1_dup_s16(v4);
  v6 = (const __int16 *)(a2 + 48);
  v7 = (uint8x8_t)vld1_dup_s16(v6);
  v8 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  v9 = (int32x4_t)vmull_u8((uint8x8_t)0x808070706060505, v5);
  v10 = vmull_u8((uint8x8_t)0x404030302020101, v7);
  v11 = vmull_u8((uint8x8_t)0x808070706060505, v7);
  v12 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 0);
  v13 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
  v14 = (uint16x8_t)vdupq_laneq_s32(v8, 2);
  v15 = *(int16x8_t *)a2;
  v16 = *(uint8x16_t *)(a2 + 32);
  v17 = (uint16x8_t)vdupq_laneq_s32(v8, 3);
  v18 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 0);
  v19 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v18);
  v20 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v18);
  v21 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 1);
  v22 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v21);
  v23 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v21);
  v24 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 2);
  v25 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v24);
  v26 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v24);
  v27 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 3);
  v28 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v27);
  v29 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v27);
  v30.i64[0] = 0x707070707070707;
  v30.i64[1] = 0x707070707070707;
  v31 = (int16x8_t)vmlal_high_u8(v20, v16, v30);
  v30.i64[0] = 0x606060606060606;
  v30.i64[1] = 0x606060606060606;
  v32 = (int16x8_t)vmlal_high_u8(v23, v16, v30);
  v30.i64[0] = 0x505050505050505;
  v30.i64[1] = 0x505050505050505;
  v33 = (int16x8_t)vmlal_high_u8(v26, v16, v30);
  v30.i64[0] = 0x404040404040404;
  v30.i64[1] = 0x404040404040404;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v19, *(uint8x8_t *)v16.i8, (uint8x8_t)0x707070707070707), 4uLL), v31, 4uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v22, *(uint8x8_t *)v16.i8, (uint8x8_t)0x606060606060606), 4uLL), v32, 4uLL);
  v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v25, *(uint8x8_t *)v16.i8, (uint8x8_t)0x505050505050505), 4uLL), v33, 4uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v28, *(uint8x8_t *)v16.i8, (uint8x8_t)0x404040404040404), 4uLL), (int16x8_t)vmlal_high_u8(v29, v16, v30), 4uLL);
  v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  v36 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
  v37 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
  v38 = vmlal_u8(v37, (uint8x8_t)0x404030302020101, v7);
  v39 = vmlal_u8(v37, (uint8x8_t)0x808070706060505, v7);
  v40 = (int16x8_t)vdupq_laneq_s32(v9, 2);
  v41 = (uint16x8_t)vdupq_laneq_s32(v9, 3);
  v42 = vmlal_u8(v41, (uint8x8_t)0x404030302020101, v7);
  v43 = (uint8x8_t)vdup_laneq_s16(v15, 4);
  v44 = vmlal_u8(v41, (uint8x8_t)0x808070706060505, v7);
  v45 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v43);
  v46 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v43);
  v47 = (uint8x8_t)vdup_laneq_s16(v15, 5);
  v48 = vmlal_u8(v38, (uint8x8_t)0x404050506060707, v47);
  v49 = vmlal_u8(v39, (uint8x8_t)0x10102020303, v47);
  v50 = (uint8x8_t)vdup_laneq_s16(v15, 6);
  v51 = (uint8x8_t)vdup_laneq_s16(v15, 7);
  v52 = (int16x8_t)vmlal_u8(v42, (uint8x8_t)0x404050506060707, v51);
  v53 = (int16x8_t)vmlal_u8(v44, (uint8x8_t)0x10102020303, v51);
  v54.i64[0] = 0x303030303030303;
  v54.i64[1] = 0x303030303030303;
  v55 = (int16x8_t)vmlal_high_u8(v46, v16, v54);
  v54.i64[0] = 0x202020202020202;
  v54.i64[1] = 0x202020202020202;
  v56 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_u8(v10, *(uint8x8_t *)v16.i8), v40), (uint8x8_t)0x404050506060707, v50), 4uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_high_u8(v11, v16), v40), (uint8x8_t)0x10102020303, v50), 4uLL);
  result = vrshrn_high_n_s16(vrshrn_n_s16(v52, 4uLL), v53, 4uLL);
  *v35 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v45, *(uint8x8_t *)v16.i8, (uint8x8_t)0x303030303030303), 4uLL), v55, 4uLL);
  v58 = (int8x16_t *)((char *)v35 + a3);
  *v58 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v48, *(uint8x8_t *)v16.i8, (uint8x8_t)0x202020202020202), 4uLL), (int16x8_t)vmlal_high_u8(v49, v16, v54), 4uLL);
  v59 = (int8x16_t *)((char *)v58 + a3);
  *v59 = v56;
  *(int8x16_t *)((char *)v59 + a3) = result;
  return result;
}

void sub_1B67FAC34(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  const __int16 *i16;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  const __int16 *v12;
  uint8x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint8x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  int16x4_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  _OWORD v35[4];
  _OWORD v36[2];
  uint8x8_t v37;
  _QWORD v38[5];

  v4 = 0;
  v38[4] = *MEMORY[0x1E0C80C00];
  v38[0] = 0xC0C0D0D0E0E0F0FLL;
  v38[1] = 0x80809090A0A0B0BLL;
  v38[2] = 0x404050506060707;
  v38[3] = 0x10102020303;
  v5 = a2[1];
  v6 = a2[4];
  v7 = a2[5];
  v36[0] = *a2;
  v36[1] = v5;
  i16 = a2[2].i16;
  v9 = (uint8x8_t)vld1_dup_s16(i16);
  v37 = v9;
  v10 = (uint8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
  v11 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v12 = a2[6].i16;
  v13 = (uint8x8_t)vld1_dup_s16(v12);
  v35[0] = vmull_u8((uint8x8_t)0x404030302020101, v9);
  v35[1] = vmull_u8((uint8x8_t)0x808070706060505, v9);
  v35[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v9);
  v35[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v9);
  v14 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v13);
  v15 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v13);
  v16 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  v17 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  do
  {
    v18 = *(int16x4_t *)((char *)v36 + 8 * v4);
    v19 = (int32x4_t)v35[v4];
    v20 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    v21 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1);
    v22 = (int16x8_t)vdupq_laneq_s32(v19, 2);
    v23 = (int16x8_t)vdupq_laneq_s32(v19, 3);
    v24 = (uint8x8_t)vdup_lane_s16(v18, 0);
    v25 = (uint8x8_t)vdup_lane_s16(v18, 1);
    *(int16x4_t *)v19.i8 = vdup_lane_s16(v18, 2);
    v26 = (uint8x8_t)vdup_lane_s16(v18, 3);
    v27 = (int16x4_t)v38[v4];
    v28 = (uint8x8_t)vdup_lane_s16(v27, 0);
    v29 = (uint8x8_t)vdup_lane_s16(v27, 1);
    v30 = (uint8x8_t)vdup_lane_s16(v27, 2);
    v31 = (uint8x8_t)vdup_lane_s16(v27, 3);
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v24), v20), *(uint8x8_t *)v6.i8, v28), 5uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v15, (uint8x8_t)0x80809090A0A0B0BLL, v24), v20), v10, v28), 5uLL);
    v32 = (int8x16_t *)((char *)a4 + a3);
    *v32 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v25), v21), *(uint8x8_t *)v6.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v21), (uint8x8_t)0x80809090A0A0B0BLL, v25), v10, v29), 5uLL);
    v33 = (int8x16_t *)((char *)a4 + 2 * a3);
    *v33 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v22), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v6.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v22), (uint8x8_t)0x80809090A0A0B0BLL, *(uint8x8_t *)v19.i8), v10, v30), 5uLL);
    v34 = (int8x16_t *)((char *)a4 + 3 * a3);
    *v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v23), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v26), *(uint8x8_t *)v6.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v23), (uint8x8_t)0x80809090A0A0B0BLL, v26), v10, v31), 5uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v20), (uint8x8_t)0x404050506060707, v24), *(uint8x8_t *)v7.i8, v28), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v20), (uint8x8_t)0x10102020303, v24), v11, v28), 5uLL);
    v32[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v21), (uint8x8_t)0x404050506060707, v25), *(uint8x8_t *)v7.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v21), (uint8x8_t)0x10102020303, v25), v11, v29), 5uLL);
    v33[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v22), (uint8x8_t)0x404050506060707, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v7.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v22), (uint8x8_t)0x10102020303, *(uint8x8_t *)v19.i8), v11, v30), 5uLL);
    v34[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v23), (uint8x8_t)0x404050506060707, v26), *(uint8x8_t *)v7.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v23), (uint8x8_t)0x10102020303, v26), v11, v31), 5uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + 4 * a3);
  }
  while (v4 != 4);
}

int8x16_t *sub_1B67FAED0(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  const __int16 *i16;
  uint8x8_t v13;
  const __int16 *v14;
  uint8x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int8x16_t *v22;
  uint8x8_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x4_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  int16x4_t v33;
  uint8x8_t v34;
  uint8x8_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *result;
  int16x8_t v41;
  int16x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  uint8x8_t v45;
  uint8x8_t v46;
  _OWORD v47[8];
  _OWORD v48[4];
  uint8x8_t v49;
  _QWORD v50[9];

  v4 = 0;
  v50[8] = *MEMORY[0x1E0C80C00];
  v50[0] = 0x1C1C1D1D1E1E1F1FLL;
  v50[1] = 0x181819191A1A1B1BLL;
  v50[2] = 0x1414151516161717;
  v50[3] = 0x1010111112121313;
  v50[4] = 0xC0C0D0D0E0E0F0FLL;
  v50[5] = 0x80809090A0A0B0BLL;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[10];
  v11 = a2[11];
  v48[0] = *a2;
  v48[1] = v5;
  v48[2] = v6;
  v48[3] = v7;
  i16 = a2[4].i16;
  v13 = (uint8x8_t)vld1_dup_s16(i16);
  v49 = v13;
  v46 = *(uint8x8_t *)v9.i8;
  v45 = (uint8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
  v44 = (uint8x8_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v43 = (uint8x8_t)vextq_s8(v11, v11, 8uLL).u64[0];
  v14 = a2[12].i16;
  v47[0] = vmull_u8((uint8x8_t)0x404030302020101, v13);
  v47[1] = vmull_u8((uint8x8_t)0x808070706060505, v13);
  v47[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  v47[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  v47[4] = vmull_u8((uint8x8_t)0x1414131312121111, v13);
  v47[5] = vmull_u8((uint8x8_t)0x1818171716161515, v13);
  v15 = (uint8x8_t)vld1_dup_s16(v14);
  v16 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v15);
  v17 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v15);
  v50[6] = 0x404050506060707;
  v50[7] = 0x10102020303;
  v41 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v15);
  v42 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v15);
  v18 = (int16x8_t)vmull_u8((uint8x8_t)0x1414131312121111, v15);
  v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1818171716161515, v15);
  v20 = (int16x8_t)vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v15);
  v21 = (int16x8_t)vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v15);
  v47[6] = vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v13);
  v47[7] = vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v13);
  v22 = a4 + 2;
  v23 = (uint8x8_t)vextq_s8(v8, v8, 8uLL).u64[0];
  do
  {
    v24 = (int32x4_t)v47[v4];
    v25 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
    v26 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
    v27 = (int16x8_t)vdupq_laneq_s32(v24, 2);
    v28 = (int16x8_t)vdupq_laneq_s32(v24, 3);
    v29 = *(int16x4_t *)((char *)v48 + 8 * v4);
    v30 = (uint8x8_t)vdup_lane_s16(v29, 0);
    v31 = (uint8x8_t)vdup_lane_s16(v29, 1);
    v32 = (uint8x8_t)vdup_lane_s16(v29, 2);
    v33 = (int16x4_t)v50[v4];
    v34 = (uint8x8_t)vdup_lane_s16(v33, 0);
    *(int16x4_t *)v24.i8 = vdup_lane_s16(v33, 1);
    v35 = (uint8x8_t)vdup_lane_s16(v33, 2);
    v36 = (uint8x8_t)vdup_lane_s16(v29, 3);
    v37 = (uint8x8_t)vdup_lane_s16(v33, 3);
    v22[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v30), v25), *(uint8x8_t *)v8.i8, v34), 6uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v17, (uint8x8_t)0x181819191A1A1B1BLL, v30), v25), v23, v34), 6uLL);
    v38 = (int8x16_t *)((char *)v22 + a3);
    v38[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v31), v26), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v26), (uint8x8_t)0x181819191A1A1B1BLL, v31), v23, *(uint8x8_t *)v24.i8), 6uLL);
    v39 = (int8x16_t *)((char *)v22 + 2 * a3);
    v39[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v27), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v32), *(uint8x8_t *)v8.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v27), (uint8x8_t)0x181819191A1A1B1BLL, v32), v23, v35), 6uLL);
    result = (int8x16_t *)((char *)v22 + 3 * a3);
    result[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v28), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v36), *(uint8x8_t *)v8.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v28), (uint8x8_t)0x181819191A1A1B1BLL, v36), v23, v37), 6uLL);
    v22[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v25), (uint8x8_t)0x1414151516161717, v30), v46, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v25), (uint8x8_t)0x1010111112121313, v30), v45, v34), 6uLL);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v26), (uint8x8_t)0x1414151516161717, v31), v46, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v26), (uint8x8_t)0x1010111112121313, v31), v45, *(uint8x8_t *)v24.i8), 6uLL);
    v39[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v27), (uint8x8_t)0x1414151516161717, v32), v46, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v27), (uint8x8_t)0x1010111112121313, v32), v45, v35), 6uLL);
    result[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v28), (uint8x8_t)0x1414151516161717, v36), v46, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v28), (uint8x8_t)0x1010111112121313, v36), v45, v37), 6uLL);
    *v22 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v25), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v30), *(uint8x8_t *)v10.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v25), (uint8x8_t)0x80809090A0A0B0BLL, v30), v44, v34), 6uLL);
    *v38 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v26), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v31), *(uint8x8_t *)v10.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v26), (uint8x8_t)0x80809090A0A0B0BLL, v31), v44, *(uint8x8_t *)v24.i8), 6uLL);
    *v39 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v27), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v32), *(uint8x8_t *)v10.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v27), (uint8x8_t)0x80809090A0A0B0BLL, v32), v44, v35), 6uLL);
    *result = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v28), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v36), *(uint8x8_t *)v10.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v28), (uint8x8_t)0x80809090A0A0B0BLL, v36), v44, v37), 6uLL);
    v22[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v25), (uint8x8_t)0x404050506060707, v30), *(uint8x8_t *)v11.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v25), (uint8x8_t)0x10102020303, v30), v43, v34), 6uLL);
    v38[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v26), (uint8x8_t)0x404050506060707, v31), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v26), (uint8x8_t)0x10102020303, v31), v43, *(uint8x8_t *)v24.i8), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v27), (uint8x8_t)0x404050506060707, v32), *(uint8x8_t *)v11.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v27), (uint8x8_t)0x10102020303, v32), v43, v35), 6uLL);
    result[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v28), (uint8x8_t)0x404050506060707, v36), *(uint8x8_t *)v11.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v28), (uint8x8_t)0x10102020303, v36), v43, v37), 6uLL);
    ++v4;
    v22 = (int8x16_t *)((char *)v22 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

double sub_1B67FB37C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double result;
  double *v5;

  result = *(double *)(a2 + 16);
  *a4 = result;
  *(double *)((char *)a4 + a3) = result;
  v5 = (double *)((char *)a4 + a3 + a3);
  *v5 = result;
  *(double *)((char *)v5 + a3) = result;
  return result;
}

void sub_1B67FB39C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __int128 v4;
  int v5;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = 8;
  do
  {
    *a4 = v4;
    a4 = (_OWORD *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
}

void sub_1B67FB3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  int v7;

  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = (_OWORD *)(a4 + 16);
  v7 = 16;
  do
  {
    *(v6 - 1) = v4;
    *v6 = v5;
    v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

void sub_1B67FB3D8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  int v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

int16x4_t sub_1B67FB400(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t result;
  int16x4_t *v7;

  v4 = vdup_lane_s16(*a2, 1);
  v5 = vdup_lane_s16(*a2, 2);
  result = vdup_lane_s16(*a2, 3);
  *a4 = vdup_lane_s16(*a2, 0);
  *(int16x4_t *)((char *)a4 + a3) = v4;
  v7 = (int16x4_t *)((char *)a4 + a3 + a3);
  *v7 = v5;
  *(int16x4_t *)((char *)v7 + a3) = result;
  return result;
}

int16x8_t sub_1B67FB430(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x8_t *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t result;
  int16x8_t *v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;

  v4 = vdupq_lane_s16(*a2, 1);
  v5 = vdupq_lane_s16(*a2, 2);
  v6 = vdupq_lane_s16(*a2, 3);
  v7 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 4);
  v8 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 5);
  v9 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 6);
  result = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 7);
  *a4 = vdupq_lane_s16(*a2, 0);
  *(int16x8_t *)((char *)a4 + a3) = v4;
  v11 = (int16x8_t *)((char *)a4 + a3 + a3);
  *v11 = v5;
  v12 = (int16x8_t *)((char *)v11 + a3);
  *v12 = v6;
  v13 = (int16x8_t *)((char *)v12 + a3);
  *v13 = v7;
  v14 = (int16x8_t *)((char *)v13 + a3);
  *v14 = v8;
  v15 = (int16x8_t *)((char *)v14 + a3);
  *v15 = v9;
  *(int16x8_t *)((char *)v15 + a3) = result;
  return result;
}

int16x8_t sub_1B67FB490(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  int16x8_t v7;
  char v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t result;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t *v19;
  int16x8_t *v20;
  int16x8_t *v21;
  int16x8_t *v22;
  int16x8_t *v23;
  _OWORD v24[2];
  uint64_t v25;

  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v24[0] = *a2;
  v24[1] = v5;
  v6 = 1;
  do
  {
    v7 = (int16x8_t)v24[v4];
    v8 = v6;
    v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    v12 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    v13 = vdupq_laneq_s16(v7, 4);
    v14 = vdupq_laneq_s16(v7, 5);
    v15 = vdupq_laneq_s16(v7, 6);
    result = vdupq_laneq_s16(v7, 7);
    *a4 = v9;
    a4[1] = v9;
    v17 = (int16x8_t *)((char *)a4 + a3);
    *v17 = v10;
    v17[1] = v10;
    v18 = (int16x8_t *)((char *)a4 + a3 + a3);
    *v18 = v11;
    v18[1] = v11;
    v19 = (int16x8_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v20 = (int16x8_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v21 = (int16x8_t *)((char *)v20 + a3);
    *v21 = v14;
    v21[1] = v14;
    v22 = (int16x8_t *)((char *)v21 + a3);
    *v22 = v15;
    v22[1] = v15;
    v23 = (int16x8_t *)((char *)v22 + a3);
    *v23 = result;
    v23[1] = result;
    a4 = (int16x8_t *)((char *)v23 + a3);
    v4 = 1;
    v6 = 0;
  }
  while ((v8 & 1) != 0);
  return result;
}

int16x8_t sub_1B67FB55C(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t result;
  int16x8_t *v16;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t *v19;
  int16x8_t *v20;
  int16x8_t *v21;
  int16x8_t *v22;
  _OWORD v23[4];
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  v6 = a2[3];
  v23[2] = a2[2];
  v23[3] = v6;
  do
  {
    v7 = (int16x8_t)v23[v4];
    v8 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    v12 = vdupq_laneq_s16(v7, 4);
    v13 = vdupq_laneq_s16(v7, 5);
    v14 = vdupq_laneq_s16(v7, 6);
    result = vdupq_laneq_s16(v7, 7);
    *a4 = v8;
    a4[1] = v8;
    a4[2] = v8;
    a4[3] = v8;
    v16 = (int16x8_t *)((char *)a4 + a3);
    *v16 = v9;
    v16[1] = v9;
    v16[2] = v9;
    v16[3] = v9;
    v17 = (int16x8_t *)((char *)a4 + a3 + a3);
    *v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    v18 = (int16x8_t *)((char *)v17 + a3);
    *v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    v19 = (int16x8_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    v20 = (int16x8_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    v21 = (int16x8_t *)((char *)v20 + a3);
    *v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    v22 = (int16x8_t *)((char *)v21 + a3);
    *v22 = result;
    v22[1] = result;
    v22[2] = result;
    v22[3] = result;
    a4 = (int16x8_t *)((char *)v22 + a3);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint8x8_t sub_1B67FB648(uint64_t a1, int8x8_t *a2, uint64_t a3, uint8x8_t *a4)
{
  int16x4_t v4;
  uint16x8_t v5;
  uint8x8_t result;
  uint8x8_t *v7;

  v4 = vpadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vuzp1_s8(*a2, a2[2])), (int16x4_t)vpaddl_u8((uint8x8_t)vuzp2_s8(*a2, a2[2])));
  *(int16x4_t *)v5.i8 = vpadd_s16(v4, v4);
  v5.i64[1] = v5.i64[0];
  result = vqrshrn_n_u16(v5, 3uLL);
  *a4 = result;
  *(uint8x8_t *)((char *)a4 + a3) = result;
  v7 = (uint8x8_t *)((char *)a4 + a3 + a3);
  *v7 = result;
  *(uint8x8_t *)((char *)v7 + a3) = result;
  return result;
}

void sub_1B67FB68C(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  const char *v4;
  int8x8_t v5;
  uint8x16_t v6;
  int v7;
  int8x8x2_t v8;
  int8x8x2_t v9;

  v8 = vld2_s8(a2);
  v4 = a2 + 32;
  v9 = vld2_s8(v4);
  v8.val[0] = (int8x8_t)vpadd_s16((int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[0]), (uint8x8_t)v8.val[0]), (int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[1]), (uint8x8_t)v8.val[1]));
  v8.val[1] = (int8x8_t)vpadd_s16((int16x4_t)v8.val[0], (int16x4_t)v8.val[0]);
  v5 = v8.val[1];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(*(uint16x8_t *)((char *)&v8 + 8), 4uLL), *(uint16x8_t *)((char *)&v8 + 8), 4uLL);
  v7 = 8;
  do
  {
    *a4 = v6;
    a4 = (uint8x16_t *)((char *)a4 + a3);
    --v7;
  }
  while (v7);
}

void sub_1B67FB6D4(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  const char *v4;
  int8x16_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int v8;
  int8x16x2_t v9;
  int8x16x2_t v10;

  v4 = a2 + 64;
  v9 = vld2q_s8(a2);
  v10 = vld2q_s8(v4);
  v5 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[0].i8), (uint8x16_t)v9.val[0]), (uint8x16_t)v10.val[0]), *(uint8x8_t *)v10.val[0].i8);
  v9.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[1].i8), (uint8x16_t)v9.val[1]), (uint8x16_t)v10.val[1]), *(uint8x8_t *)v10.val[1].i8);
  *(int16x4_t *)v9.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v5.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)), vadd_s16(*(int16x4_t *)v9.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v9.val[0], v9.val[0], 8uLL)));
  *(int16x4_t *)v9.val[1].i8 = vpadd_s16(*(int16x4_t *)v9.val[0].i8, *(int16x4_t *)v9.val[0].i8);
  v9.val[1].i64[1] = v9.val[1].i64[0];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v9.val[1], 5uLL), (uint16x8_t)v9.val[1], 5uLL);
  v7 = a4 + 1;
  v8 = 16;
  do
  {
    v7[-1] = v6;
    *v7 = v6;
    v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1B67FB740(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int8x16_t v7;
  uint8x16_t v8;
  uint8x16_t *v9;
  int v10;
  int8x16x2_t v11;
  int8x16x2_t v12;
  int8x16x2_t v13;
  int8x16x2_t v14;

  v4 = a2 + 16;
  v11 = vld2q_s8(a2);
  v12 = vld2q_s8(v4);
  v5 = a2 + 128;
  v13 = vld2q_s8(v5);
  v6 = a2 + 144;
  v14 = vld2q_s8(v6);
  v7 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[0].i8), (uint8x16_t)v11.val[0]), (uint8x16_t)v12.val[0]), *(uint8x8_t *)v12.val[0].i8), (uint8x16_t)v13.val[0]), *(uint8x8_t *)v13.val[0].i8), (uint8x16_t)v14.val[0]), *(uint8x8_t *)v14.val[0].i8);
  v11.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[1].i8), (uint8x16_t)v11.val[1]), (uint8x16_t)v12.val[1]), *(uint8x8_t *)v12.val[1].i8), (uint8x16_t)v13.val[1]), *(uint8x8_t *)v13.val[1].i8), (uint8x16_t)v14.val[1]), *(uint8x8_t *)v14.val[1].i8);
  *(int16x4_t *)v11.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), vadd_s16(*(int16x4_t *)v11.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v11.val[0], v11.val[0], 8uLL)));
  *(int16x4_t *)v11.val[1].i8 = vpadd_s16(*(int16x4_t *)v11.val[0].i8, *(int16x4_t *)v11.val[0].i8);
  v11.val[1].i64[1] = v11.val[1].i64[0];
  v8 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v11.val[1], 6uLL), (uint16x8_t)v11.val[1], 6uLL);
  v9 = a4 + 2;
  v10 = 32;
  do
  {
    v9[-2] = v8;
    v9[-1] = v8;
    *v9 = v8;
    v9[1] = v8;
    v9 = (uint8x16_t *)((char *)v9 + a3);
    --v10;
  }
  while (v10);
}

uint64_t sub_1B67FB7E0(int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5;
  int v6;

  v5 = byte_1B6921758[a1];
  v6 = byte_1B6921758[a1];
  if (a1 >= 18)
  {
    if (v5 < 0)
    {
      *(int8x8_t *)a5.i8 = *a2;
      *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1B69218A0[4 * (a1 - 18) + 3]);
      a5.i16[3] = a2[-1].i16[3];
      a2 += 2;
      return sub_1B67FF4D4(byte_1B6921758[a1], v5, a1 < 18, a3, a4, *(int8x8_t *)a5.i8, *a2);
    }
    a2 += 2;
    return sub_1B67FF660(byte_1B6921758[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  }
  if ((v6 & 0x80) == 0)
    return sub_1B67FF660(byte_1B6921758[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  *(int8x8_t *)a5.i8 = a2[2];
  *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1B69218A0[4 * (18 - a1) + 3]);
  a5.i16[3] = a2[-1].i16[3];
  return sub_1B67FF4D4(byte_1B6921758[a1], v5, a1 < 18, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

uint64_t sub_1B67FB890(int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  _BOOL4 v21;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t *v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  _BOOL4 v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = byte_1B6921758[a1];
  v8 = byte_1B6921758[a1];
  if (a1 >= 18)
  {
    if ((v7 & 0x80000000) == 0)
    {
      v9 = a2[2];
      v10 = a2[3];
      goto LABEL_6;
    }
    v26 = vqtbl1q_s8(*a2, *(int8x16_t *)qword_1B69218A0[4 * (a1 - 18) + 2].i8);
    v24 = vextq_s8(v26, v26, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v26.i64[0];
    v43.i64[1] = v24.i64[0];
    v25 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      v9 = *a2;
      v10 = a2[1];
LABEL_6:
      v43 = v9;
      v44.i64[0] = v10.i64[0];
      v37 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      v39 = *(int8x8_t *)v10.i8;
      v11 = v7;
      v12 = a1 > 17;
      v13 = a1 < 18;
      v44.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      v41 = 4 * a3;
      v42 = 8;
      sub_1B67FF660(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v37);
      v14 = *(&v41 + v12);
      sub_1B67FF660(v8, v8, a1 < 18, a3, (double *)((char *)a4 + v14), v37, v39);
      v15 = (double *)((char *)a4 + *(&v41 + v13));
      v16 = (unint64_t)(5 * v11) >> 7;
      v17 = (5 * (_DWORD)v11) & 0x7F;
      v18 = *(int8x8_t *)&v43.i8[8 * v16];
      v19 = *(int8x8_t *)&v43.i8[8 * (v16 + 1)];
      v20 = *(int8x8_t *)&v43.i8[8 * (v16 + 2)];
      if (v17 >= 0x40)
      {
        v18 = vext_s8(v18, v19, 4uLL);
        v19 = vext_s8(v19, v20, 4uLL);
        v20 = vext_s8(v20, *(int8x8_t *)&v43.i8[8 * (v16 + 3)], 4uLL);
        v17 = (v17 - 64);
      }
      v21 = a1 < 18;
      sub_1B67FF660(v17, v8, v21, a3, v15, v18, v19);
      return sub_1B67FF660(v17, v8, v21, a3, (double *)((char *)v15 + v14), v19, v20);
    }
    v23 = vqtbl1q_s8(a2[2], *(int8x16_t *)qword_1B69218A0[4 * (18 - a1) + 2].i8);
    v24 = vextq_s8(v23, v23, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v23.i64[0];
    v43.i64[1] = v24.i64[0];
    v25 = *a2;
  }
  v44 = v25;
  v38 = (int8x8_t)vextq_s8(v25, v25, 8uLL).u64[0];
  v40 = *(int8x8_t *)v25.i8;
  v27 = a1 > 17;
  v28 = a1 < 18;
  v41 = 4 * a3;
  v42 = 8;
  sub_1B67FF4D4(v7, v7, v28, a3, a4, *(int8x8_t *)v24.i8, *(int8x8_t *)v25.i8);
  v29 = *(&v41 + v27);
  sub_1B67FF4D4(v7, v7, a1 < 18, a3, (double *)((char *)a4 + v29), v40, v38);
  v30 = (double *)((char *)a4 + *(&v41 + v28));
  v31 = (5 * (_DWORD)v7) | 0xFFFFFF80;
  v32 = &v43.i64[((5 * (int)v7) >> 7) + 1];
  v34 = (int8x8_t)v32[2];
  v33 = (int8x8_t)v32[3];
  v35 = (int8x8_t)v32[1];
  if (v31 <= 0xFFFFFFBF)
  {
    v33 = vext_s8(v34, v33, 4uLL);
    v34 = vext_s8(v35, v34, 4uLL);
    v35 = vext_s8((int8x8_t)v43.u64[((uint64_t)(5 * (int)v7) >> 7) + 1], v35, 4uLL);
    v31 = (v31 + 64);
  }
  v36 = a1 < 18;
  sub_1B67FF4D4(v31, v7, v36, a3, v30, v35, v34);
  return sub_1B67FF4D4(v31, v7, v36, a3, (double *)((char *)v30 + v29), v34, v33);
}

uint64_t sub_1B67FBBBC(int a1, int8x16x2_t *a2, uint64_t a3, double *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *val;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  _BOOL4 v24;
  uint64_t result;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x16x2_t *v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  int8x16x2_t v56;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = byte_1B6921758[a1];
  v7 = (char)v6;
  if (a1 >= 18)
  {
    if ((v6 & 0x80) == 0)
    {
      val = a2[2].val;
      v8 = 7;
      v9 = 3;
      v10 = 5;
LABEL_6:
      v12 = a2->val[v8];
      v13 = a2[v9].val[0];
      v14 = a2->val[v10];
      v51 = *val;
      v52 = v14;
      v49 = 4 * a3;
      v50 = 8;
      v15 = *(&v49 + (a1 > 17));
      v46 = *(&v49 + (a1 < 18));
      v53 = v13;
      v54 = v12;
      v16 = 4;
      v17 = v6;
      do
      {
        v18 = v17 & 0x7F;
        v19 = *(int8x8_t *)&v51.i8[8 * (v17 >> 7)];
        v20 = (int8x8_t)v51.u64[(v17 >> 7) + 1];
        v21 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 16);
        v22 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 24);
        v23 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 32);
        if (v18 >= 0x40)
        {
          v19 = vext_s8(v19, v20, 4uLL);
          v20 = vext_s8(v20, v21, 4uLL);
          v21 = vext_s8(v21, v22, 4uLL);
          v22 = vext_s8(v22, v23, 4uLL);
          v23 = vext_s8(v23, *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 40), 4uLL);
          v18 = (v18 - 64);
        }
        v24 = a1 < 18;
        sub_1B67FF660(v18, v6, v24, a3, a4, v19, v20);
        sub_1B67FF660(v18, v6, v24, a3, (double *)((char *)a4 + v15), v20, v21);
        sub_1B67FF660(v18, v6, v24, a3, (double *)((char *)a4 + 2 * v15), v21, v22);
        result = sub_1B67FF660(v18, v6, v24, a3, (double *)((char *)a4 + 3 * v15), v22, v23);
        a4 = (double *)((char *)a4 + v46);
        v17 += 4 * v6;
        --v16;
      }
      while (v16);
      return result;
    }
    v31 = (int8x16_t *)&qword_1B69218A0[4 * (a1 - 18)];
    v32 = vqtbl2q_s8(*a2, v31[1]);
    v51 = vqtbl2q_s8(*a2, *v31);
    v33 = vextq_s8(v32, v32, 8uLL);
    v33.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v32.i64[0];
    v52.i64[1] = v33.i64[0];
    v30 = a2 + 2;
    v29 = 5;
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v8 = 3;
      v9 = 1;
      v10 = 1;
      val = (int8x16_t *)a2;
      goto LABEL_6;
    }
    v26 = (int8x16_t *)&qword_1B69218A0[4 * (18 - a1)];
    v56 = a2[2];
    v27 = vqtbl2q_s8(v56, v26[1]);
    v51 = vqtbl2q_s8(v56, *v26);
    v28 = vextq_s8(v27, v27, 8uLL);
    v28.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v27.i64[0];
    v52.i64[1] = v28.i64[0];
    v29 = 1;
    v30 = a2;
  }
  v34 = a2->val[v29];
  v53 = v30->val[0];
  v54 = v34;
  v49 = 4 * a3;
  v50 = 8;
  v35 = *(&v49 + (a1 > 17));
  v47 = *(&v49 + (a1 < 18));
  v36 = 4 * (char)v6;
  v37 = 4;
  v6 = (char)v6;
  do
  {
    v38 = v6 | 0xFFFFFF80;
    v39 = &v52.i64[(v6 >> 7) + 1];
    v41 = (int8x8_t)v39[4];
    v40 = (int8x8_t)v39[5];
    v43 = (int8x8_t)v39[2];
    v42 = (int8x8_t)v39[3];
    v44 = (int8x8_t)v39[1];
    if (v38 <= 0xFFFFFFBF)
    {
      v40 = vext_s8(v41, v40, 4uLL);
      v41 = vext_s8(v42, v41, 4uLL);
      v42 = vext_s8(v43, v42, 4uLL);
      v43 = vext_s8(v44, v43, 4uLL);
      v44 = vext_s8((int8x8_t)v52.u64[((uint64_t)v6 >> 7) + 1], v44, 4uLL);
      v38 = (v38 + 64);
    }
    v45 = a1 < 18;
    sub_1B67FF4D4(v38, v7, v45, a3, a4, v44, v43);
    sub_1B67FF4D4(v38, v7, v45, a3, (double *)((char *)a4 + v35), v43, v42);
    sub_1B67FF4D4(v38, v7, v45, a3, (double *)((char *)a4 + 2 * v35), v42, v41);
    result = sub_1B67FF4D4(v38, v7, v45, a3, (double *)((char *)a4 + 3 * v35), v41, v40);
    a4 = (double *)((char *)a4 + v47);
    v6 += v36;
    --v37;
  }
  while (v37);
  return result;
}

uint64_t sub_1B67FBF9C(int a1, __n128 *a2, uint64_t a3, double *a4, __n128 a5, __n128 a6, __n128 a7)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t *v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  _BOOL4 v52;
  double *v53;
  double *v54;
  double *v55;
  double *v56;
  double *v57;
  double *v58;
  double *v59;
  uint64_t result;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t *v65;
  int8x8_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int8x8_t v75;
  int8x8_t v76;
  _BOOL4 v77;
  double *v78;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  double *v84;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  _WORD v90[4];
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v9 = byte_1B6921758[a1];
  v10 = byte_1B6921758[a1];
  if (a1 >= 18)
  {
    if ((v9 & 0x80000000) == 0)
    {
      v18 = a2 + 8;
      v11 = 15;
      v12 = 14;
      v13 = 13;
      v14 = 12;
      v15 = 11;
      v16 = 10;
      v17 = 9;
      goto LABEL_6;
    }
    if (v10 != 255)
    {
      v29 = word_1B6921880[a1 - 11];
      v30 = v29 + v29 * v9 + 128;
      v31 = byte_1B6921758[a1];
      do
      {
        v90[v31] = a2->n128_u16[(v30 >> 8) - 1];
        v30 += v29;
        ++v31;
      }
      while (v31 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    v91 = a7;
    v92 = a6;
    v93 = a5;
    v94 = v89;
    v32 = a2[8];
    v33 = a2[9];
    v34 = a2[10];
    v35 = a2[11];
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
    {
      v11 = 7;
      v12 = 6;
      v13 = 5;
      v14 = 4;
      v15 = 3;
      v16 = 2;
      v17 = 1;
      v18 = a2;
LABEL_6:
      v19 = a2[v15];
      v20 = a2[v16];
      v21 = a2[v17];
      v22 = a2[v14];
      v91 = *v18;
      v92 = v21;
      v23 = a2[v13];
      v24 = a2[v12];
      v93 = v20;
      v94 = v19;
      v25 = a2[v11];
      v95 = v22;
      v96 = v23;
      v97 = v24;
      v98 = v25;
      v9 = v10;
      v86.n128_u64[0] = 4 * a3;
      v86.n128_u64[1] = 8;
      goto LABEL_18;
    }
    if (v9 != -1)
    {
      v26 = word_1B6921880[a1 - 11];
      v27 = v26 + v26 * v9 + 128;
      v28 = byte_1B6921758[a1];
      do
      {
        v90[v28] = a2[7].n128_u16[(v27 >> 8) + 7];
        v27 += v26;
        ++v28;
      }
      while (v28 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    v91 = a7;
    v92 = a6;
    v93 = a5;
    v94 = v89;
    v32 = *a2;
    v33 = a2[1];
    v34 = a2[2];
    v35 = a2[3];
  }
  v95 = v32;
  v96 = v33;
  v97 = v34;
  v98 = v35;
  v86.n128_u64[0] = 4 * a3;
  v86.n128_u64[1] = 8;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_18:
    v36 = v86.n128_u64[a1 > 17];
    v37 = v86.n128_u64[a1 < 18] - 7 * v36;
    v38 = 8;
    v39 = v9;
    do
    {
      v40 = v39 & 0x7F;
      v41 = (uint64_t)v39 >> 7;
      v42 = (int8x8_t *)&v91.n128_u64[v39 >> 7];
      v43 = *v42;
      v44 = v42[1];
      v46 = v42[2];
      v45 = v42[3];
      v48 = v42[4];
      v47 = v42[5];
      v50 = v42[6];
      v49 = v42[7];
      v51 = v42[8];
      if (v40 >= 0x40)
      {
        v43 = vext_s8(v43, v44, 4uLL);
        v44 = vext_s8(v44, v46, 4uLL);
        v46 = vext_s8(v46, v45, 4uLL);
        v45 = vext_s8(v45, v48, 4uLL);
        v48 = vext_s8(v48, v47, 4uLL);
        v47 = vext_s8(v47, v50, 4uLL);
        v50 = vext_s8(v50, v49, 4uLL);
        v49 = vext_s8(v49, v51, 4uLL);
        v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 4uLL);
        v40 = (v40 - 64);
      }
      if (v40 >= 0x20)
      {
        v43 = vext_s8(v43, v44, 2uLL);
        v44 = vext_s8(v44, v46, 2uLL);
        v46 = vext_s8(v46, v45, 2uLL);
        v45 = vext_s8(v45, v48, 2uLL);
        v48 = vext_s8(v48, v47, 2uLL);
        v47 = vext_s8(v47, v50, 2uLL);
        v50 = vext_s8(v50, v49, 2uLL);
        v49 = vext_s8(v49, v51, 2uLL);
        v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 2uLL);
        v40 = (v40 - 32);
      }
      v52 = a1 < 18;
      sub_1B67FF660(v40, v9, v52, a3, a4, v43, v44);
      v53 = (double *)((char *)a4 + v36);
      sub_1B67FF660(v40, v9, v52, a3, v53, v44, v46);
      v54 = (double *)((char *)v53 + v36);
      sub_1B67FF660(v40, v9, v52, a3, v54, v46, v45);
      v55 = (double *)((char *)v54 + v36);
      sub_1B67FF660(v40, v9, v52, a3, v55, v45, v48);
      v56 = (double *)((char *)v55 + v36);
      sub_1B67FF660(v40, v9, v52, a3, v56, v48, v47);
      v57 = (double *)((char *)v56 + v36);
      sub_1B67FF660(v40, v9, v52, a3, v57, v47, v50);
      v58 = (double *)((char *)v57 + v36);
      sub_1B67FF660(v40, v9, v52, a3, v58, v50, v49);
      v59 = (double *)((char *)v58 + v36);
      result = sub_1B67FF660(v40, v9, v52, a3, v59, v49, v51);
      v39 += 4 * v9;
      a4 = (double *)((char *)v59 + v37);
      --v38;
    }
    while (v38);
    return result;
  }
  v61 = v86.n128_u64[a1 > 17];
  v62 = v86.n128_u64[a1 < 18] - 7 * v61;
  v63 = 8;
  v64 = v9;
  do
  {
    v65 = &v94.n128_u64[(v64 >> 7) + 1];
    v67 = (int8x8_t)v65[8];
    v66 = (int8x8_t)v65[9];
    v68 = (uint64_t)v64 >> 7;
    v69 = v64 | 0xFFFFFF80;
    v71 = (int8x8_t)v65[6];
    v70 = (int8x8_t)v65[7];
    v73 = (int8x8_t)v65[4];
    v72 = (int8x8_t)v65[5];
    v75 = (int8x8_t)v65[2];
    v74 = (int8x8_t)v65[3];
    v76 = (int8x8_t)v65[1];
    if (v69 <= 0xFFFFFFBF)
    {
      v66 = vext_s8(v67, v66, 4uLL);
      v67 = vext_s8(v70, v67, 4uLL);
      v70 = vext_s8(v71, v70, 4uLL);
      v71 = vext_s8(v72, v71, 4uLL);
      v72 = vext_s8(v73, v72, 4uLL);
      v73 = vext_s8(v74, v73, 4uLL);
      v74 = vext_s8(v75, v74, 4uLL);
      v75 = vext_s8(v76, v75, 4uLL);
      v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 4uLL);
      v69 = (v69 + 64);
    }
    if (v69 <= 0xFFFFFFDF)
    {
      v66 = vext_s8(v67, v66, 6uLL);
      v67 = vext_s8(v70, v67, 6uLL);
      v70 = vext_s8(v71, v70, 6uLL);
      v71 = vext_s8(v72, v71, 6uLL);
      v72 = vext_s8(v73, v72, 6uLL);
      v73 = vext_s8(v74, v73, 6uLL);
      v74 = vext_s8(v75, v74, 6uLL);
      v75 = vext_s8(v76, v75, 6uLL);
      v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 6uLL);
      v69 = (v69 + 32);
    }
    v77 = a1 < 18;
    sub_1B67FF4D4(v69, v9, v77, a3, a4, v76, v75);
    v78 = (double *)((char *)a4 + v61);
    sub_1B67FF4D4(v69, v9, v77, a3, v78, v75, v74);
    v79 = (double *)((char *)v78 + v61);
    sub_1B67FF4D4(v69, v9, v77, a3, v79, v74, v73);
    v80 = (double *)((char *)v79 + v61);
    sub_1B67FF4D4(v69, v9, v77, a3, v80, v73, v72);
    v81 = (double *)((char *)v80 + v61);
    sub_1B67FF4D4(v69, v9, v77, a3, v81, v72, v71);
    v82 = (double *)((char *)v81 + v61);
    sub_1B67FF4D4(v69, v9, v77, a3, v82, v71, v70);
    v83 = (double *)((char *)v82 + v61);
    sub_1B67FF4D4(v69, v9, v77, a3, v83, v70, v67);
    v84 = (double *)((char *)v83 + v61);
    result = sub_1B67FF4D4(v69, v9, v77, a3, v84, v67, v66);
    v64 += 4 * v9;
    a4 = (double *)((char *)v84 + v62);
    --v63;
  }
  while (v63);
  return result;
}

uint16x8_t sub_1B67FC620(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int8x16_t v3;
  unsigned __int16 v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint16x8_t v8;
  uint16x8_t result;
  uint16x8_t v10;

  v2 = a1[-1].u16[7];
  v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[2].u16[0] + 2) >> 2;
  LOWORD(v2) = a1[1].i16[7];
  v4 = a1[3].u16[7];
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, *a1, 0xEuLL), (uint16x8_t)vextq_s8(*a1, v5, 2uLL)), *(uint16x8_t *)a1);
  result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v7, 2uLL)), (uint16x8_t)v6);
  v10 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(*a1, v5, 0xEuLL), (uint16x8_t)vextq_s8(v5, v5, 2uLL)), (uint16x8_t)v5);
  *a2 = v8;
  a2[1] = v10;
  a2[2] = result;
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v6, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[1].i16[7] = v2;
  a2[3].i16[7] = v4;
  return result;
}

uint16x8_t sub_1B67FC6A8(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int8x16_t v3;
  __int16 v4;
  __int16 v5;
  int8x16_t v6;
  int8x16_t v7;
  uint16x8_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint16x8_t result;

  v2 = a1[-1].u16[7];
  v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[4].u16[0] + 2) >> 2;
  v4 = a1[3].i16[7];
  v5 = a1[7].i16[7];
  v6 = *a1;
  v7 = a1[4];
  v8 = a2 + 4;
  v9 = a1 + 5;
  v10 = -8;
  v11 = v3;
  do
  {
    v12 = v7;
    v13 = v6;
    v6 = v9[-4];
    v14 = *v9++;
    v7 = v14;
    v8[-4] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    v3 = v13;
    v11 = v12;
  }
  while (v10 < 0x10);
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[7] = result;
  a2[3].i16[7] = v4;
  a2[7].i16[7] = v5;
  return result;
}

void sub_1B67FC76C(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t *v14;
  unint64_t v15;

  v2 = a1[-1].u16[7];
  v3 = a1[7].u16[7];
  v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0)
    v4 = 2 * a1[3].u16[7] - (v3 + v2);
  if (v4 > 0x1F)
    goto LABEL_7;
  v5 = a1[15].u16[7];
  v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0)
    v6 = 2 * a1[11].u16[7] - (v5 + v2);
  if (v6 < 0x20)
  {
    v7 = vdupq_n_s16(v2);
    v8 = vdupq_n_s16(v5 - v2);
    a2[-1].i16[7] = v2;
    v9 = vdupq_n_s16(v3 - v2);
    v10 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917640);
    v11 = vmulq_s16(v9, (int16x8_t)xmmword_1B6917640);
    v12 = vshlq_n_s16(v8, 3uLL);
    v13 = vshlq_n_s16(v9, 3uLL);
    v14 = (int16x8_t *)&a2[8];
    v15 = -8;
    do
    {
      *v14 = vrsraq_n_s16(v7, v10, 6uLL);
      v14[-8] = vrsraq_n_s16(v7, v11, 6uLL);
      v10 = vaddq_s16(v10, v12);
      v11 = vaddq_s16(v11, v13);
      v15 += 8;
      ++v14;
    }
    while (v15 < 0x38);
  }
  else
  {
LABEL_7:
    sub_1B67FC820(a1, a2);
  }
}

uint16x8_t sub_1B67FC820(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int8x16_t v3;
  __int16 v4;
  __int16 v5;
  int8x16_t v6;
  int8x16_t v7;
  uint16x8_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint16x8_t result;

  v2 = a1[-1].u16[7];
  v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[8].u16[0] + 2) >> 2;
  v4 = a1[7].i16[7];
  v5 = a1[15].i16[7];
  v6 = *a1;
  v7 = a1[8];
  v8 = a2 + 8;
  v9 = a1 + 9;
  v10 = -8;
  v11 = v3;
  do
  {
    v12 = v7;
    v13 = v6;
    v6 = v9[-8];
    v14 = *v9++;
    v7 = v14;
    v8[-8] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    v3 = v13;
    v11 = v12;
  }
  while (v10 < 0x30);
  a2[7] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[15] = result;
  a2[7].i16[7] = v4;
  a2[15].i16[7] = v5;
  return result;
}

uint16x8_t sub_1B67FC8E4(uint64_t a1, int16x8_t *a2, uint64_t a3, _QWORD *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int16x8_t v11;
  uint16x8_t result;
  uint16x8_t v13;

  v4 = a2[1];
  v5 = (int16x8_t)vdupq_lane_s64(vaddq_s16(v4, *a2).i64[0], 0);
  v6 = vpaddq_s16(v5, v5);
  v7 = (uint16x8_t)vpaddq_s16(v6, v6);
  v8 = (int16x8_t)vrshrq_n_u16(v7, 3uLL);
  v9 = vaddq_s16(v8, v8);
  *(int16x4_t *)v4.i8 = vadd_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8);
  v4.i64[1] = v9.i64[0];
  v10 = (int8x16_t)vzip1q_s64((int64x2_t)vrsraq_n_u16(*(uint16x8_t *)a2, v7, 3uLL), (int64x2_t)v9);
  v11 = (int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1B69176D0);
  result = vrshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1B69176E0), v4), 2uLL);
  v13 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v9, v11), 2uLL);
  *a4 = result.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = result.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = v13.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = v13.i64[1];
  return result;
}

int8x16_t sub_1B67FC95C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t result;

  v4 = a2[2];
  v5 = vaddq_s16(v4, *a2);
  v6 = vpaddq_s16(v5, v5);
  v7 = vpaddq_s16(v6, v6);
  v8 = (uint16x8_t)vpaddq_s16(v7, v7);
  v9 = (int16x8_t)vrshrq_n_u16(v8, 4uLL);
  v10 = vaddq_s16(v9, v9);
  v11 = (int16x8_t)vrsraq_n_u16((uint16x8_t)v4, v8, 4uLL);
  v12 = (int16x8_t)vrsraq_n_u16(*(uint16x8_t *)a2, v8, 4uLL);
  v13 = (uint16x8_t)vaddq_s16(v12, v10);
  v10.i16[0] = v12.i16[0];
  v14 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v11, v10), 2uLL);
  v15 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  v16 = vextq_s8(v15, (int8x16_t)v9, 2uLL);
  *a4 = v14;
  *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1B69176F0);
  *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1B6917700);
  *(int8x16_t *)((char *)a4 + 6 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1B6917710);
  *(int8x16_t *)((char *)a4 + 8 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1B6917720);
  *(int8x16_t *)((char *)a4 + 10 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1B6917730);
  result = vextq_s8(v15, (int8x16_t)v9, 0xEuLL);
  *(int8x16_t *)((char *)a4 + 12 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1B6917740);
  *(int8x16_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

void sub_1B67FCA38(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  uint16x8_t *v9;
  uint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint16x8_t v13;
  int8x16_t v14;
  int16x8_t v15;
  uint16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;

  v4 = 0;
  v5 = vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  v6 = vpaddq_s16(v5, v5);
  v7 = vpaddq_s16(v6, v6);
  v8 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vpaddq_s16(v7, v7), 5uLL);
  v9 = a4 + 1;
  *(int16x8_t *)((char *)v9 + 2 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 4 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 6 * a3) = v8;
  do
  {
    *(int16x8_t *)((char *)v9 + 8 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 10 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 12 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 14 * a3) = v8;
    v4 += 4;
    v9 = (uint16x8_t *)((char *)v9 + 8 * a3);
  }
  while (v4 < 0xC);
  v10 = 0;
  v11 = vaddq_s16(v8, v8);
  v12 = vaddq_s16(*a2, v8);
  v13 = (uint16x8_t)vaddq_s16(v12, v11);
  v11.i16[0] = v12.i16[0];
  v14 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v15 = vmulq_s16(v8, v12);
  v16 = (uint16x8_t)vaddq_s16(v15, a2[5]);
  v17 = (int8x16_t)vrshrq_n_u16((uint16x8_t)vaddq_s16(v15, a2[1]), 2uLL);
  v18 = v8;
  v18.i16[0] = v17.i16[0];
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vaddq_s16(a2[4], v8), v11), 2uLL);
  a4[1] = vrshrq_n_u16(v16, 2uLL);
  *(int8x16_t *)((char *)a4 + 14 * a3) = vextq_s8(v14, (int8x16_t)v8, 0xEuLL);
  a4[a3] = (uint16x8_t)v18;
  *(int8x16_t *)((char *)a4 + 30 * a3) = vextq_s8(v17, (int8x16_t)v8, 0xEuLL);
  v19 = vextq_s8(v14, (int8x16_t)v8, 2uLL);
  v20 = vextq_s8(v17, (int8x16_t)v8, 2uLL);
  do
  {
    v21 = (int8x16_t *)((char *)&unk_1B69219A0 + 16 * v10);
    v22 = *v21;
    *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v19, *v21);
    *(int8x16_t *)((char *)a4 + 18 * a3) = vqtbl1q_s8(v20, v22);
    v23 = v21[1];
    *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v19, v23);
    *(int8x16_t *)((char *)a4 + 20 * a3) = vqtbl1q_s8(v20, v23);
    v24 = v10 + 1;
    v10 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v24 < 5);
}

void sub_1B67FCB9C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint16x8_t v7;
  uint16x8_t *v8;
  uint64_t v9;

  v4 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  v5 = vpaddq_s16(v4, v4);
  v6 = vpaddq_s16(v5, v5);
  v7 = vrshrq_n_u16((uint16x8_t)vpaddq_s16(v6, v6), 6uLL);
  v8 = a4 + 2;
  v9 = 32;
  do
  {
    v8[-2] = v7;
    v8[-1] = v7;
    *v8 = v7;
    v8[1] = v7;
    v8 = (uint16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1B67FCBFC(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  uint64_t v9;

  v4 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23])));
  v5 = vpaddq_s32(v4, v4);
  v6 = (int16x8_t)vrshrq_n_u32((uint32x4_t)vpaddq_s32(v5, v5), 7uLL);
  v7 = vtrn1q_s16(v6, v6);
  v8 = a4 + 4;
  v9 = 64;
  do
  {
    v8[-4] = v7;
    v8[-3] = v7;
    v8[-2] = v7;
    v8[-1] = v7;
    *v8 = v7;
    v8[1] = v7;
    v8[2] = v7;
    v8[3] = v7;
    v8 = (int16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

uint16x8_t sub_1B67FCC98(uint64_t a1, int8x16x2_t *a2, uint64_t a3, _QWORD *a4)
{
  int64x2_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint16x8_t v7;
  uint16x8_t result;
  int8x16x2_t v9;

  v9 = *a2;
  v4 = (int64x2_t)vmulq_s16((int16x8_t)vqtbl2q_s8(*a2, (int8x16_t)xmmword_1B6917750), (int16x8_t)xmmword_1B6917760);
  v5 = (int16x8_t)vdupq_laneq_s64(v4, 1);
  v6 = (int16x8_t)vdupq_lane_s64(v9.val[1].i64[0], 0);
  v7 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1B6917770), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1B6917790, (int8x16_t)xmmword_1B6917770), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1B6917770), (int16x8_t)xmmword_1B6917790), 3uLL);
  result = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1B6917780), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1B6917790, (int8x16_t)xmmword_1B6917780), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1B6917780), (int16x8_t)xmmword_1B6917790), 3uLL);
  *a4 = v7.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v7.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

void sub_1B67FCD30(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4;
  const __int16 *i16;
  int16x8_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  const __int16 *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  BOOL v18;

  v4 = 0;
  i16 = a2[1].i16;
  v6 = vld1q_dup_s16(i16);
  v7 = a2[3].i16;
  v8 = vld1q_dup_s16(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917640);
  v10 = a2[2];
  v11 = vshlq_n_s16(v10, 3uLL);
  v12 = v6;
  do
  {
    v13 = &a2->i16[v4];
    v14 = vld1q_dup_s16(v13++);
    v15 = vsubq_s16(v11, v10);
    *a4 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v15, v9), v12), v14, (int16x8_t)xmmword_1B6917680), 4uLL);
    v16 = vaddq_s16(v12, v6);
    v17 = vld1q_dup_s16(v13);
    v11 = vsubq_s16(v15, v10);
    *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v11, v9), v16), v17, (int16x8_t)xmmword_1B6917680), 4uLL);
    v12 = vaddq_s16(v16, v6);
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    v18 = v4 >= 6;
    v4 += 2;
  }
  while (!v18);
}

void sub_1B67FCDC8(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const __int16 *i16;
  int16x8_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t *v15;
  int16x8_t v16;
  const __int16 *v17;
  int16x8_t v18;

  v4 = 0;
  i16 = a2[2].i16;
  v6 = vld1q_dup_s16(i16);
  v7 = a2[6].i16;
  v8 = vld1q_dup_s16(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917640);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1B69177A0);
  v11 = a2[4];
  v12 = a2[5];
  v13 = vshlq_n_s16(v11, 4uLL);
  v14 = vshlq_n_s16(v12, 4uLL);
  v15 = a4 + 1;
  v16 = v6;
  do
  {
    v17 = &a2->i16[v4];
    v18 = vld1q_dup_s16(v17);
    v13 = vsubq_s16(v13, v11);
    v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1B6917670), 5uLL);
    *v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1B6917680), 5uLL);
    v16 = vaddq_s16(v16, v6);
    ++v4;
    v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 16);
}

void sub_1B67FCE68(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const __int16 *i16;
  int16x8_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint16x8_t *v21;
  int16x8_t v22;
  const __int16 *v23;
  int16x8_t v24;

  v4 = 0;
  i16 = a2[4].i16;
  v6 = vld1q_dup_s16(i16);
  v7 = a2[12].i16;
  v8 = vld1q_dup_s16(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917640);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1B69177A0);
  v11 = vmulq_s16(v8, (int16x8_t)xmmword_1B69177B0);
  v12 = vmulq_s16(v8, (int16x8_t)xmmword_1B69177C0);
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[10];
  v16 = a2[11];
  v17 = vshlq_n_s16(v13, 5uLL);
  v18 = vshlq_n_s16(v14, 5uLL);
  v19 = vshlq_n_s16(v15, 5uLL);
  v20 = vshlq_n_s16(v16, 5uLL);
  v21 = a4 + 2;
  v22 = v6;
  do
  {
    v23 = &a2->i16[v4];
    v24 = vld1q_dup_s16(v23);
    v17 = vsubq_s16(v17, v13);
    v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1B6917650), 6uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1B6917660), 6uLL);
    v19 = vsubq_s16(v19, v15);
    v20 = vsubq_s16(v20, v16);
    *v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1B6917670), 6uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1B6917680), 6uLL);
    v22 = vaddq_s16(v22, v6);
    ++v4;
    v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 32);
}

uint64_t sub_1B67FCF68(uint64_t result, int8x16_t *a2, uint64_t a3, unint64_t *a4)
{
  signed int v4;
  int v5;
  int16x8_t v6;
  unsigned int v7;
  int8x16_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;

  v4 = byte_1B6921758[(int)result];
  v5 = 18 - result;
  if ((int)result >= 18)
    v5 = result - 18;
  v6 = (int16x8_t)a2[(int)result > 17];
  if ((v4 & 0x1F) != 0)
  {
    if (v4 < 0)
    {
      v12 = a2[(int)result < 18];
      v12.i64[1] = *(uint64_t *)((char *)&a2[-1].i64[1] + 6);
      v6 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(v12, *(int8x16_t *)((char *)&unk_1B6921A10 + 64 * (uint64_t)v5 + 56)), (int64x2_t)v6);
      v7 = ~(v4 >> 4);
    }
    else
    {
      v7 = (v4 >> 4) + 6;
    }
    v13 = *(int8x16_t *)((char *)&unk_1B6921C10 + 8 * v7);
    v14 = *(int8x16_t *)((char *)&unk_1B6921C10 + 8 * byte_1B6921C68[v5 - 1]);
    v15.i64[0] = 0x202020202020202;
    v15.i64[1] = 0x202020202020202;
    v16 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v13, v15));
    v17 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v14, v15));
    v18 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v13);
    v19 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v14);
    v20.i64[0] = 0x1F001F001F001FLL;
    v20.i64[1] = 0x1F001F001F001FLL;
    v21 = (int32x4_t)vandq_s8((int8x16_t)vmull_s8(vdup_n_s8(v4), (int8x8_t)0x404030302020101), v20);
    v22 = (int16x8_t)vzip2q_s32(v21, v21);
    v23 = (int16x8_t)vzip1q_s32(v21, v21);
    v24.i64[0] = 0x20002000200020;
    v24.i64[1] = 0x20002000200020;
    v25 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v23, v16), vsubq_s16(v24, v23), v18), 5uLL);
    v6 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v22, v17), vsubq_s16(v24, v22), v19), 5uLL);
    if ((int)result <= 17)
    {
      v26 = vzip1q_s16(v25, v6);
      v27 = vzip2q_s16(v25, v6);
      v25 = vzip1q_s16(v26, v27);
      v6 = vzip2q_s16(v26, v27);
    }
    *a4 = v25.i64[0];
    *(unint64_t *)((char *)a4 + 2 * a3) = v25.u64[1];
    *(unint64_t *)((char *)a4 + 4 * a3) = v6.i64[0];
  }
  else
  {
    if ((_DWORD)result == 18)
    {
      v8 = a2[1];
      v6 = (int16x8_t)vqtbl1q_s8(*(int8x16_t *)((char *)a2 - 2), (int8x16_t)xmmword_1B69177D0);
      v9 = vextq_s8((int8x16_t)v6, v8, 0xEuLL).u64[0];
      v10 = vextq_s8((int8x16_t)v6, v8, 0xCuLL).u64[0];
      v11 = vextq_s8((int8x16_t)v6, v8, 0xAuLL).u64[0];
    }
    else
    {
      v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 2uLL).u64[0];
      v10 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      v11 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 6uLL).u64[0];
    }
    *a4 = v9;
    *(unint64_t *)((char *)a4 + 2 * a3) = v10;
    *(unint64_t *)((char *)a4 + 4 * a3) = v11;
  }
  *(unint64_t *)((char *)a4 + 6 * a3) = v6.u64[1];
  return result;
}

uint64_t sub_1B67FD0F4(uint64_t result, int8x16_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4;
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  _OWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = byte_1B6921758[(int)result];
  v5 = a2 + 2;
  if (v4 < 0)
  {
    v6 = 18 - result;
    if ((int)result >= 18)
      v6 = result - 18;
    v44 = vqtbl1q_s8(a2[2 * ((int)result < 18)], xmmword_1B6921A10[4 * (uint64_t)v6 + 3]);
  }
  if ((int)result <= 17)
    v5 = a2;
  v7 = a2[2 * ((int)result > 17)];
  v8 = v5[1];
  v45[0] = v7;
  v45[1] = v8;
  v44.i16[7] = a2[-1].i16[7];
  if ((v4 & 0x1F) != 0)
  {
    v9 = 8;
    v10.i64[0] = 0x20002000200020;
    v10.i64[1] = 0x20002000200020;
    v11 = (uint16x8_t *)a4;
    v12 = v4;
    do
    {
      v13 = vdupq_n_s16(v12 & 0x1F);
      *v11 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v45 + 2 * (v12 >> 5)), vsubq_s16(v10, v13)), *(int16x8_t *)((char *)v45 + 2 * (v12 >> 5) + 2), v13), 5uLL);
      v12 += v4;
      v11 = (uint16x8_t *)((char *)v11 + 2 * a3);
      --v9;
    }
    while (v9);
    if ((int)result < 18)
    {
      v14 = *(int16x8_t *)((char *)a4 + 2 * a3);
      v15 = *(int16x8_t *)((char *)a4 + 4 * a3);
      v16 = *(int16x8_t *)((char *)a4 + 6 * a3);
      v17 = *(int16x8_t *)((char *)a4 + 8 * a3);
      v18 = *(int16x8_t *)((char *)a4 + 10 * a3);
      v19 = *(int16x8_t *)((char *)a4 + 12 * a3);
      v20 = (int32x4_t)vtrn1q_s16(*a4, v14);
      v21 = (int32x4_t)vtrn2q_s16(*a4, v14);
      v22 = (int32x4_t)vtrn1q_s16(v15, v16);
      v23 = *(int16x8_t *)((char *)a4 + 14 * a3);
      v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      v25 = (int64x2_t)vtrn1q_s32(v20, v22);
      v26 = (int64x2_t)vtrn2q_s32(v20, v22);
      v27 = (int64x2_t)vtrn1q_s32(v21, v24);
      v28 = (int64x2_t)vtrn2q_s32(v21, v24);
      v29 = (int32x4_t)vtrn1q_s16(v17, v18);
      v30 = (int32x4_t)vtrn2q_s16(v17, v18);
      v31 = (int32x4_t)vtrn1q_s16(v19, v23);
      v32 = (int32x4_t)vtrn2q_s16(v19, v23);
      v33 = (int64x2_t)vtrn1q_s32(v29, v31);
      v34 = (int64x2_t)vtrn2q_s32(v29, v31);
      v35 = (int64x2_t)vtrn1q_s32(v30, v32);
      v36 = (int64x2_t)vtrn2q_s32(v30, v32);
      *(int64x2_t *)a4 = vzip1q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 2 * a3) = vzip1q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 4 * a3) = vzip1q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 6 * a3) = vzip1q_s64(v28, v36);
      *(int64x2_t *)((char *)a4 + 8 * a3) = vzip2q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 10 * a3) = vzip2q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 12 * a3) = vzip2q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 14 * a3) = vzip2q_s64(v28, v36);
    }
  }
  else
  {
    if (v4 < 0)
    {
      v8 = v44;
      v37 = vextq_s8(v44, v7, 0xEuLL);
      v38 = vextq_s8(v44, v7, 0xCuLL);
      v39 = vextq_s8(v44, v7, 0xAuLL);
      v40 = vextq_s8(v44, v7, 8uLL);
      v41 = vextq_s8(v44, v7, 6uLL);
      v42 = vextq_s8(v44, v7, 4uLL);
      v43 = vextq_s8(v44, v7, 2uLL);
    }
    else
    {
      v37 = vextq_s8(v7, v8, 2uLL);
      v38 = vextq_s8(v7, v8, 4uLL);
      v39 = vextq_s8(v7, v8, 6uLL);
      v40 = vextq_s8(v7, v8, 8uLL);
      v41 = vextq_s8(v7, v8, 0xAuLL);
      v42 = vextq_s8(v7, v8, 0xCuLL);
      v43 = vextq_s8(v7, v8, 0xEuLL);
    }
    *a4 = (int16x8_t)v37;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v38;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v39;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v40;
    *(int8x16_t *)((char *)a4 + 8 * a3) = v41;
    *(int8x16_t *)((char *)a4 + 10 * a3) = v42;
    *(int8x16_t *)((char *)a4 + 12 * a3) = v43;
    *(int8x16_t *)((char *)a4 + 14 * a3) = v8;
  }
  return result;
}

uint64_t sub_1B67FD36C(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint16x8_t *v9;
  uint64_t v10;
  int16x8_t v11;
  int v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  __int128 v25;
  __int128 v26;
  __int8 *v27;
  uint64_t v28;
  char v29;
  int16x8_t v30;
  int v31;
  char v32;
  uint16x8_t *v33;
  uint16x8_t *v34;
  uint64_t v35;
  int16x8_t v36;
  int16x8_t v37;
  uint64_t v38;
  char v39;
  char v40;
  int16x8_t *v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  __int128 v65;
  _OWORD v66[3];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = byte_1B6921758[(int)result];
  v5 = a2 + 4;
  if ((int)result <= 17)
    v5 = a2;
  v6 = v5[1];
  v7 = v5[2];
  v65 = a2[4 * (unint64_t)((int)result > 17)];
  v66[0] = v6;
  v8 = v5[3];
  v66[1] = v7;
  v66[2] = v8;
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      v28 = 0;
      v29 = 1;
      v30.i64[0] = 0x20002000200020;
      v30.i64[1] = 0x20002000200020;
      v31 = v4;
      result = 14 * a3;
      do
      {
        v32 = v29;
        v33 = &a4[v28];
        v34 = v33;
        v35 = 8;
        do
        {
          v36 = vdupq_n_s16(v31 & 0x1F);
          v37 = vsubq_s16(v30, v36);
          *v34 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v34[a3] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)v66 + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v31 += v4;
          v34 = (uint16x8_t *)((char *)v34 + 2 * a3);
          --v35;
        }
        while (v35);
        v38 = 0;
        v39 = 1;
        do
        {
          v40 = v39;
          v41 = (int16x8_t *)((char *)v33 + 2 * v38 * a3);
          v42 = *(int16x8_t *)((char *)v41 + 2 * a3);
          v43 = *(int16x8_t *)((char *)v41 + 4 * a3);
          v44 = *(int16x8_t *)((char *)v41 + 6 * a3);
          v45 = *(int16x8_t *)((char *)v41 + 8 * a3);
          v46 = *(int16x8_t *)((char *)v41 + 10 * a3);
          v47 = *(int16x8_t *)((char *)v41 + 12 * a3);
          v48 = (int32x4_t)vtrn1q_s16(*v41, v42);
          v49 = (int32x4_t)vtrn2q_s16(*v41, v42);
          v50 = (int32x4_t)vtrn1q_s16(v43, v44);
          v51 = *(int16x8_t *)((char *)v41 + 14 * a3);
          v52 = (int32x4_t)vtrn2q_s16(v43, v44);
          v53 = (int64x2_t)vtrn1q_s32(v48, v50);
          v54 = (int64x2_t)vtrn2q_s32(v48, v50);
          v55 = (int64x2_t)vtrn1q_s32(v49, v52);
          v56 = (int64x2_t)vtrn2q_s32(v49, v52);
          v57 = (int32x4_t)vtrn1q_s16(v45, v46);
          v58 = (int32x4_t)vtrn2q_s16(v45, v46);
          v59 = (int32x4_t)vtrn1q_s16(v47, v51);
          v60 = (int32x4_t)vtrn2q_s16(v47, v51);
          v61 = (int64x2_t)vtrn1q_s32(v57, v59);
          v62 = (int64x2_t)vtrn2q_s32(v57, v59);
          v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)v41 = vzip1q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 2 * a3) = vzip1q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 4 * a3) = vzip1q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 6 * a3) = vzip1q_s64(v56, v64);
          *(int64x2_t *)((char *)v41 + 8 * a3) = vzip2q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 10 * a3) = vzip2q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 12 * a3) = vzip2q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 14 * a3) = vzip2q_s64(v56, v64);
          v38 = 8;
          v39 = 0;
        }
        while ((v40 & 1) != 0);
        v29 = 0;
        v28 = 1;
      }
      while ((v32 & 1) != 0);
    }
    else
    {
      v9 = a4 + 1;
      v10 = 16;
      v11.i64[0] = 0x20002000200020;
      v11.i64[1] = 0x20002000200020;
      v12 = v4;
      do
      {
        v13 = vdupq_n_s16(v12 & 0x1F);
        v14 = vsubq_s16(v11, v13);
        v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5) + 2), v13), 5uLL);
        v16 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)v66 + 2 * (v12 >> 5) + 2), v13), 5uLL);
        v9[-1] = v15;
        *v9 = v16;
        v12 += v4;
        v9 = (uint16x8_t *)((char *)v9 + 2 * a3);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v17 = v4 >> 5;
    v18 = 2 * v17;
    v19 = 2 * v17;
    v20 = v66;
    v21 = 2 * v18;
    v22 = -2;
    do
    {
      v23 = *(uint16x8_t *)((char *)v20 + v19 - 16);
      v24 = *(uint16x8_t *)((char *)v20 + v19);
      v20 = (__int128 *)((char *)v20 + v21);
      v25 = *(v20 - 1);
      v26 = *v20;
      *a4 = v23;
      a4[1] = v24;
      v27 = &a4->i8[2 * a3];
      *(_OWORD *)v27 = v25;
      *((_OWORD *)v27 + 1) = v26;
      v22 += 2;
      a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    }
    while (v22 < 0xE);
  }
  return result;
}

uint64_t sub_1B67FD690(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int8x16_t *v14;
  uint64_t v15;
  unint64_t i;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint16x8_t *v20;
  uint64_t v21;
  int16x8_t v22;
  int v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  uint16x8_t *v30;
  uint64_t v31;
  uint16x8_t *v32;
  uint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int16x8_t v46;
  int v47;
  uint64_t v48;
  uint16x8_t *v49;
  uint64_t v50;
  int16x8_t v51;
  int16x8_t v52;
  unint64_t v53;
  int16x8_t *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  BOOL v78;
  _BYTE v79[78];
  __int16 v80;
  _WORD v81[68];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = byte_1B6921758[(int)result];
  v5 = a2 + 8;
  if ((int)result <= 17)
    v6 = a2;
  else
    v6 = a2 + 8;
  if (v4 < 0)
  {
    v8 = 0;
    if ((int)result > 17)
      v5 = a2;
    v9 = a2[8 * (unint64_t)((int)result < 18)];
    v10 = v5[1];
    v11 = v5[2];
    v12 = v5[3];
    if ((int)result >= 18)
      v13 = result - 18;
    else
      v13 = 18 - result;
    v14 = &xmmword_1B6921A10[4 * (uint64_t)v13];
    v7 = 32;
    do
    {
      *(int8x16_t *)&v79[v8 * 16 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, v14[v8]);
      ++v8;
    }
    while (v8 != 4);
  }
  else
  {
    v7 = 64;
  }
  v15 = 0;
  for (i = 0; i < v7; i += 32)
  {
    v17 = &v79[v15 * 16];
    v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  v80 = *((_WORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      v37 = 0;
      v38 = 4 * a3;
      v39 = 6 * a3;
      v40 = 3 * a3;
      v41 = 2 * a3;
      result = 32 * a3;
      v42 = a3;
      v43 = 12 * a3;
      v44 = 10 * a3;
      v45 = 8 * a3;
      v46.i64[0] = 0x20002000200020;
      v46.i64[1] = 0x20002000200020;
      v47 = v4;
      v48 = 14 * a3;
      do
      {
        v49 = a4;
        v50 = 8;
        do
        {
          v51 = vdupq_n_s16(v47 & 0x1F);
          v52 = vsubq_s16(v46, v51);
          *v49 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v47 >> 5], v52), *(int16x8_t *)&v81[(v47 >> 5) + 1], v51), 5uLL);
          v49[v42] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 8], v52), *(int16x8_t *)&v81[(v47 >> 5) + 9], v51), 5uLL);
          *(uint16x8_t *)((char *)v49 + result) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 16], v52), *(int16x8_t *)&v81[(v47 >> 5) + 17], v51), 5uLL);
          v49[v40] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 24], v52), *(int16x8_t *)&v81[(v47 >> 5) + 25], v51), 5uLL);
          v47 += v4;
          v49 = (uint16x8_t *)((char *)v49 + v41);
          --v50;
        }
        while (v50);
        v53 = -8;
        v54 = (int16x8_t *)a4;
        do
        {
          v55 = *(int16x8_t *)((char *)v54 + v41);
          v56 = *(int16x8_t *)((char *)v54 + v38);
          v57 = *(int16x8_t *)((char *)v54 + v39);
          v58 = *(int16x8_t *)((char *)v54 + v45);
          v59 = *(int16x8_t *)((char *)v54 + v44);
          v60 = *(int16x8_t *)((char *)v54 + v43);
          v61 = (int32x4_t)vtrn1q_s16(*v54, v55);
          v62 = (int32x4_t)vtrn2q_s16(*v54, v55);
          v63 = (int32x4_t)vtrn1q_s16(v56, v57);
          v64 = *(int16x8_t *)((char *)v54 + v48);
          v65 = (int32x4_t)vtrn2q_s16(v56, v57);
          v66 = (int64x2_t)vtrn1q_s32(v61, v63);
          v67 = (int64x2_t)vtrn2q_s32(v61, v63);
          v68 = (int64x2_t)vtrn1q_s32(v62, v65);
          v69 = (int64x2_t)vtrn2q_s32(v62, v65);
          v70 = (int32x4_t)vtrn1q_s16(v58, v59);
          v71 = (int32x4_t)vtrn2q_s16(v58, v59);
          v72 = (int32x4_t)vtrn1q_s16(v60, v64);
          v73 = (int32x4_t)vtrn2q_s16(v60, v64);
          v74 = (int64x2_t)vtrn1q_s32(v70, v72);
          v75 = (int64x2_t)vtrn2q_s32(v70, v72);
          v76 = (int64x2_t)vtrn1q_s32(v71, v73);
          v77 = (int64x2_t)vtrn2q_s32(v71, v73);
          *(int64x2_t *)v54 = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v41) = vzip1q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v38) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v39) = vzip1q_s64(v69, v77);
          *(int64x2_t *)((char *)v54 + v45) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v44) = vzip2q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v43) = vzip2q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v48) = vzip2q_s64(v69, v77);
          v53 += 8;
          v54 = (int16x8_t *)((char *)v54 + v42 * 16);
        }
        while (v53 < 0x18);
        ++a4;
        v78 = v37 >= 0x18;
        v37 += 8;
      }
      while (!v78);
    }
    else
    {
      v20 = a4 + 2;
      v21 = 32;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      v23 = v4;
      do
      {
        v24 = vdupq_n_s16(v23 & 0x1F);
        v25 = vsubq_s16(v22, v24);
        v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 8], v25), *(int16x8_t *)&v81[(v23 >> 5) + 9], v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v23 >> 5], v25), *(int16x8_t *)&v81[(v23 >> 5) + 1], v24), 5uLL);
        v20[-1] = v26;
        result = (uint64_t)&v81[(v23 >> 5) + 16];
        v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 2), v24), 5uLL);
        v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 24], v25), *(int16x8_t *)&v81[(v23 >> 5) + 25], v24), 5uLL);
        *v20 = v27;
        v20[1] = v28;
        v23 += v4;
        v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v29 = v4 >> 5;
    v30 = a4 + 2;
    v31 = v29;
    v32 = (uint16x8_t *)&v81[v31 + 24];
    v33 = 32;
    do
    {
      v34 = v32[-2];
      v35 = v32[-1];
      v36 = *v32;
      v30[-2] = v32[-3];
      v30[-1] = v34;
      *v30 = v35;
      v30[1] = v36;
      v32 = (uint16x8_t *)((char *)v32 + v31 * 2);
      v30 = (uint16x8_t *)((char *)v30 + 2 * a3);
      --v33;
    }
    while (v33);
  }
  return result;
}

int16x8_t *sub_1B67FDA64(int16x8_t *result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  _WORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t i;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int16x8_t v19;
  int v20;
  uint64_t v21;
  int16x8_t v22;
  int16x8_t v23;
  char v24;
  _WORD *v25;
  uint64_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int8 *v38;
  unint64_t v39;
  int16x8_t v40;
  int v41;
  uint64_t v42;
  int16x8_t *v43;
  uint64_t v44;
  int16x8_t v45;
  int16x8_t v46;
  char v47;
  char v48;
  _WORD *v49;
  uint64_t v50;
  unint64_t v51;
  int16x8_t *v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  _BYTE v76[142];
  __int16 v77;
  _WORD v78[132];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = v78;
  v5 = byte_1B6921758[(int)result];
  if ((int)result <= 17)
    v6 = a2;
  else
    v6 = a2 + 256;
  if ((int)result <= 17)
    v7 = a2 + 256;
  else
    v7 = a2;
  if (v5 < 0)
  {
    v9 = 2 * byte_1B6921758[(int)result];
    v10 = word_1B6921880[(int)result - 11];
    v11 = 2 * v5 * v10 + 128;
    v8 = 64;
    do
    {
      v78[v9 - 1] = *(_WORD *)(v7 + 2 * ((v11 >> 8) - 1));
      v11 += v10;
      v12 = __CFADD__(v9++, 1);
    }
    while (!v12);
  }
  else
  {
    v8 = 128;
  }
  v13 = 0;
  for (i = 0; i < v8; i += 32)
  {
    v15 = &v76[v13];
    v16 = *(_OWORD *)(v6 + v13 + 16);
    v15[9] = *(_OWORD *)(v6 + v13);
    v15[10] = v16;
    v17 = *(_OWORD *)(v6 + v13 + 48);
    v15[11] = *(_OWORD *)(v6 + v13 + 32);
    v15[12] = v17;
    v13 += 64;
  }
  v77 = *(_WORD *)(a2 - 2);
  if ((v5 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      v39 = 0;
      v40.i64[0] = 0x20002000200020;
      v40.i64[1] = 0x20002000200020;
      result = a4;
      v41 = v5;
      do
      {
        v42 = 0;
        v43 = &a4[v39];
        do
        {
          v44 = 0;
          v45 = vdupq_n_s16(v41 & 0x1F);
          v46 = vsubq_s16(v40, v45);
          v47 = 1;
          do
          {
            v48 = v47;
            v49 = &v78[v44 + ((uint64_t)v41 >> 5)];
            v50 = v44 + v42;
            *(uint16x8_t *)((char *)v43 + 2 * v50 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v49, v46), *(int16x8_t *)(v49 + 1), v45), 5uLL);
            *(uint16x8_t *)((char *)v43 + 2 * (v50 + 8) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v49 + 1), v46), *(int16x8_t *)(v49 + 9), v45), 5uLL);
            *(uint16x8_t *)((char *)v43 + 2 * (v50 + 16) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v49 + 2), v46), *(int16x8_t *)(v49 + 17), v45), 5uLL);
            *(uint16x8_t *)((char *)v43 + 2 * (v50 + 24) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v49 + 3), v46), *(int16x8_t *)(v49 + 25), v45), 5uLL);
            v44 = 32;
            v47 = 0;
          }
          while ((v48 & 1) != 0);
          ++v42;
          v41 += v5;
        }
        while (v42 != 8);
        v51 = -8;
        v52 = result;
        do
        {
          v53 = *(int16x8_t *)((char *)v52 + 2 * a3);
          v54 = *(int16x8_t *)((char *)v52 + 4 * a3);
          v55 = *(int16x8_t *)((char *)v52 + 6 * a3);
          v56 = *(int16x8_t *)((char *)v52 + 8 * a3);
          v57 = *(int16x8_t *)((char *)v52 + 10 * a3);
          v58 = *(int16x8_t *)((char *)v52 + 12 * a3);
          v59 = (int32x4_t)vtrn1q_s16(*v52, v53);
          v60 = (int32x4_t)vtrn2q_s16(*v52, v53);
          v61 = (int32x4_t)vtrn1q_s16(v54, v55);
          v62 = *(int16x8_t *)((char *)v52 + 14 * a3);
          v63 = (int32x4_t)vtrn2q_s16(v54, v55);
          v64 = (int64x2_t)vtrn1q_s32(v59, v61);
          v65 = (int64x2_t)vtrn2q_s32(v59, v61);
          v66 = (int64x2_t)vtrn1q_s32(v60, v63);
          v67 = (int64x2_t)vtrn2q_s32(v60, v63);
          v68 = (int32x4_t)vtrn1q_s16(v56, v57);
          v69 = (int32x4_t)vtrn2q_s16(v56, v57);
          v70 = (int32x4_t)vtrn1q_s16(v58, v62);
          v71 = (int32x4_t)vtrn2q_s16(v58, v62);
          v72 = (int64x2_t)vtrn1q_s32(v68, v70);
          v73 = (int64x2_t)vtrn2q_s32(v68, v70);
          v74 = (int64x2_t)vtrn1q_s32(v69, v71);
          v75 = (int64x2_t)vtrn2q_s32(v69, v71);
          *(int64x2_t *)v52 = vzip1q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + 2 * a3) = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + 4 * a3) = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + 6 * a3) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v52 + 8 * a3) = vzip2q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + 10 * a3) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + 12 * a3) = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + 14 * a3) = vzip2q_s64(v67, v75);
          v51 += 8;
          v52 += a3;
        }
        while (v51 < 0x38);
        ++result;
        v12 = v39++ >= 7;
      }
      while (!v12);
    }
    else
    {
      v18 = 0;
      v19.i64[0] = 0x20002000200020;
      v19.i64[1] = 0x20002000200020;
      v20 = v5;
      do
      {
        v21 = 0;
        v22 = vdupq_n_s16(v20 & 0x1F);
        v23 = vsubq_s16(v19, v22);
        v24 = 1;
        do
        {
          v25 = &v78[v21 * 8 + ((uint64_t)v20 >> 5)];
          v26 = (uint64_t)a4[v21].i64 + 2 * v18 * a3;
          v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v25 + 1), v23), *(int16x8_t *)(v25 + 9), v22), 5uLL);
          *(uint16x8_t *)v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v25, v23), *(int16x8_t *)(v25 + 1), v22), 5uLL);
          *(uint16x8_t *)(v26 + 16) = v27;
          v28 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v25 + 2), v23), *(int16x8_t *)(v25 + 17), v22);
          v29 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v25 + 3), v23), *(int16x8_t *)(v25 + 25), v22);
          LOBYTE(v25) = v24;
          *(uint16x8_t *)(v26 + 32) = vrshrq_n_u16(v28, 5uLL);
          *(uint16x8_t *)(v26 + 48) = vrshrq_n_u16(v29, 5uLL);
          v21 = 4;
          v24 = 0;
        }
        while ((v25 & 1) != 0);
        ++v18;
        v20 += v5;
      }
      while (v18 != 64);
    }
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t)v5 >> 5;
    do
    {
      v32 = 0;
      v33 = 1;
      v4 += v31;
      do
      {
        v34 = &v4[v32 * 8];
        v35 = v34[1];
        v36 = v34[2];
        v37 = v34[3];
        v38 = &a4[v32].i8[2 * v30 * a3];
        *(_OWORD *)v38 = *v34;
        *((_OWORD *)v38 + 1) = v35;
        LOBYTE(v34) = v33;
        *((_OWORD *)v38 + 2) = v36;
        *((_OWORD *)v38 + 3) = v37;
        v32 = 4;
        v33 = 0;
      }
      while ((v34 & 1) != 0);
      ++v30;
    }
    while (v30 != 64);
  }
  return result;
}

int8x16_t sub_1B67FDE68(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFC00FC00FC00FC00;
  v6.i64[1] = 0xFC00FC00FC00FC00;
  v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1B69176E0);
  result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1B69176D0);
  *a4 = v8.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

double sub_1B67FDED0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(_QWORD *)&result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

void sub_1B67FDFA4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  __int128 v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFC00FC00FC00FC00;
  v9.i64[1] = 0xFC00FC00FC00FC00;
  v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  v12 = v6;
  LOWORD(v12) = v10.i16[0];
  v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  v14 = 7;
  do
  {
    v10 = vextq_s8(v10, v10, 2uLL);
    v15 = v6;
    LOWORD(v15) = v10.i16[0];
    v11 = vextq_s8(v11, v11, 2uLL);
    v16 = v6;
    LOWORD(v16) = v11.i16[0];
    v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

void sub_1B67FE054(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1B67FE080(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = a2[16];
  v5 = a2[17];
  v6 = a2[18];
  v7 = a2[19];
  v8 = a2[20];
  v9 = a2[21];
  v10 = (_OWORD *)(a4 + 64);
  v11 = 64;
  v12 = a2[22];
  v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

int16x4_t sub_1B67FE0BC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x4_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1B67FE118(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = *a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x8_t sub_1B67FE1B0(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  const __int16 *v10;
  unint64_t v11;
  const __int16 *v12;
  int16x8_t result;
  int16x8_t v14;
  int16x8_t *v15;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = vld1q_dup_s16(a2->i16);
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0), v7);
  v9 = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v7);
  *a4 = v8;
  a4[1] = v9;
  v10 = &a2->i16[2];
  v11 = -1;
  do
  {
    v12 = v10 - 1;
    result = vld1q_dup_s16(v12);
    v14 = vld1q_dup_s16(v10);
    v15 = (int16x8_t *)((char *)a4 + 2 * a3);
    *v15 = result;
    v15[1] = result;
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    *a4 = v14;
    a4[1] = v14;
    v11 += 2;
    v10 += 2;
  }
  while (v11 < 0xE);
  return result;
}

int16x8_t sub_1B67FE230(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 2;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

int16x8_t sub_1B67FE260(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 4;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

uint16x8_t sub_1B67FE298(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t result;

  v4 = (int32x4_t)vaddq_s16(a2[2], *a2);
  v5 = vpaddq_s32(v4, v4);
  result = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 3uLL);
  *a4 = result;
  *(uint16x8_t *)((char *)a4 + 2 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 4 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1B67FE2D4(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t v6;
  unint64_t v7;
  uint16x8_t *v8;

  v4 = (int32x4_t)vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  v5 = vpaddq_s32(v4, v4);
  v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 4uLL);
  v7 = -2;
  do
  {
    *a4 = v6;
    a4[1] = v6;
    v8 = (uint16x8_t *)((char *)a4 + 2 * a3);
    *v8 = v6;
    v8[1] = v6;
    v7 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v7 < 6);
}

void sub_1B67FE320(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t v6;
  uint16x8_t *v7;
  uint64_t v8;

  v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  v5 = vpaddq_s32(v4, v4);
  v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 5uLL);
  v7 = a4 + 2;
  v8 = 16;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *v7 = v6;
    v7[1] = v6;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

void sub_1B67FE37C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t v6;
  uint16x8_t *v7;
  uint64_t v8;

  v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23]));
  v5 = vpaddq_s32(v4, v4);
  v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 6uLL);
  v7 = a4 + 2;
  v8 = 32;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *v7 = v6;
    v7[1] = v6;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

uint16x8_t sub_1B67FE408(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  const float *v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int16x8_t v8;
  int16x8_t v9;
  const float *v10;
  int16x8_t v11;
  uint16x8_t result;

  v4 = (const float *)(a2 + 48);
  v5 = (int16x8_t)vld1q_dup_f32(v4);
  v6 = vmulq_s16(v5, (int16x8_t)xmmword_1B69177E0);
  v7 = *(int32x4_t *)a2;
  v8 = *(int16x8_t *)(a2 + 32);
  v9.i64[0] = 0x3000300030003;
  v9.i64[1] = 0x3000300030003;
  v10 = (const float *)(a2 + 16);
  v11 = (int16x8_t)vld1q_dup_f32(v10);
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vmlaq_s16(v6, v8, v9), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), (int16x8_t)xmmword_1B69177F0), v11), 3uLL);
  *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16(v8, v8), v6), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1), (int16x8_t)xmmword_1B69177F0), vaddq_s16(v11, v11)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 4 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vaddq_s16(v6, v8), (int16x8_t)vdupq_laneq_s32(v7, 2), (int16x8_t)xmmword_1B69177F0), v11, v9), 3uLL);
  result = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(v6, (int16x8_t)vdupq_laneq_s32(v7, 3), (int16x8_t)xmmword_1B69177F0), vshlq_n_s16(v11, 2uLL)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1B67FE4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const float *v5;
  int16x8_t v6;
  const float *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t *v15;
  int16x8_t v16;
  const float *v17;
  int16x8_t v18;

  v4 = 0;
  v5 = (const float *)(a2 + 32);
  v6 = (int16x8_t)vld1q_dup_f32(v5);
  v7 = (const float *)(a2 + 96);
  v8 = (int16x8_t)vld1q_dup_f32(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1B69177E0);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917800);
  v11 = *(int16x8_t *)(a2 + 64);
  v12 = *(int16x8_t *)(a2 + 80);
  v13 = vshlq_n_s16(v11, 3uLL);
  v14 = vshlq_n_s16(v12, 3uLL);
  v15 = a4 + 1;
  v16 = v6;
  do
  {
    v17 = (const float *)(a2 + v4);
    v18 = (int16x8_t)vld1q_dup_f32(v17);
    v13 = vsubq_s16(v13, v11);
    v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1B6917810), 4uLL);
    *v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1B69177F0), 4uLL);
    v16 = vaddq_s16(v16, v6);
    v4 += 4;
    v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 32);
}

void sub_1B67FE558(uint64_t a1, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const float *v5;
  int16x8_t v6;
  const float *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint16x8_t *v21;
  int16x8_t v22;
  const float *v23;
  int16x8_t v24;

  v4 = 0;
  v5 = (const float *)(a2 + 4);
  v6 = (int16x8_t)vld1q_dup_f32(v5);
  v7 = (const float *)(a2 + 12);
  v8 = (int16x8_t)vld1q_dup_f32(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1B69177E0);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917800);
  v11 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917820);
  v12 = vmulq_s16(v8, (int16x8_t)xmmword_1B6917830);
  v13 = *((int16x8_t *)a2 + 8);
  v14 = *((int16x8_t *)a2 + 9);
  v15 = *((int16x8_t *)a2 + 10);
  v16 = *((int16x8_t *)a2 + 11);
  v17 = vshlq_n_s16(v13, 4uLL);
  v18 = vshlq_n_s16(v14, 4uLL);
  v19 = vshlq_n_s16(v15, 4uLL);
  v20 = vshlq_n_s16(v16, 4uLL);
  v21 = a4 + 2;
  v22 = v6;
  do
  {
    v23 = (const float *)((char *)a2 + v4);
    v24 = (int16x8_t)vld1q_dup_f32(v23);
    v17 = vsubq_s16(v17, v13);
    v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1B6917840), 5uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1B6917850), 5uLL);
    v19 = vsubq_s16(v19, v15);
    v20 = vsubq_s16(v20, v16);
    *v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1B6917810), 5uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1B69177F0), 5uLL);
    v22 = vaddq_s16(v22, v6);
    v4 += 4;
    v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 64);
}

void sub_1B67FE658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const float *v5;
  const float *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  const float *v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  _OWORD v17[8];
  uint64_t v18;

  v4 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  v5 = (const float *)(a2 + 64);
  v6 = (const float *)(a2 + 192);
  v7 = (int16x8_t)vld1q_dup_f32(v6);
  v17[0] = vmulq_s16(v7, (int16x8_t)xmmword_1B69177E0);
  v17[1] = vmulq_s16(v7, (int16x8_t)xmmword_1B6917800);
  v8 = vmulq_s16(v7, (int16x8_t)xmmword_1B6917820);
  v9 = vmulq_s16(v7, (int16x8_t)xmmword_1B6917830);
  v10 = (int16x8_t)vld1q_dup_f32(v5);
  v17[2] = v8;
  v17[3] = v9;
  v11 = v10;
  do
  {
    v12 = 0;
    v13 = (const float *)((char *)&unk_1B6921C80 + 4 * v4 + 64);
    v14 = (int16x8_t)vld1q_dup_f32(v13);
    v15 = (const float *)(a2 + 4 * v4);
    v16 = (int16x8_t)vld1q_dup_f32(v15);
    do
    {
      *(uint16x8_t *)(a4 + v12 * 16) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16(v11, *(int16x8_t *)((char *)&unk_1B6921C80 + v12 * 16 + 64), v16), (int16x8_t)v17[v12]), *(int16x8_t *)(a2 + 128 + v12 * 16), v14), 5uLL);
      ++v12;
    }
    while (v12 != 4);
    v11 = vaddq_s16(v11, v10);
    ++v4;
    a4 += 2 * a3;
  }
  while (v4 != 16);
}

uint64_t sub_1B67FE760(uint64_t result, int8x16_t *a2, uint64_t a3, _OWORD *a4)
{
  int v4;
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  char *v17;
  int32x4_t v18;
  int32x4_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = byte_1B6921758[(int)result];
  v5 = a2 + 2;
  if (v4 < 0)
  {
    v6 = 18 - result;
    if ((int)result >= 18)
      v6 = result - 18;
    v27 = vqtbl1q_s8(a2[2 * ((int)result < 18)], xmmword_1B6921D80[4 * (uint64_t)v6 + 3]);
  }
  if ((int)result <= 17)
    v5 = a2;
  v7 = a2[2 * ((int)result > 17)];
  v8 = v5[1];
  v28[0] = v7;
  v28[1] = v8;
  v27.i32[3] = a2[-1].i32[3];
  if ((v4 & 0x1F) != 0)
  {
    v9.i64[0] = 0x20002000200020;
    v9.i64[1] = 0x20002000200020;
    v10 = vdupq_n_s16((2 * v4) & 0x1E);
    v11 = vdupq_n_s16((3 * v4) & 0x1F);
    v12 = v4 >> 3;
    v13 = vdupq_n_s16(4 * (v4 & 7u));
    v14 = vsubq_s16(v9, v13);
    v15 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 5)), vsubq_s16(v9, vdupq_n_s16(v4 & 0x1F))), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 5) + 4), (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v4 & 0x1F))), 5uLL);
    v16 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 4)), vsubq_s16(v9, v10)), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 4) + 4), v10), 5uLL);
    v17 = (char *)v28 + 4 * ((3 * v4) >> 5);
    v18 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v17, vsubq_s16(v9, v11)), *(int16x8_t *)(v17 + 4), v11), 5uLL);
    v19 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * v12), v14), *(int16x8_t *)((char *)v28 + 4 * v12 + 4), v13), 5uLL);
    if ((int)result < 18)
    {
      v20 = (int64x2_t)vtrn1q_s32(v15, v16);
      v21 = (int64x2_t)vtrn2q_s32(v15, v16);
      v22 = (int64x2_t)vtrn1q_s32(v18, v19);
      v23 = (int64x2_t)vtrn2q_s32(v18, v19);
      v15 = (int32x4_t)vzip1q_s64(v20, v22);
      v18 = (int32x4_t)vzip2q_s64(v20, v22);
      v16 = (int32x4_t)vzip1q_s64(v21, v23);
      v19 = (int32x4_t)vzip2q_s64(v21, v23);
    }
    *a4 = v15;
    *(int32x4_t *)((char *)a4 + 2 * a3) = v16;
    *(int32x4_t *)((char *)a4 + 4 * a3) = v18;
    *(int32x4_t *)((char *)a4 + 6 * a3) = v19;
  }
  else
  {
    if (v4 < 0)
    {
      v8 = v27;
      v24 = vextq_s8(v27, v7, 0xCuLL);
      v25 = vextq_s8(v27, v7, 8uLL);
      v26 = vextq_s8(v27, v7, 4uLL);
    }
    else
    {
      v24 = vextq_s8(v7, v8, 4uLL);
      v25 = vextq_s8(v7, v8, 8uLL);
      v26 = vextq_s8(v7, v8, 0xCuLL);
    }
    *a4 = v24;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v25;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v26;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v8;
  }
  return result;
}

uint64_t sub_1B67FE968(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint16x8_t *v16;
  uint64_t v17;
  int16x8_t v18;
  int v19;
  int16x8_t v20;
  int16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  uint16x8_t v32;
  __int128 v33;
  __int8 *v34;
  uint64_t v35;
  int v36;
  char v37;
  int16x8_t v38;
  int v39;
  int v40;
  unint64_t v41;
  char v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  uint16x8_t *v51;
  char v52;
  char v53;
  _OWORD *v54;
  int32x4_t v55;
  char *v56;
  int32x4_t v57;
  int32x4_t v58;
  char *v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  _OWORD v65[2];
  int8x16_t v66;
  __int128 v67;
  _OWORD v68[3];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = byte_1B6921758[(int)result];
  v5 = a2 + 4;
  if (v4 < 0)
  {
    if ((int)result <= 17)
      v6 = a2 + 4;
    else
      v6 = a2;
    v7 = a2[4 * (unint64_t)((int)result < 18)];
    v8 = v6[1];
    if ((int)result >= 18)
      v9 = result - 18;
    else
      v9 = 18 - result;
    v10 = &xmmword_1B6921D80[4 * (uint64_t)v9];
    v11 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[2]);
    v12 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[3]);
    v65[1] = v11;
    v66 = v12;
  }
  if ((int)result <= 17)
    v5 = a2;
  v13 = v5[1];
  v14 = v5[2];
  v67 = a2[4 * (unint64_t)((int)result > 17)];
  v68[0] = v13;
  v15 = v5[3];
  v68[1] = v14;
  v68[2] = v15;
  v66.i32[3] = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      v35 = 0;
      v36 = 2 * v4;
      v37 = 1;
      v38.i64[0] = 0x20002000200020;
      v38.i64[1] = 0x20002000200020;
      v39 = v4;
      v40 = 3 * v4;
      do
      {
        v41 = 0;
        v42 = v37;
        v43 = vdupq_n_s16(v39 & 0x1F);
        v44 = vsubq_s16(v38, v43);
        v45 = vdupq_n_s16((v39 + v4) & 0x1F);
        v46 = vsubq_s16(v38, v45);
        result = (uint64_t)(v39 + v36) >> 5;
        v47 = vdupq_n_s16((v39 + v36) & 0x1F);
        v48 = vsubq_s16(v38, v47);
        v49 = vdupq_n_s16((v39 + v40) & 0x1F);
        v50 = vsubq_s16(v38, v49);
        v51 = &a4[v35];
        v52 = 1;
        do
        {
          v53 = v52;
          v54 = &v68[v41 / 4 - 1];
          v55 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5)), v44), *(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5) + 4), v43), 5uLL);
          v56 = (char *)v54 + 4 * ((uint64_t)(v39 + v4) >> 5);
          v57 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v56, v46), *(int16x8_t *)(v56 + 4), v45), 5uLL);
          v58 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * result), v48), *(int16x8_t *)((char *)v54 + 4 * result + 4), v47), 5uLL);
          v59 = (char *)v54 + 4 * ((uint64_t)(v39 + v40) >> 5);
          v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v59, v50), *(int16x8_t *)(v59 + 4), v49), 5uLL);
          v61 = (int64x2_t)vtrn1q_s32(v55, v57);
          v62 = (int64x2_t)vtrn2q_s32(v55, v57);
          v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)((char *)v51 + 2 * v41 * a3) = vzip1q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 1) * a3) = vzip1q_s64(v62, v64);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 2) * a3) = vzip2q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 3) * a3) = vzip2q_s64(v62, v64);
          v41 = 4;
          v52 = 0;
        }
        while ((v53 & 1) != 0);
        v37 = 0;
        v39 += 4 * v4;
        v35 = 1;
      }
      while ((v42 & 1) != 0);
    }
    else
    {
      v16 = a4 + 1;
      v17 = 8;
      v18.i64[0] = 0x20002000200020;
      v18.i64[1] = 0x20002000200020;
      v19 = v4;
      do
      {
        v20 = vdupq_n_s16(v19 & 0x1F);
        v21 = vsubq_s16(v18, v20);
        v22 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5) + 4), v20), 5uLL);
        v23 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v68 + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)v68 + 4 * (v19 >> 5) + 4), v20), 5uLL);
        v16[-1] = v22;
        *v16 = v23;
        v19 += v4;
        v16 = (uint16x8_t *)((char *)v16 + 2 * a3);
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    v24 = v4 >> 5;
    v25 = v4 >> 4;
    v26 = 2 * a3;
    v27 = 4 * v25;
    v28 = v27 + 64;
    v29 = 4 * v24 + 48;
    v30 = -2;
    v31 = v65;
    do
    {
      v32 = *(uint16x8_t *)((char *)v31 + v29 + 16);
      *a4 = *(uint16x8_t *)((char *)v31 + v29);
      a4[1] = v32;
      v33 = *(_OWORD *)((char *)v31 + v28);
      v34 = &a4->i8[v26];
      *(_OWORD *)v34 = *(_OWORD *)((char *)v31 + v28 - 16);
      *((_OWORD *)v34 + 1) = v33;
      v30 += 2;
      v31 = (_OWORD *)((char *)v31 + v27);
      a4 = (uint16x8_t *)((char *)a4 + v26 + v26);
    }
    while (v30 < 6);
  }
  return result;
}

unint64_t sub_1B67FEC6C(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int8x16_t *v14;
  uint64_t v15;
  unint64_t i;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint16x8_t *v20;
  uint64_t v21;
  int16x8_t v22;
  int v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int16x8_t v42;
  int v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t *v49;
  int16x8_t v50;
  int16x8_t *v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t *v54;
  int16x8_t *v55;
  unint64_t v56;
  int64x2_t *v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  BOOL v74;
  _BYTE v75[76];
  int v76;
  _QWORD v77[18];

  v77[17] = *MEMORY[0x1E0C80C00];
  v4 = byte_1B6921758[(int)result];
  v5 = a2 + 8;
  if ((int)result <= 17)
    v6 = a2;
  else
    v6 = a2 + 8;
  if (v4 < 0)
  {
    v8 = 0;
    if ((int)result > 17)
      v5 = a2;
    v9 = a2[8 * (unint64_t)((int)result < 18)];
    v10 = v5[1];
    v11 = v5[2];
    v12 = v5[3];
    if ((int)result >= 18)
      v13 = result - 18;
    else
      v13 = 18 - result;
    v14 = &xmmword_1B6921D80[4 * (uint64_t)v13];
    v7 = 16;
    do
    {
      *(int8x16_t *)&v75[v8 * 16 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, v14[v8]);
      ++v8;
    }
    while (v8 != 4);
  }
  else
  {
    v7 = 32;
  }
  v15 = 0;
  for (i = 0; i < v7; i += 16)
  {
    v17 = &v75[v15 * 16];
    v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  v76 = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      v36 = 0;
      v37 = 2 * v4;
      v38 = 6 * a3;
      v39 = 8 * a3;
      v40 = 4 * a3;
      v41 = 2 * a3;
      v42.i64[0] = 0x20002000200020;
      v42.i64[1] = 0x20002000200020;
      v43 = v4;
      result = (3 * v4);
      do
      {
        v44 = vdupq_n_s16(v43 & 0x1F);
        v45 = vsubq_s16(v42, v44);
        v46 = vdupq_n_s16((v43 + v4) & 0x1F);
        v47 = vsubq_s16(v42, v46);
        v48 = vdupq_n_s16((v43 + v37) & 0x1F);
        v49 = (int16x8_t *)((char *)v77 + 4 * (v43 >> 5) + 4);
        v50 = vdupq_n_s16((v43 + result) & 0x1F);
        v51 = (int16x8_t *)((char *)v77 + 4 * ((v43 + (int)result) >> 5) + 4);
        v52 = vsubq_s16(v42, v48);
        v53 = vsubq_s16(v42, v50);
        v54 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v4) >> 5) + 4);
        v55 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v37) >> 5) + 4);
        v56 = -4;
        v57 = (int64x2_t *)a4;
        do
        {
          v58 = *(int16x8_t *)((char *)v49 - 4);
          v59 = *v49++;
          v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v58, v45), v59, v44), 5uLL);
          v61 = *(int16x8_t *)((char *)v54 - 4);
          v62 = *v54++;
          v63 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v61, v47), v62, v46), 5uLL);
          v64 = *(int16x8_t *)((char *)v55 - 4);
          v65 = *v55++;
          v66 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v64, v52), v65, v48), 5uLL);
          v67 = *(int16x8_t *)((char *)v51 - 4);
          v68 = *v51++;
          v69 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v67, v53), v68, v50), 5uLL);
          v70 = (int64x2_t)vtrn1q_s32(v60, v63);
          v71 = (int64x2_t)vtrn2q_s32(v60, v63);
          v72 = (int64x2_t)vtrn1q_s32(v66, v69);
          v73 = (int64x2_t)vtrn2q_s32(v66, v69);
          *v57 = vzip1q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v41) = vzip1q_s64(v71, v73);
          *(int64x2_t *)((char *)v57 + v40) = vzip2q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v38) = vzip2q_s64(v71, v73);
          v56 += 4;
          v57 = (int64x2_t *)((char *)v57 + v39);
        }
        while (v56 < 0xC);
        v43 += 4 * v4;
        a4 += 16;
        v74 = v36 >= 0xC;
        v36 += 4;
      }
      while (!v74);
    }
    else
    {
      v20 = (uint16x8_t *)(a4 + 32);
      v21 = 16;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      v23 = v4;
      do
      {
        v24 = vdupq_n_s16(v23 & 0x1F);
        v25 = vsubq_s16(v22, v24);
        v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v77 + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)v77 + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-1] = v26;
        result = (unint64_t)&v77[4] + 4 * (v23 >> 5);
        v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 4), v24), 5uLL);
        v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        *v20 = v27;
        v20[1] = v28;
        v23 += v4;
        v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v29 = v4 >> 5;
    v30 = (_OWORD *)(a4 + 32);
    v31 = 4 * v29;
    v32 = (__int128 *)((char *)&v77[6] + v31);
    v33 = 16;
    do
    {
      v34 = *(v32 - 2);
      *(v30 - 2) = *(v32 - 3);
      *(v30 - 1) = v34;
      v35 = *v32;
      *v30 = *(v32 - 1);
      v30[1] = v35;
      v30 = (_OWORD *)((char *)v30 + 2 * a3);
      v32 = (__int128 *)((char *)v32 + v31);
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1B67FEFB8(uint64_t result, uint64_t a2, uint64_t a3, int64x2_t *a4)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t i;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int16x8_t v19;
  int v20;
  uint64_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64x2_t *v34;
  uint64_t v35;
  int64x2_t v36;
  int64x2_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int16x8_t v44;
  int v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t *v51;
  int16x8_t v52;
  int16x8_t *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t *v56;
  int16x8_t *v57;
  unint64_t v58;
  int64x2_t *v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  _BYTE v76[140];
  _DWORD v77[67];
  _QWORD v78[34];

  v78[33] = *MEMORY[0x1E0C80C00];
  v4 = v78;
  v5 = byte_1B6921758[(int)result];
  if ((int)result <= 17)
    v6 = a2;
  else
    v6 = a2 + 256;
  if ((int)result <= 17)
    v7 = a2 + 256;
  else
    v7 = a2;
  if (v5 < 0)
  {
    v9 = word_1B6921880[(int)result - 11];
    v10 = byte_1B6921758[(int)result];
    v11 = v5 * v9 + 128;
    v8 = 32;
    do
    {
      v77[v10] = *(_DWORD *)(v7 + 4 * ((v11 >> 8) - 1));
      v11 += v9;
      v12 = __CFADD__(v10++, 1);
    }
    while (!v12);
  }
  else
  {
    v8 = 64;
  }
  v13 = 0;
  for (i = 0; i < v8; i += 16)
  {
    v15 = &v76[v13];
    v16 = *(_OWORD *)(v6 + v13 + 16);
    v15[9] = *(_OWORD *)(v6 + v13);
    v15[10] = v16;
    v17 = *(_OWORD *)(v6 + v13 + 48);
    v15[11] = *(_OWORD *)(v6 + v13 + 32);
    v15[12] = v17;
    v13 += 64;
  }
  v77[0] = *(_DWORD *)(a2 - 4);
  if ((v5 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      v38 = 0;
      v39 = 2 * v5;
      v40 = 6 * a3;
      v41 = 8 * a3;
      v42 = 4 * a3;
      v43 = 2 * a3;
      v44.i64[0] = 0x20002000200020;
      v44.i64[1] = 0x20002000200020;
      v45 = v5;
      result = (3 * v5);
      do
      {
        v46 = vdupq_n_s16(v45 & 0x1F);
        v47 = vsubq_s16(v44, v46);
        v48 = vdupq_n_s16((v45 + v5) & 0x1F);
        v49 = vsubq_s16(v44, v48);
        v50 = vdupq_n_s16((v45 + v39) & 0x1F);
        v51 = (int16x8_t *)((char *)v78 + 4 * (v45 >> 5) + 4);
        v52 = vdupq_n_s16((v45 + result) & 0x1F);
        v53 = (int16x8_t *)((char *)v78 + 4 * ((v45 + (int)result) >> 5) + 4);
        v54 = vsubq_s16(v44, v50);
        v55 = vsubq_s16(v44, v52);
        v56 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v5) >> 5) + 4);
        v57 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v39) >> 5) + 4);
        v58 = -4;
        v59 = a4;
        do
        {
          v60 = *(int16x8_t *)((char *)v51 - 4);
          v61 = *v51++;
          v62 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v60, v47), v61, v46), 5uLL);
          v63 = *(int16x8_t *)((char *)v56 - 4);
          v64 = *v56++;
          v65 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v63, v49), v64, v48), 5uLL);
          v66 = *(int16x8_t *)((char *)v57 - 4);
          v67 = *v57++;
          v68 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v66, v54), v67, v50), 5uLL);
          v69 = *(int16x8_t *)((char *)v53 - 4);
          v70 = *v53++;
          v71 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v69, v55), v70, v52), 5uLL);
          v72 = (int64x2_t)vtrn1q_s32(v62, v65);
          v73 = (int64x2_t)vtrn2q_s32(v62, v65);
          v74 = (int64x2_t)vtrn1q_s32(v68, v71);
          v75 = (int64x2_t)vtrn2q_s32(v68, v71);
          *v59 = vzip1q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v43) = vzip1q_s64(v73, v75);
          *(int64x2_t *)((char *)v59 + v42) = vzip2q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v40) = vzip2q_s64(v73, v75);
          v58 += 4;
          v59 = (int64x2_t *)((char *)v59 + v41);
        }
        while (v58 < 0x1C);
        v45 += 4 * v5;
        ++a4;
        v12 = v38 >= 0x1C;
        v38 += 4;
      }
      while (!v12);
    }
    else
    {
      v18 = 0;
      v19.i64[0] = 0x20002000200020;
      v19.i64[1] = 0x20002000200020;
      v20 = v5;
      do
      {
        v21 = 0;
        v22 = vdupq_n_s16(v20 & 0x1F);
        v23 = vsubq_s16(v19, v22);
        v24 = (uint64_t)a4->i64 + 2 * v18 * a3;
        v25 = 1;
        do
        {
          v26 = v25;
          v27 = &v78[v21];
          v28 = 2 * v21;
          v29 = (char *)v27 + 4 * ((uint64_t)v20 >> 5);
          *(uint16x8_t *)(v24 + v28) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v29, v23), *(int16x8_t *)(v29 + 4), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x10)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 1), v23), *(int16x8_t *)(v29 + 20), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x20)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 2), v23), *(int16x8_t *)(v29 + 36), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x30)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 3), v23), *(int16x8_t *)(v29 + 52), v22), 5uLL);
          v21 = 8;
          v25 = 0;
        }
        while ((v26 & 1) != 0);
        ++v18;
        v20 += v5;
      }
      while (v18 != 32);
    }
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t)v5 >> 5;
    do
    {
      v32 = 0;
      v4 = (_QWORD *)((char *)v4 + 4 * v31);
      v33 = 1;
      do
      {
        v34 = (int64x2_t *)&v4[v32];
        v35 = 2 * v32;
        v36 = v34[1];
        *(int64x2_t *)((char *)a4 + v35) = *v34;
        *(int64x2_t *)((char *)a4 + (v35 | 0x10)) = v36;
        v37 = v34[3];
        *(int64x2_t *)((char *)a4 + (v35 | 0x20)) = v34[2];
        LOBYTE(v34) = v33;
        *(int64x2_t *)((char *)a4 + (v35 | 0x30)) = v37;
        v32 = 8;
        v33 = 0;
      }
      while ((v34 & 1) != 0);
      a4 = (int64x2_t *)((char *)a4 + 2 * a3);
      ++v30;
    }
    while (v30 != 32);
  }
  return result;
}

__n128 sub_1B67FF32C(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 result;

  result = a2[2];
  *a4 = result;
  *(__n128 *)((char *)a4 + 2 * a3) = result;
  *(__n128 *)((char *)a4 + 4 * a3) = result;
  *(__n128 *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1B67FF354(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  _OWORD *v7;

  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = -2;
  do
  {
    *a4 = v4;
    a4[1] = v5;
    v7 = (_OWORD *)((char *)a4 + 2 * a3);
    *v7 = v4;
    v7[1] = v5;
    v6 += 2;
    a4 = (_OWORD *)((char *)a4 + 4 * a3);
  }
  while (v6 < 6);
}

void sub_1B67FF384(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 16;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1B67FF3B0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = a2[16];
  v5 = a2[17];
  v6 = a2[18];
  v7 = a2[19];
  v8 = a2[20];
  v9 = a2[21];
  v10 = (_OWORD *)(a4 + 64);
  v11 = 32;
  v12 = a2[22];
  v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

float32x4_t sub_1B67FF3EC(uint64_t a1, const float *a2, uint64_t a3, float32x4_t *a4)
{
  const float *v4;
  const float *v5;
  float32x4_t v6;
  float32x4_t v7;
  const float *v8;
  float32x4_t v9;
  float32x4_t result;

  v4 = a2 + 2;
  v5 = a2;
  v6 = vld1q_dup_f32(v5++);
  *a4 = v6;
  v7 = vld1q_dup_f32(v5);
  *(float32x4_t *)((char *)a4 + 2 * a3) = v7;
  v8 = a2 + 3;
  v9 = vld1q_dup_f32(v4);
  *(float32x4_t *)((char *)a4 + 4 * a3) = v9;
  result = vld1q_dup_f32(v8);
  *(float32x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

float32x4_t sub_1B67FF42C(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  const float *v4;
  unint64_t v5;
  const float *v6;
  float32x4_t result;
  float32x4_t v8;
  float32x4_t *v9;

  v4 = (const float *)(a2 + 4);
  v5 = -2;
  do
  {
    v6 = v4 - 1;
    result = vld1q_dup_f32(v6);
    v8 = vld1q_dup_f32(v4);
    *a4 = result;
    a4[1] = result;
    v9 = (float32x4_t *)((char *)a4 + 2 * a3);
    *v9 = v8;
    v9[1] = v8;
    v5 += 2;
    v4 += 2;
    a4 = (float32x4_t *)((char *)a4 + 4 * a3);
  }
  while (v5 < 6);
  return result;
}

float32x4_t sub_1B67FF46C(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  float32x4_t *v5;
  const float *v6;
  float32x4_t result;

  v4 = 0;
  v5 = a4 + 2;
  do
  {
    v6 = (const float *)(a2 + v4);
    result = vld1q_dup_f32(v6);
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v4 += 4;
    v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

float32x4_t sub_1B67FF49C(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  float32x4_t *v5;
  const float *v6;
  float32x4_t result;

  v4 = 0;
  v5 = a4 + 4;
  do
  {
    v6 = (const float *)(a2 + v4);
    result = vld1q_dup_f32(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 4;
    v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

uint64_t sub_1B67FF4D4(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  int v7;
  int16x8_t v8;
  int v9;
  int v10;
  double v11;
  int16x8_t v12;
  int v13;
  int v14;
  double v15;
  int16x8_t v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  _QWORD v30[6];

  v30[5] = *MEMORY[0x1E0C80C00];
  v30[0] = a7;
  v30[1] = vext_s8(a6, a7, 6uLL);
  v30[2] = vext_s8(a6, a7, 4uLL);
  v30[3] = vext_s8(a6, a7, 2uLL);
  v30[4] = a6;
  v7 = (int)result >> 5;
  if ((int)result >> 5 < 0)
    v7 = -v7;
  v8 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v30[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  v9 = a2 + result;
  v10 = (a2 + (int)result) >> 5;
  if (v10 < 0)
    v10 = -v10;
  v11 = COERCE_DOUBLE(vrshrn_n_s16(v8, 5uLL));
  v12 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v30[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu)));
  v13 = v9 + a2;
  v14 = v13 >> 5;
  if (v13 >> 5 < 0)
    v14 = -v14;
  v15 = COERCE_DOUBLE(vrshrn_n_s16(v12, 5uLL));
  v16 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v14 - 1], (uint8x8_t)vdup_n_s8(v13 & 0x1F)), (uint8x8_t)v30[v14], (uint8x8_t)vdup_n_s8(32 - (v13 & 0x1Fu)));
  v17 = v13 + a2;
  v18 = v17 >> 5;
  if (v17 >> 5 < 0)
    v18 = -v18;
  v19 = COERCE_DOUBLE(vrshrn_n_s16(v16, 5uLL));
  v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v18 - 1], (uint8x8_t)vdup_n_s8(v17 & 0x1F)), (uint8x8_t)v30[v18], (uint8x8_t)vdup_n_s8(32 - (v17 & 0x1Fu))), 5uLL));
  v21 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  v22 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  v23 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  v24 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  v25 = COERCE_DOUBLE(vzip1_s32(v21, v23));
  v26 = COERCE_DOUBLE(vzip2_s32(v21, v23));
  v27 = COERCE_DOUBLE(vzip1_s32(v22, v24));
  v28 = COERCE_DOUBLE(vzip2_s32(v22, v24));
  if (a3)
  {
    v20 = v28;
    v19 = v26;
    v15 = v27;
    v11 = v25;
  }
  *a5 = v11;
  *(double *)((char *)a5 + a4) = v15;
  v29 = (double *)((char *)a5 + a4 + a4);
  *v29 = v19;
  *(double *)((char *)v29 + a4) = v20;
  return result;
}

uint64_t sub_1B67FF660(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  _QWORD v21[6];

  v21[5] = *MEMORY[0x1E0C80C00];
  v21[0] = a6;
  v21[1] = vext_s8(a6, a7, 2uLL);
  v21[2] = vext_s8(a6, a7, 4uLL);
  v21[3] = vext_s8(a6, a7, 6uLL);
  v21[4] = a7;
  v7 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v21[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  v8 = a2 + result + a2;
  v9 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[((a2 + result) >> 5) + 1], (uint8x8_t)vdup_n_s8((a2 + result) & 0x1F)), (uint8x8_t)v21[(a2 + result) >> 5], (uint8x8_t)vdup_n_s8(32 - ((a2 + result) & 0x1F))), 5uLL));
  v10 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[(v8 >> 5) + 1], (uint8x8_t)vdup_n_s8(v8 & 0x1F)), (uint8x8_t)v21[v8 >> 5], (uint8x8_t)vdup_n_s8(32 - (v8 & 0x1F))), 5uLL));
  v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[((v8 + a2) >> 5) + 1], (uint8x8_t)vdup_n_s8((v8 + a2) & 0x1F)), (uint8x8_t)v21[(v8 + a2) >> 5], (uint8x8_t)vdup_n_s8(32 - ((v8 + a2) & 0x1F))), 5uLL));
  v12 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v7, *(int16x4_t *)&v9);
  v13 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v7, *(int16x4_t *)&v9);
  v14 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v10, *(int16x4_t *)&v11);
  v15 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v10, *(int16x4_t *)&v11);
  v16 = COERCE_DOUBLE(vzip1_s32(v12, v14));
  v17 = COERCE_DOUBLE(vzip2_s32(v12, v14));
  v18 = COERCE_DOUBLE(vzip1_s32(v13, v15));
  v19 = COERCE_DOUBLE(vzip2_s32(v13, v15));
  if (a3)
  {
    v11 = v19;
    v10 = v17;
    v9 = v18;
    v7 = v16;
  }
  *a5 = v7;
  *(double *)((char *)a5 + a4) = v9;
  v20 = (double *)((char *)a5 + a4 + a4);
  *v20 = v10;
  *(double *)((char *)v20 + a4) = v11;
  return result;
}

uint64_t sub_1B67FF7CC(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  int v28;
  double v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double *v54;
  double *v55;
  double *v56;
  double *v57;
  double *v58;
  _QWORD v59[10];

  v59[9] = *MEMORY[0x1E0C80C00];
  v59[0] = a7;
  v59[1] = vext_s8(a6, a7, 7uLL);
  v59[2] = vext_s8(a6, a7, 6uLL);
  v59[3] = vext_s8(a6, a7, 5uLL);
  v59[4] = vext_s8(a6, a7, 4uLL);
  v59[5] = vext_s8(a6, a7, 3uLL);
  v59[6] = vext_s8(a6, a7, 2uLL);
  v59[7] = vext_s8(a6, a7, 1uLL);
  v59[8] = a6;
  if ((int)result >> 5 >= 0)
    v7 = (int)result >> 5;
  else
    v7 = -((int)result >> 5);
  v8 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v59[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  v9 = a2 + result;
  v10 = (a2 + (int)result) >> 5;
  if (v10 < 0)
    v10 = -v10;
  v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v59[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu))), 5uLL));
  v12 = v9 + a2;
  v13 = v12 >> 5;
  if (v12 >> 5 < 0)
    v13 = -v13;
  v14 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v13 - 1], (uint8x8_t)vdup_n_s8(v12 & 0x1F)), (uint8x8_t)v59[v13], (uint8x8_t)vdup_n_s8(32 - (v12 & 0x1Fu))), 5uLL));
  v15 = v12 + a2;
  v16 = v15 >> 5;
  if (v15 >> 5 < 0)
    v16 = -v16;
  v17 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v16 - 1], (uint8x8_t)vdup_n_s8(v15 & 0x1F)), (uint8x8_t)v59[v16], (uint8x8_t)vdup_n_s8(32 - (v15 & 0x1Fu))), 5uLL));
  v18 = v15 + a2;
  v19 = v18 >> 5;
  if (v18 >> 5 < 0)
    v19 = -v19;
  v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v19 - 1], (uint8x8_t)vdup_n_s8(v18 & 0x1F)), (uint8x8_t)v59[v19], (uint8x8_t)vdup_n_s8(32 - (v18 & 0x1Fu))), 5uLL));
  v21 = v18 + a2;
  v22 = v21 >> 5;
  if (v21 >> 5 < 0)
    v22 = -v22;
  v23 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v22 - 1], (uint8x8_t)vdup_n_s8(v21 & 0x1F)), (uint8x8_t)v59[v22], (uint8x8_t)vdup_n_s8(32 - (v21 & 0x1Fu))), 5uLL));
  v24 = v21 + a2;
  v25 = v24 >> 5;
  if (v24 >> 5 < 0)
    v25 = -v25;
  v26 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v25 - 1], (uint8x8_t)vdup_n_s8(v24 & 0x1F)), (uint8x8_t)v59[v25], (uint8x8_t)vdup_n_s8(32 - (v24 & 0x1Fu))), 5uLL));
  v27 = v24 + a2;
  v28 = v27 >> 5;
  if (v27 >> 5 < 0)
    v28 = -v28;
  v29 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v28 - 1], (uint8x8_t)vdup_n_s8(v27 & 0x1F)), (uint8x8_t)v59[v28], (uint8x8_t)vdup_n_s8(32 - (v27 & 0x1Fu))), 5uLL));
  v30 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  v31 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  v32 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  v33 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  v34 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  v35 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  v36 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  v37 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  v38 = (int32x2_t)vtrn1_s16(v30, v32);
  v39 = (int32x2_t)vtrn2_s16(v30, v32);
  v40 = (int32x2_t)vtrn1_s16(v31, v33);
  v41 = (int32x2_t)vtrn2_s16(v31, v33);
  v42 = (int32x2_t)vtrn1_s16(v34, v36);
  v43 = (int32x2_t)vtrn2_s16(v34, v36);
  v44 = (int32x2_t)vtrn1_s16(v35, v37);
  v45 = (int32x2_t)vtrn2_s16(v35, v37);
  v46 = COERCE_DOUBLE(vzip1_s32(v38, v42));
  v47 = COERCE_DOUBLE(vzip2_s32(v38, v42));
  v48 = COERCE_DOUBLE(vzip1_s32(v40, v44));
  v49 = COERCE_DOUBLE(vzip2_s32(v40, v44));
  v50 = COERCE_DOUBLE(vzip1_s32(v39, v43));
  v51 = COERCE_DOUBLE(vzip2_s32(v39, v43));
  v52 = COERCE_DOUBLE(vzip1_s32(v41, v45));
  v53 = COERCE_DOUBLE(vzip2_s32(v41, v45));
  if (a3)
  {
    v29 = v53;
    v26 = v51;
    v23 = v49;
    v20 = v47;
    v17 = v52;
    v14 = v50;
    v11 = v48;
    v8 = v46;
  }
  *a5 = v8;
  *(double *)((char *)a5 + a4) = v11;
  v54 = (double *)((char *)a5 + a4 + a4);
  *v54 = v14;
  v55 = (double *)((char *)v54 + a4);
  *v55 = v17;
  v56 = (double *)((char *)v55 + a4);
  *v56 = v20;
  v57 = (double *)((char *)v56 + a4);
  *v57 = v23;
  v58 = (double *)((char *)v57 + a4);
  *v58 = v26;
  *(double *)((char *)v58 + a4) = v29;
  return result;
}

uint64_t sub_1B67FFAC4(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  double v7;
  unsigned int v8;
  uint8x8_t v9;
  uint8x8_t v10;
  double v11;
  uint16x8_t v12;
  unsigned int v13;
  double v14;
  double v15;
  unsigned int v16;
  int16x8_t v17;
  unsigned int v18;
  uint8x8_t v19;
  uint8x8_t v20;
  double v21;
  uint16x8_t v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double *v51;
  double *v52;
  double *v53;
  double *v54;
  double *v55;
  _QWORD v56[10];

  v56[9] = *MEMORY[0x1E0C80C00];
  v56[0] = a6;
  v56[1] = vext_s8(a6, a7, 1uLL);
  v56[2] = vext_s8(a6, a7, 2uLL);
  v56[3] = vext_s8(a6, a7, 3uLL);
  v56[4] = vext_s8(a6, a7, 4uLL);
  v56[5] = vext_s8(a6, a7, 5uLL);
  v56[6] = vext_s8(a6, a7, 6uLL);
  v56[7] = vext_s8(a6, a7, 7uLL);
  v56[8] = a7;
  v7 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v56[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  v8 = a2 + result + a2;
  v9 = (uint8x8_t)v56[v8 >> 5];
  v10 = (uint8x8_t)vdup_n_s8(32 - (v8 & 0x1F));
  v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[((a2 + result) >> 5) + 1], (uint8x8_t)vdup_n_s8((a2 + result) & 0x1F)), (uint8x8_t)v56[(a2 + result) >> 5], (uint8x8_t)vdup_n_s8(32 - ((a2 + result) & 0x1F))), 5uLL));
  v12 = vmull_u8((uint8x8_t)v56[(v8 >> 5) + 1], (uint8x8_t)vdup_n_s8(v8 & 0x1F));
  v13 = v8 + a2;
  v14 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(v12, v9, v10), 5uLL));
  v15 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(v13 >> 5) + 1], (uint8x8_t)vdup_n_s8(v13 & 0x1F)), (uint8x8_t)v56[v13 >> 5], (uint8x8_t)vdup_n_s8(32 - (v13 & 0x1F))), 5uLL));
  v16 = v13 + a2;
  v17 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(v16 >> 5) + 1], (uint8x8_t)vdup_n_s8(v16 & 0x1F)), (uint8x8_t)v56[v16 >> 5], (uint8x8_t)vdup_n_s8(32 - (v16 & 0x1F)));
  v18 = v16 + a2;
  v19 = (uint8x8_t)v56[v18 >> 5];
  v20 = (uint8x8_t)vdup_n_s8(32 - (v18 & 0x1F));
  v21 = COERCE_DOUBLE(vrshrn_n_s16(v17, 5uLL));
  v22 = vmull_u8((uint8x8_t)v56[(v18 >> 5) + 1], (uint8x8_t)vdup_n_s8(v18 & 0x1F));
  v23 = v18 + a2;
  v24 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(v22, v19, v20), 5uLL));
  v25 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(v23 >> 5) + 1], (uint8x8_t)vdup_n_s8(v23 & 0x1F)), (uint8x8_t)v56[v23 >> 5], (uint8x8_t)vdup_n_s8(32 - (v23 & 0x1F))), 5uLL));
  v26 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[((v23 + a2) >> 5) + 1], (uint8x8_t)vdup_n_s8((v23 + a2) & 0x1F)), (uint8x8_t)v56[(v23 + a2) >> 5], (uint8x8_t)vdup_n_s8(32 - ((v23 + a2) & 0x1F))), 5uLL));
  v27 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v7, *(int8x8_t *)&v11);
  v28 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v7, *(int8x8_t *)&v11);
  v29 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v15);
  v30 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v15);
  v31 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v24);
  v32 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v24);
  v33 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  v34 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  v35 = (int32x2_t)vtrn1_s16(v27, v29);
  v36 = (int32x2_t)vtrn2_s16(v27, v29);
  v37 = (int32x2_t)vtrn1_s16(v28, v30);
  v38 = (int32x2_t)vtrn2_s16(v28, v30);
  v39 = (int32x2_t)vtrn1_s16(v31, v33);
  v40 = (int32x2_t)vtrn2_s16(v31, v33);
  v41 = (int32x2_t)vtrn1_s16(v32, v34);
  v42 = (int32x2_t)vtrn2_s16(v32, v34);
  v43 = COERCE_DOUBLE(vzip1_s32(v35, v39));
  v44 = COERCE_DOUBLE(vzip2_s32(v35, v39));
  v45 = COERCE_DOUBLE(vzip1_s32(v37, v41));
  v46 = COERCE_DOUBLE(vzip2_s32(v37, v41));
  v47 = COERCE_DOUBLE(vzip1_s32(v36, v40));
  v48 = COERCE_DOUBLE(vzip2_s32(v36, v40));
  v49 = COERCE_DOUBLE(vzip1_s32(v38, v42));
  v50 = COERCE_DOUBLE(vzip2_s32(v38, v42));
  if (a3)
  {
    v26 = v50;
    v25 = v48;
    v24 = v46;
    v21 = v44;
    v15 = v49;
    v14 = v47;
    v11 = v45;
    v7 = v43;
  }
  *a5 = v7;
  *(double *)((char *)a5 + a4) = v11;
  v51 = (double *)((char *)a5 + a4 + a4);
  *v51 = v14;
  v52 = (double *)((char *)v51 + a4);
  *v52 = v15;
  v53 = (double *)((char *)v52 + a4);
  *v53 = v21;
  v54 = (double *)((char *)v53 + a4);
  *v54 = v24;
  v55 = (double *)((char *)v54 + a4);
  *v55 = v25;
  *(double *)((char *)v55 + a4) = v26;
  return result;
}

uint64_t sub_1B67FFD7C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char *, int, int, uint64_t, uint64_t, uint64_t, uint64_t, int);
  uint64_t (*v10)(uint64_t, char *, int, int, uint64_t, uint64_t, uint64_t, uint64_t, int);
  BOOL v11;
  _QWORD *(*v12)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, int, int, int, uint64_t, uint64_t, unsigned int *);
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  void **v17;
  size_t v18;

  v8 = result;
  *(_WORD *)(result + 18) = 0;
  *(_QWORD *)(result + 20) = -1;
  *(_QWORD *)(result + 28) = -1;
  *(_QWORD *)(result + 36) = 0x4000000040;
  *(_DWORD *)(result + 44) = a4;
  *(_DWORD *)(result + 48) = a5;
  *(_QWORD *)(result + 52) = 0x40FFC00040FFC0;
  *(_BYTE *)(result + 146) = a6;
  *(_BYTE *)(result + 145) = a7;
  *(_BYTE *)(result + 144) = a8;
  *(_DWORD *)(result + 148) = 5;
  *(_QWORD *)result = result + 64;
  *(_QWORD *)(result + 8) = result + 104;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 216) = a2;
  *(_QWORD *)(result + 224) = a3;
  v9 = sub_1B67FFF4C;
  *(_QWORD *)(result + 344) = sub_1B67FFF4C;
  *(_QWORD *)(result + 352) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 79088) + 244))
    v10 = sub_1B6800110;
  else
    v10 = sub_1B67FFF4C;
  *(_QWORD *)(result + 328) = v10;
  *(_QWORD *)(result + 336) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 79088) + 245))
    v9 = sub_1B6800298;
  *(_QWORD *)(result + 312) = v9;
  *(_QWORD *)(result + 320) = 0;
  v11 = *(_BYTE *)(*(_QWORD *)(a2 + 79088) + 54) == 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 79088) + 54))
    v12 = sub_1B6800AE0;
  else
    v12 = sub_1B68004AC;
  *(_QWORD *)(result + 440) = v12;
  *(_QWORD *)(result + 448) = 0;
  v13 = sub_1B6800D9C;
  if (!v11)
    v13 = sub_1B68014E4;
  *(_QWORD *)(result + 456) = v13;
  *(_QWORD *)(result + 464) = 0;
  *(_BYTE *)(result + 16) = 0;
  v14 = *(_QWORD *)(a2 + 1368);
  v15 = *(char *)(v14 + 2000);
  *(_BYTE *)(result + 17) = *(_BYTE *)(v14 + 2000);
  v16 = *(unsigned __int8 *)(v14 + 2013);
  if (v15 == 8)
  {
    v17 = (void **)(result + 168);
    v18 = (v16 * v16);
  }
  else
  {
    if (v15 > 15)
    {
LABEL_18:
      if (*(_BYTE *)(v8 + 17) == 8)
      {
        *(_QWORD *)(v8 + 232) = sub_1B688C9BC;
        *(_QWORD *)(v8 + 240) = sub_1B688CA1C;
        *(_QWORD *)(v8 + 248) = sub_1B688CAA0;
        *(_QWORD *)(v8 + 256) = sub_1B688CB24;
        *(_QWORD *)(v8 + 264) = sub_1B688CB78;
        *(_QWORD *)(v8 + 472) = sub_1B688CBCC;
        *(_QWORD *)(v8 + 480) = sub_1B688CC70;
        *(_QWORD *)(v8 + 488) = sub_1B688CD38;
        *(_QWORD *)(v8 + 496) = sub_1B688CE58;
      }
      return result;
    }
    v17 = (void **)(result + 168);
    v18 = (2 * v16 * v16);
  }
  result = sub_1B67C2364(v17, v18, 0x10uLL);
  if (!(_DWORD)result)
  {
    result = sub_1B67C2364((void **)(v8 + 184), v18, 0x10uLL);
    if (!(_DWORD)result)
    {
      result = sub_1B67C2364((void **)(v8 + 200), v18, 0x10uLL);
      if (!(_DWORD)result)
        goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_1B67FFF4C(uint64_t a1, char *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  unsigned int *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  __int16 *v35;

  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + ((uint64_t)a9 << 8) + 16 * a2[a9] + 3544);
  v16 = *(_QWORD *)(v15 + 112);
  v17 = -3 - a5;
  v18 = *(_DWORD *)(v15 + 276) + 2;
  v19 = &a2[4 * a9];
  v21 = *((__int16 *)v19 + 2);
  v20 = (unsigned int *)(v19 + 4);
  v22 = a3 + (v21 >> 2);
  if (v22 < v18)
    v18 = v22;
  if (v22 <= v17)
    v23 = v17;
  else
    v23 = v18;
  v24 = -3 - a6;
  v25 = *(_DWORD *)(v15 + 280) + 2;
  v26 = a4 + (*((__int16 *)v20 + 1) >> 2);
  if (v26 < v25)
    v25 = a4 + (*((__int16 *)v20 + 1) >> 2);
  if (v26 <= v24)
    v27 = v24;
  else
    v27 = v25;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 24))(v15, v23, v27, 0);
  v29 = *(_QWORD *)(a1 + 216);
  if (!*(_BYTE *)(v29 + 32 * a9 + 2 * a2[a9] + 79096))
    return (*(uint64_t (**)(uint64_t))(v29
                                              + (((unint64_t)((*v20 & 3) != 0) << 6) | ((unint64_t)((*v20 & 0x30000) != 0) << 7))
                                              + 8 * byte_1B6920C45[((int)a5 >> 2) - 1]
                                              + 2104))(a6);
  v30 = *(unsigned int *)(v29 + 632);
  v31 = v29 + 6 * a2[1];
  v32 = v29 + 6 * *a2;
  v33 = (__int16 *)(v32 + 736);
  if (a9)
    v33 = (__int16 *)(v31 + 928);
  v34 = (__int16 *)(v31 + 832);
  v35 = (__int16 *)(v32 + 640);
  if (a9)
    v35 = v34;
  return sub_1B6801CC0(a1, a5, a6, v30, *v33, *v35, *v20, v16, v28, a7, a8);
}

uint64_t sub_1B6800110(uint64_t a1, char *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  __int16 *v32;

  v9 = *(_QWORD *)(a1 + 216);
  v10 = a2[a9];
  v11 = *(_QWORD *)(v9 + ((uint64_t)a9 << 8) + 16 * v10 + 3544);
  v12 = -3 - a5;
  v13 = *(_DWORD *)(v11 + 276) + 2;
  v14 = &a2[4 * a9];
  v15 = a3 + (*((__int16 *)v14 + 2) >> 2);
  if (v15 < v13)
    v13 = a3 + (*((__int16 *)v14 + 2) >> 2);
  if (v15 > v12)
    v12 = v13;
  v16 = -3 - a6;
  v17 = *(_DWORD *)(v11 + 280) + 2;
  v18 = *((__int16 *)v14 + 3);
  v19 = a4 + (v18 >> 2);
  if (v19 < v17)
    v17 = a4 + (v18 >> 2);
  if (v19 > v16)
    v16 = v17;
  v20 = *((_DWORD *)v14 + 1);
  v21 = v11 + 8 * (HIWORD(v20) & 2 | (v20 >> 1) & 1);
  v22 = v16;
  v23 = *(_QWORD *)(v21 + 1000);
  v24 = *(_QWORD *)(v21 + 968) + ((v23 * v22 + v12) << *(_BYTE *)(v11 + 1036));
  v25 = 2 * (v20 & 3);
  v26 = 2 * (v18 & 3);
  if (!*(_BYTE *)(v9 + 32 * a9 + 2 * v10 + 79096))
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + ((v26 & 2 | (v25 >> 1) & 1) << 6) + 8 * byte_1B6920C45[((int)a5 >> 2) - 1] + 2104))(a6, v25 | ((unint64_t)(v18 & 3) << 17), v23, v24, a7, a8);
  v27 = *(unsigned int *)(v9 + 632);
  v28 = v9 + 6 * a2[1];
  v29 = v9 + 6 * *a2;
  v30 = (__int16 *)(v29 + 736);
  if (a9)
    v30 = (__int16 *)(v28 + 928);
  v31 = *v30;
  v32 = (__int16 *)(v28 + 832);
  if (!a9)
    v32 = (__int16 *)(v29 + 640);
  return sub_1B6801CC0(a1, a5, a6, v27, v31, *v32, v25 | ((unint64_t)v26 << 16), v23, v24, a7, a8);
}

uint64_t sub_1B6800298(uint64_t a1, char *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  char *v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v9 = &a2[4 * a9];
  v10 = *((unsigned __int16 *)v9 + 2);
  v11 = *((unsigned __int16 *)v9 + 3);
  if (((v10 | v11) & 1) == 0)
    return sub_1B6800110(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(a1 + 216);
  v14 = v10 & 3;
  v15 = v11 & 3;
  v16 = a2[a9];
  v17 = *(_QWORD *)(v13 + ((uint64_t)a9 << 8) + 16 * v16 + 3544);
  v18 = a3 + ((__int16)v10 >> 2);
  v19 = a4 + ((__int16)v11 >> 2);
  v20 = *(_DWORD *)(v17 + 276) + 2;
  if (v19 >= *(_DWORD *)(v17 + 280) + 2)
    v21 = *(_DWORD *)(v17 + 280) + 2;
  else
    v21 = v19;
  if (v19 <= -3 - (int)a6)
    v21 = -3 - a6;
  if (v14 == 3)
    ++v18;
  if (v18 < v20)
    v20 = v18;
  if (v18 <= -3 - (int)a5)
    v22 = -3 - a5;
  else
    v22 = v20;
  v23 = byte_1B692201C[2 * (v15 | (4 * v14))];
  v24 = *(_QWORD *)(v17 + 1000 + 8 * v23);
  v25 = *(_QWORD *)(v17 + 968 + 8 * v23) + ((v24 * v21 + v22) << *(_BYTE *)(v17 + 1036));
  v26 = __clz(__rbit32(a5));
  if (*(_BYTE *)(v13 + 32 * a9 + 2 * v16 + 79096))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * v26 + 256))(a6, v24, v25);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * v26 + 216))(a6, v24, v25);
}

_QWORD *sub_1B68004AC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  void (*v29)(_QWORD);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(_QWORD);
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  __int32 v83;
  int v84;
  int v86;
  int v87;
  int v88;
  uint64_t *v89;
  void (**v90)(_QWORD);
  __int16 v91;
  int v92;
  int32x2_t v93;
  uint64_t v94;

  v11 = result;
  v12 = 0;
  v94 = *MEMORY[0x1E0C80C00];
  v13 = a6;
  v14 = *result + 4 * a6;
  v15 = *(_WORD *)(v14 + 4);
  v16 = *(_WORD *)(v14 + 6);
  v17 = a8 != 1;
  v82 = *((unsigned __int8 *)result + a8 + 144);
  v18 = *(_WORD *)(*result + 36);
  *(_BYTE *)(result[1] + a6) = *(_BYTE *)(*result + a6);
  v19 = result[1];
  *(_DWORD *)(v19 + 32) = 0;
  *(_OWORD *)(v19 + 16) = xmmword_1B6917860;
  v91 = v18;
  *(_WORD *)(v19 + 36) = v18;
  v20 = &result[2 * a8];
  v89 = v20 + 40;
  v90 = (void (**)(_QWORD))(v20 + 39);
  v87 = a7 >> 16;
  v88 = (__int16)a7;
  v21 = (char *)&unk_1B6921FD9 + 10 * a8 + 2 * v17 + 1;
  do
  {
    *(_WORD *)(v11[1] + 4 * v13 + 4) = v15 + *(v21 - 1);
    *(_WORD *)(v11[1] + 4 * v13 + 6) = v16 + *v21;
    v22 = v11[1];
    if (!v17
      || *((_BYTE *)v11 + 16)
      || ((v23 = *(_DWORD *)(v22 + 4 * v13 + 4), v24 = *((_DWORD *)v11 + 13), (__int16)v23 <= v24 >> 16)
        ? (v25 = (__int16)v23 < (__int16)v24)
        : (v25 = 1),
          !v25
       && ((v26 = *((_DWORD *)v11 + 14), v27 = v23 >> 16, v27 >= (__int16)v26) ? (v28 = v27 <= v26 >> 16) : (v28 = 0),
           v28)))
    {
      *(_DWORD *)(v22 + 32) = 0;
      *(_OWORD *)(v22 + 16) = xmmword_1B6917860;
      *(_WORD *)(v22 + 36) = v91;
      v29 = *v90;
      v30 = (_QWORD *)((char *)v11 + (*v89 >> 1));
      if ((*v89 & 1) != 0)
        v29 = *(void (**)(_QWORD))(*v30 + v29);
      v29(v30);
      result = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a11 + 4))(*a11, a11[1], *((_QWORD *)a11 + 1), *((_QWORD *)a11 + 2), a10, *((_QWORD *)a11 + 3));
      v31 = v11[1];
      *(_QWORD *)(v31 + 16) = result;
      v32 = v31 + 4 * v13;
      v34 = *(__int16 *)(v32 + 4);
      v33 = v32 + 4;
      v35 = v34 - v88;
      v36 = v34 - v88 + 64;
      if (v36 >= 0x80)
      {
        if (v35 >= 0)
          v38 = v35;
        else
          v38 = -v35;
        v37 = 63 - 2 * __clz((v35 < 1) | (2 * v38));
      }
      else
      {
        v37 = byte_1B692358C[v36];
      }
      v39 = *(__int16 *)(v33 + 2) - v87;
      if ((v39 + 64) >= 0x80)
      {
        if (v39 >= 0)
          v41 = *(__int16 *)(v33 + 2) - v87;
        else
          v41 = v87 - *(__int16 *)(v33 + 2);
        v40 = 63 - 2 * __clz((v39 < 1) | (2 * v41));
      }
      else
      {
        v40 = byte_1B692358C[v39 + 64];
      }
      v42 = v40 + v37;
      *(_DWORD *)(v31 + 32) = v42;
      v43 = ((v42 * *(unsigned __int16 *)(v11[28] + 2 * *(__int16 *)(v31 + 36) + 8)) >> (8
                                                                                         * (*(_WORD *)(v31 + 36) == 0)))
          + (unint64_t)result;
      *(_QWORD *)(v31 + 24) = v43;
      v44 = *v11;
      if (v43 < *(_QWORD *)(*v11 + 24))
      {
        v45 = (_BYTE *)(v44 + v13);
        *v45 = *(_BYTE *)(v31 + v13);
        *(_DWORD *)(v44 + 4 * v13 + 4) = *(_DWORD *)v33;
        v45[12] = *(_BYTE *)(v31 + v13 + 12);
        *(_DWORD *)(v44 + 32) = *(_DWORD *)(v31 + 32);
        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v31 + 16);
        v12 = v17;
      }
    }
    v21 += 2;
    ++v17;
  }
  while (v17 != 5);
  if (v12)
  {
    v46 = 0;
    v47 = *v11 + 4 * v13;
    v48 = *(_WORD *)(v47 + 4);
    v49 = *(_WORD *)(v47 + 6);
    do
    {
      *(&v92 + v46) = byte_1B6921FED[3 * v12 + v46];
      ++v46;
    }
    while (v46 != 3);
    v50 = v11[1];
    *(_DWORD *)(v50 + 32) = 0;
    *(_OWORD *)(v50 + 16) = xmmword_1B6917860;
    *(_WORD *)(v50 + 36) = v91;
    if (v82)
    {
      v84 = 0;
      v51 = 3;
      v52 = (char *)&unk_1B6921FD9 + 10 * a8;
      do
      {
        v53 = 0;
        v83 = v12;
        v54 = 4 * v51;
        v86 = -1;
        do
        {
          v55 = *(int *)((char *)&v92 + v53);
          v56 = &v52[2 * v55];
          *(_WORD *)(v11[1] + 4 * v13 + 4) = v48 + *v56;
          *(_WORD *)(v11[1] + 4 * v13 + 6) = v49 + v56[1];
          v57 = v11[1];
          if (*((_BYTE *)v11 + 16)
            || ((v67 = *(_DWORD *)(v57 + 4 * v13 + 4), v68 = *((_DWORD *)v11 + 13), (__int16)v67 <= v68 >> 16)
              ? (v69 = (__int16)v67 < (__int16)v68)
              : (v69 = 1),
                !v69
             && ((v70 = *((_DWORD *)v11 + 14), v71 = v67 >> 16, v71 >= (__int16)v70)
               ? (v72 = v71 <= v70 >> 16)
               : (v72 = 0),
                 v72)))
          {
            *(_DWORD *)(v57 + 32) = 0;
            *(_OWORD *)(v57 + 16) = xmmword_1B6917860;
            *(_WORD *)(v57 + 36) = v91;
            v58 = *v90;
            v59 = (_QWORD *)((char *)v11 + (*v89 >> 1));
            if ((*v89 & 1) != 0)
              v58 = *(void (**)(_QWORD))(*v59 + v58);
            v58(v59);
            result = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a11 + 4))(*a11, a11[1], *((_QWORD *)a11 + 1), *((_QWORD *)a11 + 2), a10, *((_QWORD *)a11 + 3));
            v60 = v11[1];
            *(_QWORD *)(v60 + 16) = result;
            v61 = v60 + 4 * v13;
            v63 = *(__int16 *)(v61 + 4);
            v62 = v61 + 4;
            v64 = v63 - v88;
            v65 = v63 - v88 + 64;
            if (v65 >= 0x80)
            {
              if (v64 >= 0)
                v73 = v64;
              else
                v73 = -v64;
              v66 = 63 - 2 * __clz((v64 < 1) | (2 * v73));
            }
            else
            {
              v66 = byte_1B692358C[v65];
            }
            v74 = *(__int16 *)(v62 + 2) - v87;
            if ((v74 + 64) >= 0x80)
            {
              if (v74 >= 0)
                v76 = *(__int16 *)(v62 + 2) - v87;
              else
                v76 = v87 - *(__int16 *)(v62 + 2);
              v75 = 63 - 2 * __clz((v74 < 1) | (2 * v76));
            }
            else
            {
              v75 = byte_1B692358C[v74 + 64];
            }
            v77 = v75 + v66;
            *(_DWORD *)(v60 + 32) = v77;
            v78 = ((v77 * *(unsigned __int16 *)(v11[28] + 2 * *(__int16 *)(v60 + 36) + 8)) >> (8
                                                                                               * (*(_WORD *)(v60 + 36) == 0)))
                + (unint64_t)result;
            *(_QWORD *)(v60 + 24) = v78;
            v79 = *v11;
            if (v78 < *(_QWORD *)(*v11 + 24))
            {
              v80 = (_BYTE *)(v79 + v13);
              *v80 = *(_BYTE *)(v60 + v13);
              *(_DWORD *)(v79 + 4 * v13 + 4) = *(_DWORD *)v62;
              v80[12] = *(_BYTE *)(v60 + v13 + 12);
              *(_DWORD *)(v79 + 32) = *(_DWORD *)(v60 + 32);
              *(_OWORD *)(v79 + 16) = *(_OWORD *)(v60 + 16);
              v86 = v55;
            }
          }
          v53 += 4;
        }
        while (v54 != v53);
        v12 = v86;
        if (v86 == -1)
          break;
        v92 = v86;
        if (((v86 - 1) ^ (v83 - 1)) > 1)
        {
          v93.i32[0] = v83;
          v51 = 2;
        }
        else
        {
          v93 = vsub_s32((int32x2_t)0x400000003, vdup_n_s32((v86 - 1) & 0xFFFFFFFE));
          v51 = 3;
        }
        v81 = *v11 + 4 * v13;
        v48 = *(_WORD *)(v81 + 4);
        v49 = *(_WORD *)(v81 + 6);
        ++v84;
      }
      while (v84 != v82);
    }
  }
  return result;
}

_QWORD *sub_1B6800AE0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(_QWORD *);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t *v47;
  void (**v48)(_QWORD *);

  v11 = result;
  v12 = a6;
  v13 = result[1];
  v14 = *result + 4 * a6;
  v15 = *(_WORD *)(v14 + 4);
  v16 = *(_WORD *)(v14 + 6);
  *(_DWORD *)(v13 + 32) = 0;
  *(_OWORD *)(v13 + 16) = xmmword_1B6917860;
  if (a8 == 2)
    v17 = 1;
  else
    v17 = 2;
  *(_WORD *)(v13 + 36) = v17;
  v18 = &result[2 * a8];
  v47 = v18 + 40;
  v48 = (void (**)(_QWORD *))(v18 + 39);
  v46 = (__int16)a7;
  v19 = a7 >> 16;
  v20 = 2 * (a8 != 1);
  v21 = (char *)&unk_1B6921F80 + 18 * a8;
  do
  {
    *(_WORD *)(v11[1] + 4 * v12 + 4) = v15 + v21[v20];
    *(_WORD *)(v11[1] + 4 * v12 + 6) = v16 + v21[v20 + 1];
    v22 = v11[1];
    if (*((_BYTE *)v11 + 16)
      || ((v32 = *(_DWORD *)(v22 + 4 * v12 + 4), v33 = *((_DWORD *)v11 + 13), (__int16)v32 <= v33 >> 16)
        ? (v34 = (__int16)v32 < (__int16)v33)
        : (v34 = 1),
          !v34
       && ((v35 = *((_DWORD *)v11 + 14), v36 = v32 >> 16, v36 >= (__int16)v35) ? (v37 = v36 <= v35 >> 16) : (v37 = 0),
           v37)))
    {
      *(_DWORD *)(v22 + 32) = 0;
      *(_OWORD *)(v22 + 16) = xmmword_1B6917860;
      *(_WORD *)(v22 + 36) = v17;
      v23 = *v48;
      v24 = (_QWORD *)((char *)v11 + (*v47 >> 1));
      if ((*v47 & 1) != 0)
        v23 = *(void (**)(_QWORD *))(*v24 + v23);
      v23(v24);
      result = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a11 + 4))(*a11, a11[1], *((_QWORD *)a11 + 1), *((_QWORD *)a11 + 2), a10, *((_QWORD *)a11 + 3));
      v25 = v11[1];
      *(_QWORD *)(v25 + 16) = result;
      v26 = v25 + 4 * v12;
      v28 = *(__int16 *)(v26 + 4);
      v27 = v26 + 4;
      v29 = v28 - v46;
      v30 = v28 - v46 + 64;
      if (v30 >= 0x80)
      {
        if (v29 >= 0)
          v38 = v29;
        else
          v38 = -v29;
        v31 = 63 - 2 * __clz((v29 < 1) | (2 * v38));
      }
      else
      {
        v31 = byte_1B692358C[v30];
      }
      v39 = *(__int16 *)(v27 + 2) - v19;
      if ((v39 + 64) >= 0x80)
      {
        if (v39 >= 0)
          v41 = *(__int16 *)(v27 + 2) - v19;
        else
          v41 = v19 - *(__int16 *)(v27 + 2);
        v40 = 63 - 2 * __clz((v39 < 1) | (2 * v41));
      }
      else
      {
        v40 = byte_1B692358C[v39 + 64];
      }
      v42 = v40 + v31;
      *(_DWORD *)(v25 + 32) = v42;
      v43 = ((v42 * *(unsigned __int16 *)(v11[28] + 2 * *(__int16 *)(v25 + 36) + 8)) >> (8
                                                                                         * (*(_WORD *)(v25 + 36) == 0)))
          + (unint64_t)result;
      *(_QWORD *)(v25 + 24) = v43;
      v44 = *v11;
      if (v43 < *(_QWORD *)(*v11 + 24))
      {
        v45 = (_BYTE *)(v44 + v12);
        *v45 = *(_BYTE *)(v25 + v12);
        *(_DWORD *)(v44 + 4 * v12 + 4) = *(_DWORD *)v27;
        v45[12] = *(_BYTE *)(v25 + v12 + 12);
        *(_DWORD *)(v44 + 32) = *(_DWORD *)(v25 + 32);
        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v25 + 16);
      }
    }
    v20 += 2;
  }
  while (v20 != 18);
  return result;
}

uint64_t sub_1B6800D9C(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, int32x4_t a9, int32x4_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  BOOL v31;
  BOOL v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  BOOL v43;
  void (*v44)(_QWORD *);
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  int v72;
  int v74;
  int v75;
  void (*v77)(_QWORD *);
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  __int16 v102;
  int v103;
  int v104;
  int v105;
  BOOL v106;
  BOOL v107;
  int v108;
  unsigned int v109;
  __int16 v111;
  int v112;
  int v114;
  uint64_t v115;
  unsigned int v116;
  __int16 v117;
  int v118;
  int v119;
  uint64_t (*v120)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v121;
  uint64_t v122;
  uint64_t v128;
  unsigned int v129[2];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v134;

  v15 = a1[28];
  v16 = a1[19];
  v17 = a1[20];
  v129[0] = a4;
  v129[1] = a5;
  v121 = v17;
  v122 = v16;
  v130 = v16;
  v131 = v17;
  v132 = a8;
  v18 = v15 + 8 * __clz(__rbit32(a4));
  v120 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v18 + 48);
  v133 = v120;
  v134 = *(_QWORD *)(v18 + 320);
  sub_1B680189C((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(*a1 + 4 * (int)a6 + 4), a12, a9, a10);
  v19 = a1[1];
  v128 = a6;
  v20 = v19 + 4 * (int)a6;
  v21 = *(_WORD *)(v20 + 6);
  v22 = *(_WORD *)(v20 + 4);
  v23 = *((_DWORD *)a1 + 13);
  v24 = (__int16)v23;
  v25 = v23 >> 16;
  v26 = v25 >= (__int16)(v22 + 8) && v24 <= (__int16)(v22 + 8);
  if (!v26
    || ((v27 = *((_DWORD *)a1 + 14), v28 = (__int16)v27, v29 = v27 >> 16, v28 <= (__int16)(v21 + 8))
      ? (v30 = v29 < (__int16)(v21 + 8))
      : (v30 = 1),
        v30))
  {
    v31 = 0;
  }
  else
  {
    v33 = v28 <= (__int16)(v21 - 8) && v29 >= (__int16)(v21 - 8);
    v31 = v25 >= (__int16)(v22 - 8) && v24 <= (__int16)(v22 - 8) && v33;
  }
  v114 = 0;
  *(_DWORD *)(v19 + 32) = 0;
  *(_OWORD *)(v19 + 16) = xmmword_1B6917860;
  *(_WORD *)(v19 + 36) = 1;
  v119 = a7 >> 16;
  v35 = -6;
  v36 = &byte_1B6921FB9;
  v117 = v21;
  do
  {
    *(_WORD *)(a1[1] + 4 * (int)a6 + 4) = v22 + *(v36 - 1);
    *(_WORD *)(a1[1] + 4 * (int)a6 + 6) = v21 + *v36;
    v37 = a1[1];
    if (v31
      || ((v38 = *(_DWORD *)(v37 + 4 * (int)a6 + 4), v39 = *((_DWORD *)a1 + 13), (__int16)v38 <= v39 >> 16)
        ? (v40 = (__int16)v38 < (__int16)v39)
        : (v40 = 1),
          !v40
       && ((v41 = *((_DWORD *)a1 + 14), v42 = v38 >> 16, v42 >= (__int16)v41) ? (v43 = v42 <= v41 >> 16) : (v43 = 0), v43)))
    {
      *(_DWORD *)(v37 + 32) = 0;
      *(_OWORD *)(v37 + 16) = xmmword_1B6917860;
      *(_WORD *)(v37 + 36) = 1;
      v44 = (void (*)(_QWORD *))a1[43];
      v45 = a1[44];
      v46 = (_QWORD *)((char *)a1 + (v45 >> 1));
      if ((v45 & 1) != 0)
        v44 = *(void (**)(_QWORD *))(*v46 + v44);
      v44(v46);
      v47 = v120(a4, a5, v122, v121, a11, a8);
      v48 = a1[1];
      *(_QWORD *)(v48 + 16) = v47;
      v49 = v48 + 4 * (int)a6;
      v51 = *(__int16 *)(v49 + 4);
      v50 = v49 + 4;
      v52 = v51 - (__int16)a7;
      if ((v52 + 64) >= 0x80)
      {
        if (v52 >= 0)
          v54 = v52;
        else
          v54 = -v52;
        v53 = 63 - 2 * __clz((v52 < 1) | (2 * v54));
      }
      else
      {
        v53 = byte_1B692358C[v52 + 64];
      }
      v21 = v117;
      v55 = *(__int16 *)(v50 + 2) - v119;
      if ((v55 + 64) >= 0x80)
      {
        if (v55 >= 0)
          v57 = *(__int16 *)(v50 + 2) - v119;
        else
          v57 = v119 - *(__int16 *)(v50 + 2);
        v56 = 63 - 2 * __clz((v55 < 1) | (2 * v57));
      }
      else
      {
        v56 = byte_1B692358C[v55 + 64];
      }
      v58 = v56 + v53;
      *(_DWORD *)(v48 + 32) = v58;
      v59 = ((v58 * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v48 + 36) + 8)) >> (8 * (*(_WORD *)(v48 + 36) == 0)))
          + (unint64_t)v47;
      *(_QWORD *)(v48 + 24) = v59;
      v60 = *a1;
      if (v59 < *(_QWORD *)(*a1 + 24))
      {
        v61 = (_BYTE *)(v60 + (int)a6);
        *v61 = *(_BYTE *)(v48 + (int)a6);
        *(_DWORD *)(v60 + 4 * (int)a6 + 4) = *(_DWORD *)v50;
        v61[12] = *(_BYTE *)(v48 + (int)a6 + 12);
        *(_DWORD *)(v60 + 32) = *(_DWORD *)(v48 + 32);
        *(_OWORD *)(v60 + 16) = *(_OWORD *)(v48 + 16);
        v114 = v35 + 7;
      }
    }
    v36 += 2;
  }
  while (!__CFADD__(v35++, 1));
  v63 = v114;
  if (v114 && *((_BYTE *)a1 + 146))
  {
    v116 = 0;
    do
    {
      v64 = 0;
      v65 = *a1 + 4 * (int)v128;
      v66 = *(_WORD *)(v65 + 6);
      v67 = *(_WORD *)(v65 + 4);
      v115 = v63;
      v68 = &byte_1B6921FC4[3 * v63];
      v118 = -1;
      do
      {
        v69 = (char *)&unk_1B6921FB6 + 2 * v68[v64];
        *(_WORD *)(a1[1] + 4 * (int)v128 + 4) = v67 + *v69;
        *(_WORD *)(a1[1] + 4 * (int)v128 + 6) = v66 + v69[1];
        v70 = a1[1];
        v71 = *(_DWORD *)(v70 + 4 * (int)v128 + 4);
        v72 = *((_DWORD *)a1 + 13);
        if ((__int16)v71 <= v72 >> 16 && (__int16)v71 >= (__int16)v72)
        {
          v74 = *((_DWORD *)a1 + 14);
          v75 = v71 >> 16;
          if (v75 >= (__int16)v74 && v75 <= v74 >> 16)
          {
            *(_DWORD *)(v70 + 32) = 0;
            *(_OWORD *)(v70 + 16) = xmmword_1B6917860;
            *(_WORD *)(v70 + 36) = 1;
            v77 = (void (*)(_QWORD *))a1[43];
            v78 = a1[44];
            v79 = (_QWORD *)((char *)a1 + (v78 >> 1));
            if ((v78 & 1) != 0)
              v77 = *(void (**)(_QWORD *))(*v79 + v77);
            v77(v79);
            v80 = v120(a4, a5, v122, v121, a11, a8);
            v81 = a1[1];
            *(_QWORD *)(v81 + 16) = v80;
            v82 = v81 + 4 * (int)v128;
            v84 = *(__int16 *)(v82 + 4);
            v83 = v82 + 4;
            v85 = v84 - (__int16)a7;
            if ((v85 + 64) >= 0x80)
            {
              if (v85 >= 0)
                v87 = v85;
              else
                v87 = -v85;
              v86 = 63 - 2 * __clz((v85 < 1) | (2 * v87));
            }
            else
            {
              v86 = byte_1B692358C[v85 + 64];
            }
            v88 = *(__int16 *)(v83 + 2) - v119;
            if ((v88 + 64) >= 0x80)
            {
              if (v88 >= 0)
                v90 = *(__int16 *)(v83 + 2) - v119;
              else
                v90 = v119 - *(__int16 *)(v83 + 2);
              v89 = 63 - 2 * __clz((v88 < 1) | (2 * v90));
            }
            else
            {
              v89 = byte_1B692358C[v88 + 64];
            }
            v91 = v89 + v86;
            *(_DWORD *)(v81 + 32) = v91;
            v92 = ((v91 * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v81 + 36) + 8)) >> (8
                                                                                              * (*(_WORD *)(v81 + 36) == 0)))
                + (unint64_t)v80;
            *(_QWORD *)(v81 + 24) = v92;
            v93 = *a1;
            if (v92 < *(_QWORD *)(*a1 + 24))
            {
              v94 = (_BYTE *)(v93 + (int)v128);
              *v94 = *(_BYTE *)(v81 + (int)v128);
              *(_DWORD *)(v93 + 4 * (int)v128 + 4) = *(_DWORD *)v83;
              v94[12] = *(_BYTE *)(v81 + (int)v128 + 12);
              *(_DWORD *)(v93 + 32) = *(_DWORD *)(v81 + 32);
              *(_OWORD *)(v93 + 16) = *(_OWORD *)(v81 + 16);
              v118 = v64;
            }
          }
        }
        ++v64;
      }
      while (v64 != 3);
      if (v118 == -1)
        break;
      v63 = byte_1B6921FC4[3 * v115 + v118];
      ++v116;
    }
    while (v116 < *((unsigned __int8 *)a1 + 146));
  }
  v95 = *((unsigned __int8 *)a1 + 144) + 2 * *((unsigned __int8 *)a1 + 145) + 7;
  v96 = *a1 + 4 * (int)v128;
  v97 = *(_WORD *)(v96 + 4);
  v98 = *((_DWORD *)a1 + 13);
  v99 = (__int16)v98;
  v100 = v98 >> 16;
  v101 = v98 >> 16 >= (__int16)(v95 + v97)
      && (__int16)v98 <= (__int16)(*((unsigned __int8 *)a1 + 144) + 2 * *((unsigned __int8 *)a1 + 145) + 7 + v97);
  if (!v101
    || ((v102 = *(_WORD *)(v96 + 6),
         v103 = *((_DWORD *)a1 + 14),
         v104 = (__int16)v103,
         v105 = v103 >> 16,
         (__int16)v103 <= (__int16)(v102 + v95))
      ? (v106 = v105 < (__int16)(v102 + v95))
      : (v106 = 1),
        v106))
  {
    v107 = 0;
LABEL_96:
    v108 = a7;
    goto LABEL_97;
  }
  v107 = 0;
  v111 = v97 - v95;
  if (v100 < v111)
    goto LABEL_96;
  v26 = v99 <= v111;
  v108 = a7;
  if (v26)
  {
    v112 = (__int16)(v102 - v95);
    v107 = v104 <= v112 && v105 >= v112;
  }
LABEL_97:
  *((_BYTE *)a1 + 16) = v107;
  v109 = v108;
  sub_1B6800AE0(a1, a2, a3, a4, a5, v128, v108, 2, a8, a11, v129);
  return sub_1B680198C(a1, a2, a3, a4, a5, v128, v109, a8, a11, v129, a12);
}

uint64_t sub_1B68014E4(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, signed int a7, uint64_t a8, int32x4_t a9, int32x4_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  int v23;
  int i;
  uint64_t v25;
  void (*v26)(_QWORD *);
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  uint64_t result;
  uint64_t v57;
  unint64_t v58;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v71;

  v16 = a1[28];
  v17 = a1[19];
  v18 = a1[20];
  v66[0] = a4;
  v66[1] = a5;
  v61 = v18;
  v62 = v17;
  v67 = v17;
  v68 = v18;
  v69 = a8;
  v19 = v16 + 8 * __clz(__rbit32(a4));
  v20 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v19 + 48);
  v70 = v20;
  v71 = *(_QWORD *)(v19 + 320);
  v21 = (int)a6;
  sub_1B680189C((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(a1[1] + 4 * (int)a6 + 4), a12, a9, a10);
  v22 = a1[1];
  *(_DWORD *)(v22 + 32) = 0;
  *(_OWORD *)(v22 + 16) = xmmword_1B6917860;
  *(_WORD *)(v22 + 36) = 1;
  v23 = *((__int16 *)a1 + 28);
  if (v23 <= *((__int16 *)a1 + 29))
  {
    do
    {
      v60 = v23;
      *(_WORD *)(a1[1] + 4 * v21 + 6) = v23;
      for (i = *((__int16 *)a1 + 26); i <= *((__int16 *)a1 + 27); i += 4)
      {
        *(_WORD *)(a1[1] + 4 * v21 + 4) = i;
        v25 = a1[1];
        *(_DWORD *)(v25 + 32) = 0;
        *(_OWORD *)(v25 + 16) = xmmword_1B6917860;
        *(_WORD *)(v25 + 36) = 1;
        v26 = (void (*)(_QWORD *))a1[43];
        v27 = a1[44];
        v28 = (uint64_t *)((char *)a1 + (v27 >> 1));
        if ((v27 & 1) != 0)
          v26 = *(void (**)(_QWORD *))(*v28 + v26);
        v26(v28);
        v29 = v20(a4, a5, v62, v61, a11, a8);
        v30 = a1[1];
        *(_QWORD *)(v30 + 16) = v29;
        v31 = v30 + 4 * v21;
        v33 = *(__int16 *)(v31 + 4);
        v32 = v31 + 4;
        v34 = v33 - (__int16)a7;
        if ((v34 + 64) >= 0x80)
        {
          if (v34 >= 0)
            v36 = v34;
          else
            v36 = -v34;
          v35 = 63 - 2 * __clz((v34 < 1) | (2 * v36));
        }
        else
        {
          v35 = byte_1B692358C[v34 + 64];
        }
        v37 = *(__int16 *)(v32 + 2) - (a7 >> 16);
        if ((v37 + 64) >= 0x80)
        {
          if (v37 >= 0)
            v39 = *(__int16 *)(v32 + 2) - (a7 >> 16);
          else
            v39 = (a7 >> 16) - *(__int16 *)(v32 + 2);
          v38 = 63 - 2 * __clz((v37 < 1) | (2 * v39));
        }
        else
        {
          v38 = byte_1B692358C[v37 + 64];
        }
        v40 = v38 + v35;
        *(_DWORD *)(v30 + 32) = v40;
        v41 = ((v40 * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v30 + 36) + 8)) >> (8
                                                                                          * (*(_WORD *)(v30 + 36) == 0)))
            + (unint64_t)v29;
        *(_QWORD *)(v30 + 24) = v41;
        v42 = *a1;
        if (v41 < *(_QWORD *)(*a1 + 24))
        {
          v43 = (_BYTE *)(v42 + v21);
          *v43 = *(_BYTE *)(v30 + v21);
          *(_DWORD *)(v42 + 4 * v21 + 4) = *(_DWORD *)v32;
          v43[12] = *(_BYTE *)(v30 + v21 + 12);
          *(_DWORD *)(v42 + 32) = *(_DWORD *)(v30 + 32);
          *(_OWORD *)(v42 + 16) = *(_OWORD *)(v30 + 16);
        }
      }
      v23 = v60 + 4;
    }
    while (v60 + 4 <= *((__int16 *)a1 + 29));
  }
  v44 = 0;
  v45 = *a1 + 4 * v21;
  v46 = *(_WORD *)(v45 + 4);
  v47 = *((_DWORD *)a1 + 13);
  v48 = v47 >> 16;
  if (v47 >> 16 >= (__int16)(v46 + 3))
  {
    v49 = (__int16)v47;
    if ((__int16)v47 <= (__int16)(v46 + 3))
    {
      v44 = 0;
      v50 = *(_WORD *)(v45 + 6);
      v51 = *((_DWORD *)a1 + 14);
      v52 = (__int16)v51;
      if ((__int16)v51 <= (__int16)(v50 + 3))
      {
        v53 = v51 >> 16;
        if (v53 >= (__int16)(v50 + 3))
        {
          v44 = 0;
          v54 = v46 - 3;
          if (v48 >= v54 && v49 <= v54)
            v44 = v52 <= (__int16)(v50 - 3) && v53 >= (__int16)(v50 - 3);
        }
      }
    }
  }
  *((_BYTE *)a1 + 16) = v44;
  result = sub_1B680198C(a1, a2, a3, a4, a5, a6, a7, a8, a11, v66, a12);
  if (a12)
  {
    v57 = *a1;
    v58 = *(_QWORD *)(*a1 + 16) + 1;
    *(_QWORD *)(v57 + 16) = v58 >> 1;
    *(_QWORD *)(v57 + 24) = ((*(_DWORD *)(v57 + 32)
                            * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v57 + 36) + 8)) >> (8 * (*(_WORD *)(v57 + 36) == 0)))
                          + (v58 >> 1);
  }
  return result;
}

int16x4_t sub_1B680189C(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, int32x4_t a9, int32x4_t a10)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int32 *v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int16x4_t result;

  v10 = (__int16)a7 >> 2;
  if (a7 << 16 <= -65536)
    v10 = -(-(__int16)a7 >> 2);
  if (a7 < 0)
    v11 = -(-(a7 >> 16) >> 2);
  else
    v11 = (a7 >> 16) >> 2;
  v12 = 36;
  if (a8)
    v12 = 44;
  v13 = (unsigned __int32 *)(a1 + v12);
  v14 = 40;
  if (a8)
    v14 = 48;
  *(int32x2_t *)a9.i8 = vsub_s32((int32x2_t)0x200000002, (int32x2_t)__PAIR64__(a5, a4));
  v15 = vzip1q_s32(a9, a9);
  v16 = a1 + 4 * a6;
  a10.i32[0] = v10 + a2;
  a10.i32[1] = *v13;
  a10.i32[2] = v11 + a3;
  v17 = a10;
  v17.i32[3] = *(_DWORD *)(a1 + v14);
  v18 = vrev64q_s32(v17);
  v19 = vaddq_s32(v17, v18);
  v20 = vtrn2q_s32(vrev64q_s32(vsubq_s32(a10, v18)), v19);
  v19.i32[0] = *(_DWORD *)(v16 + 20);
  v19.i32[1] = *(_DWORD *)(v16 + 28);
  *(int32x2_t *)v19.i8 = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x200000002);
  v21 = vzip1q_s32(v19, v19);
  v22 = vshrq_n_s32(vshlq_n_s32(v20, 0x10uLL), 0x10uLL);
  v23 = (int8x16_t)vcgtq_s32(v22, v15);
  v24 = (int8x16_t)vminq_s32(v22, v21);
  v21.i64[0] = __PAIR64__(a3, a2);
  result = vshl_n_s16(vmovn_s32(vsubq_s32((int32x4_t)vbslq_s8(v23, v24, (int8x16_t)v15), vzip1q_s32(v21, v21))), 2uLL);
  *(int16x4_t *)(a1 + 52) = result;
  return result;
}

uint64_t sub_1B680198C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unsigned int *a10, char a11)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v30)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int);
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v50)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int);
  uint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;

  v16 = a1[28];
  v17 = *(unsigned __int8 *)(*(_QWORD *)(a1[27] + 79088) + 229);
  v18 = a1[19];
  v19 = a1[20];
  *a10 = a4;
  a10[1] = a5;
  *((_QWORD *)a10 + 1) = v18;
  *((_QWORD *)a10 + 2) = v19;
  *((_QWORD *)a10 + 3) = a8;
  if ((int)a5 >= (int)a4)
    v20 = a4;
  else
    v20 = a5;
  v21 = v16 + 24;
  if ((int)a5 >= 9 && (int)a4 >= 9 && v17 == 1)
  {
    v56 = a6;
    v22 = __clz(__rbit32(v20)) - 2;
    *((_QWORD *)a10 + 4) = *(_QWORD *)(v21 + 8 * v22 + 120);
    v55 = v22;
    *((_QWORD *)a10 + 5) = *(_QWORD *)(v16 + 8 * v22 + 336);
    v23 = *a1;
    *(_DWORD *)(v23 + 32) = 0;
    *(_OWORD *)(v23 + 16) = xmmword_1B6917860;
    *(_WORD *)(v23 + 36) = 3;
    v24 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[55];
    v25 = a1[56];
    v26 = (uint64_t *)((char *)a1 + (v25 >> 1));
    if ((v25 & 1) != 0)
      v24 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v26 + v24);
    v27 = a7;
    v24(v26, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    v30 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))a1[55];
    v31 = a1[56];
    v32 = (uint64_t *)((char *)a1 + (v31 >> 1));
    if ((v31 & 1) != 0)
      v30 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))(*v32 + v30);
    LOBYTE(v53) = a11;
    v30(v32, a2, a3, a4, a5, v56, v27, 0, a8, a9, a10, v53);
    v33 = a1[28];
    v34 = a1[19];
    v35 = a1[20];
    *a10 = a4;
    a10[1] = a5;
    *((_QWORD *)a10 + 1) = v34;
    *((_QWORD *)a10 + 2) = v35;
    v36 = v33 + 8 * v55;
    v37 = *(_QWORD *)(v36 + 104);
    *((_QWORD *)a10 + 3) = a8;
    *((_QWORD *)a10 + 4) = v37;
    *((_QWORD *)a10 + 5) = *(_QWORD *)(v36 + 336);
    v38 = *a1;
    *(_WORD *)(v38 + 36) = 2;
    sub_1B6801C84((uint64_t)a1, v38, a2, a3, a4, a5, a8, a9, v56);
    result = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a10 + 4))(*a10, a10[1], *((_QWORD *)a10 + 1), *((_QWORD *)a10 + 2), a9, *((_QWORD *)a10 + 3));
    v40 = *a1;
    v41 = ((*(_DWORD *)(*a1 + 32) * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(*a1 + 36) + 8)) >> (8 * (*(_WORD *)(*a1 + 36) == 0)))
        + (unint64_t)result;
    *(_QWORD *)(v40 + 16) = result;
    *(_QWORD *)(v40 + 24) = v41;
  }
  else
  {
    v42 = 8 * __clz(__rbit32(v20)) - 16;
    *((_QWORD *)a10 + 4) = *(_QWORD *)(v21 + v42 + 80);
    *((_QWORD *)a10 + 5) = *(_QWORD *)(v16 + v42 + 336);
    v43 = *a1;
    *(_DWORD *)(v43 + 32) = 0;
    *(_OWORD *)(v43 + 16) = xmmword_1B6917860;
    *(_WORD *)(v43 + 36) = 2;
    v44 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[55];
    v45 = a1[56];
    v46 = (uint64_t *)((char *)a1 + (v45 >> 1));
    if ((v45 & 1) != 0)
      v44 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v46 + v44);
    v47 = a7;
    v44(v46, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    v50 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))a1[55];
    v51 = a1[56];
    v52 = (uint64_t *)((char *)a1 + (v51 >> 1));
    if ((v51 & 1) != 0)
      v50 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))(*v52 + v50);
    LOBYTE(v54) = a11;
    return v50(v52, a2, a3, a4, a5, a6, v47, 0, a8, a9, a10, v54);
  }
  return result;
}

uint64_t sub_1B6801C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;

  v9 = a1 + 16 * (((*(_WORD *)(a2 + 4 * a9 + 6) | *(_WORD *)(a2 + 4 * a9 + 4)) & 1) == 0);
  v10 = *(uint64_t (**)(_QWORD *))(v9 + 312);
  v11 = *(_QWORD *)(v9 + 320);
  v12 = (_QWORD *)(a1 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  return v10(v12);
}

uint64_t sub_1B6801CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  signed int v25;
  _DWORD v27[2];
  _DWORD v28[2];
  _BYTE v29[8200];
  uint64_t v30;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = v11;
  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)(v11 + 216)
                                                                             + (((unint64_t)((v23 & 3) != 0) << 6) | ((unint64_t)((*(_QWORD *)&v23 & 0x30000) != 0) << 7))
                                                                             + 8 * byte_1B6920C45[(v20 >> 2) - 1]
                                                                             + 2104))(v18, v23, v24, a9, v20, v29);
  v28[0] = v15;
  v28[1] = v15;
  v27[0] = v13;
  v27[1] = v13;
  v25 = __clz(__rbit32(v21)) - 2;
  if (!v21)
    v25 = -2;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _DWORD *, _BYTE *, uint64_t, uint64_t))(v22 + 8 * v25 + 360))(v19, v17, v28, v27, v29, a10, a11);
}

uint64_t sub_1B6801E00(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6, __int16 *a7)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v7 = -12 - 4 * a5;
  v8 = result + 4 * a6;
  v9 = 4 * *(_DWORD *)(v8 + 28) + 8;
  v10 = a7[1] + 4 * a3;
  if (v10 < v9)
    LOWORD(v9) = a7[1] + 4 * a3;
  if (v10 > v7)
    LOWORD(v7) = v9;
  a7[1] = v7 - 4 * a3;
  v11 = -12 - 4 * a4;
  v12 = 4 * *(_DWORD *)(v8 + 20) + 8;
  v13 = *a7 + 4 * a2;
  if (v13 < v12)
    LOWORD(v12) = *a7 + 4 * a2;
  if (v13 > v11)
    LOWORD(v11) = v12;
  *a7 = v11 - 4 * a2;
  return result;
}

uint64_t *sub_1B6801E6C(uint64_t *result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int (*v24)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _BYTE *v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;

  v11 = *result;
  v12 = result[1];
  v26 = result[19];
  v34 = (uint64_t)result;
  v25 = result[20];
  if ((int)a5 >= (int)a4)
    v13 = a4;
  else
    v13 = a5;
  if ((a9 & 0xFFFFFFFE) == 2)
    v14 = v13;
  else
    v14 = a4;
  v24 = *(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(result[28]
                                                                                          + 40 * a9
                                                                                          + 8 * __clz(__rbit32(v14))
                                                                                          + 8);
  *(_DWORD *)(v11 + 32) = 0;
  *(_OWORD *)(v11 + 16) = xmmword_1B6917860;
  v33 = v11;
  *(_WORD *)(v11 + 36) = a9;
  *(_DWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 16) = xmmword_1B6917860;
  *(_WORD *)(v12 + 36) = a9;
  if (*(_BYTE *)(a7 + 48))
  {
    v16 = 0;
    v31 = (_BYTE *)(v12 + a6 + 12);
    v32 = (__int16 *)(v12 + 4 * a6 + 4);
    v20 = (_BYTE *)(v11 + a6 + 12);
    v21 = (_DWORD *)(v11 + 4 * a6 + 4);
    v19 = a6;
    v22 = a7;
    do
    {
      *(_DWORD *)v32 = *(_DWORD *)(a7 + 4 * v16);
      v17 = *(_DWORD *)(a7 + 4 * v16);
      sub_1B6801E00(v34, a2, a3, a4, a5, a6, v32);
      sub_1B6801C84(v34, v12, a2, a3, a4, a5, a10, a11, a6);
      *(_QWORD *)(v12 + 16) = v24(a4, a5, v26, v25, a11, a10);
      *(_DWORD *)v32 = v17;
      if (a8)
      {
        *(_DWORD *)(v12 + 32) = 0;
        result = (uint64_t *)sub_1B68020EC(a8, v12, a6);
      }
      else
      {
        *(_DWORD *)(v12 + 32) = 1;
        result = (uint64_t *)v16;
      }
      a7 = v22;
      *v31 = (_BYTE)result;
      v18 = *(_QWORD *)(v12 + 16)
          + ((*(_DWORD *)(v12 + 32)
            * *(unsigned __int16 *)(*(_QWORD *)(v34 + 224) + 2 * *(__int16 *)(v12 + 36) + 8)) >> (8 * (*(_WORD *)(v12 + 36) == 0)));
      *(_QWORD *)(v12 + 24) = v18;
      if (v18 < *(_QWORD *)(v33 + 24))
      {
        *(_BYTE *)(v33 + v19) = *(_BYTE *)(v12 + v19);
        *v21 = *(_DWORD *)v32;
        *v20 = *v31;
        *(_DWORD *)(v33 + 32) = *(_DWORD *)(v12 + 32);
        *(_OWORD *)(v33 + 16) = *(_OWORD *)(v12 + 16);
      }
      ++v16;
    }
    while (v16 < *(unsigned __int8 *)(v22 + 48));
  }
  return result;
}

uint64_t sub_1B68020EC(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v3 = *(unsigned __int8 *)(result + 48);
  if (*(_BYTE *)(result + 48))
  {
    v4 = result;
    v5 = 0;
    LODWORD(result) = 0;
    v6 = *(_DWORD *)(a2 + 4 * a3 + 4);
    v7 = (__int16)v6;
    v8 = v6 >> 16;
    v9 = -1;
    do
    {
      v10 = *(_DWORD *)(v4 + 4 * v5);
      v11 = v7 - (__int16)v10;
      if ((v11 + 64) >= 0x80)
      {
        if (v11 >= 0)
          v13 = v7 - (__int16)v10;
        else
          v13 = (__int16)v10 - v7;
        v12 = 63 - 2 * __clz((v11 < 1) | (2 * v13));
      }
      else
      {
        v12 = byte_1B692358C[v11 + 64];
      }
      v14 = v8 - (v10 >> 16);
      if ((v14 + 64) >= 0x80)
      {
        if (v14 >= 0)
          v16 = v14;
        else
          v16 = -v14;
        v15 = 63 - 2 * __clz((v14 < 1) | (2 * v16));
      }
      else
      {
        v15 = byte_1B692358C[v14 + 64];
      }
      v17 = v12 + v15;
      if (v17 + 1 >= v9)
        result = result;
      else
        result = v5;
      if (v17 + 1 < v9)
        v9 = v17 + 1;
      ++v5;
    }
    while (v3 != v5);
  }
  else
  {
    result = 0;
    v9 = -1;
  }
  *(_DWORD *)(a2 + 32) += v9;
  return result;
}

uint64_t sub_1B68021C8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unint64_t v26;

  v4 = *(_DWORD *)(a4 + 4 * a3 + 4);
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(__int16 *)(a4 + 36);
  v7 = *(_WORD *)(a4 + 36) == 0;
  v8 = a4 + a3;
  v11 = *(char *)(v8 + 12);
  v9 = (_BYTE *)(v8 + 12);
  v10 = v11;
  v12 = *(_DWORD *)(a4 + 32) + 1;
  *(_DWORD *)(a4 + 32) = v12;
  v13 = 8 * v7;
  *(_QWORD *)(a4 + 24) = v5
                       + ((v12 * *(unsigned __int16 *)(*(_QWORD *)(result + 224) + 2 * v6 + 8)) >> v13);
  v14 = *(unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)(a2 + 48))
  {
    v15 = 0;
    v16 = (__int16)v4;
    v17 = v4 >> 16;
    do
    {
      if (v10 != v15)
      {
        v18 = *(_DWORD *)(a2 + 4 * v15);
        v19 = v16 - (__int16)v18;
        if ((v19 + 64) >= 0x80)
        {
          if (v19 >= 0)
            v21 = v16 - (__int16)v18;
          else
            v21 = (__int16)v18 - v16;
          v20 = 63 - 2 * __clz((v19 < 1) | (2 * v21));
        }
        else
        {
          v20 = byte_1B692358C[v19 + 64];
        }
        v22 = v17 - (v18 >> 16);
        if ((v22 + 64) >= 0x80)
        {
          if (v22 >= 0)
            v24 = v22;
          else
            v24 = -v22;
          v23 = 63 - 2 * __clz((v22 < 1) | (2 * v24));
        }
        else
        {
          v23 = byte_1B692358C[v22 + 64];
        }
        v25 = v20 + v23 + 1;
        v26 = v5 + ((v25 * *(unsigned __int16 *)(*(_QWORD *)(result + 224) + 2 * v6 + 8)) >> v13);
        if (v26 < *(_QWORD *)(a4 + 24))
        {
          *(_DWORD *)(a4 + 32) = v25;
          *(_QWORD *)(a4 + 24) = v26;
          *v9 = v15;
          v14 = *(unsigned __int8 *)(a2 + 48);
        }
      }
      ++v15;
    }
    while (v15 < v14);
  }
  return result;
}

unint64_t sub_1B68022F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v44;
  int v45;
  _DWORD v46[12];
  unsigned __int8 v47;

  v8 = a3;
  if (((a3 | a2) & 0x80000000) != 0
    || (v11 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 1360), *(_DWORD *)(v11 + 276) <= (int)a2)
    || *(_DWORD *)(v11 + 280) <= (int)a3)
  {
    v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 576) + 16 * (*(_QWORD *)(v11 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  v47 = 0;
  v13 = *(unsigned __int8 *)(a6 + 60);
  if (*(_BYTE *)(a6 + 60))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      if (!*(_BYTE *)(a6 + 12 * v15))
      {
        v46[v14] = *(_DWORD *)(a6 + 12 * v15 + 4) & 0xFFFEFFFE;
        v14 = v47;
        if (v47)
        {
          v16 = v46;
          v17 = v47;
          while (1)
          {
            v18 = *v16++;
            if (v18 == v46[v47])
              break;
            if (!--v17)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          v14 = ++v47;
        }
      }
      ++v15;
    }
    while (v15 != v13);
  }
  else
  {
    v14 = 0;
  }
  v19 = *(_QWORD *)(a1 + 152);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 224)
                                                                                       + 8 * __clz(__rbit32(a4))
                                                                                       + 48);
  v22 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v22 + 32) = 0;
  *(_OWORD *)(v22 + 16) = xmmword_1B6917860;
  *(_WORD *)(v22 + 36) = 1;
  *(_BYTE *)v22 = 0;
  if (v14)
  {
    v40 = v12;
    v41 = v20;
    v23 = 0;
    v24 = v14;
    v25 = *(_QWORD *)(a1 + 8);
    v26 = -1;
    v27 = v46;
    v42 = v19;
    v43 = v21;
    v28 = a4;
    v29 = a5;
    do
    {
      v32 = *v27++;
      v44 = v32;
      v45 = v23;
      *(_DWORD *)(v25 + 4) = v32;
      v33 = *(char **)(a1 + 8);
      v34 = *v33;
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16 * v34 + 3544);
      *(_BYTE *)(a1 + 18) = v34;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(v35 + 276);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(v35 + 280);
      v33[1] = -1;
      v36 = v8;
      sub_1B6802568((_QWORD *)a1, *(char **)(a1 + 8), a2, v8, v28, v29, a7, a8);
      v37 = v43(v28, v29, v42, v41, a8, a7);
      v8 = v36;
      v25 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v25 + 16) = v37;
      v38 = v26 > v37;
      if (v26 >= v37)
        v26 = v37;
      v23 = v45;
      if (v38)
        v23 = v44;
      --v24;
    }
    while (v24);
    result = (29 * v26) >> 5;
    v12 = v40;
  }
  else
  {
    v23 = 0;
    result = 0x7FFFFFFFFFFFFFFLL;
  }
  *(_BYTE *)(v12 + 11) &= 0xAEu;
  *(_BYTE *)(v12 + 8) = 0;
  *(_DWORD *)v12 = v23;
  *(_DWORD *)(v12 + 4) = 0;
  *(_WORD *)(v12 + 9) = 1023;
  return result;
}

uint64_t sub_1B6802568(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v22;
  unsigned int v23;

  v16 = a2[1];
  if (v16 == -1)
    return sub_1B6801C84((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  v17 = *a2;
  if (v17 == -1)
    return sub_1B6801C84((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 1);
  if (*(_DWORD *)(*(_QWORD *)(a1[27] + 3544 + 16 * v17) + 680) == *(_DWORD *)(*(_QWORD *)(a1[27]
                                                                                             + 3544
                                                                                             + 16 * v16
                                                                                             + 256)
                                                                                 + 680)
    && *((_DWORD *)a2 + 1) == *((_DWORD *)a2 + 2))
  {
    return sub_1B6801C84((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  }
  v23 = __clz(__rbit32(a5)) - 2;
  v22 = a1[25];
  v19 = a1[23];
  sub_1B6801C84((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v19, 0);
  sub_1B6801C84((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v22, 1);
  if ((_DWORD)a5)
    v20 = v23;
  else
    v20 = -2;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))a1[v20 + 29])(a6, (int)a5, v19, (int)a5, v22, a7, a8);
}

uint64_t sub_1B6802710(_BYTE **a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t (*v51)(_QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t, uint64_t);
  _BYTE *v52;
  _BYTE *v53;
  char *v58;
  char *v59;
  int v60;
  _DWORD v61[64];
  uint64_t v62;

  v9 = a2;
  v62 = *MEMORY[0x1E0C80C00];
  if (((a3 | a2) & 0x80000000) != 0
    || (v11 = *((_QWORD *)a1[27] + 170), *(_DWORD *)(v11 + 276) <= (int)a2)
    || *(_DWORD *)(v11 + 280) <= (int)a3)
  {
    v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 576) + 16 * (*(_QWORD *)(v11 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  v52 = a1[20];
  v53 = a1[19];
  v51 = *(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t, uint64_t))&a1[28][8 * __clz(__rbit32(a4))
                                                                                            + 48];
  v13 = (uint64_t)*a1;
  *(_DWORD *)(v13 + 32) = 0;
  *(_OWORD *)(v13 + 16) = xmmword_1B6917860;
  *(_WORD *)(v13 + 36) = 1;
  v14 = a1[1];
  *((_DWORD *)v14 + 8) = 0;
  *((_OWORD *)v14 + 1) = xmmword_1B6917860;
  *((_WORD *)v14 + 18) = 1;
  *(_BYTE *)v13 = 0;
  (*a1)[1] = -1;
  *a1[1] = 0;
  a1[1][1] = -1;
  sub_1B6801E6C((uint64_t *)a1, a2, a3, a4, a5, 0, a6, 0, 1, a7, a8);
  v15 = (uint64_t)*a1;
  v16 = (*a1)[12];
  if (*((_QWORD *)*a1 + 3) >= 0x4B1uLL)
  {
    v17 = *((_DWORD *)a1 + 37);
  }
  else
  {
    v17 = 3;
    *((_DWORD *)a1 + 37) = 3;
  }
  v18 = 4 * *((_DWORD *)a1 + 9);
  while (1)
  {
    v19 = *(__int16 *)(v15 + 4);
    v20 = v19 >= 0 ? *(__int16 *)(v15 + 4) : -v19;
    if ((1 << v17) + v20 <= v18)
      break;
    if (v17 < 3)
      goto LABEL_22;
LABEL_20:
    *((_DWORD *)a1 + 37) = --v17;
  }
  v21 = *(__int16 *)(v15 + 6);
  if (v21 < 0)
    v21 = -v21;
  v22 = (1 << v17) + v21;
  v23 = 4 * *((_DWORD *)a1 + 10);
  if (v17 >= 3 && v22 > v23)
    goto LABEL_20;
  if (v22 <= v23)
  {
    v25 = 0;
    v50 = v9;
    v49 = v12;
    v48 = v16;
LABEL_24:
    v26 = 0;
    v60 = *(_DWORD *)(v15 + 4);
    if (v17 <= 2)
      v27 = (char *)&unk_1B692200C;
    else
      v27 = (char *)&unk_1B6921FFC;
    v28 = (char *)&unk_1B6922014;
    if (v17 > 2)
      v28 = (char *)&unk_1B6922004;
    v58 = v28;
    v59 = v27;
    do
    {
      *((_WORD *)a1[1] + 2) = (v59[v26] << v17) + v60;
      *((_WORD *)a1[1] + 3) = (v58[v26] << v17) + HIWORD(v60);
      v29 = a1[1];
      if (v25 <= 0)
      {
        v32 = *((_DWORD *)v29 + 1);
LABEL_39:
        v61[v25++ & 0x3F] = v32;
        v34 = *v29;
        v35 = *(_QWORD *)&a1[27][16 * v34 + 3544];
        *((_BYTE *)a1 + 18) = v34;
        *((_DWORD *)a1 + 5) = *(_DWORD *)(v35 + 276);
        *((_DWORD *)a1 + 7) = *(_DWORD *)(v35 + 280);
        v29[1] = -1;
        sub_1B6801C84((uint64_t)a1, (uint64_t)a1[1], v9, a3, a4, a5, a7, a8, 0);
        v36 = v51(a4, a5, v53, v52, a8, a7);
        v37 = a1[1];
        *((_QWORD *)v37 + 2) = v36;
        v38 = ((*((_DWORD *)v37 + 8) * *(unsigned __int16 *)&a1[28][2 * *((__int16 *)v37 + 18) + 8]) >> (8 * (*((_WORD *)v37 + 18) == 0)))
            + (unint64_t)v36;
        *((_QWORD *)v37 + 3) = v38;
        v39 = (uint64_t)*a1;
        if (v38 < *((_QWORD *)*a1 + 3))
        {
          v40 = *(_OWORD *)v37;
          v41 = *((_OWORD *)v37 + 1);
          *(_QWORD *)(v39 + 32) = *((_QWORD *)v37 + 4);
          *(_OWORD *)v39 = v40;
          *(_OWORD *)(v39 + 16) = v41;
        }
        v9 = v50;
      }
      else
      {
        v30 = 0;
        if (v25 >= 64)
          v31 = 64;
        else
          v31 = v25;
        v32 = *((_DWORD *)v29 + 1);
        v33 = -v31;
        while (v32 != v61[((_BYTE)v25 + (_BYTE)v30 - 1) & 0x3F])
        {
          if (v33 == --v30)
            goto LABEL_39;
        }
      }
      ++v26;
    }
    while (v26 != 8);
    v15 = (uint64_t)*a1;
    v17 = *((_DWORD *)a1 + 37);
    v12 = v49;
    v16 = v48;
    if (v60 == *((_DWORD *)*a1 + 1))
    {
      if (v17 == 2)
        goto LABEL_22;
      *((_DWORD *)a1 + 37) = --v17;
    }
    v42 = 4 * *((_DWORD *)a1 + 9);
    while (1)
    {
      v43 = *(__int16 *)(v15 + 4);
      if (v43 >= 0)
        v44 = *(__int16 *)(v15 + 4);
      else
        v44 = -v43;
      if ((1 << v17) + v44 <= v42)
      {
        v45 = *(__int16 *)(v15 + 6);
        if (v45 < 0)
          v45 = -v45;
        v46 = (1 << v17) + v45;
        v47 = 4 * *((_DWORD *)a1 + 10);
        if (v17 < 3 || v46 <= v47)
        {
          if (v46 > v47)
            break;
          goto LABEL_24;
        }
      }
      else if (v17 < 3)
      {
        break;
      }
      *((_DWORD *)a1 + 37) = --v17;
    }
  }
LABEL_22:
  *(_BYTE *)(v12 + 10) = 3;
  *(_BYTE *)(v12 + 11) = *(_BYTE *)(v12 + 11) & 0xAE | (16 * (v16 & 1));
  *(_BYTE *)(v12 + 8) = **a1;
  *(_DWORD *)v12 = *((_DWORD *)*a1 + 1);
  *(_DWORD *)(v12 + 4) = 0;
  *(_BYTE *)(v12 + 9) = -1;
  return *((_QWORD *)*a1 + 3);
}

uint64_t sub_1B6802BCC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned __int16 *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t i;
  unsigned int v20;
  int v21;
  BOOL v22;
  unsigned int v24;
  unsigned int v25;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v3 = result;
  v4 = *(char *)(a2 + 314);
  if (v4 <= *(char *)(a2 + 315))
    v4 = *(char *)(a2 + 315);
  if (v4 <= 10)
  {
    v5 = *(char *)(a2 + 150) + *(char *)(a2 + 149);
    *(_BYTE *)(result + 8) = 0;
    if (v4 == 8)
    {
      if (*(_DWORD *)(a2 + 320))
        v6 = 1;
      else
        v6 = 20;
      v7 = v5 == 0;
      v8 = 3;
    }
    else
    {
      v7 = *(_DWORD *)(a2 + 320) == 0;
      v6 = 2;
      v8 = -124;
    }
    if (v7)
      v6 = v8;
    *(_BYTE *)(result + 8) = v6;
    v36 = 0;
    result = sub_1B680EA24(a2, (int *)&v36 + 1, (int *)&v36);
    v9 = SHIDWORD(v36) <= (int)v36 ? v36 : HIDWORD(v36);
    v10 = *(double *)(a2 + 96);
    if (v10 != 0.0)
    {
      v11 = v36 * HIDWORD(v36);
      v12 = (v10 * (double)(v36 * HIDWORD(v36)));
      v13 = &unk_1B6922120;
      v14 = &unk_1B6922048;
      v15 = (unsigned __int16 *)&unk_1B69220D2;
      v16 = &unk_1B6922090;
      v17 = 1;
      v18 = *(_DWORD *)(a2 + 180);
      *(_BYTE *)(v3 + 152) = 0;
      result = 12;
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v20 = v16[i];
          if (v11 <= (3 * v20) >> 2)
            v21 = 8;
          else
            v21 = 6;
          if (v11 <= v20 >> 1)
            v21 = 12;
          if (v11 <= v20 >> 2)
            v21 = 16;
          if (v20)
            v22 = v20 >= v11;
          else
            v22 = 0;
          if (v22 && v15[i] && v9 <= v15[i])
          {
            v24 = v14[i];
            if (v24)
            {
              if (v24 >= v12)
              {
                v25 = v13[i];
                if (1000 * v25 >= v18 && v21 > v5)
                {
                  *(_BYTE *)(v3 + 7) |= v25 < v18;
                  *(_BYTE *)(v3 + 152) = v17 + 1;
                  *(_BYTE *)(v3 + 159) = i;
                  goto LABEL_43;
                }
              }
            }
          }
        }
        ++v17;
        v13 += 3;
        v14 += 3;
        v15 += 3;
        v16 += 3;
      }
      while (v17 != 6);
    }
  }
LABEL_43:
  v27 = *(unsigned __int8 *)(v3 + 8);
  if ((v27 - 1) >= 3)
    v28 = 1 << v27;
  else
    v28 = dword_1B69221B0[(v27 - 1)];
  *(_DWORD *)(v3 + 16) = v28;
  v29 = *(unsigned __int8 *)(v3 + 152) - 1;
  v30 = *(unsigned __int8 *)(v3 + 159);
  v31 = word_1B69220F0[3 * (int)v29 + v30];
  *(_BYTE *)(v3 + 57) = v31;
  if ((_BYTE)v31 == 0xFF)
  {
    *(_QWORD *)(v3 + 68) = 0x8000000080000000;
    LOBYTE(v32) = 16;
  }
  else
  {
    v33 = 3 * v29;
    v34 = dword_1B6922084[v33 + v30];
    *(_DWORD *)(v3 + 68) = v34;
    *(_DWORD *)(v3 + 72) = *((_DWORD *)&unk_1B6922114 + 18 * (*(_BYTE *)(v3 + 7) & 1) + v33 + v30);
    v36 = 0;
    result = sub_1B680EA24(a2, (int *)&v36 + 1, (int *)&v36);
    v35 = v36 * HIDWORD(v36);
    if ((int)v36 * HIDWORD(v36) <= v34 >> 2)
    {
      v32 = 16;
    }
    else if (v35 <= v34 >> 1)
    {
      v32 = 12;
    }
    else if (v35 <= (3 * v34) >> 2)
    {
      v32 = 8;
    }
    else
    {
      v32 = 6;
    }
    if (v32 >= *(char *)(a2 + 148))
      LOBYTE(v32) = *(_BYTE *)(a2 + 148);
  }
  *(_BYTE *)(v3 + 76) = v32;
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 44) |= 1u;
  *(_BYTE *)(v3 + 46) |= 1u;
  *(_BYTE *)(v3 + 47) |= 1u;
  *(_BYTE *)(v3 + 56) |= 1u;
  return result;
}

uint64_t sub_1B6802ED0(_BYTE *a1, int a2, uint64_t a3)
{
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  _DWORD *v9;
  int v10;

  v6 = &a1[a2];
  *v6 = sub_1B67C9094(a3, 2);
  a1[7] |= (sub_1B67C9094(a3, 1) != 0) << a2;
  v7 = 0;
  v6[8] = sub_1B67C9094(a3, 5);
  v8 = v6 + 8;
  v9 = &a1[4 * a2 + 16];
  do
    *v9 |= (sub_1B67C9094(a3, 1) != 0) << v7++;
  while (v7 != 32);
  a1[44] |= (sub_1B67C9094(a3, 1) != 0) << a2;
  a1[45] |= (sub_1B67C9094(a3, 1) != 0) << a2;
  a1[46] |= (sub_1B67C9094(a3, 1) != 0) << a2;
  a1[47] |= (sub_1B67C9094(a3, 1) != 0) << a2;
  if (*v8 > 3u || (*(_BYTE *)v9 & 0x10) != 0)
  {
    a1[48] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[49] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[50] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[51] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[52] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[53] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[54] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[55] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    a1[56] |= (sub_1B67C9094(a3, 1) != 0) << a2;
    v10 = 13;
  }
  else
  {
    a1[48] |= 1 << a2;
    a1[49] |= 1 << a2;
    a1[51] |= 1 << a2;
    a1[52] |= 1 << a2;
    if (*v8 == 3)
      a1[54] |= 1 << a2;
    v10 = 22;
  }
  sub_1B67C9094(a3, v10);
  return sub_1B67C9094(a3, 22);
}

uint64_t sub_1B68031DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int8x8_t v14;
  uint16x8_t v15;
  uint32x4_t v16;
  uint8x8_t v17;
  int16x8_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if (a2 > 6)
    return 4294954387;
  sub_1B6802ED0((_BYTE *)a1, 0, a3);
  *(_BYTE *)(a1 + 57) = sub_1B67C9094(a3, 8);
  if (a2 >= 1)
  {
    v7 = 0;
    do
    {
      *(_BYTE *)(a1 + 64) |= (sub_1B67C9094(a3, 1) != 0) << ++v7;
      *(_BYTE *)(a1 + 65) |= (sub_1B67C9094(a3, 1) != 0) << v7;
    }
    while (a2 != v7);
    v8 = a2 - 8;
    do
      sub_1B67C9094(a3, 2);
    while (!__CFADD__(v8++, 1));
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      v12 = 1 << (v10 + 1);
      if ((v12 & *(_BYTE *)(a1 + 64)) != 0)
      {
        sub_1B6802ED0((_BYTE *)a1, v11, a3);
      }
      else
      {
        v13 = a1 + v10;
        *(_BYTE *)(v13 + 1) = *(_BYTE *)a1;
        *(_BYTE *)(a1 + 7) |= (*(_BYTE *)(a1 + 7) & 1) << v11;
        *(_BYTE *)(v13 + 9) = *(_BYTE *)(a1 + 8);
        *(_DWORD *)(a1 + 4 * v10 + 20) = *(_DWORD *)(a1 + 16);
        v14 = *(int8x8_t *)(a1 + 44);
        v15 = vmovl_u8((uint8x8_t)vand_s8(v14, (int8x8_t)0x101010101010101));
        v16 = (uint32x4_t)vdupq_n_s32(v11);
        v17 = (uint8x8_t)vorr_s8(v14, vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v15.i8), v16), (int16x8_t)vshlq_u32(vmovl_high_u16(v15), v16))));
        *(uint8x8_t *)(a1 + 44) = v17;
        v17.i32[0] = *(_DWORD *)(a1 + 52);
        v18 = (int16x8_t)vmovl_u8(v17);
        *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)vmovn_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)(v18.i64[0] & 0xFF01FF01FF01FF01)), v16)));
        *(_DWORD *)(a1 + 52) = vmovn_s16(v18).u32[0];
        *(_BYTE *)(a1 + 56) |= (*(_BYTE *)(a1 + 56) & 1) << v11;
      }
      if ((v12 & *(_BYTE *)(a1 + 65)) != 0)
        v19 = sub_1B67C9094(a3, 8);
      else
        v19 = *(_BYTE *)(a1 + 57);
      *(_BYTE *)(a1 + v10++ + 58) = v19;
    }
    while ((a2 + 1) - 1 != v10);
  }
  if (a2 < 0)
    return 0;
  v20 = 0;
  while (1)
  {
    v21 = a1 + v20;
    v22 = *(_BYTE *)(a1 + v20 + 57);
    *(_BYTE *)(a1 + v20 + 159) = v22 % 0x1Eu / 3;
    *(_BYTE *)(a1 + v20 + 152) = v22 / 0x1Eu;
    if ((v22 + 46) < 0x4Cu || !*(_BYTE *)(v21 + 8))
    {
      *(_BYTE *)(a1 + v20 + 152) = 4;
      *(_BYTE *)(a1 + v20 + 159) = 0;
      *(_BYTE *)(a1 + v20 + 57) = 120;
      *(_BYTE *)(v21 + 8) = 1;
      *(_DWORD *)(a1 + 4 * v20 + 16) = 6;
    }
    if (*(_BYTE *)(a1 + (int)v20))
      break;
    v23 = a1 + (int)v20;
    v24 = *(unsigned __int8 *)(v23 + 152);
    if ((v24 - 1) > 5 || *(unsigned __int8 *)(v23 + 159) > byte_1B69221A4[v24 - 1])
      break;
    v25 = 0;
    while (1)
    {
      v26 = byte_1B69221AA[v25];
      if (*(unsigned __int8 *)(a1 + (int)v20 + 8) == v26 || ((*(_DWORD *)(a1 + 4 * (int)v20 + 16) >> v26) & 1) != 0)
        break;
      if (++v25 == 4)
        return 4294954387;
    }
    result = 0;
    if (++v20 == a2 + 1)
      return result;
  }
  return 4294954387;
}

uint64_t sub_1B68034FC(unsigned __int8 *a1, int a2, uint64_t a3)
{
  unsigned __int8 *v6;
  int i;

  v6 = &a1[a2];
  sub_1B67C8FE0(a3, *v6, 2);
  sub_1B67C8FE0(a3, (a1[7] >> a2) & 1, 1);
  sub_1B67C8FE0(a3, v6[8], 5);
  for (i = 0; i != 32; ++i)
    sub_1B67C8FE0(a3, (*(_DWORD *)&a1[4 * a2 + 16] >> i) & 1, 1);
  sub_1B67C8FE0(a3, (a1[44] >> a2) & 1, 1);
  sub_1B67C8FE0(a3, (a1[45] >> a2) & 1, 1);
  sub_1B67C8FE0(a3, (a1[46] >> a2) & 1, 1);
  sub_1B67C8FE0(a3, (a1[47] >> a2) & 1, 1);
  sub_1B67C8FE0(a3, 0, 22);
  return sub_1B67C8FE0(a3, 0, 22);
}

uint64_t sub_1B6803618(unsigned __int8 *a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_1B68034FC(a1, 0, a3);
  result = sub_1B67C8FE0(a3, a1[57], 8);
  if (a2 >= 1)
  {
    v7 = 0;
    do
    {
      sub_1B67C8FE0(a3, (a1[64] >> ++v7) & 1, 1);
      result = sub_1B67C8FE0(a3, (a1[65] >> v7) & 1, 1);
    }
    while (a2 != v7);
    if (a2 <= 7)
    {
      v8 = a2 - 8;
      do
        result = sub_1B67C8FE0(a3, 0, 2);
      while (!__CFADD__(v8++, 1));
    }
    v10 = 0;
    v11 = (a2 + 1) - 1;
    do
    {
      v12 = 1 << (v10 + 1);
      if ((v12 & a1[64]) != 0)
        result = sub_1B68034FC(a1, (int)v10 + 2, a3);
      if ((v12 & a1[65]) != 0)
        result = sub_1B67C8FE0(a3, a1[v10 + 58], 8);
      ++v10;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t sub_1B6803730(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  int v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL4 v20;

  if (!a3)
    return 4294954386;
  *(_BYTE *)a1 = sub_1B67C9094(a2, 1) != 0;
  v7 = sub_1B67C9094(a2, 1);
  *(_BYTE *)(a1 + 1) = v7 != 0;
  if (*(_BYTE *)a1)
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    v9 = sub_1B67C9094(a2, 1);
    *(_BYTE *)(a1 + 2) = v9 != 0;
    if (v9)
    {
      *(_BYTE *)(a1 + 3) = sub_1B67C9094(a2, 8);
      *(_BYTE *)(a1 + 4) = sub_1B67C9094(a2, 5);
      *(_BYTE *)(a1 + 5) = sub_1B67C9094(a2, 1) != 0;
      *(_BYTE *)(a1 + 6) = sub_1B67C9094(a2, 5);
    }
    *(_BYTE *)(a1 + 7) = sub_1B67C9094(a2, 4);
    *(_BYTE *)(a1 + 8) = sub_1B67C9094(a2, 4);
    if (*(_BYTE *)(a1 + 2))
      *(_BYTE *)(a1 + 9) = sub_1B67C9094(a2, 4);
    *(_BYTE *)(a1 + 10) = sub_1B67C9094(a2, 5);
    *(_BYTE *)(a1 + 11) = sub_1B67C9094(a2, 5);
    *(_BYTE *)(a1 + 12) = sub_1B67C9094(a2, 5);
  }
  v10 = (uint64_t *)(a1 + 16);
  v11 = a4;
  if (*(_QWORD *)(a1 + 24) < (unint64_t)a4)
  {
    sub_1B6803B64(a1 + 16);
    if (malloc_type_posix_memalign((void **)(a1 + 16), 0x10uLL, 40 * a4, 0x10200405D4A7992uLL) || !*v10)
      return 4294954392;
    v13 = 0;
    do
    {
      v14 = *v10 + v13;
      *(_BYTE *)(v14 + 4) = 0;
      *(_DWORD *)v14 = 0;
      *(_OWORD *)(v14 + 6) = 0uLL;
      *(_OWORD *)(v14 + 22) = 0uLL;
      *(_WORD *)(v14 + 38) = 0;
      v13 += 40;
    }
    while (40 * a4 != v13);
    *(_QWORD *)(a1 + 24) = a4;
  }
  v15 = 0;
  do
  {
    v16 = *v10;
    v17 = *v10 + v15;
    *(_BYTE *)(v17 + 1) = 1;
    *(_BYTE *)(v17 + 4) = 0;
    *(_WORD *)(v17 + 6) = 0;
    v18 = sub_1B67C9094(a2, 1);
    *(_BYTE *)v17 = v18 != 0;
    if (v18)
    {
      v19 = *(unsigned __int8 *)(v17 + 1);
    }
    else
    {
      v19 = sub_1B67C9094(a2, 1) != 0;
      *(_BYTE *)(v17 + 1) = v19;
    }
    if (v19)
    {
      *(_WORD *)(v16 + v15 + 2) = sub_1B67C9140(a2);
      if (*(_BYTE *)(v17 + 4))
        goto LABEL_26;
LABEL_25:
      *(_WORD *)(v17 + 6) = sub_1B67C9140(a2);
      goto LABEL_26;
    }
    v20 = sub_1B67C9094(a2, 1) != 0;
    *(_BYTE *)(v17 + 4) = v20;
    if (!v20)
      goto LABEL_25;
LABEL_26:
    if (*(_BYTE *)a1)
    {
      result = sub_1B6803A0C(v17, a2, a1, (void **)(v16 + v15 + 8));
      if ((_DWORD)result)
        return result;
    }
    if (*(_BYTE *)(a1 + 1))
    {
      result = sub_1B6803A0C(v17, a2, a1, (void **)(v16 + v15 + 24));
      if ((_DWORD)result)
        return result;
    }
    v15 += 40;
    --v11;
  }
  while (v11);
  return 0;
}

uint64_t sub_1B6803A0C(uint64_t a1, uint64_t a2, uint64_t a3, void **memptr)
{
  unint64_t v8;
  void *v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;

  v8 = *(unsigned __int16 *)(a1 + 6);
  if ((unint64_t)memptr[1] <= v8)
  {
    v9 = (void *)(v8 + 1);
    if (*memptr)
    {
      free(*memptr);
      *memptr = 0;
      memptr[1] = 0;
    }
    if (malloc_type_posix_memalign(memptr, 0x10uLL, 20 * (_QWORD)v9, 0x1000040C46099A0uLL) || !*memptr)
      return 4294954392;
    v11 = 0;
    do
    {
      v12 = (char *)*memptr + v11;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 4) = 0;
      v11 += 20;
    }
    while (20 * v8 + 20 != v11);
    memptr[1] = v9;
  }
  v13 = 0;
  v14 = -1;
  do
  {
    *(_DWORD *)((char *)*memptr + v13) = sub_1B67C91C8(a2);
    *(_DWORD *)((char *)*memptr + v13 + 4) = sub_1B67C91C8(a2);
    if (*(_BYTE *)(a3 + 2))
    {
      *(_DWORD *)((char *)*memptr + v13 + 8) = sub_1B67C91C8(a2);
      *(_DWORD *)((char *)*memptr + v13 + 12) = sub_1B67C91C8(a2);
    }
    *((_BYTE *)*memptr + v13 + 16) = sub_1B67C9094(a2, 1) != 0;
    ++v14;
    v13 += 20;
  }
  while (v14 < *(unsigned __int16 *)(a1 + 6));
  return 0;
}

void sub_1B6803B64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = (_QWORD *)(*(_QWORD *)a1 + v3);
        v6 = (void *)v5[3];
        if (v6)
        {
          free(v6);
          v5[3] = 0;
          v5[4] = 0;
        }
        v9 = (void *)v5[1];
        v8 = v5 + 1;
        v7 = v9;
        if (v9)
        {
          free(v7);
          *v8 = 0;
          v8[1] = 0;
        }
        ++v4;
        v3 += 40;
      }
      while (v4 < *(_QWORD *)(a1 + 8));
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1B6803BF4(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = 0;
      v4 = 16;
      do
      {
        sub_1B6803B64(*(_QWORD *)a1 + v4);
        ++v3;
        v4 += 32;
      }
      while (v3 < *(_QWORD *)(a1 + 8));
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_1B6803C5C(uint64_t a1)
{
  void *v2;

  sub_1B6803BF4(a1 + 264);
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
  }
  return a1;
}

uint64_t sub_1B6803C98(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  if (*(_QWORD *)(a1 + 8) >= a2)
    return 0;
  sub_1B6803BF4(a1);
  if (malloc_type_posix_memalign((void **)a1, 0x10uLL, 32 * a2, 0x1020040F16FCCE1uLL) || !*(_QWORD *)a1)
    return 4294954392;
  v5 = 0;
  v6 = a2;
  do
  {
    v7 = (_QWORD *)(*(_QWORD *)a1 + v5);
    v7[2] = 0;
    v7[3] = 0;
    *v7 = 0;
    *(_QWORD *)((char *)v7 + 5) = 0;
    v5 += 32;
    --v6;
  }
  while (v6);
  result = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

BOOL sub_1B6803D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  if (*(unsigned __int8 *)(a1 + 168) <= 0xFu)
  {
    v1 = *(unsigned __int8 *)(a1 + 169);
    if (v1 <= 6)
    {
      if (*(_BYTE *)(a1 + 171))
        v2 = 0;
      else
        v2 = *(unsigned __int8 *)(a1 + 169);
      v3 = a1 + 172;
      v4 = v1 + 1;
      while (1)
      {
        v5 = *(unsigned __int8 *)(v3 + v2);
        if (v5 > 0xF || *(unsigned __int8 *)(v3 + v2 + 7) > v5 || *(_DWORD *)(v3 + 4 * v2 + 16) >= 0xFFFFFFFE)
          break;
        if (v4 == ++v2)
          return *(unsigned __int16 *)(a1 + 218) <= 0x3FFu
              && (!*(_BYTE *)(a1 + 240) || *(unsigned __int16 *)(a1 + 260) <= 0x400u);
      }
    }
  }
  return 0;
}

uint64_t sub_1B6803DC8(int a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  char **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  char **v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;

  if (a1 != 1684632424 && a1 != 1752589105 && a1 != 1718908520)
  {
    v16 = 0;
    if (a3)
      v17 = a3;
    else
      v17 = 100;
    v18 = &dword_1E6A17498;
    while (1)
    {
      v19 = *v18;
      v18 += 8;
      if (v19 == v17)
        break;
      if (++v16 == 9)
      {
        v12 = 0;
        goto LABEL_32;
      }
    }
    v12 = &(&off_1E6A171E8)[4 * v16 + 85];
LABEL_32:
    v13 = 0;
    v21 = a5 * (unint64_t)a4;
    v22 = &qword_1E6A17208;
    while (v21 > *((unsigned int *)v22 - 4) || *v22 < v21 * a6)
    {
      ++v13;
      v22 += 5;
      if (v13 == 17)
        goto LABEL_36;
    }
    if (v12)
    {
      v20 = &off_1E6A171E8;
      goto LABEL_39;
    }
LABEL_36:
    v23 = 0x7FFFFFFF;
    goto LABEL_40;
  }
  v8 = 0;
  if (a3 <= 1)
    v9 = 1;
  else
    v9 = a3;
  v10 = &dword_1E6A170F0;
  while (1)
  {
    v11 = *v10;
    v10 += 8;
    if (v11 == v9)
      break;
    if (++v8 == 8)
    {
      v12 = 0;
      goto LABEL_17;
    }
  }
  v12 = &(&off_1E6A16EE0)[4 * v8 + 65];
LABEL_17:
  v13 = 0;
  v14 = a5 * (unint64_t)a4;
  v15 = &qword_1E6A16F00;
  while (v14 > *((unsigned int *)v15 - 4) || *v15 < v14 * a6)
  {
    ++v13;
    v15 += 5;
    if (v13 == 13)
      goto LABEL_36;
  }
  if (!v12)
    goto LABEL_36;
  v20 = &off_1E6A16EE0;
LABEL_39:
  v23 = HIDWORD(v20[5 * v13 + 2]) * *((_DWORD *)v12 + 5);
LABEL_40:
  if (v23 >= a2)
    return a2;
  else
    return v23;
}

void sub_1B6803F4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_1B6772C88((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1B6803FBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void sub_1B6804018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  *(_QWORD *)(a1 + 48) = a3;
  v5 = *(_QWORD **)(a1 + 120);
  if (v5)
  {
    if (*v5)
    {
LABEL_15:
      if (!v5[8])
        v5[8] = dispatch_semaphore_create(1);
LABEL_17:
      *(_QWORD *)(a1 + 40) = 0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_QWORD *)a1 = a2;
      return;
    }
LABEL_6:
    v7 = operator new(8uLL, MEMORY[0x1E0DE4E10]);
    if (v7)
    {
      v8 = v7;
      *v7 = v5;
      v9 = (_QWORD *)operator new();
      *v9 = &off_1E6A15DB0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = v8;
      *(_QWORD *)&v10 = v8;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      v9[2] = 0;
      v9[3] = 0;
      *v9 = &off_1E6A15DB0;
      v9[1] = 0;
      *(_QWORD *)&v10 = 0;
    }
    *((_QWORD *)&v10 + 1) = v9;
    v11 = (std::__shared_weak_count *)v5[1];
    *(_OWORD *)v5 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (!*v5)
      goto LABEL_17;
    goto LABEL_15;
  }
  v6 = operator new(0x48uLL, MEMORY[0x1E0DE4E10]);
  if (v6)
  {
    v5 = v6;
    v6[8] = 0;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *(_QWORD *)(a1 + 120) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 120) = 0;
}

void sub_1B6804174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC9814C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1B680419C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B68041C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1BCC9814CLL);
  return result;
}

uint64_t sub_1B68041E4(uint64_t *a1, unsigned __int8 *a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  double *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t *v43;
  _DWORD **v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  double *v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint8_t buf[16];

  v4 = (std::mutex *)(a1 + 7);
  std::mutex::lock((std::mutex *)(a1 + 7));
  v5 = (uint64_t *)a1[15];
  dispatch_semaphore_wait((dispatch_semaphore_t)v5[8], 0xFFFFFFFFFFFFFFFFLL);
  v6 = v5[7];
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *(_QWORD *)(*(_QWORD *)(v5[3] + (((unint64_t)(v5[6] + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v5[6] + v7) & 0x1FF));
    v5[7] = v7;
    sub_1B6803FBC(v5 + 2);
  }
  else
  {
    v9 = operator new(0x138uLL, MEMORY[0x1E0DE4E10]);
    if (!v9)
    {
      dispatch_semaphore_signal((dispatch_semaphore_t)v5[8]);
      goto LABEL_77;
    }
    v8 = (uint64_t)v9;
    v9[15] = -1;
    *((_OWORD *)v9 + 13) = 0u;
    *((_OWORD *)v9 + 14) = 0u;
    *((_OWORD *)v9 + 15) = 0u;
    v9[32] = 0;
    *((_OWORD *)v9 + 18) = xmmword_1B69221C0;
    v9[38] = 0xBFF0000000000000;
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)v5[8]);
  v10 = *v5;
  v11 = (std::__shared_weak_count *)v5[1];
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = v11;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  else
  {
    *(_QWORD *)buf = *v5;
    *(_QWORD *)&buf[8] = 0;
  }
  v15 = (std::__shared_weak_count *)operator new();
  v16 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15B88;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  *(_OWORD *)&v15[1].__shared_owners_ = v16;
  v57 = (uint64_t)v15;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  if (!v8)
  {
LABEL_71:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (v54)
      goto LABEL_74;
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v8)
      goto LABEL_75;
LABEL_77:
    v55 = 4294954392;
    goto LABEL_78;
  }
  v17 = 0;
  v18 = *((_QWORD *)a2 + 73);
  v19 = (_BYTE *)(v18 + 11057);
  v20 = *((_QWORD *)a2 + 74);
  v21 = *(_DWORD *)(v20 + 276);
  v22 = *(_DWORD *)(v20 + 280) + 7;
  v23 = *((_QWORD *)a2 + 376);
  v24 = *(_DWORD *)(v23 + 72);
  *(_DWORD *)v8 = *((_DWORD *)a2 + 161);
  v25 = *((_QWORD *)a2 + 76);
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(v25 + 684);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v20 + 16);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v23 + 16);
  *(int32x2_t *)(v8 + 12) = vrev64_s32(*(int32x2_t *)(v23 + 32));
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(v23 + 40);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v23 + 56);
  *(_BYTE *)(v8 + 128) = *(_BYTE *)(v23 + 48);
  *(_BYTE *)(v8 + 129) = *(_BYTE *)(v23 + 50);
  *(_BYTE *)(v8 + 108) = a2[3024];
  *(_BYTE *)(v8 + 109) = a2[3025];
  *(_BYTE *)(v8 + 110) = a2[2464];
  *(_DWORD *)(v8 + 144) = *((_DWORD *)a2 + 2);
  *(_DWORD *)(v8 + 112) = *((_DWORD *)a2 + 106);
  *(_BYTE *)(v8 + 32) = a2[640];
  *(_DWORD *)(v8 + 116) = *((_DWORD *)a2 + 680);
  *(int8x8_t *)(v8 + 120) = vorr_s8(*(int8x8_t *)(a2 + 456), (int8x8_t)vceq_s32(*(int32x2_t *)(a2 + 456), (int32x2_t)0x8000000080000000));
  v26 = a2[4];
  *(_BYTE *)(v8 + 130) = v26;
  v27 = *a2;
  *(_BYTE *)(v8 + 111) = v27;
  *(_DWORD *)(v8 + 132) = *((_DWORD *)a2 + 107);
  *(_QWORD *)(v8 + 48) = *((_QWORD *)a2 + 48);
  *(_DWORD *)(v8 + 92) = *((_DWORD *)a2 + 626);
  *(_DWORD *)(v8 + 96) = *((_DWORD *)a2 + 628);
  *(_QWORD *)(v8 + 100) = *((_QWORD *)a2 + 310);
  do
  {
    *(_DWORD *)(v8 + 176 + v17) = *(_DWORD *)&a2[v17 + 2728];
    v17 += 4;
  }
  while (v17 != 16);
  if (v24 >= 7)
    v28 = 0;
  else
    v28 = (double *)(v23 + 120 * v24 + 136);
  if (v24 == 9)
    v28 = (double *)(v23 + 976);
  if (*((_QWORD *)a2 + 50) && (v29 = (uint64_t *)*((_QWORD *)a2 + 49), v29[1]) && (v30 = *v29) != 0)
  {
    v31 = 0;
    v32 = (v22 >> 3) * ((v21 + 7) >> 3);
    do
    {
      *(_DWORD *)(v8 + 192 + v31) = *(_DWORD *)(v30 + 800 + v31);
      v31 += 4;
    }
    while (v31 != 16);
    if (v26)
    {
      v33 = *(_QWORD *)(v30 + 552);
      *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 47);
      v34 = (_QWORD *)(v8 + 40);
      *(_DWORD *)(v8 + 72) = v33;
      *(_DWORD *)(v8 + 76) = *(_QWORD *)(v30 + 544);
      *(_DWORD *)(v8 + 80) = *(_QWORD *)(v30 + 536);
      *(_DWORD *)(v8 + 84) = *(_DWORD *)(v30 + 560);
      *(float *)(v8 + 88) = (float)*(unsigned int *)(v30 + 564) / (float)v32;
      if (!v27)
        goto LABEL_36;
LABEL_32:
      v35 = 0;
      *v34 = *((_QWORD *)a2 + 363) >> 3;
      goto LABEL_37;
    }
    *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 47);
    if (v27)
    {
LABEL_35:
      v35 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 47);
    v34 = (_QWORD *)(v8 + 40);
    if (v27)
    {
      if (v26)
        goto LABEL_32;
      goto LABEL_35;
    }
  }
LABEL_36:
  v35 = *((_QWORD *)a2 + 366);
LABEL_37:
  *(_QWORD *)(v8 + 56) = v35;
  *(_DWORD *)(v8 + 136) = *(_DWORD *)(v23 + 124);
  *(_BYTE *)(v8 + 140) = *(_BYTE *)(v23 + 108);
  *(_WORD *)(v8 + 141) = *(_WORD *)(v23 + 109);
  *(_DWORD *)(v8 + 148) = *(_DWORD *)(v25 + 12);
  *(_DWORD *)(v8 + 152) = *(_DWORD *)(v23 + 80);
  v36 = *(unsigned int *)(v18 + 3744);
  if ((int)v36 >= 1)
  {
    v37 = (_QWORD *)(v8 + 208);
    v38 = (uint64_t *)(v23 + 136);
    do
    {
      v39 = *v38;
      v38 += 15;
      *v37++ = v39;
      --v36;
    }
    while (v36);
  }
  *(_BYTE *)(v8 + 157) = *(_BYTE *)(v18 + 11058);
  *(_QWORD *)(v8 + 264) = *(_QWORD *)(v18 + 1176);
  *(_BYTE *)(v8 + 276) = a2[2];
  if (v28)
    v40 = *v28;
  else
    v40 = -1;
  *(_DWORD *)(v8 + 272) = v40;
  *(double *)(v8 + 280) = *((double *)a2 + 68) * 1000.0;
  if (*v19)
  {
    *(_QWORD *)(v8 + 288) = *((_QWORD *)a2 + 44);
    *(_QWORD *)(v8 + 296) = *((_QWORD *)a2 + 45);
    *(_QWORD *)(v8 + 304) = *((_QWORD *)a2 + 46);
  }
  if (v26)
  {
    if (a1[18] == a1[6])
      sub_1B6804908((uint64_t)(a1 + 16));
    sub_1B6804948(a1 + 16, v8, (uint64_t)v15);
    if (*(unsigned __int8 *)(v8 + 32) <= 1u)
    {
      while (a1[27] >= (unint64_t)a1[6])
        sub_1B6804908((uint64_t)(a1 + 25));
      sub_1B6804948(a1 + 25, v8, (uint64_t)v15);
    }
    while (a1[24] && **(_DWORD **)(a1[23] + 16) < *((_DWORD *)a2 + 161))
      sub_1B6804908((uint64_t)(a1 + 22));
  }
  else
  {
    v41 = (uint64_t **)(a1 + 22);
    v42 = a1[24];
    if (v42)
    {
      v43 = *v41;
      v44 = (_DWORD **)(*v41 + 2);
      if (**v44 == *((_DWORD *)a2 + 161) - 1)
      {
        v45 = *v43;
        *(_QWORD *)(v45 + 8) = v43[1];
        *(_QWORD *)v43[1] = v45;
        a1[24] = v42 - 1;
        sub_1B6772C88((uint64_t)v44);
        operator delete(v43);
      }
    }
    v15 = (std::__shared_weak_count *)v57;
    sub_1B6804948(a1 + 22, v8, v57);
  }
  if (*a2)
  {
    ++*((_DWORD *)a1 + 9);
    if (a2[4])
    {
      v46 = *((_QWORD *)a2 + 376);
      v47 = *(_DWORD *)(v46 + 72);
      v48 = (double *)(v46 + 976);
      v49 = (double *)(v46 + 120 * v47 + 136);
      if (v47 >= 7)
        v49 = 0;
      if (v47 == 9)
        v49 = v48;
      *((_DWORD *)a1 + 10) += (int)(*v49 / v49[1]);
    }
  }
  else
  {
    v50 = *(int *)(*((_QWORD *)a2 + 76) + 12);
    v51 = *a1;
    if ((int)v50 < *(_DWORD *)(*a1 + 560))
    {
      do
        ++*((_DWORD *)a1 + v50++ + 2);
      while (v50 < *(int *)(v51 + 560));
    }
    *((_DWORD *)a1 + 10) = 0;
    if (!a2[640])
      *((_DWORD *)a1 + 9) = 0;
  }
  v52 = a2[436];
  *((_BYTE *)a1 + 44) = v52;
  if (v52)
  {
    if (dword_1EF137CD0 >= 1)
    {
      fwrite("Request IDR because of encoding error\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Request IDR because of encoding error\n", buf, 2u);
      }
    }
  }
  if (v15)
    goto LABEL_71;
LABEL_74:
  if (!v8)
    goto LABEL_77;
LABEL_75:
  v55 = 0;
LABEL_78:
  std::mutex::unlock(v4);
  return v55;
}

void sub_1B68048AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, std::__shared_weak_count *a12)
{
  std::mutex *v12;

  sub_1B6772C88((uint64_t)&a9);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void sub_1B6804908(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *v2;
  *(_QWORD *)(v3 + 8) = v2[1];
  *(_QWORD *)v2[1] = v3;
  *(_QWORD *)(a1 + 16) = v1 - 1;
  sub_1B6772C88((uint64_t)(v2 + 2));
  operator delete(v2);
}

_QWORD *sub_1B6804948(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v9 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void sub_1B68049B4(uint64_t **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t i;
  _QWORD *v87;
  char *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void *v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *a1;
      if (*a1)
      {
        v7 = *v6;
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*v6 + 64), 0xFFFFFFFFFFFFFFFFLL);
        v8 = *(char **)(v7 + 32);
        v9 = *(char **)(v7 + 24);
        v10 = v8 - v9;
        if (v8 == v9)
          v11 = 0;
        else
          v11 = ((v8 - v9) << 6) - 1;
        v13 = *(_QWORD *)(v7 + 48);
        v12 = *(_QWORD *)(v7 + 56);
        v14 = v12 + v13;
        if (v11 != v12 + v13)
          goto LABEL_93;
        if (v13 < 0x200)
        {
          v29 = v10 >> 3;
          v30 = *(char **)(v7 + 40);
          v31 = *(char **)(v7 + 16);
          v32 = v30 - v31;
          if (v10 >> 3 >= (unint64_t)((v30 - v31) >> 3))
          {
            if (v30 == v31)
              v33 = 1;
            else
              v33 = v32 >> 2;
            v34 = (char *)sub_1B677AA34(v33);
            v36 = v35;
            v37 = &v34[8 * v29];
            *(_QWORD *)&v38 = v34;
            *((_QWORD *)&v38 + 1) = v37;
            v122 = v38;
            v39 = operator new(0x1000uLL);
            *(_QWORD *)&v40 = v37;
            *((_QWORD *)&v40 + 1) = &v34[8 * v36];
            if (v29 == v36)
            {
              v41 = 8 * v29;
              *(_QWORD *)&v42 = v122;
              if (v10 < 1)
              {
                v81 = v39;
                v82 = v41 >> 2;
                if (v8 == v9)
                  v83 = 1;
                else
                  v83 = v82;
                v84 = (char *)sub_1B677AA34(v83);
                v37 = &v84[8 * (v83 >> 2)];
                *(_QWORD *)&v42 = v84;
                *((_QWORD *)&v42 + 1) = v37;
                *(_QWORD *)&v40 = v37;
                *((_QWORD *)&v40 + 1) = &v84[8 * v85];
                if (v34)
                {
                  v119 = v40;
                  v123 = v42;
                  operator delete(v34);
                  v40 = v119;
                  v42 = v123;
                }
                v39 = v81;
              }
              else
              {
                v43 = v41 >> 3;
                if (v43 >= -1)
                  v44 = v43 + 1;
                else
                  v44 = v43 + 2;
                v37 -= 8 * (v44 >> 1);
                *(_QWORD *)&v40 = v37;
                *((_QWORD *)&v42 + 1) = v37;
              }
            }
            else
            {
              v42 = v122;
            }
            *(_QWORD *)v37 = v39;
            *(_QWORD *)&v40 = v40 + 8;
            for (i = *(_QWORD *)(v7 + 32); i != *(_QWORD *)(v7 + 24); i -= 8)
            {
              v87 = (_QWORD *)*((_QWORD *)&v42 + 1);
              if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
              {
                v89 = (_BYTE *)v40;
                if ((unint64_t)v40 >= *((_QWORD *)&v40 + 1))
                {
                  if (*((_QWORD *)&v40 + 1) == *((_QWORD *)&v42 + 1))
                    v94 = 1;
                  else
                    v94 = (uint64_t)(*((_QWORD *)&v40 + 1) - *((_QWORD *)&v42 + 1)) >> 2;
                  v95 = (char *)sub_1B677AA34(v94);
                  v88 = &v95[(2 * v94 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v97 = v88;
                  v98 = v89 - (_BYTE *)v87;
                  if (v89 != (_BYTE *)v87)
                  {
                    v97 = &v88[v98 & 0xFFFFFFFFFFFFFFF8];
                    v99 = 8 * (v98 >> 3);
                    v100 = v88;
                    v101 = v87;
                    do
                    {
                      v102 = *v101++;
                      *(_QWORD *)v100 = v102;
                      v100 += 8;
                      v99 -= 8;
                    }
                    while (v99);
                  }
                  *(_QWORD *)&v42 = v95;
                  *((_QWORD *)&v42 + 1) = v88;
                  *(_QWORD *)&v40 = v97;
                  *((_QWORD *)&v40 + 1) = &v95[8 * v96];
                  if (v87)
                  {
                    v120 = v40;
                    v125 = v42;
                    operator delete(v87);
                    v40 = v120;
                    v42 = v125;
                  }
                }
                else
                {
                  v90 = (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 3;
                  if (v90 >= -1)
                    v91 = v90 + 1;
                  else
                    v91 = v90 + 2;
                  v92 = v91 >> 1;
                  v93 = v40 + 8 * (v91 >> 1);
                  v88 = (char *)(v93 - (v40 - *((_QWORD *)&v42 + 1)));
                  if ((_QWORD)v40 == *((_QWORD *)&v42 + 1))
                  {
                    v89 = (_BYTE *)*((_QWORD *)&v42 + 1);
                  }
                  else
                  {
                    v121 = *((_QWORD *)&v40 + 1);
                    v124 = v42;
                    memmove((void *)(v93 - (v40 - *((_QWORD *)&v42 + 1))), *((const void **)&v42 + 1), v40 - *((_QWORD *)&v42 + 1));
                    *((_QWORD *)&v40 + 1) = v121;
                    *(_QWORD *)&v42 = v124;
                  }
                  *((_QWORD *)&v42 + 1) = v88;
                  *(_QWORD *)&v40 = &v89[8 * v92];
                }
              }
              else
              {
                v88 = (char *)*((_QWORD *)&v42 + 1);
              }
              v103 = *(_QWORD *)(i - 8);
              *((_QWORD *)v88 - 1) = v103;
              *((_QWORD *)&v42 + 1) -= 8;
            }
            v104 = *(void **)(v7 + 16);
            *(_OWORD *)(v7 + 16) = v42;
            *(_OWORD *)(v7 + 32) = v40;
            if (v104)
              operator delete(v104);
            goto LABEL_92;
          }
          if (v30 == v8)
          {
            v58 = operator new(0x1000uLL);
            if (v31 == v9)
            {
              if (v8 == v9)
                v59 = 1;
              else
                v59 = v32 >> 2;
              v60 = (char *)sub_1B677AA34(v59);
              v9 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
              v62 = *(uint64_t **)(v7 + 24);
              v63 = v9;
              v64 = *(_QWORD *)(v7 + 32) - (_QWORD)v62;
              if (v64)
              {
                v63 = &v9[v64 & 0xFFFFFFFFFFFFFFF8];
                v65 = 8 * (v64 >> 3);
                v66 = v9;
                do
                {
                  v67 = *v62++;
                  *(_QWORD *)v66 = v67;
                  v66 += 8;
                  v65 -= 8;
                }
                while (v65);
              }
              v68 = *(void **)(v7 + 16);
              *(_QWORD *)(v7 + 16) = v60;
              *(_QWORD *)(v7 + 24) = v9;
              *(_QWORD *)(v7 + 32) = v63;
              *(_QWORD *)(v7 + 40) = &v60[8 * v61];
              if (v68)
              {
                operator delete(v68);
                v9 = *(char **)(v7 + 24);
              }
            }
            *((_QWORD *)v9 - 1) = v58;
            v69 = *(char **)(v7 + 24);
            v70 = *(char **)(v7 + 32);
            *(_QWORD *)(v7 + 24) = v69 - 8;
            v71 = *((_QWORD *)v69 - 1);
            *(_QWORD *)(v7 + 24) = v69;
            if (v70 == *(char **)(v7 + 40))
            {
              v72 = *(_QWORD *)(v7 + 16);
              v73 = (uint64_t)&v69[-v72];
              if ((unint64_t)v69 <= v72)
              {
                v107 = (uint64_t)&v70[-v72];
                v45 = v107 == 0;
                v108 = v107 >> 2;
                if (v45)
                  v109 = 1;
                else
                  v109 = v108;
                v110 = (char *)sub_1B677AA34(v109);
                v112 = &v110[8 * (v109 >> 2)];
                v113 = *(uint64_t **)(v7 + 24);
                v70 = v112;
                v114 = *(_QWORD *)(v7 + 32) - (_QWORD)v113;
                if (v114)
                {
                  v70 = &v112[v114 & 0xFFFFFFFFFFFFFFF8];
                  v115 = 8 * (v114 >> 3);
                  v116 = &v110[8 * (v109 >> 2)];
                  do
                  {
                    v117 = *v113++;
                    *(_QWORD *)v116 = v117;
                    v116 += 8;
                    v115 -= 8;
                  }
                  while (v115);
                }
                v118 = *(void **)(v7 + 16);
                *(_QWORD *)(v7 + 16) = v110;
                *(_QWORD *)(v7 + 24) = v112;
                *(_QWORD *)(v7 + 32) = v70;
                *(_QWORD *)(v7 + 40) = &v110[8 * v111];
                if (v118)
                {
                  operator delete(v118);
                  v70 = *(char **)(v7 + 32);
                }
              }
              else
              {
                v74 = v73 >> 3;
                v21 = v73 >> 3 < -1;
                v75 = (v73 >> 3) + 2;
                if (v21)
                  v76 = v75;
                else
                  v76 = v74 + 1;
                v77 = -(v76 >> 1);
                v78 = v76 >> 1;
                v79 = &v69[-8 * v78];
                v80 = v70 - v69;
                if (v70 != v69)
                {
                  memmove(&v69[-8 * v78], v69, v70 - v69);
                  v69 = *(char **)(v7 + 24);
                }
                v70 = &v79[v80];
                *(_QWORD *)(v7 + 24) = &v69[8 * v77];
                *(_QWORD *)(v7 + 32) = &v79[v80];
              }
            }
            *(_QWORD *)v70 = v71;
          }
          else
          {
            *(_QWORD *)v8 = operator new(0x1000uLL);
          }
        }
        else
        {
          *(_QWORD *)(v7 + 48) = v13 - 512;
          v17 = *(_QWORD *)v9;
          v15 = v9 + 8;
          v16 = v17;
          *(_QWORD *)(v7 + 24) = v15;
          if (*(char **)(v7 + 40) == v8)
          {
            v18 = *(_QWORD *)(v7 + 16);
            v19 = (uint64_t)&v15[-v18];
            if ((unint64_t)v15 <= v18)
            {
              v46 = (uint64_t)&v8[-v18];
              v45 = v46 == 0;
              v47 = v46 >> 2;
              if (v45)
                v48 = 1;
              else
                v48 = v47;
              v49 = (char *)sub_1B677AA34(v48);
              v51 = &v49[8 * (v48 >> 2)];
              v52 = *(uint64_t **)(v7 + 24);
              v8 = v51;
              v53 = *(_QWORD *)(v7 + 32) - (_QWORD)v52;
              if (v53)
              {
                v8 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
                v54 = 8 * (v53 >> 3);
                v55 = &v49[8 * (v48 >> 2)];
                do
                {
                  v56 = *v52++;
                  *(_QWORD *)v55 = v56;
                  v55 += 8;
                  v54 -= 8;
                }
                while (v54);
              }
              v57 = *(void **)(v7 + 16);
              *(_QWORD *)(v7 + 16) = v49;
              *(_QWORD *)(v7 + 24) = v51;
              *(_QWORD *)(v7 + 32) = v8;
              *(_QWORD *)(v7 + 40) = &v49[8 * v50];
              if (v57)
              {
                operator delete(v57);
                v8 = *(char **)(v7 + 32);
              }
            }
            else
            {
              v20 = v19 >> 3;
              v21 = v19 >> 3 < -1;
              v22 = (v19 >> 3) + 2;
              if (v21)
                v23 = v22;
              else
                v23 = v20 + 1;
              v24 = -(v23 >> 1);
              v25 = v23 >> 1;
              v26 = &v15[-8 * v25];
              v27 = v8 - v15;
              if (v8 == v15)
              {
                v28 = v8;
              }
              else
              {
                memmove(&v15[-8 * v25], v15, v8 - v15);
                v28 = *(char **)(v7 + 24);
              }
              v8 = &v26[v27];
              *(_QWORD *)(v7 + 24) = &v28[8 * v24];
              *(_QWORD *)(v7 + 32) = &v26[v27];
            }
          }
          *(_QWORD *)v8 = v16;
        }
        *(_QWORD *)(v7 + 32) += 8;
LABEL_92:
        v9 = *(char **)(v7 + 24);
        v12 = *(_QWORD *)(v7 + 56);
        v14 = *(_QWORD *)(v7 + 48) + v12;
LABEL_93:
        *(_QWORD *)(*(_QWORD *)&v9[(v14 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v14 & 0x1FF)) = a2;
        *(_QWORD *)(v7 + 56) = v12 + 1;
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v7 + 64));
LABEL_94:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v106 = __ldaxr(p_shared_owners);
        while (__stlxr(v106 - 1, p_shared_owners));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (a2)
    MEMORY[0x1BCC9814C](a2, 0x1000C40DFA26CF1);
  if (v5)
    goto LABEL_94;
}

void sub_1B6804FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, char a12)
{
  void *v12;

  operator delete(v12);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  sub_1B6772C88((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1B6805008(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15B88;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B6805040(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15B88;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x1BCC9814CLL);
}

void sub_1B680508C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_1B68049B4((uint64_t **)(a1 + 32), *(_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t sub_1B68050D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v30;

  *(_OWORD *)(a1 + 24) = 0u;
  v2 = a1 + 24;
  v3 = a1 + 3333;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v4 = a1 + 72;
  bzero((void *)(a1 + 120), 0x37CuLL);
  *(_DWORD *)(v2 + 988) = -1;
  *(_QWORD *)(v2 + 1000) = v2 + 1000;
  *(_QWORD *)(v2 + 1008) = v2 + 1000;
  *(_OWORD *)(v2 + 1016) = xmmword_1B6917870;
  *(_OWORD *)(v2 + 1032) = 0u;
  *(_OWORD *)(v2 + 1048) = 0u;
  *(_OWORD *)(v2 + 1064) = 0u;
  *(_QWORD *)(v2 + 1080) = 0;
  *(_DWORD *)(v2 + 1124) = 0;
  v5 = v2 + 3160;
  *(_QWORD *)(v2 + 1096) = 0;
  *(_OWORD *)(v2 + 1104) = 0u;
  *(_BYTE *)(v2 + 1120) = 0;
  *(_OWORD *)(v2 + 1144) = 0u;
  *(_QWORD *)(v2 + 3160) = &off_1E6A14DC0;
  *(_QWORD *)(v2 + 3168) = 0;
  *(_DWORD *)(v2 + 3176) = 0;
  *(_BYTE *)(v2 + 3180) = 0;
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0xAAB8A388324B35B9, &dword_1EF137CD0, qword_1B69216E8, 0xF5D6A8C57AB94F05);
  v6 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v6)
  {
    v6[2] = 0x78039475C6A50527;
    v7 = *(_QWORD *)(a1 + 3192);
    *v6 = off_1E6A150F0;
    v6[1] = v7;
    v6[4] = v5;
    v6[5] = sub_1B67EE928;
    *((_DWORD *)v6 + 6) = 1;
    v8 = *(_DWORD *)(a1 + 3200);
    if (v8 <= 1)
      v8 = 1;
    *(_DWORD *)(a1 + 3200) = v8;
    *(_QWORD *)(a1 + 3192) = v6;
  }
  *(_QWORD *)(a1 + 3184) = &off_1E6A14F60;
  *(_QWORD *)(a1 + 3280) = 0x403E000000000000;
  *(_QWORD *)(v3 + 7) = 0;
  *(_DWORD *)(a1 + 3348) = 0;
  *(_DWORD *)(a1 + 3448) = 0;
  *(_DWORD *)(v3 + 165) = 2056;
  *(_DWORD *)(a1 + 3504) = 1;
  *(_BYTE *)(a1 + 3802) = 0;
  *(_OWORD *)(a1 + 10732) = 0u;
  *(_OWORD *)(a1 + 10748) = 0u;
  *(_OWORD *)(a1 + 10764) = 0u;
  *(_OWORD *)(a1 + 10780) = 0u;
  *(_OWORD *)(a1 + 10796) = 0u;
  *(_OWORD *)(a1 + 10812) = 0u;
  *(_OWORD *)(a1 + 10828) = 0u;
  *(_OWORD *)(a1 + 10844) = 0u;
  *(_OWORD *)(a1 + 10860) = 0u;
  *(_OWORD *)(a1 + 10876) = 0u;
  *(_OWORD *)(a1 + 10892) = 0u;
  *(_OWORD *)(a1 + 10908) = 0u;
  *(_OWORD *)(a1 + 10924) = 0u;
  *(_OWORD *)(a1 + 10940) = 0u;
  *(_OWORD *)(a1 + 10956) = 0u;
  *(_OWORD *)(a1 + 10972) = 0u;
  *(_BYTE *)(a1 + 3808) = 0;
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xAF63E54C8601FBD7, (_BYTE *)(a1 + 3235), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xA9918CC5FA26ABALL, (_BYTE *)(a1 + 3235), 0);
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0, (_QWORD *)(a1 + 3208));
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0xAF63E24C8601F6BELL, (_QWORD *)(a1 + 3216));
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0xAF63EF4C86020CD5, (_QWORD *)(a1 + 3224));
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x21EA93E0E5D89562, (_BYTE *)(a1 + 3708), 1);
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0x75909A2E7B7A5950, (_QWORD *)(a1 + 3512));
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x81988191775D1F3, (_BYTE *)(a1 + 3232), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x7E8D690E31D04174, (_BYTE *)(a1 + 3233), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x4B67B014335F38D7, (_BYTE *)(a1 + 3234), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x35CA209DCAF9161DLL, (_BYTE *)(a1 + 3236), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x6C8B4995CC5E527ELL, (_BYTE *)(a1 + 3237), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x93BBF08EAB474DB2, (_BYTE *)(a1 + 3238), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xB03C2E5AF042E3A5, (_BYTE *)(a1 + 3240), 1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x8435706FD97519EDLL, (_BYTE *)(a1 + 3241), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xDA7CA283D396F91BLL, (_BYTE *)(a1 + 3242), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x57F5EBD3E10F05D9, (_BYTE *)(a1 + 3243), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xDFF2FE5D542EA31BLL, (_BYTE *)(a1 + 3244), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x74FC82D498616DDCLL, (_BYTE *)(a1 + 3421), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xBDE6380775DA187BLL, (_BYTE *)(a1 + 3432), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8914E07B53BA1E3, (_BYTE *)(a1 + 3408), 1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xAF63EE4C86020B22, (_BYTE *)(a1 + 3288), 1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8B74307B55C5E6FLL, (_BYTE *)(a1 + 3289), 26);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8D55707B5757DFALL, (_BYTE *)(a1 + 3290), 29);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xDFDAC24BD409847CLL, (_BYTE *)(a1 + 3291), -1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x6645A215890A31C2, (_BYTE *)(a1 + 3292), -1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xE86133FFF2272F7BLL, (_BYTE *)(a1 + 11057), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x6FBB85DC095D7E1, (_BYTE *)(a1 + 3293), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xD44840630403593ELL, (_BYTE *)(a1 + 3294), -6);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xD75F16AF99FA6E18, (_BYTE *)(a1 + 3295), 3);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xB570E51110F5B8FDLL, (_BYTE *)(a1 + 3296), 40);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xA0619F0E9B9B103, (_BYTE *)(a1 + 3297), 30);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xFD595764CD149455, (_BYTE *)(a1 + 3298), -1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x98769542C7EBC5D8, (_BYTE *)(a1 + 3299), -1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x322E22E255B64146, (_BYTE *)(a1 + 3300), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x1FEC452F271EF6EALL, (_DWORD *)(a1 + 3304), 11);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x70A12C1952D5628BLL, (_BYTE *)(a1 + 3308), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x3740EA07C0973081, (_BYTE *)(a1 + 3309), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x3740DD07C0971A6ALL, (_BYTE *)(a1 + 3310), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xF8B0C066E05FB132, (_BYTE *)(a1 + 3311), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x53F78B1FC36A960FLL, (_BYTE *)(a1 + 3312), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x822379195CCD6478, (_BYTE *)(a1 + 3313), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xAF63DB4C8601EAD9, (_DWORD *)(a1 + 3316), 0x7FFFFFFF);
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xC0AB56BF45863635, (_DWORD *)(a1 + 3328), dword_1EDBB4C20);
  sub_1B67EFAFC((_QWORD *)(v2 + 3160), 0x72351913690D14, (_DWORD *)(a1 + 3364));
  sub_1B67EFAFC((_QWORD *)(v2 + 3160), 0xA6C1456D3CBB586CLL, (_DWORD *)(a1 + 3368));
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8DC5507B57B9942, (_BYTE *)(a1 + 3400), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x1E5485EF2E9F9384, (_BYTE *)(a1 + 3415), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x832846984DBFE0D9, (_BYTE *)(a1 + 3416), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x54EB290A497D21C7, (_BYTE *)(a1 + 3417), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x822DA0195CD5FB42, (_BYTE *)(a1 + 3418), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x9823E18BF99D7A9, (_BYTE *)(a1 + 3419), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x9BFA121F99ACE953, (_BYTE *)(a1 + 3239), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8D26507B5735FEDLL, (_BYTE *)(a1 + 3409), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8A25007B54A187CLL, (_BYTE *)(a1 + 3410), 3);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x8A24D07B54A1363, (_BYTE *)(a1 + 3411), 1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xCDE5ECAD70CF6CD5, (_BYTE *)(a1 + 3797), 1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xDC9E8F18FEC9589BLL, (_BYTE *)(a1 + 3794), 1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x8AD3B07B553FC52, (_BYTE *)(a1 + 3412), 1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x570AB51944740F8ALL, (_BYTE *)(a1 + 3413), 1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x615A99E879F1FBEDLL, (_DWORD *)(a1 + 3424), 32);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x5334C45223677F91, (_BYTE *)(a1 + 3428), 1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x5F76FE45FB19FE48, (_BYTE *)(a1 + 3429), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x8984D07B541BEDELL, (_DWORD *)(a1 + 3320), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x41B440525D697FF7, (_BYTE *)(a1 + 3753), -1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xF43418886590D867, (_BYTE *)(a1 + 3754), 1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xB85BFD9F3C15B21BLL, (_BYTE *)(a1 + 3755), 2);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x5A76D5720CA84BE6, (_BYTE *)(a1 + 3756), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x42362CEF434B870CLL, (_BYTE *)(a1 + 3430), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x40F0DD8F37FC4C2ELL, (_BYTE *)(a1 + 3431), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x9532CFA66877DD95, (_BYTE *)(a1 + 3433), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xE31989A769C63238, (_BYTE *)(a1 + 3434), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x2B9CFF192BD29267, (_BYTE *)(a1 + 3440), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x7EF6AFD0BC2C3AFBLL, (_BYTE *)(a1 + 3435), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xAF38EF220F97347CLL, (_BYTE *)(a1 + 3436), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xAEC568C75E5A789BLL, (_BYTE *)(a1 + 3441), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xEDFFBC8BA94277D2, (_BYTE *)(a1 + 3442), 1);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x4A6099A424EFF8D8, (_BYTE *)(a1 + 3443), 4);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xD92EDD40EE009C75, (_BYTE *)(a1 + 3444), 1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xDC91E78F7946A89BLL, (_BYTE *)(a1 + 3445), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x32468D84F55FB2A7, (_DWORD *)(a1 + 3452), 1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x9163BFEE0B8BBC39, (_DWORD *)(a1 + 3492), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x6FB4ED4D665CFB53, (_BYTE *)(a1 + 3496), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x672CC44D6190BB64, (_BYTE *)(a1 + 3497), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xF177F127AFD546AFLL, (_BYTE *)(a1 + 3437), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xA8CCC6E13F002CB5, (_BYTE *)(a1 + 3438), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x4CF9EDAEEADD3E2DLL, (_DWORD *)(a1 + 3324), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xE71AB9033F0EDA46, (_BYTE *)(a1 + 3533), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x25CA010D7C67FE5, (_BYTE *)(a1 + 3534), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x362F2028C00751E9, (_DWORD *)(a1 + 3528), -1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x4E05C1AA5BF3BB95, (_DWORD *)(a1 + 3524), -1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x694C40428BDBDE55, (_BYTE *)(a1 + 3532), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xE0B2E769BCA75729, (_BYTE *)(a1 + 3770), -1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x56ADD197B188AB49, (_BYTE *)(a1 + 3536), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x47AA463E24919B8ALL, (_BYTE *)(a1 + 3537), 0);
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0x8860D9D1EF04328, (_QWORD *)(a1 + 3544));
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0x6F04801F48EBD537, (_QWORD *)(a1 + 3552));
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xF0F0537A8BB752CELL, (_BYTE *)(a1 + 3535), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xDF7FDAC19F2075E3, (_BYTE *)(a1 + 3560), 0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xBE27DAD503ACC303, (_BYTE *)(a1 + 3784), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xBC874B605A9708BLL, (_BYTE *)(a1 + 3785), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xD6C905BD7D301F5FLL, (_BYTE *)(a1 + 3420), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x41DFFDF7511DD97, (_DWORD *)(a1 + 3780), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xD2B0E97E2F02AF60, (_DWORD *)(a1 + 3584), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xE7F531AB6DDD32A0, (_BYTE *)(a1 + 3676), 0);
  sub_1B67EFE40((_QWORD *)(v2 + 3160), 0x32B8DD2503E0688BLL, (double *)(a1 + 3680), 0.75);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x8B99A01909551539, (_BYTE *)(a1 + 3704), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xE6E3C883B6C15A05, (_BYTE *)(a1 + 3705), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x3C401D6A027DD916, (_BYTE *)(a1 + 3706), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x4024333BFF24B792, (_BYTE *)(a1 + 3707), 1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x24DC7CA1D440D709, (_DWORD *)(a1 + 3580), 0);
  sub_1B67EFA7C((_QWORD *)(v2 + 3160), 0xFE98FF5FC68FF9F7, (_QWORD *)(a1 + 3568));
  sub_1B67EF76C((_QWORD *)(v2 + 3160), 0xEADA4767E797268BLL, (_WORD *)(a1 + 3598), 0);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x3BEB44829B7A4FABLL, (_BYTE *)(a1 + 3596), 0);
  sub_1B67EF76C((_QWORD *)(v2 + 3160), 0x9FFE593DC10E7CC4, (_WORD *)(a1 + 3600), 2);
  sub_1B67EF76C((_QWORD *)(v2 + 3160), 0x2660BA38B42FDFB5, (_WORD *)(a1 + 3602), 2);
  sub_1B67EF76C((_QWORD *)(v2 + 3160), 0xE961BACE8A163BCBLL, (_WORD *)(a1 + 3604), 2);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x8BA0F8536CDD1EE8, (_DWORD *)(a1 + 3592), -1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xD542D0AE8E599D7FLL, (_DWORD *)(a1 + 3656), -1);
  sub_1B67EFCEC((_QWORD *)(v2 + 3160), 0x78C38F81E9A32BBBLL, (float *)(a1 + 3660), -1.0);
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0xDAFCA2DBC70FE273, (_BYTE *)(a1 + 3709), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xD7F2EB7B92415B9, (_DWORD *)(a1 + 3720), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x36894A690496A6B6, (_DWORD *)(a1 + 3724), 1);
  sub_1B67EFE40((_QWORD *)(v2 + 3160), 0x525D42260F851786, (double *)(a1 + 3728), -1.0);
  sub_1B67EFE40((_QWORD *)(v2 + 3160), 0x25204DD656F00F60, (double *)(a1 + 3736), 0.6);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x8516C6F81EB0D7AALL, (_BYTE *)(a1 + 3786), 1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xE8A2053B823E7F7ELL, (_DWORD *)(a1 + 3588), 3);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x3B036542BE80F4D6, (_DWORD *)(a1 + 3744), 1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xDE9D01B25B989E98, (_DWORD *)(a1 + 3748), 1);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x4B9E18DDB3822E21, (_BYTE *)(a1 + 3752), 1);
  sub_1B67EEBAC(v2 + 3160, 0x4179B3C137C3CEB0, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B6819800, 0);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0x3E7BE8C2CD695C2FLL, (_DWORD *)(a1 + 11076), qword_1B69222C0, 0x7E0471917459E39);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xCF983D241CBF8355, (_BYTE *)(a1 + 3576), 1);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xA059F5697B7486A5, (_DWORD *)(a1 + 3616), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xD09ADAD723F60060, (_DWORD *)(a1 + 3652), 0);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0xCAB54518F478F595, (_DWORD *)(a1 + 3776), qword_1B6922300, 0x3C0D17BAD169557BLL);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0x2FFB828DFAE55635, (_DWORD *)(a1 + 3688), qword_1B6922350, 0x129882191DED2351);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0xD45FA9B580EC2502, (_DWORD *)(a1 + 3692), qword_1B6922380, 0x3C0D17BAD169557BLL);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x5898835E4AFAC0A9, (_DWORD *)(a1 + 3696), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0xBDC9443F1ECE4AAFLL, (_DWORD *)(a1 + 3700), 1);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0xFE31B357AB72A0FLL, (_DWORD *)(a1 + 3360), qword_1B6922200, 0x3C0D17BAD169557BLL);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0xF5B6EA8C35AC1E89, (_DWORD *)(a1 + 3404), qword_1B6922270, 0xC76A095E1FFA22B6);
  sub_1B67EEBAC(v2 + 3160, 0xAF63E84C860200F0, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B6819A88, 1);
  sub_1B67EFAFC((_QWORD *)(v2 + 3160), 0x8ADD349E618BA10ELL, (_DWORD *)(a1 + 3264));
  *(_WORD *)(a1 + 3268) = 0;
  v9 = *(_QWORD *)(a1 + 3192);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 3192);
    while (*(_QWORD *)(v10 + 16) != 0xE8DDC90A9D7C709DLL)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (!v10)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v11 = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v11[1] = v9;
      v11[2] = 0xE8DDC90A9D7C709DLL;
      *((_DWORD *)v11 + 6) = 0;
      *v11 = off_1E6A14D98;
      v11[4] = a1 + 3268;
      *(_QWORD *)(a1 + 3192) = v11;
    }
  }
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x456BDD095F7DB261, (_BYTE *)(a1 + 3256), 0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x9A91BC7C819464BDLL, (_DWORD *)(a1 + 3260), 0);
  sub_1B67EFAFC((_QWORD *)(v2 + 3160), 0xF890AF2C24C4A032, (_DWORD *)(a1 + 3252));
  *(_DWORD *)(a1 + 3270) = 0;
  v12 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v12)
  {
    v12[1] = *(_QWORD *)(a1 + 3192);
    v12[2] = 0xAF63D94C8601E773;
    *v12 = off_1E6A150F0;
    v12[4] = v5;
    v12[5] = sub_1B6819CB8;
    *((_DWORD *)v12 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v12;
  }
  v13 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v13)
  {
    v13[1] = *(_QWORD *)(a1 + 3192);
    v13[2] = 0x8984E07B541C091;
    *v13 = off_1E6A150F0;
    v13[4] = v5;
    v13[5] = sub_1B6819D3C;
    *((_DWORD *)v13 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v13;
  }
  sub_1B67EF8A8((_QWORD *)(v2 + 3160), 0x38D9AFB7AB26693ALL, (_BYTE *)(a1 + 3332), 16);
  *(_DWORD *)v3 = -1;
  v14 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v14)
  {
    v14[1] = *(_QWORD *)(a1 + 3192);
    v14[2] = 0x89E9C01960F4C582;
    *v14 = off_1E6A150F0;
    v14[4] = v5;
    v14[5] = sub_1B6819E54;
    *((_DWORD *)v14 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v14;
  }
  *(_WORD *)(a1 + 3520) = -1;
  *(_BYTE *)(a1 + 3522) = 0;
  v15 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v15)
  {
    v15[1] = *(_QWORD *)(a1 + 3192);
    v15[2] = 0x144BEF24C3493907;
    *v15 = off_1E6A150F0;
    v15[4] = v5;
    v15[5] = sub_1B6819F44;
    *((_DWORD *)v15 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v15;
  }
  sub_1B67EEBAC(v2 + 3160, 0x8A24307B54A0265, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B6819800, 0);
  sub_1B67EEBAC(v2 + 3160, 0x8C84307B56AD1A2, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B6819800, 0);
  sub_1B67EEBAC(v2 + 3160, 0x571BB01944827A3ELL, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B6819800, 0);
  v16 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v16)
  {
    v16[1] = *(_QWORD *)(a1 + 3192);
    v16[2] = 0x8C49EF6ED9F28EA0;
    *v16 = off_1E6A150F0;
    v16[4] = v5;
    v16[5] = sub_1B681A00C;
    *((_DWORD *)v16 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v16;
  }
  v17 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v17)
  {
    v17[1] = *(_QWORD *)(a1 + 3192);
    v17[2] = 0x81C3B0CF315BC925;
    *v17 = off_1E6A150F0;
    v17[4] = v5;
    v17[5] = sub_1B681A00C;
    *((_DWORD *)v17 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v17;
  }
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x8AC625BB85ED202BLL, (_BYTE *)(a1 + 11000), 0);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0xDA3A876E9663D9D3, (_DWORD *)(a1 + 11004), qword_1B69223C0, 0xF558F5F15591240FLL);
  v18 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v18)
  {
    v18[1] = *(_QWORD *)(a1 + 3192);
    v18[2] = 0x61AE097211DF6CF1;
    *v18 = off_1E6A150F0;
    v18[4] = v5;
    v18[5] = sub_1B67EEC28;
    *((_DWORD *)v18 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v18;
  }
  *(_DWORD *)(a1 + 10728) = 0;
  *(_DWORD *)(a1 + 3456) = 1;
  *(_QWORD *)(a1 + 3460) = 0;
  *(_QWORD *)(a1 + 3476) = 0;
  *(_QWORD *)(a1 + 3468) = 0;
  *(_QWORD *)(a1 + 3484) = 0x100000000;
  v19 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v19)
  {
    v19[1] = *(_QWORD *)(a1 + 3192);
    v19[2] = 0xA72E681EA6EA2FFDLL;
    *v19 = off_1E6A150F0;
    v19[4] = v5;
    v19[5] = sub_1B681A13C;
    *((_DWORD *)v19 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v19;
  }
  memset_pattern16((void *)(a1 + 3372), &unk_1B69180F0, 0x1CuLL);
  v20 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v20)
  {
    v20[1] = *(_QWORD *)(a1 + 3192);
    v20[2] = 0x6CF5678DCDBE0466;
    *v20 = off_1E6A150F0;
    v20[4] = v5;
    v20[5] = sub_1B681A24C;
    *((_DWORD *)v20 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v20;
  }
  sub_1B67EEBAC(v2 + 3160, 0x50F6C19BB163CD98, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B681A2E0, 0);
  sub_1B67EEBAC(v2 + 3160, 0x3DC4253E192FDEDLL, (void (*)(uint64_t, uint64_t, _QWORD))sub_1B6819800, 0);
  *(_BYTE *)(a1 + 3620) = 0;
  v21 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v21)
  {
    v21[1] = *(_QWORD *)(a1 + 3192);
    v21[2] = 0x90898E7CB0F4FE00;
    *v21 = off_1E6A150F0;
    v21[4] = v5;
    v21[5] = sub_1B681AAEC;
    *((_DWORD *)v21 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v21;
  }
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xBE39025BC18BBD08, (_BYTE *)(a1 + 3787), 0);
  *(_QWORD *)(a1 + 11016) = -1;
  *(_QWORD *)(a1 + 11008) = -1;
  v22 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v22)
  {
    v22[1] = *(_QWORD *)(a1 + 3192);
    v22[2] = 0x52E68AA04356963;
    *v22 = off_1E6A150F0;
    v22[4] = v5;
    v22[5] = sub_1B681AB8C;
    *((_DWORD *)v22 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v22;
  }
  memset_pattern16((void *)(a1 + 11024), &unk_1B6918100, 0x10uLL);
  v23 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v23)
  {
    v23[1] = *(_QWORD *)(a1 + 3192);
    v23[2] = 0xA0BC688F59BD24B8;
    *v23 = off_1E6A150F0;
    v23[4] = v5;
    v23[5] = sub_1B681AC54;
    *((_DWORD *)v23 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v23;
  }
  *(_QWORD *)(a1 + 11048) = -1;
  *(_QWORD *)(a1 + 11040) = -1;
  v24 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  if (v24)
  {
    v24[1] = *(_QWORD *)(a1 + 3192);
    v24[2] = 0x242E7F5AFD2DD5D8;
    *v24 = off_1E6A150F0;
    v24[4] = v5;
    v24[5] = sub_1B681AD24;
    *((_DWORD *)v24 + 6) = 0;
    *(_DWORD *)(a1 + 3200) &= ~(*(int *)(a1 + 3200) >> 31);
    *(_QWORD *)(a1 + 3192) = v24;
  }
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0xC86457BBA942E4AALL, (_BYTE *)(a1 + 11058), 0);
  sub_1B67EFCEC((_QWORD *)(v2 + 3160), 0xDE0ED602D6B626A9, (float *)(a1 + 11060), 0.0);
  sub_1B67EFCEC((_QWORD *)(v2 + 3160), 0xDDF3C802D69F4727, (float *)(a1 + 11064), 16.0);
  sub_1B67EF62C((_QWORD *)(v2 + 3160), 0x9D4699E02AD040AELL, (_DWORD *)(a1 + 3504), 1);
  sub_1B67EE854((_QWORD *)(v2 + 3160), 0x5A91365701952647, (_DWORD *)(a1 + 11068), qword_1B69223F0, 0x5DC77784260A7236);
  sub_1B67EF9E4((_QWORD *)(v2 + 3160), 0x98DBF09461943FA1, (_BYTE *)(a1 + 11072), 0);
  *(_OWORD *)(a1 + 12776) = 0u;
  *(_OWORD *)(a1 + 12792) = 0u;
  *(_OWORD *)(a1 + 12760) = 0u;
  bzero((void *)(a1 + 11088), 0x660uLL);
  *(_QWORD *)(a1 + 12808) = 850045863;
  *(_OWORD *)(a1 + 12816) = 0u;
  *(_OWORD *)(a1 + 12832) = 0u;
  *(_OWORD *)(a1 + 12848) = 0u;
  *(_QWORD *)(a1 + 12864) = 0;
  *(_DWORD *)(a1 + 13236) = 0;
  *(_QWORD *)(a1 + 13240) = 0;
  *(_OWORD *)(a1 + 12880) = 0u;
  *(_OWORD *)(a1 + 12896) = 0u;
  *(_OWORD *)(a1 + 12912) = 0u;
  *(_OWORD *)(a1 + 12928) = 0u;
  *(_OWORD *)(a1 + 12944) = 0u;
  *(_OWORD *)(a1 + 12960) = 0u;
  *(_OWORD *)(a1 + 12976) = 0u;
  *(_OWORD *)(a1 + 12992) = 0u;
  *(_OWORD *)(a1 + 13008) = 0u;
  *(_OWORD *)(a1 + 13024) = 0u;
  *(_OWORD *)(a1 + 13040) = 0u;
  *(_OWORD *)(a1 + 13056) = 0u;
  *(_OWORD *)(a1 + 13072) = 0u;
  *(_OWORD *)(a1 + 13088) = 0u;
  *(_OWORD *)(a1 + 13104) = 0u;
  *(_OWORD *)(a1 + 13120) = 0u;
  *(_OWORD *)(a1 + 13136) = 0u;
  *(_OWORD *)(a1 + 13152) = 0u;
  *(_OWORD *)(a1 + 12728) = 0u;
  *(_OWORD *)(a1 + 12744) = 0u;
  *(_QWORD *)(a1 + 13256) = 0;
  *(_QWORD *)(a1 + 13272) = 0;
  *(_QWORD *)(a1 + 13264) = 0;
  v30 = 0uLL;
  sub_1B67C49BC(v4, &v30);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v28 = *MEMORY[0x1E0C80C20];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v28;
  *(_DWORD *)(a1 + 11080) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 13288) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_DWORD *)(a1 + 1020) = 0;
  return a1;
}

void sub_1B6806E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;

  *(_QWORD *)(v10 + 3184) = &off_1E6A14DC0;
  v16 = *(_QWORD **)(v10 + 3192);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)v16[1];
      (*(void (**)(_QWORD *))(*v16 + 16))(v16);
      v16 = v17;
    }
    while (v17);
  }
  std::mutex::~mutex(a10);
  sub_1B6803F4C(v13);
  sub_1B6772C88(v11);
  sub_1B6772C88(v12);
  if (*(_QWORD *)v14)
  {
    free(*(void **)v14);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B6806E70(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)(a1 + 12800) || (result = sub_1B6806EF8(a1), !(_DWORD)result))
  {
    v3 = *(_QWORD *)(a1 + 13272);
    if (!v3)
      return 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

const void **sub_1B6806EBC(const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1B6777A90(result);
    JUMPOUT(0x1BCC9814CLL);
  }
  return result;
}

uint64_t sub_1B6806EF8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int64x2_t v25;
  uint64_t *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  double v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  int v42;
  int v43;
  __int16 *v44;
  int v45;
  int v46;
  float v47;
  double v48;
  int *v49;
  double v50;
  uint64_t v51;
  int v52;
  double v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  v69 = 0;
  v70 = 0;
  v66 = &v66;
  v67 = (uint64_t *)&v66;
  v68 = 0;
  v2 = *(_DWORD *)(a1 + 12876);
  if (v2 < 1)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    v4 = (int *)(a1 + 3456);
    v5 = *(unsigned int *)(a1 + 12876);
    do
    {
      v6 = *v4++;
      v3 = v6 + (int)v3;
      --v5;
    }
    while (v5);
  }
  if (*(int *)(a1 + 4 * v2 + 3456) >= 1)
  {
    v7 = 0;
    v8 = (int64x2_t *)(a1 + 12792);
    do
    {
      v9 = *(unsigned __int8 *)(a1 + 108 * (v7 + v3) + 3814);
      if (*(_QWORD *)(a1 + 12800) >= v9)
      {
        v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 12768)
                                    + (((v9 + *(_QWORD *)(a1 + 12792) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v9 + *(_BYTE *)(a1 + 12792) - 1));
        sub_1B67B665C(&v69, *v10, v10[1]);
        v11 = v69;
        if (*(_BYTE *)(a1 + 12872))
        {
          *(_BYTE *)(v69 + 640) = 2;
          *(_OWORD *)(v11 + 652) = xmmword_1B6917880;
          *(_BYTE *)(v11 + 736) = 1;
          *(float *)(v11 + 2720) = (float)(*(char *)(*(_QWORD *)(v11 + 584) + 3289) + 3);
        }
        else if (!*(_BYTE *)(v69 + 417))
        {
          v12 = *(unsigned int *)(a1 + 12876);
          *(_DWORD *)(v69 + 648) = v7 + v3;
          v13 = *(_QWORD *)(v11 + 584);
          v14 = *(_DWORD *)(v13 + 10728);
          *(_DWORD *)(v11 + 728) = v14;
          if ((int)v12 >= 1)
          {
            v15 = (int *)(v13 + 10732);
            v16 = v12;
            do
            {
              v17 = *v15++;
              v14 += v17;
              *(_DWORD *)(v11 + 728) = v14;
              --v16;
            }
            while (v16);
          }
          *(_DWORD *)(v11 + 732) = *(_DWORD *)(v13 + 4 * (int)v12 + 10732) + v14;
        }
        v18 = operator new(0x20uLL);
        v19 = v70;
        v18[2] = v11;
        v18[3] = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        v22 = (uint64_t)v66;
        *v18 = v66;
        v18[1] = &v66;
        *(_QWORD *)(v22 + 8) = v18;
        v66 = v18;
        ++v68;
        v2 = *(_DWORD *)(a1 + 12876);
      }
      ++v7;
      v23 = *(int *)(a1 + 4 * v2 + 3456);
    }
    while (v7 < v23);
    if ((int)v23 >= 1)
    {
      v24 = 0;
      do
      {
        if (!*(_QWORD *)(a1 + 12800))
          break;
        sub_1B6772C88(*(_QWORD *)(*(_QWORD *)(a1 + 12768) + ((*(_QWORD *)(a1 + 12792) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * *(_QWORD *)(a1 + 12792));
        v25 = vaddq_s64(*v8, (int64x2_t)xmmword_1B6917580);
        *v8 = v25;
        if (v25.i64[0] >= 0x200uLL)
        {
          operator delete(**(void ***)(a1 + 12768));
          *(_QWORD *)(a1 + 12768) += 8;
          *(_QWORD *)(a1 + 12792) -= 256;
        }
        ++v24;
      }
      while (v24 < *(_DWORD *)(a1 + 4 * *(int *)(a1 + 12876) + 3456));
    }
  }
  v26 = v67;
  if (v67 != (uint64_t *)&v66)
  {
    while (1)
    {
      sub_1B67B665C(&v69, v26[2], v26[3]);
      if (!v69)
      {
        v57 = 4294954385;
        goto LABEL_102;
      }
      std::mutex::lock((std::mutex *)(a1 + 12808));
      v27 = operator new(0x20uLL);
      v28 = v70;
      v27[2] = v69;
      v27[3] = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = *(_QWORD *)(a1 + 1024);
      *v27 = v31;
      v27[1] = a1 + 1024;
      *(_QWORD *)(v31 + 8) = v27;
      *(_QWORD *)(a1 + 1024) = v27;
      ++*(_QWORD *)(a1 + 1040);
      std::mutex::unlock((std::mutex *)(a1 + 12808));
      v32 = *(_QWORD *)(a1 + 13256);
      if (v32)
        break;
LABEL_79:
      sub_1B680768C(a1, v69);
      v57 = v56;
      if ((_DWORD)v56)
        goto LABEL_102;
      v26 = (uint64_t *)v26[1];
      if (v26 == (uint64_t *)&v66)
        goto LABEL_100;
    }
    if (*(_DWORD *)(v69 + 644) && (!*(_BYTE *)(v69 + 3025) || *(_DWORD *)(v32 + 424)))
    {
LABEL_77:
      if (!*(_DWORD *)(a1 + 3696))
        sub_1B6859090(v32, v69);
      goto LABEL_79;
    }
    v33 = *(_QWORD **)(v32 + 840);
    v34 = *((_DWORD *)v33 + 38);
    *(_DWORD *)(v32 + 948) = 28;
    *(_DWORD *)(v32 + 16) = 0;
    if (*((double *)v33 + 16) <= 0.0)
      v35 = 30.0;
    else
      v35 = *((double *)v33 + 16);
    *(double *)(v32 + 952) = v35;
    v36 = *(_QWORD *)(v32 + 392);
    v37 = *(char *)(v36 + 336);
    if (v37 != -1)
    {
      *(_DWORD *)(v32 + 16) = v37;
      goto LABEL_74;
    }
    if (*(_DWORD *)(v36 + 64) == 43)
    {
      v38 = *(char *)(v36 + 115);
      if (v38 >= 1)
      {
        v39 = v38;
LABEL_73:
        *(_DWORD *)(v32 + 948) = v39;
        goto LABEL_74;
      }
      *(_DWORD *)(v32 + 16) = 0;
      if (((**(uint64_t (***)(_QWORD))*v33)(*v33) & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(v32 + 392) + 58))
      {
        if (v34 >= 360000)
          v60 = 360000;
        else
          v60 = v34;
        v61 = (int)(log2(360000.0 / (double)v60) * 6.0 + 0.5);
        if (v61 >= 11)
          v61 = 11;
        v39 = v61 + 24;
        goto LABEL_73;
      }
      if (v34 >= 360000)
        v58 = 360000;
      else
        v58 = v34;
      v59 = (int)(log2(360000.0 / (double)v58) * 6.0 + 0.5) + 24;
      if (*(_DWORD *)(v32 + 284) < v59)
        v59 = *(_DWORD *)(v32 + 284);
      *(_DWORD *)(v32 + 948) = v59;
      if (v34 < 90000)
        *(_DWORD *)(v32 + 16) += (int)((double)(90000 - v34) * 10.0 / 90000.0);
    }
    else
    {
      v40 = 0;
      while (dword_1B692345C[v40] > v34)
      {
        if (++v40 == 9)
          goto LABEL_50;
      }
      if ((_DWORD)v40)
      {
        v41 = (double)dword_1B6923480[v40]
            + (double)(v34 - dword_1B692345C[v40])
            / (double)(dword_1B692345C[(v40 - 1)] - dword_1B692345C[v40])
            * (double)(dword_1B6923480[(v40 - 1)] - dword_1B6923480[v40]);
        goto LABEL_51;
      }
LABEL_50:
      v41 = (double)(v34 + 25567) / 0.04;
LABEL_51:
      v42 = *(__int16 *)(v36 + 86);
      v43 = *(__int16 *)(v36 + 88);
      if (((**(uint64_t (***)(_QWORD))*v33)(*v33) & 1) != 0 || *(_BYTE *)(*(_QWORD *)(v32 + 392) + 58))
      {
        v44 = (__int16 *)(v32 + 26);
        v45 = -1;
        do
        {
          v46 = *v44 * *(v44 - 1);
          v47 = *(float *)(v44 - 3);
          ++v45;
          v44 += 4;
        }
        while (v41 < (float)(v47 * (float)v46));
        *(_DWORD *)(v32 + 16) = v45;
        v48 = v47;
        if (v35 <= v48)
          v48 = v35;
      }
      else
      {
        v46 = v43 * v42;
        v48 = v41 / (double)(v43 * v42);
        if (v35 < v48)
          v48 = v35;
      }
      *(double *)(v32 + 952) = v48;
      v49 = *(int **)(v32 + 840);
      if (v49[936] < 2)
      {
        v50 = v48;
      }
      else
      {
        do
        {
          v50 = v35;
          v35 = v35 * 0.5;
        }
        while (v35 > v48);
      }
      v51 = 0;
      v52 = (int)(v50 * (double)v46);
      while (dword_1B6923480[v51] > v52)
      {
        if (++v51 == 9)
          goto LABEL_67;
      }
      if ((_DWORD)v51)
      {
        v53 = (double)dword_1B692345C[v51]
            + (double)(v52 - dword_1B6923480[v51])
            / (double)(dword_1B6923480[(v51 - 1)] - dword_1B6923480[v51])
            * (double)(dword_1B692345C[(v51 - 1)] - dword_1B692345C[v51]);
        goto LABEL_68;
      }
LABEL_67:
      v53 = (double)v52 * 0.04 + 25567.0;
LABEL_68:
      *(_DWORD *)(v32 + 948) = (int)(log2(v53 / (double)v49[38]) * 6.0 + 35.0 + 0.5);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v49 + 16))(*(_QWORD *)v49))
      {
        v39 = *(_DWORD *)(v32 + 316);
        v54 = *(_DWORD *)(v32 + 948);
        if (v54 < v39)
          v39 = *(_DWORD *)(v32 + 948);
        if (v54 <= 30)
          v39 = 30;
        goto LABEL_73;
      }
    }
LABEL_74:
    v55 = *(_DWORD *)(v32 + 16);
    if (v55 >= 31)
      v55 = 31;
    *(_DWORD *)(v32 + 16) = v55;
    v32 = *(_QWORD *)(a1 + 13256);
    if (!v32)
      goto LABEL_79;
    goto LABEL_77;
  }
LABEL_100:
  v57 = 0;
LABEL_102:
  sub_1B6803F4C((uint64_t *)&v66);
  v62 = v70;
  if (v70)
  {
    v63 = (unint64_t *)&v70->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  return v57;
}

void sub_1B6807654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1B6803F4C((uint64_t *)va);
  sub_1B6772C88((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1B680768C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  NSObject *v48;
  const char *v49;
  int *v50;
  __CVBuffer *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::mutex *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  __CVBuffer *v67;
  OSType PixelFormatType;
  __CVBuffer *v69;
  int Width;
  __CVBuffer *v71;
  int Height;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  __CVBuffer *v78;
  __CVBuffer *v79;
  int v80;
  int v81;
  int v82;
  CFDictionaryRef DictionaryRepresentation;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  double v114;
  double v115;
  double v116;
  int v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  char *v122;
  unsigned int v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  BOOL v128;
  std::mutex *v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  char v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  CMTimeValue value;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  __int128 v179;
  void **v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  __int128 v186;
  BOOL v187;
  unsigned int v188;
  char v189;
  char v190;
  int v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  double v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  unint64_t v212;
  int v213;
  unsigned int v214;
  float v215;
  double v216;
  double v217;
  unint64_t v218;
  double v219;
  double v220;
  double v221;
  _BOOL4 v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  double v227;
  uint64_t v228;
  int v229;
  char v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  int v236;
  double v237;
  double v238;
  double v239;
  uint64_t v240;
  int v241;
  double v242;
  uint64_t v243;
  _BOOL4 v244;
  uint64_t v245;
  float v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  int v252;
  int v253;
  float v254;
  double v255;
  double v256;
  double v257;
  long double v258;
  double v259;
  int v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  __CVBuffer *v267;
  OSType v268;
  int v269;
  int v270;
  id *v271;
  uint64_t v272;
  void *v273;
  unsigned int v274;
  double v275;
  double v276;
  uint64_t v277;
  double v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  float v282;
  unint64_t *v283;
  unint64_t v284;
  double v285;
  double v286;
  float v287;
  uint64_t v289;
  unsigned int *v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  int v304;
  int v305;
  double v306;
  int v307;
  int v308;
  int v309;
  double v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  double *v316;
  double v317;
  double v318;
  NSObject *v319;
  const char *v320;
  uint32_t v321;
  int v322;
  float v323;
  int v324;
  float v325;
  uint64_t v326;
  float v327;
  uint64_t v328;
  double v329;
  double v330;
  unint64_t v331;
  char **v332;
  char *v333;
  char *v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  char **v342;
  char *v343;
  char *v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  char *v349;
  float v350;
  int v351;
  int v352;
  float v353;
  uint64_t v354;
  double v355;
  float v356;
  float v357;
  char v358;
  int v359;
  float v360;
  double v361;
  double v362;
  double v363;
  uint64_t v364;
  double v365;
  int v366;
  uint64_t v367;
  int *v368;
  uint64_t v369;
  int *v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int *v375;
  unsigned int v376;
  unsigned int v377;
  double v378;
  uint64_t v379;
  std::mutex *v380;
  int v381;
  unsigned int v382;
  uint64_t v383;
  double *v384;
  int v385;
  uint64_t v386;
  const void *v387;
  _QWORD *v388;
  uint64_t v389;
  void (*v390)(_QWORD *);
  uint64_t v391;
  _QWORD *v392;
  _DWORD *v393;
  uint64_t v394;
  int v395;
  unint64_t v396;
  uint64_t v397;
  int *v398;
  uint64_t v399;
  uint64_t v400;
  int32x2_t *v401;
  int32x2_t *v402;
  int32x2_t v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  uint64_t v412;
  signed int v413;
  _BOOL4 v414;
  uint64_t v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  unint64_t v422;
  unint64_t *v423;
  int v424;
  uint64_t v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  int v431;
  signed int v432;
  signed int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  int v439;
  int **v440;
  uint64_t v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  int v455;
  int v456;
  int v457;
  char v458;
  char v459;
  unint64_t v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  _DWORD *v466;
  uint64_t v467;
  uint64_t v468;
  _DWORD *v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t *v473;
  NSObject *v474;
  const char *v475;
  int v476;
  uint64_t v477;
  int v478;
  unint64_t v479;
  unsigned int v480;
  void *v481;
  uint64_t v482;
  unsigned __int8 *v483;
  unint64_t v484;
  int v485;
  int v486;
  unint64_t v487;
  unsigned __int8 *v488;
  unsigned int v489;
  unsigned int v490;
  _BOOL4 v491;
  int v492;
  int v493;
  unsigned int v494;
  unsigned int v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unsigned int *v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  float v509;
  uint64_t v510;
  _QWORD *v511;
  char v512;
  _QWORD *v513;
  void *v514;
  void *v515;
  void *v516;
  void *v517;
  unint64_t *v518;
  unint64_t v519;
  int v520;
  char v521;
  int v522;
  int v523;
  int v524;
  uint64_t v525;
  BOOL v526;
  uint64_t v527;
  int v528;
  char v529;
  uint64_t v530;
  int v531;
  int v532;
  char v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  unsigned int v537;
  int *v538;
  int *v539;
  int v540;
  __int16 *v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  unsigned int v546;
  uint64_t v547;
  int v548;
  int v549;
  double v550;
  unsigned int v551;
  std::exception_ptr v552;
  int *v553;
  uint64_t v554;
  unint64_t v555;
  int v556;
  uint64_t v557;
  uint64_t *v558;
  int v559;
  uint64_t v560;
  int v561;
  int v562;
  int v563;
  int v564;
  _BOOL4 v565;
  uint64_t v566;
  uint64_t v567;
  int v568;
  int v569;
  unsigned int v570;
  signed int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  uint64_t v577;
  int v578;
  uint64_t *v579;
  void **v580;
  CFDictionaryRef propertyValue;
  std::mutex *propertyValuea;
  char *propertyValueb;
  int v584;
  unsigned int v585;
  int v586[2];
  std::__shared_weak_count *v587;
  int v588;
  int v589[2];
  int v590[2];
  CMTime v592;
  CMTime v593;
  CMTime v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  int *v597;
  std::__shared_weak_count *v598;
  std::exception_ptr v599;
  std::unique_lock<std::mutex> extraRowsOnBottom;
  uint64_t v601;
  __int128 v602;
  uint64_t v603;
  CMTime time;
  __int128 v605;
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  CGRect v609;
  CGRect v610;

  v608 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 592);
  v4 = *(std::__shared_weak_count **)(a2 + 600);
  v595 = v3;
  v596 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v587 = v4;
  memset(&v594, 0, sizeof(v594));
  CMTimeMake(&v594, *(_QWORD *)(v3 + 16), *(_DWORD *)(v3 + 32));
  time = v594;
  CMTimeGetSeconds(&time);
  kdebug_trace();
  v7 = a2;
  if (*(_BYTE *)a2)
  {
    v8 = *(_QWORD *)(a1 + 13272);
    if (!v8
      || *(_DWORD *)(a1 + 3696) != 1
      || (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8)) == 0)
    {
      v592 = v594;
      sub_1B680B0E4(a1, (uint64_t)&v592);
      goto LABEL_625;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_517;
    LOWORD(time.value) = 0;
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_65;
  }
  v11 = *(_BYTE **)(a2 + 16);
  if (v11[33])
  {
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v11 + 8))(v11))
    {
      v12 = *(_QWORD *)(a2 + 2712) + 8 * *(int *)(*(_QWORD *)(a2 + 2712) + 16);
      v13 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(v13 + 8) = *(__int16 *)(v12 + 24);
      *(_DWORD *)(v13 + 12) = *(__int16 *)(v12 + 26);
      v14 = 1 << (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 128))(*(_QWORD *)(a2 + 16));
    }
    else
    {
      v14 = 0;
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16)))
    {
      v15 = *(_QWORD *)(a2 + 2712) + 8 * *(int *)(*(_QWORD *)(a2 + 2712) + 16);
      v16 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(v16 + 8) = *(__int16 *)(v15 + 24);
      *(_DWORD *)(v16 + 12) = *(__int16 *)(v15 + 26);
      v14 |= 1 << (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 136))(*(_QWORD *)(a2 + 16));
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16)))
      v14 |= 1 << (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 152))(*(_QWORD *)(a2 + 16));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16)))
      v14 |= 1 << (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 160))(*(_QWORD *)(a2 + 16));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 56))(*(_QWORD *)(a2 + 16)))
    {
      v17 = a2;
      if (!*(_BYTE *)(*(_QWORD *)(a2 + 584) + 952))
        goto LABEL_27;
      v18 = *(float *)(a2 + 3084);
      if (v18 == 0.0)
        goto LABEL_27;
      v19 = *(float *)(a2 + 3088);
      if (v19 == 0.0)
        goto LABEL_27;
      v20 = *(_QWORD *)(a2 + 24);
      __asm { FMOV            V4.2D, #-0.5 }
      *(float32x2_t *)(v20 + 52) = vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 3076)), vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v19), LODWORD(v18))), _Q4)));
      *(float *)(v20 + 60) = v18;
      *(float *)(v20 + 64) = v19;
      v14 |= 1 << (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
    }
    v17 = a2;
LABEL_27:
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v17 + 16) + 64))(*(_QWORD *)(v17 + 16)))
    {
      v25 = *(_QWORD *)(a2 + 608);
      v26 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v26 + 68) = *(_QWORD *)(v25 + 260);
      *(_DWORD *)(v26 + 76) = *(_DWORD *)(v25 + 268);
      v14 |= 1 << (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 184))(*(_QWORD *)(a2 + 16));
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 152))(*(_QWORD *)(a2 + 24), v14, *(_QWORD *)(a2 + 16));
    v27 = *(_DWORD **)(a2 + 24);
    v28 = *(_QWORD *)(a2 + 592);
    v29 = *(_DWORD *)(v28 + 276);
    v30 = *(_DWORD *)(v28 + 280);
    v27[9] = 0;
    v27[11] = 0;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27))
      v29 = v27[2];
    v27[10] = v29 - 1;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27))
      v30 = v27[3];
    v27[12] = v30 - 1;
    v7 = a2;
  }
  v31 = *(_QWORD *)(v7 + 584);
  if (!*(_BYTE *)(v31 + 3244))
    goto LABEL_56;
  v32 = (***(uint64_t (****)(_QWORD))(v7 + 16))(*(_QWORD *)(v7 + 16));
  v7 = a2;
  if (!v32)
    goto LABEL_56;
  v33 = *(_QWORD *)(a2 + 2712);
  if (!v33)
    goto LABEL_56;
  v34 = v33 + 8 * *(int *)(v33 + 16);
  v35 = *(__int16 *)(v34 + 24);
  v36 = *(_QWORD *)(a2 + 592);
  *(_DWORD *)(v36 + 248) = v35;
  v37 = *(__int16 *)(v34 + 26);
  *(_DWORD *)(v36 + 252) = v37;
  if (v35 >= 1)
  {
    v38 = *(_QWORD *)(a2 + 608);
    *(_DWORD *)(v38 + 240) = v35;
    *(_DWORD *)(v38 + 244) = v37;
  }
  v39 = *(_QWORD *)(a2 + 760);
  *(_DWORD *)(*(_QWORD *)(v39 + 24) + 80) = *(_DWORD *)(v31 + 11076);
  v40 = *(std::__shared_weak_count **)(a2 + 600);
  v597 = (int *)v36;
  v598 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  if (!*(_BYTE *)(v36 + 136)
    || (v43 = *(_DWORD *)(v36 + 248)) == 0
    || (v44 = *(_DWORD *)(v36 + 252)) == 0
    || v43 == *(_DWORD *)(v36 + 240) && v44 == *(_DWORD *)(v36 + 244))
  {
    v9 = 0;
    *(_QWORD *)(v36 + 248) = 0;
    goto LABEL_48;
  }
  v67 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 104))(v36);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v67);
  if (!CVIsCompressedPixelFormatAvailable(PixelFormatType))
  {
    v119 = *(int *)(v36 + 280);
    if ((_DWORD)v119)
    {
      v120 = *(_QWORD *)(v36 + 216);
      v121 = *(int *)(v36 + 276);
      v122 = *(char **)(v36 + 192);
      do
      {
        --v119;
        memset(v122, 128, v121);
        v122 += v120;
      }
      while (v119);
      v123 = *(_DWORD *)(v36 + 280);
      if (v123 >= 2)
      {
        v124 = *(int *)(v36 + 276);
        v125 = *(_QWORD *)(v36 + 224);
        v126 = (uint64_t)(int)v123 >> 1;
        v127 = *(char **)(v36 + 200);
        do
        {
          --v126;
          memset(v127, 128, v124);
          v127 += v125;
        }
        while (v126);
      }
    }
  }
  v69 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36);
  Width = CVPixelBufferGetWidth(v69);
  v71 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36);
  Height = CVPixelBufferGetHeight(v71);
  v73 = *(_DWORD *)(v36 + 240);
  if (v73 >= Width)
    v73 = Width;
  v588 = v73;
  if (*(_DWORD *)(v36 + 244) >= Height)
    v74 = Height;
  else
    v74 = *(_DWORD *)(v36 + 244);
  v584 = v74;
  v75 = *(_QWORD *)(v39 + 24);
  v77 = *(_DWORD *)(v36 + 248);
  v76 = *(_DWORD *)(v36 + 252);
  v78 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36);
  v79 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 104))(v36);
  v9 = sub_1B68520B8((_DWORD *)v75, v588, v584, v77, v76, v78, v79);
  if (!v9)
  {
    v80 = *(_DWORD *)(v75 + 80);
    if (v80 == 2)
    {
      v180 = *(void ***)(v75 + 4256);
      if (v180)
      {
        v181 = *(_QWORD *)(v75 + 4248);
        v183 = *(_QWORD *)(v75 + 64);
        v182 = *(_QWORD *)(v75 + 72);
        v184 = (void *)MEMORY[0x1BCC98608]();
        v185 = *v180;
        *(_QWORD *)&v186 = v181;
        *((_QWORD *)&v186 + 1) = HIDWORD(v181);
        *(_OWORD *)&time.value = v186;
        *(_QWORD *)&v186 = v183;
        *((_QWORD *)&v186 + 1) = HIDWORD(v183);
        v605 = v186;
        time.epoch = 0;
        v606 = 1;
        *(_QWORD *)&v186 = v182;
        *((_QWORD *)&v186 + 1) = HIDWORD(v182);
        extraRowsOnBottom.__m_ = 0;
        *(_QWORD *)&extraRowsOnBottom.__owns_ = 0;
        v602 = v186;
        v601 = 0;
        v603 = 1;
        v9 = objc_msgSend(v185, "scaleFrame:dstFrame:srcRegion:dstRegion:scaleMethod:", v78, v79, &time, &extraRowsOnBottom, 1);
        objc_autoreleasePoolPop(v184);
        goto LABEL_414;
      }
    }
    else
    {
      if (v80 != 1)
      {
        if (v80)
        {
          v9 = -12910;
          if (dword_1EF137CD0 >= -12910)
          {
            fwrite("Unknown vra source scaling method\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(time.value) = 0;
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknown vra source scaling method\n", (uint8_t *)&time, 2u);
            }
          }
        }
        else
        {
          v609.size.height = (double)*(int *)(v75 + 68);
          v609.size.width = (double)*(int *)(v75 + 64);
          v609.origin.x = (double)*(int *)(v75 + 4248);
          v609.origin.y = (double)*(int *)(v75 + 4252);
          v82 = *(_DWORD *)(v75 + 72);
          v81 = *(_DWORD *)(v75 + 76);
          propertyValue = CGRectCreateDictionaryRepresentation(v609);
          v610.size.width = (double)v82;
          v610.size.height = (double)v81;
          v610.origin.x = 0.0;
          v610.origin.y = 0.0;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v610);
          v84 = *(const void **)(v75 + 4264);
          if (v84)
          {
            v9 = VTSessionSetProperty(v84, (CFStringRef)*MEMORY[0x1E0CED850], propertyValue);
            if (!v9)
            {
              v9 = VTSessionSetProperty(*(VTSessionRef *)(v75 + 4264), (CFStringRef)*MEMORY[0x1E0CED7D0], DictionaryRepresentation);
              if (!v9)
                v9 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v75 + 4264), v78, v79);
            }
          }
          else
          {
            v9 = -12902;
          }
          if (propertyValue)
            CFRelease(propertyValue);
          if (DictionaryRepresentation)
            CFRelease(DictionaryRepresentation);
        }
        goto LABEL_414;
      }
      v173 = *(void ***)(v75 + 4256);
      if (v173)
      {
        v174 = *(_QWORD *)(v75 + 4248);
        v176 = *(_QWORD *)(v75 + 64);
        v175 = *(_QWORD *)(v75 + 72);
        v177 = (void *)MEMORY[0x1BCC98608]();
        v178 = *v173;
        *(_QWORD *)&v179 = v174;
        *((_QWORD *)&v179 + 1) = HIDWORD(v174);
        *(_OWORD *)&time.value = v179;
        *(_QWORD *)&v179 = v176;
        *((_QWORD *)&v179 + 1) = HIDWORD(v176);
        v605 = v179;
        time.epoch = 0;
        v606 = 1;
        *(_QWORD *)&v179 = v175;
        *((_QWORD *)&v179 + 1) = HIDWORD(v175);
        extraRowsOnBottom.__m_ = 0;
        *(_QWORD *)&extraRowsOnBottom.__owns_ = 0;
        v602 = v179;
        v601 = 0;
        v603 = 1;
        v9 = objc_msgSend(v178, "scaleFrameBilinear:dstFrame:srcRegion:dstRegion:", v78, v79, &time, &extraRowsOnBottom);
        objc_autoreleasePoolPop(v177);
        goto LABEL_414;
      }
    }
    v9 = -12911;
LABEL_414:
    CVBufferPropagateAttachments(v78, v79);
    if (!v9)
    {
      v267 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 104))(v36);
      v268 = CVPixelBufferGetPixelFormatType(v267);
      if (CVIsCompressedPixelFormatAvailable(v268))
      {
        v269 = *(_DWORD *)(v36 + 252);
        v270 = v588 - *(_DWORD *)(v36 + 248);
        LODWORD(time.value) = 0;
        HIDWORD(time.value) = v270;
        time.timescale = 0;
        time.flags = v584 - v269;
        *(_DWORD *)&extraRowsOnBottom.__owns_ = 128;
        extraRowsOnBottom.__m_ = (std::unique_lock<std::mutex>::mutex_type *)0x8000000080;
        v271 = *(id **)(v39 + 32);
        v272 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 104))(v36);
        v273 = (void *)MEMORY[0x1BCC98608]();
        objc_msgSend(*v271, "FillBoundary:padSize:fillValues:", v272, &time, &extraRowsOnBottom);
        objc_autoreleasePoolPop(v273);
      }
      v9 = 0;
      *(_OWORD *)(v36 + 88) = *(_OWORD *)(v36 + 192);
      *(_OWORD *)(v36 + 112) = *(_OWORD *)(v36 + 216);
    }
  }
LABEL_48:
  if (v40)
  {
    v45 = (unint64_t *)&v40->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v7 = a2;
  if (v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v47 = *(_DWORD *)(a2 + 644);
      LODWORD(time.value) = 67109120;
      HIDWORD(time.value) = v47;
      v48 = MEMORY[0x1E0C81028];
      v49 = "Frame %d: Preprocess failed\n";
      goto LABEL_556;
    }
LABEL_518:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_805;
    LODWORD(time.value) = 67109120;
    HIDWORD(time.value) = v9;
    v319 = MEMORY[0x1E0C81028];
    v320 = "Compress() receives an error: %d\n";
    goto LABEL_520;
  }
LABEL_56:
  v50 = *(int **)(v7 + 592);
  if (v50[69] < 193 || v50[70] <= 96)
  {
    v51 = (__CVBuffer *)(*(uint64_t (**)(int *))(*(_QWORD *)v50 + 88))(v50);
    time.value = 0;
    extraRowsOnBottom.__m_ = 0;
    CVPixelBufferGetExtendedPixels(v51, 0, (size_t *)&time, 0, (size_t *)&extraRowsOnBottom);
    if (time.value | (CMTimeValue)extraRowsOnBottom.__m_)
      CVPixelBufferFillExtendedPixels(v51);
  }
  v52 = *(_QWORD *)(a1 + 13272);
  if (v52)
  {
    if (*(_DWORD *)(a1 + 3696) == 1)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 64))(v52);
      if (v9)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
LABEL_517:
          v7 = a2;
          goto LABEL_518;
        }
        LOWORD(time.value) = 0;
        v10 = MEMORY[0x1E0C81028];
LABEL_65:
        _os_log_error_impl(&dword_1B676B000, v10, OS_LOG_TYPE_ERROR, "FinishPendingFrames failed\n", (uint8_t *)&time, 2u);
        goto LABEL_517;
      }
    }
  }
  v593 = v594;
  sub_1B680B0E4(a1, (uint64_t)&v593);
  v53 = *(_QWORD *)(a1 + 13256);
  if (v53 && *(int *)(a1 + 3696) >= 1)
    sub_1B6859090(v53, a2);
  if (*(_BYTE *)a2)
    goto LABEL_625;
  v54 = a2;
  if (!*(_BYTE *)(a2 + 417))
  {
    v9 = sub_1B6813110(a2, 0);
    if (v9)
    {
      v7 = a2;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v66 = *(_DWORD *)(a2 + 644);
        LODWORD(time.value) = 67109120;
        HIDWORD(time.value) = v66;
        v48 = MEMORY[0x1E0C81028];
        v49 = "Frame %d: Precompress failed\n";
        goto LABEL_556;
      }
      goto LABEL_518;
    }
    v54 = a2;
    sub_1B67B665C((_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 592), *(_QWORD *)(a2 + 600));
  }
  if (*(_BYTE *)(a1 + 3768) && *(_BYTE *)(v54 + 640))
  {
    v55 = (std::mutex *)(*(_QWORD *)(v54 + 584) + 1048);
    std::mutex::lock(v55);
    v56 = operator new();
    sub_1B67CD164(v56, *(_QWORD *)(a2 + 584) + 12880);
    v57 = operator new(0x188uLL);
    v58 = (_QWORD *)(a2 + 768);
    v57[1] = 0;
    v57[2] = 0;
    *v57 = &off_1E6A15AD8;
    time.value = sub_1B67CD164((uint64_t)(v57 + 3), v56);
    *(_QWORD *)&time.timescale = v57;
    v59 = (uint64_t *)(a2 + 744);
    sub_1B67C49BC(a2 + 744, (__int128 *)&time.value);
    v60 = *(std::__shared_weak_count **)&time.timescale;
    if (*(_QWORD *)&time.timescale)
    {
      v61 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = 272;
    do
    {
      sub_1B6772C88(v56 + v63);
      v63 -= 16;
    }
    while (v63);
    MEMORY[0x1BCC9814C](v56, 0x10A0C4003C0FE58);
    v64 = *(_QWORD *)(a2 + 584);
    if (*(_QWORD *)(v64 + 1040) >= 2uLL)
    {
      sub_1B680F4BC(&time, *(_QWORD *)(v64 + 48), 0);
      if (time.value)
        v65 = *(_DWORD *)(time.value + 4);
      else
        v65 = 0;
      v85 = *(_QWORD *)(a2 + 584);
      v86 = v85 + 1024;
      v87 = *(_QWORD *)(v85 + 1032);
      if (v87 != v85 + 1024)
      {
        do
        {
          v88 = *(_QWORD *)(v87 + 16);
          if (*(_DWORD *)(*(_QWORD *)(a2 + 608) + 680) != *(_DWORD *)(*(_QWORD *)(v88 + 608) + 680))
          {
            v89 = *v59;
            if (*(_BYTE *)(v88 + 640))
            {
              sub_1B67CDC54(*v59, *(unsigned int **)(v88 + 1096));
              sub_1B67CDC08(*v59);
            }
            else
            {
              for (i = 16; i != 288; i += 16)
                sub_1B67C7674((_QWORD *)(v89 + i));
            }
            v91 = *(_QWORD *)(v87 + 16);
            *(_BYTE *)(v91 + 416) = 1;
            ++v65;
            v92 = *(_QWORD *)(v91 + 608);
            *(_DWORD *)(v92 + 684) = v65;
            *(_BYTE *)(v92 + 45) = 1;
            v93 = *v59;
            v94 = 16;
            while (1)
            {
              v95 = *(_QWORD *)(v93 + v94);
              if (v95)
              {
                if (*(_DWORD *)(v95 + 680) == *(_DWORD *)(v91 + 432))
                  break;
              }
              v94 += 16;
              if (v94 == 288)
                goto LABEL_114;
            }
            sub_1B67C7674((_QWORD *)(v93 + v94));
            v91 = *(_QWORD *)(v87 + 16);
            v92 = *(_QWORD *)(v91 + 608);
LABEL_114:
            if (*(_DWORD *)(v92 + 36))
            {
              v96 = (_DWORD *)*v59;
              v97 = *(_QWORD *)(v91 + 40);
              v98 = *(unsigned __int8 *)(v97 + 2025);
              LODWORD(v97) = *(unsigned __int8 *)(v97 + 2024);
              v96[89] = *(_DWORD *)(v92 + 12);
              v96[90] = v98;
              v96[91] = v97;
              v99 = *(std::__shared_weak_count **)(v91 + 616);
              if (v99)
              {
                v100 = (unint64_t *)&v99->__shared_owners_;
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
                sub_1B67CDBC0((uint64_t)v96, v92, (uint64_t)v99);
                v102 = (unint64_t *)&v99->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              else
              {
                sub_1B67CDBC0((uint64_t)v96, v92, 0);
              }
            }
          }
          v87 = *(_QWORD *)(v87 + 8);
        }
        while (v87 != v86);
      }
      v104 = *(std::__shared_weak_count **)&time.timescale;
      v58 = (_QWORD *)(a2 + 768);
      if (*(_QWORD *)&time.timescale)
      {
        v105 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
    }
    if (sub_1B6830B60(v58))
    {
      if (dword_1EF137CD0 >= 2)
      {
        fwrite("Setup References failed; Encode IDR\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(time.value) = 0;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Setup References failed; Encode IDR\n",
            (uint8_t *)&time,
            2u);
        }
      }
      *(_BYTE *)(a2 + 640) = 0;
    }
    std::mutex::unlock(v55);
    v54 = a2;
  }
  v107 = *(_QWORD *)(a1 + 13256);
  if (!v107)
    goto LABEL_613;
  v108 = *(_DWORD *)(*(_QWORD *)(v54 + 608) + 680);
  v109 = *(_QWORD *)(v54 + 584);
  v110 = *(_DWORD *)(v109 + 3780);
  v111 = *(_DWORD *)(v109 + 3776);
  *(_WORD *)(v54 + 408) = 0;
  *(_BYTE *)(v54 + 410) = 1;
  if (v111)
  {
    if (v111 == 1)
    {
      v112 = *(_QWORD *)(v54 + 1072);
      if (*(__int16 *)(v112 + 8 * *(int *)(v112 + 16) + 24) < 321
        || *(_BYTE *)(v112 + 276) && *(int *)(v112 + 12) < 3)
      {
        goto LABEL_162;
      }
      v113 = *(unsigned __int16 *)(v112 + 8 * *(int *)(v112 + 16) + 24);
      if (v113 == 480)
      {
        v114 = *(double *)(v54 + 2440);
        v115 = 13.0;
      }
      else
      {
        if (v113 < 0x190)
          goto LABEL_163;
        v114 = *(double *)(v54 + 2440);
        v115 = 12.0;
      }
      if (v114 > v115)
      {
LABEL_162:
        v128 = 0;
LABEL_164:
        *(_BYTE *)(v54 + 408) = v128;
        *(_BYTE *)(v54 + 409) = v128;
        goto LABEL_165;
      }
LABEL_163:
      v128 = *(_DWORD *)(*(_QWORD *)(v54 + 1064) + 412) < 8;
      goto LABEL_164;
    }
    if (v110 < 0)
    {
      v118 = 1;
      goto LABEL_151;
    }
    if (v110)
    {
LABEL_149:
      v118 = v108 % (v110 + 1) == 0;
LABEL_151:
      *(_BYTE *)(v54 + 408) = v118;
      goto LABEL_165;
    }
    v116 = *(double *)(*(_QWORD *)(v54 + 2712) + 416);
    if (v116 >= 12.0)
    {
      v117 = 15 - (int)(v116 + 0.5);
      if (v117 >= 3)
        v117 = 3;
      v110 = dword_1B69221F0[v117 & ~(v117 >> 31)];
      goto LABEL_149;
    }
  }
LABEL_165:
  v129 = (std::mutex *)(*(_QWORD *)(v107 + 840) + 1048);
  std::mutex::lock(v129);
  v130 = *(_DWORD *)(a2 + 644);
  v585 = *(unsigned __int8 *)(a2 + 640);
  v131 = *(_QWORD *)(v107 + 840);
  v577 = *(_QWORD *)(a2 + 3008);
  *(_QWORD *)&v607 = -1;
  *((_QWORD *)&v607 + 1) = -1;
  propertyValuea = v129;
  sub_1B680F4BC(&time, *(_QWORD *)(v131 + 48), 0);
  v132 = *(_OWORD *)&time.value;
  time.value = 0;
  *(_QWORD *)&time.timescale = 0;
  v133 = *(std::__shared_weak_count **)(v107 + 376);
  *(_OWORD *)(v107 + 368) = v132;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = *(std::__shared_weak_count **)&time.timescale;
  if (*(_QWORD *)&time.timescale)
  {
    v137 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = *(_QWORD *)(v107 + 392);
  v140 = *(_DWORD *)(v139 + 64);
  _ZF = v140 == 38 || v140 == 20;
  if (_ZF)
  {
    v142 = *(_BYTE *)(v139 + 58);
    if (v142)
      v142 = *(_DWORD *)(a2 + 440) == 1;
  }
  else
  {
    v142 = 0;
  }
  v573 = v130;
  *(_BYTE *)(v107 + 324) = v142;
  v143 = *(_QWORD *)(a2 + 3008);
  v144 = 72;
  if (!*(_DWORD *)(v107 + 916))
    v144 = 76;
  v145 = *(_DWORD *)(v143 + v144);
  v146 = v143 + 136 + 120 * v145;
  if (v145 >= 7)
    v146 = 0;
  if (v145 == 9)
    v146 = v143 + 976;
  *(_QWORD *)v589 = v146;
  if (*(_QWORD *)(v107 + 344))
  {
    v147 = *(_QWORD *)(v107 + 368);
    sub_1B680F4BC(&time, *(_QWORD *)(*(_QWORD *)(v107 + 840) + 48), 1u);
    value = time.value;
    v148 = *(std::__shared_weak_count **)&time.timescale;
    if (*(_QWORD *)&time.timescale)
    {
      v150 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v152 = *(_QWORD *)(v107 + 344);
    v153 = *(_QWORD *)(a2 + 2176);
    if (v153)
      v154 = *(_DWORD *)(v152 + 60) <= 0;
    else
      v154 = 0;
    if (v154)
    {
      v159 = *(_DWORD *)(v152 + 12);
      v160 = *(_DWORD *)v152 & -v159;
      v161 = *(_DWORD *)(v152 + 4) & -v159;
      if (v161 < 1)
      {
        v166 = 0;
        v165 = 0;
        v164 = 0;
      }
      else
      {
        LODWORD(v162) = 0;
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v166 = 0;
        do
        {
          if (v160 >= 1)
          {
            v167 = 0;
            v162 = (int)v162;
            do
            {
              v168 = *(unsigned int *)(v153 + 4 * v162++);
              v165 += v168;
              if (v168 <= *(_DWORD *)(v152 + 8))
                v168 = 0;
              else
                ++v166;
              v164 += v168;
              v167 += v159;
            }
            while (v167 < v160);
          }
          v163 += v159;
        }
        while (v163 < v161);
      }
      v169 = *(int *)(v152 + 16);
      v170 = v161 * v160;
      v171 = v159 * v159;
      v157 = (v165 * v169 + (v170 >> 1)) / (unint64_t)v170;
      if (v166 <= 0)
        LODWORD(v156) = 0;
      else
        v156 = (v164 * v169 + ((v166 * v171) >> 1)) / (unint64_t)(v166 * v171);
      v155 = (v166 + ((v170 / v171) >> 7)) / ((v170 / v171) >> 6);
      v158 = ((int)v156 > 10) | (2 * (v155 > 8));
    }
    else
    {
      v155 = 0;
      LODWORD(v156) = 0;
      LODWORD(v157) = 0;
      v158 = 0;
    }
    if (!v147
      || !(v157 | v155 | v156) && !*(_BYTE *)(v147 + 141) && !*(_BYTE *)(v147 + 142))
    {
      v172 = 0;
      goto LABEL_247;
    }
    if (v155 > 1 || (int)v156 >= 2)
    {
      if (v155 > 1 || (int)v156 >= 3)
      {
        if (v155 > 3 || (int)v156 >= 5)
        {
          if (v155 >= 24)
          {
            v172 = 200;
            if (v158 == 3)
            {
              v187 = *(_DWORD *)(v147 + 136) > 1u;
              if (v155 <= *(_DWORD *)(v152 + 76))
                v172 = 200;
              else
                v172 = 100;
              goto LABEL_248;
            }
          }
          else
          {
            v172 = 4;
          }
        }
        else
        {
          v172 = 3;
        }
      }
      else
      {
        v172 = 2;
      }
    }
    else
    {
      v172 = 1;
    }
    v188 = *(_DWORD *)(v147 + 136);
    v187 = v188 > 1 || v158 < 2;
    if (v158 < 2)
    {
      if (*(_BYTE *)(v147 + 142) || v188 >= 2)
      {
        if (value)
          v192 = *(_BYTE *)(value + 142) == 0;
        else
          v192 = 1;
        if (*(_BYTE *)(v147 + 142))
          v189 = v192;
        else
          v189 = 1;
        goto LABEL_259;
      }
LABEL_247:
      v189 = 0;
LABEL_259:
      v187 = 0;
      v190 = 0;
      *(_QWORD *)(v152 + 52) = (*(_DWORD *)(v152 + 52) + 1);
LABEL_260:
      *(_BYTE *)(v143 + 108) = v190;
      *(_BYTE *)(v143 + 109) = v187;
      *(_BYTE *)(v143 + 110) = v189;
      *(_BYTE *)(v143 + 111) = v187 | v190;
      *(_DWORD *)(v143 + 112) = v157;
      *(_DWORD *)(v143 + 116) = v156;
      *(_DWORD *)(v143 + 120) = v155;
      *(_DWORD *)(v143 + 124) = v158;
      *(_DWORD *)(v143 + 128) = v172;
      v139 = *(_QWORD *)(v107 + 392);
      goto LABEL_261;
    }
LABEL_248:
    v189 = 0;
    v190 = !v187;
    v191 = *(_DWORD *)(v152 + 56);
    if (v191 < 3)
      v190 = 1;
    if (v191 <= 1)
      v187 = 0;
    *(_DWORD *)(v152 + 52) = 0;
    *(_DWORD *)(v152 + 56) = v191 + 1;
    goto LABEL_260;
  }
LABEL_261:
  if (*(int *)(v139 + 560) >= 1)
  {
    v193 = 0;
    v194 = v107 + 848;
    do
    {
      sub_1B6856070(*(_QWORD *)(v194 + 8 * v193), v143);
      v195 = *(_QWORD *)(v194 + 8 * v193);
      v196 = *(_QWORD *)(a2 + 3008);
      v197 = *(_DWORD *)(v195 + 356);
      v198 = v196 + 976;
      v199 = v196 + 120 * v197 + 136;
      if (v197 >= 7)
        v199 = 0;
      if (v197 == 9)
        v199 = v198;
      v200 = *(_QWORD *)(v195 + 8);
      v201 = *(_DWORD *)(a2 + 448);
      v202 = *(_QWORD *)(a2 + 592);
      v203 = *(_QWORD *)(v202 + 16);
      v204 = *(unsigned int *)(v202 + 32);
      v205 = *(double *)(v199 + 8);
      if (v201 <= 0)
        v201 = *(_DWORD *)(v200 + 32);
      else
        *(_DWORD *)(v200 + 32) = v201;
      v206 = *(_DWORD *)(v200 + 28);
      if (v206 > v201)
      {
        v207 = *(_QWORD *)(v200 + 16);
        v208 = v203 - v207;
        v209 = v203 < 1 || (int)v204 < 1;
        v210 = v209 || v207 < 1;
        v211 = v210 || (uint64_t)v208 < 1;
        if (v211 || v208 >= 20 * v204)
          LODWORD(v212) = (int)(1000.0 / v205);
        else
          v212 = 1000 * v208 / v204;
        v213 = v206 - v212;
        if (v213 > v201)
          v201 = v213;
      }
      *(_DWORD *)(v200 + 28) = v201;
      *(_QWORD *)(v200 + 16) = v203;
      if (v201 <= (int)(3000.0 / v205))
        v201 = (int)(3000.0 / v205);
      *(_DWORD *)(v199 + 16) = v201;
      sub_1B6855C90(v195, (_QWORD *)a2);
      ++v193;
    }
    while (v193 < *(int *)(*(_QWORD *)(v107 + 392) + 560));
  }
  v214 = *(_DWORD *)(v131 + 284);
  v215 = *(float *)(v131 + 288);
  if ((int)v214 <= 0)
    v214 = -1;
  if (v215 <= 0.0)
  {
    v217 = *(double *)(v107 + 416);
  }
  else
  {
    v216 = v215;
    v217 = *(double *)(v107 + 416);
    if (v214 >= (v216 * v217 + 0.5))
      v214 = (v216 * v217 + 0.5);
    if (v214 <= 1)
      v214 = 1;
  }
  if (v214 == -1)
    v214 = 0;
  if ((double)v214 / v217 > 60.0)
    v214 = 0;
  *(_DWORD *)(v107 + 424) = v214;
  if (!v145 && v214)
  {
    sub_1B6856070(*(_QWORD *)(v107 + 904), v143);
    LODWORD(v218) = *(_DWORD *)(v107 + 424);
    v219 = *(double *)(v107 + 416) / (double)v218;
    *(double *)(v143 + 984) = v219;
    if (*(double *)(v143 + 976) <= 0.0)
    {
      v220 = *(double *)(v143 + 1016);
      v221 = *(double *)(v143 + 176);
      v222 = v221 < 0.00000011920929;
      if (v220 < 0.00000011920929)
        v222 = 1;
      if (v222)
      {
        v220 = 1.0;
        v221 = 1.0;
      }
      *(double *)(v143 + 976) = **(double **)v589
                              * (v219
                               * v220
                               / (v219 * v220 + (*(double *)(*(_QWORD *)v589 + 8) - v219) * v221));
    }
    if (!v585)
    {
      v223 = *(_QWORD *)(v107 + 904);
      if (*(_QWORD *)(v223 + 8))
      {
        v224 = (int)(1000.0 / v219);
        if (*(_DWORD *)(v143 + 152) > v224)
          v224 = *(_DWORD *)(v143 + 152);
        *(_DWORD *)(v143 + 992) = v224;
        sub_1B6855C90(v223, (_QWORD *)a2);
      }
    }
  }
  if (*(_BYTE *)(v107 + 824))
  {
    if (*(_DWORD *)(*(_QWORD *)v589 + 116))
      v225 = 0;
    else
      v225 = *(_DWORD *)(v107 + 464) + 1;
    *(_DWORD *)(v107 + 464) = v225;
    v226 = *(_DWORD *)(v107 + 308);
    if (v226 == 0x80000000)
    {
      if (*(_DWORD *)(*(_QWORD *)(a2 + 592) + 280) * *(_DWORD *)(*(_QWORD *)(a2 + 592) + 276) > 5595136)
      {
        v227 = **(double **)v589;
        v228 = *(_QWORD *)(*(_QWORD *)(v107 + 8 * (int)v145 + 848) + 8);
        if (v228)
          v229 = *(_DWORD *)(v228 + 28);
        else
          v229 = -1;
        v231 = (40000000.0 - v227) / 3333333.33;
        if (v227 >= 40000000.0)
          v231 = 0.0;
        v154 = v227 > 20000000.0;
        v232 = 6.0;
        if (v154)
          v232 = v231;
        if (v229 >= 675)
          v229 = 675;
        if (v229 <= 75)
          v229 = 75;
        v233 = v232 + (double)(int)dword_1B6922628[*(unsigned int *)(v107 + 320)] + (double)(v229 - 75) / -100.0;
        v234 = 51.0;
        if (v233 < 51.0)
          v234 = v233;
        if (v233 <= 0.0)
          v235 = 0.0;
        else
          v235 = v234;
        *(double *)(v107 + 816) = v235;
        *(double *)(v107 + 808) = v235 + -5.0;
      }
      goto LABEL_342;
    }
LABEL_326:
    v230 = 0;
    *(double *)(v107 + 816) = (double)v226;
    goto LABEL_343;
  }
  v226 = *(_DWORD *)(v107 + 308);
  if (v226 != 0x80000000)
    goto LABEL_326;
LABEL_342:
  v230 = 1;
LABEL_343:
  v236 = *(_DWORD *)(v107 + 312);
  if (v236 == 0x80000000)
  {
    if (*(_DWORD *)(v107 + 320) != 4)
      goto LABEL_349;
    v237 = 12.0;
    if (**(double **)v589 <= 399999.0)
      goto LABEL_349;
  }
  else
  {
    v237 = (double)v236;
  }
  *(double *)(v107 + 832) = v237;
LABEL_349:
  v238 = *(double *)(v107 + 832);
  v239 = *(double *)(v107 + 816);
  if (v238 > v239)
  {
    if ((v230 & 1) != 0)
    {
      if (v236 != 0x80000000)
        *(double *)(v107 + 816) = v238;
    }
    else
    {
      *(double *)(v107 + 832) = v239;
    }
  }
  v240 = 448;
  if (v585 < 2)
    v240 = 440;
  *(_QWORD *)(v143 + 24) = *(_QWORD *)(v131 + v240);
  sub_1B6857A50(v107, v143, v585);
  v241 = *(char *)(a2 + 640);
  v242 = *(double *)(v107 + 448);
  sub_1B680F36C(&v597, *(_QWORD *)(*(_QWORD *)(v107 + 840) + 48));
  v244 = v597
      && (v243 = *(_QWORD *)(v107 + 392), *(int *)(v243 + 512) <= 1)
      && *(int *)(v243 + 560) >= 2
      && *((_BYTE *)v597 + 130)
      && *((unsigned __int8 *)v597 + 111) != 0;
  v245 = *(_QWORD *)(a2 + 3008);
  v246 = 0.0;
  if (!v245)
    goto LABEL_488;
  v247 = 72;
  if (!*(_DWORD *)(v107 + 916))
    v247 = 76;
  v248 = *(_DWORD *)(v245 + v247);
  v249 = v245 + 120 * v248 + 136;
  if (v248 >= 7)
    v249 = 0;
  if (v248 == 9)
    v250 = v245 + 976;
  else
    v250 = v249;
  if (!v250)
  {
LABEL_487:
    LOBYTE(v245) = 0;
LABEL_488:
    v9 = -12902;
    goto LABEL_505;
  }
  v251 = ceil(v242);
  v252 = *(_DWORD *)(a2 + 644);
  if (*(_BYTE *)(a2 + 2704))
  {
    if (v252)
    {
      v253 = 28;
LABEL_427:
      v255 = (double)v253;
      goto LABEL_428;
    }
LABEL_426:
    v253 = *(_DWORD *)(v107 + 948);
    goto LABEL_427;
  }
  if (!v252)
    goto LABEL_426;
  if (v244)
  {
    sub_1B680F36C((int **)&time, *(_QWORD *)(*(_QWORD *)(v107 + 840) + 48));
    sub_1B680F4BC(&extraRowsOnBottom, *(_QWORD *)(*(_QWORD *)(v107 + 840) + 48), 1u);
    if (time.value
      && extraRowsOnBottom.__m_
      && (v254 = *(float *)(time.value + 116), *(float *)&extraRowsOnBottom.__m_[1].__m_.__opaque[44] > v254)
      && *(float *)(time.value + 88) < 0.2)
    {
      v255 = v254 + 0.5;
      *(_BYTE *)(v245 + 84) = 1;
    }
    else
    {
      v256 = *(double *)(v245 + 56);
      if (v256 <= 0.0)
      {
        v259 = v251 + 4.0;
      }
      else
      {
        v257 = (double)(unint64_t)(8 * *(_QWORD *)(time.value + 40)) / v256;
        v258 = exp2((*(float *)(time.value + 116) + -12.0) / 6.0);
        v259 = log(v257 * (v258 * 0.850000024) / 0.850000024) * 6.0 / 0.693147181 + 12.0;
      }
      v260 = (int)(v259 + 0.5);
      if (v251 + 2.0 >= (double)v260)
        v255 = v251 + 2.0;
      else
        v255 = (double)v260;
    }
    v261 = *(std::__shared_weak_count **)&extraRowsOnBottom.__owns_;
    if (*(_QWORD *)&extraRowsOnBottom.__owns_)
    {
      v262 = (unint64_t *)(*(_QWORD *)&extraRowsOnBottom.__owns_ + 8);
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 - 1, v262));
      if (!v263)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
    v264 = *(std::__shared_weak_count **)&time.timescale;
    if (*(_QWORD *)&time.timescale)
    {
      v265 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
      do
        v266 = __ldaxr(v265);
      while (__stlxr(v266 - 1, v265));
      if (!v266)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
    }
    goto LABEL_428;
  }
  if (*(_BYTE *)(v107 + 824))
  {
    if (*(_BYTE *)(a2 + 3024))
    {
      if (*(int *)(*(_QWORD *)(v107 + 392) + 560) <= 1
        && !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(v107 + 840) + 16))(**(_QWORD **)(v107 + 840)))
      {
        v255 = *(double *)(v107 + 808);
        goto LABEL_428;
      }
      v253 = *(_DWORD *)(v107 + 316);
      goto LABEL_427;
    }
    if (*(_DWORD *)(v107 + 456) > *(_DWORD *)(v107 + 776) && *(_BYTE *)(a2 + 2))
    {
      v255 = v251;
      if (*(int *)(v250 + 116) >= 1)
      {
        if (v251 - *(double *)(v107 + 784) >= *(double *)(v107 + 832))
          v255 = v251 - *(double *)(v107 + 784);
        else
          v255 = *(double *)(v107 + 832);
      }
      goto LABEL_428;
    }
    v274 = *(_DWORD *)(v107 + 464);
    if (v274 > *(_DWORD *)(v107 + 780) && !*(_BYTE *)(a2 + 2))
    {
      v255 = v251 + (double)v274 * *(double *)(v107 + 800);
      v278 = *(double *)(v107 + 816);
      if (v278 >= v255)
        goto LABEL_428;
      goto LABEL_425;
    }
  }
  if (*(_BYTE *)(a2 + 3025) && !*(_DWORD *)(v107 + 424))
    goto LABEL_426;
  sub_1B68580AC(v107, v241, a2);
  v255 = (double)(int)(v275 + 0.5);
  if ((*(_DWORD *)(v107 + 320) | 2) == 3 && *(_QWORD *)(v107 + 344))
  {
    v276 = *(double *)v250;
    v277 = *(_QWORD *)(a2 + 3008);
    CMTimeMake(&time, *(_QWORD *)(*(_QWORD *)(a2 + 592) + 16), *(_DWORD *)(*(_QWORD *)(a2 + 592) + 32));
    v278 = sub_1B68585B0(v107, v277 + 108, &time, v255, v276);
LABEL_425:
    v255 = v278;
  }
LABEL_428:
  if (*(_BYTE *)(v107 + 824))
  {
    v279 = *(_DWORD *)(v107 + 468);
    if (v279)
    {
      v280 = *(_QWORD *)(v245 + 96);
      if (v280)
      {
        *(_QWORD *)(v245 + 96) = 0;
        extraRowsOnBottom.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v280 + 24);
        extraRowsOnBottom.__owns_ = 1;
        std::mutex::lock((std::mutex *)(v280 + 24));
        std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v280, &extraRowsOnBottom);
        v281 = *(_QWORD *)(v280 + 16);
        v599.__ptr_ = 0;
        std::exception_ptr::~exception_ptr(&v599);
        if (v281)
        {
          std::exception_ptr::exception_ptr(&v599, (const std::exception_ptr *)(v280 + 16));
          v552.__ptr_ = &v599;
          std::rethrow_exception(v552);
          __break(1u);
          return;
        }
        v282 = *(float *)(v280 + 140);
        if (extraRowsOnBottom.__owns_)
          std::mutex::unlock(extraRowsOnBottom.__m_);
        v283 = (unint64_t *)(v280 + 8);
        do
          v284 = __ldaxr(v283);
        while (__stlxr(v284 - 1, v283));
        if (!v284)
          (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
        v285 = 0.0;
        if (v282 >= 0.05)
        {
          v286 = *(double *)(v107 + 808) - v255;
          v287 = v286 * (float)(logf(v282) + 2.9957) / 2.99573231;
          v285 = v287;
        }
        v255 = (double)(int)(v255 + v285);
        v279 = *(_DWORD *)(v107 + 468);
      }
      else if (*(_QWORD *)(v107 + 472) == *(_QWORD *)(*(_QWORD *)(a2 + 592) + 16))
      {
        v255 = *(double *)(v107 + 808);
      }
      *(_DWORD *)(v107 + 468) = v279 - 1;
    }
  }
  if (*(int *)(*(_QWORD *)(v107 + 392) + 560) >= 2
    && (*(unsigned int (**)(_QWORD))(***(_QWORD ***)(v107 + 840) + 16))(**(_QWORD **)(v107 + 840))
    && !*(_BYTE *)(a2 + 3025)
    && !v244)
  {
    v289 = *(_QWORD *)(a2 + 592);
    if (*(_BYTE *)(v289 + 136))
    {
      v290 = *(unsigned int **)(a2 + 1096);
      v291 = v290[1];
      if ((int)v291 >= 1)
      {
        v292 = (uint64_t *)(v290 + 6);
        do
        {
          v293 = *v292;
          if (!*v292)
            goto LABEL_487;
          v294 = *(_DWORD *)(v289 + 248);
          if (v294 <= 0)
            v294 = *(_DWORD *)(v289 + 240);
          if (*(_DWORD *)(v293 + 240) < v294)
            goto LABEL_489;
          v295 = *(_DWORD *)(v289 + 252);
          if (v295 <= 0)
            v295 = *(_DWORD *)(v289 + 244);
          if (*(_DWORD *)(v293 + 244) < v295)
          {
LABEL_489:
            v306 = (double)*(int *)(v107 + 284);
            goto LABEL_490;
          }
          v292 += 2;
        }
        while (--v291);
      }
      v296 = v290[2];
      if ((int)v296 >= 1)
      {
        v297 = (uint64_t *)(v290 + 70);
        do
        {
          v298 = *v297;
          if (!*v297)
            goto LABEL_487;
          v299 = *(_DWORD *)(v289 + 248);
          if (v299 <= 0)
            v299 = *(_DWORD *)(v289 + 240);
          if (*(_DWORD *)(v298 + 240) < v299)
            goto LABEL_489;
          v300 = *(_DWORD *)(v289 + 252);
          if (v300 <= 0)
            v300 = *(_DWORD *)(v289 + 244);
          if (*(_DWORD *)(v298 + 244) < v300)
            goto LABEL_489;
          v297 += 2;
        }
        while (--v296);
      }
      v301 = v290[3];
      if ((int)v301 >= 1)
      {
        v302 = (uint64_t *)(v290 + 134);
        do
        {
          v303 = *v302;
          if (!*v302)
            goto LABEL_487;
          v304 = *(_DWORD *)(v289 + 248);
          if (v304 <= 0)
            v304 = *(_DWORD *)(v289 + 240);
          if (*(_DWORD *)(v303 + 240) < v304)
            goto LABEL_489;
          v305 = *(_DWORD *)(v289 + 252);
          if (v305 <= 0)
            v305 = *(_DWORD *)(v289 + 244);
          if (*(_DWORD *)(v303 + 244) < v305)
            goto LABEL_489;
          v302 += 2;
        }
        while (--v301);
      }
    }
    if (v251 >= v255)
      v306 = v255;
    else
      v306 = v251;
    if (!*(_BYTE *)(a2 + 2))
      v306 = v255;
LABEL_490:
    v307 = *(_DWORD *)(v107 + 4 * *(int *)(v245 + 76) + 920);
    if (v307 == 6)
      goto LABEL_495;
    v308 = *(char *)(*(_QWORD *)(v107 + 392) + 109);
    if ((double)*(int *)(v107 + 284) + (double)v308 < v306)
      v306 = (double)*(int *)(v107 + 284) + (double)v308;
    if (v307 || *(_DWORD *)(v107 + 16))
    {
LABEL_495:
      v309 = *(_DWORD *)(v107 + 280);
      if (v306 < (double)v309)
        v306 = (double)v309;
    }
    if (v251 + -1.0 >= v306)
      v255 = v251 + -1.0;
    else
      v255 = v306;
  }
  v9 = 0;
  v310 = *(double *)(v107 + 832);
  if (v255 >= v310)
    v310 = v255;
  if (*(double *)(v107 + 816) < v310)
    v310 = *(double *)(v107 + 816);
  LOBYTE(v245) = 1;
  *(_BYTE *)(a2 + 2704) = 1;
  v246 = v310;
  *(double *)(v107 + 448) = v246;
LABEL_505:
  v311 = v598;
  if (v598)
  {
    v312 = (unint64_t *)&v598->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  if ((v245 & 1) == 0)
  {
    std::mutex::unlock(propertyValuea);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_517;
    v7 = a2;
    v359 = *(_DWORD *)(a2 + 644);
    LODWORD(time.value) = 67109120;
    HIDWORD(time.value) = v359;
    v48 = MEMORY[0x1E0C81028];
    v49 = "Frame %d: RateControlBeforeEncoding failed\n";
LABEL_556:
    _os_log_error_impl(&dword_1B676B000, v48, OS_LOG_TYPE_ERROR, v49, (uint8_t *)&time, 8u);
    goto LABEL_518;
  }
  v314 = *(_QWORD *)(v107 + 392);
  if (!*(_BYTE *)(v314 + 58) || *(_DWORD *)(v314 + 560) != 1)
  {
    *(_QWORD *)(v107 + 416) = *(_QWORD *)v143;
    goto LABEL_522;
  }
  if (!*(_BYTE *)(a2 + 3025))
  {
    v353 = *(double *)v143;
    v354 = *(_QWORD *)(a2 + 3008);
    v355 = v353;
    if (vabdd_f64(*(double *)(v107 + 736), v353) > 0.5)
      *(double *)(v107 + 736) = v355;
    v356 = (float)*(int *)(v107 + 284);
    v357 = v246;
    if (v246 >= v356)
    {
      v357 = v246;
      if (*(int *)(v107 + 16) <= 30)
      {
        *(_BYTE *)(v354 + 48) = roundf(v246) > v356;
        v357 = v356;
      }
    }
    *(_BYTE *)(v107 + 276) = 0;
    sub_1B680F36C((int **)&time, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48));
    if (v573 < 1)
      goto LABEL_858;
    v358 = *(_BYTE *)(v107 + 324);
    if (v358)
      v358 = *(_DWORD *)(v107 + 340) == 5 && *(_DWORD *)(v107 + 336) > 3;
    if ((*(_DWORD *)(v107 + 320) | 2) == 3)
    {
      if (*(_BYTE *)(v354 + 108))
        v521 = 1;
      else
        v521 = v358;
    }
    else
    {
      v521 = 0;
    }
    v522 = *(_DWORD *)(v107 + 16);
    if (*(char *)(v107 + 761) < 0 || (v523 = *(char *)(v107 + 762), v523 < 0))
    {
      v525 = *(_QWORD *)(v107 + 368);
      if (v525)
        v526 = *(_BYTE *)(v525 + 128) != 0;
      else
        v526 = 0;
      if (!time.value || *(double *)(time.value + 208) == *(double *)(v354 + 136))
      {
        v527 = *(_QWORD *)(*(_QWORD *)(v107 + 664) + 8);
        if (v527 == v107 + 656)
        {
          v528 = 0;
        }
        else
        {
          v528 = 0;
          do
          {
            v528 += *(unsigned __int8 *)(v527 + 16);
            v527 = *(_QWORD *)(v527 + 8);
          }
          while (v527 != v107 + 656);
        }
        v246 = (float)(v246 + (float)v528) / (float)*(unint64_t *)(v107 + 672);
      }
      else
      {
        sub_1B677A398((_QWORD *)(v107 + 656));
        sub_1B677A398((_QWORD *)(v107 + 680));
      }
      if (*(__int16 *)(v107 + 752) < 2)
      {
        if ((v521 & 1) != 0)
          goto LABEL_889;
        v533 = !v526;
        if (*(int *)(v107 + 12) < 2)
          v533 = 1;
        if ((v533 & 1) == 0
          && (v534 = *(_QWORD *)(v107 + 368)) != 0
          && *(_BYTE *)(v534 + 129)
          && (v535 = *(_DWORD *)(v107 + 284), v246 >= (float)(v535 - 1)))
        {
          v547 = *(int *)(v107 + 16);
          v548 = sub_1B68348DC(a2 + 768, *(__int16 *)(v107 + 8 * v547 + 24));
          if (*(_DWORD *)(v107 + 464))
            v549 = 2;
          else
            v549 = v548;
          sub_1B68579F4((_QWORD *)v107, v547 + v549);
          v357 = (float)v535;
        }
        else
        {
LABEL_889:
          if (v246 <= (float)((float)*(int *)(v107 + 280) + 0.4999))
          {
            v545 = *(unsigned int *)(v107 + 16);
            if ((int)v545 >= 1 && *(int *)(v107 + 12) >= 2)
            {
              v546 = v545 - 1;
              if (*(_DWORD *)(*(_QWORD *)(v107 + 392) + 508) == 2
                || (*(__int16 *)(v107 + 8 * v546 + 24) < 321
                 || (v550 = *(double *)(a2 + 2440),
                     v551 = dword_1B69224E8[*(__int16 *)(v107 + 8 * v545 + 24) > 400],
                     v550 <= (double)(int)v551)
                 && v551 >= vaddvq_s32(vmlaq_s32((int32x4_t)vcvtd_n_u64_f64(v550, 2uLL), *(int32x4_t *)(a2 + 2448), (int32x4_t)xmmword_1B6917890)) >> 4)&& sub_1B6857F84(v107, *(double *)(*(_QWORD *)(a2 + 3008) + 56)))
              {
                sub_1B68579F4((_QWORD *)v107, v546);
              }
            }
          }
        }
      }
      else
      {
        v530 = *(int *)(v107 + 16);
        v531 = sub_1B68348DC(a2 + 768, *(__int16 *)(v107 + 8 * v530 + 24));
        if (*(_DWORD *)(v107 + 464))
          v532 = 2;
        else
          v532 = v531;
        sub_1B68579F4((_QWORD *)v107, v532 + v530);
        if ((*(_DWORD *)(v107 + 320) | 2) == 3)
          *(_WORD *)(v107 + 752) = 0;
      }
      goto LABEL_857;
    }
    if (v522 >= v523)
    {
      if (v522 <= v523)
        goto LABEL_857;
      sub_1B68579F4((_QWORD *)v107, v522 - *(char *)(v107 + 763));
      v524 = *(char *)(v107 + 762);
      if (*(_DWORD *)(v107 + 16) > v524)
        goto LABEL_857;
    }
    else
    {
      sub_1B68579F4((_QWORD *)v107, v522 + *(char *)(v107 + 763));
      v524 = *(char *)(v107 + 762);
      if (*(_DWORD *)(v107 + 16) < v524)
        goto LABEL_857;
    }
    v529 = *(_BYTE *)(v107 + 761);
    *(_BYTE *)(v107 + 761) = v524;
    *(_BYTE *)(v107 + 762) = v529;
LABEL_857:
    *(_DWORD *)(a2 + 424) = *(_DWORD *)(v107 + 16) - v522;
LABEL_858:
    v246 = v357;
    v536 = *(_QWORD *)(v107 + 392);
    v537 = *(_DWORD *)(v536 + 340);
    if ((v537 & 0x80000000) != 0)
    {
      v540 = sub_1B6858020(v107, *(_DWORD *)(v107 + 16));
    }
    else
    {
      v538 = (int *)(v536 + 340);
      if (v537 <= 0x17)
        v539 = v538;
      else
        v539 = (int *)&unk_1B6922844;
      v540 = *v539 & ~(*v539 >> 31);
    }
    *(_DWORD *)(v107 + 728) = v540;
    v541 = &word_1B6922650[46 * *(unsigned int *)(v107 + 320) + 2 * v540];
    *(double *)(v107 + 416) = v355 * (double)*v541 / (double)v541[1];
    v542 = *(std::__shared_weak_count **)&time.timescale;
    if (*(_QWORD *)&time.timescale)
    {
      v543 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
      do
        v544 = __ldaxr(v543);
      while (__stlxr(v544 - 1, v543));
      if (!v544)
      {
        ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
        std::__shared_weak_count::__release_weak(v542);
      }
    }
  }
  v315 = v143 + 120 * (int)v145;
  v317 = *(double *)(v315 + 144);
  v316 = (double *)(v315 + 144);
  v318 = *(double *)(v107 + 416);
  if (v317 != v318)
  {
    *v316 = v318;
    sub_1B6857A50(v107, v143, v585);
  }
LABEL_522:
  v322 = *(_DWORD *)(v107 + 304);
  if (v322 == 0x80000000)
    v323 = v246;
  else
    v323 = (float)v322;
  v324 = *(_DWORD *)(v107 + 768);
  if (v324 != -1)
  {
    v325 = (float)v324;
    v326 = a2;
    *(float *)(a2 + 2720) = (float)v324;
    v327 = (float)v324;
    if (!*(_BYTE *)(v107 + 624))
      goto LABEL_566;
    goto LABEL_565;
  }
  v326 = a2;
  *(float *)(a2 + 2720) = v323;
  v325 = v323;
  if (*(_BYTE *)(v107 + 624))
  {
    v325 = v323;
    v327 = v323;
    if (*(_DWORD *)(v107 + 632) != 1)
    {
LABEL_565:
      *(float *)(v326 + 2724) = v327;
      goto LABEL_566;
    }
    v328 = *(_QWORD *)(v107 + 488);
    v329 = 0.0;
    v330 = 0.0;
    if (*(_QWORD *)(v107 + 496) != v328)
    {
      v331 = *(_QWORD *)(v107 + 512);
      v332 = (char **)(v328 + 8 * (v331 >> 10));
      v333 = *v332;
      v334 = &(*v332)[4 * (v331 & 0x3FF)];
      v335 = *(_QWORD *)(v328 + (((*(_QWORD *)(v107 + 520) + v331) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((*(_QWORD *)(v107 + 520) + v331) & 0x3FF);
      if (v334 != (char *)v335)
      {
        v336 = 0;
        do
        {
          v338 = *(_DWORD *)v334;
          v334 += 4;
          v337 = v338;
          if (v334 - v333 == 4096)
          {
            v339 = v332[1];
            ++v332;
            v333 = v339;
            v334 = v339;
          }
          v336 += v337;
        }
        while (v334 != (char *)v335);
        v330 = (double)v336;
      }
    }
    v340 = *(_QWORD *)(v107 + 584);
    if (*(_QWORD *)(v107 + 592) != v340)
    {
      v341 = *(_QWORD *)(v107 + 608);
      v342 = (char **)(v340 + 8 * (v341 >> 10));
      v343 = *v342;
      v344 = &(*v342)[4 * (v341 & 0x3FF)];
      v345 = *(_QWORD *)(v340 + (((*(_QWORD *)(v107 + 616) + v341) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((*(_QWORD *)(v107 + 616) + v341) & 0x3FF);
      if (v344 != (char *)v345)
      {
        v346 = 0;
        do
        {
          v348 = *(_DWORD *)v344;
          v344 += 4;
          v347 = v348;
          if (v344 - v343 == 4096)
          {
            v349 = v342[1];
            ++v342;
            v343 = v349;
            v344 = v349;
          }
          v346 += v347;
        }
        while (v344 != (char *)v345);
        v329 = (double)v346 * 100.0;
      }
    }
    v350 = v329 / v330;
    v351 = *(_DWORD *)(v107 + 636);
    if (v350 <= (float)(v351 + 5))
    {
      v360 = (float)(v351 - 5);
      v352 = *(_DWORD *)(v107 + 628);
      if (v350 >= v360)
      {
LABEL_560:
        v361 = *(double *)(v107 + 832);
        v362 = *(double *)(v107 + 816);
        v363 = (float)(v323 + (float)v352);
        if (v362 > v363)
          v362 = (float)(v323 + (float)v352);
        if (v361 < v363)
          v361 = v362;
        v327 = v361;
        v325 = v323;
        goto LABEL_565;
      }
      --v352;
    }
    else
    {
      v352 = *(_DWORD *)(v107 + 628) + 1;
    }
    *(_DWORD *)(v107 + 628) = v352;
    goto LABEL_560;
  }
LABEL_566:
  v364 = *(_QWORD *)(v107 + 392);
  v365 = v323 + 0.5;
  v366 = (int)v365;
  if (*(char *)(v364 + 104) < 2)
    goto LABEL_581;
  v367 = 0;
  v368 = (int *)(v364 + 7856);
  v369 = 4 * *(unsigned __int8 *)(v364 + 104);
  do
  {
    v370 = (int *)((char *)&v607 + v367);
    *(_DWORD *)((char *)&v607 + v367) = v366;
    v371 = *(v368 - 8);
    if (v371 != -1)
      goto LABEL_578;
    v372 = *(v368 - 4);
    v373 = (int)v365;
    if (v372 != -13)
    {
      v374 = v372 + v366;
      if (v372 + v366 >= 51)
        v374 = 51;
      v373 = v374 & ~(v374 >> 31);
      *v370 = v373;
    }
    if (*v368 != -1)
    {
      if (*v368 >= v373)
        v375 = (int *)((char *)&v607 + v367);
      else
        v375 = v368;
      v371 = *v375;
LABEL_578:
      *v370 = v371;
    }
    ++v368;
    v367 += 4;
  }
  while (v369 != v367);
  *(_OWORD *)(v326 + 2728) = v607;
LABEL_581:
  *(_BYTE *)(*(_QWORD *)(v326 + 24) + 102) = v366;
  if (*(_BYTE *)(v107 + 824))
  {
    if (*(double *)(v107 + 808) >= (double)(int)(v325 + 0.5))
    {
      v376 = *(_DWORD *)(v107 + 456);
      if (v376 >= 3)
      {
        if (*(_BYTE *)(v326 + 2))
        {
          ++*(_DWORD *)(v107 + 460);
          goto LABEL_588;
        }
      }
    }
    *(_DWORD *)(v107 + 460) = 0;
    if (*(_BYTE *)(v326 + 2))
    {
      v376 = *(_DWORD *)(v107 + 456);
LABEL_588:
      *(_DWORD *)(v107 + 456) = v376 + 1;
    }
    else
    {
      *(_DWORD *)(v107 + 456) = 0;
    }
  }
  v377 = *(_DWORD *)(v364 + 64);
  if (v377 <= 0x2B && ((1 << v377) & 0xCC000100002) != 0)
  {
    if ((*(_DWORD *)(v107 + 320) | 2) == 3 && *(_QWORD *)(v107 + 344) && !*(_BYTE *)(v577 + 109))
    {
      v378 = 5.0;
    }
    else
    {
      v378 = 3.0;
      if (v377 == 20)
      {
        if (*(int *)(v364 + 560) <= 1)
          v378 = 3.0;
        else
          v378 = 10.0;
      }
    }
    v379 = *(_QWORD *)(*(_QWORD *)(v107 + 840) + 48);
    v380 = (std::mutex *)(v379 + 56);
    std::mutex::lock((std::mutex *)(v379 + 56));
    v381 = *(_DWORD *)(v379 + 40);
    std::mutex::unlock(v380);
    v382 = *(_DWORD *)(v143 + 76);
    v383 = v143 + 136 + 120 * v382;
    if (v382 >= 7)
      v383 = 0;
    _ZF = v382 == 9;
    v384 = (double *)(v143 + 976);
    if (!_ZF)
      v384 = (double *)v383;
    v385 = (int)(v378 * (*v384 / v384[1]));
    *(_DWORD *)(v143 + 64) = v385;
    if (*(_DWORD *)(*(_QWORD *)v589 + 116) < v385)
      v385 = *(_DWORD *)(*(_QWORD *)v589 + 116);
    *(_DWORD *)(v143 + 68) = v385;
    if (v323 >= (float)*(int *)(v107 + 284) || *(_DWORD *)(*(_QWORD *)v589 + 112))
      *(_DWORD *)(v143 + 68) = v385 + v381;
  }
  v386 = *(_QWORD *)(v107 + 384);
  if (v386 && *(int *)(*(_QWORD *)(v107 + 392) + 512) >= 2)
  {
    v387 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 592) + 88))(*(_QWORD *)(a2 + 592));
    sub_1B6857F4C(v386, v387);
  }
  std::mutex::unlock(propertyValuea);
  v54 = a2;
LABEL_613:
  sub_1B6813044(v54);
  v388 = (_QWORD *)(a2 + 768);
  if (*(_BYTE *)(a2 + 781))
    sub_1B683473C(a2 + 768);
  time = v594;
  CMTimeGetSeconds(&time);
  kdebug_trace();
  if (*(_BYTE *)(a2 + 779))
  {
    if (*(_BYTE *)(a1 + 11056))
    {
      sub_1B6834398(v388, *(char *)(a1 + 3288));
      goto LABEL_624;
    }
    v389 = a2;
    if (*(_DWORD *)(a2 + 444) == 6)
    {
      if (*(float *)(a2 + 2720) < (float)(int)(*(float *)(a2 + 2720) + 0.5))
      {
        v389 = a2;
        goto LABEL_621;
      }
    }
    else
    {
LABEL_621:
      v390 = *(void (**)(_QWORD *))(v389 + 944);
      v391 = *(_QWORD *)(v389 + 952);
      v392 = (_QWORD *)((char *)v388 + (v391 >> 1));
      if ((v391 & 1) != 0)
        v390 = *(void (**)(_QWORD *))(*v392 + v390);
      v390(v392);
    }
  }
LABEL_624:
  time = v594;
  CMTimeGetSeconds(&time);
  kdebug_trace();
LABEL_625:
  v393 = *(_DWORD **)(a2 + 3008);
  *(_BYTE *)(a1 + 1152) = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1156) = v393[4];
  *(_DWORD *)(a1 + 1160) = v393[8];
  *(_DWORD *)(a1 + 1164) = v393[10];
  time = v594;
  CMTimeGetSeconds(&time);
  kdebug_trace();
  v7 = a2;
  if (*(_BYTE *)a2)
  {
    v9 = 0;
    goto LABEL_805;
  }
  v394 = *(_QWORD *)(a2 + 584);
  v395 = *(unsigned __int8 *)(v394 + 3766);
  v396 = *(char *)(v394 + 3288);
  v397 = *(_QWORD *)(v394 + 13272);
  *(_DWORD *)(a2 + 420) = (int)*(double *)(v394 + 3280);
  v579 = (uint64_t *)(a2 + 2688);
  v9 = sub_1B6817420(a2 + 2688, v396);
  if (v9)
  {
    v7 = a2;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_805;
    LOWORD(time.value) = 0;
    v319 = MEMORY[0x1E0C81028];
    v320 = "SliceEnc array creation failed\n";
    goto LABEL_803;
  }
  v7 = a2;
  v398 = (int *)(a2 + 768);
  *(_QWORD *)v590 = v396;
  while (2)
  {
    if ((int)v396 >= 1)
    {
      v399 = 0;
      v400 = 0;
      while (1)
      {
        v9 = sub_1B6876380(*(_QWORD *)(v7 + 2688) + v399, (__n128 *)v7, v400, 0, v395 == 0);
        if (v9)
          break;
        ++v400;
        v399 += 79360;
        if (*(_QWORD *)v590 == v400)
          goto LABEL_635;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_805;
      LOWORD(time.value) = 0;
      v319 = MEMORY[0x1E0C81028];
      v320 = "Slice initialization failed\n";
LABEL_803:
      v321 = 2;
LABEL_804:
      _os_log_error_impl(&dword_1B676B000, v319, OS_LOG_TYPE_ERROR, v320, (uint8_t *)&time, v321);
      goto LABEL_805;
    }
LABEL_635:
    if (v397)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v397 + 24))(v397, v7);
      if (!v9)
      {
        if (!*(_DWORD *)(v394 + 3696) || !*(_BYTE *)(v7 + 640))
        {
          v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v397 + 64))(v397);
          if (v9)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_805;
            LOWORD(time.value) = 0;
            v319 = MEMORY[0x1E0C81028];
            v320 = "FinishPendingFrames failed\n";
            goto LABEL_803;
          }
        }
        if (!v395)
        {
LABEL_643:
          if (!*(_BYTE *)(v7 + 4))
          {
            if (*(char *)(v394 + 3239) >= 2)
              sub_1B68344B8(v398);
            if (*(_BYTE *)(v394 + 3784))
            {
              v401 = *(int32x2_t **)(v7 + 1048);
              v402 = *(int32x2_t **)(*(_QWORD *)&v401[1] + 608);
              v401[287].i32[0] = v402[153].i32[0];
              v403 = v402[152];
              v401[286] = v403;
              v401[285] = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmul_s32(v401[285], (int32x2_t)0xA0000000DLL), v403, (int32x2_t)0x600000003), (int32x2_t)0x800000008), 4uLL);
            }
          }
          goto LABEL_648;
        }
LABEL_795:
        v9 = 0;
        if (!*(_BYTE *)(v7 + 3))
          goto LABEL_805;
        continue;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_805;
      v520 = *(_DWORD *)(v7 + 644);
      LODWORD(time.value) = 67109120;
      HIDWORD(time.value) = v520;
      v319 = MEMORY[0x1E0C81028];
      v320 = "Frame %d: PreEncode failed\n";
LABEL_520:
      v321 = 8;
      goto LABEL_804;
    }
    break;
  }
  if (!v395)
    goto LABEL_643;
LABEL_648:
  if (!*(_BYTE *)(v394 + 3237) && *(_BYTE *)(v394 + 3794))
    bzero(*(void **)(*(_QWORD *)(v7 + 584) + 24), 32 * *(unsigned int *)(*(_QWORD *)(v7 + 584) + 44));
  if ((int)v396 < 1)
  {
    v506 = *(_QWORD *)(v7 + 2712);
    if (v506)
    {
      v507 = 0;
      v508 = 0;
      v509 = *(float *)(v7 + 2720);
LABEL_784:
      *(_QWORD *)(v7 + 2904) = v507;
      *(_QWORD *)(v7 + 2928) = v508;
      v512 = sub_1B6858E6C(*(_QWORD *)(v506 + 392), v7);
      *(_BYTE *)(v7 + 3) = v512;
      if ((v512 & 1) != 0)
      {
        *(_QWORD *)(v7 + 2936) = *(_QWORD *)(v7 + 2904);
        *(_QWORD *)(v7 + 2944) = *(_QWORD *)(v7 + 2928);
        *(_BYTE *)(v7 + 2952) = (int)v509;
        v513 = *(_QWORD **)(v7 + 608);
        v514 = (void *)v513[78];
        if (v514)
          bzero(v514, v513[76] * v513[60]);
        v515 = (void *)v513[80];
        if (v515)
          bzero(v515, v513[77] * v513[59]);
        v516 = (void *)v513[64];
        if (v516)
          bzero(v516, 2 * v513[60] * v513[61]);
        v517 = (void *)v513[72];
        if (v517)
          bzero(v517, 16 * v513[68] * v513[69]);
      }
    }
LABEL_793:
    if (!*(_BYTE *)(v394 + 3766))
      ++*(_BYTE *)(v7 + 4);
    goto LABEL_795;
  }
  v553 = v398;
  v554 = v397;
  v555 = v396;
  v556 = v395;
  v557 = v394;
  v404 = 0;
  v405 = 0;
  while (2)
  {
    propertyValueb = v404;
    v406 = *v579;
    v407 = *v579 + 79360 * v405;
    v408 = v407 + 79216;
    v409 = *(_QWORD *)(v407 + 79216);
    v410 = *(_QWORD *)(v409 + 584);
    v411 = *(_DWORD *)(v407 + 552);
    v412 = v411 + 1;
    if (*(_DWORD *)(v410 + 3328) >= (int)v412)
      v413 = v411 + 1;
    else
      v413 = *(_DWORD *)(v410 + 3328);
    if (*(_BYTE *)(*(_QWORD *)(v407 + 1408) + 33))
      v414 = *(_BYTE *)(*(_QWORD *)(v407 + 1400) + 80) != 0;
    else
      v414 = 0;
    v415 = *(_QWORD *)(v409 + 608);
    v416 = *(_DWORD *)(v415 + 276);
    v417 = *(_DWORD *)(v415 + 280);
    v418 = *(_DWORD *)(v410 + 3360);
    v578 = *(char *)(v407 + 621);
    v419 = *(char *)(v410 + 3288);
    v420 = *(_DWORD *)(v407 + 4);
    v421 = *(_DWORD *)(v407 + 79308);
    LODWORD(extraRowsOnBottom.__m_) = 0;
    v422 = (int)v412;
    v580 = (void **)(v406 + 79360 * v405 + 79256);
    v423 = (unint64_t *)(v406 + 79360 * v405 + 79264);
    *(_QWORD *)v586 = v406;
    if (*v423 < (int)v412)
    {
      if (v412 <= 0x1C9249)
      {
        v561 = v419;
        v574 = v418;
        v571 = v413;
        v568 = v421;
        v424 = v420;
        sub_1B6876200((uint64_t)v580);
        if (!malloc_type_posix_memalign(v580, 0x10uLL, 56 * v422, 0x1010040CAC54F0AuLL))
        {
          if (*v580)
          {
            v425 = 0;
            v426 = v422;
            v412 = v411 + 1;
            do
            {
              v427 = (char *)*v580 + v425;
              *v427 = 0;
              v427[1] = 0;
              v427[4] = 0;
              v427[5] = 0;
              v427[3] = 0;
              v425 += 56;
              --v426;
            }
            while (v426);
            *v423 = v422;
            v406 = *(_QWORD *)v586;
            v420 = v424;
            v421 = v568;
            v413 = v571;
            v418 = v574;
            v419 = v561;
            v408 = v407 + 79216;
            goto LABEL_666;
          }
        }
      }
LABEL_671:
      v9 = -12904;
      goto LABEL_677;
    }
LABEL_666:
    v565 = v414;
    v570 = v411;
    v428 = v406 + 79360 * v405;
    v429 = v428 + 79240;
    v430 = (_QWORD *)(v428 + 79248);
    if (*(_QWORD *)(v428 + 79248) < (unint64_t)v413)
    {
      if (v413 > 0x3D89D)
        goto LABEL_671;
      v560 = v408;
      v562 = v419;
      v575 = v418;
      v431 = v420;
      v563 = v417;
      v566 = v412;
      if (*(_QWORD *)v429)
      {
        v432 = v413;
        free(*(void **)v429);
        v413 = v432;
        *(_QWORD *)v429 = 0;
        *(_QWORD *)(v429 + 8) = 0;
      }
      v433 = v413;
      v434 = v413;
      if (malloc_type_posix_memalign((void **)v429, 0x10uLL, 416 * v413, 0x1030040A036308BuLL) || !*(_QWORD *)v429)
        goto LABEL_671;
      v435 = 0;
      v436 = v434;
      v420 = v431;
      do
      {
        v437 = (_QWORD *)(*(_QWORD *)v429 + v435);
        v437[3] = 0;
        v437[4] = 0;
        v437[26] = 0;
        v437[30] = 0;
        v437[31] = 0;
        v435 += 416;
        --v436;
      }
      while (v436);
      *v430 = v434;
      v412 = v566;
      v417 = v563;
      v413 = v433;
      v418 = v575;
      v419 = v562;
      v408 = v560;
    }
    v438 = v408;
    v558 = (uint64_t *)v429;
    v439 = v419;
    v576 = v418;
    v572 = v413;
    v569 = v421;
    v559 = v420;
    v564 = v417;
    v567 = v412;
    v440 = (int **)(v407 + 1024);
    v9 = sub_1B67E7FE0((void **)(v407 + 1024), v422);
    if (!v9)
    {
      v444 = *(_QWORD *)(*(_QWORD *)v586 + 79360 * v405 + 79088);
      if (!*(_BYTE *)(v444 + 53) && *(_BYTE *)(v444 + 610))
      {
        v445 = *(_QWORD *)(*(_QWORD *)v438 + 584);
        v446 = *(_DWORD *)(v445 + 40);
        v447 = *(_QWORD *)v586 + 79360 * v405;
        *(_DWORD *)(v447 + 79304) = v446;
        *(_QWORD *)(v447 + 79296) = *(_QWORD *)(v445 + 24) + 32 * (v446 * v559);
      }
      if (*(_BYTE *)(v407 + 10))
      {
        if (*(_BYTE *)(v407 + 10) == 1)
          v448 = *(_BYTE *)(v407 + 537) == 0;
        else
          v448 = 2;
      }
      else
      {
        v448 = *(unsigned __int8 *)(v407 + 537);
      }
      if (v570 <= 0x7FFFFFFE)
      {
        v449 = 0;
        v450 = 0;
        v451 = 2 * v416 * v417 / v439 / v567;
        while (1)
        {
          *(_DWORD *)(*(_QWORD *)(v407 + 1024) + v450) = *(char *)(v407 + 621);
          v9 = sub_1B67C8F84((void **)((char *)*v580 + v449), v451);
          if (v9)
            break;
          v450 += 4;
          v449 += 56;
          if (4 * v567 == v450)
            goto LABEL_696;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LOWORD(time.value) = 0;
          _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Substream bitstream initialization failed\n", (uint8_t *)&time, 2u);
        }
        goto LABEL_677;
      }
LABEL_696:
      if (v572 >= 1)
      {
        v452 = 0;
        v453 = 0;
        do
        {
          sub_1B67CC0F0(*v558 + v453, (uint64_t)*v580 + v452, v448, v578);
          v453 += 416;
          v452 += 56;
        }
        while (416 * v572 != v453);
      }
      v454 = *(_QWORD *)(v407 + 3464);
      *(_QWORD *)(v407 + 3472) = v454;
      v455 = *(_DWORD *)(v407 + 616);
      v456 = *(_DWORD *)(v407 + 4);
      v457 = *(_DWORD *)(v407 + 552);
      v458 = *(_BYTE *)(v407 + 628);
      v459 = *(_BYTE *)(v407 + 629);
      v460 = *(_QWORD *)(v407 + 3480);
      if (v454 >= v460)
      {
        v463 = v460 - v454;
        v464 = v463 >> 3;
        if ((unint64_t)(v463 >> 3) <= 1)
          v464 = 1;
        if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFF0)
          v465 = 0xFFFFFFFFFFFFFFFLL;
        else
          v465 = v464;
        if (v465 >> 60)
          sub_1B6773BF4();
        v466 = operator new(16 * v465);
        *v466 = v455;
        v466[1] = v456;
        v466[2] = v457;
        *((_BYTE *)v466 + 12) = v458;
        *((_BYTE *)v466 + 13) = v459;
        v467 = *(_QWORD *)(v407 + 3472);
        v468 = *(_QWORD *)(v407 + 3464);
        v469 = v466;
        if (v467 != v468)
        {
          do
          {
            v470 = *(_QWORD *)(v467 - 16);
            v467 -= 16;
            v471 = *(_QWORD *)(v467 + 6);
            *((_QWORD *)v469 - 2) = v470;
            v469 -= 4;
            *(_QWORD *)((char *)v469 + 6) = v471;
          }
          while (v467 != v468);
          v467 = *(_QWORD *)(v407 + 3464);
        }
        v462 = *(_QWORD *)v586;
        v472 = (char *)&v466[4 * v465];
        *(_QWORD *)(v407 + 3464) = v469;
        v461 = (char *)(v466 + 4);
        *(_QWORD *)(v407 + 3472) = v466 + 4;
        *(_QWORD *)(v407 + 3480) = v472;
        if (v467)
          operator delete((void *)v467);
      }
      else
      {
        *(_DWORD *)v454 = v455;
        *(_DWORD *)(v454 + 4) = v456;
        *(_DWORD *)(v454 + 8) = v457;
        *(_BYTE *)(v454 + 12) = v458;
        v461 = (char *)(v454 + 16);
        *(_BYTE *)(v454 + 13) = v459;
        v462 = *(_QWORD *)v586;
      }
      *(_QWORD *)(v407 + 3472) = v461;
      if (v576 == 4)
      {
        v9 = sub_1B6878D98(v407, v572);
        if (v9)
          goto LABEL_677;
      }
      else
      {
        v473 = (uint64_t *)(v462 + 79360 * v405 + 79224);
        v9 = sub_1B6879178((uint64_t)v473, 1uLL);
        if (v9)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_677;
          LOWORD(time.value) = 0;
          v474 = MEMORY[0x1E0C81028];
          v475 = "LCUEnc creation failed\n";
          goto LABEL_759;
        }
        v9 = sub_1B6835480(*v473, v407);
        if (v9)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_677;
          LOWORD(time.value) = 0;
          v474 = MEMORY[0x1E0C81028];
          v475 = "LCUEnc init failed\n";
          goto LABEL_759;
        }
        v476 = v559;
        if (v559 <= v569)
        {
          v477 = *v473;
          do
          {
            LODWORD(time.value) = **v440;
            v478 = v476;
            sub_1B683B978(v477, v476, *v558);
            sub_1B683C070(*v473, (int *)&time);
            sub_1B68514F8(*v473, *v440);
            v477 = *v473;
            *(_QWORD *)(*(_QWORD *)v586 + 79360 * v405 + 79312) += *(unsigned int *)(*v473 + 212);
            v476 = v478 + 1;
          }
          while (v569 + 1 != v478 + 1);
        }
        sub_1B67CC3E0((unint64_t *)*v558, 1);
        sub_1B67CC1BC((_QWORD *)*v558);
      }
      LODWORD(extraRowsOnBottom.__m_) = v564;
      if (*(_BYTE *)(v407 + 496) || *(_BYTE *)(v407 + 497))
        sub_1B68553EC((unsigned int *)(*(_QWORD *)v586 + 79360 * v405 + 78120), v407, (int *)&extraRowsOnBottom);
      if (v565)
        sub_1B67F7590(v407 + 3320, *(_QWORD *)(v407 + 1360), *(char *)(v407 + 621), (int *)&extraRowsOnBottom);
      if ((int)v567 >= 2)
      {
        if (!*(_DWORD *)(v407 + 552))
          goto LABEL_754;
        v479 = 0;
        v480 = 0;
        v481 = *v580;
        do
        {
          sub_1B67C939C((uint64_t)v481 + 56 * v479);
          v481 = *v580;
          v482 = (uint64_t)*v580 + 56 * v479;
          v483 = *(unsigned __int8 **)(v482 + 16);
          v484 = *(_QWORD *)(v482 + 24);
          if ((unint64_t)v483 >= v484)
          {
            v486 = 0;
          }
          else
          {
            v485 = 0;
            v486 = 0;
            v487 = v484 - (_QWORD)v483;
            v488 = v483;
            do
            {
              v490 = *v488++;
              v489 = v490;
              v491 = v485 == 2;
              v492 = 2 * (v490 > 3);
              if (v485 == 2)
                v485 = v492;
              v493 = v489 < 4 && v491;
              v486 += v493;
              if (v489)
                v485 = 0;
              else
                ++v485;
              --v487;
            }
            while (v487);
          }
          v494 = v486 - (_DWORD)v483 + v484 - 1;
          *(_DWORD *)(*(_QWORD *)(v407 + 560) + 4 * v479) = v494;
          if (v480 <= v494)
            v480 = v494;
          ++v479;
        }
        while (v479 < *(unsigned int *)(v407 + 552));
        if (v480)
          v495 = 31 - __clz(v480);
        else
LABEL_754:
          LOBYTE(v495) = 0;
        *(_BYTE *)(v407 + 556) = v495;
      }
      v9 = sub_1B68792FC((unsigned __int8 *)v407);
      if (!v9)
      {
        v496 = v567;
        if (v570 > 0x7FFFFFFE)
        {
LABEL_771:
          sub_1B67C939C(v407 + 3488);
          if (*(_BYTE *)(v407 + 3536))
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LOWORD(time.value) = 0;
              _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Ran out of allocated bufferspace\n", (uint8_t *)&time, 2u);
            }
            v9 = -26526;
          }
          else
          {
            v9 = 0;
          }
        }
        else
        {
          v497 = 0;
          while (!*((_BYTE *)*v580 + 56 * v497 + 48))
          {
            v498 = (uint64_t)*v580 + 56 * v497;
            v499 = *(unsigned int **)(v498 + 16);
            v500 = *(int *)(v498 + 44) + 8 * (*(_QWORD *)(v498 + 24) - (_QWORD)v499);
            if (v500)
            {
              if (v500 < 0x21)
              {
                LODWORD(v501) = 0;
                v505 = 32;
              }
              else
              {
                v501 = 0;
                do
                {
                  v502 = v501;
                  v503 = *v499++;
                  v504 = bswap32(v503);
                  sub_1B67C8FE0(v407 + 3488, HIWORD(v504), 16);
                  sub_1B67C8FE0(v407 + 3488, (unsigned __int16)v504, 16);
                  v501 = v502 + 32;
                }
                while (v502 + 64 < v500);
                v505 = v502 + 64;
                v496 = v567;
              }
              sub_1B67C9044(v407 + 3488, bswap32(*v499) >> (v505 - v500), v500 - v501);
            }
            if (++v497 == v496)
              goto LABEL_771;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LOWORD(time.value) = 0;
            _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Ran out of allocated bufferspace\n", (uint8_t *)&time, 2u);
          }
          v9 = -26526;
        }
        goto LABEL_677;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_677;
      LOWORD(time.value) = 0;
      v474 = MEMORY[0x1E0C81028];
      v475 = "Slice header encoding failed\n";
LABEL_759:
      _os_log_error_impl(&dword_1B676B000, v474, OS_LOG_TYPE_ERROR, v475, (uint8_t *)&time, 2u);
    }
LABEL_677:
    v441 = *(_QWORD *)(v407 + 1360);
    time.value = v441 + 1104;
    LOBYTE(time.timescale) = 1;
    std::mutex::lock((std::mutex *)(v441 + 1104));
    atomic_store(0x7FFFFFFFu, (unsigned int *)(v441 + 1100));
    sub_1B678B174((uint64_t)&time);
    std::condition_variable::notify_all((std::condition_variable *)(v441 + 1168));
    if (LOBYTE(time.timescale))
      std::mutex::unlock((std::mutex *)time.value);
    v442 = &propertyValueb[*(_QWORD *)v586];
    v443 = -256;
    do
    {
      sub_1B67C7674(&v442[v443 + 3800]);
      sub_1B67C7674(&v442[v443 + 4056]);
      v443 += 16;
    }
    while (v443);
    sub_1B67C7674((_QWORD *)(v407 + 4056));
    *(_QWORD *)(v407 + 1360) = 0;
    *(_QWORD *)(*(_QWORD *)v586 + 79360 * v405 + 79296) = 0;
    if (!v9)
    {
      ++v405;
      v404 = propertyValueb + 79360;
      v7 = a2;
      if (v405 == *(_QWORD *)v590)
      {
        v506 = *(_QWORD *)(a2 + 2712);
        v394 = v557;
        v395 = v556;
        v397 = v554;
        v396 = v555;
        v398 = v553;
        if (!v506)
          goto LABEL_793;
        v508 = 0;
        v507 = 0;
        v509 = *(float *)(a2 + 2720);
        *(_QWORD *)(a2 + 2904) = 0;
        *(_QWORD *)(a2 + 2928) = 0;
        v510 = *(_QWORD *)v590;
        v511 = *(_QWORD **)(a2 + 2688);
        do
        {
          v507 += 8 * (v511[439] - v511[438]);
          v508 += v511[9914] >> 8;
          v511 += 9920;
          --v510;
        }
        while (v510);
        goto LABEL_784;
      }
      continue;
    }
    break;
  }
  v7 = a2;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(time.value) = 0;
    _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Slice encode failed\n", (uint8_t *)&time, 2u);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(time.value) = 0;
    v319 = MEMORY[0x1E0C81028];
    v320 = "EncodeSlice failed\n";
    goto LABEL_803;
  }
LABEL_805:
  if (!*(_BYTE *)(v7 + 418))
    sub_1B6817588(a2, v9);
  if (v587)
  {
    v518 = (unint64_t *)&v587->__shared_owners_;
    do
      v519 = __ldaxr(v518);
    while (__stlxr(v519 - 1, v518));
    if (!v519)
    {
      ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
      std::__shared_weak_count::__release_weak(v587);
    }
  }
}

void sub_1B680AFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::mutex *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,std::exception_ptr a48,std::mutex *a49,char a50)
{
  uint64_t v50;

  sub_1B6772C88(v50 - 224);
  sub_1B6772C88((uint64_t)&a46);
  std::mutex::unlock(a28);
  sub_1B6772C88((uint64_t)&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_1B680B0E4(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  double v8;
  double v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  double v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_DWORD *)(result + 336);
  if (v2 < 0x11)
  {
    v3 = (unsigned int *)(result + 13280);
    if (!v2)
      goto LABEL_19;
  }
  else
  {
    *(_DWORD *)(result + 336) = 16;
    v3 = (unsigned int *)(result + 13280);
  }
  v4 = 0;
  v5 = result + 12896;
  v6 = &unk_1EF138000;
  v7 = 1000.0;
  v8 = 0.125;
  v9 = 0.875;
  do
  {
    v10 = *(_DWORD *)(result + 4 * v4 + 340);
    v11 = atomic_load((unsigned __int8 *)&qword_1EF138F98);
    if ((v11 & 1) == 0)
    {
      v37 = a2;
      v39 = result;
      v35 = v3;
      v31 = v4;
      v32 = v5;
      v33 = v7;
      v34 = *(_DWORD *)(result + 4 * v4 + 340);
      v16 = __cxa_guard_acquire(&qword_1EF138F98);
      v10 = v34;
      v9 = 0.875;
      v8 = 0.125;
      v7 = v33;
      v6 = (_QWORD *)&unk_1EF138000;
      v4 = v31;
      v5 = v32;
      v3 = v35;
      a2 = v37;
      v17 = v16;
      result = v39;
      if (v17)
      {
        __cxa_atexit((void (*)(void *))sub_1B67CD160, &qword_1EF138F88, &dword_1B676B000);
        __cxa_guard_release(&qword_1EF138F98);
        v10 = v34;
        v9 = 0.875;
        v8 = 0.125;
        v7 = v33;
        v6 = (_QWORD *)&unk_1EF138000;
        v4 = v31;
        v5 = v32;
        v3 = v35;
        a2 = v37;
        result = v39;
      }
    }
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(v5 + v12);
      if (v13)
      {
        if (*(_DWORD *)(v13 + 8) == v10)
          break;
      }
      v12 += 16;
      if (v12 == 272)
      {
        v13 = v6[497];
        if (!v13)
          goto LABEL_15;
        break;
      }
    }
    if ((*(_DWORD *)(v13 + 40) | 2) == 3)
    {
      *(_DWORD *)(v13 + 40) = 2;
      v14 = (double)*(uint64_t *)a2 * v7 / (double)*(int *)(a2 + 8)
          - (double)*(uint64_t *)(v13 + 16) * v7 / (double)*(int *)(v13 + 32);
      v15 = *(double *)(result + 408);
      if (v15 > 0.0)
        v14 = v14 * v8 + v15 * v9;
      *(double *)(result + 408) = v14;
    }
LABEL_15:
    ++v4;
  }
  while (v4 < *(unsigned int *)(result + 336));
LABEL_19:
  v18 = *(_DWORD *)(result + 404);
  if (v18 < 0x10000)
  {
    v20 = *(double *)(result + 408);
    if (v20 > 0.0)
      v19 = v20;
    else
      v19 = 2000;
  }
  else
  {
    v19 = HIWORD(v18);
  }
  *v3 = v19;
  v21 = atomic_load((unsigned __int8 *)&qword_1EF138FC8);
  if ((v21 & 1) == 0)
  {
    v38 = a2;
    v40 = result;
    v36 = v3;
    v29 = __cxa_guard_acquire(&qword_1EF138FC8);
    v3 = v36;
    a2 = v38;
    v30 = v29;
    result = v40;
    if (v30)
    {
      __cxa_atexit((void (*)(void *))sub_1B67CD160, &unk_1EF138FB8, &dword_1B676B000);
      __cxa_guard_release(&qword_1EF138FC8);
      v3 = v36;
      a2 = v38;
      result = v40;
    }
  }
  v22 = 0;
  v23 = (uint64_t *)(result + 12896);
  v24 = 0x7FFFFFFF;
  v25 = 0x7FFFFFFF;
  do
  {
    v26 = *v23;
    if (*v23 && *(_DWORD *)(v26 + 680) < v25 && *(_DWORD *)(v26 + 40) == 1)
    {
      v25 = *(_DWORD *)(v26 + 680);
      v24 = v22;
    }
    ++v22;
    v23 += 2;
  }
  while (v22 != 17);
  if (v24 == 0x7FFFFFFF)
    v27 = (uint64_t *)&unk_1EF138FB8;
  else
    v27 = (uint64_t *)(result + 16 * v24 + 12896);
  v28 = *v27;
  if (v28)
  {
    if ((int)(float)((float)((float)((float)*(uint64_t *)a2 * 1000.0) / (float)*(int *)(a2 + 8))
                    - (float)((float)((float)*(uint64_t *)(v28 + 16) * 1000.0) / (float)*(int *)(v28 + 32))) > (int)(2 * *v3))
      *(_DWORD *)(v28 + 40) = 3;
  }
  return result;
}

_QWORD *sub_1B680B410(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void **v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  FILE *v54;
  uint64_t v55;
  uint64_t v56;
  FILE *v57;
  _QWORD *v58;
  FILE *v59;
  FILE *v60;
  FILE *v61;
  const void *v62;
  uint64_t v63;
  uint64_t i;
  void **v65;
  void **v66;
  unint64_t v67;
  void **v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;

  sub_1B6806E70((uint64_t)a1);
  v2 = a1[1591];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[1591] = 0;
  v3 = a1[1592];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[1592] = 0;
  if (*((_BYTE *)a1 + 1016))
  {
    v4 = a1[1593];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    a1[1593] = 0;
  }
  v5 = (_QWORD *)a1[1594];
  if (v5)
  {
    v6 = (void **)(v5 + 2);
    while (1)
    {
      v7 = v5[7];
      if (!v7)
        break;
      v8 = v7 - 1;
      v9 = *(_QWORD *)(*(_QWORD *)(v5[3] + (((unint64_t)(v8 + v5[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v8 + v5[6]) & 0x1FF));
      if (v9)
      {
        v10 = sub_1B6812BB8(v9);
        MEMORY[0x1BCC9814C](v10, 0x10F2C404913AAE3);
        v8 = v5[7] - 1;
      }
      v5[7] = v8;
      sub_1B6803FBC(v5 + 2);
    }
    v11 = v5[8];
    if (v11)
      dispatch_release(v11);
    v12 = (void **)v5[3];
    v13 = (void **)v5[4];
    v5[7] = 0;
    v14 = (char *)v13 - (char *)v12;
    if ((unint64_t)((char *)v13 - (char *)v12) >= 0x11)
    {
      do
      {
        operator delete(*v12);
        v13 = (void **)v5[4];
        v12 = (void **)(v5[3] + 8);
        v5[3] = v12;
        v14 = (char *)v13 - (char *)v12;
      }
      while ((unint64_t)((char *)v13 - (char *)v12) > 0x10);
    }
    v15 = v14 >> 3;
    if (v15 == 1)
    {
      v16 = 256;
    }
    else
    {
      if (v15 != 2)
        goto LABEL_24;
      v16 = 512;
    }
    v5[6] = v16;
LABEL_24:
    if (v12 != v13)
    {
      do
      {
        v17 = *v12++;
        operator delete(v17);
      }
      while (v12 != v13);
      v19 = v5[3];
      v18 = v5[4];
      if (v18 != v19)
        v5[4] = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (*v6)
      operator delete(*v6);
    v20 = sub_1B6772C88((uint64_t)v5);
    MEMORY[0x1BCC9814C](v20, 0x10A0C409208CD08);
    a1[1594] = 0;
  }
  v21 = (_QWORD *)a1[1657];
  if (v21)
  {
    v22 = v21[49];
    if (*(int *)(v22 + 560) >= 1)
    {
      v23 = 0;
      v24 = v21 + 106;
      do
      {
        v25 = v24[v23];
        if (v25)
        {
          v26 = sub_1B6855ADC(v25);
          MEMORY[0x1BCC9814C](v26, 0x1060C4062CB64C1);
          v22 = v21[49];
        }
        v24[v23++] = 0;
      }
      while (v23 < *(int *)(v22 + 560));
    }
    v27 = v21[113];
    if (v27)
    {
      v28 = sub_1B6855ADC(v27);
      MEMORY[0x1BCC9814C](v28, 0x1060C4062CB64C1);
    }
    v21[113] = 0;
    v29 = v21[43];
    if (v29)
    {
      MEMORY[0x1BCC9814C](v29, 0x1000C40A5C9D646);
      v21[43] = 0;
    }
    v30 = v21[48];
    if (v30)
    {
      v31 = sub_1B68563C0(v30);
      MEMORY[0x1BCC9814C](v31, 0xA0C409BE6959DLL);
      v21[48] = 0;
    }
    if (v21[90])
    {
      v32 = (uint64_t *)v21[89];
      v33 = v21[88];
      v34 = *v32;
      *(_QWORD *)(v34 + 8) = *(_QWORD *)(v33 + 8);
      **(_QWORD **)(v33 + 8) = v34;
      v21[90] = 0;
      if (v32 != v21 + 88)
      {
        do
        {
          v35 = (uint64_t *)v32[1];
          operator delete(v32);
          v32 = v35;
        }
        while (v35 != v21 + 88);
      }
    }
    sub_1B677A398(v21 + 85);
    sub_1B677A398(v21 + 82);
    sub_1B67867B4((uint64_t)(v21 + 72));
    sub_1B67867B4((uint64_t)(v21 + 66));
    sub_1B67867B4((uint64_t)(v21 + 60));
    sub_1B6772C88((uint64_t)(v21 + 46));
    MEMORY[0x1BCC9814C](v21, 0x10E0C40F3C4BCA6);
    a1[1657] = 0;
  }
  v36 = a1[6];
  if (v36)
  {
    sub_1B6803F4C((uint64_t *)(v36 + 128));
    sub_1B6803F4C((uint64_t *)(v36 + 176));
    sub_1B6803F4C((uint64_t *)(v36 + 200));
    v37 = *(_QWORD **)(v36 + 120);
    if (!v37)
    {
LABEL_70:
      sub_1B6803F4C((uint64_t *)(v36 + 200));
      sub_1B6803F4C((uint64_t *)(v36 + 176));
      sub_1B6803F4C((uint64_t *)(v36 + 152));
      sub_1B6803F4C((uint64_t *)(v36 + 128));
      std::mutex::~mutex((std::mutex *)(v36 + 56));
      MEMORY[0x1BCC9814C](v36, 0x1060C4065670AC2);
      a1[6] = 0;
      goto LABEL_71;
    }
    v38 = (void **)(v37 + 2);
    while (1)
    {
      v39 = v37[7];
      if (!v39)
        break;
      v40 = v39 - 1;
      v41 = *(_QWORD *)(*(_QWORD *)(v37[3] + (((unint64_t)(v40 + v37[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v40 + v37[6]) & 0x1FF));
      if (v41)
      {
        MEMORY[0x1BCC9814C](v41, 0x1000C40DFA26CF1);
        v40 = v37[7] - 1;
      }
      v37[7] = v40;
      sub_1B6803FBC(v37 + 2);
    }
    v42 = v37[8];
    if (v42)
      dispatch_release(v42);
    v43 = (void **)v37[3];
    v44 = (void **)v37[4];
    v37[7] = 0;
    v45 = (char *)v44 - (char *)v43;
    if ((unint64_t)((char *)v44 - (char *)v43) >= 0x11)
    {
      do
      {
        operator delete(*v43);
        v44 = (void **)v37[4];
        v43 = (void **)(v37[3] + 8);
        v37[3] = v43;
        v45 = (char *)v44 - (char *)v43;
      }
      while ((unint64_t)((char *)v44 - (char *)v43) > 0x10);
    }
    v46 = v45 >> 3;
    if (v46 == 1)
    {
      v47 = 256;
    }
    else
    {
      if (v46 != 2)
        goto LABEL_63;
      v47 = 512;
    }
    v37[6] = v47;
LABEL_63:
    if (v43 != v44)
    {
      do
      {
        v48 = *v43++;
        operator delete(v48);
      }
      while (v43 != v44);
      v50 = v37[3];
      v49 = v37[4];
      if (v49 != v50)
        v37[4] = v49 + ((v50 - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (*v38)
      operator delete(*v38);
    v51 = sub_1B6772C88((uint64_t)v37);
    MEMORY[0x1BCC9814C](v51, 0x10A0C409208CD08);
    *(_QWORD *)(v36 + 120) = 0;
    goto LABEL_70;
  }
LABEL_71:
  v52 = a1[1];
  if (v52)
  {
    v53 = *(const void **)(v52 + 4264);
    if (v53)
    {
      CFRelease(v53);
      *(_QWORD *)(v52 + 4264) = 0;
    }
    sub_1B6806EBC((const void ***)(v52 + 4256), 0);
    MEMORY[0x1BCC9814C](v52, 0x10B0C4096840F05);
  }
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 256))(*a1);
  v54 = (FILE *)a1[2];
  if (v54)
    fclose(v54);
  v55 = a1[1658];
  if (v55)
  {
    sub_1B6806EBC((const void ***)(v55 + 32), 0);
    MEMORY[0x1BCC9814C](v55, 0x10A0C40B25BD57ELL);
  }
  v56 = a1[1659];
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  a1[1659] = 0;
  v57 = (FILE *)a1[12];
  if (v57)
  {
    v58 = (_QWORD *)MEMORY[0x1E0C80C20];
    if (v57 != (FILE *)*MEMORY[0x1E0C80C20])
    {
      fclose(v57);
      a1[12] = *v58;
    }
  }
  v59 = (FILE *)a1[11];
  if (v59)
    fclose(v59);
  v60 = (FILE *)a1[14];
  if (v60)
    fclose(v60);
  v61 = (FILE *)a1[13];
  if (v61)
    fclose(v61);
  v62 = (const void *)a1[139];
  if (v62)
    CFRelease(v62);
  v63 = a1[146];
  if (v63)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    a1[146] = 0;
  }
  for (i = 0; i != -34; i -= 2)
    sub_1B6772C88((uint64_t)&a1[i + 1644]);
  std::mutex::~mutex((std::mutex *)(a1 + 1601));
  v65 = (void **)a1[1596];
  v66 = (void **)a1[1597];
  if (v66 == v65)
  {
    v70 = a1 + 1600;
    v66 = (void **)a1[1596];
  }
  else
  {
    v67 = a1[1599];
    v68 = &v65[v67 >> 8];
    v69 = (uint64_t)*v68 + 16 * v67;
    v70 = a1 + 1600;
    v71 = *(uint64_t *)((char *)v65 + (((a1[1600] + v67) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 12800) + v67);
    if (v69 != v71)
    {
      do
      {
        v69 = sub_1B6772C88(v69) + 16;
        if (v69 - (_QWORD)*v68 == 4096)
        {
          v72 = (uint64_t)v68[1];
          ++v68;
          v69 = v72;
        }
      }
      while (v69 != v71);
      v66 = (void **)a1[1597];
      v65 = (void **)a1[1596];
    }
  }
  *v70 = 0;
  v73 = (char *)v66 - (char *)v65;
  if ((unint64_t)((char *)v66 - (char *)v65) >= 0x11)
  {
    do
    {
      operator delete(*v65);
      v65 = (void **)(a1[1596] + 8);
      a1[1596] = v65;
      v66 = (void **)a1[1597];
      v73 = (char *)v66 - (char *)v65;
    }
    while ((unint64_t)((char *)v66 - (char *)v65) > 0x10);
  }
  v74 = v73 >> 3;
  if (v74 == 1)
  {
    v75 = 128;
    goto LABEL_111;
  }
  if (v74 == 2)
  {
    v75 = 256;
LABEL_111:
    a1[1599] = v75;
  }
  if (v65 != v66)
  {
    do
    {
      v76 = *v65++;
      operator delete(v76);
    }
    while (v65 != v66);
    v77 = a1[1596];
    v78 = a1[1597];
    if (v78 != v77)
      a1[1597] = v78 + ((v77 - v78 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v79 = (void *)a1[1595];
  if (v79)
    operator delete(v79);
  sub_1B6772C88((uint64_t)(a1 + 1588));
  sub_1B6772C88((uint64_t)(a1 + 1586));
  sub_1B6772C88((uint64_t)(a1 + 1584));
  sub_1B6772C88((uint64_t)(a1 + 1582));
  sub_1B6772C88((uint64_t)(a1 + 1580));
  sub_1B6772C88((uint64_t)(a1 + 1578));
  for (j = 0; j != -128; j -= 2)
    sub_1B6772C88((uint64_t)&a1[j + 1576]);
  for (k = 0; k != -32; k -= 2)
    sub_1B6772C88((uint64_t)&a1[k + 1448]);
  for (m = 0; m != -32; m -= 2)
    sub_1B6772C88((uint64_t)&a1[m + 1416]);
  a1[398] = &off_1E6A14DC0;
  v83 = (_QWORD *)a1[399];
  if (v83)
  {
    do
    {
      v84 = (_QWORD *)v83[1];
      (*(void (**)(_QWORD *))(*v83 + 16))(v83);
      v83 = v84;
    }
    while (v84);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 131));
  sub_1B6803F4C(a1 + 128);
  sub_1B6772C88((uint64_t)(a1 + 9));
  sub_1B6772C88((uint64_t)(a1 + 7));
  v85 = (void *)a1[3];
  if (v85)
  {
    free(v85);
    a1[3] = 0;
    a1[4] = 0;
  }
  return a1;
}

void sub_1B680BC40(uint64_t a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CFIndex v10;
  int64_t v11;
  int v12;
  void *v13;
  std::string *v14;
  void **v15;
  int64_t v16;
  std::string::size_type size;
  char *v18;
  int v19;
  std::string *v20;
  int64_t v21;
  char *v22;
  char *v23;
  std::string::size_type v24;
  _BYTE *v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  _BYTE *v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  _BYTE *v44;
  void **v45;
  __int128 v46;
  int v47;
  _QWORD v48[2];
  std::string v49;
  std::string v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  void **v54;
  uint64_t v55;
  unsigned __int8 v56;
  std::string __str;
  void **v58;
  unint64_t v59;
  void **v60;
  void **v61;
  unint64_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    Length = CFStringGetLength(theString);
    v9 = (char *)v48 - ((MEMORY[0x1E0C80A78](Length, v5, Length + 1, v6, v7, v8) + 16) & 0xFFFFFFFFFFFFFFF0);
    CFStringGetCString(theString, v9, v10, 0);
    sub_1B6781C7C(&v49, v9);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      sub_1B67EB704(&__str, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    else
      __str = v49;
    sub_1B6781C7C(&v54, " ");
    v48[1] = v48;
    v48[0] = a1 + 3184;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    while (1)
    {
      v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v12 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      v13 = (void *)__str.__r_.__value_.__r.__words[0];
      v14 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      v15 = (v56 & 0x80u) == 0 ? (void **)&v54 : v54;
      v16 = (v56 & 0x80u) == 0 ? v56 : v55;
      if (v16)
        break;
      v24 = 0;
LABEL_28:
      std::string::basic_string(&v50, &__str, 0, v24, (std::allocator<char> *)&v58);
      v25 = v52;
      if ((unint64_t)v52 >= v53)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1B6773BAC();
        if (0x5555555555555556 * ((uint64_t)(v53 - v51) >> 3) > v28)
          v28 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 3) >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v28;
        v62 = &v53;
        if (v29)
          v29 = (unint64_t)sub_1B67EF48C(v29);
        else
          v30 = 0;
        v31 = v29 + 24 * v27;
        v58 = (void **)v29;
        v59 = v31;
        v61 = (void **)(v29 + 24 * v30);
        v32 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
        *(_QWORD *)(v31 + 16) = *((_QWORD *)&v50.__r_.__value_.__l + 2);
        *(_OWORD *)v31 = v32;
        memset(&v50, 0, sizeof(v50));
        v60 = (void **)(v31 + 24);
        sub_1B67EF4D0(&v51, &v58);
        v33 = v52;
        sub_1B67EF554((uint64_t)&v58);
        v52 = v33;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
      }
      else
      {
        v26 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
        *((_QWORD *)v52 + 2) = *((_QWORD *)&v50.__r_.__value_.__l + 2);
        *(_OWORD *)v25 = v26;
        v52 = v25 + 24;
      }
      v34 = v56;
      if ((v56 & 0x80u) != 0)
        v34 = v55;
      std::string::erase(&__str, 0, v34 + v24);
    }
    size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = __str.__r_.__value_.__l.__size_;
    if (v11 >= v16)
    {
      v18 = (char *)v14 + v11;
      v19 = *(char *)v15;
      v20 = v14;
      do
      {
        v21 = v11 - v16;
        if (v21 == -1)
          break;
        v22 = (char *)memchr(v20, v19, v21 + 1);
        if (!v22)
          break;
        v23 = v22;
        if (!memcmp(v22, v15, v16))
        {
          if (v23 == v18)
            break;
          v24 = v23 - (char *)v14;
          if (v23 - (char *)v14 == -1)
            break;
          goto LABEL_28;
        }
        v20 = (std::string *)(v23 + 1);
        v11 = v18 - (v23 + 1);
      }
      while (v11 >= v16);
    }
    v35 = v52;
    if ((unint64_t)v52 >= v53)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3);
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1B6773BAC();
      v38 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 3);
      if (v38 <= v37 + 1)
        v38 = v37 + 1;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 3) >= 0x555555555555555)
        v39 = 0xAAAAAAAAAAAAAAALL;
      else
        v39 = v38;
      v62 = &v53;
      if (v39)
      {
        v40 = (void **)sub_1B67EF48C(v39);
        v42 = v48[0];
        v43 = v40;
        LOBYTE(v12) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
      }
      else
      {
        v43 = 0;
        v41 = 0;
        v42 = v48[0];
      }
      v45 = &v43[3 * v37];
      v58 = v43;
      v59 = (unint64_t)v45;
      v60 = v45;
      v61 = &v43[3 * v41];
      if ((v12 & 0x80) != 0)
      {
        sub_1B67EB704(v45, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        v45 = v60;
      }
      else
      {
        v46 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v45[2] = (void *)__str.__r_.__value_.__r.__words[2];
        *(_OWORD *)v45 = v46;
      }
      v60 = v45 + 3;
      sub_1B67EF4D0(&v51, &v58);
      v44 = v52;
      sub_1B67EF554((uint64_t)&v58);
    }
    else
    {
      if (v12 < 0)
      {
        sub_1B67EB704(v52, v13, size);
      }
      else
      {
        v36 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *((_QWORD *)v52 + 2) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *v35 = v36;
      }
      v42 = v48[0];
      v44 = (char *)v35 + 24;
    }
    v52 = v44;
    v47 = sub_1B67EF200(v42, &v51);
    v58 = (void **)&v51;
    sub_1B67EF5B4(&v58);
    if ((char)v56 < 0)
      operator delete(v54);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v47)
        goto LABEL_69;
    }
    else if (v47)
    {
      goto LABEL_69;
    }
    sub_1B681B970(v42);
LABEL_69:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1B680C100(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B67EF554(v1 - 136);
  *(_QWORD *)(v1 - 232) = v1 - 208;
  sub_1B67EF5B4((void ***)(v1 - 232));
  if (*(char *)(v1 - 161) < 0)
    operator delete(*(void **)(v1 - 184));
  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 233) < 0)
    operator delete(*(void **)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t sub_1B680C1A8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  char v20;

  v4 = (_BYTE *)(a1 + 11056);
  v5 = a1 + 3184;
  v6 = *(unsigned __int8 *)(a2 + 12);
  v7 = (char)v6;
  *(_DWORD *)(a1 + 3248) = (char)v6;
  *(_DWORD *)(a1 + 3692) = *(_DWORD *)(a2 + 40);
  if (v6 > 41)
  {
    if (v6 == 42)
    {
      sub_1B681B2E4(a1 + 3184);
    }
    else
    {
      if (v6 != 43)
        goto LABEL_11;
      sub_1B681B738(a1 + 3184);
    }
  }
  else if (v6 == 1)
  {
    sub_1B681B198(a1 + 3184);
  }
  else
  {
    if (v6 != 39)
      goto LABEL_11;
    sub_1B681B508(a1 + 3184);
  }
  v7 = *(_DWORD *)(a1 + 3248);
LABEL_11:
  if (v7 == 38)
  {
    sub_1B681B61C(v5);
  }
  else if (v7 == 20)
  {
    sub_1B681B3F8(v5);
  }
  *(_BYTE *)(a1 + 3786) = *(_DWORD *)(a2 + 40) == 2;
  *(_DWORD *)(a1 + 3364) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 3280) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 3270) = *(_DWORD *)(a2 + 14);
  *(_DWORD *)(a1 + 3688) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 3432) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 3776) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 3360) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 3340) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 3348) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 3724) = *(_DWORD *)(a2 + 1064);
  *(_QWORD *)(a1 + 11016) = -1;
  *(_QWORD *)(a1 + 11008) = -1;
  memset_pattern16((void *)(a1 + 11024), &unk_1B6918100, 0x10uLL);
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 11040) = v8;
  *v4 = 0;
  LODWORD(v9) = *(_DWORD *)(a2 + 1068);
  if ((int)v9 >= 2)
  {
    *(_BYTE *)(a1 + 3288) = v9;
    if ((int)((_DWORD)v9 << 24) >= 1)
    {
      v10 = 0;
      if (v9 <= 1u)
        v9 = 1;
      else
        v9 = v9;
      v11 = 1;
LABEL_21:
      v12 = (int *)(a2 + 1104 + 4 * v10);
      v13 = (int *)(a1 + 11040 + 4 * v10);
      do
      {
        v14 = *(v12 - 8);
        *(v13 - 8) = v14;
        v15 = *(v12 - 4);
        *(v13 - 4) = v15;
        v16 = *v12;
        *v13 = *v12;
        if (v14 != -1 || v15 != -13 || v16 != -1)
        {
          v11 = 0;
          *v4 = 1;
          if (++v10 != v9)
            goto LABEL_21;
          goto LABEL_35;
        }
        ++v12;
        ++v10;
        ++v13;
      }
      while (v9 != v10);
      if ((v11 & 1) != 0)
        goto LABEL_36;
LABEL_35:
      *(_BYTE *)(a1 + 3308) = 1;
    }
  }
LABEL_36:
  v20 = 0;
  result = sub_1B67EF12C(*(_QWORD *)(a1 + 3192), 0x75909A2E7B7A5950, (char *)(a2 + 60), 0, (uint64_t)&v20);
  if (!(_DWORD)result)
    return sub_1B681B970(v5);
  return result;
}

uint64_t sub_1B680C408(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  char __str[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x10uLL, "%d", a3);
  v6 = 0;
  return sub_1B67EF12C(*(_QWORD *)(a1 + 3192), a2, __str, 0, (uint64_t)&v6);
}

uint64_t sub_1B680C490(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  char __str[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x10uLL, "%u", a3);
  v6 = 0;
  return sub_1B67EF12C(*(_QWORD *)(a1 + 3192), a2, __str, 0, (uint64_t)&v6);
}

uint64_t sub_1B680C518(uint64_t a1, uint64_t a2, double a3)
{
  char v6;
  char __str[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x10uLL, "%f", a3);
  v6 = 0;
  return sub_1B67EF12C(*(_QWORD *)(a1 + 3192), a2, __str, 0, (uint64_t)&v6);
}

uint64_t sub_1B680C5A0(char **a1)
{
  char *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  dispatch_semaphore_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BOOL4 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned __int8 **v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  OSType *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  const char *v55;
  char *v57;
  int v58;
  void *v59;
  int v60;
  int v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  const __CFString *v67;
  const __CFString *v68;
  _BOOL4 v69;
  char *v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  char __str[8];
  std::__shared_weak_count *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v2 = sub_1B685B8B4(a1[439], 1, *((unsigned int *)a1 + 812), *((unsigned int *)a1 + 922));
  *a1 = v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__str = 0;
      v4 = MEMORY[0x1E0C81028];
      v5 = "Negotiation details unit creation failed.";
LABEL_20:
      _os_log_error_impl(&dword_1B676B000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)__str, 2u);
    }
    return 4294954392;
  }
  v3 = *((_DWORD *)a1 + 812);
  if (v3 == 39)
  {
    if ((**(unsigned int (***)(char *))v2)(v2))
      (*(void (**)(char *))(*(_QWORD *)*a1 + 272))(*a1);
    v3 = *((_DWORD *)a1 + 812);
  }
  if (v3 == 43 && (**(unsigned int (***)(char *))*a1)(*a1))
  {
    snprintf(__str, 0x10uLL, "%d", 1);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0xDA7CA283D396F91BLL, __str, 0, (uint64_t)&v72);
    snprintf(__str, 0x10uLL, "%d", 1);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0xAF63EE4C86020B22, __str, 0, (uint64_t)&v72);
  }
  if (*((int *)a1 + 936) >= 2)
  {
    snprintf(__str, 0x10uLL, "%d", 0);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0xDA7CA283D396F91BLL, __str, 0, (uint64_t)&v72);
    if (*((_DWORD *)a1 + 812) == 43)
      goto LABEL_16;
    snprintf(__str, 0x10uLL, "%d", 2);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0x6FBB85DC095D7E1, __str, 0, (uint64_t)&v72);
  }
  if (*((_DWORD *)a1 + 812) == 20
    && (*((int *)a1 + 936) > 1 || (*(unsigned int (**)(char *))(*(_QWORD *)*a1 + 16))(*a1)))
  {
    snprintf(__str, 0x10uLL, "%d", 1);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0xDA7CA283D396F91BLL, __str, 0, (uint64_t)&v72);
    snprintf(__str, 0x10uLL, "%d", 6);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0x70A12C1952D5628BLL, __str, 0, (uint64_t)&v72);
  }
LABEL_16:
  if (*((_BYTE *)a1 + 1016) || !sub_1B67C3C48(*((_DWORD *)a1 + 250)))
  {
    (*(void (**)(char *))(*(_QWORD *)*a1 + 272))(*a1);
    (*(void (**)(char *))(*(_QWORD *)*a1 + 280))(*a1);
    snprintf(__str, 0x10uLL, "%d", 0);
    LOBYTE(v72) = 0;
    sub_1B67EF12C((uint64_t)a1[399], 0x70A12C1952D5628BLL, __str, 0, (uint64_t)&v72);
  }
  if ((**(unsigned int (***)(char *))*a1)(*a1) && !*((_BYTE *)a1 + 3242) && *((_DWORD *)a1 + 936) == 1)
    return 4294954394;
  v7 = operator new(0x48uLL, MEMORY[0x1E0DE4E10]);
  if (!v7)
  {
    a1[1594] = 0;
    return 4294954392;
  }
  v8 = v7;
  v7[8] = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  a1[1594] = (char *)v7;
  v9 = operator new(8uLL, MEMORY[0x1E0DE4E10]);
  if (v9)
  {
    v10 = v9;
    *v9 = v8;
    v11 = (_QWORD *)operator new();
    *v11 = &off_1E6A15DF0;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    *(_QWORD *)&v12 = v10;
  }
  else
  {
    v11 = (_QWORD *)operator new();
    *v11 = &off_1E6A15DF0;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = 0;
    *(_QWORD *)&v12 = 0;
  }
  *((_QWORD *)&v12 + 1) = v11;
  v13 = (std::__shared_weak_count *)v8[1];
  *(_OWORD *)v8 = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!*v8)
    return 4294954392;
  if (!v8[8])
  {
    v16 = dispatch_semaphore_create(1);
    v8[8] = v16;
    if (!v16)
      return 4294954392;
  }
  v17 = *((int *)a1 + 835);
  v18 = (char *)operator new(0x120uLL, MEMORY[0x1E0DE4E10]);
  if (v18)
  {
    *(_QWORD *)(v18 + 7) = 0;
    *(_QWORD *)v18 = 0;
    *((_OWORD *)v18 + 1) = 0u;
    *((_OWORD *)v18 + 2) = 0u;
    *((_OWORD *)v18 + 3) = 0u;
    *((_WORD *)v18 + 32) = 0;
    *(_OWORD *)(v18 + 68) = 0u;
    *(_OWORD *)(v18 + 84) = 0u;
    *(_OWORD *)(v18 + 100) = 0u;
    *(_OWORD *)(v18 + 116) = 0u;
    *(_OWORD *)(v18 + 132) = 0u;
    *(_OWORD *)(v18 + 148) = 0u;
    *((_WORD *)v18 + 82) = 0;
    *((_WORD *)v18 + 109) = 0;
    *((_DWORD *)v18 + 64) = 0;
    *((_WORD *)v18 + 130) = 0;
    v18[262] = 0;
    *((_QWORD *)v18 + 21) = 0;
    *((_QWORD *)v18 + 22) = 0;
    *((_WORD *)v18 + 92) = 0;
    *(_QWORD *)(v18 + 204) = 0;
    *(_QWORD *)(v18 + 209) = 0;
    *(_QWORD *)(v18 + 188) = 0;
    *(_QWORD *)(v18 + 196) = 0;
    *((_QWORD *)v18 + 28) = 0;
    *((_QWORD *)v18 + 29) = 0;
    v18[240] = 0;
    *(_QWORD *)(v18 + 244) = 0;
    v18[252] = 0;
    *((_QWORD *)v18 + 33) = 0;
    *((_QWORD *)v18 + 34) = 0;
    v18[280] = 0;
    sub_1B67B65E8(__str, (uint64_t)v18);
  }
  else
  {
    sub_1B67B65E8(__str, 0);
  }
  v19 = a1 + 1386;
  v20 = *(_QWORD *)__str;
  if (*(_QWORD *)__str)
    sub_1B67B665C(&v19[2 * v17], *(uint64_t *)__str, (uint64_t)v75);
  v21 = v75;
  if (v75)
  {
    v22 = (unint64_t *)&v75->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v20)
    v6 = 0;
  else
    v6 = 4294954392;
  if (!v20)
    return v6;
  v24 = *((int *)a1 + 836);
  v25 = *((int *)a1 + 837);
  v26 = operator new(0x820uLL, MEMORY[0x1E0DE4E10]);
  if (v26)
  {
    v27 = (uint64_t)v26;
    sub_1B6890838((uint64_t)v26, (uint64_t)(a1 + 1386));
    sub_1B67B66D0(__str, v27);
  }
  else
  {
    sub_1B67B66D0(__str, 0);
  }
  v28 = operator new(0x6B8uLL, MEMORY[0x1E0DE4E10]);
  v29 = (uint64_t)v28;
  if (v28)
    sub_1B67E7D44((uint64_t)v28, (uint64_t)(a1 + 1386));
  sub_1B67B6744(&v72, v29);
  v30 = (*(_QWORD *)__str | v72) != 0;
  if (*(_QWORD *)__str | v72)
  {
    sub_1B67B665C(&a1[2 * v24 + 1418], *(uint64_t *)__str, (uint64_t)v75);
    sub_1B67B665C(&a1[2 * v25 + 1450], v72, (uint64_t)v73);
    v6 = 0;
  }
  else
  {
    v6 = 4294954392;
  }
  v31 = v73;
  if (v73)
  {
    v32 = (unint64_t *)&v73->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v75;
  if (v75)
  {
    v35 = (unint64_t *)&v75->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v30)
    return v6;
  v37 = *((unsigned int *)a1 + 835);
  v38 = a1 + 1386;
  if (v37 <= 0xF)
    v39 = &v19[2 * v37];
  else
    v39 = (uint64_t *)(a1 + 1578);
  sub_1B67B665C(a1 + 1584, *v39, v39[1]);
  v40 = *((unsigned int *)a1 + 836);
  if (v40 <= 0xF)
    v41 = &v38[2 * v40 + 32];
  else
    v41 = (uint64_t *)(a1 + 1580);
  v42 = (unsigned __int8 **)(a1 + 1586);
  sub_1B67B665C(a1 + 1586, *v41, v41[1]);
  v43 = *((unsigned int *)a1 + 837);
  if (v43 <= 0x3F)
    v44 = &v38[2 * v43 + 64];
  else
    v44 = (uint64_t *)(a1 + 1582);
  v45 = sub_1B67B665C(a1 + 1588, *v44, v44[1]);
  v46 = (uint64_t)a1[1584];
  if (!v46 || !*v42 || !*v45)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__str = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "VPS/SPS/PPS fail to get", (uint8_t *)__str, 2u);
    }
    return 4294954387;
  }
  v6 = sub_1B680D3C8((uint64_t)a1, v46, *((_DWORD *)a1 + 835));
  if ((_DWORD)v6)
    return v6;
  v6 = sub_1B680D478((uint64_t)a1, (uint64_t)a1[1586], *((_DWORD *)a1 + 836), *((_DWORD *)a1 + 835));
  if ((_DWORD)v6)
    return v6;
  v6 = sub_1B680DE38((uint64_t)a1, (uint64_t)a1[1588], *((_DWORD *)a1 + 837), *((_DWORD *)a1 + 836));
  if ((_DWORD)v6)
    return v6;
  *((_DWORD *)a1 + 3180) = 0;
  v47 = (OSType *)(a1 + 125);
  if (!*((_DWORD *)a1 + 250))
  {
    v53 = sub_1B67C5AC4(*v42, (int *)a1 + 250);
    if ((_DWORD)v53)
    {
      v6 = v53;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v6;
      *(_WORD *)__str = 0;
      v54 = MEMORY[0x1E0C81028];
      v55 = "Failed to get pixel format from sps\n";
LABEL_103:
      _os_log_error_impl(&dword_1B676B000, v54, OS_LOG_TYPE_ERROR, v55, (uint8_t *)__str, 2u);
      return v6;
    }
  }
  v48 = (char *)operator new(0x10B0uLL, MEMORY[0x1E0DE4E10]);
  if (!v48)
  {
    a1[1] = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294954392;
    *(_WORD *)__str = 0;
    v4 = MEMORY[0x1E0C81028];
    v5 = "VideoProcessorLRP creation failed.";
    goto LABEL_20;
  }
  *((_OWORD *)v48 + 266) = 0u;
  a1[1] = v48;
  v6 = sub_1B6851AC8((uint64_t)v48, *((unsigned __int8 *)a1 + 3560));
  if ((_DWORD)v6)
    return v6;
  v49 = (char *)operator new(0x38uLL, MEMORY[0x1E0DE4E10]);
  if (!v49)
  {
    a1[1658] = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294954392;
    *(_WORD *)__str = 0;
    v4 = MEMORY[0x1E0C81028];
    v5 = "PreProcessor creation failed.\n";
    goto LABEL_20;
  }
  v50 = v49;
  sub_1B681970C((uint64_t)v49, (uint64_t)a1[1]);
  a1[1658] = v50;
  if (*((int *)a1 + 923) <= 0)
  {
    v52 = a1[1659];
    goto LABEL_122;
  }
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  if ((dword_1EDBB4CC4 - 9) < 4)
  {
    v51 = (char *)operator new(0xA08uLL, MEMORY[0x1E0DE4E10]);
    v52 = v51;
    if (!v51)
      goto LABEL_116;
LABEL_115:
    sub_1B67CBDF8((uint64_t)v51, (uint64_t)(a1 + 398));
    goto LABEL_116;
  }
  if ((dword_1EDBB4CC4 - 7) > 1)
  {
    v51 = (char *)operator new(0xA08uLL, MEMORY[0x1E0DE4E10]);
    v52 = v51;
    if (!v51)
      goto LABEL_116;
    goto LABEL_115;
  }
  v57 = (char *)operator new(0xA08uLL, MEMORY[0x1E0DE4E10]);
  v52 = v57;
  if (v57)
    sub_1B6872AD8((uint64_t)v57, (uint64_t)(a1 + 398));
LABEL_116:
  a1[1659] = v52;
  if (*((_DWORD *)a1 + 923) != 2)
  {
LABEL_122:
    v58 = 3;
    if (!v52)
      goto LABEL_127;
    goto LABEL_123;
  }
  if (a1[403] || *((_BYTE *)a1 + 3233) || *((_BYTE *)a1 + 3232))
  {
    v58 = 1;
    if (!v52)
      goto LABEL_127;
  }
  else
  {
    v58 = *((unsigned __int8 *)a1 + 3534);
    if (!v52)
      goto LABEL_127;
  }
LABEL_123:
  v6 = (*(uint64_t (**)(char *, char **))(*(_QWORD *)v52 + 16))(v52, a1);
  if ((_DWORD)v6)
    return v6;
  if (*((int *)a1 + 923) >= 1)
  {
    v59 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)a1[1659] + 48))(a1[1659]);
    goto LABEL_128;
  }
LABEL_127:
  v59 = 0;
LABEL_128:
  if (*((_BYTE *)a1 + 1016))
  {
    v60 = 1982882104;
  }
  else if (CVIsCompressedPixelFormatAvailable(*v47))
  {
    v60 = *v47;
  }
  else
  {
    v60 = 0;
  }
  v6 = sub_1B67C5D10((uint64_t *)a1 + 1586, 0, v58, v59, (uint64_t *)a1 + 1591, v60);
  if (!(_DWORD)v6)
  {
    v61 = *((_BYTE *)a1 + 1016) ? 875704438 : 0;
    v6 = sub_1B67C5D10((uint64_t *)a1 + 1586, 1, v58, 0, (uint64_t *)a1 + 1592, v61);
    if (!(_DWORD)v6)
    {
      if (!*((_BYTE *)a1 + 1016)
        || (v6 = sub_1B67C5D10((uint64_t *)a1 + 1586, 1, v58, 0, (uint64_t *)a1 + 1593, 875704422), !(_DWORD)v6))
      {
        if ((**(unsigned int (***)(char *))*a1)(*a1))
        {
          a1[1592][28] = 1;
          a1[1591][28] = 1;
        }
        sub_1B680DF70((uint64_t)(a1 + 15), (uint64_t)(a1 + 398));
        if (*((_BYTE *)a1 + 3400))
        {
          v62 = operator new(0x3C0uLL, MEMORY[0x1E0DE4E10]);
          if (!v62)
          {
            a1[1657] = 0;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              return 4294954392;
            *(_WORD *)__str = 0;
            v4 = MEMORY[0x1E0C81028];
            v5 = "Rate control creation failed.\n";
            goto LABEL_20;
          }
          sub_1B685633C((uint64_t)v62, (_DWORD *)a1 + 796);
          a1[1657] = (char *)v63;
          sub_1B6856400(v63, (uint64_t)a1);
        }
        *((_DWORD *)a1 + 3219) = 0;
        *((_DWORD *)a1 + 3312) = -1;
        *((_DWORD *)a1 + 3320) = 2000;
        if (!*((_BYTE *)a1 + 3237))
        {
          if (*((_BYTE *)a1 + 3794))
          {
            v6 = sub_1B680E0C8((uint64_t)a1);
            if ((_DWORD)v6)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                return v6;
              *(_WORD *)__str = 0;
              v54 = MEMORY[0x1E0C81028];
              v55 = "PrepareModeDecision failed\n";
              goto LABEL_103;
            }
          }
        }
        v64 = operator new(0xE0uLL, MEMORY[0x1E0DE4E10]);
        if (v64)
        {
          v64[7] = 850045863;
          *((_OWORD *)v64 + 4) = 0u;
          *((_OWORD *)v64 + 5) = 0u;
          *((_OWORD *)v64 + 6) = 0u;
          *((_OWORD *)v64 + 7) = 0u;
          v64[16] = v64 + 16;
          v64[17] = v64 + 16;
          v64[18] = 0;
          v64[19] = v64 + 19;
          v64[20] = v64 + 19;
          v64[21] = 0;
          v64[22] = v64 + 22;
          v64[23] = v64 + 22;
          v64[24] = 0;
          v64[25] = v64 + 25;
          v65 = *((_DWORD *)a1 + 936);
          v64[26] = v64 + 25;
          v64[27] = 0;
          if (v65 >= 2)
            v66 = 64;
          else
            v66 = 2;
          a1[6] = (char *)v64;
          sub_1B6804018((uint64_t)v64, (uint64_t)(a1 + 398), v66);
          *((_BYTE *)a1 + 1152) = 0;
          *((_DWORD *)a1 + 289) = 0;
          a1[145] = 0;
          v67 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("EnableLRPEncStatsMonitor"), CFSTR("com.apple.VideoProcessing"));
          v68 = v67;
          if (v67)
          {
            v69 = CFStringGetIntValue(v67) != 0;
            CFRelease(v68);
          }
          else
          {
            v69 = 0;
          }
          if (!a1[147] || v69)
          {
            v70 = (char *)operator new(0x88uLL, MEMORY[0x1E0DE4E10]);
            v71 = v70;
            if (v70)
            {
              sub_1B6872CF8((uint64_t)v70, (uint64_t)sub_1B680E1B8, (uint64_t)a1);
              v6 = 0;
            }
            else
            {
              v6 = 4294954392;
            }
            a1[146] = v71;
          }
          else
          {
            v6 = 0;
            a1[146] = 0;
          }
          return v6;
        }
        a1[6] = 0;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__str = 0;
          v4 = MEMORY[0x1E0C81028];
          v5 = "Sequence stats agent creation failed.\n";
          goto LABEL_20;
        }
        return 4294954392;
      }
    }
  }
  return v6;
}

void sub_1B680D364(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC98134](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t sub_1B680D3C8(uint64_t a1, uint64_t a2, char a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;

  *(_BYTE *)(a2 + 168) = a3;
  *(_WORD *)(a2 + 169) = 256;
  sub_1B6802BCC(a2, a1 + 3184);
  LOBYTE(v5) = 0;
  *(_WORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 171) = 0;
  v6 = *(unsigned __int8 *)(a2 + 169);
  if (*(int *)(a1 + 3488) >= 2)
    v5 = *(_DWORD *)(a1 + 3492);
  v7 = *(unsigned __int8 *)(a2 + 12 * *(unsigned __int8 *)(a2 + 169) + 76);
  if (*(char *)(a1 + 3333) + *(char *)(a1 + 3334) + 1 > v7)
    return 4294954387;
  result = 0;
  v9 = a2 + v6;
  *(_BYTE *)(v9 + 172) = v7 - 1;
  *(_BYTE *)(v9 + 179) = v5;
  *(_DWORD *)(a2 + 4 * v6 + 188) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_WORD *)(a2 + 218) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 262) = 0;
  return result;
}

uint64_t sub_1B680D478(uint64_t a1, uint64_t a2, int a3, char a4)
{
  int v7;
  char v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  unsigned int v21;
  int32x4_t v22;
  int16x8_t v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;
  int v39;
  unsigned __int8 v40;
  unsigned int v41;
  char v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  char v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t result;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  int *v71;
  _WORD *v72;
  uint64_t v73;
  int *v74;
  int v75;
  uint64_t v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  _BOOL4 v91;
  _BOOL4 v92;
  BOOL v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  void **v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  _OWORD v105[8];
  _OWORD v106[8];
  int v107[3];

  *(_BYTE *)a2 = a4;
  *(_WORD *)(a2 + 1) = 256;
  sub_1B6802BCC(a2 + 4, a1 + 3184);
  *(_WORD *)(a2 + 68) = 0;
  *(_BYTE *)(a2 + 172) = a3;
  v7 = *(_DWORD *)(a1 + 1000);
  v8 = 3;
  if (v7 > 1278226487)
  {
    if (v7 <= 1751411058)
    {
      if (v7 == 1278226488)
      {
LABEL_16:
        v8 = 0;
        goto LABEL_18;
      }
      v9 = 1278226736;
    }
    else
    {
      if (v7 == 2019963956 || v7 == 2016687156)
        goto LABEL_18;
      v9 = 1751411059;
    }
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_17;
  }
  if (v7 > 875836517)
  {
    if (v7 == 875836518)
      goto LABEL_18;
    v10 = 875836534;
  }
  else
  {
    if (v7 == 645424692)
      goto LABEL_18;
    v10 = 645428788;
  }
  if (v7 != v10)
LABEL_17:
    v8 = 1;
LABEL_18:
  *(_BYTE *)(a2 + 173) = v8;
  *(_BYTE *)(a2 + 174) = 0;
  *(_BYTE *)(a2 + 194) = *(_BYTE *)(a1 + 3498) - 8;
  *(_BYTE *)(a2 + 195) = *(_BYTE *)(a1 + 3499) - 8;
  if (*(char *)(a1 + 3334) <= 0)
    v11 = 6;
  else
    v11 = 12;
  *(_BYTE *)(a2 + 196) = v11;
  *(_BYTE *)(a2 + 197) = 0;
  v12 = *(unsigned __int8 *)(a2 + 1);
  v13 = a2 + v12;
  *(_BYTE *)(v13 + 198) = *(_BYTE *)(*(_QWORD *)(a1 + 12672) + v12 + 172);
  *(_BYTE *)(v13 + 205) = *(_BYTE *)(*(_QWORD *)(a1 + 12672) + v12 + 179);
  *(_DWORD *)(a2 + 4 * v12 + 212) = 0;
  LOBYTE(v12) = *(_BYTE *)(a1 + 3352);
  *(_BYTE *)(a2 + 240) = v12 - 3;
  *(_BYTE *)(a2 + 241) = *(_BYTE *)(a1 + 3353) - v12;
  LOBYTE(v12) = *(_BYTE *)(a1 + 3354);
  *(_BYTE *)(a2 + 242) = v12 - 2;
  *(_BYTE *)(a2 + 243) = *(_BYTE *)(a1 + 3355) - v12;
  *(_BYTE *)(a2 + 244) = *(_BYTE *)(a1 + 3357);
  *(_BYTE *)(a2 + 245) = *(_BYTE *)(a1 + 3356);
  *(_BYTE *)(a2 + 246) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 249) = *(_BYTE *)(a1 + 3418) != 0;
  *(_BYTE *)(a2 + 250) = 0;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 10724) + *(_DWORD *)(a1 + 10728);
  *(_BYTE *)(a2 + 280) = *(char *)(a1 + 3334) > 0;
  *(_BYTE *)(a2 + 322) = *(_BYTE *)(a1 + 3430);
  *(_BYTE *)(a2 + 323) = 0;
  v14 = *(_DWORD *)(a1 + 3608);
  *(_WORD *)(a2 + 1896) = v14;
  v15 = *(_DWORD *)(a1 + 3612);
  *(_WORD *)(a2 + 1898) = v15;
  v16 = *(unsigned __int8 *)(a1 + 3596);
  *(_BYTE *)(a2 + 1903) = v16;
  v17 = *(_WORD *)(a1 + 3600);
  *(_BYTE *)(a2 + 1904) = v17;
  v18 = *(_WORD *)(a1 + 3602);
  *(_BYTE *)(a2 + 1905) = v18;
  v19 = *(_WORD *)(a1 + 3604);
  *(_BYTE *)(a2 + 1906) = v19;
  v20 = *(_WORD *)(a1 + 3598);
  *(_BYTE *)(a2 + 1907) = v20;
  *(_BYTE *)(a2 + 1908) = v20;
  v21 = *(_DWORD *)(a1 + 1000);
  v22 = vdupq_n_s32(v21);
  v23 = (int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_1B69178B0);
  v22.i32[3] = v21 & 0xFFBFFFFB;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16(v23, (int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_1B69178A0)))) & 1) != 0)
  {
    v16 = 1;
    *(_BYTE *)(a2 + 1903) = 1;
  }
  if ((unsigned __int16)v14 | (unsigned __int16)v15 || *(_BYTE *)(a2 + 1900) || *(_BYTE *)(a2 + 1901))
    goto LABEL_26;
  v24 = 1;
  if (*(_BYTE *)(a2 + 1902) == 5
    && !v16
    && v17 == 2
    && v18 == 2
    && v19 == 2
    && !(_BYTE)v20)
  {
    if (*(_BYTE *)(a2 + 1909)
      || *(_BYTE *)(a2 + 1910)
      || *(_BYTE *)(a2 + 1911)
      || *(_WORD *)(a2 + 1912)
      || *(_WORD *)(a2 + 1914)
      || *(_WORD *)(a2 + 1916)
      || *(_WORD *)(a2 + 1918)
      || *(_BYTE *)(a2 + 1920)
      || *(_DWORD *)(a2 + 1924)
      || *(_DWORD *)(a2 + 1928)
      || *(_BYTE *)(a2 + 1932)
      || *(_DWORD *)(a2 + 1936)
      || *(_BYTE *)(a2 + 1940)
      || *(_BYTE *)(a2 + 1976)
      || *(_BYTE *)(a2 + 1977)
      || *(_BYTE *)(a2 + 1978)
      || *(_BYTE *)(a2 + 1979)
      || *(_DWORD *)(a2 + 1980)
      || *(_DWORD *)(a2 + 1984)
      || *(_DWORD *)(a2 + 1988)
      || *(_DWORD *)(a2 + 1992))
    {
LABEL_26:
      v24 = 1;
      goto LABEL_27;
    }
    v24 = *(_DWORD *)(a2 + 1996) != 0;
  }
LABEL_27:
  *(_BYTE *)(a2 + 324) = v24;
  *(_BYTE *)(a2 + 325) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 186) = 0;
  sub_1B680EA24(a1 + 3184, (int *)(a2 + 176), (int *)(a2 + 180));
  v25 = *(_DWORD *)(a2 + 176);
  v26 = *(__int16 *)(a1 + 3270);
  v27 = *(unsigned __int8 *)(a2 + 173);
  v28 = __OFSUB__(v25, v26);
  v29 = v25 - v26;
  if (!((v29 < 0) ^ v28 | (v29 == 0)))
  {
    if ((v27 - 1) >= 2)
      v30 = 1;
    else
      v30 = 2;
    *(_WORD *)(a2 + 188) = v29 / v30;
    *(_DWORD *)(a2 + 2032) = v29;
    *(_BYTE *)(a2 + 184) = 1;
  }
  v31 = *(_DWORD *)(a2 + 180);
  v32 = *(__int16 *)(a1 + 3272);
  v28 = __OFSUB__(v31, v32);
  v33 = v31 - v32;
  if (!((v33 < 0) ^ v28 | (v33 == 0)))
  {
    if (v27 == 1)
      v34 = 2;
    else
      v34 = 1;
    *(_WORD *)(a2 + 192) = v33 / v34;
    *(_DWORD *)(a2 + 2040) = v33;
    *(_BYTE *)(a2 + 184) = 1;
  }
  v35 = *(_BYTE *)(a2 + 194);
  *(_BYTE *)(a2 + 2000) = v35 + 8;
  *(_BYTE *)(a2 + 2001) = 6 * v35;
  v36 = *(_BYTE *)(a2 + 195);
  *(_BYTE *)(a2 + 2002) = v36 + 8;
  *(_BYTE *)(a2 + 2003) = 6 * v36;
  *(_DWORD *)(a2 + 2004) = 16 << *(_BYTE *)(a2 + 196);
  v37 = *(_BYTE *)(a2 + 240) + 3;
  *(_BYTE *)(a2 + 2008) = v37;
  v38 = *(_BYTE *)(a2 + 241) + v37;
  *(_BYTE *)(a2 + 2009) = v38;
  v39 = 1 << v38;
  *(_BYTE *)(a2 + 2013) = 1 << v38;
  v40 = *(_BYTE *)(a2 + 242) + 2;
  *(_BYTE *)(a2 + 2010) = v40;
  *(_BYTE *)(a2 + 2011) = *(_BYTE *)(a2 + 243) + v40;
  v41 = v27 - 1;
  v42 = v40;
  if (v40 <= 3u)
    v42 = 3;
  v43 = v42 - 1;
  if (v41 >= 2)
    v44 = v40;
  else
    v44 = v43;
  *(_BYTE *)(a2 + 2012) = v44;
  *(_DWORD *)(a2 + 2016) = (v25 + v39 - 1) >> v38;
  *(_DWORD *)(a2 + 2020) = (v31 + v39 - 1) >> v38;
  if (*(_BYTE *)(a2 + 250))
  {
    *(_BYTE *)(a2 + 256) = *(_BYTE *)(a2 + 251) + 1;
    *(_BYTE *)(a2 + 257) = *(_BYTE *)(a2 + 252) + 1;
    v45 = *(_BYTE *)(a2 + 253) + 3;
    *(_BYTE *)(a2 + 258) = v45;
    *(_BYTE *)(a2 + 259) = *(_BYTE *)(a2 + 254) + v45;
  }
  v46 = *(unsigned int *)(a2 + 260);
  if ((_DWORD)v46)
  {
    v47 = (uint64_t *)(a2 + 264);
    result = sub_1B680EB20((void **)(a2 + 264), v46);
    if ((_DWORD)result)
      return result;
    if (*(_DWORD *)(a2 + 260))
    {
      v49 = 0;
      v50 = a1 + 3820;
      do
      {
        v51 = *v47;
        v52 = *v47 + 248 * v49;
        memset(v106, 0, 41);
        memset(v105, 0, sizeof(v105));
        *(_OWORD *)((char *)&v106[2] + 10) = 0u;
        *(_OWORD *)((char *)&v106[3] + 10) = 0u;
        *(_OWORD *)((char *)&v106[4] + 10) = 0u;
        memset((char *)&v106[5] + 10, 0, 28);
        v53 = *(unsigned __int8 *)(a1 + 108 * (int)v49 + 3900);
        *(_BYTE *)(v52 + 163) = v53;
        if (v53)
        {
          v54 = v51 + 248 * v49;
          *(_DWORD *)(v54 + 172) = 0;
          v55 = (_WORD *)(v54 + 172);
          *((_DWORD *)v55 - 2) = 0;
          v56 = a1 + 108 * (int)v49;
          v57 = *(char *)(v56 + 3901);
          *((_BYTE *)v55 - 4) = v57 < 1;
          if (v57 < 0)
            v57 = -v57;
          *(v55 - 1) = v57 - 1;
          v58 = *(unsigned __int8 *)(v56 + 3902);
          BYTE2(v106[2]) = v58;
          if (v58)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            v62 = a1 + 3903 + 108 * (int)v49;
            do
            {
              v63 = *(_BYTE *)(v62 + v60);
              v61 |= (v63 & 1) << v60;
              *v55 = v61;
              if ((v63 & 1) == 0)
              {
                v59 |= ((*(unsigned __int8 *)(v62 + v60) >> 1) & 1) << v60;
                v55[1] = v59;
              }
              if ((_DWORD)v58 - 1 == v60)
                LOWORD(v64) = 0;
              else
                v64 = *(_DWORD *)(v50 + 108 * (int)(((v49 << 32) - 0x100000000) >> 32) + 4 * v60);
              *((_WORD *)v106 + v60++) = v64;
            }
            while (v58 != v60);
          }
        }
        else
        {
          v65 = v51 + 248 * v49;
          *(_WORD *)(v65 + 176) = 0;
          v66 = v65 + 176;
          *(_DWORD *)(v66 + 66) = 0;
          v67 = (_WORD *)(v66 + 66);
          v68 = *(unsigned __int8 *)(a1 + 108 * (int)v49 + 3816);
          if (*(_BYTE *)(a1 + 108 * (int)v49 + 3816))
          {
            v69 = 0;
            v70 = 0;
            v71 = (int *)(v50 + 108 * (int)v49);
            v72 = (_WORD *)(v66 + 68);
            v73 = *(unsigned __int8 *)(a1 + 108 * (int)v49 + 3816);
            v74 = v71;
            do
            {
              v75 = *v74++;
              if (v75 < 0)
                *(_BYTE *)v66 = ++v69;
              else
                *(_BYTE *)(v66 + 1) = ++v70;
              --v73;
            }
            while (v73);
            if (v69)
            {
              v76 = 0;
              v77 = 0;
              v78 = 0;
              do
              {
                v79 = 0;
                v80 = 0x7FFFFFFF;
                v81 = -1;
                do
                {
                  v82 = v71[v79];
                  if (v82 < 0 && v77 < -v82 && v80 > -v82)
                  {
                    v80 = -v82;
                    v81 = v79;
                  }
                  ++v79;
                }
                while (v68 != v79);
                v83 = a1 + 108 * (int)v49 + 3812;
                v84 = *(_DWORD *)(v83 + 4 * v81 + 8);
                *(_WORD *)(v51 + 248 * v49 + 2 * v76 + 178) = v78 + ~(_WORD)v84;
                *v67 |= *(unsigned __int8 *)(v83 + v81 + 72) << v76;
                v77 = -v84;
                ++v76;
                v78 = v84;
              }
              while (v76 != v69);
            }
            if (v70)
            {
              v85 = 0;
              v86 = 0;
              do
              {
                v87 = 0;
                v88 = 0x7FFFFFFF;
                v89 = -1;
                do
                {
                  v90 = v71[v87];
                  v91 = v90 > v86;
                  v92 = v90 < v88;
                  v93 = !v91 || !v92;
                  if (v91 && v92)
                    v94 = v71[v87];
                  else
                    v94 = v88;
                  if (v93)
                    v95 = v89;
                  else
                    v95 = v87;
                  if (v90 >= 1)
                  {
                    v88 = v94;
                    v89 = v95;
                  }
                  ++v87;
                }
                while (v68 != v87);
                v96 = a1 + 108 * (int)v49 + 3812;
                v97 = *(_DWORD *)(v96 + 4 * v89 + 8);
                *(_WORD *)(v51 + 248 * v49 + 2 * v85 + 210) = v97 + ~(_WORD)v86;
                *v72 |= *(unsigned __int8 *)(v96 + v89 + 72) << v85++;
                v86 = v97;
              }
              while (v85 != v70);
            }
          }
        }
        sub_1B688E170(v52, (uint64_t)v105);
        ++v49;
      }
      while (v49 < *(unsigned int *)(a2 + 260));
    }
  }
  if (*(_DWORD *)(a1 + 3688) != 1 && *(_DWORD *)(a1 + 3692) != 1)
    return 0;
  v98 = (void **)(a2 + 2048);
  if (!*(_QWORD *)(a2 + 2056))
  {
    if (*v98)
    {
      free(*v98);
      *v98 = 0;
      *(_QWORD *)(a2 + 2056) = 0;
    }
    if (malloc_type_posix_memalign((void **)(a2 + 2048), 0x10uLL, 0x758uLL, 0x1000040EF885EF6uLL) || !*v98)
      return 4294954392;
    bzero(*v98, 0x758uLL);
    *(_QWORD *)(a2 + 2056) = 1;
  }
  v99 = (char *)*v98;
  LODWORD(v105[0]) = *(__int16 *)(a1 + 3270);
  v107[0] = *(__int16 *)(a1 + 3272);
  sub_1B680EA24(a1 + 3184, (int *)v105, v107);
  v100 = SLODWORD(v105[0]) >> 4;
  v101 = v107[0] >> 4;
  v102 = *(char *)(a1 + 3333);
  v103 = *(char *)(a1 + 3334);
  if ((v102 & v103) < 0 != v28)
    v104 = -1;
  else
    v104 = v103 + v102;
  bzero(v99, 0x758uLL);
  result = sub_1B6890AE8((uint64_t)v99, (int)*(double *)(a1 + 3280), *(_DWORD *)(a1 + 3364), v100, v101, *(_DWORD *)(a1 + 3264), *(unsigned __int16 *)(a1 + 3268), v104);
  if (!(_DWORD)result)
  {
    v99[17] = a3 & ~(a3 >> 31);
    v99[18] = 1;
    v99[276] = 0;
    *((_DWORD *)v99 + 68) = 8;
    *((_DWORD *)v99 + 70) = 9;
    *((_DWORD *)v99 + 332) = v100 - 1;
    *((_DWORD *)v99 + 333) = v101 - 1;
    v99[1339] = 0;
    v99[1356] = 0;
    *(_QWORD *)(v99 + 1868) = 0x200000001000;
    *((_DWORD *)v99 + 469) = v101 * v100 - 1;
    v99[23] = 0;
  }
  return result;
}

uint64_t sub_1B680DE38(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  uint64_t result;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;

  *(_BYTE *)a2 = a3;
  *(_BYTE *)(a2 + 1) = a4;
  v4 = *(_QWORD *)(a1 + 12688);
  if (*(unsigned __int8 *)(v4 + 172) != a4)
    return 4294954387;
  *(_WORD *)(a2 + 2) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 5) = *(_BYTE *)(a1 + 3313) != 0;
  *(_BYTE *)(a2 + 6) = 0;
  v5 = *(_BYTE *)(a1 + 3335) - 1;
  *(_BYTE *)(a2 + 7) = v5;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = *(_BYTE *)(a1 + 3289) - 26;
  *(_BYTE *)(a2 + 10) = 0;
  *(_BYTE *)(a2 + 11) = *(_BYTE *)(a1 + 3536);
  v6 = *(char *)(a1 + 3308);
  *(_BYTE *)(a2 + 12) = v6 > 0;
  if (v6 < 1)
    v7 = 0;
  else
    v7 = *(unsigned __int8 *)(a1 + 3311);
  *(_BYTE *)(a2 + 13) = v7;
  *(_WORD *)(a2 + 14) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v9 = *(unsigned __int8 *)(a1 + 3534);
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 3533) | v9;
  if (v9)
    v10 = *(_BYTE *)(a1 + 3441) != 0;
  else
    v10 = 0;
  *(_BYTE *)(a2 + 18) = v10;
  v11 = *(_DWORD *)(a1 + 3360);
  *(_WORD *)(a2 + 19) = 0;
  *(_BYTE *)(a2 + 21) = v11 == 4;
  *(_WORD *)(a2 + 28) = 256;
  *(_BYTE *)(a2 + 30) = *(_BYTE *)(a1 + 3532);
  v12 = *(unsigned __int8 *)(a1 + 3408);
  *(_BYTE *)(a2 + 31) = *(_BYTE *)(a1 + 3408) == 0;
  if (v12)
    *(_WORD *)(a2 + 32) = 0;
  if (*(_BYTE *)(a1 + 3496))
    v13 = 1;
  else
    v13 = *(_BYTE *)(a1 + 3497) != 0;
  result = 0;
  *(_BYTE *)(a2 + 1595) = v13;
  *(_BYTE *)(a2 + 34) = 0;
  *(_DWORD *)(a2 + 1596) = 0;
  *(_DWORD *)(a2 + 1620) = *(unsigned __int8 *)(v4 + 2009) - v7;
  return result;
}

void sub_1B680DF70(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t i;
  int v7;
  double v8;
  float v9;

  bzero((void *)a1, 0x370uLL);
  v4 = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 68) = 0x186A0000280A0;
  v5 = *(_DWORD *)(a2 + 560);
  if (v5 >= 1)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_DWORD *)(a2 + 188 + 4 * i);
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 36 + 4 * i) = v7;
        v5 = *(_DWORD *)(a2 + 560);
      }
    }
  }
  v8 = *(double *)(a2 + 96);
  v9 = v8;
  *(float *)(a1 + 88) = v9;
  *(float *)(a1 + 92) = v9;
  *(double *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 476);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 874) = *(_BYTE *)(a2 + 7873);
  *(_QWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 800) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 348) = 0;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 692) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  *(_BYTE *)(a1 + 832) = 1;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = *(unsigned __int8 *)(a2 + 603);
  *(_DWORD *)(a1 + 860) = -1;
  *(_QWORD *)(a1 + 864) = -1;
  *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 124) != 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 760) = 0;
}

uint64_t sub_1B680E0C8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 12688);
  v4 = *(unsigned __int8 *)(v3 + 241) + 1;
  v5 = &byte_1B69221BC;
  do
  {
    v6 = *v5++;
    v2 += v6;
    --v4;
  }
  while (v4);
  v7 = (*(_DWORD *)(v3 + 2016) * v2 * *(_DWORD *)(v3 + 2020));
  *(_DWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 44) = v7;
  if (*(_QWORD *)(a1 + 32) >= v7)
    return 0;
  if (v7 > 0x320000)
    return 4294954392;
  v8 = (_QWORD *)(a1 + 24);
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    free(v9);
    *v8 = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (malloc_type_posix_memalign((void **)(a1 + 24), 0x10uLL, 32 * v7, 0x1000040CAC56904uLL) || !*v8)
    return 4294954392;
  v11 = 0;
  v12 = v7;
  do
  {
    v13 = (_OWORD *)(*v8 + v11);
    *v13 = 0uLL;
    v13[1] = 0uLL;
    v11 += 32;
    --v12;
  }
  while (v12);
  result = 0;
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

void sub_1B680E1B8(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  double v9;
  double *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  double *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  double v20;
  double *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  double v26;
  double *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  double v32;
  double *v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  double v38;
  double *v39;
  _QWORD *v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  double v44;
  double *v45;
  _QWORD *v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  double v50;
  double *v51;
  _QWORD *v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  double v56;
  double *v57;
  _QWORD *v58;
  unint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  double *v63;
  _QWORD *v64;
  unint64_t v65;
  BOOL v66;
  _QWORD *v67;
  double v68;
  double *v69;
  _QWORD *v70;
  unint64_t v71;
  BOOL v72;
  _QWORD *v73;
  double v74;
  double *v75;
  _QWORD *v76;
  unint64_t v77;
  BOOL v78;
  _QWORD *v79;
  double v80;
  double *v81;
  _QWORD *v82;
  unint64_t v83;
  BOOL v84;
  _QWORD *v85;
  double v86;
  double *v87;
  _QWORD *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  double v92;
  double v93;
  double *v94;
  unint64_t v95;
  BOOL v96;
  _QWORD *v97;
  _BOOL4 v98;
  double v99;
  double v100;
  double v101;
  NSObject *v102;
  const char *v103;
  uint32_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  uint64_t v109;
  double v110;
  double v111;
  uint8_t buf[4];
  uint64_t v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  double v135;
  __int16 v136;
  double v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  char *v143;
  __int16 v144;
  double v145;
  char __str[16];
  __int128 v147;
  __int128 v148;
  __int16 v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  if (a2 > 0.0)
  {
    if (a1)
    {
      v4 = *(_QWORD *)(a1 + 1168);
      v7 = *(_QWORD **)(v4 + 32);
      v5 = (double *)(v4 + 32);
      v6 = v7;
      v8 = 0.0;
      v9 = 0.0;
      if (!v7)
        goto LABEL_170;
      v10 = v5;
      v11 = v6;
      do
      {
        v12 = v11[4];
        v13 = v12 >= (unint64_t)"input_frames";
        if (v12 >= (unint64_t)"input_frames")
          v14 = v11;
        else
          v14 = v11 + 1;
        if (v13)
          v10 = (double *)v11;
        v11 = (_QWORD *)*v14;
      }
      while (*v14);
      v9 = 0.0;
      if (v10 != v5 && *((_QWORD *)v10 + 4) <= (unint64_t)"input_frames")
        v9 = v10[5];
      if (v6)
      {
        v15 = v5;
        v16 = v6;
        do
        {
          v17 = v16[4];
          v18 = v17 >= (unint64_t)"encoded_frames";
          if (v17 >= (unint64_t)"encoded_frames")
            v19 = v16;
          else
            v19 = v16 + 1;
          if (v18)
            v15 = (double *)v16;
          v16 = (_QWORD *)*v19;
        }
        while (*v19);
        v20 = 0.0;
        if (v15 != v5 && *((_QWORD *)v15 + 4) <= (unint64_t)"encoded_frames")
          v20 = v15[5];
        v21 = v5;
        v22 = v6;
        do
        {
          v23 = v22[4];
          v24 = v23 >= (unint64_t)"transmit_frames";
          if (v23 >= (unint64_t)"transmit_frames")
            v25 = v22;
          else
            v25 = v22 + 1;
          if (v24)
            v21 = (double *)v22;
          v22 = (_QWORD *)*v25;
        }
        while (*v25);
        v26 = 0.0;
        if (v21 != v5 && *((_QWORD *)v21 + 4) <= (unint64_t)"transmit_frames")
          v26 = v21[5];
        v27 = v5;
        v28 = v6;
        do
        {
          v29 = v28[4];
          v30 = v29 >= (unint64_t)"dropped_frames";
          if (v29 >= (unint64_t)"dropped_frames")
            v31 = v28;
          else
            v31 = v28 + 1;
          if (v30)
            v27 = (double *)v28;
          v28 = (_QWORD *)*v31;
        }
        while (*v31);
        v32 = 0.0;
        if (v27 != v5 && *((_QWORD *)v27 + 4) <= (unint64_t)"dropped_frames")
          v32 = v27[5];
        v33 = v5;
        v34 = v6;
        do
        {
          v35 = v34[4];
          v36 = v35 >= (unint64_t)"idr_frames";
          if (v35 >= (unint64_t)"idr_frames")
            v37 = v34;
          else
            v37 = v34 + 1;
          if (v36)
            v33 = (double *)v34;
          v34 = (_QWORD *)*v37;
        }
        while (*v37);
        v38 = 0.0;
        if (v33 != v5 && *((_QWORD *)v33 + 4) <= (unint64_t)"idr_frames")
          v38 = v33[5];
        v39 = v5;
        v40 = v6;
        do
        {
          v41 = v40[4];
          v42 = v41 >= (unint64_t)"repeated_frames";
          if (v41 >= (unint64_t)"repeated_frames")
            v43 = v40;
          else
            v43 = v40 + 1;
          if (v42)
            v39 = (double *)v40;
          v40 = (_QWORD *)*v43;
        }
        while (*v43);
        v44 = 0.0;
        if (v39 != v5 && *((_QWORD *)v39 + 4) <= (unint64_t)"repeated_frames")
          v44 = v39[5];
        v45 = v5;
        v46 = v6;
        do
        {
          v47 = v46[4];
          v48 = v47 >= (unint64_t)"refresh_frames";
          if (v47 >= (unint64_t)"refresh_frames")
            v49 = v46;
          else
            v49 = v46 + 1;
          if (v48)
            v45 = (double *)v46;
          v46 = (_QWORD *)*v49;
        }
        while (*v49);
        v50 = 0.0;
        if (v45 != v5 && *((_QWORD *)v45 + 4) <= (unint64_t)"refresh_frames")
          v50 = v45[5];
        v51 = v5;
        v52 = v6;
        do
        {
          v53 = v52[4];
          v54 = v53 >= (unint64_t)"frame_qp";
          if (v53 >= (unint64_t)"frame_qp")
            v55 = v52;
          else
            v55 = v52 + 1;
          if (v54)
            v51 = (double *)v52;
          v52 = (_QWORD *)*v55;
        }
        while (*v55);
        v56 = 0.0;
        if (v51 != v5 && *((_QWORD *)v51 + 4) <= (unint64_t)"frame_qp")
          v56 = v51[5];
        v57 = v5;
        v58 = v6;
        do
        {
          v59 = v58[4];
          v60 = v59 >= (unint64_t)"target_bitrate";
          if (v59 >= (unint64_t)"target_bitrate")
            v61 = v58;
          else
            v61 = v58 + 1;
          if (v60)
            v57 = (double *)v58;
          v58 = (_QWORD *)*v61;
        }
        while (*v61);
        v62 = 0;
        if (v57 != v5 && *((_QWORD *)v57 + 4) <= (unint64_t)"target_bitrate")
          v62 = *((_QWORD *)v57 + 5);
        v63 = v5;
        v64 = v6;
        do
        {
          v65 = v64[4];
          v66 = v65 >= (unint64_t)"encoded_bits";
          if (v65 >= (unint64_t)"encoded_bits")
            v67 = v64;
          else
            v67 = v64 + 1;
          if (v66)
            v63 = (double *)v64;
          v64 = (_QWORD *)*v67;
        }
        while (*v67);
        v68 = 0.0;
        if (v63 != v5 && *((_QWORD *)v63 + 4) <= (unint64_t)"encoded_bits")
          v68 = v63[5];
        v69 = v5;
        v70 = v6;
        do
        {
          v71 = v70[4];
          v72 = v71 >= (unint64_t)"header_bits";
          if (v71 >= (unint64_t)"header_bits")
            v73 = v70;
          else
            v73 = v70 + 1;
          if (v72)
            v69 = (double *)v70;
          v70 = (_QWORD *)*v73;
        }
        while (*v73);
        v74 = 0.0;
        if (v69 != v5 && *((_QWORD *)v69 + 4) <= (unint64_t)"header_bits")
          v74 = v69[5];
        v75 = v5;
        v76 = v6;
        do
        {
          v77 = v76[4];
          v78 = v77 >= (unint64_t)"fec_bits";
          if (v77 >= (unint64_t)"fec_bits")
            v79 = v76;
          else
            v79 = v76 + 1;
          if (v78)
            v75 = (double *)v76;
          v76 = (_QWORD *)*v79;
        }
        while (*v79);
        v80 = 0.0;
        if (v75 != v5 && *((_QWORD *)v75 + 4) <= (unint64_t)"fec_bits")
          v80 = v75[5];
        v81 = v5;
        v82 = v6;
        do
        {
          v83 = v82[4];
          v84 = v83 >= (unint64_t)"rtx_bits";
          if (v83 >= (unint64_t)"rtx_bits")
            v85 = v82;
          else
            v85 = v82 + 1;
          if (v84)
            v81 = (double *)v82;
          v82 = (_QWORD *)*v85;
        }
        while (*v85);
        v86 = 0.0;
        if (v81 != v5 && *((_QWORD *)v81 + 4) <= (unint64_t)"rtx_bits")
          v86 = v81[5];
        v87 = v5;
        v88 = v6;
        do
        {
          v89 = v88[4];
          v90 = v89 >= (unint64_t)"min_frame_size";
          if (v89 >= (unint64_t)"min_frame_size")
            v91 = v88;
          else
            v91 = v88 + 1;
          if (v90)
            v87 = (double *)v88;
          v88 = (_QWORD *)*v91;
        }
        while (*v91);
        v92 = 0.0;
        v93 = 0.0;
        if (v87 != v5 && *((_QWORD *)v87 + 4) <= (unint64_t)"min_frame_size")
          v93 = v87[5];
        v94 = v5;
        do
        {
          v95 = v6[4];
          v96 = v95 >= (unint64_t)"encoding_time";
          if (v95 >= (unint64_t)"encoding_time")
            v97 = v6;
          else
            v97 = v6 + 1;
          if (v96)
            v94 = (double *)v6;
          v6 = (_QWORD *)*v97;
        }
        while (*v97);
        if (v94 != v5 && *((_QWORD *)v94 + 4) <= (unint64_t)"encoding_time")
          v92 = v94[5];
        v106 = v86;
        v107 = v80;
        v108 = v44;
        v109 = v62;
        v110 = v50;
        v111 = v32;
        v101 = 0.0;
        v8 = 0.0;
        if (v20 > 0.0)
          v8 = v92 / v20;
        v105 = v9 / a2;
        v100 = v20 / a2;
        v98 = v26 > 0.000001;
        v99 = v26 / a2;
        if (v26 > 0.000001)
          v101 = v56 / v26;
      }
      else
      {
LABEL_170:
        v98 = 0;
        v99 = 0.0 / a2;
        v93 = 0.0;
        v107 = 0.0;
        v108 = 0.0;
        v68 = 0.0;
        v110 = 0.0;
        v111 = 0.0;
        v26 = 0.0;
        v100 = 0.0 / a2;
        v38 = 0.0;
        v109 = 0;
        v74 = 0.0;
        v105 = v9 / a2;
        v106 = 0.0;
        v101 = 0.0;
      }
      v149 = 0;
      v147 = 0u;
      v148 = 0u;
      *(_OWORD *)__str = 0u;
      if (v98 && v93 / v26 > 2.22044605e-16)
        snprintf(__str, 0x32uLL, "Min_frame_size=%.0f bytes, ", v93 / v26);
      if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136319234;
        v113 = a1 + 1184;
        v114 = 2048;
        v115 = v105;
        v116 = 2048;
        v117 = v100;
        v118 = 2048;
        v119 = v111 / a2;
        v120 = 2048;
        v121 = v108 / a2;
        v122 = 2048;
        v123 = v38 / a2;
        v124 = 2048;
        v125 = v110 / a2;
        v126 = 2048;
        v127 = v99;
        v128 = 2048;
        v129 = v101;
        v130 = 2048;
        v131 = v106 / a2 + v74 / a2 + v68 / a2 + v107 / a2;
        v132 = 2048;
        v133 = v109;
        v134 = 2048;
        v135 = v68 / a2;
        v136 = 2048;
        v137 = v107 / a2;
        v138 = 2048;
        v139 = v74 / a2;
        v140 = 2048;
        v141 = v106 / a2;
        v142 = 2080;
        v143 = __str;
        v144 = 2048;
        v145 = v8;
        v102 = MEMORY[0x1E0C81028];
        v103 = "[LRPEncStatsMonitor] %s: Input_fps=%.2f, Enc_fps=%.2f, drop_fps=%.2f, repeat_fps=%.2f, idr_fps=%.2f, refr"
               "esh_fps=%.2f, Tx_fps=%.2f, Avg_QP=%.2f, Bit_rate (Total/Target/Video/FEC/Header/RTX)=%.0f/%.0f/%.0f/%.0f/"
               "%.0f/%.0f, %sEnc_time=%.2f ms\n";
        v104 = 172;
        goto LABEL_184;
      }
    }
    else if (dword_1EF137CD0 >= 1)
    {
      fwrite("Empty callback refcon in LRPEncStatsMonitorCallback()\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v102 = MEMORY[0x1E0C81028];
        v103 = "Empty callback refcon in LRPEncStatsMonitorCallback()\n";
        v104 = 2;
LABEL_184:
        _os_log_impl(&dword_1B676B000, v102, OS_LOG_TYPE_DEFAULT, v103, buf, v104);
      }
    }
  }
}

uint64_t sub_1B680EA24(uint64_t result, int *a2, int *a3)
{
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *a2 = *(__int16 *)(result + 86);
  *a3 = *(__int16 *)(result + 88);
  if (*(_DWORD *)(result + 508) == 2)
  {
    *a2 = (*a2 + 15) & 0xFFFFFFF0;
    *a3 = (*a3 + 15) & 0xFFFFFFF0;
  }
  v5 = *(_DWORD *)(result + 504);
  if (v5)
  {
    if (v5 != 1)
      return result;
    result = sub_1B67EE3C8();
    if (!(_DWORD)result)
      return result;
    v6 = *a2;
    if (*a2 <= 192)
      v6 = 192;
    *a2 = v6;
    v7 = *a3;
    v8 = *a3 <= 96;
    v9 = 96;
  }
  else
  {
    v10 = 1 << *(_BYTE *)(result + 168);
    v11 = v10 - 1;
    v12 = -v10;
    *a2 = (v11 + *a2) & v12;
    *a3 = (v11 + *a3) & v12;
    result = sub_1B67EE3C8();
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    if (*a2 <= 160)
      v13 = 160;
    *a2 = v13;
    v7 = *a3;
    v8 = *a3 <= 64;
    v9 = 64;
  }
  if (v8)
    v7 = v9;
  *a3 = v7;
  return result;
}

uint64_t sub_1B680EB20(void **memptr, unint64_t a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;

  if ((unint64_t)memptr[1] >= a2)
    return 0;
  if (a2 > 0x6739C)
    return 4294954392;
  v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, 248 * a2, 0x1000040403E4F83uLL) || !*memptr)
    return 4294954392;
  v6 = 0;
  v7 = a2;
  do
  {
    v8 = (char *)*memptr + v6;
    *(_OWORD *)((char *)v8 + 153) = 0uLL;
    v8[8] = 0uLL;
    v8[9] = 0uLL;
    v8[6] = 0uLL;
    v8[7] = 0uLL;
    v8[4] = 0uLL;
    v8[5] = 0uLL;
    v8[2] = 0uLL;
    v8[3] = 0uLL;
    *v8 = 0uLL;
    v8[1] = 0uLL;
    *(_OWORD *)((char *)v8 + 170) = 0uLL;
    *(_OWORD *)((char *)v8 + 186) = 0uLL;
    *(_OWORD *)((char *)v8 + 202) = 0uLL;
    *(_OWORD *)((char *)v8 + 218) = 0uLL;
    v6 += 248;
    *(_OWORD *)((char *)v8 + 230) = 0uLL;
    --v7;
  }
  while (v7);
  result = 0;
  memptr[1] = (void *)a2;
  return result;
}

void sub_1B680EC04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B680EC28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1BCC9814CLL);
  return result;
}

void sub_1B680EC4C(uint64_t **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t i;
  _QWORD *v88;
  char *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *a1;
      if (*a1)
      {
        v7 = *v6;
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*v6 + 64), 0xFFFFFFFFFFFFFFFFLL);
        v8 = *(char **)(v7 + 32);
        v9 = *(char **)(v7 + 24);
        v10 = v8 - v9;
        if (v8 == v9)
          v11 = 0;
        else
          v11 = ((v8 - v9) << 6) - 1;
        v13 = *(_QWORD *)(v7 + 48);
        v12 = *(_QWORD *)(v7 + 56);
        v14 = v12 + v13;
        if (v11 != v12 + v13)
          goto LABEL_93;
        if (v13 < 0x200)
        {
          v30 = v10 >> 3;
          v31 = *(char **)(v7 + 40);
          v32 = *(char **)(v7 + 16);
          v33 = v31 - v32;
          if (v10 >> 3 >= (unint64_t)((v31 - v32) >> 3))
          {
            if (v31 == v32)
              v34 = 1;
            else
              v34 = v33 >> 2;
            v35 = (char *)sub_1B677AA34(v34);
            v37 = v36;
            v38 = &v35[8 * v30];
            *(_QWORD *)&v39 = v35;
            *((_QWORD *)&v39 + 1) = v38;
            v123 = v39;
            v40 = operator new(0x1000uLL);
            *(_QWORD *)&v41 = v38;
            *((_QWORD *)&v41 + 1) = &v35[8 * v37];
            if (v30 == v37)
            {
              v42 = 8 * v30;
              *(_QWORD *)&v43 = v123;
              if (v10 < 1)
              {
                v82 = v40;
                v83 = v42 >> 2;
                if (v8 == v9)
                  v84 = 1;
                else
                  v84 = v83;
                v85 = (char *)sub_1B677AA34(v84);
                v38 = &v85[8 * (v84 >> 2)];
                *(_QWORD *)&v43 = v85;
                *((_QWORD *)&v43 + 1) = v38;
                *(_QWORD *)&v41 = v38;
                *((_QWORD *)&v41 + 1) = &v85[8 * v86];
                if (v35)
                {
                  v120 = v41;
                  v124 = v43;
                  operator delete(v35);
                  v41 = v120;
                  v43 = v124;
                }
                v40 = v82;
              }
              else
              {
                v44 = v42 >> 3;
                if (v44 >= -1)
                  v45 = v44 + 1;
                else
                  v45 = v44 + 2;
                v38 -= 8 * (v45 >> 1);
                *(_QWORD *)&v41 = v38;
                *((_QWORD *)&v43 + 1) = v38;
              }
            }
            else
            {
              v43 = v123;
            }
            *(_QWORD *)v38 = v40;
            *(_QWORD *)&v41 = v41 + 8;
            for (i = *(_QWORD *)(v7 + 32); i != *(_QWORD *)(v7 + 24); i -= 8)
            {
              v88 = (_QWORD *)*((_QWORD *)&v43 + 1);
              if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
              {
                v90 = (_BYTE *)v41;
                if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
                {
                  if (*((_QWORD *)&v41 + 1) == *((_QWORD *)&v43 + 1))
                    v95 = 1;
                  else
                    v95 = (uint64_t)(*((_QWORD *)&v41 + 1) - *((_QWORD *)&v43 + 1)) >> 2;
                  v96 = (char *)sub_1B677AA34(v95);
                  v89 = &v96[(2 * v95 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v98 = v89;
                  v99 = v90 - (_BYTE *)v88;
                  if (v90 != (_BYTE *)v88)
                  {
                    v98 = &v89[v99 & 0xFFFFFFFFFFFFFFF8];
                    v100 = 8 * (v99 >> 3);
                    v101 = v89;
                    v102 = v88;
                    do
                    {
                      v103 = *v102++;
                      *(_QWORD *)v101 = v103;
                      v101 += 8;
                      v100 -= 8;
                    }
                    while (v100);
                  }
                  *(_QWORD *)&v43 = v96;
                  *((_QWORD *)&v43 + 1) = v89;
                  *(_QWORD *)&v41 = v98;
                  *((_QWORD *)&v41 + 1) = &v96[8 * v97];
                  if (v88)
                  {
                    v121 = v41;
                    v126 = v43;
                    operator delete(v88);
                    v41 = v121;
                    v43 = v126;
                  }
                }
                else
                {
                  v91 = (uint64_t)(*((_QWORD *)&v41 + 1) - v41) >> 3;
                  if (v91 >= -1)
                    v92 = v91 + 1;
                  else
                    v92 = v91 + 2;
                  v93 = v92 >> 1;
                  v94 = v41 + 8 * (v92 >> 1);
                  v89 = (char *)(v94 - (v41 - *((_QWORD *)&v43 + 1)));
                  if ((_QWORD)v41 == *((_QWORD *)&v43 + 1))
                  {
                    v90 = (_BYTE *)*((_QWORD *)&v43 + 1);
                  }
                  else
                  {
                    v122 = *((_QWORD *)&v41 + 1);
                    v125 = v43;
                    memmove((void *)(v94 - (v41 - *((_QWORD *)&v43 + 1))), *((const void **)&v43 + 1), v41 - *((_QWORD *)&v43 + 1));
                    *((_QWORD *)&v41 + 1) = v122;
                    *(_QWORD *)&v43 = v125;
                  }
                  *((_QWORD *)&v43 + 1) = v89;
                  *(_QWORD *)&v41 = &v90[8 * v93];
                }
              }
              else
              {
                v89 = (char *)*((_QWORD *)&v43 + 1);
              }
              v104 = *(_QWORD *)(i - 8);
              *((_QWORD *)v89 - 1) = v104;
              *((_QWORD *)&v43 + 1) -= 8;
            }
            v105 = *(void **)(v7 + 16);
            *(_OWORD *)(v7 + 16) = v43;
            *(_OWORD *)(v7 + 32) = v41;
            if (v105)
              operator delete(v105);
            goto LABEL_92;
          }
          if (v31 == v8)
          {
            v59 = operator new(0x1000uLL);
            if (v32 == v9)
            {
              if (v8 == v9)
                v60 = 1;
              else
                v60 = v33 >> 2;
              v61 = (char *)sub_1B677AA34(v60);
              v9 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
              v63 = *(uint64_t **)(v7 + 24);
              v64 = v9;
              v65 = *(_QWORD *)(v7 + 32) - (_QWORD)v63;
              if (v65)
              {
                v64 = &v9[v65 & 0xFFFFFFFFFFFFFFF8];
                v66 = 8 * (v65 >> 3);
                v67 = v9;
                do
                {
                  v68 = *v63++;
                  *(_QWORD *)v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              v69 = *(void **)(v7 + 16);
              *(_QWORD *)(v7 + 16) = v61;
              *(_QWORD *)(v7 + 24) = v9;
              *(_QWORD *)(v7 + 32) = v64;
              *(_QWORD *)(v7 + 40) = &v61[8 * v62];
              if (v69)
              {
                operator delete(v69);
                v9 = *(char **)(v7 + 24);
              }
            }
            *((_QWORD *)v9 - 1) = v59;
            v70 = *(char **)(v7 + 24);
            v71 = *(char **)(v7 + 32);
            *(_QWORD *)(v7 + 24) = v70 - 8;
            v72 = *((_QWORD *)v70 - 1);
            *(_QWORD *)(v7 + 24) = v70;
            if (v71 == *(char **)(v7 + 40))
            {
              v73 = *(_QWORD *)(v7 + 16);
              v74 = (uint64_t)&v70[-v73];
              if ((unint64_t)v70 <= v73)
              {
                v108 = (uint64_t)&v71[-v73];
                v46 = v108 == 0;
                v109 = v108 >> 2;
                if (v46)
                  v110 = 1;
                else
                  v110 = v109;
                v111 = (char *)sub_1B677AA34(v110);
                v113 = &v111[8 * (v110 >> 2)];
                v114 = *(uint64_t **)(v7 + 24);
                v71 = v113;
                v115 = *(_QWORD *)(v7 + 32) - (_QWORD)v114;
                if (v115)
                {
                  v71 = &v113[v115 & 0xFFFFFFFFFFFFFFF8];
                  v116 = 8 * (v115 >> 3);
                  v117 = &v111[8 * (v110 >> 2)];
                  do
                  {
                    v118 = *v114++;
                    *(_QWORD *)v117 = v118;
                    v117 += 8;
                    v116 -= 8;
                  }
                  while (v116);
                }
                v119 = *(void **)(v7 + 16);
                *(_QWORD *)(v7 + 16) = v111;
                *(_QWORD *)(v7 + 24) = v113;
                *(_QWORD *)(v7 + 32) = v71;
                *(_QWORD *)(v7 + 40) = &v111[8 * v112];
                if (v119)
                {
                  operator delete(v119);
                  v71 = *(char **)(v7 + 32);
                }
              }
              else
              {
                v75 = v74 >> 3;
                v21 = v74 >> 3 < -1;
                v76 = (v74 >> 3) + 2;
                if (v21)
                  v77 = v76;
                else
                  v77 = v75 + 1;
                v78 = -(v77 >> 1);
                v79 = v77 >> 1;
                v80 = &v70[-8 * v79];
                v81 = v71 - v70;
                if (v71 != v70)
                {
                  memmove(&v70[-8 * v79], v70, v71 - v70);
                  v70 = *(char **)(v7 + 24);
                }
                v71 = &v80[v81];
                *(_QWORD *)(v7 + 24) = &v70[8 * v78];
                *(_QWORD *)(v7 + 32) = &v80[v81];
              }
            }
            *(_QWORD *)v71 = v72;
          }
          else
          {
            *(_QWORD *)v8 = operator new(0x1000uLL);
          }
        }
        else
        {
          *(_QWORD *)(v7 + 48) = v13 - 512;
          v17 = *(_QWORD *)v9;
          v15 = v9 + 8;
          v16 = v17;
          *(_QWORD *)(v7 + 24) = v15;
          if (*(char **)(v7 + 40) == v8)
          {
            v18 = *(_QWORD *)(v7 + 16);
            v19 = (uint64_t)&v15[-v18];
            if ((unint64_t)v15 <= v18)
            {
              v47 = (uint64_t)&v8[-v18];
              v46 = v47 == 0;
              v48 = v47 >> 2;
              if (v46)
                v49 = 1;
              else
                v49 = v48;
              v50 = (char *)sub_1B677AA34(v49);
              v52 = &v50[8 * (v49 >> 2)];
              v53 = *(uint64_t **)(v7 + 24);
              v8 = v52;
              v54 = *(_QWORD *)(v7 + 32) - (_QWORD)v53;
              if (v54)
              {
                v8 = &v52[v54 & 0xFFFFFFFFFFFFFFF8];
                v55 = 8 * (v54 >> 3);
                v56 = &v50[8 * (v49 >> 2)];
                do
                {
                  v57 = *v53++;
                  *(_QWORD *)v56 = v57;
                  v56 += 8;
                  v55 -= 8;
                }
                while (v55);
              }
              v58 = *(void **)(v7 + 16);
              *(_QWORD *)(v7 + 16) = v50;
              *(_QWORD *)(v7 + 24) = v52;
              *(_QWORD *)(v7 + 32) = v8;
              *(_QWORD *)(v7 + 40) = &v50[8 * v51];
              if (v58)
              {
                operator delete(v58);
                v8 = *(char **)(v7 + 32);
              }
            }
            else
            {
              v20 = v19 >> 3;
              v21 = v19 >> 3 < -1;
              v22 = (v19 >> 3) + 2;
              if (v21)
                v23 = v22;
              else
                v23 = v20 + 1;
              v24 = -(v23 >> 1);
              v25 = v23 >> 1;
              v26 = &v15[-8 * v25];
              v27 = v8 - v15;
              if (v8 == v15)
              {
                v28 = v8;
              }
              else
              {
                memmove(&v15[-8 * v25], v15, v8 - v15);
                v28 = *(char **)(v7 + 24);
              }
              v8 = &v26[v27];
              *(_QWORD *)(v7 + 24) = &v28[8 * v24];
              *(_QWORD *)(v7 + 32) = &v26[v27];
            }
          }
          *(_QWORD *)v8 = v16;
        }
        *(_QWORD *)(v7 + 32) += 8;
LABEL_92:
        v9 = *(char **)(v7 + 24);
        v12 = *(_QWORD *)(v7 + 56);
        v14 = *(_QWORD *)(v7 + 48) + v12;
LABEL_93:
        *(_QWORD *)(*(_QWORD *)&v9[(v14 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v14 & 0x1FF)) = a2;
        *(_QWORD *)(v7 + 56) = v12 + 1;
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v7 + 64));
LABEL_94:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v107 = __ldaxr(p_shared_owners);
        while (__stlxr(v107 - 1, p_shared_owners));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (a2)
  {
    v29 = sub_1B6812BB8(a2);
    MEMORY[0x1BCC9814C](v29, 0x10F2C404913AAE3);
  }
  if (v5)
    goto LABEL_94;
}

void sub_1B680F264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, char a12)
{
  void *v12;

  operator delete(v12);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  sub_1B6772C88((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1B680F2A4(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15D38;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B680F2DC(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15D38;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x1BCC9814CLL);
}

void sub_1B680F328(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_1B680EC4C((uint64_t **)(a1 + 32), *(_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1B680F36C(int **a1, uint64_t a2)
{
  std::mutex *v4;
  int *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v4 = (std::mutex *)(a2 + 56);
  std::mutex::lock((std::mutex *)(a2 + 56));
  v5 = *(int **)(a2 + 144);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 128);
    v5 = *(int **)(v6 + 16);
    v7 = *(std::__shared_weak_count **)(v6 + 24);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
  }
  v10 = *(int **)(a2 + 192);
  if (!v10)
  {
    v12 = 0;
    if (v5)
      goto LABEL_12;
LABEL_15:
    v15 = -1;
    if (v10)
      goto LABEL_13;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(a2 + 176);
  v10 = *(int **)(v11 + 16);
  v12 = *(std::__shared_weak_count **)(v11 + 24);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (!v5)
    goto LABEL_15;
LABEL_12:
  v15 = *v5;
  if (v10)
  {
LABEL_13:
    v16 = *v10;
    goto LABEL_17;
  }
LABEL_16:
  v16 = -1;
LABEL_17:
  if (v15 <= v16)
  {
    v17 = v12;
  }
  else
  {
    v10 = v5;
    v17 = v7;
  }
  *a1 = v10;
  a1[1] = (int *)v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!v12)
    goto LABEL_27;
  v20 = (unint64_t *)&v12->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v7)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    if (!v7)
      goto LABEL_33;
  }
  v22 = (unint64_t *)&v7->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_33:
  std::mutex::unlock(v4);
}

void sub_1B680F4BC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  std::mutex *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v6 = (std::mutex *)(a2 + 56);
  std::mutex::lock((std::mutex *)(a2 + 56));
  v7 = *(_QWORD *)(a2 + 144);
  if (v7 <= a3)
    goto LABEL_9;
  v8 = (_QWORD *)(a2 + 128);
  if (!a3)
  {
    v13 = *(_QWORD *)(*v8 + 24);
    *a1 = *(_QWORD *)(*v8 + 16);
    a1[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    goto LABEL_10;
  }
  v9 = *(_QWORD **)(a2 + 136);
  if (v9 == v8)
  {
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_10;
  }
  while (1)
  {
    v10 = v9[3];
    *a1 = v9[2];
    a1[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (--v7 == a3)
      break;
    sub_1B6772C88((uint64_t)a1);
    v9 = (_QWORD *)v9[1];
    if (v9 == v8)
      goto LABEL_9;
  }
LABEL_10:
  std::mutex::unlock(v6);
}

void sub_1B680F590(_QWORD *a1, uint64_t a2, int a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v6 = (std::mutex *)(a2 + 56);
  std::mutex::lock((std::mutex *)(a2 + 56));
  if (*(_QWORD *)(a2 + 144))
  {
    v7 = (_QWORD *)(a2 + 128);
    while (v7 != *(_QWORD **)(a2 + 136))
    {
      v7 = (_QWORD *)*v7;
      v8 = v7[2];
      if (*(_DWORD *)(v8 + 148) == a3)
      {
        v9 = v7[3];
        *a1 = v8;
        a1[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        goto LABEL_10;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
LABEL_10:
  std::mutex::unlock(v6);
}

uint64_t sub_1B680F620(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  float v24;
  uint64_t v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 12872) = 0;
  if (!a2 || *(int *)(a1 + 3452) < 2 || *(_QWORD *)(a1 + 12800) != *(_DWORD *)(a1 + 3488))
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12768) + ((*(_QWORD *)(a1 + 12792) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * *(_QWORD *)(a1 + 12792));
  while (1)
  {
    v6 = a1 + 4 * v4;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12768)
                               + (((unint64_t)(*(int *)(v6 + 3456) + *(_QWORD *)(a1 + 12792) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (*(_DWORD *)(v6 + 3456) + *(_BYTE *)(a1 + 12792) - 1));
    *(_DWORD *)(v7 + 648) = v5;
    v8 = *(_QWORD *)(v7 + 584);
    v9 = *(_DWORD *)(v8 + 10728);
    *(_DWORD *)(v7 + 728) = v9;
    if ((int)v4 >= 1)
    {
      v10 = 0;
      do
      {
        v9 += *(_DWORD *)(v8 + 10732 + 4 * v10);
        *(_DWORD *)(v7 + 728) = v9;
        ++v10;
      }
      while (v4 != v10);
    }
    v11 = v4 << 32;
    *(_DWORD *)(v7 + 732) = *(_DWORD *)(v8 + 4 * (int)v4 + 10732) + v9;
    result = sub_1B6813110(v7, 1);
    v26[0] = xmmword_1B69178C0;
    v26[1] = xmmword_1B69178D0;
    v26[2] = xmmword_1B69178E0;
    v13 = *(_DWORD *)(v7 + 2404);
    if (v13 <= 0)
      break;
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 1064) + 40) + 2000) - 8;
    v15 = v14 >> 1;
    v16 = v13 << (2 * *(_BYTE *)(v7 + 2392) - 6);
    v17 = (*(_DWORD *)(v7 + 2400) + (v16 >> 1)) / v16;
    if ((_DWORD)v4)
    {
      v18 = *(_DWORD *)(v7 + 2412) << (2 * *(_BYTE *)(v7 + 2392) - 6);
      *(_DWORD *)(v7 + 2412) = v18;
      if ((double)v17 / (double)v3 < *(double *)((char *)v26 + 24 * v15 + ((v11 - 0x100000000) >> 29))
        && (v18 < (int)(dbl_1B69224D0[(v11 - 0x100000000) >> 32]
                      * (double)((*(_DWORD *)(v7 + 788) * *(_DWORD *)(v7 + 784)) >> 6))
         || *(_DWORD *)(v7 + 2048) < 0xCu))
      {
        break;
      }
    }
    else
    {
      v19 = *(_DWORD *)(v7 + 2048) >> v15;
      if (v19 >= 0x18)
        v19 = 24;
      if (v19 <= 8)
        v19 = 8;
      v3 = v17;
      if (v17 >= dword_1B6922488[v19 - 8] << (v14 & 0xFE))
      {
        LODWORD(v4) = 0;
        break;
      }
    }
    v5 += *(_DWORD *)(v6 + 3456);
    if (++v4 >= *(int *)(a1 + 3452))
    {
      LODWORD(v4) = 0;
      v7 = v25;
      break;
    }
  }
  *(_DWORD *)(a1 + 12876) = v4;
  if (*(_DWORD *)(a1 + 4 * v4 + 3456) == 8)
  {
    v20 = *(_DWORD *)(v7 + 2404);
    if (v20 < 1)
      goto LABEL_28;
    v21 = v20 << (2 * *(_BYTE *)(v7 + 2392) - 6);
    v22 = (*(_DWORD *)(v7 + 2400) + (v21 >> 1)) / v21;
    v23 = (*(_DWORD *)(v7 + 2416) + (v21 >> 1)) / v21;
    *(_DWORD *)(v7 + 2416) = v23;
    v24 = 2.0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 1064) + 40) + 2000) == 8)
      v24 = 4.0;
    if (v22 < (int)(float)((float)(*(_DWORD *)(v7 + 2048) * v23) / v24))
    {
LABEL_28:
      *(float *)(v7 + 2720) = (float)*(char *)(*(_QWORD *)(v7 + 584) + 3289);
      *(_DWORD *)(v7 + 652) = 0;
    }
  }
  *(_BYTE *)(v7 + 417) = 1;
  return result;
}

uint64_t sub_1B680F980(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  signed int v28;
  signed int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  const char *v38;
  uint32_t v39;
  NSObject *v40;
  const char *v41;
  uint32_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void **v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  uint64_t v64;
  __CVBuffer *v65;
  uint64_t v66;
  int v67;
  __IOSurface *IOSurface;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  float v99;
  float v100;
  int v101;
  int v102;
  double v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  int v107;
  int *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  double v118;
  double *v119;
  int *v120;
  uint64_t v121;
  int v122;
  int *v123;
  std::__shared_weak_count *v124;
  FILE *v125;
  uint64_t v126;
  int v127;
  NSObject *v128;
  const char *v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  int v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  double v155;
  double v156;
  double v157;
  float v158;
  float v159;
  float v160;
  double v161;
  double v162;
  float v163;
  float v164;
  float v165;
  float v166;
  double v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  unsigned int v172;
  float v173;
  __int128 v174;
  int v175;
  int v176;
  int v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  int v195;
  OSType pixelFormatType[2];
  OSType pixelFormatTypea;
  __int128 v198;
  uint64_t *v199;
  uint64_t *v200;
  __int128 v201;
  int *v202;
  std::__shared_weak_count *v203;
  _BYTE buf[22];
  __int16 v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  uint64_t v211;

  v3 = a3;
  v211 = *MEMORY[0x1E0C80C00];
  v201 = 0uLL;
  if (!*a2)
  {
    v12 = 4294954385;
    goto LABEL_270;
  }
  v5 = a2;
  *(_QWORD *)(*a2 + 288) = a3;
  v6 = *(_DWORD *)(a1 + 3404);
  if (*(_DWORD *)(a1 + 11080) != v6)
  {
    v7 = *(_DWORD *)(a1 + 3404);
    if (v6)
    {
      if (v6 != -2)
      {
LABEL_7:
        *(_DWORD *)(a1 + 11080) = v6;
        goto LABEL_8;
      }
      v7 = 4096;
    }
    setpriority(3, 0, v7);
    goto LABEL_7;
  }
LABEL_8:
  v8 = *(uint64_t **)(a1 + 12752);
  dispatch_semaphore_wait((dispatch_semaphore_t)v8[8], 0xFFFFFFFFFFFFFFFFLL);
  v9 = v8[7];
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(char **)(*(_QWORD *)(v8[3] + (((unint64_t)(v8[6] + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v8[6] + v10) & 0x1FF));
    v8[7] = v10;
    sub_1B6803FBC(v8 + 2);
    goto LABEL_13;
  }
  v13 = (char *)operator new(0xC18uLL, MEMORY[0x1E0DE4E10]);
  if (v13)
  {
    v11 = v13;
    *((_QWORD *)v13 + 3) = 0;
    *(_DWORD *)v13 = 0;
    v13[4] = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *((_OWORD *)v13 + 22) = xmmword_1B69221C0;
    *((_QWORD *)v13 + 46) = 0xBFF0000000000000;
    v13[417] = 0;
    *(_OWORD *)(v13 + 376) = 0u;
    *(_OWORD *)(v13 + 392) = 0u;
    v13[568] = 0;
    *((_QWORD *)v13 + 67) = 0;
    *((_OWORD *)v13 + 34) = 0u;
    *((_DWORD *)v13 + 144) = 0;
    *((_DWORD *)v13 + 161) = 0;
    *(_OWORD *)(v13 + 744) = 0u;
    *((_QWORD *)v13 + 79) = 0;
    *(_OWORD *)(v13 + 600) = 0u;
    *(_OWORD *)(v13 + 616) = 0u;
    *(_OWORD *)(v13 + 584) = 0u;
    *((_DWORD *)v13 + 215) = -1;
    *((_DWORD *)v13 + 243) = 1;
    *(_OWORD *)(v13 + 1016) = xmmword_1E6A175B8;
    *(_OWORD *)(v13 + 1032) = *(_OWORD *)&off_1E6A175C8;
    *((_OWORD *)v13 + 106) = 0u;
    *((_OWORD *)v13 + 107) = 0u;
    *((_OWORD *)v13 + 108) = 0u;
    *((_QWORD *)v13 + 258) = 0;
    *(_OWORD *)(v13 + 2344) = 0u;
    *(_OWORD *)(v13 + 2360) = 0u;
    *(_OWORD *)(v13 + 2376) = 0u;
    *(_OWORD *)(v13 + 2488) = 0u;
    *(_OWORD *)(v13 + 1112) = 0u;
    *(_OWORD *)(v13 + 1128) = 0u;
    *(_OWORD *)(v13 + 1080) = 0u;
    *(_OWORD *)(v13 + 1096) = 0u;
    *((_OWORD *)v13 + 140) = 0u;
    *((_OWORD *)v13 + 139) = 0u;
    *((_OWORD *)v13 + 138) = 0u;
    *((_OWORD *)v13 + 137) = 0u;
    *((_OWORD *)v13 + 136) = 0u;
    *((_OWORD *)v13 + 135) = 0u;
    *((_OWORD *)v13 + 134) = 0u;
    *((_OWORD *)v13 + 133) = 0u;
    *((_OWORD *)v13 + 132) = 0u;
    *((_OWORD *)v13 + 131) = 0u;
    *((_OWORD *)v13 + 130) = 0u;
    *((_OWORD *)v13 + 168) = 0u;
    *((_OWORD *)v13 + 188) = 0u;
    *((_OWORD *)v13 + 190) = 0u;
    *((_WORD *)v13 + 1536) = 0;
LABEL_13:
    dispatch_semaphore_signal((dispatch_semaphore_t)v8[8]);
    v14 = *v8;
    v15 = (std::__shared_weak_count *)v8[1];
    if (v15)
    {
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
      *(_QWORD *)buf = v14;
      *(_QWORD *)&buf[8] = v15;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    else
    {
      *(_QWORD *)buf = v14;
      *(_QWORD *)&buf[8] = 0;
    }
    v19 = operator new();
    v20 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)v19 = &off_1E6A15D38;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = v11;
    *(_OWORD *)(v19 + 32) = v20;
    *(_QWORD *)&v21 = v11;
    *((_QWORD *)&v21 + 1) = v19;
    if (v15)
    {
      v198 = v21;
      std::__shared_weak_count::__release_weak(v15);
      v21 = v198;
    }
    goto LABEL_23;
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)v8[8]);
  v21 = 0uLL;
LABEL_23:
  v201 = v21;
  v22 = v21;
  if ((_QWORD)v21)
    v12 = 0;
  else
    v12 = 4294954392;
  if ((_QWORD)v21)
  {
    if (*(_BYTE *)(v21 + 3072))
      goto LABEL_89;
    *(_QWORD *)(v21 + 584) = a1;
    *(_QWORD *)(v21 + 2712) = *(_QWORD *)(a1 + 13256);
    *(_QWORD *)(v21 + 760) = *(_QWORD *)(a1 + 13264);
    *(_QWORD *)(v21 + 16) = *(_QWORD *)a1;
    *(_QWORD *)(v21 + 32) = *(_QWORD *)(a1 + 8);
    sub_1B67B665C((_QWORD *)(v21 + 40), *(_QWORD *)(a1 + 12688), *(_QWORD *)(a1 + 12696));
    sub_1B67B665C((_QWORD *)(v22 + 56), *(_QWORD *)(a1 + 12704), *(_QWORD *)(a1 + 12712));
    if (*(_QWORD *)(v22 + 2712) && *(double *)(a1 + 3280) <= 0.0)
    {
      v12 = 4294954386;
    }
    else
    {
      v23 = sub_1B685C8CC(*(char **)(v22 + 16));
      *(_QWORD *)(v22 + 24) = v23;
      if (v23)
      {
        if (!*(_BYTE *)(a1 + 3784))
        {
          *(_QWORD *)(v22 + 1048) = 0;
          goto LABEL_64;
        }
        v24 = (char *)operator new(0xAA8uLL, MEMORY[0x1E0DE4E10]);
        if (!v24)
        {
          *(_QWORD *)(v22 + 1048) = 0;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v40 = MEMORY[0x1E0C81028];
            v41 = "Failed to create reference selector.\n";
            v42 = 2;
LABEL_87:
            _os_log_error_impl(&dword_1B676B000, v40, OS_LOG_TYPE_ERROR, v41, buf, v42);
          }
LABEL_88:
          *(_WORD *)(v22 + 408) = 0;
          *(_BYTE *)(v22 + 410) = 1;
          *(_BYTE *)(v22 + 418) = 0;
          *(_BYTE *)(v22 + 736) = 0;
          *(_DWORD *)(v22 + 412) = 0;
          *(_BYTE *)(v22 + 3072) = 1;
          *(_OWORD *)(v22 + 3076) = xmmword_1B69178F0;
          *(_DWORD *)(v22 + 3092) = 0;
          *(_QWORD *)(v22 + 3032) = 0;
LABEL_89:
          v200 = v5;
          v60 = *v5;
          v61 = (std::__shared_weak_count *)v5[1];
          if (v61)
          {
            p_shared_owners = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldxr(p_shared_owners);
            while (__stxr(v63 + 1, p_shared_owners));
          }
          v64 = *(_QWORD *)(v22 + 584);
          v65 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 88))(v60);
          pixelFormatTypea = CVPixelBufferGetPixelFormatType(v65);
          *(_DWORD *)(v22 + 644) = *(_DWORD *)(v60 + 8);
          v66 = v22 + 592;
          sub_1B67B665C((_QWORD *)(v22 + 592), v60, (uint64_t)v61);
          *(_WORD *)v22 = 0;
          *(_QWORD *)(v22 + 376) = 0;
          *(_QWORD *)(v22 + 384) = *(int *)(a1 + 456);
          *(_WORD *)(v22 + 3) = 0;
          *(_DWORD *)(v22 + 424) = 0;
          *(_DWORD *)(v22 + 432) = -1;
          *(_DWORD *)(v22 + 440) = 0;
          v67 = *(unsigned __int8 *)(a1 + 992);
          if (*(_BYTE *)(a1 + 992))
          {
            if (*(_DWORD *)(v64 + 3528) == -1)
              v67 = *(char *)(v64 + 3308);
            else
              v67 = 0;
          }
          *(_DWORD *)(v22 + 444) = v67;
          IOSurface = CVPixelBufferGetIOSurface(v65);
          if (IOSurface)
            LODWORD(IOSurface) = IOSurfaceGetID(IOSurface);
          v69 = v3;
          *(_DWORD *)(v22 + 576) = (_DWORD)IOSurface;
          *(_BYTE *)(v22 + 416) = 0;
          *(_QWORD *)(v22 + 452) = 0x8000000080000000;
          *(_DWORD *)(v22 + 460) = 0x80000000;
          *(_DWORD *)(v22 + 448) = *(_DWORD *)(a1 + 476);
          *(_BYTE *)(v22 + 532) = 0;
          v70 = *(_DWORD *)(a1 + 980);
          v71 = *(_DWORD *)(a1 + 984);
          v72 = *(_DWORD *)(a1 + 988);
          if ((v70 & 0x80000000) == 0 || (v71 & 0x80000000) == 0 || (v72 & 0x80000000) == 0)
          {
            v73 = 6 * *(unsigned __int8 *)(*(_QWORD *)(v22 + 40) + 2000) + 3;
            if ((v70 & 0x80000000) != 0)
            {
              if ((v71 & 0x80000000) != 0)
              {
                v127 = 0x80000000;
                if ((v72 & 0x80000000) != 0)
                  goto LABEL_108;
              }
              else
              {
                if (v71 >= v73)
                  v127 = 6 * *(unsigned __int8 *)(*(_QWORD *)(v22 + 40) + 2000) + 3;
                else
                  v127 = *(_DWORD *)(a1 + 984);
                *(_DWORD *)(v22 + 460) = v127;
                if ((v72 & 0x80000000) != 0)
                  goto LABEL_108;
              }
              if (v72 <= 1)
                v131 = 1;
              else
                v131 = v72;
              *(_DWORD *)(v22 + 456) = v131;
              if (v127 != 0x80000000 && v131 > v127)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v131;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v127;
                  _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "min allowed qp (%d) cannot exceed max allowed qp (%d)\n", buf, 0xEu);
                }
                v12 = 4294954394;
                v3 = v69;
                goto LABEL_258;
              }
            }
            else
            {
              if ((int)v70 >= v73)
                v74 = 6 * *(unsigned __int8 *)(*(_QWORD *)(v22 + 40) + 2000) + 3;
              else
                v74 = *(_DWORD *)(a1 + 980);
              if (v70 <= 1)
                v74 = 1;
              *(_DWORD *)(v22 + 452) = v74;
              *(_BYTE *)(v22 + 416) = 1;
            }
          }
LABEL_108:
          v3 = v69;
          if (*(_QWORD *)(v22 + 608))
          {
LABEL_109:
            v75 = *(_QWORD *)(v22 + 584);
            if (!*(_BYTE *)(v75 + 1016))
            {
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 0;
              sub_1B67C49BC(v22 + 624, (__int128 *)buf);
              v78 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
LABEL_122:
              v81 = *(_QWORD *)(v22 + 608);
              if (*(_BYTE *)(*(_QWORD *)v66 + 136))
              {
                *(_QWORD *)(v81 + 240) = *(_QWORD *)(*(_QWORD *)v66 + 240);
                *(_QWORD *)(v81 + 248) = 0;
              }
              *(_OWORD *)(v81 + 256) = *(_OWORD *)(v60 + 256);
              *(_BYTE *)(v22 + 3024) = *(_BYTE *)(a1 + 324);
              *(_WORD *)(v22 + 3025) = *(_WORD *)(a1 + 260);
              *(_DWORD *)(v22 + 8) = *(_DWORD *)(a1 + 836);
              *(_BYTE *)(v22 + 2704) = 0;
              v82 = *(_QWORD *)(v22 + 584);
              v83 = operator new(0x460uLL);
              v83[1] = 0;
              v83[2] = 0;
              *v83 = &off_1E6A15A60;
              bzero(v83 + 3, 0x448uLL);
              *((_DWORD *)v83 + 32) = -1082130432;
              *(_QWORD *)((char *)v83 + 132) = 0;
              *(_QWORD *)((char *)v83 + 148) = 0;
              *(_QWORD *)((char *)v83 + 140) = 0;
              v84 = (char *)(v83 + 20);
              v85 = (char *)(v83 + 125);
              v86 = 192;
              do
              {
                *((_QWORD *)v84 + 3) = 0;
                *(_QWORD *)v84 = 0;
                *((_QWORD *)v84 + 1) = 0;
                v87 = v86;
                *((_DWORD *)v84 + 4) = 0;
                do
                {
                  v88 = (_QWORD *)((char *)v83 + v87);
                  *v88 = 0;
                  v88[1] = 0;
                  v89 = (uint64_t)v83 + v87 + 16;
                  v88[2] = v89;
                  v88[3] = v89;
                  v88[4] = 0;
                  v87 += 40;
                }
                while (v88 + 5 != (_QWORD *)(v84 + 112));
                *((_QWORD *)v84 + 14) = 0;
                v84 += 120;
                v86 += 120;
              }
              while (v84 != v85);
              v83[128] = 0;
              *(_QWORD *)v85 = 0;
              v83[126] = 0;
              v90 = 129;
              *((_DWORD *)v83 + 254) = 0;
              do
              {
                v91 = &v83[v90];
                *v91 = 0;
                v91[1] = 0;
                v92 = (uint64_t)&v83[v90 + 2];
                v91[2] = v92;
                v91[3] = v92;
                v91[4] = 0;
                v90 += 5;
              }
              while (v91 + 5 != v83 + 139);
              v83[139] = 0;
              *(_QWORD *)&v93 = v83 + 3;
              *((_QWORD *)&v93 + 1) = v83;
              v94 = *(std::__shared_weak_count **)(v22 + 3016);
              *(_OWORD *)(v22 + 3008) = v93;
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v97 = *(_QWORD *)(v22 + 3008);
              v98 = *(_DWORD *)(a1 + 432);
              v100 = *(float *)(a1 + 208);
              v99 = *(float *)(a1 + 212);
              v101 = *(_DWORD *)(a1 + 436);
              v102 = *(_DWORD *)(v82 + 3248);
              *(_DWORD *)(v97 + 16) = *(_DWORD *)(a1 + 428);
              *(_DWORD *)(v97 + 32) = v98;
              v103 = v99;
              *(double *)v97 = v103;
              *(double *)(v97 + 8) = v100;
              *(_DWORD *)(v97 + 40) = v101;
              if (v102 == 43)
                *(_BYTE *)(v97 + 84) = 1;
              v104 = *(unsigned int *)(v82 + 3744);
              if ((int)v104 >= 1)
              {
                v105 = (double *)(v97 + 144);
                v106 = *(unsigned int *)(v82 + 3744);
                do
                {
                  *v105 = v103;
                  v105 += 15;
                  --v106;
                }
                while (v106);
                if ((int)v104 > 1)
                {
                  v107 = *(_DWORD *)(a1 + 156);
                  if (v107 >= 1)
                  {
                    v108 = (int *)(a1 + 160);
                    v109 = v104 - 1;
                    while (1)
                    {
                      v111 = *v108++;
                      v110 = v111;
                      if (v111 < v107)
                        break;
                      v107 = v110;
                      if (!--v109)
                      {
                        v112 = *(_DWORD *)(a1 + 152);
                        v113 = *(_DWORD *)(a1 + 4 * (v104 - 1) + 156);
                        if (v112 > v113)
                        {
                          if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 67109376;
                            *(_DWORD *)&buf[4] = v112;
                            *(_WORD *)&buf[8] = 1024;
                            *(_DWORD *)&buf[10] = v113;
                            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Global bitrate %d is larger than max bitrate of the top temporal layer %d", buf, 0xEu);
                            LODWORD(v104) = *(_DWORD *)(v82 + 3744);
                            v113 = *(_DWORD *)(a1 + 4 * ((int)v104 - 1) + 156);
                          }
                          *(_DWORD *)(a1 + 152) = v113;
                          v112 = v113;
                        }
                        if ((int)v104 <= 0)
                        {
                          v97 = *(_QWORD *)(v22 + 3008);
                        }
                        else
                        {
                          v114 = v104;
                          v97 = *(_QWORD *)(v22 + 3008);
                          do
                          {
                            v115 = v114 - 1;
                            v116 = *(_DWORD *)(a1 + 4 * (v114 - 1) + 156);
                            if (v112 <= v116)
                            {
                              *(_DWORD *)(v97 + 76) = v114 - 1;
                              v116 = v112;
                            }
                            *(double *)(v97 + 120 * v115 + 136) = (double)v116;
                            --v114;
                          }
                          while ((unint64_t)(v115 + 1) > 1);
                        }
                        goto LABEL_157;
                      }
                    }
                  }
                  v12 = 4294954394;
LABEL_258:
                  if (v61)
                  {
                    v181 = (unint64_t *)&v61->__shared_owners_;
                    do
                      v182 = __ldaxr(v181);
                    while (__stlxr(v182 - 1, v181));
                    if (!v182)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  v183 = *(_QWORD *)(a1 + 13272);
                  if (v183)
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v183 + 152))(v183, v201);
                  if ((_DWORD)v12)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_267;
                    v195 = *(_DWORD *)(*v200 + 8);
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&buf[4] = v195;
                    v37 = MEMORY[0x1E0C81028];
                    v38 = "Frame %d: Hookup failed\n";
                    goto LABEL_296;
                  }
                  v191 = *(_QWORD *)(*(_QWORD *)(v201 + 584) + 104);
                  if (v191)
                  {
                    v12 = sub_1B67C1EF4(*(_QWORD *)(v201 + 592), v191, 0);
                    if ((_DWORD)v12)
                      goto LABEL_275;
                  }
                  sub_1B68112F8((_QWORD *)(a1 + 12760), &v201);
                  v192 = *(_DWORD *)(*v200 + 8);
                  v193 = *(_DWORD *)(a1 + 3316) - 1;
                  if (!v192 || *(_QWORD *)(a1 + 12800) == *(_DWORD *)(a1 + 3488) || v192 == v193)
                  {
                    v12 = sub_1B680F620(a1, *(_DWORD *)(*v200 + 8));
                    if ((_DWORD)v12)
                    {
                      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        goto LABEL_267;
                      v194 = *(_DWORD *)(*v200 + 8);
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&buf[4] = v194;
                      v37 = MEMORY[0x1E0C81028];
                      v38 = "Frame %d: Gop-structure change fails\n";
LABEL_296:
                      v39 = 8;
                      goto LABEL_297;
                    }
                    v12 = sub_1B6806EF8(a1);
                    if ((_DWORD)v12)
                      goto LABEL_275;
                    if (v192 == v193)
                    {
                      while (*(_QWORD *)(a1 + 12800))
                      {
                        v12 = sub_1B6806EF8(a1);
                        if ((_DWORD)v12)
                          goto LABEL_275;
                      }
                    }
                  }
                  v12 = 0;
                  goto LABEL_267;
                }
              }
              *(double *)(v97 + 136) = (double)*(int *)(a1 + 152);
LABEL_157:
              *(double *)(v97 + 976) = (double)*(int *)(a1 + 184);
              v117 = *(_QWORD *)(v22 + 2712);
              if (v117)
              {
                if ((int)v104 >= 1)
                {
                  v118 = *(double *)(v117 + 416);
                  v119 = (double *)(v97 + 144);
                  v120 = (int *)(v117 + 920);
                  v121 = v104;
                  do
                  {
                    v122 = *v120++;
                    *v119 = v118 / (double)(1 << v122);
                    v119 += 15;
                    --v121;
                  }
                  while (v121);
                }
                *(_DWORD *)(v97 + 44) = *(_DWORD *)(v117 + 284);
              }
              sub_1B680F36C(&v202, *(_QWORD *)(*(_QWORD *)(v22 + 584) + 48));
              v123 = v202;
              v124 = v203;
              if (v202)
              {
                if (v203)
                {
                  if ((v203->__shared_owners_ & 0x8000000000000000) == 0 || dword_1EF137CD0 <= 0)
                  {
LABEL_198:
                    v135 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
LABEL_202:
                    if (*(_DWORD *)(v64 + 3248) == 20 && *(int *)(v64 + 3744) >= 2)
                    {
                      v137 = *(_DWORD *)(v22 + 448);
                      if (v137 <= 250)
                        v137 = 250;
                      *(_DWORD *)(v22 + 448) = v137;
                    }
                    *(_DWORD *)(v22 + 2744) = *(_DWORD *)(a1 + 620);
                    v138 = *(_OWORD *)(a1 + 528);
                    v139 = *(_OWORD *)(a1 + 544);
                    v140 = *(_OWORD *)(a1 + 512);
                    *(_OWORD *)(v22 + 2764) = *(_OWORD *)(a1 + 496);
                    *(_OWORD *)(v22 + 2812) = v139;
                    *(_OWORD *)(v22 + 2796) = v138;
                    *(_OWORD *)(v22 + 2780) = v140;
                    v142 = *(_OWORD *)(a1 + 576);
                    v141 = *(_OWORD *)(a1 + 592);
                    v143 = *(_OWORD *)(a1 + 604);
                    *(_OWORD *)(v22 + 2828) = *(_OWORD *)(a1 + 560);
                    *(_OWORD *)(v22 + 2872) = v143;
                    *(_OWORD *)(v22 + 2860) = v141;
                    *(_OWORD *)(v22 + 2844) = v142;
                    *(_OWORD *)(v22 + 2748) = *(_OWORD *)(a1 + 480);
                    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 56))(*(_QWORD *)(v22 + 16)))
                    {
                      v144 = *(_QWORD *)(v22 + 584);
                      if (*(_BYTE *)(v144 + 952))
                      {
                        v145 = *(float *)(v22 + 2760);
                        v146 = 0.5;
                        if (v145 >= 0.00000011921
                          && (v147 = *(float *)(v22 + 2764), v147 >= 0.00000011921)
                          && *(int *)(v22 + 2744) < 2)
                        {
                          v151 = fmaxf(*(float *)(v22 + 2752) + (float)(v145 * 0.5), 0.0);
                          v152 = fmaxf(*(float *)(v22 + 2756) + (float)(v147 * 0.5), 0.0);
                          *(_DWORD *)(v22 + 3092) = 0;
                          v153 = fmin(fmaxf(v147, v145) * 1.80000001, 1.0);
                          v149 = fmaxf(v153, 0.5);
                          v146 = v149 * 0.5;
                          v154 = v151 - (float)(v149 * 0.5);
                          if ((float)(v151 + (float)(v149 * 0.5)) >= 1.0)
                            v151 = 1.0 - (float)(v149 * 0.5);
                          if (v154 >= 0.0)
                            v150 = v151;
                          else
                            v150 = v149 * 0.5;
                          if ((float)(v152 - v146) >= 0.0)
                          {
                            if ((float)(v152 + v146) >= 1.0)
                              v146 = 1.0 - v146;
                            else
                              v146 = v152;
                          }
                        }
                        else
                        {
                          v148 = *(_DWORD *)(v22 + 3092);
                          v149 = 1.0;
                          v150 = 0.5;
                          if (v148 <= 4)
                          {
                            v150 = *(float *)(v22 + 3076);
                            v146 = *(float *)(v22 + 3080);
                            v149 = fmaxf(*(float *)(v22 + 3084), *(float *)(v22 + 3088));
                            *(_DWORD *)(v22 + 3092) = v148 + 1;
                          }
                        }
                        v155 = *(double *)(v144 + 128);
                        v156 = 30.0;
                        if (v155 < 30.0)
                          v156 = *(double *)(v144 + 128);
                        v157 = 1.0;
                        if (v155 > 1.0)
                          v157 = v156;
                        if (*(int *)(v22 + 644) < 1)
                        {
                          *(float *)(v22 + 3076) = v150;
                          *(float *)(v22 + 3080) = v146;
                          *(float *)(v22 + 3084) = v149;
                          *(float *)(v22 + 3088) = v149;
                        }
                        else
                        {
                          v158 = *(float *)(v22 + 3076);
                          v159 = *(float *)(v22 + 3080);
                          v160 = *(float *)(v22 + 3084);
                          if ((float)(vabds_f32(v150, v158) + vabds_f32(v146, v159)) > 0.007
                            || vabds_f32(v160, v149) > 0.01)
                          {
                            v161 = v157 * -0.00332999998 + 0.219999999;
                            v162 = v157 * -0.00332999998 + 0.150000006;
                            v163 = (1.0 - v161) * v158 + v161 * v150;
                            *(float *)(v22 + 3076) = v163;
                            v164 = (1.0 - v161) * v159 + v161 * v146;
                            *(float *)(v22 + 3080) = v164;
                            v165 = (1.0 - v162) * v160 + v162 * v149;
                            *(float *)(v22 + 3084) = v165;
                            v166 = (1.0 - v162) * *(float *)(v22 + 3088) + v162 * v149;
                            *(float *)(v22 + 3088) = v166;
                          }
                        }
                      }
                    }
                    *(_DWORD *)(v22 + 2888) = *(_DWORD *)(a1 + 816);
                    if (!*(_DWORD *)(v60 + 32))
                    {
                      v167 = *(double *)(v64 + 3280);
                      v168 = *(_DWORD *)(v60 + 8);
                      v169 = (uint64_t)(3000.0 / v167 * (double)v168);
                      *(_QWORD *)(v60 + 16) = v169;
                      *(_QWORD *)(v60 + 24) = (uint64_t)(3000.0 / v167 * (double)(v168 + 1)) - v169;
                      *(_DWORD *)(v60 + 32) = (int)((double)(uint64_t)(3000.0 / v167 + 0.5) * v167 + 0.5);
                    }
                    v170 = *(_QWORD *)(v22 + 592);
                    v171 = *(double *)(a1 + 848);
                    *(float *)(v170 + 48) = v171;
                    v172 = *(_DWORD *)(a1 + 856);
                    *(_DWORD *)(v170 + 56) = v172;
                    *(_QWORD *)(v170 + 76) = *(_QWORD *)(a1 + 876);
                    v173 = *(double *)(a1 + 888);
                    *(float *)(v170 + 52) = v173;
                    v174 = *(_OWORD *)(a1 + 860);
                    *(_OWORD *)(v170 + 60) = v174;
                    *(float *)(v170 + 84) = (float)((float)(v171 * (float)v172) * (float)DWORD1(v174))
                                          * (float)v174;
                    *(_OWORD *)(*(_QWORD *)(v22 + 24) + 20) = *(_OWORD *)(a1 + 460);
                    if (!*(_BYTE *)(v64 + 10990))
                      goto LABEL_251;
                    if (qword_1EDBB4CB8 != -1)
                      dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
                    if (dword_1EDBB4CC4 < 7 || *(_DWORD *)(v64 + 3744) != 1)
                    {
LABEL_251:
                      if (*(_BYTE *)(v64 + 11056))
                      {
                        *(_DWORD *)(v22 + 444) = 1;
                      }
                      else if (!*(_DWORD *)(v22 + 444))
                      {
LABEL_257:
                        v12 = 0;
                        *(_BYTE *)(v22 + 418) = 0;
                        *(_BYTE *)(v22 + 436) = 0;
                        *(_BYTE *)(v22 + 3073) = 1;
                        *(_DWORD *)(v22 + 464) = *(_DWORD *)(a1 + 336);
                        v178 = *(_OWORD *)(a1 + 340);
                        v179 = *(_OWORD *)(a1 + 356);
                        v180 = *(_OWORD *)(a1 + 388);
                        *(_OWORD *)(v22 + 500) = *(_OWORD *)(a1 + 372);
                        *(_OWORD *)(v22 + 516) = v180;
                        *(_OWORD *)(v22 + 468) = v178;
                        *(_OWORD *)(v22 + 484) = v179;
                        goto LABEL_258;
                      }
                      if (*(_DWORD *)(v22 + 860) && CVIsCompressedPixelFormatAvailable(pixelFormatTypea))
                        *(_DWORD *)(v22 + 444) = 0;
                      goto LABEL_257;
                    }
                    v175 = *(unsigned __int8 *)(v64 + 3498);
                    if (v175 == 10)
                    {
                      v176 = 1;
                    }
                    else
                    {
                      if (v175 != 8)
                      {
LABEL_245:
                        if (*(_BYTE *)(v64 + 11072))
                        {
                          v177 = 1;
                        }
                        else if (*(_DWORD *)(v22 + 440) == 1 && !*(_BYTE *)(a1 + 320))
                        {
                          v177 = *(_DWORD *)(v22 + 444);
                        }
                        else
                        {
                          v177 = 0;
                        }
                        *(_DWORD *)(v22 + 444) = v177;
                        goto LABEL_251;
                      }
                      v176 = *(_DWORD *)(a1 + 256);
                    }
                    *(_DWORD *)(v22 + 440) = v176;
                    goto LABEL_245;
                  }
                  v125 = (FILE *)*MEMORY[0x1E0C80C10];
                  v126 = v203->__shared_owners_ + 1;
                }
                else
                {
                  if (dword_1EF137CD0 < 1)
                    goto LABEL_202;
                  v126 = 0;
                  v125 = (FILE *)*MEMORY[0x1E0C80C10];
                }
                fprintf(v125, "Error: prev_frame_stats use_count=%ld raw_pointer=%p, disp_ord_idx_=%d                                   dropped_=%d frame_type=%d", v126, v202, *v202, *((unsigned __int8 *)v202 + 111), *((char *)v202 + 32));
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  if (v124)
                    v130 = v124->__shared_owners_ + 1;
                  else
                    v130 = 0;
                  v132 = *v123;
                  v133 = *((unsigned __int8 *)v123 + 111);
                  v134 = *((char *)v123 + 32);
                  *(_DWORD *)buf = 134219008;
                  *(_QWORD *)&buf[4] = v130;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v123;
                  v205 = 1024;
                  v206 = v132;
                  v207 = 1024;
                  v208 = v133;
                  v209 = 1024;
                  v210 = v134;
                  _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Error: prev_frame_stats use_count=%ld raw_pointer=%p, disp_ord_idx_=%d                                   dropped_=%d frame_type=%d", buf, 0x28u);
                }
              }
              if (!v124)
                goto LABEL_202;
              goto LABEL_198;
            }
            if (*(_QWORD *)(v22 + 624))
              goto LABEL_122;
            v76 = *(_QWORD *)(v75 + 12744);
            if (v76)
            {
              v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, 0, v22 + 624);
              if (!(_DWORD)v12)
                goto LABEL_122;
            }
            else
            {
              v12 = 4294954385;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_258;
            *(_WORD *)buf = 0;
            v128 = MEMORY[0x1E0C81028];
            v129 = "Recon frame for alpha layer creation failed\n";
LABEL_194:
            _os_log_error_impl(&dword_1B676B000, v128, OS_LOG_TYPE_ERROR, v129, buf, 2u);
            goto LABEL_258;
          }
          v77 = *(_QWORD *)(*(_QWORD *)(v22 + 584) + 12736);
          if (v77)
          {
            v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v77 + 24))(v77, 0, v22 + 608);
            if (!(_DWORD)v12)
              goto LABEL_109;
          }
          else
          {
            v12 = 4294954385;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_258;
          *(_WORD *)buf = 0;
          v128 = MEMORY[0x1E0C81028];
          v129 = "Recon frame creation failed\n";
          goto LABEL_194;
        }
        v25 = v24;
        *((_QWORD *)v24 + 3) = 0;
        v26 = v24 + 24;
        *((_QWORD *)v24 + 4) = 0;
        *(_OWORD *)(v24 + 1256) = 0u;
        *(_OWORD *)(v24 + 1272) = 0u;
        *(_OWORD *)(v24 + 1288) = 0u;
        *(_OWORD *)(v24 + 1304) = 0u;
        *(_OWORD *)(v24 + 1320) = 0u;
        *(_OWORD *)(v24 + 1336) = 0u;
        *(_OWORD *)(v24 + 1352) = 0u;
        *(_OWORD *)(v24 + 1368) = 0u;
        *(_OWORD *)(v24 + 1384) = 0u;
        *(_OWORD *)(v24 + 1400) = 0u;
        *(_OWORD *)(v24 + 1416) = 0u;
        *(_OWORD *)(v24 + 1432) = 0u;
        *(_OWORD *)(v24 + 1448) = 0u;
        *(_OWORD *)(v24 + 1464) = 0u;
        *(_OWORD *)(v24 + 1480) = 0u;
        *(_OWORD *)(v24 + 1496) = 0u;
        *(_QWORD *)(v22 + 1048) = v24;
        *(_QWORD *)v24 = a1 + 3184;
        v27 = *(_QWORD *)(a1 + 13272);
        *((_QWORD *)v24 + 2) = v27;
        v28 = *(char *)(a1 + 3335);
        *((_DWORD *)v24 + 678) = v28;
        if (v27)
          v29 = 2;
        else
          v29 = -1;
        *((_DWORD *)v24 + 680) = v29;
        v30 = *(_QWORD *)(a1 + 12688);
        if (v29 <= v28)
          v29 = v28;
        v31 = *(_DWORD *)(v30 + 176);
        v32 = *(_DWORD *)(v30 + 180);
        if (v29)
        {
          v33 = v29;
          if (v29 > 0x640000
            || malloc_type_posix_memalign((void **)v24 + 3, 0x10uLL, 16 * v29, 0x1000040451B5BE8uLL)
            || !*v26)
          {
            goto LABEL_64;
          }
          v34 = 0;
          v35 = v33;
          do
          {
            v36 = (_QWORD *)(*v26 + v34);
            *v36 = 0;
            v36[1] = 0;
            v34 += 16;
            --v35;
          }
          while (v35);
          *((_QWORD *)v25 + 4) = v33;
        }
        *((_QWORD *)v25 + 337) = operator new[]();
        *(_QWORD *)pixelFormatType = *((unsigned int *)v25 + 678);
        v199 = v5;
        *((_QWORD *)v25 + 338) = operator new[]();
        if (pixelFormatType[0])
        {
          v43 = 0;
          v44 = (unsigned __int16)v32 >> 3;
          do
          {
            v45 = *((_QWORD *)v25 + 338);
            *(_QWORD *)(v45 + 8 * v43) = operator new[]();
            **(_QWORD **)(v45 + 8 * v43) = operator new[]();
            if (v44 >= 2)
            {
              v46 = 0;
              do
              {
                *(_QWORD *)(*(_QWORD *)(v45 + 8 * v43) + v46 + 8) = *(_QWORD *)(*(_QWORD *)(v45 + 8 * v43) + v46)
                                                                  + 4 * ((unsigned __int16)v31 >> 3);
                v46 += 8;
              }
              while (8 * v44 - 8 != v46);
            }
            ++v43;
          }
          while (v43 != *(_QWORD *)pixelFormatType);
        }
        *((_DWORD *)v25 + 574) = 0;
        *(_OWORD *)(v25 + 2280) = 0u;
        v5 = v199;
LABEL_64:
        *(_QWORD *)(v22 + 1072) = *(_QWORD *)(a1 + 13256);
        *(_QWORD *)(v22 + 1056) = a1;
        v47 = *(_DWORD *)(a1 + 11068);
        *(_DWORD *)(v22 + 860) = v47;
        switch(v47)
        {
          case -1:
            if (CVIsCompressedPixelFormatAvailable(*(_DWORD *)(a1 + 1000)))
            {
              *(_DWORD *)(v22 + 860) = 0;
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                goto LABEL_83;
              v48 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v48;
              v49 = MEMORY[0x1E0C81028];
              v50 = "LRP 0x%llx: Default spatial analysis accelerate on GPU\n";
              goto LABEL_82;
            }
            *(_DWORD *)(v22 + 860) = 1;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v56 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v56;
              v49 = MEMORY[0x1E0C81028];
              v50 = "LRP 0x%llx: Default spatial analysis accelerate on CPU with neon\n";
              goto LABEL_82;
            }
            goto LABEL_88;
          case 0:
            *(_DWORD *)(v22 + 860) = 0;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_83;
            v53 = *(_QWORD *)(a1 + 1176);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v53;
            v49 = MEMORY[0x1E0C81028];
            v50 = "LRP 0x%llx: Forced spatial analysis accelerate on GPU\n";
            goto LABEL_82;
          case 1:
            if (CVIsCompressedPixelFormatAvailable(*(_DWORD *)(a1 + 1000)))
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_88;
              v51 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v51;
              v40 = MEMORY[0x1E0C81028];
              v41 = "LRP 0x%llx: Failed to force spatial analysis accelerate on CPU with neon for compressed buffer";
              goto LABEL_86;
            }
            *(_DWORD *)(v22 + 860) = 1;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_88;
            v54 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v54;
            v49 = MEMORY[0x1E0C81028];
            v50 = "LRP 0x%llx: Forced spatial analysis accelerate on CPU with neon\n";
            goto LABEL_82;
          case 2:
            if (CVIsCompressedPixelFormatAvailable(*(_DWORD *)(a1 + 1000)))
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_88;
              v52 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v52;
              v40 = MEMORY[0x1E0C81028];
              v41 = "LRP 0x%llx: Failed to forced spatial analysis accelerate on CPU with scalar for compressed buffer";
              goto LABEL_86;
            }
            *(_DWORD *)(v22 + 860) = 2;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v55 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v55;
              v49 = MEMORY[0x1E0C81028];
              v50 = "LRP 0x%llx: Forced spatial analysis accelerate on CPU with scalar\n";
LABEL_82:
              _os_log_impl(&dword_1B676B000, v49, OS_LOG_TYPE_DEFAULT, v50, buf, 0xCu);
              if (!*(_DWORD *)(v22 + 860))
              {
LABEL_83:
                v57 = (const void **)operator new();
                *v57 = 0;
                v58 = (void *)MEMORY[0x1BCC98608]();
                *(_QWORD *)buf = objc_opt_new();
                sub_1B6777A50(v57, (const void **)buf);
                sub_1B6777A90((const void **)buf);
                objc_autoreleasePoolPop(v58);
                sub_1B6806EBC((const void ***)(v22 + 2064), v57);
                if (!*(_QWORD *)(v22 + 2064) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  v59 = *(_QWORD *)(*(_QWORD *)(v22 + 1056) + 1176);
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v59;
                  v40 = MEMORY[0x1E0C81028];
                  v41 = "LRP 0x%llx: Failed to initialze GPU-based spatial analysis";
LABEL_86:
                  v42 = 12;
                  goto LABEL_87;
                }
              }
            }
            break;
          default:
            goto LABEL_88;
        }
        goto LABEL_88;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Control byte creation failed.", buf, 2u);
      }
      v12 = 4294954392;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_267:
      if ((_QWORD)v201 && (!(_DWORD)v12 || *(_BYTE *)(v201 + 3073)))
        goto LABEL_275;
      goto LABEL_270;
    }
    *(_WORD *)buf = 0;
    v37 = MEMORY[0x1E0C81028];
    v38 = "Failed to initialize from sequence enc.\n";
LABEL_53:
    v39 = 2;
LABEL_297:
    _os_log_error_impl(&dword_1B676B000, v37, OS_LOG_TYPE_ERROR, v38, buf, v39);
    goto LABEL_267;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v37 = MEMORY[0x1E0C81028];
    v38 = "Unable to allocate frame_enc\n";
    goto LABEL_53;
  }
LABEL_270:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_1B6811898(a1, v12, 0, 0, 0, 0, 0, v3, (uint64_t)buf);
  v184 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v185 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
LABEL_275:
  v187 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
  if (*((_QWORD *)&v201 + 1))
  {
    v188 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  return v12;
}

void sub_1B6811214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,std::__shared_weak_count *a28)
{
  const void **v28;
  const void **v30;

  v30 = sub_1B6777A90(v28);
  MEMORY[0x1BCC9814C](v30, 0xC0C40B8AA526DLL);
  sub_1B6772C88((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1B68112F8(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 32 * (v4 - v5) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x100)
    {
      a1[4] = v9 - 256;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)sub_1B677AA34(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = v8 + a1[4];
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)sub_1B677AA34(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v100 = 1;
            else
              v100 = (uint64_t)&v64[-*a1] >> 2;
            v101 = (char *)sub_1B677AA34(v100);
            v103 = &v101[8 * (v100 >> 2)];
            v104 = (uint64_t *)a1[1];
            v64 = v103;
            v105 = a1[2] - (_QWORD)v104;
            if (v105)
            {
              v64 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
              v106 = 8 * (v105 >> 3);
              v107 = &v101[8 * (v100 >> 2)];
              do
              {
                v108 = *v104++;
                *(_QWORD *)v107 = v108;
                v107 += 8;
                v106 -= 8;
              }
              while (v106);
            }
            v109 = (char *)*a1;
            *a1 = v101;
            a1[1] = v103;
            a1[2] = v64;
            a1[3] = &v101[8 * v102];
            if (v109)
            {
              operator delete(v109);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)sub_1B677AA34(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v113 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v113;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)sub_1B677AA34(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v110 = v37;
      v113 = v39;
      operator delete(v31);
      v37 = v110;
    }
    v39 = v113;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)sub_1B677AA34(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v111 = v37;
            v115 = v39;
            operator delete(v79);
            v37 = v111;
            v39 = v115;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v112 = *((_QWORD *)&v37 + 1);
            v114 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v112;
            *(_QWORD *)&v39 = v114;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  v97 = *a2;
  *(_OWORD *)(*(_QWORD *)&v5[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *a2;
  if (*((_QWORD *)&v97 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
    v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_1B6811868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_1B6811898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(a1 + 13288);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 13296);
    v16 = a6;
    v17 = a7;
    if (a7)
    {
      p_shared_owners = (unint64_t *)&a7->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v9(v10, a8, a2, a3, a4, a5, &v16, a9);
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1B6811940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B6772C88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6811954(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  __int16 *v28;
  unsigned int *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  NSObject *v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  const char *v42;
  uint32_t v43;
  uint64_t v44;
  uint64_t *v45;
  NSObject *v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  const char *v50;
  uint32_t v51;
  uint64_t v52;
  uint64_t *v53;
  NSObject *v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  const char *v58;
  uint32_t v59;
  uint64_t v60;
  uint64_t *v61;
  NSObject *v62;
  uint64_t v63;
  int v64;
  NSObject *v65;
  const char *v66;
  uint32_t v67;
  uint64_t v68;
  uint64_t *v69;
  NSObject *v70;
  uint64_t v71;
  int v72;
  NSObject *v73;
  const char *v74;
  uint32_t v75;
  int v77;
  uint8_t buf[4];
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD **)(a2 + 1096);
  v5 = a1 + 12880;
  if (*(_BYTE *)(a2 + 640))
  {
    sub_1B67CDC54(a1 + 12880, *(unsigned int **)(a2 + 1096));
    sub_1B67CDC08(v5);
  }
  else
  {
    for (i = 0; i != 272; i += 16)
      sub_1B67C7674((_QWORD *)(a1 + 12896 + i));
    *(_DWORD *)(a1 + 13248) = *(_DWORD *)(a2 + 644);
    *(_DWORD *)(a1 + 13284) = 0;
  }
  if (*(_BYTE *)a2)
    goto LABEL_19;
  v16 = 0;
  v17 = *(_QWORD *)(a2 + 608);
  *(_BYTE *)(v17 + 45) = 1;
  v18 = a1 + 12896;
  while (1)
  {
    v19 = *(_QWORD *)(v18 + v16);
    if (v19)
    {
      if (*(_DWORD *)(v19 + 680) == *(_DWORD *)(a2 + 432))
        break;
    }
    v16 += 16;
    if (v16 == 272)
      goto LABEL_31;
  }
  sub_1B67C7674((_QWORD *)(v18 + v16));
  v17 = *(_QWORD *)(a2 + 608);
LABEL_31:
  if (!*(_DWORD *)(v17 + 36))
    goto LABEL_8;
  v20 = *(_QWORD *)(a2 + 40);
  v21 = *(unsigned __int8 *)(v20 + 2025);
  LODWORD(v20) = *(unsigned __int8 *)(v20 + 2024);
  *(_DWORD *)(a1 + 13236) = *(_DWORD *)(v17 + 12);
  *(_DWORD *)(a1 + 13240) = v21;
  *(_DWORD *)(a1 + 13244) = v20;
  v22 = *(std::__shared_weak_count **)(a2 + 616);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    v15 = sub_1B67CDBC0(v5, v17, (uint64_t)v22);
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v15 = sub_1B67CDBC0(v5, v17, 0);
  }
  *(_BYTE *)(*(_QWORD *)(a2 + 608) + 272) = 1;
  if (!(_DWORD)v15)
  {
LABEL_8:
    if (*(double *)(a1 + 136) != 1.0 || *(_DWORD *)(a1 + 3688) != 1)
      goto LABEL_21;
LABEL_19:
    v7 = 0;
    v8 = 0;
    v9 = *(_DWORD *)(*(_QWORD *)(a2 + 608) + 680);
    do
    {
      v10 = *(_QWORD *)(a1 + 12896 + v7);
      if (v10)
        LODWORD(v10) = (*(unsigned __int8 *)(v10 + 36) >> 1) & 1;
      v8 += v10;
      v7 += 16;
    }
    while (v7 != 272);
    v11 = *(char *)(a1 + 3334);
    v12 = v11 >= 1 && v8 < v11;
    if (v12 && v9 >= v11)
    {
      if (dword_1EF137CD0 >= 2)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: number of LTR frames (%d) is smaller than number of LTR allowed (%d) in DPB", v9, v8, v11);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          v79 = v9;
          v80 = 1024;
          v81 = v8;
          v82 = 1024;
          v83 = v11;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "[Poc %d]: number of LTR frames (%d) is smaller than number of LTR allowed (%d) in DPB", buf, 0x14u);
        }
      }
    }
    else
    {
LABEL_21:
      v14 = *(_QWORD *)(a1 + 13272);
      if (!v14
        || !*(_BYTE *)(a1 + 3766)
        || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 112))(v14, a2))
      {
        return 0;
      }
    }
    v27 = *(_DWORD *)(*(_QWORD *)(a2 + 608) + 680);
    v28 = *(__int16 **)(a2 + 1112);
    v29 = *(unsigned int **)(a2 + 1128);
    if (v28)
    {
      if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v79 = v27;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: Short-term RPS >>>>>>\n", buf, 8u);
      }
      sub_1B688FD74(v28);
    }
    if (v29)
    {
      if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v79 = v27;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: Long-term RPS >>>>>>\n", buf, 8u);
      }
      sub_1B68903EC(v29);
    }
    v77 = v27;
    if (!v4)
      goto LABEL_137;
    if (dword_1EF137CD0 >= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
        || (*(_DWORD *)buf = 67109120,
            v79 = v27,
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: RPS >>>>>>\n", buf, 8u), dword_1EF137CD0 >= 3))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
          || (v30 = *v4,
              *(_DWORD *)buf = 67109120,
              v79 = v30,
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "numPocTotalCurr: %d\n", buf, 8u),
              dword_1EF137CD0 >= 3))
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
            || (v31 = v4[1],
                *(_DWORD *)buf = 67109120,
                v79 = v31,
                _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "numPocStCurrBefore: %d\n", buf, 8u), dword_1EF137CD0 >= 3))
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
              || (v32 = v4[2],
                  *(_DWORD *)buf = 67109120,
                  v79 = v32,
                  _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "numPocStCurrAfter: %d\n", buf, 8u), dword_1EF137CD0 >= 3))
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
                || (v33 = v4[3],
                    *(_DWORD *)buf = 67109120,
                    v79 = v33,
                    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "numPocLtCurr: %d\n", buf, 8u), dword_1EF137CD0 >= 3))
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
                  || (v34 = v4[4],
                      *(_DWORD *)buf = 67109120,
                      v79 = v34,
                      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "numPocStFoll: %d\n", buf, 8u), dword_1EF137CD0 >= 3))
                {
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
                    || (v35 = v4[5],
                        *(_DWORD *)buf = 67109120,
                        v79 = v35,
                        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "numPocLtFoll: %d\n", buf, 8u), dword_1EF137CD0 >= 3))
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Short-term current before:\n", buf, 2u);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((int)v4[1] >= 1)
    {
      v36 = 0;
      v37 = (uint64_t *)(v4 + 6);
      v38 = MEMORY[0x1E0C81028];
      do
      {
        v39 = *v37;
        if (*v37)
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_80;
          v40 = *(_DWORD *)(v39 + 680);
          *(_DWORD *)buf = 67109120;
          v79 = v40;
          v41 = v38;
          v42 = "\tFrame poc: %d";
          v43 = 8;
        }
        else
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_80;
          *(_WORD *)buf = 0;
          v41 = v38;
          v42 = "\tFrame is NULL\n";
          v43 = 2;
        }
        _os_log_impl(&dword_1B676B000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, v43);
LABEL_80:
        ++v36;
        v37 += 2;
      }
      while (v36 < (int)v4[1]);
    }
    if (dword_1EF137CD0 > 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Short-term current after:\n", buf, 2u);
    }
    if ((int)v4[2] >= 1)
    {
      v44 = 0;
      v45 = (uint64_t *)(v4 + 70);
      v46 = MEMORY[0x1E0C81028];
      do
      {
        v47 = *v45;
        if (*v45)
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            goto LABEL_94;
          v48 = *(_DWORD *)(v47 + 680);
          *(_DWORD *)buf = 67109120;
          v79 = v48;
          v49 = v46;
          v50 = "\tFrame poc: %d";
          v51 = 8;
        }
        else
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            goto LABEL_94;
          *(_WORD *)buf = 0;
          v49 = v46;
          v50 = "\tFrame is NULL\n";
          v51 = 2;
        }
        _os_log_impl(&dword_1B676B000, v49, OS_LOG_TYPE_DEFAULT, v50, buf, v51);
LABEL_94:
        ++v44;
        v45 += 2;
      }
      while (v44 < (int)v4[2]);
    }
    if (dword_1EF137CD0 > 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Long-term current:\n", buf, 2u);
    }
    if ((int)v4[3] >= 1)
    {
      v52 = 0;
      v53 = (uint64_t *)(v4 + 134);
      v54 = MEMORY[0x1E0C81028];
      do
      {
        v55 = *v53;
        if (*v53)
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            goto LABEL_108;
          v56 = *(_DWORD *)(v55 + 680);
          *(_DWORD *)buf = 67109120;
          v79 = v56;
          v57 = v54;
          v58 = "\tFrame poc: %d";
          v59 = 8;
        }
        else
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            goto LABEL_108;
          *(_WORD *)buf = 0;
          v57 = v54;
          v58 = "\tFrame is NULL\n";
          v59 = 2;
        }
        _os_log_impl(&dword_1B676B000, v57, OS_LOG_TYPE_DEFAULT, v58, buf, v59);
LABEL_108:
        ++v52;
        v53 += 2;
      }
      while (v52 < (int)v4[3]);
    }
    if (dword_1EF137CD0 > 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Short-term Foll:\n", buf, 2u);
    }
    if ((int)v4[4] >= 1)
    {
      v60 = 0;
      v61 = (uint64_t *)(v4 + 198);
      v62 = MEMORY[0x1E0C81028];
      do
      {
        v63 = *v61;
        if (*v61)
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_122;
          v64 = *(_DWORD *)(v63 + 680);
          *(_DWORD *)buf = 67109120;
          v79 = v64;
          v65 = v62;
          v66 = "\tFrame poc: %d";
          v67 = 8;
        }
        else
        {
          if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_122;
          *(_WORD *)buf = 0;
          v65 = v62;
          v66 = "\tFrame is NULL\n";
          v67 = 2;
        }
        _os_log_impl(&dword_1B676B000, v65, OS_LOG_TYPE_DEFAULT, v66, buf, v67);
LABEL_122:
        ++v60;
        v61 += 2;
      }
      while (v60 < (int)v4[4]);
    }
    if (dword_1EF137CD0 > 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Long-term Foll:\n", buf, 2u);
    }
    if ((int)v4[5] < 1)
    {
LABEL_137:
      sub_1B67CE7F4(v5, v77);
      if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v79 = v77;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Error occurred in encoding frame %d", buf, 8u);
      }
      v15 = 0;
      *(_BYTE *)(a2 + 436) = 1;
      return v15;
    }
    v68 = 0;
    v69 = (uint64_t *)(v4 + 262);
    v70 = MEMORY[0x1E0C81028];
    while (1)
    {
      v71 = *v69;
      if (*v69)
      {
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          goto LABEL_136;
        v72 = *(_DWORD *)(v71 + 680);
        *(_DWORD *)buf = 67109120;
        v79 = v72;
        v73 = v70;
        v74 = "\tFrame poc: %d";
        v75 = 8;
      }
      else
      {
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          goto LABEL_136;
        *(_WORD *)buf = 0;
        v73 = v70;
        v74 = "\tFrame is NULL\n";
        v75 = 2;
      }
      _os_log_impl(&dword_1B676B000, v73, OS_LOG_TYPE_DEFAULT, v74, buf, v75);
LABEL_136:
      ++v68;
      v69 += 2;
      if (v68 >= (int)v4[5])
        goto LABEL_137;
    }
  }
  return v15;
}

void sub_1B68125D8(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  uint64_t v52;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)a1 + 24 * v3;
        v5 = *(_QWORD **)v4;
        if (*(_QWORD *)v4)
        {
          v6 = v5[1];
          if (v6)
            MEMORY[0x1BCC9811C](v6, 0x1000C8077774924);
          v7 = v5[2];
          if (v7)
            MEMORY[0x1BCC9811C](v7, 0x1000C8077774924);
          v8 = v5[3];
          if (v8)
            MEMORY[0x1BCC9811C](v8, 0x1000C8077774924);
          v9 = v5[4];
          if (v9)
            MEMORY[0x1BCC9811C](v9, 0x1000C80BDFB0063);
          v10 = v5[5];
          if (v10)
            MEMORY[0x1BCC9811C](v10, 0x1000C80BDFB0063);
          v11 = v5[6];
          if (v11)
            MEMORY[0x1BCC9811C](v11, 0x1000C80BDFB0063);
          v12 = v5[7];
          if (v12)
            MEMORY[0x1BCC9811C](v12, 0x1000C8077774924);
          v13 = v5[8];
          if (v13)
            MEMORY[0x1BCC9811C](v13, 0x1000C80BDFB0063);
          v14 = v5[9];
          if (v14)
            MEMORY[0x1BCC9811C](v14, 0x1000C8077774924);
          v15 = v5[10];
          if (v15)
            MEMORY[0x1BCC9811C](v15, 0x1000C80BDFB0063);
          v16 = v5[11];
          if (v16)
            MEMORY[0x1BCC9811C](v16, 0x1000C8077774924);
          v17 = v5[12];
          if (v17)
            MEMORY[0x1BCC9811C](v17, 0x1000C8077774924);
          v18 = v5[13];
          if (v18)
            MEMORY[0x1BCC9811C](v18, 0x1000C8077774924);
          v19 = v5[14];
          if (v19)
            MEMORY[0x1BCC9811C](v19, 0x1000C8077774924);
          v20 = v5[15];
          if (v20)
            MEMORY[0x1BCC9811C](v20, 0x1000C8077774924);
          v21 = v5[16];
          if (v21)
            MEMORY[0x1BCC9811C](v21, 0x1000C8077774924);
          v22 = v5[17];
          if (v22)
            MEMORY[0x1BCC9811C](v22, 0x1000C8077774924);
          v23 = v5[18];
          if (v23)
            MEMORY[0x1BCC9811C](v23, 0x1000C80BDFB0063);
          v24 = v5[19];
          if (v24)
            MEMORY[0x1BCC9811C](v24, 0x1000C80BDFB0063);
          v25 = 0;
          v26 = 1;
          do
          {
            v27 = v26;
            v28 = &v5[v25];
            v29 = v28[20];
            if (v29)
              MEMORY[0x1BCC9811C](v29, 0x1000C8052888210);
            v30 = v28[22];
            if (v30)
              MEMORY[0x1BCC9811C](v30, 0x1000C8077774924);
            v26 = 0;
            v25 = 1;
          }
          while ((v27 & 1) != 0);
          v31 = 0;
          v32 = 1;
          do
          {
            v33 = 0;
            v34 = v32;
            v35 = 1;
            do
            {
              v36 = v35;
              v37 = (uint64_t)&v5[2 * v31 + v33];
              v38 = *(_QWORD *)(v37 + 192);
              if (v38)
                MEMORY[0x1BCC9811C](v38, 0x1000C8052888210);
              v39 = *(_QWORD *)(v37 + 224);
              if (v39)
                MEMORY[0x1BCC9811C](v39, 0x1000C80BDFB0063);
              v40 = (uint64_t)&v5[2 * v31 + v33];
              v41 = *(_QWORD *)(v40 + 256);
              if (v41)
                MEMORY[0x1BCC9811C](v41, 0x1000C8052888210);
              v42 = *(_QWORD *)(v40 + 288);
              if (v42)
                MEMORY[0x1BCC9811C](v42, 0x1000C80BDFB0063);
              v35 = 0;
              v33 = 1;
            }
            while ((v36 & 1) != 0);
            v32 = 0;
            v31 = 1;
          }
          while ((v34 & 1) != 0);
          v43 = v5[40];
          if (v43)
            MEMORY[0x1BCC9811C](v43, 0x1000C8077774924);
          v44 = v5[41];
          if (v44)
            MEMORY[0x1BCC9811C](v44, 0x1000C8077774924);
          for (i = 0; i != 3; ++i)
          {
            v46 = v5[i + 42];
            if (v46)
              MEMORY[0x1BCC9811C](v46, 0x1000C80BDFB0063);
            v47 = v5[i + 45];
            if (v47)
              MEMORY[0x1BCC9811C](v47, 0x1000C8052888210);
          }
          v48 = v5[48];
          if (v48)
            MEMORY[0x1BCC9811C](v48, 0x1000C8052888210);
          v49 = v5[49];
          if (v49)
            MEMORY[0x1BCC9811C](v49, 0x1000C8052888210);
          for (j = 0; j != 8; ++j)
          {
            v51 = v5[j + 50];
            if (v51)
              MEMORY[0x1BCC9811C](v51, 0x1000C8077774924);
            v52 = v5[j + 58];
            if (v52)
              MEMORY[0x1BCC9811C](v52, 0x1000C8077774924);
          }
          if (*(_QWORD *)v4)
          {
            free(*(void **)v4);
            *(_QWORD *)v4 = 0;
            *(_QWORD *)(v4 + 8) = 0;
          }
        }
        ++v3;
      }
      while (v3 < *(_QWORD *)(a1 + 8));
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1B6812A88(char **a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  void *v10;
  uint64_t v11;

  v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = *a1;
        v6 = &(*a1)[v3];
        v7 = *((_QWORD *)v6 + 9911);
        if (v7)
          dispatch_release(v7);
        v8 = (void *)*((_QWORD *)v6 + 9909);
        if (v8)
        {
          free(v8);
          *((_QWORD *)v6 + 9909) = 0;
          *((_QWORD *)v6 + 9910) = 0;
        }
        v9 = &v5[v3];
        sub_1B6876200((uint64_t)&v5[v3 + 79256]);
        v10 = *(void **)&v5[v3 + 79240];
        if (v10)
        {
          free(v10);
          *(_QWORD *)&v5[v3 + 79240] = 0;
          *(_QWORD *)&v5[v3 + 79248] = 0;
        }
        sub_1B6876274((char **)v9 + 9903);
        if (*((_QWORD *)v9 + 9881))
        {
          free(*((void **)v9 + 9881));
          *((_QWORD *)v9 + 9881) = 0;
          *((_QWORD *)v9 + 9882) = 0;
        }
        v11 = (uint64_t)&v5[v3 + 78192];
        if (*(_QWORD *)v11)
        {
          free(*(void **)v11);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        sub_1B67C7524(v6);
        ++v4;
        v3 += 79360;
      }
      while (v4 < (unint64_t)a1[1]);
      v2 = *a1;
    }
    free(v2);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t sub_1B6812BB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t i;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t j;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  v2 = a1 + 592;
  sub_1B67C7674((_QWORD *)(a1 + 592));
  sub_1B67C7674((_QWORD *)(a1 + 608));
  if (*(_QWORD *)(a1 + 624))
    sub_1B67C7674((_QWORD *)(a1 + 624));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 3040);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 3040) = 0;
    *(_QWORD *)(a1 + 3048) = 0;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 3016);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1B6812A88((char **)(a1 + 2688));
  v8 = *(_QWORD *)(a1 + 1048);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 2696);
    if (v9)
      MEMORY[0x1BCC9814C](v9, 0x1000C4052888210);
    *(_QWORD *)(v8 + 2696) = 0;
    v10 = *(unsigned int *)(v8 + 2712);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      do
      {
        v13 = *(_QWORD *)(v8 + 2704);
        v14 = *(_QWORD **)(v13 + v11);
        if (!*v14 || (MEMORY[0x1BCC9814C](*v14, 0x1000C4052888210), *(_QWORD *)(v13 + v11)))
          MEMORY[0x1BCC9811C]();
        *(_QWORD *)(v13 + v11) = 0;
        v11 += 8;
      }
      while (v12 != v11);
    }
    v15 = *(_QWORD *)(v8 + 2704);
    if (v15)
      MEMORY[0x1BCC9811C](v15, 0x80C80B8603338);
    *(_QWORD *)(v8 + 2704) = 0;
    for (i = 1496; i != 1240; i -= 16)
    {
      v17 = (_QWORD *)(v8 + i);
      v18 = *(void **)(v8 + i);
      if (v18)
      {
        free(v18);
        *v17 = 0;
        v17[1] = 0;
      }
    }
    v19 = *(void **)(v8 + 24);
    if (v19)
    {
      free(v19);
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
    }
    MEMORY[0x1BCC9814C](v8, 0x10F0C405B151E0BLL);
  }
  v20 = *(void **)(a1 + 2488);
  if (v20)
  {
    free(v20);
    *(_QWORD *)(a1 + 2488) = 0;
    *(_QWORD *)(a1 + 2496) = 0;
  }
  for (j = 2376; j != 2328; j -= 16)
  {
    v22 = (_QWORD *)(a1 + j);
    v23 = *(void **)(a1 + j);
    if (v23)
    {
      free(v23);
      *v22 = 0;
      v22[1] = 0;
    }
  }
  v24 = *(void **)(a1 + 2240);
  if (v24)
  {
    free(v24);
    *(_QWORD *)(a1 + 2240) = 0;
    *(_QWORD *)(a1 + 2248) = 0;
  }
  v25 = *(void **)(a1 + 2224);
  if (v25)
  {
    free(v25);
    *(_QWORD *)(a1 + 2224) = 0;
    *(_QWORD *)(a1 + 2232) = 0;
  }
  v26 = *(void **)(a1 + 2208);
  if (v26)
  {
    free(v26);
    *(_QWORD *)(a1 + 2208) = 0;
    *(_QWORD *)(a1 + 2216) = 0;
  }
  v27 = *(void **)(a1 + 2192);
  if (v27)
  {
    free(v27);
    *(_QWORD *)(a1 + 2192) = 0;
    *(_QWORD *)(a1 + 2200) = 0;
  }
  v28 = *(void **)(a1 + 2176);
  if (v28)
  {
    free(v28);
    *(_QWORD *)(a1 + 2176) = 0;
    *(_QWORD *)(a1 + 2184) = 0;
  }
  v29 = *(void **)(a1 + 2160);
  if (v29)
  {
    free(v29);
    *(_QWORD *)(a1 + 2160) = 0;
    *(_QWORD *)(a1 + 2168) = 0;
  }
  v30 = *(void **)(a1 + 2144);
  if (v30)
  {
    free(v30);
    *(_QWORD *)(a1 + 2144) = 0;
    *(_QWORD *)(a1 + 2152) = 0;
  }
  v31 = *(void **)(a1 + 2128);
  if (v31)
  {
    free(v31);
    *(_QWORD *)(a1 + 2128) = 0;
    *(_QWORD *)(a1 + 2136) = 0;
  }
  v32 = *(void **)(a1 + 2112);
  if (v32)
  {
    free(v32);
    *(_QWORD *)(a1 + 2112) = 0;
    *(_QWORD *)(a1 + 2120) = 0;
  }
  v33 = *(void **)(a1 + 2096);
  if (v33)
  {
    free(v33);
    *(_QWORD *)(a1 + 2096) = 0;
    *(_QWORD *)(a1 + 2104) = 0;
  }
  v34 = *(void **)(a1 + 2080);
  if (v34)
  {
    free(v34);
    *(_QWORD *)(a1 + 2080) = 0;
    *(_QWORD *)(a1 + 2088) = 0;
  }
  sub_1B6806EBC((const void ***)(a1 + 2064), 0);
  sub_1B682BFAC(a1 + 1528);
  v35 = *(void **)(a1 + 1128);
  if (v35)
  {
    free(v35);
    *(_QWORD *)(a1 + 1128) = 0;
    *(_QWORD *)(a1 + 1136) = 0;
  }
  v36 = *(void **)(a1 + 1112);
  if (v36)
  {
    free(v36);
    *(_QWORD *)(a1 + 1112) = 0;
    *(_QWORD *)(a1 + 1120) = 0;
  }
  sub_1B682C00C((char **)(a1 + 1096));
  sub_1B6812A88((char **)(a1 + 1080));
  v37 = *(std::__shared_weak_count **)(a1 + 752);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  sub_1B6772C88(a1 + 624);
  sub_1B6772C88(a1 + 608);
  sub_1B6772C88(v2);
  sub_1B68125D8(a1 + 392);
  sub_1B6772C88(a1 + 56);
  sub_1B6772C88(a1 + 40);
  return a1;
}

void sub_1B6812F48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B6812F58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6812F88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;

  v2 = 0;
  v3 = a1 + 1088;
  do
  {
    sub_1B6803F4C((uint64_t *)(v3 + v2));
    v2 -= 40;
  }
  while (v2 != -80);
  v4 = a1 + 1000;
  v5 = a1 + 968;
  do
  {
    for (i = 0; i != -80; i -= 40)
      sub_1B6803F4C((uint64_t *)(v5 + i));
    v4 -= 120;
    v5 -= 120;
  }
  while (v4 != a1 + 160);
  result = *(_QWORD *)(a1 + 120);
  if (result)
  {
    v8 = (unint64_t *)(result + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

_BYTE *sub_1B6813044(uint64_t a1)
{
  _BYTE *result;
  uint64_t v3;
  BOOL v4;
  int *v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  result = *(_BYTE **)(a1 + 16);
  if (result[33])
  {
    v3 = *(_QWORD *)(a1 + 584);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(v3 + 3705))
      {
        v4 = 1;
      }
      else
      {
        v5 = *(int **)(a1 + 592);
        if (v5[62] > 480)
          goto LABEL_11;
        v6 = (double)(v5[70] * v5[69]);
        v7 = *(_QWORD *)(a1 + 3008);
        v8 = *(_DWORD *)(v7 + 72);
        v9 = v7 + 976;
        v10 = v7 + 120 * v8 + 136;
        if (v8 >= 7)
          v10 = 0;
        if (v8 == 9)
          v10 = v9;
        if (*(double *)(v10 + 8) * v6 <= 5299200.0)
          v4 = *(float *)(a1 + 2720) > 30.0;
        else
LABEL_11:
          v4 = 0;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 80) = v4;
    }
  }
  return result;
}

uint64_t sub_1B6813110(uint64_t a1, char a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  std::mutex *v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  double *v22;
  float v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  int *v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  double *v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  unint64_t v64;
  char **v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  double v74;
  unint64_t v75;
  char **v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  char *v83;
  int v84;
  double v85;
  uint64_t v86;
  double v87;
  char v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  float v92;
  double v93;
  uint64_t v94;
  _BOOL4 v95;
  float v96;
  int v97;
  BOOL v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  char v103;
  uint64_t v104;
  int v105;
  int v106;
  int8x8_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  double v117;
  double v118;
  float v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  unsigned int v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  int v134;
  unint64_t v135;
  double *v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  double *v140;
  double v141;
  int v142;
  double v143;
  double v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  double v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  int v165;
  _BYTE *v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  int32x2_t v199;
  float32x4_t v200;
  uint64_t v201;
  int32x2_t *v202;
  _OWORD *v203;
  float32x4_t v204;
  int8x16_t v205;
  int32x2_t v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  BOOL v214;
  char v216;
  int v217;
  char v218;
  _BYTE *v219;
  _BYTE *v220;
  unsigned __int8 v221;
  _BYTE *v222;
  int v223;
  BOOL v224;
  void *v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  _BOOL4 v234;
  _QWORD *v235;
  int v236;
  int v237;
  void *v238;
  int v239;
  int v240;
  void (*v241)(uint64_t *, int *, uint64_t *, int *, signed int, int, int, int, int, signed int);
  uint64_t (*v242)(uint64_t, uint64_t, int, int, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  NSObject *v243;
  const char *v244;
  int v245;
  uint64_t (*v246)(uint64_t, uint64_t, uint64_t, uint64_t, int, int);
  uint64_t (*v247)(uint64_t, uint64_t, uint64_t, uint64_t, int, int);
  uint64_t v248;
  NSObject *v249;
  const char *v250;
  uint64_t (*v251)(uint64_t, uint64_t, int, int, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *);
  BOOL v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  uint64_t v263;
  float v264;
  unint64_t v265;
  float v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  float v270;
  float v271;
  float v272;
  double *v273;
  float v274;
  int v275;
  double v276;
  double v277;
  uint64_t v278;
  unint64_t v279;
  char **v280;
  char *v281;
  char *v282;
  uint64_t v283;
  int v284;
  int v285;
  int v286;
  char *v287;
  uint64_t v288;
  double v289;
  unint64_t v290;
  char **v291;
  char *v292;
  char *v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  char *v298;
  double v299;
  double v300;
  int v301;
  float v302;
  float v303;
  double v304;
  int v305;
  int v306;
  NSObject *v307;
  const char *v308;
  uint32_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  int v313;
  int v314;
  int v315;
  int8x8_t v316;
  _BOOL4 v317;
  int8x8_t v318;
  int v319;
  uint64_t (*v321)(uint64_t, uint64_t, int, int, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  __int128 v322;
  uint64_t (*v323)(uint64_t, uint64_t, int, int, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *);
  uint64_t (*v324)(uint64_t, uint64_t, uint64_t, uint64_t, int, int);
  NSObject *v325;
  const char *v326;
  _QWORD **v327;
  NSObject *v328;
  const char *v329;
  char v330;
  int v331;
  int v332;
  int v333;
  int v334;
  unint64_t v335;
  _QWORD *v336;
  uint64_t *v337;
  void *v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  int32x2_t v342;
  int v343;
  uint64_t v344;
  unint64_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  uint64_t v352;
  unint64_t v353;
  int v354;
  int v355;
  int v356;
  unint64_t v357;
  int v358;
  int *v359;
  CMTime *v360;
  int v361;
  int v362;
  int value;
  int v364;
  unsigned int v365;
  int v366;
  char v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  int v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  CMTime *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  int *v381;
  int v382;
  int v383;
  double *v384;
  double *v385;
  int *v386;
  int v387;
  int *v388;
  int v389;
  int v390;
  int v391;
  int v392;
  unsigned int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  uint64_t v398;
  unsigned int v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void **v407;
  uint64_t v408;
  int v409;
  int v410;
  uint64_t v411;
  _DWORD *v412;
  int v413;
  int v414;
  uint64_t v415;
  int v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  int *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  int v436;
  uint64_t v437;
  uint64_t (**v438)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  _DWORD *v444;
  uint64_t v445;
  int v446;
  int8x8_t v447;
  void **v448;
  uint64_t v449;
  int v450;
  int v451;
  void *v452;
  int8x8_t v453;
  __int128 v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  int v464;
  BOOL v465;
  int v466;
  BOOL v467;
  int v468;
  _BOOL8 v469;
  _DWORD *v470;
  _QWORD *v471;
  __CVBuffer *v472;
  uint64_t PixelFormatType;
  _QWORD *v474;
  __CVBuffer *v475;
  __IOSurface *IOSurface;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  void (**v480)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  CMTimeEpoch v481;
  const float *v482;
  int32x2_t v483;
  int32x4_t v484;
  int v485;
  uint64_t v486;
  unsigned int v487;
  unsigned int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unsigned int v492;
  int v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  uint64_t v503;
  signed int v504;
  unsigned int v505;
  int v506;
  void **v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  __int128 v513;
  int v514;
  uint64_t v515;
  void (*v516)(_QWORD *);
  uint64_t v517;
  _QWORD *v518;
  unsigned int v519;
  uint64_t v520;
  _BYTE *v521;
  int v522;
  uint64_t v523;
  int *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int *v529;
  unsigned int *v530;
  unsigned int *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  _DWORD *v536;
  unsigned int *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  _DWORD *v542;
  unsigned int *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  _DWORD *v548;
  unsigned int *v549;
  uint64_t v550;
  uint64_t v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  std::mutex *v555;
  uint64_t v556;
  uint64_t v557;
  CMTimeValue v558;
  unint64_t *v559;
  unint64_t v560;
  double v561;
  unsigned int v562;
  double v563;
  double v564;
  double v565;
  double v566;
  double v567;
  double v568;
  unsigned int v569;
  unsigned int v570;
  NSObject *v571;
  const char *v572;
  double v573;
  double *v574;
  double v575;
  double v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  int v584;
  int v585;
  BOOL v586;
  char v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  int v591;
  int v592;
  int v593;
  int i;
  int v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  void *context;
  int v602;
  int v603;
  int v604;
  uint64_t v605;
  char v606;
  int v607;
  size_t size;
  int sizea;
  int v610;
  _BYTE *v611;
  int v612;
  unsigned int v613;
  _BYTE *v614;
  _BYTE *v615;
  _BYTE *v616;
  int v617;
  int v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  _BYTE *v622;
  _QWORD *v623;
  double v624;
  int v625;
  unsigned int v626;
  uint64_t v627;
  int v628;
  int *v629;
  std::__shared_weak_count *v630;
  uint64_t v631;
  std::__shared_weak_count *v632;
  CMTime v633;
  CMTime v634;
  int v635;
  CMTime v636;
  CMTime __dst;
  __int128 v638;
  uint64_t v639;
  uint64_t v640;

  v640 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 584);
  sub_1B680F36C(&v629, *(_QWORD *)(v4 + 48));
  v5 = v629;
  if (v629 && *((_BYTE *)v629 + 111))
  {
    *(_BYTE *)(a1 + 3024) |= *((_BYTE *)v629 + 108);
    *(_BYTE *)(a1 + 3025) |= *((_BYTE *)v5 + 109);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 48);
  v7 = (std::mutex *)(v6 + 56);
  std::mutex::lock((std::mutex *)(v6 + 56));
  LOBYTE(v6) = *(_BYTE *)(v6 + 44);
  std::mutex::unlock(v7);
  v8 = *(_BYTE *)(a1 + 3025) | v6;
  *(_BYTE *)(a1 + 3025) = v8;
  if (v8)
  {
    if (*(_BYTE *)(a1 + 3026))
      *(_BYTE *)(a1 + 3026) = 0;
    goto LABEL_14;
  }
  if (!*(_DWORD *)(a1 + 644))
  {
LABEL_14:
    v9 = (_BYTE *)(a1 + 640);
    *(_BYTE *)(a1 + 640) = 0;
    *(float *)(a1 + 2720) = (float)*(char *)(v4 + 3289);
    goto LABEL_15;
  }
  if (*(_BYTE *)(v4 + 3237) || *(_BYTE *)(a1 + 3026))
  {
    *(_BYTE *)(a1 + 640) = 1;
    *(float *)(a1 + 2720) = (float)*(char *)(v4 + 3289);
  }
  else
  {
    v102 = *(char *)(v4 + 108 * *(int *)(a1 + 648) + 3813);
    switch(v102)
    {
      case 'L':
        v103 = 3;
        break;
      case 'R':
        v103 = 4;
        break;
      case 'P':
        v103 = 2;
        break;
      default:
        v182 = 4294954394;
        goto LABEL_314;
    }
    *(_BYTE *)(a1 + 640) = v103;
  }
  v9 = (_BYTE *)(a1 + 640);
  if (*(_BYTE *)(a1 + 3024) && !*(_QWORD *)sub_1B67CDA40(*(_QWORD *)(a1 + 584) + 12880, 2u))
    *v9 = 0;
LABEL_15:
  v10 = *(_QWORD *)(a1 + 608);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a1 + 644);
  v11 = *(_QWORD *)(a1 + 592);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
  v12 = *(_QWORD *)(a1 + 584);
  v13 = *(_QWORD *)(v12 + 13256);
  v14 = *(_DWORD *)(v12 + 3688);
  if (v14 != 1)
  {
    if (v14)
      goto LABEL_48;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 12688) + 198);
    goto LABEL_18;
  }
  v27 = *(char *)(v12 + 3334);
  if (v27 >= 1)
  {
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(v12 + 12896 + v28);
      if (v30)
        LODWORD(v30) = (*(unsigned __int8 *)(v30 + 36) >> 1) & 1;
      v29 += v30;
      v28 += 16;
    }
    while (v28 != 272);
    if (v29 < v27 || !*(_BYTE *)(a1 + 640))
    {
      *(_DWORD *)(v10 + 40) = 1;
LABEL_41:
      v10 = *(_QWORD *)(a1 + 608);
      if (*(_DWORD *)(v12 + 3688) != 1)
        goto LABEL_48;
      LOBYTE(v27) = *(_BYTE *)(v12 + 3334);
      goto LABEL_43;
    }
    v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 12688) + 2048) + 1320) - 1;
LABEL_18:
    v16 = *(_DWORD *)(v12 + 13280);
    v17 = (uint64_t *)sub_1B67CDA40(v12 + 12880, 1u);
    v18 = *v17;
    v19 = (std::__shared_weak_count *)v17[1];
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    if (!v18)
      goto LABEL_26;
    v22 = (double *)(v12 + 3280);
    if (v13)
      v22 = (double *)(v13 + 416);
    v23 = *v22;
    if ((float)((float)(1000 * v15) / v23) <= (float)v16 && (v24 = *(_QWORD *)(a1 + 584), !*(_BYTE *)(v24 + 320)))
    {
      v97 = v15 - *(char *)(v12 + 3333);
      v98 = __OFSUB__(v97, 1);
      v99 = v97 - 1;
      if ((v99 < 0) ^ v98 | (v99 == 0))
      {
        v100 = sub_1B67CDA40(v12 + 12880, 1u);
        v101 = *(_QWORD *)(a1 + 608);
        if (*v100)
          *(_DWORD *)(v101 + 40) = 0;
        else
          *(_DWORD *)(v101 + 40) = 1;
      }
      else
      {
        v108 = v16 / v99;
        v109 = *(_QWORD *)(a1 + 608);
        v110 = 1000 * *(_QWORD *)(v109 + 16) / *(int *)(v109 + 32);
        v111 = 1000 * *(_QWORD *)(v18 + 16);
        v112 = *(int *)(v18 + 32);
        v113 = *(int *)(v24 + 13284);
        v114 = v111 / v112;
        if (v110 - v114 + v113 <= v108)
        {
          *(_DWORD *)(v109 + 40) = 0;
        }
        else
        {
          *(_DWORD *)(v109 + 40) = 1;
          *(_DWORD *)(v24 + 13284) = v113 + v110 - (v114 + v108);
        }
      }
    }
    else
    {
LABEL_26:
      *(_DWORD *)(*(_QWORD *)(a1 + 608) + 40) = 1;
    }
    if (v19)
    {
      v25 = (unint64_t *)&v19->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_41;
  }
LABEL_43:
  v31 = *(_DWORD *)(v10 + 40);
  if ((_BYTE)v27)
  {
    if (v31 == 1)
    {
      v32 = 2;
      goto LABEL_49;
    }
  }
  else if (v31 == 1)
  {
    *(_DWORD *)(v10 + 40) = 0;
  }
LABEL_48:
  v32 = 1;
LABEL_49:
  *(_DWORD *)(v10 + 36) |= v32;
  v33 = *(_QWORD *)(a1 + 2712);
  if (!v33)
    goto LABEL_222;
  v34 = 6 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2000) - 48;
  v35 = *(_DWORD *)(a1 + 452);
  if (v35 != 0x80000000)
    *(_DWORD *)(v33 + 304) = v35 - v34;
  v36 = *(_DWORD *)(a1 + 460);
  if (v36 != 0x80000000)
    *(_DWORD *)(v33 + 308) = v36 - v34;
  v37 = *(_DWORD *)(a1 + 456);
  if (v37 == 0x80000000)
  {
    v38 = *(_DWORD *)(v33 + 312);
  }
  else
  {
    v38 = v37 - v34;
    *(_DWORD *)(v33 + 312) = v38;
  }
  v39 = *(_DWORD *)(v33 + 308);
  if (v38 != 0x80000000)
  {
    if (v39 == 0x80000000)
    {
      v214 = *(_DWORD *)(v33 + 280) < v38;
      v41 = 280;
      if (v214)
        v41 = 312;
      v42 = *(_DWORD *)(v33 + v41);
      *(_DWORD *)(v33 + 280) = v42;
      v43 = v42 + 3;
      if (v43 <= *(_DWORD *)(v33 + 284))
        v43 = *(_DWORD *)(v33 + 284);
      *(_DWORD *)(v33 + 284) = v43;
      goto LABEL_77;
    }
    *(_DWORD *)(v33 + 284) = v39;
    v44 = v39 - 3;
    if (*(_DWORD *)(v33 + 280) < v44)
      v44 = *(_DWORD *)(v33 + 280);
    *(_DWORD *)(v33 + 280) = v44;
    v214 = v44 < v38;
    v45 = 280;
    if (v214)
      v45 = 312;
    v40 = *(_DWORD *)(v33 + v45);
LABEL_76:
    *(_DWORD *)(v33 + 280) = v40;
    goto LABEL_77;
  }
  if (v39 != 0x80000000)
  {
    *(_DWORD *)(v33 + 284) = v39;
    v40 = v39 - 3;
    if (*(_DWORD *)(v33 + 280) < v39 - 3)
      v40 = *(_DWORD *)(v33 + 280);
    goto LABEL_76;
  }
  if (*(int *)(*(_QWORD *)(v33 + 392) + 560) >= 2)
  {
    *(_QWORD *)(v33 + 280) = 0x2D00000025;
    if (!*(_DWORD *)(v33 + 916))
      goto LABEL_77;
    v40 = 40;
    goto LABEL_76;
  }
  v94 = *(_QWORD *)(a1 + 3008);
  if (*(_BYTE *)(v94 + 111))
    v95 = (*(_DWORD *)(v33 + 320) & 0xFFFFFFFD) == 1;
  else
    v95 = 0;
  if (!(****(unsigned int (*****)(_QWORD))(v33 + 840))(**(_QWORD **)(v33 + 840)))
    goto LABEL_530;
  v104 = *(_QWORD *)(v33 + 392);
  v105 = *(unsigned __int16 *)(v104 + 86);
  v106 = *(unsigned __int16 *)(v104 + 88);
  if (v105 != v106)
  {
    if ((__int16)v106 * (__int16)v105 <= 230400 && *(double *)(v104 + 96) <= 30.0)
    {
      v319 = *(__int16 *)(v33 + 8 * *(int *)(v33 + 16) + 24);
      if (v319 < 449)
      {
        if (v319 < 321)
        {
          if (v319 < 193)
            v107 = (int8x8_t)0x2400000022;
          else
            v107 = (int8x8_t)0x2300000021;
        }
        else
        {
          v107 = (int8x8_t)0x2200000020;
        }
      }
      else
      {
        v107 = (int8x8_t)0x230000001ELL;
      }
      goto LABEL_529;
    }
    if (*(_DWORD *)(v104 + 504))
    {
      v248 = v33 + 8 * *(int *)(v33 + 16);
      if (*(__int16 *)(v248 + 24) >= 321 && *(float *)(v248 + 20) > 14.5)
      {
        v107 = (int8x8_t)0x210000001ALL;
        goto LABEL_529;
      }
LABEL_361:
      v107 = (int8x8_t)0x210000001CLL;
      goto LABEL_529;
    }
    v316 = (int8x8_t)0x2400000020;
    *(_QWORD *)(v33 + 280) = 0x2400000020;
    v317 = sub_1B6859D48(v33);
    v318 = (int8x8_t)0x2200000018;
LABEL_525:
    if (v317)
      v340 = -1;
    else
      v340 = 0;
    v107 = vbsl_s8((int8x8_t)vdup_n_s32(v340), v318, v316);
    goto LABEL_529;
  }
  if (!*(_DWORD *)(v104 + 504))
  {
    if (*(double *)(v94 + 136) > 1600000.0)
    {
      v107 = (int8x8_t)0x2400000020;
      goto LABEL_529;
    }
    v316 = (int8x8_t)0x2800000023;
    *(_QWORD *)(v33 + 280) = 0x2800000023;
    v317 = sub_1B6859D48(v33);
    v318 = (int8x8_t)0x2400000018;
    goto LABEL_525;
  }
  if ((__int16)v105 <= 96)
    goto LABEL_361;
  v107 = (int8x8_t)0x2800000023;
LABEL_529:
  *(int8x8_t *)(v33 + 280) = v107;
LABEL_530:
  v341 = *(_DWORD *)(v33 + 320);
  switch(v341)
  {
    case 3:
      goto LABEL_534;
    case 2:
      goto LABEL_538;
    case 1:
LABEL_534:
      if ((****(unsigned int (*****)(_QWORD))(v33 + 840))(**(_QWORD **)(v33 + 840))
        && !*(_QWORD *)(v33 + 344))
      {
        break;
      }
      if (*(_BYTE *)(v33 + 324))
      {
        v342 = qword_1B6931B78[6 * *(int *)(v33 + 340) + *(int *)(v33 + 336)];
LABEL_539:
        *(int32x2_t *)(v33 + 280) = v342;
        break;
      }
      if (!v95)
      {
        v342 = (int32x2_t)0x2B00000026;
        goto LABEL_539;
      }
LABEL_538:
      v342 = (int32x2_t)0x2D00000028;
      goto LABEL_539;
  }
  v343 = *(_DWORD *)(*(_QWORD *)(v33 + 392) + 64);
  if (v343 == 43)
  {
    v344 = 0x220000001ELL;
  }
  else
  {
    if (v343 != 39)
      goto LABEL_77;
    v344 = 0x2600000021;
  }
  *(_QWORD *)(v33 + 280) = v344;
LABEL_77:
  v46 = *(_QWORD *)(v33 + 392);
  if (*(char *)(v46 + 107) >= 1)
    *(_DWORD *)(v33 + 280) = *(unsigned __int8 *)(v46 + 107);
  v47 = *(char *)(v46 + 108);
  if (v47 >= 1)
    *(_DWORD *)(v33 + 284) = v47;
  if (*(int *)(v4 + 3744) <= 1)
    goto LABEL_222;
  v48 = *(_QWORD *)(a1 + 2712);
  v49 = *(_QWORD *)(a1 + 3008);
  if (v48)
  {
    v50 = *(unsigned int *)(v49 + 76);
    v51 = -1000.0;
    if (v50 <= 6)
    {
      v52 = *(int **)(*(_QWORD *)(v48 + 8 * v50 + 848) + 8);
      if (v52)
        v51 = (double)(1000 * *v52);
    }
    v53 = (int)(v51 / *(double *)(v49 + 120 * (int)v50 + 136));
  }
  else
  {
    v53 = -1;
  }
  *(_DWORD *)(v49 + 80) = v53;
  sub_1B680F4BC(&v631, *(_QWORD *)(*(_QWORD *)(v48 + 840) + 48), 0);
  if (v631)
    v54 = *(_DWORD *)(v631 + 152);
  else
    v54 = 0;
  if (*(_DWORD *)(v48 + 916))
  {
    if (*(_DWORD *)(v49 + 88))
      goto LABEL_154;
  }
  else
  {
    v55 = *(_DWORD *)(v49 + 76);
    v56 = *(_DWORD *)(v49 + 80) / 1000 + v54 / -1000;
    if (v56 >= 3)
      v56 = 3;
    v57 = v56 & ~(v56 >> 31);
    *(_DWORD *)(v49 + 88) = v57;
    v58 = (double *)(v49 + 976);
    v59 = v49 + 120 * v55 + 136;
    if (v55 >= 7)
      v59 = 0;
    if (v55 != 9)
      v58 = (double *)v59;
    v60 = *v58;
    v61 = v58[1];
    v62 = *(_QWORD *)(v48 + 536);
    v63 = 0.0;
    if (*(_QWORD *)(v48 + 544) != v62)
    {
      v64 = *(_QWORD *)(v48 + 560);
      v65 = (char **)(v62 + 8 * (v64 >> 10));
      v66 = *v65;
      v67 = &(*v65)[4 * (v64 & 0x3FF)];
      v68 = *(_QWORD *)(v62 + (((*(_QWORD *)(v48 + 568) + v64) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*(_QWORD *)(v48 + 568) + v64) & 0x3FF);
      if (v67 != (char *)v68)
      {
        v69 = 0;
        do
        {
          v71 = *(_DWORD *)v67;
          v67 += 4;
          v70 = v71;
          if (v67 - v66 == 4096)
          {
            v72 = v65[1];
            ++v65;
            v66 = v72;
            v67 = v72;
          }
          v69 += v70;
        }
        while (v67 != (char *)v68);
        v63 = (double)v69;
      }
    }
    v73 = *(_QWORD *)(v48 + 488);
    v74 = 1.0;
    if (*(_QWORD *)(v48 + 496) != v73)
    {
      v75 = *(_QWORD *)(v48 + 512);
      v76 = (char **)(v73 + 8 * (v75 >> 10));
      v77 = *v76;
      v78 = &(*v76)[4 * (v75 & 0x3FF)];
      v79 = *(_QWORD *)(v73 + (((*(_QWORD *)(v48 + 520) + v75) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*(_QWORD *)(v48 + 520) + v75) & 0x3FF);
      if (v78 != (char *)v79)
      {
        v80 = 0;
        do
        {
          v82 = *(_DWORD *)v78;
          v78 += 4;
          v81 = v82;
          if (v78 - v77 == 4096)
          {
            v83 = v76[1];
            ++v76;
            v77 = v83;
            v78 = v83;
          }
          v80 += v81;
        }
        while (v78 != (char *)v79);
        if (v80 >= 1)
          v74 = v63 / (double)v80 + 1.0;
      }
    }
    v84 = *(_DWORD *)(v49 + 36);
    v85 = *(double *)(v49 + 56);
    v86 = *(_QWORD *)(v48 + 8 * (int)v55 + 848);
    if (*(_QWORD *)(v86 + 376) < 3uLL)
    {
      v96 = 0.0;
    }
    else
    {
      v614 = v9;
      v620 = v4;
      __dst.value = v86 + 384;
      LOBYTE(__dst.timescale) = 1;
      std::mutex::lock((std::mutex *)(v86 + 384));
      v624 = v61;
      v87 = v60;
      v88 = a2;
      v89 = *(_QWORD *)(v86 + 368);
      if (v89 == v86 + 360)
      {
        v90 = 0;
        v92 = 0.0;
      }
      else
      {
        v90 = 0;
        v91 = *(_QWORD *)(*(_QWORD *)(v86 + 360) + 16);
        v92 = 0.0;
        do
        {
          if (v91 - *(_QWORD *)(v89 + 16) < *(_DWORD *)(v89 + 24) / 20)
          {
            ++v90;
            v93 = (double)*(unint64_t *)(v89 + 32);
            v92 = v92 + v93 * (exp2((*(float *)(v89 + 40) + -12.0) / 6.0) * 0.850000024);
          }
          v89 = *(_QWORD *)(v89 + 8);
        }
        while (v89 != v86 + 360);
      }
      sub_1B678B174((uint64_t)&__dst);
      v115 = (float)v90;
      a2 = v88;
      v4 = v620;
      if (LOBYTE(__dst.timescale))
        std::mutex::unlock((std::mutex *)__dst.value);
      v57 = *(_DWORD *)(v49 + 88);
      v96 = v92 / v115;
      v9 = v614;
      v60 = v87;
      v61 = v624;
    }
    v116 = v60 / v61;
    v117 = v116;
    v118 = v85 * 0.5 / (v74 + 0.5);
    if (v118 >= (double)v84)
      v118 = (double)v84;
    v119 = fmax((v117 - v118) / v74, 0.0);
    v120 = (int)(v96 / (exp2(((double)*(int *)(v48 + 284) + -12.0) / 6.0) * 0.850000024 * v119) + -1.0);
    if (v120 >= 3)
      v120 = 3;
    if (v120 <= v57)
      v120 = v57;
    v121 = v120 & ~(v120 >> 31);
    *(_DWORD *)(v49 + 88) = v121;
    if (v121)
      goto LABEL_154;
  }
  if (*(_BYTE *)(a1 + 640)
    && *(_DWORD *)(v48 + 920 + 4 * *(int *)(*(_QWORD *)(v48 + 392) + 560) - 4) >= *(_DWORD *)(v48
                                                                                                + 920
                                                                                                + 4
                                                                                                * *(int *)(v49 + 76)))
  {
    v122 = *(_DWORD *)(v49 + 72);
    goto LABEL_157;
  }
LABEL_154:
  v122 = *(_DWORD *)(v49 + 72);
  if (v122 >= 1)
  {
    *(_DWORD *)(v49 + 72) = 0;
    *(_QWORD *)(v48 + 360) = 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 608) + 12) = 0;
    goto LABEL_158;
  }
LABEL_157:
  *(_DWORD *)(*(_QWORD *)(a1 + 608) + 12) = v122;
  if (v122)
    goto LABEL_209;
LABEL_158:
  if (*(_DWORD *)(v48 + 320) == 4)
    goto LABEL_209;
  v621 = v4;
  v123 = *(_QWORD *)(a1 + 3008);
  v625 = *(_DWORD *)(v48 + 16);
  v124 = *(_QWORD *)(v48 + 392);
  v125 = *(unsigned int *)(v124 + 560);
  if ((int)v125 >= 1)
    memcpy(&__dst, (const void *)(v48 + 920), 4 * v125);
  if (!*(_DWORD *)(a1 + 644) || *(_BYTE *)(a1 + 3025) && !*(_DWORD *)(v48 + 424))
  {
    *(_DWORD *)(v48 + 4 * *(int *)(v123 + 76) + 920) = 0;
    v135 = *(unsigned int *)(v123 + 76);
    if ((int)v135 >= 1)
    {
      v136 = (double *)(v123 + 136 + 120 * v135);
      if (v135 >= 7)
        v136 = 0;
      if ((_DWORD)v135 == 9)
        v136 = (double *)(v123 + 976);
      v137 = *v136;
      do
      {
        v138 = (v135 - 1);
        v139 = v123 + 136 + 120 * v138;
        if (v135 >= 8)
          v139 = 0;
        if (v138 == 9)
          v140 = (double *)(v123 + 976);
        else
          v140 = (double *)v139;
        v141 = *v140;
        v142 = *(_DWORD *)(v48 + 920 + 4 * v135);
        if (v141 != v137)
          ++v142;
        v137 = v141;
        v214 = v135-- > 1;
        *(_DWORD *)(v48 + 4 * v135 + 920) = v142;
      }
      while (v214);
    }
    if (!*(_BYTE *)(a1 + 416))
    {
      v143 = *(double *)(*(_QWORD *)(v48 + 840) + 128);
      v144 = *(double *)(v48 + 952);
      do
      {
        if (v143 <= v144)
          break;
        if (*(int *)(v124 + 560) >= 1)
        {
          v145 = 0;
          do
            ++*(_DWORD *)(v48 + 920 + 4 * v145++);
          while (v145 < *(int *)(v124 + 560));
        }
        v143 = v143 * 0.5;
      }
      while (v143 > v144);
    }
    goto LABEL_196;
  }
  if (*(_BYTE *)(a1 + 416))
  {
LABEL_196:
    v146 = 0;
    goto LABEL_197;
  }
  v606 = a2;
  memset(&v634, 0, sizeof(v634));
  v635 = 0;
  v126 = *(int *)(v123 + 76);
  if (*(_DWORD *)(v48 + 920 + 4 * (int)v125 - 4) < *(_DWORD *)(v48 + 920 + 4 * v126))
  {
    sub_1B680F4BC(&v636, *(_QWORD *)(*(_QWORD *)(a1 + 584) + 48), 0);
    if (v636.value)
    {
      v128 = *(_DWORD *)(v123 + 76);
      v129 = (unint64_t *)(v123 + 976);
      v130 = v123 + 120 * v128 + 136;
      if (v128 >= 7)
        v130 = 0;
      if (v128 != 9)
        v129 = (unint64_t *)v130;
      v131 = *(unsigned int *)(*(_QWORD *)(v48 + 392) + 560);
      while ((int)v131 >= 1)
      {
        v132 = v131 - 1;
        v127.n128_u64[0] = *v129;
        v133 = *(double *)(v636.value + 200 + 8 * v131--);
        if (*(double *)v129 >= v133)
        {
          v134 = *(_DWORD *)(v48 + 920 + 4 * v132)
               - *(_DWORD *)(v48 + 920 + 4 * *(int *)(*(_QWORD *)(v48 + 392) + 560) - 4);
          goto LABEL_443;
        }
      }
    }
    v134 = 0;
LABEL_443:
    v310 = *(std::__shared_weak_count **)&v636.timescale;
    if (*(_QWORD *)&v636.timescale)
    {
      v311 = (unint64_t *)(*(_QWORD *)&v636.timescale + 8);
      do
        v312 = __ldaxr(v311);
      while (__stlxr(v312 - 1, v311));
      if (!v312)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v310->__on_zero_shared)(v310, v127);
        std::__shared_weak_count::__release_weak(v310);
      }
    }
    goto LABEL_448;
  }
  if ((v126 & 0x80000000) != 0)
    goto LABEL_432;
  v253 = *(unsigned int *)(v123 + 76);
  v615 = v9;
  do
  {
    v254 = *(_QWORD *)(v48 + 8 * v253 + 848);
    v255 = *(_QWORD *)(v254 + 376);
    if (!v255)
      goto LABEL_429;
    v633.value = v254 + 384;
    LOBYTE(v633.timescale) = 1;
    std::mutex::lock((std::mutex *)(v254 + 384));
    v256 = v254 + 360;
    v257 = *(_QWORD *)(v254 + 368);
    if (v257 == v254 + 360)
    {
      v262 = 0.0;
      v259 = 3.4028e38;
      v261 = 0.0;
      v260 = 0.0;
      v258 = 0.0;
    }
    else
    {
      v258 = 0.0;
      v259 = 3.4028e38;
      v260 = 0.0;
      v261 = 0.0;
      v262 = 0.0;
      v263 = *(_QWORD *)(v254 + 368);
      do
      {
        v264 = *(float *)(v263 + 40);
        v262 = v262 + v264;
        v265 = *(_QWORD *)(v263 + 32);
        v260 = v260 + (float)v265;
        v266 = exp2((v264 + -12.0) / 6.0) * 0.850000024 * (double)v265;
        v261 = v261 + v266;
        if (v258 < v266)
          v258 = v266;
        if (v259 > v266)
          v259 = v266;
        v263 = *(_QWORD *)(v263 + 8);
      }
      while (v263 != v256);
    }
    v267 = *(_QWORD *)(*(_QWORD *)(a1 + 592) + 16);
    v268 = *(_QWORD *)(v257 + 16);
    v269 = *(_DWORD *)(v257 + 24);
    sub_1B678B174((uint64_t)&v633);
    v270 = v260 / (float)((float)(v267 - v268) / (float)v269);
    *((float *)&v636.value + v253) = v270;
    v271 = (float)v255;
    if (v255 < 4)
      v272 = v261 / v271;
    else
      v272 = (float)((float)(v261 - v258) - v259) / (float)(v255 - 2);
    v9 = v615;
    if (LOBYTE(v633.timescale))
    {
      std::mutex::unlock((std::mutex *)v633.value);
      v271 = (float)v255;
    }
    v273 = (double *)(v123 + 136 + 120 * v253);
    if (v253 >= 7)
      v273 = 0;
    if (v253 == 9)
      v273 = (double *)(v123 + 976);
    if (v253 == *(_DWORD *)(v123 + 76))
    {
      v274 = v270 * 1.25;
    }
    else
    {
      v275 = *(_DWORD *)(v48 + 920 + 4 * v253) - *(_DWORD *)(v48 + 920 + 4 * (v253 + 1));
      if (v275 < 1)
        v274 = 3.4028e38;
      else
        v274 = v270 + (float)((float)(*((float *)&v636.value + v253 + 1) - v270) / (float)v275);
    }
    v276 = *v273;
    v277 = v273[1];
    v278 = *(_QWORD *)(v48 + 536);
    if (*(_QWORD *)(v48 + 544) == v278
      || (v279 = *(_QWORD *)(v48 + 560),
          v280 = (char **)(v278 + 8 * (v279 >> 10)),
          v281 = *v280,
          v282 = &(*v280)[4 * (v279 & 0x3FF)],
          v283 = *(_QWORD *)(v278 + (((*(_QWORD *)(v48 + 568) + v279) >> 7) & 0x1FFFFFFFFFFFFF8))
               + 4 * ((*(_QWORD *)(v48 + 568) + v279) & 0x3FF),
          v282 == (char *)v283))
    {
      v284 = 0;
    }
    else
    {
      v284 = 0;
      do
      {
        v286 = *(_DWORD *)v282;
        v282 += 4;
        v285 = v286;
        if (v282 - v281 == 4096)
        {
          v287 = v280[1];
          ++v280;
          v281 = v287;
          v282 = v287;
        }
        v284 += v285;
      }
      while (v282 != (char *)v283);
    }
    v288 = *(_QWORD *)(v48 + 488);
    v289 = 0.0;
    if (*(_QWORD *)(v48 + 496) != v288)
    {
      v290 = *(_QWORD *)(v48 + 512);
      v291 = (char **)(v288 + 8 * (v290 >> 10));
      v292 = *v291;
      v293 = &(*v291)[4 * (v290 & 0x3FF)];
      v294 = *(_QWORD *)(v288 + (((*(_QWORD *)(v48 + 520) + v290) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((*(_QWORD *)(v48 + 520) + v290) & 0x3FF);
      if (v293 != (char *)v294)
      {
        v295 = 0;
        do
        {
          v297 = *(_DWORD *)v293;
          v293 += 4;
          v296 = v297;
          if (v293 - v292 == 4096)
          {
            v298 = v291[1];
            ++v291;
            v292 = v298;
            v293 = v298;
          }
          v295 += v296;
        }
        while (v293 != (char *)v294);
        if (v295 >= 1)
          v289 = (double)v284 / (double)v295;
      }
    }
    v299 = (double)*(int *)(v123 + 36);
    v300 = v289 + 1.0;
    if (*(double *)(v123 + 56) * 0.5 / (v300 + 0.5) < v299)
      v299 = *(double *)(v123 + 56) * 0.5 / (v300 + 0.5);
    if (v253 != *(_DWORD *)(v48 + 912) && !*(_DWORD *)(v48 + 916))
    {
      if (v276 * 1.05 >= v270)
      {
        if (v276 < v274)
          goto LABEL_429;
LABEL_427:
        v301 = -1;
      }
      else
      {
LABEL_425:
        v301 = 1;
      }
LABEL_428:
      *((_DWORD *)&v634.value + v253) = v301;
      goto LABEL_429;
    }
    v301 = *(_DWORD *)(v123 + 88);
    if (v301)
      goto LABEL_428;
    v302 = v276 / v277;
    v303 = fmax((v302 - v299) / v300, 0.0);
    v304 = (float)(v262 / v271);
    v305 = *(_DWORD *)(v48 + 284);
    if ((float)v305 + -1.0 <= v304 && exp2(((double)v305 + -12.0) / 6.0) * 0.850000024 * v303 <= v272)
      goto LABEL_425;
    v306 = *(_DWORD *)(v48 + 280);
    if ((float)v306 + 1.0 >= v304 && exp2(((double)v306 + -12.0) / 6.0) * 0.850000024 * v303 >= v272)
      goto LABEL_427;
LABEL_429:
    v214 = (uint64_t)v253-- <= 0;
  }
  while (!v214);
  v126 = *(int *)(v123 + 76);
LABEL_432:
  v134 = *((_DWORD *)&v634.value + v126);
LABEL_448:
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(v48 + 840) + 16))(**(_QWORD **)(v48 + 840)))
  {
    v313 = *(char *)(v48 + 761);
    if ((v313 & 0x80000000) == 0)
    {
      v314 = *(char *)(v48 + 762);
      if ((v314 & 0x80000000) == 0)
      {
        v315 = *(_DWORD *)(v48 + 16);
        if (v315 >= v314)
        {
          if (v315 > v314)
            v134 = -*(char *)(v48 + 763);
        }
        else
        {
          v134 = *(char *)(v48 + 763);
        }
      }
    }
    if (v134)
    {
      if (v134 < 1)
        v346 = -1;
      else
        v346 = 1;
      v347 = *(_DWORD *)(v48 + 16);
      v348 = -v134;
      do
      {
        sub_1B68579F4((_QWORD *)v48, v347 + v346);
        v349 = *(_DWORD *)(v48 + 16);
        if (v349 != v347
          && *(float *)(v48 + 20 + 8 * v349) == *(float *)(v48 + 20 + 8 * v347)
          && (*(unsigned __int16 *)(v48 + 20 + 8 * v349 + 4) != *(unsigned __int16 *)(v48 + 20 + 8 * v347 + 4)
           || *(unsigned __int16 *)(v48 + 20 + 8 * v349 + 6) != *(unsigned __int16 *)(v48 + 20 + 8 * v347 + 6)))
        {
          v134 -= v346;
        }
        v347 = *(_DWORD *)(v48 + 16);
        v348 += v346;
      }
      while (v348);
      LOBYTE(v313) = *(_BYTE *)(v48 + 761);
    }
    if ((v313 & 0x80) == 0)
    {
      v350 = *(char *)(v48 + 762);
      if ((v350 & 0x80000000) == 0
        && (*(unsigned __int8 *)(v48 + 762) > v313 && *(_DWORD *)(v48 + 16) >= v350
         || *(unsigned __int8 *)(v48 + 762) < v313 && *(_DWORD *)(v48 + 16) <= v350))
      {
        *(_BYTE *)(v48 + 761) = v350;
        *(_BYTE *)(v48 + 762) = v313;
      }
    }
  }
  v124 = *(_QWORD *)(v48 + 392);
  v351 = *(_DWORD *)(v48 + 920 + 4 * *(int *)(v124 + 560) - 4);
  v352 = *(int *)(v123 + 76);
  v353 = *(unsigned int *)(v123 + 76);
  v354 = *(_DWORD *)(v48 + 920 + 4 * v352);
  if (v351 >= v354)
    v355 = v134;
  else
    v355 = v351 + v134 - v354;
  *((_DWORD *)&v634.value + v352) = v355;
  if (*(_DWORD *)(v48 + 916))
  {
    a2 = v606;
    v356 = 0;
    if ((v353 & 0x80000000) == 0)
    {
      v357 = v353 + 1;
      v358 = -(int)v353;
      v359 = (int *)(v48 + 920);
      v360 = &v634;
      do
      {
        v362 = *v359++;
        v361 = v362;
        value = v360->value;
        v360 = (CMTime *)((char *)v360 + 4);
        v364 = v358 + v361 + value;
        if (v364 > v356)
          v356 = v364;
        ++v358;
        --v357;
      }
      while (v357);
    }
    v365 = *(_DWORD *)(v48 + 424);
    if (v365)
    {
      v366 = -1;
      while (v365 > 1 << ++v366 && v365 >= 2 << v366)
        ;
      if (v356 >= v366 - (int)v353)
        v356 = v366 - v353;
    }
    if ((v353 & 0x80000000) == 0)
    {
      v368 = 0;
      v369 = 4 * v353;
      v370 = v356 - v353;
      v371 = v48 + 920;
      do
      {
        v372 = *(_DWORD *)(v371 + v369);
        v373 = v370 + *(_DWORD *)(v123 + 76);
        *(_DWORD *)(v371 + v369) = v373;
        v368 |= v373 != v372;
        v369 -= 4;
        ++v370;
      }
      while (v369 != -4);
      goto LABEL_624;
    }
LABEL_623:
    v368 = 0;
    goto LABEL_624;
  }
  a2 = v606;
  if ((v353 & 0x80000000) != 0)
    goto LABEL_623;
  v374 = 0;
  v368 = 0;
  v375 = 4 * v353;
  v376 = v123 + 120 * v353 + 256;
  v377 = &v634;
  v378 = v48;
  v379 = v353;
  do
  {
    v380 = v378 + v375;
    v381 = (int *)(v380 + 920);
    v382 = *(_DWORD *)(v378 + v375 + 920);
    v383 = *((_DWORD *)&v377->value + v353) + v382;
    *(_DWORD *)(v380 + 920) = v383;
    if ((uint64_t)v379 < *(int *)(v123 + 76))
    {
      v384 = (double *)(v376 - 120);
      if (v379 >= 7)
        v384 = 0;
      if (4 * v353 - 36 == v374)
        v384 = (double *)(v123 + 976);
      if (v379 >= 6)
        v385 = 0;
      else
        v385 = (double *)v376;
      if (4 * v353 - 32 == v374)
        v385 = (double *)(v123 + 976);
      v386 = (int *)(v380 + 924);
      v387 = *(_DWORD *)(v380 + 924);
      if (v383 >= v387)
        v388 = v381;
      else
        v388 = v386;
      v383 = *v388;
      if (*v384 == *v385)
        v383 = v387;
    }
    v377 = (CMTime *)((char *)v377 - 4);
    if (v383 >= 6)
      v383 = 6;
    v389 = v383 & ~(v383 >> 31);
    *v381 = v389;
    v368 |= v382 != v389;
    v378 -= 4;
    v376 -= 120;
    v374 += 4;
    v214 = (uint64_t)v379-- <= 0;
  }
  while (!v214);
LABEL_624:
  v146 = v368 & 1;
LABEL_197:
  v147 = *(int *)(v124 + 560);
  LODWORD(v148) = *(_DWORD *)(v123 + 76);
  if ((int)v147 - 1 > (int)v148)
  {
    v149 = v48 + 916;
    do
    {
      v150 = *(_DWORD *)(v149 + 4 * v147);
      v151 = *(_DWORD *)(v48 + 4 * (int)v148 + 920);
      *(_DWORD *)(v149 + 4 * v147) = v151;
      v146 |= v150 != v151;
      v148 = *(int *)(v123 + 76);
      v152 = v147 - 2;
      --v147;
    }
    while (v152 > v148);
  }
  if ((v146 & 1) != 0 || v625 != *(_DWORD *)(v48 + 16))
    *(_QWORD *)(v48 + 360) = 1;
  v4 = v621;
  if (*(int *)(v124 + 560) >= 1)
  {
    v153 = 0;
    v154 = v48 + 848;
    do
    {
      if (v625 != *(_DWORD *)(v48 + 16) || *((_DWORD *)&__dst.value + v153) != *(_DWORD *)(v154 + 4 * v153 + 72))
      {
        sub_1B677A398((_QWORD *)(*(_QWORD *)(v154 + 8 * v153) + 360));
        v124 = *(_QWORD *)(v48 + 392);
      }
      ++v153;
    }
    while (v153 < *(int *)(v124 + 560));
  }
LABEL_209:
  v155 = *(unsigned int *)(*(_QWORD *)(v48 + 392) + 560);
  if ((int)v155 >= 1)
  {
    v156 = 0;
    v157 = v49 + 976;
    v159 = *(double *)v49;
    v158 = v49 + 136;
    v160 = v159;
    do
    {
      if (v156 >= 7)
        v161 = 0;
      else
        v161 = v158;
      if (v156 == 9)
        v161 = v157;
      *(double *)(v161 + 8) = v160 / (double)(1 << *(_DWORD *)(v48 + 920 + 4 * v156++));
      v158 += 120;
    }
    while (v155 != v156);
  }
  v162 = v632;
  if (v632)
  {
    v163 = (unint64_t *)&v632->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
LABEL_222:
  v165 = *v9;
  if (*v9)
  {
    v166 = v9;
    v167 = *(_DWORD *)(a1 + 644);
    v168 = *(_QWORD *)(a1 + 584);
    v169 = *(_DWORD *)(v168 + 13248);
    v170 = *(_QWORD *)(v168 + 48);
    std::mutex::lock((std::mutex *)(v170 + 56));
    v171 = *(_DWORD *)(v170 + 36);
    std::mutex::unlock((std::mutex *)(v170 + 56));
    v165 = v167 - v169 - v171;
    v9 = v166;
  }
  v172 = *(_DWORD *)(a1 + 728);
  v173 = *(_DWORD *)(a1 + 732);
  if (v173 > v172)
  {
    v174 = v173 - v172;
    v175 = (unsigned __int8 *)(v4 + 108 * v172 + 3814);
    while (1)
    {
      v176 = *v175;
      v175 += 108;
      if (v165 == v176)
        break;
      ++v172;
      if (!--v174)
        goto LABEL_230;
    }
    *(_DWORD *)(a1 + 648) = v172;
  }
LABEL_230:
  v177 = *v9;
  if ((v177 - 2) <= 2)
  {
    v178 = v4 + 108 * *(int *)(a1 + 648);
    v179 = *(char *)(v178 + 3815);
    *(float *)(a1 + 2720) = (float)(v179 + *(char *)(v4 + 3289));
    *(_DWORD *)(a1 + 652) = v179;
    *(_DWORD *)(a1 + 656) = *(unsigned __int8 *)(v178 + 3817);
  }
  v180 = *(_QWORD *)(a1 + 608);
  if (!v180)
  {
    v182 = 4294954392;
    goto LABEL_314;
  }
  *(_DWORD *)(v180 + 680) = v165;
  if (v177)
    v181 = *(_BYTE *)(a1 + 3024) != 0;
  else
    v181 = 1;
  *(_BYTE *)(v180 + 44) = v181;
  if (*(_BYTE *)(v4 + 3784))
  {
    *(_DWORD *)(v180 + 1224) = 0;
    *(_QWORD *)(v180 + 1216) = 0;
  }
  v183 = *(_QWORD *)(a1 + 584);
  if (*(double *)(v183 + 136) == 0.5)
  {
    v184 = *(_QWORD *)(a1 + 608);
    if ((*(_DWORD *)(v184 + 680) & 0x80000001) == 1)
      *(_DWORD *)(v184 + 36) = 0;
  }
  v185 = operator new(0x188uLL);
  v185[1] = 0;
  v185[2] = 0;
  *v185 = &off_1E6A15AD8;
  __dst.value = sub_1B67CD164((uint64_t)(v185 + 3), v183 + 12880);
  *(_QWORD *)&__dst.timescale = v185;
  sub_1B67C49BC(a1 + 744, (__int128 *)&__dst.value);
  v186 = *(std::__shared_weak_count **)&__dst.timescale;
  if (*(_QWORD *)&__dst.timescale)
  {
    v187 = (unint64_t *)(*(_QWORD *)&__dst.timescale + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = *(_QWORD *)(a1 + 584);
  v190 = *(_DWORD *)(v189 + 1000);
  v191 = *(_QWORD *)(a1 + 40);
  v192 = *(_DWORD *)(v191 + 176);
  *(_DWORD *)(a1 + 784) = v192;
  v193 = *(_DWORD *)(v191 + 180);
  *(_DWORD *)(a1 + 788) = v193;
  *(_BYTE *)(a1 + 781) = 0;
  *(_QWORD *)(a1 + 2480) = 0;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_QWORD *)(a1 + 2504) = 0;
  *(_QWORD *)(a1 + 852) = 0x100000033;
  v194 = *(unsigned __int8 *)(v191 + 2000);
  *(_DWORD *)(a1 + 792) = v194;
  v195 = *(_QWORD *)(a1 + 1072);
  if (v195)
  {
    v196 = *(unsigned __int8 *)(v189 + 3535);
    if (*(_BYTE *)(v189 + 3535))
    {
      v197 = *(_DWORD *)(a1 + 2744);
      v196 = v197 >= 5 ? 5 : *(_DWORD *)(a1 + 2744);
      *(_DWORD *)(a1 + 2524) = v196;
      if (v197 >= 1)
      {
        v198 = v195 + 8 * *(int *)(v195 + 16);
        v199.i32[0] = *(__int16 *)(v198 + 24);
        v199.i32[1] = *(__int16 *)(v198 + 26);
        *(float32x2_t *)v200.f32 = vcvt_f32_s32(v199);
        v200.i64[1] = v200.i64[0];
        if (v196 <= 1)
          v201 = 1;
        else
          v201 = v196;
        v202 = (int32x2_t *)(a1 + 2616);
        v203 = (_OWORD *)(a1 + 2752);
        do
        {
          v204 = *(float32x4_t *)v203;
          v203 = (_OWORD *)((char *)v203 + 28);
          v205 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v204, v200));
          *(int8x16_t *)v202[-11].i8 = v205;
          v206 = (int32x2_t)vextq_s8(v205, v205, 8uLL).u64[0];
          v202[-1] = vmax_s32(vsub_s32(*(int32x2_t *)v205.i8, vcvt_s32_f32(vmul_f32(vmul_f32(vcvt_f32_s32(v206), 0), (float32x2_t)0x3F0000003F000000))), 0);
          *v202 = v206;
          v202 += 2;
          --v201;
        }
        while (v201);
      }
    }
  }
  else
  {
    v196 = 0;
  }
  v207 = *(_DWORD *)(a1 + 460);
  v208 = *(_DWORD *)(a1 + 456);
  if ((*(_DWORD *)(a1 + 452) & 0x80000000) == 0 || (v207 & 0x80000000) == 0 || (v208 & 0x80000000) == 0)
  {
    v209 = v207 < 0 ? 51 : *(_DWORD *)(a1 + 460);
    v210 = v208 < 0 ? 1 : *(_DWORD *)(a1 + 456);
    if (v210 > v209)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_271;
      LODWORD(__dst.value) = 67109376;
      HIDWORD(__dst.value) = v210;
      LOWORD(__dst.timescale) = 1024;
      *(CMTimeScale *)((char *)&__dst.timescale + 2) = v209;
      v307 = MEMORY[0x1E0C81028];
      v308 = "min allowed qp (%d) cannot exceed max allowed qp (%d)\n";
      v309 = 14;
LABEL_434:
      _os_log_error_impl(&dword_1B676B000, v307, OS_LOG_TYPE_ERROR, v308, (uint8_t *)&__dst, v309);
      goto LABEL_271;
    }
  }
  if (v195 && v196 == 1)
  {
    v211 = v195 + 8 * *(int *)(v195 + 16);
    v212 = *(__int16 *)(v211 + 26);
    v213 = *(__int16 *)(v211 + 24);
    if (*(_BYTE *)(v189 + 3535))
      v214 = v213 <= 191;
    else
      v214 = 1;
    v216 = !v214 && v212 > 191;
  }
  else
  {
    v216 = 0;
  }
  *(_BYTE *)(a1 + 781) = v216;
  v217 = *(_DWORD *)(v189 + 3688);
  if (v217)
  {
    v218 = 0;
    v219 = (_BYTE *)(a1 + 777);
    *(_BYTE *)(a1 + 777) = 0;
    v220 = (_BYTE *)(a1 + 778);
    v221 = *(_BYTE *)(v189 + 3768) ^ 1;
    *(_BYTE *)(a1 + 778) = v221;
    if (v217 == 1)
    {
LABEL_295:
      v222 = (_BYTE *)(a1 + 779);
      *(_BYTE *)(a1 + 779) = 1;
      v223 = *(_DWORD *)(a1 + 444);
      goto LABEL_297;
    }
  }
  else
  {
    if ((*(char *)(v189 + 3239) <= 1 || *(_DWORD *)(v189 + 3692) == 2)
      && (*(int *)(a1 + 444) < 1 || *(char *)(v189 + 3309) <= 1))
    {
      v218 = a2;
    }
    else
    {
      v218 = 1;
    }
    v219 = (_BYTE *)(a1 + 777);
    *(_BYTE *)(a1 + 777) = v218;
    v220 = (_BYTE *)(a1 + 778);
    v221 = *(_BYTE *)(v189 + 3768) ^ 1;
    *(_BYTE *)(a1 + 778) = v221;
  }
  if (*(_DWORD *)(v189 + 3692) == 1)
    goto LABEL_295;
  v223 = *(_DWORD *)(a1 + 444);
  v222 = (_BYTE *)(a1 + 779);
  *(_BYTE *)(a1 + 779) = v223 != 0;
  if (v223)
  {
LABEL_297:
    if ((v223 - 1) >= 5)
      goto LABEL_298;
LABEL_300:
    v224 = *(_BYTE *)(v189 + 11056) == 0;
  }
  else
  {
LABEL_298:
    if (v221 | (v218 | v216))
      goto LABEL_300;
    v224 = 0;
  }
  *(_BYTE *)(a1 + 776) = v224;
  *(_BYTE *)(a1 + 780) = *(_BYTE *)(v189 + 10989);
  if (!v217 && v223)
  {
    if ((*(_BYTE *)(v189 + 3309) & 0xFB) != 0)
      v225 = sub_1B682C218;
    else
      v225 = sub_1B682C128;
    *(_QWORD *)(a1 + 976) = v225;
  }
  *(_BYTE *)(a1 + 2032) = a2;
  if (*(_DWORD *)(v189 + 3692))
  {
    v226 = 4;
    v227 = 4;
  }
  else
  {
    v226 = *(unsigned __int8 *)(v191 + 2008);
    v227 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 1620);
  }
  *(_DWORD *)(a1 + 768) = v226;
  *(_DWORD *)(a1 + 772) = v227;
  v228 = ~(-1 << v226);
  v229 = ((v192 + v228) >> v226);
  *(_QWORD *)(a1 + 2056) = v229;
  if ((v226 - 5) <= 0xFFFFFFFC)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_312;
    LODWORD(__dst.value) = 67109120;
    HIDWORD(__dst.value) = v226;
    v249 = MEMORY[0x1E0C81028];
    v250 = "Unsupported log2_unit_size_ %d (update SpatialSumSad)\n";
LABEL_360:
    _os_log_error_impl(&dword_1B676B000, v249, OS_LOG_TYPE_ERROR, v250, (uint8_t *)&__dst, 8u);
    goto LABEL_312;
  }
  v234 = *(_DWORD *)(v189 + 3248) == 1 && *(__int16 *)(v189 + 3272) * *(__int16 *)(v189 + 3270) > 921600;
  *(_BYTE *)(a1 + 2034) = v234;
  *(_QWORD *)(a1 + 960) = 0x100000001;
  *(_DWORD *)(a1 + 968) = 1;
  v235 = (_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 936) = sub_1B682C304;
  *(_QWORD *)(a1 + 944) = sub_1B682C4D8;
  *(_QWORD *)(a1 + 952) = 0;
  v236 = *(_DWORD *)(a1 + 860);
  if (v236)
  {
    if (v194 == 8)
    {
      v237 = *(unsigned __int8 *)(v189 + 3709);
      if (v237 == 2)
      {
        *(_QWORD *)(a1 + 872) = sub_1B682C8B4;
        *(_QWORD *)(a1 + 928) = sub_1B682C9F8;
      }
      else
      {
        if (v237 == 1)
          v238 = sub_1B682C710;
        else
          v238 = sub_1B682DA64;
        *v235 = v238;
      }
      if (v234)
      {
        *(_QWORD *)(a1 + 888) = sub_1B682C8B4;
        *(_QWORD *)(a1 + 928) = sub_1B682C9F8;
      }
      *(_QWORD *)(a1 + 880) = sub_1B682DBD4;
      *(_QWORD *)(a1 + 896) = sub_1B682DCF0;
      *(_QWORD *)(a1 + 904) = sub_1B682DE30;
      v245 = *(_DWORD *)(v189 + 3712);
      if (v245 == 16)
      {
        v246 = sub_1B682EFF0;
        v247 = sub_1B682EDA8;
      }
      else
      {
        if (v245 != 32)
          goto LABEL_312;
        v246 = sub_1B682EF50;
        v247 = sub_1B682ED04;
      }
    }
    else
    {
      if (v194 > 0xF)
        goto LABEL_312;
      v237 = *(unsigned __int8 *)(v189 + 3709);
      if (v237 == 2)
      {
        v251 = sub_1B682E46C;
        v252 = v190 == 2016686640 || v190 == 2019963440;
        if (v252)
          v251 = sub_1B682E318;
        *(_QWORD *)(a1 + 872) = v251;
        *(_QWORD *)(a1 + 928) = sub_1B682C9F8;
      }
      else
      {
        if (v237 == 1)
        {
          if (v190 == 2019963440 || v190 == 2016686640)
            v242 = sub_1B682DFB0;
          else
            v242 = sub_1B682E170;
        }
        else if (v190 == 2019963440 || v190 == 2016686640)
        {
          v242 = sub_1B682E5A8;
        }
        else
        {
          v242 = sub_1B682E724;
        }
        *v235 = v242;
      }
      if (v234)
      {
        if (v190 == 2016686640 || v190 == 2019963440)
          v321 = sub_1B682E318;
        else
          v321 = sub_1B682E46C;
        *(_QWORD *)(a1 + 872) = v321;
        *(_QWORD *)(a1 + 928) = sub_1B682C9F8;
      }
      *(_QWORD *)(a1 + 880) = sub_1B682E894;
      *(_QWORD *)(a1 + 896) = sub_1B682E9A8;
      *(_QWORD *)(a1 + 904) = sub_1B682EAEC;
      v245 = *(_DWORD *)(v189 + 3712);
      if (v245 == 16)
      {
        v246 = sub_1B682F06C;
        v247 = sub_1B682EE24;
      }
      else
      {
        if (v245 != 32)
          goto LABEL_312;
        v246 = sub_1B682EEB8;
        v247 = sub_1B682EC70;
      }
    }
    *(_QWORD *)(a1 + 912) = v247;
    *(_QWORD *)(a1 + 920) = v246;
    if (v236 == 1)
    {
      *(_QWORD *)&v322 = 0x100000001;
      *((_QWORD *)&v322 + 1) = 0x100000001;
      *(_OWORD *)(a1 + 960) = v322;
      *(_QWORD *)(a1 + 936) = sub_1B688AB54;
      *(_QWORD *)(a1 + 944) = sub_1B688A560;
      *(_QWORD *)(a1 + 952) = 0;
      if (v194 == 8)
      {
        if (v237 == 2)
        {
          *(_QWORD *)(a1 + 872) = sub_1B688AEC0;
          *(_DWORD *)(a1 + 960) = 0;
          *(_QWORD *)(a1 + 928) = sub_1B688B044;
        }
        else
        {
          if (v237 == 1)
            v323 = sub_1B688ACEC;
          else
            v323 = sub_1B688BE54;
          *v235 = v323;
        }
        if (v234)
        {
          *(_QWORD *)(a1 + 888) = sub_1B688AEC0;
          *(_QWORD *)(a1 + 928) = sub_1B688B044;
          *(_DWORD *)(a1 + 968) = 0;
        }
        *(_QWORD *)(a1 + 880) = sub_1B688BFAC;
        *(_DWORD *)(a1 + 964) = 1;
        *(_QWORD *)(a1 + 896) = sub_1B688C0F0;
        *(_QWORD *)(a1 + 904) = sub_1B688C25C;
        if (v245 == 32)
          v324 = sub_1B688C618;
        else
          v324 = sub_1B688C540;
        *(_QWORD *)(a1 + 912) = v324;
        goto LABEL_489;
      }
      if (v237 != 2)
      {
        if (v237 == 1)
          *v235 = sub_1B688C6D0;
        goto LABEL_489;
      }
      *(_QWORD *)(a1 + 872) = sub_1B688C80C;
      *(_DWORD *)(a1 + 960) = 0;
      v241 = sub_1B688B044;
LABEL_335:
      *(_QWORD *)(a1 + 928) = v241;
    }
  }
  else
  {
    v239 = *(unsigned __int8 *)(v189 + 3709);
    if (v239 == 2)
      v234 = 1;
    if (v239 == 1)
      v240 = 1;
    else
      v240 = 2 * (v239 == 2);
    *(_DWORD *)(a1 + 864) = v240;
    *(_DWORD *)(a1 + 868) = 3;
    if (v234)
    {
      v241 = sub_1B68892EC;
      goto LABEL_335;
    }
  }
LABEL_489:
  v616 = v219;
  v622 = v220;
  v611 = v222;
  *(_QWORD *)(a1 + 1064) = a1;
  if (!*(_QWORD *)(a1 + 1104))
  {
    v327 = (_QWORD **)(a1 + 1096);
    sub_1B682C00C((char **)(a1 + 1096));
    if (!malloc_type_posix_memalign((void **)(a1 + 1096), 0x10uLL, 0x518uLL, 0x1020040448E6B38uLL))
    {
      v336 = *v327;
      if (*v327)
      {
        *v336 = 0;
        v336[1] = 0;
        bzero(v336 + 3, 0x500uLL);
        *(_QWORD *)(a1 + 1104) = 1;
        goto LABEL_490;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_516;
    LOWORD(__dst.value) = 0;
    v328 = MEMORY[0x1E0C81028];
    v329 = "RPS creation failed\n";
    goto LABEL_515;
  }
LABEL_490:
  v182 = sub_1B680EB20((void **)(a1 + 1112), 1uLL);
  if (!(_DWORD)v182)
  {
    if (*(_QWORD *)(a1 + 1136))
      goto LABEL_498;
    v337 = (uint64_t *)(a1 + 1128);
    v338 = *(void **)(a1 + 1128);
    if (v338)
    {
      free(v338);
      *v337 = 0;
      *(_QWORD *)(a1 + 1136) = 0;
    }
    if (!malloc_type_posix_memalign((void **)(a1 + 1128), 0x10uLL, 0xDCuLL, 0x1000040EC76111FuLL))
    {
      v339 = *v337;
      if (*v337)
      {
        *(_QWORD *)v339 = 0;
        *(_DWORD *)(v339 + 216) = 0;
        *(_QWORD *)(a1 + 1136) = 1;
LABEL_498:
        *(_DWORD *)(a1 + 2320) = 0;
        *(_QWORD *)(a1 + 2328) = 0;
        *(_DWORD *)(a1 + 2336) = -1;
        *(_DWORD *)(a1 + 2036) = 0;
        *(_QWORD *)(a1 + 2044) = 0;
        *(_QWORD *)(a1 + 2472) = 0;
        *(_WORD *)(a1 + 2464) = 0;
        *(_OWORD *)(a1 + 2400) = 0u;
        *(_DWORD *)(a1 + 2416) = 0;
        *(_QWORD *)(a1 + 2424) = 0;
        *(_QWORD *)(a1 + 2440) = 0;
        *(_QWORD *)(a1 + 2432) = 0;
        *(_BYTE *)(a1 + 2466) = *(_BYTE *)(v189 + 10991);
        v330 = *(_BYTE *)(v189 + 10992);
        if (v330)
          v330 = *(_DWORD *)(v189 + 3692) == 2;
        *(_BYTE *)(a1 + 2467) = v330;
        *(_DWORD *)(a1 + 2392) = 3;
        v331 = *(unsigned __int8 *)(v189 + 3437);
        v332 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 40) + 2009) - v331;
        *(_DWORD *)(a1 + 2520) = 0;
        *(_QWORD *)(a1 + 2504) = 0;
        *(_QWORD *)(a1 + 2512) = 0;
        v333 = v332 - 3;
        *(_DWORD *)(a1 + 2396) = v333;
        if (v333 < 0)
        {
          if (!v331 || v333 != -1)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LOWORD(__dst.value) = 0;
              v307 = MEMORY[0x1E0C81028];
              v308 = "Motion block size is larger than LCU size!\n";
              v309 = 2;
              goto LABEL_434;
            }
LABEL_271:
            v182 = 4294954394;
            goto LABEL_313;
          }
          *(_DWORD *)(a1 + 2396) = 0;
        }
        v334 = (v192 + 7) >> 3;
        v607 = (v193 + 15) >> 4;
        v604 = (v192 + 15) >> 4;
        size = (v607 * v604 + 1);
        v603 = (v193 + 7) >> 3;
        v602 = v334;
        v335 = (v603 * v334 + 1);
        if (*(_BYTE *)(a1 + 776))
        {
          v182 = sub_1B67E7FE0((void **)(a1 + 2080), (v603 * v334 + 1));
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "8x8 SUM array creation failed\n";
            goto LABEL_493;
          }
          v182 = sub_1B67E7FE0((void **)(a1 + 2096), v335);
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "8x8 SAD array creation failed\n";
            goto LABEL_493;
          }
          v182 = sub_1B67E7FE0((void **)(a1 + 2112), size);
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "NxN SAD array creation failed\n";
            goto LABEL_493;
          }
        }
        if (*v622)
        {
          v182 = sub_1B67E7FE0((void **)(a1 + 2128), v335);
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "DEV MEAN array creation failed\n";
            goto LABEL_493;
          }
        }
        if (*v616)
        {
          v345 = (v229 * ((v193 + v228) >> v226));
          v182 = sub_1B67E7FE0((void **)(a1 + 2144), v345);
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "Spatial Sum array creation failed\n";
            goto LABEL_493;
          }
          v182 = sub_1B682F104((void **)(a1 + 2160), v345);
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "Spatial Sum of Square array creation failed\n";
            goto LABEL_493;
          }
        }
        v390 = (v192 + 31) >> 5;
        v391 = (v193 + 31) >> 5;
        if (*(_BYTE *)(a1 + 780))
        {
          v392 = *(_DWORD *)(v189 + 3712);
          v393 = v607 * v604 + 1;
          if (v392 != 16)
          {
            v393 = v391 * v390 + 1;
            if (v392 != 32)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                LODWORD(__dst.value) = 67109120;
                HIDWORD(__dst.value) = v392;
                v249 = MEMORY[0x1E0C81028];
                v250 = "Block size (%d) for transition detection is not supported\n";
                goto LABEL_360;
              }
LABEL_312:
              v182 = 4294954386;
              goto LABEL_313;
            }
          }
          v182 = sub_1B67E7FE0((void **)(a1 + 2176), v393);
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "Spatial Sum array creation failed\n";
            goto LABEL_493;
          }
        }
        v394 = v193 + 63;
        v395 = (v192 + 63) >> 6;
        v396 = v394 >> 6;
        if (*v611)
        {
          if (*(_DWORD *)(v189 + 3688) == 1 || (v397 = *(_DWORD *)(v189 + 3692), v397 == 1))
          {
            v398 = a1 + 2208;
            v399 = v607 * v604 + 1;
LABEL_638:
            sub_1B682F1A0(v398, v399);
            goto LABEL_639;
          }
          if (*(_DWORD *)(a1 + 444))
          {
            if (v397 == 2)
            {
              sub_1B682F1A0(a1 + 2192, v335);
              sub_1B682F1A0(a1 + 2208, size);
              v398 = a1 + 2224;
              v399 = v391 * v390 + 1;
            }
            else
            {
              switch(*(_DWORD *)(a1 + 772))
              {
                case 3:
                  goto LABEL_702;
                case 4:
                  goto LABEL_701;
                case 5:
                  goto LABEL_700;
                case 6:
                  sub_1B682F1A0(a1 + 2240, (v396 * v395 + 1));
LABEL_700:
                  sub_1B682F1A0(a1 + 2224, (v391 * v390 + 1));
LABEL_701:
                  sub_1B682F1A0(a1 + 2208, size);
LABEL_702:
                  sub_1B682F1A0(a1 + 2192, v335);
                  if (*(_DWORD *)(v189 + 3692) != 1
                    || *(_DWORD *)(a1 + 772) != 6
                    || (*(unsigned __int8 *)(v189 + 3309) | 4) == 4)
                  {
                    goto LABEL_639;
                  }
                  v398 = a1 + 2240;
                  v399 = v396 * v395 + 1;
                  break;
                default:
                  goto LABEL_639;
              }
            }
            goto LABEL_638;
          }
        }
LABEL_639:
        v400 = *(void **)(a1 + 2192);
        if (v400)
          bzero(v400, v335);
        v401 = *(void **)(a1 + 2208);
        if (v401)
          bzero(v401, size);
        v402 = *(void **)(a1 + 2224);
        if (v402)
          bzero(v402, (v391 * v390 + 1));
        v403 = *(void **)(a1 + 2240);
        if (v403)
        {
          bzero(v403, (v396 * v395 + 1));
          v404 = *(_QWORD *)(a1 + 2240);
        }
        else
        {
          v404 = 0;
        }
        *(_QWORD *)(a1 + 2256) = *(_QWORD *)(a1 + 2192);
        *(_QWORD *)(a1 + 2264) = *(_QWORD *)(a1 + 2208);
        *(_QWORD *)(a1 + 2272) = *(_QWORD *)(a1 + 2224);
        *(_QWORD *)(a1 + 2280) = v404;
        *(_DWORD *)(a1 + 2288) = v602;
        *(_DWORD *)(a1 + 2292) = v604;
        *(_DWORD *)(a1 + 2296) = v390;
        *(_DWORD *)(a1 + 2300) = v395;
        *(_DWORD *)(a1 + 2304) = v603;
        *(_DWORD *)(a1 + 2308) = v607;
        *(_DWORD *)(a1 + 2312) = v391;
        *(_DWORD *)(a1 + 2316) = v396;
        if (*(_BYTE *)(a1 + 781))
          sub_1B682F1A0(a1 + 2488, ((*(_DWORD *)(a1 + 788) * *(_DWORD *)(a1 + 784)) >> 6) + 7);
        v623 = (_QWORD *)(a1 + 768);
        if (*(char *)(v189 + 3239) >= 2)
        {
          LODWORD(v405) = *(unsigned __int8 *)(v189 + 3353) - *(_DWORD *)v623;
          if ((_DWORD)v405)
          {
            v406 = 0;
            if (v405 <= 1)
              v405 = 1;
            else
              v405 = v405;
            v407 = (void **)(a1 + 2344);
            v408 = -v405;
            while (1)
            {
              v182 = sub_1B67E7FE0(v407, (((*(_DWORD *)(a1 + 784) + ~(-1 << (v406 + *(_BYTE *)(v189 + 3353)))) >> (v406 + *(_BYTE *)(v189 + 3353)))* ((*(_DWORD *)(a1 + 788) + ~(-1 << (v406 + *(_BYTE *)(v189 + 3353)))) >> (v406 + *(_BYTE *)(v189 + 3353)))));
              if ((_DWORD)v182)
                break;
              v407 += 2;
              if (v408 == --v406)
                goto LABEL_663;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "diff_masking_cu_ creation failed\n";
LABEL_493:
            _os_log_error_impl(&dword_1B676B000, v325, OS_LOG_TYPE_ERROR, v326, (uint8_t *)&__dst, 2u);
            goto LABEL_313;
          }
        }
LABEL_663:
        *(_QWORD *)(a1 + 984) = sub_1B682F22C;
        *(_QWORD *)(a1 + 1000) = sub_1B682F38C;
        *(_QWORD *)(a1 + 992) = sub_1B682F45C;
        *(_QWORD *)(a1 + 1008) = sub_1B682F5BC;
        *(_QWORD *)(a1 + 796) = 0;
        v409 = *(_DWORD *)(a1 + 784);
        *(_DWORD *)(a1 + 804) = v409;
        v410 = *(_DWORD *)(a1 + 788);
        *(_DWORD *)(a1 + 808) = v410;
        *(_DWORD *)(a1 + 828) = v409 >> 3;
        *(_DWORD *)(a1 + 832) = v410 >> 3;
        *(_DWORD *)(a1 + 836) = (v410 >> 3) * (v409 >> 3);
        *(_DWORD *)(a1 + 840) = v409 >> 4;
        *(_DWORD *)(a1 + 844) = v410 >> 4;
        *(_DWORD *)(a1 + 848) = (v410 >> 4) * (v409 >> 4);
        v411 = *(_QWORD *)(a1 + 1072);
        if (v411)
        {
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 592) + 136))
          {
            if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24)) & 1) == 0)
            {
              v413 = *(_DWORD *)(a1 + 796);
              v414 = *(_DWORD *)(a1 + 800);
              v409 = *(_DWORD *)(a1 + 804);
              v410 = *(_DWORD *)(a1 + 808);
              goto LABEL_680;
            }
            v411 = *(_QWORD *)(a1 + 1072);
          }
          v412 = *(_DWORD **)(*(_QWORD *)(a1 + 1064) + 24);
          v413 = v412[9];
          *(_DWORD *)(a1 + 796) = v413;
          v414 = v412[11];
          *(_DWORD *)(a1 + 800) = v414;
          v415 = v411 + 8 * *(int *)(v411 + 16);
          v409 = *(__int16 *)(v415 + 24);
          v416 = v412[10];
          if (v416 + 1 < v409)
            v409 = v416 + 1;
          *(_DWORD *)(a1 + 804) = v409;
          v417 = *(__int16 *)(v415 + 26);
          v418 = v412[12];
          if (v418 + 1 < v417)
            v410 = v418 + 1;
          else
            v410 = v417;
          *(_DWORD *)(a1 + 808) = v410;
        }
        else
        {
          v414 = 0;
          v413 = 0;
        }
LABEL_680:
        *(_DWORD *)(a1 + 812) = v413 >> 3;
        *(_DWORD *)(a1 + 816) = v414 >> 3;
        *(_DWORD *)(a1 + 820) = (v409 + 7) >> 3;
        *(_DWORD *)(a1 + 824) = (v410 + 7) >> 3;
        v419 = *(_QWORD *)(a1 + 1048);
        if (v419)
        {
          v182 = sub_1B67E7E40(v419, a1, *(_DWORD *)(a1 + 836));
          if ((_DWORD)v182)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_313;
            LOWORD(__dst.value) = 0;
            v325 = MEMORY[0x1E0C81028];
            v326 = "Reference selector init failed\n";
            goto LABEL_493;
          }
        }
        if (!*(_BYTE *)(a1 + 640))
          memset_pattern16((void *)(a1 + 2448), &unk_1B6918120, 0x10uLL);
        v420 = *(_QWORD *)(a1 + 1064);
        v605 = *(_QWORD *)(v420 + 584);
        memset(&v633, 0, sizeof(v633));
        CMTimeMake(&v633, *(_QWORD *)(*(_QWORD *)(v420 + 592) + 16), *(_DWORD *)(*(_QWORD *)(v420 + 592) + 32));
        sub_1B67CC654(*(_QWORD **)(a1 + 1096));
        v421 = *(_QWORD *)(a1 + 1064);
        v422 = *(_QWORD *)(v421 + 584);
        __dst = v633;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        if (*(_BYTE *)(a1 + 780))
        {
          v423 = *(_QWORD *)(v421 + 592);
          if (v423)
          {
            v424 = *(_QWORD **)(v422 + 72);
            if (v424)
            {
              if (*(_DWORD *)(a1 + 860))
              {
                v425 = *(int **)(*(_QWORD *)(a1 + 1064) + 584);
                v426 = v425[928];
                v427 = v425[930];
                v626 = v425[929];
                v428 = *(int *)(v423 + 276);
                v429 = *(_DWORD *)(v423 + 280);
                v430 = *(_QWORD *)(v423 + 112);
                v431 = v424[14];
                v432 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v423 + 32))(v423, 0);
                v433 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v422 + 72) + 32))(*(_QWORD *)(v422 + 72), 0);
                v612 = v429 & -(int)v426;
                if (v612 >= 1)
                {
                  v434 = v433;
                  v435 = 0;
                  v436 = 0;
                  v437 = v428 & -(int)v426;
                  v438 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 8 * v427 + 912);
                  do
                  {
                    if ((int)v437 >= 1)
                    {
                      v617 = v436;
                      v439 = 0;
                      v440 = v435;
                      do
                      {
                        v441 = (*v438)(v432 + v439, v434 + v439, v430, v431, 0, v626);
                        v435 = v440 + 1;
                        *(_DWORD *)(*(_QWORD *)(a1 + 2176) + 4 * v440) = v441;
                        v439 += v426;
                        ++v440;
                      }
                      while (v439 < v437);
                      v436 = v617;
                    }
                    v432 += v430 * v426;
                    v434 += v431 * v426;
                    v436 += v426;
                  }
                  while (v436 < v612);
                }
              }
              else
              {
                v442 = *(_QWORD *)(v423 + 1248);
                if (!v442 || *(_QWORD *)(v423 + 88) != *(_QWORD *)(v423 + 192))
                  v442 = *(_QWORD *)(v423 + 1232);
                v443 = v424[156];
                if (!v443 || v424[11] != v424[24])
                  v443 = v424[154];
                v444 = *(_DWORD **)(*(_QWORD *)(a1 + 1064) + 584);
                if (*(_DWORD *)(v605 + 3712) == 16)
                  v445 = 4;
                else
                  v445 = 5;
                v446 = v444[928];
                v447 = *(int8x8_t *)(v423 + 276);
                v448 = *(void ***)(a1 + 2064);
                v449 = *(_QWORD *)(a1 + 2176);
                v450 = v444[929];
                v451 = v444[930];
                v452 = (void *)MEMORY[0x1BCC98608]();
                v453 = vand_s8(v447, (int8x8_t)vdup_n_s32(-v446));
                *(_QWORD *)&v454 = v453.u32[0];
                *((_QWORD *)&v454 + 1) = v453.u32[1];
                v455 = *v448;
                memset(&__dst, 0, sizeof(__dst));
                v638 = v454;
                v639 = 1;
                HIDWORD(v597) = v450;
                LODWORD(v598) = v451;
                LODWORD(v597) = 0;
                objc_msgSend(v455, "SpatialDistance:prevFrame:distBlockArray:forRegion:blockStride:log2UnitSize:startLine:lineStep:method:", v442, v443, v449, &__dst, ((v446 + v453.i32[0] - 1) / v446), v445, v597, v598);
                objc_autoreleasePoolPop(v452);
              }
            }
          }
        }
        __dst = v633;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        __dst = v633;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        v456 = *(_QWORD *)(a1 + 1064);
        v627 = *(_QWORD *)(v456 + 584);
        memset(&v634, 0, sizeof(v634));
        CMTimeMake(&v634, *(_QWORD *)(*(_QWORD *)(v456 + 592) + 16), *(_DWORD *)(*(_QWORD *)(v456 + 592) + 32));
        if (!*(_BYTE *)(a1 + 776))
          goto LABEL_784;
        v457 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 584);
        v458 = *(unsigned int *)(a1 + 784);
        v459 = *(_DWORD *)(a1 + 788);
        if (*(_DWORD *)(a1 + 792) == 8)
        {
          v460 = *(_QWORD *)(v456 + 592);
          if (*(_BYTE *)(v460 + 136))
          {
            v461 = 240;
            if (*(int *)(v460 + 248) > 0)
              v461 = 248;
            v458 = *(unsigned int *)(v460 + v461);
            v462 = 244;
            if (*(int *)(v460 + 252) > 0)
              v462 = 252;
            v459 = *(_DWORD *)(v460 + v462);
          }
        }
        v463 = *(unsigned __int8 *)(v457 + 3309);
        v613 = v459;
        v464 = v459 * v458;
        v618 = v464;
        if (*(_BYTE *)(a1 + 2034))
          v465 = v464 <= 921600;
        else
          v465 = 1;
        v466 = !v465;
        *(_BYTE *)(a1 + 2033) = v466;
        if (*(_BYTE *)(a1 + 777))
        {
          if (*(_BYTE *)(v457 + 3767))
            v467 = v463 == 4;
          else
            v467 = 1;
          v468 = v467;
          sizea = v468;
        }
        else
        {
          sizea = 0;
        }
        v469 = v463 != 0;
        v470 = (_DWORD *)(a1 + 4 * v469 + 960);
        if (v466)
          v470 = (_DWORD *)(a1 + 968);
        *(_DWORD *)(a1 + 972) = *v470;
        v471 = *(_QWORD **)(v456 + 592);
        v472 = (__CVBuffer *)v471[156];
        if (!v472 || v471[11] != v471[24])
          v472 = (__CVBuffer *)v471[154];
        PixelFormatType = CVPixelBufferGetPixelFormatType(v472);
        if (*(_DWORD *)(a1 + 860))
        {
          if (!CVIsCompressedPixelFormatAvailable(PixelFormatType))
          {
            v474 = *(_QWORD **)(v456 + 592);
            v475 = (__CVBuffer *)v474[156];
            if (!v475 || v474[11] != v474[24])
              v475 = (__CVBuffer *)v474[154];
            IOSurface = CVPixelBufferGetIOSurface(v475);
            IOSurfaceLock(IOSurface, 4u, 0);
            memset(&v636, 0, sizeof(v636));
            CMTimeMake(&v636, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 592) + 16), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 592) + 32));
            __dst = v636;
            CMTimeGetSeconds(&__dst);
            kdebug_trace();
            v477 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v456 + 592) + 16))(*(_QWORD *)(v456 + 592), 0, 0, 0);
            v478 = v477;
            v479 = *(_QWORD *)(*(_QWORD *)(v456 + 592) + 112);
            if (*(_BYTE *)(a1 + 2033))
              v480 = (void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 888);
            else
              v480 = (void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 872 + 8 * v469);
            (*v480)(v477, v479, v458, v613, *(_QWORD *)(a1 + 2080), *(int *)(a1 + 828), *(_QWORD *)(a1 + 2096), *(int *)(a1 + 828), a1 + 2320, a1 + 2328);
            if (sizea)
              *(_DWORD *)(a1 + 2052) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 768 + 8 * *(int *)(a1 + 768) + 104))(v478, v479, v458, v613, *(_QWORD *)(a1 + 2080), *(_QWORD *)(a1 + 2144), *(_QWORD *)(a1 + 2160));
            IOSurfaceUnlock(IOSurface, 4u, 0);
          }
          *(_DWORD *)(a1 + 2336) = *(_QWORD *)(a1 + 2328) / (unint64_t)v618;
        }
        else
        {
          if (*(_BYTE *)(a1 + 2033))
            v493 = 2;
          else
            v493 = *(_DWORD *)(a1 + 4 * v469 + 864);
          v610 = v493;
          v505 = *(_DWORD *)(a1 + 768);
          v506 = *(_DWORD *)(a1 + 828);
          v507 = *(void ***)(a1 + 2064);
          v508 = *(_QWORD *)(a1 + 2080);
          v509 = *(_QWORD *)(a1 + 2096);
          v510 = *(_QWORD *)(a1 + 2144);
          v511 = *(_QWORD *)(a1 + 2160);
          context = (void *)MEMORY[0x1BCC98608](PixelFormatType);
          v512 = *v507;
          *(_QWORD *)&v513 = v458;
          *((_QWORD *)&v513 + 1) = v613;
          memset(&__dst, 0, sizeof(__dst));
          v638 = v513;
          v639 = 1;
          LOBYTE(v600) = sizea;
          LODWORD(v599) = v506;
          HIDWORD(v599) = ((int)v458 + (1 << v505) - 1) >> v505;
          v514 = objc_msgSend(v512, "SpatialSumSadVar:sumBlockArray:sadBlockArray:sumUnitArray:sumSquareUnitArray:sumTotal:sadTotal:variance:forRegion:blockStride:unitStride:method:log2UnitSize:calcVar:", v472, v508, v509, v510, v511, a1 + 2328, a1 + 2320, a1 + 2052, &__dst, v599, __PAIR64__(v505, v610), v600);
          objc_autoreleasePoolPop(context);
          *(_DWORD *)(a1 + 2336) = *(_QWORD *)(a1 + 2328) / (unint64_t)v618;
          if (v514)
          {
LABEL_785:
            switch(*(_BYTE *)(v627 + 3309))
            {
              case 0:
              case 1:
                v519 = *(_DWORD *)(a1 + 2048);
                goto LABEL_788;
              case 2:
              case 4:
                v519 = *(_DWORD *)(a1 + 2052);
                goto LABEL_788;
              case 3:
                v519 = *(_DWORD *)(a1 + 2052);
                if (v519 >= 2)
                {
                  v569 = __clz(v519);
                  v570 = ((byte_1B69327A4[(unint64_t)(v519 << (v569 + 1)) >> 24] << 12) | 0x200000u) >> ((v569 + 1) >> 1);
                  if ((v569 & 1) == 0)
                    v570 = (11585 * v570) >> 14;
                  v519 = (v570 + 16) >> 5;
                }
LABEL_788:
                *(_DWORD *)(a1 + 2072) = v519;
                break;
              default:
                break;
            }
            v520 = *(_QWORD *)(a1 + 1064);
            if (*(_BYTE *)(v627 + 3784))
              *(_DWORD *)(*(_QWORD *)(v520 + 608) + 1216) = *(_DWORD *)(a1 + 2040);
            if (v514)
              *(_DWORD *)(v520 + 444) = 0;
            __dst = v633;
            CMTimeGetSeconds(&__dst);
            kdebug_trace();
            v521 = (_BYTE *)v605;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 1064) + 640))
            {
              if (!*(_BYTE *)(v605 + 3768))
              {
                v522 = sub_1B6830B60(v623);
                v521 = (_BYTE *)v605;
                if (v522)
                  *(_BYTE *)(*(_QWORD *)(a1 + 1064) + 640) = 0;
              }
              v523 = *(_QWORD *)(a1 + 1048);
              if (v523)
              {
                v525 = *(_QWORD *)(v523 + 8);
                v524 = *(int **)(v525 + 1096);
                LODWORD(v525) = *(_DWORD *)(v525 + 656);
                v525 = (int)v525 >= *v524 ? *v524 : v525;
                *(_DWORD *)(v523 + 2716) = v525;
                if ((int)v525 >= 1)
                {
                  LODWORD(v526) = 0;
                  v527 = v524[1];
                  v528 = v524[2];
                  v529 = (unsigned int *)(v524 + 6);
                  v530 = (unsigned int *)(v524 + 70);
                  v531 = (unsigned int *)(v524 + 134);
                  v532 = v524[3];
                  do
                  {
                    if ((int)v527 >= 1)
                    {
                      v533 = 0;
                      v534 = (int)v526;
                      v535 = v526;
                      v536 = (_DWORD *)(*(_QWORD *)(v523 + 24) + 16 * (int)v526 + 4);
                      v537 = v529;
                      do
                      {
                        v538 = *(_QWORD *)v537;
                        v537 += 4;
                        *(v536 - 1) = *(_DWORD *)(v538 + 680);
                        *v536 = v535 + v533++;
                        v526 = v534 + v533;
                        if (v533 >= v527)
                          break;
                        v536 += 4;
                      }
                      while (v526 < v525);
                    }
                    if ((int)v528 >= 1 && (int)v526 < (int)v525)
                    {
                      v539 = 0;
                      v540 = (int)v526;
                      v541 = v526;
                      v542 = (_DWORD *)(*(_QWORD *)(v523 + 24) + 16 * (int)v526 + 4);
                      v543 = v530;
                      do
                      {
                        v544 = *(_QWORD *)v543;
                        v543 += 4;
                        *(v542 - 1) = *(_DWORD *)(v544 + 680);
                        *v542 = v541 + v539++;
                        if (v539 >= v528)
                          break;
                        v542 += 4;
                      }
                      while (v540 + v539 < v525);
                      LODWORD(v526) = v540 + v539;
                    }
                    if ((int)v532 >= 1 && (int)v526 < (int)v525)
                    {
                      v545 = 0;
                      v546 = (int)v526;
                      v547 = v526;
                      v548 = (_DWORD *)(*(_QWORD *)(v523 + 24) + 16 * (int)v526 + 4);
                      v549 = v531;
                      do
                      {
                        v550 = *(_QWORD *)v549;
                        v549 += 4;
                        *(v548 - 1) = *(_DWORD *)(v550 + 680);
                        *v548 = v547 + v545++;
                        if (v545 >= v532)
                          break;
                        v548 += 4;
                      }
                      while (v546 + v545 < v525);
                      LODWORD(v526) = v546 + v545;
                    }
                    LODWORD(v526) = v526 + 1;
                  }
                  while ((int)v526 < (int)v525);
                }
              }
            }
            if (v521[3400])
            {
              v551 = *(_QWORD *)(a1 + 1064);
            }
            else
            {
              v551 = *(_QWORD *)(a1 + 1064);
              if (v521[3409] != 1 && !*(_BYTE *)(*(_QWORD *)(v551 + 56) + 12))
              {
                if ((char)v521[3239] > 1 || *(_BYTE *)(v605 + 3791))
                {
                  v521 = (_BYTE *)v605;
                }
                else
                {
                  v521 = (_BYTE *)v605;
                  if (!*(_BYTE *)(a1 + 2032))
                    goto LABEL_907;
                }
              }
            }
            v552 = *(unsigned __int8 *)(v551 + 640);
            v553 = *(_QWORD *)(v551 + 584);
            if (!*(_BYTE *)(a1 + 2032) && (!*(_BYTE *)(v553 + 3400) || !*(_QWORD *)(a1 + 1072)))
              goto LABEL_907;
            v628 = v521[10993];
            v554 = *(_QWORD *)(v553 + 48);
            v555 = (std::mutex *)(v554 + 56);
            std::mutex::lock((std::mutex *)(v554 + 56));
            if (*(_QWORD *)(v554 + 216))
            {
              v556 = *(_QWORD *)(v554 + 200);
              v558 = *(_QWORD *)(v556 + 16);
              v557 = *(_QWORD *)(v556 + 24);
              __dst.value = v558;
              *(_QWORD *)&__dst.timescale = v557;
              if (v557)
              {
                v559 = (unint64_t *)(v557 + 8);
                do
                  v560 = __ldxr(v559);
                while (__stxr(v560 + 1, v559));
              }
            }
            else
            {
              v558 = 0;
              *(_OWORD *)&__dst.value = 0uLL;
            }
            std::mutex::unlock(v555);
            sub_1B680F590(&v636, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 584) + 48), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 3008) + 72));
            *(_QWORD *)(a1 + 2424) = 0;
            *(_QWORD *)(a1 + 2432) = 0;
            *(_QWORD *)(a1 + 2440) = 0;
            v562 = *(_DWORD *)(a1 + 2044);
            if (v562)
            {
              v563 = (double)v562;
            }
            else
            {
              if (!v636.value || v552 < 2)
              {
                v564 = 0.0;
                if (!v558 || v552 > 1)
                {
LABEL_844:
                  if (v552 < 2)
                  {
                    *(_WORD *)(a1 + 2464) = 0;
                    if (*(_BYTE *)(*(_QWORD *)(a1 + 1064) + 640) == 4)
                    {
                      v182 = 0;
                      *(_QWORD *)(a1 + 2472) = 0;
                      goto LABEL_893;
                    }
                    goto LABEL_871;
                  }
                  if (*(_BYTE *)(v553 + 3768))
                  {
                    if (!v636.value)
                    {
                      v568 = 0.0;
                      v567 = 0.0;
LABEL_867:
                      *(_WORD *)(a1 + 2464) = 0;
                      v573 = 0.0;
                      if (*(_BYTE *)(*(_QWORD *)(a1 + 1064) + 640) != 4)
                      {
                        if (v564 <= 5.0 || *(_BYTE *)(a1 + 2467) || v567 <= v564 * 3.16227794)
                        {
LABEL_872:
                          v573 = 0.0;
                          if (*(_BYTE *)(v553 + 3400))
                          {
                            v574 = *(double **)(a1 + 1072);
                            if (v574)
                            {
                              v575 = *v574;
                              v573 = v568;
                              if (*v574 > 0.0)
                              {
                                if (v575 * 0.85 <= v568 || *(_BYTE *)(a1 + 2467))
                                {
                                  v573 = (v568 + v575 * 7.0) * 0.125;
                                }
                                else
                                {
                                  v573 = (v575 + v568) * 0.5;
                                  *(_BYTE *)(a1 + 2465) = 1;
                                }
                              }
                              *v574 = v573;
                            }
                          }
                          goto LABEL_879;
                        }
LABEL_871:
                        *(double *)(a1 + 2424) = v564;
                        *(_BYTE *)(a1 + 2464) = 1;
                        v568 = v564;
                        goto LABEL_872;
                      }
LABEL_879:
                      v182 = 0;
                      if (*(_BYTE *)(a1 + 2466))
                        v576 = v568;
                      else
                        v576 = v573;
                      *(double *)(a1 + 2472) = v576;
                      if (v628 && v552 >= 2)
                      {
                        if (v568 >= v573 * 0.75)
                        {
                          v182 = 0;
                          if (v568 > v573 * 1.25)
                            *(double *)(a1 + 2472) = (v573 * 1.25 + v568) * 0.5;
                        }
                        else
                        {
                          v182 = 0;
                          *(double *)(a1 + 2472) = v573 * 0.75;
                        }
                      }
LABEL_893:
                      v578 = *(std::__shared_weak_count **)&v636.timescale;
                      if (*(_QWORD *)&v636.timescale)
                      {
                        v579 = (unint64_t *)(*(_QWORD *)&v636.timescale + 8);
                        do
                          v580 = __ldaxr(v579);
                        while (__stlxr(v580 - 1, v579));
                        if (!v580)
                        {
                          ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
                          std::__shared_weak_count::__release_weak(v578);
                        }
                      }
                      v581 = *(std::__shared_weak_count **)&__dst.timescale;
                      if (*(_QWORD *)&__dst.timescale)
                      {
                        v582 = (unint64_t *)(*(_QWORD *)&__dst.timescale + 8);
                        do
                          v583 = __ldaxr(v582);
                        while (__stlxr(v583 - 1, v582));
                        if (!v583)
                        {
                          ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
                          std::__shared_weak_count::__release_weak(v581);
                        }
                      }
                      if ((_DWORD)v182)
                      {
                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          goto LABEL_314;
                        LOWORD(__dst.value) = 0;
                        v243 = MEMORY[0x1E0C81028];
                        v244 = "Precompress failed\n";
                        goto LABEL_343;
                      }
LABEL_907:
                      if (*(_BYTE *)(a1 + 781) && (!*(_DWORD *)(a1 + 2504) || !*(_DWORD *)(a1 + 2512)))
                      {
                        v584 = *(_DWORD *)(a1 + 2508);
                        *(_DWORD *)(a1 + 2504) = v584;
                        v585 = *(_DWORD *)(a1 + 2520);
                        *(_DWORD *)(a1 + 2512) = v585;
                        if (v584)
                          v586 = v585 == 0;
                        else
                          v586 = 1;
                        v587 = !v586;
                        *(_BYTE *)(a1 + 781) = v587;
                      }
                      v182 = 0;
                      goto LABEL_314;
                    }
                    LODWORD(v561) = *(_DWORD *)(v636.value + 72);
                    v565 = ((double)*(unint64_t *)&v561 + (double)(*(int *)(a1 + 848) >> 1))
                         / (double)*(int *)(a1 + 848);
                    v566 = fabs(sqrt(v565)) * 0.5;
                    if (v565 == -INFINITY)
                      v567 = INFINITY;
                    else
                      v567 = v566;
                    *(double *)(a1 + 2424) = v567;
                    v568 = v567;
LABEL_853:
                    *(double *)(a1 + 2440) = v567;
                    goto LABEL_867;
                  }
                  v182 = sub_1B6817420(a1 + 1080, 1uLL);
                  if ((_DWORD)v182)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_893;
                    LOWORD(v634.value) = 0;
                    v571 = MEMORY[0x1E0C81028];
                    v572 = "SliceEnc creation in precomp failed.\n";
                  }
                  else
                  {
                    v182 = sub_1B6876380(*(_QWORD *)(a1 + 1080), *(__n128 **)(a1 + 1064), 0, 1, 1);
                    if (!(_DWORD)v182)
                    {
                      v182 = sub_1B685D040(a1 + 1144, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1080) + 79088) + 240), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 1080) + 1368) + 2000), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1080) + 79088) + 64), *(char *)(*(_QWORD *)(a1 + 1064) + 640));
                      if ((_DWORD)v182)
                        goto LABEL_893;
                      *(_OWORD *)(a1 + 1144) = 0u;
                      *(_DWORD *)(a1 + 1160) = 0x1000000;
                      *(_DWORD *)(a1 + 2512) = 0;
                      *(_DWORD *)(a1 + 2504) = 0;
                      v588 = *(_QWORD *)(a1 + 1064);
                      v589 = *(unsigned __int8 *)(*(_QWORD *)(v588 + 40) + 2009);
                      v590 = *(_QWORD *)(v588 + 608);
                      v591 = ~(-1 << v589);
                      v619 = (*(_DWORD *)(v590 + 280) + v591) >> v589;
                      if (v619)
                      {
                        v592 = 0;
                        v593 = (*(_DWORD *)(v590 + 276) + v591) >> v589;
                        do
                        {
                          if (v593)
                          {
                            for (i = 0; i != v593; ++i)
                              sub_1B6833634((unint64_t)v623, (i << v589), (v592 << v589), 0, a1 + 1144);
                          }
                          ++v592;
                        }
                        while (v592 != v619);
                      }
                      v595 = *(_DWORD *)(a1 + 2404);
                      if (v595 <= 0)
                      {
                        *(_QWORD *)(a1 + 2424) = 0;
                        *(_QWORD *)(a1 + 2432) = 0;
                        *(_QWORD *)(a1 + 2440) = 0;
                        *(_WORD *)(a1 + 2464) = 0;
                        v568 = 0.0;
                        v573 = 0.0;
                        if (*(_BYTE *)(*(_QWORD *)(a1 + 1064) + 640) != 4)
                          goto LABEL_872;
                        goto LABEL_879;
                      }
                      v568 = fabs(sqrt((double)((*(_DWORD *)(a1 + 2408) + (v595 >> 1)) / v595)));
                      *(double *)(a1 + 2424) = v568;
                      v596 = v595 << (2 * *(_BYTE *)(a1 + 2392) - 6);
                      LODWORD(v577) = *(_DWORD *)(a1 + 2036);
                      v564 = fabs(sqrt((double)v577));
                      *(double *)(a1 + 2432) = v564;
                      v567 = fabs(sqrt((double)((*(_DWORD *)(a1 + 2400) + (v596 >> 1)) / v596)));
                      goto LABEL_853;
                    }
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_893;
                    LOWORD(v634.value) = 0;
                    v571 = MEMORY[0x1E0C81028];
                    v572 = "SliceEnc initialization failed\n";
                  }
                  _os_log_error_impl(&dword_1B676B000, v571, OS_LOG_TYPE_ERROR, v572, (uint8_t *)&v634, 2u);
                  goto LABEL_893;
                }
                LODWORD(v561) = *(_DWORD *)(v558 + 72);
                v561 = (double)*(unint64_t *)&v561 / (double)*(int *)(a1 + 848);
                v564 = fabs(sqrt(v561)) * 0.5;
                v252 = v561 == -INFINITY;
                HIDWORD(v561) = 2146435072;
                if (v252)
                  v564 = INFINITY;
LABEL_843:
                *(double *)(a1 + 2432) = v564;
                goto LABEL_844;
              }
              LODWORD(v561) = *(_DWORD *)(v636.value + 84);
              v563 = (double)*(unint64_t *)&v561;
            }
            v561 = fabs(sqrt(v563));
            v564 = v561 * 0.5;
            goto LABEL_843;
          }
        }
        __dst = v634;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        v481 = *(_QWORD *)(a1 + 2112);
        v482 = (const float *)(a1 + 784);
        v483 = (int32x2_t)vld1_dup_f32(v482);
        __dst.value = *(_QWORD *)(a1 + 2096);
        *(_QWORD *)&__dst.timescale = v481;
        __dst.epoch = v481;
        *(_QWORD *)&v638 = v481;
        *(int32x2_t *)v484.i8 = vshl_s32(vadd_s32(v483, (int32x2_t)0xF00000007), (int32x2_t)0xFFFFFFFCFFFFFFFDLL);
        *(int32x4_t *)&v636.value = vzip1q_s32(v484, vdupq_lane_s32(*(int32x2_t *)v484.i8, 1));
        v485 = (*(_DWORD *)(a1 + 824) - *(_DWORD *)(a1 + 816)) * (*(_DWORD *)(a1 + 820) - *(_DWORD *)(a1 + 812));
        LODWORD(v481) = *(_DWORD *)(a1 + 2320);
        *(_DWORD *)(a1 + 2036) = (v481 + (*(int *)(a1 + 836) >> 1)) / *(_DWORD *)(a1 + 836);
        *(_DWORD *)(a1 + 2044) = (v481 + (*(int *)(a1 + 848) >> 1)) / *(_DWORD *)(a1 + 848);
        v486 = ((int)v481 + (v485 >> 1)) / v485;
        *(_DWORD *)(a1 + 2040) = v486;
        if (v486 >= 2)
        {
          v487 = __clz(v486);
          if ((v487 & 1) != 0)
            v488 = ((byte_1B69327A4[(unint64_t)((_DWORD)v486 << (v487 + 1)) >> 24] << 12) | 0x200000u) >> ((v487 + 1) >> 1);
          else
            v488 = (11585
                  * (((byte_1B69327A4[(unint64_t)((_DWORD)v486 << (v487 + 1)) >> 24] << 12) | 0x200000u) >> ((v487 + 1) >> 1))) >> 14;
          v486 = (v488 + 16) >> 5;
        }
        *(_DWORD *)(a1 + 2048) = v486;
        v489 = *(_QWORD *)(a1 + 1064);
        if ((*(_DWORD *)(v489 + 444) - 6) >= 0xFFFFFFFB && (_DWORD)v486)
        {
          v490 = a1 + 2256;
          v491 = a1 + 2288;
          v492 = 3;
          while (!*(_QWORD *)(a1 + 8 * v492 + 2256))
          {
            if (--v492 == -1)
              goto LABEL_779;
          }
          v494 = *(unsigned int *)(a1 + 796);
          v495 = (int)v494 >> (v492 + 3);
          v496 = *(unsigned int *)(a1 + 800);
          v497 = *(_DWORD *)(a1 + 804);
          v498 = (8 << v492) - 1;
          v499 = -(8 << v492);
          v500 = ((v497 + v498) & v499) >> (v492 + 3);
          v501 = *(_DWORD *)(a1 + 808);
          v502 = ((v501 + v498) & v499) >> (v492 + 3);
          v503 = *(_QWORD *)(v489 + 584);
          v504 = *(_DWORD *)(v503 + 10996);
          if (*(_BYTE *)(v503 + 3709) == 2 || *(_BYTE *)(a1 + 2033))
          {
            if (v492 == 2)
            {
              (*(void (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, uint64_t))(a1 + 928))(v490, v491, &__dst, &v636, v486, v494, v496);
              goto LABEL_779;
            }
            if (!*(_DWORD *)(a1 + 968))
            {
              sub_1B6833BF8(v490, v491, (uint64_t)&__dst, (uint64_t)&v636, v492, v486, v495, (int)v496 >> (v492 + 3), v500, v502, v497, v501, v504);
              goto LABEL_779;
            }
          }
          sub_1B6833FC8(v490, v491, (uint64_t)&__dst, (uint64_t)&v636, v492, v486, v495, (int)v496 >> (v492 + 3), v500, v502, v497, v501, v504);
        }
LABEL_779:
        __dst = v634;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        if (*(_BYTE *)(a1 + 781) || *(_BYTE *)(a1 + 778))
        {
          v515 = a1 + 16 * *(unsigned int *)(a1 + 972);
          v516 = *(void (**)(_QWORD *))(v515 + 1016);
          v517 = *(_QWORD *)(v515 + 1024);
          v518 = (_QWORD *)((char *)v623 + (v517 >> 1));
          if ((v517 & 1) != 0)
            v516 = *(void (**)(_QWORD *))(*v518 + v516);
          v516(v518);
        }
LABEL_784:
        v514 = 0;
        goto LABEL_785;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_516:
      v182 = 4294954392;
      goto LABEL_313;
    }
    LOWORD(__dst.value) = 0;
    v328 = MEMORY[0x1E0C81028];
    v329 = "long-term RPS creation failed\n";
LABEL_515:
    _os_log_error_impl(&dword_1B676B000, v328, OS_LOG_TYPE_ERROR, v329, (uint8_t *)&__dst, 2u);
    goto LABEL_516;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.value) = 0;
    v325 = MEMORY[0x1E0C81028];
    v326 = "short-term RPS creation failed\n";
    goto LABEL_493;
  }
LABEL_313:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.value) = 0;
    v243 = MEMORY[0x1E0C81028];
    v244 = "Pre-comp init failed\n";
LABEL_343:
    _os_log_error_impl(&dword_1B676B000, v243, OS_LOG_TYPE_ERROR, v244, (uint8_t *)&__dst, 2u);
  }
LABEL_314:
  v230 = v630;
  if (v630)
  {
    v231 = (unint64_t *)&v630->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  return v182;
}

void sub_1B6816D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_1B6772C88((uint64_t)&a39);
  sub_1B6772C88(v39 - 224);
  sub_1B6772C88((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1B6816DB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B6816DC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6816DF0(uint64_t a1)
{
  uint64_t i;
  uint64_t result;

  for (i = 296; i != 24; i -= 16)
    result = sub_1B6772C88(a1 + i);
  return result;
}

uint64_t sub_1B6816E28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  OpaqueCMBlockBuffer *v6;
  OpaqueCMBlockBuffer *v7;
  size_t DataLength;
  size_t v9;
  uint64_t appended;
  size_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  int v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  unsigned int v26;
  size_t v27;
  size_t v28;
  char v29;
  uint64_t v30;
  size_t v31;
  CFTypeRef v32;
  const __CFData *v34;
  const UInt8 *BytePtr;
  size_t Length;
  size_t v37;
  uint64_t v38;
  char *dataPointerOut;
  void *v40[3];
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  char v44;
  void *memptr;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  size_t v49;
  CMBlockBufferRef blockBufferOut[2];

  v2 = 0;
  v3 = 0;
  blockBufferOut[1] = *(CMBlockBufferRef *)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 584);
  v5 = *(_QWORD **)(v4 + 13272);
  blockBufferOut[0] = 0;
  if (!*(_DWORD *)(a1 + 644))
  {
    v2 = v5[8];
    v3 = v5[6];
  }
  *(_QWORD *)(a1 + 3064) = v2;
  *(_QWORD *)(a1 + 3056) = v3;
  v6 = (OpaqueCMBlockBuffer *)(*(uint64_t (**)(_QWORD *))(*v5 + 96))(v5);
  if (!v6)
  {
    appended = 4294954394;
    goto LABEL_43;
  }
  v7 = v6;
  DataLength = CMBlockBufferGetDataLength(v6);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 33))
  {
    v9 = DataLength;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    appended = (*(uint64_t (**)(_QWORD *, size_t *, size_t *, uint64_t *))(*v5 + 104))(v5, &v49, &v47, &v48);
    if ((_DWORD)appended)
      goto LABEL_43;
    v11 = v47;
    memptr = 0;
    v46 = 0;
    sub_1B67C2364(&memptr, 0x40uLL, 0x10uLL);
    v12 = memptr;
    *((_OWORD *)memptr + 2) = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
    v40[0] = 0;
    v40[1] = 0;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    if (v12 && v46)
    {
      v40[2] = v12;
      v41 = v12;
      v42 = (char *)v12 + v46;
      v43 = bswap32(*(_DWORD *)v12);
      v44 = 0;
    }
    v13 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24), v40);
    v19 = MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18);
    v21 = (char *)&v38 - v20;
    v22 = 0;
    if (v19)
    {
      v23 = 0;
      v24 = (unsigned __int8 *)memptr;
      v25 = v21;
      do
      {
        v26 = *v24;
        if (v23 == 2)
        {
          if (v26 > 3)
          {
            v23 = 2;
          }
          else
          {
            v23 = 0;
            *v25++ = 3;
            ++v22;
            v26 = *v24;
          }
        }
        if (v26)
          v23 = 0;
        else
          ++v23;
        ++v24;
        *v25++ = v26;
        ++v22;
        --v19;
      }
      while (v19);
    }
    v27 = *(_QWORD *)(a1 + 384);
    v28 = v22 + v11;
    if (*(_DWORD *)(v4 + 3688) == 1 || v28 < v27 && !*(_QWORD *)(*(_QWORD *)(a1 + 584) + 1112))
    {
      if (v28 < v27)
        v22 += sub_1B685C9A8((uint64_t)v21, v22, v27 - v11);
      appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 0, v47, 0, blockBufferOut);
      if ((_DWORD)appended)
        goto LABEL_33;
      appended = CMBlockBufferAppendMemoryBlock(blockBufferOut[0], 0, v22, 0, 0, 0, v22, 1u);
      if ((_DWORD)appended)
        goto LABEL_33;
      appended = CMBlockBufferReplaceDataBytes(v21, blockBufferOut[0], v47, v22);
      if ((_DWORD)appended)
        goto LABEL_33;
      dataPointerOut = 0;
      appended = CMBlockBufferGetDataPointer(v7, v49, 0, 0, &dataPointerOut);
      if ((_DWORD)appended)
        goto LABEL_33;
      *(_DWORD *)dataPointerOut = bswap32(v48 + v22);
    }
    else
    {
      appended = CMBlockBufferReplaceDataBytes(v21, v7, v47, v22);
      if ((_DWORD)appended)
        goto LABEL_33;
      dataPointerOut = 0;
      appended = CMBlockBufferGetDataPointer(v7, v49, 0, 0, &dataPointerOut);
      if ((_DWORD)appended)
        goto LABEL_33;
      *(_DWORD *)dataPointerOut = bswap32(v48 + v22);
      v34 = *(const __CFData **)(*(_QWORD *)(a1 + 584) + 1112);
      if (v34)
      {
        BytePtr = CFDataGetBytePtr(v34);
        Length = CFDataGetLength(*(CFDataRef *)(*(_QWORD *)(a1 + 584) + 1112));
        v37 = Length + v28;
        if (v9 < Length + v28)
        {
          appended = 4294954385;
LABEL_33:
          v29 = 0;
          goto LABEL_34;
        }
        appended = CMBlockBufferReplaceDataBytes(BytePtr, v7, v28, Length);
        if ((_DWORD)appended)
          goto LABEL_33;
        v28 = v37;
      }
      appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 0, v28, 0, blockBufferOut);
      if ((_DWORD)appended)
        goto LABEL_33;
    }
    appended = 0;
    v29 = 1;
    v7 = blockBufferOut[0];
LABEL_34:
    if (v40[0])
      free(v40[0]);
    if (memptr)
      free(memptr);
    if ((v29 & 1) == 0)
      goto LABEL_43;
    goto LABEL_39;
  }
  appended = 0;
LABEL_39:
  v30 = appended;
  v31 = CMBlockBufferGetDataLength(v7);
  if (*(_BYTE *)(v4 + 3786))
  {
    *(_QWORD *)(a1 + 376) = v31;
    v32 = CFRetain(v7);
LABEL_41:
    *(_QWORD *)(a1 + 3032) = v32;
    *(_QWORD *)(a1 + 2904) = 8 * *(_QWORD *)(a1 + 376);
    appended = v30;
    goto LABEL_43;
  }
  appended = sub_1B67C2364((void **)(a1 + 3040), v31, 0x10uLL);
  if (!(_DWORD)appended)
  {
    sub_1B6817314(*(_QWORD *)(a1 + 584), *(_QWORD *)(a1 + 3040), (_QWORD *)(a1 + 376), v7);
    v32 = *(CFTypeRef *)(a1 + 3040);
    goto LABEL_41;
  }
LABEL_43:
  if (blockBufferOut[0])
    CFRelease(blockBufferOut[0]);
  return appended;
}

void sub_1B68172B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 192);
  if (v3)
    free(v3);
  v4 = *(void **)(v1 - 136);
  if (v4)
    free(v4);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B6817314(uint64_t a1, uint64_t a2, _QWORD *a3, CMBlockBufferRef theBuffer)
{
  unint64_t result;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v16;
  char *dataPointerOut;

  result = CMBlockBufferGetDataLength(theBuffer);
  dataPointerOut = 0;
  if (result)
  {
    v8 = result;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      result = CMBlockBufferGetDataPointer(theBuffer, v9, 0, 0, &dataPointerOut);
      v11 = bswap32(*(_DWORD *)dataPointerOut);
      v12 = *(int *)(a1 + 3688);
      v13 = qword_1B69221E0[v12];
      v14 = v9 + 4;
      v9 += 4 + v11;
      if (v10 + v13 + v11 > v8 || v9 > v8)
        break;
      memcpy((void *)(a2 + v10), (char *)&unk_1B69221D8 + 4 * v12, v13);
      v16 = qword_1B69221E0[*(int *)(a1 + 3688)] + v10;
      result = CMBlockBufferCopyDataBytes(theBuffer, v14, v11, (void *)(a2 + v16));
      v10 = v16 + v11;
      if (v9 >= v8)
        goto LABEL_10;
    }
  }
  else
  {
    v10 = 0;
LABEL_10:
    *a3 = v10;
  }
  return result;
}

uint64_t sub_1B6817420(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 8) >= a2)
    return 0;
  if (a2 > 0x529)
    return 4294954392;
  sub_1B6812A88((char **)a1);
  if (malloc_type_posix_memalign((void **)a1, 0x10uLL, 79360 * a2, 0x10F0040A03071D4uLL) || !*(_QWORD *)a1)
    return 4294954392;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = sub_1B67C63C4(*(_QWORD *)a1 + v5);
    *(_BYTE *)(v7 + 78152) = 0;
    *(_OWORD *)(v7 + 78132) = 0u;
    *(_OWORD *)(v7 + 78160) = 0u;
    *(_OWORD *)(v7 + 78176) = 0u;
    *(_OWORD *)(v7 + 78192) = 0u;
    *(_QWORD *)(v7 + 79056) = 0;
    *(_QWORD *)(v7 + 79048) = 0;
    *(_DWORD *)(v7 + 79036) = 0;
    *(_DWORD *)(v7 + 79308) = 0;
    *(_OWORD *)(v7 + 79216) = 0u;
    *(_OWORD *)(v7 + 79232) = 0u;
    *(_OWORD *)(v7 + 79248) = 0u;
    *(_OWORD *)(v7 + 79264) = 0u;
    *(_OWORD *)(v7 + 79280) = 0u;
    *(_BYTE *)(v7 + 79160) = 1;
    *(_QWORD *)(v7 + 79168) = sub_1B6875BA4;
    *(_QWORD *)(v7 + 79176) = 0;
    *(_QWORD *)(v7 + 79184) = sub_1B6875BF0;
    *(_QWORD *)(v7 + 79192) = 0;
    *(_QWORD *)(v7 + 79200) = sub_1B6875EF8;
    ++v6;
    v5 += 79360;
    *(_QWORD *)(v7 + 79208) = 0;
  }
  while (a2 != v6);
  result = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

void sub_1B6817588(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned int v25;
  uint64_t v26;
  double *v27;
  int v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  double v61;
  int v62;
  float v63;
  int v64;
  double v65;
  double v66;
  float v67;
  double v68;
  uint64_t v69;
  int v70;
  float v71;
  unsigned int v72;
  __int32 v73;
  unsigned int v74;
  float v75;
  int32x2_t v76;
  uint64_t v77;
  const void *v78;
  int v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint8_t *v87;
  uint32_t v88;
  uint64_t v89;
  double v90;
  int v91;
  int v92;
  _QWORD *i;
  uint64_t j;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  BOOL v120;
  _BYTE *v121;
  __int16 v122;
  int v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  size_t v136;
  int v137;
  FILE **v138;
  int v139;
  uint64_t v140;
  BOOL v141;
  int v142;
  uint64_t v143;
  void (*v144)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  uint64_t v152;
  FILE *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  void *v162;
  const void *v163;
  uint64_t v164;
  size_t v165;
  uint64_t v166;
  int *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  char v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  const void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t k;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  _DWORD *v222;
  uint64_t v223;
  unsigned int v224;
  char v225;
  _DWORD *v226;
  unint64_t v227;
  _DWORD *v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  _DWORD *v233;
  char v234;
  unint64_t v235;
  int v236;
  _DWORD *v237;
  char v238;
  unsigned int v239;
  unint64_t v240;
  int v241;
  _DWORD *v242;
  char v243;
  unint64_t v244;
  int v245;
  _DWORD *v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  int v250;
  _DWORD *v251;
  char v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  BOOL v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD *v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  std::mutex *v270;
  _QWORD v271[2];
  CFTypeRef cf;
  _QWORD v273[4];
  _BYTE buf[53];
  char v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 584);
  v5 = *(_QWORD *)(v4 + 48);
  v270 = (std::mutex *)(v4 + 1048);
  std::mutex::lock((std::mutex *)(v4 + 1048));
  if (a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      v6 = MEMORY[0x1E0C81028];
      v7 = "FrameEnc emit function receives an error: %d\n";
LABEL_228:
      _os_log_error_impl(&dword_1B676B000, v6, OS_LOG_TYPE_ERROR, v7, buf, 8u);
      goto LABEL_229;
    }
    goto LABEL_229;
  }
  v8 = *(_QWORD *)(a1 + 584);
  if (!*(_BYTE *)a1)
  {
    v15 = *(unsigned __int8 *)(v8 + 3766);
    v16 = *(_QWORD *)(v8 + 13272);
    v17 = *(_QWORD *)(a1 + 2712);
    if (!v17)
    {
LABEL_169:
      if (v16)
      {
        a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a1);
        if (a2)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_226;
          *(_WORD *)buf = 0;
          v80 = MEMORY[0x1E0C81028];
          v81 = "Failed to update DBP context\n";
LABEL_396:
          v87 = buf;
LABEL_397:
          v88 = 2;
          goto LABEL_398;
        }
      }
      v121 = *(_BYTE **)(a1 + 16);
      if (!v121[33] || !(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v121 + 32))(v121))
      {
LABEL_201:
        v128 = *(_QWORD *)(a1 + 584);
        v129 = *(_QWORD *)(v128 + 13272);
        if (*(_BYTE *)(v128 + 3232))
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 608) + 349) = (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 608) + 440))() == 0;
          if (*(_BYTE *)(*(_QWORD *)(a1 + 584) + 1016))
            *(_BYTE *)(*(_QWORD *)(a1 + 624) + 349) = (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 624) + 440))() == 0;
        }
        if (*(_BYTE *)(v128 + 3766) && v129)
        {
          a2 = sub_1B6816E28(a1);
LABEL_224:
          if (!a2)
            goto LABEL_5;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_226;
          *(_WORD *)buf = 0;
          v80 = MEMORY[0x1E0C81028];
          v81 = "Failed to generate output data.\n";
          goto LABEL_396;
        }
        v130 = *(_QWORD *)(a1 + 584);
        v131 = *(char *)(v130 + 3288);
        cf = 0;
        if ((int)v131 < 1)
        {
          v132 = 0;
        }
        else
        {
          v132 = 0;
          v133 = (_QWORD *)(*(_QWORD *)(a1 + 2688) + 3512);
          v134 = v131;
          do
          {
            v132 = v132 + *v133 - *(v133 - 1);
            v133 += 9920;
            --v134;
          }
          while (v134);
        }
        if (*(_BYTE *)(v130 + 3232))
          v132 += 54;
        if (*(_BYTE *)(v130 + 3620))
          v132 += 29;
        if (*(_BYTE *)(v130 + 3664))
          v132 += 9;
        v135 = ((unint64_t)(3 * v132) >> 1)
             + 5
             * (*(unsigned __int8 *)(v130 + 3232)
              + (int)v131
              + *(unsigned __int8 *)(v130 + 3620)
              + *(unsigned __int8 *)(v130 + 3664))
             + 64;
        if (v135 <= *(_QWORD *)(a1 + 384) + 8)
          v136 = *(_QWORD *)(a1 + 384) + 8;
        else
          v136 = v135;
        a2 = sub_1B67C2364((void **)(a1 + 3040), v136, 0x10uLL);
        if (a2)
        {
LABEL_222:
          if (cf)
            CFRelease(cf);
          goto LABEL_224;
        }
        v222 = *(_DWORD **)(a1 + 608);
        if (v222[9])
          (*(void (**)(_DWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v222 + 80))(v222, 0, v222[70], 0);
        if (*(_BYTE *)(v130 + 3620) && *(_BYTE *)(*(_QWORD *)(a1 + 2688) + 10) == 2)
        {
          v223 = 0;
          v224 = 0;
          v225 = 0;
          *(_OWORD *)((char *)v273 + 3) = 0uLL;
          *(_QWORD *)buf = 0;
          memset((char *)&v273[2] + 3, 0, 13);
          LOWORD(v273[0]) = 334;
          BYTE2(v273[0]) = -119;
          v226 = (_DWORD *)v273 + 1;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = (char *)v273 + 4;
          *(_QWORD *)&buf[24] = (char *)v273 + 4;
          *(_QWORD *)&buf[32] = buf;
          *(_QWORD *)&buf[40] = 0;
          buf[48] = 0;
          do
          {
            *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v130 + v223 + 3628) << (16 - v225)) | v224;
            *v226 = bswap32(*(unsigned int *)&buf[40]);
            v227 = *(int *)&buf[44] + 16;
            v228 = (_DWORD *)(*(_QWORD *)&buf[24] + (v227 >> 3));
            *(_QWORD *)&buf[24] = v228;
            v229 = buf[44] & 7;
            *(_DWORD *)&buf[44] = buf[44] & 7;
            if ((unint64_t)v228 >= *(_QWORD *)&buf[32])
            {
              buf[48] = 1;
              *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
              v228 = *(_DWORD **)&buf[32];
            }
            *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v130 + v223 + 3634) << (16 - v229)) | (*(_DWORD *)&buf[40] << (v227 & 0xF8));
            *v228 = bswap32(*(unsigned int *)&buf[40]);
            v230 = *(int *)&buf[44] + 16;
            v224 = *(_DWORD *)&buf[40] << (v230 & 0xF8);
            v226 = (_DWORD *)(*(_QWORD *)&buf[24] + (v230 >> 3));
            *(_QWORD *)&buf[24] = v226;
            v225 = buf[44] & 7;
            *(_QWORD *)&buf[40] = __PAIR64__(*(unsigned int *)&buf[44], v224) & 0x7FFFFFFFFLL;
            if ((unint64_t)v226 >= *(_QWORD *)&buf[32])
            {
              buf[48] = 1;
              *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
              v226 = *(_DWORD **)&buf[32];
            }
            v223 += 2;
          }
          while (v223 != 6);
          *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v130 + 3640) << (16 - v225)) | v224;
          *v226 = bswap32(*(unsigned int *)&buf[40]);
          v231 = *(int *)&buf[44] + 16;
          v232 = *(_DWORD *)&buf[40] << (v231 & 0xF8);
          v233 = (_DWORD *)(*(_QWORD *)&buf[24] + (v231 >> 3));
          *(_QWORD *)&buf[24] = v233;
          v234 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v233 >= *(_QWORD *)&buf[32])
          {
            buf[48] = 1;
            *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
            v233 = *(_DWORD **)&buf[32];
          }
          *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v130 + 3642) << (16 - v234)) | v232;
          *v233 = bswap32(*(unsigned int *)&buf[40]);
          v235 = *(int *)&buf[44] + 16;
          v236 = *(_DWORD *)&buf[40] << (v235 & 0xF8);
          v237 = (_DWORD *)(*(_QWORD *)&buf[24] + (v235 >> 3));
          *(_QWORD *)&buf[24] = v237;
          v238 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v237 >= *(_QWORD *)&buf[32])
          {
            buf[48] = 1;
            *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
            v237 = *(_DWORD **)&buf[32];
          }
          v239 = *(_DWORD *)(v130 + 3644);
          *(_DWORD *)&buf[40] = (HIWORD(v239) << (16 - v238)) | v236;
          *v237 = bswap32(*(unsigned int *)&buf[40]);
          v240 = *(int *)&buf[44] + 16;
          v241 = *(_DWORD *)&buf[40] << (v240 & 0xF8);
          v242 = (_DWORD *)(*(_QWORD *)&buf[24] + (v240 >> 3));
          *(_QWORD *)&buf[24] = v242;
          v243 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v242 >= *(_QWORD *)&buf[32])
          {
            buf[48] = 1;
            *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
            v242 = *(_DWORD **)&buf[32];
          }
          *(_DWORD *)&buf[40] = ((unsigned __int16)v239 << (16 - v243)) | v241;
          *v242 = bswap32(*(unsigned int *)&buf[40]);
          v244 = *(int *)&buf[44] + 16;
          v245 = *(_DWORD *)&buf[40] << (v244 & 0xF8);
          v246 = (_DWORD *)(*(_QWORD *)&buf[24] + (v244 >> 3));
          *(_QWORD *)&buf[24] = v246;
          v247 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v246 >= *(_QWORD *)&buf[32])
          {
            buf[48] = 1;
            *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
            v246 = *(_DWORD **)&buf[32];
          }
          v248 = *(_DWORD *)(v130 + 3648);
          *(_DWORD *)&buf[40] = (HIWORD(v248) << (16 - v247)) | v245;
          *v246 = bswap32(*(unsigned int *)&buf[40]);
          v249 = *(int *)&buf[44] + 16;
          v250 = *(_DWORD *)&buf[40] << (v249 & 0xF8);
          v251 = (_DWORD *)(*(_QWORD *)&buf[24] + (v249 >> 3));
          *(_QWORD *)&buf[24] = v251;
          v252 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v251 >= *(_QWORD *)&buf[32])
          {
            buf[48] = 1;
            *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
            v251 = *(_DWORD **)&buf[32];
          }
          *(_DWORD *)&buf[40] = ((unsigned __int16)v248 << (16 - v252)) | v250;
          *v251 = bswap32(*(unsigned int *)&buf[40]);
          v253 = *(int *)&buf[44] + 16;
          *(_QWORD *)&buf[24] += v253 >> 3;
          *(_QWORD *)&buf[40] = __PAIR64__(*(unsigned int *)&buf[44], *(_DWORD *)&buf[40] << (v253 & 0xF8)) & 0x7FFFFFFFFLL;
          if (*(_QWORD *)&buf[24] >= *(_QWORD *)&buf[32])
          {
            buf[48] = 1;
            *(_QWORD *)&buf[24] = *(_QWORD *)&buf[32];
          }
          sub_1B67C939C((uint64_t)buf);
          BYTE3(v273[0]) = buf[24] - buf[16] - 1;
          v254 = *(_QWORD *)&buf[24] - *(_QWORD *)&buf[16] + 4;
          if (*(_QWORD *)buf)
            free(*(void **)buf);
          *(_QWORD *)(a1 + 376) += off_1EF137C48(*(_QWORD *)(a1 + 3040) + *(_QWORD *)(a1 + 376), 0, v273, v254, 2);
        }
        if (*(_BYTE *)(v130 + 3664) && *(_BYTE *)(*(_QWORD *)(a1 + 2688) + 10) == 2)
        {
          BYTE3(v273[1]) = 0;
          *(_QWORD *)((char *)v273 + 3) = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          LOWORD(v273[0]) = 334;
          BYTE2(v273[0]) = -112;
          HIDWORD(v273[0]) = bswap32(*(unsigned __int16 *)(v130 + 3672)) >> 16;
          *(_DWORD *)((char *)v273 + 6) = bswap32(*(unsigned __int16 *)(v130 + 3674)) >> 16;
          buf[48] = 0;
          *(_QWORD *)&buf[16] = (char *)v273 + 4;
          *(_QWORD *)&buf[24] = &v273[1];
          *(_QWORD *)&buf[32] = (char *)&v273[1] + 4;
          *(_QWORD *)&buf[40] = 0;
          sub_1B67C939C((uint64_t)buf);
          BYTE3(v273[0]) = buf[24] - buf[16] - 1;
          v255 = *(_QWORD *)&buf[24] - *(_QWORD *)&buf[16] + 4;
          if (*(_QWORD *)buf)
            free(*(void **)buf);
          *(_QWORD *)(a1 + 376) += off_1EF137C48(*(_QWORD *)(a1 + 3040) + *(_QWORD *)(a1 + 376), 0, v273, v255, 2);
        }
        v256 = v131 - 1;
        if ((int)v131 >= 1)
        {
          v257 = 0;
          v258 = 79360 * v131;
          do
          {
            v259 = *(_QWORD *)(a1 + 2688);
            if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 33))
              v260 = v256 == 0;
            else
              v260 = 0;
            if (v260)
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24), v259 + v257 + 3488);
            *(_QWORD *)(a1 + 376) += off_1EF137C48(*(_QWORD *)(a1 + 3040) + *(_QWORD *)(a1 + 376), 0, *(_QWORD *)(v259 + v257 + 3504), *(_QWORD *)(v259 + v257 + 3512) - *(_QWORD *)(v259 + v257 + 3504), 2);
            --v256;
            v257 += 79360;
          }
          while (v258 != v257);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 33))
        {
          v261 = *(_QWORD *)(a1 + 384);
          if (*(_QWORD *)(a1 + 3048) > (unint64_t)(v261 + 2))
            *(_QWORD *)(a1 + 376) += sub_1B685C9A8(*(_QWORD *)(a1 + 3040), *(_QWORD *)(a1 + 376), v261);
        }
        if (*(_BYTE *)(v130 + 3232))
        {
          v262 = *(_QWORD *)(a1 + 608);
          if (*(_BYTE *)(v262 + 349))
          {
            v263 = (_OWORD *)(v262 + 350);
            *(_DWORD *)buf = 830734672;
            v264 = v263[1];
            *(_OWORD *)&buf[5] = *v263;
            buf[4] = 0;
            *(_OWORD *)&buf[21] = v264;
            *(_OWORD *)&buf[37] = v263[2];
            v275 = 0x80;
            *(_QWORD *)(a1 + 376) += off_1EF137C48(*(_QWORD *)(a1 + 3040) + *(_QWORD *)(a1 + 376), 0, buf, 54, 2);
          }
        }
        v265 = *(_QWORD *)(a1 + 3040);
        *(_QWORD *)(a1 + 3032) = v265;
        if (*(_BYTE *)(v130 + 3786))
        {
          v266 = *(_QWORD *)(a1 + 376);
          v267 = v266 - 3;
          *(_DWORD *)buf = bswap32(v266 - 3);
          a2 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v266 + 1, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v266 + 1, 1u, (CMBlockBufferRef *)&cf);
          if (a2)
            goto LABEL_222;
          a2 = CMBlockBufferReplaceDataBytes(buf, (CMBlockBufferRef)cf, 0, 4uLL);
          if (a2)
            goto LABEL_222;
          a2 = CMBlockBufferReplaceDataBytes((const void *)(v265 + 3), (CMBlockBufferRef)cf, 4uLL, v267);
          if (a2)
            goto LABEL_222;
          ++*(_QWORD *)(a1 + 376);
          *(_QWORD *)(a1 + 3032) = CFRetain(cf);
        }
        a2 = 0;
        *(_QWORD *)(a1 + 2904) = 8 * *(_QWORD *)(a1 + 376);
        goto LABEL_222;
      }
      *(_WORD *)buf = 0;
      if (*(_BYTE *)(v8 + 3706)
        || (v123 = *(_DWORD *)(a1 + 420), *(_DWORD *)(*(_QWORD *)(a1 + 584) + 284) > 2 * v123)
        && !(*(_DWORD *)(a1 + 644) % v123))
      {
        if (qword_1EDBB4CB8 != -1)
          dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
        if (dword_1EDBB4CC4 != 255)
        {
          if (v15
            && (*(_QWORD *)(v8 + 3224)
             || *(_BYTE *)(v8 + 3233)
             || *(_BYTE *)(v8 + 3232)
             || *(_BYTE *)(*(_QWORD *)(a1 + 24) + 80)))
          {
            v122 = sub_1B67AD9B8(*(uint64_t **)(a1 + 608));
            *(_WORD *)buf = v122;
LABEL_198:
            v127 = *(_BYTE **)(a1 + 16);
            if (v127[33] && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v127 + 32))(v127))
              *(_WORD *)(*(_QWORD *)(a1 + 24) + 16) = v122;
            goto LABEL_201;
          }
          if (v16)
          {
            v124 = *(_QWORD *)(a1 + 616);
            v271[0] = *(_QWORD *)(a1 + 608);
            v271[1] = v124;
            if (v124)
            {
              v125 = (unint64_t *)(v124 + 8);
              do
                v126 = __ldxr(v125);
              while (__stxr(v126 + 1, v125));
            }
            a2 = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v16 + 88))(v16, v271, buf);
            sub_1B6772C88((uint64_t)v271);
            if (a2)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_226;
              LOWORD(v273[0]) = 0;
              v80 = MEMORY[0x1E0C81028];
              v81 = "Failed to CalculateCheckSumOneFrame.\n";
              v87 = (uint8_t *)v273;
              goto LABEL_397;
            }
            v122 = *(_WORD *)buf;
            goto LABEL_198;
          }
        }
      }
      v122 = 0;
      goto LABEL_198;
    }
    if (*(_BYTE *)(v8 + 3766))
    {
      v18 = **(_QWORD **)(a1 + 392);
      *(_QWORD *)(a1 + 2904) = *(unsigned int *)(v18 + 528);
      *(_QWORD *)(a1 + 2928) = *(unsigned int *)(v18 + 584);
      v19 = *(_QWORD *)(v18 + 816);
      *(_QWORD *)&v20 = v19;
      *((_QWORD *)&v20 + 1) = HIDWORD(v19);
      *(_OWORD *)(a1 + 2912) = v20;
    }
    v21 = *(_QWORD *)(a1 + 3008);
    v22 = *(_QWORD *)(v17 + 392);
    v24 = *(_BYTE *)(v22 + 58)
       && !*(_BYTE *)(a1 + 416)
       && *(int *)(v22 + 512) <= 1
       && ((v23 = *(_QWORD *)(v17 + 344)) == 0 || *(_DWORD *)(v23 + 68) != 2)
       && *(_BYTE *)(v21 + 84) == 0;
    v25 = *(_DWORD *)(v21 + 72);
    v26 = v21 + 120 * v25 + 136;
    if (v25 >= 7)
      v26 = 0;
    if (v25 == 9)
      v27 = (double *)(v21 + 976);
    else
      v27 = (double *)v26;
    v28 = (int)(*v27 / v27[1]);
    v29 = (int)((double)*(int *)(v21 + 36) + (double)*(unint64_t *)(a1 + 2904) * (*(double *)(v21 + 24) + 1.0));
    if (*(int *)(a1 + 644) >= 1 && (*(_BYTE *)(a1 + 640) & 0xFE) == 2 && *(_DWORD *)(v21 + 68) < v29)
    {
      if (v24)
        goto LABEL_164;
      if (*(_BYTE *)(a1 + 416))
      {
        *(_BYTE *)(a1 + 1) = 1;
        goto LABEL_164;
      }
      if (*(_BYTE *)(a1 + 1))
      {
LABEL_164:
        v120 = v28 + (v28 >> 2) < v29;
        if (*(_DWORD *)(v21 + 64) >= v29)
        {
          *(_BYTE *)(v17 + 760) = 0;
          *(_BYTE *)(v21 + 50) = v120;
          if (v24)
          {
LABEL_189:
            ++*(_DWORD *)(v17 + 352);
            *(_BYTE *)a1 = 1;
            goto LABEL_5;
          }
        }
        else
        {
          *(_BYTE *)(v17 + 760) = 1;
          *(_BYTE *)(v21 + 50) = v120;
          if (v24)
            goto LABEL_189;
        }
        goto LABEL_168;
      }
    }
    *(_BYTE *)(v21 + 50) = v28 + (v28 >> 2) < v29;
LABEL_168:
    *(_DWORD *)(v17 + 352) = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_169;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 4))
  {
    sub_1B680F36C((int **)buf, *(_QWORD *)(*(_QWORD *)(a1 + 584) + 48));
    v30 = *(_QWORD *)buf;
    if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)buf + 111))
    {
      *(_BYTE *)(a1 + 3024) |= *(_BYTE *)(*(_QWORD *)buf + 108);
      *(_BYTE *)(a1 + 3025) |= *(_BYTE *)(v30 + 109);
    }
    v31 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 2712);
  if (!v9 || !*(_BYTE *)(a1 + 4))
  {
LABEL_103:
    if (*(_BYTE *)a1)
      goto LABEL_104;
    v82 = *(_QWORD *)(a1 + 608);
    v83 = *(_QWORD *)(a1 + 592);
    v84 = *(_OWORD *)(v83 + 48);
    v85 = *(_OWORD *)(v83 + 64);
    *(_QWORD *)(v82 + 80) = *(_QWORD *)(v83 + 80);
    *(_OWORD *)(v82 + 48) = v84;
    *(_OWORD *)(v82 + 64) = v85;
    a2 = sub_1B6811954(*(_QWORD *)(a1 + 584), a1);
    if (a2)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_226;
      v86 = *(_DWORD *)(a1 + 644);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v86;
      v80 = MEMORY[0x1E0C81028];
      v81 = "Frame %d: ManageDPB failed\n";
      goto LABEL_112;
    }
    v89 = *(_QWORD *)(a1 + 584);
    if (*(int *)(v89 + 152) <= 76999)
    {
      *(_DWORD *)(a1 + 428) = 0;
LABEL_124:
      sub_1B68041E4((uint64_t *)v5, (unsigned __int8 *)a1);
      v92 = *(_DWORD *)(a1 + 644);
      std::mutex::lock((std::mutex *)(v5 + 56));
      for (i = *(_QWORD **)(v5 + 136); i != (_QWORD *)(v5 + 128); i = (_QWORD *)i[1])
      {
        if (*(_DWORD *)i[2] == v92)
        {
          v95 = i[3];
          *(_QWORD *)buf = i[2];
          *(_QWORD *)&buf[8] = v95;
          if (v95)
          {
            v96 = (unint64_t *)(v95 + 8);
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          goto LABEL_140;
        }
      }
      for (j = *(_QWORD *)(v5 + 184); ; j = *(_QWORD *)(j + 8))
      {
        if (j == v5 + 176)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          goto LABEL_140;
        }
        if (**(_DWORD **)(j + 16) == v92)
          break;
      }
      v98 = *(_QWORD *)(j + 24);
      *(_QWORD *)buf = *(_QWORD *)(j + 16);
      *(_QWORD *)&buf[8] = v98;
      if (v98)
      {
        v99 = (unint64_t *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
LABEL_140:
      std::mutex::unlock((std::mutex *)(v5 + 56));
      if (*(_BYTE *)a1)
      {
        v101 = *(_QWORD *)(a1 + 584);
        if (!*(_BYTE *)(a1 + 4))
        {
          v102 = *(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v101 + 1120);
          if (v102)
          {
            v102(*(_QWORD *)(v101 + 1136), *(_QWORD *)(*(_QWORD *)(a1 + 592) + 288), a1, 0, 0, 0);
            v101 = *(_QWORD *)(a1 + 584);
          }
        }
        v103 = *(_QWORD *)(a1 + 608);
        v104 = *(std::__shared_weak_count **)(a1 + 616);
        if (v104)
        {
          p_shared_owners = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldxr(p_shared_owners);
          while (__stxr(v106 + 1, p_shared_owners));
        }
        sub_1B6811898(v101, 0, 0, 0, 0, v103, v104, *(_QWORD *)(*(_QWORD *)(a1 + 592) + 288), (uint64_t)buf);
        if (!v104)
          goto LABEL_159;
        v107 = (unint64_t *)&v104->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
      }
      else
      {
        v109 = *(_QWORD *)(a1 + 584);
        v110 = *(_QWORD *)(a1 + 3064);
        v111 = *(_QWORD *)(a1 + 3056);
        v112 = *(_QWORD *)(a1 + 3032);
        v113 = *(_QWORD *)(a1 + 608);
        v104 = *(std::__shared_weak_count **)(a1 + 616);
        if (v104)
        {
          v114 = (unint64_t *)&v104->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        sub_1B6811898(v109, 0, v110, v111, v112, v113, v104, *(_QWORD *)(*(_QWORD *)(a1 + 592) + 288), (uint64_t)buf);
        if (!v104)
          goto LABEL_159;
        v116 = (unint64_t *)&v104->__shared_owners_;
        do
          v108 = __ldaxr(v116);
        while (__stlxr(v108 - 1, v116));
      }
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
LABEL_159:
      v117 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_254;
      v118 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      goto LABEL_252;
    }
    if (*(_BYTE *)(a1 + 640))
    {
      v90 = *(double *)(v89 + 416);
      if (v90 < 1.0)
      {
        v91 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 608) + 44);
LABEL_123:
        *(_DWORD *)(a1 + 428) = v91;
        goto LABEL_124;
      }
      if (v90 < 5.0)
      {
        v91 = 1;
        goto LABEL_123;
      }
      if (v90 < 10.0)
      {
        v91 = 2;
        goto LABEL_123;
      }
    }
    v91 = 3;
    goto LABEL_123;
  }
  v10 = *(_QWORD *)(a1 + 3008);
  v11 = *(_DWORD *)(*(_QWORD *)(v9 + 392) + 64);
  v141 = v11 > 0x2B;
  v12 = (1 << v11) & 0xCC000100002;
  if (!v141 && v12 != 0 && *(unsigned __int8 *)(a1 + 4) >= 2u)
  {
    *(_OWORD *)buf = *(_OWORD *)(a1 + 2936);
    *(float *)&buf[16] = (float)*(char *)(a1 + 2952);
    sub_1B6858980(v9, a1, (uint64_t)buf);
  }
  else
  {
    sub_1B6858980(*(_QWORD *)(a1 + 2712), a1, 0);
  }
  v34 = *(_QWORD *)(v9 + 392);
  v35 = *(_DWORD *)(v34 + 64);
  v141 = v35 > 0x2B;
  v36 = (1 << v35) & 0xCC000100002;
  if (!v141 && v36 != 0)
  {
    v38 = *(int *)(v10 + 72);
    if ((int)v38 < *(_DWORD *)(v34 + 560))
    {
      do
      {
        v39 = *(_QWORD *)(v9 + 848 + 8 * v38);
        v40 = *(_QWORD *)(v39 + 8);
        if (v40)
        {
          sub_1B6855F98(v40, *(_DWORD *)(v39 + 356), (_QWORD *)a1);
          v34 = *(_QWORD *)(v9 + 392);
        }
        ++v38;
      }
      while (v38 < *(int *)(v34 + 560));
    }
    if (*(_DWORD *)(v9 + 424))
    {
      if (*(unsigned __int8 *)(a1 + 640) <= 1u)
      {
        v41 = *(_QWORD *)(v9 + 904);
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
        {
          sub_1B6855F98(v42, *(_DWORD *)(v41 + 356), (_QWORD *)a1);
          v34 = *(_QWORD *)(v9 + 392);
        }
      }
    }
  }
  if (*(_BYTE *)(v34 + 58))
  {
    if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 1))
    {
      v43 = *(_QWORD *)(v9 + 8 * *(int *)(v10 + 72) + 848);
      v44 = *(int **)(v43 + 8);
      if (v44)
      {
        v45 = *(_DWORD *)(v43 + 356);
        v46 = v10 + 120 * v45 + 136;
        if (v45 >= 7)
          v46 = 0;
        v47 = v45 == 9 ? v10 + 976 : v46;
        v48 = *(double *)v47 * (double)*(int *)(v47 + 16) / 1000.0;
        if ((float)((float)*v44 / v48) > 2.0)
          goto LABEL_68;
      }
      if (*(_BYTE *)(v9 + 760))
LABEL_68:
        ++*(_WORD *)(v9 + 752);
    }
    else
    {
      if (*(_DWORD *)(v34 + 508) != 2 && *(unsigned __int8 *)(*(_QWORD *)(a1 + 1064) + 640) >= 2u)
      {
        *(_DWORD *)(a1 + 2460) = *(_DWORD *)(a1 + 2456);
        *(_QWORD *)(a1 + 2452) = *(_QWORD *)(a1 + 2448);
        *(_DWORD *)(a1 + 2448) = *(double *)(a1 + 2440);
      }
      if (*(unsigned __int8 *)(a1 + 4) >= 2u)
        *(_BYTE *)(v10 + 48) = *(_BYTE *)(v10 + 49);
      v49 = *(float *)(a1 + 2720);
      v50 = operator new(0x18uLL);
      v50[16] = (int)v49;
      *((_QWORD *)v50 + 1) = v9 + 656;
      v51 = *(_QWORD *)(v9 + 656);
      *(_QWORD *)v50 = v51;
      *(_QWORD *)(v51 + 8) = v50;
      *(_QWORD *)(v9 + 656) = v50;
      v52 = *(_QWORD *)(v9 + 672);
      *(_QWORD *)(v9 + 672) = v52 + 1;
      if ((unint64_t)(v52 + 1) >= 6)
      {
        v53 = *(uint64_t **)(v9 + 664);
        v54 = *v53;
        *(_QWORD *)(v54 + 8) = v53[1];
        *(_QWORD *)v53[1] = v54;
        *(_QWORD *)(v9 + 672) = v52;
        operator delete(v53);
      }
      v55 = *(_QWORD *)(a1 + 2904);
      v56 = operator new(0x18uLL);
      v56[4] = v55;
      *((_QWORD *)v56 + 1) = v9 + 680;
      v57 = *(_QWORD *)(v9 + 680);
      *(_QWORD *)v56 = v57;
      *(_QWORD *)(v57 + 8) = v56;
      *(_QWORD *)(v9 + 680) = v56;
      v58 = *(_QWORD *)(v9 + 696);
      *(_QWORD *)(v9 + 696) = v58 + 1;
      if ((unint64_t)(v58 + 1) >= 6)
      {
        v59 = *(uint64_t **)(v9 + 688);
        v60 = *v59;
        *(_QWORD *)(v60 + 8) = v59[1];
        *(_QWORD *)v59[1] = v60;
        *(_QWORD *)(v9 + 696) = v58;
        operator delete(v59);
      }
      ++*(_DWORD *)(v9 + 12);
      *(_WORD *)(v9 + 752) = 0;
      if (*(_BYTE *)(a1 + 410))
        ++*(_DWORD *)(a1 + 412);
      else
        *(_DWORD *)(a1 + 412) = 0;
    }
  }
  else if (*(_DWORD *)(v34 + 508) != 2 && *(unsigned __int8 *)(*(_QWORD *)(a1 + 1064) + 640) >= 2u)
  {
    *(_DWORD *)(a1 + 2460) = *(_DWORD *)(a1 + 2456);
    *(_QWORD *)(a1 + 2452) = *(_QWORD *)(a1 + 2448);
    *(_DWORD *)(a1 + 2448) = *(double *)(a1 + 2440);
  }
  if (*(_BYTE *)(v9 + 324))
  {
    v61 = *(double *)(a1 + 2432);
    v62 = *(_DWORD *)(a1 + 376);
    v63 = *(float *)(a1 + 2720);
    v64 = *(unsigned __int16 *)(v9 + 412) * *(unsigned __int16 *)(v9 + 410);
    if (v61 <= 0.0)
    {
      v67 = *(float *)(v9 + 332);
      v69 = 0x4040000000000000;
    }
    else
    {
      v65 = *(double *)(a1 + 2440);
      v66 = v65 / v61 * (pow((double)v64, 0.3) * 0.001);
      v67 = *(float *)(v9 + 332);
      v68 = (float)(v67 * 5.0);
      if (v66 < v68)
        v68 = v66;
      if (v67 > 0.0)
        v66 = v68;
      v69 = 0x4050000000000000;
      if (v66 <= 64.0)
        goto LABEL_95;
    }
    v66 = *(double *)&v69;
LABEL_95:
    v70 = 8 * v62;
    v71 = v66 * 0.5 + v67 * 0.5;
    *(float *)(v9 + 332) = v71;
    v72 = (int)v71;
    v73 = 5;
    if ((int)v71 >= 1)
    {
      do
      {
        v74 = v73--;
        if (v74 < 2)
          break;
        v141 = v72 > 1;
        v72 >>= 1;
      }
      while (v141);
    }
    v75 = (double)v70 * 0.5 * exp2((v63 + -12.0) / 6.0) / (double)v64 + *(float *)(v9 + 328) * 0.5;
    v76.i32[0] = (int)(v75 / 0.15 + 0.5);
    v76.i32[1] = v73;
    *(float *)(v9 + 328) = v75;
    *(int32x2_t *)(v9 + 336) = vmax_s32(vmin_s32(v76, (int32x2_t)0x500000005), 0);
  }
  v77 = *(_QWORD *)(v9 + 384);
  if (!v77 || *(int *)(*(_QWORD *)(v9 + 392) + 512) > 1)
    goto LABEL_103;
  if (!*(_BYTE *)a1)
  {
    v78 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 592) + 88))(*(_QWORD *)(a1 + 592));
    sub_1B6857F4C(v77, v78);
    goto LABEL_103;
  }
LABEL_104:
  if (*(_DWORD *)(v8 + 3692) != 2)
    goto LABEL_124;
  if (!*(_BYTE *)(a1 + 4))
    goto LABEL_124;
  a2 = sub_1B6811954(*(_QWORD *)(a1 + 584), a1);
  if (!a2)
    goto LABEL_124;
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    goto LABEL_226;
  v79 = *(_DWORD *)(a1 + 644);
  *(_DWORD *)buf = 67109120;
  *(_DWORD *)&buf[4] = v79;
  v80 = MEMORY[0x1E0C81028];
  v81 = "Frame %d: ManageDPB after dropping failed\n";
LABEL_112:
  v87 = buf;
  v88 = 8;
LABEL_398:
  _os_log_error_impl(&dword_1B676B000, v80, OS_LOG_TYPE_ERROR, v81, v87, v88);
LABEL_226:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v137 = *(_DWORD *)(a1 + 644);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v137;
    v6 = MEMORY[0x1E0C81028];
    v7 = "Frame %d: FinishCompress() is failed\n";
    goto LABEL_228;
  }
LABEL_229:
  *(_BYTE *)(a1 + 436) = 1;
  v138 = (FILE **)MEMORY[0x1E0C80C10];
  if (dword_1EF137CD0 >= 1)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to encode frame %d with error %d\n", *(_DWORD *)(a1 + 644), a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v139 = *(_DWORD *)(a1 + 644);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v139;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to encode frame %d with error %d\n", buf, 0xEu);
    }
  }
  v140 = sub_1B68041E4((uint64_t *)v5, (unsigned __int8 *)a1);
  if ((_DWORD)v140)
    v141 = dword_1EF137CD0 < 1;
  else
    v141 = 1;
  if (!v141)
  {
    fprintf(*v138, "Failed allocate stat buffer for frame %d with error %d\n", *(_DWORD *)(a1 + 644), v140);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v142 = *(_DWORD *)(a1 + 644);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v142;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v140;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed allocate stat buffer for frame %d with error %d\n", buf, 0xEu);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v143 = *(_QWORD *)(a1 + 584);
  if (!*(_BYTE *)(a1 + 4))
  {
    v144 = *(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v143 + 1120);
    if (v144)
    {
      v144(*(_QWORD *)(v143 + 1136), *(_QWORD *)(*(_QWORD *)(a1 + 592) + 288), a1, 0, 0, 0);
      v143 = *(_QWORD *)(a1 + 584);
    }
  }
  v145 = *(_QWORD *)(a1 + 608);
  v146 = *(std::__shared_weak_count **)(a1 + 616);
  if (v146)
  {
    v147 = (unint64_t *)&v146->__shared_owners_;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  sub_1B6811898(v143, v140, 0, 0, 0, v145, v146, *(_QWORD *)(*(_QWORD *)(a1 + 592) + 288), (uint64_t)buf);
  if (v146)
  {
    v149 = (unint64_t *)&v146->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v117 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v151 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v119 = __ldaxr(v151);
    while (__stlxr(v119 - 1, v151));
LABEL_252:
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
LABEL_254:
  v152 = *(_QWORD *)(a1 + 584);
  v153 = *(FILE **)(v152 + 88);
  if (!v153 || *(_BYTE *)a1)
    goto LABEL_256;
  *(_QWORD *)buf = 0;
  if (*(_BYTE *)(v152 + 3786))
  {
    v162 = operator new[](*(_QWORD *)(a1 + 376), MEMORY[0x1E0DE4E10]);
    if (!v162)
      goto LABEL_256;
    v163 = v162;
    sub_1B6817314(v152, (uint64_t)v162, buf, *(CMBlockBufferRef *)(a1 + 3032));
    v164 = *(_QWORD *)buf;
    if (fwrite(v163, 1uLL, *(size_t *)buf, v153) == v164)
    {
      MEMORY[0x1BCC9811C](v163, 0x1000C8077774924);
      goto LABEL_256;
    }
  }
  else
  {
    v165 = *(_QWORD *)(a1 + 376);
    if (fwrite(*(const void **)(a1 + 3032), 1uLL, v165, v153) == v165)
      goto LABEL_256;
  }
  __error();
LABEL_256:
  v154 = *(_QWORD *)(a1 + 584);
  v155 = *(_QWORD *)(v154 + 112);
  if (*(_BYTE *)(v154 + 3708))
    v156 = *(_QWORD *)(v154 + 8);
  else
    v156 = 0;
  v157 = (uint64_t *)(v154 + 56);
  if (!*(_BYTE *)a1)
  {
    if (!v155)
      goto LABEL_320;
    sub_1B67C1EF4(*(_QWORD *)(a1 + 608), *(_QWORD *)(v154 + 112), v156);
    if (!*(_BYTE *)(v154 + 3421))
      goto LABEL_312;
    if (!*v157)
    {
      v159 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 12728);
      if (v159)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v159 + 16))(v159, v154 + 56, 0);
    }
    v160 = 0;
    v161 = *(_QWORD *)(a1 + 608);
    if (*(_BYTE *)(v161 + 136) && v156)
      v160 = *(_DWORD *)(v161 + 240) != *(_DWORD *)(v161 + 276) || *(_DWORD *)(v161 + 244) != *(_DWORD *)(v161 + 280);
    v167 = *(int **)(v154 + 56);
    v166 = *(_QWORD *)(v154 + 64);
    *(_QWORD *)buf = v167;
    *(_QWORD *)&buf[8] = v166;
    if (v166)
    {
      v168 = (unint64_t *)(v166 + 8);
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 1, v168));
      v161 = *(_QWORD *)(a1 + 608);
    }
    v170 = *(std::__shared_weak_count **)(a1 + 616);
    v273[0] = v161;
    v273[1] = v170;
    if (v170)
    {
      v171 = (unint64_t *)&v170->__shared_owners_;
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 1, v171));
    }
    v268 = v170;
    v269 = v155;
    v173 = 0;
    if (v160)
    {
      v174 = 1;
      do
      {
        v175 = v174;
        v176 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v167 + 32))(v167, v173);
        if (v167[70] >> v173 >= 1)
        {
          v177 = v176;
          v178 = 0;
          v179 = v161 + 8 * v173;
          v180 = (_QWORD *)(v179 + 192);
          v181 = (_QWORD *)(v179 + 112);
          do
          {
            memcpy((void *)(v177 + *(_QWORD *)&v167[2 * v173 + 28] * v178), (const void *)(*v180 + *v181 * v178), v167[69]);
            ++v178;
          }
          while (v178 < v167[70] >> v173);
        }
        v174 = 0;
        v173 = 1;
      }
      while ((v175 & 1) != 0);
    }
    else
    {
      v182 = 1;
      do
      {
        v183 = v182;
        v184 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v167 + 32))(v167, v173);
        v185 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 32))(v161, v173);
        if (v167[70] >> v173 >= 1)
        {
          v186 = v185;
          v187 = 0;
          do
          {
            memcpy((void *)(v184 + *(_QWORD *)&v167[2 * v173 + 28] * v187), (const void *)(v186 + *(_QWORD *)(v161 + 8 * v173 + 112) * v187), v167[69]);
            ++v187;
          }
          while (v187 < v167[70] >> v173);
        }
        v182 = 0;
        v173 = 1;
      }
      while ((v183 & 1) != 0);
    }
    v155 = v269;
    if (v268)
    {
      v188 = (unint64_t *)&v268->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    v190 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v191 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
LABEL_311:
    if (!v155)
      goto LABEL_320;
    goto LABEL_312;
  }
  if (!*(_BYTE *)(v154 + 3421))
    goto LABEL_311;
  if (!*v157 || v155 == 0)
    goto LABEL_311;
  sub_1B67C1EF4(*v157, *(_QWORD *)(v154 + 112), 0);
LABEL_312:
  v193 = *(_QWORD *)(a1 + 608);
  if (v193)
  {
    if (*(_BYTE *)(v193 + 136))
    {
      v194 = 0;
      v195 = 1;
      do
      {
        v196 = v195;
        v197 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v193 + 48))(v193, v194);
        v195 = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v194 + 88) = v197;
        v193 = *(_QWORD *)(a1 + 608);
        *(_QWORD *)(v193 + 8 * v194 + 112) = *(_QWORD *)(v193 + 8 * v194 + 168);
        v194 = 1;
      }
      while ((v196 & 1) != 0);
      *(_QWORD *)(v193 + 248) = 0;
      v198 = *(_QWORD *)(a1 + 592);
      if (v198)
      {
        if (*(int *)(v198 + 248) >= 1)
        {
          v199 = 0;
          v200 = 1;
          do
          {
            v201 = v200;
            *(_QWORD *)(v198 + 8 * v199 + 88) = *(_QWORD *)(v198 + 8 * v199 + 192);
            v198 = *(_QWORD *)(a1 + 592);
            *(_QWORD *)(v198 + 8 * v199 + 112) = *(_QWORD *)(v198 + 8 * v199 + 216);
            v199 = 1;
            v200 = 0;
          }
          while ((v201 & 1) != 0);
        }
      }
    }
  }
LABEL_320:
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 584) + 3534))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 72))(*(_QWORD *)(a1 + 608));
  sub_1B67C7674((_QWORD *)(a1 + 608));
  sub_1B67C7674((_QWORD *)(a1 + 592));
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 3073) = 0;
  *(_BYTE *)(a1 + 417) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 584) + 3786))
  {
    v202 = *(const void **)(a1 + 3032);
    if (v202)
    {
      CFRelease(v202);
      *(_QWORD *)(a1 + 3032) = 0;
    }
  }
  v203 = *(_QWORD *)(a1 + 1104);
  if (v203)
  {
    v204 = 0;
    do
    {
      sub_1B67CC654((_QWORD *)(*(_QWORD *)(a1 + 1096) + v204));
      v204 += 1304;
      --v203;
    }
    while (v203);
  }
  v205 = *(_QWORD *)(a1 + 744);
  if (v205)
  {
    for (k = 16; k != 288; k += 16)
      sub_1B67C7674((_QWORD *)(v205 + k));
  }
  sub_1B67C7674((_QWORD *)(a1 + 592));
  sub_1B67C7674((_QWORD *)(a1 + 608));
  sub_1B67C7674((_QWORD *)(a1 + 624));
  v207 = *(_QWORD *)(a1 + 2696);
  if (v207)
  {
    v208 = 0;
    v209 = 3544;
    do
    {
      v210 = 0;
      v211 = *(_QWORD *)(a1 + 2688);
      v212 = v211 + 79360 * v208;
      v213 = v211 + v209;
      v214 = 1;
      do
      {
        v215 = 0;
        v216 = v214;
        v217 = v213 + (v210 << 8);
        do
        {
          sub_1B67C7674((_QWORD *)(v217 + v215));
          v215 += 16;
        }
        while (v215 != 256);
        v214 = 0;
        v210 = 1;
      }
      while ((v216 & 1) != 0);
      sub_1B67C7674((_QWORD *)(v212 + 4056));
      ++v208;
      v209 += 79360;
    }
    while (v208 != v207);
  }
  v218 = *(_QWORD *)(a1 + 584);
  std::mutex::lock((std::mutex *)(v218 + 12808));
  v219 = *(uint64_t **)(v218 + 1032);
  if (v219 != (uint64_t *)(v218 + 1024))
  {
    while (1)
    {
      v220 = v219[1];
      if (*(_DWORD *)(v219[2] + 644) == *(_DWORD *)(a1 + 644))
        break;
      v219 = (uint64_t *)v219[1];
      if (v220 == v218 + 1024)
        goto LABEL_343;
    }
    v221 = *v219;
    *(_QWORD *)(v221 + 8) = v220;
    *(_QWORD *)v219[1] = v221;
    --*(_QWORD *)(v218 + 1040);
    sub_1B6772C88((uint64_t)(v219 + 2));
    operator delete(v219);
  }
LABEL_343:
  std::mutex::unlock((std::mutex *)(v218 + 12808));
  std::mutex::unlock(v270);
}

void sub_1B68192D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1B6772C88((uint64_t)&a20);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6819354(char *a1, uint64_t a2, int a3, int a4, __int16 *a5, int a6)
{
  int v11;
  const std::nothrow_t *v12;
  char *v13;
  uint64_t result;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  __int16 *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v52;
  int v53;
  uint64_t v54;

  v11 = a6 >> 1;
  v12 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v13 = (char *)operator new[](a6 * a4, MEMORY[0x1E0DE4E10]);
  result = (uint64_t)operator new[]((int)((a6 & 0xFFFFFFFE) + a4), v12);
  v15 = (_BYTE *)result;
  v52 = v11;
  if (a6 < 0)
  {
    v50 = 0;
  }
  else
  {
    v53 = a3;
    v49 = v11;
    v16 = (v11 & ~(v11 >> 31)) + 1;
    v17 = &v13[v11 * (uint64_t)a4];
    v18 = a1;
    do
    {
      result = (uint64_t)memcpy(v17, v18, a4);
      v18 += a2;
      v17 += a4;
      --v16;
    }
    while (v16);
    if (a6 <= 1)
    {
      v50 = 0;
    }
    else
    {
      if (v52 <= 1)
        v19 = 1;
      else
        v19 = v52;
      v20 = &a1[a2 * v49];
      v21 = v13;
      do
      {
        result = (uint64_t)memcpy(v21, v20, a4);
        v20 -= a2;
        v21 += a4;
        --v19;
      }
      while (v19);
      v50 = 1;
    }
    a3 = v53;
  }
  if (a3 >= 1)
  {
    result = 0;
    v22 = 0;
    v23 = v52 + (uint64_t)a4;
    if (v52 >= 0)
      v24 = v52;
    else
      v24 = -v52;
    v25 = v52 + 1;
    if (v52 <= 1)
      v26 = 1;
    else
      v26 = v52;
    v48 = v26;
    v27 = v25 + v24;
    v47 = v25 + v24;
    do
    {
      if (a4 >= 1)
      {
        v28 = 0;
        do
        {
          if (a6 < 1)
          {
            LOBYTE(v31) = 0;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            do
            {
              v30 += v13[v28 + (v22 + (int)v29) % a6 * a4] * a5[v29];
              ++v29;
            }
            while (a6 != v29);
            if (v30 > 32639)
              LOBYTE(v31) = -1;
            else
              v31 = (v30 >> 7) & ~(v30 >> 31);
          }
          v15[v28 + v52] = v31;
          ++v28;
        }
        while (v28 != a4);
      }
      v32 = a6 - 1;
      v33 = v23 - 2;
      v34 = v15;
      v35 = v48;
      if (v50)
      {
        do
        {
          *v34 = v15[v32];
          v36 = v15[v33--];
          v34[v23] = v36;
          ++v34;
          --v32;
          --v35;
        }
        while (v35);
      }
      if (a4 >= 1)
      {
        v37 = v15;
        v38 = v52;
        do
        {
          v39 = 0;
          if ((a6 & 0x80000000) == 0)
          {
            v40 = a5;
            v41 = v37;
            v42 = v27;
            do
            {
              v44 = *v40++;
              v43 = v44;
              v45 = *v41++;
              v39 += v45 * v43;
              --v42;
            }
            while (v42);
            if (v39 > 32639)
              LOBYTE(v39) = -1;
            else
              v39 = (v39 >> 7) & ~(v39 >> 31);
          }
          a1[result * a2 + v38 - v52] = v39;
          ++v38;
          ++v37;
        }
        while (v38 < v23);
      }
      v46 = v52 + 1 + result;
      if (result >= ~v52 + a3)
        v46 = 2 * a3 - 3 - (v52 + result);
      v54 = result;
      memcpy(&v13[a4 * (uint64_t)v22], &a1[v46 * a2], a4);
      v27 = v47;
      v22 = (v22 + 1) % a6;
      result = v54 + 1;
    }
    while (v54 + 1 != a3);
  }
  if (v15)
    result = MEMORY[0x1BCC9811C](v15, 0x1000C8077774924);
  if (v13)
    JUMPOUT(0x1BCC9811CLL);
  return result;
}

uint64_t sub_1B681970C(uint64_t a1, uint64_t a2)
{
  const void ***v3;
  const void **v4;
  void *v5;
  uint64_t v7;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = (const void ***)(a1 + 32);
  *(_QWORD *)(a1 + 40) = sub_1B6819354;
  *(_QWORD *)(a1 + 48) = nullsub_22;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 24) = a2;
  v4 = (const void **)operator new();
  *v4 = 0;
  v5 = (void *)MEMORY[0x1BCC98608]();
  v7 = objc_opt_new();
  sub_1B6777A50(v4, (const void **)&v7);
  sub_1B6777A90((const void **)&v7);
  objc_autoreleasePoolPop(v5);
  sub_1B6806EBC(v3, v4);
  return a1;
}

void sub_1B68197C0(_Unwind_Exception *a1)
{
  const void ***v1;
  const void **v2;
  const void **v4;

  v4 = sub_1B6777A90(v2);
  MEMORY[0x1BCC9814C](v4, 0xC0C40B8AA526DLL);
  sub_1B6806EBC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6819800(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  char *v11;

  if (a3)
  {
    v10 = 0;
    v11 = 0;
    if (sub_1B681ADEC(a3, &v10, &v11, 0x80000000, 0x7FFFFFFFu))
      return 4294954394;
    if (*v11 != 58)
      return 4294954394;
    v9 = 0;
    if (sub_1B681ADEC(v11 + 1, &v9, &v11, 0x80000000, 0x7FFFFFFFu) || *v11)
      return 4294954394;
    result = 0;
    if (a2 > 0x8C84307B56AD1A1)
    {
      switch(a2)
      {
        case 0x8C84307B56AD1A2:
          result = 0;
          *(_BYTE *)(a1 + 170) = v10;
          *(_BYTE *)(a1 + 171) = v9;
          break;
        case 0x4179B3C137C3CEB0:
          result = 0;
          *(_DWORD *)(a1 + 424) = v10;
          *(_DWORD *)(a1 + 428) = v9;
          break;
        case 0x571BB01944827A3ELL:
          result = 0;
          *(_BYTE *)(a1 + 172) = v10;
          *(_BYTE *)(a1 + 173) = v9;
          break;
      }
      return result;
    }
    if (a2 != 0x3DC4253E192FDEDLL)
    {
      if (a2 == 0x8A24307B54A0265)
      {
        result = 0;
        *(_BYTE *)(a1 + 168) = v10;
        *(_BYTE *)(a1 + 169) = v9;
      }
      return result;
    }
    v7 = v9;
    v8 = v10;
LABEL_29:
    result = 0;
    *(_BYTE *)(a1 + 480) = a3 != 0;
    *(_WORD *)(a1 + 488) = v8;
    *(_WORD *)(a1 + 490) = v7;
    return result;
  }
  if (a2 <= 0x8C84307B56AD1A1)
  {
    v7 = 0;
    v8 = 0;
    if (a2 == 0x3DC4253E192FDEDLL)
      goto LABEL_29;
    result = 0;
    if (a2 == 0x8A24307B54A0265)
    {
      result = 0;
      *(_WORD *)(a1 + 168) = 1539;
    }
  }
  else if (a2 == 0x8C84307B56AD1A2)
  {
    result = 0;
    *(_WORD *)(a1 + 170) = 1282;
  }
  else if (a2 == 0x4179B3C137C3CEB0)
  {
    result = 0;
    *(_QWORD *)(a1 + 424) = 0;
  }
  else
  {
    result = 0;
    if (a2 == 0x571BB01944827A3ELL)
    {
      result = 0;
      *(_WORD *)(a1 + 172) = 0;
    }
  }
  return result;
}

uint64_t sub_1B6819A88(uint64_t a1, int a2, char *__s1)
{
  uint64_t result;

  if (!__s1 || !strcmp(__s1, "default"))
  {
    result = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    *(_BYTE *)(a1 + 7872) = 0;
    *(_DWORD *)(a1 + 168) = 84018691;
    *(_WORD *)(a1 + 172) = 514;
    *(_BYTE *)(a1 + 124) = 0;
    *(_BYTE *)(a1 + 127) = 0;
    *(_BYTE *)(a1 + 225) = 0;
    *(_WORD *)(a1 + 259) = 4;
    *(_WORD *)(a1 + 128) = 257;
    *(_WORD *)(a1 + 569) = 4;
    *(_BYTE *)(a1 + 234) = 2;
    *(_BYTE *)(a1 + 250) = 1;
    *(_BYTE *)(a1 + 257) = 0;
    *(_BYTE *)(a1 + 245) = 0;
    *(_DWORD *)(a1 + 512) = 0;
    *(_BYTE *)(a1 + 571) = 2;
    *(_WORD *)(a1 + 604) = 256;
    *(_BYTE *)(a1 + 55) = 0;
    *(_BYTE *)(a1 + 248) = 0;
    *(_BYTE *)(a1 + 227) = 0;
    *(_QWORD *)(a1 + 606) = 0;
    *(_BYTE *)(a1 + 614) = 0;
    *(_BYTE *)(a1 + 256) = 1;
    *(_WORD *)(a1 + 615) = 0;
    *(_BYTE *)(a1 + 617) = 0;
    *(_DWORD *)(a1 + 7804) = 0;
    *(_WORD *)(a1 + 7808) = 0;
    *(_DWORD *)(a1 + 7812) = 4;
  }
  else
  {
    result = strcmp(__s1, "capture");
    if ((_DWORD)result)
    {
      if (!strcmp(__s1, "facetime"))
      {
        sub_1B681B198(a1);
      }
      else if (!strcmp(__s1, "sidecar"))
      {
        sub_1B681B2E4(a1);
      }
      else if (!strcmp(__s1, "airplay"))
      {
        sub_1B681B3F8(a1);
      }
      else if (!strcmp(__s1, "safeview"))
      {
        sub_1B681B508(a1);
      }
      else if (!strcmp(__s1, "carplay"))
      {
        sub_1B681B61C(a1);
      }
      else
      {
        if (strcmp(__s1, "trafficlight"))
          return 4294954394;
        sub_1B681B738(a1);
      }
      return 0;
    }
    else
    {
      *(_DWORD *)(a1 + 64) = 2;
      *(_WORD *)(a1 + 569) = 3;
      *(_DWORD *)(a1 + 605) = 16843009;
      *(_WORD *)(a1 + 609) = 257;
      *(_BYTE *)(a1 + 571) = 2;
      *(_BYTE *)(a1 + 604) = 0;
      *(_BYTE *)(a1 + 55) = 2;
      *(_BYTE *)(a1 + 248) = 0;
      *(_BYTE *)(a1 + 227) = 0;
      *(_DWORD *)(a1 + 611) = 0;
      *(_BYTE *)(a1 + 256) = 1;
      *(_WORD *)(a1 + 615) = 0;
      *(_DWORD *)(a1 + 7804) = 0;
      *(_WORD *)(a1 + 7808) = 0;
      *(_DWORD *)(a1 + 7812) = 4;
    }
  }
  return result;
}

uint64_t sub_1B6819CB8(uint64_t a1, uint64_t a2, const char *a3)
{
  char *v5;

  if (a3)
  {
    v5 = 0;
    if (sub_1B681B128(a3, (_WORD *)(a1 + 86), &v5)
      || *v5 != 120
      || sub_1B681B128(v5 + 1, (_WORD *)(a1 + 88), &v5)
      || *v5)
    {
      return 4294954394;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 86) = 0;
  }
  return 0;
}

uint64_t sub_1B6819D3C(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  int v6;
  double v7;
  char *v8;
  uint64_t v9;

  if (!a3)
    return 4294954394;
  v8 = 0;
  v9 = 0;
  if (sub_1B681ADEC(a3, (_DWORD *)&v9 + 1, &v8, 0x80000000, 0x7FFFFFFFu))
    return 4294954394;
  v6 = *v8;
  if (v6 == 47)
  {
    if (sub_1B681ADEC(v8 + 1, &v9, &v8, 0x80000000, 0x7FFFFFFFu) || *v8)
      return 4294954394;
    v7 = (double)SHIDWORD(v9) / (double)(int)v9;
  }
  else if (v6 == 46)
  {
    *__error() = 0;
    v7 = strtod(a3, 0);
    if (*__error() || v7 < 2.22507386e-308 || v7 > 1.79769313e308)
      return 4294954394;
  }
  else
  {
    if (*v8)
      return 4294954394;
    v7 = (double)SHIDWORD(v9);
  }
  result = 0;
  *(double *)(a1 + 96) = v7;
  return result;
}

uint64_t sub_1B6819E54(_BYTE *a1, uint64_t a2, const char *a3)
{
  char *v5;

  if (a3)
  {
    v5 = 0;
    if (sub_1B681B08C(a3, a1 + 149, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1B681B08C(v5 + 1, a1 + 150, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1B681B08C(v5 + 1, a1 + 151, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1B681B08C(v5 + 1, a1 + 152, &v5, 0, 0x7Fu)
      || *v5)
    {
      return 4294954394;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 149) = -1;
  }
  return 0;
}

uint64_t sub_1B6819F44(_BYTE *a1, uint64_t a2, const char *a3)
{
  char *v5;

  if (a3)
  {
    v5 = 0;
    if (sub_1B681B08C(a3, a1 + 336, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1B681B08C(v5 + 1, a1 + 338, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1B681B08C(v5 + 1, a1 + 337, &v5, 0, 0x7Fu)
      || *v5)
    {
      return 4294954394;
    }
  }
  else
  {
    *((_WORD *)a1 + 168) = -1;
    a1[338] = 0;
  }
  return 0;
}

uint64_t sub_1B681A00C(_BYTE *a1, uint64_t a2, const char *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int v9;
  char *v10;

  if (!a3)
    return 0;
  v10 = 0;
  if (a2 == 0x81C3B0CF315BC925)
  {
    v6 = a1 + 316;
    v7 = a1 + 317;
  }
  else
  {
    if (a2 != 0x8C49EF6ED9F28EA0)
      return 4294954394;
    v6 = a1 + 314;
    v7 = a1 + 315;
  }
  if (sub_1B681B08C(a3, v6, &v10, 8, 0xEu))
    return 4294954394;
  if (*v10)
  {
    if (*v10 != 58 || sub_1B681B08C(a3, v7, &v10, 8, 0xEu))
      return 4294954394;
  }
  else
  {
    *v7 = *v6;
  }
  if (a2 == 0x81C3B0CF315BC925)
    return 0;
  v9 = a1[314];
  if (v9 == a1[315] && (v9 | 2) == 0xA)
    return 0;
  else
    return 4294954386;
}

uint64_t sub_1B681A13C(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  char *v10;

  *(_DWORD *)(a1 + 7544) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  if (a3)
  {
    v10 = 0;
    if (*(int *)(a1 + 268) >= 1)
    {
      v4 = a3;
      v5 = 0;
      v6 = 0;
      v7 = a1 + 272;
      while (!sub_1B681ADEC(v4, (_DWORD *)(v7 + v5), &v10, 0, 0x7FFFFFFFu)
           && (*v10 == 58 || v6 >= *(int *)(a1 + 268) - 1))
      {
        *(_DWORD *)(a1 + 7544) += *(_DWORD *)(v7 + 4 * v6);
        v8 = *(_DWORD *)(v7 + 4 * v6);
        if (v8 > *(_DWORD *)(a1 + 304))
          *(_DWORD *)(a1 + 304) = v8;
        ++v6;
        v5 += 4;
        v4 += 2;
        if (v6 >= *(int *)(a1 + 268))
          return 0;
      }
    }
    return 4294954394;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 272) = 1;
    *(_QWORD *)(a1 + 276) = 0;
    *(_QWORD *)(a1 + 292) = 0;
    *(_QWORD *)(a1 + 284) = 0;
    *(_QWORD *)(a1 + 300) = 0x100000000;
  }
  return result;
}

uint64_t sub_1B681A24C(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;

  if (a3)
  {
    v3 = a3;
    v4 = 0;
    v8 = 0;
    v5 = a1 + 188;
    while (1)
    {
      v6 = v4 + 4;
      if (v4 == 28 || sub_1B681ADEC(v3, (_DWORD *)(v5 + v4), &v8, 0, 0x7FFFFFFFu))
        break;
      v3 = v8 + 1;
      v4 = v6;
      if (*v8 != 58)
        return 0;
    }
    return 4294954394;
  }
  else
  {
    memset_pattern16((void *)(a1 + 188), &unk_1B69180F0, 0x1CuLL);
    return 0;
  }
}

uint64_t sub_1B681A2E0(uint64_t a1, int a2, char *__s)
{
  int v3;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint32_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  NSObject *v26;
  const char *v27;
  uint32_t v28;
  uint64_t v29;
  const char **v30;
  _DWORD *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  unsigned int v53;
  char *__stringp;
  uint8_t buf[4];
  _QWORD v56[3];
  char *__sa[2];
  __int128 v58;
  __int128 v59;
  _OWORD v60[26];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 264);
  v59 = 0u;
  memset(v60, 0, sizeof(v60));
  *(_OWORD *)__sa = 0u;
  v58 = 0u;
  if (!__s)
    return 0;
  *(_BYTE *)(a1 + 624) = 1;
  v6 = strlen(__s) + 1;
  v7 = (char *)operator new[](v6, MEMORY[0x1E0DE4E10]);
  if (v7)
  {
    v8 = v7;
    memcpy(v7, __s, v6);
    v9 = 0;
    __stringp = v8;
    while (1)
    {
      v10 = strsep(&__stringp, ", \t");
      if (!v10)
        break;
      if (*v10)
      {
        __sa[v9++] = v10;
        if (v9 == 57)
        {
          while (!*v10)
          {
            v10 = strsep(&__stringp, ", \t");
            if (!v10)
              goto LABEL_11;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v26 = MEMORY[0x1E0C81028];
            v27 = "Too many parameters to ref-struct\n";
            v28 = 2;
            goto LABEL_36;
          }
          goto LABEL_21;
        }
      }
    }
    __sa[v9] = 0;
LABEL_11:
    v11 = __sa[0];
    v12 = sub_1B681AE88(__sa[0], (_BYTE *)(a1 + 108 * v3 + 628));
    if ((_DWORD)v12)
    {
      v13 = v12;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      *(_DWORD *)buf = 136315138;
      v56[0] = v11;
      v14 = MEMORY[0x1E0C81028];
      v15 = "Invalid frame_idx_in_gop '%s'\n";
      goto LABEL_14;
    }
    v17 = __sa[1];
    if (!__sa[1] || strlen(__sa[1]) >= 2)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 136315138;
      v56[0] = v17;
      v26 = MEMORY[0x1E0C81028];
      v27 = "Invalid frame_type '%s'\n";
LABEL_35:
      v28 = 12;
      goto LABEL_36;
    }
    v19 = a1 + 108 * v3;
    *(_BYTE *)(v19 + 629) = *__sa[1];
    v20 = v58;
    v21 = sub_1B681AE88((const char *)v58, (_BYTE *)(v19 + 630));
    if ((_DWORD)v21)
    {
      v13 = v21;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v56[0] = v20;
        v14 = MEMORY[0x1E0C81028];
        v15 = "Invalid poc '%s'\n";
        goto LABEL_14;
      }
LABEL_22:
      MEMORY[0x1BCC9811C](v8, 0x1000C8077774924);
      return v13;
    }
    v22 = *((_QWORD *)&v58 + 1);
    v23 = sub_1B681AF08(*((const char **)&v58 + 1), (_BYTE *)(a1 + 108 * v3 + 631));
    if ((_DWORD)v23)
    {
      v13 = v23;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      *(_DWORD *)buf = 136315138;
      v56[0] = v22;
      v14 = MEMORY[0x1E0C81028];
      v15 = "Invalid qp_offset '%s'\n";
LABEL_14:
      v16 = 12;
LABEL_15:
      _os_log_error_impl(&dword_1B676B000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
      goto LABEL_22;
    }
    v24 = v59;
    v25 = (_BYTE *)(a1 + 108 * v3 + 632);
    if (sub_1B681AE88((const char *)v59, v25) || *v25 >= 0x11u)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 136315138;
      v56[0] = v24;
      v26 = MEMORY[0x1E0C81028];
      v27 = "Invalid number_ref_all '%s'\n";
      goto LABEL_35;
    }
    v29 = *((_QWORD *)&v59 + 1);
    if (sub_1B681AE88(*((const char **)&v59 + 1), (_BYTE *)(a1 + 108 * v3 + 633))
      || *(unsigned __int8 *)(a1 + 108 * v3 + 633) > *v25)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 136315138;
      v56[0] = v29;
      v26 = MEMORY[0x1E0C81028];
      v27 = "Invalid number_ref_active '%s'\n";
      goto LABEL_35;
    }
    if (*v25)
    {
      v30 = (const char **)v60;
      v31 = (_DWORD *)(a1 + 108 * v3 + 636);
      v32 = 6;
      do
      {
        v33 = *v30;
        v34 = sub_1B681AF8C(*v30, v31);
        if ((_DWORD)v34)
        {
          v13 = v34;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_22;
          *(_DWORD *)buf = 67109378;
          LODWORD(v56[0]) = v32 - 6;
          WORD2(v56[0]) = 2080;
          *(_QWORD *)((char *)v56 + 6) = v33;
          v14 = MEMORY[0x1E0C81028];
          v15 = "Invalid ref.ref_frames[%d] '%s'\n";
          goto LABEL_68;
        }
        v35 = v32 + 1;
        ++v30;
        v36 = v32 - 5;
        ++v31;
        ++v32;
      }
      while (v36 < *v25);
      if (!*v25)
        goto LABEL_53;
      v37 = 0;
      while (1)
      {
        v38 = *v30;
        v39 = sub_1B681AE88(*v30, (_BYTE *)(a1 + 108 * v3 + 700 + v37));
        if ((_DWORD)v39)
          break;
        ++v37;
        ++v30;
        if (v37 >= *v25)
        {
          v35 += v37;
          goto LABEL_53;
        }
      }
      v13 = v39;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        LODWORD(v56[0]) = v37;
        WORD2(v56[0]) = 2080;
        *(_QWORD *)((char *)v56 + 6) = v38;
        v14 = MEMORY[0x1E0C81028];
        v15 = "Invalid ref.ref_used[%d] '%s'\n";
LABEL_68:
        v16 = 18;
        goto LABEL_15;
      }
      goto LABEL_22;
    }
    v35 = 6;
LABEL_53:
    v53 = 0;
    v40 = __sa[v35];
    v41 = sub_1B681B00C(v40, &v53);
    v42 = v53;
    if (v41)
      v43 = 1;
    else
      v43 = v53 >= 3;
    if (v43)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 136315138;
      v56[0] = v40;
      v26 = MEMORY[0x1E0C81028];
      v27 = "Invalid rps scheme '%s'\n";
      goto LABEL_35;
    }
    v44 = v35 + 1;
    *(_BYTE *)(a1 + 108 * v3 + 716) = v53 != 0;
    if (v42)
    {
      v45 = __sa[v44];
      v46 = sub_1B681AF08(v45, (_BYTE *)(a1 + 108 * v3 + 717));
      if ((_DWORD)v46)
      {
        v13 = v46;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_22;
        *(_DWORD *)buf = 136315138;
        v56[0] = v45;
        v14 = MEMORY[0x1E0C81028];
        v15 = "Invalid delta_rps '%s'\n";
        goto LABEL_14;
      }
      v47 = v35;
      v48 = __sa[v35 + 2];
      v49 = (_BYTE *)(a1 + 108 * v3 + 718);
      if (sub_1B681AE88(v48, v49) || *v49 > 0x10u)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_21;
        *(_DWORD *)buf = 136315138;
        v56[0] = v48;
        v26 = MEMORY[0x1E0C81028];
        v27 = "Invalid num_ref_predict '%s'\n";
        goto LABEL_35;
      }
      if (*v49)
      {
        v50 = 0;
        v51 = a1 + 108 * v3 + 719;
        while (1)
        {
          v52 = (const char *)*((_QWORD *)&v58 + v47 + v50 + 1);
          if (sub_1B681AE88(v52, (_BYTE *)(v51 + v50)) || *(unsigned __int8 *)(v51 + v50) >= 3u)
            break;
          if (++v50 >= (unint64_t)*v49)
          {
            v44 = v47 + 3 + v50;
            goto LABEL_82;
          }
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          LODWORD(v56[0]) = v50;
          WORD2(v56[0]) = 2080;
          *(_QWORD *)((char *)v56 + 6) = v52;
          v26 = MEMORY[0x1E0C81028];
          v27 = "Invalid ref.predict_flag[%d] '%s'\n";
          v28 = 18;
LABEL_36:
          _os_log_error_impl(&dword_1B676B000, v26, OS_LOG_TYPE_ERROR, v27, buf, v28);
        }
LABEL_21:
        v13 = 4294954394;
        goto LABEL_22;
      }
      v44 = v35 + 3;
    }
LABEL_82:
    v13 = (uint64_t)__sa[v44];
    if (v13)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 136315138;
      v56[0] = v13;
      v26 = MEMORY[0x1E0C81028];
      v27 = "Trailing parameters in reference structure, starting with '%s'\n";
      goto LABEL_35;
    }
    ++*(_DWORD *)(a1 + 264);
    goto LABEL_22;
  }
  return 4294954392;
}

uint64_t sub_1B681AAEC(uint64_t a1, int a2, char *a3)
{
  uint64_t result;

  *(_BYTE *)(a1 + 436) = 0;
  if (!a3)
    return 0;
  if (sscanf(a3, "%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu:%u:%u", a1 + 444, a1 + 450, a1 + 446, a1 + 452, a1 + 448, a1 + 454, a1 + 456, a1 + 458, a1 + 460, a1 + 464) != 10)return 4294954394;
  result = 0;
  *(_BYTE *)(a1 + 436) = 1;
  return result;
}

uint64_t sub_1B681AB8C(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;
  char *v9;

  if (a3)
  {
    v4 = a3;
    v5 = 0;
    v9 = 0;
    v6 = (_DWORD *)(a1 + 7820);
    do
    {
      if (v5 == 4)
        return 4294954394;
      v7 = v5;
      if (sub_1B681ADEC(v4, ++v6, &v9, 0, 0x33u))
        return 4294954394;
      v5 = v7 + 1;
      v4 = v9 + 1;
    }
    while (*v9 == 58);
    if (v7 <= 2)
    {
      do
        *(_DWORD *)(a1 + 7824 + 4 * v5++) = *v6;
      while (v5 != 4);
    }
    return 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 7832) = -1;
    *(_QWORD *)(a1 + 7824) = -1;
  }
  return result;
}

uint64_t sub_1B681AC54(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char *v9;

  if (a3)
  {
    v4 = a3;
    v5 = 0;
    v9 = 0;
    v6 = (_DWORD *)(a1 + 7836);
    do
    {
      if (v5 == 4)
        return 4294954394;
      v7 = v5;
      if (sub_1B681ADEC(v4, ++v6, &v9, -12, 0xCu))
        return 4294954394;
      v5 = v7 + 1;
      v4 = v9 + 1;
    }
    while (*v9 == 58);
    if (v7 <= 2)
    {
      do
        *(_DWORD *)(a1 + 7840 + 4 * v5++) = *v6;
      while (v5 != 4);
    }
  }
  else
  {
    memset_pattern16((void *)(a1 + 7840), &unk_1B6918100, 0x10uLL);
  }
  return 0;
}

uint64_t sub_1B681AD24(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;
  char *v9;

  if (a3)
  {
    v4 = a3;
    v5 = 0;
    v9 = 0;
    v6 = (_DWORD *)(a1 + 7852);
    do
    {
      if (v5 == 4)
        return 4294954394;
      v7 = v5;
      if (sub_1B681ADEC(v4, ++v6, &v9, 0, 0x33u))
        return 4294954394;
      v5 = v7 + 1;
      v4 = v9 + 1;
    }
    while (*v9 == 58);
    if (v7 <= 2)
    {
      do
        *(_DWORD *)(a1 + 7856 + 4 * v5++) = *v6;
      while (v5 != 4);
    }
    return 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 7864) = -1;
    *(_QWORD *)(a1 + 7856) = -1;
  }
  return result;
}

uint64_t sub_1B681ADEC(const char *a1, _DWORD *a2, char **a3, int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t result;
  int *v12;

  *__error() = 0;
  v10 = strtol(a1, a3, 10);
  if (v10)
  {
    result = 4294954394;
    if (v10 < a4)
      return result;
    goto LABEL_6;
  }
  v12 = __error();
  result = 4294954394;
  if (a4 <= 0 && !*v12)
  {
LABEL_6:
    if (v10 <= a5)
    {
      result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t sub_1B681AE88(const char *a1, _BYTE *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (!a1 || !*a1)
    return 4294954394;
  v3 = strtoimax(a1, &__endptr, 0);
  v4 = v3;
  if (!__endptr)
  {
    if (v3 <= 0xFF)
    {
LABEL_10:
      result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && v4 <= 0xFF)
    goto LABEL_10;
  return result;
}

uint64_t sub_1B681AF08(const char *a1, _BYTE *a2)
{
  intmax_t v3;
  uint64_t v4;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (!a1 || !*a1)
    return 4294954394;
  v3 = strtoimax(a1, &__endptr, 0);
  v4 = v3;
  if (!__endptr)
  {
    if (v3 == (char)v3)
    {
LABEL_10:
      result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  result = 4294954394;
  if (!*__endptr && v4 >= -128 && v4 <= 127)
    goto LABEL_10;
  return result;
}

uint64_t sub_1B681AF8C(const char *a1, _DWORD *a2)
{
  intmax_t v3;
  int v4;
  BOOL v5;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (a1 && *a1)
  {
    v3 = strtoimax(a1, &__endptr, 0);
    v4 = v3;
    if (__endptr)
    {
      if (*__endptr)
        v5 = 1;
      else
        v5 = v3 < (uint64_t)0xFFFFFFFF80000000;
      if (v5 || v3 > 0x7FFFFFFF)
        return 4294954394;
LABEL_14:
      result = 0;
      *a2 = v4;
      return result;
    }
    if (v3 == (int)v3)
      goto LABEL_14;
  }
  return 4294954394;
}

uint64_t sub_1B681B00C(const char *a1, _DWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (!a1 || !*a1)
    return 4294954394;
  v3 = strtoimax(a1, &__endptr, 0);
  v4 = v3;
  if (!__endptr)
  {
    if (!HIDWORD(v3))
    {
LABEL_10:
      result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && !HIDWORD(v4))
    goto LABEL_10;
  return result;
}

uint64_t sub_1B681B08C(const char *a1, _BYTE *a2, char **a3, int a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t result;
  int *v12;

  *__error() = 0;
  v10 = strtol(a1, a3, 10);
  if (v10)
  {
    result = 4294954394;
    if (v10 < a4)
      return result;
    goto LABEL_6;
  }
  v12 = __error();
  result = 4294954394;
  if (a4 <= 0 && !*v12)
  {
LABEL_6:
    if (v10 <= a5)
    {
      result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t sub_1B681B128(const char *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t result;

  *__error() = 0;
  v6 = strtol(a1, a3, 10);
  if (v6)
  {
    v7 = v6;
    if ((unint64_t)(v6 - 0x8000) >= 0xFFFFFFFFFFFF8001)
    {
      result = 0;
      *a2 = v7;
      return result;
    }
  }
  else
  {
    __error();
  }
  return 4294954394;
}

double sub_1B681B198(uint64_t a1)
{
  _WORD *v2;
  double result;

  *(_DWORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  v2 = (_WORD *)(a1 + 7808);
  *(_BYTE *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(_WORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 124) = 1;
  *(_BYTE *)(a1 + 127) = 2;
  *(_BYTE *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 96) = 0x402E000000000000;
  *(_BYTE *)(a1 + 58) = 1;
  *(_BYTE *)(a1 + 60) = 1;
  *(_BYTE *)(a1 + 250) = 1;
  *(_BYTE *)(a1 + 257) = 0;
  *(_BYTE *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(_BYTE *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 254) = 1;
  *(_BYTE *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 348) = 1;
  *(_BYTE *)(a1 + 351) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 376) = 1;
  *(_BYTE *)(a1 + 351) = _os_feature_enabled_impl();
  *(_WORD *)(a1 + 172) = 512;
  *(_BYTE *)(a1 + 252) = 2;
  *(_BYTE *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2)
    *(_BYTE *)(a1 + 525) = 1;
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(_BYTE *)(a1 + 55) = 2;
  *(_BYTE *)(a1 + 235) = 1;
  *(_BYTE *)(a1 + 245) = 1;
  *(_BYTE *)(a1 + 253) = 1;
  *(_BYTE *)(a1 + 227) = 1;
  *(_BYTE *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(_BYTE *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(_BYTE *)(a1 + 248) = 0;
  result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *v2 = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

double sub_1B681B2E4(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 64) = 42;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 127) = 2;
  *(_BYTE *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 96) = 0x402E000000000000;
  *(_BYTE *)(a1 + 58) = 0;
  *(_BYTE *)(a1 + 60) = 1;
  *(_BYTE *)(a1 + 250) = 1;
  *(_BYTE *)(a1 + 257) = 0;
  *(_BYTE *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(_BYTE *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 254) = 1;
  *(_BYTE *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 348) = 1;
  *(_BYTE *)(a1 + 351) = 0;
  *(_BYTE *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 512) = 0x200000002;
  *(_BYTE *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 172) = 512;
  *(_BYTE *)(a1 + 252) = 2;
  *(_BYTE *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2)
    *(_BYTE *)(a1 + 525) = 1;
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(_BYTE *)(a1 + 55) = 2;
  *(_BYTE *)(a1 + 235) = 1;
  *(_BYTE *)(a1 + 245) = 1;
  *(_BYTE *)(a1 + 253) = 1;
  *(_BYTE *)(a1 + 227) = 1;
  *(_BYTE *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(_BYTE *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(_BYTE *)(a1 + 248) = 0;
  result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *(_WORD *)(a1 + 7808) = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

uint64_t sub_1B681B3F8(uint64_t result)
{
  *(_DWORD *)(result + 64) = 20;
  *(_BYTE *)(result + 104) = 1;
  *(_BYTE *)(result + 7872) = 0;
  *(_DWORD *)(result + 168) = 84018691;
  *(_BYTE *)(result + 124) = 1;
  *(_BYTE *)(result + 525) = 1;
  *(_BYTE *)(result + 127) = 2;
  *(_BYTE *)(result + 225) = 1;
  *(_WORD *)(result + 234) = 2;
  *(_BYTE *)(result + 216) = 1;
  *(_QWORD *)(result + 96) = 0x402E000000000000;
  *(_BYTE *)(result + 58) = 0;
  *(_BYTE *)(result + 60) = 1;
  *(_BYTE *)(result + 250) = 1;
  *(_BYTE *)(result + 257) = 0;
  *(_BYTE *)(result + 259) = 1;
  *(_WORD *)(result + 128) = 0;
  *(_WORD *)(result + 569) = 258;
  *(_BYTE *)(result + 571) = 2;
  *(_DWORD *)(result + 592) = 0;
  *(_BYTE *)(result + 254) = 1;
  *(_BYTE *)(result + 236) = 1;
  *(_BYTE *)(result + 348) = 1;
  *(_BYTE *)(result + 351) = 0;
  *(_BYTE *)(result + 59) = 1;
  *(_DWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 512) = 0x200000002;
  *(_BYTE *)(result + 376) = 1;
  *(_WORD *)(result + 172) = 512;
  *(_BYTE *)(result + 252) = 2;
  *(_BYTE *)(result + 523) = 1;
  if (*(_DWORD *)(result + 508) == 2)
    *(_BYTE *)(result + 525) = 1;
  *(_WORD *)(result + 608) = 257;
  *(_DWORD *)(result + 604) = 16843009;
  *(_BYTE *)(result + 55) = 2;
  *(_BYTE *)(result + 235) = 1;
  *(_BYTE *)(result + 245) = 1;
  *(_BYTE *)(result + 253) = 1;
  *(_BYTE *)(result + 227) = 1;
  *(_BYTE *)(result + 260) = 1;
  *(_BYTE *)(result + 614) = 1;
  *(_DWORD *)(result + 610) = 16843009;
  *(_BYTE *)(result + 256) = 0;
  *(_WORD *)(result + 615) = 1;
  *(_BYTE *)(result + 248) = 0;
  *(_WORD *)(result + 7804) = 0;
  *(_DWORD *)(result + 7806) = 16843009;
  *(_DWORD *)(result + 7812) = 12;
  return result;
}

double sub_1B681B508(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 64) = 39;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 127) = 2;
  *(_BYTE *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 96) = 0x402E000000000000;
  *(_BYTE *)(a1 + 58) = 1;
  *(_BYTE *)(a1 + 60) = 1;
  *(_BYTE *)(a1 + 250) = 1;
  *(_BYTE *)(a1 + 257) = 0;
  *(_BYTE *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(_BYTE *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 254) = 1;
  *(_BYTE *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 348) = 1;
  *(_BYTE *)(a1 + 351) = 0;
  *(_BYTE *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 512) = 0x200000002;
  *(_BYTE *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 172) = 512;
  *(_BYTE *)(a1 + 252) = 2;
  *(_BYTE *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2)
    *(_BYTE *)(a1 + 525) = 1;
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(_BYTE *)(a1 + 55) = 2;
  *(_BYTE *)(a1 + 235) = 1;
  *(_BYTE *)(a1 + 245) = 1;
  *(_BYTE *)(a1 + 253) = 1;
  *(_BYTE *)(a1 + 227) = 1;
  *(_BYTE *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(_BYTE *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(_BYTE *)(a1 + 248) = 0;
  result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *(_WORD *)(a1 + 7808) = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

double sub_1B681B61C(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 64) = 38;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 525) = 0;
  *(_BYTE *)(a1 + 127) = 2;
  *(_BYTE *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 96) = 0x404E000000000000;
  *(_BYTE *)(a1 + 58) = 0;
  *(_BYTE *)(a1 + 60) = 1;
  *(_BYTE *)(a1 + 250) = 1;
  *(_BYTE *)(a1 + 257) = 0;
  *(_BYTE *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(_BYTE *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 254) = 1;
  *(_BYTE *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 348) = 1;
  *(_BYTE *)(a1 + 351) = 0;
  *(_BYTE *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 512) = 0x200000002;
  *(_BYTE *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 172) = 512;
  *(_BYTE *)(a1 + 252) = 2;
  *(_BYTE *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2)
    *(_BYTE *)(a1 + 525) = 1;
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(_BYTE *)(a1 + 55) = 2;
  *(_BYTE *)(a1 + 235) = 1;
  *(_BYTE *)(a1 + 245) = 1;
  *(_BYTE *)(a1 + 253) = 1;
  *(_BYTE *)(a1 + 227) = 1;
  *(_BYTE *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(_BYTE *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(_BYTE *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 7808) = 257;
  *(_QWORD *)&result = 16777217;
  *(_DWORD *)(a1 + 7804) = 16777217;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

double sub_1B681B738(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 64) = 43;
  *(_BYTE *)(a1 + 104) = 3;
  *(_BYTE *)(a1 + 7872) = 0;
  *(_QWORD *)(a1 + 7840) = 0x600000000;
  *(_DWORD *)(a1 + 7848) = 3;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 127) = 2;
  *(_BYTE *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 96) = 0x402E000000000000;
  *(_BYTE *)(a1 + 58) = 0;
  *(_WORD *)(a1 + 115) = 255;
  *(_DWORD *)(a1 + 120) = 11;
  *(_BYTE *)(a1 + 60) = 1;
  *(_BYTE *)(a1 + 250) = 1;
  *(_BYTE *)(a1 + 257) = 0;
  *(_BYTE *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(_BYTE *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 254) = 1;
  *(_BYTE *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 348) = 1;
  *(_BYTE *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 376) = 1;
  *(_BYTE *)(a1 + 351) = 0;
  *(_WORD *)(a1 + 172) = 512;
  *(_BYTE *)(a1 + 252) = 2;
  *(_BYTE *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2)
    *(_BYTE *)(a1 + 525) = 1;
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(_BYTE *)(a1 + 55) = 2;
  *(_BYTE *)(a1 + 235) = 1;
  *(_BYTE *)(a1 + 245) = 1;
  *(_BYTE *)(a1 + 253) = 1;
  *(_BYTE *)(a1 + 227) = 1;
  *(_BYTE *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(_BYTE *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(_BYTE *)(a1 + 248) = 0;
  result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *(_WORD *)(a1 + 7808) = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

_QWORD *sub_1B681B86C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E6A14DC0;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[1];
      (*(void (**)(_QWORD *))(*v2 + 16))(v2);
      v2 = v3;
    }
    while (v3);
  }
  return a1;
}

void sub_1B681B8B4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *a1 = &off_1E6A14DC0;
  v1 = (_QWORD *)a1[1];
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)v1[1];
      (*(void (**)(_QWORD *))(*v1 + 16))(v1);
      v1 = v2;
    }
    while (v2);
  }
  JUMPOUT(0x1BCC9814CLL);
}

double sub_1B681B90C(uint64_t a1)
{
  int v1;
  BOOL v2;
  double result;

  *(_QWORD *)(a1 + 573) = 0x101010101010101;
  v1 = *(_DWORD *)(a1 + 508);
  *(_BYTE *)(a1 + 581) = v1 == 1;
  *(_BYTE *)(a1 + 582) = v1 == 2;
  *(_BYTE *)(a1 + 584) = v1 == 2;
  v2 = v1 == 2 && *(_BYTE *)(a1 + 224) != 0;
  *(_BYTE *)(a1 + 585) = v2;
  *(_BYTE *)(a1 + 583) = v1 != 0;
  *(_QWORD *)&result = 1287;
  *(_DWORD *)(a1 + 587) = 1287;
  return result;
}

uint64_t sub_1B681B970(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  int v22;
  unsigned int v23;
  __int16 *v24;
  __int16 v25;
  int v26;
  int v27;
  double v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  _BOOL4 v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int64_t v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  int *v83;
  _DWORD *v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  char v107;
  int v108;
  uint64_t v109;
  BOOL v110;
  int v111;
  char v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  _BOOL4 v118;
  double v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  int v123;
  uint8_t buf[4];
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  _DWORD v130[4];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int16 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int16 v141;
  int v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 216) && !*(_DWORD *)(a1 + 180)
    || *(__int16 *)(a1 + 86) < 1
    || *(__int16 *)(a1 + 88) < 1
    || *(double *)(a1 + 96) <= 0.0)
  {
    return 4294954387;
  }
  v2 = *(char *)(a1 + 105);
  result = 4294954387;
  if (v2 > 51)
    return result;
  v4 = -6 * *(char *)(a1 + 314) + 48;
  if (v4 > v2)
    return result;
  v5 = *(char *)(a1 + 106);
  if (v5 > 51)
    return result;
  if (v4 > v5)
    return result;
  if (*(int *)(a1 + 132) < 1)
    return result;
  if ((*(_DWORD *)(a1 + 136) & 0x80000000) != 0)
    return result;
  v6 = *(unsigned __int8 *)(a1 + 168);
  if ((v6 - 3) > 3)
    return result;
  v7 = *(unsigned __int8 *)(a1 + 169);
  if (v7 < v6)
    return result;
  if ((v7 - 7) < 0xFFFFFFFD)
    return result;
  v8 = *(unsigned __int8 *)(a1 + 170);
  if ((v8 - 2) > 3)
    return result;
  v9 = *(unsigned __int8 *)(a1 + 171);
  if (v9 < v8)
    return result;
  if (v9 - 6 < 0xFFFFFFFC)
    return result;
  v10 = v7 - v8;
  if (v10 < *(unsigned __int8 *)(a1 + 172))
    return result;
  if (v7 < v9)
    return result;
  if (v10 < *(unsigned __int8 *)(a1 + 173))
    return result;
  HIDWORD(v12) = *(_DWORD *)(a1 + 240);
  LODWORD(v12) = HIDWORD(v12) - 4;
  v11 = v12 >> 2;
  if (v11 > 7)
    return result;
  if (((1 << v11) & 0x8B) == 0)
    return result;
  if (*(unsigned __int8 *)(a1 + 570) > 1u)
    return result;
  if (*(char *)(a1 + 571) > 4)
    return result;
  v121 = a1;
  v13 = *(unsigned __int8 *)(a1 + 124);
  if (v13 > 6)
    return result;
  if (v13)
  {
    v14 = *(char *)(v121 + 127);
    if (v14 < 0 || v7 - v6 < v14 || *(unsigned __int8 *)(v121 + 125) > 4u || *(unsigned __int8 *)(v121 + 126) > 3u)
      return result;
  }
  v15 = *(_DWORD *)(v121 + 508);
  if (v15 > 2)
    return result;
  if (v15 == 1)
  {
    v16 = *(_DWORD *)(v121 + 512);
    goto LABEL_36;
  }
  v16 = *(_DWORD *)(v121 + 512);
  if (v15 && *(_BYTE *)(v121 + 57))
  {
LABEL_36:
    if (v16 > 0)
      return result;
  }
  if ((v16 & 0x80000000) == 0 && *(int *)(v121 + 516) >= 1)
  {
    v17 = *(_DWORD *)(v121 + 504);
    if (v17 == 1)
    {
      if (qword_1EDBB4CB8 != -1)
        dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
      if ((dword_1EDBB4CC4 - 7) >= 0xB)
      {
        if ((dword_1EDBB4CC4 - 2) < 5)
          return 4294954387;
      }
      else if (*(_DWORD *)(v121 + 508) != 2)
      {
        return 4294954387;
      }
    }
    else
    {
      if (v17)
        return result;
      if (qword_1EDBB4CB8 != -1)
        dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
      if ((dword_1EDBB4CC4 - 2) >= 5)
      {
        if ((dword_1EDBB4CC4 - 7) < 2 && *(_DWORD *)(v121 + 508) == 2)
          return 4294954387;
      }
      else if (*(_DWORD *)(v121 + 508))
      {
        return 4294954387;
      }
    }
    v18 = *(_DWORD *)(v121 + 592);
    if (v18 > 3 || v18 >= 1 && (*(int *)(v121 + 508) < 1 || !*(_BYTE *)(v121 + 216) && !*(_DWORD *)(v121 + 596)))
      return 4294954387;
    if (*(unsigned __int8 *)(v121 + 55) > 3u
      || *(_BYTE *)(v121 + 55) && *(unsigned __int8 *)(v121 + 169) - *(unsigned __int8 *)(v121 + 168) > 3)
    {
      return 4294954387;
    }
    if (*(_BYTE *)(v121 + 351) && *(char *)(v121 + 124) < 1)
      return 4294954387;
    v19 = *(double *)(v121 + 544);
    if (v19 != 1.0 && v19 >= 0.0 && v19 != 0.5)
      return 4294954387;
    v20 = *(double *)(v121 + 552);
    if (v20 < 0.0 || (result = 4294954387, v20 != 0.0) && v20 < 1.0)
    {
      if (v19 > 0.0 && v19 < 1.0 && *(int *)(v121 + 560) > 1)
        return 4294954387;
      v21 = *(_DWORD *)(v121 + 144);
      if (v21 <= 1)
        v21 = 1;
      *(_DWORD *)(v121 + 144) = v21;
      v22 = *(char *)(v121 + 569);
      if (*(_BYTE *)(v121 + 53) && v22 >= 1)
      {
        *(_DWORD *)(v121 + 240) = 8;
        goto LABEL_86;
      }
      if (v22 != -1)
      {
LABEL_86:
        if (!*(_BYTE *)(v121 + 316))
          *(_BYTE *)(v121 + 316) = *(_BYTE *)(v121 + 314);
        if (!*(_BYTE *)(v121 + 317))
          *(_BYTE *)(v121 + 317) = *(_BYTE *)(v121 + 315);
        v26 = *(__int16 *)(v121 + 86);
        v27 = *(__int16 *)(v121 + 88);
        v28 = *(double *)(v121 + 96) * (double)(v27 * v26);
        *(_BYTE *)(v121 + 618) = v28 > 361758720.0;
        v29 = *(_DWORD *)(v121 + 64);
        if (v29 != 20)
        {
          if (v29 == 42)
            goto LABEL_95;
          if (v29 != 38)
            goto LABEL_103;
        }
        if (v28 > 361758720.0)
          *(_BYTE *)(v121 + 525) = 2;
LABEL_95:
        if (*(int *)(v121 + 540) >= 2)
          *(_DWORD *)(v121 + 516) = 4;
        if (((1 << v29) & 0x44000100000) != 0)
        {
          if (v28 <= 361758720.0)
          {
            if (v29 != 20)
              goto LABEL_103;
            v30 = 1;
            *(_DWORD *)(v121 + 512) = 1;
          }
          else
          {
            v30 = 5;
          }
          *(_DWORD *)(v121 + 516) = v30;
        }
LABEL_103:
        v31 = *(_DWORD *)(v121 + 504);
        if (v31)
        {
          if (v31 == 1)
          {
            v122 = v27;
            v123 = v26;
            sub_1B680EA24(v121, &v123, &v122);
            v32 = *(char *)(v121 + 149);
            v33 = *(char *)(v121 + 150);
            if ((v32 & v33) < 0 != v34)
              v35 = -1;
            else
              v35 = v33 + v32;
            if (sub_1B6890AE8((uint64_t)v130, (int)*(double *)(v121 + 96), *(_DWORD *)(v121 + 180), v123 >> 4, v122 >> 4, *(_DWORD *)(v121 + 80), *(unsigned __int16 *)(v121 + 84), v35))return 4294954394;
            v112 = v142;
            v113 = v142 + 1;
            v114 = *(char *)(v121 + 149);
            if (v114 < 0
              || (v115 = *(char *)(v121 + 150), v115 < 0)
              || *(char *)(v121 + 151) < 0
              || *(char *)(v121 + 152) < 0)
            {
              if (*(_BYTE *)(v121 + 603))
              {
                v115 = (char)(v142 - 1);
                *(_BYTE *)(v121 + 150) = v142 - 1;
                if (v115 <= 1)
                {
                  if (dword_1EF137CD0 >= 2)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Number of LTR %d is too small. Disable LTR.\n", (char)(v112 - 1));
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                    {
                      v116 = *(char *)(v121 + 150);
                      *(_DWORD *)buf = 67109120;
                      v125 = v116;
                      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Number of LTR %d is too small. Disable LTR.\n", buf, 8u);
                    }
                  }
                  LOBYTE(v115) = 0;
                  *(_BYTE *)(v121 + 150) = 0;
                  *(_BYTE *)(v121 + 603) = 0;
                }
              }
              else
              {
                LOBYTE(v115) = 0;
                *(_BYTE *)(v121 + 150) = 0;
              }
              LOBYTE(v114) = v112 - v115;
              *(_BYTE *)(v121 + 149) = v112 - v115;
              *(_WORD *)(v121 + 151) = 257;
            }
            else if (v115 + v114 >= v113)
            {
              return 4294954394;
            }
            if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109632;
              v125 = v113;
              v126 = 1024;
              v127 = v115;
              v128 = 1024;
              v129 = (char)v114;
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "max_dpb_size: %d\tnumber_long_term_ref: %d\tnumber_short_term_ref: %d\n", buf, 0x14u);
            }
          }
        }
        else if (*(char *)(v121 + 149) < 0
               || *(char *)(v121 + 150) < 0
               || *(char *)(v121 + 151) < 0
               || *(char *)(v121 + 152) < 0)
        {
          if (v29 <= 0x2B && ((1 << v29) & 0xCC000100002) != 0)
          {
            if (*(int *)(v121 + 540) >= 2)
              v36 = 15;
            else
              v36 = 2;
            *(_BYTE *)(v121 + 149) = v36;
            *(_WORD *)(v121 + 150) = 512;
            *(_BYTE *)(v121 + 152) = 2;
            memset(v130, 0, 15);
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v139 = 0u;
            v140 = 0u;
            v141 = 0;
            sub_1B6802BCC((uint64_t)v130, v121);
            v37 = BYTE8(v135);
            if (BYTE8(v135) >= 0x10u)
              v37 = 16;
            if (v37 <= 1)
              LOBYTE(v37) = 1;
            *(_BYTE *)(v121 + 149) = v37 - 1;
            *(_BYTE *)(v121 + 150) = 0;
            v38 = *(_DWORD *)(v121 + 64);
            if (v38 <= 0x2A && ((1 << v38) & 0x44000100000) != 0 && *(_BYTE *)(v121 + 618))
            {
              v39 = 1;
            }
            else if (*(int *)(v121 + 560) > 1)
            {
              v39 = 1;
            }
            else
            {
              v39 = 2;
            }
            *(_BYTE *)(v121 + 151) = v39;
            *(_BYTE *)(v121 + 152) = v39;
          }
          else
          {
            *(_DWORD *)(v121 + 149) = 16842753;
          }
        }
        if (*(_BYTE *)(v121 + 624))
        {
          *(_BYTE *)(v121 + 257) = 1;
        }
        else
        {
          bzero((void *)(v121 + 628), 0x1B08uLL);
          *(_DWORD *)(v121 + 304) = 1;
          *(_DWORD *)(v121 + 272) = 1;
          if (*(char *)(v121 + 149) >= 1)
          {
            v40 = 0;
            v41 = v121 + 700;
            v42 = 1;
            do
            {
              v43 = *(_DWORD *)(v121 + 540);
              v44 = v42 <= v43;
              if (v43 <= 1)
                v44 = 0;
              v45 = v43 != 1 && !v44;
              if (!v45)
              {
                v46 = v121 + 108 * v40;
                *(_BYTE *)(v46 + 628) = 0;
                *(_BYTE *)(v46 + 630) = v42;
                if (*(_BYTE *)(v121 + 72))
                {
                  if (*(_DWORD *)(v121 + 76))
                    v47 = 82;
                  else
                    v47 = 76;
                }
                else
                {
                  v47 = 80;
                }
                v48 = v40;
                v49 = (_BYTE *)(v121 + 108 * v40);
                v49[629] = v47;
                v49[631] = *(_BYTE *)(v121 + 106) - *(_BYTE *)(v121 + 105);
                v49[716] = 0;
                v49[632] = v42;
                v50 = *(char *)(v121 + 151);
                if (v50 >= (char)v42)
                  LOBYTE(v50) = v42;
                v49[633] = v50;
                if ((_BYTE)v42)
                {
                  v51 = 0;
                  v52 = -1;
                  do
                  {
                    *(_DWORD *)(v41 + 108 * v48 + 4 * v51 - 64) = v52;
                    *(_BYTE *)(v41 + 108 * *(int *)(v121 + 7544) + v51) = (uint64_t)v51 < *(char *)(v121 + 151);
                    v48 = *(int *)(v121 + 7544);
                    --v52;
                    ++v51;
                  }
                  while (v51 < *(unsigned __int8 *)(v121 + 108 * v48 + 632));
                  v43 = *(_DWORD *)(v121 + 540);
                  v40 = *(_DWORD *)(v121 + 7544);
                }
                *(_DWORD *)(v121 + 7544) = ++v40;
              }
              v53 = v42 < v43 || v43 < 2;
              if (!v53)
              {
                v54 = v121 + 108 * v40;
                *(_DWORD *)(v54 + 628) = *(_DWORD *)(v54 + 520);
                *(_BYTE *)(v54 + 716) = *(_BYTE *)(v54 + 608);
                *(_BYTE *)(v54 + 632) = v42;
                if (*(char *)(v121 + 151) >= (char)v42)
                  v55 = v42;
                else
                  v55 = *(_BYTE *)(v121 + 151);
                *(_BYTE *)(v54 + 633) = v55;
                if ((_BYTE)v42)
                {
                  v56 = 0;
                  v57 = 0;
                  v58 = v40;
                  v59 = v55 - v42 / v43;
                  v60 = -1;
                  do
                  {
                    *(_DWORD *)(v41 + 108 * v58 + 4 * v56 - 64) = v60;
                    if ((uint64_t)v56 >= v59 && ((int)v56 + 1) % *(_DWORD *)(v121 + 540))
                    {
                      v61 = 0;
                      v62 = *(_DWORD *)(v121 + 7544);
                    }
                    else
                    {
                      v62 = *(_DWORD *)(v121 + 7544);
                      v61 = v57 < *(unsigned __int8 *)(v121 + 108 * v62 + 633);
                    }
                    *(_BYTE *)(v41 + 108 * v62 + v56) = v61;
                    v58 = *(int *)(v121 + 7544);
                    v57 += *(unsigned __int8 *)(v41 + 108 * v58 + v56);
                    --v60;
                    ++v56;
                  }
                  while (v56 < *(unsigned __int8 *)(v121 + 108 * v58 + 632));
                  v40 = *(_DWORD *)(v121 + 7544);
                }
                *(_DWORD *)(v121 + 7544) = ++v40;
              }
              v53 = v42++ < *(char *)(v121 + 149);
            }
            while (v53);
          }
        }
        *(_DWORD *)(v121 + 7540) = 0;
        v63 = *(_DWORD *)(v121 + 268);
        if (v63 >= 1)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          do
          {
            v130[0] = 0;
            v67 = v121 + 4 * v65;
            v68 = *(_DWORD *)(v67 + 272);
            if (v68 < 1)
            {
              v71 = v64;
            }
            else
            {
              v69 = 0;
              v70 = 0;
              v71 = v64;
              v72 = 1;
              do
              {
                v73 = v70 % v68 + v66;
                v74 = v121 + 108 * v73;
                v75 = v70 / v68 * v68 + *(unsigned __int8 *)(v74 + 630);
                v76 = *(unsigned __int8 *)(v74 + 632);
                if (*(_BYTE *)(v74 + 632))
                {
                  v77 = 0;
                  v78 = (unsigned __int8 *)(v74 + 632);
                  v79 = 4 * v72;
                  while (1)
                  {
                    v80 = *(_DWORD *)(v121 + 108 * (int)v73 + 4 * v77 + 636) + v75;
                    if (v80 < 0)
                      break;
                    v81 = 0;
                    while (v80 != v130[v81 / 4])
                    {
                      v81 += 4;
                      if (v79 == v81)
                        return 0;
                    }
                    if (++v77 == v76)
                      goto LABEL_182;
                  }
                  v87 = 0;
                  v88 = 0;
                  v89 = *(int *)(v121 + 7544) + (uint64_t)(int)v71;
                  v90 = v121 + 628 + 108 * v89;
                  *(_BYTE *)(v90 + 2) = v75;
                  v91 = (_BYTE *)(v90 + 2);
                  v92 = v121 + 628 + 108 * (int)v73;
                  *(v91 - 1) = *(_BYTE *)(v92 + 1);
                  v91[1] = *(_BYTE *)(v92 + 3);
                  v93 = v121 + 108 * (int)v73;
                  do
                  {
                    v94 = *(_DWORD *)(v93 + 4 * v87 + 636);
                    if (v94 > ~v75)
                    {
                      v76 = v121 + 108 * v89 + 628;
                      *(_DWORD *)(v76 + 4 * v88 + 8) = v94;
                      *(_BYTE *)(v76 + v88++ + 72) = *(_BYTE *)(v93 + v87 + 700);
                      LODWORD(v76) = *v78;
                    }
                    ++v87;
                  }
                  while (v87 < v76);
                  v95 = *(_DWORD *)(v121 + 7540);
                  v96 = v121 + 628;
                  v97 = v121 + 628 + 108 * v89;
                  *(_BYTE *)(v97 + 4) = v88;
                  *(_BYTE *)(v97 + 5) = *(_BYTE *)(v121 + 628 + 108 * (int)v73 + 5);
                  if (v95)
                  {
                    v98 = 0;
                    v99 = (int)v89 - 1;
                    v100 = v96 + 108 * v99;
                    v101 = *(unsigned __int8 *)(v100 + 2);
                    v102 = *(unsigned __int8 *)(v100 + 4);
                    v103 = (_BYTE *)(v96 + 108 * v89);
                    v103[90] = v102 + 1;
                    v103[88] = 1;
                    v103[89] = v101 - *v91;
                    v104 = v121 + 108 * v89;
                    do
                    {
                      v105 = v101;
                      if (v98 != v102)
                        v105 = *(_DWORD *)(v121 + 108 * v99 + 4 * v98 + 636) + v101;
                      if ((_BYTE)v88)
                      {
                        v106 = 0;
                        v107 = 0;
                        do
                        {
                          if (v105 == *(_DWORD *)(v104 + 4 * v106 + 636) + v75)
                          {
                            if (*(_BYTE *)(v104 + v106 + 700))
                              v107 = 1;
                            else
                              v107 = 2;
                          }
                          ++v106;
                        }
                        while (v88 != v106);
                      }
                      else
                      {
                        v107 = 0;
                      }
                      *(_BYTE *)(v121 + 108 * v89 + v98 + 719) = v107;
                      v45 = v98++ == v102;
                    }
                    while (!v45);
                    v108 = *(_DWORD *)(v121 + 7540);
                  }
                  else
                  {
                    v108 = 0;
                    v109 = v121 + 108 * v89;
                    *(_BYTE *)(v109 + 716) = 0;
                    *(_BYTE *)(v109 + 718) = 0;
                  }
                  v71 = (v108 + 1);
                  *(_DWORD *)(v121 + 7540) = v71;
                  v73 = *(_DWORD *)(v121 + 7544) + v108;
                  LODWORD(v76) = *(unsigned __int8 *)(v121 + 108 * v73 + 632);
                }
                else
                {
LABEL_182:
                  ++v69;
                }
                v82 = v76;
                if ((_DWORD)v76)
                {
                  v83 = (int *)(v121 + 636 + 108 * (int)v73);
                  v84 = v130;
                  v85 = v82;
                  do
                  {
                    v86 = *v83++;
                    *v84++ = v86 + v75;
                    --v85;
                  }
                  while (v85);
                }
                v130[v82] = v75;
                v72 = v82 + 1;
                ++v70;
                v68 = *(_DWORD *)(v67 + 272);
              }
              while (v69 < v68);
              v63 = *(_DWORD *)(v121 + 268);
            }
            v66 += v68;
            *(_DWORD *)(v67 + 7548) = v71 - v64;
            ++v65;
            v64 = v71;
          }
          while (v65 < v63);
        }
        if (*(_BYTE *)(v121 + 349) && *(_BYTE *)(v121 + 350))
          return 0;
        *(_DWORD *)(v121 + 581) = 0;
        *(_QWORD *)(v121 + 573) = 0;
        v110 = *(_BYTE *)(v121 + 224) != 0;
        *(_BYTE *)(v121 + 585) = v110;
        *(_WORD *)(v121 + 587) = 1287;
        *(_BYTE *)(v121 + 589) = 0;
        if (*(_BYTE *)(v121 + 124) != 5 || *(char *)(v121 + 569) >= 2)
        {
          v111 = *(_DWORD *)(v121 + 508);
          if (v111 == 2)
          {
            if (!*(_DWORD *)(v121 + 504))
              goto LABEL_244;
          }
          else
          {
            if (*(_BYTE *)(v121 + 523))
              *(_BYTE *)(v121 + 523) = 0;
            if (!*(_DWORD *)(v121 + 504))
            {
              if (v111 >= 1)
LABEL_244:
                sub_1B681B90C(v121);
LABEL_245:
              if (*(__int16 *)(v121 + 86) > 640 || *(__int16 *)(v121 + 88) > 640)
                *(_QWORD *)(v121 + 528) = 0x400000020;
              else
                *(_DWORD *)(v121 + 528) = 16;
              v117 = *(_DWORD *)(v121 + 64);
              v118 = v117 <= 0x2A && ((1 << v117) & 0x44000100000) != 0;
              *(_DWORD *)(v121 + 620) = v118;
              v119 = *(double *)(v121 + 544);
              if (v119 > 0.0 && v119 < 1.0)
              {
                *(_QWORD *)(v121 + 560) = 0x200000002;
                v120 = *(_DWORD *)(v121 + 180);
                *(_DWORD *)(v121 + 188) = (int)(*(double *)(v121 + 552) * (double)v120);
                *(_DWORD *)(v121 + 192) = v120;
              }
              if (v117 == 20 && *(int *)(v121 + 560) >= 2)
              {
                result = 0;
                *(_BYTE *)(v121 + 247) = 1;
                return result;
              }
              return 0;
            }
          }
          *(_BYTE *)(v121 + 585) = v110;
          *(_QWORD *)(v121 + 573) = 0;
          *(_BYTE *)(v121 + 581) = 0;
          *(_WORD *)(v121 + 582) = 1;
          *(_BYTE *)(v121 + 584) = 1;
          *(_BYTE *)(v121 + 590) = 0;
          goto LABEL_245;
        }
        return 4294954387;
      }
      v23 = *(_DWORD *)(v121 + 64);
      if (v23 <= 0x2B)
      {
        if (((1 << v23) & 0xCC000100002) != 0)
        {
          v24 = (__int16 *)(v121 + 569);
          v25 = 258;
LABEL_85:
          *v24 = v25;
          goto LABEL_86;
        }
        if (!*(_DWORD *)(v121 + 64))
        {
          v24 = (__int16 *)(v121 + 569);
          v25 = 4;
          goto LABEL_85;
        }
      }
      v24 = (__int16 *)(v121 + 569);
      v25 = 3;
      goto LABEL_85;
    }
  }
  return result;
}

char *sub_1B681C9E8(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  char *result;
  unsigned __int8 *v13;
  char *v14;
  uint8x8_t *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  int16x8_t v19;
  uint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  int8x8_t v23;
  int v24;

  v11 = *(_QWORD *)(a2 + 112);
  result = (char *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
  v24 = a4;
  if (a3 < a4)
  {
    v13 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    v14 = &result[v11 * a3];
    v15 = (uint8x8_t *)(v14 - 8);
    v16 = -3 - a1;
    v17 = a1 - 2;
    v18 = a1 + 7;
    v19.i64[0] = 0xA000A000A000ALL;
    v19.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 276) < -7)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v20 = 0;
        v21 = *v15;
        do
        {
          v22 = v20;
          v23 = *(int8x8_t *)&v14[v20];
          *(int8x8_t *)&v13[v20] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 7uLL), v21)), (int16x8_t)vaddl_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 5uLL), (uint8x8_t)vext_s8((int8x8_t)v21, v23, 2uLL)), v19), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 6uLL), (uint8x8_t)vext_s8((int8x8_t)v21, v23, 1uLL)), (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 4uLL), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), (uint8x8_t)vext_s8((int8x8_t)v21, v23, 3uLL),
                                                        (uint8x8_t)0xA0A0A0A0A0A0A0ALL)),
                                         2uLL)),
                                     6uLL);
          v20 += 8;
          v21 = (uint8x8_t)v23;
        }
        while (v22 < *(int *)(a2 + 276));
      }
      memset(&v13[v16 + 5], *v13, v17);
      result = (char *)memset(&v13[v20], v13[(int)v20 - 1], v18 - (int)v20 + *(_DWORD *)(a2 + 276));
      ++a3;
      v15 = (uint8x8_t *)((char *)v15 + v11);
      v13 += a5;
      v14 += v11;
      v19.i64[0] = 0xA000A000A000ALL;
      v19.i64[1] = 0xA000A000A000ALL;
    }
    while (a3 != v24);
  }
  return result;
}

char *sub_1B681CB80(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  char *result;
  unsigned __int8 *v13;
  char *v14;
  size_t v15;
  int v16;
  int16x8_t v17;
  uint64_t v18;
  uint8x8_t *v19;
  uint8x8_t v20;
  uint8x8_t *v21;
  uint8x8_t v22;
  uint8x8_t *v23;

  v11 = *(_QWORD *)(a2 + 112);
  result = (char *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
  if (a3 < a4)
  {
    v13 = (unsigned __int8 *)(a6 + a3 * a5);
    v14 = &result[v11 * (a3 - 3)];
    v15 = a1 + 3;
    v16 = a1 + 2;
    v17.i64[0] = 0xA000A000A000ALL;
    v17.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 276) < 1)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = 0;
        do
        {
          v19 = (uint8x8_t *)&v14[v18 + v11];
          v20 = *v19;
          v21 = (uint8x8_t *)((char *)v19 + v11);
          v22 = *v21;
          v23 = (uint8x8_t *)((char *)v21 + v11);
          *(int8x8_t *)&v13[v18] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v11 + v11 + v11 + v11), *(uint8x8_t *)&v14[v18])), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v11 + v11), v22), v17), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v11 + v11 + v11), v20), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v23 + v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *v23, (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL)), 6uLL);
          v18 += 8;
        }
        while (v18 < *(int *)(a2 + 276));
      }
      memset(&v13[-v15], *v13, v15);
      result = (char *)memset(&v13[v18], v13[(int)v18 - 1], v16 - (int)v18 + *(_DWORD *)(a2 + 276));
      ++a3;
      v14 += v11;
      v13 += a5;
      v17.i64[0] = 0xA000A000A000ALL;
      v17.i64[1] = 0xA000A000A000ALL;
    }
    while (a3 != a4);
  }
  return result;
}

char *sub_1B681CD14(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  char *result;
  unsigned __int8 *v13;
  char *v14;
  uint8x8_t *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  int16x8_t v19;
  int16x8_t v20;
  uint8x8_t *v21;
  uint64_t v22;
  int16x8_t v23;
  uint64_t v24;
  uint8x8_t *v25;
  uint8x8_t v26;
  uint8x8_t *v27;
  uint8x8_t v28;
  uint8x8_t *v29;
  int8x16_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int v38;

  v11 = *(_QWORD *)(a2 + 112);
  result = (char *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
  v38 = a4;
  if (a3 < a4)
  {
    v13 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    v14 = &result[v11 * (a3 - 3)];
    v15 = (uint8x8_t *)(v14 - 8);
    v16 = -3 - a1;
    v17 = a1 - 2;
    v18 = a1 + 7;
    v19.i64[0] = 0xA000A000A000ALL;
    v19.i64[1] = 0xA000A000A000ALL;
    v20.i64[0] = 0xA000A000A000ALL;
    v20.i64[1] = 0xA000A000A000ALL;
    do
    {
      v21 = (uint8x8_t *)((char *)v15 + v11);
      if (*(int *)(a2 + 276) < -7)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        v22 = 0;
        v23 = vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v15 + 7 * v11), *v15)), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v15 + 5 * v11), *(uint8x8_t *)((char *)v15 + 2 * v11)), v19), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v15 + 6 * v11), *v21), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v15 + 4 * v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *(uint8x8_t *)((char *)v15 + 3 * v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
        do
        {
          v24 = v22;
          v25 = (uint8x8_t *)&v14[v22 + v11];
          v26 = *v25;
          v27 = (uint8x8_t *)((char *)v25 + v11);
          v28 = *v27;
          v29 = (uint8x8_t *)((char *)v27 + v11);
          v30 = (int8x16_t)vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v29 + v11 + v11 + v11 + v11), *(uint8x8_t *)&v14[v22])), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v29 + v11 + v11), v28), v19), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v29 + v11 + v11 + v11), v26), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v29 + v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *v29, (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
          v31 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 2uLL);
          v32 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 4uLL);
          v33 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 6uLL);
          v34 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 8uLL);
          v35 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 0xAuLL);
          v36 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 0xCuLL);
          v37 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 0xEuLL);
          *(int8x8_t *)&v13[v22] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vaddq_s32(vsubq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v32.i8, (int16x4_t)0xA000A000A000ALL), vaddl_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v23.i8)), vshlq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v31.i8), vmlal_s16(vmull_s16(*(int16x4_t *)v34.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v33.i8, (int16x4_t)0xA000A000A000ALL)), 2uLL)), 6uLL), vaddq_s32(
                                         vsubq_s32(vmlal_high_s16(vmull_high_s16(v35, v19), v32, v19), vaddl_high_s16(v37, v23)), vshlq_n_s32(vaddq_s32(vaddl_high_s16(v36, v31), vmlal_high_s16(vmull_high_s16(v34, v20), v33, v20)), 2uLL)), 6uLL), 6uLL);
          v22 += 8;
          v23 = (int16x8_t)v30;
        }
        while (v24 < *(int *)(a2 + 276));
      }
      memset(&v13[v16 + 5], *v13, v17);
      result = (char *)memset(&v13[v22], v13[(int)v22 - 1], v18 - (int)v22 + *(_DWORD *)(a2 + 276));
      ++a3;
      v13 += a5;
      v14 += v11;
      v15 = v21;
      v19.i64[0] = 0xA000A000A000ALL;
      v19.i64[1] = 0xA000A000A000ALL;
      v20.i64[0] = 0xA000A000A000ALL;
      v20.i64[1] = 0xA000A000A000ALL;
    }
    while (a3 != v38);
  }
  return result;
}

uint64_t sub_1B681CFF0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __CFDictionary *Mutable;
  _DWORD *v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  unsigned int v10;
  unsigned int v11;
  int32x2_t v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  __CFDictionary *v69;
  const __CFDictionary *v70;
  int v72;
  const __CFDictionary *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  __CFDictionary *v79;
  BOOL v80;
  int v81;
  int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  IOSurfaceRef IOSurface;
  __IOSurface *v92;
  char v93;
  uint64_t (*v94)(uint64_t, int, uint64_t, uint64_t, int, int, uint64_t);
  _QWORD *v95;
  _OWORD *(*v96)(_OWORD *, uint64_t, int, int, int, _DWORD *, int);
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  __int16 v104;
  __int16 v105;
  int v106;
  int *v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  BOOL v115;
  int v116;
  int *v117;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  const __CFData *v125;
  unint64_t v126;
  size_t v127;
  UInt8 *v128;
  const UInt8 *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  const __CFString *v134;
  const __CFString *v135;
  const __CFString *v136;
  CVPixelBufferPoolRef PixelBufferPool;
  const __CFDictionary *v138;
  char v139;
  __IOSurface **v140;
  const __CFString *key;
  int v142;
  void *value;
  int v144;
  CFTypeRef cf;
  uint64_t v146;
  uint64_t v147;
  uint8_t v148[8];
  uint64_t v149;
  _DWORD v150[2];
  uint8_t buf[8];
  __CFDictionary *v152;
  _QWORD v153[3];

  v153[1] = *MEMORY[0x1E0C80C00];
  if (_os_feature_enabled_impl())
  {
    if (qword_1EDBB4CB8 != -1)
      dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
    if (dword_1EDBB4CC4 == 255)
      *(_BYTE *)(a1 + 154) = 1;
  }
  v4 = *(_BYTE **)(a1 + 88);
  *(_BYTE *)(a1 + 155) = v4[392];
  if (v4[231] || v4[232])
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 80) = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = 0;
  v6 = (_DWORD *)(a1 + 148);
  v7.i32[0] = 1;
  v8.i32[0] = *(_DWORD *)(a1 + 148);
  v9 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v8, v7), 0), (int8x8_t)0x60000000C0, (int8x8_t)0x40000000A0);
  if (v8.i32[0] == 1)
    v10 = -16;
  else
    v10 = -32;
  if (*(_DWORD *)(a1 + 148) == 1)
    v11 = 15;
  else
    v11 = 31;
  v12 = *(int32x2_t *)(a1 + 72);
  *(int32x2_t *)(a1 + 268) = vmax_s32(v9, (int32x2_t)vand_s8((int8x8_t)vadd_s32(vdup_n_s32(v11), v12), (int8x8_t)vdup_n_s32(v10)));
  v13 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 2545) = *(_BYTE *)(v13 + 1016);
  *(_DWORD *)(a1 + 2548) = *(_DWORD *)(v13 + 1020);
  *(_QWORD *)(a1 + 292) = 0;
  v14 = *(_DWORD *)(v13 + 1000);
  if (v14)
    v15 = v14;
  else
    v15 = 875704438;
  sub_1B67C5780(v12.i32[0], v12.i32[1], 0, 0, 0, 0, v15, (__CFDictionary **)&cf);
  v16 = (void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED1A0], (const void *)*MEMORY[0x1E0C9AE50]);
  value = v16;
  if (*v6)
  {
    if (*v6 != 1)
    {
      v144 = 0;
      goto LABEL_81;
    }
    v17 = *(int *)(a1 + 268) >> 4;
    *(_DWORD *)(a1 + 2400) = v17;
    v18 = *(int *)(a1 + 272) >> 4;
    *(_DWORD *)(a1 + 2404) = v18;
    v19 = v18 * v17;
    v20 = *(char **)(a1 + 2304);
    v21 = *(_BYTE **)(a1 + 2296);
    v22 = (v20 - v21) >> 4;
    if (v19 <= v22)
    {
      v30 = *(char **)(a1 + 2304);
      if (v19 >= v22)
      {
LABEL_61:
        v48 = *(_QWORD *)(a1 + 2296);
        *(_QWORD *)(a1 + 2392) = v48;
        *(_QWORD *)(a1 + 2408) = &v30[-v48];
        v49 = *(_QWORD *)(a1 + 80);
        v50 = *(_QWORD *)(v49 + 12688);
        v51 = *(std::__shared_weak_count **)(v49 + 12696);
        if (v51)
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
          v54 = *(_QWORD *)(v50 + 2048);
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        else
        {
          v54 = *(_QWORD *)(v50 + 2048);
        }
        *(_DWORD *)(a1 + 264) = *(_DWORD *)(v54 + 1320) + 1;
        v144 = 1635148593;
        goto LABEL_81;
      }
      v30 = &v21[16 * v19];
    }
    else
    {
      v23 = v19 - v22;
      v24 = *(_QWORD *)(a1 + 2312);
      if (v19 - v22 > (v24 - (uint64_t)v20) >> 4)
      {
        if ((v19 & 0x80000000) != 0)
          sub_1B6773BAC();
        v25 = v24 - (_QWORD)v21;
        if (v25 >> 3 > v19)
          v19 = v25 >> 3;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v19;
        if (!(v26 >> 60))
        {
          v27 = (char *)operator new(16 * v26);
          v28 = &v27[16 * v22];
          v29 = &v27[16 * v26];
          bzero(v28, 16 * v23);
          v30 = &v28[16 * v23];
          if (v20 != v21)
          {
            do
            {
              *((_OWORD *)v28 - 1) = *((_OWORD *)v20 - 1);
              v28 -= 16;
              v20 -= 16;
            }
            while (v20 != v21);
            v20 = *(char **)(a1 + 2296);
          }
          *(_QWORD *)(a1 + 2296) = v28;
          *(_QWORD *)(a1 + 2304) = v30;
          *(_QWORD *)(a1 + 2312) = v29;
          if (v20)
          {
            operator delete(v20);
            v30 = *(char **)(a1 + 2304);
          }
          goto LABEL_61;
        }
LABEL_301:
        sub_1B6773BF4();
      }
      bzero(*(void **)(a1 + 2304), 16 * v23);
      v30 = &v20[16 * v23];
    }
    *(_QWORD *)(a1 + 2304) = v30;
    goto LABEL_61;
  }
  v31 = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(a1 + 2545))
  {
    v32 = 1836415073;
  }
  else if (*(_BYTE *)(v31 + 7874))
  {
    v32 = 1684632424;
  }
  else
  {
    v32 = 1752589105;
  }
  v144 = v32;
  if (*(_BYTE *)(v31 + 124))
  {
    v33 = *(int *)(a1 + 268) >> 5;
    *(_DWORD *)(a1 + 2400) = v33;
    v34 = *(int *)(a1 + 272) >> 5;
    *(_DWORD *)(a1 + 2404) = v34;
    v35 = v34 * v33;
    v36 = *(char **)(a1 + 2328);
    v37 = *(_BYTE **)(a1 + 2320);
    v38 = (v36 - v37) >> 5;
    if (v35 <= v38)
    {
      v46 = *(char **)(a1 + 2328);
      if (v35 >= v38)
      {
LABEL_72:
        v56 = *(_QWORD *)(a1 + 2320);
        *(_QWORD *)(a1 + 2392) = v56;
        *(_QWORD *)(a1 + 2408) = &v46[-v56];
        goto LABEL_73;
      }
      v46 = &v37[32 * v35];
    }
    else
    {
      v39 = v35 - v38;
      v40 = *(_QWORD *)(a1 + 2336);
      if (v35 - v38 > (v40 - (uint64_t)v36) >> 5)
      {
        if ((v35 & 0x80000000) != 0)
          sub_1B6773BAC();
        v41 = v40 - (_QWORD)v37;
        if (v41 >> 4 > v35)
          v35 = v41 >> 4;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
          v42 = 0x7FFFFFFFFFFFFFFLL;
        else
          v42 = v35;
        if (v42 >> 59)
          goto LABEL_301;
        v43 = (char *)operator new(32 * v42);
        v44 = &v43[32 * v38];
        v45 = &v43[32 * v42];
        bzero(v44, 32 * v39);
        v46 = &v44[32 * v39];
        if (v36 != v37)
        {
          do
          {
            v47 = *((_OWORD *)v36 - 1);
            *((_OWORD *)v44 - 2) = *((_OWORD *)v36 - 2);
            *((_OWORD *)v44 - 1) = v47;
            v44 -= 32;
            v36 -= 32;
          }
          while (v36 != v37);
          v36 = *(char **)(a1 + 2320);
        }
        *(_QWORD *)(a1 + 2320) = v44;
        *(_QWORD *)(a1 + 2328) = v46;
        *(_QWORD *)(a1 + 2336) = v45;
        if (v36)
        {
          operator delete(v36);
          v46 = *(char **)(a1 + 2328);
        }
        goto LABEL_72;
      }
      bzero(*(void **)(a1 + 2328), 32 * v39);
      v46 = &v36[32 * v39];
    }
    *(_QWORD *)(a1 + 2328) = v46;
    goto LABEL_72;
  }
LABEL_73:
  v57 = *(_QWORD *)(a1 + 80);
  v58 = *(_QWORD *)(v57 + 12688);
  v59 = *(std::__shared_weak_count **)(v57 + 12696);
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    *(_DWORD *)(a1 + 264) = *(unsigned __int8 *)(v58 + 198) + 1;
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 264) = *(unsigned __int8 *)(v58 + 198) + 1;
  }
LABEL_81:
  v146 = 0;
  v147 = 0;
  *(_QWORD *)buf = 0;
  v152 = 0;
  v63 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000);
  v64 = sub_1B67C37F4(v63);
  v65 = *(_DWORD *)(a1 + 268);
  v66 = *(_DWORD *)(a1 + 272);
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  if (sub_1B6828970(v65, v66, dword_1EDBB4CC4, *(_DWORD *)(a1 + 148), *(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000), (signed int *)(a1 + 276), (signed int *)(a1 + 284), (_DWORD *)&v147 + 1, &v147, (unsigned int *)&v146 + 1, (unsigned int *)&v146, (_DWORD *)(a1 + 2524), (unsigned int *)(a1 + 2528))|| (v67 = HIDWORD(v147), SHIDWORD(v147) < 1)|| sub_1B67C3C48(v63) && (int)v147 < 1)
  {
    v68 = 4294954392;
LABEL_88:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to allocate dpb\n", buf, 2u);
    }
    v69 = 0;
LABEL_91:
    v70 = 0;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a1 + 153))
  {
    v68 = 0;
    goto LABEL_174;
  }
  v153[0] = __PAIR64__(v147, v67);
  v150[0] = HIDWORD(v146);
  v150[1] = v146;
  v149 = 0;
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  if (dword_1EDBB4CC4 < 13)
    v72 = 0;
  else
    v72 = (****(uint64_t (*****)(_QWORD))(a1 + 80))(**(_QWORD **)(a1 + 80)) ^ 1;
  if (CFPreferencesGetAppBooleanValue(CFSTR("corevideo_dpb_alloc"), CFSTR("com.apple.VideoProcessing"), 0)
    || (v73 = 0, v72))
  {
    v74 = *(unsigned __int8 *)(a1 + 2545);
    if (*(_BYTE *)(a1 + 2545))
    {
      if (qword_1EDBB4CB8 != -1)
        dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
      v75 = 641230384;
      if (dword_1EDBB4CC4 <= 12)
      {
        if (dword_1EDBB4CC4 <= 10)
          v76 = 875704438;
        else
          v76 = 1563981360;
      }
      else
      {
        v76 = 641234480;
      }
      LODWORD(v149) = v76;
      if (dword_1EDBB4CC4 <= 12)
      {
        if (dword_1EDBB4CC4 <= 10)
          v75 = 875704422;
        else
          v75 = 1563977264;
      }
      HIDWORD(v149) = v75;
      v78 = 1;
    }
    else
    {
      v77 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + 1000);
      if ((_DWORD)v77 == 1982882104)
        v77 = 875704438;
      v78 = sub_1B6828FE0(v77);
      LODWORD(v149) = v78;
    }
    v79 = sub_1B6829458(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148));
    v73 = v79;
    if (v78)
    {
      v80 = v74 || *(_BYTE *)(a1 + 2545) == 0;
      if (v80 && v79)
      {
        v142 = 1;
        goto LABEL_146;
      }
    }
    if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v81 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000);
      *(_DWORD *)v148 = 67109120;
      *(_DWORD *)&v148[4] = v81;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Not using CoreVideo to allocate DPB for pixfmt %d", v148, 8u);
    }
  }
  if (!*(_BYTE *)(a1 + 2545))
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000) == 1982882104)
      v82 = 875704438;
    else
      v82 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000);
    *(_QWORD *)buf = sub_1B68297D4(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148), v64, v82, (uint64_t)v153, (uint64_t)v150, a1 + 292);
    if (!*(_QWORD *)buf)
      goto LABEL_171;
LABEL_145:
    v142 = 0;
LABEL_146:
    if (!*(_BYTE *)(a1 + 154) && !*(_BYTE *)(a1 + 155))
    {
      v83 = 0;
      key = (const __CFString *)*MEMORY[0x1E0CBC048];
      v84 = 1;
      LODWORD(v85) = *(_DWORD *)(a1 + 264);
      do
      {
        if ((int)v85 >= 1)
        {
          v139 = v84;
          v86 = 0;
          do
          {
            v87 = 0;
            v88 = 0;
            v140 = (__IOSurface **)(a1 + 272 * v83 + 16 * v86 + 312);
            v89 = 1;
            do
            {
              v90 = v87;
              if (((v89 | (****(unsigned int (*****)(_QWORD))(a1 + 80))(**(_QWORD **)(a1 + 80))) & 1) == 0)
              {
                *v140 = 0;
                goto LABEL_167;
              }
              if (v142)
              {
                *(_QWORD *)v148 = 0;
                v68 = CVPixelBufferCreate(0, *(int *)(a1 + 268), *(int *)(a1 + 272), v150[v83 - 2], v73, (CVPixelBufferRef *)v148);
                if ((_DWORD)v68)
                  goto LABEL_172;
                IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v148);
                *(_QWORD *)(a1 + 272 * v83 + 16 * v86 + 8 * v88 + 304) = IOSurface;
                if (IOSurface)
                  CFRetain(IOSurface);
                CFRelease(*(CFTypeRef *)v148);
              }
              else
              {
                v92 = IOSurfaceCreate(*(CFDictionaryRef *)&buf[8 * v83]);
                *(_QWORD *)(a1 + 272 * v83 + 16 * v86 + 8 * v88 + 304) = v92;
                IOSurfaceSetValue(v92, key, CFSTR("dpb"));
              }
              if (!*(_QWORD *)(a1 + 272 * v83 + 16 * v86 + 8 * v88 + 304))
                goto LABEL_171;
              v89 = 0;
              v87 = 1;
              v88 = 1;
            }
            while ((v90 & 1) == 0);
            if (qword_1EDBB4CB8 != -1)
              dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
            if (dword_1EDBB4CC4 <= 12)
              sub_1B682AE50(*v140, *(_DWORD *)(a1 + 2528), *(_DWORD *)(a1 + 2524));
LABEL_167:
            ++v86;
            v85 = *(int *)(a1 + 264);
          }
          while (v86 < v85);
          v84 = v139;
        }
        v93 = (*(_BYTE *)(a1 + 2545) != 0) & v84;
        v83 = 1;
        v84 = 0;
      }
      while ((v93 & 1) != 0);
    }
    v68 = 0;
    goto LABEL_172;
  }
  *(_QWORD *)buf = sub_1B68297D4(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148), v64, 875704438, (uint64_t)v153, (uint64_t)v150, a1 + 292);
  if (*(_QWORD *)buf)
  {
    v152 = sub_1B68297D4(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148), v64, 875704422, (uint64_t)v153, (uint64_t)v150, a1 + 292);
    if (v152)
      goto LABEL_145;
  }
LABEL_171:
  v68 = 4294954392;
LABEL_172:
  if (v73)
    CFRelease(v73);
LABEL_174:
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (v152)
    CFRelease(v152);
  if ((_DWORD)v68)
    goto LABEL_88;
  off_1EF139188 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B6827C38;
  off_1EF139190 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B6827CB0;
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  if (dword_1EDBB4CC4 > 0x11)
    goto LABEL_259;
  if (((1 << dword_1EDBB4CC4) & 0x3E000) != 0)
  {
    off_1EF139188 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B682874C;
    off_1EF139190 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B68287B0;
    goto LABEL_192;
  }
  if (((1 << dword_1EDBB4CC4) & 0x780) == 0)
  {
    if (((1 << dword_1EDBB4CC4) & 0x1800) != 0)
    {
      qword_1EF137CC8 = 0x800000008;
      qword_1EF1391A8 = (uint64_t)sub_1B68283EC;
      unk_1EF1391B0 = sub_1B6827ED4;
      v94 = sub_1B682859C;
      goto LABEL_189;
    }
LABEL_259:
    if (dword_1EF137CD0 >= 2)
    {
      fwrite("Unknown device type\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknown device type\n", buf, 2u);
      }
    }
    goto LABEL_190;
  }
  qword_1EF137CC8 = 0x800000010;
  qword_1EF1391A8 = (uint64_t)sub_1B6827D24;
  unk_1EF1391B0 = sub_1B6827ED4;
  v94 = sub_1B6828088;
LABEL_189:
  qword_1EF139198 = (uint64_t)v94;
  unk_1EF1391A0 = sub_1B6828238;
LABEL_190:
  off_1EF139188 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B682874C;
  off_1EF139190 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B68287B0;
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
LABEL_192:
  if (dword_1EDBB4CC4 <= 0x11)
  {
    if (((1 << dword_1EDBB4CC4) & 0x3E000) != 0)
      goto LABEL_199;
    if (((1 << dword_1EDBB4CC4) & 0x780) != 0)
    {
      v95 = (_QWORD *)&unk_1EF139000;
      v96 = sub_1B6828810;
LABEL_198:
      v95[55] = v96;
      goto LABEL_199;
    }
    if (((1 << dword_1EDBB4CC4) & 0x1800) != 0)
    {
      v95 = &unk_1EF139000;
      v96 = sub_1B68288D4;
      goto LABEL_198;
    }
  }
  if (dword_1EF137CD0 >= 2)
  {
    fwrite("Unknown device type\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknown device type\n", buf, 2u);
    }
  }
LABEL_199:
  v97 = atomic_load(qword_1EF139220);
  if (v97 != -1)
  {
    *(_QWORD *)buf = v150;
    v153[0] = buf;
    std::__call_once(qword_1EF139220, v153, (void (__cdecl *)(void *))sub_1B687AE2C);
  }
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    sub_1B6827B28((char **)(a1 + 2344), (uint64_t)(*(_QWORD *)(a1 + 2304) - *(_QWORD *)(a1 + 2296)) >> 4);
    v99 = 0;
    v100 = 0;
    v101 = *(_DWORD *)(a1 + 2400);
    while (1)
    {
      v102 = v100 / 4;
      v103 = v100 - (v98 & 0xFFFFFFFC);
      if (v103 < 0)
      {
        v103 += 4;
        v104 = v102 + (~(2 * v103) | 1);
      }
      else
      {
        v104 = v102 - 2 * v103;
      }
      if (v101 << 16 <= 0)
        break;
      v98 = v103 + 4 * (__int16)(v104 / (__int16)v101);
      v105 = v104 % (__int16)v101;
      v106 = v104 % (__int16)v101;
      ++v100;
      if ((v105 & 0x8000) == 0)
        goto LABEL_210;
LABEL_214:
      if (v106 == v101 - 1 && v98 == *(_DWORD *)(a1 + 2404) - 1)
        goto LABEL_242;
    }
    v106 = 0;
    v98 = 0;
    ++v100;
LABEL_210:
    if (v106 < v101 && (v98 & 0x80000000) == 0 && v98 < *(_DWORD *)(a1 + 2404))
    {
      v107 = (int *)(*(_QWORD *)(a1 + 2344) + 8 * v99++);
      *v107 = v106;
      v107[1] = v98;
    }
    goto LABEL_214;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 124))
  {
    sub_1B6827B28((char **)(a1 + 2368), (uint64_t)(*(_QWORD *)(a1 + 2328) - *(_QWORD *)(a1 + 2320)) >> 5);
    v108 = 0;
    v109 = 0;
    v110 = *(_DWORD *)(a1 + 2404);
    v111 = *(_QWORD *)(a1 + 2368);
    v112 = -1;
    while (1)
    {
      if ((v109 & 1) != 0)
      {
        v114 = *(_DWORD *)(a1 + 2400);
        v115 = v112 < v114 - 2 || ((v110 + 1) >> 1) - 1 == v109 >> 1;
        if (v115)
          v113 = -1;
        else
          v113 = 1;
        if (v115)
          v114 = 0;
        v112 = v112 - v114 + 2;
      }
      else if (v112 || v109 < 1)
      {
        --v112;
        v113 = 1;
      }
      else
      {
        v112 = *(_DWORD *)(a1 + 2400) - 1;
        v113 = -1;
      }
      v109 += v113;
      if ((v112 & 0x80000000) == 0)
      {
        v116 = *(_DWORD *)(a1 + 2400);
        if (v112 < v116 && (v109 & 0x80000000) == 0 && v109 < v110)
        {
          v117 = (int *)(v111 + 8 * v108);
          *v117 = v112;
          v117[1] = v109;
          ++v108;
          if (v112 == v116 - 1 && v109 == v110 - 1)
            break;
        }
      }
    }
  }
LABEL_242:
  v119 = *(_QWORD *)(a1 + 80);
  v120 = *(char **)v119;
  if (*(_QWORD *)v119 && v120[33])
  {
    v121 = *(unsigned int *)(a1 + 2520);
    v122 = sub_1B685C8CC(v120);
    if (!v122)
      goto LABEL_274;
    v123 = v122;
    v124 = ((3
           * (unint64_t)(*(unsigned int (**)(char *, uint64_t, _QWORD))(*(_QWORD *)v122 + 152))(v122, 255, **(_QWORD **)(a1 + 80))+ 3) >> 1)+ 1;
    v125 = *(const __CFData **)(*(_QWORD *)(a1 + 80) + 1112);
    if (v125)
    {
      v124 += CFDataGetLength(v125) - v121;
      if (!v124)
      {
        v129 = 0;
        goto LABEL_269;
      }
    }
    v126 = v124 + v121;
    if (v124 + v121 >= 0x200)
      v126 = 512;
    if (v126 <= 8)
      v127 = 8;
    else
      v127 = v126;
    v128 = (UInt8 *)operator new[](v127, MEMORY[0x1E0DE4E10]);
    if (v128)
    {
      v129 = v128;
      switch((_DWORD)v121)
      {
        case 4:
          *(_DWORD *)v128 = bswap32(v127 - 4);
          break;
        case 2:
          *(_WORD *)v128 = bswap32(v127 - 2) >> 16;
          break;
        case 1:
          *v128 = v127 - 1;
          break;
        default:
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "value of nalu_length_size should be 1, 2 or 4", buf, 2u);
          }
          goto LABEL_273;
      }
      v128[v121] = 76;
      v128[v121 + 1] = 1;
      memset(&v128[v121 + 2], 255, v127 - (v121 + 2));
      v129[v127 - 1] = 0x80;
      *(_QWORD *)(a1 + 2536) = CFDataCreate(0, v129, v127);
LABEL_269:
      (*(void (**)(char *))(*(_QWORD *)v123 + 8))(v123);
      if (!v129)
        goto LABEL_274;
LABEL_273:
      MEMORY[0x1BCC9811C](v129, 0x1000C8077774924);
    }
  }
  else
  {
    v130 = *(_QWORD *)(v119 + 1112);
    if (v130)
    {
      CFRetain(*(CFTypeRef *)(v119 + 1112));
      *(_QWORD *)(a1 + 2536) = v130;
    }
  }
LABEL_274:
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 80) + 1120))
  {
    v69 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(v69, (const void *)*MEMORY[0x1E0CED2B0], value);
    if (v144 == 1752589105)
    {
      if (qword_1EDBB4CB8 != -1)
        dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
      v133 = dword_1EDBB4CC4;
      v134 = CFSTR("com.apple.videotoolbox.videoencoder.hevc");
      v135 = CFSTR("paravirtualized:com.apple.videotoolbox.videoencoder.ave.hevc");
    }
    else
    {
      if (v144 != 1635148593)
        goto LABEL_293;
      if (qword_1EDBB4CB8 != -1)
        dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
      v133 = dword_1EDBB4CC4;
      v134 = CFSTR("com.apple.videotoolbox.videoencoder.h264");
      v135 = CFSTR("paravirtualized:com.apple.videotoolbox.videoencoder.ave.avc");
    }
    if (v133 == 255)
      v136 = v135;
    else
      v136 = v134;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCF8], v136);
LABEL_293:
    v68 = VTCompressionSessionCreateWithOptions();
    if ((_DWORD)v68)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Compresseion session is null\n", buf, 2u);
      }
      goto LABEL_91;
    }
    PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(a1 + 160));
    *(_QWORD *)(a1 + 240) = PixelBufferPool;
    if (PixelBufferPool)
    {
      v138 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      v70 = v138;
      if (v138)
      {
        CFDictionaryApplyFunction(v138, (CFDictionaryApplierFunction)sub_1B6826708, *(void **)(a1 + 160));
        goto LABEL_276;
      }
    }
    else
    {
      v70 = 0;
    }
    v68 = 4294954392;
    goto LABEL_92;
  }
  v69 = 0;
  v70 = 0;
LABEL_276:
  v131 = *(int *)(a1 + 104);
  v132 = (*(int *)(a1 + 100) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(a1 + 2256) = v132;
  v68 = sub_1B67C8CAC((void **)(a1 + 2264), v132 * v131 + 8);
  if (!(_DWORD)v68)
  {
    v68 = sub_1B67C2364((void **)(a1 + 2280), *(int *)(a1 + 108), 0x10uLL);
    if (!(_DWORD)v68)
    {
      sub_1B67E7FE0((void **)(a1 + 864), 2uLL);
      sub_1B67E7FE0((void **)(a1 + 848), 2uLL);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 582))
      {
        *(_QWORD *)(a1 + 48) = CFDataCreateMutable(0, 0);
        *(_QWORD *)(a1 + 56) = CFDataCreateMutable(0, 0);
      }
      v68 = 0;
      *(_QWORD *)(a1 + 232) = dispatch_semaphore_create(*(int *)(a1 + 96));
      *(_BYTE *)(a1 + 2544) = 0;
    }
  }
LABEL_92:
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  if (v70)
    CFRelease(v70);
  if (v69)
    CFRelease(v69);
  return v68;
}

uint64_t sub_1B681E43C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  void ***v9;
  void **v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  size_t v20;
  const std::nothrow_t *v21;
  BOOL v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  const std::nothrow_t *v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  char v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v74;
  char v75;
  uint64_t *v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  signed int v93;
  signed int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t i;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  CFNumberRef v116;
  unsigned int v117;
  uint64_t v118;
  __CFDictionary *v119;
  int v120;
  int v121;
  char v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  __int16 v136;
  int *v137;
  int v138;
  int v139;
  _WORD *v140;
  __int16 v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  int v164;
  char v165;
  int v166;
  uint64_t v167;
  char v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  BOOL v175;
  BOOL v176;
  int v177;
  char v178;
  uint64_t v179;
  char v180;
  int v181;
  uint64_t v182;
  uint64_t j;
  const UInt8 *v184;
  int v185;
  int v186;
  CFDataRef v187;
  CFNumberRef v188;
  CFNumberRef v189;
  CFNumberRef v190;
  __CFDictionary *v191;
  __CFDictionary *v192;
  const void *v193;
  __CFArray *v194;
  uint64_t v195;
  char v196;
  const CFDictionaryKeyCallBacks *v197;
  const CFDictionaryValueCallBacks *v198;
  char v199;
  __CFDictionary *v200;
  CFNumberRef v201;
  CFNumberRef v202;
  uint64_t v203;
  CFNumberRef v204;
  int16x8_t v205;
  CFDataRef v206;
  uint64_t v207;
  int v208;
  int v209;
  CFNumberRef v210;
  CFNumberRef v211;
  CFNumberRef v212;
  const __CFAllocator *v213;
  CFNumberRef v214;
  CFNumberRef v215;
  const void *v216;
  CFNumberRef v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  BOOL v222;
  int v223;
  int v224;
  CFNumberRef v225;
  unsigned int v226;
  char v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  __CFDictionary *v235;
  int v236;
  int v237;
  int v238;
  CFNumberRef v239;
  CFNumberRef v240;
  __CFArray *v241;
  __CFArray *v242;
  __CFArray *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  BOOL v249;
  CFNumberRef v250;
  CFNumberRef v251;
  CFNumberRef v252;
  const void *v253;
  double v254;
  CFNumberRef v255;
  CFNumberRef v256;
  CFNumberRef v257;
  CFNumberRef v258;
  CFNumberRef v259;
  int v260;
  __CFDictionary *v261;
  __CFDictionary *v262;
  int v263;
  CFNumberRef v264;
  int v265;
  uint64_t v266;
  _BYTE *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  const __CFDictionary *v271;
  __CFDictionary *v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  double v279;
  uint64_t v280;
  char v281;
  void *v282;
  uint64_t v283;
  OpaqueVTCompressionSession *v284;
  uint64_t v285;
  void (*v286)(_QWORD, _QWORD, uint64_t, __CVBuffer *, __CFDictionary *, const __CFDictionary *);
  uint64_t v287;
  __CFDictionary *v288;
  uint64_t v289;
  int v290;
  const void *v291;
  int v292;
  __int16 v293;
  __int16 v294;
  CFNumberRef v295;
  CFNumberRef v296;
  __CFArray *v297;
  uint64_t k;
  CFNumberRef v299;
  CFNumberRef v300;
  __CFArray *v301;
  uint64_t v302;
  uint64_t v303;
  CFNumberRef v304;
  CFNumberRef v305;
  int v306;
  __CFDictionary *v307;
  void *value;
  uint64_t v309;
  int v310;
  BOOL imageBuffer;
  __CVBuffer *imageBuffera;
  _QWORD *v313;
  char v314;
  char v315;
  unsigned __int8 *v316;
  uint64_t v317;
  int theDict;
  char theDicta;
  __CFDictionary *theDictb;
  size_t __sz;
  size_t __sza;
  __CFDictionary *__szb;
  std::__shared_weak_count *v324;
  size_t v325;
  int v326;
  __CFDictionary *Mutable;
  uint64_t v328;
  CMTime duration;
  CMTime presentationTimeStamp;
  CMTime v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  int valuePtr;
  _DWORD buf[4];
  _BYTE time[32];
  uint64_t v339;

  v339 = *MEMORY[0x1E0C80C00];
  sub_1B680F4BC(&v334, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48), 0);
  v4 = *(_QWORD *)(a2 + 592);
  v5 = *(std::__shared_weak_count **)(a2 + 600);
  v332 = v4;
  v333 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v324 = v5;
  *(_BYTE *)(a1 + 152) = 0;
  memset(&v331, 0, sizeof(v331));
  v313 = (_QWORD *)v4;
  CMTimeMake(&v331, *(_QWORD *)(v4 + 16), *(_DWORD *)(v4 + 32));
  if (v334)
  {
    v8 = *(_BYTE *)(v334 + 111) && *(_BYTE *)(v334 + 130) || *(_BYTE *)(a2 + 3) != 0;
    *(_BYTE *)(a1 + 152) = v8;
  }
  v9 = (void ***)(a2 + 392);
  if (!*(_QWORD *)(a2 + 400))
  {
    sub_1B68125D8(a2 + 392);
    if (!malloc_type_posix_memalign((void **)(a2 + 392), 0x10uLL, 0x18uLL, 0x102004024DAA5DEuLL))
    {
      v10 = *v9;
      if (*v9)
      {
        *v10 = 0;
        v10[1] = 0;
        *(_QWORD *)(a2 + 400) = 1;
      }
    }
  }
  v328 = a2;
  v11 = *v9;
  v13 = **v9;
  v12 = (*v9)[1];
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    goto LABEL_42;
  v15 = *(_DWORD *)(a1 + 72);
  v16 = *(_DWORD *)(a1 + 76);
  if (!v12)
  {
    if (v13)
    {
      free(v13);
      *v11 = 0;
      v11[1] = 0;
    }
    if (malloc_type_posix_memalign(v11, 0x10uLL, 0x448uLL, 0x10300406C2DB039uLL) || !*v11)
      goto LABEL_42;
    bzero(*v11, 0x448uLL);
    v11[1] = (void *)1;
    v13 = *v11;
  }
  v17 = ((v16 + 15) >> 4) * ((v15 + 15) >> 4);
  theDict = 16 * v17;
  v18 = 4 * v17;
  *((_DWORD *)v11 + 4) = v15;
  *((_DWORD *)v11 + 5) = v16;
  v19 = 1;
  *((_DWORD *)v13 + 272) = 1;
  *v13 = (uint64_t)(v15 + 15) >> 4;
  v20 = v17;
  v21 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v13[1] = operator new[](v17, MEMORY[0x1E0DE4E10]);
  v13[3] = operator new[](v17, v21);
  v22 = v17 < 0;
  if (v17 < 0)
    v23 = -1;
  else
    v23 = 2 * v17;
  v24 = 64 * v17;
  if (v17 < 0)
    v24 = -1;
  __sz = v24;
  if (v17 < 0)
    v25 = -1;
  else
    v25 = 4 * v17;
  if (v22)
    v26 = -1;
  else
    v26 = 4 * v18;
  if (v22)
    v27 = -1;
  else
    v27 = 2 * v18;
  v13[4] = operator new[](v23, v21);
  v325 = v18;
  v13[13] = operator new[](v18, v21);
  v13[14] = operator new[](theDict, v21);
  v13[12] = operator new[](v20, v21);
  v13[15] = operator new[](v20, v21);
  v13[18] = operator new[](v23, v21);
  v13[16] = operator new[](v20, v21);
  v13[20] = operator new[](__sz, v21);
  v28 = 0;
  v13[22] = operator new[](theDict, v21);
  do
  {
    v29 = v19;
    v30 = &v13[v28];
    v30[24] = operator new[](v25, v21);
    v30[28] = operator new[](v23, v21);
    v30[32] = operator new[](v26, v21);
    v19 = 0;
    v30[36] = operator new[](v27, v21);
    v28 = 1;
  }
  while ((v29 & 1) != 0);
  v31 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v32 = 0;
  v13[40] = operator new[](v325, MEMORY[0x1E0DE4E10]);
  do
  {
    v13[v32 + 42] = operator new[](v23, v31);
    v13[v32 + 45] = operator new[](v25, v31);
    ++v32;
  }
  while (v32 != 3);
LABEL_42:
  v326 = *(_DWORD *)(*(_QWORD *)(v328 + 608) + 680);
  v33 = *(_DWORD **)(v328 + 1096);
  v34 = *(unsigned __int8 **)(v328 + 1112);
  v35 = *(_QWORD *)(a1 + 88);
  v36 = *(_QWORD *)(v328 + 40);
  __sza = *(_QWORD *)(v328 + 1128);
  if (*(_DWORD *)(v35 + 504))
    LODWORD(v36) = *(_DWORD *)(*(_QWORD *)(v36 + 2048) + 280);
  else
    LOBYTE(v36) = *(_BYTE *)(v36 + 196);
  v37 = 0;
  v38 = *(char *)(v35 + 151);
  v39 = *(_DWORD *)(v35 + 512);
  memset(time, 0, sizeof(time));
  theDicta = v36 + 4;
  v40 = 1;
  do
  {
    v41 = v40;
    memset(buf, 0, sizeof(buf));
    sub_1B67C49BC((uint64_t)&time[16 * v37], (__int128 *)buf);
    v42 = *(std::__shared_weak_count **)&buf[2];
    if (*(_QWORD *)&buf[2])
    {
      v43 = (unint64_t *)(*(_QWORD *)&buf[2] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v40 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 864) + 4 * v37) = -1;
    v37 = 1;
  }
  while ((v41 & 1) != 0);
  if (v38 >= 2)
    v45 = 2;
  else
    v45 = v38;
  imageBuffer = v39 < 2;
  v46 = v33[1];
  if (v46 >= 1 && v38 >= 1)
  {
    v47 = 0;
    v314 = 0;
    v48 = 0;
    v49 = 0;
    v50 = (uint64_t *)(v33 + 8);
    v51 = v328;
    while (1)
    {
      v52 = (_DWORD *)*(v50 - 1);
      if (!v52)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          v65 = MEMORY[0x1E0C81028];
          v66 = "Cannot find reference frame from short-term RPS\n";
          goto LABEL_179;
        }
        goto LABEL_180;
      }
      v53 = *(_QWORD *)(v51 + 592);
      if (!*(_BYTE *)(v53 + 136))
        goto LABEL_82;
      v54 = *(unsigned __int8 *)(v51 + 640);
      if (v54 != 3 || (int)v48 < 1)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 523))
          v56 = 1;
        else
          v56 = v54 == 3;
        if (!v56)
          goto LABEL_82;
        v57 = v52[60];
      }
      else
      {
        v57 = v52[60];
        if (v57 != *(_DWORD *)(*(_QWORD *)time + 240) || v52[61] != *(_DWORD *)(*(_QWORD *)time + 244))
        {
          sub_1B688E00C((uint64_t)v34, v52[170] - v326);
          v48 = 1;
          if (v33[1] > (int)v47)
            goto LABEL_92;
          goto LABEL_103;
        }
      }
      v58 = *(_DWORD *)(v53 + 248);
      if (v58 <= 0)
        v58 = *(_DWORD *)(v53 + 240);
      if (v57 == v58)
      {
        v59 = *(_DWORD *)(v53 + 252);
        if (v59 <= 0)
          v59 = *(_DWORD *)(v53 + 244);
        if (v52[61] == v59)
          goto LABEL_82;
      }
      if (v49 < 1)
        break;
      sub_1B688E00C((uint64_t)v34, v52[170] - v326);
      v314 = 1;
      ++v49;
LABEL_83:
      ++v47;
      v60 = (int)v33[1];
      v50 += 2;
      v61 = v47 < v60 && (int)v48 < v45;
      v51 = v328;
      if (!v61)
      {
        if ((int)v60 > (int)v47)
          goto LABEL_92;
        if ((v314 & 1) != 0)
          goto LABEL_103;
LABEL_99:
        v64 = 0;
        goto LABEL_110;
      }
    }
    ++v49;
LABEL_82:
    sub_1B67B665C(&time[16 * v48++], (uint64_t)v52, *v50);
    goto LABEL_83;
  }
  v48 = 0;
  v51 = v328;
  v49 = 0;
  if (v46 < 1)
    goto LABEL_99;
  v47 = 0;
LABEL_92:
  v62 = (uint64_t)&v33[4 * v47 + 6];
  do
  {
    if (!*(_QWORD *)v62)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Cannot find reference frame from short-term RPS\n", (uint8_t *)buf, 2u);
      }
      v63 = 4294954394;
      v51 = v328;
      goto LABEL_181;
    }
    sub_1B688E00C((uint64_t)v34, *(_DWORD *)(*(_QWORD *)v62 + 680) - v326);
    LODWORD(v47) = v47 + 1;
    v62 += 16;
  }
  while (v33[1] > (int)v47);
  v51 = v328;
LABEL_103:
  v67 = *(_QWORD *)(v51 + 2688);
  sub_1B688E170((uint64_t)v34, 0);
  *(_BYTE *)(v67 + 20) = 0;
  v68 = *(_QWORD *)(v51 + 40);
  v69 = *(unsigned int *)(v68 + 260);
  if ((_DWORD)v69)
  {
    v70 = 0;
    v71 = *(unsigned __int8 **)(v68 + 264);
    while (!sub_1B688E0B4(v34, v71))
    {
      ++v70;
      v71 += 248;
      if (v69 == v70)
        goto LABEL_107;
    }
    *(_DWORD *)(v67 + 272) = v70;
    v64 = 1;
    *(_BYTE *)(v67 + 20) = 1;
  }
  else
  {
LABEL_107:
    v64 = 1;
  }
  v51 = v328;
LABEL_110:
  LODWORD(v72) = v33[3];
  if ((int)v72 < 1 || (int)v48 >= v45)
  {
    LODWORD(v74) = 0;
    v75 = 0;
LABEL_134:
    if ((int)v74 >= (int)v72)
    {
      v84 = v64 | v75;
      v83 = v326;
      if ((v84 & 1) != 0)
      {
LABEL_140:
        v63 = sub_1B67CC6B8(v33, *(_QWORD *)(v51 + 744), *(_QWORD *)(v51 + 1112), *(_QWORD *)(v51 + 1128), *(_DWORD *)(*(_QWORD *)(v51 + 608) + 680), *(_BYTE *)(*(_QWORD *)(v51 + 40) + 196) + 4);
        if ((_DWORD)v63)
          goto LABEL_181;
      }
      if ((int)v48 >= *(_DWORD *)(a1 + 264))
      {
        v63 = 4294954385;
        goto LABEL_181;
      }
      if ((int)v48 < 1)
      {
        v63 = 0;
LABEL_250:
        if ((*(_BYTE *)(v51 + 640) & 0xFE) == 2
          && *(int *)(*(_QWORD *)(a1 + 88) + 512) <= 1
          && sub_1B6826FF8(a1, v51, *(_QWORD *)(a1 + 864)))
        {
          if (dword_1EF137CD0 >= 1)
          {
            fwrite("DPB error is found\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "DPB error is found\n", (uint8_t *)buf, 2u);
            }
          }
          sub_1B6825750(a1, v83);
          sub_1B67CE7F4(*(_QWORD *)(v51 + 744), v83);
        }
        goto LABEL_181;
      }
      v85 = 0;
      v63 = 0;
      v86 = a1 + 880;
      while (1)
      {
        v87 = &time[16 * v85];
        if (!*(_QWORD *)v87)
          break;
        v88 = *(_QWORD *)(a1 + 864);
        *(_DWORD *)(v88 + 4 * v85) = *(_DWORD *)(*(_QWORD *)v87 + 684);
        *(_DWORD *)(*(_QWORD *)(a1 + 848) + 4 * v85) = 0;
        v89 = *(_QWORD *)(a1 + 88);
        if (!*(_DWORD *)(v89 + 504) && *(_DWORD *)(v89 + 508) == 1)
        {
          *(_DWORD *)(v86 + 80 * v85 + 24) = *(_DWORD *)(v88 + 4 * v85);
          if (*(_BYTE *)(v51 + 532))
          {
            v63 = sub_1B6826554(a1, &time[16 * v85], (IOSurfaceID *)(v86 + 80 * v85));
            v86 = a1 + 880;
          }
        }
        v90 = (*(_DWORD *)(a1 + 2252) + 1);
        v91 = 900;
        do
        {
          *(_BYTE *)(a1 + v91) = 0;
          v91 += 80;
          --v90;
        }
        while (v90);
        v92 = *(_QWORD *)(v51 + 592);
        if (!*(_BYTE *)(v92 + 136))
          goto LABEL_158;
        v93 = *(_DWORD *)(v92 + 248);
        if (v93 <= 0)
          v93 = *(_DWORD *)(v92 + 240);
        v94 = *(_DWORD *)(v92 + 252);
        if (v94 <= 0)
          v94 = *(_DWORD *)(v92 + 244);
        v95 = *(_DWORD *)(v92 + 276);
        if (*(_DWORD *)(*(_QWORD *)v87 + 240) == v93 && *(_DWORD *)(*(_QWORD *)v87 + 244) == v94)
        {
LABEL_158:
          v83 = v326;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 848) + 4 * v85) = 1;
          if (!imageBuffer)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            v86 = a1 + 880;
          }
          v96 = 0;
          v97 = 904;
          while (*(_DWORD *)(a1 + v97) != *(_DWORD *)(*(_QWORD *)(a1 + 864) + 4 * v85))
          {
            ++v96;
            v97 += 80;
            if (*(_DWORD *)(a1 + 2252) + 1 == v96)
              goto LABEL_180;
          }
          v98 = *(_QWORD *)v87;
          if (*(_DWORD *)(*(_QWORD *)v87 + 248) != v93 || *(_DWORD *)(v98 + 252) != v94)
          {
            if (*(_BYTE *)(a1 + 154))
            {
              *(_BYTE *)(a1 + 152) = 1;
              *(_BYTE *)(v86 + 80 * v96 + 20) = 1;
            }
            else
            {
              v63 = sub_1B6826ED8((_DWORD *)a1, (_DWORD *)(v86 + 80 * v96), v95, *(_DWORD *)(*(_QWORD *)v87 + 240), *(_DWORD *)(*(_QWORD *)v87 + 244), v93, v94);
              if ((_DWORD)v63)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  v306 = *(_DWORD *)(*(_QWORD *)v87 + 8);
                  buf[0] = 67109120;
                  buf[1] = v306;
                  _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to scale reference %d\n", (uint8_t *)buf, 8u);
                }
                goto LABEL_181;
              }
              v98 = *(_QWORD *)v87;
              v86 = a1 + 880;
            }
            *(_DWORD *)(v98 + 248) = v93;
            *(_DWORD *)(v98 + 252) = v94;
            v99 = v86 + 80 * v96;
            *(_WORD *)(v99 + 50) = v93;
            *(_WORD *)(v99 + 54) = v94;
          }
          imageBuffer = 1;
          v83 = v326;
        }
        if (++v85 == v48)
          goto LABEL_250;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_180;
      LOWORD(buf[0]) = 0;
      v65 = MEMORY[0x1E0C81028];
      v66 = "Cannot find reference frame\n";
    }
    else
    {
      v82 = (uint64_t)&v33[4 * v74 + 134];
      v83 = v326;
      while (*(_QWORD *)v82)
      {
        sub_1B689013C(__sza, *(_DWORD *)(*(_QWORD *)v82 + 680), theDicta);
        LODWORD(v74) = v74 + 1;
        v82 += 16;
        if (v33[3] <= (int)v74)
          goto LABEL_140;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_180;
      LOWORD(buf[0]) = 0;
      v65 = MEMORY[0x1E0C81028];
      v66 = "Cannot find reference frame from long-term RPS\n";
    }
LABEL_179:
    _os_log_error_impl(&dword_1B676B000, v65, OS_LOG_TYPE_ERROR, v66, (uint8_t *)buf, 2u);
    goto LABEL_180;
  }
  v315 = v64;
  v74 = 0;
  v75 = 0;
  v76 = (uint64_t *)(v33 + 136);
  while (1)
  {
    v77 = (_DWORD *)*(v76 - 1);
    if (!v77)
      break;
    v78 = *(_QWORD *)(v51 + 592);
    if (!*(_BYTE *)(v78 + 136) || !*(_BYTE *)(*(_QWORD *)(a1 + 88) + 523))
      goto LABEL_128;
    v79 = *(_DWORD *)(v78 + 248);
    if (v79 <= 0)
      v79 = *(_DWORD *)(v78 + 240);
    if (v77[60] == v79)
    {
      v80 = *(_DWORD *)(v78 + 252);
      if (v80 <= 0)
        v80 = *(_DWORD *)(v78 + 244);
      if (v77[61] == v80)
        goto LABEL_128;
    }
    if (v49 < 1)
    {
      ++v49;
LABEL_128:
      sub_1B67B665C(&time[16 * v48++], (uint64_t)v77, *v76);
      goto LABEL_129;
    }
    sub_1B689013C(__sza, v77[170], theDicta);
    v75 = 1;
    ++v49;
LABEL_129:
    ++v74;
    v72 = (int)v33[3];
    v76 += 2;
    v81 = v74 < v72 && (int)v48 < v45;
    v51 = v328;
    if (!v81)
    {
      v64 = v315;
      goto LABEL_134;
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    v65 = MEMORY[0x1E0C81028];
    v66 = "Cannot find reference frame from long-term RPS\n";
    goto LABEL_179;
  }
LABEL_180:
  v63 = 4294954394;
LABEL_181:
  for (i = 16; i != -16; i -= 16)
    sub_1B6772C88((uint64_t)&time[i]);
  if ((_DWORD)v63)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)time = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "PrepareReference failed\n", time, 2u);
    }
    goto LABEL_186;
  }
  if (v313[156] && v313[11] == v313[24])
    imageBuffera = (__CVBuffer *)v313[156];
  else
    imageBuffera = (__CVBuffer *)v313[154];
  *(CMTime *)time = v331;
  CMTimeGetSeconds((CMTime *)time);
  kdebug_trace();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v309 = *(_QWORD *)(v51 + 2688);
  v107 = *(unsigned __int8 *)(v51 + 640);
  v108 = *(_QWORD *)(a1 + 80);
  v109 = *(unsigned __int8 **)(v108 + 12704);
  v110 = *(_QWORD *)(v108 + 12712);
  v316 = v109;
  *(_QWORD *)time = v109;
  *(_QWORD *)&time[8] = v110;
  if (v110)
  {
    v111 = (unint64_t *)(v110 + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v113 = *(_QWORD *)(v51 + 592);
  if (*(_BYTE *)(v113 + 136))
  {
    v114 = *(_DWORD *)(v113 + 248);
    if (v114 <= 0)
      v114 = *(_DWORD *)(v113 + 240);
    v115 = *(_DWORD *)(v113 + 252);
    if (v115 <= 0)
      v115 = *(_DWORD *)(v113 + 244);
  }
  else
  {
    v114 = *(_DWORD *)(v113 + 276);
    v115 = *(_DWORD *)(v113 + 280);
  }
  if (*(_BYTE *)(a1 + 2545))
  {
    __szb = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    theDictb = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    theDictb = 0;
    __szb = 0;
  }
  if (v107 >= 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Frame type not supported\n", (uint8_t *)buf, 2u);
    }
    goto LABEL_222;
  }
  buf[0] = dword_1B6922474[v107];
  v116 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v116)
  {
    CFDictionarySetValue(Mutable, CFSTR("UserFrameType"), v116);
    CFRelease(v116);
  }
  v310 = v107;
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    v117 = *(_DWORD *)(v51 + 772) - 3;
    if (v117 > 3)
      v118 = 0;
    else
      v118 = *(_QWORD *)(v51 + 8 * v117 + 2256);
    v129 = *(unsigned __int8 *)(v51 + 640);
    if (qword_1EDBB4CB8 != -1)
      dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
    v130 = *(_QWORD *)(a1 + 2296);
    if (*(_QWORD *)(a1 + 2304) != v130)
    {
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v134 = *(_DWORD *)(v328 + 4 * *(int *)(v328 + 772) + 2276);
      if (dword_1EDBB4CC4 > 8 || v129 > 1)
        v136 = 2;
      else
        v136 = 0;
      do
      {
        v137 = (int *)(*(_QWORD *)(a1 + 2344) + v131);
        v138 = *v137;
        if (*v137 >= *(_DWORD *)(a1 + 100) || (v139 = v137[1], v139 >= *(_DWORD *)(a1 + 104)))
        {
          *(_WORD *)(v130 + v132) = *(_WORD *)(v130 + v132) & 0xFFFD | v136;
          v143 = *(_QWORD *)(a1 + 2296);
          v140 = (_WORD *)(v143 + 16 * v133);
          v141 = *(_WORD *)(v143 + v132) & 0x3FF;
          v142 = -13312;
        }
        else
        {
          v140 = (_WORD *)(v130 + v132);
          v141 = *(unsigned __int8 *)(v118 + v138 + v139 * v134) << 10;
          v142 = *v140 & 0x3FF;
        }
        *v140 = v141 | v142;
        ++v133;
        v130 = *(_QWORD *)(a1 + 2296);
        v132 += 16;
        v131 += 8;
      }
      while (v133 < (*(_QWORD *)(a1 + 2304) - v130) >> 4);
    }
    goto LABEL_305;
  }
  v121 = *(_DWORD *)(v51 + 444);
  if (v121 == 1 || v121 == 6 && *(float *)(v328 + 2720) < (float)(int)(*(float *)(v328 + 2720) + 0.5))
  {
    v122 = *(_BYTE *)(*(_QWORD *)(v328 + 40) + 2009);
    v123 = *(_QWORD *)(v328 + 592);
    if (*(_BYTE *)(v123 + 136))
    {
      v124 = *(_DWORD *)(v123 + 248);
      if (v124 <= 0)
        v124 = *(_DWORD *)(v123 + 240);
      v125 = -1 << v122;
      v126 = ~(-1 << v122);
      v127 = (v124 + v126) & (-1 << v122);
      v128 = *(_DWORD *)(v123 + 252);
      if (v128 <= 0)
        v128 = *(_DWORD *)(v123 + 244);
    }
    else
    {
      v125 = -1 << v122;
      v126 = ~(-1 << v122);
      v127 = (*(_DWORD *)(v123 + 276) + v126) & (-1 << v122);
      v128 = *(_DWORD *)(v123 + 280);
    }
    v144 = *(_QWORD *)(a1 + 2320);
    if (*(_QWORD *)(a1 + 2328) != v144)
    {
      v145 = 0;
      v146 = v127 >> v122;
      v147 = ((v128 + v126) & v125) >> v122;
      v148 = *(_QWORD *)(v328 + 2256);
      v149 = *(_QWORD *)(v328 + 2264);
      v150 = *(_QWORD *)(v328 + 2272);
      v151 = *(unsigned __int8 *)(v328 + 640);
      v152 = 9;
      v153 = 13;
      while (1)
      {
        v154 = (int *)(*(_QWORD *)(a1 + 2368) + 8 * v145);
        v155 = *v154;
        if (*v154 < *(_DWORD *)(a1 + 112))
        {
          v156 = v154[1];
          if (v156 < *(_DWORD *)(a1 + 116))
            break;
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 247))
          v176 = 0;
        else
          v176 = v151 == 2;
        if (v176)
          *(_DWORD *)(v144 + 32 * v145 + 4) = 0x1FFFFF;
        v177 = 0;
        *(_BYTE *)(v144 + 32 * v145 + 8) = 51;
        v178 = 1;
        do
        {
          v179 = 0;
          v180 = v178;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 2320) + v152 + v177 + v179++) = 51;
          while ((_DWORD)v179 != 2);
          v178 = 0;
          v177 += 2;
        }
        while ((v180 & 1) != 0);
        v181 = 0;
        v182 = v153;
        do
        {
          for (j = 0; j != 4; ++j)
            *(_BYTE *)(*(_QWORD *)(a1 + 2320) + v182 + j) = 51;
          ++v181;
          v182 += 4;
        }
        while (v181 != 4);
        v144 = *(_QWORD *)(a1 + 2320);
LABEL_304:
        ++v145;
        v152 += 32;
        v153 += 32;
        if (v145 >= (*(_QWORD *)(a1 + 2328) - v144) >> 5)
          goto LABEL_305;
      }
      v157 = 0;
      v158 = 0;
      v159 = *(_DWORD *)(a1 + 124);
      v160 = *(_DWORD *)(a1 + 128) * 2 * v156;
      *(_BYTE *)(v144 + 32 * v145 + 8) = *(_BYTE *)(v150 + v155 + *(_DWORD *)(a1 + 132) * v156);
      v161 = v149 + v160 + 2 * v155;
      v162 = 1;
      while (2)
      {
        v163 = 0;
        v164 = 0;
        v165 = v162;
LABEL_264:
        v166 = *(_DWORD *)(a1 + 128);
        if ((v164 | (2 * v155)) >= v166)
        {
          v167 = *(_QWORD *)(a1 + 2320);
        }
        else
        {
          v167 = *(_QWORD *)(a1 + 2320);
          if ((v158 | (2 * v156)) < *(_DWORD *)(a1 + 140))
          {
            v168 = *(_BYTE *)(v161 + v164 + v166 * v158);
            goto LABEL_269;
          }
        }
        v168 = 51;
LABEL_269:
        *(_BYTE *)(v167 + v152 + v157 + v163++) = v168;
        v164 = 1;
        if ((_DWORD)v163 == 2)
        {
          v162 = 0;
          v157 += 2;
          v158 = 1;
          if ((v165 & 1) == 0)
          {
            v169 = 0;
            v170 = 0;
            v171 = v148 + v159 * 4 * v156 + 4 * v155;
            do
            {
              v172 = 0;
              do
              {
                v173 = *(_DWORD *)(a1 + 124);
                if (4 * v155 + (int)v172 >= v173 || v170 + 4 * v156 >= *(_DWORD *)(a1 + 136))
                  v174 = 51;
                else
                  v174 = *(_BYTE *)(v171 + (int)v172 + v170 * v173);
                *(_BYTE *)(*(_QWORD *)(a1 + 2320) + v153 + v169 + v172++) = v174;
              }
              while ((_DWORD)v172 != 4);
              v169 += 4;
              ++v170;
            }
            while (v170 != 4);
            v144 = *(_QWORD *)(a1 + 2320);
            *(_DWORD *)(v144 + 32 * v145) = 0;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 247))
              v175 = 0;
            else
              v175 = v151 == 2;
            if (v175 && (v155 >= v146 || v156 >= v147))
              *(_DWORD *)(v144 + 32 * v145 + 4) = 0x1FFFFF;
            else
              *(_DWORD *)(v144 + 32 * v145 + 4) = 0;
            LODWORD(v107) = v310;
            goto LABEL_304;
          }
          continue;
        }
        goto LABEL_264;
      }
    }
  }
LABEL_305:
  v184 = *(const UInt8 **)(a1 + 2392);
  v51 = v328;
  if (v184)
  {
    v185 = *(_DWORD *)(*(_QWORD *)(v328 + 584) + 3688);
    if (v185 == 1
      || !v185
      && ((v186 = *(_DWORD *)(v328 + 444), v186 == 1)
       || v186 == 6 && *(float *)(v328 + 2720) < (float)(int)(*(float *)(v328 + 2720) + 0.5)))
    {
      v187 = CFDataCreateWithBytesNoCopy(0, v184, *(_QWORD *)(a1 + 2408), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED660], v187);
      CFRelease(v187);
    }
  }
  value = (void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("AttachDPB"), (const void *)*MEMORY[0x1E0C9AE50]);
  buf[0] = v115 | (v114 << 16);
  v188 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v188)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED668], v188);
    CFRelease(v188);
  }
  buf[0] = 0;
  v189 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v189)
  {
    CFDictionaryAddValue(Mutable, CFSTR("VRAActualDimension"), v189);
    CFRelease(v189);
  }
  buf[0] = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 180);
  v190 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v190)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CECEF0], v190);
    CFRelease(v190);
  }
  if (!*(_BYTE *)(a1 + 152) || *(int *)(v328 + 644) < 1)
  {
LABEL_327:
    if ((v107 & 0xFE) == 2)
    {
      v194 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v195 = 0;
      v196 = 1;
      v197 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v198 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v199 = v196;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 864) + 4 * v195) & 0x80000000) == 0)
        {
          v200 = CFDictionaryCreateMutable(0, 0, v197, v198);
          buf[0] = *(_DWORD *)(*(_QWORD *)(a1 + 864) + 4 * v195);
          v201 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
          if (v201)
          {
            CFDictionarySetValue(v200, CFSTR("ReferenceFrameNumDriver"), v201);
            CFRelease(v201);
          }
          buf[0] = *(_DWORD *)(*(_QWORD *)(a1 + 848) + 4 * v195);
          v202 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
          if (v202)
          {
            CFDictionarySetValue(v200, CFSTR("ReferenceRVRAIndex"), v202);
            CFRelease(v202);
          }
          CFArrayAppendValue(v194, v200);
          CFRelease(v200);
        }
        v196 = 0;
        v195 = 1;
      }
      while ((v199 & 1) != 0);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED618], v194);
      v51 = v328;
      LODWORD(v107) = v310;
      CFRelease(v194);
    }
    v203 = *(_QWORD *)(a1 + 88);
    if (*(_BYTE *)(v203 + 590))
    {
      buf[0] = 6;
      v204 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v204)
      {
        CFDictionarySetValue(Mutable, CFSTR("RoundingOffsetMode"), v204);
        CFRelease(v204);
      }
      v205 = vdupq_n_s16(0x2AAu);
      *(int16x8_t *)(a1 + 2416) = v205;
      *(_OWORD *)(a1 + 2432) = xmmword_1B6917900;
      *(_OWORD *)(a1 + 2448) = xmmword_1B6917910;
      *(_QWORD *)(a1 + 2464) = v205.i64[0];
      *(_DWORD *)(a1 + 2472) = 22413654;
      v206 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(a1 + 2416), 72, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      CFDictionaryAddValue(Mutable, CFSTR("RoundingOffsets"), v206);
      CFRelease(v206);
      v203 = *(_QWORD *)(a1 + 88);
    }
    if (*(_BYTE *)(v203 + 585))
    {
      v207 = *(_QWORD *)(v51 + 2688);
      v208 = *(unsigned __int8 *)(v207 + 546);
      if (*(_BYTE *)(v207 + 546))
      {
        v208 = *(char *)(v207 + 549);
        v209 = *(char *)(v207 + 548);
      }
      else
      {
        v209 = 0;
      }
      if (*(_DWORD *)(a1 + 148) == 1)
      {
        buf[0] = v208;
        v210 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v210)
        {
          CFDictionarySetValue(Mutable, CFSTR("SliceAlphaC0OffsetDiv2"), v210);
          CFRelease(v210);
        }
        buf[0] = v209;
        v211 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v211)
        {
LABEL_353:
          CFDictionarySetValue(Mutable, CFSTR("SliceBetaOffsetDiv2"), v211);
          CFRelease(v211);
        }
      }
      else
      {
        buf[0] = v208;
        v212 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v212)
        {
          CFDictionarySetValue(Mutable, CFSTR("SliceTcOffsetDiv2"), v212);
          CFRelease(v212);
        }
        buf[0] = v209;
        v211 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v211)
          goto LABEL_353;
      }
    }
    if (*(_BYTE *)(a1 + 2545))
    {
      buf[0] = 0;
      v213 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v214 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, buf);
      if (!v214)
        goto LABEL_222;
      valuePtr = 1;
      v215 = CFNumberCreate(v213, kCFNumberSInt32Type, &valuePtr);
      v216 = (const void *)*MEMORY[0x1E0CED600];
      CFDictionarySetValue(__szb, (const void *)*MEMORY[0x1E0CED600], v214);
      CFDictionarySetValue(theDictb, v216, v215);
      CFRelease(v214);
      CFRelease(v215);
    }
    else if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 582))
    {
      buf[0] = *v316;
      v217 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED600], v217);
      CFRelease(v217);
    }
    v218 = *(_QWORD *)(a1 + 88);
    if (*(_BYTE *)(v218 + 582))
    {
      v219 = *(_DWORD *)(v218 + 432);
      v220 = *(_QWORD *)(a1 + 80);
      if (v219)
      {
        v221 = *(_DWORD *)(v220 + 3348) + 1;
        v222 = -v221 < 0;
        v223 = -v221 & 0x3F;
        v224 = v221 & 0x3F;
        if (!v222)
          v224 = -v223;
        buf[0] = v224;
        v225 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v225)
          goto LABEL_382;
      }
      else if (*(_DWORD *)(v220 + 1008) == 248)
      {
        v226 = *(_DWORD *)(v51 + 2336);
        if (v226 + 1 >= 0xCA)
        {
          if (v226 >= 0x12D)
            v227 = v226 < 0x191;
          else
            v227 = 2;
        }
        else
        {
          v227 = 3;
        }
        buf[0] = (*(_DWORD *)(v220 + 3348) + v227) & 0x3F;
        v225 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v225)
        {
LABEL_382:
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED600], v225);
          CFRelease(v225);
        }
      }
      else if (*(_BYTE *)(v220 + 1144))
      {
        v228 = *(_DWORD *)(v220 + 1148);
        if (!*(_DWORD *)(*(_QWORD *)(v51 + 3008) + 72))
        {
          v228 = (v228 + 1) % 5;
          *(_DWORD *)(v220 + 1148) = v228;
        }
        v229 = v228 + *(_DWORD *)(v220 + 3348);
        v230 = v229 & 0x3F;
        v231 = -v229;
        v222 = v231 < 0;
        v232 = v231 & 0x3F;
        v233 = v222 ? v230 : -v232;
        buf[0] = v233;
        v225 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v225)
          goto LABEL_382;
      }
    }
    if (v316[17] && (_DWORD)v107 == 2 && *(_BYTE *)(*(_QWORD *)(a1 + 88) + 582))
    {
      v234 = *(char *)(v309 + 500);
      v235 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v236 = *(unsigned __int8 *)(v309 + 540);
      v237 = *(char *)(v309 + 541) + v236;
      v238 = 1 << (*(_BYTE *)(v309 + 541) + v236);
      buf[0] = 1 << v236;
      buf[1] = v238;
      buf[2] = v238;
      valuePtr = v236;
      v239 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v239)
      {
        CFDictionarySetValue(v235, CFSTR("WeightData_LumaLog2WeightDenom"), v239);
        CFRelease(v239);
      }
      valuePtr = v237;
      v240 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v240)
      {
        CFDictionarySetValue(v235, CFSTR("WeightData_ChromaLog2WeightDenom"), v240);
        CFRelease(v240);
      }
      v241 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v307 = v235;
      v242 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v243 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (v234 >= 1)
      {
        v244 = 0;
        v317 = v234;
        v245 = v309;
        do
        {
          v246 = 0;
          v247 = buf[v244];
          do
          {
            v248 = v245 + v246;
            v249 = v247 != *(__int16 *)(v245 + v246 + 736) || *(_WORD *)(v248 + 640) != 0;
            LOBYTE(valuePtr) = v249;
            v250 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
            if (v250)
            {
              CFArrayAppendValue(v241, v250);
              CFRelease(v250);
            }
            valuePtr = *(__int16 *)(v248 + 736);
            v251 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v251)
            {
              CFArrayAppendValue(v242, v251);
              CFRelease(v251);
            }
            valuePtr = *(__int16 *)(v245 + v246 + 640);
            v252 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v252)
            {
              CFArrayAppendValue(v243, v252);
              CFRelease(v252);
            }
            v246 += 2;
          }
          while (v246 != 6);
          ++v244;
          v245 += 6;
        }
        while (v244 != v317);
      }
      CFDictionarySetValue(v307, CFSTR("WeightData_WeightFlagArray"), v241);
      CFDictionarySetValue(v307, CFSTR("WeightData_Weight"), v242);
      CFDictionarySetValue(v307, CFSTR("WeightData_Offset"), v243);
      CFRelease(v241);
      CFRelease(v242);
      CFRelease(v243);
      CFDictionarySetValue(Mutable, CFSTR("WeightedPredictionInfo"), v307);
      CFRelease(v307);
      v51 = v328;
      LODWORD(v107) = v310;
    }
    v253 = (const void *)*MEMORY[0x1E0CED650];
    v254 = *(float *)(v51 + 2720) + 0.5;
    if (*(_BYTE *)(a1 + 2545))
    {
      buf[0] = (int)v254;
      v255 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v255)
      {
        CFDictionarySetValue(__szb, v253, v255);
        CFRelease(v255);
      }
      buf[0] = (int)(*(float *)(v51 + 2724) + 0.5);
      v256 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v256)
      {
        CFDictionarySetValue(theDictb, v253, v256);
        CFRelease(v256);
      }
    }
    else
    {
      buf[0] = (int)v254 + 6 * *(unsigned __int8 *)(*(_QWORD *)(v51 + 40) + 2000) - 48;
      v257 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v257)
      {
        CFDictionarySetValue(Mutable, v253, v257);
        CFRelease(v257);
      }
    }
    buf[0] = *(_DWORD *)(*(_QWORD *)(v51 + 608) + 680);
    v258 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v258)
    {
      CFDictionarySetValue(Mutable, CFSTR("POCLsb"), v258);
      CFRelease(v258);
    }
    buf[0] = *(_DWORD *)(*(_QWORD *)(v51 + 608) + 12);
    v259 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v259)
    {
      CFDictionarySetValue(Mutable, CFSTR("TemporalID"), v259);
      CFRelease(v259);
    }
    if (!*(_DWORD *)(*(_QWORD *)(v51 + 608) + 36))
    {
      v260 = *(_DWORD *)(a1 + 148);
      if (v260 != 1)
      {
LABEL_420:
        if (v260 || !(_DWORD)v107)
        {
          if (v260 == 1)
          {
            if (*(_BYTE *)(v51 + 3024))
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED5C8], value);
            if ((*(_BYTE *)(*(_QWORD *)(v51 + 608) + 36) & 2) != 0)
            {
              CFDictionarySetValue(Mutable, CFSTR("MarkCurrentFrameAsLTR"), value);
              v265 = *(_DWORD *)(v51 + 432);
              if ((v265 & 0x80000000) == 0)
              {
                v266 = *(_QWORD *)sub_1B67CCE18(*(_QWORD *)(v51 + 744), v265);
                if (v266)
                  sub_1B67908F4(Mutable, CFSTR("FrameNumForLTRToReplace"), *(_DWORD *)(v266 + 684));
              }
            }
          }
          v119 = 0;
          v262 = 0;
        }
        else
        {
          v261 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v262 = v261;
          if (*(_BYTE *)(v309 + 20))
          {
            v263 = *(_DWORD *)(v309 + 272);
            CFDictionarySetValue(v261, CFSTR("ShortTermRefPicSetSPSFlag"), value);
            buf[0] = v263;
            v264 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
            if (v264)
            {
              CFDictionarySetValue(v262, CFSTR("ShortTermRefPicSetIdx"), v264);
              CFRelease(v264);
            }
            v119 = 0;
          }
          else
          {
            v288 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v119 = v288;
            v289 = *(_QWORD *)(v51 + 1112);
            v290 = *(unsigned __int8 *)(v289 + 163);
            if (*(_BYTE *)(v289 + 163))
              v291 = value;
            else
              v291 = (const void *)*MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(v288, CFSTR("InterRefPicSetPredictionFlag"), v291);
            if (v290)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "inter_ref_pic_set_prediction_flag is true. Not implemented yet.\n", (uint8_t *)buf, 2u);
              }
              v120 = -12910;
              if (!v262)
                goto LABEL_444;
LABEL_443:
              CFRelease(v262);
              goto LABEL_444;
            }
            v292 = *(unsigned __int8 *)(v289 + 177);
            v293 = *(_WORD *)(v289 + 242);
            v294 = *(_WORD *)(v289 + 244);
            buf[0] = *(unsigned __int8 *)(v289 + 176);
            v295 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
            if (v295)
            {
              CFDictionarySetValue(v119, CFSTR("NumNegativePics"), v295);
              CFRelease(v295);
            }
            buf[0] = v292;
            v296 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
            if (v296)
            {
              CFDictionarySetValue(v119, CFSTR("NumPositivePics"), v296);
              CFRelease(v296);
            }
            v297 = CFArrayCreateMutable(0, 16, MEMORY[0x1E0C9B378]);
            for (k = 0; k != 32; k += 2)
            {
              LOWORD(buf[0]) = *(_WORD *)(v289 + 178 + k);
              v299 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
              if (v299)
              {
                CFArrayAppendValue(v297, v299);
                CFRelease(v299);
              }
            }
            CFDictionarySetValue(v119, CFSTR("DeltaPOCS0Minus1"), v297);
            CFRelease(v297);
            LOWORD(buf[0]) = v293;
            v300 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
            if (v300)
            {
              CFDictionarySetValue(v119, CFSTR("UsedByCurrPicS0Flag"), v300);
              CFRelease(v300);
            }
            v301 = CFArrayCreateMutable(0, 16, MEMORY[0x1E0C9B378]);
            v302 = 0;
            v303 = v289 + 210;
            do
            {
              LOWORD(buf[0]) = *(_WORD *)(v303 + v302);
              v304 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
              if (v304)
              {
                CFArrayAppendValue(v301, v304);
                CFRelease(v304);
              }
              v302 += 2;
            }
            while (v302 != 32);
            CFDictionarySetValue(v119, CFSTR("DeltaPOCS1Minus1"), v301);
            CFRelease(v301);
            LOWORD(buf[0]) = v294;
            v305 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
            if (v305)
            {
              CFDictionarySetValue(v119, CFSTR("UsedByCurrPicS1Flag"), v305);
              CFRelease(v305);
            }
            CFDictionarySetValue(v262, CFSTR("RPSData"), v119);
            v51 = v328;
          }
          CFDictionarySetValue(Mutable, CFSTR("RPSInfo"), v262);
        }
        if (*(_BYTE *)(a1 + 154))
        {
          v267 = *(_BYTE **)(v51 + 24);
          if (v267[80])
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED588], value);
            v267 = *(_BYTE **)(v51 + 24);
          }
          if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v267 + 24))(v267))
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED4D0], value);
        }
        if (*(_BYTE *)(a1 + 2545))
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED4C8], __szb);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED4A8], theDictb);
        }
        v120 = 0;
        if (!v262)
          goto LABEL_444;
        goto LABEL_443;
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED628], value);
    }
    v260 = *(_DWORD *)(a1 + 148);
    goto LABEL_420;
  }
  v191 = sub_1B682671C((_DWORD *)(a1 + 880), 0);
  v192 = v191;
  if (!*(_BYTE *)(a1 + 2545))
  {
    if (!v191)
      goto LABEL_222;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED648], v191);
LABEL_326:
    CFRelease(v192);
    goto LABEL_327;
  }
  if (v191)
  {
    v193 = (const void *)*MEMORY[0x1E0CED648];
    CFDictionarySetValue(__szb, (const void *)*MEMORY[0x1E0CED648], v191);
    CFRelease(v192);
    v192 = sub_1B682671C((_DWORD *)(a1 + 880), 1u);
    if (v192)
    {
      CFDictionarySetValue(theDictb, v193, v192);
      goto LABEL_326;
    }
  }
LABEL_222:
  v119 = 0;
  v120 = -12910;
LABEL_444:
  if (__szb)
    CFRelease(__szb);
  if (theDictb)
    CFRelease(theDictb);
  if (v119)
    CFRelease(v119);
  if (v120 && Mutable)
    CFRelease(Mutable);
  v268 = *(std::__shared_weak_count **)&time[8];
  if (*(_QWORD *)&time[8])
  {
    v269 = (unint64_t *)(*(_QWORD *)&time[8] + 8);
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  if (Mutable)
  {
    if (*(_DWORD *)(a1 + 148))
    {
      v271 = 0;
    }
    else
    {
      v272 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v271 = v272;
      v273 = *(_QWORD *)(a1 + 88);
      v274 = *(_DWORD *)(v273 + 620);
      if (v274 == 1)
        goto LABEL_472;
      if (v274 != 2)
        goto LABEL_473;
      v275 = *(_QWORD *)(v51 + 3008);
      v276 = *(_DWORD *)(v275 + 76);
      v277 = v275 + 976;
      v278 = v275 + 120 * v276 + 136;
      if (v276 >= 7)
        v278 = 0;
      v279 = (double)(*(__int16 *)(v273 + 88) * *(__int16 *)(v273 + 86));
      v280 = v276 == 9 ? v277 : v278;
      if (*(double *)(v280 + 8) * v279 > 125337600.0)
      {
LABEL_472:
        CFDictionarySetValue(v272, (const void *)*MEMORY[0x1E0CED170], (const void *)*MEMORY[0x1E0C9AE50]);
        v281 = 1;
      }
      else
      {
LABEL_473:
        CFDictionarySetValue(v272, (const void *)*MEMORY[0x1E0CED170], (const void *)*MEMORY[0x1E0C9AE40]);
        v281 = 0;
      }
      *(_BYTE *)(a1 + 2544) = v281;
      v282 = *(void **)(a1 + 160);
      if (v282)
        CFDictionaryApplyFunction(v271, (CFDictionaryApplierFunction)sub_1B6826708, v282);
    }
    *(CMTime *)time = v331;
    CMTimeGetSeconds((CMTime *)time);
    kdebug_trace();
    v283 = *(_QWORD *)(a1 + 88);
    if (*(_BYTE *)(v283 + 231) || *(_BYTE *)(v283 + 232))
    {
      sub_1B67ED940(a1 + 8);
      v283 = *(_QWORD *)(a1 + 88);
    }
    if (*(_DWORD *)(v283 + 512))
      *(_BYTE *)(v51 + 418) = *(_BYTE *)(v283 + 582);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 232), 0xFFFFFFFFFFFFFFFFLL);
    *(_BYTE *)(v51 + 568) = 0;
    *(_QWORD *)(v51 + 536) = 0;
    sub_1B67ED940(v51 + 536);
    *(CMTime *)time = v331;
    CMTimeGetSeconds((CMTime *)time);
    kdebug_trace();
    v284 = *(OpaqueVTCompressionSession **)(a1 + 160);
    if (v284)
    {
      presentationTimeStamp = v331;
      duration = v331;
      v63 = VTCompressionSessionEncodeFrame(v284, imageBuffera, &presentationTimeStamp, &duration, Mutable, (void *)v51, 0);
      if ((_DWORD)v63)
      {
        if (dword_1EF137CD0 >= 1)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "VTCompressionSessionEncodeFrame failed, err: %d\n", v63);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)time = 67109120;
            *(_DWORD *)&time[4] = v63;
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VTCompressionSessionEncodeFrame failed, err: %d\n", time, 8u);
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, v51, v63, 0, 0);
        goto LABEL_493;
      }
    }
    else
    {
      v285 = *(_QWORD *)(a1 + 80);
      v286 = *(void (**)(_QWORD, _QWORD, uint64_t, __CVBuffer *, __CFDictionary *, const __CFDictionary *))(v285 + 1120);
      if (v286)
        v286(*(_QWORD *)(v285 + 1136), v313[36], v51, imageBuffera, Mutable, v271);
    }
    *(CMTime *)time = v331;
    CMTimeGetSeconds((CMTime *)time);
    kdebug_trace();
    v287 = *(_QWORD *)(a1 + 88);
    if (*(_BYTE *)(v287 + 231) || *(_BYTE *)(v287 + 232))
      sub_1B67ED98C(a1 + 8);
    v63 = 0;
LABEL_493:
    CFRelease(Mutable);
    if (v271)
      CFRelease(v271);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)time = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to create frame properties\n", time, 2u);
    }
    v63 = 1;
  }
LABEL_186:
  if (v324)
  {
    v101 = (unint64_t *)&v324->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
  }
  v103 = v335;
  if (v335)
  {
    v104 = (unint64_t *)&v335->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  return v63;
}

void sub_1B6820BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B6772C88(v1 - 128);
  sub_1B6772C88(v1 - 184);
  sub_1B6772C88(v1 - 168);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6820CB4(uint64_t a1, uint64_t a2)
{
  int v3;
  opaqueCMSampleBuffer *v4;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  const void *v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const void *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFTypeID v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  const void *v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  uint64_t v27;
  const void *v28;
  const void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const __CFDictionary *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  CFTypeID v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  CFTypeID v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  CFTypeID v43;
  int v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  CFTypeID v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  CFTypeID v50;
  const __CFDictionary *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  CFTypeID v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  CFTypeID v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  CFTypeID v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  CFTypeID v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  CFTypeID v66;
  const __CFDictionary *v67;
  const __CFNumber *v68;
  const __CFNumber *v69;
  CFTypeID v70;
  const __CFNumber *v71;
  const __CFNumber *v72;
  CFTypeID v73;
  const __CFNumber *v74;
  const __CFNumber *v75;
  CFTypeID v76;
  const __CFDictionary *v77;
  const __CFNumber *v78;
  const __CFNumber *v79;
  CFTypeID v80;
  const __CFNumber *v81;
  const __CFNumber *v82;
  CFTypeID v83;
  const __CFNumber *v84;
  const __CFNumber *v85;
  CFTypeID v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  const __CFArray *v91;
  const __CFDictionary *v92;
  const __CFNumber *v93;
  _BYTE *v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  IOSurfaceID *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  _QWORD *v114;
  char v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *key;
  _DWORD *valuePtr;
  const __CFArray *theArray;
  void *v133;
  _QWORD v134[2];
  _QWORD v135[2];
  _QWORD v136[2];
  CVPixelBufferRef v137;
  uint8_t buf[16];
  const void *v139;
  const void *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 80);
  v137 = 0;
  v4 = *(opaqueCMSampleBuffer **)(a1 + 248);
  v140 = 0;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v4, 0);
  if (!SampleAttachmentsArray)
    goto LABEL_95;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  if (!ValueAtIndex)
    goto LABEL_95;
  v7 = ValueAtIndex;
  v8 = (const void *)*MEMORY[0x1E0CEDB28];
  Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CEDB28]);
  if (!Value)
    goto LABEL_95;
  v10 = Value;
  v11 = (const void *)*MEMORY[0x1E0CED4F8];
  v139 = CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CED4F8]);
  v12 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CED4D8]);
  if (v12)
  {
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (v14 == CFNumberGetTypeID())
      CFNumberGetValue(v13, kCFNumberSInt32Type, (void *)(a1 + 2240));
  }
  v15 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CED4E8]);
  if (v15)
  {
    v16 = v15;
    v17 = CFGetTypeID(v15);
    if (v17 == CFNumberGetTypeID())
      CFNumberGetValue(v16, kCFNumberSInt32Type, (void *)(a1 + 2244));
  }
  v18 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CED4E0]);
  if (v18)
  {
    v19 = v18;
    v20 = CFGetTypeID(v18);
    if (v20 == CFNumberGetTypeID())
      CFNumberGetValue(v19, kCFNumberSInt32Type, (void *)(a1 + 2248));
  }
  valuePtr = (_DWORD *)(a1 + 2252);
  v21 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CED4F0]);
  if (v21)
  {
    v22 = v21;
    v23 = CFGetTypeID(v21);
    if (v23 == CFNumberGetTypeID())
      CFNumberGetValue(v22, kCFNumberSInt32Type, valuePtr);
  }
  if (!*(_BYTE *)(a1 + 2545))
    goto LABEL_20;
  v24 = (const void *)*MEMORY[0x1E0CEDA48];
  if (!CFDictionaryContainsKey(v7, (const void *)*MEMORY[0x1E0CEDA48]))
    goto LABEL_20;
  v25 = (const __CFDictionary *)CFDictionaryGetValue(v7, v24);
  v26 = (const __CFDictionary *)CFDictionaryGetValue(v25, v8);
  if (!v26)
  {
LABEL_95:
    v97 = 4294954394;
    goto LABEL_96;
  }
  v140 = CFDictionaryGetValue(v26, v11);
LABEL_20:
  v113 = v3;
  v27 = 0;
  v114 = (_QWORD *)(a2 + 608);
  key = (void *)*MEMORY[0x1E0CED520];
  v129 = (void *)*MEMORY[0x1E0CED528];
  v128 = (void *)*MEMORY[0x1E0CED550];
  v127 = (void *)*MEMORY[0x1E0CED540];
  v126 = (void *)*MEMORY[0x1E0CED538];
  v125 = (void *)*MEMORY[0x1E0CED558];
  v124 = (void *)*MEMORY[0x1E0CED560];
  v123 = (void *)*MEMORY[0x1E0CED580];
  v122 = (void *)*MEMORY[0x1E0CED570];
  v121 = (void *)*MEMORY[0x1E0CED568];
  v120 = (void *)*MEMORY[0x1E0CED578];
  v119 = (void *)*MEMORY[0x1E0CED530];
  v133 = (void *)*MEMORY[0x1E0CED518];
  v28 = (const void *)*MEMORY[0x1E0CED500];
  v29 = (const void *)*MEMORY[0x1E0CED510];
  v117 = (void *)*MEMORY[0x1E0CED508];
  v30 = 1;
  v118 = (void *)*MEMORY[0x1E0CED548];
  do
  {
    v116 = v30;
    v31 = 0;
    v32 = 8 * v27;
    theArray = (const __CFArray *)*(&v139 + v27);
    v33 = -1;
    do
    {
      v34 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v33 + 1);
      v35 = (const __CFNumber *)CFDictionaryGetValue(v34, key);
      v36 = v35;
      if (v35)
      {
        v37 = CFGetTypeID(v35);
        if (v37 == CFNumberGetTypeID())
          CFNumberGetValue(v36, kCFNumberSInt32Type, (void *)(a1 + v31 + 904));
      }
      v38 = (const __CFNumber *)CFDictionaryGetValue(v34, v129);
      v39 = v38;
      if (v38)
      {
        v40 = CFGetTypeID(v38);
        if (v40 == CFNumberGetTypeID())
          CFNumberGetValue(v39, kCFNumberSInt32Type, (void *)(a1 + v31 + 908));
      }
      *(_DWORD *)buf = 0;
      v41 = (const __CFNumber *)CFDictionaryGetValue(v34, v128);
      v42 = v41;
      if (v41 && (v43 = CFGetTypeID(v41), v43 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v42, kCFNumberSInt32Type, buf);
        v44 = *(_DWORD *)buf;
      }
      else
      {
        v44 = 0;
      }
      *(_DWORD *)(a1 + v31 + 896) = v44;
      v45 = (const __CFNumber *)CFDictionaryGetValue(v34, v127);
      v46 = v45;
      if (v45)
      {
        v47 = CFGetTypeID(v45);
        if (v47 == CFNumberGetTypeID())
          CFNumberGetValue(v46, kCFNumberSInt64Type, (void *)(a1 + v31 + 920));
      }
      v48 = (const __CFNumber *)CFDictionaryGetValue(v34, v126);
      v49 = v48;
      if (v48)
      {
        v50 = CFGetTypeID(v48);
        if (v50 == CFNumberGetTypeID())
          CFNumberGetValue(v49, kCFNumberSInt32Type, (void *)(a1 + v31 + 912));
      }
      v51 = (const __CFDictionary *)CFDictionaryGetValue(v34, v125);
      v52 = (const __CFNumber *)CFDictionaryGetValue(v51, v124);
      v53 = v52;
      if (v52)
      {
        v54 = CFGetTypeID(v52);
        if (v54 == CFNumberGetTypeID())
          CFNumberGetValue(v53, kCFNumberSInt32Type, (void *)(a1 + v31 + 936));
      }
      v55 = (const __CFNumber *)CFDictionaryGetValue(v51, v123);
      v56 = v55;
      if (v55)
      {
        v57 = CFGetTypeID(v55);
        if (v57 == CFNumberGetTypeID())
          CFNumberGetValue(v56, kCFNumberSInt32Type, (void *)(a1 + v31 + 940));
      }
      v58 = (const __CFNumber *)CFDictionaryGetValue(v51, v122);
      v59 = v58;
      if (v58)
      {
        v60 = CFGetTypeID(v58);
        if (v60 == CFNumberGetTypeID())
          CFNumberGetValue(v59, kCFNumberSInt32Type, (void *)(a1 + v31 + 944));
      }
      v61 = (const __CFNumber *)CFDictionaryGetValue(v51, v121);
      v62 = v61;
      if (v61)
      {
        v63 = CFGetTypeID(v61);
        if (v63 == CFNumberGetTypeID())
          CFNumberGetValue(v62, kCFNumberSInt32Type, (void *)(a1 + v31 + 948));
      }
      v64 = (const __CFNumber *)CFDictionaryGetValue(v51, v120);
      v65 = v64;
      if (v64)
      {
        v66 = CFGetTypeID(v64);
        if (v66 == CFNumberGetTypeID())
          CFNumberGetValue(v65, kCFNumberSInt32Type, (void *)(a1 + v31 + 952));
      }
      v67 = (const __CFDictionary *)CFDictionaryGetValue(v34, v119);
      v68 = (const __CFNumber *)CFDictionaryGetValue(v67, v133);
      v69 = v68;
      if (v68)
      {
        v70 = CFGetTypeID(v68);
        if (v70 == CFNumberGetTypeID())
          CFNumberGetValue(v69, kCFNumberSInt16Type, (void *)(a1 + v31 + 928));
      }
      v71 = (const __CFNumber *)CFDictionaryGetValue(v67, v28);
      v72 = v71;
      if (v71)
      {
        v73 = CFGetTypeID(v71);
        if (v73 == CFNumberGetTypeID())
          CFNumberGetValue(v72, kCFNumberSInt16Type, (void *)(a1 + v31 + 932));
      }
      if (CFDictionaryContainsKey(v67, v29))
      {
        v74 = (const __CFNumber *)CFDictionaryGetValue(v67, v29);
        v75 = v74;
        if (!v74)
          goto LABEL_65;
      }
      else
      {
        v74 = (const __CFNumber *)CFDictionaryGetValue(v67, v117);
        v75 = v74;
        if (!v74)
          goto LABEL_65;
      }
      v76 = CFGetTypeID(v74);
      if (v76 == CFNumberGetTypeID())
        CFNumberGetValue(v75, kCFNumberSInt32Type, (void *)(a1 + v32 + 880));
LABEL_65:
      v77 = (const __CFDictionary *)CFDictionaryGetValue(v34, v118);
      v78 = (const __CFNumber *)CFDictionaryGetValue(v77, v133);
      v79 = v78;
      if (v78)
      {
        v80 = CFGetTypeID(v78);
        if (v80 == CFNumberGetTypeID())
          CFNumberGetValue(v79, kCFNumberSInt16Type, (void *)(a1 + v31 + 930));
      }
      v81 = (const __CFNumber *)CFDictionaryGetValue(v77, v28);
      v82 = v81;
      if (v81)
      {
        v83 = CFGetTypeID(v81);
        if (v83 == CFNumberGetTypeID())
          CFNumberGetValue(v82, kCFNumberSInt16Type, (void *)(a1 + v31 + 934));
      }
      if (CFDictionaryContainsKey(v77, v29))
      {
        v84 = (const __CFNumber *)CFDictionaryGetValue(v77, v29);
        v85 = v84;
        if (!v84)
          goto LABEL_77;
      }
      else
      {
        v84 = (const __CFNumber *)CFDictionaryGetValue(v77, v117);
        v85 = v84;
        if (!v84)
          goto LABEL_77;
      }
      v86 = CFGetTypeID(v84);
      if (v86 == CFNumberGetTypeID())
        CFNumberGetValue(v85, kCFNumberSInt32Type, (void *)(a1 + v32 + 884));
LABEL_77:
      v87 = *valuePtr;
      ++v33;
      v31 += 80;
      v32 += 80;
    }
    while (v33 < v87);
    v27 = 1;
    v30 = 0;
  }
  while (((*(_BYTE *)(a1 + 2545) != 0) & v116) != 0);
  v88 = 0;
  v89 = (v87 + 1);
  v90 = 904;
  do
  {
    if (*(_DWORD *)(a1 + v90) > v88)
      v88 = *(_DWORD *)(a1 + v90);
    v90 += 80;
    --v89;
  }
  while (v89);
  *(_DWORD *)(*v114 + 684) = v88;
  v91 = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(a1 + 248), 0);
  if (!v91)
    goto LABEL_95;
  v92 = (const __CFDictionary *)CFArrayGetValueAtIndex(v91, 0);
  if (!v92)
    goto LABEL_95;
  v93 = (const __CFNumber *)CFDictionaryGetValue(v92, (const void *)*MEMORY[0x1E0CEDA78]);
  if (v93)
  {
    LODWORD(v139) = 0;
    CFNumberGetValue(v93, kCFNumberSInt32Type, &v139);
    v94 = *(_BYTE **)(a2 + 16);
    if (v94[33])
    {
      v95 = (__int16)v139;
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v94 + 32))(v94))
        *(_WORD *)(*(_QWORD *)(a2 + 24) + 16) = v95;
    }
  }
  v96 = *(_QWORD *)(a1 + 88);
  if (!*(_BYTE *)(v96 + 582)
    || *(_BYTE *)(a1 + 154)
    || !*(_QWORD *)(v96 + 40) && !*(_BYTE *)(v96 + 49) && !*(_BYTE *)(v96 + 48))
  {
    goto LABEL_134;
  }
  if (v113)
    goto LABEL_135;
  v110 = *(_QWORD *)(a2 + 616);
  v136[0] = *(_QWORD *)(a2 + 608);
  v136[1] = v110;
  if (v110)
  {
    v111 = (unint64_t *)(v110 + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v97 = sub_1B68262D8(a1, v136, v88, 0);
  sub_1B6772C88((uint64_t)v136);
  if (!(_DWORD)v97)
  {
LABEL_135:
    if (!*(_BYTE *)(a1 + 2545))
      goto LABEL_134;
    v99 = *(_QWORD *)(a2 + 624);
    *(_DWORD *)(v99 + 684) = v88;
    v100 = *(_QWORD *)(a2 + 632);
    v135[0] = v99;
    v135[1] = v100;
    if (v100)
    {
      v101 = (unint64_t *)(v100 + 8);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    v97 = sub_1B68262D8(a1, v135, v88, 1u);
    sub_1B6772C88((uint64_t)v135);
    if (!(_DWORD)v97)
    {
LABEL_134:
      v97 = 0;
      if (v113)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 582))
        {
          if (*(_BYTE *)(a1 + 154))
            goto LABEL_94;
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v114 + 88))(*v114))
            goto LABEL_110;
          if ((*(unsigned int (**)(_QWORD, CVPixelBufferRef *))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 12736)
                                                                          + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 12736), &v137))
          {
            v97 = 4294954392;
          }
          else if ((*(unsigned int (**)(_QWORD, CVPixelBufferRef, _QWORD))(*(_QWORD *)*v114 + 64))(*v114, v137, 0))
          {
            v97 = 4294954385;
          }
          else
          {
LABEL_110:
            v103 = *(_QWORD *)(a2 + 616);
            v134[0] = *(_QWORD *)(a2 + 608);
            v134[1] = v103;
            if (v103)
            {
              v104 = (unint64_t *)(v103 + 8);
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            v97 = sub_1B68262D8(a1, v134, v88, 0);
            sub_1B6772C88((uint64_t)v134);
            if (!(_DWORD)v97)
            {
              v106 = *(_QWORD *)(a2 + 608);
              LODWORD(v139) = *(_DWORD *)(v106 + 280);
              sub_1B67F7590(*(_QWORD *)(a2 + 2688) + 3320, v106, (int)(*(float *)(a2 + 2720) + 0.5), (int *)&v139);
              if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 508) == 2)
              {
                v107 = 0;
                v108 = 904;
                while (*(_DWORD *)(a1 + v108) != v88)
                {
                  ++v107;
                  v108 += 80;
                  if (*valuePtr + 1 == v107)
                  {
                    v109 = 0;
                    goto LABEL_129;
                  }
                }
                v109 = (IOSurfaceID *)(a1 + 880 + 80 * v107);
LABEL_129:
                v97 = sub_1B6826554(a1, v114, v109);
                if ((_DWORD)v97 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to update remote DPB buffer\n", buf, 2u);
                }
              }
              else
              {
LABEL_94:
                v97 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_96:
  if (v137)
    CVPixelBufferRelease(v137);
  return v97;
}

void sub_1B6821854(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B6772C88(v1 - 152);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6821888(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 160))
    return 0;
  else
    return 4294954381;
}

uint64_t sub_1B682189C(uint64_t a1)
{
  OpaqueVTCompressionSession *v2;
  uint64_t result;
  CMTime v4;

  v2 = *(OpaqueVTCompressionSession **)(a1 + 160);
  if (!v2)
    return 4294954381;
  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  result = VTCompressionSessionCompleteFrames(v2, &v4);
  if (!(_DWORD)result)
    return *(unsigned int *)(a1 + 256);
  return result;
}

__CFDictionary *sub_1B68218F8(uint64_t a1)
{
  const CFDictionaryKeyCallBacks *v2;
  const CFDictionaryValueCallBacks *v3;
  __CFDictionary *Mutable;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  CFNumberRef v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  const __CFString *v36;
  int v37;
  int v38;
  const __CFString **v39;
  uint64_t v42;
  __CFDictionary *v43;
  const void *v44;
  const __CFAllocator *v45;
  const __CFArray *v46;
  CFIndex Count;
  CFIndex v48;
  const void *v49;
  float v50;
  unsigned int v51;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v53;
  const __CFNumber *v54;
  CFTypeID v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  CFTypeID v58;
  float v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  const CFArrayCallBacks *v64;
  CFMutableArrayRef v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  __IOSurface *v70;
  CFNumberRef v71;
  char v72;
  const void *v73;
  const __CFArray *v74;
  __CFDictionary *v75;
  CFIndex v76;
  CFIndex v77;
  float v78;
  unsigned int v79;
  const __CFDictionary *v80;
  const __CFNumber *v81;
  const __CFNumber *v82;
  CFTypeID v83;
  const __CFNumber *v84;
  const __CFNumber *v85;
  CFTypeID v86;
  float v87;
  const void **v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  __CFArray *v93;
  char *v94;
  CFNumberRef v95;
  CFMutableArrayRef v96;
  CFMutableArrayRef v97;
  int v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  CFNumberRef v103;
  const void *v104;
  __CFDictionary *v105;
  _DWORD *v106;
  int v107;
  __CFArray *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _BYTE *v112;
  __CFDictionary *v113;
  int v114;
  uint64_t v115;
  const void **v116;
  uint64_t v117;
  CFIndex v118;
  uint64_t v119;
  __CFDictionary *v120;
  int v121;
  uint64_t v122;
  int v123;
  const void *v124;
  int v125;
  __int16 v126;
  __int16 v127;
  CFNumberRef v128;
  CFNumberRef v129;
  __CFArray *v130;
  uint64_t i;
  CFNumberRef v132;
  CFNumberRef v133;
  __CFArray *v134;
  uint64_t j;
  CFNumberRef v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  const void *v140;
  CFNumberRef v141;
  CFNumberRef v142;
  CFNumberRef v143;
  uint64_t v144;
  int v145;
  CFStringRef StringForIntegerCodePoint;
  int v147;
  CFStringRef v148;
  int v149;
  CFStringRef v150;
  CFNumberRef v151;
  CFNumberRef v152;
  uint64_t v153;
  int v154;
  const void *v155;
  const void *v156;
  NSObject *v157;
  const char *v158;
  int v159;
  const void *v160;
  const void *v161;
  const void *v162;
  const void *v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  int v169;
  unint64_t v170;
  _BOOL4 v172;
  int v173;
  const void *v174;
  const void *v175;
  const void *v176;
  CFNumberRef v177;
  CFNumberRef v178;
  _QWORD *v179;
  int v180;
  unsigned __int8 *v181;
  int v182;
  int v183;
  int v184;
  CFNumberRef v185;
  uint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  CFNumberRef v193;
  CFNumberRef v194;
  const void *v195;
  CFNumberRef v196;
  CFNumberRef v197;
  CFNumberRef v198;
  __CFDictionary *v199;
  CFNumberRef v200;
  CFNumberRef v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  _BYTE *v209;
  _BYTE *v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  BOOL v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  CFNumberRef v231;
  const __CFString *v232;
  uint64_t v233;
  const void *v234;
  const void *v235;
  uint64_t v236;
  __CFDictionary *value;
  __CFDictionary *v238;
  __CFDictionary *v239;
  __CFDictionary *theDict;
  CFMutableArrayRef theArray;
  __CFArray *theArraya;
  const __CFAllocator *v243;
  int v244;
  int v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  uint8_t buf[4];
  _BYTE valuePtr[32];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  const __CFArray *propertyValueOut;
  const __CFArray *v267;
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict = CFDictionaryCreateMutable(0, 0, v2, v3);
  v239 = CFDictionaryCreateMutable(0, 0, v2, v3);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(std::__shared_weak_count **)(v5 + 12696);
  v248 = *(_QWORD *)(v5 + 12688);
  v249 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v5 = *(_QWORD *)(a1 + 80);
  }
  v9 = *(std::__shared_weak_count **)(v5 + 12712);
  v246 = *(_QWORD *)(v5 + 12704);
  v247 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v5 = *(_QWORD *)(a1 + 80);
  }
  v12 = *(_DWORD *)(v5 + 1000);
  if (v12 <= 1278226487)
  {
    if (v12 > 875836517)
    {
      v13 = v12 == 875836518;
      v14 = 875836534;
    }
    else
    {
      v13 = v12 == 645424692;
      v14 = 645428788;
    }
  }
  else if (v12 <= 1751411058)
  {
    v13 = v12 == 1278226488;
    v14 = 1278226736;
  }
  else
  {
    v13 = v12 == 1751411059 || v12 == 2019963956;
    v14 = 2016687156;
  }
  if (v13 || v12 == v14)
  {
    *(_DWORD *)valuePtr = v12;
    v16 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v16)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED060], v16);
      CFRelease(v16);
    }
  }
  v17 = *(_DWORD *)(a1 + 148);
  v238 = Mutable;
  if (!v17)
  {
    v25 = *(_QWORD *)(a1 + 80);
    v26 = *(_QWORD *)(v25 + 12688);
    v27 = *(std::__shared_weak_count **)(v25 + 12696);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v31 = *(unsigned __int8 *)(v26 + 12);
    v32 = *(unsigned __int8 *)(v26 + 61);
    v33 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000);
    if (v33 > 1278226487)
    {
      if (v33 <= 2016687155)
      {
        if (v33 == 1278226488)
        {
LABEL_108:
          v36 = CFSTR("HEVC_Monochrome_AutoLevel");
          goto LABEL_147;
        }
        if (v33 == 1278226736)
          goto LABEL_91;
        goto LABEL_89;
      }
      v34 = v33 == 2016687156;
      v35 = 2019963956;
    }
    else
    {
      if (v33 > 875836517)
      {
        if (v33 == 875836518 || v33 == 875836534)
          goto LABEL_61;
        goto LABEL_89;
      }
      v34 = v33 == 645424692;
      v35 = 645428788;
    }
    if (v34 || v33 == v35)
      goto LABEL_69;
LABEL_89:
    if (v33 == 1751411059 && v31 != 132)
      goto LABEL_91;
    if (*(unsigned __int8 *)(v26 + 12) <= 0x63u)
    {
      switch(v31)
      {
        case 1:
          if (v32 > 0xB9)
          {
            v36 = CFSTR("HEVC_Main_6_2");
            goto LABEL_147;
          }
          if (v32 > 0xB6)
          {
            v36 = CFSTR("HEVC_Main_6_1");
            goto LABEL_147;
          }
          if (v32 > 0xB3)
          {
            v36 = CFSTR("HEVC_Main_6_0");
            goto LABEL_147;
          }
          if (v32 > 0x9B)
          {
            v36 = CFSTR("HEVC_Main_5_2");
            goto LABEL_147;
          }
          if (v32 > 0x98)
          {
            v36 = CFSTR("HEVC_Main_5_1");
            goto LABEL_147;
          }
          if (v32 > 0x95)
          {
            v36 = CFSTR("HEVC_Main_5_0");
            goto LABEL_147;
          }
          if (v32 > 0x7A)
          {
            v36 = CFSTR("HEVC_Main_4_1");
            goto LABEL_147;
          }
          if (v32 > 0x77)
          {
            v36 = CFSTR("HEVC_Main_4_0");
            goto LABEL_147;
          }
          if (v32 > 0x5C)
          {
            v36 = CFSTR("HEVC_Main_3_1");
            goto LABEL_147;
          }
          if (v32 > 0x59)
          {
            v36 = CFSTR("HEVC_Main_3_0");
            goto LABEL_147;
          }
          if (v32 > 0x3E)
          {
            v36 = CFSTR("HEVC_Main_2_1");
            goto LABEL_147;
          }
          if (v32 > 0x3B)
          {
            v36 = CFSTR("HEVC_Main_2_0");
            goto LABEL_147;
          }
          v232 = CFSTR("HEVC_Main_1_0");
          break;
        case 2:
          if (v32 > 0xB9)
          {
            v36 = CFSTR("HEVC_Main10_6_2");
            goto LABEL_147;
          }
          if (v32 > 0xB6)
          {
            v36 = CFSTR("HEVC_Main10_6_1");
            goto LABEL_147;
          }
          if (v32 > 0xB3)
          {
            v36 = CFSTR("HEVC_Main10_6_0");
            goto LABEL_147;
          }
          if (v32 > 0x9B)
          {
            v36 = CFSTR("HEVC_Main10_5_2");
            goto LABEL_147;
          }
          if (v32 > 0x98)
          {
            v36 = CFSTR("HEVC_Main10_5_1");
            goto LABEL_147;
          }
          if (v32 > 0x95)
          {
            v36 = CFSTR("HEVC_Main10_5_0");
            goto LABEL_147;
          }
          if (v32 > 0x7A)
          {
            v36 = CFSTR("HEVC_Main10_4_1");
            goto LABEL_147;
          }
          if (v32 > 0x77)
          {
            v36 = CFSTR("HEVC_Main10_4_0");
            goto LABEL_147;
          }
          if (v32 > 0x5C)
          {
            v36 = CFSTR("HEVC_Main10_3_1");
            goto LABEL_147;
          }
          if (v32 > 0x59)
          {
            v36 = CFSTR("HEVC_Main10_3_0");
            goto LABEL_147;
          }
          if (v32 > 0x3E)
          {
            v36 = CFSTR("HEVC_Main10_2_1");
            goto LABEL_147;
          }
          if (v32 > 0x3B)
          {
            v36 = CFSTR("HEVC_Main10_2_0");
            goto LABEL_147;
          }
          v232 = CFSTR("HEVC_Main10_1_0");
          break;
        case 20:
          goto LABEL_108;
        default:
LABEL_120:
          v36 = 0;
          goto LABEL_147;
      }
LABEL_547:
      if (v32 <= 0x1D)
        v36 = 0;
      else
        v36 = v232;
      goto LABEL_147;
    }
    if (v31 != 100)
    {
      if (v31 != 116)
      {
        if (v31 != 132)
          goto LABEL_120;
LABEL_91:
        v36 = CFSTR("HEVC_Monochrome10_AutoLevel");
        goto LABEL_147;
      }
LABEL_69:
      if (v32 <= 0xB9)
      {
        if (v32 <= 0xB6)
        {
          if (v32 <= 0xB3)
          {
            if (v32 <= 0x9B)
            {
              if (v32 <= 0x98)
              {
                if (v32 <= 0x95)
                {
                  if (v32 <= 0x7A)
                  {
                    if (v32 <= 0x77)
                    {
                      if (v32 <= 0x5C)
                      {
                        if (v32 <= 0x59)
                        {
                          if (v32 <= 0x3E)
                          {
                            if (v32 <= 0x3B)
                            {
                              if (v32 <= 0x1D)
                                v36 = 0;
                              else
                                v36 = CFSTR("HEVC_Main44410_1_0");
                            }
                            else
                            {
                              v36 = CFSTR("HEVC_Main44410_2_0");
                            }
                          }
                          else
                          {
                            v36 = CFSTR("HEVC_Main44410_2_1");
                          }
                        }
                        else
                        {
                          v36 = CFSTR("HEVC_Main44410_3_0");
                        }
                      }
                      else
                      {
                        v36 = CFSTR("HEVC_Main44410_3_1");
                      }
                    }
                    else
                    {
                      v36 = CFSTR("HEVC_Main44410_4_0");
                    }
                  }
                  else
                  {
                    v36 = CFSTR("HEVC_Main44410_4_1");
                  }
                }
                else
                {
                  v36 = CFSTR("HEVC_Main44410_5_0");
                }
              }
              else
              {
                v36 = CFSTR("HEVC_Main44410_5_1");
              }
            }
            else
            {
              v36 = CFSTR("HEVC_Main44410_5_2");
            }
          }
          else
          {
            v36 = CFSTR("HEVC_Main44410_6_0");
          }
        }
        else
        {
          v36 = CFSTR("HEVC_Main44410_6_1");
        }
      }
      else
      {
        v36 = CFSTR("HEVC_Main44410_6_2");
      }
      goto LABEL_147;
    }
LABEL_61:
    if (v32 > 0xB9)
    {
      v36 = CFSTR("HEVC_Main444_6_2");
      goto LABEL_147;
    }
    if (v32 > 0xB6)
    {
      v36 = CFSTR("HEVC_Main444_6_1");
      goto LABEL_147;
    }
    if (v32 > 0xB3)
    {
      v36 = CFSTR("HEVC_Main444_6_0");
      goto LABEL_147;
    }
    if (v32 > 0x9B)
    {
      v36 = CFSTR("HEVC_Main444_5_2");
      goto LABEL_147;
    }
    if (v32 > 0x98)
    {
      v36 = CFSTR("HEVC_Main444_5_1");
      goto LABEL_147;
    }
    if (v32 > 0x95)
    {
      v36 = CFSTR("HEVC_Main444_5_0");
      goto LABEL_147;
    }
    if (v32 > 0x7A)
    {
      v36 = CFSTR("HEVC_Main444_4_1");
      goto LABEL_147;
    }
    if (v32 > 0x77)
    {
      v36 = CFSTR("HEVC_Main444_4_0");
      goto LABEL_147;
    }
    if (v32 > 0x5C)
    {
      v36 = CFSTR("HEVC_Main444_3_1");
      goto LABEL_147;
    }
    if (v32 > 0x59)
    {
      v36 = CFSTR("HEVC_Main444_3_0");
      goto LABEL_147;
    }
    if (v32 > 0x3E)
    {
      v36 = CFSTR("HEVC_Main444_2_1");
      goto LABEL_147;
    }
    if (v32 > 0x3B)
    {
      v36 = CFSTR("HEVC_Main444_2_0");
      goto LABEL_147;
    }
    v232 = CFSTR("HEVC_Main444_1_0");
    goto LABEL_547;
  }
  if (v17 != 1)
    goto LABEL_148;
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(v18 + 12688);
  v20 = *(std::__shared_weak_count **)(v18 + 12696);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = *(int **)(v19 + 2048);
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    v23 = *(int **)(v19 + 2048);
  }
  v36 = (const __CFString *)*MEMORY[0x1E0CED930];
  v38 = *v23;
  v37 = v23[1];
  if (*v23 == 100)
  {
    if (*((_BYTE *)v23 + 12) && *((_BYTE *)v23 + 13))
    {
      v39 = (const __CFString **)MEMORY[0x1E0CED8D0];
    }
    else
    {
      if (v37 <= 49)
      {
        switch(v37)
        {
          case 30:
            v39 = (const __CFString **)MEMORY[0x1E0CED8E8];
            goto LABEL_146;
          case 31:
            v39 = (const __CFString **)MEMORY[0x1E0CED8F0];
            goto LABEL_146;
          case 32:
            v39 = (const __CFString **)MEMORY[0x1E0CED8F8];
            goto LABEL_146;
          case 40:
            v39 = (const __CFString **)MEMORY[0x1E0CED900];
            goto LABEL_146;
          case 41:
            v39 = (const __CFString **)MEMORY[0x1E0CED908];
            goto LABEL_146;
          case 42:
            v39 = (const __CFString **)MEMORY[0x1E0CED910];
            goto LABEL_146;
          default:
            goto LABEL_147;
        }
        goto LABEL_147;
      }
      switch(v37)
      {
        case '2':
          v39 = (const __CFString **)MEMORY[0x1E0CED918];
          break;
        case '3':
          v39 = (const __CFString **)MEMORY[0x1E0CED920];
          break;
        case '4':
          v39 = (const __CFString **)MEMORY[0x1E0CED928];
          break;
        default:
          goto LABEL_147;
      }
    }
LABEL_146:
    v36 = *v39;
    goto LABEL_147;
  }
  if (v38 == 77)
  {
    if (v37 > 49)
    {
      switch(v37)
      {
        case '2':
          v39 = (const __CFString **)MEMORY[0x1E0CED968];
          break;
        case '3':
          v39 = (const __CFString **)MEMORY[0x1E0CED970];
          break;
        case '4':
          v39 = (const __CFString **)MEMORY[0x1E0CED978];
          break;
        default:
LABEL_128:
          v39 = (const __CFString **)MEMORY[0x1E0CED980];
          break;
      }
    }
    else
    {
      switch(v37)
      {
        case 30:
          v39 = (const __CFString **)MEMORY[0x1E0CED938];
          break;
        case 31:
          v39 = (const __CFString **)MEMORY[0x1E0CED940];
          break;
        case 32:
          v39 = (const __CFString **)MEMORY[0x1E0CED948];
          break;
        case 40:
          v39 = (const __CFString **)MEMORY[0x1E0CED950];
          break;
        case 41:
          v39 = (const __CFString **)MEMORY[0x1E0CED958];
          break;
        case 42:
          v39 = (const __CFString **)MEMORY[0x1E0CED960];
          break;
        default:
          goto LABEL_128;
      }
    }
    goto LABEL_146;
  }
  if (v38 == 66)
  {
    if (*((_BYTE *)v23 + 8) && *((_BYTE *)v23 + 9) && *((_BYTE *)v23 + 10))
    {
      v39 = (const __CFString **)MEMORY[0x1E0CED8C8];
    }
    else if (v37 > 49)
    {
      switch(v37)
      {
        case '2':
          v39 = (const __CFString **)MEMORY[0x1E0CED8A8];
          break;
        case '3':
          v39 = (const __CFString **)MEMORY[0x1E0CED8B0];
          break;
        case '4':
          v39 = (const __CFString **)MEMORY[0x1E0CED8B8];
          break;
        default:
LABEL_131:
          v39 = (const __CFString **)MEMORY[0x1E0CED8C0];
          break;
      }
    }
    else
    {
      switch(v37)
      {
        case 30:
          v39 = (const __CFString **)MEMORY[0x1E0CED878];
          break;
        case 31:
          v39 = (const __CFString **)MEMORY[0x1E0CED880];
          break;
        case 32:
          v39 = (const __CFString **)MEMORY[0x1E0CED888];
          break;
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
          goto LABEL_131;
        case 40:
          v39 = (const __CFString **)MEMORY[0x1E0CED890];
          break;
        case 41:
          v39 = (const __CFString **)MEMORY[0x1E0CED898];
          break;
        case 42:
          v39 = (const __CFString **)MEMORY[0x1E0CED8A0];
          break;
        default:
          if (v37 != 13)
            goto LABEL_131;
          v39 = (const __CFString **)MEMORY[0x1E0CED870];
          break;
      }
    }
    goto LABEL_146;
  }
LABEL_147:
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED180], v36);
  if (!*(_DWORD *)(a1 + 148) && *(_BYTE *)(*(_QWORD *)(a1 + 88) + 247))
  {
    *(_QWORD *)valuePtr = 0;
    v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    VTSessionCopyProperty(*(VTSessionRef *)(a1 + 160), CFSTR("SupportedMotionSearchRangeMode"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], valuePtr);
    if (*(_QWORD *)valuePtr)
    {
      v46 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)valuePtr, CFSTR("SupportedMotionSearchRangeModeArray"));
      Count = CFArrayGetCount(v46);
      v243 = v45;
      if (Count < 1)
      {
        v49 = 0;
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v50 = 0.0;
        v51 = 1;
        do
        {
          LODWORD(propertyValueOut) = 0;
          *(_DWORD *)buf = 0;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, v48);
          v53 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("HorizontalSearchRange"));
          v54 = v53;
          if (v53)
          {
            v55 = CFGetTypeID(v53);
            if (v55 == CFNumberGetTypeID())
              CFNumberGetValue(v54, kCFNumberSInt32Type, &propertyValueOut);
          }
          v56 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("VerticalSearchRange"));
          v57 = v56;
          if (v56)
          {
            v58 = CFGetTypeID(v56);
            if (v58 == CFNumberGetTypeID())
              CFNumberGetValue(v57, kCFNumberSInt32Type, buf);
          }
          v59 = (float)(int)propertyValueOut * (float)*(int *)buf;
          if (v50 < v59)
          {
            v49 = CFDictionaryGetValue(ValueAtIndex, CFSTR("Mode"));
            v50 = v59;
          }
          v48 = v51;
          v60 = Count <= v51++;
        }
        while (!v60);
      }
      CFRelease(*(CFTypeRef *)valuePtr);
      v45 = v243;
    }
    else
    {
      v49 = 0;
    }
    propertyValueOut = 0;
    VTSessionCopyProperty(*(VTSessionRef *)(a1 + 160), CFSTR("SupportedMotionSearchModes"), v45, &propertyValueOut);
    if (propertyValueOut)
    {
      v76 = CFArrayGetCount(propertyValueOut);
      if (v76 >= 1)
      {
        v77 = 0;
        v78 = 0.0;
        v79 = 1;
        do
        {
          *(_DWORD *)buf = 0;
          v245 = 0;
          v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(propertyValueOut, v77);
          v81 = (const __CFNumber *)CFDictionaryGetValue(v80, CFSTR("MotionEstimationHorizontalSearchRange"));
          v82 = v81;
          if (v81)
          {
            v83 = CFGetTypeID(v81);
            if (v83 == CFNumberGetTypeID())
              CFNumberGetValue(v82, kCFNumberSInt32Type, buf);
          }
          v84 = (const __CFNumber *)CFDictionaryGetValue(v80, CFSTR("MotionEstimationVerticalSearchRange"));
          v85 = v84;
          if (v84)
          {
            v86 = CFGetTypeID(v84);
            if (v86 == CFNumberGetTypeID())
              CFNumberGetValue(v85, kCFNumberSInt32Type, &v245);
          }
          v87 = (float)*(int *)buf * (float)v245;
          if (v78 < v87)
          {
            v49 = CFDictionaryGetValue(v80, CFSTR("MotionEstimationModeID"));
            v78 = v87;
          }
          v77 = v79;
          v60 = v76 <= v79++;
        }
        while (!v60);
      }
      CFRelease(propertyValueOut);
    }
    if (v49)
    {
      CFDictionarySetValue(Mutable, CFSTR("MotionSearchRangeMode"), v49);
      CFDictionarySetValue(Mutable, CFSTR("MotionEstimationSearchMode"), v49);
    }
  }
LABEL_148:
  v42 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v42 + 64) == 1)
  {
    CFDictionarySetValue(Mutable, CFSTR("EnableVUIBitstreamRestriction"), (const void *)*MEMORY[0x1E0C9AE50]);
    v42 = *(_QWORD *)(a1 + 88);
  }
  if (*(_BYTE *)(v42 + 7873))
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECF20], (const void *)*MEMORY[0x1E0C9AE50]);
  propertyValueOut = 0;
  v267 = 0;
  if (!*(_BYTE *)(a1 + 153))
  {
    v43 = 0;
    value = 0;
    goto LABEL_221;
  }
  if (!*(_BYTE *)(a1 + 154) && !*(_BYTE *)(a1 + 155))
  {
    if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)valuePtr = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "DPB allocation in VCP\n", valuePtr, 2u);
    }
    v61 = 0;
    LODWORD(v62) = *(_DWORD *)(a1 + 264);
    v63 = 1;
    v64 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v65 = CFArrayCreateMutable(0, 2 * (int)v62, v64);
      *(&propertyValueOut + v61) = v65;
      LODWORD(v62) = *(_DWORD *)(a1 + 264);
      if ((int)v62 < 1)
        goto LABEL_191;
      v66 = 0;
      do
      {
        v67 = 0;
        v68 = 1;
        do
        {
          v69 = v68;
          v70 = *(__IOSurface **)(a1 + 272 * v61 + 16 * v66 + 8 * v67 + 304);
          if (v70)
          {
            *(_DWORD *)valuePtr = IOSurfaceGetID(v70);
            v71 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
            if (!v71)
              goto LABEL_189;
          }
          else
          {
            *(_DWORD *)valuePtr = 0;
            v71 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
            if (!v71)
              goto LABEL_189;
          }
          CFArrayAppendValue(v65, v71);
          CFRelease(v71);
LABEL_189:
          v68 = 0;
          v67 = 1;
        }
        while ((v69 & 1) != 0);
        ++v66;
        v62 = *(int *)(a1 + 264);
      }
      while (v66 < v62);
LABEL_191:
      v72 = (*(_BYTE *)(a1 + 2545) != 0) & v63;
      v61 = 1;
      v63 = 0;
      if ((v72 & 1) == 0)
      {
        v73 = (const void *)*MEMORY[0x1E0CED250];
        v74 = propertyValueOut;
        if (*(_BYTE *)(a1 + 2545))
        {
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CED250], propertyValueOut);
          Mutable = v238;
          v74 = v267;
          v75 = v239;
        }
        else
        {
          Mutable = v238;
          v75 = v238;
        }
        CFDictionarySetValue(v75, v73, v74);
        v43 = 0;
LABEL_215:
        value = 0;
        goto LABEL_216;
      }
    }
  }
  if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)valuePtr = 0;
    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "DPB allocation in AVE\n", valuePtr, 2u);
  }
  v43 = sub_1B6826194(a1, 0);
  if (!*(_BYTE *)(a1 + 2545))
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECF70], v43);
    goto LABEL_215;
  }
  value = sub_1B6826194(a1, 1);
  v44 = (const void *)*MEMORY[0x1E0CECF70];
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CECF70], v43);
  CFDictionarySetValue(v239, v44, value);
LABEL_216:
  if (*(_BYTE *)(a1 + 2545))
  {
    if (*(_DWORD *)(a1 + 2548) == 1)
      v88 = (const void **)MEMORY[0x1E0CECE88];
    else
      v88 = (const void **)MEMORY[0x1E0CECE80];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECED0], *v88);
  }
LABEL_221:
  v89 = *(_QWORD *)(a1 + 88);
  if (!*(_BYTE *)(v89 + 582))
    goto LABEL_231;
  v90 = *(_DWORD *)(v89 + 432);
  if (v90)
  {
    *(_DWORD *)(a1 + 2488) = v90;
    *(_DWORD *)(a1 + 2492) = *(_DWORD *)(v89 + 432);
    v91 = 2;
  }
  else
  {
    v92 = *(_QWORD *)(a1 + 80);
    if (*(_DWORD *)(v92 + 1008) == 248)
    {
      *(_OWORD *)(a1 + 2488) = xmmword_1B6917920;
      *(_QWORD *)(a1 + 2504) = 0x300000003;
      v91 = 6;
    }
    else
    {
      if (!*(_BYTE *)(v92 + 1144))
        goto LABEL_231;
      *(_OWORD *)(a1 + 2488) = 0u;
      *(_OWORD *)(a1 + 2504) = 0u;
      v91 = 8;
    }
  }
  v93 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v94 = (char *)(a1 + 2488);
  do
  {
    v95 = CFNumberCreate(0, kCFNumberSInt32Type, v94);
    CFArrayAppendValue(v93, v95);
    CFRelease(v95);
    v94 += 4;
    --v91;
  }
  while (v91);
  CFDictionarySetValue(Mutable, CFSTR("ChromaQPIndexOffsetMultiPPS"), v93);
  CFRelease(v93);
LABEL_231:
  if (!*(_BYTE *)(a1 + 2545))
  {
    v106 = *(_DWORD **)(a1 + 80);
    if ((v106[835] & 0x80000000) != 0
      || (v106[836] & 0x80000000) != 0
      || (v106[837] & 0x80000000) != 0
      || !*(_BYTE *)(*(_QWORD *)(a1 + 88) + 582))
    {
      v244 = 0;
      goto LABEL_251;
    }
    v107 = *(_DWORD *)(a1 + 148);
    v108 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v110 = *(_QWORD *)(a1 + 80);
    v109 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)valuePtr = *(_QWORD *)(v110 + 3340);
    v111 = *(_DWORD *)(v110 + 3348);
    *(_DWORD *)&valuePtr[8] = v111;
    *(_QWORD *)&valuePtr[20] = 0;
    *(_QWORD *)&valuePtr[12] = 0;
    if (*(_BYTE *)(v109 + 582))
    {
      v112 = &valuePtr[12];
      if (*(_DWORD *)(v109 + 432))
      {
        v113 = v43;
        v114 = 1;
        v115 = 4;
LABEL_473:
        v225 = v111 + v114;
        v226 = v225 & 0x3F;
        v227 = -v225;
        v216 = v227 < 0;
        v228 = v227 & 0x3F;
        if (v216)
          v229 = v226;
        else
          v229 = -v228;
        *(_DWORD *)v112 = v229;
        goto LABEL_478;
      }
      v209 = &valuePtr[16];
      v210 = &valuePtr[20];
      if (*(_DWORD *)(v110 + 1008) == 248)
      {
        v113 = v43;
        v114 = 3;
        v211 = 2;
        v212 = 1;
        v115 = 6;
LABEL_466:
        v214 = v111 + v212;
        v215 = v214 & 0x3F;
        v217 = -v214;
        v216 = v217 < 0;
        v218 = v217 & 0x3F;
        if (v216)
          v219 = v215;
        else
          v219 = -v218;
        *(_DWORD *)v112 = v219;
        v220 = v111 + v211;
        v221 = (v111 + v211) & 0x3F;
        v222 = -v220;
        v216 = v222 < 0;
        v223 = v222 & 0x3F;
        if (v216)
          v224 = v221;
        else
          v224 = -v223;
        *(_DWORD *)v209 = v224;
        v112 = v210;
        goto LABEL_473;
      }
      if (*(_BYTE *)(v110 + 1144))
      {
        v113 = v43;
        v112 = &valuePtr[16];
        v209 = &valuePtr[20];
        v210 = &valuePtr[24];
        v213 = (v111 + 1) & 0x3F;
        if (v111 + 1 <= 0)
          v213 = -(-(v111 + 1) & 0x3F);
        *(_DWORD *)&valuePtr[12] = v213;
        v114 = 4;
        v211 = 3;
        v212 = 2;
        v115 = 7;
        goto LABEL_466;
      }
    }
    v113 = v43;
    v115 = 3;
LABEL_478:
    v230 = v107 != 0;
    do
    {
      *(_DWORD *)buf = *(_DWORD *)&valuePtr[4 * v230];
      v231 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      CFArrayAppendValue(v108, v231);
      CFRelease(v231);
      ++v230;
    }
    while (v115 != v230);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED258], v108);
    CFRelease(v108);
    v244 = 0;
    v43 = v113;
    goto LABEL_251;
  }
  v96 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)valuePtr = v96;
  if (!v96
    || ((v97 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)&valuePtr[8] = v97) != 0)
      ? (v98 = 0)
      : (v98 = -12904),
        v244 = v98,
        !v97))
  {
    theArraya = 0;
    v105 = 0;
    v244 = -12904;
    goto LABEL_427;
  }
  theArray = v97;
  v99 = 0;
  v100 = 1;
  do
  {
    v101 = 0;
    v102 = v100;
    do
    {
      *(_DWORD *)buf = dword_1B6922440[3 * v99 + v101];
      v103 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      CFArrayAppendValue(*(CFMutableArrayRef *)&valuePtr[8 * v99], v103);
      CFRelease(v103);
      ++v101;
    }
    while (v101 != 3);
    v100 = 0;
    v99 = 1;
  }
  while ((v102 & 1) != 0);
  v104 = (const void *)*MEMORY[0x1E0CED258];
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CED258], v96);
  Mutable = v238;
  CFDictionarySetValue(v239, v104, theArray);
  CFRelease(v96);
  CFRelease(theArray);
LABEL_251:
  v116 = (const void **)MEMORY[0x1E0C9AE40];
  if (*(_DWORD *)(a1 + 148))
  {
    theArraya = 0;
    goto LABEL_282;
  }
  v117 = v248;
  v118 = *(unsigned int *)(v248 + 260);
  if ((int)v118 < 1)
  {
    theArraya = 0;
LABEL_281:
    *(_BYTE *)(v117 + 2009) = 5;
    *(_DWORD *)(v246 + 1620) = 5 - *(unsigned __int8 *)(v246 + 13);
    v116 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_282:
    *(_DWORD *)valuePtr = 1;
    v138 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v138)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED248], v138);
      CFRelease(v138);
    }
    *(_QWORD *)valuePtr = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 96);
    v139 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    if (v139)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECFD0], v139);
      CFRelease(v139);
    }
    v140 = (const void *)*MEMORY[0x1E0CECEF0];
    if (*(_BYTE *)(a1 + 2545))
    {
      *(_QWORD *)valuePtr = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 180);
      v141 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v141)
      {
        CFDictionarySetValue(theDict, v140, v141);
        CFRelease(v141);
      }
      *(_QWORD *)valuePtr = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 180);
      v142 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v142)
      {
        CFDictionarySetValue(v239, v140, v142);
        CFRelease(v142);
      }
    }
    else
    {
      *(_QWORD *)valuePtr = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 180);
      v143 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v143)
      {
        CFDictionarySetValue(Mutable, v140, v143);
        CFRelease(v143);
      }
    }
    v144 = *(_QWORD *)(a1 + 88);
    v145 = *(__int16 *)(v144 + 416);
    if (v145 != 2)
    {
      StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(v145);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECF48], StringForIntegerCodePoint);
      v144 = *(_QWORD *)(a1 + 88);
    }
    v147 = *(__int16 *)(v144 + 418);
    if (v147 != 2)
    {
      v148 = CVTransferFunctionGetStringForIntegerCodePoint(v147);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED238], v148);
      v144 = *(_QWORD *)(a1 + 88);
    }
    v149 = *(__int16 *)(v144 + 420);
    if (v149 != 2)
    {
      v150 = CVYCbCrMatrixGetStringForIntegerCodePoint(v149);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED290], v150);
      v144 = *(_QWORD *)(a1 + 88);
    }
    if (*(_BYTE *)(v144 + 581))
    {
      *(_DWORD *)valuePtr = 0x8000000;
      v151 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v151)
        goto LABEL_303;
    }
    else
    {
      *(_DWORD *)valuePtr = 0;
      v151 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v151)
      {
LABEL_303:
        CFDictionarySetValue(Mutable, CFSTR("EnableStatsCollect"), v151);
        CFRelease(v151);
      }
    }
    if (*(char *)(*(_QWORD *)(a1 + 88) + 151) >= 2)
    {
      CFDictionarySetValue(Mutable, CFSTR("EnableMultiReferenceP"), (const void *)*MEMORY[0x1E0C9AE50]);
      *(_DWORD *)valuePtr = 1;
      v152 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v152)
      {
        CFDictionarySetValue(Mutable, CFSTR("MultiReferencePSpacing"), v152);
        CFRelease(v152);
      }
    }
    v153 = *(_QWORD *)(a1 + 80);
    v154 = *(_DWORD *)(v153 + 1012);
    if (v154 == -1)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 64) == 42
        && ((v159 = *(_DWORD *)(v153 + 1004), v159 == 8) || v159 == 10 && *(_BYTE *)(v248 + 173) == 3))
      {
        v160 = *v116;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED1A0], *v116);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED0B8], v160);
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_330;
        *(_WORD *)valuePtr = 0;
        v157 = MEMORY[0x1E0C81028];
        v158 = "AVE power state set to VMAX\n";
      }
      else
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED1A0], (const void *)*MEMORY[0x1E0C9AE50]);
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_330;
        *(_WORD *)valuePtr = 0;
        v157 = MEMORY[0x1E0C81028];
        v158 = "AVE power state set to Dynamic\n";
      }
    }
    else
    {
      v155 = (const void *)*MEMORY[0x1E0CED1A0];
      if (v154 == 1)
      {
        CFDictionarySetValue(Mutable, v155, *v116);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED0B8], (const void *)*MEMORY[0x1E0C9AE50]);
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_330;
        *(_WORD *)valuePtr = 0;
        v157 = MEMORY[0x1E0C81028];
        v158 = "AVE power state set to VMIN\n";
      }
      else if (v154 == 2)
      {
        v156 = *v116;
        CFDictionarySetValue(Mutable, v155, *v116);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED0B8], v156);
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_330;
        *(_WORD *)valuePtr = 0;
        v157 = MEMORY[0x1E0C81028];
        v158 = "AVE power state set to VMAX\n";
      }
      else
      {
        CFDictionarySetValue(Mutable, v155, (const void *)*MEMORY[0x1E0C9AE50]);
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_330;
        *(_WORD *)valuePtr = 0;
        v157 = MEMORY[0x1E0C81028];
        v158 = "AVE power state set to Dynamic\n";
      }
    }
    _os_log_impl(&dword_1B676B000, v157, OS_LOG_TYPE_DEFAULT, v158, valuePtr, 2u);
LABEL_330:
    v161 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("EnableUserQPForFacetime"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(Mutable, CFSTR("EnableUserRefForFacetime"), v161);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECEC8], v161);
    v162 = *v116;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 72))
      v163 = v161;
    else
      v163 = *v116;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECEB0], v163);
    if (*(_DWORD *)(a1 + 148) == 1)
    {
      v164 = *(_QWORD *)(a1 + 80);
      v165 = *(_QWORD *)(v164 + 12688);
      v166 = *(std::__shared_weak_count **)(v164 + 12696);
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
        v169 = **(_DWORD **)(v165 + 2048);
        do
          v170 = __ldaxr(v167);
        while (__stlxr(v170 - 1, v167));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      else
      {
        v169 = **(_DWORD **)(v165 + 2048);
      }
      v172 = v169 != 66 && v169 != 77;
      v173 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 68);
      if (v173)
      {
        if (v173 == 2)
          v174 = (const void *)*MEMORY[0x1E0CED680];
        else
          v174 = (const void *)*MEMORY[0x1E0CED678];
      }
      else if (v169 == 66)
      {
        v174 = (const void *)*MEMORY[0x1E0CED680];
      }
      else
      {
        v174 = (const void *)*MEMORY[0x1E0CED678];
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED000], v174);
      if (v172)
        v175 = v161;
      else
        v175 = v162;
      CFDictionarySetValue(Mutable, CFSTR("EnableTransform8x8"), v175);
    }
    if (!*(_BYTE *)(v246 + 17) || (v176 = v161, !*(_BYTE *)(*(_QWORD *)(a1 + 88) + 582)))
      v176 = v162;
    CFDictionarySetValue(Mutable, CFSTR("EnableWeightedPrediction"), v176);
    if ((****(unsigned int (*****)(_QWORD))(a1 + 80))(**(_QWORD **)(a1 + 80)))
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED270], v161);
      if (*(_BYTE *)(a1 + 154))
      {
        *(_DWORD *)valuePtr = 3;
        v177 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        if (v177)
        {
          CFDictionarySetValue(Mutable, CFSTR("VideoResolutionAdaptationType"), v177);
          CFRelease(v177);
        }
      }
    }
    *(_DWORD *)valuePtr = 60;
    v178 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v178)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED178], v178);
      CFRelease(v178);
    }
    v179 = *(_QWORD **)(a1 + 80);
    if (v179
      && (((**(uint64_t (***)(_QWORD))*v179)(*v179) & 1) != 0
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v179 + 48))(*v179) & 1) != 0
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v179 + 32))(*v179) & 1) != 0
       || *((_BYTE *)v179 + 3233)
       || v179[403]
       || *((_BYTE *)v179 + 3232)))
    {
      v162 = v161;
    }
    CFDictionarySetValue(Mutable, CFSTR("ForceRefUncompressed"), v162);
    v180 = *(_DWORD *)(a1 + 148);
    v181 = *(unsigned __int8 **)(a1 + 88);
    if (!v180)
    {
      if (!v181[582])
      {
LABEL_400:
        if (v181[314] == 10 || v181[315] == 10)
        {
          *(_DWORD *)valuePtr = 10;
          v194 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
          if (v194)
          {
            CFDictionarySetValue(Mutable, CFSTR("OutputBitDepth"), v194);
            CFRelease(v194);
          }
        }
        v195 = *(const void **)(a1 + 2536);
        if (v195)
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED070], v195);
        if (*(int *)(*(_QWORD *)(a1 + 88) + 560) >= 2 && !*(_DWORD *)(a1 + 148))
        {
          *(_DWORD *)valuePtr = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 560);
          v196 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
          if (v196)
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED120], v196);
            CFRelease(v196);
          }
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECF18], theDict);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECED8], v239);
        if (*(char *)(*(_QWORD *)(a1 + 88) + 104) >= 2)
        {
          *(_QWORD *)valuePtr = *(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 104);
          v197 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
          if (v197)
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED110], v197);
            CFRelease(v197);
          }
        }
        *(_DWORD *)valuePtr = *(_DWORD *)(a1 + 96);
        v198 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        if (v198)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED068], v198);
          CFRelease(v198);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 7874))
        {
          v199 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v199)
          {
            *(_DWORD *)valuePtr = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 7876);
            v200 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
            if (v200)
            {
              CFDictionarySetValue(v199, (const void *)*MEMORY[0x1E0CED6F8], v200);
              CFRelease(v200);
            }
            *(_DWORD *)valuePtr = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 7880);
            v201 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
            if (v201)
            {
              CFDictionarySetValue(v199, (const void *)*MEMORY[0x1E0CED6F0], v201);
              CFRelease(v201);
            }
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED0C8], v199);
            CFRelease(v199);
          }
          else if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)valuePtr = 0;
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Warning: Create MinAndMaxDisparityDict failed!\n", valuePtr, 2u);
          }
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECFB8], v161);
        }
        v105 = 0;
        goto LABEL_427;
      }
      v182 = v181[234];
      if (v182 == 2)
        v183 = 3;
      else
        v183 = 0;
      if (v182 == 1)
        v184 = 1;
      else
        v184 = v183;
      *(_DWORD *)valuePtr = v184;
      v185 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v185)
      {
        CFDictionarySetValue(Mutable, CFSTR("SAOMode"), v185);
        CFRelease(v185);
      }
      v180 = *(_DWORD *)(a1 + 148);
      v181 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v180 == 1 && v181[582])
    {
      v186 = *(_QWORD *)(a1 + 80);
      v187 = *(_QWORD *)(v186 + 12688);
      v188 = *(std::__shared_weak_count **)(v186 + 12696);
      if (v188)
      {
        v189 = (unint64_t *)&v188->__shared_owners_;
        do
          v190 = __ldxr(v189);
        while (__stxr(v190 + 1, v189));
        v191 = *(_QWORD *)(v187 + 2048);
        do
          v192 = __ldaxr(v189);
        while (__stlxr(v192 - 1, v189));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      else
      {
        v191 = *(_QWORD *)(v187 + 2048);
      }
      *(_QWORD *)valuePtr = *(unsigned int *)(v191 + 272);
      v193 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v193)
      {
        CFDictionarySetValue(Mutable, CFSTR("log2_max_minus4"), v193);
        CFRelease(v193);
      }
      CFDictionarySetValue(Mutable, CFSTR("UseLongTermReference"), v161);
      v181 = *(unsigned __int8 **)(a1 + 88);
    }
    goto LABEL_400;
  }
  v236 = *(_QWORD *)(v248 + 264);
  theArraya = CFArrayCreateMutable(0, v118, MEMORY[0x1E0C9B378]);
  v233 = v117;
  v119 = 0;
  v235 = (const void *)*MEMORY[0x1E0C9AE50];
  v234 = (const void *)*MEMORY[0x1E0C9AE40];
  while (1)
  {
    v120 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v105 = v120;
    v121 = v244;
    if (!v120)
      v121 = -12904;
    v244 = v121;
    if (!v120)
      break;
    v122 = v236 + 248 * v119;
    v262 = *(_OWORD *)(v122 + 192);
    v263 = *(_OWORD *)(v122 + 208);
    v264 = *(_OWORD *)(v122 + 224);
    v265 = *(_QWORD *)(v122 + 240);
    v258 = *(_OWORD *)(v122 + 128);
    v259 = *(_OWORD *)(v122 + 144);
    v260 = *(_OWORD *)(v122 + 160);
    v261 = *(_OWORD *)(v122 + 176);
    v254 = *(_OWORD *)(v122 + 64);
    v255 = *(_OWORD *)(v122 + 80);
    v256 = *(_OWORD *)(v122 + 96);
    v257 = *(_OWORD *)(v122 + 112);
    *(_OWORD *)valuePtr = *(_OWORD *)v122;
    *(_OWORD *)&valuePtr[16] = *(_OWORD *)(v122 + 16);
    v252 = *(_OWORD *)(v122 + 32);
    v253 = *(_OWORD *)(v122 + 48);
    v123 = BYTE3(v260);
    if (BYTE3(v260))
      v124 = v235;
    else
      v124 = v234;
    CFDictionarySetValue(v120, CFSTR("InterRefPicSetPredictionFlag"), v124);
    if (v123)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "inter_ref_pic_set_prediction_flag is true. Not implemented yet.\n", buf, 2u);
      }
      break;
    }
    v125 = BYTE1(v261);
    v126 = WORD1(v265);
    v127 = WORD2(v265);
    *(_DWORD *)buf = v261;
    v128 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v128)
    {
      CFDictionarySetValue(v105, CFSTR("NumNegativePics"), v128);
      CFRelease(v128);
    }
    *(_DWORD *)buf = v125;
    v129 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v129)
    {
      CFDictionarySetValue(v105, CFSTR("NumPositivePics"), v129);
      CFRelease(v129);
    }
    v130 = CFArrayCreateMutable(0, 16, MEMORY[0x1E0C9B378]);
    for (i = 178; i != 210; i += 2)
    {
      *(_WORD *)buf = *(_WORD *)&valuePtr[i];
      v132 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
      if (v132)
      {
        CFArrayAppendValue(v130, v132);
        CFRelease(v132);
      }
    }
    CFDictionarySetValue(v105, CFSTR("DeltaPOCS0Minus1"), v130);
    CFRelease(v130);
    *(_WORD *)buf = v126;
    v133 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
    if (v133)
    {
      CFDictionarySetValue(v105, CFSTR("UsedByCurrPicS0Flag"), v133);
      CFRelease(v133);
    }
    v134 = CFArrayCreateMutable(0, 16, MEMORY[0x1E0C9B378]);
    for (j = 210; j != 242; j += 2)
    {
      *(_WORD *)buf = *(_WORD *)&valuePtr[j];
      v136 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
      if (v136)
      {
        CFArrayAppendValue(v134, v136);
        CFRelease(v136);
      }
    }
    CFDictionarySetValue(v105, CFSTR("DeltaPOCS1Minus1"), v134);
    CFRelease(v134);
    *(_WORD *)buf = v127;
    v137 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
    if (v137)
    {
      CFDictionarySetValue(v105, CFSTR("UsedByCurrPicS1Flag"), v137);
      CFRelease(v137);
    }
    CFArrayAppendValue(theArraya, v105);
    Mutable = v238;
    CFRelease(v105);
    if (++v119 == v118)
    {
      CFDictionarySetValue(v238, CFSTR("UserRPSForFaceTime"), theArraya);
      v117 = v233;
      goto LABEL_281;
    }
  }
  v244 = -12904;
LABEL_427:
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  if (v267)
    CFRelease(v267);
  if (v43)
    CFRelease(v43);
  if (value)
    CFRelease(value);
  if (theArraya)
    CFRelease(theArraya);
  if (v105)
    CFRelease(v105);
  if (v244 && Mutable)
    CFRelease(Mutable);
  if (theDict)
    CFRelease(theDict);
  if (v239)
    CFRelease(v239);
  v202 = v247;
  if (v247)
  {
    v203 = (unint64_t *)&v247->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v249;
  if (v249)
  {
    v206 = (unint64_t *)&v249->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  return Mutable;
}

void sub_1B6823E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_1B6772C88((uint64_t)va);
  sub_1B6772C88((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6823F20(uint64_t a1, uint64_t a2, uint64_t a3, int a4, opaqueCMSampleBuffer *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  uint32_t v16;
  NSObject *v17;
  const char *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE *v22;
  uint64_t *v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  NSObject *v30;
  const char *v31;
  uint32_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  OpaqueCMBlockBuffer *DataBuffer;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  int v39;
  const void *v40;
  const void *v41;
  const __CFDictionary *v42;
  CFTypeID v43;
  const void *v44;
  const __CFNumber *v45;
  NSObject *v46;
  const char *v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  const void *v54;
  const void *v55;
  const __CFDictionary *Value;
  const __CFNumber *v57;
  const __CFNumber *v58;
  CFTypeID v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  float v65;
  float v66;
  int v67;
  unint64_t v68;
  CMFormatDescriptionRef FormatDescription;
  FourCharCode MediaSubType;
  const __CFDictionary *Extension;
  const __CFDictionary *v72;
  const void *v73;
  const __CFData *v74;
  const __CFArray *v75;
  CFTypeID TypeID;
  CFTypeID v77;
  unsigned int *BytePtr;
  CFIndex Length;
  int v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  int v90;
  unsigned int *v91;
  unsigned int v92;
  const void *v93;
  const __CFNumber *v94;
  const void *v95;
  const __CFNumber *v96;
  CFTypeID v97;
  const __CFData *v98;
  const __CFArray *v99;
  CFTypeID v100;
  CFTypeID v101;
  unsigned int *v102;
  CFIndex v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  unsigned int *v107;
  unsigned int v108;
  NSObject *v109;
  const char *v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  unsigned int *v120;
  unint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  const void *v125;
  const void *v126;
  const void *v127;
  const void *v128;
  const void *v129;
  const void *v130;
  unsigned int v131;
  CFTypeID v132;
  _QWORD *v133;
  CFTypeID v134;
  int DataLength;
  const __CFDictionary *theDict;
  _BOOL4 v137;
  CMTime v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint8_t v141[8];
  unint64_t v142;
  int v143;
  int *v144;
  std::__shared_weak_count *v145;
  void *valuePtr;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  CMTime buf;
  unsigned int *v152;
  unint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 592);
  v11 = *(std::__shared_weak_count **)(a2 + 600);
  v139 = v10;
  v140 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v138, 0, sizeof(v138));
  CMTimeMake(&v138, *(_QWORD *)(v10 + 16), *(_DWORD *)(v10 + 32));
  *(_DWORD *)(a1 + 260) = a4;
  *(_DWORD *)(a1 + 256) = a3;
  sub_1B67ED98C(a2 + 536);
  std::mutex::lock((std::mutex *)(a1 + 168));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 232));
  if ((_DWORD)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    LODWORD(buf.value) = 67109120;
    HIDWORD(buf.value) = a3;
    v14 = MEMORY[0x1E0C81028];
    v15 = "Encoder returns abnormal status %d\n";
    v16 = 8;
    goto LABEL_7;
  }
  if (!a5 && (a4 & 2) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.value) = 0;
      v17 = MEMORY[0x1E0C81028];
      v18 = "Invalid sample\n";
LABEL_16:
      _os_log_error_impl(&dword_1B676B000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if ((a4 & 2) != 0)
  {
    if (*(_BYTE *)(a2 + 418))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.value) = 0;
        v17 = MEMORY[0x1E0C81028];
        v18 = "Frame dropped by encoder\n";
        goto LABEL_16;
      }
LABEL_17:
      a3 = 4294954385;
      goto LABEL_18;
    }
LABEL_57:
    a3 = 0;
    goto LABEL_18;
  }
  v22 = *(_BYTE **)(a1 + 88);
  if (v22[582])
    ++*(_BYTE *)(a2 + 4);
  if (*(_QWORD *)(a2 + 400) && (v23 = *(uint64_t **)(a2 + 392), v23[1]))
    v24 = *v23;
  else
    v24 = 0;
  if (v22[216])
    v25 = v22[584] != 0;
  else
    v25 = 0;
  v26 = *(_QWORD *)(a2 + 592);
  v137 = v25;
  if (*(_BYTE *)(v26 + 136))
  {
    v27 = *(_DWORD *)(v26 + 248);
    if (v27 <= 0)
      v27 = *(_DWORD *)(v26 + 240);
    v28 = *(_DWORD *)(v26 + 252);
    if (v28 <= 0)
      v28 = *(_DWORD *)(v26 + 244);
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 276);
    v28 = *(_DWORD *)(v26 + 280);
  }
  sub_1B680F36C(&v144, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48));
  v143 = 0;
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.value) = 0;
      v30 = MEMORY[0x1E0C81028];
      v31 = "Sample buffer does not exist\n";
      v32 = 2;
      goto LABEL_78;
    }
LABEL_46:
    a3 = 4294954385;
    goto LABEL_47;
  }
  v29 = *(_DWORD *)(a1 + 256);
  if (v29)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.value) = 67109120;
      HIDWORD(buf.value) = v29;
      v30 = MEMORY[0x1E0C81028];
      v31 = "HW encoder has an abnormal status %d\n";
      v32 = 8;
LABEL_78:
      _os_log_error_impl(&dword_1B676B000, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v32);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a5);
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a5, 0);
  if (!SampleAttachmentsArray)
  {
    a3 = 4294954394;
    goto LABEL_47;
  }
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  a3 = 4294954394;
  if (ValueAtIndex)
    v39 = 0;
  else
    v39 = -12902;
  theDict = ValueAtIndex;
  if (ValueAtIndex)
  {
    v131 = v39;
    v40 = *(const void **)(a1 + 248);
    if (v40)
      CFRelease(v40);
    *(_QWORD *)(a1 + 248) = a5;
    CFRetain(a5);
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 88) + 7873))
    {
LABEL_84:
      v49 = 0;
      v133 = (_QWORD *)(v24 + 536);
      v123 = ((v28 + 15) >> 4) * ((v27 + 15) >> 4);
      v124 = ((v28 + 7) >> 3) * ((v27 + 7) >> 3);
      v50 = *(unsigned __int8 *)(a1 + 2545);
      v51 = v24 + 1072;
      v52 = (_DWORD *)(v24 + 688);
      do
      {
        v53 = v51 + v49;
        *(_QWORD *)(v51 + v49 - 480) = 0;
        *(_QWORD *)(v51 + v49 - 448) = 0;
        *(_QWORD *)(v51 + v49 - 416) = 0;
        *v52 = 0;
        v52[4] = 0;
        v52[8] = 0;
        v52[12] = 0;
        v52[16] = 0;
        v52[20] = 0;
        v52[24] = 0;
        v52[28] = 0;
        if (v50)
        {
          *(_QWORD *)(v53 - 192) = 0;
          *(_QWORD *)(v53 - 160) = 0;
          *(_QWORD *)(v53 - 128) = 0;
          v52[72] = 0;
          v52[76] = 0;
          v52[80] = 0;
          v52[84] = 0;
          v52[88] = 0;
          v52[92] = 0;
          v52[96] = 0;
        }
        v49 += 8;
        ++v52;
      }
      while (v49 != 32);
      v130 = (const void *)*MEMORY[0x1E0CEDAE0];
      sub_1B6825CE0(theDict, (const void *)*MEMORY[0x1E0CEDAE0], v133, (_QWORD *)(v24 + 592));
      v129 = (const void *)*MEMORY[0x1E0CEDAE8];
      sub_1B6825CE0(theDict, (const void *)*MEMORY[0x1E0CEDAE8], (_QWORD *)(v24 + 544), (_QWORD *)(v24 + 624));
      v128 = (const void *)*MEMORY[0x1E0CEDB00];
      sub_1B6825EC8(theDict, (const void *)*MEMORY[0x1E0CEDB00], (_DWORD *)(v24 + 564), (_DWORD *)(v24 + 704));
      v127 = (const void *)*MEMORY[0x1E0CEDAF8];
      sub_1B6825EC8(theDict, (const void *)*MEMORY[0x1E0CEDAF8], (_DWORD *)(v24 + 568), (_DWORD *)(v24 + 720));
      v126 = (const void *)*MEMORY[0x1E0CEDB08];
      sub_1B6825EC8(theDict, (const void *)*MEMORY[0x1E0CEDB08], (_DWORD *)(v24 + 572), (_DWORD *)(v24 + 736));
      v125 = (const void *)*MEMORY[0x1E0CEDB10];
      sub_1B6825EC8(theDict, (const void *)*MEMORY[0x1E0CEDB10], (_DWORD *)(v24 + 580), (_DWORD *)(v24 + 768));
      v54 = (const void *)*MEMORY[0x1E0CEDAD0];
      sub_1B6825EC8(theDict, (const void *)*MEMORY[0x1E0CEDAD0], (_DWORD *)(v24 + 584), (_DWORD *)(v24 + 784));
      sub_1B6825EC8(theDict, (const void *)*MEMORY[0x1E0CEDAA8], &v143, (_DWORD *)(v24 + 800));
      if (*(_BYTE *)(a1 + 2545))
      {
        v55 = (const void *)*MEMORY[0x1E0CEDA48];
        if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CEDA48]))
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v55);
          LODWORD(buf.value) = 0;
          v57 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CEDB20]);
          v58 = v57;
          if (v57)
          {
            v59 = CFGetTypeID(v57);
            if (v59 == CFNumberGetTypeID())
              CFNumberGetValue(v58, kCFNumberSInt64Type, &buf);
          }
          sub_1B6825CE0(Value, v130, (_QWORD *)(v24 + 824), (_QWORD *)(v24 + 880));
          sub_1B6825CE0(Value, v129, (_QWORD *)(v24 + 832), (_QWORD *)(v24 + 912));
          sub_1B6825EC8(Value, v128, (_DWORD *)(v24 + 852), (_DWORD *)(v24 + 992));
          sub_1B6825EC8(Value, v127, (_DWORD *)(v24 + 856), (_DWORD *)(v24 + 1008));
          sub_1B6825EC8(Value, v126, (_DWORD *)(v24 + 860), (_DWORD *)(v24 + 1024));
          sub_1B6825EC8(Value, v125, (_DWORD *)(v24 + 868), (_DWORD *)(v24 + 1056));
          sub_1B6825EC8(Value, v54, (_DWORD *)(v24 + 872), (_DWORD *)(v24 + 1072));
          v60 = buf.value;
          *(_DWORD *)(v24 + 816) = 8 * (DataLength - LODWORD(buf.value));
          *(_DWORD *)(v24 + 820) = 8 * v60;
          *(int64x2_t *)(v24 + 536) = vaddq_s64(*(int64x2_t *)(v24 + 536), *(int64x2_t *)(v24 + 824));
        }
      }
      *(_DWORD *)(v24 + 528) = 8 * DataLength;
      v61 = *(_QWORD *)(v24 + 544) + *(_QWORD *)(v24 + 536);
      *(_QWORD *)(v24 + 552) = v61;
      v62 = *(_DWORD *)(v24 + 572);
      v63 = *(_DWORD *)(a1 + 108) - (v62 + *(_DWORD *)(v24 + 580));
      *(_DWORD *)(v24 + 576) = v63;
      if (*(_DWORD *)(a1 + 148))
      {
LABEL_101:
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 88) + 582) || CFDataGetLength(*(CFDataRef *)(a1 + 48)))
        {
LABEL_103:
          if (v137)
            *(_DWORD *)(a2 + 2448) = *v133;
          a3 = v131;
          goto LABEL_47;
        }
        FormatDescription = CMSampleBufferGetFormatDescription(*(CMSampleBufferRef *)(a1 + 248));
        *(_QWORD *)(a1 + 64) = FormatDescription;
        CFRetain(FormatDescription);
        if (FormatDescription && *(_QWORD *)(a1 + 64))
        {
          MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
          Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
          v72 = Extension;
          if (Extension)
          {
            v73 = CFDictionaryGetValue(Extension, CFSTR("avcC"));
            if (CFDictionaryGetValue(v72, CFSTR("hvcC")))
            {
              v74 = *(const __CFData **)(a1 + 48);
              v75 = (const __CFArray *)CFDictionaryGetValue(v72, CFSTR("hvcC"));
              TypeID = CFArrayGetTypeID();
              if (TypeID == CFGetTypeID(v75))
                v75 = (const __CFArray *)CFArrayGetValueAtIndex(v75, 0);
              if (v75 && (v77 = CFDataGetTypeID(), v77 == CFGetTypeID(v75)))
              {
                buf.value = 0;
                *(_QWORD *)&buf.timescale = 0;
                v153 = 0;
                v154 = 0;
                v152 = 0;
                BytePtr = (unsigned int *)CFDataGetBytePtr(v75);
                Length = CFDataGetLength(v75);
                if (BytePtr && Length)
                {
                  buf.epoch = (CMTimeEpoch)BytePtr;
                  v152 = BytePtr;
                  v153 = (unint64_t)BytePtr + Length;
                  v154 = bswap32(*BytePtr);
                  v155 = 0;
                }
                valuePtr = 0;
                v147 = 0;
                v148 = 0;
                a3 = sub_1B67C9400((uint64_t)&valuePtr, (uint64_t)&buf);
                if (!(_DWORD)a3)
                {
                  *(_DWORD *)(a1 + 2520) = (v149 >> 6) + 1;
                  v80 = v150;
                  if (v150)
                  {
                    while (1)
                    {
                      v81 = SHIDWORD(v154) + 1;
                      v82 = (unsigned int *)((char *)v152 + (v81 >> 3));
                      if ((unint64_t)v82 >= v153)
                      {
                        v83 = v154;
                        if ((unint64_t)v82 > v153)
                          v82 = (unsigned int *)v153;
                      }
                      else
                      {
                        v83 = bswap32(*v82);
                      }
                      v84 = v83 << (v81 & 7);
                      v85 = (v81 & 7) + 1;
                      v86 = (unsigned int *)((char *)v82 + (v85 >> 3));
                      if ((unint64_t)v86 >= v153)
                      {
                        if ((unint64_t)v86 > v153)
                          v86 = (unsigned int *)v153;
                        v87 = v84;
                      }
                      else
                      {
                        v87 = bswap32(*v86);
                      }
                      v88 = v87 << (v85 & 7);
                      LODWORD(v154) = v88;
                      if ((v84 & 0x80000000) != 0)
                        break;
                      v89 = (v85 & 7) + 6;
                      v90 = v89 & 7;
                      HIDWORD(v154) = v90;
                      v91 = (unsigned int *)((char *)v86 + (v89 >> 3));
                      v152 = v91;
                      if ((unint64_t)v91 >= v153)
                      {
                        if ((unint64_t)v91 > v153)
                          v91 = (unsigned int *)v153;
                      }
                      else
                      {
                        v88 = bswap32(*v91);
                      }
                      LODWORD(v154) = v88 << v90;
                      HIDWORD(v154) = v90;
                      v152 = (unsigned int *)((char *)v91 + 2);
                      if ((unint64_t)v91 + 2 >= v153)
                      {
                        if ((unint64_t)v91 + 2 > v153)
                          v152 = (unsigned int *)v153;
                        v92 = v88 << v90;
                      }
                      else
                      {
                        v92 = bswap32(*(unsigned int *)((char *)v91 + 2));
                      }
                      LODWORD(v154) = v92 << v90;
                      sub_1B68260B0((void *)(v88 << v90 >> 16), (uint64_t)&buf, v74);
                      if (!--v80)
                        goto LABEL_139;
                    }
                    a3 = 4294954387;
                  }
                  else
                  {
LABEL_139:
                    a3 = 0;
                  }
                }
                if (valuePtr)
                  free(valuePtr);
                if (buf.value)
                  free((void *)buf.value);
                if (!(_DWORD)a3)
                  goto LABEL_103;
              }
              else
              {
                a3 = 4294954387;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_162;
              LOWORD(buf.value) = 0;
              v109 = MEMORY[0x1E0C81028];
              v110 = "Failed to process hvcC\n";
              goto LABEL_217;
            }
            if (v73)
            {
              v98 = *(const __CFData **)(a1 + 48);
              v99 = (const __CFArray *)CFDictionaryGetValue(v72, CFSTR("avcC"));
              v100 = CFArrayGetTypeID();
              if (v100 == CFGetTypeID(v99))
                v99 = (const __CFArray *)CFArrayGetValueAtIndex(v99, 0);
              if (!v99 || (v101 = CFDataGetTypeID(), v101 != CFGetTypeID(v99)))
              {
                a3 = 4294954387;
LABEL_215:
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_162;
                LOWORD(buf.value) = 0;
                v109 = MEMORY[0x1E0C81028];
                v110 = "Failed to process avcC\n";
LABEL_217:
                _os_log_error_impl(&dword_1B676B000, v109, OS_LOG_TYPE_ERROR, v110, (uint8_t *)&buf, 2u);
LABEL_162:
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf.value) = 0;
                  _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to process format description", (uint8_t *)&buf, 2u);
                }
                goto LABEL_47;
              }
              buf.value = 0;
              *(_QWORD *)&buf.timescale = 0;
              v153 = 0;
              v154 = 0;
              v152 = 0;
              v102 = (unsigned int *)CFDataGetBytePtr(v99);
              v103 = CFDataGetLength(v99);
              if (v102 && v103)
              {
                buf.epoch = (CMTimeEpoch)v102;
                v152 = v102;
                v153 = (unint64_t)v102 + v103;
                v154 = bswap32(*v102);
                v155 = 0;
              }
              valuePtr = 0;
              v147 = 0;
              v148 = 0;
              a3 = sub_1B67C9AC0(&valuePtr, (uint64_t)&buf);
              if ((_DWORD)a3)
              {
LABEL_210:
                if (valuePtr)
                  free(valuePtr);
                if (buf.value)
                  free((void *)buf.value);
                if (!(_DWORD)a3)
                  goto LABEL_103;
                goto LABEL_215;
              }
              v104 = v154;
              v105 = SHIDWORD(v154) + 5;
              v106 = v105 & 7;
              HIDWORD(v154) = v105 & 7;
              v107 = (unsigned int *)((char *)v152 + (v105 >> 3));
              v152 = v107;
              if (MediaSubType == 1752589105)
              {
                if ((unint64_t)v107 >= v153)
                {
                  if ((unint64_t)v107 > v153)
                    v152 = (unsigned int *)v153;
                  v108 = v154;
                }
                else
                {
                  v108 = bswap32(*v107);
                }
                LODWORD(v154) = v108 << v106;
                sub_1B68260B0((void *)(v104 >> 27), (uint64_t)&buf, v98);
                v112 = v154;
                v113 = SHIDWORD(v154) + 8;
                v114 = BYTE4(v154) & 7;
                HIDWORD(v154) = BYTE4(v154) & 7;
                v115 = (unsigned int *)((char *)v152 + (v113 >> 3));
                v152 = v115;
                if ((unint64_t)v115 >= v153)
                {
                  if ((unint64_t)v115 > v153)
                    v152 = (unsigned int *)v153;
                  v116 = v154;
                }
                else
                {
                  v116 = bswap32(*v115);
                }
                LODWORD(v154) = v116 << v114;
                sub_1B68260B0((void *)HIBYTE(v112), (uint64_t)&buf, v98);
                v117 = v154;
                v121 = SHIDWORD(v154) + 8;
                v119 = BYTE4(v154) & 7;
                HIDWORD(v154) = BYTE4(v154) & 7;
                v120 = (unsigned int *)((char *)v152 + (v121 >> 3));
                v152 = v120;
                if ((unint64_t)v120 >= v153)
                {
                  if ((unint64_t)v120 > v153)
                    v152 = (unsigned int *)v153;
                  v122 = v154;
                  goto LABEL_209;
                }
              }
              else
              {
                if ((unint64_t)v107 >= v153)
                {
                  if ((unint64_t)v107 > v153)
                    v152 = (unsigned int *)v153;
                  v111 = v154;
                }
                else
                {
                  v111 = bswap32(*v107);
                }
                LODWORD(v154) = v111 << v106;
                sub_1B68260B0((void *)(v104 >> 27), (uint64_t)&buf, v98);
                v117 = v154;
                v118 = SHIDWORD(v154) + 8;
                v119 = BYTE4(v154) & 7;
                HIDWORD(v154) = BYTE4(v154) & 7;
                v120 = (unsigned int *)((char *)v152 + (v118 >> 3));
                v152 = v120;
                if ((unint64_t)v120 >= v153)
                {
                  if ((unint64_t)v120 > v153)
                    v152 = (unsigned int *)v153;
                  v122 = v154;
                  goto LABEL_209;
                }
              }
              v122 = bswap32(*v120);
LABEL_209:
              LODWORD(v154) = v122 << v119;
              sub_1B68260B0((void *)HIBYTE(v117), (uint64_t)&buf, v98);
              goto LABEL_210;
            }
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.value) = 0;
            _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Invalid format extensions\n", (uint8_t *)&buf, 2u);
          }
        }
        a3 = 4294954385;
        goto LABEL_162;
      }
      v64 = *(_DWORD *)(v24 + 564) + *(_DWORD *)(v24 + 568);
      if (v64)
      {
        v65 = (float)v124;
        v66 = (float)v64;
      }
      else
      {
        v67 = v63 + v62;
        if (!v67)
        {
          if (!v144)
            goto LABEL_101;
          v68 = (unint64_t)v144[18] >> 1;
          goto LABEL_100;
        }
        v65 = (float)v123;
        v66 = (float)v67;
      }
      v68 = (unint64_t)(fmax((float)(v65 / v66), 1.0) * (double)v61);
LABEL_100:
      *(_QWORD *)(v24 + 552) = v68;
      goto LABEL_101;
    }
    buf.value = 0xBFF0000000000000;
    valuePtr = (void *)0xBFF0000000000000;
    v142 = 0xBFF0000000000000;
    v41 = (const void *)*MEMORY[0x1E0CEDA88];
    if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CEDA88]))
    {
      v42 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v41);
      if (v42 && (v43 = CFDictionaryGetTypeID(), v43 == CFGetTypeID(v42)))
      {
        v44 = (const void *)*MEMORY[0x1E0CEDAF0];
        if (CFDictionaryContainsKey(v42, (const void *)*MEMORY[0x1E0CEDAF0]))
        {
          v45 = (const __CFNumber *)CFDictionaryGetValue(v42, v44);
          if (v45)
          {
            v132 = CFNumberGetTypeID();
            if (v132 == CFGetTypeID(v45))
              CFNumberGetValue(v45, kCFNumberDoubleType, &buf);
          }
        }
        else if (dword_1EF137CD0 >= 2)
        {
          fwrite("quality metric does not contain LumaMeanSquaredError\n", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v141 = 0;
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "quality metric does not contain LumaMeanSquaredError\n", v141, 2u);
          }
        }
        v93 = (const void *)*MEMORY[0x1E0CEDAC0];
        if (CFDictionaryContainsKey(v42, (const void *)*MEMORY[0x1E0CEDAC0]))
        {
          v94 = (const __CFNumber *)CFDictionaryGetValue(v42, v93);
          if (v94)
          {
            v134 = CFNumberGetTypeID();
            if (v134 == CFGetTypeID(v94))
              CFNumberGetValue(v94, kCFNumberDoubleType, &valuePtr);
          }
        }
        else if (dword_1EF137CD0 >= 2)
        {
          fwrite("quality metric does not contain ChromaBlueMeanSquaredError\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v141 = 0;
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "quality metric does not contain ChromaBlueMeanSquaredError\n", v141, 2u);
          }
        }
        v95 = (const void *)*MEMORY[0x1E0CEDAC8];
        if (CFDictionaryContainsKey(v42, (const void *)*MEMORY[0x1E0CEDAC8]))
        {
          v96 = (const __CFNumber *)CFDictionaryGetValue(v42, v95);
          if (v96)
          {
            v97 = CFNumberGetTypeID();
            if (v97 == CFGetTypeID(v96))
              CFNumberGetValue(v96, kCFNumberDoubleType, &v142);
          }
          goto LABEL_83;
        }
        if (dword_1EF137CD0 < 2
          || (fwrite("quality metric does not contain ChromaRedMeanSquaredError\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]), !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)))
        {
LABEL_83:
          v48 = valuePtr;
          *(_QWORD *)(a2 + 352) = buf.value;
          *(_QWORD *)(a2 + 360) = v48;
          *(_QWORD *)(a2 + 368) = v142;
          goto LABEL_84;
        }
        *(_WORD *)v141 = 0;
        v46 = MEMORY[0x1E0C81028];
        v47 = "quality metric does not contain ChromaRedMeanSquaredError\n";
      }
      else
      {
        if (dword_1EF137CD0 < 2)
          goto LABEL_83;
        fwrite("unexpected quality metric type\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_83;
        *(_WORD *)v141 = 0;
        v46 = MEMORY[0x1E0C81028];
        v47 = "unexpected quality metric type\n";
      }
    }
    else
    {
      if (dword_1EF137CD0 < 2)
        goto LABEL_83;
      fwrite("sample attachment does not contain QualityMetricsKey\n", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_83;
      *(_WORD *)v141 = 0;
      v46 = MEMORY[0x1E0C81028];
      v47 = "sample attachment does not contain QualityMetricsKey\n";
    }
    _os_log_impl(&dword_1B676B000, v46, OS_LOG_TYPE_DEFAULT, v47, v141, 2u);
    goto LABEL_83;
  }
LABEL_47:
  v33 = v145;
  if (v145)
  {
    v34 = (unint64_t *)&v145->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (!(_DWORD)a3)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 581))
    {
      a3 = (*(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)a1 + 160))(a1, a2, a5);
      goto LABEL_18;
    }
    goto LABEL_57;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.value) = 0;
    v14 = MEMORY[0x1E0C81028];
    v15 = "Failed to get simple stats from sample buffer\n";
    v16 = 2;
LABEL_7:
    _os_log_error_impl(&dword_1B676B000, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&buf, v16);
  }
LABEL_18:
  if (*(_BYTE *)(a2 + 418))
    sub_1B6817588(a2, a3);
  buf = v138;
  CMTimeGetSeconds(&buf);
  kdebug_trace();
  std::mutex::unlock((std::mutex *)(a1 + 168));
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a3;
}

void sub_1B6825130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32)
{
  std::mutex *v32;
  uint64_t v33;
  void *v35;

  if (a32)
    free(a32);
  v35 = *(void **)(v33 - 160);
  if (v35)
    free(v35);
  sub_1B6772C88((uint64_t)&a30);
  std::mutex::unlock(v32);
  sub_1B6772C88((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1B68251D4(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  IOSurfaceID v7;
  char v8;
  _DWORD v10[2];
  _DWORD v11[2];
  uint64_t v12;

  v3 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (int *)(a1 + 904);
  while (1)
  {
    v6 = *v5;
    v5 += 20;
    if (v6 == *(_DWORD *)(*a2 + 684))
      break;
    if (*(_DWORD *)(a1 + 2252) + 1 == ++v3)
      return 4294954387;
  }
  v7 = *(_DWORD *)(a1 + 880 + 80 * v3);
  if (v7)
  {
    v8 = ((*(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000) - 875836518) & 0xFFFFFFEF) != 0;
    v11[0] = *(_DWORD *)(v4 + 276);
    v11[1] = 2 * (v11[0] >> v8);
    v10[0] = *(_DWORD *)(v4 + 280);
    v10[1] = v10[0] >> v8;
    return sub_1B6825974(v7, a3, (uint64_t)v11, (uint64_t)v10, a1 + 276, *(_DWORD *)(a1 + 2524), *(_DWORD *)(a1 + 2528));
  }
  return 4294954387;
}

opaqueCMSampleBuffer *sub_1B68252C4(uint64_t a1)
{
  opaqueCMSampleBuffer *result;

  result = *(opaqueCMSampleBuffer **)(a1 + 248);
  if (result)
    return CMSampleBufferGetDataBuffer(result);
  return result;
}

uint64_t sub_1B68252D4(uint64_t a1, size_t *a2, size_t *a3, _QWORD *a4)
{
  opaqueCMSampleBuffer *v5;
  OpaqueCMBlockBuffer *DataBuffer;

  v5 = *(opaqueCMSampleBuffer **)(a1 + 248);
  if (!v5)
    return 4294954394;
  DataBuffer = CMSampleBufferGetDataBuffer(v5);
  return sub_1B685CE28(DataBuffer, *(_DWORD *)(a1 + 2520), *(_DWORD *)(a1 + 148), a2, a3, a4);
}

uint64_t sub_1B6825338(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  int v25;
  int v27;
  int v28;
  NSObject *v29;
  const char *v30;
  uint32_t v31;
  const char *v32;
  int v33;
  int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  int v38;
  int v39;
  const char *v40;
  const char *v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  const char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(*(_QWORD *)(a2 + 608) + 680);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = v4 + 12880;
  v6 = sub_1B67CDD68(v4 + 12880);
  v7 = 0;
  LODWORD(v8) = 0;
  do
  {
    if (*(_QWORD *)(v4 + 12896 + v7))
      v8 = (v8 + 1);
    else
      v8 = v8;
    v7 += 16;
  }
  while (v7 != 272);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = a1 + 880;
    do
    {
      v11 = sub_1B67CCE18(v5, *(_DWORD *)(v6 + 4 * v9));
      v12 = (_DWORD *)*v11;
      if (*v11)
      {
        v13 = v11;
        v14 = 0;
        v15 = v12[171];
        v16 = 904;
        while (v15 != *(_DWORD *)(a1 + v16))
        {
          ++v14;
          v16 += 80;
          if (*(_DWORD *)(a1 + 2252) + 1 == v14)
          {
            if (dword_1EF137CD0 >= 1)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: reference poc (%d) frame_num_driver (%d) cannot be found in hw dpb\n", v3, v12[170], v15);
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                v27 = *(_DWORD *)(*v13 + 680);
                v28 = *(_DWORD *)(*v13 + 684);
                *(_DWORD *)buf = 67109632;
                v43 = v3;
                v44 = 1024;
                v45 = v27;
                v46 = 1024;
                v47 = v28;
                v29 = MEMORY[0x1E0C81028];
                v30 = "[Poc %d]: reference poc (%d) frame_num_driver (%d) cannot be found in hw dpb\n";
                v31 = 20;
                goto LABEL_23;
              }
            }
            goto LABEL_24;
          }
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 504) != 1)
          goto LABEL_18;
        v17 = v12[9];
        if ((v17 & 1) != 0)
        {
          v18 = v10 + 80 * v14;
          v21 = *(_DWORD *)(v18 + 16);
          v20 = (_DWORD *)(v18 + 16);
          v19 = v21;
          if (v21 != 1)
          {
            if (dword_1EF137CD0 < 1)
              goto LABEL_24;
            v32 = v19 == 2 ? "long_term" : "N/A";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (short-term vs. %s)\n", v3, v12[170], v15, v32);
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_24;
            v33 = *(_DWORD *)(*v13 + 680);
            v34 = *(_DWORD *)(*v13 + 684);
            v35 = "short_term";
            if (*v20 != 1)
              v35 = "N/A";
            if (*v20 == 2)
              v36 = "long_term";
            else
              v36 = v35;
            *(_DWORD *)buf = 67109890;
            v43 = v3;
            v44 = 1024;
            v45 = v33;
            v46 = 1024;
            v47 = v34;
            v48 = 2080;
            v49 = v36;
            v29 = MEMORY[0x1E0C81028];
            v30 = "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (short-term vs. %s)\n";
LABEL_48:
            v31 = 30;
LABEL_23:
            _os_log_impl(&dword_1B676B000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v31);
LABEL_24:
            sub_1B6825750(a1, v3);
            return 4294954385;
          }
        }
        if ((v17 & 2) != 0)
        {
          v22 = v10 + 80 * v14;
          v25 = *(_DWORD *)(v22 + 16);
          v24 = (_DWORD *)(v22 + 16);
          v23 = v25;
          if (v25 != 2)
          {
            if (dword_1EF137CD0 < 1)
              goto LABEL_24;
            v37 = v23 == 1 ? "short_term" : "N/A";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (long-term vs. %s)\n", v3, v12[170], v15, v37);
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_24;
            v38 = *(_DWORD *)(*v13 + 680);
            v39 = *(_DWORD *)(*v13 + 684);
            if (*v24 == 1)
              v40 = "short_term";
            else
              v40 = "N/A";
            if (*v24 == 2)
              v41 = "long_term";
            else
              v41 = v40;
            *(_DWORD *)buf = 67109890;
            v43 = v3;
            v44 = 1024;
            v45 = v38;
            v46 = 1024;
            v47 = v39;
            v48 = 2080;
            v49 = v41;
            v29 = MEMORY[0x1E0C81028];
            v30 = "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (long-term vs. %s)\n";
            goto LABEL_48;
          }
        }
      }
LABEL_18:
      ++v9;
    }
    while (v9 != v8);
  }
  return 0;
}

size_t sub_1B6825700(uint64_t a1)
{
  OpaqueCMBlockBuffer *DataBuffer;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a1 + 248));
  CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  return totalLengthOut;
}

uint64_t sub_1B6825740(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2544);
}

uint64_t sub_1B6825748(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2545);
}

void sub_1B6825750(uint64_t a1, int a2)
{
  int v3;
  uint64_t v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  BOOL v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = dword_1EF137CD0;
  if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a2;
    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: DPB Snapshot >>>>>>\n", buf, 8u);
    v3 = dword_1EF137CD0;
  }
  v5 = 0;
  v6 = 1;
  v7 = MEMORY[0x1E0C81028];
  do
  {
    v22 = v6;
    v8 = 8 * v5 + 884;
    v9 = -1;
    v10 = a1;
    do
    {
      if (v3 >= 3 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_DWORD *)(v10 + 904);
        v12 = *(_DWORD *)(v10 + 896);
        v13 = "N/A";
        if (v12 == 1)
          v13 = "short_term";
        v14 = v12 == 2;
        v15 = "long_term";
        if (!v14)
          v15 = v13;
        v17 = *(_DWORD *)(v10 + v8 - 4);
        v16 = *(_DWORD *)(v10 + v8);
        v18 = *(unsigned __int16 *)(v10 + 928);
        v19 = *(unsigned __int16 *)(v10 + 932);
        v20 = *(unsigned __int16 *)(v10 + 930);
        v21 = *(unsigned __int16 *)(v10 + 934);
        *(_DWORD *)buf = 67111170;
        v24 = v5;
        v25 = 1024;
        v26 = v11;
        v27 = 2080;
        v28 = v15;
        v29 = 1024;
        v30 = v17;
        v31 = 1024;
        v32 = v18;
        v33 = 1024;
        v34 = v19;
        v35 = 1024;
        v36 = v16;
        v37 = 1024;
        v38 = v20;
        v39 = 1024;
        v40 = v21;
        _os_log_impl(&dword_1B676B000, v7, OS_LOG_TYPE_DEFAULT, "           layer: %d\tframe_num_driver: %d\treference_type: %s\treference_buffer: %d, %dx%d, scaled_buffer: %d, %dx%d\n", buf, 0x3Cu);
        v3 = dword_1EF137CD0;
      }
      ++v9;
      v10 += 80;
    }
    while (v9 < *(unsigned int *)(a1 + 2252));
    v5 = 1;
    v6 = 0;
  }
  while (((*(_BYTE *)(a1 + 2545) != 0) & v22) != 0);
}

uint64_t sub_1B6825974(IOSurfaceID a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __IOSurface *v13;
  __IOSurface *v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  int v18;
  char v19;
  _DWORD *v20;
  __int16 v22;
  IOSurfaceRef v23;
  _QWORD v24[5];
  IOSurfaceRef buffer;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _DWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v13 = IOSurfaceLookup(a1);
  if (!v13)
    return 4294954394;
  v14 = v13;
  v36[0] = 0;
  v36[1] = 0;
  IOSurfaceLock(v13, 0, 0);
  buffer = v14;
  sub_1B6825B20((uint64_t)v24);
  v15 = 0;
  v16 = 1;
  do
  {
    v17 = &v24[7 * v15];
    v36[v15] = v17[6];
    v18 = *((_DWORD *)v17 + 22);
    *((_DWORD *)&v36[-1] + v15) = *((_DWORD *)v17 + 21);
    *((_DWORD *)&v34 + v15) = v18;
    v19 = v16;
    *((_DWORD *)&v33 + v15) = *((_DWORD *)v17 + 18);
    v15 = 1;
    v16 = 0;
  }
  while ((v19 & 1) != 0);
  if (v27 == 3 || v29 == 3)
  {
    v22 = sub_1B67ADE0C((uint64_t)v36, a3, a4, a5);
  }
  else
  {
    if (v27 == 1 || v29 == 1)
    {
      v30[0] = a6;
      v30[1] = a7;
      v30[2] = 0;
      v31 = v26;
      v32 = v28;
      v20 = v30;
    }
    else
    {
      v20 = 0;
    }
    v22 = sub_1B67ADBCC((uint64_t)v36, a3, a4, (uint64_t)&v33, (uint64_t)&v35, (uint64_t)&v34, (uint64_t)v20);
  }
  *a2 = v22;
  v23 = buffer;
  IOSurfaceUnlock(buffer, 0, 0);
  CFRelease(v23);
  return 0;
}

uint64_t sub_1B6825B20(uint64_t a1)
{
  __IOSurface *v2;
  uint64_t result;
  size_t PlaneCount;
  size_t v5;
  _QWORD *v6;
  int BytesPerRowOfPlane;

  v2 = *(__IOSurface **)(a1 + 40);
  *(_DWORD *)(a1 + 16) = IOSurfaceGetPixelFormat(v2);
  *(_QWORD *)(a1 + 24) = IOSurfaceGetAllocSize(v2);
  *(_BYTE *)(a1 + 32) = IOSurfaceIsTiled() != 0;
  *(_DWORD *)(a1 + 36) = IOSurfaceGetTileFormat();
  result = IOSurfaceLock(v2, 0, 0);
  if (!(_DWORD)result)
  {
    PlaneCount = IOSurfaceGetPlaneCount(v2);
    if (PlaneCount >= 2)
    {
      *(_QWORD *)a1 = IOSurfaceGetWidthOfPlane(v2, 0);
      *(_QWORD *)(a1 + 8) = IOSurfaceGetHeightOfPlane(v2, 0);
    }
    else
    {
      *(_QWORD *)a1 = IOSurfaceGetWidth(v2);
      *(_QWORD *)(a1 + 8) = IOSurfaceGetHeight(v2);
      if (!PlaneCount)
        return IOSurfaceUnlock(v2, 0, 0);
    }
    v5 = 0;
    v6 = (_QWORD *)(a1 + 96);
    do
    {
      *(v6 - 6) = IOSurfaceGetBaseAddressOfPlane(v2, v5);
      *(v6 - 5) = 0;
      *((_DWORD *)v6 - 8) = IOSurfaceGetWidthOfPlane(v2, v5);
      *((_DWORD *)v6 - 7) = IOSurfaceGetHeightOfPlane(v2, v5);
      *((_BYTE *)v6 - 20) = IOSurfaceGetAddressFormatOfPlane();
      *((_DWORD *)v6 - 4) = IOSurfaceGetCompressionTypeOfPlane();
      BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v2, v5);
      *((_DWORD *)v6 - 6) = BytesPerRowOfPlane;
      *v6 = *((int *)v6 - 7) * (uint64_t)BytesPerRowOfPlane;
      *(_QWORD *)((char *)v6 - 12) = 0;
      if ((*((_DWORD *)v6 - 4) | 2) == 3)
      {
        *(v6 - 6) = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
        *(v6 - 5) = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
        *((_DWORD *)v6 - 3) = IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
        *((_DWORD *)v6 - 2) = IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
      }
      ++v5;
      v6 += 7;
    }
    while (PlaneCount != v5);
    return IOSurfaceUnlock(v2, 0, 0);
  }
  return result;
}

void sub_1B6825CE0(const __CFDictionary *a1, const void *a2, _QWORD *a3, _QWORD *a4)
{
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  CFTypeID v11;
  unsigned int Count;
  uint64_t v13;
  CFIndex v14;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v16;
  CFTypeID v17;
  uint8_t buf[4];
  const void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (CFDictionaryContainsKey(a1, a2))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (!Value)
      goto LABEL_18;
    v9 = Value;
    v10 = CFGetTypeID(Value);
    if (v10 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v9, kCFNumberSInt64Type, a3);
      return;
    }
    v11 = CFGetTypeID(v9);
    if (v11 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v9);
      *a3 = 0;
      v13 = Count;
      if (Count)
      {
        v14 = 0;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v14);
          if (ValueAtIndex)
          {
            v16 = ValueAtIndex;
            v17 = CFGetTypeID(ValueAtIndex);
            if (v17 == CFNumberGetTypeID())
            {
              CFNumberGetValue(v16, kCFNumberSInt64Type, a4);
              *a3 += *a4;
            }
          }
          ++v14;
          ++a4;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
LABEL_18:
      if (dword_1EF137CD0 >= 2)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknow CFTypeID for %@ in sample attachment!\n", a2);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v19 = a2;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknow CFTypeID for %@ in sample attachment!\n", buf, 0xCu);
        }
      }
    }
  }
}

void sub_1B6825EC8(const __CFDictionary *a1, const void *a2, _DWORD *a3, _DWORD *a4)
{
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  CFTypeID v11;
  unsigned int Count;
  uint64_t v13;
  CFIndex v14;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v16;
  CFTypeID v17;
  uint8_t buf[4];
  const void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (CFDictionaryContainsKey(a1, a2))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (!Value)
      goto LABEL_18;
    v9 = Value;
    v10 = CFGetTypeID(Value);
    if (v10 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v9, kCFNumberSInt32Type, a3);
      return;
    }
    v11 = CFGetTypeID(v9);
    if (v11 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v9);
      *a3 = 0;
      v13 = Count;
      if (Count)
      {
        v14 = 0;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v14);
          if (ValueAtIndex)
          {
            v16 = ValueAtIndex;
            v17 = CFGetTypeID(ValueAtIndex);
            if (v17 == CFNumberGetTypeID())
            {
              CFNumberGetValue(v16, kCFNumberSInt32Type, a4);
              *a3 += *a4;
            }
          }
          ++v14;
          ++a4;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
LABEL_18:
      if (dword_1EF137CD0 >= 2)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknow CFTypeID for %@ in sample attachment!\n", a2);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v19 = a2;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unknow CFTypeID for %@ in sample attachment!\n", buf, 0xCu);
        }
      }
    }
  }
}

void *sub_1B68260B0(void *result, uint64_t a2, const __CFData *a3)
{
  int v5;
  unsigned int v6;
  CFIndex Length;
  UInt8 *MutableBytePtr;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;

  if ((int)result >= 1)
  {
    v5 = (int)result;
    do
    {
      v6 = sub_1B67C9094(a2, 16);
      Length = CFDataGetLength(a3);
      CFDataIncreaseLength(a3, v6 + 4);
      *(_DWORD *)&CFDataGetMutableBytePtr(a3)[Length] = 0x1000000;
      MutableBytePtr = CFDataGetMutableBytePtr(a3);
      result = memcpy(&MutableBytePtr[Length + 4], *(const void **)(a2 + 24), v6);
      v9 = *(int *)(a2 + 44);
      *(_DWORD *)(a2 + 44) &= 7u;
      v10 = *(_QWORD *)(a2 + 32);
      v11 = (unsigned int *)(*(_QWORD *)(a2 + 24) + ((v9 + (unint64_t)(8 * v6)) >> 3));
      *(_QWORD *)(a2 + 24) = v11;
      if ((unint64_t)v11 >= v10)
      {
        if ((unint64_t)v11 > v10)
          *(_QWORD *)(a2 + 24) = v10;
      }
      else
      {
        *(_DWORD *)(a2 + 40) = bswap32(*v11);
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

__CFDictionary *sub_1B6826194(uint64_t a1, int a2)
{
  int v3;
  BOOL v4;
  int v5;
  __CFDictionary *Mutable;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  const void *v11;
  int v12;
  const void **v13;
  int valuePtr;
  int v16;

  if (*(_BYTE *)(a1 + 2545))
  {
    v3 = 875704422;
    v4 = a2 == 0;
  }
  else
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 1000);
    v4 = v3 == 1982882104;
  }
  if (v4)
    v5 = 875704438;
  else
    v5 = v3;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = v5;
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, CFSTR("DPBPixelFormat"), v7);
    CFRelease(v8);
  }
  v16 = *(_DWORD *)(a1 + 264);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
  if (v9)
  {
    v10 = v9;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED2C0], v9);
    CFRelease(v10);
  }
  v11 = (const void *)*MEMORY[0x1E0CED2B8];
  v12 = (****(uint64_t (*****)(_QWORD))(a1 + 80))(**(_QWORD **)(a1 + 80));
  v13 = (const void **)MEMORY[0x1E0C9AE50];
  if (!v12)
    v13 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, v11, *v13);
  return Mutable;
}

uint64_t sub_1B68262D8(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v6;
  int *v7;
  int v8;
  IOSurfaceID v9;
  IOSurfaceRef v10;
  __IOSurface *v11;
  __CVBuffer *v12;
  OSType PixelFormatType;
  OpaqueVTPixelTransferSession *v14;
  __CVBuffer *v15;
  __CVBuffer *v16;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  IOSurfaceRef v29;
  _QWORD v30[2];
  int v31;
  IOSurfaceRef buffer;
  _BYTE v33[112];
  CVPixelBufferRef pixelBufferOut[5];

  v6 = 0;
  v7 = (int *)(a1 + 904);
  while (1)
  {
    v8 = *v7;
    v7 += 20;
    if (v8 == a3)
      break;
    if (*(_DWORD *)(a1 + 2252) + 1 == ++v6)
      return 4294954387;
  }
  v9 = *(_DWORD *)(a1 + 880 + 80 * v6 + 8 * a4);
  if (!v9)
    return 4294954387;
  v10 = IOSurfaceLookup(v9);
  if (!v10)
    return 4294954394;
  v11 = v10;
  v12 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v12);
  IOSurfaceLock(v11, 0, 0);
  buffer = v11;
  sub_1B6825B20((uint64_t)v30);
  if (sub_1B67C37F4(v31) <= 8)
  {
    v18 = sub_1B67C3C48(PixelFormatType);
    v19 = 0;
    v20 = 0;
    v21 = 1;
    do
    {
      v22 = v21;
      if (!v18 && (v19 & 1) != 0)
        break;
      v23 = *(_QWORD *)&v33[56 * v20];
      if (v23 && (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v20))
      {
        v24 = &v30[7 * v20];
        v25 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v20);
        v26 = *(_QWORD *)(*a2 + 8 * v20 + 112);
        v27 = v24[20];
        v28 = v25 - v26 * (int)v24[22] - (int)v24[21];
        if (v27 == 3)
        {
          sub_1B687AE84(v28, v26, v23, *(_DWORD *)(a1 + 4 * v20 + 276), *(_DWORD *)(a1 + 4 * v20 + 284), v20);
        }
        else
        {
          if (v27 == 1)
          {
            LODWORD(pixelBufferOut[0]) = *(_DWORD *)(a1 + 2524);
            *((_DWORD *)pixelBufferOut + v20 + 1) = *(_DWORD *)(a1 + 2528);
            pixelBufferOut[v20 + 2] = *(CVPixelBufferRef *)&v33[56 * v20 + 8];
          }
          ((void (*)(uint64_t))qword_1EF1391A8[v20])(v28);
        }
      }
      v21 = 0;
      v19 = 1;
      v20 = 1;
    }
    while ((v22 & 1) != 0);
  }
  else
  {
    pixelBufferOut[0] = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, 0, pixelBufferOut);
    v14 = *(OpaqueVTPixelTransferSession **)(a1 + 2552);
    if (v14)
    {
      v15 = pixelBufferOut[0];
      v16 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      VTPixelTransferSessionTransferImage(v14, v15, v16);
    }
    CVPixelBufferRelease(pixelBufferOut[0]);
  }
  v29 = buffer;
  IOSurfaceUnlock(buffer, 0, 0);
  CFRelease(v29);
  return 0;
}

uint64_t sub_1B6826554(uint64_t a1, _QWORD *a2, IOSurfaceID *a3)
{
  __IOSurface *v5;
  __IOSurface *v6;
  uint64_t v7;
  char v8;
  char v9;
  IOSurfaceRef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  IOSurfaceRef v17;
  IOSurfaceRef v19[5];
  IOSurfaceRef buffer;
  _QWORD v21[13];
  _DWORD v22[10];

  if (!a3 || !*a3)
    return 4294954387;
  v5 = IOSurfaceLookup(*a3);
  if (!v5)
    return 4294954394;
  v6 = v5;
  IOSurfaceLock(v5, 0, 0);
  buffer = v6;
  sub_1B6825B20((uint64_t)v19);
  v7 = 0;
  v8 = 1;
  while (1)
  {
    v9 = v8;
    if (!(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7))
      break;
    v10 = &v19[7 * v7];
    v11 = (uint64_t)v10[6];
    v12 = *((unsigned int *)v10 + 18);
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
    v14 = *((_DWORD *)v10 + 20);
    v15 = v13 - *(_QWORD *)(*a2 + 8 * v7 + 112) * *((int *)v10 + 22) - *((int *)v10 + 21);
    if (v14 == 3)
    {
      sub_1B687B0C0(v11, v15, *(_QWORD *)(*a2 + 8 * v7 + 112), *(_DWORD *)(a1 + 4 * v7 + 276), *(_DWORD *)(a1 + 4 * v7 + 284), v7);
    }
    else
    {
      if (v14 == 1)
      {
        v22[0] = *(_DWORD *)(a1 + 2524);
        v22[v7 + 1] = *(_DWORD *)(a1 + 2528);
        *(_QWORD *)&v22[2 * v7 + 4] = v21[7 * v7];
      }
      ((void (*)(uint64_t, uint64_t, uint64_t))qword_1EF139198[v7])(v11, v12, v15);
    }
    v8 = 0;
    v7 = 1;
    if ((v9 & 1) == 0)
    {
      v16 = 0;
      goto LABEL_16;
    }
  }
  v16 = 4294954385;
LABEL_16:
  v17 = buffer;
  IOSurfaceUnlock(buffer, 0, 0);
  CFRelease(v17);
  return v16;
}

uint64_t sub_1B6826708()
{
  return VTCompressionSessionSetProperty();
}

__CFDictionary *sub_1B682671C(_DWORD *a1, unsigned int a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  const void *v13;
  const void *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  const CFDictionaryKeyCallBacks *v18;
  const CFDictionaryValueCallBacks *v19;
  __CFDictionary *v20;
  __CFDictionary *v21;
  const void *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  __CFDictionary *v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  __CFDictionary *v51;
  CFNumberRef v52;
  CFNumberRef v53;
  const void *v54;
  CFNumberRef v55;
  CFNumberRef v56;
  uint64_t v57;
  char *v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  __CFDictionary *theDict;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *key;
  void *v72;
  const void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  __CFArray *theArray;
  _DWORD *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  const void *v84;
  _QWORD valuePtr[2];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v80 = a1;
  LODWORD(valuePtr[0]) = a1[340];
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED4D8], v5);
    CFRelease(v6);
  }
  LODWORD(valuePtr[0]) = v80[341];
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED4E8], v7);
    CFRelease(v8);
  }
  LODWORD(valuePtr[0]) = v80[342];
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v9)
  {
    v10 = v9;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED4E0], v9);
    CFRelease(v10);
  }
  LODWORD(valuePtr[0]) = v80[343];
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v11)
  {
    v12 = v11;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CED4F0], v11);
    CFRelease(v12);
  }
  theDict = Mutable;
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v13 = (const void *)*MEMORY[0x1E0C9AE50];
  v14 = (const void *)*MEMORY[0x1E0C9AE40];
  key = (void *)*MEMORY[0x1E0CED520];
  v70 = (void *)*MEMORY[0x1E0CED528];
  v69 = (void *)*MEMORY[0x1E0CED550];
  v68 = (void *)*MEMORY[0x1E0CED540];
  v67 = (void *)*MEMORY[0x1E0CED538];
  v78 = (void *)*MEMORY[0x1E0CED560];
  v77 = (void *)*MEMORY[0x1E0CED580];
  v76 = (void *)*MEMORY[0x1E0CED568];
  v66 = (void *)*MEMORY[0x1E0CED570];
  v65 = (void *)*MEMORY[0x1E0CED578];
  v84 = (const void *)*MEMORY[0x1E0CED518];
  v83 = (const void *)*MEMORY[0x1E0CED500];
  v82 = (const void *)*MEMORY[0x1E0CED508];
  v81 = (const void *)*MEMORY[0x1E0CED510];
  v75 = (void *)*MEMORY[0x1E0CED558];
  v15 = v80 + 18;
  v74 = (void *)*MEMORY[0x1E0CED530];
  v16 = (8 * a2) | 4;
  v17 = -1;
  v72 = (void *)*MEMORY[0x1E0CED548];
  v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v73 = (const void *)*MEMORY[0x1E0C9AE50];
  do
  {
    v20 = CFDictionaryCreateMutable(0, 0, v18, v19);
    v21 = v20;
    if (*((_BYTE *)v15 - 52))
      v22 = v13;
    else
      v22 = v14;
    CFDictionaryAddValue(v20, CFSTR("DelayedRVRAScale"), v22);
    LODWORD(valuePtr[0]) = *(v15 - 12);
    v23 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v23)
    {
      v24 = v23;
      CFDictionaryAddValue(v21, key, v23);
      CFRelease(v24);
    }
    LODWORD(valuePtr[0]) = *(v15 - 11);
    v25 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v25)
    {
      v26 = v25;
      CFDictionaryAddValue(v21, v70, v25);
      CFRelease(v26);
    }
    LODWORD(valuePtr[0]) = *(v15 - 14);
    v27 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v27)
    {
      v28 = v27;
      CFDictionaryAddValue(v21, v69, v27);
      CFRelease(v28);
    }
    valuePtr[0] = *((_QWORD *)v15 - 4);
    v29 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
    if (v29)
    {
      v30 = v29;
      CFDictionaryAddValue(v21, v68, v29);
      CFRelease(v30);
    }
    LODWORD(valuePtr[0]) = *(v15 - 10);
    v31 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v31)
    {
      v32 = v31;
      CFDictionaryAddValue(v21, v67, v31);
      CFRelease(v32);
    }
    v33 = CFDictionaryCreateMutable(0, 0, v18, v19);
    v34 = v33;
    if (*(v15 - 4))
      v35 = v13;
    else
      v35 = v14;
    CFDictionaryAddValue(v33, v78, v35);
    if (*(v15 - 3))
      v36 = v13;
    else
      v36 = v14;
    CFDictionaryAddValue(v34, v77, v36);
    if (*(v15 - 1))
      v37 = v13;
    else
      v37 = v14;
    CFDictionaryAddValue(v34, v76, v37);
    LODWORD(valuePtr[0]) = *(v15 - 2);
    v38 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v38)
    {
      v39 = v38;
      CFDictionaryAddValue(v34, v66, v38);
      CFRelease(v39);
    }
    LODWORD(valuePtr[0]) = *v15;
    v40 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v40)
    {
      v41 = v40;
      CFDictionaryAddValue(v34, v65, v40);
      CFRelease(v41);
    }
    v42 = CFDictionaryCreateMutable(0, 0, v18, v19);
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 12);
    v43 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v43)
    {
      v44 = v43;
      CFDictionaryAddValue(v42, v84, v43);
      CFRelease(v44);
    }
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 10);
    v45 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v45)
    {
      v46 = v45;
      CFDictionaryAddValue(v42, v83, v45);
      CFRelease(v46);
    }
    LODWORD(valuePtr[0]) = *(_DWORD *)((char *)v15 + v16 - 76);
    v47 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v47)
    {
      v48 = v47;
      CFDictionaryAddValue(v42, v82, v47);
      CFRelease(v48);
    }
    LODWORD(valuePtr[0]) = *(_DWORD *)((char *)v15 + v16 - 76);
    v49 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v49)
    {
      v50 = v49;
      CFDictionaryAddValue(v42, v81, v49);
      CFRelease(v50);
    }
    v51 = CFDictionaryCreateMutable(0, 0, v18, MEMORY[0x1E0C9B3A0]);
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 11);
    v52 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v52)
    {
      v53 = v52;
      CFDictionaryAddValue(v51, v84, v52);
      CFRelease(v53);
    }
    v54 = v14;
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 9);
    v55 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v55)
    {
      v56 = v55;
      CFDictionaryAddValue(v51, v83, v55);
      CFRelease(v56);
    }
    v57 = v16;
    v58 = (char *)v15 + v16;
    LODWORD(valuePtr[0]) = *((_DWORD *)v58 - 18);
    v59 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v59)
    {
      v60 = v59;
      CFDictionaryAddValue(v51, v82, v59);
      CFRelease(v60);
    }
    LODWORD(valuePtr[0]) = *((_DWORD *)v58 - 18);
    v61 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v61)
    {
      v62 = v61;
      CFDictionaryAddValue(v51, v81, v61);
      CFRelease(v62);
    }
    CFDictionaryAddValue(v21, v75, v34);
    CFDictionaryAddValue(v21, v74, v42);
    CFDictionaryAddValue(v21, v72, v51);
    CFRelease(v34);
    CFRelease(v42);
    CFRelease(v51);
    CFArrayAppendValue(theArray, v21);
    CFRelease(v21);
    ++v17;
    v15 += 20;
    v16 = v57;
    v13 = v73;
    v14 = v54;
    v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  }
  while (v17 < v80[343]);
  CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E0CED4F8], theArray);
  CFRelease(theArray);
  return theDict;
}

uint64_t sub_1B6826ED8(_DWORD *a1, _DWORD *a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 4294954387;
  v7 = a1[37];
  v8 = a1[631];
  v9 = a1[632];
  v14[0] = &off_1E6A145D8;
  v14[1] = a1;
  v15 = v14;
  v10 = sub_1B68274B4(a2, v7, (uint64_t)(a1 + 69), (uint64_t)(a1 + 71), (uint64_t)(a1 + 73), v8, v9, (uint64_t)v14, a3, a4, a5, a6, a7);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_7;
  }
  if (v15)
  {
    v12 = 5;
LABEL_7:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void sub_1B6826FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6826FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  void *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v6 = 0;
  v48 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 608);
  v8 = *(_DWORD *)(v7 + 680);
  v9 = 1;
  do
  {
    v10 = v9;
    v11 = *(_DWORD *)(a3 + 4 * v6);
    if ((v11 & 0x80000000) == 0)
    {
      v12 = (*(_DWORD *)(a1 + 2252) + 1);
      v13 = (int *)(a1 + 904);
      while (1)
      {
        v14 = *v13;
        v13 += 20;
        if (v11 == v14)
          break;
        if (!--v12)
        {
          if (dword_1EF137CD0 >= 1)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: current reference frame_num_driver (%d) cannot be found in hw dpb\n", v8, v11);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v16 = *(_DWORD *)(a3 + 4 * v6);
              *(_DWORD *)buf = 67109376;
              v41 = v8;
              v42 = 1024;
              v43 = v16;
              v17 = MEMORY[0x1E0C81028];
              v18 = "[Poc %d]: current reference frame_num_driver (%d) cannot be found in hw dpb\n";
              goto LABEL_13;
            }
          }
          return 4294954385;
        }
      }
    }
    v9 = 0;
    v6 = 1;
  }
  while ((v10 & 1) != 0);
  if ((*(_BYTE *)(v7 + 36) & 2) == 0)
    return 0;
  v20 = 0;
  v21 = (*(_DWORD *)(a1 + 2252) + 1);
  v22 = (int *)(a1 + 896);
  do
  {
    v23 = *v22;
    v22 += 20;
    if (v23 == 2)
      ++v20;
    --v21;
  }
  while (v21);
  v24 = *(char *)(*(_QWORD *)(a1 + 88) + 150);
  if (v20 < v24)
  {
    v25 = *(_DWORD *)(a2 + 432);
    if ((v25 & 0x80000000) == 0)
    {
      if (dword_1EF137CD0 < 1)
        return 4294954385;
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: number of LTR in hw dpb (%d) is smaller than the number of LTR allowed (%d) but with retirement poc (%d) specified\n", v8, v20, *(char *)(*(_QWORD *)(a1 + 88) + 150), v25);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return 4294954385;
      v26 = *(char *)(*(_QWORD *)(a1 + 88) + 150);
      v27 = *(_DWORD *)(a2 + 432);
      *(_DWORD *)buf = 67109888;
      v41 = v8;
      v42 = 1024;
      v43 = v20;
      v44 = 1024;
      v45 = v26;
      v46 = 1024;
      v47 = v27;
      v17 = MEMORY[0x1E0C81028];
      v18 = "[Poc %d]: number of LTR in hw dpb (%d) is smaller than the number of LTR allowed (%d) but with retirement po"
            "c (%d) specified\n";
      v19 = 26;
      goto LABEL_14;
    }
    return 0;
  }
  if (v20 != v24)
  {
    if (dword_1EF137CD0 < 1)
      return 4294954385;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: number of LTR in hw dpb (%d) is greater than the number of LTR allowed (%d)\n", v8, v20, v24);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 4294954385;
    v37 = *(char *)(*(_QWORD *)(a1 + 88) + 150);
    *(_DWORD *)buf = 67109632;
    v41 = v8;
    v42 = 1024;
    v43 = v20;
    v44 = 1024;
    v45 = v37;
    v17 = MEMORY[0x1E0C81028];
    v18 = "[Poc %d]: number of LTR in hw dpb (%d) is greater than the number of LTR allowed (%d)\n";
LABEL_43:
    v19 = 20;
    goto LABEL_14;
  }
  v28 = *(_DWORD *)(a2 + 432);
  if (v28 < 0)
  {
    if (dword_1EF137CD0 < 1)
      return 4294954385;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: number of LTR in hw dpb (%d) is equal to the number of LTR allowed (%d) but with no retirement specified\n", v8, v20, v20);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 4294954385;
    v38 = *(char *)(*(_QWORD *)(a1 + 88) + 150);
    *(_DWORD *)buf = 67109632;
    v41 = v8;
    v42 = 1024;
    v43 = v20;
    v44 = 1024;
    v45 = v38;
    v17 = MEMORY[0x1E0C81028];
    v18 = "[Poc %d]: number of LTR in hw dpb (%d) is equal to the number of LTR allowed (%d) but with no retirement specified\n";
    goto LABEL_43;
  }
  v29 = sub_1B67CCE18(*(_QWORD *)(a2 + 744), v28);
  if (*(_QWORD *)v29)
  {
    v30 = *(_DWORD *)(*(_QWORD *)v29 + 684);
    if (v30 == *(_DWORD *)(a1 + 904))
      return 0;
    v31 = *(unsigned int *)(a1 + 2252);
    v32 = (v31 + 1);
    v33 = v32 - 1;
    v34 = (int *)(a1 + 984);
    v35 = 1;
    while (v32 != v35)
    {
      v36 = *v34;
      v34 += 20;
      ++v35;
      if (v30 == v36)
      {
        v33 = v35 - 2;
        break;
      }
    }
    if (v33 < v31 || dword_1EF137CD0 < 1)
    {
      if (v33 >= v31)
        return 4294954385;
      return 0;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: retired frame_num_driver (%d) cannot be found in hw dpb\n", v8, v30);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 4294954385;
    *(_DWORD *)buf = 67109376;
    v41 = v8;
    v42 = 1024;
    v43 = v30;
    v17 = MEMORY[0x1E0C81028];
    v18 = "[Poc %d]: retired frame_num_driver (%d) cannot be found in hw dpb\n";
  }
  else
  {
    if (dword_1EF137CD0 < 1)
      return 4294954385;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[Poc %d]: retired frame poc (%d) cannot be found in sw dpb\n", v8, *(_DWORD *)(a2 + 432));
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 4294954385;
    v39 = *(_DWORD *)(a2 + 432);
    *(_DWORD *)buf = 67109376;
    v41 = v8;
    v42 = 1024;
    v43 = v39;
    v17 = MEMORY[0x1E0C81028];
    v18 = "[Poc %d]: retired frame poc (%d) cannot be found in sw dpb\n";
  }
LABEL_13:
  v19 = 14;
LABEL_14:
  _os_log_impl(&dword_1B676B000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
  return 4294954385;
}

uint64_t sub_1B68274B4(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, int a9, int a10, int a11, unsigned int a12, unsigned int a13)
{
  char v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  char v18;
  __IOSurface *v19;
  __IOSurface *v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  _DWORD *v39;
  int v40;
  signed int v41;
  CVPixelBufferRef **v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  const void *v47;
  uint64_t v49;
  __IOSurface *IOSurface;
  uint64_t v51;
  __IOSurface *v52;
  size_t v53;
  char v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  int BytesPerRowOfPlane;
  void *BaseAddressOfPlane;
  size_t v60;
  char v61;
  char v62;
  unsigned int v63;
  void *BaseAddress;
  size_t AllocSize;
  uint64_t v66;
  char v67;
  char v68;
  void *BaseAddressOfCompressedTileHeaderRegionOfPlane;
  const void *v70;
  size_t v71;
  char v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  void *v77;
  unint64_t v79;
  signed int v80;
  CVPixelBufferRef texture;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferRef *p_pixelBuffer;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[12];
  int v91;
  uint64_t v92;
  int v93;
  _DWORD v94[2];
  int v95[2];
  __int128 v96;
  uint64_t v97[3];
  _OWORD v98[2];
  unsigned int v99[2];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (!*a1 || !a1[1])
    return 4294954387;
  v79 = __PAIR64__(a7, a6);
  v14 = 0;
  v15 = 0;
  v16 = (a9 + 31) & 0xFFFFFFE0;
  if (a2 == 1)
    v16 = (a9 + 15) & 0xFFFFFFF0;
  v80 = v16;
  *(_OWORD *)v97 = 0uLL;
  v96 = 0uLL;
  texture = 0;
  pixelBuffer = 0;
  v17 = 1;
  v90[0] = 0;
  v90[1] = 0;
  do
  {
    v18 = v17;
    v19 = IOSurfaceLookup(a1[v15]);
    v90[v15] = v19;
    if (!v19)
    {
LABEL_26:
      v43 = 4294954394;
      goto LABEL_27;
    }
    v20 = v19;
    IOSurfaceLock(v19, 0, 0);
    v21 = &v90[20 * v15 + 2];
    v21[5] = v20;
    sub_1B6825B20((uint64_t)v21);
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = v23;
      v25 = v90[20 * v15 + 8 + 7 * v22];
      *((_QWORD *)&v98[v15] + v22) = v25;
      if (!v25)
        goto LABEL_26;
      if ((v14 & 1) != 0)
      {
        v26 = &v90[7 * v22 + 2];
        v27 = *((_DWORD *)v26 + 60);
        v28 = (void *)*((_QWORD *)&v98[1] + v22);
        v29 = (int *)(a3 + 4 * v22);
        v30 = (int *)(a4 + 4 * v22);
        v31 = (int *)(v26 + 28);
        v32 = (int *)v26 + 57;
        if (v27 == 1)
        {
          v33 = v29;
        }
        else
        {
          v30 = v32;
          v33 = v31;
        }
        memset(v28, 128, *v30 * (uint64_t)*v33);
      }
      v23 = 0;
      v22 = 1;
    }
    while ((v24 & 1) != 0);
    v17 = 0;
    v14 = 1;
    v15 = 1;
  }
  while ((v18 & 1) != 0);
  v34 = v91;
  if (v91 != 3)
  {
    v35 = v93;
    if (v93 != 3)
    {
      v36 = 0;
      v37 = 1;
      v96 = v98[1];
      *(_OWORD *)v97 = v98[0];
      do
      {
        v38 = v37;
        v39 = &v90[7 * v36 + 2];
        v40 = v39[22];
        v95[v36] = v39[21];
        v94[v36] = v40;
        v41 = v39[18];
        if (v80 > v41)
          v41 = v80;
        v99[v36] = v41;
        v36 = 1;
        v37 = 0;
      }
      while ((v38 & 1) != 0);
      if (v34 == 1 || v35 == 1)
      {
        p_pixelBuffer = (CVPixelBufferRef *)v79;
        v87 = 0;
        v88 = v90[9];
        v89 = v92;
        v42 = &p_pixelBuffer;
      }
      else
      {
        v42 = 0;
      }
      sub_1B67CB0C0((uint64_t)&v96, (uint64_t)v99, a12, a13, (uint64_t)v97, (uint64_t)v42, (uint64_t)v99, a10, a11, (uint64_t)v95, (uint64_t)v94);
      goto LABEL_43;
    }
  }
  p_pixelBuffer = &pixelBuffer;
  v49 = *(_QWORD *)(a8 + 24);
  if (!v49)
    goto LABEL_55;
  if ((*(unsigned int (**)(uint64_t, CVPixelBufferRef **))(*(_QWORD *)v49 + 48))(v49, &p_pixelBuffer))
    goto LABEL_40;
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  p_pixelBuffer = &texture;
  v51 = *(_QWORD *)(a8 + 24);
  if (!v51)
LABEL_55:
    sub_1B6827A40();
  if ((*(unsigned int (**)(uint64_t, CVPixelBufferRef **))(*(_QWORD *)v51 + 48))(v51, &p_pixelBuffer))
  {
LABEL_40:
    v43 = 4294954392;
  }
  else
  {
    CVPixelBufferLockBaseAddress(texture, 0);
    v52 = CVPixelBufferGetIOSurface(texture);
    v53 = 0;
    v54 = 1;
    do
    {
      v55 = v54;
      v56 = &v90[7 * v53 + 2];
      v57 = v56[6];
      BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(IOSurface, v53);
      BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(IOSurface, v53);
      sub_1B687AE84((uint64_t)BaseAddressOfPlane - *((int *)v56 + 22) * (uint64_t)BytesPerRowOfPlane - *((int *)v56 + 21), BytesPerRowOfPlane, v57, *(_DWORD *)(a3 + 4 * v53), *(_DWORD *)(a4 + 4 * v53), v53);
      v54 = 0;
      v53 = 1;
    }
    while ((v55 & 1) != 0);
    v60 = 0;
    v61 = 1;
    do
    {
      v62 = v61;
      v97[v60] = (uint64_t)IOSurfaceGetBaseAddressOfPlane(IOSurface, v60);
      v97[v60 - 2] = (uint64_t)IOSurfaceGetBaseAddressOfPlane(v52, v60);
      v95[v60] = IOSurfaceGetBytesPerRowOfPlane(IOSurface, v60);
      v63 = IOSurfaceGetBytesPerRowOfPlane(v52, v60);
      v61 = 0;
      v99[v60] = v63;
      v60 = 1;
    }
    while ((v62 & 1) != 0);
    BaseAddress = IOSurfaceGetBaseAddress(v52);
    AllocSize = IOSurfaceGetAllocSize(v52);
    memset(BaseAddress, 128, AllocSize);
    sub_1B67C9EB8((uint64_t *)&v96, v99, a12, a13, v97, v95, a10, a11);
    v66 = 0;
    v67 = 1;
    do
    {
      v68 = v67;
      if (*(int *)(a5 + 4 * v66) < 1)
      {
        v43 = 4294954385;
        goto LABEL_27;
      }
      BaseAddressOfCompressedTileHeaderRegionOfPlane = (void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
      v70 = (const void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
      memcpy(BaseAddressOfCompressedTileHeaderRegionOfPlane, v70, *(int *)(a5 + 4 * v66));
      v67 = 0;
      v66 = 1;
    }
    while ((v68 & 1) != 0);
    v71 = 0;
    v72 = 1;
    do
    {
      v73 = v72;
      v74 = &v90[7 * v71 + 2];
      v75 = v74[26];
      v76 = IOSurfaceGetBytesPerRowOfPlane(v52, v71);
      v77 = IOSurfaceGetBaseAddressOfPlane(v52, v71);
      sub_1B687B0C0(v75, (uint64_t)v77 - *((int *)v74 + 62) * (uint64_t)v76 - *((int *)v74 + 61), v76, *(_DWORD *)(a3 + 4 * v71), *(_DWORD *)(a4 + 4 * v71), v71);
      v72 = 0;
      v71 = 1;
    }
    while ((v73 & 1) != 0);
LABEL_43:
    v43 = 0;
  }
LABEL_27:
  if (pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CVPixelBufferRelease(pixelBuffer);
  }
  if (texture)
  {
    CVPixelBufferUnlockBaseAddress(texture, 0);
    CVPixelBufferRelease(texture);
  }
  v44 = 0;
  v45 = 1;
  do
  {
    v46 = v45;
    v47 = (const void *)v90[v44];
    if (v47)
    {
      IOSurfaceUnlock((IOSurfaceRef)v90[v44], 0, 0);
      CFRelease(v47);
    }
    v45 = 0;
    v44 = 1;
  }
  while ((v46 & 1) != 0);
  return v43;
}

void sub_1B6827A40()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1E6A146A0;
  __cxa_throw(exception, (struct type_info *)&unk_1E6A145A8, (void (*)(void *))std::exception::~exception);
}

void sub_1B6827A74(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1BCC9814CLL);
}

void sub_1B6827A9C()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B6827AB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6A145D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1B6827AE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6A145D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1B6827B00(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 12736);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, *a2);
}

uint64_t sub_1B6827B1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

void sub_1B6827B28(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    sub_1B6773BAC();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    sub_1B6773BF4();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

char *sub_1B6827C38(_BYTE *a1, int a2, char *a3, int a4, int a5, int a6)
{
  uint64_t i;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;

  if (a6 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5 >= 1)
      {
        v7 = 0;
        v8 = a1;
        do
        {
          v9 = v8;
          v10 = a4;
          if (a4 >= 1)
          {
            do
            {
              v11 = *a3++;
              *v9++ = v11;
              --v10;
            }
            while (v10);
          }
          ++v7;
          v8 += a2;
        }
        while (v7 != a5);
      }
      a1 += a4;
    }
  }
  return a3;
}

_BYTE *sub_1B6827CB0(_BYTE *result, char *a2, int a3, int a4, int a5, int a6)
{
  uint64_t i;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;

  if (a6 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5 >= 1)
      {
        v7 = 0;
        v8 = a2;
        do
        {
          v9 = v8;
          v10 = a4;
          if (a4 >= 1)
          {
            do
            {
              v11 = *v9++;
              *result++ = v11;
              --v10;
            }
            while (v10);
          }
          ++v7;
          v8 += a3;
        }
        while (v7 != a5);
      }
      a2 += a4;
    }
  }
  return result;
}

uint64_t sub_1B6827D24(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v7 = a3;
    if (a3)
    {
      v10 = result;
      if (a7 && *(_QWORD *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          v11 = 0;
          v12 = 0;
          v19 = a6;
          v20 = 16 * (int)a2;
          do
          {
            v21 = v11;
            if (a5 >= 1)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                result = off_1EF139188(v10 + v13, a2, v7+ (*(_DWORD *)(*(_QWORD *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), 16, 16, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            v11 = v21 + 16;
            ++v12;
            v10 += v20;
          }
          while (v21 + 16 < v19);
        }
      }
      else if (a6 >= 1)
      {
        v15 = 0;
        v16 = (16 * (a4 - a5)) & ~((16 * (a4 - a5)) >> 31);
        v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            v18 = 0;
            do
            {
              result = off_1EF139188(v10 + v18, a2, v7, 16, 16, 1);
              v7 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v7 += v16;
          v15 += 16;
          v10 += 16 * (int)a2;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1B6827ED4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v7 = a3;
    if (a3)
    {
      v10 = result;
      if (a7 && *(_QWORD *)(a7 + 24))
      {
        if (a6 >= 1)
        {
          v11 = 0;
          v12 = 0;
          v19 = a6;
          v20 = 8 * (int)a2;
          do
          {
            v21 = v11;
            if (a5 >= 1)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                result = off_1EF139188(v10 + v13, a2, v7+ (*(_DWORD *)(*(_QWORD *)(a7 + 24)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 8)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            v11 = v21 + 8;
            ++v12;
            v10 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        v15 = 0;
        v16 = (8 * (a4 - a5)) & ~((8 * (a4 - a5)) >> 31);
        v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            v18 = 0;
            do
            {
              result = off_1EF139188(v10 + v18, a2, v7, 16, 8, 1);
              v7 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v7 += v16;
          v15 += 8;
          v10 += 8 * (int)a2;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1B6828088(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v7 = a3;
    if (a3)
    {
      v10 = result;
      if (a7 && *(_QWORD *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          v11 = 0;
          v12 = 0;
          v19 = a6;
          v20 = 16 * (int)a4;
          do
          {
            v21 = v11;
            if (a5 >= 1)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                result = off_1EF139190(v10+ (*(_DWORD *)(*(_QWORD *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), v7 + v13, a4, 16, 16, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            v11 = v21 + 16;
            ++v12;
            v7 += v20;
          }
          while (v21 + 16 < v19);
        }
      }
      else if (a6 >= 1)
      {
        v15 = 0;
        v16 = (16 * (a2 - a5)) & ~((16 * (a2 - a5)) >> 31);
        v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            v18 = 0;
            do
            {
              result = off_1EF139190(v10, v7 + v18, a4, 16, 16, 1);
              v10 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v10 += v16;
          v15 += 16;
          v7 += 16 * (int)a4;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1B6828238(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v7 = a3;
    if (a3)
    {
      v10 = result;
      if (a7 && *(_QWORD *)(a7 + 24))
      {
        if (a6 >= 1)
        {
          v11 = 0;
          v12 = 0;
          v19 = a6;
          v20 = 8 * (int)a4;
          do
          {
            v21 = v11;
            if (a5 >= 1)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                result = off_1EF139190(v10+ (*(_DWORD *)(*(_QWORD *)(a7 + 24)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 8)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), v7 + v13, a4, 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            v11 = v21 + 8;
            ++v12;
            v7 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        v15 = 0;
        v16 = (8 * (a2 - a5)) & ~((8 * (a2 - a5)) >> 31);
        v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            v18 = 0;
            do
            {
              result = off_1EF139190(v10, v7 + v18, a4, 16, 8, 1);
              v10 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v10 += v16;
          v15 += 8;
          v7 += 8 * (int)a4;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1B68283EC(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v7 = a3;
    if (a3)
    {
      v10 = result;
      if (a7 && *(_QWORD *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          v11 = 0;
          v12 = 0;
          v19 = a6;
          v20 = 8 * (int)a2;
          do
          {
            v21 = v11;
            if (a5 >= 1)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                result = off_1EF139188(v10 + v13, a2, v7+ (*(_DWORD *)(*(_QWORD *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            v11 = v21 + 8;
            ++v12;
            v10 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        v15 = 0;
        v16 = (8 * (a4 - a5)) & ~((8 * (a4 - a5)) >> 31);
        v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            v18 = 0;
            do
            {
              result = off_1EF139188(v10 + v18, a2, v7, 16, 8, 1);
              v7 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v7 += v16;
          v15 += 8;
          v10 += 8 * (int)a2;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1B682859C(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v7 = a3;
    if (a3)
    {
      v10 = result;
      if (a7 && *(_QWORD *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          v11 = 0;
          v12 = 0;
          v19 = a6;
          v20 = 8 * (int)a4;
          do
          {
            v21 = v11;
            if (a5 >= 1)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                result = off_1EF139190(v10+ (*(_DWORD *)(*(_QWORD *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), v7 + v13, a4, 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            v11 = v21 + 8;
            ++v12;
            v7 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        v15 = 0;
        v16 = (8 * (a2 - a5)) & ~((8 * (a2 - a5)) >> 31);
        v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            v18 = 0;
            do
            {
              result = off_1EF139190(v10, v7 + v18, a4, 16, 8, 1);
              v10 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v10 += v16;
          v15 += 8;
          v7 += 8 * (int)a4;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

__int128 *sub_1B682874C(uint64_t a1, int a2, __int128 *a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  __int128 v12;
  __int128 v13;

  if (a6 >= 1)
  {
    v6 = 0;
    v7 = a5 >> 1;
    v8 = 2 * a2;
    if (a5 >> 1 <= 1)
      v7 = 1;
    do
    {
      if (a5 >= 2)
      {
        v9 = (_OWORD *)(a1 + v6 * a4);
        v10 = (_OWORD *)((char *)v9 + a2);
        v11 = v7;
        do
        {
          v12 = *a3;
          v13 = a3[1];
          a3 += 2;
          *v9 = v12;
          v9 = (_OWORD *)((char *)v9 + v8);
          *v10 = v13;
          v10 = (_OWORD *)((char *)v10 + v8);
          --v11;
        }
        while (v11);
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return a3;
}

_OWORD *sub_1B68287B0(_OWORD *result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  __int128 v12;
  __int128 v13;

  if (a6 >= 1)
  {
    v6 = 0;
    v7 = a5 >> 1;
    v8 = 2 * a3;
    if (a5 >> 1 <= 1)
      v7 = 1;
    do
    {
      if (a5 >= 2)
      {
        v9 = (__int128 *)(a2 + v6 * a4);
        v10 = (__int128 *)((char *)v9 + a3);
        v11 = v7;
        do
        {
          v12 = *v9;
          v9 = (__int128 *)((char *)v9 + v8);
          v13 = *v10;
          v10 = (__int128 *)((char *)v10 + v8);
          *result = v12;
          result[1] = v13;
          result += 2;
          --v11;
        }
        while (v11);
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return result;
}

_OWORD *sub_1B6828810(_OWORD *a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6, int a7)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if (a7)
    v8 = -8;
  else
    v8 = -16;
  if (a7)
    v9 = 8;
  else
    v9 = 16;
  if (a6 && (v10 = *(_QWORD *)&a6[2 * a7 + 4]) != 0)
  {
    v11 = a3 / v9;
    v12 = *a6;
    v13 = (v11 >> v12) * a6[a7 + 1];
    v14 = v11 & ~(-1 << v12);
    v15 = *(_DWORD *)(v10 + (v13 + 4 * v14)) & 0xFFFFFFF;
    v16 = (*(_DWORD *)(v10 + (v13 + 4 * (v14 + (1 << v12)))) & 0xFFFFFFF) - v15;
    a2 += v15;
    if (a7)
      v17 = 3;
    else
      v17 = 4;
    v18 = 16 * (a3 - (v11 << v17));
  }
  else
  {
    v16 = (16 * v9);
    v18 = (v8 & a3) * a5 + 16 * ((v9 - 1) & a3);
  }
  return DetileRow_neon(a1, (__int128 *)(a2 + v18), a4, v16);
}

_OWORD *sub_1B68288D4(_OWORD *a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6, int a7)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  signed int v14;

  if (a6 && (v8 = *(_QWORD *)&a6[2 * a7 + 4]) != 0)
  {
    v9 = *a6;
    v10 = ((a3 / 8) >> v9) * a6[a7 + 1];
    v11 = (a3 / 8) & ~(-1 << v9);
    v12 = *(_DWORD *)(v8 + v10 + 4 * v11);
    v13 = (*(_DWORD *)(v8 + v10 + 4 * (v11 + (1 << v9))) & 0xFFFFFFF) - (v12 & 0xFFFFFFFu);
    a2 += v12 & 0xFFFFFFF;
    v14 = 16 * a3 - ((a3 / 8) << 7);
  }
  else
  {
    v14 = 16 * (a3 & 7) + (a3 & 0xFFFFFFF8) * a5;
    v13 = 128;
  }
  return DetileRow_neon(a1, (__int128 *)(a2 + v14), a4, v13);
}

uint64_t sub_1B6828970(int a1, int a2, int a3, int a4, int a5, signed int *a6, signed int *a7, _DWORD *a8, _DWORD *a9, unsigned int *a10, unsigned int *a11, _DWORD *a12, unsigned int *a13)
{
  int v21;
  unsigned int v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  signed int v27;
  int v28;
  signed int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  signed int v52;
  int v53;
  char v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  int *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  signed int v76;
  signed int v77;
  int v78;
  signed int v79;
  _DWORD v81[2];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v21 = sub_1B67C37F4(a5);
  v22 = 1;
  if (a5 > 875836533)
  {
    if (a5 != 875836534 && a5 != 2019963956)
    {
      v23 = 2016687156;
LABEL_8:
      v24 = 1;
      if (a5 != v23)
        goto LABEL_12;
    }
  }
  else if (a5 != 645424692 && a5 != 645428788)
  {
    v23 = 875836518;
    goto LABEL_8;
  }
  v25 = 4294954386;
  if (a3 < 11 || a4)
    return v25;
  v24 = 0;
  v22 = 3;
LABEL_12:
  if (a5 == 1278226488 || a5 == 1751411059 || a5 == 1278226736)
  {
    v25 = 4294954386;
    if (a3 < 11 || a4)
      return v25;
    v22 = 0;
    v24 = 0;
  }
  v26 = a1 + 15;
  v27 = (a1 + 15) & 0xFFFFFFF0;
  v28 = a2 + 15;
  v29 = (a2 + 15) & 0xFFFFFFF0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  v30 = 2 * (v27 >> v24);
  *a6 = v27;
  a6[1] = v30;
  v31 = v29 >> v24;
  *a7 = v29;
  a7[1] = v29 >> v24;
  if (a3 > 0xC)
    goto LABEL_42;
  if (((1 << a3) & 0x180) != 0)
  {
    v25 = 0;
    v43 = v29 * v27;
    *a8 = v43;
    *a9 = v43 >> 1;
  }
  else
  {
    if (((1 << a3) & 0x600) == 0)
    {
      if (((1 << a3) & 0x1800) != 0)
      {
        if (a4)
        {
          if (a4 == 1)
          {
            v25 = 0;
            v32 = v29 >> 3;
            *a8 = (((8 * v27 * ((v29 >> 3) | 1) * v21) >> 3) + 511) & 0xFFFFFE00;
            v33 = v26 | 0xF;
            if (v26 < 0)
              v33 = (v26 | 0xF) + 15;
            v34 = v33 >> 4;
            v35 = v28 | 0xF;
            v36 = (v28 | 0xF) + 15;
            if (v35 < 0)
              v35 = v36;
            *a9 = (v34 * (v35 >> 4)) << 7;
            v38 = v32 + 8;
            v37 = v32 < -8;
            v39 = v32 + 15;
            if (!v37)
              v39 = v38;
            v40 = v39 >> 3;
            v41 = 2 * v27 + 254;
            if (2 * v27 >= -127)
              v41 = 2 * v27 + 127;
            v42 = v41 & 0xFFFFFF80;
            *a10 = (v40 * v42 + 511) & 0xFFFFFE00;
            *a12 = 3;
            *a13 = v42;
            *a6 = v27;
            a6[1] = v30;
            v29 = (v29 + 23) & 0xFFFFFFF0;
LABEL_41:
            *a7 = v29;
            a7[1] = v31;
            return v25;
          }
          return 0;
        }
        v52 = (v29 + 31) & 0xFFFFFFE0;
        v53 = v52 >> 3;
        *a8 = (((8 * v27 * ((v52 >> 3) | 1) * v21) >> 3) + 511) & 0xFFFFFE00;
        if (v22)
        {
          if (v22 == 1)
            v54 = 7;
          else
            v54 = 9;
          v55 = (((v27 + 31) >> 4) & 0xFFFFFFFE) << v54;
        }
        else
        {
          v55 = 0;
        }
        v69 = v52 >> 4;
        *a9 = v55 * (v52 >> 4);
        v70 = v53 + 8;
        v37 = v53 < -8;
        v71 = v53 + 15;
        if (v37)
          v70 = v71;
        v72 = v70 >> 3;
        v73 = 2 * v27;
        v74 = 2 * v27 + 127;
        if (v73 < -127)
          v74 = v73 + 254;
        v75 = v74 & 0xFFFFFF80;
        *a10 = (v72 * v75 + 511) & 0xFFFFFE00;
        if (v21 == 10)
          *a11 = (v69 * ((v73 + 62) & 0xFFFFFFC0) + 511) & 0xFFFFFE00;
        v25 = 0;
        *a12 = 3;
        *a13 = v75;
        v76 = (a1 + 31) & 0xFFFFFFE0;
        *a6 = v76;
        a6[1] = 2 * (v76 >> v24);
        v77 = (v29 + 39) & 0xFFFFFFE0;
        v78 = (int)((a2 + 31) & 0xFFFFFFE0) >> v24;
LABEL_85:
        *a7 = v77;
        a7[1] = v78;
        return v25;
      }
LABEL_42:
      v47 = v29 + 35;
      *a8 = ((int)(v21 * ((32 * (v27 + 31)) & 0xFFFFFC00)) >> 3) * ((v29 + 35) >> 5);
      if (v22 == 1)
        v48 = 2;
      else
        v48 = 1;
      v49 = v29 / v48 + 19;
      v50 = v27 / v48;
      if (v22)
        v51 = (int)(((32 * v50 + 480) & 0xFFFFFE00) * v21) >> 3;
      else
        v51 = 0;
      *a9 = (v51 * (v49 >> 4) + 127) & 0xFFFFFF80;
      v60 = __clz((v27 + 31) / 32 - 1);
      if (v47 < 0)
        v47 = v29 + 66;
      *a10 = ((32 << -(v60 + __clz((v47 >> 5) - 1))) + 127) & 0xFFFFFF80;
      if (v22)
      {
        v61 = v50 + 15;
        if (v50 < -15)
          v61 = v50 + 30;
        v62 = ((8 << -(char)(__clz(v49 / 16 - 1) + __clz((v61 >> 4) - 1))) + 127) & 0xFFFFFF80;
      }
      else
      {
        v62 = 0;
      }
      v63 = 0;
      *a11 = v62;
      v64 = 1;
      do
      {
        v65 = v64 & 1;
        if ((v64 & 1) != 0)
          v66 = 0;
        else
          v66 = 66;
        v67 = &dword_1B692B0D0[v66];
        v68 = v67[2];
        a6[v63] = (v27 - 1 + v67[3] / (v68 * v67[1]) * v67[1]) & -(v67[3] / (v68 * v67[1]) * v67[1]);
        a7[v63] = (((v29 >> v63) | 3) + v68) & -v68;
        v63 = 1;
        v64 = 0;
      }
      while (v65);
      return 0;
    }
    if (!a4)
    {
      v56 = (v27 + 31) >> 4;
      v57 = ((v29 + 31) >> 4) & 0xFFFFFFFE;
      v58 = (v56 & 0xFFFFFFFE) * v57;
      *a8 = v58 << 8;
      if (v22)
      {
        if (v22 == 1)
          v59 = 128;
        else
          v59 = 512;
        v22 = v59 * (v56 & 0xFFFFFFFE);
      }
      *a9 = v22 * v57;
      if (v21 == 10)
      {
        *a10 = (((v56 << 6) & 0xFFFFFF80) * v57 + 511) & 0xFFFFFE00;
        *a11 = (32 * v58 + 511) & 0xFFFFFE00;
      }
      v25 = 0;
      v79 = (a1 + 31) & 0xFFFFFFE0;
      *a6 = v79;
      a6[1] = 2 * (v79 >> v24);
      v77 = (a2 + 31) & 0xFFFFFFE0;
      v78 = v77 >> v24;
      goto LABEL_85;
    }
    if (a4 == 1)
    {
      v25 = 0;
      v44 = v26 | 0xF;
      if (v26 < 0)
        v44 = (v26 | 0xF) + 15;
      v45 = v28 | 0xF;
      if (v28 < 0)
        v45 = (v28 | 0xF) + 15;
      v46 = (v44 >> 4) * (v45 >> 4);
      *a8 = ((v46 << 8) + 511) & 0xFFFFFE00;
      *a9 = v46 << 7;
      *a6 = v27;
      a6[1] = v30;
      goto LABEL_41;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v81[0] = 67109120;
      v81[1] = a4;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unsupported codec type: %d\n", (uint8_t *)v81, 8u);
    }
    return 4294954386;
  }
  return v25;
}

uint64_t sub_1B6828FE0(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  int v8;
  unsigned __int16 v9;

  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  if (dword_1EDBB4CC4 < 13)
  {
    if (dword_1EDBB4CC4 >= 11)
    {
      if ((int)a1 <= 1534621231)
      {
        if ((int)a1 > 875836533)
        {
          if ((_DWORD)a1 == 875836534)
          {
LABEL_78:
            v5 = 30260;
            return v5 | 0x5D380000u;
          }
          result = 1563977264;
          if ((_DWORD)a1 == 1278226488)
            return result;
          v6 = 1534617136;
LABEL_55:
          if ((_DWORD)a1 == v6)
            return 1534617136;
          return 0;
        }
        result = 1563977264;
        if ((_DWORD)a1 == 875704422)
          return result;
        result = 1563981360;
        if ((_DWORD)a1 == 875704438)
          return result;
        v4 = 875836518;
      }
      else
      {
        if ((int)a1 > 1563981359)
        {
          if ((int)a1 <= 2016686639)
          {
            result = 1563981360;
            if ((_DWORD)a1 == 1563981360)
              return result;
            if ((_DWORD)a1 != 1563981364)
              return 0;
            goto LABEL_78;
          }
LABEL_41:
          if ((_DWORD)a1 != 2016686640)
          {
            v6 = 2019963440;
            goto LABEL_55;
          }
LABEL_51:
          v8 = 1534617136;
          return v8 | 0x1000u;
        }
        if ((_DWORD)a1 == 1534621232)
          goto LABEL_51;
        result = 1563977264;
        if ((_DWORD)a1 == 1563977264)
          return result;
        v4 = 1563977268;
      }
      if ((_DWORD)a1 == v4)
        return 1563977268;
      return 0;
    }
    if ((int)a1 <= 1278226735)
    {
      if ((_DWORD)a1 == 875704422)
        return 875704422;
      if ((_DWORD)a1 == 875704438)
        return a1;
      if ((_DWORD)a1 != 1278226488)
        return 0;
      v5 = 26160;
      return v5 | 0x5D380000u;
    }
    if ((int)a1 <= 2016686639)
    {
      if ((_DWORD)a1 == 1278226736 || (_DWORD)a1 == 1751411059)
        return 1568171568;
      return 0;
    }
    goto LABEL_41;
  }
  result = 641234480;
  if ((int)a1 <= 875704437)
  {
    if ((int)a1 <= 645424687)
    {
      if ((int)a1 > 641234479)
      {
        if ((_DWORD)a1 == 641234480)
          return result;
        if ((_DWORD)a1 != 641234484)
          return 0;
        return 641234484;
      }
      if ((_DWORD)a1 != 641230384)
      {
        v7 = 641230388;
        goto LABEL_59;
      }
    }
    else
    {
      if ((int)a1 <= 645428783)
      {
        if ((_DWORD)a1 != 645424688)
        {
          v3 = 645424692;
LABEL_63:
          if ((_DWORD)a1 == v3)
            return 645424692;
          return 0;
        }
        goto LABEL_75;
      }
      if ((_DWORD)a1 == 645428784)
      {
LABEL_67:
        v8 = 645424688;
        return v8 | 0x1000u;
      }
      if ((_DWORD)a1 == 645428788)
        goto LABEL_73;
      if ((_DWORD)a1 != 875704422)
        return 0;
    }
    return 641230384;
  }
  if ((int)a1 > 1751411058)
  {
    if ((int)a1 > 2016687155)
    {
      if ((_DWORD)a1 != 2016687156)
      {
        if ((_DWORD)a1 != 2019963440)
        {
          v3 = 2019963956;
          goto LABEL_63;
        }
LABEL_75:
        v9 = 26160;
        return v9 | 0x26780000u;
      }
LABEL_73:
      v9 = 30260;
      return v9 | 0x26780000u;
    }
    if ((_DWORD)a1 == 1751411059)
      return 642527536;
    if ((_DWORD)a1 == 2016686640)
      goto LABEL_67;
    return 0;
  }
  if ((int)a1 <= 875836533)
  {
    if ((_DWORD)a1 == 875704438)
      return result;
    v7 = 875836518;
LABEL_59:
    if ((_DWORD)a1 == v7)
      return 641230388;
    return 0;
  }
  if ((_DWORD)a1 == 875836534)
    return 641234484;
  if ((_DWORD)a1 != 1278226488)
  {
    if ((_DWORD)a1 != 1278226736)
      return 0;
    return 642527536;
  }
  return 642527288;
}

__CFDictionary *sub_1B6829458(int a1, int a2, int a3)
{
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  CFMutableArrayRef v12;
  __CFArray *v13;
  BOOL v14;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  __CFDictionary *result;
  CFNumberRef v23;
  CFNumberRef v24;
  const void *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  int v34;
  int v35;
  int valuePtr;

  v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = CFDictionaryCreateMutable(0, 0, v6, v7);
  v10 = CFDictionaryCreateMutable(0, 0, v6, v7);
  v11 = CFDictionaryCreateMutable(0, 0, v6, v7);
  v12 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v13 = v12;
  if (Mutable)
    v14 = v9 == 0;
  else
    v14 = 1;
  v16 = v14 || v10 == 0 || v12 == 0;
  v17 = !v16;
  if (!v16)
  {
    if (qword_1EDBB4CB8 != -1)
      dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
    if (dword_1EDBB4CC4 <= 12)
    {
      v34 = 0;
      v18 = 4 * (dword_1EDBB4CC4 > 10);
      if (a3)
        goto LABEL_18;
    }
    else
    {
      v18 = 4;
      v34 = 4;
      if (a3)
      {
LABEL_18:
        if (a3 != 1)
        {
          v19 = 0;
          v35 = 0;
LABEL_40:
          if (dword_1EDBB4CC4 <= 12)
          {
            valuePtr = 3;
            v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v23)
            {
              v24 = v23;
              CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CBC130], v23);
              CFRelease(v24);
            }
          }
          v25 = (const void *)*MEMORY[0x1E0CBC170];
          valuePtr = v18;
          v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v26)
          {
            v27 = v26;
            CFDictionarySetValue(v10, v25, v26);
            CFRelease(v27);
          }
          valuePtr = v34;
          v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v28)
          {
            v29 = v28;
            CFDictionarySetValue(v11, v25, v28);
            CFRelease(v29);
          }
          CFArrayAppendValue(v13, v10);
          CFArrayAppendValue(v13, v11);
          CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E0CA91B0], v13);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v9);
          if (v19)
          {
            valuePtr = v19;
            v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v30)
            {
              v31 = v30;
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FB8], v30);
              CFRelease(v31);
            }
          }
          if (v35)
          {
            valuePtr = v35;
            v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v32)
            {
              v33 = v32;
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FA0], v32);
              CFRelease(v33);
            }
          }
          goto LABEL_53;
        }
        v19 = (192 - a1) & ~((192 - a1) >> 31);
        v20 = 96;
LABEL_38:
        v35 = (v20 - a2) & ~((v20 - a2) >> 31);
        goto LABEL_40;
      }
    }
    v19 = (160 - a1) & ~((160 - a1) >> 31);
    v20 = 64;
    goto LABEL_38;
  }
  if (!v10)
  {
    if (!v11)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_53:
  CFRelease(v10);
  if (v11)
LABEL_22:
    CFRelease(v11);
LABEL_23:
  if (v9)
    CFRelease(v9);
  if (v13)
    CFRelease(v13);
  if (Mutable)
    v21 = v17;
  else
    v21 = 1;
  if (v17)
    result = Mutable;
  else
    result = 0;
  if ((v21 & 1) == 0)
  {
    CFRelease(Mutable);
    return 0;
  }
  return result;
}

__CFDictionary *sub_1B68297D4(int a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  const void *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  unint64_t v37;
  signed int v38;
  const void *v39;
  CFNumberRef v40;
  CFNumberRef v41;
  char v42;
  uint64_t v43;
  signed int v44;
  char v45;
  CFMutableDictionaryRef v46;
  __CFDictionary *v47;
  int v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  int v53;
  signed int v54;
  int v55;
  CFNumberRef v56;
  CFNumberRef v57;
  int v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  unsigned int v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  int v76;
  signed int v77;
  signed int v78;
  CFNumberRef v79;
  CFNumberRef v80;
  signed int v81;
  int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  CFNumberRef v91;
  CFNumberRef v92;
  CFNumberRef v93;
  unsigned int v94;
  CFNumberRef v95;
  CFNumberRef v96;
  CFNumberRef v97;
  CFNumberRef v98;
  CFNumberRef v99;
  CFNumberRef v100;
  CFNumberRef v101;
  CFNumberRef v102;
  CFNumberRef v103;
  CFNumberRef v104;
  CFNumberRef v105;
  CFNumberRef v106;
  CFNumberRef v107;
  CFNumberRef v108;
  CFNumberRef v109;
  CFNumberRef v110;
  CFNumberRef v111;
  CFNumberRef v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  CFNumberRef v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  char v121;
  char v122;
  CFNumberRef v123;
  CFNumberRef v124;
  CFNumberRef v125;
  CFNumberRef v126;
  CFNumberRef v127;
  CFNumberRef v128;
  CFNumberRef v129;
  CFNumberRef v130;
  CFNumberRef v131;
  CFNumberRef v132;
  CFNumberRef v133;
  CFNumberRef v134;
  CFNumberRef v135;
  CFNumberRef v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  CFNumberRef v140;
  __CFDictionary *v141;
  CFNumberRef v142;
  CFNumberRef v143;
  CFArrayRef v144;
  CFArrayRef v145;
  CFNumberRef v146;
  CFNumberRef v147;
  char v148;
  uint64_t v149;
  char v150;
  char v151;
  const void *v152;
  void *v154;
  void *value;
  __CFDictionary *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *key;
  int v174;
  void *v175;
  void *v176;
  uint64_t v177;
  unsigned int v178;
  int v180;
  void *v181;
  void *v182;
  void *v183;
  const void *v184;
  const void *v185;
  const void *v186;
  int v188;
  char v189;
  int v190;
  int v191;
  char v192;
  int v193;
  signed int v194;
  int v195;
  char v197;
  int v198;
  int v199;
  uint8_t buf[8];
  __int16 v201;
  int v202;
  __int16 v203;
  int v204;
  __int16 v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *values[4];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = 0;
  values[1] = 0;
  v209 = 0;
  v210 = 0;
  if (qword_1EDBB4CB8 != -1)
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
  v12 = a4 + 7;
  if (a4 < -7)
    v12 = a4 + 14;
  v195 = v12 >> 3;
  v198 = a2;
  v199 = (v12 >> 3) * a1;
  v207 = 1;
  v208 = 0;
  if ((dword_1EDBB4CC4 - 7) >= 4)
  {
    if ((dword_1EDBB4CC4 - 11) < 2)
    {
      if (a4 > 8)
        v15 = 1;
      else
        v15 = 4;
      LODWORD(v208) = 1;
      HIDWORD(v208) = v15;
      v180 = v15;
      HIDWORD(v207) = a4 > 8;
      if (a5 <= 1278226487)
      {
        if (a5 > 875836517)
        {
          if (a5 == 875836518)
          {
            a5 = 1563977268;
            v14 = 2;
            goto LABEL_64;
          }
          if (a5 != 875836534)
            goto LABEL_65;
          v14 = 2;
          v19 = 30260;
LABEL_51:
          a5 = v19 | 0x5D380000;
          goto LABEL_64;
        }
        if (a5 != 875704422)
        {
          if (a5 != 875704438)
            goto LABEL_65;
          v18 = 1563977264;
          goto LABEL_62;
        }
      }
      else
      {
        if (a5 > 1751411058)
        {
          if (a5 != 1751411059)
          {
            if (a5 != 2016686640)
            {
              if (a5 == 2019963440)
              {
                v14 = 4;
                a5 = 1534617136;
LABEL_64:
                v188 = 0;
                LODWORD(v210) = 4;
                v13 = 1;
                goto LABEL_93;
              }
LABEL_65:
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
LABEL_66:
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&buf[4] = HIBYTE(a5);
                v201 = 1024;
                v202 = BYTE2(a5);
                v203 = 1024;
                v204 = BYTE1(a5);
                v205 = 1024;
                v206 = a5;
                _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unsupported pixel format: %c%c%c%c\n", buf, 0x1Au);
              }
LABEL_240:
              v148 = 0;
              v141 = 0;
              goto LABEL_241;
            }
            v18 = 1534617136;
LABEL_62:
            a5 = v18 | 0x1000;
            v14 = 4;
            goto LABEL_64;
          }
LABEL_44:
          v14 = 4;
          a5 = 1568171568;
          goto LABEL_64;
        }
        if (a5 != 1278226488)
        {
          if (a5 != 1278226736)
            goto LABEL_65;
          goto LABEL_44;
        }
      }
      v14 = 4;
      v19 = 26160;
      goto LABEL_51;
    }
    v16 = 641234480;
    v207 = 0x300000003;
    v208 = 0x500000005;
    if (a5 <= 796419631)
    {
      if (a5 > 758670895)
      {
        if (a5 <= 762869295)
        {
          if (a5 == 758670896)
            goto LABEL_84;
          if (a5 == 758674992)
            goto LABEL_91;
          v20 = 762865200;
          goto LABEL_70;
        }
        if (a5 != 762869296)
        {
          if (a5 != 792225328)
          {
            v17 = 792229424;
LABEL_82:
            if (a5 != v17)
            {
LABEL_239:
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_240;
              goto LABEL_66;
            }
LABEL_91:
            v14 = 0;
            v210 = 0x400000004;
            v188 = 1;
            v180 = 5;
            v13 = 5;
            goto LABEL_92;
          }
LABEL_84:
          v16 = 641230384;
          goto LABEL_91;
        }
LABEL_88:
        v16 = 645428784;
        goto LABEL_91;
      }
      if (a5 > 642527535)
      {
        if (a5 != 642527536)
        {
          if (a5 != 645424688)
          {
            v21 = 645428784;
            goto LABEL_87;
          }
LABEL_89:
          v16 = 645424688;
          goto LABEL_91;
        }
        goto LABEL_78;
      }
      if (a5 == 641230384)
        goto LABEL_84;
      if (a5 == 641234480)
        goto LABEL_91;
      if (a5 != 642527288)
        goto LABEL_239;
    }
    else
    {
      if (a5 > 1751411058)
      {
        if (a5 > 2084070959)
        {
          if (a5 <= 2088265263)
          {
            if (a5 != 2084070960)
            {
              v17 = 2084075056;
              goto LABEL_82;
            }
            goto LABEL_84;
          }
          if (a5 != 2088265264)
          {
            v21 = 2088269360;
LABEL_87:
            if (a5 != v21)
              goto LABEL_239;
            goto LABEL_88;
          }
          goto LABEL_89;
        }
        if (a5 != 1751411059)
        {
          if (a5 != 2016686640)
          {
            v20 = 2019963440;
LABEL_70:
            if (a5 != v20)
              goto LABEL_239;
            goto LABEL_89;
          }
          goto LABEL_88;
        }
LABEL_78:
        v16 = 642527536;
        goto LABEL_91;
      }
      if (a5 <= 875704437)
      {
        if (a5 == 796419632)
          goto LABEL_89;
        if (a5 != 796423728)
        {
          if (a5 != 875704422)
            goto LABEL_239;
          goto LABEL_84;
        }
        goto LABEL_88;
      }
      if (a5 == 875704438)
        goto LABEL_91;
      if (a5 != 1278226488)
      {
        if (a5 != 1278226736)
          goto LABEL_239;
        goto LABEL_78;
      }
    }
    v16 = 642527288;
    goto LABEL_91;
  }
  if (a4 <= 8)
  {
    v188 = 0;
    v208 = 0x400000004;
    v207 = 0;
    v180 = 4;
    v13 = 4;
    v14 = 4;
    goto LABEL_93;
  }
  if (a5 <= 2016686639)
  {
    if (a5 == 1278226736 || a5 == 1751411059)
    {
      v16 = 1568171568;
      goto LABEL_49;
    }
LABEL_30:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    goto LABEL_240;
  }
  v16 = 1534617136;
  if (a5 == 2016686640)
  {
    v16 = 1534621232;
    goto LABEL_49;
  }
  if (a5 != 2019963440)
    goto LABEL_30;
LABEL_49:
  v188 = 0;
  v207 = 0x100000001;
  v208 = 0x100000001;
  v14 = 4;
  v180 = 1;
  v13 = 1;
LABEL_92:
  a5 = v16;
LABEL_93:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_240;
  v23 = Mutable;
  sub_1B682AFAC(v195, (unsigned int *)&v199, a1, &v198, v13, a3, v188);
  *(_DWORD *)buf = a1;
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v24)
  {
    v25 = v24;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBC1E0], v24);
    CFRelease(v25);
  }
  *(_DWORD *)buf = a2;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v26)
  {
    v27 = v26;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBC008], v26);
    CFRelease(v27);
  }
  v28 = (const void *)*MEMORY[0x1E0CBBF08];
  v194 = v199;
  *(_DWORD *)buf = v199;
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v29)
  {
    v30 = v29;
    CFDictionarySetValue(v23, v28, v29);
    CFRelease(v30);
  }
  *(_DWORD *)buf = v195;
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v31)
  {
    v32 = v31;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBBF00], v31);
    CFRelease(v32);
  }
  *(_DWORD *)buf = 0;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v33)
  {
    v34 = v33;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBBF10], v33);
    CFRelease(v34);
  }
  v154 = (void *)v28;
  *(_DWORD *)buf = a5;
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v35)
  {
    v36 = v35;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBC070], v35);
    CFRelease(v36);
  }
  LODWORD(v37) = v198;
  v38 = (v198 * v194 + 511) & 0xFFFFFE00;
  value = (void *)*MEMORY[0x1E0C9AE50];
  if (v14)
    v39 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v39 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBBEF8], v39);
  *(_DWORD *)buf = v14;
  v40 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v40)
  {
    v41 = v40;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CBBEF0], v40);
    CFRelease(v41);
  }
  v156 = v23;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v178 = 0;
  v192 = 0;
  v171 = (void *)*MEMORY[0x1E0CBC088];
  key = (void *)*MEMORY[0x1E0CBC0E8];
  v172 = (void *)*MEMORY[0x1E0CBC0E0];
  v170 = (void *)*MEMORY[0x1E0CBC180];
  v169 = (void *)*MEMORY[0x1E0CBC148];
  v168 = (void *)*MEMORY[0x1E0CBC0D0];
  v163 = (void *)*MEMORY[0x1E0CBC0B0];
  v162 = (void *)*MEMORY[0x1E0CBC0A8];
  v176 = (void *)*MEMORY[0x1E0CBC098];
  v175 = (void *)*MEMORY[0x1E0CBC090];
  v161 = (void *)*MEMORY[0x1E0CBC110];
  v160 = (void *)*MEMORY[0x1E0CBC108];
  v167 = (void *)*MEMORY[0x1E0CBC170];
  v166 = (void *)*MEMORY[0x1E0CBC150];
  v165 = (void *)*MEMORY[0x1E0CBC0D8];
  v159 = (void *)*MEMORY[0x1E0CBC0A0];
  v157 = (void *)*MEMORY[0x1E0CBC130];
  v158 = (void *)*MEMORY[0x1E0CBC128];
  v186 = (const void *)*MEMORY[0x1E0CBC178];
  v185 = (const void *)*MEMORY[0x1E0CBC140];
  v184 = (const void *)*MEMORY[0x1E0CBC160];
  v183 = (void *)*MEMORY[0x1E0CBC168];
  v182 = (void *)*MEMORY[0x1E0CBBED8];
  v181 = (void *)*MEMORY[0x1E0CBC0F8];
  v45 = 1;
  v177 = a6;
  do
  {
    v197 = v45;
    if ((v42 & 1) != 0)
    {
      a2 >>= 1;
      v198 = a2;
      sub_1B682AFAC(v195, (unsigned int *)&v199, a1, &v198, v180, a3, v188 & 1);
      LODWORD(v37) = v198;
      v194 = v199;
      v38 = v198 * v199;
    }
    v46 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    values[v43] = v46;
    if (!v46)
    {
LABEL_237:
      v148 = 0;
      v141 = v156;
      goto LABEL_241;
    }
    v47 = v46;
    v48 = *((_DWORD *)&v207 + v43);
    if (v48)
    {
      if (v48 == 3)
      {
        if ((v197 & 1) != 0)
          v82 = -32;
        else
          v82 = -16;
        if ((v197 & 1) != 0)
          v83 = 32;
        else
          v83 = 16;
        if ((v197 & 1) != 0)
          v84 = 5;
        else
          v84 = 4;
        v85 = 8;
        if ((v197 & 1) != 0)
          v86 = 10;
        else
          v86 = 8;
        v189 = v86;
        v191 = a2;
        if ((v197 & 1) != 0)
          v85 = 32;
        v193 = *((_DWORD *)&values[-1] + v43);
        v87 = (v37 + v83 - 1 + v193) & v82;
        v198 = v87;
        *(_QWORD *)buf = v85;
        v88 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v88)
        {
          v89 = v88;
          CFDictionarySetValue(v47, v171, v88);
          CFRelease(v89);
        }
        *(_QWORD *)buf = v83;
        v90 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v90)
        {
          v91 = v90;
          CFDictionarySetValue(v47, key, v90);
          CFRelease(v91);
        }
        *(_QWORD *)buf = v83;
        v92 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v92)
        {
          v93 = v92;
          CFDictionarySetValue(v47, v172, v92);
          CFRelease(v93);
        }
        v94 = (v83 - 1 + a1) & v82;
        *(_QWORD *)buf = v94 >> v84;
        v95 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v95)
        {
          v96 = v95;
          CFDictionarySetValue(v47, v170, v95);
          CFRelease(v96);
        }
        *(_QWORD *)buf = v87 >> v84;
        v97 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v97)
        {
          v98 = v97;
          CFDictionarySetValue(v47, v169, v97);
          CFRelease(v98);
        }
        *(_DWORD *)buf = v44;
        v99 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v99)
        {
          v100 = v99;
          CFDictionarySetValue(v47, v168, v99);
          CFRelease(v100);
        }
        *(_QWORD *)buf = (v195 << v189);
        v101 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v101)
        {
          v102 = v101;
          CFDictionarySetValue(v47, v163, v101);
          CFRelease(v102);
        }
        v178 = (v94 << v84) * v195;
        *(_QWORD *)buf = v178;
        v103 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v103)
        {
          v104 = v103;
          CFDictionarySetValue(v47, v162, v103);
          CFRelease(v104);
        }
        *(_QWORD *)buf = (v94 << v84) * v195;
        v105 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v105)
        {
          v106 = v105;
          CFDictionarySetValue(v47, v176, v105);
          CFRelease(v106);
        }
        *(_QWORD *)buf = (v195 << v189);
        v107 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v107)
        {
          v108 = v107;
          CFDictionarySetValue(v47, v175, v107);
          CFRelease(v108);
        }
        *(_QWORD *)buf = v83;
        v109 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v109)
        {
          v110 = v109;
          CFDictionarySetValue(v47, v161, v109);
          CFRelease(v110);
        }
        *(_QWORD *)buf = v83;
        v111 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v111)
        {
          v112 = v111;
          CFDictionarySetValue(v47, v160, v111);
          CFRelease(v112);
        }
        *(_DWORD *)buf = v193;
        v113 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        a6 = v177;
        if (v113)
        {
          v114 = v113;
          CFDictionarySetValue(v47, v167, v113);
          CFRelease(v114);
        }
        *(_DWORD *)buf = *((_DWORD *)&v209 + v43);
        v115 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v115)
        {
          v116 = v115;
          CFDictionarySetValue(v47, v166, v115);
          CFRelease(v116);
        }
        if ((((int)(v194 * v87) + 127) & 0xFFFFFFFFFFFFFF80) <= *(int *)(v177 + 4 * v43))
          v117 = *(int *)(v177 + 4 * v43);
        else
          v117 = ((int)(v194 * v87) + 127) & 0xFFFFFFFFFFFFFF80;
        if ((v197 & 1) != 0)
          v118 = 31;
        else
          v118 = 15;
        v119 = (v118 + a1) >> v84;
        v120 = (v191 + v118) >> v84;
        if ((v197 & 1) != 0)
          v121 = 5;
        else
          v121 = 3;
        v122 = vcvtps_u32_f32(log2f((float)v119));
        v37 = ((((1 << v122 << vcvtps_u32_f32(log2f((float)v120)) << v121) + 127) & 0x1FFFFFF80)
             + v194
             + v117
             - 1)
            / v194;
        v198 = v37;
        *(_DWORD *)buf = v44 + v117;
        v123 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v123)
        {
          v124 = v123;
          CFDictionarySetValue(v47, v165, v123);
          CFRelease(v124);
        }
        if ((int)((v194 * v37 + 127) & 0xFFFFFF80) <= *(_DWORD *)(a7 + 4 * v43) + *(_DWORD *)(v177 + 4 * v43))
          v38 = *(_DWORD *)(a7 + 4 * v43) + *(_DWORD *)(v177 + 4 * v43);
        else
          v38 = (v194 * v37 + 127) & 0xFFFFFF80;
        if (a8)
          *(_DWORD *)(a8 + 4 * v43) = v38 - v117;
        v192 = 1;
        LOBYTE(v188) = v197;
        a2 = v191;
      }
      else if (v48 == 1)
      {
        *(_DWORD *)buf = 16;
        v49 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v49)
        {
          v50 = v49;
          CFDictionarySetValue(v47, key, v49);
          CFRelease(v50);
        }
        *(_DWORD *)buf = 8;
        v51 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v51)
        {
          v52 = v51;
          CFDictionarySetValue(v47, v172, v51);
          CFRelease(v52);
        }
        if ((v37 & 7) != 0)
          goto LABEL_237;
        v190 = a2;
        v53 = *((_DWORD *)&v209 + v43);
        v54 = ((v53 + 15) & 0xFFFFFFF0) + ((a1 + 15) & 0xFFFFFFF0);
        v55 = *((_DWORD *)&values[-1] + v43);
        v174 = v54 >> 4;
        *(_DWORD *)buf = v54 >> 4;
        v56 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v56)
        {
          v57 = v56;
          CFDictionarySetValue(v47, v170, v56);
          CFRelease(v57);
        }
        v58 = (int)(v37 + ((v55 + 7) & 0xFFFFFFF8) + 63) >> 3;
        *(_DWORD *)buf = v58 & 0xFFFFFFF8;
        v59 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v59)
        {
          v60 = v59;
          CFDictionarySetValue(v47, v169, v59);
          CFRelease(v60);
        }
        *(_DWORD *)buf = 4;
        v61 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v61)
        {
          v62 = v61;
          CFDictionarySetValue(v47, v171, v61);
          CFRelease(v62);
        }
        v63 = (2 * v54 + 127) & 0xFFFFFF80;
        *(_DWORD *)buf = v63;
        v64 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v64)
        {
          v65 = v64;
          CFDictionarySetValue(v47, v159, v64);
          CFRelease(v65);
        }
        *(_DWORD *)buf = 1;
        v66 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v66)
        {
          v67 = v66;
          CFDictionarySetValue(v47, v158, v66);
          CFRelease(v67);
        }
        *(_DWORD *)buf = 3;
        v68 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v68)
        {
          v69 = v68;
          CFDictionarySetValue(v47, v157, v68);
          CFRelease(v69);
        }
        *(_DWORD *)buf = v44;
        v70 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v70)
        {
          v71 = v70;
          CFDictionarySetValue(v47, v165, v70);
          CFRelease(v71);
        }
        *(_DWORD *)buf = v55;
        v72 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v72)
        {
          v73 = v72;
          CFDictionarySetValue(v47, v167, v72);
          CFRelease(v73);
        }
        *(_DWORD *)buf = v53;
        v74 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v74)
        {
          v75 = v74;
          CFDictionarySetValue(v47, v166, v74);
          CFRelease(v75);
        }
        v76 = v58 | 7;
        if (v58 < 0)
          v76 = (v58 | 7) + 7;
        v77 = ((v76 >> 3) * v63 + 511) & 0xFFFFFE00;
        if (v77 <= *(_DWORD *)(a7 + 4 * v43))
          v78 = *(_DWORD *)(a7 + 4 * v43);
        else
          v78 = v77;
        *(_DWORD *)buf = v78 + v44;
        v79 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v79)
        {
          v80 = v79;
          CFDictionarySetValue(v47, v168, v79);
          CFRelease(v80);
        }
        v81 = (v195 << 7) * v174 * (v58 & 0xFFFFFFF8);
        a6 = v177;
        if (v81 <= *(_DWORD *)(v177 + 4 * v43))
          v81 = *(_DWORD *)(v177 + 4 * v43);
        v38 = v81 + v78;
        a2 = v190;
      }
    }
    else if (v38 <= *(_DWORD *)(a6 + 4 * v43))
    {
      v38 = *(_DWORD *)(a6 + 4 * v43);
    }
    *(_DWORD *)buf = a1;
    v125 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v125)
    {
      v126 = v125;
      CFDictionarySetValue(v47, v186, v125);
      CFRelease(v126);
    }
    *(_DWORD *)buf = a2;
    v127 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v127)
    {
      v128 = v127;
      CFDictionarySetValue(v47, v185, v127);
      CFRelease(v128);
    }
    *(_DWORD *)buf = v44;
    v129 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v129)
    {
      v130 = v129;
      CFDictionarySetValue(v47, v184, v129);
      CFRelease(v130);
    }
    if ((v192 & 1) == 0)
    {
      *(_DWORD *)buf = v194;
      v131 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v131)
      {
        v132 = v131;
        CFDictionarySetValue(v47, v176, v131);
        CFRelease(v132);
      }
      *(_DWORD *)buf = v195;
      v133 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v133)
      {
        v134 = v133;
        CFDictionarySetValue(v47, v175, v133);
        CFRelease(v134);
      }
    }
    *(_DWORD *)buf = v38;
    v135 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v135)
    {
      v136 = v135;
      CFDictionarySetValue(v47, v183, v135);
      CFRelease(v136);
    }
    *(_DWORD *)buf = *((_DWORD *)&v208 + v43);
    v137 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v137)
    {
      v138 = v137;
      CFDictionarySetValue(v47, v182, v137);
      CFRelease(v138);
    }
    *(_DWORD *)buf = v48;
    v139 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v139)
    {
      v140 = v139;
      CFDictionarySetValue(v47, v181, v139);
      CFRelease(v140);
    }
    v45 = 0;
    v38 += v44;
    v42 = 1;
    v43 = 1;
    v44 = v38;
  }
  while ((v197 & 1) != 0);
  v141 = v156;
  if ((v192 & 1) != 0)
  {
    *(_QWORD *)buf = v178;
    v142 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
    if (v142)
    {
      v143 = v142;
      CFDictionarySetValue(v156, v154, v142);
      CFRelease(v143);
    }
  }
  v144 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
  if (v144)
  {
    v145 = v144;
    CFDictionarySetValue(v156, (const void *)*MEMORY[0x1E0CBC158], v144);
    *(_DWORD *)buf = v38;
    v146 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v146)
    {
      v147 = v146;
      CFDictionarySetValue(v156, (const void *)*MEMORY[0x1E0CBBEE0], v146);
      CFRelease(v147);
    }
    CFDictionarySetValue(v156, (const void *)*MEMORY[0x1E0CBC018], value);
    CFRelease(v145);
    v148 = 1;
  }
  else
  {
    v148 = 0;
  }
LABEL_241:
  v149 = 0;
  v150 = 1;
  do
  {
    v151 = v150;
    v152 = values[v149];
    if (v152)
      CFRelease(v152);
    v150 = 0;
    v149 = 1;
  }
  while ((v151 & 1) != 0);
  if ((v148 & 1) == 0 && v141)
  {
    CFRelease(v141);
    return 0;
  }
  return v141;
}

uint64_t sub_1B682AE50(__IOSurface *a1, int a2, char a3)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int CompressedTileWidthOfPlane;
  int CompressedTileHeightOfPlane;
  int WidthInCompressedTilesOfPlane;
  int HeightInCompressedTilesOfPlane;
  unsigned int v14;
  int v15;
  int i;
  __IOSurface *buffer;
  _QWORD v19[21];

  IOSurfaceLock(a1, 0, 0);
  buffer = a1;
  v19[5] = a1;
  sub_1B6825B20((uint64_t)v19);
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    if (LODWORD(v19[7 * v6 + 10]) == 1)
    {
      v9 = v19[7 * v6 + 7];
      CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
      CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
      WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
      if (HeightInCompressedTilesOfPlane >= 1)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          if (WidthInCompressedTilesOfPlane >= 1)
          {
            for (i = 0; i != WidthInCompressedTilesOfPlane; ++i)
            {
              *(_DWORD *)(v9 + (v14 >> a3) * a2 + 4 * ((i << a3) + (v14 & ~(-1 << a3)))) = v15 & 0xFFFFFFF;
              v15 += CompressedTileHeightOfPlane * CompressedTileWidthOfPlane;
            }
          }
          ++v14;
        }
        while (v14 != HeightInCompressedTilesOfPlane);
      }
    }
    v7 = 0;
    v6 = 1;
  }
  while ((v8 & 1) != 0);
  return IOSurfaceUnlock(buffer, 0, 0);
}

void sub_1B682AFAC(int a1, unsigned int *a2, int a3, int *a4, int a5, int a6, int a7)
{
  int v10;
  int v11;
  NSObject *v13;
  const char *v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  int v20;
  long double v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  switch(a5)
  {
    case 1:
      *a2 = (*a2 + 15) & 0xFFFFFFF0;
      if (a6 == 1)
      {
        v10 = -16;
        v11 = 15;
        goto LABEL_22;
      }
      if (!a6)
      {
        v10 = -32;
        v11 = 31;
LABEL_22:
        v25 = *a4 + v11;
        goto LABEL_30;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      v26 = 67109120;
      v27 = a6;
      v13 = MEMORY[0x1E0C81028];
      v14 = "Unsupported codec type: %d\n";
      goto LABEL_35;
    case 2:
      v15 = log2((double)(int)*a2);
      *a2 = (int)exp2(ceil(v15));
      v16 = log2((double)*a4);
      v17 = (int)exp2(ceil(v16));
      goto LABEL_31;
    case 3:
      v18 = (double)a1;
      v19 = log2(16384.0 / (double)a1) * 0.5;
      v20 = (int)(exp2(floor(v19)) * v18);
      v21 = exp2(ceil(v19));
      *a2 = (int)(*a2 + v20 - 1) / v20 * v20;
      v17 = (*a4 + (int)v21 - 1) / (int)v21 * (int)v21;
      goto LABEL_31;
    case 4:
      if (!a6)
      {
        *a2 = (*a2 + 31) & 0xFFFFFFE0;
        v17 = (*a4 + 31) & 0xFFFFFFE0;
        goto LABEL_31;
      }
      if (a6 == 1)
      {
        *a2 = (*a2 + 15) & 0xFFFFFFF0;
        v17 = (*a4 + 15) & 0xFFFFFFF0;
        goto LABEL_31;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      v26 = 67109120;
      v27 = a6;
      v13 = MEMORY[0x1E0C81028];
      v14 = "Unsupported codec type: %d\n";
      goto LABEL_35;
    case 5:
      v22 = -16;
      if (a7)
        v10 = -32;
      else
        v10 = -16;
      if (a7)
        v23 = 32;
      else
        v23 = 16;
      if (a6 == 1)
      {
        v24 = 15;
        goto LABEL_29;
      }
      if (!a6)
      {
        v22 = -32;
        v24 = 31;
LABEL_29:
        *a2 = (*a2 + v24) & v22;
        *a4 = (*a4 + v24) & v22;
        *a2 = ((a3 + v23 - 1) & v10) * a1;
        v25 = v23 + *a4 - 1;
LABEL_30:
        v17 = v25 & v10;
LABEL_31:
        *a4 = v17;
        return;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      v26 = 67109120;
      v27 = a6;
      v13 = MEMORY[0x1E0C81028];
      v14 = "Unsupported codec type: %d\n";
LABEL_35:
      _os_log_error_impl(&dword_1B676B000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v26, 8u);
      return;
    default:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      v26 = 67109120;
      v27 = a5;
      v13 = MEMORY[0x1E0C81028];
      v14 = "Unknown address format %d\n";
      goto LABEL_35;
  }
}

uint64_t sub_1B682B2F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;

  v2 = 0;
  v3 = *(__int16 *)(a2 + 86);
  v4 = *(__int16 *)(a2 + 88);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 76) = v4;
  *(_QWORD *)result = off_1E6A14F80;
  *(_QWORD *)(result + 8) = 0;
  v5 = (*(__int16 *)(a2 + 86) + 15) >> 4;
  v6 = (*(__int16 *)(a2 + 88) + 15) >> 4;
  *(_DWORD *)(result + 104) = v6;
  *(_DWORD *)(result + 108) = v6 * v5;
  v7 = 0x1000100uLL;
  *(_DWORD *)(result + 152) = 16777472;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 850045863;
  BYTE1(v7) = 0;
  BYTE3(v7) = 0;
  *(_OWORD *)(result + 2360) = v7;
  *(_OWORD *)(result + 2376) = v7;
  *(_OWORD *)(result + 2328) = v7;
  *(_OWORD *)(result + 2344) = v7;
  *(_OWORD *)(result + 2296) = v7;
  *(_OWORD *)(result + 2312) = v7;
  *(_OWORD *)(result + 2264) = v7;
  *(_OWORD *)(result + 2280) = v7;
  *(_DWORD *)(result + 2520) = 4;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 88) = a2;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 2408) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(_OWORD *)(result + 224) = v7;
  *(_OWORD *)(result + 240) = v7;
  *(_OWORD *)(result + 192) = v7;
  *(_OWORD *)(result + 208) = v7;
  *(_OWORD *)(result + 176) = v7;
  *(_OWORD *)(result + 848) = v7;
  *(_OWORD *)(result + 864) = v7;
  *(_QWORD *)(result + 2392) = 0;
  *(_QWORD *)(result + 2536) = 0;
  *(_BYTE *)(result + 2545) = 0;
  *(_DWORD *)(result + 2548) = 0;
  *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 516);
  *(_DWORD *)(result + 100) = v5;
  v8 = (_OWORD *)(result + 304);
  *(_QWORD *)(result + 2552) = 0;
  do
  {
    v9 = result + 576 + v2;
    *v8 = v7;
    v8[17] = v7;
    *(_QWORD *)(v9 + 304) = 0;
    *(_QWORD *)(v9 + 312) = 0;
    v2 += 80;
    ++v8;
  }
  while (v2 != 1360);
  return result;
}

uint64_t sub_1B682B3E0(uint64_t a1)
{
  const void *v2;
  OpaqueVTCompressionSession *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  CFTypeRef *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  int v16;
  const void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  *(_QWORD *)a1 = off_1E6A14F80;
  v2 = *(const void **)(a1 + 248);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v3 = *(OpaqueVTCompressionSession **)(a1 + 160);
  if (v3)
  {
    VTCompressionSessionInvalidate(v3);
    CFRelease(*(CFTypeRef *)(a1 + 160));
    *(_QWORD *)(a1 + 160) = 0;
  }
  if (*(int *)(a1 + 264) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = v6;
        v8 = (CFTypeRef *)(a1 + 304 + 16 * v4 + 8 * v5);
        if (*v8)
        {
          CFRelease(*v8);
          *v8 = 0;
        }
        v9 = a1 + 16 * v4 + 8 * v5;
        v10 = *(const void **)(v9 + 576);
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(v9 + 576) = 0;
        }
        v6 = 0;
        v5 = 1;
      }
      while ((v7 & 1) != 0);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 264));
  }
  v11 = *(const void **)(a1 + 2536);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 48);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 56);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 64);
  if (v14)
    CFRelease(v14);
  v15 = *(NSObject **)(a1 + 232);
  if (v15)
  {
    if (*(int *)(a1 + 96) >= 1)
    {
      v16 = 0;
      do
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 232));
        ++v16;
      }
      while (v16 < *(_DWORD *)(a1 + 96));
      v15 = *(NSObject **)(a1 + 232);
    }
    dispatch_release(v15);
  }
  v17 = *(const void **)(a1 + 2552);
  if (v17)
    CFRelease(v17);
  v18 = *(void **)(a1 + 2368);
  if (v18)
  {
    *(_QWORD *)(a1 + 2376) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 2344);
  if (v19)
  {
    *(_QWORD *)(a1 + 2352) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 2320);
  if (v20)
  {
    *(_QWORD *)(a1 + 2328) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 2296);
  if (v21)
  {
    *(_QWORD *)(a1 + 2304) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 2280);
  if (v22)
  {
    free(v22);
    *(_QWORD *)(a1 + 2280) = 0;
    *(_QWORD *)(a1 + 2288) = 0;
  }
  v23 = *(void **)(a1 + 2264);
  if (v23)
  {
    free(v23);
    *(_QWORD *)(a1 + 2264) = 0;
    *(_QWORD *)(a1 + 2272) = 0;
  }
  v24 = *(void **)(a1 + 864);
  if (v24)
  {
    free(v24);
    *(_QWORD *)(a1 + 864) = 0;
    *(_QWORD *)(a1 + 872) = 0;
  }
  v25 = *(void **)(a1 + 848);
  if (v25)
  {
    free(v25);
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 856) = 0;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 168));
  return a1;
}

int32x2_t sub_1B682B5C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int v33;
  int32x2_t result;
  int32x2_t *v35;
  int32x2_t *v36;
  int32x2_t v37;

  v3 = *(char **)(a1 + 88);
  if (v3[583] && *(_BYTE *)(a2 + 777) && !v3[582])
  {
    v6 = *(_DWORD *)(a2 + 768);
    v7 = (*(int *)(a2 + 788) >> v6);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = (*(int *)(a2 + 784) >> v6);
      v12 = *(_QWORD *)(a2 + 2160);
      v13 = *(_QWORD *)(a2 + 2144);
      v14 = v6 - 4;
      v15 = (1 << v14);
      v16 = *(_QWORD *)(a2 + 2056);
      v17 = 2 * *a3;
      v18 = 4 * *a3;
      do
      {
        if ((int)v11 >= 1)
        {
          v19 = 0;
          v20 = (unsigned __int16 *)(a3[42] + v9);
          v21 = v8;
          do
          {
            if (v14 == 31)
            {
              v22 = 0;
              v23 = 0;
            }
            else
            {
              v24 = 0;
              v22 = 0;
              v25 = v20;
              do
              {
                v26 = v25;
                v27 = (1 << v14);
                do
                {
                  v28 = *v26++;
                  v22 += v28;
                  --v27;
                }
                while (v27);
                ++v24;
                v25 = (unsigned __int16 *)((char *)v25 + v17);
              }
              while (v24 != v15);
              v29 = 0;
              v23 = 0;
              v30 = (int *)(a3[45] + v21);
              do
              {
                v31 = v30;
                v32 = (1 << v14);
                do
                {
                  v33 = *v31++;
                  v23 += v33;
                  --v32;
                }
                while (v32);
                ++v29;
                v30 = (int *)((char *)v30 + v18);
              }
              while (v29 != v15);
            }
            *(_DWORD *)(v13 + 4 * v19) = v22;
            *(_QWORD *)(v12 + 8 * v19++) = v23;
            ++v20;
            v21 += 4;
          }
          while (v19 != v11);
        }
        v13 += 4 * v16;
        v12 += 8 * v16;
        ++v10;
        v9 += v17;
        v8 += v18;
      }
      while (v10 != v7);
    }
    if (v3[55] > 1)
    {
      sub_1B68344B8((int *)(a2 + 768));
      v3 = *(char **)(a1 + 88);
    }
    if (v3[600])
    {
      v35 = *(int32x2_t **)(a2 + 1048);
      v36 = *(int32x2_t **)(*(_QWORD *)&v35[1] + 608);
      v35[287].i32[0] = v36[153].i32[0];
      v37 = v36[152];
      v35[286] = v37;
      result = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmul_s32(v35[285], (int32x2_t)0xA0000000DLL), v37, (int32x2_t)0x600000003), (int32x2_t)0x800000008), 4uLL);
      v35[285] = result;
    }
  }
  return result;
}

const void **sub_1B682B7A4(uint64_t a1, IOSurfaceID csid)
{
  const __CFNumber *Value;
  const __CFNumber *v4;
  int32x2_t v5;
  int v6;
  int32x2_t v8;
  __CFDictionary *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  const __CFDictionary *v13;
  OSType valuePtr;
  int v15;
  __IOSurface *v16;
  _DWORD v17[2];
  _DWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = IOSurfaceLookup(csid);
  v15 = 8;
  valuePtr = IOSurfaceGetPixelFormat(v16);
  v13 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, valuePtr);
  Value = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA9190]);
  if (Value)
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  v4 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA90F0]);
  if (v4)
    CFNumberGetValue(v4, kCFNumberSInt32Type, &v15);
  *(_DWORD *)(a1 + 44) = (valuePtr & 0xFFFFFFEF) != 875836518;
  if (*(_DWORD *)a1 == 1752589105)
  {
    v6 = 0;
    v5 = vmax_s32((int32x2_t)(*(_QWORD *)&vadd_s32(*(int32x2_t *)(a1 + 4), (int32x2_t)0x1F0000001FLL) & 0xFFFFFFE0FFFFFFE0), (int32x2_t)0x40000000A0);
  }
  else if (*(_DWORD *)a1 == 1635148593)
  {
    v5 = vmax_s32((int32x2_t)(*(_QWORD *)&vadd_s32(*(int32x2_t *)(a1 + 4), (int32x2_t)0xF0000000FLL) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0x60000000C0);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v12 = 0;
  v11 = 0;
  v10 = 0;
  if (qword_1EDBB4CB8 != -1)
  {
    v8 = v5;
    dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
    v5 = v8;
  }
  if (!sub_1B6828970(v5.i32[0], v5.i32[1], dword_1EDBB4CC4, v6, valuePtr, (signed int *)(a1 + 20), (signed int *)(a1 + 28), (_DWORD *)&v12 + 1, &v12, &v11, &v10, (_DWORD *)(a1 + 12), (unsigned int *)(a1 + 16)))
  {
    v18[0] = HIDWORD(v12);
    v18[1] = v12;
    v17[0] = v11;
    v17[1] = v10;
    v9 = sub_1B68297D4(*(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), v6, v15, valuePtr, (uint64_t)v18, (uint64_t)v17, a1 + 36);
    sub_1B6770568((const void **)&v9);
  }
  sub_1B6770568((const void **)&v13);
  return sub_1B682BB38((const void **)&v16);
}

void sub_1B682B9CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B6770568((const void **)(v1 - 64));
  sub_1B682BB38((const void **)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1B682BA00()
{
  JUMPOUT(0x1BCC9814CLL);
}

_QWORD *sub_1B682BA14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6A14620;
  result[1] = v3;
  return result;
}

uint64_t sub_1B682BA48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6A14620;
  a2[1] = v2;
  return result;
}

uint64_t sub_1B682BA64(uint64_t a1, CVPixelBufferRef **a2)
{
  CVPixelBufferRef *v2;
  uint64_t v3;
  __CVPixelBufferPool *v4;
  CFTypeRef *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  CFDictionaryRef pixelBufferAttributes;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = (CFTypeRef *)(v3 + 48);
  v4 = *(__CVPixelBufferPool **)(v3 + 48);
  if (v4)
    return CVPixelBufferPoolCreatePixelBuffer(0, v4, v2);
  pixelBufferAttributes = 0;
  sub_1B67C5780(*(_DWORD *)(v3 + 4), *(_DWORD *)(v3 + 8), 71, 71, 71, 71, 875704438, &pixelBufferAttributes);
  v7 = pixelBufferAttributes;
  if (*v5)
  {
    CFRelease(*v5);
    *v5 = 0;
  }
  v6 = CVPixelBufferPoolCreate(0, 0, v7, (CVPixelBufferPoolRef *)v5);
  sub_1B67705C8((const void **)&pixelBufferAttributes);
  if (!(_DWORD)v6)
  {
    v4 = (__CVPixelBufferPool *)*v5;
    return CVPixelBufferPoolCreatePixelBuffer(0, v4, v2);
  }
  return v6;
}

void sub_1B682BB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B67705C8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_1B682BB38(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1B682BB68(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v1 = *(unsigned int *)(result + 48);
  v2 = *(_DWORD *)(result + 56);
  if ((int)v1 < v2)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    v23 = 0;
    v6 = 0;
    v7 = *(_DWORD *)(result + 60);
    v22 = *(_QWORD *)(result + 1312) + 2 * v7 * (int)v1;
    v21 = *(_QWORD *)(result + 1328) + 2 * v7 * (int)v1;
    v8 = *(_DWORD *)(result + 52);
    do
    {
      v9 = *(int *)(v3 + 44);
      if ((int)v9 < v8)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *(unsigned __int16 *)(v22 + 2 * v9);
          if (*(_BYTE *)(v3 + 13))
          {
            v12 = v5;
            v13 = v4;
            v14 = *(unsigned __int16 *)(v21 + 2 * v9);
            result = sub_1B682BF38(v3, v10, 8 * v1, 8);
            v15 = v23;
            v16 = v23 + v14;
            v17 = v6 + v14;
            v4 = v13;
            if ((result & 1) != 0)
              v15 = v16;
            else
              v6 = v17;
            v23 = v15;
            v5 = (result & 1) != 0 ? v12 : v12 + 1;
            if ((result & 1) != 0)
              ++v4;
          }
          if (*(_BYTE *)(v3 + 10))
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v3 + 8 * *(unsigned int *)(v3 + 204) + 232))(v9, v1, *(unsigned int *)(v3 + 60), *(unsigned int *)(v3 + 64), (v11 + 32) >> 6, *(_QWORD *)(v3 + 1312), *(_QWORD *)(v3 + 1360));
            v8 = *(_DWORD *)(v3 + 52);
          }
          ++v9;
          v10 += 8;
        }
        while (v9 < v8);
        v2 = *(_DWORD *)(v3 + 56);
        v7 = *(_DWORD *)(v3 + 60);
      }
      v21 += 2 * v7;
      v22 += 2 * v7;
      v1 = (v1 + 1);
    }
    while ((int)v1 < v2);
    if (*(_BYTE *)(v3 + 13))
    {
      if (v5 >= 1)
      {
        v18 = (int)(v6 + (v5 >> 1)) / v5;
        if (v18 >= 2)
        {
          v19 = __clz(v18);
          v20 = ((byte_1B69327A4[(unint64_t)(v18 << (v19 + 1)) >> 24] << 12) | 0x200000u) >> ((v19 + 1) >> 1);
          if ((v19 & 1) == 0)
            v20 = (11585 * v20) >> 14;
          v18 = (v20 + 16) >> 5;
        }
        *(_DWORD *)(v3 + 1748) = v18;
        *(_DWORD *)(v3 + 1752) = v6;
      }
      if (v4)
        *(_DWORD *)(v3 + 1740) = v23;
    }
  }
  return result;
}

uint64_t sub_1B682BD50(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v1 = *(unsigned int *)(result + 48);
  v2 = *(_DWORD *)(result + 56);
  if ((int)v1 < v2)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    v23 = 0;
    v6 = 0;
    v7 = *(_DWORD *)(result + 60);
    v22 = *(_QWORD *)(result + 1312) + 4 * v7 * (int)v1;
    v21 = *(_QWORD *)(result + 1328) + 4 * v7 * (int)v1;
    v8 = *(_DWORD *)(result + 52);
    do
    {
      v9 = *(int *)(v3 + 44);
      if ((int)v9 < v8)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *(_DWORD *)(v22 + 4 * v9);
          if (*(_BYTE *)(v3 + 13))
          {
            v12 = v5;
            v13 = v4;
            v14 = *(_DWORD *)(v21 + 4 * v9);
            result = sub_1B682BF38(v3, v10, 8 * v1, 8);
            v15 = v23;
            v16 = v14 + v23;
            v17 = v14 + v6;
            v4 = v13;
            if ((result & 1) != 0)
              v15 = v16;
            else
              v6 = v17;
            v23 = v15;
            v5 = (result & 1) != 0 ? v12 : v12 + 1;
            if ((result & 1) != 0)
              ++v4;
          }
          if (*(_BYTE *)(v3 + 10))
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v3 + 8 * *(unsigned int *)(v3 + 204) + 232))(v9, v1, *(unsigned int *)(v3 + 60), *(unsigned int *)(v3 + 64), (v11 + 32) >> 6, *(_QWORD *)(v3 + 1312), *(_QWORD *)(v3 + 1360));
            v8 = *(_DWORD *)(v3 + 52);
          }
          ++v9;
          v10 += 8;
        }
        while (v9 < v8);
        v2 = *(_DWORD *)(v3 + 56);
        v7 = *(_DWORD *)(v3 + 60);
      }
      v21 += 4 * v7;
      v22 += 4 * v7;
      v1 = (v1 + 1);
    }
    while ((int)v1 < v2);
    if (*(_BYTE *)(v3 + 13))
    {
      if (v5 >= 1)
      {
        v18 = (int)(v6 + (v5 >> 1)) / v5;
        if (v18 >= 2)
        {
          v19 = __clz(v18);
          v20 = ((byte_1B69327A4[(unint64_t)(v18 << (v19 + 1)) >> 24] << 12) | 0x200000u) >> ((v19 + 1) >> 1);
          if ((v19 & 1) == 0)
            v20 = (11585 * v20) >> 14;
          v18 = (v20 + 16) >> 5;
        }
        *(_DWORD *)(v3 + 1748) = v18;
        *(_DWORD *)(v3 + 1752) = v6;
      }
      if (v4)
        *(_DWORD *)(v3 + 1740) = v23;
    }
  }
  return result;
}

BOOL sub_1B682BF38(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;

  v4 = *(unsigned int *)(a1 + 1756);
  if ((int)v4 < 1)
  {
    return 0;
  }
  else
  {
    v5 = 0;
    v6 = (_DWORD *)(a1 + 1852);
    v7 = 1;
    v8 = a2 + (a4 >> 1);
    v9 = a3 + (a4 >> 1);
    do
    {
      v10 = *(v6 - 3);
      if (v8 > v10)
      {
        v11 = *(v6 - 2);
        v12 = v8 >= *(v6 - 1) + v10 || v9 <= v11;
        if (!v12 && v9 < v11 + *v6)
          break;
      }
      v7 = ++v5 < v4;
      v6 += 4;
    }
    while (v4 != v5);
  }
  return v7;
}

uint64_t sub_1B682BFAC(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  void *v4;
  void *v5;

  for (i = 200; i != 168; i -= 16)
  {
    v3 = (_QWORD *)(a1 + i);
    v4 = *(void **)(a1 + i);
    if (v4)
    {
      free(v4);
      *v3 = 0;
      v3[1] = 0;
    }
  }
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  return a1;
}

void sub_1B682C00C(char **a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  char *v14;
  uint64_t m;

  v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      v3 = 0;
      v4 = 0;
      v5 = 1288;
      v6 = 1032;
      v7 = 776;
      do
      {
        v8 = 0;
        v9 = *a1;
        v10 = (uint64_t)&(*a1)[v5];
        do
        {
          sub_1B6772C88(v10 + v8);
          v8 -= 16;
        }
        while (v8 != -256);
        for (i = 0; i != -256; i -= 16)
          sub_1B6772C88((uint64_t)&v9[v6 + i]);
        for (j = 0; j != -256; j -= 16)
          sub_1B6772C88((uint64_t)&v9[v7 + j]);
        for (k = 520; k != 264; k -= 16)
          sub_1B6772C88((uint64_t)&v9[v3 + k]);
        v14 = &v9[v3];
        for (m = 264; m != 8; m -= 16)
          sub_1B6772C88((uint64_t)&v14[m]);
        ++v4;
        v5 += 1304;
        v6 += 1304;
        v7 += 1304;
        v3 += 1304;
      }
      while (v4 < (unint64_t)a1[1]);
      v2 = *a1;
    }
    free(v2);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t sub_1B682C128(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v6;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  v6 = *(_DWORD *)(a5 + 1304);
  if (v6)
  {
    v10 = *(_QWORD **)(a5 + 296);
    v11 = v10[5];
    v12 = *(unsigned __int8 *)(v11 + 2009) - a3;
    v13 = v10[73];
    v14 = *(char *)(v13 + 3310);
    v15 = sub_1B682F744(a5, a1, a2, *(_BYTE *)(v11 + 2009) - a3, *(_DWORD *)(a5 + 16), *(_DWORD *)(a5 + 20), *(char *)(v13 + 3309));
    if (*(_BYTE *)(a5 + 13))
      a4 = sub_1B682F68C(a5, a1, a2, v12) + a4;
    v16 = sub_1B682FB28(a4, -*(unsigned __int8 *)(v11 + 2001), v15, v6, v14);
    LODWORD(a4) = v16;
    v17 = v10[339];
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 284) + 3;
      if (v18 >= v16)
        LODWORD(a4) = v16;
      else
        LODWORD(a4) = v18;
    }
  }
  if ((int)a4 >= 51)
    return 51;
  else
    return a4;
}

uint64_t sub_1B682C218(int a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  v5 = *(_DWORD *)(a5 + 4);
  v6 = v5 - 3;
  if ((v5 - 3) > 3)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(char **)(a5 + 8 * v6 + 1488);
    if (v7)
      v7 += (((*(_DWORD *)(a5 + 16) + ~(-1 << v5)) & (-1 << v5)) >> v5) * (a2 >> v5) + (uint64_t)(a1 >> v5);
  }
  v8 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a5 + 296) + 40) + 2009) - a3);
  v9 = *(_DWORD *)(a5 + 20) - a2;
  if (v8 < v9)
    v9 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a5 + 296) + 40) + 2009) - a3);
  v10 = (v9 >> v5);
  if ((int)v10 < 1)
    return 51;
  v11 = 0;
  if (v8 >= *(_DWORD *)(a5 + 16) - a1)
    v8 = *(_DWORD *)(a5 + 16) - a1;
  v12 = (v8 >> v5);
  v13 = *(int *)(a5 + 4 * (int)v6 + 1520);
  result = 51;
  do
  {
    v15 = v7;
    v16 = v12;
    if ((int)v12 >= 1)
    {
      do
      {
        v18 = *v15++;
        v17 = v18;
        if ((int)result >= v18)
          result = v17;
        else
          result = result;
        --v16;
      }
      while (v16);
    }
    ++v11;
    v7 += v13;
  }
  while (v11 != v10);
  return result;
}

uint64_t sub_1B682C304(uint64_t result, int a2, int a3, _DWORD *a4, int a5, int a6)
{
  int v6;
  int v7;
  float v8;
  float v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  signed int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  float v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  int v31;
  float v32;
  int v33;

  if (a3 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = (float)(int)a4[2];
    v9 = (float)(int)a4[3];
    v10 = *a4 - (int)(float)((float)(v8 * 0.0) * 0.5);
    v11 = v10 & ~(v10 >> 31);
    v12 = a4[1] - (int)(float)((float)(v9 * 0.0) * 0.5);
    v13 = v12 & ~(v12 >> 31);
    v14 = v11 + (int)v8;
    v15 = v13 + (int)v9;
    do
    {
      if (a2 >= 1)
      {
        v16 = v6 | 4;
        if ((int)((v6 | 4) - v13) >= 0)
          v17 = (v6 | 4) - v13;
        else
          v17 = v13 - (v6 | 4);
        v18 = (v6 | 4) - v13 - (int)v9;
        if (v18 < 0)
          v18 = (int)v9 - ((v6 | 4) - v13);
        if (v18 < v17)
          v17 = v18;
        if (v16 <= v15)
          v19 = (v6 | 4u) > v13;
        else
          v19 = ((v6 | 4u) > v13) + 1;
        v20 = 3 * v19;
        v21 = (float)v17;
        v22 = v17 * v17;
        v23 = v7;
        v24 = 4;
        do
        {
          v25 = v23;
          if (v24 <= v11 || v24 >= v14 || v16 <= v13 || (v26 = (float)a5, v16 >= v15))
          {
            v27 = v24 - v11;
            if ((int)(v24 - v11) < 0)
              v27 = v11 - v24;
            v28 = v24 - v14;
            if (v24 - v14 < 0)
              v28 = v14 - v24;
            if (v28 < v27)
              v27 = v28;
            if (v24 <= v11)
              v29 = v20;
            else
              v29 = v20 + 1;
            if (v24 > v14)
              ++v29;
            v30 = 0.0;
            if (v29 <= 8)
            {
              v31 = 1 << v29;
              if ((v31 & 0x145) != 0)
              {
                v30 = sqrtf((float)(v22 + v27 * v27));
              }
              else if ((v31 & 0x28) != 0)
              {
                v30 = (float)v27;
              }
              else if ((v31 & 0x82) != 0)
              {
                v30 = v21;
              }
            }
            v32 = fmaxf(16.0 - v30, 0.0) * 0.0625;
            v26 = (float)a5;
            if (v32 < 1.0)
              v26 = (float)((float)(1.0 - v32) * (float)a6) + (float)((float)a5 * v32);
          }
          v23 = v25 + 1;
          *(_BYTE *)(result + v25) = (int)v26;
          v33 = v24 + 4;
          v24 += 8;
        }
        while (v33 < a2);
        v7 = v23;
      }
      v6 += 8;
    }
    while (v6 < a3);
  }
  return result;
}

uint64_t sub_1B682C4D8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  int v4;
  uint64_t v5;
  signed int *v6;
  int v7;
  signed int *v8;
  signed int *v9;
  signed int *v10;
  int v11;
  uint64_t v12;
  signed int v13;
  signed int v14;
  char *v15;
  int v16;
  signed int v17;
  int v18;
  int v19;
  signed int v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  int v29;

  v1 = result;
  v2 = *(_QWORD *)(result + 296);
  v3 = *(float *)(v2 + 2720);
  v4 = (int)(v3 + 0.5);
  v5 = *(_QWORD *)(v2 + 592);
  if (*(_BYTE *)(v5 + 136))
  {
    v7 = *(_DWORD *)(v5 + 248);
    v6 = (signed int *)(v5 + 248);
    if (v7 <= 0)
      v8 = v6 - 2;
    else
      v8 = v6;
    v9 = v6 - 1;
    v11 = v6[1];
    v10 = v6 + 1;
    if (v11 <= 0)
      v10 = v9;
  }
  else
  {
    v8 = (signed int *)(v5 + 276);
    v10 = (signed int *)(v5 + 280);
  }
  v12 = 0;
  v13 = *v8;
  v14 = *v10;
  v28 = *(_DWORD *)(result + 84);
  do
  {
    v25 = v12;
    v15 = *(char **)(v1 + 8 * v12 + 1488);
    if (!v15)
      goto LABEL_48;
    v16 = *(_DWORD *)(v1 + 20);
    if (v16 < 1)
      goto LABEL_48;
    v17 = 0;
    v18 = 8 << v12;
    v26 = *(int *)(v1 + 4 * v12 + 1520);
    v19 = *(_DWORD *)(v1 + 16);
    v29 = v12 + 3;
    do
    {
      if (v19 < 1)
        goto LABEL_47;
      v20 = 0;
      v27 = v15;
      do
      {
        if (v20 >= v13 || v17 >= v14)
        {
          *v15 = 51;
          if (*(_DWORD *)(v1 + 24) == 10)
            v22 = 63;
          else
            v22 = 51;
          goto LABEL_44;
        }
        v21 = *(_DWORD *)(*(_QWORD *)(v1 + 296) + 444);
        if (v21
          && (!*(_BYTE *)(v1 + 13) ? (result = 0) : (result = sub_1B682F68C(v1, v20, v17, v29)),
              *(_DWORD *)(v1 + 88) != v4))
        {
          if (v21 == 6 && v3 < (float)v4)
          {
            if (v4 + (((v17 + v20) >> v29) & 1))
              LOBYTE(v23) = 0;
            else
              LOBYTE(v23) = -1;
          }
          else
          {
            LOBYTE(v23) = *v15 + result + v4;
          }
          if (v28 >= v23)
            v23 = v23;
          else
            v23 = v28;
          if (v23 >= 0x33)
            v23 = 51;
          *v15 = v23;
          if (v23 <= *(unsigned __int8 *)(v1 + 88))
            LOBYTE(v23) = *(_BYTE *)(v1 + 88);
          *v15 = v23;
        }
        else
        {
          *v15 = v4;
          LOBYTE(v23) = (int)(v3 + 0.5);
        }
        if (*(_DWORD *)(v1 + 24) == 10)
        {
          v22 = v23 + 12;
LABEL_44:
          *v15 = v22;
        }
        v20 += v18;
        v19 = *(_DWORD *)(v1 + 16);
        ++v15;
      }
      while (v20 < v19);
      v16 = *(_DWORD *)(v1 + 20);
      v15 = v27;
LABEL_47:
      v15 += v26;
      v17 += v18;
    }
    while (v17 < v16);
LABEL_48:
    v12 = v25 + 1;
  }
  while (v25 != 3);
  return result;
}

uint64_t sub_1B682C710(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t i;
  uint64_t v11;
  int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  int v37;
  unsigned int v38;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        v11 = 0;
        v12 = (int *)(a7 + 4 * (i >> 3) * a8);
        v13 = (unsigned int *)(a5 + 4 * (i >> 3) * a6);
        v14 = *a10;
        do
        {
          v15 = 0;
          *v13 = 0;
          *v12 = 0;
          v16 = 1;
          do
          {
            v17 = 0;
            v18 = v16;
            v19 = v15 * a2;
            v20 = 1;
            do
            {
              v21 = 0;
              v22 = 0;
              v23 = v20;
              v24 = result + v11 + v17 + v19;
              v25 = 1;
              do
              {
                v26 = v25;
                v22 += *(unsigned __int8 *)(v24 + v21 * a2) + *(unsigned __int8 *)(v24 + v21 * a2 + 2);
                v21 = 2;
                v25 = 0;
              }
              while ((v26 & 1) != 0);
              v27 = 0;
              v28 = 0;
              v29 = 4 * v22;
              v30 = 1;
              do
              {
                v31 = 0;
                v32 = v30;
                v33 = v27 * a2;
                v34 = 1;
                do
                {
                  v35 = v34;
                  v36 = *(unsigned __int8 *)(v24 + v31 + v33) - ((v29 + 8) >> 4);
                  if (v36 < 0)
                    v36 = -v36;
                  v28 += v36;
                  v31 = 2;
                  v34 = 0;
                }
                while ((v35 & 1) != 0);
                v30 = 0;
                v27 = 2;
              }
              while ((v32 & 1) != 0);
              v20 = 0;
              *v12 += 4 * v28;
              *v13 += v29;
              v17 = 4;
            }
            while ((v23 & 1) != 0);
            v16 = 0;
            v15 = 4;
          }
          while ((v18 & 1) != 0);
          v37 = *v12++;
          *a9 += v37;
          v38 = *v13++;
          v14 += v38;
          *a10 = v14;
          v11 += 8;
        }
        while (v11 < a3);
      }
      result += 8 * a2;
    }
  }
  return result;
}

uint64_t sub_1B682C8B4(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  int v33;
  unsigned int v34;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        v13 = (int *)(a5 + 4 * (v10 >> 3) * a6);
        v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        v15 = *a10;
        do
        {
          v16 = 0;
          v17 = result + v12;
          *v13 = 0;
          *v14 = 0;
          v18 = *v13;
          v19 = 1;
          do
          {
            v20 = v19;
            v21 = (unsigned __int8 *)(v17 + v16 * a2);
            v22 = v18 + *v21;
            *v13 = v22;
            v18 = v22 + v21[4];
            *v13 = v18;
            v16 = 4;
            v19 = 0;
          }
          while ((v20 & 1) != 0);
          v23 = 0;
          v24 = 16 * v18;
          *v13 = v24;
          v25 = (v24 + 32) >> 6;
          v26 = *v14;
          v27 = 1;
          do
          {
            v28 = 0;
            v29 = v27;
            v30 = v23 * a2;
            v31 = 1;
            do
            {
              v32 = v31;
              v33 = *(unsigned __int8 *)(v17 + v28 + v30) - v25;
              if (v33 < 0)
                v33 = -v33;
              v26 += v33;
              *v14 = v26;
              v28 = 4;
              v31 = 0;
            }
            while ((v32 & 1) != 0);
            v27 = 0;
            v23 = 4;
          }
          while ((v29 & 1) != 0);
          *v14++ = 16 * v26;
          *a9 += 16 * v26;
          v34 = *v13++;
          v15 += v34;
          *a10 = v15;
          v12 += 8;
        }
        while (v12 < a3);
      }
      result += 8 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1B682C9F8(uint64_t *a1, int *a2, uint64_t *a3, int *a4, int a5, int a6, int a7, int a8, int a9, signed int a10)
{
  uint64_t result;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  signed int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  signed int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  signed int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  signed int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  signed int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  signed int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  int v85;
  int v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int v96;
  signed int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  signed int v104;
  uint64_t k;
  uint64_t v106;
  char v107;
  uint64_t v108;
  int v109;
  int v110;
  char v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  char v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  signed int v124;
  int v125;
  _BYTE *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned int *v136;
  unsigned int *v137;
  _BYTE *v138;
  unsigned int *v139;
  unsigned int *v140;
  _BYTE *v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  int v149;
  signed int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  int v156;
  signed int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  char v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  signed int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  __int128 v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int *v193;
  _BYTE *v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  signed int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  int v209;
  signed int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t m;
  uint64_t v216;
  int v217;
  int v218;
  char v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  char v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  int v230;
  signed int v231;
  int v232;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;

  v246 = a7 >> 5;
  v241 = (a9 + 31) >> 5;
  v265 = *MEMORY[0x1E0C80C00];
  v236 = a8 + 31;
  v232 = a8 + 7;
  result = ((a8 + 7) >> 5);
  v11 = *a2;
  v239 = *a4;
  v237 = 4 * v239;
  v238 = 4 * v11;
  v260 = a2[1];
  v240 = 2 * v260;
  v235 = 4 * (a6 >> 5);
  v247 = a2[2];
  v257 = a6 >> 5;
  v234 = 2 * (a6 >> 5);
  v244 = (a9 + 7) >> 5;
  v12 = a10 << 8;
  v250 = result;
  if (v244 > a7 >> 5)
  {
    v13 = 0;
    v256 = 4 * ((int)v235 + v237 * v246);
    v14 = -a10;
    v258 = (result - v257);
    v255 = v257 + (int)v247 * v246;
    v253 = (int)v234 + v240 * v246;
    v251 = (int)v235 + v238 * v246;
    do
    {
      v248 = v13;
      if ((int)result > v257)
      {
        v15 = 0;
        v16 = (_BYTE *)(a1[2] + v255);
        v17 = (_BYTE *)(a1[1] + v253);
        v18 = *a1 + v251;
        v19 = (__int128 *)(*a3 + v256);
        do
        {
          v20 = 0;
          v21 = v19;
          do
          {
            *(__int128 *)((char *)&v261 + v20) = *v21;
            v20 += 16;
            v21 = (__int128 *)((char *)v21 + 4 * v239);
          }
          while (v20 != 64);
          v22 = 0;
          v23 = DWORD1(v261) + v261 + v262 + DWORD1(v262);
          v24 = HIDWORD(v261) + DWORD2(v261) + DWORD2(v262) + HIDWORD(v262);
          v25 = DWORD1(v263) + v263 + v264 + DWORD1(v264);
          v27 = DWORD2(v263);
          v26 = HIDWORD(v263);
          v259 = v23 + v24 + v25 + 8;
          v29 = DWORD2(v264);
          v28 = HIDWORD(v264);
          v30 = v23 + 2;
          v31 = v25 + 2;
          v32 = &v261;
          v33 = v18;
          do
          {
            for (i = 0; i != 4; ++i)
            {
              v35 = *((_DWORD *)v32 + i);
              if (v35 >= 2)
              {
                v36 = __clz(v35);
                v37 = ((byte_1B69327A4[(unint64_t)(v35 << (v36 + 1)) >> 24] << 12) | 0x200000u) >> ((v36 + 1) >> 1);
                if ((v36 & 1) == 0)
                  v37 = (11585 * v37) >> 14;
                v35 = (v37 + 16) >> 5;
              }
              v38 = (int)(v12 * (v35 - a5)) / a5;
              v39 = (v38 > 0) | (v38 >> 31);
              if (v38 < 0)
                v38 = -v38;
              v40 = v39 * ((v38 + 128) >> 8);
              if (v40 >= a10)
                v40 = a10;
              if (v40 <= v14)
                LOBYTE(v40) = -(char)a10;
              *(_BYTE *)(v33 + i) = v40;
            }
            ++v22;
            v33 += v11;
            ++v32;
          }
          while (v22 != 4);
          v41 = v30 >> 2;
          if (v30 >= 8)
          {
            v42 = __clz(v41);
            v43 = ((byte_1B69327A4[(unint64_t)(v41 << (v42 + 1)) >> 24] << 12) | 0x200000u) >> ((v42 + 1) >> 1);
            if ((v42 & 1) != 0)
              v44 = v43;
            else
              v44 = (11585 * v43) >> 14;
            v41 = (v44 + 16) >> 5;
          }
          v45 = (v24 + 2) >> 2;
          v46 = (int)((v41 - a5) * v12) / a5;
          v47 = (v46 > 0) | (v46 >> 31);
          if (v46 < 0)
            v46 = -v46;
          v48 = v47 * ((v46 + 128) >> 8);
          if (v48 >= a10)
            v48 = a10;
          if (v48 <= v14)
            LOBYTE(v48) = -(char)a10;
          *v17 = v48;
          if ((v24 + 2) >= 8)
          {
            v49 = __clz(v45);
            if ((v49 & 1) != 0)
              v50 = ((byte_1B69327A4[(unint64_t)(v45 << (v49 + 1)) >> 24] << 12) | 0x200000u) >> ((v49 + 1) >> 1);
            else
              v50 = (11585
                   * (((byte_1B69327A4[(unint64_t)(v45 << (v49 + 1)) >> 24] << 12) | 0x200000u) >> ((v49 + 1) >> 1))) >> 14;
            v45 = (v50 + 16) >> 5;
          }
          v51 = v31 >> 2;
          v52 = (int)((v45 - a5) * v12) / a5;
          v53 = (v52 > 0) | (v52 >> 31);
          if (v52 < 0)
            v52 = -v52;
          v54 = v53 * ((v52 + 128) >> 8);
          if (v54 >= a10)
            v54 = a10;
          if (v54 <= v14)
            LOBYTE(v54) = -(char)a10;
          v17[1] = v54;
          if (v31 >= 8)
          {
            v55 = __clz(v51);
            v56 = ((byte_1B69327A4[(unint64_t)(v51 << (v55 + 1)) >> 24] << 12) | 0x200000u) >> ((v55 + 1) >> 1);
            if ((v55 & 1) != 0)
              v57 = v56;
            else
              v57 = (11585 * v56) >> 14;
            v51 = (v57 + 16) >> 5;
          }
          v58 = v26 + v27 + v29 + v28;
          v59 = (v58 + 2) >> 2;
          v60 = (int)((v51 - a5) * v12) / a5;
          v61 = (v60 > 0) | (v60 >> 31);
          if (v60 < 0)
            v60 = -v60;
          v62 = v61 * ((v60 + 128) >> 8);
          if (v62 >= a10)
            v62 = a10;
          if (v62 <= v14)
            v63 = -(char)a10;
          else
            v63 = v62;
          v17[v260] = v63;
          if ((v58 + 2) >= 8)
          {
            v64 = __clz(v59);
            v65 = ((byte_1B69327A4[(unint64_t)(v59 << (v64 + 1)) >> 24] << 12) | 0x200000u) >> ((v64 + 1) >> 1);
            if ((v64 & 1) != 0)
              v66 = v65;
            else
              v66 = (11585 * v65) >> 14;
            v59 = (v66 + 16) >> 5;
          }
          v67 = v259 + v58;
          v68 = (v259 + v58) >> 4;
          v69 = (int)((v59 - a5) * v12) / a5;
          v70 = (v69 > 0) | (v69 >> 31);
          if (v69 < 0)
            v69 = -v69;
          v71 = v70 * ((v69 + 128) >> 8);
          if (v71 >= a10)
            v71 = a10;
          if (v71 <= v14)
            LOBYTE(v71) = -(char)a10;
          v17[v260 + 1] = v71;
          if (v67 >= 0x20)
          {
            v72 = __clz(v68);
            if ((v72 & 1) != 0)
              v73 = ((byte_1B69327A4[(unint64_t)(v68 << (v72 + 1)) >> 24] << 12) | 0x200000u) >> ((v72 + 1) >> 1);
            else
              v73 = (11585
                   * (((byte_1B69327A4[(unint64_t)(v68 << (v72 + 1)) >> 24] << 12) | 0x200000u) >> ((v72 + 1) >> 1))) >> 14;
            v68 = (v73 + 16) >> 5;
          }
          v74 = (int)((v68 - a5) * v12) / a5;
          v75 = (v74 > 0) | (v74 >> 31);
          if (v74 < 0)
            v74 = -v74;
          v76 = v75 * ((v74 + 128) >> 8);
          if (v76 >= a10)
            v76 = a10;
          if (v76 <= v14)
            LOBYTE(v76) = -(char)a10;
          *v16++ = v76;
          v18 += 4;
          v17 += 2;
          ++v15;
          ++v19;
        }
        while (v15 != v258);
      }
      result = ((a8 + 7) >> 5);
      v251 += v238;
      v253 += v240;
      v255 += v247;
      v13 = v248 + 1;
      v256 += 4 * v237;
    }
    while (v248 + 1 != v244 - v246);
  }
  v254 = (a9 + 15) >> 4;
  v252 = (a9 + 7) >> 3;
  if (v244 != v241 && (int)result > v257)
  {
    v77 = (_BYTE *)(a1[2] + (int)v247 * (uint64_t)v244 + ((uint64_t)a6 >> 5));
    v78 = a1[1] + v240 * (uint64_t)v244 + v234;
    v79 = *a3 + 4 * v237 * v244 + 16 * (a6 >> 5);
    v80 = v252 - 4 * v244;
    v81 = *a1 + v238 * (uint64_t)v244 + v235;
    v82 = (v254 - 2 * v244);
    v83 = -a10;
    *(_QWORD *)&v84 = -1;
    *((_QWORD *)&v84 + 1) = -1;
    do
    {
      v263 = v84;
      v264 = v84;
      v261 = v84;
      v262 = v84;
      if (v80 < 1)
      {
        v86 = 0;
      }
      else
      {
        v85 = 0;
        v86 = 0;
        v87 = &v261;
        v88 = v79;
        v89 = v81;
        do
        {
          for (j = 0; j != 4; ++j)
          {
            v91 = *(_DWORD *)(v88 + 4 * j);
            *((_DWORD *)v87 + j) = v91;
            v92 = v91;
            if (v91 >= 2)
            {
              v93 = __clz(v91);
              if ((v93 & 1) != 0)
                v94 = ((byte_1B69327A4[(unint64_t)(v91 << (v93 + 1)) >> 24] << 12) | 0x200000u) >> ((v93 + 1) >> 1);
              else
                v94 = (11585
                     * (((byte_1B69327A4[(unint64_t)(v91 << (v93 + 1)) >> 24] << 12) | 0x200000u) >> ((v93 + 1) >> 1))) >> 14;
              v92 = (v94 + 16) >> 5;
            }
            v95 = (int)(v12 * (v92 - a5)) / a5;
            v96 = (v95 > 0) | (v95 >> 31);
            if (v95 < 0)
              v95 = -v95;
            v97 = v96 * ((v95 + 128) >> 8);
            if (v97 >= a10)
              v97 = a10;
            if (v97 <= v83)
              LOBYTE(v97) = -(char)a10;
            *(_BYTE *)(v89 + j) = v97;
            v86 += v91;
          }
          ++v85;
          v89 += v11;
          ++v87;
          v88 += 4 * v239;
        }
        while (v85 != v80);
      }
      v98 = (v86 + 2 * v80) / (4 * v80);
      if (v98 >= 2)
      {
        v99 = __clz(v98);
        v100 = ((byte_1B69327A4[(unint64_t)(v98 << (v99 + 1)) >> 24] << 12) | 0x200000u) >> ((v99 + 1) >> 1);
        if ((v99 & 1) != 0)
          v101 = v100;
        else
          v101 = (11585 * v100) >> 14;
        v98 = (v101 + 16) >> 5;
      }
      v102 = (int)((v98 - a5) * v12) / a5;
      v103 = (v102 > 0) | (v102 >> 31);
      if (v102 < 0)
        v102 = -v102;
      v104 = v103 * ((v102 + 128) >> 8);
      if (v104 >= a10)
        v104 = a10;
      if (v104 <= v83)
        LOBYTE(v104) = -(char)a10;
      *v77 = v104;
      if ((int)v82 >= 1)
      {
        for (k = 0; k != v82; ++k)
        {
          v106 = 0;
          v107 = 1;
          do
          {
            v108 = 0;
            v109 = 0;
            v110 = 0;
            v111 = v107;
            v112 = 1;
            do
            {
              v113 = 0;
              v114 = v112;
              v115 = (8 * k) | (2 * v106) | v108;
              v116 = 1;
              do
              {
                v117 = v116;
                v118 = *((_DWORD *)&v261 + (v115 | v113));
                if (v118 == -1)
                  v118 = 0;
                else
                  ++v110;
                v109 += v118;
                v113 = 1;
                v116 = 0;
              }
              while ((v117 & 1) != 0);
              v112 = 0;
              v108 = 4;
            }
            while ((v114 & 1) != 0);
            v119 = (v109 + (v110 >> 1)) / v110;
            if (v119 >= 2)
            {
              v120 = __clz(v119);
              v121 = ((byte_1B69327A4[(unint64_t)(v119 << (v120 + 1)) >> 24] << 12) | 0x200000u) >> ((v120 + 1) >> 1);
              if ((v120 & 1) == 0)
                v121 = (11585 * v121) >> 14;
              v119 = (v121 + 16) >> 5;
            }
            v107 = 0;
            v122 = (int)((v119 - a5) * v12) / a5;
            v123 = (v122 > 0) | (v122 >> 31);
            if (v122 < 0)
              v122 = -v122;
            v124 = v123 * ((v122 + 128) >> 8);
            if (v124 >= a10)
              v124 = a10;
            if (v124 <= v83)
              LOBYTE(v124) = -(char)a10;
            *(_BYTE *)(v78 + k * v260 + v106) = v124;
            v106 = 1;
          }
          while ((v111 & 1) != 0);
        }
      }
      v79 += 16;
      v81 += 4;
      v78 += 2;
      ++v77;
      result = v250;
      ++v257;
    }
    while (v257 != (_DWORD)v250);
  }
  v125 = (a9 + 7) >> 5;
  if ((_DWORD)result != v236 >> 5)
  {
    v245 = (a8 + 15) >> 4;
    v249 = v232 >> 3;
    if (v244 > v246)
    {
      v126 = (_BYTE *)(a1[2] + (int)v250);
      v127 = a1[1] + 2 * (int)v250;
      v128 = v249 - 4 * v250;
      v129 = (v245 - 2 * v250);
      v130 = -a10;
      *(_QWORD *)&v131 = -1;
      *((_QWORD *)&v131 + 1) = -1;
      v132 = *a1 + 4 * (int)v250;
      v133 = *a3 + 16 * (int)v250;
      do
      {
        v134 = 0;
        v135 = 0;
        v263 = v131;
        v264 = v131;
        v136 = (unsigned int *)&v261;
        v137 = (unsigned int *)v133;
        v138 = (_BYTE *)v132;
        v261 = v131;
        v262 = v131;
        do
        {
          v139 = v137;
          v140 = v136;
          v141 = v138;
          v142 = (v249 - 4 * v250);
          if (v128 >= 1)
          {
            do
            {
              v144 = *v139++;
              v143 = v144;
              *v140 = v144;
              v145 = v144;
              if (v144 >= 2)
              {
                v146 = __clz(v143);
                if ((v146 & 1) != 0)
                  v147 = ((byte_1B69327A4[(unint64_t)(v143 << (v146 + 1)) >> 24] << 12) | 0x200000u) >> ((v146 + 1) >> 1);
                else
                  v147 = (11585
                        * (((byte_1B69327A4[(unint64_t)(v143 << (v146 + 1)) >> 24] << 12) | 0x200000u) >> ((v146 + 1) >> 1))) >> 14;
                v145 = (v147 + 16) >> 5;
              }
              v148 = (int)(v12 * (v145 - a5)) / a5;
              v149 = (v148 > 0) | (v148 >> 31);
              if (v148 < 0)
                v148 = -v148;
              v150 = v149 * ((v148 + 128) >> 8);
              if (v150 >= a10)
                v150 = a10;
              if (v150 <= v130)
                LOBYTE(v150) = -(char)a10;
              *v141++ = v150;
              v135 += v143;
              ++v140;
              --v142;
            }
            while (v142);
          }
          ++v134;
          v138 += v11;
          v136 += 4;
          v137 += v239;
        }
        while (v134 != 4);
        v151 = (v135 + 2 * v128) / (4 * v128);
        if (v151 >= 2)
        {
          v152 = __clz(v151);
          v153 = ((byte_1B69327A4[(unint64_t)(v151 << (v152 + 1)) >> 24] << 12) | 0x200000u) >> ((v152 + 1) >> 1);
          if ((v152 & 1) == 0)
            v153 = (11585 * v153) >> 14;
          v151 = (v153 + 16) >> 5;
        }
        v154 = 0;
        v155 = (int)((v151 - a5) * v12) / a5;
        v156 = (v155 > 0) | (v155 >> 31);
        if (v155 < 0)
          v155 = -v155;
        v157 = v156 * ((v155 + 128) >> 8);
        if (v157 >= a10)
          v157 = a10;
        if (v157 <= v130)
          LOBYTE(v157) = -(char)a10;
        *v126 = v157;
        v158 = 1;
        do
        {
          result = v158;
          if ((int)v129 >= 1)
          {
            v159 = 0;
            v160 = 8 * v154;
            v161 = v127 + v154 * v260;
            do
            {
              v162 = 0;
              v163 = 0;
              v164 = 0;
              v165 = 1;
              do
              {
                v166 = 0;
                v167 = v165;
                v168 = v160 + 2 * v159 + v162;
                v169 = 1;
                do
                {
                  v170 = v169;
                  v171 = *((_DWORD *)&v261 + (v168 | v166));
                  if (v171 == -1)
                    v171 = 0;
                  else
                    ++v164;
                  v163 += v171;
                  v166 = 1;
                  v169 = 0;
                }
                while ((v170 & 1) != 0);
                v165 = 0;
                v162 = 4;
              }
              while ((v167 & 1) != 0);
              v172 = (v163 + (v164 >> 1)) / v164;
              if (v172 >= 2)
              {
                v173 = __clz(v172);
                v174 = ((byte_1B69327A4[(unint64_t)(v172 << (v173 + 1)) >> 24] << 12) | 0x200000u) >> ((v173 + 1) >> 1);
                if ((v173 & 1) == 0)
                  v174 = (11585 * v174) >> 14;
                v172 = (v174 + 16) >> 5;
              }
              v175 = (int)((v172 - a5) * v12) / a5;
              v176 = (v175 > 0) | (v175 >> 31);
              if (v175 < 0)
                v175 = -v175;
              v177 = v176 * ((v175 + 128) >> 8);
              if (v177 >= a10)
                v177 = a10;
              if (v177 <= v130)
                LOBYTE(v177) = -(char)a10;
              *(_BYTE *)(v161 + v159++) = v177;
            }
            while (v159 != v129);
          }
          v158 = 0;
          v154 = 1;
        }
        while ((result & 1) != 0);
        v132 += v238;
        v127 += v240;
        v126 += v247;
        v133 += 4 * v237;
        v125 = (a9 + 7) >> 5;
        ++v246;
      }
      while (v246 != v244);
    }
    if (v125 != v241)
    {
      v178 = *a3;
      v179 = *a1;
      v180 = a1[1];
      v181 = a1[2];
      v182 = v252 - 4 * v125;
      *(_QWORD *)&v183 = -1;
      *((_QWORD *)&v183 + 1) = -1;
      v263 = v183;
      v264 = v183;
      v261 = v183;
      v262 = v183;
      v184 = v181 + (int)v247 * (uint64_t)v125;
      v185 = v249 - 4 * v250;
      v186 = v182 * v185;
      if (v182 < 1)
      {
        v188 = 0;
      }
      else
      {
        v187 = 0;
        v188 = 0;
        v189 = v178 + 4 * v237 * v125 + 16 * (int)v250;
        v190 = v179 + v238 * (uint64_t)v125 + 4 * (int)v250;
        v191 = (unsigned int *)&v261;
        do
        {
          v192 = (unsigned int *)v189;
          v193 = v191;
          v194 = (_BYTE *)v190;
          v195 = (v249 - 4 * v250);
          if (v185 >= 1)
          {
            do
            {
              v197 = *v192++;
              v196 = v197;
              *v193 = v197;
              v198 = v197;
              if (v197 >= 2)
              {
                v199 = __clz(v196);
                if ((v199 & 1) != 0)
                  v200 = ((byte_1B69327A4[(unint64_t)(v196 << (v199 + 1)) >> 24] << 12) | 0x200000u) >> ((v199 + 1) >> 1);
                else
                  v200 = (11585
                        * (((byte_1B69327A4[(unint64_t)(v196 << (v199 + 1)) >> 24] << 12) | 0x200000u) >> ((v199 + 1) >> 1))) >> 14;
                v198 = (v200 + 16) >> 5;
              }
              v201 = (int)(v12 * (v198 - a5)) / a5;
              v202 = (v201 > 0) | (v201 >> 31);
              if (v201 < 0)
                v201 = -v201;
              v203 = v202 * ((v201 + 128) >> 8);
              if (v203 >= a10)
                v203 = a10;
              if (v203 <= -a10)
                LOBYTE(v203) = -(char)a10;
              *v194++ = v203;
              v188 += v196;
              ++v193;
              --v195;
            }
            while (v195);
          }
          ++v187;
          v190 += v11;
          v191 += 4;
          v189 += 4 * v239;
        }
        while (v187 != v182);
      }
      result = v250;
      v204 = (v254 - 2 * v244);
      v205 = (v188 + (v186 >> 1)) / v186;
      if (v205 >= 2)
      {
        v206 = __clz(v205);
        result = v250;
        v207 = ((byte_1B69327A4[(unint64_t)(v205 << (v206 + 1)) >> 24] << 12) | 0x200000u) >> ((v206 + 1) >> 1);
        if ((v206 & 1) == 0)
          v207 = (11585 * v207) >> 14;
        v205 = (v207 + 16) >> 5;
      }
      v208 = (int)((v205 - a5) * v12) / a5;
      v209 = (v208 > 0) | (v208 >> 31);
      if (v208 < 0)
        v208 = -v208;
      v210 = v209 * ((v208 + 128) >> 8);
      v211 = -a10;
      if (v210 >= a10)
        v210 = a10;
      if (v210 <= v211)
        v210 = -a10;
      *(_BYTE *)(v184 + (int)v250) = v210;
      if ((int)v204 >= 1)
      {
        v212 = 0;
        v213 = v180 + v240 * (uint64_t)v244 + 2 * (int)result;
        v214 = (v245 - 2 * result);
        result = 0x200000;
        do
        {
          if ((int)v214 >= 1)
          {
            for (m = 0; m != v214; ++m)
            {
              v216 = 0;
              v217 = 0;
              v218 = 0;
              v219 = 1;
              do
              {
                v220 = 0;
                v221 = v219;
                v222 = (v216 + (v212 << 35) + (m << 33)) >> 32;
                v223 = 1;
                do
                {
                  v224 = v223;
                  v225 = *((_DWORD *)&v261 + (v222 | v220));
                  if (v225 == -1)
                    v225 = 0;
                  else
                    ++v218;
                  v217 += v225;
                  v220 = 1;
                  v223 = 0;
                }
                while ((v224 & 1) != 0);
                v219 = 0;
                v216 = 0x400000000;
              }
              while ((v221 & 1) != 0);
              v226 = (v217 + (v218 >> 1)) / v218;
              if (v226 >= 2)
              {
                v227 = __clz(v226);
                v228 = ((byte_1B69327A4[(unint64_t)(v226 << (v227 + 1)) >> 24] << 12) | 0x200000u) >> ((v227 + 1) >> 1);
                if ((v227 & 1) == 0)
                  v228 = (11585 * v228) >> 14;
                v226 = (v228 + 16) >> 5;
              }
              v229 = (int)((v226 - a5) * v12) / a5;
              v230 = (v229 > 0) | (v229 >> 31);
              if (v229 < 0)
                v229 = -v229;
              v231 = v230 * ((v229 + 128) >> 8);
              if (v231 >= a10)
                v231 = a10;
              if (v231 <= v211)
                LOBYTE(v231) = -(char)a10;
              *(_BYTE *)(v213 + v212 * v260 + m) = v231;
            }
          }
          ++v212;
        }
        while (v212 != v204);
      }
    }
  }
  return result;
}

uint64_t sub_1B682DA64(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int32x4_t a10, int32x4_t a11, _DWORD *a12, uint64_t *a13)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned __int32 *v29;
  uint64_t v30;
  int32x4_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;

  if (a4 >= 1)
  {
    v13 = 0;
    v14 = a4;
    do
    {
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = (int *)(a7 + 4 * (v13 >> 3) * a8);
        v17 = (unsigned int *)(a5 + 4 * (v13 >> 3) * a6);
        v18 = *a13;
        v19 = result;
        do
        {
          v20 = 0;
          *v17 = 0;
          *v16 = 0;
          v21 = 1;
          do
          {
            v22 = 0;
            v23 = v21;
            v24 = v20 * a2;
            v25 = 1;
            do
            {
              v26 = 0;
              v27 = v25;
              v28 = v22 + v24;
              v29 = (unsigned __int32 *)(v19 + v24 + v22);
              v30 = 4;
              do
              {
                a10.i32[0] = *v29;
                a10.i64[0] = vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
                v26 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)a10.i8));
                v29 = (unsigned __int32 *)((char *)v29 + a2);
                --v30;
              }
              while (v30);
              v31 = vdupq_n_s32((int)(v26 + 8) >> 4);
              v32 = 4;
              do
              {
                a11.i32[0] = *(_DWORD *)(v19 + v28);
                a11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.i8));
                a10 = vabaq_s32((int32x4_t)v30, a11, v31);
                LODWORD(v30) = vaddvq_s32(a10);
                v28 += a2;
                --v32;
              }
              while (v32);
              v25 = 0;
              *v16 += v30;
              *v17 += v26;
              v22 = 4;
            }
            while ((v27 & 1) != 0);
            v21 = 0;
            v20 = 4;
          }
          while ((v23 & 1) != 0);
          v33 = *v16++;
          *a12 += v33;
          v34 = *v17++;
          v18 += v34;
          *a13 = v18;
          v15 += 8;
          v19 += 8;
        }
        while (v15 < a3);
      }
      result += 8 * a2;
      v13 += 8;
    }
    while (v13 < v14);
  }
  return result;
}

uint64_t sub_1B682DBD4(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t j;
  int v26;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        v13 = (_DWORD *)(a7 + 4 * (v10 >> 3) * a8);
        v14 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        v15 = *a10;
        v16 = result;
        do
        {
          v17 = 0;
          v18 = 0;
          v19 = v16;
          do
          {
            for (i = 0; i != 8; ++i)
              v18 += *(unsigned __int8 *)(v19 + i);
            ++v17;
            v19 += a2;
          }
          while (v17 != 8);
          v21 = 0;
          v22 = 0;
          v24 = v16;
          do
          {
            for (j = 0; j != 8; ++j)
            {
              v23 = (v18 + 32) >> 6;
              v26 = *(unsigned __int8 *)(v24 + j) - v23;
              if (v26 < 0)
                v26 = v23 - *(unsigned __int8 *)(v24 + j);
              v22 += v26;
            }
            ++v21;
            v24 += a2;
          }
          while (v21 != 8);
          *v14++ = v18;
          *v13++ = v22;
          *a9 += v22;
          v15 += v18;
          *a10 = v15;
          v12 += 8;
          v16 += 8;
        }
        while (v12 < a3);
      }
      result += 8 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

unint64_t sub_1B682DCF0(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (a3 >= 1)
      {
        v9 = 0;
        v10 = a1;
        v11 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v12) = (a3 - (int)v9) >> 3, (int)v12 >= 1) ? (v12 = 1) : (v12 = v12),
                a3 - (int)v9 < 8))
          {
            v13 = 0;
          }
          else
          {
            v13 = 0;
            v14 = v11;
            do
            {
              v15 = *v14++;
              v13 += v15;
              --v12;
            }
            while (v12);
          }
          v16 = 0;
          v17 = 0;
          v18 = v10;
          do
          {
            for (i = 0; i != 8; ++i)
              v17 += *(unsigned __int8 *)(v18 + i) * (unint64_t)*(unsigned __int8 *)(v18 + i);
            ++v16;
            v18 += a2;
          }
          while (v16 != 8);
          *a6++ = v13;
          *a7++ = v17;
          v20 = v17 - ((v13 * v13 + 32) >> 6);
          if (v20 <= 31)
            v21 = 0;
          else
            v21 = (v20 + 32) >> 6;
          v8 += v21;
          v9 += 8;
          ++v11;
          v10 += 8;
        }
        while (v9 < a3);
      }
      a1 += 8 * a2;
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

unint64_t sub_1B682DE30(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)a3 >> 3;
    v10 = 8 * v9;
    v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2)
          v13 = 2;
        else
          v13 = v13;
        v14 = a1;
        v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            v17 = 0;
          }
          else
          {
            v16 = 0;
            v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2)
              v18 = 2;
            else
              v18 = v18;
            v19 = v15;
            do
            {
              v20 = v19;
              v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          v23 = 0;
          v24 = 0;
          v25 = v14;
          do
          {
            for (i = 0; i != 16; ++i)
              v24 += *(unsigned __int8 *)(v25 + i) * (unint64_t)*(unsigned __int8 *)(v25 + i);
            ++v23;
            v25 += a2;
          }
          while (v23 != 16);
          *a6++ = v17;
          *a7++ = v24;
          v27 = v24 - ((v17 * v17 + 128) >> 8);
          if (v27 <= 127)
            v28 = 0;
          else
            v28 = (v27 + 128) >> 8;
          v8 += v28;
          v12 += 16;
          v15 += 2;
          v14 += 16;
        }
        while (v12 < a3);
      }
      a1 += 16 * a2;
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

uint64_t sub_1B682DFB0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t *a10)
{
  unint64_t i;
  uint64_t v11;
  int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        v11 = 0;
        v12 = (int *)(a7 + 4 * (i >> 3) * a8);
        v13 = (unsigned int *)(a5 + 4 * (i >> 3) * a6);
        v14 = *a10;
        do
        {
          v15 = 0;
          *v13 = 0;
          *v12 = 0;
          v16 = 1;
          do
          {
            v17 = 0;
            v18 = v16;
            v19 = v15 * a2;
            v20 = 1;
            do
            {
              v21 = 0;
              v22 = 0;
              v23 = v20;
              v24 = result + 2 * v11 + 2 * (v17 + v19);
              v25 = 1;
              do
              {
                v26 = 0;
                v27 = v25;
                v28 = v21 * a2;
                v29 = 1;
                do
                {
                  v30 = v29;
                  v22 += *(unsigned __int16 *)(v24 + 2 * (v26 + v28)) >> 6;
                  v26 = 2;
                  v29 = 0;
                }
                while ((v30 & 1) != 0);
                v25 = 0;
                v21 = 2;
              }
              while ((v27 & 1) != 0);
              v31 = 0;
              v32 = 0;
              v33 = 4 * v22;
              v34 = 1;
              do
              {
                v35 = 0;
                v36 = v34;
                v37 = v31 * a2;
                v38 = 1;
                do
                {
                  v39 = v38;
                  v40 = (*(unsigned __int16 *)(v24 + 2 * (v35 + v37)) >> 6) - ((v33 + 8) >> 4);
                  if (v40 < 0)
                    v40 = -v40;
                  v32 += v40;
                  v35 = 2;
                  v38 = 0;
                }
                while ((v39 & 1) != 0);
                v34 = 0;
                v31 = 2;
              }
              while ((v36 & 1) != 0);
              v20 = 0;
              *v12 += 4 * v32;
              *v13 += v33;
              v17 = 4;
            }
            while ((v23 & 1) != 0);
            v16 = 0;
            v15 = 4;
          }
          while ((v18 & 1) != 0);
          v41 = *v12++;
          v42 = *a9 + v41;
          if (__CFADD__(*a9, v41))
            v42 = -1;
          *a9 = v42;
          v43 = *v13++;
          v14 += v43;
          v11 += 8;
        }
        while (v11 < a3);
        *a10 = v14;
      }
      result += 16 * a2;
    }
  }
  return result;
}

uint64_t sub_1B682E170(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t i;
  uint64_t v11;
  int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  int v37;
  unsigned int v38;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        v11 = 0;
        v12 = (int *)(a7 + 4 * (i >> 3) * a8);
        v13 = (unsigned int *)(a5 + 4 * (i >> 3) * a6);
        v14 = *a10;
        do
        {
          v15 = 0;
          *v13 = 0;
          *v12 = 0;
          v16 = 1;
          do
          {
            v17 = 0;
            v18 = v16;
            v19 = v15 * a2;
            v20 = 1;
            do
            {
              v21 = 0;
              v22 = 0;
              v23 = v20;
              v24 = result + 2 * v11 + 2 * (v17 + v19);
              v25 = 1;
              do
              {
                v26 = v25;
                v22 += *(unsigned __int16 *)(v24 + 2 * v21 * a2) + *(unsigned __int16 *)(v24 + 2 * v21 * a2 + 4);
                v21 = 2;
                v25 = 0;
              }
              while ((v26 & 1) != 0);
              v27 = 0;
              v28 = 0;
              v29 = 4 * v22;
              v30 = 1;
              do
              {
                v31 = 0;
                v32 = v30;
                v33 = v27 * a2;
                v34 = 1;
                do
                {
                  v35 = v34;
                  v36 = *(unsigned __int16 *)(v24 + 2 * (v31 + v33)) - ((v29 + 8) >> 4);
                  if (v36 < 0)
                    v36 = -v36;
                  v28 += v36;
                  v31 = 2;
                  v34 = 0;
                }
                while ((v35 & 1) != 0);
                v30 = 0;
                v27 = 2;
              }
              while ((v32 & 1) != 0);
              v20 = 0;
              *v12 += 4 * v28;
              *v13 += v29;
              v17 = 4;
            }
            while ((v23 & 1) != 0);
            v16 = 0;
            v15 = 4;
          }
          while ((v18 & 1) != 0);
          v37 = *v12++;
          *a9 += v37;
          v38 = *v13++;
          v14 += v38;
          v11 += 8;
        }
        while (v11 < a3);
        *a10 = v14;
      }
      result += 16 * a2;
    }
  }
  return result;
}

uint64_t sub_1B682E318(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t *a10)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  int v35;
  int v36;
  unsigned int v37;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        v13 = (int *)(a5 + 4 * (v10 >> 3) * a6);
        v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        v15 = *a10;
        do
        {
          v16 = 0;
          v17 = result + 2 * v12;
          *v13 = 0;
          *v14 = 0;
          v18 = *v13;
          v19 = 1;
          do
          {
            v20 = 0;
            v21 = v19;
            v22 = v16 * a2;
            v23 = 1;
            do
            {
              v24 = v23;
              v18 += *(unsigned __int16 *)(v17 + 2 * (v20 + v22)) >> 6;
              v20 = 4;
              v23 = 0;
            }
            while ((v24 & 1) != 0);
            v19 = 0;
            v16 = 4;
          }
          while ((v21 & 1) != 0);
          v25 = 0;
          v26 = 16 * v18;
          *v13 = v26;
          v27 = (v26 + 32) >> 6;
          v28 = *v14;
          v29 = 1;
          do
          {
            v30 = 0;
            v31 = v29;
            v32 = v25 * a2;
            v33 = 1;
            do
            {
              v34 = v33;
              v35 = (*(unsigned __int16 *)(v17 + 2 * (v30 + v32)) >> 6) - v27;
              if (v35 < 0)
                v35 = -v35;
              v28 += v35;
              v30 = 4;
              v33 = 0;
            }
            while ((v34 & 1) != 0);
            v29 = 0;
            v25 = 4;
          }
          while ((v31 & 1) != 0);
          *v14++ = 16 * v28;
          v36 = *a9 + 16 * v28;
          if (__CFADD__(*a9, 16 * v28))
            v36 = -1;
          *a9 = v36;
          v37 = *v13++;
          v15 += v37;
          v12 += 8;
        }
        while (v12 < a3);
        *a10 = v15;
      }
      result += 16 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1B682E46C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  unsigned int v32;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        v13 = (int *)(a5 + 4 * (v10 >> 3) * a6);
        v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        v15 = *a10;
        do
        {
          v16 = 0;
          v17 = result + 2 * v12;
          *v13 = 0;
          *v14 = 0;
          v18 = *v13;
          v19 = 1;
          do
          {
            v20 = v19;
            v18 += *(unsigned __int16 *)(v17 + 2 * v16 * a2) + *(unsigned __int16 *)(v17 + 2 * v16 * a2 + 8);
            v16 = 4;
            v19 = 0;
          }
          while ((v20 & 1) != 0);
          v21 = 0;
          v22 = 16 * v18;
          *v13 = v22;
          v23 = (v22 + 32) >> 6;
          v24 = *v14;
          v25 = 1;
          do
          {
            v26 = 0;
            v27 = v25;
            v28 = v21 * a2;
            v29 = 1;
            do
            {
              v30 = v29;
              v31 = *(unsigned __int16 *)(v17 + 2 * (v26 + v28)) - v23;
              if (v31 < 0)
                v31 = -v31;
              v24 += v31;
              v26 = 4;
              v29 = 0;
            }
            while ((v30 & 1) != 0);
            v25 = 0;
            v21 = 4;
          }
          while ((v27 & 1) != 0);
          *v14++ = 16 * v24;
          *a9 += 16 * v24;
          v32 = *v13++;
          v15 += v32;
          v12 += 8;
        }
        while (v12 < a3);
        *a10 = v15;
      }
      result += 16 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1B682E5A8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t *a10)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint16x4_t *v27;
  uint64_t v28;
  unsigned int v29;
  int32x4_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = 2 * a2;
    v12 = a4;
    do
    {
      if (a3 >= 1)
      {
        v13 = 0;
        v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        v15 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        v16 = *a10;
        v17 = result;
        do
        {
          v18 = 0;
          *v15 = 0;
          *v14 = 0;
          v19 = 1;
          do
          {
            v20 = 0;
            v21 = v19;
            v22 = v18 * a2;
            v23 = 1;
            do
            {
              v24 = 0;
              v25 = v23;
              v26 = 2 * (v20 + v22);
              v27 = (uint16x4_t *)(v17 + v26);
              v28 = 4;
              do
              {
                v24 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v24, vshr_n_u16(*v27, 6uLL)));
                v27 = (uint16x4_t *)((char *)v27 + v11);
                --v28;
              }
              while (v28);
              v29 = 0;
              v30 = vdupq_n_s32((int)(v24 + 8) >> 4);
              v31 = 4;
              do
              {
                v29 = vaddvq_s32(vabaq_s32((int32x4_t)v29, (int32x4_t)vmovl_u16(vshr_n_u16(*(uint16x4_t *)(v17 + v26), 6uLL)), v30));
                v26 += v11;
                --v31;
              }
              while (v31);
              v23 = 0;
              *v14 += v29;
              *v15 += v24;
              v20 = 4;
            }
            while ((v25 & 1) != 0);
            v19 = 0;
            v18 = 4;
          }
          while ((v21 & 1) != 0);
          v32 = *v14++;
          v33 = *a9 + v32;
          if (__CFADD__(*a9, v32))
            v33 = -1;
          *a9 = v33;
          v34 = *v15++;
          v16 += v34;
          v13 += 8;
          v17 += 16;
        }
        while (v13 < a3);
        *a10 = v16;
      }
      v10 += 8;
      result += 16 * a2;
    }
    while (v10 < v12);
  }
  return result;
}

uint64_t sub_1B682E724(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint16x4_t *v27;
  uint64_t v28;
  unsigned int v29;
  int32x4_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = 2 * a2;
    v12 = a4;
    do
    {
      if (a3 >= 1)
      {
        v13 = 0;
        v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        v15 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        v16 = *a10;
        v17 = result;
        do
        {
          v18 = 0;
          *v15 = 0;
          *v14 = 0;
          v19 = 1;
          do
          {
            v20 = 0;
            v21 = v19;
            v22 = v18 * a2;
            v23 = 1;
            do
            {
              v24 = 0;
              v25 = v23;
              v26 = 2 * (v20 + v22);
              v27 = (uint16x4_t *)(v17 + v26);
              v28 = 4;
              do
              {
                v24 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v24, *v27));
                v27 = (uint16x4_t *)((char *)v27 + v11);
                --v28;
              }
              while (v28);
              v29 = 0;
              v30 = vdupq_n_s32((int)(v24 + 8) >> 4);
              v31 = 4;
              do
              {
                v29 = vaddvq_s32(vabaq_s32((int32x4_t)v29, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v17 + v26)), v30));
                v26 += v11;
                --v31;
              }
              while (v31);
              v23 = 0;
              *v14 += v29;
              *v15 += v24;
              v20 = 4;
            }
            while ((v25 & 1) != 0);
            v19 = 0;
            v18 = 4;
          }
          while ((v21 & 1) != 0);
          v32 = *v14++;
          *a9 += v32;
          v33 = *v15++;
          v16 += v33;
          v13 += 8;
          v17 += 16;
        }
        while (v13 < a3);
        *a10 = v16;
      }
      v10 += 8;
      result += 16 * a2;
    }
    while (v10 < v12);
  }
  return result;
}

uint16x4_t *sub_1B682E894(uint16x4_t *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint16x4_t *v18;
  unsigned int v19;
  uint16x4_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint32x4_t v23;
  uint16x4_t *v24;
  uint64_t v25;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = 16 * a2;
    v12 = 2 * a2;
    v13 = a4;
    do
    {
      if (a3 >= 1)
      {
        v14 = 0;
        v15 = (unsigned int *)(a7 + 4 * (v10 >> 3) * a8);
        v16 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        v17 = *a10;
        v18 = result;
        do
        {
          v19 = 0;
          v20 = v18;
          v21 = 8;
          do
          {
            v19 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v19, *v20), *(uint16x8_t *)v20->i8));
            v20 = (uint16x4_t *)((char *)v20 + v12);
            --v21;
          }
          while (v21);
          v22 = 0;
          v23 = (uint32x4_t)vdupq_n_s32((v19 + 32) >> 6);
          v24 = v18;
          v25 = 8;
          do
          {
            v22 = vaddvq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v22, v23, vmovl_u16(*v24)), v23, vmovl_high_u16(*(uint16x8_t *)v24->i8)));
            v24 = (uint16x4_t *)((char *)v24 + v12);
            --v25;
          }
          while (v25);
          *v16++ = v19;
          *v15++ = v22;
          *a9 += v22;
          v17 += v19;
          v14 += 8;
          v18 += 2;
        }
        while (v14 < a3);
        *a10 = v17;
      }
      v10 += 8;
      result = (uint16x4_t *)((char *)result + v11);
    }
    while (v10 < v13);
  }
  return result;
}

unint64_t sub_1B682E9A8(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 16 * a2;
    v10 = 2 * a2;
    do
    {
      if (a3 >= 1)
      {
        v11 = 0;
        v12 = a1;
        v13 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v14) = (a3 - (int)v11) >> 3, (int)v14 >= 1) ? (v14 = 1) : (v14 = v14),
                a3 - (int)v11 < 8))
          {
            v15 = 0;
          }
          else
          {
            v15 = 0;
            v16 = v13;
            do
            {
              v17 = *v16++;
              v15 += v17;
              --v14;
            }
            while (v14);
          }
          v18 = 0;
          v19 = 0;
          v20 = v12;
          do
          {
            for (i = 0; i != 16; i += 2)
              v19 += *(unsigned __int16 *)(v20 + i) * (unint64_t)*(unsigned __int16 *)(v20 + i);
            ++v18;
            v20 += v10;
          }
          while (v18 != 8);
          *a6++ = v15;
          *a7++ = v19;
          v22 = v19 - ((v15 * v15 + 32) >> 6);
          if (v22 <= 31)
            v23 = 0;
          else
            v23 = (v22 + 32) >> 6;
          v8 += v23;
          v11 += 8;
          ++v13;
          v12 += 16;
        }
        while (v11 < a3);
      }
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
      a1 += v9;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

unint64_t sub_1B682EAEC(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)a3 >> 3;
    v10 = 8 * v9;
    v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2)
          v13 = 2;
        else
          v13 = v13;
        v14 = a1;
        v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            v17 = 0;
          }
          else
          {
            v16 = 0;
            v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2)
              v18 = 2;
            else
              v18 = v18;
            v19 = v15;
            do
            {
              v20 = v19;
              v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          v23 = 0;
          v24 = 0;
          v25 = v14;
          do
          {
            for (i = 0; i != 32; i += 2)
              v24 += *(unsigned __int16 *)(v25 + i) * (unint64_t)*(unsigned __int16 *)(v25 + i);
            ++v23;
            v25 += 2 * a2;
          }
          while (v23 != 16);
          *a6++ = v17;
          *a7++ = v24;
          v27 = v24 - ((v17 * v17 + 128) >> 8);
          if (v27 <= 127)
            v28 = 0;
          else
            v28 = (v27 + 128) >> 8;
          v8 += v28;
          v12 += 16;
          v15 += 2;
          v14 += 32;
        }
        while (v12 < a3);
      }
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
      a1 += 32 * a2;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

uint64_t sub_1B682EC70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint16x8_t v12;

  if (a5 > 31)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = a2 + 2 * a5 * a4;
  v8 = v6 + 2 * a5 * a3;
  do
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = (int32x4_t)result;
    do
    {
      v12 = vabdq_u16(*(uint16x8_t *)(v8 + v9), *(uint16x8_t *)(v7 + v9));
      v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v12);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v12.i8);
      v9 += 16;
    }
    while (v9 != 64);
    result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1B682ED04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint8x16_t v14;
  uint16x8_t v15;
  uint16x8_t v16;

  if (a5 > 31)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = a2 + a5 * a4;
  v8 = v6 + a5 * a3;
  do
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = (int32x4_t)result;
    v12 = 0uLL;
    v13 = 0uLL;
    do
    {
      v14 = vabdq_u8(*(uint8x16_t *)(v8 + v9), *(uint8x16_t *)(v7 + v9));
      v15 = vmovl_u8(*(uint8x8_t *)v14.i8);
      v16 = vmovl_high_u8(v14);
      v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v16);
      v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v16.i8);
      v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v15);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v15.i8);
      v9 += 16;
    }
    while (v9 != 32);
    result = vaddvq_s32(vaddq_s32(vaddq_s32(v11, v12), vaddq_s32(v10, v13)));
    v8 += a6 * a3;
    v7 += a6 * a4;
    a5 += a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1B682EDA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint16x8_t v10;
  uint16x8_t v11;

  if (a5 > 15)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = (uint8x16_t *)(a2 + a5 * a4);
  v8 = (uint8x16_t *)(v6 + a5 * a3);
  do
  {
    v9 = vabdq_u8(*v8, *v7);
    v10 = vmovl_high_u8(v9);
    v11 = vmovl_u8(*(uint8x8_t *)v9.i8);
    result = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)result, *(uint16x4_t *)v11.i8), *(uint16x4_t *)v10.i8), (int32x4_t)vaddl_high_u16(v11, v10)));
    v8 = (uint8x16_t *)((char *)v8 + a6 * a3);
    v7 = (uint8x16_t *)((char *)v7 + a6 * a4);
    a5 += a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1B682EE24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint16x8_t v12;

  if (a5 > 15)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = a2 + 2 * a5 * a4;
  v8 = v6 + 2 * a5 * a3;
  do
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = (int32x4_t)result;
    do
    {
      v12 = vabdq_u16(*(uint16x8_t *)(v8 + v9), *(uint16x8_t *)(v7 + v9));
      v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v12);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v12.i8);
      v9 += 16;
    }
    while (v9 != 32);
    result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1B682EEB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;

  if (a5 > 31)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = a2 + 2 * a5 * a4;
  v8 = v6 + 2 * a5 * a3;
  do
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = (int32x4_t)result;
    do
    {
      v12 = *(uint16x8_t *)(v8 + v9);
      v13 = *(uint16x8_t *)(v7 + v9);
      v14 = (int32x4_t)vsubl_high_u16(v12, v13);
      v15 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v13.i8);
      v10 = vmlaq_s32(v10, v14, v14);
      v11 = vmlaq_s32(v11, v15, v15);
      v9 += 16;
    }
    while (v9 != 64);
    result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1B682EF50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;

  if (a5 > 31)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = a2 + a5 * a4;
  v8 = v6 + a5 * a3;
  do
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = (int32x4_t)result;
    v12 = 0uLL;
    v13 = 0uLL;
    do
    {
      v14 = *(uint8x16_t *)(v8 + v9);
      v15 = *(uint8x16_t *)(v7 + v9);
      v16 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v15.i8);
      v17 = (int16x8_t)vsubl_high_u8(v14, v15);
      v13 = vmlal_high_s16(v13, v17, v17);
      v12 = vmlal_s16(v12, *(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8);
      v10 = vmlal_high_s16(v10, v16, v16);
      v11 = vmlal_s16(v11, *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
      v9 += 16;
    }
    while (v9 != 32);
    result = vaddvq_s32(vaddq_s32(vaddq_s32(v11, v12), vaddq_s32(v10, v13)));
    v8 += a6 * a3;
    v7 += a6 * a4;
    a5 += a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1B682EFF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  int16x8_t v9;
  int16x8_t v10;

  if (a5 > 15)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = (uint8x16_t *)(a2 + a5 * a4);
  v8 = (uint8x16_t *)(v6 + a5 * a3);
  do
  {
    v9 = (int16x8_t)vsubl_high_u8(*v8, *v7);
    v10 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v8->i8, *(uint8x8_t *)v7->i8);
    result = vaddvq_s32(vaddq_s32(vmlal_s16(vmlal_s16((int32x4_t)result, *(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8), vmlal_high_s16(vmull_high_s16(v10, v10), v9, v9)));
    v8 = (uint8x16_t *)((char *)v8 + a6 * a3);
    v7 = (uint8x16_t *)((char *)v7 + a6 * a4);
    a5 += a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1B682F06C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;

  if (a5 > 15)
    return 0;
  v6 = result;
  LODWORD(result) = 0;
  v7 = a2 + 2 * a5 * a4;
  v8 = v6 + 2 * a5 * a3;
  do
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = (int32x4_t)result;
    do
    {
      v12 = *(uint16x8_t *)(v8 + v9);
      v13 = *(uint16x8_t *)(v7 + v9);
      v14 = (int32x4_t)vsubl_high_u16(v12, v13);
      v15 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v13.i8);
      v10 = vmlaq_s32(v10, v14, v14);
      v11 = vmlaq_s32(v11, v15, v15);
      v9 += 16;
    }
    while (v9 != 32);
    result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1B682F104(void **memptr, unint64_t a2)
{
  void *v4;
  uint64_t result;

  if ((unint64_t)memptr[1] >= a2)
    return 0;
  if (a2 > 0xC80000)
    return 4294954392;
  v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, 8 * a2, 0x100004000313F17uLL) || !*memptr)
    return 4294954392;
  bzero(*memptr, 8 * a2);
  result = 0;
  memptr[1] = (void *)a2;
  return result;
}

uint64_t sub_1B682F1A0(uint64_t memptr, size_t size)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (*(_QWORD *)(memptr + 8) < size && size <= 0x6400000)
  {
    v4 = memptr;
    v5 = *(void **)memptr;
    if (v5)
    {
      free(v5);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    memptr = malloc_type_posix_memalign((void **)v4, 0x10uLL, size, 0x100004077774924uLL);
    if (!(_DWORD)memptr && *(_QWORD *)v4)
    {
      v6 = 0;
      do
        *(_BYTE *)(*(_QWORD *)v4 + v6++) = 0;
      while (size != v6);
      *(_QWORD *)(v4 + 8) = size;
    }
  }
  return memptr;
}

float sub_1B682F22C(int a1, int a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  float result;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a1 + a3 * a2;
  v16 = xmmword_1B6918110;
  if (a1 >= 1)
  {
    LODWORD(v16) = (*(unsigned __int16 *)(a6 + 2 * (v7 - 1)) + 32) >> 6;
    v8 = v16 + 2;
    if (a2 > 0)
    {
      v9 = v7 - a3;
      v10 = (*(unsigned __int16 *)(a6 + 2 * (v7 - a3)) + 32) >> 6;
      DWORD2(v16) = v10;
      v11 = (*(unsigned __int16 *)(a6 + 2 * (v7 + ~a3)) + 32) >> 6;
      v12 = 1;
      v13 = v11;
      goto LABEL_6;
    }
    v14 = 128;
LABEL_11:
    v10 = 128;
    v13 = 128;
    goto LABEL_12;
  }
  if (a2 < 1)
  {
    v14 = 128;
    v8 = 130;
    goto LABEL_11;
  }
  v9 = v7 - a3;
  v11 = (*(unsigned __int16 *)(a6 + 2 * (v7 - a3)) + 32) >> 6;
  v13 = 128;
  v8 = 130;
  v12 = 2;
  v10 = v11;
LABEL_6:
  *(_DWORD *)((unint64_t)&v16 | (4 * v12)) = v11;
  if (a1 + 1 >= a3)
  {
    v14 = 128;
  }
  else
  {
    v14 = (*(unsigned __int16 *)(a6 + 2 * (v9 + 1)) + 32) >> 6;
    HIDWORD(v16) = v14;
  }
LABEL_12:
  result = COERCE_FLOAT(vminvq_s32(vminq_s32(vabdq_s32((int32x4_t)v16, vdupq_n_s32(a5)), vdupq_n_s32(((v8 + v14 + v13 + v10) >> 2) - a5))));
  *(float *)(a7 + 4 * v7) = result;
  return result;
}

uint64_t sub_1B682F38C(int a1, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t result;

  if ((int)(a4 + 15) >> 4 >= (int)(a3 + 15) >> 4)
    v7 = (int)(a3 + 15) >> 4;
  else
    v7 = (int)(a4 + 15) >> 4;
  v8 = (a2 - v7) & ~((a2 - v7) >> 31);
  if (v7 + a2 >= (int)a4)
    v9 = a4;
  else
    v9 = (v7 + a2);
  if ((int)v8 >= (int)v9)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    LODWORD(v12) = v7 + a1;
    if (v7 + a1 >= (int)a3)
      v12 = a3;
    else
      v12 = v12;
    v13 = (a1 - v7) & ~((a1 - v7) >> 31);
    v14 = (unsigned __int16 *)(a6 + 2 * (v13 + (int)a3 * v8));
    do
    {
      if ((int)v12 > (int)v13)
      {
        v15 = v14;
        v16 = v12 - v13;
        do
        {
          v17 = *v15++;
          v11 += v17;
          --v16;
        }
        while (v16);
        v10 += v12 - v13;
      }
      ++v8;
      v14 += (int)a3;
    }
    while (v8 != v9);
  }
  v18 = a1 + a3 * a2;
  v19 = v11 + (v10 >> 1);
  v20 = __OFSUB__(a5, (v19 / v10 + 32) >> 6);
  v21 = a5 - ((v19 / v10 + 32) >> 6);
  if ((v21 < 0) ^ v20 | (v21 == 0))
    result = 0;
  else
    result = 1;
  if (v21 < 0)
    v21 = -v21;
  *(_DWORD *)(a7 + 4 * v18) = v21;
  return result;
}

float sub_1B682F45C(int a1, int a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  float result;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a1 + a3 * a2;
  v16 = xmmword_1B6918110;
  if (a1 >= 1)
  {
    LODWORD(v16) = (*(_DWORD *)(a6 + 4 * (v7 - 1)) + 32) >> 6;
    v8 = v16 + 2;
    if (a2 > 0)
    {
      v9 = v7 - a3;
      v10 = (*(_DWORD *)(a6 + 4 * (v7 - a3)) + 32) >> 6;
      DWORD2(v16) = v10;
      v11 = (*(_DWORD *)(a6 + 4 * (v7 + ~a3)) + 32) >> 6;
      v12 = 1;
      v13 = v11;
      goto LABEL_6;
    }
    v14 = 128;
LABEL_11:
    v10 = 128;
    v13 = 128;
    goto LABEL_12;
  }
  if (a2 < 1)
  {
    v14 = 128;
    v8 = 130;
    goto LABEL_11;
  }
  v9 = v7 - a3;
  v11 = (*(_DWORD *)(a6 + 4 * (v7 - a3)) + 32) >> 6;
  v13 = 128;
  v8 = 130;
  v12 = 2;
  v10 = v11;
LABEL_6:
  *(_DWORD *)((unint64_t)&v16 | (4 * v12)) = v11;
  if (a1 + 1 >= a3)
  {
    v14 = 128;
  }
  else
  {
    v14 = (*(_DWORD *)(a6 + 4 * (v9 + 1)) + 32) >> 6;
    HIDWORD(v16) = v14;
  }
LABEL_12:
  result = COERCE_FLOAT(vminvq_s32(vminq_s32(vabdq_s32((int32x4_t)v16, vdupq_n_s32(a5)), vdupq_n_s32(((v8 + v14 + v13 + v10) >> 2) - a5))));
  *(float *)(a7 + 4 * v7) = result;
  return result;
}

uint64_t sub_1B682F5BC(int a1, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t result;

  if ((int)(a4 + 15) >> 4 >= (int)(a3 + 15) >> 4)
    v7 = (int)(a3 + 15) >> 4;
  else
    v7 = (int)(a4 + 15) >> 4;
  v8 = (a2 - v7) & ~((a2 - v7) >> 31);
  if (v7 + a2 >= (int)a4)
    v9 = a4;
  else
    v9 = (v7 + a2);
  if ((int)v8 >= (int)v9)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    LODWORD(v12) = v7 + a1;
    if (v7 + a1 >= (int)a3)
      v12 = a3;
    else
      v12 = v12;
    v13 = (a1 - v7) & ~((a1 - v7) >> 31);
    v14 = (int *)(a6 + 4 * (v13 + (int)a3 * v8));
    do
    {
      if ((int)v12 > (int)v13)
      {
        v15 = v14;
        v16 = v12 - v13;
        do
        {
          v17 = *v15++;
          v11 += v17;
          --v16;
        }
        while (v16);
        v10 += v12 - v13;
      }
      ++v8;
      v14 += (int)a3;
    }
    while (v8 != v9);
  }
  v18 = a1 + a3 * a2;
  v19 = v11 + (v10 >> 1);
  v20 = __OFSUB__(a5, (v19 / v10 + 32) >> 6);
  v21 = a5 - ((v19 / v10 + 32) >> 6);
  if ((v21 < 0) ^ v20 | (v21 == 0))
    result = 0;
  else
    result = 1;
  if (v21 < 0)
    v21 = -v21;
  *(_DWORD *)(a7 + 4 * v18) = v21;
  return result;
}

uint64_t sub_1B682F68C(uint64_t a1, signed int a2, signed int a3, int a4)
{
  signed int v4;
  signed int v5;
  char v6;
  signed int v7;
  int v8;
  int v9;
  int v10;

  v4 = a2 & 0xFFFFFFF8;
  if (a4 >= 3)
    v5 = a3;
  else
    v5 = a3 & 0xFFFFFFF8;
  if (a4 <= 3)
    v6 = 3;
  else
    v6 = a4;
  if (a4 >= 3)
    v4 = a2;
  v7 = *(_DWORD *)(a1 + 20);
  if (v7 >= v5 + (1 << v6))
    v7 = v5 + (1 << v6);
  if (v5 >= v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = v4 + (1 << v6);
    if (*(_DWORD *)(a1 + 16) < v9)
      v9 = *(_DWORD *)(a1 + 16);
    do
    {
      if (v4 < v9)
      {
        v10 = v4;
        do
        {
          v8 += *(char *)(*(_QWORD *)(a1 + 1720)
                        + (v5 >> 3)
                        * (*(__int16 *)(*(_QWORD *)(a1 + 304) + 8 * *(int *)(*(_QWORD *)(a1 + 304) + 16) + 24) >> 3)
                        + (v10 >> 3));
          v10 += 8;
        }
        while (v10 < v9);
      }
      v5 += 8;
    }
    while (v5 < v7);
  }
  return (v8 >> (2 * v6 - 6));
}

unint64_t sub_1B682F744(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7)
{
  unint64_t result;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t j;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t k;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;

  switch(a7)
  {
    case 0:
      return sub_1B682FD38(a1, a2, a3, a4, a5, a6);
    case 1:
      v8 = 1 << (a4 - 3);
      v9 = (a6 - a3) >> 3;
      if (v9 >= v8)
        v9 = 1 << (a4 - 3);
      if (v9 < 1)
      {
        LODWORD(result) = -1;
LABEL_63:
        v66 = __clz(result);
        v67 = v66 + 1;
        v68 = ((_DWORD)result << (v66 + 1));
        goto LABEL_67;
      }
      v10 = 0;
      if ((a5 - a2) >> 3 < v8)
        v8 = (a5 - a2) >> 3;
      v11 = (uint64_t)a5 >> 3;
      v12 = *(_QWORD *)(a1 + 1328) + 4 * (int)v11 * (uint64_t)(a3 >> 3) + 4 * (a2 >> 3);
      v13 = 4 * v11;
      result = 0xFFFFFFFFLL;
      do
      {
        if (v8 >= 1)
        {
          v14 = 0;
          do
          {
            v15 = *(_DWORD *)(v12 + v14);
            if (v15 >= result)
              result = result;
            else
              result = v15;
            v14 += 4;
          }
          while (4 * v8 != v14);
        }
        ++v10;
        v12 += v13;
      }
      while (v10 != v9);
      if (result >= 2)
        goto LABEL_63;
      return result;
    case 2:
      v16 = *(_DWORD *)a1;
      LODWORD(v17) = 1 << (a4 - *(_DWORD *)a1);
      v18 = (a6 - a3) >> *(_DWORD *)a1;
      if (v18 >= (int)v17)
        v18 = 1 << (a4 - *(_DWORD *)a1);
      if (v18 < 1)
        return -1;
      v19 = 0;
      v20 = 2 * v16;
      v21 = (a5 - a2) >> v16;
      if (v21 >= (int)v17)
        v17 = v17;
      else
        v17 = v21;
      v22 = a5 >> v16;
      v23 = a2 >> v16;
      v24 = (int)v22 * (uint64_t)(a3 >> v16);
      v25 = *(_QWORD *)(a1 + 1392) + 8 * v24 + 8 * (a2 >> v16);
      v26 = *(_QWORD *)(a1 + 1376) + 4 * v24 + 4 * v23;
      v27 = 1 << (v20 - 1);
      v28 = 4 * v22;
      v29 = 8 * v22;
      result = -1;
      do
      {
        if ((int)v17 >= 1)
        {
          for (i = 0; i != v17; ++i)
          {
            v31 = (*(_DWORD *)(v26 + 4 * i) * *(_DWORD *)(v26 + 4 * i)) >> v20;
            if ((unint64_t)(*(_QWORD *)(v25 + 8 * i) + (int)v27 - v31) >> v20 < result)
              result = (unint64_t)(*(_QWORD *)(v25 + 8 * i) + v27 - v31) >> v20;
          }
        }
        ++v19;
        v26 += v28;
        v25 += v29;
      }
      while (v19 != v18);
      return result;
    case 3:
      v32 = *(_DWORD *)a1;
      LODWORD(v33) = 1 << (a4 - *(_DWORD *)a1);
      v34 = (a6 - a3) >> *(_DWORD *)a1;
      if (v34 >= (int)v33)
        v34 = 1 << (a4 - *(_DWORD *)a1);
      if (v34 < 1)
      {
        LODWORD(v47) = -1;
      }
      else
      {
        v35 = 0;
        v36 = 2 * v32;
        v37 = (a5 - a2) >> v32;
        if (v37 >= (int)v33)
          v33 = v33;
        else
          v33 = v37;
        v38 = a5 >> v32;
        v39 = a3 >> v32;
        v40 = a2 >> v32;
        v41 = (int)v38 * (uint64_t)v39;
        v42 = *(_QWORD *)(a1 + 1392) + 8 * v41 + 8 * v40;
        v43 = *(_QWORD *)(a1 + 1376) + 4 * v41 + 4 * v40;
        v44 = 1 << (v36 - 1);
        v45 = 4 * v38;
        v46 = 8 * v38;
        v47 = -1;
        do
        {
          if ((int)v33 >= 1)
          {
            for (j = 0; j != v33; ++j)
            {
              v49 = (*(_DWORD *)(v43 + 4 * j) * *(_DWORD *)(v43 + 4 * j)) >> v36;
              if ((unint64_t)(*(_QWORD *)(v42 + 8 * j) + (int)v44 - v49) >> v36 < v47)
                v47 = (unint64_t)(*(_QWORD *)(v42 + 8 * j) + v44 - v49) >> v36;
            }
          }
          ++v35;
          v43 += v45;
          v42 += v46;
        }
        while (v35 != v34);
        result = v47;
        if (v47 < 2)
          return result;
      }
      v66 = __clz(v47);
      v67 = v66 + 1;
      v68 = ((_DWORD)v47 << (v66 + 1));
LABEL_67:
      v69 = ((byte_1B69327A4[v68 >> 24] << 12) | 0x200000u) >> (v67 >> 1);
      if ((v66 & 1) != 0)
        v70 = v69;
      else
        v70 = (11585 * v69) >> 14;
      return (v70 + 16) >> 5;
    case 4:
      v50 = *(_DWORD *)a1;
      LODWORD(v51) = 1 << (a4 - *(_DWORD *)a1);
      if ((a6 - a3) >> *(_DWORD *)a1 >= (int)v51)
        v52 = 1 << (a4 - *(_DWORD *)a1);
      else
        v52 = (a6 - a3) >> *(_DWORD *)a1;
      if (v52 < 1)
        return 0;
      v53 = 0;
      v54 = 0;
      v55 = 2 * v50;
      v56 = (a5 - a2) >> v50;
      v51 = v56 >= (int)v51 ? v51 : v56;
      v57 = a5 >> v50;
      v58 = a2 >> v50;
      v59 = (int)v57 * (uint64_t)(a3 >> v50);
      v60 = *(_QWORD *)(a1 + 1392) + 8 * v59 + 8 * (a2 >> v50);
      v61 = *(_QWORD *)(a1 + 1376) + 4 * v59 + 4 * v58;
      v62 = 4 * v57;
      v63 = 8 * v57;
      do
      {
        if ((int)v51 >= 1)
        {
          for (k = 0; k != v51; ++k)
            v54 += (*(_QWORD *)(v60 + 8 * k)
                  + (1 << (v55 - 1))
                  - (unint64_t)((*(_DWORD *)(v61 + 4 * k) * *(_DWORD *)(v61 + 4 * k)) >> v55)) >> v55;
        }
        ++v53;
        v61 += v62;
        v60 += v63;
      }
      while (v53 != v52);
      v65 = (v51 & ~((int)v51 >> 31)) * v52;
      if (!(_DWORD)v65)
        return 0;
      return (v54 + (unint64_t)(v65 >> 1)) / v65;
    default:
      return 0;
  }
}

uint64_t sub_1B682FB28(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  signed int v14;
  double v15;
  long double v16;
  double v17;
  int v18;
  int v19;
  double v20;
  int v21;
  double v22;
  double v23;
  int v24;
  unsigned int v25;

  v5 = a1;
  if (a4 >= 1)
  {
    v9 = (_DWORD)a1 << 6;
    switch(a5)
    {
      case 0:
        v10 = ((a3 - a4) << 10) / a4;
        if (v10 >= v9)
          v11 = (_DWORD)a1 << 6;
        else
          v11 = ((a3 - a4) << 10) / a4;
        if (v10 <= -64 * (int)a1)
          v12 = -64 * a1;
        else
          v12 = v11;
        v13 = (v12 > 0) | (v12 >> 31);
        if (v12 < 0)
          v12 = -v12;
        v14 = v13 * ((v12 + 128) >> 8);
        break;
      case 1:
        v15 = (double)v9;
        v16 = exp2((double)v9 * 0.00390625 / 6.0);
        v17 = log2(((double)a4 + v16 * (double)(a3 + 1) + 1.0) / ((double)(a3 + 1) + v16 * (double)(a4 + 1))) * 6.0;
        v18 = (int)((fabs(v17) + 1.0) * 0.5 * (double)(((int)v17 > 0) | ((int)v17 >> 31)));
        v19 = (int)(v15 * 0.00390625);
        if (v18 < v19)
          v19 = v18;
        if (v18 <= (int)-(v15 * 0.00390625))
          v14 = (int)-(v15 * 0.00390625);
        else
          v14 = v19;
        break;
      case 2:
        v20 = (double)v9 * 0.00390625;
        v14 = (int)-v20;
        v21 = (int)v20;
        v22 = (double)(a3 - a4)
            / (double)a4
            * ((double)(a3 - a4)
             / (double)a4)
            * (v20
             * (double)(((int)((double)(a3 - a4) / (double)a4) > 0) | ((int)((double)(a3 - a4) / (double)a4) >> 31)));
        goto LABEL_20;
      case 3:
        v23 = (double)v9 * 0.00390625;
        v14 = (int)-v23;
        v21 = (int)v23;
        v22 = v23
            * ((double)(a3 - a4)
             / (double)a4
             * ((double)(a3 - a4)
              / (double)a4
              * ((double)(a3 - a4)
               / (double)a4)));
LABEL_20:
        if ((int)v22 < v21)
          v21 = (int)v22;
        if ((int)v22 > v14)
          v14 = v21;
        break;
      default:
        v14 = 0;
        break;
    }
    v24 = v14 + v5;
    if (v24 >= 51)
      v25 = 51;
    else
      v25 = v24;
    if (v24 <= a2)
      return a2;
    else
      return v25;
  }
  return v5;
}

uint64_t sub_1B682FD38(uint64_t a1, int a2, int a3, char a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;

  v6 = 1 << (a4 - 3);
  v7 = (a6 - a3) >> 3;
  if (v7 >= v6)
    v7 = 1 << (a4 - 3);
  if ((a5 - a2) >> 3 < v6)
    v6 = (a5 - a2) >> 3;
  if (v7 < 1)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = (uint64_t)a5 >> 3;
    v11 = *(_QWORD *)(a1 + 1328) + 4 * (int)v10 * (uint64_t)(a3 >> 3) + 4 * (a2 >> 3);
    v12 = 4 * v10;
    do
    {
      if (v6 >= 1)
      {
        v13 = 0;
        do
        {
          v9 += *(_DWORD *)(v11 + v13);
          v13 += 4;
        }
        while (4 * v6 != v13);
      }
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  result = (v9 + ((v7 * v6) >> 1)) / (v7 * v6);
  if (result >= 2)
  {
    v15 = __clz(result);
    if ((v15 & 1) != 0)
      v16 = ((byte_1B69327A4[(unint64_t)((_DWORD)result << (v15 + 1)) >> 24] << 12) | 0x200000u) >> ((v15 + 1) >> 1);
    else
      v16 = (11585
           * (((byte_1B69327A4[(unint64_t)((_DWORD)result << (v15 + 1)) >> 24] << 12) | 0x200000u) >> ((v15 + 1) >> 1))) >> 14;
    return (v16 + 16) >> 5;
  }
  return result;
}

unsigned __int16 *sub_1B682FE30(uint64_t a1, int a2, int a3, char a4, int a5, int a6)
{
  unsigned __int16 *result;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  unsigned __int16 v26;

  if (a5)
    return (unsigned __int16 *)sub_1B688DF2C(*(_QWORD *)(a1 + 344), a2 - a3, a6);
  v7 = *(_QWORD *)(a1 + 360);
  v8 = 1 << a4;
  v9 = (1 << a4) - 1;
  v10 = v9 & a2;
  v11 = *(unsigned int *)(v7 + 4);
  if ((_DWORD)v11)
  {
    v12 = 12;
    do
    {
      v13 = v12;
      v14 = *(unsigned __int16 *)(v7 + 2 * v12);
      v15 = v10 == v14;
      if (v12 - 11 >= v11)
        break;
      ++v12;
    }
    while (v10 != v14);
    v16 = v13 - 12;
    v17 = *(unsigned int *)(v7 + 4);
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v15 = 0;
  }
  v18 = v7 + 2 * v17;
  *(_WORD *)(v18 + 56) = a2;
  v19 = (unsigned __int16 *)(v18 + 56);
  *(v19 - 16) = v10;
  result = v19 - 16;
  v20 = 1 << v11;
  v21 = *(unsigned __int16 *)(v7 + 216);
  v22 = v21 & ~(1 << v11);
  v23 = v21 | (1 << v11);
  if (!a6)
    LOWORD(v23) = v22;
  *(_WORD *)(v7 + 216) = v23;
  v24 = *(_WORD *)(v7 + 218);
  if (v15)
  {
    v25 = v9 & a3;
    v26 = v24 | v20;
    *(_WORD *)(v7 + 218) = v26;
    *(_DWORD *)(v7 + 4 * v17 + 152) = (*result + a3 - (v25 + *v19)) / v8;
    if ((v26 & (unsigned __int16)(1 << v16)) == 0)
    {
      *(_WORD *)(v7 + 218) = v26 | (1 << v16);
      *(_DWORD *)(v7 + 4 * v16 + 152) = (*(unsigned __int16 *)(v7 + 2 * v16 + 24)
                                         + a3
                                         - (v25
                                          + *(unsigned __int16 *)(v7 + 2 * v16 + 56)))
                                        / v8;
    }
  }
  else
  {
    *(_WORD *)(v7 + 218) = v24 & ~(_WORD)v20;
  }
  *(_DWORD *)(v7 + 4) = v11 + 1;
  return result;
}

uint64_t sub_1B682FF60(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  _QWORD *i;
  _QWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  int v29;
  void *v30;
  int v31;
  int v32;
  uint64_t **v34;
  _DWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t k;
  int v41;
  int v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  char v48;
  uint64_t **m;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t *v52;
  char v53;
  uint64_t **n;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t **ii;
  uint64_t **v62;
  int v63;
  _DWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  int v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  int v86;
  char v88;
  int v89;
  __int32 *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t **v94;
  BOOL v95;
  _QWORD v97[2];
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  _QWORD v111[2];
  char v112;
  _DWORD v113[7];
  __int32 v114[16];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 296);
  v3 = v2[73];
  v4 = *(unsigned int *)(v3 + 3744);
  v5 = v2[93];
  v6 = v2[76];
  v7 = *(_DWORD *)(v6 + 12);
  v101 = *(_DWORD *)(v6 + 680);
  v102 = *(char *)(v3 + 3335);
  v8 = *(_DWORD *)(v3 + 3688);
  v9 = *(_QWORD *)(v3 + 12688);
  v99 = *(char *)(v3 + 3333);
  v104 = &v109;
  if (!v8)
  {
    v100 = *(unsigned __int8 *)(v9 + 198) + 1;
    v109 = 0;
    v110 = 0;
    v108 = (uint64_t *)&v109;
LABEL_5:
    v106 = 0;
    v107 = 0;
    v103 = &v106;
    v105 = &v106;
    sub_1B67CDD68(v5);
    v12 = *(_QWORD *)(a1 + 296);
    v13 = *(unsigned __int8 *)(v12 + 3024);
    v98 = a1;
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = v100 - 2;
      while (1)
      {
        v17 = *(_QWORD *)sub_1B67CCE18(v5, *(_DWORD *)(v5 + 4 * v14 + 288));
        if (v17 && *(_DWORD *)(v17 + 40) == 2)
        {
          v18 = *(_DWORD *)(v17 + 680);
          v19 = v109;
          for (i = v104; ; v19 = (uint64_t *)*i)
          {
            v21 = i;
            if (!v19)
              break;
            while (1)
            {
              i = v19;
              v22 = *((_DWORD *)v19 + 7);
              if (v18 > v22)
                break;
              if (v22 <= v18)
                goto LABEL_19;
              v19 = (uint64_t *)i[1];
              if (!v19)
              {
                v21 = i + 1;
                goto LABEL_16;
              }
            }
          }
LABEL_16:
          v23 = operator new(0x20uLL);
          v23[7] = v18;
          *(_QWORD *)v23 = 0;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = i;
          *v21 = v23;
          if (*v108)
          {
            v108 = (uint64_t *)*v108;
            v23 = (_DWORD *)*v21;
          }
          sub_1B6779C90(v109, (uint64_t *)v23);
          ++v110;
LABEL_19:
          if (v15 == v16)
          {
LABEL_22:
            if (!v110)
            {
              v11 = 1;
              goto LABEL_128;
            }
LABEL_91:
            if (v99 < 1 || (v76 = (uint64_t)v108, v108 == (uint64_t *)v104))
            {
              v78 = 0;
              goto LABEL_127;
            }
            v77 = 0;
            v78 = 0;
            v79 = v100 - 1;
            v11 = 1;
            while (2)
            {
              v80 = *(_DWORD *)(v76 + 28);
              v81 = (uint64_t *)sub_1B67CCE18(v5, v80);
              v82 = *v81;
              v83 = (std::__shared_weak_count *)v81[1];
              if (v83)
              {
                p_shared_owners = (unint64_t *)&v83->__shared_owners_;
                do
                  v85 = __ldxr(p_shared_owners);
                while (__stxr(v85 + 1, p_shared_owners));
              }
              if (v82)
              {
                v86 = *(_DWORD *)(v82 + 12);
                if (v86)
                {
                  if (v86 > v7 || v77 >= v102)
                  {
LABEL_103:
                    v88 = 0;
                    goto LABEL_108;
                  }
                }
                else if (v77 >= v102)
                {
                  goto LABEL_103;
                }
                ++v77;
                v88 = 1;
LABEL_108:
                if (v78 <= 0xF)
                {
                  v90 = &v114[v78];
                  *(_WORD *)v90 = v80 - v101;
                  *((_BYTE *)v90 + 2) = v88;
                }
                if ((int)++v78 >= v79)
                  v89 = 39;
                else
                  v89 = 0;
                if (v83)
                {
LABEL_114:
                  v91 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }
              }
              else
              {
                v11 = 4294954385;
                v89 = 1;
                if (v83)
                  goto LABEL_114;
              }
              if (v89)
              {
                if (v89 != 39)
                {
LABEL_128:
                  sub_1B6830A50(v106);
                  v10 = v109;
                  goto LABEL_129;
                }
LABEL_127:
                sub_1B688F350(*(_QWORD *)(v98 + 344), v5, v114, v78, v101);
                v11 = 0;
                goto LABEL_128;
              }
              v93 = *(uint64_t **)(v76 + 8);
              if (v93)
              {
                do
                {
                  v94 = (uint64_t **)v93;
                  v93 = (uint64_t *)*v93;
                }
                while (v93);
              }
              else
              {
                do
                {
                  v94 = *(uint64_t ***)(v76 + 16);
                  v95 = *v94 == (uint64_t *)v76;
                  v76 = (uint64_t)v94;
                }
                while (!v95);
              }
              v76 = (uint64_t)v94;
              if (v94 == v104)
                goto LABEL_127;
              continue;
            }
          }
          ++v15;
        }
        if (++v14 == 17)
          goto LABEL_22;
      }
    }
    if ((int)v4 > 0)
    {
      v24 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 40) + 198);
      v25 = v113;
      v26 = v4;
      do
      {
        *v25++ = v24;
        --v26;
      }
      while (v26);
    }
    for (j = 0; j != 17; ++j)
    {
      v28 = sub_1B67CCE18(v5, *(_DWORD *)(v5 + 4 * j + 288));
      if (*(_QWORD *)v28)
      {
        v29 = *(_DWORD *)(*(_QWORD *)v28 + 680);
        LODWORD(v111[0]) = 0;
        if ((int)v4 >= 1)
        {
          v30 = v28;
          v31 = 0;
          do
          {
            v32 = *(_DWORD *)(*(_QWORD *)v30 + 12);
            if (v32 <= v7 && v32 <= v31)
            {
              v34 = sub_1B68308E8((uint64_t **)&v105, v31, v111);
              v35 = operator new(0x18uLL);
              v35[4] = v29;
              v36 = v34[5];
              v34 += 5;
              *(_QWORD *)v35 = v36;
              *((_QWORD *)v35 + 1) = v34;
              v36[1] = (uint64_t)v35;
              *v34 = (uint64_t *)v35;
              v34[2] = (uint64_t *)((char *)v34[2] + 1);
            }
            LODWORD(v111[0]) = ++v31;
          }
          while ((_DWORD)v4 != v31);
        }
      }
    }
    v97[1] = v97;
    MEMORY[0x1E0C80A78]();
    v38 = (char *)v97 - ((v37 + 15) & 0x7FFFFFFF0);
    LODWORD(v111[0]) = 0;
    v39 = v4 - 1;
    if ((int)v4 < 1)
    {
      v58 = v110;
    }
    else
    {
      for (k = 0; k != v4; LODWORD(v111[0]) = k)
      {
        if (sub_1B68308E8((uint64_t **)&v105, k, v111)[7] && v110 < (int)v113[k])
        {
          v41 = *((_DWORD *)sub_1B68308E8((uint64_t **)&v105, k, v111)[6] + 4);
          sub_1B68309B8((uint64_t *)&v108, v41, v41);
          v42 = *(_DWORD *)(*(_QWORD *)sub_1B67CCE18(v5, v41) + 40);
          v43 = sub_1B68308E8((uint64_t **)&v105, k, v111);
          v44 = v43[6];
          v45 = *v44;
          *(_QWORD *)(v45 + 8) = v44[1];
          *(_QWORD *)v44[1] = v45;
          v43[7] = (uint64_t *)((char *)v43[7] - 1);
          operator delete(v44);
          v46 = v42 == 2;
          v47 = v42 == 1;
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
        if (sub_1B68308E8((uint64_t **)&v105, k, v111)[7])
          v48 = v46;
        else
          v48 = 1;
        if ((v48 & 1) == 0 && v110 < (int)v113[k])
        {
          for (m = sub_1B68308E8((uint64_t **)&v105, k, v111) + 6; ; m = (uint64_t **)(v50 + 1))
          {
            v50 = *m;
            if (v50 == (uint64_t *)(sub_1B68308E8((uint64_t **)&v105, k, v111) + 5))
              goto LABEL_55;
            if (*(_DWORD *)(*(_QWORD *)sub_1B67CCE18(v5, *((_DWORD *)v50 + 4)) + 40) == 2)
              break;
          }
          sub_1B68309B8((uint64_t *)&v108, *((_DWORD *)v50 + 4), *((_DWORD *)v50 + 4));
          v51 = sub_1B68308E8((uint64_t **)&v105, k, v111);
          v52 = (uint64_t *)*v50;
          v52[1] = v50[1];
          *(_QWORD *)v50[1] = v52;
          v51[7] = (uint64_t *)((char *)v51[7] - 1);
          operator delete(v50);
        }
LABEL_55:
        if (sub_1B68308E8((uint64_t **)&v105, k, v111)[7])
          v53 = v47;
        else
          v53 = 1;
        if ((v53 & 1) == 0 && v110 < (int)v113[k])
        {
          for (n = sub_1B68308E8((uint64_t **)&v105, k, v111) + 6; ; n = (uint64_t **)(v55 + 1))
          {
            v55 = *n;
            if (v55 == (uint64_t *)(sub_1B68308E8((uint64_t **)&v105, k, v111) + 5))
              goto LABEL_65;
            if (*(_DWORD *)(*(_QWORD *)sub_1B67CCE18(v5, *((_DWORD *)v55 + 4)) + 40) == 1)
              break;
          }
          sub_1B68309B8((uint64_t *)&v108, *((_DWORD *)v55 + 4), *((_DWORD *)v55 + 4));
          v56 = sub_1B68308E8((uint64_t **)&v105, k, v111);
          v57 = (uint64_t *)*v55;
          v57[1] = v55[1];
          *(_QWORD *)v55[1] = v57;
          v56[7] = (uint64_t *)((char *)v56[7] - 1);
          operator delete(v55);
        }
LABEL_65:
        v58 = v110;
        *(_DWORD *)&v38[4 * k++] = v110;
      }
    }
    v59 = (int)v113[v39];
LABEL_69:
    if (v58 >= v59)
      goto LABEL_91;
    v60 = v106;
    for (ii = v103; ; v60 = *ii)
    {
      v62 = ii;
      if (!v60)
        goto LABEL_78;
      while (1)
      {
        ii = (uint64_t **)v60;
        v63 = *((_DWORD *)v60 + 8);
        if ((int)v4 <= v63)
          break;
        if (v63 >= v39)
        {
          v64 = ii;
          goto LABEL_81;
        }
        v60 = ii[1];
        if (!v60)
        {
          v62 = ii + 1;
LABEL_78:
          v64 = operator new(0x40uLL);
          v111[1] = v103;
          v64[8] = v39;
          *((_QWORD *)v64 + 5) = v64 + 10;
          *((_QWORD *)v64 + 6) = v64 + 10;
          *((_QWORD *)v64 + 7) = 0;
          v112 = 1;
          *(_QWORD *)v64 = 0;
          *((_QWORD *)v64 + 1) = 0;
          *((_QWORD *)v64 + 2) = ii;
          *v62 = (uint64_t *)v64;
          v65 = (uint64_t *)v64;
          if (*v105)
          {
            v105 = (uint64_t **)*v105;
            v65 = *v62;
          }
          sub_1B6779C90(v106, v65);
          ++v107;
          v111[0] = 0;
          sub_1B6830B1C((uint64_t)v111);
LABEL_81:
          if (!*((_QWORD *)v64 + 7))
            goto LABEL_91;
          LODWORD(v111[0]) = 0;
          if ((int)v4 >= 1)
          {
            v66 = 0;
            v67 = v38;
            v68 = v4;
            do
            {
              if (sub_1B68308E8((uint64_t **)&v105, v66, v111)[7])
              {
                v69 = v110;
                if (v110 < v59 && *(_DWORD *)&v38[4 * v66] < v113[v66])
                {
                  v70 = sub_1B68308E8((uint64_t **)&v105, v66, v111);
                  sub_1B68309B8((uint64_t *)&v108, *((_DWORD *)v70[6] + 4), *((_DWORD *)v70[6] + 4));
                  v71 = sub_1B68308E8((uint64_t **)&v105, v66, v111);
                  v72 = v71[6];
                  v73 = *v72;
                  *(_QWORD *)(v73 + 8) = v72[1];
                  *(_QWORD *)v72[1] = v73;
                  v71[7] = (uint64_t *)((char *)v71[7] - 1);
                  operator delete(v72);
                  v74 = v67;
                  v75 = v68;
                  if (v110 > v69)
                  {
                    do
                    {
                      ++*v74++;
                      --v75;
                    }
                    while (v75);
                  }
                }
              }
              LODWORD(v111[0]) = ++v66;
              --v68;
              ++v67;
            }
            while (v66 != v4);
          }
          v58 = v110;
          goto LABEL_69;
        }
      }
    }
  }
  v100 = *(_DWORD *)(*(_QWORD *)(v9 + 2048) + 1320);
  v109 = 0;
  v110 = 0;
  v108 = (uint64_t *)&v109;
  if (v8 != 1)
    goto LABEL_5;
  v10 = 0;
  v11 = 4294954394;
LABEL_129:
  sub_1B6830A90(v10);
  return v11;
}

void sub_1B68308A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B6830A50(*(_QWORD **)(v1 - 256));
  sub_1B6830A90(*(_QWORD **)(v1 - 232));
  _Unwind_Resume(a1);
}

uint64_t **sub_1B68308E8(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  _DWORD *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = operator new(0x40uLL);
    v12[1] = v6;
    v10[8] = *a3;
    *((_QWORD *)v10 + 5) = v10 + 10;
    *((_QWORD *)v10 + 6) = v10 + 10;
    *((_QWORD *)v10 + 7) = 0;
    v13 = 1;
    sub_1B6830AC8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_1B6830B1C((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_1B68309B8(uint64_t *result, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 >= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 <= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_1B6830AC8(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_1B6830A50(_QWORD *a1)
{
  if (a1)
  {
    sub_1B6830A50(*a1);
    sub_1B6830A50(a1[1]);
    sub_1B677A398(a1 + 5);
    operator delete(a1);
  }
}

void sub_1B6830A90(_QWORD *a1)
{
  if (a1)
  {
    sub_1B6830A90(*a1);
    sub_1B6830A90(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_1B6830AC8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1B6779C90(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_1B6830B1C(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1B677A398(v1 + 5);
    operator delete(v1);
  }
}

uint64_t sub_1B6830B60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t j;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t n;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int16 *v56;
  int v57;
  uint64_t v58;
  __int16 *v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t result;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t m;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint8_t *v82;
  int v83;
  uint64_t v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  int v98;
  _BOOL4 v99;
  _BOOL4 v100;
  BOOL v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t **v112;
  _DWORD *v113;
  uint64_t *v114;
  __n128 v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  _QWORD *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  char *v140;
  unsigned int v141;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  _DWORD *v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ii;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  uint64_t *v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  uint64_t jj;
  int v201;
  int v202;
  __n128 *v203;
  __n128 *v204;
  __n128 *v205;
  uint64_t v206;
  uint64_t v207;
  __n128 v208;
  double v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  int *v213;
  int v214;
  int v215;
  int v216;
  _DWORD *v217;
  unint64_t v218;
  int v219;
  double v220;
  __n128 *v221;
  uint64_t v222;
  uint64_t v223;
  __n128 v224;
  int v225;
  unsigned int *v226;
  uint64_t kk;
  unsigned int v228;
  unsigned int v229;
  int v230;
  uint64_t k;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  int v237;
  FILE **v238;
  NSObject *v239;
  uint64_t *v240;
  uint64_t *v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  int v249;
  char v250;
  int v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  _DWORD *v257;
  unint64_t v258;
  unint64_t v259;
  _BOOL4 *v260;
  _BOOL4 v261;
  __n128 *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int *v266;
  void *v267;
  void *v268;
  uint64_t **v269;
  _DWORD *v270;
  uint64_t *v271;
  _QWORD **v272;
  int v273;
  int v274;
  int *v275;
  int v276;
  int v277;
  uint64_t **v278;
  _DWORD *v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t v282;
  BOOL v283;
  int *mm;
  uint64_t **v286;
  _DWORD *v287;
  uint64_t *v288;
  uint64_t v289;
  _QWORD *v290;
  int *nn;
  uint64_t **v292;
  _DWORD *v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t **v296;
  _QWORD *v297;
  _DWORD *v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD **v303;
  int v304;
  int v305;
  uint64_t **v306;
  uint64_t **v307;
  uint64_t *v308;
  _DWORD *v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t **v313;
  uint64_t **v314;
  uint64_t *v315;
  _BYTE *v316;
  _DWORD *v317;
  unint64_t v318;
  _DWORD *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  _DWORD *v324;
  int v325;
  unint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t **v329;
  uint64_t **v330;
  uint64_t *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD *v337;
  int v338;
  uint64_t v339;
  unint64_t v340;
  int v341;
  uint8_t *v342;
  uint64_t v343;
  int v344;
  int v345;
  uint64_t v346;
  unint64_t v347;
  int v348;
  int v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  unsigned __int16 *v353;
  int v354;
  unsigned __int16 *v355;
  unint64_t v356;
  unsigned __int16 *v357;
  const std::nothrow_t *v358;
  unint64_t v359;
  unsigned __int16 *v360;
  BOOL v361;
  unsigned __int16 *v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  int v373;
  int v374;
  uint64_t v375;
  char v376;
  uint64_t v377;
  int v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  unsigned int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t *v391;
  _QWORD *v392[2];
  int v393;
  uint8_t buf[8];
  _QWORD *v395[9];

  v395[7] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v1 = a1[37];
  v2 = *(_QWORD *)(v1 + 584);
  v3 = *(_QWORD *)(v1 + 608);
  v379 = *(_DWORD *)(v3 + 680);
  v4 = *(_DWORD *)(v2 + 3688);
  v5 = *(_QWORD *)(v2 + 12688);
  v6 = *(_QWORD *)(v1 + 40);
  if (v4)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v5 + 2048) + 1320);
    LODWORD(v5) = *(_DWORD *)(*(_QWORD *)(v6 + 2048) + 280);
  }
  else
  {
    v7 = *(unsigned __int8 *)(v5 + 198) + 1;
    LOBYTE(v5) = *(_BYTE *)(v6 + 196);
  }
  v376 = v5 + 4;
  v8 = *(char *)(v2 + 3333);
  v9 = *(char *)(v2 + 3334);
  v10 = *(char *)(v2 + 3335);
  v11 = *(unsigned __int8 *)(v1 + 3024);
  v12 = *(_QWORD *)(v1 + 744);
  v13 = a1[43];
  *(_BYTE *)(v13 + 163) = 0;
  *(_WORD *)(v13 + 176) = 0;
  v380 = v12;
  v377 = v2;
  if (v4 == 1)
  {
    v14 = a1[45];
    *(_DWORD *)(v14 + 4) = 0;
    *(_DWORD *)(v14 + 216) = 0;
    v15 = (int *)sub_1B67CDD68(v12);
    LODWORD(v16) = 0;
    for (i = 16; i != 288; i += 16)
    {
      if (*(_QWORD *)(v12 + i))
        v16 = (v16 + 1);
      else
        v16 = v16;
    }
    v18 = a1[37];
    v19 = *(_QWORD *)(v18 + 608);
    v20 = *(_DWORD *)(v19 + 36);
    v386 = v9;
    if ((v20 & 2) == 0)
      goto LABEL_256;
    v21 = 0;
    for (j = 16; j != 288; j += 16)
    {
      v23 = *(_QWORD *)(v12 + j);
      if (v23)
        LODWORD(v23) = (*(unsigned __int8 *)(v23 + 36) >> 1) & 1;
      v21 += v23;
    }
    if (v21 < v9)
      goto LABEL_256;
    if ((_DWORD)v16)
    {
      v24 = v8;
      v25 = 0;
      v26 = v16 + 1;
      v27 = 0x7FFFFFFF;
      v28 = 0x7FFFFFFF;
      do
      {
        v29 = (uint64_t *)sub_1B67CCE18(v380, v15[(v26 - 2)]);
        v30 = *v29;
        if ((*(_BYTE *)(*v29 + 36) & 2) != 0)
        {
          v31 = *(_DWORD *)(v30 + 40);
          v32 = v31 == 3 && v27 == 0x7FFFFFFF;
          if (v32)
          {
            v27 = *(_DWORD *)(v30 + 680);
          }
          else if (v31 == 2)
          {
            if (v28 == 0x7FFFFFFF)
              v28 = *(_DWORD *)(v30 + 680);
            ++v25;
          }
        }
        --v26;
      }
      while (v26 > 1);
      if (v27 != 0x7FFFFFFF)
      {
        v18 = a1[37];
        *(_DWORD *)(v18 + 432) = v27;
        goto LABEL_122;
      }
      v18 = a1[37];
      if (v28 != 0x7FFFFFFF && v25 > 1)
      {
        *(_DWORD *)(v18 + 432) = v28;
LABEL_122:
        v12 = v380;
        v8 = v24;
        goto LABEL_256;
      }
      v19 = *(_QWORD *)(v18 + 608);
      v20 = *(_DWORD *)(v19 + 36);
      v12 = v380;
      v8 = v24;
    }
    *(_QWORD *)(v19 + 36) = v20 & 0xFFFFFFFC | 1;
LABEL_256:
    if ((*(_BYTE *)(*(_QWORD *)(v18 + 608) + 36) & 1) != 0)
    {
      v230 = 0;
      for (k = 16; k != 288; k += 16)
      {
        v232 = *(_QWORD *)(v12 + k);
        if (v232)
          LODWORD(v232) = *(_BYTE *)(v232 + 36) & 1;
        v230 += v232;
      }
      if (v230 >= v8)
      {
        v233 = v16;
        do
        {
          if ((int)v233 < 1)
            goto LABEL_266;
          v234 = v233 - 1;
          v235 = sub_1B67CCE18(v12, v15[v233 - 1]);
          v233 = v234;
        }
        while ((*(_BYTE *)(*(_QWORD *)v235 + 36) & 1) == 0);
        *(_DWORD *)(a1[37] + 432) = *(_DWORD *)(*(_QWORD *)v235 + 680);
      }
    }
LABEL_266:
    if ((_DWORD)v16)
    {
      v236 = 0;
      v237 = 0;
      v238 = (FILE **)MEMORY[0x1E0C80C10];
      v239 = MEMORY[0x1E0C81028];
      while (1)
      {
        v240 = (uint64_t *)sub_1B67CCE18(v380, *v15);
        if (!*v240)
        {
          if (dword_1EF137CD0 >= 1)
          {
            fprintf(*v238, "Failed to find frame poc=%d in DPB\n", *v15);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v255 = *v15;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v255;
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to find frame poc=%d in DPB\n", buf, 8u);
            }
          }
          return 4294954394;
        }
        v241 = v240;
        v242 = *(_DWORD *)(*v240 + 36);
        if ((v242 & 1) != 0 && (v242 & 2) != 0 && dword_1EF137CD0 >= 2)
        {
          fprintf(*v238, "[Poc %d]: reference poc %d is set as both STR and LTR\n", v379, *v15);
          if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
          {
            v244 = *v15;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v379;
            LOWORD(v395[0]) = 1024;
            *(_DWORD *)((char *)v395 + 2) = v244;
            _os_log_impl(&dword_1B676B000, v239, OS_LOG_TYPE_DEFAULT, "[Poc %d]: reference poc %d is set as both STR and LTR\n", buf, 0xEu);
          }
        }
        if (!v11)
          break;
        v243 = *v241;
        if (*(_DWORD *)(*v241 + 40) != 2 || v237 >= *(char *)(v2 + 3335))
        {
          v245 = *(_DWORD *)(v243 + 680);
          v246 = *(_DWORD *)(v243 + 36);
          goto LABEL_281;
        }
        sub_1B682FE30((uint64_t)a1, *(_DWORD *)(v243 + 680), v379, v376, *(_DWORD *)(v243 + 36) & 1, 1);
        ++v237;
LABEL_283:
        ++v236;
        ++v15;
        if (v16 == v236)
          goto LABEL_284;
      }
      v245 = *(_DWORD *)(*v241 + 680);
      v246 = *(_DWORD *)(*v241 + 36);
      if (v236 >= *(char *)(v2 + 3335))
      {
LABEL_281:
        v247 = v246 & 1;
        v248 = (uint64_t)a1;
        v249 = v379;
        v250 = v376;
        v251 = 0;
      }
      else
      {
        v247 = *(_DWORD *)(*v241 + 36) & 1;
        v248 = (uint64_t)a1;
        v249 = v379;
        v250 = v376;
        v251 = 1;
      }
      sub_1B682FE30(v248, v245, v249, v250, v247, v251);
      goto LABEL_283;
    }
LABEL_284:
    v252 = a1[45];
    if (*(_DWORD *)(v252 + 4) > v386)
      *(_DWORD *)(v252 + 4) = *(char *)(v2 + 3334);
    sub_1B688E170(a1[43], 0);
    v12 = v380;
    v253 = a1;
    v254 = a1[45];
LABEL_455:
    result = sub_1B67CC6B8((_DWORD *)v253[41], v12, v253[43], v254, v379, v376);
    if (!(_DWORD)result)
    {
      v364 = a1[37];
      if (*(_BYTE *)(v364 + 640) != 4)
        return 0;
      v365 = a1[41];
      if (*(_DWORD *)(v365 + 8) || *(_DWORD *)(v365 + 12))
      {
        return 0;
      }
      else
      {
        result = 0;
        *(_BYTE *)(v364 + 640) = 3;
      }
    }
    return result;
  }
  if (*(_DWORD *)(v2 + 3488) != 1)
  {
    v41 = *(_DWORD *)(v1 + 648);
    v42 = *(_QWORD *)(v6 + 264) + 248 * v41;
    v43 = *(_OWORD *)(v42 + 112);
    v45 = *(_OWORD *)(v42 + 64);
    v44 = *(_OWORD *)(v42 + 80);
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(v42 + 96);
    *(_OWORD *)(v13 + 112) = v43;
    *(_OWORD *)(v13 + 64) = v45;
    *(_OWORD *)(v13 + 80) = v44;
    v46 = *(_OWORD *)(v42 + 176);
    v48 = *(_OWORD *)(v42 + 128);
    v47 = *(_OWORD *)(v42 + 144);
    *(_OWORD *)(v13 + 160) = *(_OWORD *)(v42 + 160);
    *(_OWORD *)(v13 + 176) = v46;
    *(_OWORD *)(v13 + 128) = v48;
    *(_OWORD *)(v13 + 144) = v47;
    v50 = *(_OWORD *)(v42 + 208);
    v49 = *(_OWORD *)(v42 + 224);
    v51 = *(_OWORD *)(v42 + 192);
    *(_QWORD *)(v13 + 238) = *(_QWORD *)(v42 + 238);
    *(_OWORD *)(v13 + 208) = v50;
    *(_OWORD *)(v13 + 224) = v49;
    *(_OWORD *)(v13 + 192) = v51;
    v52 = *(_OWORD *)v42;
    v53 = *(_OWORD *)(v42 + 16);
    v54 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v13 + 48) = v54;
    *(_OWORD *)v13 = v52;
    *(_OWORD *)(v13 + 16) = v53;
    if (*(_BYTE *)(v13 + 160))
    {
      v55 = 0;
      v56 = (__int16 *)v13;
      while (1)
      {
        v57 = *v56;
        v56 += 2;
        if (!*(_QWORD *)sub_1B67CCE18(v12, v379 + v57))
          break;
        if (++v55 >= (unint64_t)*(unsigned __int8 *)(v13 + 160))
          goto LABEL_50;
      }
    }
    else
    {
LABEL_50:
      if (!*(_BYTE *)(v13 + 161))
        goto LABEL_429;
      v58 = 0;
      v59 = (__int16 *)(v13 + 64);
      while (1)
      {
        v60 = *v59;
        v59 += 2;
        if (!*(_QWORD *)sub_1B67CCE18(v12, v379 + v60))
          break;
        if (++v58 >= (unint64_t)*(unsigned __int8 *)(v13 + 161))
          goto LABEL_429;
      }
    }
    *(_BYTE *)(v13 + 163) = 0;
    *(_DWORD *)(v13 + 242) = 0;
    *(_WORD *)(v13 + 176) = 0;
    v61 = v2 + 108 * v41;
    v62 = *(unsigned __int8 *)(v61 + 3816);
    if (*(_BYTE *)(v61 + 3816))
    {
      v63 = 0;
      v64 = 0;
      v65 = (unsigned __int8 *)(v61 + 3816);
      v66 = v2 + 108 * v41 + 3820;
      do
      {
        v67 = *(_DWORD *)(v66 + 4 * v63) + v379;
        if ((v379 < 0 || (v67 & 0x80000000) == 0) && *(_QWORD *)sub_1B67CCE18(v12, v67))
        {
          v68 = *(_DWORD *)(v66 + 4 * v63);
          if (v68 < 0)
            ++*(_BYTE *)(v13 + 176);
          else
            ++*(_BYTE *)(v13 + 177);
          *(_DWORD *)&buf[4 * v64++] = v68;
        }
        ++v63;
      }
      while (v63 < *v65);
      v69 = *(unsigned __int8 *)(v13 + 176);
      v62 = *(unsigned __int8 *)(v13 + 177);
    }
    else
    {
      v69 = 0;
      v64 = 0;
    }
    v73 = v62 + v69;
    v74 = v2 + 108 * v41;
    if (v73 < *(unsigned __int8 *)(v74 + 3817))
    {
      v75 = (unsigned __int8 *)(v74 + 3817);
      v76 = sub_1B67CDD68(v12);
      for (m = 0; m != 17; ++m)
      {
        v78 = *(_QWORD *)sub_1B67CCE18(v12, *(_DWORD *)(v76 + 4 * m));
        if (v78)
        {
          v79 = *(_DWORD *)(v78 + 680);
          if ((v79 & 0x80000000) == 0)
          {
            v80 = v79 - v379;
            if (v64 < 1)
            {
LABEL_79:
              if (v80 < 0)
                ++*(_BYTE *)(v13 + 176);
              else
                ++*(_BYTE *)(v13 + 177);
              *(_DWORD *)&buf[4 * v64++] = v80;
            }
            else
            {
              v81 = v64;
              v82 = buf;
              while (1)
              {
                v83 = *(_DWORD *)v82;
                v82 += 4;
                if (v80 == v83)
                  break;
                if (!--v81)
                  goto LABEL_79;
              }
            }
            v69 = *(unsigned __int8 *)(v13 + 176);
            if (*(unsigned __int8 *)(v13 + 177) + v69 >= *v75)
              goto LABEL_86;
          }
        }
      }
      v69 = *(unsigned __int8 *)(v13 + 176);
    }
LABEL_86:
    if (v69)
    {
      if (v64 >= 1)
      {
        v84 = 0;
        v85 = 0;
        v86 = 0;
        while (1)
        {
          v87 = 0;
          v88 = 0x7FFFFFFF;
          v89 = -1;
          do
          {
            v90 = *(_DWORD *)&buf[4 * v87];
            if (v90 < 0 && v85 < -v90 && v88 > -v90)
            {
              v88 = -v90;
              v89 = v87;
            }
            ++v87;
          }
          while (v64 != v87);
          if (v89 > 0xF)
            break;
          v91 = *(_DWORD *)&buf[4 * v89];
          *(_WORD *)(v13 + 2 * v84 + 178) = v86 + ~(_WORD)v91;
          *(_WORD *)(v13 + 242) |= 1 << v84;
          v85 = -v91;
          ++v84;
          v86 = v91;
          if (v84 == v69)
            goto LABEL_96;
        }
      }
    }
    else
    {
LABEL_96:
      v92 = *(unsigned __int8 *)(v13 + 177);
      if (*(_BYTE *)(v13 + 177))
      {
        if (v64 >= 1)
        {
          v93 = 0;
          v94 = 0;
          while (1)
          {
            v95 = 0;
            v96 = 0x7FFFFFFF;
            v97 = -1;
            do
            {
              v98 = *(_DWORD *)&buf[4 * v95];
              v99 = v98 > v94;
              v100 = v98 < v96;
              v101 = !v99 || !v100;
              if (v99 && v100)
                v102 = *(_DWORD *)&buf[4 * v95];
              else
                v102 = v96;
              if (v101)
                v103 = v97;
              else
                v103 = v95;
              if (v98 >= 1)
              {
                v96 = v102;
                v97 = v103;
              }
              ++v95;
            }
            while (v64 != v95);
            if (v97 > 0xF)
              break;
            v104 = *(_DWORD *)&buf[4 * v97];
            *(_WORD *)(v13 + 2 * v93 + 210) = v104 + ~(_WORD)v94;
            *(_WORD *)(v13 + 244) |= 1 << v93++;
            v94 = v104;
            if (v93 == v92)
              goto LABEL_111;
          }
        }
      }
      else
      {
LABEL_111:
        if (v69 + (_DWORD)v92)
          sub_1B688E170(v13, 0);
      }
    }
    goto LABEL_429;
  }
  if (*(_BYTE *)(v2 + 3784))
  {
    LODWORD(v33) = 0;
    v389 = a1[35];
    v34 = *(_QWORD **)(v389 + 8);
    v35 = v34[93];
    v370 = v34[139];
    v36 = v34[76];
    v372 = *(_DWORD *)(v36 + 680);
    for (n = 16; n != 288; n += 16)
    {
      if (*(_QWORD *)(v35 + n))
        v33 = (v33 + 1);
      else
        v33 = v33;
    }
    v38 = v34[73];
    if (*(_BYTE *)(v36 + 136))
    {
      v39 = v34[74];
      if (*(_BYTE *)(v39 + 136))
      {
        v371 = *(_DWORD *)(v39 + 248);
        if (v371 <= 0)
          v371 = *(_DWORD *)(v39 + 240);
        v367 = *(_DWORD *)(v39 + 252);
        if (v367 > 0)
        {
LABEL_125:
          v374 = *(char *)(v38 + 3335);
          v366 = *(char *)(v38 + 3333);
          sub_1B67CDD68(v35);
          if ((_DWORD)v33)
          {
            v116 = 0;
            v368 = v35;
            v369 = v33;
            do
            {
              v117 = *(_DWORD *)(v35 + 4 * v116 + 288);
              v118 = (uint64_t *)sub_1B67CCE18(v35, v117);
              v120 = *v118;
              v119 = (std::__shared_weak_count *)v118[1];
              *(_QWORD *)buf = *v118;
              v395[0] = &v119->__vftable;
              if (v119)
              {
                p_shared_owners = (unint64_t *)&v119->__shared_owners_;
                do
                  v122 = __ldxr(p_shared_owners);
                while (__stxr(v122 + 1, p_shared_owners));
              }
              v123 = v389 + 48 * v116;
              *(_DWORD *)(v123 + 1544) = v117;
              v124 = v117 - v372;
              *(_DWORD *)(v123 + 1548) = v124;
              *(_DWORD *)(v123 + 1552) = 1;
              *(_QWORD *)(v123 + 1536) = 0;
              *(_QWORD *)(v123 + 1528) = *(_QWORD *)(v389 + 16 * v116 + 1256);
              v125 = *(_QWORD *)(v120 + 1216);
              *(_DWORD *)(v123 + 1520) = *(_DWORD *)(v120 + 1224);
              *(_QWORD *)(v123 + 1512) = v125;
              if ((int)v33 > v374
                || ((sub_1B688DF2C(v370, v124, 1), v124 >= 0) ? (v126 = v124) : (v126 = -v124), v126 == 1))
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v389 + 8) + 608) + 136))
                {
                  v391 = (uint64_t *)v120;
                  v392[0] = &v119->__vftable;
                  if (v119)
                  {
                    v127 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v128 = __ldxr(v127);
                    while (__stxr(v128 + 1, v127));
                  }
                  if (*(_DWORD *)(v120 + 248) == v371 && *(_DWORD *)(v120 + 252) == v367)
                  {
                    if ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 32))(v120, 0) != *(_QWORD *)(v120 + 192))
                      *(_BYTE *)(v120 + 272) = 1;
                    *(_OWORD *)(v120 + 88) = *(_OWORD *)(v120 + 192);
                    v115 = *(__n128 *)(v120 + 216);
                    *(__n128 *)(v120 + 112) = v115;
                  }
                  else if (*(_DWORD *)(v120 + 240) == v371 && *(_DWORD *)(v120 + 244) == v367)
                  {
                    v129 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 32))(v120, 0);
                    if (v129 != (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 48))(v120, 0))
                      *(_BYTE *)(v120 + 272) = 1;
                    v130 = 0;
                    v131 = 1;
                    do
                    {
                      v132 = v131;
                      v133 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 48))(v120, v130);
                      v131 = 0;
                      v134 = (_QWORD *)(v120 + 8 * v130);
                      v134[11] = v133;
                      v134[14] = v134[21];
                      v130 = 1;
                    }
                    while ((v132 & 1) != 0);
                  }
                  else
                  {
                    v135 = *(_DWORD *)(v120 + 680) - v372;
                    if (v135 < 0)
                      v135 = v372 - *(_DWORD *)(v120 + 680);
                    if (v135 <= 2)
                    {
                      v136 = v116;
                      v137 = *(int *)(v120 + 280);
                      if ((_DWORD)v137)
                      {
                        v138 = *(_QWORD *)(v120 + 216);
                        v139 = *(int *)(v120 + 276);
                        v140 = *(char **)(v120 + 192);
                        do
                        {
                          --v137;
                          memset(v140, 128, v139);
                          v140 += v138;
                        }
                        while (v137);
                        v141 = *(_DWORD *)(v120 + 280);
                        if (v141 >= 2)
                        {
                          v142 = *(int *)(v120 + 276);
                          v143 = *(_QWORD *)(v120 + 224);
                          v144 = (uint64_t)(int)v141 >> 1;
                          v145 = *(char **)(v120 + 200);
                          do
                          {
                            --v144;
                            memset(v145, 128, v142);
                            v145 += v143;
                          }
                          while (v144);
                        }
                      }
                      v146 = 0;
                      v147 = 1;
                      v116 = v136;
                      do
                      {
                        v148 = v147;
                        v149 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 48))(v120, v146);
                        v147 = 0;
                        *(_QWORD *)(*(_QWORD *)(v389 + 2688) + 8 * v146) = v149;
                        v154 = (_QWORD *)(v120 + 8 * v146);
                        *(_QWORD *)(*(_QWORD *)(v389 + 2688) + 8 * v146 + 16) = v154[24];
                        v155 = *(_QWORD *)(v389 + 2688);
                        v156 = v155 + 8 * v146;
                        *(_QWORD *)(v156 + 32) = v154[21];
                        *(_QWORD *)(v156 + 48) = v154[27];
                        v146 = 1;
                      }
                      while ((v148 & 1) != 0);
                      *(_QWORD *)(v155 + 64) = *(_QWORD *)(v120 + 240);
                      *(_DWORD *)(v155 + 72) = v371;
                      *(_DWORD *)(v155 + 76) = v367;
                      sub_1B685223C(v155, v150, v151, v152, v153);
                      *(_OWORD *)(v120 + 88) = *(_OWORD *)(v120 + 192);
                      *(_OWORD *)(v120 + 112) = *(_OWORD *)(v120 + 216);
                      *(_DWORD *)(v120 + 248) = v371;
                      *(_DWORD *)(v120 + 252) = v367;
                      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v120 + 80))(v120, 0, *(unsigned int *)(v120 + 280), 0);
                      *(_BYTE *)(v120 + 272) = 1;
                    }
                  }
                  if (v119)
                  {
                    v157 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                      std::__shared_weak_count::__release_weak(v119);
                    }
                  }
                }
                v375 = v116;
                v159 = *(_QWORD *)(v389 + 8);
                v160 = *(_QWORD *)(v159 + 608);
                v161 = *(_DWORD *)(*(_QWORD *)buf + 680) - *(_DWORD *)(v160 + 680);
                if (v161 < 0)
                  v161 = *(_DWORD *)(v160 + 680) - *(_DWORD *)(*(_QWORD *)buf + 680);
                v373 = v161;
                v162 = *(_DWORD *)(v159 + 816);
                v163 = *(_DWORD *)(v159 + 824);
                if (v162 >= v163)
                {
                  v165 = 0;
                  v164 = 0;
                }
                else
                {
                  v164 = 0;
                  v165 = 0;
                  v382 = *(_QWORD *)(*(_QWORD *)(v159 + 592) + 112);
                  v383 = *(_QWORD *)(*(_QWORD *)buf + 112);
                  v385 = *(_QWORD *)buf;
                  v166 = *(_QWORD *)(v160 + 112);
                  LODWORD(v160) = *(_DWORD *)(v159 + 820);
                  do
                  {
                    v167 = *(int *)(v159 + 812);
                    if ((int)v167 < (int)v160)
                    {
                      v168 = (8 * v162);
                      v381 = v162;
                      v388 = *(_QWORD *)(v389 + 16 * (int)v375 + 1256) + 4 * *(_DWORD *)(v159 + 828) * v162;
                      v169 = (8 * v167);
                      do
                      {
                        v170 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v159 + 592)
                                                                                           + 16))(*(_QWORD *)(v159 + 592), v169, v168, 0);
                        v171 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v385 + 16))(v385, v169, v168, 0);
                        v172 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v159 + 608)
                                                                                           + 16))(*(_QWORD *)(v159 + 608), v169, v168, 0);
                        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v389 + 48))(8, 0, v383, v171, v166, v172);
                        v173 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v389 + 2376))(8, 8, v170, v382, v172, v166);
                        *(_DWORD *)(v388 + 4 * v167) = v173;
                        v165 += v173;
                        ++v164;
                        ++v167;
                        v160 = *(int *)(v159 + 820);
                        v169 = (v169 + 8);
                      }
                      while (v167 < v160);
                      v163 = *(_DWORD *)(v159 + 824);
                      v12 = v380;
                      v162 = v381;
                    }
                    ++v162;
                  }
                  while (v162 < v163);
                }
                v35 = v368;
                if (v373 == 1)
                {
                  v174 = (v165 + (v164 >> 1)) / v164;
                  *(_DWORD *)(v389 + 2300) = v174;
                  *(_DWORD *)(*(_QWORD *)(v159 + 608) + 1220) = v174;
                }
                v119 = (std::__shared_weak_count *)v395[0];
                v2 = v377;
                v33 = v369;
                v116 = v375;
              }
              if (v119)
              {
                v175 = (unint64_t *)&v119->__shared_owners_;
                do
                  v176 = __ldaxr(v175);
                while (__stlxr(v176 - 1, v175));
                if (!v176)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              ++v116;
            }
            while (v116 != v33);
          }
          v177 = *(_QWORD *)(v389 + 8);
          if (*(_BYTE *)(v177 + 640))
          {
            v178 = *(_DWORD **)(v177 + 608);
            v179 = v178[304];
            v180 = *(_DWORD *)(v389 + 2280);
            if (25 * v179 >= (22 * v180))
              v181 = 0;
            else
              v181 = 2 * (20 * v178[305] > (23 * *(_DWORD *)(v389 + 2292)));
            v182 = *(_DWORD *)(v389 + 2296);
            if (v182 - 2 < 2)
            {
              if (50 * v179 > (47 * v180))
                v183 = 1;
              else
                v183 = 3;
              v178[306] = v183;
            }
            else if (v182 <= 1)
            {
              v178[306] = v181;
            }
          }
          else
          {
            v115 = 0uLL;
            *(_OWORD *)(v389 + 2280) = 0u;
          }
          if ((int)v33 > v374)
          {
            v184 = *(_QWORD *)(v389 + 8);
            v185 = *(_DWORD *)(v184 + 816);
            v186 = *(_DWORD *)(v184 + 824);
            v187 = *(_QWORD *)(v184 + 744);
            if (v185 < v186)
            {
              LODWORD(v188) = 0;
              for (ii = 16; ii != 288; ii += 16)
              {
                if (*(_QWORD *)(v187 + ii))
                  v188 = (v188 + 1);
                else
                  v188 = v188;
              }
              v190 = *(_DWORD *)(v184 + 812);
              v191 = *(_DWORD *)(v184 + 820);
              do
              {
                if (v190 < v191)
                {
                  v192 = v190;
                  do
                  {
                    if ((_DWORD)v188)
                    {
                      v193 = 0;
                      v194 = 0;
                      v195 = -1;
                      v196 = (uint64_t *)(v389 + 1528);
                      do
                      {
                        v197 = *v196;
                        v196 += 6;
                        v198 = *(_DWORD *)(v197 + 4 * *(_DWORD *)(v184 + 828) * v185);
                        if (v198 < v195)
                        {
                          v195 = v198;
                          v194 = v193;
                        }
                        ++v193;
                      }
                      while (v188 != v193);
                    }
                    else
                    {
                      v194 = 0;
                    }
                    ++*(_DWORD *)(v389 + 48 * v194 + 1536);
                    ++v192;
                  }
                  while (v192 != v191);
                }
                ++v185;
              }
              while (v185 != v186);
            }
            LODWORD(v199) = 0;
            for (jj = 16; jj != 288; jj += 16)
            {
              if (*(_QWORD *)(v187 + jj))
                v199 = (v199 + 1);
              else
                v199 = v199;
            }
            v201 = *(char *)(*(_QWORD *)v389 + 149);
            v202 = *(_DWORD *)(*(_QWORD *)(v184 + 608) + 680);
            v203 = (__n128 *)(v389 + 1512);
            v204 = (__n128 *)(v389 + 1512 + 48 * v199);
            *(_QWORD *)buf = sub_1B67E8C90;
            if (v199 < 0x81)
            {
              v205 = 0;
              v207 = 0;
            }
            else
            {
              v205 = (__n128 *)sub_1B67E80A4(v199);
              v207 = v206;
            }
            v208 = sub_1B67E810C(v203, v204, (unsigned int (**)(__n128 *, __n128 *))buf, v199, v205, v207, v115);
            if (v205)
              operator delete(v205);
            if ((_DWORD)v199)
            {
              v210 = 0;
              v211 = 0;
              v212 = 0;
              v213 = (int *)(v389 + 1536);
              do
              {
                v215 = *v213;
                v213 += 12;
                v214 = v215;
                if (v210 >= (uint64_t)(v201 + 3) >> 2)
                  v216 = 0;
                else
                  v216 = v214;
                v212 += v216;
                v211 += v214;
                ++v210;
              }
              while (v199 != v210);
              v208.n128_f64[0] = (double)v212 / (double)v211;
              v217 = (_DWORD *)(v389 + 1544);
              v218 = v199;
              do
              {
                v219 = *v217 - v202;
                LODWORD(v209) = *(v217 - 2);
                v220 = v208.n128_f64[0] * (double)*(unint64_t *)&v209;
                if (v219 < 0)
                  v219 = v202 - *v217;
                v209 = v220 + (1.0 - v208.n128_f64[0]) * 32.0 / (double)v219 + 0.5;
                *(v217 - 1) = (int)v209;
                v217 += 12;
                --v218;
              }
              while (v218);
              *(_QWORD *)buf = sub_1B67E8CA4;
              if (v199 < 0x81)
              {
                v221 = 0;
                v223 = 0;
              }
              else
              {
                v221 = (__n128 *)sub_1B67E80A4(v199);
                v223 = v222;
              }
            }
            else
            {
              v221 = 0;
              v223 = 0;
              *(_QWORD *)buf = sub_1B67E8CA4;
            }
            v224 = sub_1B67E810C(v203, v204, (unsigned int (**)(__n128 *, __n128 *))buf, v199, v221, v223, v208);
            if (v221)
              operator delete(v221);
            *(_DWORD *)(v389 + 1552) = 2;
            v225 = 1;
            if (v33 >= 2 && v374 >= 2)
            {
              v226 = (unsigned int *)(v389 + 1568);
              for (kk = 1; kk != v33; ++kk)
              {
                v229 = *v226;
                v226 += 12;
                v228 = v229;
                if (*(int *)(*(_QWORD *)(*(_QWORD *)(v389 + 8) + 608) + 1224) > 1)
                {
                  if (v228 > 1)
                  {
LABEL_291:
                    v256 = v389 + 48 * kk;
                    v225 = 2;
                    *(_DWORD *)(v256 + 1552) = 2;
                    goto LABEL_292;
                  }
                }
                else if (v228 < 2)
                {
                  goto LABEL_291;
                }
              }
              v225 = 1;
            }
LABEL_292:
            if (v33 >= 2 && v225 < v374)
            {
              v257 = (_DWORD *)(v389 + 1600);
              v258 = 2;
              do
              {
                if (*v257 != 2)
                {
                  *v257 = 2;
                  ++v225;
                }
                if (v258 >= v33)
                  break;
                ++v258;
                v257 += 12;
              }
              while (v225 < v374);
            }
            if (v33 < 2)
            {
              v262 = 0;
              v264 = 0;
              *(_QWORD *)buf = sub_1B67E8080;
            }
            else
            {
              v259 = v33 - 1;
              v260 = (_BOOL4 *)(v389 + 1600);
              do
              {
                if (*v260 != 2)
                {
                  v261 = v225++ < v366;
                  *v260 = v261;
                }
                v260 += 12;
                --v259;
              }
              while (v259);
              *(_QWORD *)buf = sub_1B67E8080;
              if (v33 < 0x81)
              {
                v262 = 0;
                v264 = 0;
              }
              else
              {
                v262 = (__n128 *)sub_1B67E80A4(v33);
                v264 = v263;
              }
            }
            sub_1B67E810C(v203, &v203[3 * v33], (unsigned int (**)(__n128 *, __n128 *))buf, v33, v262, v264, v224);
            v12 = v380;
            if (v262)
              operator delete(v262);
            if ((_DWORD)v33)
            {
              v265 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v389 + 8) + 608) + 680);
              v266 = (int *)(v389 + 1552);
              do
              {
                if (*v266 >= 1)
                  sub_1B688DF2C(v370, *(v266 - 2) - v265, *v266 != 1);
                v266 += 12;
                --v33;
              }
              while (v33);
            }
          }
          goto LABEL_428;
        }
        v40 = *(_DWORD *)(v39 + 244);
      }
      else
      {
        v371 = *(_DWORD *)(v39 + 276);
        v40 = *(_DWORD *)(v39 + 280);
      }
    }
    else
    {
      v71 = v34[5];
      v72 = *(_DWORD *)(v71 + 176);
      v40 = *(_DWORD *)(v71 + 180);
      v371 = v72;
    }
    v367 = v40;
    goto LABEL_125;
  }
  if (*(int *)(v2 + 3744) >= 2)
  {
    result = sub_1B682FF60((uint64_t)a1);
    if ((_DWORD)result)
      return result;
LABEL_428:
    sub_1B688E170(a1[43], 0);
LABEL_429:
    v253 = a1;
    v254 = a1[45];
    if (*(_BYTE *)(*(_QWORD *)(a1[37] + 40) + 280))
    {
      v343 = 0;
      v344 = 0;
      v345 = (1 << v376) - 1;
      do
      {
        v346 = *(_QWORD *)(v12 + 16 * v343 + 16);
        if (v346 && (*(_BYTE *)(v346 + 36) & 2) != 0)
        {
          v347 = 0;
          v348 = *(_DWORD *)(v346 + 680);
          v349 = v348 & v345;
          v350 = (uint64_t *)(v12 + 16);
          do
          {
            if (v343 == v347)
            {
              LOBYTE(v351) = 0;
            }
            else
            {
              v351 = *v350;
              if (*v350)
                LOBYTE(v351) = (*(_DWORD *)(v351 + 680) & v345) == v349;
            }
            if (v347 > 0xF)
              break;
            ++v347;
            v350 += 2;
          }
          while ((v351 & 1) == 0);
          v352 = v254 + 2 * v344;
          *(_WORD *)(v352 + 24) = v349;
          v353 = (unsigned __int16 *)(v352 + 24);
          v354 = 1 << v344;
          *(_WORD *)(v254 + 216) |= 1 << v344;
          if ((v351 & 1) != 0)
          {
            *(_WORD *)(v254 + 218) |= v354;
            *(_DWORD *)(v254 + 4 * v344 + 152) = ((v379 & -(1 << v376)) - v348 + *v353) / (1 << v376);
          }
          else
          {
            *(_WORD *)(v254 + 218) &= ~(_WORD)v354;
          }
          ++v344;
        }
        ++v343;
      }
      while (v343 != 17);
      *(_DWORD *)(v254 + 4) = v344;
      v355 = (unsigned __int16 *)(v254 + 24);
      v356 = v344;
      v357 = (unsigned __int16 *)(v254 + 24 + 2 * v344);
      if (v344 < 129)
      {
LABEL_449:
        sub_1B67CD200(v355, v357, v356, 0, 0);
      }
      else
      {
        v358 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        v359 = v344;
        while (1)
        {
          v360 = (unsigned __int16 *)operator new(2 * v359, v358);
          if (v360)
            break;
          v361 = v359 > 1;
          v359 >>= 1;
          if (!v361)
            goto LABEL_449;
        }
        v362 = v360;
        sub_1B67CD200(v355, v357, v356, v360, v359);
        operator delete(v362);
      }
      v254 = a1[45];
      v363 = *(char *)(v2 + 3334);
      if (*(_DWORD *)(v254 + 4) > v363)
        *(_DWORD *)(v254 + 4) = v363;
      v253 = a1;
    }
    else
    {
      *(_DWORD *)(v254 + 4) = 0;
    }
    goto LABEL_455;
  }
  v384 = v8;
  v387 = *(_DWORD *)(v3 + 256);
  v393 = v387;
  v392[0] = 0;
  v392[1] = 0;
  v391 = (uint64_t *)v392;
  v105 = 0;
  if (v11)
  {
    v106 = 0;
    v107 = v7 - 2;
    v108 = v387;
    do
    {
      v109 = sub_1B67CDB24(v12, v105);
      v110 = *v109;
      if (*v109 && *(_DWORD *)(v110 + 40) == 2)
      {
        v111 = v109;
        v112 = sub_1B68308E8(&v391, *(_DWORD *)(v110 + 256), (_DWORD *)(v110 + 256));
        LODWORD(v111) = *(_DWORD *)(*v111 + 680);
        v113 = operator new(0x18uLL);
        v113[4] = (_DWORD)v111;
        v114 = v112[5];
        v112 += 5;
        *(_QWORD *)v113 = v114;
        *((_QWORD *)v113 + 1) = v112;
        v114[1] = (uint64_t)v113;
        *v112 = (uint64_t *)v113;
        v112[2] = (uint64_t *)((char *)v112[2] + 1);
        if (v106 == v107)
          break;
        ++v106;
      }
      ++v105;
    }
    while (v105 != 17);
  }
  else
  {
    v395[0] = 0;
    v395[1] = 0;
    *(_QWORD *)buf = v395;
    do
    {
      v267 = sub_1B67CDB24(v12, v105);
      if (*(_QWORD *)v267)
      {
        v268 = v267;
        v269 = sub_1B68308E8((uint64_t **)buf, *(_DWORD *)(*(_QWORD *)v267 + 256), (_DWORD *)(*(_QWORD *)v267 + 256));
        LODWORD(v268) = *(_DWORD *)(*(_QWORD *)v268 + 680);
        v270 = operator new(0x18uLL);
        v270[4] = (_DWORD)v268;
        v271 = v269[5];
        v269 += 5;
        *(_QWORD *)v270 = v271;
        *((_QWORD *)v270 + 1) = v269;
        v271[1] = (uint64_t)v270;
        *v269 = (uint64_t *)v270;
        v269[2] = (uint64_t *)((char *)v269[2] + 1);
      }
      ++v105;
    }
    while (v105 != 17);
    v272 = *(_QWORD ***)buf;
    if (*(_QWORD ***)buf == v395)
    {
      v273 = 0;
    }
    else
    {
      v273 = 0;
      do
      {
        v274 = *((_DWORD *)v272 + 8);
        v390 = v274;
        v275 = (int *)(v272 + 5);
        sub_1B6832A7C((uint64_t)v272[6], (uint64_t)(v272 + 5), (unint64_t)v272[7]);
        if (v272[7])
        {
          v276 = *((_DWORD *)v272[6] + 4);
          v277 = *(_DWORD *)(*(_QWORD *)sub_1B67CCE18(v380, v276) + 40);
          v278 = sub_1B68308E8(&v391, v274, &v390);
          v279 = operator new(0x18uLL);
          v279[4] = v276;
          v280 = v278[5];
          v278 += 5;
          *(_QWORD *)v279 = v280;
          *((_QWORD *)v279 + 1) = v278;
          v280[1] = (uint64_t)v279;
          *v278 = (uint64_t *)v279;
          v278[2] = (uint64_t *)((char *)v278[2] + 1);
          v281 = v272[6];
          v282 = *v281;
          *(_QWORD *)(v282 + 8) = v281[1];
          *(_QWORD *)v281[1] = v282;
          v272[7] = (_QWORD *)((char *)v272[7] - 1);
          operator delete(v281);
          v283 = v277 == 1;
          if (v277 != 2 && v272[7] != 0)
          {
            for (mm = (int *)v272[6]; mm != v275; mm = (int *)*((_QWORD *)mm + 1))
            {
              if (*(_DWORD *)(*(_QWORD *)sub_1B67CCE18(v380, mm[4]) + 40) == 2)
              {
                v286 = sub_1B68308E8(&v391, v274, &v390);
                v287 = operator new(0x18uLL);
                v287[4] = mm[4];
                v288 = v286[5];
                v286 += 5;
                *(_QWORD *)v287 = v288;
                *((_QWORD *)v287 + 1) = v286;
                v288[1] = (uint64_t)v287;
                *v286 = (uint64_t *)v287;
                v286[2] = (uint64_t *)((char *)v286[2] + 1);
                v289 = *(_QWORD *)mm;
                *(_QWORD *)(v289 + 8) = *((_QWORD *)mm + 1);
                **((_QWORD **)mm + 1) = v289;
                v272[7] = (_QWORD *)((char *)v272[7] - 1);
                operator delete(mm);
                v273 += 2;
                goto LABEL_334;
              }
            }
          }
          ++v273;
        }
        else
        {
          v283 = 0;
        }
LABEL_334:
        v290 = v272[7];
        if (!v283 && v290)
        {
          for (nn = (int *)v272[6]; nn != v275; nn = (int *)*((_QWORD *)nn + 1))
          {
            if (*(_DWORD *)(*(_QWORD *)sub_1B67CCE18(v380, nn[4]) + 40) == 1)
            {
              v292 = sub_1B68308E8(&v391, v274, &v390);
              v293 = operator new(0x18uLL);
              v293[4] = nn[4];
              v294 = v292[5];
              v292 += 5;
              *(_QWORD *)v293 = v294;
              *((_QWORD *)v293 + 1) = v292;
              v294[1] = (uint64_t)v293;
              *v292 = (uint64_t *)v293;
              v292[2] = (uint64_t *)((char *)v292[2] + 1);
              v295 = *(_QWORD *)nn;
              *(_QWORD *)(v295 + 8) = *((_QWORD *)nn + 1);
              **((_QWORD **)nn + 1) = v295;
              v272[7] = (_QWORD *)((char *)v272[7] - 1);
              operator delete(nn);
              ++v273;
              break;
            }
          }
          v290 = v272[7];
        }
        if (v290)
        {
          do
          {
            if ((unint64_t)sub_1B68308E8(&v391, v274, &v390)[7] >= v10)
              break;
            v296 = sub_1B68308E8(&v391, v274, &v390);
            v297 = v272[6];
            v298 = operator new(0x18uLL);
            v298[4] = *((_DWORD *)v297 + 4);
            v299 = v296[5];
            v296 += 5;
            *(_QWORD *)v298 = v299;
            *((_QWORD *)v298 + 1) = v296;
            v299[1] = (uint64_t)v298;
            *v296 = (uint64_t *)v298;
            v296[2] = (uint64_t *)((char *)v296[2] + 1);
            ++v273;
            v300 = v272[6];
            v301 = *v300;
            *(_QWORD *)(v301 + 8) = v300[1];
            *(_QWORD *)v300[1] = v301;
            v272[7] = (_QWORD *)((char *)v272[7] - 1);
            operator delete(v300);
          }
          while (v272[7]);
        }
        v302 = v272[1];
        if (v302)
        {
          do
          {
            v303 = (_QWORD **)v302;
            v302 = (_QWORD *)*v302;
          }
          while (v302);
        }
        else
        {
          do
          {
            v303 = (_QWORD **)v272[2];
            v32 = *v303 == v272;
            v272 = v303;
          }
          while (!v32);
        }
        v272 = v303;
      }
      while (v303 != v395);
    }
    v390 = v387;
    v304 = v7 - 1;
    v108 = v387;
    v305 = v387;
    do
    {
      if (v273 >= v304)
        break;
      if (sub_1B68308E8((uint64_t **)buf, v305, &v390)[7])
      {
        v306 = sub_1B68308E8((uint64_t **)buf, v305, &v390);
        if (v306[7])
        {
          do
          {
            v307 = sub_1B68308E8(&v391, v305, &v390);
            v308 = v306[6];
            v309 = operator new(0x18uLL);
            v309[4] = *((_DWORD *)v308 + 4);
            v310 = v307[5];
            v307 += 5;
            *(_QWORD *)v309 = v310;
            *((_QWORD *)v309 + 1) = v307;
            v310[1] = (uint64_t)v309;
            *v307 = (uint64_t *)v309;
            v307[2] = (uint64_t *)((char *)v307[2] + 1);
            ++v273;
            v311 = v306[6];
            v312 = *v311;
            *(_QWORD *)(v312 + 8) = v311[1];
            *(_QWORD *)v311[1] = v312;
            v306[7] = (uint64_t *)((char *)v306[7] - 1);
            operator delete(v311);
          }
          while (v306[7] && v273 < v304);
        }
      }
      v305 = (v305 + 1) % *(_DWORD *)(v377 + 3724);
      v390 = v305;
    }
    while (v305 != v387);
    sub_1B6830A50(v395[0]);
  }
  if (!sub_1B68308E8(&v391, v108, &v393)[7]
    || (v313 = sub_1B68308E8(&v391, v108, &v393), v314 = v313 + 5, v315 = v313[6], v315 == (uint64_t *)(v313 + 5)))
  {
    v316 = 0;
    v319 = 0;
    v318 = 0;
  }
  else
  {
    v316 = 0;
    v317 = 0;
    v318 = 0;
    do
    {
      if ((unint64_t)v317 >= v318)
      {
        v320 = ((char *)v317 - v316) >> 2;
        v321 = v320 + 1;
        if ((unint64_t)(v320 + 1) >> 62)
          sub_1B6773BAC();
        if ((uint64_t)(v318 - (_QWORD)v316) >> 1 > v321)
          v321 = (uint64_t)(v318 - (_QWORD)v316) >> 1;
        if (v318 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL)
          v322 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v322 = v321;
        if (v322)
          v322 = (unint64_t)sub_1B6773BC0(v322);
        else
          v323 = 0;
        v324 = (_DWORD *)(v322 + 4 * v320);
        *v324 = *((_DWORD *)v315 + 4);
        v319 = v324 + 1;
        while (v317 != (_DWORD *)v316)
        {
          v325 = *--v317;
          *--v324 = v325;
        }
        v318 = v322 + 4 * v323;
        if (v316)
          operator delete(v316);
        v316 = v324;
      }
      else
      {
        *v317 = *((_DWORD *)v315 + 4);
        v319 = v317 + 1;
      }
      v315 = (uint64_t *)v315[1];
      v317 = v319;
    }
    while (v315 != (uint64_t *)v314);
  }
  v326 = 126 - 2 * __clz(((char *)v319 - v316) >> 2);
  if (v319 == (_DWORD *)v316)
    v327 = 0;
  else
    v327 = v326;
  sub_1B6832C40(v319, (char *)v319, (uint64_t)v316, v316, v327, 1);
  *(_DWORD *)buf = 0;
  v2 = v377;
  if (*(int *)(v377 + 3724) >= 1)
  {
    v328 = 0;
    do
    {
      if (v328 != v393 && sub_1B68308E8(&v391, v328, buf)[7])
      {
        v329 = sub_1B68308E8(&v391, v328, buf);
        v330 = v329 + 5;
        v331 = v329[6];
        if (v331 != (uint64_t *)(v329 + 5))
        {
          do
          {
            if ((unint64_t)v319 >= v318)
            {
              v332 = ((char *)v319 - v316) >> 2;
              v333 = v332 + 1;
              if ((unint64_t)(v332 + 1) >> 62)
                sub_1B6773BAC();
              if ((uint64_t)(v318 - (_QWORD)v316) >> 1 > v333)
                v333 = (uint64_t)(v318 - (_QWORD)v316) >> 1;
              if (v318 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL)
                v334 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v334 = v333;
              if (v334)
                v334 = (unint64_t)sub_1B6773BC0(v334);
              else
                v335 = 0;
              v336 = (_DWORD *)(v334 + 4 * v332);
              *v336 = *((_DWORD *)v331 + 4);
              v337 = v336 + 1;
              while (v319 != (_DWORD *)v316)
              {
                v338 = *--v319;
                *--v336 = v338;
              }
              v318 = v334 + 4 * v335;
              if (v316)
                operator delete(v316);
              v316 = v336;
              v319 = v337;
            }
            else
            {
              *v319++ = *((_DWORD *)v331 + 4);
            }
            v331 = (uint64_t *)v331[1];
          }
          while (v331 != (uint64_t *)v330);
          v328 = *(_DWORD *)buf;
        }
        v2 = v377;
      }
      *(_DWORD *)buf = ++v328;
    }
    while (v328 < *(_DWORD *)(v2 + 3724));
  }
  if (v319 != (_DWORD *)v316)
  {
    v12 = v380;
    if (v384 >= 1)
    {
      v339 = 0;
      v340 = 0;
      if (*(char *)(v2 + 3333) <= 1)
        v341 = 1;
      else
        v341 = *(char *)(v2 + 3333);
      v342 = &buf[2];
      do
      {
        if (v340 <= 0xF)
        {
          *((_WORD *)v342 - 1) = *(_WORD *)&v316[4 * v340] - v379;
          *v342 = (uint64_t)v340 < (uint64_t)v10;
        }
        if (v341 - 1 == v340)
          goto LABEL_424;
        ++v340;
        v342 += 4;
        v339 += 4;
      }
      while (&v316[v339] != (_BYTE *)v319);
      v341 = v340;
LABEL_424:
      sub_1B688F350(a1[43], v380, (__int32 *)buf, v341, v379);
    }
    if (v316)
      operator delete(v316);
    sub_1B6830A50(v392[0]);
    goto LABEL_428;
  }
  if (v316)
    operator delete(v316);
  sub_1B6830A50(v392[0]);
  return 1;
}

void sub_1B68329A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34)
{
  sub_1B6830A50(a34);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6832A7C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = *(uint64_t **)a2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 16) > *(_DWORD *)(result + 16))
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *(_QWORD *)result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *(_QWORD *)result = v4;
        v4[1] = result;
        return (uint64_t)v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = *(_QWORD *)(v10 + 8);
        --v9;
      }
      while (v9 > 1);
      v11 = sub_1B6832A7C(result, v10, a3 >> 1);
      result = sub_1B6832A7C(v10, a2, a3 - v8);
      v12 = *(_DWORD *)(v11 + 16);
      if (*(_DWORD *)(result + 16) <= v12)
      {
        v14 = *(uint64_t **)(v11 + 8);
        i = result;
        result = v11;
      }
      else
      {
        for (i = *(_QWORD *)(result + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          if (*(_DWORD *)(i + 16) <= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *(_QWORD *)i;
        v16 = *(_QWORD *)result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *(_QWORD *)v11;
        v14 = *(uint64_t **)(v11 + 8);
        *(_QWORD *)(v17 + 8) = result;
        *(_QWORD *)result = v17;
        *(_QWORD *)v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != (uint64_t *)i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = *((_DWORD *)v14 + 4);
          if (*(_DWORD *)(i + 16) <= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = *(_QWORD *)(i + 8); j != a2; j = *(_QWORD *)(j + 8))
            {
              if (*(_DWORD *)(j + 16) <= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *(_QWORD *)j;
            v22 = *(_QWORD *)i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*(_QWORD *)j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *(_QWORD *)i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != (uint64_t *)v18 && i != a2);
      }
    }
  }
  return result;
}

void sub_1B6832C40(_DWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  char v42;
  int v43;
  char *v44;
  BOOL v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  int v78;
  int v79;
  char *v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  char *v86;
  _DWORD *v87;

  while (2)
  {
    v87 = a1;
    v10 = (uint64_t)a1;
    v11 = a2;
LABEL_2:
    v12 = v11 - a4;
    v13 = (v11 - a4) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v43 = *((_DWORD *)v11 - 1);
        if (*(_DWORD *)a4 < v43)
        {
          *((_DWORD *)v11 - 1) = *(_DWORD *)a4;
          *(_DWORD *)a4 = v43;
        }
        return;
      case 3uLL:
        sub_1B6833310(v10, (uint64_t)v11, (uint64_t)(v11 - 4), (uint64_t)(v11 - 4), a3, (uint64_t)(a4 + 4));
        return;
      case 4uLL:
        sub_1B6833380(v10, (uint64_t)v11, (uint64_t)(v11 - 4), (uint64_t)(v11 - 4), (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), a3, (uint64_t)(a4 + 4));
        return;
      case 5uLL:
        sub_1B68333FC(v10, (uint64_t)v11, (uint64_t)(v11 - 4), (uint64_t)(v11 - 4), (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), (uint64_t)(v11 - 12), (uint64_t)(v11 - 12), a3, (uint64_t)(a4 + 4));
        return;
      default:
        if (v12 > 95)
        {
          if (!a5)
          {
            if (v11 != a4)
            {
              v56 = (v13 - 2) >> 1;
              v57 = v56;
              do
              {
                v58 = v57;
                if (v56 >= (4 * v57) >> 2)
                {
                  v59 = (4 * v57) >> 1;
                  v60 = v59 | 1;
                  v61 = &v11[-4 * (v59 | 1)];
                  v62 = v59 + 2;
                  if (v62 < (uint64_t)v13 && *((_DWORD *)v61 - 1) < *((_DWORD *)v61 - 2))
                  {
                    v61 -= 4;
                    v60 = v62;
                  }
                  v63 = &v11[-4 * v58];
                  v64 = *((_DWORD *)v61 - 1);
                  v65 = *((_DWORD *)v63 - 1);
                  if (v64 >= v65)
                  {
                    do
                    {
                      *((_DWORD *)v63 - 1) = v64;
                      v63 = v61;
                      if (v56 < v60)
                        break;
                      v66 = (2 * v60) | 1;
                      v61 = &v11[-4 * v66];
                      v67 = 2 * v60 + 2;
                      if (v67 < (uint64_t)v13 && *((_DWORD *)v61 - 1) < *((_DWORD *)v61 - 2))
                      {
                        v61 -= 4;
                        v66 = v67;
                      }
                      v64 = *((_DWORD *)v61 - 1);
                      v60 = v66;
                    }
                    while (v64 >= v65);
                    *((_DWORD *)v63 - 1) = v65;
                  }
                }
                v57 = v58 - 1;
              }
              while (v58);
              v68 = (unint64_t)v12 >> 2;
              do
              {
                v69 = 0;
                v70 = *((_DWORD *)v11 - 1);
                v71 = v11;
                do
                {
                  v72 = &v71[4 * ~v69];
                  v73 = (2 * v69) | 1;
                  v74 = 2 * v69 + 2;
                  if (v74 < v68 && *((_DWORD *)v72 - 1) < *((_DWORD *)v72 - 2))
                  {
                    v72 -= 4;
                    v73 = v74;
                  }
                  *((_DWORD *)v71 - 1) = *((_DWORD *)v72 - 1);
                  v71 = v72;
                  v69 = v73;
                }
                while (v73 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                v75 = v72 - 4;
                if (v72 == a4 + 4)
                {
                  *(_DWORD *)v75 = v70;
                }
                else
                {
                  *(_DWORD *)v75 = *(_DWORD *)a4;
                  *(_DWORD *)a4 = v70;
                  if (v11 - v75 >= 5)
                  {
                    v76 = (((unint64_t)(v11 - v75) >> 2) - 2) >> 1;
                    v77 = &v11[-4 * v76];
                    v78 = *((_DWORD *)v77 - 1);
                    v79 = *(_DWORD *)v75;
                    if (v78 < v79)
                    {
                      do
                      {
                        *((_DWORD *)v72 - 1) = v78;
                        v72 = v77;
                        if (!v76)
                          break;
                        v76 = (v76 - 1) >> 1;
                        v77 = &v11[-4 * v76];
                        v78 = *((_DWORD *)v77 - 1);
                      }
                      while (v78 < v79);
                      *((_DWORD *)v72 - 1) = v79;
                    }
                  }
                }
                a4 += 4;
              }
              while (v68-- > 2);
            }
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t)&v11[-4 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x201)
          {
            sub_1B6833310((uint64_t)&v11[-4 * (v13 >> 1)], (uint64_t)&v11[-4 * (v13 >> 1)], v10, (uint64_t)v11, (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
          }
          else
          {
            sub_1B6833310(v10, (uint64_t)v11, (uint64_t)&v11[-4 * (v13 >> 1)], (uint64_t)&v11[-4 * (v13 >> 1)], (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
            v16 = v10;
            v17 = (uint64_t)&v11[4 * (1 - v14)];
            sub_1B6833310((uint64_t)(v11 - 4), (uint64_t)(v11 - 4), v17, v17, (uint64_t)(a4 + 8), (uint64_t)(a4 + 8));
            v18 = (uint64_t)&v11[4 * ~v14];
            sub_1B6833310((uint64_t)(v11 - 8), (uint64_t)(v11 - 8), v18, v18, (uint64_t)(a4 + 12), (uint64_t)(a4 + 12));
            v19 = v17;
            v20 = v17;
            v10 = v16;
            sub_1B6833310(v19, v20, v15, v15, v18, v18);
            v21 = *((_DWORD *)v11 - 1);
            *((_DWORD *)v11 - 1) = *(_DWORD *)(v15 - 4);
            *(_DWORD *)(v15 - 4) = v21;
          }
          --a5;
          v22 = v11 - 4;
          if ((a6 & 1) != 0)
          {
            v23 = *(_DWORD *)v22;
LABEL_28:
            v33 = v11;
            do
            {
              v34 = v33;
              v33 -= 4;
            }
            while (*((_DWORD *)v34 - 2) < v23);
            v35 = a4;
            if (v34 == v11)
            {
              v35 = a4;
              do
              {
                if (v35 >= v33)
                  break;
                v37 = *(_DWORD *)v35;
                v35 += 4;
              }
              while (v37 >= v23);
            }
            else
            {
              do
              {
                v36 = *(_DWORD *)v35;
                v35 += 4;
              }
              while (v36 >= v23);
            }
            a2 = v33;
            if (v35 < v33)
            {
              v38 = v35;
              do
              {
                v39 = *((_DWORD *)a2 - 1);
                *((_DWORD *)a2 - 1) = *((_DWORD *)v38 - 1);
                *((_DWORD *)v38 - 1) = v39;
                do
                {
                  v40 = *((_DWORD *)a2 - 2);
                  a2 -= 4;
                }
                while (v40 < v23);
                do
                {
                  v41 = *(_DWORD *)v38;
                  v38 += 4;
                }
                while (v41 >= v23);
              }
              while (v38 < a2);
            }
            if (a2 + 4 != v11)
              *(_DWORD *)v22 = *(_DWORD *)a2;
            *(_DWORD *)a2 = v23;
            if (v35 >= v33)
            {
              v42 = sub_1B683349C(v10, (uint64_t)v11, (uint64_t)(a2 + 4), (_DWORD *)a2 + 1);
              if (sub_1B683349C((uint64_t)a2, (uint64_t)a2, a3, a4))
              {
                a3 = (uint64_t)(a2 + 4);
                a4 = a2 + 4;
                a2 = v11;
                a1 = v87;
                if ((v42 & 1) == 0)
                  continue;
                return;
              }
              a1 = a2 + 4;
              if ((v42 & 1) != 0)
                continue;
            }
            sub_1B6832C40(v10, v11, a2 + 4, a2 + 4, a5, a6 & 1);
            a6 = 0;
            a1 = a2 + 4;
            continue;
          }
          v23 = *((_DWORD *)v11 - 1);
          if (*(_DWORD *)v11 < v23)
            goto LABEL_28;
          v24 = v11 - 4;
          if (v23 >= *(_DWORD *)a4)
          {
            do
            {
              v26 = v24;
              if (v24 <= a4)
                break;
              v24 -= 4;
            }
            while (v23 >= *((_DWORD *)v26 - 1));
          }
          else
          {
            v25 = v11;
            do
            {
              v26 = v25 - 4;
              v27 = *((_DWORD *)v25 - 2);
              v25 -= 4;
            }
            while (v23 >= v27);
          }
          v28 = a4;
          if (v26 > a4)
          {
            v28 = a4;
            do
            {
              v29 = *(_DWORD *)v28;
              v28 += 4;
            }
            while (v23 < v29);
          }
          while (v28 < v26)
          {
            v30 = *((_DWORD *)v26 - 1);
            *((_DWORD *)v26 - 1) = *((_DWORD *)v28 - 1);
            *((_DWORD *)v28 - 1) = v30;
            do
            {
              v31 = *((_DWORD *)v26 - 2);
              v26 -= 4;
            }
            while (v23 >= v31);
            do
            {
              v32 = *(_DWORD *)v28;
              v28 += 4;
            }
            while (v23 < v32);
          }
          if (v26 + 4 != v11)
            *(_DWORD *)v22 = *(_DWORD *)v26;
          a6 = 0;
          *(_DWORD *)v26 = v23;
          v11 = v26;
          goto LABEL_2;
        }
        v44 = v11 - 4;
        v46 = v11 == a4 || v44 == a4;
        if ((a6 & 1) != 0)
        {
          if (!v46)
          {
            v47 = 0;
            v48 = v11 - 4;
            do
            {
              v50 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              v49 = v50;
              v51 = *(_DWORD *)v44;
              if (v50 < v51)
              {
                v52 = v47;
                while (1)
                {
                  v53 = v52;
                  v54 = &v11[v52];
                  *((_DWORD *)v54 - 2) = v51;
                  if (!v53)
                    break;
                  v51 = *(_DWORD *)&v11[v53];
                  v52 = v53 + 4;
                  if (v49 >= v51)
                  {
                    v55 = &v11[v53 - 4];
                    goto LABEL_71;
                  }
                }
                v55 = v54 - 4;
LABEL_71:
                *(_DWORD *)v55 = v49;
              }
              v47 -= 4;
              v44 = v48;
            }
            while (v48 != a4);
          }
        }
        else if (!v46)
        {
          v81 = v11 - 8;
          v82 = v11 - 4;
          do
          {
            v84 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            v83 = v84;
            v85 = *(_DWORD *)v44;
            if (v84 < v85)
            {
              v86 = v81;
              do
              {
                *(_DWORD *)v86 = v85;
                v85 = *((_DWORD *)v86 + 2);
                v86 += 4;
              }
              while (v83 < v85);
              *(_DWORD *)v86 = v83;
            }
            v81 -= 4;
            v44 = v82;
          }
          while (v82 != a4);
        }
        return;
    }
  }
}

void sub_1B6833310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v6 = *(_DWORD *)(a4 - 4);
  v7 = *(_DWORD *)(a2 - 4);
  v8 = *(_DWORD *)(a6 - 4);
  if (v6 >= v7)
  {
    if (v8 < v6)
    {
      *(_DWORD *)(a4 - 4) = v8;
      *(_DWORD *)(a6 - 4) = v6;
      v9 = *(_DWORD *)(a4 - 4);
      v10 = *(_DWORD *)(a2 - 4);
      if (v9 < v10)
      {
        *(_DWORD *)(a2 - 4) = v9;
        *(_DWORD *)(a4 - 4) = v10;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *(_DWORD *)(a2 - 4) = v6;
      *(_DWORD *)(a4 - 4) = v7;
      v11 = *(_DWORD *)(a6 - 4);
      if (v11 >= v7)
        return;
      *(_DWORD *)(a4 - 4) = v11;
    }
    else
    {
      *(_DWORD *)(a2 - 4) = v8;
    }
    *(_DWORD *)(a6 - 4) = v7;
  }
}

void sub_1B6833380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  sub_1B6833310(a1, a2, a3, a4, a5, a6);
  v12 = *(_DWORD *)(a8 - 4);
  v13 = *(_DWORD *)(a6 - 4);
  if (v12 < v13)
  {
    *(_DWORD *)(a6 - 4) = v12;
    *(_DWORD *)(a8 - 4) = v13;
    v14 = *(_DWORD *)(a6 - 4);
    v15 = *(_DWORD *)(a4 - 4);
    if (v14 < v15)
    {
      *(_DWORD *)(a4 - 4) = v14;
      *(_DWORD *)(a6 - 4) = v15;
      v16 = *(_DWORD *)(a4 - 4);
      v17 = *(_DWORD *)(a2 - 4);
      if (v16 < v17)
      {
        *(_DWORD *)(a2 - 4) = v16;
        *(_DWORD *)(a4 - 4) = v17;
      }
    }
  }
}

void sub_1B68333FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  sub_1B6833380(a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_DWORD *)(a10 - 4);
  v15 = *(_DWORD *)(a8 - 4);
  if (v14 < v15)
  {
    *(_DWORD *)(a8 - 4) = v14;
    *(_DWORD *)(a10 - 4) = v15;
    v16 = *(_DWORD *)(a8 - 4);
    v17 = *(_DWORD *)(a6 - 4);
    if (v16 < v17)
    {
      *(_DWORD *)(a6 - 4) = v16;
      *(_DWORD *)(a8 - 4) = v17;
      v18 = *(_DWORD *)(a6 - 4);
      v19 = *(_DWORD *)(a4 - 4);
      if (v18 < v19)
      {
        *(_DWORD *)(a4 - 4) = v18;
        *(_DWORD *)(a6 - 4) = v19;
        v20 = *(_DWORD *)(a4 - 4);
        v21 = *(_DWORD *)(a2 - 4);
        if (v20 < v21)
        {
          *(_DWORD *)(a2 - 4) = v20;
          *(_DWORD *)(a4 - 4) = v21;
        }
      }
    }
  }
}

uint64_t sub_1B683349C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  char v17;

  v6 = 1;
  switch((a2 - (uint64_t)a4) >> 2)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      v7 = *(_DWORD *)(a2 - 4);
      if (*a4 < v7)
      {
        *(_DWORD *)(a2 - 4) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      sub_1B6833310(a1, a2, a2 - 4, a2 - 4, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      sub_1B6833380(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      sub_1B68333FC(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a2 - 12, a2 - 12, a3, (uint64_t)(a4 + 1));
LABEL_18:
      v6 = 1;
      return v6 & 1;
    default:
      v8 = a2 - 8;
      sub_1B6833310(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8);
      v10 = (_DWORD *)(a2 - 12);
      if ((_DWORD *)(a2 - 12) == a4)
        goto LABEL_14;
      v11 = 0;
      v9 = a2 - 12;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v9 - 4);
    v9 -= 4;
    v12 = v13;
    if (v13 < *(_DWORD *)(v8 - 4))
    {
      v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (_DWORD *)a2)
          break;
        v15 = v14 + 1;
        v16 = v14[1];
        ++v14;
        if (v12 >= v16)
          goto LABEL_12;
      }
      v15 = (_DWORD *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8)
        break;
    }
    v8 = (uint64_t)v10;
    v10 = (_DWORD *)v9;
    if ((_DWORD *)v9 == a4)
    {
LABEL_14:
      v17 = 1;
      goto LABEL_20;
    }
  }
  v17 = 0;
  LOBYTE(v9) = v9 == (_QWORD)a4;
LABEL_20:
  v6 = v17 | v9;
  return v6 & 1;
}

unint64_t sub_1B6833634(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int16x8_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _BYTE **v64;
  uint64_t v65;
  __int32 v66[16];

  if (*(_DWORD *)(result + 16) > (int)a2)
  {
    LODWORD(v6) = a4;
    v8 = a2;
    v9 = result;
    v10 = *(_QWORD *)(result + 296);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 40) + 2009);
    v12 = v11 - a4;
    while (*(_DWORD *)(v9 + 20) > (int)a3)
    {
      v13 = 1 << v12;
      if (v12 <= *(_DWORD *)(v9 + 1624))
      {
        v15 = 1 << (v11 - *(_DWORD *)(v9 + 1628));
        if (((v15 - 1) & (a3 | v8)) != 0)
          return result;
        ++*(_DWORD *)(v9 + 1636);
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 24) + 32))(*(_QWORD *)(v10 + 24));
        v17 = *(_QWORD *)(v9 + 296);
        if (v16)
          result = sub_1B685CA48(*(_DWORD **)(v17 + 24), v8, a3, v13);
        else
          result = 2;
        v18 = *(_BYTE *)(*(_QWORD *)(v17 + 592) + 136);
        if (v18)
        {
          v19 = *(_QWORD *)(v9 + 304) + 8 * *(int *)(*(_QWORD *)(v9 + 304) + 16);
          if ((int)v8 >= *(__int16 *)(v19 + 24))
            return result;
          v18 = (int)a3 >= *(__int16 *)(v19 + 26);
        }
        if ((v18 & 1) == 0 && (_DWORD)result == 2)
        {
          v64 = (_BYTE **)(v9 + 760);
          sub_1B67FFD7C(v9 + 760, *(_QWORD *)(v9 + 312), a5, 0, 0, 1, 0, 0);
          v20 = *(_QWORD *)(v9 + 296);
          v21 = *(_QWORD **)(v20 + 592);
          v22 = v21[14];
          v23 = *(_QWORD *)(*(_QWORD *)(v20 + 608) + 112);
          v24 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v21 + 16))(v21, v8, a3, 0);
          v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 296) + 608)
                                                                            + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 608), v8, a3, 0);
          if (((a3 | v8) & 0x80000000) != 0
            || (v25 = *(_QWORD *)(*(_QWORD *)(v9 + 312) + 1360), *(_DWORD *)(v25 + 276) <= (int)v8)
            || *(_DWORD *)(v25 + 280) <= (int)a3)
          {
            v26 = 0;
            v27 = 0;
          }
          else
          {
            v26 = *(_QWORD *)(v25 + 512) + 2 * (*(_QWORD *)(v25 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)v8 >> 3));
            v27 = (__int16 *)(*(_QWORD *)(v25 + 576)
                            + 16 * (*(_QWORD *)(v25 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)v8 >> 2)));
          }
          v28 = v6 & 3 | (*(unsigned __int8 *)(v26 + 1) << 8);
          *(_WORD *)v26 = v28;
          v29 = *(_QWORD *)(v9 + 312);
          v30 = *(_QWORD *)(*(_QWORD *)(v29 + 1360) + 488);
          v31 = vdupq_n_s16(v28);
          v32 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 1368) + 2009) - v13;
          switch(v32)
          {
            case 6:
              *(int16x8_t *)v26 = v31;
              *(int16x8_t *)(v26 + 2 * v30) = v31;
              *(int16x8_t *)(v26 + 4 * v30) = v31;
              *(int16x8_t *)(v26 + 6 * v30) = v31;
              *(int16x8_t *)(v26 + 8 * v30) = v31;
              *(int16x8_t *)(v26 + 10 * v30) = v31;
              *(int16x8_t *)(v26 + 12 * v30) = v31;
              *(int16x8_t *)(v26 + 14 * v30) = v31;
              break;
            case 5:
              *(_QWORD *)v26 = v31.i64[0];
              *(_QWORD *)(v26 + 2 * v30) = v31.i64[0];
              *(_QWORD *)(v26 + 4 * v30) = v31.i64[0];
              *(_QWORD *)(v26 + 6 * v30) = v31.i64[0];
              break;
            case 4:
              *(_DWORD *)v26 = v31.i32[0];
              *(_DWORD *)(v26 + 2 * v30) = v31.i32[0];
              break;
          }
          v33 = *(_QWORD *)(*(_QWORD *)(v9 + 976) + 3544);
          *(_BYTE *)(v9 + 778) = 0;
          *(_DWORD *)(v9 + 780) = *(_DWORD *)(v33 + 276);
          *(_DWORD *)(v9 + 788) = *(_DWORD *)(v33 + 280);
          *(_QWORD *)(v9 + 912) = v24;
          *(_QWORD *)(v9 + 920) = v22;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 584) + 3438))
          {
            sub_1B687A63C(*(_BYTE **)(v9 + 312), v8, a3, v13, v13, (uint64_t)v66);
            result = sub_1B68022F8((uint64_t)v64, v8, a3, v13, v13, (uint64_t)v66, v23, v65);
          }
          else
          {
            sub_1B687A560(*(_QWORD *)(v9 + 312), v8, a3, 0, 0, v13, v13, v66);
            result = sub_1B6802710(v64, v8, a3, v13, v13, (uint64_t)v66, v23, v65);
          }
          if (v15 >= 4)
          {
            v34 = 0;
            LODWORD(v35) = v15 >> 2;
            if (v15 >> 2 <= 1)
              v35 = 1;
            else
              v35 = v35;
            v36 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 312) + 1360) + 552);
            v37 = v27;
            do
            {
              v38 = v37;
              v39 = v35;
              do
              {
                v40 = *(_QWORD *)v27;
                *(_QWORD *)((char *)v38 + 6) = *(_QWORD *)(v27 + 3);
                *v38 = v40;
                v38 += 2;
                --v39;
              }
              while (v39);
              ++v34;
              v37 = (_QWORD *)((char *)v37 + v36);
            }
            while (v34 != v15 >> 2);
          }
          *(_DWORD *)(v9 + 1632) += result;
          v41 = *(_DWORD *)(v9 + 1624);
          v42 = v41 - 3;
          if (v41 == 34)
          {
            v43 = 0;
          }
          else
          {
            v44 = 0;
            v45 = 0;
            v46 = (*(int *)(v9 + 16) >> 3);
            v47 = (int)v46 * ((int)a3 >> 3) + ((int)v8 >> 3);
            v48 = *(_QWORD *)(v9 + 1360) + 4 * v47;
            v49 = (1 << v42);
            v50 = 4 * v46;
            do
            {
              v51 = (int *)v48;
              v52 = v49;
              do
              {
                v53 = *v51++;
                v45 += v53;
                --v52;
              }
              while (v52);
              ++v44;
              v48 += v50;
            }
            while (v44 != v49);
            v54 = 0;
            v55 = 0;
            v56 = *(_QWORD *)(v9 + 1328) + 4 * v47;
            do
            {
              v57 = (int *)v56;
              v58 = v49;
              do
              {
                v59 = *v57++;
                v55 += v59;
                --v58;
              }
              while (v58);
              ++v54;
              v56 += v50;
            }
            while (v54 != v49);
            v43 = v55 + (v45 << 7);
          }
          if (result <= 3 * v43)
            v60 = result;
          else
            v60 = v43;
          if (v60 > v43)
            ++*(_DWORD *)(v9 + 1644);
          *(_DWORD *)(v9 + 1640) += v60;
          v61 = *v27;
          if (v61 < 0)
            v61 = -v61;
          v62 = v27[1];
          if (v62 < 0)
            v62 = -v62;
          *(_DWORD *)(v9 + 1648) += v61 + v62;
          if (*(_BYTE *)(v9 + 13))
          {
            result = sub_1B682BF38(v9, v8, a3, v13);
            v63 = 1744;
            if ((_DWORD)result)
              v63 = 1736;
            *(_DWORD *)(v9 + v63) += v60;
          }
        }
        return result;
      }
      v6 = (v6 + 1);
      sub_1B6833634(v9, v8, a3, v6, a5);
      v14 = v8 + (v13 >> 1);
      sub_1B6833634(v9, v14, a3, v6, a5);
      a3 = (a3 + (v13 >> 1));
      result = sub_1B6833634(v9, v8, a3, v6, a5);
      v10 = *(_QWORD *)(v9 + 296);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 40) + 2009);
      v12 = v11 - v6;
      v8 = v14;
      if (*(_DWORD *)(v9 + 16) <= (signed int)v14)
        return result;
    }
  }
  return result;
}

uint64_t sub_1B6833BF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10, int a11, int a12, signed int a13)
{
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned __int16 *v55;
  _BYTE *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  signed int v67;
  uint64_t v70;
  uint64_t v72;

  v15 = a6;
  v70 = result;
  v72 = (a5 - 1);
  if (a5 >= 1)
  {
    v16 = (4 << a5) - 1;
    v17 = -(4 << a5);
    v18 = ((v16 + a11) & v17) >> (a5 + 2);
    v19 = ((v16 + a12) & v17) >> (a5 + 2);
    result = sub_1B6833BF8(result, a2, a3, a4, v72, a6);
    if (a8 < a10)
    {
      v20 = *(int *)(a4 + 4 * v72);
      v21 = *(int *)(a4 + 4 * a5);
      v22 = *(_QWORD *)(a3 + 8 * a5) + 2 * (int)v21 * a8;
      v23 = a8;
      v24 = 2 * v20 * a8;
      v25 = 2 * v20;
      result = 2 * v20;
      do
      {
        if (a7 < a9)
        {
          if (2 * (int)v23 + 2 <= v19)
            v26 = 2;
          else
            v26 = v19 - 2 * v23;
          v27 = *(_QWORD *)(a3 + 8 * v72) + 2 * v24;
          v28 = 2 * a7 + 2;
          v29 = -2 * a7;
          v30 = 2 * a7;
          v31 = a7;
          do
          {
            if (v18 >= v28)
              v32 = v28;
            else
              v32 = v18;
            v33 = v31 + 1;
            if (v26 < 1)
            {
              v35 = 0;
            }
            else
            {
              v34 = 0;
              v35 = 0;
              v36 = v27 + 2 * v30;
              v37 = v32 + v29;
              v39 = v18 >= 2 * (int)v33 || v18 > 2 * (int)v31;
              do
              {
                if (v39)
                {
                  v40 = 0;
                  do
                    v35 += *(_WORD *)(v36 + 2 * v40++);
                  while (v37 != v40);
                }
                ++v34;
                v36 += result;
              }
              while (v34 < v26);
            }
            v30 += 2;
            *(_WORD *)(v22 + 2 * v31) = v35;
            v29 -= 2;
            v28 += 2;
            ++v31;
          }
          while (v33 != a9);
        }
        v22 += 2 * v21;
        ++v23;
        v24 += v25;
      }
      while (v23 != a10);
    }
  }
  v41 = *(_QWORD *)(v70 + 8 * a5);
  if (v41)
    v42 = a8 < a10;
  else
    v42 = 0;
  if (v42)
  {
    v43 = a5 + 3;
    v44 = (a11 + 7) >> 3;
    v45 = *(int *)(a2 + 4 * a5);
    v46 = *(int *)(a4 + 4 * a5);
    v47 = (a12 + 7) >> 3;
    v48 = (_BYTE *)(v41 + 2 * a7 + (int)v45 * (uint64_t)a8);
    v49 = *(_QWORD *)(a3 + 8 * a5) + 4 * a7 + 2 * (int)v46 * a8;
    v50 = 2 * v46;
    result = a9 - (uint64_t)a7;
    do
    {
      v51 = a8 + 1;
      if (a7 < a9)
      {
        if (v47 >= v51 << v43 >> 3)
          v52 = 1 << (a5 + 3) >> 3;
        else
          v52 = v47 - (a8 << v43 >> 3);
        v53 = a9 - (uint64_t)a7;
        v54 = a7;
        v55 = (unsigned __int16 *)v49;
        v56 = v48;
        do
        {
          v57 = v54 + 1;
          v58 = v44 - (v54 << v43 >> 3);
          if (v44 >= v57 << v43 >> 3)
            v59 = 1 << (a5 + 3) >> 3;
          else
            v59 = v58;
          v60 = *v55++;
          v61 = (v60 + ((v59 * v52) >> 1)) / (v59 * v52);
          if (v61 >= 2)
          {
            v62 = __clz(v61);
            v63 = ((byte_1B69327A4[(unint64_t)(v61 << (v62 + 1)) >> 24] << 12) | 0x200000u) >> ((v62 + 1) >> 1);
            if ((v62 & 1) != 0)
              v64 = v63;
            else
              v64 = (11585 * v63) >> 14;
            v61 = (v64 + 16) >> 5;
          }
          v65 = (int)((a13 << 8) * (v61 - v15)) / v15;
          v66 = (v65 > 0) | (v65 >> 31);
          if (v65 < 0)
            v65 = -v65;
          v67 = v66 * ((v65 + 128) >> 8);
          if (v67 >= a13)
            v67 = a13;
          if (v67 <= -a13)
            LOBYTE(v67) = -(char)a13;
          *v56++ = v67;
          v54 = v57;
          --v53;
        }
        while (v53);
      }
      v48 += v45;
      v49 += v50;
      a8 = v51;
    }
    while (v51 != a10);
  }
  return result;
}

uint64_t sub_1B6833FC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10, int a11, int a12, signed int a13)
{
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int *v55;
  _BYTE *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  signed int v67;
  uint64_t v70;
  uint64_t v72;

  v15 = a6;
  v70 = result;
  v72 = (a5 - 1);
  if (a5 >= 1)
  {
    v16 = (4 << a5) - 1;
    v17 = -(4 << a5);
    v18 = ((v16 + a11) & v17) >> (a5 + 2);
    v19 = ((v16 + a12) & v17) >> (a5 + 2);
    result = sub_1B6833FC8(result, a2, a3, a4, v72, a6);
    if (a8 < a10)
    {
      v20 = *(int *)(a4 + 4 * v72);
      v21 = *(int *)(a4 + 4 * a5);
      v22 = *(_QWORD *)(a3 + 8 * a5) + 4 * (int)v21 * a8;
      v23 = a8;
      v24 = 2 * v20 * a8;
      v25 = 2 * v20;
      result = 4 * v20;
      do
      {
        if (a7 < a9)
        {
          if (2 * (int)v23 + 2 <= v19)
            v26 = 2;
          else
            v26 = v19 - 2 * v23;
          v27 = *(_QWORD *)(a3 + 8 * v72) + 4 * v24;
          v28 = 2 * a7 + 2;
          v29 = -2 * a7;
          v30 = 2 * a7;
          v31 = a7;
          do
          {
            if (v18 >= v28)
              v32 = v28;
            else
              v32 = v18;
            v33 = v31 + 1;
            if (v26 < 1)
            {
              v35 = 0;
            }
            else
            {
              v34 = 0;
              v35 = 0;
              v36 = v27 + 4 * v30;
              v37 = v32 + v29;
              v39 = v18 >= 2 * (int)v33 || v18 > 2 * (int)v31;
              do
              {
                if (v39)
                {
                  v40 = 0;
                  do
                    v35 += *(_DWORD *)(v36 + 4 * v40++);
                  while (v37 != v40);
                }
                ++v34;
                v36 += result;
              }
              while (v34 < v26);
            }
            v30 += 2;
            *(_DWORD *)(v22 + 4 * v31) = v35;
            v29 -= 2;
            v28 += 2;
            ++v31;
          }
          while (v33 != a9);
        }
        v22 += 4 * v21;
        ++v23;
        v24 += v25;
      }
      while (v23 != a10);
    }
  }
  v41 = *(_QWORD *)(v70 + 8 * a5);
  if (v41)
    v42 = a8 < a10;
  else
    v42 = 0;
  if (v42)
  {
    v43 = a5 + 3;
    v44 = (a11 + 7) >> 3;
    v45 = *(int *)(a2 + 4 * a5);
    v46 = *(int *)(a4 + 4 * a5);
    v47 = (a12 + 7) >> 3;
    v48 = (_BYTE *)(v41 + 2 * a7 + (int)v45 * (uint64_t)a8);
    v49 = *(_QWORD *)(a3 + 8 * a5) + 8 * a7 + 4 * (int)v46 * a8;
    v50 = 4 * v46;
    result = a9 - (uint64_t)a7;
    do
    {
      v51 = a8 + 1;
      if (a7 < a9)
      {
        if (v47 >= v51 << v43 >> 3)
          v52 = 1 << (a5 + 3) >> 3;
        else
          v52 = v47 - (a8 << v43 >> 3);
        v53 = a9 - (uint64_t)a7;
        v54 = a7;
        v55 = (int *)v49;
        v56 = v48;
        do
        {
          v57 = v54 + 1;
          v58 = v44 - (v54 << v43 >> 3);
          if (v44 >= v57 << v43 >> 3)
            v59 = 1 << (a5 + 3) >> 3;
          else
            v59 = v58;
          v60 = *v55++;
          v61 = (v60 + ((v59 * v52) >> 1)) / (v59 * v52);
          if (v61 >= 2)
          {
            v62 = __clz(v61);
            v63 = ((byte_1B69327A4[(unint64_t)(v61 << (v62 + 1)) >> 24] << 12) | 0x200000u) >> ((v62 + 1) >> 1);
            if ((v62 & 1) != 0)
              v64 = v63;
            else
              v64 = (11585 * v63) >> 14;
            v61 = (v64 + 16) >> 5;
          }
          v65 = (int)((a13 << 8) * (v61 - v15)) / v15;
          v66 = (v65 > 0) | (v65 >> 31);
          if (v65 < 0)
            v65 = -v65;
          v67 = v66 * ((v65 + 128) >> 8);
          if (v67 >= a13)
            v67 = a13;
          if (v67 <= -a13)
            LOBYTE(v67) = -(char)a13;
          *v56++ = v67;
          v54 = v57;
          --v53;
        }
        while (v53);
      }
      v48 += v45;
      v49 += v50;
      a8 = v51;
    }
    while (v51 != a10);
  }
  return result;
}

_QWORD *sub_1B6834398(_QWORD *result, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  size_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v3 = result;
  v4 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  v17 = *(_OWORD *)(result[37] + 2728);
  v5 = a2;
  do
  {
    v16 = v4;
    v6 = (char *)v3[v4 + 186];
    if (v6)
      v7 = a2 < 1;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = 0;
      v9 = 8 << v4;
      v10 = *((int *)v3 + v4 + 380);
      do
      {
        v11 = *((_DWORD *)v3 + 5);
        v12 = v11 * (int)v8 / a2;
        v13 = v8 + 1;
        v14 = v11 * ((int)v8 + 1) / a2;
        if (v12 < v14)
        {
          v15 = *((_DWORD *)&v17 + v8);
          do
          {
            result = memset(v6, v15, v10);
            v6 += v10;
            v12 += v9;
          }
          while (v12 < v14);
        }
        v8 = v13;
      }
      while (v13 != v5);
    }
    v4 = v16 + 1;
  }
  while (v16 != 3);
  return result;
}

int *sub_1B68344B8(int *result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  int v44;
  int v45;

  v1 = *result;
  v39 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)result + 37) + 584) + 3353);
  if (*result < v39)
  {
    v2 = result[4];
    v3 = result[5];
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)result + 37) + 584) + 3353);
    do
    {
      if (v3 >= 1)
      {
        v5 = 0;
        v6 = 1 << v4;
        v41 = ((1 << v4) + v2 - 1) >> v4;
        v7 = (1 << v4) >> 1;
        v8 = (1 << (2 * v4 - 3));
        v9 = 2 * v4 - 2;
        v42 = (1 << (2 * v4 - 1));
        v43 = 2 * v4;
        v10 = (1 << v4) >> (v1 + 1);
        v40 = (uint64_t *)&result[4 * (v39 - v4) + 394];
        v44 = v4;
        do
        {
          v11 = v5 + v6;
          if (v2 >= 1)
          {
            v12 = 0;
            v13 = (v5 >> v4) * v41;
            v14 = *v40;
            v45 = v5;
            do
            {
              v15 = v12 + v6;
              if (v12 + v6 <= v2 && v11 <= result[5])
              {
                if (v5 >= v11)
                {
                  v19 = 0;
                  v18 = 0;
                  v17 = 0;
                }
                else
                {
                  v17 = 0;
                  v18 = 0;
                  v19 = 0;
                  do
                  {
                    if (v12 < v15)
                    {
                      v20 = *((_QWORD *)result + 161);
                      v21 = v20 * (v5 >> *result);
                      v22 = 4 * v20;
                      v23 = 8 * v20;
                      v24 = v12;
                      do
                      {
                        if ((int)v10 < 1)
                        {
                          v26 = 0;
                          v34 = 0;
                        }
                        else
                        {
                          v25 = 0;
                          v26 = 0;
                          v27 = v21 + (v24 >> *result);
                          v28 = *((_QWORD *)result + 172) + 4 * v27;
                          v29 = *((_QWORD *)result + 174) + 8 * v27;
                          do
                          {
                            v30 = (int *)v28;
                            v31 = v10;
                            do
                            {
                              v32 = *v30++;
                              v26 += v32;
                              --v31;
                            }
                            while (v31);
                            ++v25;
                            v28 += v22;
                          }
                          while (v25 != v10);
                          v33 = 0;
                          v34 = 0;
                          do
                          {
                            v35 = (int *)v29;
                            v36 = v10;
                            do
                            {
                              v37 = *v35;
                              v35 += 2;
                              v34 += v37;
                              --v36;
                            }
                            while (v36);
                            ++v33;
                            v29 += v23;
                          }
                          while (v33 != v10);
                        }
                        v17 += (v8 + v34 - ((v26 * (unint64_t)v26) >> v9)) >> v9;
                        v19 += v26;
                        v18 += v34;
                        v24 += v7;
                      }
                      while (v24 < v15);
                    }
                    v5 += v7;
                  }
                  while (v5 < v11);
                }
                v38 = (v18 + v42 - ((unint64_t)(v19 * v19) >> v43)) >> v43;
                v16 = (v38 - ((unint64_t)(v17 + 2) >> 2)) & ~((int)(v38 - ((unint64_t)(v17 + 2) >> 2)) >> 31);
                v4 = v44;
                v5 = v45;
              }
              else
              {
                v16 = 0;
              }
              *(_DWORD *)(v14 + 4 * ((v12 >> v4) + v13)) = v16;
              v2 = result[4];
              v12 += v6;
            }
            while ((int)v15 < v2);
            v3 = result[5];
          }
          v5 = v11;
        }
        while ((int)v11 < v3);
        v1 = *result;
      }
      --v4;
    }
    while (v4 > v1);
  }
  return result;
}

uint64_t sub_1B683473C(uint64_t a1)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;

  v2 = *(int **)(a1 + 304);
  v3 = &v2[2 * v2[4]];
  v4 = *((__int16 *)v3 + 12);
  v5 = *((__int16 *)v3 + 13);
  LODWORD(v3) = v2[75];
  v6 = v2[74];
  v7 = (int)(*(float *)(*(_QWORD *)(a1 + 296) + 2720) + 0.5);
  v8 = v2[72];
  v9 = v2[73];
  v10 = (_DWORD)v3 - v7;
  if (v10 <= v8)
    LODWORD(v11) = v8;
  else
    LODWORD(v11) = v10 & (v10 >> 31);
  v12 = v6 - v7;
  if (v12 < v9)
    v9 = v12;
  if (v12 <= 0)
    v13 = 0;
  else
    v13 = v9;
  v14 = *(_DWORD *)(a1 + 1744);
  v15 = *(_DWORD *)(a1 + 1736);
  v16 = sub_1B6834854(v14, v15, v13);
  if (v16 <= (int)v11)
    v11 = v11;
  else
    v11 = v16 & (v16 >> 31);
  *(_DWORD *)(a1 + 1712) = v11;
  result = sub_1B6834854(v15, v14, v11);
  if ((int)result >= v13)
    v18 = v13;
  else
    v18 = result;
  if ((int)result <= 0)
    v19 = 0;
  else
    v19 = v18;
  *(_DWORD *)(a1 + 1716) = v19;
  if (*(int *)(a1 + 1756) >= 1)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 168))(*(_QWORD *)(a1 + 1720), v4, v5, a1 + 1760, v11);
  return result;
}

uint64_t sub_1B6834854(unsigned int a1, unsigned int a2, int a3)
{
  float v3;
  double v4;
  double v5;
  float v6;

  if (!a2)
    return 0;
  v3 = (double)-a3 / 6.0;
  v4 = (double)a1 / (double)a2 * (1.0 - exp2f(v3));
  if (v4 <= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  v6 = v4 + 1.0;
  return (int)(v5 + (float)(log2f(v6) * -6.0));
}

uint64_t sub_1B68348DC(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 584);
  v3 = *(__int16 *)(v2 + 3270);
  v4 = *(__int16 *)(v2 + 3272);
  if (v4 * v3 <= 230400 && *(double *)(v2 + 3280) <= 30.0)
  {
    if (a2 < 400)
      return 1;
    goto LABEL_7;
  }
  v5 = 1;
  if (a2 >= 400 && (unsigned __int16)v3 == (unsigned __int16)v4)
  {
LABEL_7:
    if (*(double *)(a1 + 1672) >= 12.0)
      return 2;
    else
      return 1;
  }
  return v5;
}

uint64_t sub_1B6834960(_QWORD *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)(a1 + 3) = 0u;
  v4 = a1 + 3;
  *((_DWORD *)a1 + 22) = 0;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  a1[3] = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, 0);
  v5 = *a1;
  a1[7] = *(_QWORD *)(*a1 + 112);
  *((_DWORD *)a1 + 22) = a2;
  v6 = *(unsigned __int8 *)(v5 + 284);
  if (v6 == 10)
  {
    *((_BYTE *)a1 + 92) = 1;
    v15 = a2 + 3;
    v16 = a2 + a2 + 3 + 2;
    v17 = (int)((v16 + *(_DWORD *)(v5 + 276) + 7) & 0xFFFFFFF8);
    v18 = (a2 + 10) & 0xFFFFFFF8;
    v19 = v17 * (*(int *)(v5 + 280) + (uint64_t)v16);
    result = sub_1B67C2364((void **)a1 + 1, 2 * (3 * v19 + (v18 | 5)), 0x10uLL);
    if ((_DWORD)result)
    {
LABEL_6:
      *((_DWORD *)v4 + 16) = 0;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      return result;
    }
    v20 = a1[1] + 2 * v18 + 2 * (int)v17 * (uint64_t)v15;
    v21 = v20 + 2 * v19 + 10;
    a1[4] = v21;
    a1[5] = v20;
    a1[6] = v21 + 2 * v19;
    a1[9] = v17;
    a1[10] = v17;
    a1[8] = v17;
    a1[12] = sub_1B6834B64;
    a1[13] = sub_1B6834CCC;
    a1[14] = sub_1B6834E34;
    a1[15] = sub_1B68351CC;
  }
  else
  {
    if (v6 == 8)
    {
      *((_BYTE *)a1 + 92) = 0;
      v7 = a2 + 3;
      v8 = a2 + a2 + 3 + 2;
      v9 = (int)((v8 + *(_DWORD *)(v5 + 276) + 15) & 0xFFFFFFF0);
      v10 = (a2 + 18) & 0xFFFFFFF0;
      v11 = v9 * (*(int *)(v5 + 280) + (uint64_t)v8);
      result = sub_1B67C2364((void **)a1 + 1, 3 * v11 + (v10 | 0xD), 0x10uLL);
      if (!(_DWORD)result)
      {
        v13 = a1[1] + v10 + (int)v9 * (uint64_t)v7;
        v14 = v13 + v11 + 13;
        a1[4] = v14;
        a1[5] = v13;
        a1[6] = v14 + v11;
        a1[9] = v9;
        a1[10] = v9;
        a1[8] = v9;
        a1[12] = sub_1B681C9E8;
        a1[13] = sub_1B681CB80;
        a1[14] = sub_1B681CD14;
        a1[15] = sub_1B6835260;
        return result;
      }
      goto LABEL_6;
    }
    return 4294954386;
  }
  return result;
}

uint64_t sub_1B6834B64(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v9 = a3;
  v12 = *(_QWORD *)(a2 + 112);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 4294967292, a3, 0);
  if (v9 < a4)
  {
    v14 = a6 + 2 * v9 * a5;
    v15 = *(int *)(a2 + 276);
    v16 = (__int16 *)(v14 - 8);
    v17 = result - 6;
    result = 2 * v15 + 6;
    do
    {
      if ((int)v15 >= -6)
      {
        v18 = 0;
        v19 = v17;
        do
        {
          v20 = 0;
          v21 = 0;
          do
          {
            v21 += byte_1B69224F0[v20] * *(unsigned __int16 *)(v19 + 2 * v20);
            ++v20;
          }
          while (v20 != 8);
          v22 = (v21 + 32) >> 6;
          if (v22 >= 1023)
            v22 = 1023;
          v16[v18++] = v22 & ~(unsigned __int16)(v22 >> 31);
          v19 += 2;
        }
        while (v18 != (((_DWORD)v15 + 6) & ~(((int)v15 + 6) >> 31)) + 1);
      }
      if (a1 != 1)
      {
        v23 = *v16;
        v24 = -4 - (a1 - 1);
        do
          *(_WORD *)(v14 + 2 * v24++) = v23;
        while (v24 != -4);
        v25 = v16[(int)v15 + 6];
        v26 = 2 * v15 + 6;
        v27 = a1 - 1;
        do
        {
          *(_WORD *)(v14 + v26) = v25;
          v26 += 2;
          --v27;
        }
        while (v27);
      }
      ++v9;
      v16 += a5;
      v17 += 2 * v12;
      v14 += 2 * a5;
    }
    while (v9 != a4);
  }
  return result;
}

char *sub_1B6834CCC(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v12;
  char *result;
  __int16 *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v9 = a3;
  v12 = *(_QWORD *)(a2 + 112);
  result = (char *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0, a3, 0);
  if (v9 < a4)
  {
    v14 = (__int16 *)(a6 + 2 * v9 * a5);
    v15 = *(unsigned int *)(a2 + 276);
    v16 = &result[-6 * v12];
    v17 = 2 * v12;
    result = byte_1B69224F0;
    do
    {
      if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = v16;
        do
        {
          v20 = 0;
          v21 = 0;
          v22 = (unsigned __int16 *)v19;
          do
          {
            v21 += byte_1B69224F0[v20++] * *v22;
            v22 = (unsigned __int16 *)((char *)v22 + v17);
          }
          while (v20 != 8);
          v23 = (v21 + 32) >> 6;
          if (v23 >= 1023)
            v23 = 1023;
          v14[v18++] = v23 & ~(unsigned __int16)(v23 >> 31);
          v19 += 2;
        }
        while (v18 != v15);
      }
      if (a1 == -3)
        goto LABEL_15;
      v24 = *v14;
      v25 = -(uint64_t)(a1 + 3);
      do
        v14[v25] = v24;
      while (!__CFADD__(v25++, 1));
      if (a1 != -2)
      {
LABEL_15:
        v27 = v14[(int)v15 - 1];
        v28 = (int)v15;
        v29 = a1 + 2;
        do
        {
          v14[v28++] = v27;
          --v29;
        }
        while (v29);
      }
      ++v9;
      v14 += a5;
      v16 += v17;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t sub_1B6834E34(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  _DWORD v63[8];
  uint64_t v64;

  v8 = a3;
  v64 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 112);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 4294967292, a3, 0);
  v61 = a4;
  if (v8 < a4)
  {
    v13 = a6 + 2 * v8 * a5;
    v14 = (__int16 *)(v13 - 8);
    v15 = *(int *)(a2 + 276);
    v59 = (int)v15 + 6;
    v16 = (((_DWORD)v15 + 6) & ~(((int)v15 + 6) >> 31)) + 1;
    v17 = result - 6 * v11 - 6;
    v18 = 2 * v11;
    v19 = result - 4 * v11 - 6;
    v20 = result - 2 * v11 - 6;
    v21 = result - 6;
    v22 = result - 6 + 2 * v11;
    v23 = result - 6 + 4 * v11;
    v24 = result - 6 + 6 * v11;
    v60 = *(_DWORD *)(a2 + 276);
    v58 = 2 * v15 + 6;
    v25 = result - 6 + 8 * v11;
    do
    {
      if (v60 >= -6)
      {
        v26 = 0;
        v27 = v25;
        v28 = v24;
        v29 = v23;
        v30 = v22;
        result = v21;
        v31 = v20;
        v32 = v19;
        v33 = v17;
        do
        {
          v34 = 0;
          v35 = 0;
          do
          {
            v35 += byte_1B69224F0[v34] * *(unsigned __int16 *)(v33 + 2 * v34);
            ++v34;
          }
          while (v34 != 8);
          v36 = 0;
          v37 = 0;
          v63[0] = v35 >> 2;
          do
          {
            v37 += byte_1B69224F0[v36] * *(unsigned __int16 *)(v32 + 2 * v36);
            ++v36;
          }
          while (v36 != 8);
          v38 = 0;
          v39 = 0;
          v63[1] = v37 >> 2;
          do
          {
            v39 += byte_1B69224F0[v38] * *(unsigned __int16 *)(v31 + 2 * v38);
            ++v38;
          }
          while (v38 != 8);
          v40 = 0;
          v41 = 0;
          v63[2] = v39 >> 2;
          do
          {
            v41 += byte_1B69224F0[v40] * *(unsigned __int16 *)(result + 2 * v40);
            ++v40;
          }
          while (v40 != 8);
          v42 = 0;
          v43 = 0;
          v63[3] = v41 >> 2;
          do
          {
            v43 += byte_1B69224F0[v42] * *(unsigned __int16 *)(v30 + 2 * v42);
            ++v42;
          }
          while (v42 != 8);
          v44 = 0;
          v45 = 0;
          v63[4] = v43 >> 2;
          do
          {
            v45 += byte_1B69224F0[v44] * *(unsigned __int16 *)(v29 + 2 * v44);
            ++v44;
          }
          while (v44 != 8);
          v46 = 0;
          v47 = 0;
          v63[5] = v45 >> 2;
          do
          {
            v47 += byte_1B69224F0[v46] * *(unsigned __int16 *)(v28 + 2 * v46);
            ++v46;
          }
          while (v46 != 8);
          v48 = 0;
          v49 = 0;
          v63[6] = v47 >> 2;
          do
          {
            v49 += byte_1B69224F0[v48] * *(unsigned __int16 *)(v27 + 2 * v48);
            ++v48;
          }
          while (v48 != 8);
          v50 = 0;
          v51 = 0;
          v63[7] = v49 >> 2;
          do
          {
            v51 += v63[v50] * byte_1B69224F0[v50];
            ++v50;
          }
          while (v50 != 8);
          v52 = (v51 + 512) >> 10;
          if (v52 >= 1023)
            v52 = 1023;
          v14[v26++] = v52 & ~(unsigned __int16)(v52 >> 31);
          v33 += 2;
          v32 += 2;
          v31 += 2;
          result += 2;
          v30 += 2;
          v29 += 2;
          v28 += 2;
          v27 += 2;
        }
        while (v26 != v16);
      }
      if (a1 != 1)
      {
        v53 = *v14;
        v54 = -4 - (a1 - 1);
        do
          *(_WORD *)(v13 + 2 * v54++) = v53;
        while (v54 != -4);
        v55 = v58;
        v56 = v14[v59];
        v57 = a1 - 1;
        do
        {
          *(_WORD *)(v13 + v55) = v56;
          v55 += 2;
          --v57;
        }
        while (v57);
      }
      v14 += a5;
      ++v8;
      v17 += v18;
      v19 += v18;
      v20 += v18;
      v21 += v18;
      v22 += v18;
      v23 += v18;
      v24 += v18;
      v25 += v18;
      v13 += 2 * a5;
    }
    while (v8 != v61);
  }
  return result;
}

void *sub_1B68351CC(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  const void *v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  if (a4 >= 1)
  {
    v6 = (const void *)(a6 + 2 * (-3 - (int)result) + 2 * a3 * a5);
    v7 = 2 * (a2 + 2 * (int)result + 5);
    v8 = (a4 + 1) - 1;
    v9 = (char *)(a5 * (2 * a3 + 2) - 2 * (int)result + a6 - 6);
    v10 = 2 * a5;
    do
    {
      result = memcpy(v9, v6, v7);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *sub_1B6835260(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  size_t v8;
  uint64_t v9;
  char *v10;

  if (a4 >= 1)
  {
    v7 = (const void *)(a6 + -3 - (int)result + a3 * a5);
    v8 = a2 + 2 * (int)result + 5;
    v9 = (a4 + 1) - 1;
    v10 = (char *)(a5 + a5 * a3 - (int)result + a6 - 3);
    do
    {
      result = memcpy(v10, v7, v8);
      v10 += a5;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1B68352E8(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v2 = a2;
  ((void (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))a1[12])(*((unsigned int *)a1 + 22), *a1, 0, a2, a1[8], a1[4]);
  v4 = *(_DWORD *)(*a1 + 280);
  if (v4 <= v2)
    v5 = (v4 + 3);
  else
    v5 = (v2 - 4);
  ((void (*)(_QWORD))a1[13])(*((unsigned int *)a1 + 22));
  ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))a1[14])(*((unsigned int *)a1 + 22), *a1, 4294967292, v5, a1[10], a1[6]);
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), 0, (*((_DWORD *)a1 + 22) + 3), -a1[8], a1[4]);
  ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), 4, (*((_DWORD *)a1 + 22) - 1), -a1[9], a1[5]);
  result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), 4, (*((_DWORD *)a1 + 22) - 1), -a1[10], a1[6]);
  v7 = *(_DWORD *)(*a1 + 280);
  if ((_DWORD)v5 == v7 + 3)
  {
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), (v7 - 1), (*((_DWORD *)a1 + 22) + 2), a1[8], a1[4]);
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), (*(_DWORD *)(*a1 + 280) + 2), (*((_DWORD *)a1 + 22) - 1), a1[9], a1[5]);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), (*(_DWORD *)(*a1 + 280) + 2), (*((_DWORD *)a1 + 22) - 1), a1[10], a1[6]);
  }
  return result;
}

uint64_t sub_1B6835480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t (*v14)(uint64_t, uint64_t, int);
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _BOOL4 v20;
  _BYTE *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  int32x2_t v39;
  int8x16_t v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  void *v44;
  uint64_t (*v45)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t);
  void *(*v46)(void *, int, uint64_t, char *, uint64_t, char *);
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  _BYTE **v62;
  uint64_t v63;
  int v65;
  uint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  uint32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  unsigned __int128 v101;
  int32x4_t v102;
  int32x4_t v103;
  uint32x4_t v104;
  int32x4_t v105;
  int v106;
  int8x16_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int8x16_t v116;
  uint32x4_t v117;
  int v118;
  int8x16_t v119;
  uint32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int32x4_t v130;
  uint32x4_t v131;
  uint32x4_t v132;
  int8x16_t v133;
  int32x4_t v134;
  uint32x4_t v135;
  uint32x4_t v136;
  int32x4_t v137;
  int8x16_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  _BOOL4 v235;
  uint64_t v236;
  _BYTE **v237;
  _BYTE *v238;
  unsigned int v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  char v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  int v279;
  int8x16_t v280;
  int8x16_t v281;
  _BOOL4 v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  int8x16_t v286;
  unsigned int v287;
  unsigned int v288;
  unint64_t v289;
  int v290;
  int8x16_t v291;
  int8x16_t v292;
  uint64_t v293;
  uint64_t v294;
  int32x4_t v295;
  uint64_t v296;
  char v297;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a2 + 1368);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 176);
  v5 = a1 + 16;
  v6 = a2 + 78544;
  v7 = *(unsigned __int8 *)(v4 + 241);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 1400);
  *(_QWORD *)(a1 + 1872) = a2;
  *(_QWORD *)(a1 + 1880) = v4;
  *(_QWORD *)(a1 + 1888) = *(_QWORD *)(a2 + 1384);
  v8 = *(_QWORD *)(a2 + 79088);
  *(_QWORD *)(a1 + 952) = v8;
  v9 = *(_QWORD *)(a2 + 79216);
  *(_QWORD *)(a1 + 960) = v9 + 768;
  v10 = a1 + 984;
  v11 = sub_1B685D040(a1 + 984, *(_DWORD *)(v8 + 240), *(unsigned __int8 *)(v4 + 2000), *(_DWORD *)(v8 + 64), *(char *)(v9 + 640));
  sub_1B685F7A0(v10, *(char *)(a2 + 621), *(unsigned __int8 *)(*(_QWORD *)(v5 + 1864) + 2001));
  if ((_DWORD)v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "RDCost init failed in LCUEnc\n", buf, 2u);
    }
    return v11;
  }
  *(_QWORD *)(a1 + 4296) = a2;
  v12 = *(_QWORD *)(a2 + 1368);
  *(_QWORD *)(a1 + 4304) = v12;
  *(_QWORD *)(a1 + 4312) = *(_QWORD *)(v6 + 544);
  LODWORD(v12) = *(unsigned __int8 *)(v12 + 2000);
  *(_QWORD *)(a1 + 4144) = sub_1B688D4E8;
  *(_QWORD *)(a1 + 4152) = sub_1B688D5AC;
  *(_QWORD *)(a1 + 4160) = sub_1B688D64C;
  *(_QWORD *)(a1 + 4168) = sub_1B688D688;
  *(_QWORD *)(a1 + 4176) = sub_1B688D6F0;
  *(_QWORD *)(a1 + 4184) = sub_1B688D74C;
  *(_QWORD *)(a1 + 4264) = sub_1B688D7A4;
  *(_QWORD *)(a1 + 4272) = sub_1B688D810;
  *(_QWORD *)(a1 + 4280) = sub_1B688D910;
  *(_QWORD *)(a1 + 4288) = sub_1B688DA50;
  v13 = (_DWORD)v12 == 8;
  if ((_DWORD)v12 == 8)
    v14 = sub_1B685F924;
  else
    v14 = sub_1B685FA98;
  *(_QWORD *)(a1 + 4192) = v14;
  if (v13)
    *(_QWORD *)(a1 + 4192) = sub_1B688DBD0;
  sub_1B67FFD7C(a1 + 1368, a2, v10, *(char *)(*(_QWORD *)(a1 + 952) + 259), *(char *)(*(_QWORD *)(a1 + 952) + 259), 8, 1, 2);
  memset((void *)(a1 + 8088), 255, 4 * v7 + 4);
  v15 = *(_QWORD *)(a1 + 952);
  v16 = *(char *)(v15 + 569);
  *(_DWORD *)(a1 + 4) = v16;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v15 + 613);
  v17 = *(_QWORD *)(v6 + 672);
  v18 = *(_DWORD *)(v17 + 444);
  *(_DWORD *)(a1 + 12) = v18;
  *(_BYTE *)(a1 + 188) = v16 == 4;
  *(_BYTE *)a1 = v16 > 0;
  if (v16 >= 3)
  {
    v19 = *(unsigned __int8 *)(a2 + 10);
    *(_BYTE *)(a1 + 1) = v19 < 2;
LABEL_13:
    v20 = 1;
    goto LABEL_20;
  }
  *(_BYTE *)(a1 + 1) = 0;
  v19 = *(unsigned __int8 *)(a2 + 10);
  if (v16 == 2)
    goto LABEL_13;
  v20 = v16 > 0 && v19 == 2;
LABEL_20:
  *(_DWORD *)(a1 + 184) = v20;
  *(_BYTE *)(a1 + 192) = *(unsigned __int8 *)(v17 + 640) - 3 < 2;
  v22 = *(_BYTE **)(a1 + 1880);
  *(_BYTE *)(v5 + 8110) = v22[245] != 0;
  v23 = v19 <= 1 && v22[244] != 0;
  *(_BYTE *)(v5 + 8111) = v23;
  v24 = *(_DWORD *)(v15 + 508);
  if (v24)
    LOBYTE(v24) = *(_BYTE *)(v15 + 574) || *(_BYTE *)(v15 + 575) || *(_BYTE *)(v15 + 576) != 0;
  *(_BYTE *)(v5 + 8112) = v24;
  v25 = *(_QWORD *)(a1 + 1872);
  v26 = *(_QWORD *)(v25 + 79216);
  v27 = *(_QWORD *)(v26 + 400);
  if (v27)
  {
    v28 = *(uint64_t **)(v26 + 392);
    v27 = v28[1];
    if (v27)
      v27 = *v28;
  }
  v29 = 0;
  v30 = v19 < 2;
  if (*(_BYTE *)(v15 + 612))
    v31 = v19 < 2;
  else
    v31 = 0;
  if (!*(_BYTE *)(v15 + 608))
    v30 = 0;
  *(_QWORD *)(a1 + 8136) = v27;
  *(_DWORD *)(a1 + 24) = *(char *)(v25 + 621);
  *(_BYTE *)(a1 + 189) = v31;
  *(_BYTE *)(a1 + 190) = v30;
  if (v19 == 2 && *(_BYTE *)(v15 + 225) == 1)
    v29 = v18 != 3 && v18 != 5;
  *(_BYTE *)(a1 + 191) = v29;
  if (!*(_QWORD *)(a1 + 4736))
  {
    v36 = *(_DWORD *)(a1 + 4848);
    v37 = *(_QWORD **)(a1 + 4856);
    if (v22[2000] == 8)
    {
      if (v36 == 1)
      {
LABEL_52:
        v37[1] = 0;
        v38 = 4 * v22[2013] + 16;
        v11 = sub_1B67C2364((void **)(a1 + 4648), 4 * v38, 0x10uLL);
        if ((_DWORD)v11)
          return v11;
        v41 = *(_QWORD *)(a1 + 4648);
        v42 = 3 * v38;
        *(_QWORD *)(a1 + 4664) = v41 + 16;
        *(_QWORD *)(a1 + 4672) = v41 + v38 + 16;
        *(_QWORD *)(a1 + 4680) = v41 + (2 * v38) + 16;
        v43 = sub_1B6839920;
        v44 = sub_1B6838D10;
        v45 = sub_1B6838CC8;
        v46 = sub_1B6838C64;
        goto LABEL_82;
      }
      if (v37)
        (*(void (**)(_QWORD *))(*v37 + 8))(v37);
      v37 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
      if (v37)
      {
        v37[1] = 0;
        v37[2] = 0;
        *v37 = &off_1E6A15238;
        *(_QWORD *)(a1 + 4856) = v37;
        *(_DWORD *)(a1 + 4848) = 1;
        v22 = *(_BYTE **)(a1 + 1880);
        goto LABEL_52;
      }
LABEL_93:
      *(_QWORD *)(a1 + 4856) = 0;
      return 4294954392;
    }
    if (v36 != 2)
    {
      if (v37)
        (*(void (**)(_QWORD *))(*v37 + 8))(v37);
      v37 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
      if (!v37)
        goto LABEL_93;
      v37[1] = 0;
      v37[2] = 0;
      *v37 = &off_1E6A15268;
      *(_QWORD *)(a1 + 4856) = v37;
      *(_DWORD *)(a1 + 4848) = 2;
      v22 = *(_BYTE **)(a1 + 1880);
    }
    v37[1] = 0;
    v67 = 4 * v22[2013] + 8;
    v11 = sub_1B67C2364((void **)(a1 + 4648), 8 * v67, 0x10uLL);
    if ((_DWORD)v11)
      return v11;
    v41 = *(_QWORD *)(a1 + 4648);
    *(_QWORD *)(a1 + 4664) = v41 + 16;
    *(_QWORD *)(a1 + 4672) = v41 + (2 * v67) + 16;
    *(_QWORD *)(a1 + 4680) = v41 + (4 * v67) + 16;
    v42 = 6 * v67;
    v43 = sub_1B68378AC;
    v44 = sub_1B6836F38;
    v45 = sub_1B6836EE8;
    v46 = sub_1B6836E84;
LABEL_82:
    v68 = (_QWORD *)(a1 + 4736);
    *(_QWORD *)(a1 + 4688) = v41 + v42 + 16;
    *(_QWORD *)(a1 + 8144) = v46;
    *(_QWORD *)(a1 + 8152) = v45;
    *(_QWORD *)(a1 + 8160) = v44;
    *(_QWORD *)(a1 + 8168) = 0;
    *(_QWORD *)(a1 + 8176) = v43;
    *(_QWORD *)(a1 + 8184) = 0;
    v69 = *(unsigned __int8 **)(a1 + 1880);
    v279 = v69[2013];
    v70 = v69[2009];
    v71 = v69[242];
    v72 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 952) + 352);
    v73 = (v69[241] + 4) & 0x1FC;
    v289 = v69[241];
    v74 = vdupq_n_s32(v70);
    v75 = 0uLL;
    v76.i64[0] = 0x100000001;
    v76.i64[1] = 0x100000001;
    v77.i64[0] = 0x400000004;
    v77.i64[1] = 0x400000004;
    v78.i64[0] = 0x100000001;
    v78.i64[1] = 0x100000001;
    v79.i64[0] = 0x200000002;
    v79.i64[1] = 0x200000002;
    v80 = (int32x4_t)xmmword_1B6917630;
    v81 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    v84 = 0uLL;
    v85 = 0uLL;
    v86 = 0uLL;
    do
    {
      v40.i32[0] = 0;
      v87 = (int32x4_t)v86;
      v88 = (int8x16_t)v85;
      v89 = v84;
      v90 = v83;
      v91 = (int8x16_t)v82;
      v92 = (int8x16_t)v81;
      v93 = v75;
      v94 = v80;
      v86.i32[0] = *(unsigned __int8 *)(*(_QWORD *)(a1 + 952) + 352);
      v95 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v86, v40), 0);
      v96 = vsubq_s32(v74, v80);
      v40 = (int8x16_t)vshlq_u32((uint32x4_t)v76, (uint32x4_t)vaddq_s32(v96, v96));
      v97 = (int32x4_t)vshrq_n_u32((uint32x4_t)v40, 4uLL);
      v98 = vceqzq_s32(v94);
      v99 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v77, (int8x16_t)v98), v98);
      v100 = vaddq_s32(v99, v76);
      v101 = *(_OWORD *)&v99 | __PAIR128__(0x200000002, 0x200000002);
      v102 = vmulq_s32((int32x4_t)vorrq_s8((int8x16_t)v97, (int8x16_t)vshrq_n_u32((uint32x4_t)v40, 5uLL)), (int32x4_t)v101);
      v103 = (int32x4_t)vbicq_s8((int8x16_t)v102, v95);
      v104 = (uint32x4_t)vaddq_s32(v96, v78);
      v105 = (int32x4_t)vshrq_n_u32((uint32x4_t)v40, 6uLL);
      v86 = (int8x16_t)vaddq_s32(v100, v87);
      v85 = vmlaq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v76, v104), v85), v105, v100);
      v84 = vaddq_s32(vmlaq_s32(vaddq_s32(v89, (int32x4_t)vshlq_u32(v79, v104)), v97, v100), v77);
      v83 = vaddq_s32((int32x4_t)v101, v90);
      v82 = vmlaq_s32(v82, (int32x4_t)vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v40, 1uLL), v40), (int32x4_t)v101);
      v81 = vaddq_s32(v102, v81);
      v75 = vaddq_s32(v103, v75);
      v80 = vaddq_s32(v94, v77);
      v73 -= 4;
    }
    while (v73);
    v295 = v74;
    v291 = (int8x16_t)v84;
    v292 = (int8x16_t)v89;
    v286 = (int8x16_t)v83;
    v282 = v72 != 0;
    v106 = ~v71;
    v39.i32[0] = v69[241];
    v107 = (int8x16_t)vcgtq_u32((uint32x4_t)v94, (uint32x4_t)vdupq_lane_s32(v39, 0));
    v108 = vaddvq_s32((int32x4_t)vbslq_s8(v107, (int8x16_t)v87, v86));
    v109 = ~v71 + v70;
    v110 = v69[2011];
    v111 = v70 - v110;
    *(_QWORD *)(a1 + 376) = 0;
    v290 = v70;
    v278 = v109;
    v280 = (int8x16_t)v75;
    v281 = (int8x16_t)v93;
    if (!v69[245] && !v69[244])
      goto LABEL_94;
    if ((int)v111 >= 1)
    {
      v112 = v70 - v110;
      bzero((void *)(a1 + 216), 32 * (~(_DWORD)v110 + v70) + 32);
      v111 = v112;
    }
    if (v111 < v109)
    {
      v113 = vdupq_n_s32(v111);
      v114 = vaddq_s32(v113, (int32x4_t)xmmword_1B6917630);
      v115 = vdupq_n_s32(*(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2012));
      v116 = 0uLL;
      v117.i64[0] = 0x100000001;
      v117.i64[1] = 0x100000001;
      v118 = (v106 + v110 + 3) & 0xFFFFFFFC;
      v119.i64[0] = 0x200000002;
      v119.i64[1] = 0x200000002;
      v120.i64[0] = 0x500000005;
      v120.i64[1] = 0x500000005;
      v121.i64[0] = 0x400000004;
      v121.i64[1] = 0x400000004;
      v122 = 0uLL;
      v123 = 0uLL;
      v124 = 0uLL;
      do
      {
        v105.i32[0] = 0;
        v125 = (int32x4_t)v124;
        v126 = (int32x4_t)v123;
        v127 = (int32x4_t)v122;
        v128 = (int32x4_t)v116;
        v116.i32[0] = v72;
        v129 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v116, (int8x16_t)v105), 0);
        v130 = vsubq_s32(v295, v114);
        v131 = (uint32x4_t)vaddq_s32(v130, v130);
        v132 = vshlq_u32(v117, v131);
        v133 = (int8x16_t)vceqq_s32(v130, v115);
        v134 = vceqq_s32(v114, v113);
        v135 = (uint32x4_t)vbicq_s8(v119, vorrq_s8((int8x16_t)v134, v133));
        v105 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v120, v131), v119, (int8x16_t)vshrq_n_u32(v132, 5uLL)), v135), (int8x16_t)vshlq_u32(vshrq_n_u32(v132, 4uLL), (uint32x4_t)vbicq_s8(v119, (int8x16_t)v134)));
        v136 = (uint32x4_t)vbslq_s8(v133, (int8x16_t)vshlq_u32((uint32x4_t)v119, v131), (int8x16_t)vshrq_n_u32(v132, 1uLL));
        v137 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v121, (int8x16_t)v134), v134);
        v124 = (int8x16_t)vaddq_s32(v137, v125);
        v123 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v137, v131), v126), (int32x4_t)vshlq_u32(v136, v135));
        v122 = (int8x16_t)vaddq_s32(v105, v127);
        v116 = (int8x16_t)vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)v105, v129), v128);
        v114 = vaddq_s32(v114, v121);
        v118 -= 4;
      }
      while (v118);
      v87.i32[0] = v106 + v110 - 1;
      v138 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v87.i32[0] & 0xFFFFFFFC), (int8x16_t)xmmword_1B6917630), (uint32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.i8, 0));
      v139 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v125, v124));
      v140 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v126, v123));
      v141 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v127, v122));
      v142 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v128, v116));
    }
    else
    {
LABEL_94:
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0;
    }
    if (*(_QWORD *)(a1 + 4744) >= (unint64_t)v108)
    {
LABEL_103:
      v277 = v111;
      v11 = sub_1B67C2218((void **)(a1 + 4752), vaddvq_s32((int32x4_t)vbslq_s8(v107, v88, (int8x16_t)v85)));
      if ((_DWORD)v11)
        return v11;
      v11 = sub_1B67C22BC((void **)(a1 + 4768), vaddvq_s32((int32x4_t)vbslq_s8(v107, v292, v291)));
      if ((_DWORD)v11)
        return v11;
      v145 = vaddvq_s32((int32x4_t)vbslq_s8(v107, (int8x16_t)v90, v286));
      v11 = sub_1B6836CF4(a1 + 4784, (v145 + v72 + v139));
      if ((_DWORD)v11)
        return v11;
      v146 = vaddvq_s32((int32x4_t)vbslq_s8(v107, v91, (int8x16_t)v82));
      v288 = 32 * v282;
      v11 = sub_1B67C8CAC((void **)(a1 + 4800), (v146 + 32 * v282 + v140));
      if ((_DWORD)v11)
        return v11;
      v147 = vaddvq_s32((int32x4_t)vbslq_s8(v107, v92, (int8x16_t)v81));
      v11 = sub_1B67C2364((void **)(a1 + 4816), (v147 + v72 + v141), 0x10uLL);
      if ((_DWORD)v11)
        return v11;
      v148 = vaddvq_s32((int32x4_t)vbslq_s8(v107, v281, v280));
      if ((_DWORD)v72)
      {
        v11 = sub_1B67C2364((void **)(a1 + 4832), (v148 + v142 + 1), 0x10uLL);
        if ((_DWORD)v11)
          return v11;
      }
      v287 = v148;
      v283 = v147;
      v284 = v146;
      v285 = v145;
      v149 = *(_QWORD *)(a1 + 4736);
      *(_QWORD *)(a1 + 4584) = v149;
      *(_QWORD *)(v149 + 88) = *(_QWORD *)(a1 + 4752);
      *(_QWORD *)(*(_QWORD *)(a1 + 4584) + 96) = *(_QWORD *)(a1 + 4768);
      v150 = (v279 * v279);
      v151 = *(_QWORD *)(a1 + 4856);
      *(_QWORD *)(a1 + 4864) = v151;
      v152 = *(_QWORD *)(v151 + 8);
      *(_QWORD *)(a1 + 4872) = v152;
      v153 = v150 >> 1;
      *(_QWORD *)(a1 + 4880) = v151;
      v154 = v152 + v150 + v153;
      *(_QWORD *)(a1 + 4888) = v152 + v150;
      *(_QWORD *)(a1 + 4896) = v151;
      v155 = v154 + v150;
      *(_QWORD *)(a1 + 4904) = v154;
      *(_QWORD *)(a1 + 4912) = v151;
      *(_QWORD *)(v151 + 8) = v155 + v153;
      *(_QWORD *)(a1 + 4920) = v155;
      v156 = *(_QWORD *)(a1 + 4584);
      *(_QWORD *)(v156 + 24) = v151;
      *(_QWORD *)(v156 + 32) = v152;
      v157 = *(_QWORD *)(a1 + 4584);
      v158 = *(_QWORD *)(a1 + 4888);
      *(_QWORD *)(v157 + 40) = *(_QWORD *)(a1 + 4880);
      *(_QWORD *)(v157 + 48) = v158;
      v159 = *(_QWORD *)(a1 + 4584);
      v160 = *(_QWORD *)(a1 + 4904);
      *(_QWORD *)(v159 + 56) = *(_QWORD *)(a1 + 4896);
      *(_QWORD *)(v159 + 64) = v160;
      v161 = *(_QWORD *)(a1 + 4584);
      v162 = *(_QWORD *)(a1 + 4920);
      *(_QWORD *)(v161 + 72) = *(_QWORD *)(a1 + 4912);
      *(_QWORD *)(v161 + 80) = v162;
      *(_QWORD *)(*(_QWORD *)(a1 + 4584) + 136) = *(_QWORD *)(a1 + 4784);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4584) + 136) + 56) = *(_QWORD *)(a1 + 4800);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4584) + 136) + 32) = *(_QWORD *)(a1 + 4816);
      if ((_DWORD)v72)
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4584) + 136) + 8) = *(_QWORD *)(a1 + 4832);
      v163 = 0;
      v164 = v290;
      do
      {
        v297 = v164 - v163 - 2;
        v165 = 1 << v297;
        v166 = (1 << (2 * (v164 - v163)));
        v167 = v166 >> 1;
        v168 = v166 >> 4;
        v169 = v166 >> 6;
        if (v163)
          v170 = 4;
        else
          v170 = 1;
        v171 = a1 + 8 * v163;
        *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 152) = *(_QWORD *)(a1 + 4680);
        *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 160) = *(_QWORD *)(a1 + 4688);
        v172 = v170 + 1;
        v294 = (v169 * (v170 + 1));
        *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 104) = *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 88)
                                                      + 2 * v294;
        *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 112) = *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 104)
                                                      + (v165 & 0xFFFFFFFE);
        v293 = (v168 * (v170 + 1));
        *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 120) = *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 96)
                                                      + 16 * v293;
        v296 = (1 << (v164 - v163 - 2));
        *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 128) = *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 120) + 16 * v165 + 32;
        v173 = *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 136);
        v174 = *(_QWORD *)(a1 + 4856);
        v175 = *(_QWORD *)(v174 + 8);
        *(_QWORD *)(v173 + 80) = v174;
        *(_QWORD *)(v173 + 88) = v175;
        v176 = *(_QWORD *)(*(_QWORD *)(v171 + 4584) + 136);
        *(_QWORD *)(v174 + 8) = v175 + v166 + v167;
        *(_QWORD *)(v176 + 96) = v174;
        *(_QWORD *)(v176 + 104) = v175 + v166;
        v177 = *(_QWORD **)(*(_QWORD *)(v171 + 4584) + 136);
        v178 = v177[7] + 2 * v166;
        v179 = v166 >> 2;
        v177[8] = v178;
        v177[9] = v178 + 2 * v179;
        v180 = v177[4] + v168;
        v177[5] = v180;
        v177[6] = v180 + v169;
        if ((_DWORD)v72)
        {
          v181 = v177[1] + v168;
          v177[2] = v181;
          v177[3] = v181 + v169;
        }
        v182 = (uint64_t *)(v171 + 4584);
        v183 = v167 | v166;
        v184 = v168 | (v166 >> 5);
        v185 = 368;
        v186 = 2 * v169;
        v187 = 16 * v168;
        v188 = 136;
        v189 = v167 | v166;
        v190 = v184;
        v191 = v170;
        v192 = a1 + 4456 + 32 * v163;
        do
        {
          v193 = (_QWORD *)(*v182 + v185);
          *(_QWORD *)v192 = v193 - 19;
          *v193 = *(_QWORD *)(a1 + 4680);
          *(_QWORD *)(*(_QWORD *)v192 + 160) = *(_QWORD *)(a1 + 4688);
          *(_QWORD *)(*(_QWORD *)v192 + 88) = *(_QWORD *)(*v182 + 88) + v186;
          *(_QWORD *)(*(_QWORD *)v192 + 104) = *(_QWORD *)(*v182 + 104);
          *(_QWORD *)(*(_QWORD *)v192 + 112) = *(_QWORD *)(*v182 + 112);
          *(_QWORD *)(*(_QWORD *)v192 + 96) = *(_QWORD *)(*v182 + 96) + v187;
          *(_QWORD *)(*(_QWORD *)v192 + 120) = *(_QWORD *)(*v182 + 120);
          *(_QWORD *)(*(_QWORD *)v192 + 128) = *(_QWORD *)(*v182 + 128);
          *(_QWORD *)(*(_QWORD *)v192 + 136) = *(_QWORD *)(*v182 + 136) + v188;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v192 + 136) + 56) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 56)
                                                                   + 2 * v189;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v192 + 136) + 32) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 32) + v190;
          if ((_DWORD)v72)
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v192 + 136) + 8) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 8) + v190;
          v194 = *(_QWORD *)(*(_QWORD *)v192 + 136);
          v195 = *(_QWORD *)(a1 + 4856);
          v196 = *(_QWORD *)(v195 + 8);
          *(_QWORD *)(v194 + 80) = v195;
          *(_QWORD *)(v194 + 88) = v196;
          v197 = *(_QWORD *)(*(_QWORD *)v192 + 136);
          *(_QWORD *)(v195 + 8) = v196 + v166 + v167;
          *(_QWORD *)(v197 + 96) = v195;
          *(_QWORD *)(v197 + 104) = v196 + v166;
          v198 = *(_QWORD **)(*(_QWORD *)v192 + 136);
          v199 = v198[7] + 2 * v166;
          v198[8] = v199;
          v198[9] = v199 + 2 * v179;
          v200 = v198[4] + v168;
          v198[5] = v200;
          v198[6] = v200 + v169;
          if ((_DWORD)v72)
          {
            v201 = v198[1] + v168;
            v198[2] = v201;
            v198[3] = v201 + v169;
          }
          v192 += 8;
          v190 += v184;
          v189 += v183;
          v188 += 136;
          v187 += 16 * v168;
          v186 += 2 * v169;
          v185 += 216;
          --v191;
        }
        while (v191);
        v202 = *v182;
        v203 = *(_QWORD *)(*v182 + 136) + 136 * v170;
        v204 = a1 + 8 * v163 + 4616;
        *(_QWORD *)v204 = v203 + 136;
        *(_QWORD *)(v203 + 192) = *(_QWORD *)(*(_QWORD *)(v202 + 136) + 56) + 2 * (v183 * v172);
        v205 = (v184 * v172);
        *(_QWORD *)(*(_QWORD *)v204 + 32) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 32) + v205;
        if ((_DWORD)v72)
          *(_QWORD *)(*(_QWORD *)v204 + 8) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 8) + v205;
        v206 = *(_QWORD *)v204;
        v207 = *(_QWORD *)(a1 + 4856);
        v208 = *(_QWORD *)(v207 + 8);
        *(_QWORD *)(v206 + 80) = v207;
        *(_QWORD *)(v206 + 88) = v208;
        v209 = *(_QWORD *)v204;
        *(_QWORD *)(v207 + 8) = v208 + v166 + v167;
        *(_QWORD *)(v209 + 96) = v207;
        *(_QWORD *)(v209 + 104) = v208 + v166;
        v210 = *(_QWORD **)v204;
        v211 = v210[7] + 2 * v166;
        v210[8] = v211;
        v210[9] = v211 + 2 * v179;
        v212 = v210[4] + v168;
        v210[5] = v212;
        v210[6] = v212 + v169;
        v164 = v290;
        if ((_DWORD)v72)
        {
          v213 = v210[1] + v168;
          v210[2] = v213;
          v210[3] = v213 + v169;
        }
        if (v163 >= v289)
        {
          ++v163;
        }
        else
        {
          v214 = *v182;
          v215 = *v182 + 216 * v170;
          ++v163;
          v216 = a1 + 8 * v163;
          *(_QWORD *)(v216 + 4584) = v215 + 216;
          *(_QWORD *)(v215 + 304) = *(_QWORD *)(v214 + 88) + 2 * v294 + 2 * v296;
          *(_QWORD *)(*(_QWORD *)(v216 + 4584) + 96) = *(_QWORD *)(*v182 + 96)
                                                       + 16 * v293
                                                       + 16 * ((2 << v297) + 4);
          *(_QWORD *)(*(_QWORD *)(v216 + 4584) + 136) = *(_QWORD *)(*v182 + 136) + 136 * (v170 | 2);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v216 + 4584) + 136) + 56) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 56)
                                                                            + 2 * v183 * (v170 | 2);
          v217 = v184 * (v170 | 2);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v216 + 4584) + 136) + 32) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 32)
                                                                            + v217;
          if ((_DWORD)v72)
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v216 + 4584) + 136) + 8) = *(_QWORD *)(*(_QWORD *)(*v182 + 136) + 8)
                                                                             + v217;
        }
      }
      while (v163 != v289 + 1);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 952) + 352))
      {
        v218 = *(_QWORD *)(a1 + 4784) + 136 * v285;
        *(_QWORD *)(a1 + 376) = v218;
        *(_QWORD *)(v218 + 56) = *(_QWORD *)(a1 + 4800) + 2 * v284;
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 64) = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 56) + v288;
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 72) = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 64);
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 32) = *(_QWORD *)(a1 + 4816) + v283;
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 32);
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 48) = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 32);
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8) = *(_QWORD *)(a1 + 4832) + v287;
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8);
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8);
        **(_BYTE **)(a1 + 376) = 4;
        *(_BYTE *)(*(_QWORD *)(a1 + 376) + 1) = 4;
        v219 = *(_QWORD *)(a1 + 376);
        v220 = *(_QWORD *)(a1 + 4856);
        v221 = *(_QWORD *)(v220 + 8);
        *(_QWORD *)(v220 + 8) = v221 + v288;
        *(_QWORD *)(v219 + 80) = v220;
        *(_QWORD *)(v219 + 88) = v221;
        *(_OWORD *)(v219 + 96) = *(_OWORD *)(v219 + 80);
      }
      v222 = *(_QWORD *)(a1 + 1880);
      if (*(_BYTE *)(v222 + 245) || *(_BYTE *)(v222 + 244))
      {
        v223 = *(_QWORD *)(a1 + 4784) + 136 * v285 + 136 * v72;
        v224 = a1 + 32 * v277;
        *(_QWORD *)(v224 + 216) = v223;
        v225 = v224 + 216;
        *(_QWORD *)(v223 + 56) = *(_QWORD *)(a1 + 4800) + 2 * v284 + 2 * v288;
        *(_QWORD *)(*(_QWORD *)v225 + 32) = *(_QWORD *)(a1 + 4816) + v283 + v72;
        if ((_DWORD)v72)
          *(_QWORD *)(*(_QWORD *)v225 + 8) = *(_QWORD *)(a1 + 4832) + v287 + v72;
        if (v277 < v278)
        {
          v226 = v277;
          while (1)
          {
            v227 = v290 - v226;
            v228 = 2 * (v290 - v226);
            v229 = (1 << (2 * (v290 - v226)));
            v230 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2012);
            v231 = v229 >> 5;
            if (v228 < 5)
              v231 = 2;
            if (v226 == v277)
              v232 = 1;
            else
              v232 = 4;
            if (v227 == v230)
              v233 = (2 << (2 * (v290 - v226)));
            else
              v233 = v229 >> 1;
            v234 = v229 >> 4;
            v235 = v227 == v230 || v226 == v277;
            v236 = a1 + 32 * v226;
            v238 = *(_BYTE **)(v236 + 216);
            v237 = (_BYTE **)(v236 + 216);
            *v238 = 1 << v227;
            v239 = (v227 - 1);
            if (v239 <= *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2012))
              LOBYTE(v239) = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2012);
            (*v237)[1] = 1 << v239;
            v240 = *v237;
            v241 = *(_QWORD *)(a1 + 4856);
            v242 = *(_QWORD *)(v241 + 8);
            v240[10] = v241;
            v240[11] = v242;
            v243 = *v237;
            *(_QWORD *)(v241 + 8) = v242 + v229 + v233;
            v243[12] = v241;
            v243[13] = v242 + v229;
            v244 = *v237;
            v245 = *((_QWORD *)*v237 + 7) + 2 * v229;
            v244[8] = v245;
            v244[9] = v245 + v233;
            v246 = v244[4] + v234;
            v247 = v231 >> 1;
            v244[5] = v246;
            v244[6] = v246 + v247;
            if ((_DWORD)v72)
            {
              v248 = v244[1] + v234;
              v244[2] = v248;
              v244[3] = v248 + v247;
            }
            if (v226 != v277)
              break;
LABEL_167:
            if (v278 - 1 <= v226)
            {
              ++v226;
            }
            else
            {
              v13 = v226 == v277;
              v266 = *v237;
              v267 = (uint64_t)&(*v237)[136 * v232];
              ++v226;
              v268 = a1 + 32 * v226;
              *(_QWORD *)(v268 + 216) = v267;
              v269 = v268 + 216;
              v270 = !v13;
              v271 = v266[7] + 2 * (v232 << v228);
              if (v235)
                v272 = 0;
              else
                v272 = 2;
              *(_QWORD *)(v267 + 56) = v271 + 2 * ((_DWORD)v233 << v272);
              v273 = ((_DWORD)v234 << (2 * v270)) + (unint64_t)(v231 << v272);
              *(_QWORD *)(*(_QWORD *)v269 + 32) = *((_QWORD *)*v237 + 4) + v273;
              if ((_DWORD)v72)
                *(_QWORD *)(*(_QWORD *)v269 + 8) = *((_QWORD *)*v237 + 1) + v273;
            }
            if (v278 <= v226)
              goto LABEL_178;
          }
          v249 = 0;
          v250 = a1 + 32 * v226;
          v251 = v231;
          while (1)
          {
            v252 = v250 + v249;
            v253 = *(_QWORD *)(v250 + v249 + 216);
            *(_QWORD *)(v250 + v249 + 224) = v253 + 136;
            *(_BYTE *)(v253 + 136) = **v237;
            *(_BYTE *)(*(_QWORD *)(v250 + v249 + 224) + 1) = (*v237)[1];
            v254 = *(_QWORD *)(v250 + v249 + 224);
            v255 = *(_QWORD *)(a1 + 4856);
            v256 = *(_QWORD *)(v255 + 8);
            *(_QWORD *)(v255 + 8) = v256 + v229;
            *(_QWORD *)(v254 + 80) = v255;
            *(_QWORD *)(v254 + 88) = v256;
            *(_QWORD *)(*(_QWORD *)(v250 + v249 + 224) + 56) = *(_QWORD *)(*(_QWORD *)(v250 + v249 + 216) + 56)
                                                               + 2 * v229
                                                               + 2 * v233;
            *(_QWORD *)(*(_QWORD *)(v250 + v249 + 224) + 32) = *(_QWORD *)(*(_QWORD *)(v250 + v249 + 216) + 32)
                                                               + v234
                                                               + v251;
            if ((_DWORD)v72)
              *(_QWORD *)(*(_QWORD *)(v252 + 224) + 8) = *(_QWORD *)(*(_QWORD *)(v252 + 216) + 8) + v234 + v251;
            if (v235)
            {
              *(_OWORD *)(*(_QWORD *)(v252 + 224) + 96) = *((_OWORD *)*v237 + 6);
              *(_QWORD *)(*(_QWORD *)(v252 + 224) + 64) = *((_QWORD *)*v237 + 8);
              *(_QWORD *)(*(_QWORD *)(v252 + 224) + 72) = *((_QWORD *)*v237 + 9);
              *(_QWORD *)(*(_QWORD *)(v252 + 224) + 40) = *((_QWORD *)*v237 + 5);
              *(_QWORD *)(*(_QWORD *)(v252 + 224) + 48) = *((_QWORD *)*v237 + 6);
              LODWORD(v233) = 0;
              v251 = 0;
              if ((_DWORD)v72)
              {
                *(_QWORD *)(*(_QWORD *)(v252 + 224) + 16) = *((_QWORD *)*v237 + 2);
                v257 = *((_QWORD *)*v237 + 3);
                v258 = *(_QWORD **)(v252 + 224);
LABEL_165:
                v258[3] = v257;
              }
            }
            else
            {
              v259 = *(_QWORD *)(v252 + 224);
              v260 = *(_QWORD *)(a1 + 4856);
              v261 = *(_QWORD *)(v260 + 8);
              *(_QWORD *)(v260 + 8) = v261 + v233;
              *(_QWORD *)(v259 + 96) = v260;
              *(_QWORD *)(v259 + 104) = v261;
              v258 = *(_QWORD **)(v252 + 224);
              v262 = v258[7] + 2 * v229;
              v258[8] = v262;
              v258[9] = v262 + (v233 & 0xFFFFFFFE);
              v263 = v258[4] + v234;
              v264 = v251 >> 1;
              v258[5] = v263;
              v258[6] = v263 + v264;
              if ((_DWORD)v72)
              {
                v265 = v258[1] + v234;
                v258[2] = v265;
                v257 = v265 + v264;
                goto LABEL_165;
              }
            }
            v249 += 8;
            if (v249 == 24)
              goto LABEL_167;
          }
        }
LABEL_178:
        v274 = (_QWORD *)(a1 + 32 * v277);
        v274[28] = 0;
        v274[29] = 0;
        v274[30] = 0;
      }
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 4856) + 16))(*(_QWORD *)(a1 + 4856));
      if ((_DWORD)v11)
        return v11;
      v275 = *(_QWORD *)(a1 + 4584);
      *(_OWORD *)(a1 + 4704) = *(_OWORD *)(v275 + 104);
      *(_OWORD *)(a1 + 4720) = *(_OWORD *)(v275 + 120);
      *(_QWORD *)(a1 + 4472) = 0;
      *(_QWORD *)(a1 + 4480) = 0;
      *(_QWORD *)(a1 + 4464) = 0;
      goto LABEL_44;
    }
    if (v108 <= 0x7684B)
    {
      v276 = v111;
      sub_1B6836E18(a1 + 4736);
      if (!malloc_type_posix_memalign((void **)(a1 + 4736), 0x10uLL, 216 * v108, 0x10A0040DC34BAECuLL))
      {
        if (*v68)
        {
          v143 = 0;
          do
          {
            v144 = *v68 + v143;
            *(_OWORD *)(v144 + 72) = 0uLL;
            *(_OWORD *)(v144 + 56) = 0uLL;
            *(_OWORD *)(v144 + 40) = 0uLL;
            *(_OWORD *)(v144 + 24) = 0uLL;
            v143 += 216;
          }
          while (216 * v108 != v143);
          *(_QWORD *)(a1 + 4744) = v108;
          v111 = v276;
          goto LABEL_103;
        }
      }
    }
    return 4294954392;
  }
LABEL_44:
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 976) + 16))(*(_QWORD *)(a1 + 976));
  *(_BYTE *)(a1 + 789) = v33;
  if (v33)
  {
    v34 = *(_QWORD *)(a1 + 976);
    v5 = v34 + 8;
    v35 = (int *)(v34 + 12);
  }
  else
  {
    v35 = (int *)(v5 + 4);
  }
  v47 = *v35;
  *(_DWORD *)(a1 + 792) = *(_DWORD *)v5;
  *(_DWORD *)(a1 + 796) = v47;
  v48 = *(_QWORD *)(a1 + 952);
  if (*(_BYTE *)(v48 + 256) && *(unsigned __int8 *)(*(_QWORD *)(a1 + 1872) + 10) <= 1u)
    v49 = *(unsigned __int8 *)(a1 + 192) + 1;
  else
    v49 = 0;
  v50 = 0;
  *(_DWORD *)(a1 + 200) = v49;
  if ((*(_BYTE *)(v48 + 125) & 0xFB) != 0)
    v51 = sub_1B6836C04;
  else
    v51 = sub_1B6836B0C;
  *(_QWORD *)(a1 + 968) = v51;
  v52 = *(_QWORD *)(a1 + 1880);
  v53 = a1 + 4456;
  do
  {
    v54 = 0;
    v55 = *(unsigned __int8 *)(v52 + 2013);
    v56 = v55 >> v50;
    v57 = a1 + 8 * v50;
    v58 = *(_QWORD *)(v57 + 4584);
    *(_BYTE *)(v58 + 1) = v55;
    *(_BYTE *)v58 = v55 >> v50;
    **(_BYTE **)(v58 + 136) = v55 >> v50;
    v59 = v55 >> v50 >> 1;
    v60 = 1 << *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2012);
    if (v59 > v60)
      LOBYTE(v60) = v59;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v57 + 4584) + 136) + 1) = v60;
    **(_BYTE **)(v57 + 4616) = v56;
    v61 = 1 << *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2012);
    if (v59 > v61)
      LOBYTE(v61) = v59;
    v62 = (_BYTE **)(v57 + 4616);
    *(_BYTE *)(*(_QWORD *)(v57 + 4616) + 1) = v61;
    do
    {
      v63 = *(_QWORD *)(v53 + v54);
      if (v63)
      {
        *(_BYTE *)(v63 + 1) = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2013);
        *(_BYTE *)v63 = v56;
        **(_BYTE **)(v63 + 136) = **v62;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + v54) + 136) + 1) = (*v62)[1];
      }
      v54 += 8;
    }
    while (v54 != 32);
    v52 = *(_QWORD *)(a1 + 1880);
    v53 += 32;
  }
  while (v50++ < *(unsigned __int8 *)(v52 + 241));
  v11 = 0;
  v65 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 172) = *(_QWORD *)v6;
  *(_DWORD *)(a1 + 180) = v65;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  return v11;
}

uint64_t sub_1B6836B0C(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)(a4 + 1872);
  v5 = *(_QWORD *)(a4 + 960);
  v6 = *(_DWORD *)(v5 + 1304);
  v7 = *(char *)(v4 + 621);
  if (v6)
  {
    v10 = v4 + 79088;
    v11 = *(_QWORD *)(v4 + 1368);
    v12 = *(unsigned __int8 *)(v11 + 2009) - a3;
    v13 = *(_QWORD *)(v4 + 79088);
    v14 = *(char *)(v13 + 126);
    v15 = sub_1B682F744(*(_QWORD *)(a4 + 960), a1, a2, *(_BYTE *)(v11 + 2009) - a3, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(char *)(v13 + 125));
    if (*(_BYTE *)(v5 + 13))
      v7 = sub_1B682F68C(v5, a1, a2, v12) + v7;
    v16 = sub_1B682FB28(v7, -*(unsigned __int8 *)(v11 + 2001), v15, v6, v14);
    LODWORD(v7) = v16;
    v17 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 2712);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 284) + 3;
      if (v18 >= v16)
        LODWORD(v7) = v16;
      else
        LODWORD(v7) = v18;
    }
  }
  if ((int)v7 >= 51)
    return 51;
  else
    return v7;
}

uint64_t sub_1B6836C04(int a1, int a2, char a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  v4 = *(_QWORD *)(a4 + 960);
  v5 = *(_DWORD *)(v4 + 4);
  v6 = v5 - 3;
  if ((v5 - 3) > 3)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(char **)(v4 + 8 * v6 + 1488);
    if (v7)
      v7 += (((*(_DWORD *)(v4 + 16) + ~(-1 << v5)) & (-1 << v5)) >> v5) * (a2 >> v5) + (uint64_t)(a1 >> v5);
  }
  v8 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 1872) + 1368) + 2009) - a3);
  v9 = *(_DWORD *)(a4 + 20) - a2;
  if (v8 < v9)
    v9 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 1872) + 1368) + 2009) - a3);
  v10 = (v9 >> v5);
  if ((int)v10 < 1)
    return 51;
  v11 = 0;
  if (v8 >= *(_DWORD *)(a4 + 16) - a1)
    v8 = *(_DWORD *)(a4 + 16) - a1;
  v12 = (v8 >> v5);
  v13 = *(int *)(v4 + 4 * (int)v6 + 1520);
  result = 51;
  do
  {
    v15 = v7;
    v16 = v12;
    if ((int)v12 >= 1)
    {
      do
      {
        v18 = *v15++;
        v17 = v18;
        if ((int)result >= v18)
          result = v17;
        else
          result = result;
        --v16;
      }
      while (v16);
    }
    ++v11;
    v7 += v13;
  }
  while (v11 != v10);
  return result;
}

uint64_t sub_1B6836CF4(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 8) >= a2)
    return 0;
  if (a2 > 0xBC3C3)
    return 4294954392;
  sub_1B6836DAC(a1);
  if (malloc_type_posix_memalign((void **)a1, 0x10uLL, 136 * a2, 0x103004000029181uLL) || !*(_QWORD *)a1)
    return 4294954392;
  v5 = 8;
  v6 = a2;
  do
  {
    v7 = *(_QWORD *)a1 + v5;
    *(_QWORD *)(v7 + 96) = 0;
    *(_OWORD *)(v7 + 64) = 0uLL;
    *(_OWORD *)(v7 + 80) = 0uLL;
    *(_OWORD *)(v7 + 32) = 0uLL;
    *(_OWORD *)(v7 + 48) = 0uLL;
    *(_OWORD *)v7 = 0uLL;
    *(_OWORD *)(v7 + 16) = 0uLL;
    v5 += 136;
    --v6;
  }
  while (v6);
  result = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

void sub_1B6836DAC(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = 0;
      v4 = 8;
      do
      {
        v5 = *(_QWORD *)a1 + v4;
        *(_QWORD *)(v5 + 64) = 0;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)(v5 + 48) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
        ++v3;
        v4 += 136;
      }
      while (v3 < *(_QWORD *)(a1 + 8));
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1B6836E18(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = 0;
      v4 = 88;
      do
      {
        v5 = (_OWORD *)(*(_QWORD *)a1 + v4);
        v5[3] = 0uLL;
        v5[4] = 0uLL;
        v5[1] = 0uLL;
        v5[2] = 0uLL;
        *v5 = 0uLL;
        ++v3;
        v4 += 216;
      }
      while (v3 < *(_QWORD *)(a1 + 8));
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void *sub_1B6836E84(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  if (a2)
  {
    v8 = 2 * a5;
    v9 = 2 * a3;
    v10 = 2 * (int)result;
    v11 = a2;
    do
    {
      --v11;
      result = memcpy(__dst, __src, v10);
      __dst += v8;
      __src += v9;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1B6836EE8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int i;
  uint64_t v7;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        v7 = 0;
        do
        {
          *(_WORD *)(a6 + 2 * v7) = *(_WORD *)(a4 + 2 * v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a6 += 2 * a5;
      a4 += 2 * a3;
    }
  }
  return result;
}

uint64_t sub_1B6836F38(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, _WORD *a9)
{
  uint64_t v10;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  int v21;
  _WORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  _BOOL8 v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v43;
  uint64_t v44;
  _WORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _BOOL8 v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int8 *v63;
  uint64_t v64;
  _WORD *v65;
  uint64_t v66;
  const void *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  _BOOL8 v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned __int8 *v81;
  const void *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  _BOOL8 v88;
  unsigned __int8 *v89;
  char v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  _BOOL8 v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  unsigned __int8 *v119;
  char *v120;
  __int16 v121;
  uint64_t v122;
  _WORD *v123;
  uint64_t v124;
  __int16 v125;
  _WORD *v126;
  uint64_t v127;
  __int16 v128;
  _WORD *v129;
  uint64_t v130;
  char *v131;
  __int16 v132;
  int v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  int v140;
  char *v141;
  uint64_t v142;
  int v143;
  int v144;

  v10 = result;
  if (!a7)
  {
    v20 = (4 << a8) | 1;
    v21 = 128 << *(_BYTE *)(*(_QWORD *)(result + 1880) + 194);
    v22 = a9 - 1;
    do
    {
      *v22++ = v21;
      --v20;
    }
    while (v20);
    return result;
  }
  v15 = 2 << a8;
  v137 = result + 4696;
  v144 = a4;
  if (!*(_BYTE *)(result + 4696) && (*(_DWORD *)(result + 4428) == a2 || *(_DWORD *)(result + 4432) == a3))
  {
    sub_1B6838720(result, 0);
    a4 = v144;
  }
  v16 = 1 << a8;
  v141 = (char *)&a9[v15];
  result = sub_1B6838850(v10, a2, a3, a4, (uint64_t)a5, a8, a7, 0);
  v17 = *(_QWORD *)(v10 + 1880);
  v135 = *(unsigned __int8 *)(v17 + 2013);
  v142 = *(_QWORD *)(v10 + 4664);
  v143 = *(_DWORD *)(v10 + 4432);
  v140 = a3 - v143;
  v134 = *(_DWORD *)(v10 + 4428);
  v18 = a2 - v134;
  if (a2 == v134)
  {
    v138 = (a7 & 0xF0) != 0;
    if ((a7 & 0xF0) != 0)
      result = (uint64_t)memcpy(a9, (const void *)(v142 + 2 * v140), 2 * v16);
    v19 = (char *)&a9[v15];
    if ((a7 & 0xF) != 0)
    {
      result = (uint64_t)memcpy(&a9[v16], (const void *)(v142 + 2 * v140 + 2 * v16), 2 * v16);
      v136 = 1;
    }
    else
    {
      v136 = 0;
    }
    v23 = v144;
  }
  else
  {
    v136 = (a7 & 0xF) != 0;
    v23 = v144;
    if ((a7 & 0xF) != 0)
    {
      v24 = a2 - 1;
      v25 = v16 + a3;
      v26 = *((_DWORD *)a5 + 1);
      if (v26 >= a2 || (v27 = *a5, v26 + v27 < a2) || (v34 = *((_DWORD *)a5 + 2), v34 > v25) || v34 + v27 <= v25)
      {
        v28 = v24 - v134;
        v29 = v25 - v143;
        v30 = *(unsigned __int8 *)(v17 + 2009);
        if (v144 < 0)
        {
LABEL_22:
          v33 = -1;
        }
        else
        {
          v31 = v30 - v144;
          while (v18 >> v31 != v28 >> v31 || v140 >> v31 != v29 >> v31)
          {
            v32 = v31++ < v30;
            if (!v32)
              goto LABEL_22;
          }
          v37 = v30 - v31;
          if (v37 >= v144)
            v33 = v37;
          else
            v33 = v37 + 1;
        }
        v35 = 0;
        v36 = *(unsigned __int8 **)(v10
                                  + 32 * v33
                                  + 8
                                  * ((v28 >> (v30 - v33)) & 1 | (2
                                                                             * ((v29 >> (v30 - v33)) & 1)))
                                  + 4456);
        v26 = *((_DWORD *)v36 + 1);
        v34 = *((_DWORD *)v36 + 2);
      }
      else
      {
        v35 = a6 != 3;
        v36 = a5;
      }
      result = 0;
      v38 = **((unsigned __int8 **)v36 + 17);
      v39 = v24 - v26;
      if ((v39 & 0x80000000) == 0)
      {
        v40 = v25 - v34;
        if ((v40 & 0x80000000) == 0)
        {
          v41 = *v36;
          if (v39 >= v41 || v40 >= v41)
          {
            result = 0;
          }
          else
          {
            v43 = *(unsigned __int8 **)&v36[8 * v35 + 136];
            v139 = **((unsigned __int8 **)v36 + 17);
            result = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v43 + 10) + 24))(*((_QWORD *)v43 + 10), *((_QWORD *)v43 + 11) + v39 + *v43 * (unint64_t)v40);
            v38 = v139;
            v23 = v144;
          }
        }
      }
      if (v16 < v15)
      {
        v44 = v15 - (uint64_t)v16;
        v45 = &a9[v16];
        do
        {
          *v45++ = *(_WORD *)result;
          result += 2 * v38;
          --v44;
        }
        while (v44);
      }
    }
    if ((a7 & 0xF0) != 0)
    {
      v46 = a2 - 1;
      v47 = *((_DWORD *)a5 + 1);
      if (v47 >= a2 || (v48 = *a5, v47 + v48 < a2) || (v57 = *((_DWORD *)a5 + 2), v57 > a3) || v57 + v48 <= a3)
      {
        v49 = *(_DWORD *)(v10 + 4428);
        v50 = v46 - v49;
        v51 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
        if (v23 < 0)
        {
LABEL_50:
          v54 = -1;
        }
        else
        {
          v52 = a2 - v49;
          v53 = v51 - v23;
          while (v52 >> v53 != v50 >> v53)
          {
            v32 = v53++ < v51;
            if (!v32)
              goto LABEL_50;
          }
          if (v51 - v53 >= v23)
            v54 = v51 - v53;
          else
            v54 = v51 - v53 + 1;
        }
        v55 = 0;
        v56 = *(unsigned __int8 **)(v10
                                  + 32 * v54
                                  + 8
                                  * ((v50 >> (v51 - v54)) & 1 | (2
                                                                             * (((a3
                                                                                              - *(_DWORD *)(v10 + 4432)) >> (v51 - v54)) & 1)))
                                  + 4456);
        v47 = *((_DWORD *)v56 + 1);
        v57 = *((_DWORD *)v56 + 2);
      }
      else
      {
        v55 = a6 != 3;
        v56 = a5;
      }
      result = 0;
      v58 = **((unsigned __int8 **)v56 + 17);
      v59 = v46 - v47;
      if ((v59 & 0x80000000) == 0)
      {
        v60 = a3 - v57;
        if (((a3 - v57) & 0x80000000) == 0)
        {
          v61 = *v56;
          if (v59 >= v61 || v60 >= v61)
          {
            result = 0;
          }
          else
          {
            v63 = *(unsigned __int8 **)&v56[8 * v55 + 136];
            result = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v63 + 10) + 24))(*((_QWORD *)v63 + 10), *((_QWORD *)v63 + 11) + v59 + *v63 * (unint64_t)v60);
            v23 = v144;
          }
        }
      }
      if (a8 != 31)
      {
        if (v16 <= 1)
          v64 = 1;
        else
          v64 = v16;
        v65 = a9;
        do
        {
          *v65++ = *(_WORD *)result;
          result += 2 * v58;
          --v64;
        }
        while (v64);
      }
      v138 = 1;
    }
    else
    {
      v138 = 0;
    }
    v19 = v141;
  }
  if (a3 == v143)
  {
    if ((a7 & 0x1E00) != 0)
    {
      result = (uint64_t)memcpy(v19, (const void *)(v142 + 4 * v135 + 2 * v18), 2 * v16);
      v23 = v144;
    }
    if ((a7 & 0x1E000) != 0)
    {
      v66 = v16;
      v67 = (const void *)(v142 + 4 * v135 + 2 * v18 + 2 * v16);
      goto LABEL_115;
    }
LABEL_102:
    v90 = 0;
    if ((a7 & 0x100) != 0)
      goto LABEL_116;
    goto LABEL_138;
  }
  if ((a7 & 0x1E00) != 0)
  {
    v68 = a3 - 1;
    v69 = *((_DWORD *)a5 + 1);
    if (v69 > a2 || (v70 = *a5, v69 + v70 <= a2) || (v71 = *((_DWORD *)a5 + 2), v71 >= a3) || v71 + v70 < a3)
    {
      v74 = *(_DWORD *)(v10 + 4432);
      v75 = v68 - v74;
      v76 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
      if (v23 < 0)
      {
LABEL_90:
        v79 = -1;
      }
      else
      {
        v77 = a3 - v74;
        v78 = v76 - v23;
        while (v77 >> v78 != v75 >> v78)
        {
          v32 = v78++ < v76;
          if (!v32)
            goto LABEL_90;
        }
        if (v76 - v78 >= v23)
          v79 = v76 - v78;
        else
          v79 = v76 - v78 + 1;
      }
      v72 = 0;
      v73 = *(unsigned __int8 **)(v10
                                + 32 * v79
                                + 8
                                * (((a2 - *(_DWORD *)(v10 + 4428)) >> (v76 - v79)) & 1 | (2 * ((v75 >> (v76 - v79)) & 1)))
                                + 4456);
      v69 = *((_DWORD *)v73 + 1);
      v71 = *((_DWORD *)v73 + 2);
    }
    else
    {
      v72 = a6 != 3;
      v73 = a5;
    }
    v80 = v68 - v71;
    v81 = *(unsigned __int8 **)&v73[8 * v72 + 136];
    v82 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v81 + 10) + 24))(*((_QWORD *)v81 + 10), *((_QWORD *)v81 + 11) + (a2 - v69) + *v81 * (unint64_t)v80);
    result = (uint64_t)memcpy(v19, v82, 2 * v16);
    v23 = v144;
  }
  if ((a7 & 0x1E000) == 0)
    goto LABEL_102;
  v83 = v16 + a2;
  v84 = a3 - 1;
  v85 = *((_DWORD *)a5 + 1);
  if (v85 > v16 + a2 || (v86 = *a5, v85 + v86 <= v83) || (v87 = *((_DWORD *)a5 + 2), v87 >= a3) || v87 + v86 < a3)
  {
    v91 = *(_DWORD *)(v10 + 4428);
    v92 = *(_DWORD *)(v10 + 4432);
    v93 = v83 - v91;
    v94 = v84 - v92;
    v95 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
    if (v23 < 0)
    {
LABEL_109:
      v99 = -1;
    }
    else
    {
      v96 = a2 - v91;
      v97 = a3 - v92;
      v98 = v95 - v23;
      while (v96 >> v98 != v93 >> v98 || v97 >> v98 != v94 >> v98)
      {
        v32 = v98++ < v95;
        if (!v32)
          goto LABEL_109;
      }
      if (v95 - v98 >= v23)
        v99 = v95 - v98;
      else
        v99 = v95 - v98 + 1;
    }
    v88 = 0;
    v89 = *(unsigned __int8 **)(v10
                              + 32 * v99
                              + 8
                              * ((v93 >> (v95 - v99)) & 1 | (2 * ((v94 >> (v95 - v99)) & 1)))
                              + 4456);
    v85 = *((_DWORD *)v89 + 1);
    v87 = *((_DWORD *)v89 + 2);
  }
  else
  {
    v88 = a6 != 3;
    v89 = a5;
  }
  v100 = (v83 - v85);
  v101 = *(unsigned __int8 **)&v89[8 * v88 + 136];
  v67 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v101 + 10) + 24))(*((_QWORD *)v101 + 10), *((_QWORD *)v101 + 11) + v100 + *v101 * (unint64_t)(v84 - v87));
  v66 = v16;
LABEL_115:
  result = (uint64_t)memcpy(&v19[2 * v66], v67, 2 * v66);
  v90 = 1;
  v23 = v144;
  if ((a7 & 0x100) != 0)
  {
LABEL_116:
    if (a2 == v134 || a3 == v143)
    {
      v108 = v18 + 2 * v135;
      if (v18 <= 0)
        v108 = 0;
      result = v142 + 2 * v140 + 2 * v108 - 2;
    }
    else
    {
      v102 = a2 - 1;
      v103 = a3 - 1;
      v104 = *((_DWORD *)a5 + 1);
      if (v104 >= a2 || (v105 = *a5, v104 + v105 < a2) || (v106 = *((_DWORD *)a5 + 2), v106 >= a3) || v106 + v105 < a3)
      {
        v109 = *(_DWORD *)(v10 + 4428);
        v110 = *(_DWORD *)(v10 + 4432);
        v111 = v102 - v109;
        v112 = v103 - v110;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
        if (v23 < 0)
        {
LABEL_131:
          v117 = -1;
        }
        else
        {
          v114 = a2 - v109;
          v115 = a3 - v110;
          v116 = v113 - v23;
          while (v114 >> v116 != v111 >> v116 || v115 >> v116 != v112 >> v116)
          {
            v32 = v116++ < v113;
            if (!v32)
              goto LABEL_131;
          }
          if (v113 - v116 >= v23)
            v117 = v113 - v116;
          else
            v117 = v113 - v116 + 1;
        }
        v107 = 0;
        a5 = *(unsigned __int8 **)(v10
                                 + 32 * v117
                                 + 8
                                 * ((v111 >> (v113 - v117)) & 1 | (2
                                                                               * ((v112 >> (v113 - v117)) & 1)))
                                 + 4456);
        v104 = *((_DWORD *)a5 + 1);
        v106 = *((_DWORD *)a5 + 2);
      }
      else
      {
        v107 = a6 != 3;
      }
      v118 = (v102 - v104);
      v119 = *(unsigned __int8 **)&a5[8 * v107 + 136];
      result = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v119 + 10) + 24))(*((_QWORD *)v119 + 10), *((_QWORD *)v119 + 11) + v118 + *v119 * (unint64_t)(v103 - v106));
    }
    *(a9 - 1) = *(_WORD *)result;
  }
LABEL_138:
  if (!v136)
  {
    if (v138)
    {
      v120 = (char *)&a9[v16 - 1];
    }
    else if ((a7 & 0x100) != 0)
    {
      v120 = (char *)(a9 - 1);
    }
    else
    {
      v120 = v19;
      if ((a7 & 0x1E00) == 0)
        v120 = &v19[2 * v16];
    }
    v121 = *(_WORD *)v120;
    v122 = v16;
    v123 = &a9[v16];
    do
    {
      *v123++ = v121;
      --v122;
    }
    while (v122);
  }
  if (!v138)
  {
    v124 = v16;
    v125 = a9[v16];
    v126 = a9;
    do
    {
      *v126++ = v125;
      --v124;
    }
    while (v124);
  }
  if ((a7 & 0x100) == 0)
    *(a9 - 1) = *a9;
  if ((a7 & 0x1E00) == 0)
  {
    v127 = v16;
    v128 = *(a9 - 1);
    v129 = v19;
    do
    {
      *v129++ = v128;
      --v127;
    }
    while (v127);
  }
  if ((v90 & 1) == 0)
  {
    v130 = v16;
    v131 = &v19[2 * v16];
    v132 = *((_WORD *)v131 - 1);
    do
    {
      *(_WORD *)v131 = v132;
      v131 += 2;
      --v130;
    }
    while (v130);
  }
  *(_BYTE *)(v137 + 2) = 1;
  return result;
}

_WORD *sub_1B68378AC(_WORD *result, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8, int a9, char *__dst)
{
  uint64_t v10;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  _BOOL4 v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v91;
  uint64_t v92;
  _WORD *v93;
  char *v94;
  int v95;
  int v96;
  BOOL v97;
  int v98;
  int v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _WORD *v117;
  char *v118;
  int v119;
  uint64_t v120;
  const void *v121;
  int v122;
  unsigned int v123;
  unsigned __int8 *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  const void *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v140;
  int v141;
  int v142;
  unsigned int v143;
  unsigned __int8 *v144;
  char v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  __int16 *v186;
  __int16 v187;
  int v188;
  char *v189;
  uint64_t v190;
  int v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  char *v213;
  uint64_t v216;
  BOOL v217;
  int v218;
  int v219;
  unsigned __int8 *v220;
  int v221;

  v10 = (uint64_t)result;
  if (!a8)
  {
    v28 = (8 << a9) | 2;
    v29 = 128 << *(_BYTE *)(*((_QWORD *)result + 235) + 195);
    v30 = __dst - 4;
    do
    {
      *(_WORD *)v30 = v29;
      v30 += 2;
      --v28;
    }
    while (v28);
    return result;
  }
  v213 = (char *)result + 4697;
  v221 = a8;
  v220 = a5;
  if (!*((_BYTE *)result + 4697) && (*((_DWORD *)result + 1107) == a2 || *((_DWORD *)result + 1108) == a3))
  {
    result = (_WORD *)sub_1B6838720((uint64_t)result, 1);
    a5 = v220;
    a8 = v221;
  }
  v13 = 4 << a9;
  v14 = 2 << (a9 + 1);
  v15 = *(_DWORD *)(v10 + 16);
  v16 = v14 + a2 - v15;
  v17 = v14 + a3 - *(_DWORD *)(v10 + 20);
  v212 = a8 & 0x1E000;
  v18 = (a8 & 0x1E000) != 0;
  if (v16 <= 1)
    v18 = 0;
  v19 = a8 & 0xF;
  v217 = v19 != 0;
  v20 = v17 > 1 && (a8 & 0xF) != 0;
  if (v18 || v20)
  {
    v21 = *(_DWORD *)(v10 + 4428);
    if (v18)
    {
      v22 = *(_DWORD *)(v10 + 4432);
      v23 = a3 - v22;
      if (a3 != v22)
      {
        v24 = (v16 >> 1);
        v25 = v15 - 2;
        v26 = a3 - 1;
        v208 = a8 & 0xF;
        if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 2) == a3)
        {
          v27 = (uint64_t *)(v10 + 4456);
        }
        else
        {
          v31 = v25 - v21;
          v32 = v26 - v22;
          v33 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_26:
            v36 = -1;
          }
          else
          {
            v34 = v33 - a4;
            while ((a2 - v21) >> v34 != v31 >> v34 || v23 >> v34 != v32 >> v34)
            {
              v35 = v34++ < v33;
              if (!v35)
                goto LABEL_26;
            }
            v36 = v33 - v34;
            if (v33 - v34 < a4)
              ++v36;
          }
          v27 = (uint64_t *)(v10
                          + 32 * v36
                          + 8
                          * ((v31 >> (v33 - v36)) & 1 | (2 * ((v32 >> (v33 - v36)) & 1)))
                          + 4456);
        }
        v37 = *v27;
        v38 = (_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v37 + 136) + 96)
                                                                            + 24))(*(_QWORD *)(*(_QWORD *)(v37 + 136) + 96), *(_QWORD *)(*(_QWORD *)(v37 + 136) + 104)+ (v25 - *(_DWORD *)(v37 + 4))+ 2* *(unsigned __int8 *)(*(_QWORD *)(v37 + 136) + 1)* (unint64_t)((v26 - *(_DWORD *)(v37 + 8)) >> 1));
        v40 = *v38;
        result = v38 + 1;
        v39 = v40;
        LOWORD(a8) = v221;
        a5 = v220;
        v19 = v208;
        do
        {
          *(_DWORD *)result = v39;
          result += 2;
          --v24;
        }
        while (v24);
      }
    }
    if (a2 != v21 && v20)
    {
      v42 = a2 - 2;
      v43 = *(_DWORD *)(v10 + 20) - 1;
      if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 1) == a2)
      {
        v44 = v10 + 4456;
      }
      else
      {
        v45 = *(_DWORD *)(v10 + 4428);
        v46 = *(_DWORD *)(v10 + 4432);
        v47 = v42 - v45;
        v48 = v43 - v46;
        v49 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
        if (a4 < 0)
        {
LABEL_44:
          v53 = -1;
        }
        else
        {
          v50 = a2 - v45;
          v51 = a3 - v46;
          v52 = v49 - a4;
          while (v50 >> v52 != v47 >> v52 || v51 >> v52 != v48 >> v52)
          {
            v35 = v52++ < v49;
            if (!v35)
              goto LABEL_44;
          }
          v53 = v49 - v52;
          if (v49 - v52 < a4)
            ++v53;
        }
        v44 = v10
            + 32 * v53
            + 8 * ((v47 >> (v49 - v53)) & 1 | (2 * ((v48 >> (v49 - v53)) & 1)))
            + 4456;
      }
      result = 0;
      v54 = (v17 >> 1);
      v55 = *(unsigned __int8 **)v44;
      v56 = *(_QWORD *)(*(_QWORD *)v44 + 136);
      v57 = *(unsigned __int8 *)(v56 + 1);
      v58 = v42 - *((_DWORD *)v55 + 1);
      if ((v58 & 0x80000000) == 0)
      {
        v59 = v43 - *((_DWORD *)v55 + 2);
        if ((v59 & 0x80000000) == 0)
        {
          v60 = *v55;
          if (v58 >= v60 || v59 >= v60)
          {
            result = 0;
          }
          else
          {
            v62 = v19;
            result = (_WORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v56 + 96) + 24))(*(_QWORD *)(v56 + 96), *(_QWORD *)(v56 + 104) + v58 + (2 * v57) * (unint64_t)(v59 >> 1));
            v19 = v62;
            a5 = v220;
            LOWORD(a8) = v221;
          }
        }
      }
      v63 = 2 * v57;
      do
      {
        *(_DWORD *)&result[v63] = *(_DWORD *)result;
        v63 += 2 * v57;
        --v54;
      }
      while (v54);
    }
  }
  v64 = &__dst[2 * v13];
  v65 = *(_QWORD *)(v10 + 1880);
  v211 = *(unsigned __int8 *)(v65 + 2013);
  v66 = *(_DWORD *)(v10 + 4428);
  v216 = *(_QWORD *)(v10 + 4672);
  v218 = *(_DWORD *)(v10 + 4432);
  v219 = a3 - v218;
  v67 = a2 - v66;
  v209 = v66;
  v210 = a2 - v66;
  if (a2 == v66)
  {
    v68 = (a8 & 0xF0) != 0;
    v69 = v212;
    if ((a8 & 0xF0) != 0)
    {
      v70 = v19;
      result = memcpy(__dst, (const void *)(v216 + 2 * v219), 2 * (2 << a9));
      v19 = v70;
      a5 = v220;
      LOWORD(a8) = v221;
    }
    if (v19)
    {
      result = memcpy(&__dst[2 * (2 << a9)], (const void *)(v216 + 2 * v219 + 2 * (2 << a9)), 2 * (2 << a9));
      a5 = v220;
      LOWORD(a8) = v221;
      v217 = 1;
    }
    else
    {
      v217 = 0;
    }
  }
  else
  {
    if (v19)
    {
      v71 = v13;
      v72 = a2 - 2;
      v73 = 2 << a9;
      v74 = (2 << a9) + a3;
      v75 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(v10 + 8) && v75 == a2)
      {
        v76 = 0;
        v77 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        if (v75 > v72
          || (v78 = *a5, v75 + v78 <= v72)
          || (v79 = *((_DWORD *)a5 + 2), v79 > v74)
          || (v80 = v79 + v78, v77 = a5, v80 <= v74))
        {
          v81 = v72 - v209;
          v82 = v74 - v218;
          v83 = *(unsigned __int8 *)(v65 + 2009);
          if (a4 < 0)
          {
LABEL_75:
            v85 = -1;
          }
          else
          {
            v84 = v83 - a4;
            while (v67 >> v84 != v81 >> v84 || v219 >> v84 != v82 >> v84)
            {
              v35 = v84++ < v83;
              if (!v35)
                goto LABEL_75;
            }
            v85 = v83 - v84;
            if (v85 < a4)
              ++v85;
          }
          v77 = *(unsigned __int8 **)(v10
                                    + 32 * v85
                                    + 8
                                    * ((v81 >> (v83 - v85)) & 1 | (2
                                                                               * ((v82 >> (v83 - v85)) & 1)))
                                    + 4456);
        }
        v76 = a6;
        if (v77 != a5)
          v76 = 0;
      }
      result = 0;
      v86 = *(unsigned __int8 *)(*((_QWORD *)v77 + 17) + 1);
      v87 = v72 - *((_DWORD *)v77 + 1);
      if ((v87 & 0x80000000) == 0)
      {
        v88 = v74 - *((_DWORD *)v77 + 2);
        if ((v88 & 0x80000000) == 0)
        {
          v89 = *v77;
          if (v87 >= v89 || v88 >= v89)
          {
            result = 0;
          }
          else
          {
            v91 = *(_QWORD *)&v77[8 * v76 + 136];
            result = (_WORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v91 + 96) + 24))(*(_QWORD *)(v91 + 96), *(_QWORD *)(v91 + 104)+ v87+ *(unsigned __int8 *)(v91 + 1) * (unint64_t)(v88 & 0xFFFFFFFE));
            a5 = v220;
            LOWORD(a8) = v221;
          }
        }
      }
      if (v73 < (int)v71)
      {
        v92 = v73;
        v93 = result + 1;
        do
        {
          v94 = &__dst[2 * v92];
          *(_WORD *)v94 = *(v93 - 1);
          *((_WORD *)v94 + 1) = *v93;
          v92 += 2;
          v93 += 2 * v86;
        }
        while (v92 < v71);
      }
    }
    if ((a8 & 0xF0) != 0)
    {
      v95 = a2 - 2;
      v96 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(v10 + 8))
        v97 = v96 == a2;
      else
        v97 = 0;
      if (v97)
      {
        v108 = 0;
        v101 = *(unsigned __int8 **)(v10 + 4456);
        v69 = v212;
      }
      else
      {
        v69 = v212;
        if (v96 > v95
          || (v98 = *a5, v96 + v98 <= v95)
          || (v99 = *((_DWORD *)a5 + 2), v99 > a3)
          || (v100 = v99 + v98, v101 = a5, v100 <= a3))
        {
          v102 = *(_DWORD *)(v10 + 4428);
          v103 = v95 - v102;
          v104 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_108:
            v107 = -1;
          }
          else
          {
            v105 = a2 - v102;
            v106 = v104 - a4;
            while (v105 >> v106 != v103 >> v106)
            {
              v35 = v106++ < v104;
              if (!v35)
                goto LABEL_108;
            }
            v107 = v104 - v106;
            if (v104 - v106 < a4)
              ++v107;
          }
          v101 = *(unsigned __int8 **)(v10
                                     + 32 * v107
                                     + 8
                                     * ((v103 >> (v104 - v107)) & 1 | (2
                                                                                   * (((a3 - *(_DWORD *)(v10 + 4432)) >> (v104 - v107)) & 1)))
                                     + 4456);
        }
        v108 = a6;
        if (v101 != a5)
          v108 = 0;
      }
      result = 0;
      v109 = *(unsigned __int8 *)(*((_QWORD *)v101 + 17) + 1);
      v110 = v95 - *((_DWORD *)v101 + 1);
      if ((v110 & 0x80000000) == 0)
      {
        v111 = a3 - *((_DWORD *)v101 + 2);
        if ((v111 & 0x80000000) == 0)
        {
          v112 = *v101;
          if (v110 >= v112 || v111 >= v112)
          {
            result = 0;
          }
          else
          {
            v114 = *(_QWORD *)&v101[8 * v108 + 136];
            result = (_WORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v114 + 96) + 24))(*(_QWORD *)(v114 + 96), *(_QWORD *)(v114 + 104)+ v110+ *(unsigned __int8 *)(v114 + 1) * (unint64_t)(v111 & 0xFFFFFFFE));
            a5 = v220;
            LOWORD(a8) = v221;
          }
        }
      }
      v115 = (2 << a9);
      if ((int)v115 >= 1)
      {
        v116 = 0;
        v117 = result + 1;
        do
        {
          v118 = &__dst[2 * v116];
          *(_WORD *)v118 = *(v117 - 1);
          *((_WORD *)v118 + 1) = *v117;
          v116 += 2;
          v117 += 2 * v109;
        }
        while (v116 < v115);
      }
      v68 = 1;
    }
    else
    {
      v68 = 0;
      v69 = v212;
    }
  }
  v119 = a8 & 0x1E00;
  if (a3 == v218)
  {
    if ((a8 & 0x1E00) != 0)
    {
      result = memcpy(v64, (const void *)(v216 + 4 * v211 + 2 * v210), 2 * (2 << a9));
      a5 = v220;
      LOWORD(a8) = v221;
    }
    if (v69)
    {
      v120 = 2 << a9;
      v121 = (const void *)(v216 + 4 * v211 + 2 * v210 + 2 * v120);
LABEL_189:
      result = memcpy(&v64[2 * v120], v121, 2 * v120);
      v145 = 1;
      LOWORD(a8) = v221;
      a5 = v220;
      goto LABEL_190;
    }
  }
  else
  {
    if ((a8 & 0x1E00) != 0)
    {
      v122 = a3 - 1;
      if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        v123 = 0;
        v124 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        v125 = *((_DWORD *)a5 + 1);
        if (v125 > a2
          || (v126 = *a5, v125 + v126 <= a2)
          || (v127 = *((_DWORD *)a5 + 2), v127 >= a3)
          || (v128 = v127 + v126, v124 = a5, v128 < a3))
        {
          v129 = *(_DWORD *)(v10 + 4432);
          v130 = v122 - v129;
          v131 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_145:
            v134 = -1;
          }
          else
          {
            v132 = a3 - v129;
            v133 = v131 - a4;
            while (v132 >> v133 != v130 >> v133)
            {
              v35 = v133++ < v131;
              if (!v35)
                goto LABEL_145;
            }
            v134 = v131 - v133;
            if (v131 - v133 < a4)
              ++v134;
          }
          v124 = *(unsigned __int8 **)(v10
                                     + 32 * v134
                                     + 8
                                     * (((a2 - *(_DWORD *)(v10 + 4428)) >> (v131 - v134)) & 1 | (2 * ((v130 >> (v131 - v134)) & 1)))
                                     + 4456);
        }
        v123 = a6;
        if (v124 != a5)
          v123 = 0;
      }
      v135 = 0;
      v136 = a2 - *((_DWORD *)v124 + 1);
      if ((v136 & 0x80000000) == 0)
      {
        v137 = v122 - *((_DWORD *)v124 + 2);
        if ((v137 & 0x80000000) == 0)
        {
          v138 = *v124;
          if (v136 >= v138 || v137 >= v138)
          {
            v135 = 0;
          }
          else
          {
            v140 = *(_QWORD *)&v124[8 * v123 + 136];
            v135 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v140 + 96) + 24))(*(_QWORD *)(v140 + 96), *(_QWORD *)(v140 + 104)+ v136+ *(unsigned __int8 *)(v140 + 1) * (unint64_t)(v137 & 0xFFFFFFFE));
          }
        }
      }
      result = memcpy(v64, v135, 2 * (2 << a9));
      LOWORD(a8) = v221;
      a5 = v220;
    }
    if (v69)
    {
      v141 = (2 << a9) + a2;
      v142 = a3 - 1;
      if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        v143 = 0;
        v144 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        v146 = *((_DWORD *)a5 + 1);
        if (v146 > v141
          || (v147 = *a5, v146 + v147 <= v141)
          || (v148 = *((_DWORD *)a5 + 2), v148 >= a3)
          || (v149 = v148 + v147, v144 = a5, v149 < a3))
        {
          v150 = *(_DWORD *)(v10 + 4428);
          v151 = *(_DWORD *)(v10 + 4432);
          v152 = v141 - v150;
          v153 = v142 - v151;
          v154 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_174:
            v158 = -1;
          }
          else
          {
            v155 = a2 - v150;
            v156 = a3 - v151;
            v157 = v154 - a4;
            while (v155 >> v157 != v152 >> v157 || v156 >> v157 != v153 >> v157)
            {
              v35 = v157++ < v154;
              if (!v35)
                goto LABEL_174;
            }
            v158 = v154 - v157;
            if (v154 - v157 < a4)
              ++v158;
          }
          v144 = *(unsigned __int8 **)(v10
                                     + 32 * v158
                                     + 8
                                     * ((v152 >> (v154 - v158)) & 1 | (2
                                                                                   * ((v153 >> (v154 - v158)) & 1)))
                                     + 4456);
        }
        v143 = a6;
        if (v144 != a5)
          v143 = 0;
      }
      v121 = 0;
      v159 = v141 - *((_DWORD *)v144 + 1);
      if ((v159 & 0x80000000) == 0)
      {
        v160 = v142 - *((_DWORD *)v144 + 2);
        if ((v160 & 0x80000000) == 0)
        {
          v161 = *v144;
          if (v159 >= v161 || v160 >= v161)
          {
            v121 = 0;
          }
          else
          {
            v163 = *(_QWORD *)&v144[8 * v143 + 136];
            v121 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v163 + 96) + 24))(*(_QWORD *)(v163 + 96), *(_QWORD *)(v163 + 104)+ v159+ *(unsigned __int8 *)(v163 + 1) * (unint64_t)(v160 & 0xFFFFFFFE));
          }
        }
      }
      v120 = 2 << a9;
      goto LABEL_189;
    }
  }
  v145 = 0;
LABEL_190:
  if ((a8 & 0x100) != 0)
  {
    if (a2 == v209 || a3 == v218)
    {
      v169 = v210 + 2 * v211;
      if (v210 <= 0)
        v169 = 0;
      v170 = v216 + 2 * v219 + 2 * v169;
      *((_WORD *)__dst - 2) = *(_WORD *)(v170 - 4);
      result = (_WORD *)(v170 - 2);
    }
    else
    {
      v164 = a2 - 2;
      v165 = a3 - 1;
      v166 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(v10 + 8) && (v166 == a2 || *((_DWORD *)a5 + 2) == a3))
      {
        v167 = 0;
        v168 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        if (v166 > v164
          || (v171 = *a5, v166 + v171 <= v164)
          || (v172 = *((_DWORD *)a5 + 2), v172 >= a3)
          || (v173 = v172 + v171, v168 = a5, v173 < a3))
        {
          v174 = *(_DWORD *)(v10 + 4428);
          v175 = *(_DWORD *)(v10 + 4432);
          v176 = v164 - v174;
          v177 = v165 - v175;
          v178 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_209:
            v182 = -1;
          }
          else
          {
            v179 = a2 - v174;
            v180 = a3 - v175;
            v181 = v178 - a4;
            while (v179 >> v181 != v176 >> v181 || v180 >> v181 != v177 >> v181)
            {
              v35 = v181++ < v178;
              if (!v35)
                goto LABEL_209;
            }
            v182 = v178 - v181;
            if (v178 - v181 < a4)
              ++v182;
          }
          v168 = *(unsigned __int8 **)(v10
                                     + 32 * v182
                                     + 8
                                     * ((v176 >> (v178 - v182)) & 1 | (2
                                                                                   * ((v177 >> (v178 - v182)) & 1)))
                                     + 4456);
        }
        v167 = a6;
        if (v168 != a5)
          v167 = 0;
      }
      v183 = *((_DWORD *)v168 + 1);
      v184 = *((_DWORD *)v168 + 2);
      v185 = *(_QWORD *)&v168[8 * v167 + 136];
      v186 = (__int16 *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v185 + 96) + 24))(*(_QWORD *)(v185 + 96), *(_QWORD *)(v185 + 104)+ (v164 - v183)+ *(unsigned __int8 *)(v185 + 1) * (unint64_t)((v165 - v184) & 0xFE));
      v187 = *v186;
      result = v186 + 1;
      *((_WORD *)__dst - 2) = v187;
      LOWORD(a8) = v221;
    }
    *((_WORD *)__dst - 1) = *result;
  }
  v188 = 1 << a9;
  if (!v217)
  {
    if (v68)
    {
      v189 = &__dst[2 * (2 << a9) - 4];
    }
    else if ((a8 & 0x100) != 0)
    {
      v189 = __dst - 4;
    }
    else
    {
      v189 = v64;
      if (!v119)
        v189 = &v64[2 * (2 << a9)];
    }
    if (v188 < 2 << a9)
    {
      v190 = (2 << a9) - (uint64_t)v188;
      v191 = 2 * v188;
      do
      {
        *(_WORD *)&__dst[2 * v191] = *(_WORD *)v189;
        *(_WORD *)&__dst[2 * v191 + 2] = *((_WORD *)v189 + 1);
        v191 += 2;
        --v190;
      }
      while (v190);
    }
  }
  v192 = a9 == 31 || v68;
  if ((v192 & 1) == 0)
  {
    v193 = 0;
    v194 = 0;
    v195 = 2 << a9;
    if (v188 <= 1)
      v196 = 1;
    else
      v196 = 1 << a9;
    v197 = 2 * v196;
    do
    {
      *(_WORD *)&__dst[v193 >> 31] = *(_WORD *)&__dst[2 * v195];
      *(_WORD *)&__dst[2 * (int)v194 + 2] = *(_WORD *)&__dst[2 * (v195 | 1)];
      v194 += 2;
      v193 += 0x200000000;
    }
    while (v197 != v194);
  }
  if ((a8 & 0x100) == 0)
    *((_DWORD *)__dst - 1) = *(_DWORD *)__dst;
  if (a9 != 31 && !v119)
  {
    v198 = 0;
    v199 = 0;
    if (v188 <= 1)
      v200 = 1;
    else
      v200 = 1 << a9;
    v201 = 2 * v200;
    do
    {
      *(_WORD *)&v64[v198 >> 31] = *((_WORD *)__dst - 2);
      *(_WORD *)&v64[2 * (int)v199 + 2] = *((_WORD *)__dst - 1);
      v199 += 2;
      v198 += 0x200000000;
    }
    while (v201 != v199);
  }
  if ((v145 & 1) == 0)
  {
    v202 = 2 << a9;
    if (v188 < 2 << a9)
    {
      v203 = v202;
      v204 = v202 - 2;
      v205 = v203 - 1;
      v206 = v203 - v188;
      v207 = 2 * v188;
      do
      {
        *(_WORD *)&v64[2 * v207] = *(_WORD *)&v64[2 * v204];
        *(_WORD *)&v64[2 * v207 + 2] = *(_WORD *)&v64[2 * v205];
        v207 += 2;
        --v206;
      }
      while (v206);
    }
  }
  v213[2] = 1;
  return result;
}

uint64_t sub_1B6838720(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009);
  v5 = v4 - a2;
  (*(void (**)(_QWORD, _QWORD, _QWORD, BOOL, BOOL))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360)
                                                             + 8 * a2
                                                             + 1072))((*(int *)(a1 + 4428) >> a2), (*(int *)(a1 + 4432) >> a2), (2 << (v4 - a2)), (*(_DWORD *)(a1 + 4436) & 0xF) != 0, (*(_DWORD *)(a1 + 4436) & 0x1E000) != 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD, BOOL, BOOL))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360)
                                                             + 8 * a2
                                                             + 1072))((*(int *)(a1 + 4428) >> a2), (*(int *)(a1 + 4432) >> a2), (1 << v5), (*(_DWORD *)(a1 + 4436) & 0xF0) != 0, (*(_DWORD *)(a1 + 4436) & 0x1E00) != 0);
  v6 = *(_QWORD *)(a1 + 1872);
  v7 = v6 + 8 * a2;
  v8 = *(unsigned int *)(a1 + 4436);
  v9 = *(_QWORD *)(v6 + 1360);
  v10 = *(uint64_t *)(v9 + 8 * a2 + 112) >> a2;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, (*(int *)(a1 + 4428) >> a2), (*(int *)(a1 + 4432) >> a2), a2);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 1424))(v5, v8, v10, v11, *(_QWORD *)(a1 + 8 * a2 + 4664));
  *(_BYTE *)(a1 + a2 + 4696) = 1;
  return result;
}

uint64_t sub_1B6838850(uint64_t result, int a2, int a3, int a4, uint64_t a5, char a6, int a7, unsigned int a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 v37;
  __int16 v38;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v59;

  v13 = result;
  v14 = *(_DWORD *)(result + 16);
  v15 = (((2 << a6) + a2 - v14) >> a8);
  v16 = (((2 << a6) + a3 - *(_DWORD *)(result + 20)) >> a8);
  v17 = (a7 & 0x1E000) == 0 || (int)v15 <= 0;
  v18 = !v17;
  v20 = (a7 & 0xF) != 0 && (int)v16 > 0;
  if ((v18 & 1) != 0 || v20)
  {
    v21 = *(_DWORD *)(result + 4428);
    if (v18)
    {
      v22 = *(_DWORD *)(result + 4432);
      v23 = a3 - v22;
      if (a3 != v22)
      {
        v24 = v14 + (-1 << a8);
        v25 = a3 - 1;
        if (a8 && *(_BYTE *)(result + 8) && *(_DWORD *)(a5 + 8) == a3)
        {
          v26 = (uint64_t *)(result + 4456);
        }
        else
        {
          v27 = v24 - v21;
          v28 = v25 - v22;
          v29 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_26:
            v31 = -1;
          }
          else
          {
            v30 = v29 - a4;
            while ((a2 - v21) >> v30 != v27 >> v30 || v23 >> v30 != v28 >> v30)
            {
              v17 = v30++ < v29;
              if (!v17)
                goto LABEL_26;
            }
            v31 = v29 - v30;
            if (v29 - v30 < a4)
              ++v31;
          }
          v26 = (uint64_t *)(result
                          + 32 * v31
                          + 8
                          * ((v27 >> (v29 - v31)) & 1 | (2 * ((v28 >> (v29 - v31)) & 1)))
                          + 4456);
        }
        v32 = *v26;
        v33 = *(_DWORD *)(v32 + 8);
        v34 = (v24 - *(_DWORD *)(v32 + 4));
        v35 = *(_QWORD *)(v32 + 136);
        v36 = (__int16 *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v35 + 16 * a8 + 80) + 24))(*(_QWORD *)(v35 + 16 * a8 + 80), *(_QWORD *)(v35 + 16 * a8 + 88)+ v34+ (*(unsigned __int8 *)(v35 + a8) << a8) * (unint64_t)((v25 - v33) >> a8));
        v38 = *v36;
        result = (uint64_t)(v36 + 1);
        v37 = v38;
        do
        {
          *(_WORD *)result = v37;
          result += 2;
          --v15;
        }
        while (v15);
      }
    }
    if (a2 != v21 && v20)
    {
      v40 = (-1 << a8) + a2;
      v41 = *(_DWORD *)(v13 + 20) - 1;
      if (a8 && *(_BYTE *)(v13 + 8) && *(_DWORD *)(a5 + 4) == a2)
      {
        v42 = v13 + 4456;
      }
      else
      {
        v43 = *(_DWORD *)(v13 + 4428);
        v44 = *(_DWORD *)(v13 + 4432);
        v45 = v40 - v43;
        v46 = v41 - v44;
        v47 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 1880) + 2009);
        if (a4 < 0)
        {
LABEL_45:
          v51 = -1;
        }
        else
        {
          v48 = a2 - v43;
          v49 = a3 - v44;
          v50 = v47 - a4;
          while (v48 >> v50 != v45 >> v50 || v49 >> v50 != v46 >> v50)
          {
            v17 = v50++ < v47;
            if (!v17)
              goto LABEL_45;
          }
          v51 = v47 - v50;
          if (v47 - v50 < a4)
            ++v51;
        }
        v42 = v13
            + 32 * v51
            + 8 * ((v45 >> (v47 - v51)) & 1 | (2 * ((v46 >> (v47 - v51)) & 1)))
            + 4456;
      }
      result = 0;
      v52 = *(unsigned __int8 **)v42;
      v53 = *(_QWORD *)(*(_QWORD *)v42 + 136);
      v54 = *(unsigned __int8 *)(v53 + a8) << a8;
      v55 = v40 - *((_DWORD *)v52 + 1);
      if ((v55 & 0x80000000) == 0)
      {
        v56 = v41 - *((_DWORD *)v52 + 2);
        if ((v56 & 0x80000000) == 0)
        {
          v57 = *v52;
          if (v55 >= v57 || v56 >= v57)
            result = 0;
          else
            result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v53 + 16 * a8 + 80) + 24))(*(_QWORD *)(v53 + 16 * a8 + 80), *(_QWORD *)(v53 + 16 * a8 + 88) + v55 + v54 * (unint64_t)(v56 >> a8));
        }
      }
      v59 = 2 * (v54 >> a8);
      do
      {
        *(_WORD *)(result + v59) = *(_WORD *)result;
        v59 += 2 * (v54 >> a8);
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

_QWORD *sub_1B6838B64(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E6A15268;
  v2 = a1[2];
  if (v2)
    MEMORY[0x1BCC9814C](v2, 0x1000C40BDFB0063);
  return a1;
}

void sub_1B6838BAC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E6A15268;
  v1 = a1[2];
  if (v1)
    MEMORY[0x1BCC9814C](v1, 0x1000C40BDFB0063);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6838C04(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  void *v4;

  if (*(_QWORD *)(a1 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 < 0 ? -1 : 2 * v2;
  v4 = operator new[](v3, MEMORY[0x1E0DE4E10]);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    return 0;
  else
    return 4294954392;
}

uint64_t sub_1B6838C58(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) + 2 * a2;
}

void *sub_1B6838C64(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  size_t v10;
  uint64_t v11;

  if (a2)
  {
    v10 = (int)result;
    v11 = a2;
    do
    {
      --v11;
      result = memcpy(__dst, __src, v10);
      __dst += a5;
      __src += a3;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1B6838CC8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int i;
  uint64_t v7;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        v7 = 0;
        do
        {
          *(_BYTE *)(a6 + v7) = *(_BYTE *)(a4 + v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a4 += a3;
      a6 += a5;
    }
  }
  return result;
}

_BYTE *sub_1B6838D10(_BYTE *result, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, _BYTE *a9)
{
  _BYTE *v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  char *v34;
  char v35;
  char v36;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  int v65;
  int v66;
  size_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _BOOL8 v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned __int8 *v90;
  uint64_t v91;
  _BYTE *v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _BOOL8 v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned __int8 *v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  _BYTE *v114;
  size_t v115;
  const void *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  _BOOL8 v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned __int8 *v130;
  const void *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  _BOOL8 v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned __int8 *v149;
  int v150;
  int v151;
  unsigned __int8 *v152;
  int v153;
  int v154;
  int v155;
  _BOOL8 v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  char *v169;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  _BOOL4 v175;
  int v176;
  _BYTE *v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  int v181;
  char *v183;

  v9 = result;
  if (!a7)
    return memset(a9 - 1, 128 << *(_BYTE *)(*((_QWORD *)result + 235) + 194), (4 << a8) | 1);
  v11 = a3;
  v12 = a2;
  v13 = 2 << a8;
  v14 = 2 << a8;
  v177 = result + 4696;
  v181 = a4;
  if (!result[4696] && (*((_DWORD *)result + 1107) == a2 || *((_DWORD *)result + 1108) == a3))
  {
    v15 = a8;
    result = (_BYTE *)sub_1B6838720((uint64_t)result, 0);
    a8 = v15;
    a4 = v181;
  }
  v16 = 1;
  v17 = *((_DWORD *)v9 + 4);
  v18 = (v14 + v12 - v17);
  v19 = (v14 + v11 - *((_DWORD *)v9 + 5));
  v20 = (a7 & 0x1E000) != 0;
  if ((int)v18 <= 0)
    v20 = 0;
  v21 = a7 & 0xF;
  v179 = v21 != 0;
  v22 = (int)v19 > 0 && (a7 & 0xF) != 0;
  if (v20 || v22)
  {
    v23 = *((_DWORD *)v9 + 1107);
    if (v20)
    {
      v24 = *((_DWORD *)v9 + 1108);
      v25 = v11 - v24;
      if (v11 != v24)
      {
        v26 = v17 - 1;
        v27 = v26 - v23;
        v28 = v11 - 1 - v24;
        v29 = *(unsigned __int8 *)(*((_QWORD *)v9 + 235) + 2009);
        v174 = a8;
        if (a4 < 0)
        {
LABEL_20:
          v32 = -1;
        }
        else
        {
          v30 = v29 - a4;
          while ((v12 - v23) >> v30 != v27 >> v30 || v25 >> v30 != v28 >> v30)
          {
            v31 = v30++ < v29;
            if (!v31)
              goto LABEL_20;
          }
          v32 = v29 - v30;
          if (v29 - v30 < a4)
            ++v32;
        }
        v33 = *(_QWORD *)&v9[32 * v32
                           + 4456
                           + 8
                           * ((v27 >> (v29 - v32)) & 1 | (2 * ((v28 >> (v29 - v32)) & 1)))];
        v34 = (char *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v33 + 136)
                                                                                                 + 80)
                                                                                   + 24))(*(_QWORD *)(*(_QWORD *)(v33 + 136) + 80), *(_QWORD *)(*(_QWORD *)(v33 + 136) + 88)+ (v26 - *(_DWORD *)(v33 + 4))+ **(unsigned __int8 **)(v33 + 136)* (unint64_t)(v11 - 1 - *(_DWORD *)(v33 + 8)), 1);
        v36 = *v34;
        result = v34 + 1;
        v35 = v36;
        a4 = v181;
        a8 = v174;
        v21 = a7 & 0xF;
        v16 = 1;
        do
        {
          *result++ = v35;
          --v18;
        }
        while (v18);
      }
    }
    if (v12 != v23 && v22)
    {
      v38 = *((_DWORD *)v9 + 5) - 1;
      v39 = *((_DWORD *)v9 + 1107);
      v40 = *((_DWORD *)v9 + 1108);
      v41 = v12 - 1 - v39;
      v42 = v38 - v40;
      v43 = *(unsigned __int8 *)(*((_QWORD *)v9 + 235) + 2009);
      if (a4 < 0)
      {
LABEL_35:
        v47 = -1;
      }
      else
      {
        v44 = v12 - v39;
        v45 = v11 - v40;
        v46 = v43 - a4;
        while (v44 >> v46 != v41 >> v46 || v45 >> v46 != v42 >> v46)
        {
          v31 = v46++ < v43;
          if (!v31)
            goto LABEL_35;
        }
        v47 = v43 - v46;
        if (v43 - v46 < a4)
          ++v47;
      }
      result = 0;
      v48 = *(unsigned __int8 **)&v9[32 * v47
                                   + 4456
                                   + 8
                                   * ((v41 >> (v43 - v47)) & 1 | (2
                                                                              * ((v42 >> (v43 - v47)) & 1)))];
      v49 = (unsigned __int8 *)*((_QWORD *)v48 + 17);
      v50 = *v49;
      v51 = v12 - 1 - *((_DWORD *)v48 + 1);
      if ((v51 & 0x80000000) == 0)
      {
        v52 = v38 - *((_DWORD *)v48 + 2);
        if ((v52 & 0x80000000) == 0)
        {
          v53 = *v48;
          if (v51 >= v53 || v52 >= v53)
          {
            result = 0;
          }
          else
          {
            v55 = v21;
            v56 = a8;
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v49 + 10)
                                                                                           + 24))(*((_QWORD *)v49 + 10), *((_QWORD *)v49 + 11) + v51 + *v49 * (unint64_t)v52, 1);
            v16 = 1;
            v21 = v55;
            a8 = v56;
            a4 = v181;
          }
        }
      }
      v57 = v50;
      do
      {
        result[v57] = *result;
        v57 += v50;
        --v19;
      }
      while (v19);
    }
  }
  v58 = 1 << a8;
  v183 = &a9[v13];
  v59 = *((_QWORD *)v9 + 235);
  v173 = *(unsigned __int8 *)(v59 + 2013);
  v60 = *((int *)v9 + 1107);
  v61 = *((_QWORD *)v9 + 583);
  v62 = v12 - v60;
  v180 = *((int *)v9 + 1108);
  v171 = *((_DWORD *)v9 + 1107);
  v172 = v61;
  v178 = v11 - v180;
  if ((_DWORD)v60 == v12)
  {
    v63 = v9;
    v64 = 1 << a8;
    v65 = v12;
    v175 = (a7 & 0xF0) != 0;
    v66 = a7 & 0x1E000;
    if ((a7 & 0xF0) != 0)
    {
      v67 = v58;
      v68 = v12 - v60;
      v69 = v21;
      v70 = v11;
      v71 = v61;
      result = memcpy(a9, (const void *)(v61 + (int)v178), v67);
      v61 = v71;
      v11 = v70;
      v21 = v69;
      v66 = a7 & 0x1E000;
      v62 = v68;
      a4 = v181;
    }
    if (v21)
    {
      result = memcpy(&a9[v64], (const void *)(v61 + v178 + v64), v64);
      a4 = v181;
      v179 = 1;
    }
    else
    {
      v179 = 0;
    }
    v12 = v65;
    v9 = v63;
  }
  else
  {
    if (v21)
    {
      v72 = v12 - 1;
      v73 = v58 + v11;
      v74 = *((_DWORD *)a5 + 1);
      if (v74 >= v12 || (v75 = *a5, v74 + v75 < v12) || (v81 = *((_DWORD *)a5 + 2), v81 > v73) || v81 + v75 <= v73)
      {
        v76 = v72 - v171;
        v77 = v73 - v180;
        v78 = *(unsigned __int8 *)(v59 + 2009);
        if (a4 < 0)
        {
LABEL_59:
          v80 = -1;
        }
        else
        {
          v79 = v78 - a4;
          while ((int)v62 >> v79 != v76 >> v79 || (int)v178 >> v79 != v77 >> v79)
          {
            v31 = v79++ < v78;
            if (!v31)
              goto LABEL_59;
          }
          v84 = v78 - v79;
          if (v84 >= a4)
            v80 = v84;
          else
            v80 = v84 + 1;
        }
        v82 = 0;
        v83 = *(unsigned __int8 **)&v9[32 * v80
                                     + 4456
                                     + 8
                                     * ((v76 >> (v78 - v80)) & 1 | (2
                                                                                * ((v77 >> (v78 - v80)) & 1)))];
        v74 = *((_DWORD *)v83 + 1);
        v81 = *((_DWORD *)v83 + 2);
      }
      else
      {
        v82 = a6 != 3;
        v83 = a5;
      }
      result = 0;
      v85 = **((unsigned __int8 **)v83 + 17);
      v86 = v72 - v74;
      if ((v86 & 0x80000000) == 0)
      {
        v87 = v73 - v81;
        if ((v87 & 0x80000000) == 0)
        {
          v88 = *v83;
          if (v86 >= v88 || v87 >= v88)
          {
            result = 0;
          }
          else
          {
            v90 = *(unsigned __int8 **)&v83[8 * v82 + 136];
            v176 = a8;
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v90 + 10)
                                                                                           + 24))(*((_QWORD *)v90 + 10), *((_QWORD *)v90 + 11) + v86 + *v90 * (unint64_t)v87, 1);
            a8 = v176;
            a4 = v181;
          }
        }
      }
      if (v58 < (int)v14)
      {
        v91 = v14 - v58;
        v92 = &a9[v58];
        do
        {
          *v92++ = *result;
          result += v85;
          --v91;
        }
        while (v91);
      }
    }
    if ((a7 & 0xF0) != 0)
    {
      v93 = v12 - 1;
      v94 = a5;
      v95 = *((_DWORD *)a5 + 1);
      if (v95 >= v12 || (v96 = *a5, v95 + v96 < v12) || (v104 = *((_DWORD *)a5 + 2), v104 > v11) || v104 + v96 <= v11)
      {
        v97 = *((_DWORD *)v9 + 1107);
        v98 = v93 - v97;
        v99 = *(unsigned __int8 *)(*((_QWORD *)v9 + 235) + 2009);
        v66 = a7 & 0x1E000;
        if (a4 < 0)
        {
LABEL_87:
          v102 = -1;
        }
        else
        {
          v100 = v12 - v97;
          v101 = v99 - a4;
          while (v100 >> v101 != v98 >> v101)
          {
            v31 = v101++ < v99;
            if (!v31)
              goto LABEL_87;
          }
          if (v99 - v101 >= a4)
            v102 = v99 - v101;
          else
            v102 = v99 - v101 + 1;
        }
        v103 = 0;
        v94 = *(unsigned __int8 **)&v9[32 * v102
                                     + 4456
                                     + 8
                                     * ((v98 >> (v99 - v102)) & 1 | (2
                                                                                 * (((v11
                                                                                                  - *((_DWORD *)v9 + 1108)) >> (v99 - v102)) & 1)))];
        v95 = *((_DWORD *)v94 + 1);
        v104 = *((_DWORD *)v94 + 2);
      }
      else
      {
        v103 = a6 != 3;
        v66 = a7 & 0x1E000;
      }
      result = 0;
      v105 = **((unsigned __int8 **)v94 + 17);
      v106 = v93 - v95;
      if ((v106 & 0x80000000) == 0)
      {
        v107 = v11 - v104;
        if (((v11 - v104) & 0x80000000) == 0)
        {
          v108 = *v94;
          if (v106 >= v108 || v107 >= v108)
          {
            result = 0;
          }
          else
          {
            v110 = *(unsigned __int8 **)&v94[8 * v103 + 136];
            v111 = v9;
            v112 = a8;
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v110 + 10)
                                                                                           + 24))(*((_QWORD *)v110 + 10), *((_QWORD *)v110 + 11) + v106 + *v110 * (unint64_t)v107, v16);
            a8 = v112;
            v9 = v111;
            a4 = v181;
          }
        }
      }
      if (a8 == 31)
      {
        v64 = v58;
      }
      else
      {
        v64 = v58;
        if (v58 <= 1)
          v113 = 1;
        else
          v113 = v58;
        v114 = a9;
        do
        {
          *v114++ = *result;
          result += v105;
          --v113;
        }
        while (v113);
      }
      v175 = 1;
    }
    else
    {
      v64 = v58;
      v175 = 0;
      v66 = a7 & 0x1E000;
    }
  }
  if ((_DWORD)v180 == v11)
  {
    if ((a7 & 0x1E00) != 0)
      result = memcpy(v183, (const void *)(v172 + 2 * v173 + (int)v62), v64);
    if (v66)
    {
      v115 = v64;
      v116 = (const void *)(v172 + 2 * v173 + v62 + v64);
LABEL_150:
      result = memcpy(&v183[v64], v116, v115);
      LOBYTE(v66) = 1;
    }
  }
  else
  {
    if ((a7 & 0x1E00) != 0)
    {
      v117 = v11 - 1;
      v118 = *((_DWORD *)a5 + 1);
      if (v118 > v12
        || (v119 = *a5, v118 + v119 <= v12)
        || (v120 = *((_DWORD *)a5 + 2), v120 >= v11)
        || v120 + v119 < v11)
      {
        v123 = *((_DWORD *)v9 + 1108);
        v124 = v117 - v123;
        v125 = *(unsigned __int8 *)(*((_QWORD *)v9 + 235) + 2009);
        if (a4 < 0)
        {
LABEL_127:
          v128 = -1;
        }
        else
        {
          v126 = v11 - v123;
          v127 = v125 - a4;
          while (v126 >> v127 != v124 >> v127)
          {
            v31 = v127++ < v125;
            if (!v31)
              goto LABEL_127;
          }
          if (v125 - v127 >= a4)
            v128 = v125 - v127;
          else
            v128 = v125 - v127 + 1;
        }
        v121 = 0;
        v122 = *(unsigned __int8 **)&v9[32 * v128
                                      + 4456
                                      + 8
                                      * (((v12 - *((_DWORD *)v9 + 1107)) >> (v125 - v128)) & 1 | (2 * ((v124 >> (v125 - v128)) & 1)))];
        v118 = *((_DWORD *)v122 + 1);
        v120 = *((_DWORD *)v122 + 2);
      }
      else
      {
        v121 = a6 != 3;
        v122 = a5;
      }
      v129 = v117 - v120;
      v130 = *(unsigned __int8 **)&v122[8 * v121 + 136];
      v131 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v130 + 10) + 24))(*((_QWORD *)v130 + 10), *((_QWORD *)v130 + 11) + (v12 - v118) + *v130 * (unint64_t)v129);
      result = memcpy(v183, v131, v64);
      a4 = v181;
    }
    if (v66)
    {
      v132 = v64 + v12;
      v133 = v11 - 1;
      v134 = *((_DWORD *)a5 + 1);
      if (v134 > v64 + v12
        || (v135 = *a5, v134 + v135 <= v132)
        || (v136 = *((_DWORD *)a5 + 2), v136 >= v11)
        || v136 + v135 < v11)
      {
        v139 = *((_DWORD *)v9 + 1107);
        v140 = *((_DWORD *)v9 + 1108);
        v141 = v132 - v139;
        v142 = v133 - v140;
        v143 = *(unsigned __int8 *)(*((_QWORD *)v9 + 235) + 2009);
        if (a4 < 0)
        {
LABEL_144:
          v147 = -1;
        }
        else
        {
          v144 = v12 - v139;
          v145 = v11 - v140;
          v146 = v143 - a4;
          while (v144 >> v146 != v141 >> v146 || v145 >> v146 != v142 >> v146)
          {
            v31 = v146++ < v143;
            if (!v31)
              goto LABEL_144;
          }
          if (v143 - v146 >= a4)
            v147 = v143 - v146;
          else
            v147 = v143 - v146 + 1;
        }
        v137 = 0;
        v138 = *(unsigned __int8 **)&v9[32 * v147
                                      + 4456
                                      + 8
                                      * ((v141 >> (v143 - v147)) & 1 | (2
                                                                                    * ((v142 >> (v143 - v147)) & 1)))];
        v134 = *((_DWORD *)v138 + 1);
        v136 = *((_DWORD *)v138 + 2);
      }
      else
      {
        v137 = a6 != 3;
        v138 = a5;
      }
      v148 = (v132 - v134);
      v149 = *(unsigned __int8 **)&v138[8 * v137 + 136];
      v116 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v149 + 10) + 24))(*((_QWORD *)v149 + 10), *((_QWORD *)v149 + 11) + v148 + *v149 * (unint64_t)(v133 - v136));
      v115 = v64;
      goto LABEL_150;
    }
  }
  if ((a7 & 0x100) != 0)
  {
    if (v171 == v12 || (_DWORD)v180 == v11)
    {
      v157 = v62 + 2 * v173;
      if ((int)v62 <= 0)
        v157 = 0;
      result = (_BYTE *)(v172 + (int)v178 + v157 - 1);
    }
    else
    {
      v150 = v12 - 1;
      v151 = v11 - 1;
      v152 = a5;
      v153 = *((_DWORD *)a5 + 1);
      if (v153 >= v12
        || (v154 = *a5, v153 + v154 < v12)
        || (v155 = *((_DWORD *)a5 + 2), v155 >= v11)
        || v155 + v154 < v11)
      {
        v158 = *((_DWORD *)v9 + 1107);
        v159 = *((_DWORD *)v9 + 1108);
        v160 = v150 - v158;
        v161 = v151 - v159;
        v162 = *(unsigned __int8 *)(*((_QWORD *)v9 + 235) + 2009);
        if (v181 < 0)
        {
LABEL_167:
          v166 = -1;
        }
        else
        {
          v163 = v12 - v158;
          v164 = v11 - v159;
          v165 = v162 - v181;
          while (v163 >> v165 != v160 >> v165 || v164 >> v165 != v161 >> v165)
          {
            v31 = v165++ < v162;
            if (!v31)
              goto LABEL_167;
          }
          if (v162 - v165 >= v181)
            v166 = v162 - v165;
          else
            v166 = v162 - v165 + 1;
        }
        v156 = 0;
        v152 = *(unsigned __int8 **)&v9[32 * v166
                                      + 4456
                                      + 8
                                      * ((v160 >> (v162 - v166)) & 1 | (2
                                                                                    * ((v161 >> (v162 - v166)) & 1)))];
        v153 = *((_DWORD *)v152 + 1);
        v155 = *((_DWORD *)v152 + 2);
      }
      else
      {
        v156 = a6 != 3;
      }
      v167 = (v150 - v153);
      v168 = *(unsigned __int8 **)&v152[8 * v156 + 136];
      result = (_BYTE *)(*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v168 + 10) + 24))(*((_QWORD *)v168 + 10), *((_QWORD *)v168 + 11) + v167 + *v168 * (unint64_t)(v151 - v155));
    }
    *(a9 - 1) = *result;
  }
  if (v179)
  {
    if (v175)
      goto LABEL_179;
  }
  else
  {
    if (v175)
    {
      v169 = &a9[v64 - 1];
    }
    else if ((a7 & 0x100) != 0)
    {
      v169 = a9 - 1;
    }
    else
    {
      v169 = v183;
      if ((a7 & 0x1E00) == 0)
        v169 = &v183[v64];
    }
    result = memset(&a9[v64], *v169, v64);
    if (v175)
    {
LABEL_179:
      if ((a7 & 0x100) != 0)
        goto LABEL_180;
      goto LABEL_192;
    }
  }
  result = memset(a9, a9[v64], v64);
  if ((a7 & 0x100) != 0)
  {
LABEL_180:
    if ((a7 & 0x1E00) != 0)
      goto LABEL_181;
LABEL_193:
    result = memset(v183, *(a9 - 1), v64);
    if ((v66 & 1) != 0)
      goto LABEL_183;
    goto LABEL_182;
  }
LABEL_192:
  *(a9 - 1) = *a9;
  if ((a7 & 0x1E00) == 0)
    goto LABEL_193;
LABEL_181:
  if ((v66 & 1) == 0)
LABEL_182:
    result = memset(&v183[v64], v183[v64 - 1], v64);
LABEL_183:
  v177[2] = 1;
  return result;
}

_BYTE *sub_1B6839920(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, int a8, int a9, _WORD *a10)
{
  int v16;
  int v17;
  char *v18;
  _BYTE *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  size_t v71;
  const void *v72;
  char *v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  const void *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  char v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  char *v139;
  char v140;
  int v141;
  char *v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  _BOOL4 v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;

  if (!a8)
    return memset(a10 - 1, 128 << *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 195), (8 << a9) | 2);
  v16 = 4 << a9;
  v167 = a1 + 4697;
  if (!*(_BYTE *)(a1 + 4697) && (*(_DWORD *)(a1 + 4428) == a2 || *(_DWORD *)(a1 + 4432) == a3))
  {
    v17 = a4;
    sub_1B6838720(a1, 1);
    a4 = v17;
  }
  v18 = (char *)a10 + v16;
  v164 = a4;
  result = (_BYTE *)sub_1B6838850(a1, a2, a3, a4, (uint64_t)a5, a9 + 1, a8, 1u);
  v20 = *(_QWORD *)(a1 + 1880);
  v163 = *(unsigned __int8 *)(v20 + 2013);
  v21 = *(int *)(a1 + 4428);
  v168 = *(_QWORD *)(a1 + 4672);
  v169 = *(int *)(a1 + 4432);
  v171 = a2 - v21;
  v170 = a3 - v169;
  v161 = *(_DWORD *)(a1 + 4428);
  v162 = a6;
  if ((_DWORD)v21 == a2)
  {
    v165 = (a8 & 0xF0) != 0;
    if ((a8 & 0xF0) != 0)
      result = memcpy(a10, (const void *)(v168 + (int)v170), 2 << a9);
    if ((a8 & 0xF) != 0)
    {
      result = memcpy((char *)a10 + (2 << a9), (const void *)(v168 + v170 + (2 << a9)), 2 << a9);
      v166 = 1;
    }
    else
    {
      v166 = 0;
    }
  }
  else
  {
    v166 = (a8 & 0xF) != 0;
    if ((a8 & 0xF) != 0)
    {
      v22 = v16;
      v23 = a2 - 2;
      v24 = 2 << a9;
      v25 = (2 << a9) + a3;
      v26 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(a1 + 8) && v26 == a2)
      {
        v27 = 0;
        v28 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        if (v26 > v23
          || (v29 = *a5, v26 + v29 <= v23)
          || (v30 = *((_DWORD *)a5 + 2), v30 > v25)
          || (v31 = v30 + v29, v28 = a5, v31 <= v25))
        {
          v32 = v23 - v161;
          v33 = v25 - v169;
          v34 = *(unsigned __int8 *)(v20 + 2009);
          if (v164 < 0)
          {
LABEL_26:
            v37 = -1;
          }
          else
          {
            v35 = v34 - v164;
            while ((int)v171 >> v35 != v32 >> v35 || (int)v170 >> v35 != v33 >> v35)
            {
              v36 = v35++ < v34;
              if (!v36)
                goto LABEL_26;
            }
            v37 = v34 - v35;
            if (v37 < v164)
              ++v37;
          }
          v28 = *(unsigned __int8 **)(a1
                                    + 32 * v37
                                    + 8
                                    * ((v32 >> (v34 - v37)) & 1 | (2
                                                                               * ((v33 >> (v34 - v37)) & 1)))
                                    + 4456);
        }
        v27 = v162;
        if (v28 != a5)
          v27 = 0;
      }
      result = 0;
      v38 = *(unsigned __int8 *)(*((_QWORD *)v28 + 17) + 1);
      v39 = v23 - *((_DWORD *)v28 + 1);
      if ((v39 & 0x80000000) == 0)
      {
        v40 = v25 - *((_DWORD *)v28 + 2);
        if ((v40 & 0x80000000) == 0)
        {
          v41 = *v28;
          if (v39 >= v41 || v40 >= v41)
          {
            result = 0;
          }
          else
          {
            v43 = *(_QWORD *)&v28[8 * v27 + 136];
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v43 + 96) + 24))(*(_QWORD *)(v43 + 96), *(_QWORD *)(v43 + 104)+ v39+ *(unsigned __int8 *)(v43 + 1) * (unint64_t)(v40 & 0xFFFFFFFE));
            v24 = 2 << a9;
          }
        }
      }
      if (v24 < (int)v22)
      {
        v44 = v24;
        v45 = result + 1;
        do
        {
          v46 = (char *)a10 + v44;
          *v46 = *(v45 - 1);
          v46[1] = *v45;
          v44 += 2;
          v45 += 2 * v38;
        }
        while (v44 < v22);
      }
    }
    if ((a8 & 0xF0) != 0)
    {
      v47 = a2 - 2;
      v48 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(a1 + 8))
        v49 = v48 == a2;
      else
        v49 = 0;
      a6 = v162;
      if (v49)
      {
        v60 = 0;
        v53 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        if (v48 > v47
          || (v50 = *a5, v48 + v50 <= v47)
          || (v51 = *((_DWORD *)a5 + 2), v51 > a3)
          || (v52 = v51 + v50, v53 = a5, v52 <= a3))
        {
          v54 = *(_DWORD *)(a1 + 4428);
          v55 = v47 - v54;
          v56 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
          if (v164 < 0)
          {
LABEL_56:
            v59 = -1;
          }
          else
          {
            v57 = a2 - v54;
            v58 = v56 - v164;
            while (v57 >> v58 != v55 >> v58)
            {
              v36 = v58++ < v56;
              if (!v36)
                goto LABEL_56;
            }
            v59 = v56 - v58;
            if (v56 - v58 < v164)
              ++v59;
          }
          v53 = *(unsigned __int8 **)(a1
                                    + 32 * v59
                                    + 8
                                    * ((v55 >> (v56 - v59)) & 1 | (2
                                                                               * (((a3
                                                                                                - *(_DWORD *)(a1 + 4432)) >> (v56 - v59)) & 1)))
                                    + 4456);
        }
        if (v53 == a5)
          v60 = v162;
        else
          v60 = 0;
      }
      result = 0;
      v61 = *(unsigned __int8 *)(*((_QWORD *)v53 + 17) + 1);
      v62 = v47 - *((_DWORD *)v53 + 1);
      if ((v62 & 0x80000000) == 0)
      {
        v63 = a3 - *((_DWORD *)v53 + 2);
        if ((v63 & 0x80000000) == 0)
        {
          v64 = *v53;
          if (v62 >= v64 || v63 >= v64)
          {
            result = 0;
          }
          else
          {
            v66 = *(_QWORD *)&v53[8 * v60 + 136];
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v66 + 96) + 24))(*(_QWORD *)(v66 + 96), *(_QWORD *)(v66 + 104)+ v62+ *(unsigned __int8 *)(v66 + 1) * (unint64_t)(v63 & 0xFFFFFFFE));
          }
        }
      }
      v67 = (2 << a9);
      if ((int)v67 >= 1)
      {
        v68 = 0;
        v69 = result + 1;
        do
        {
          v70 = &a10[v68 / 2];
          *v70 = *(v69 - 1);
          v70[1] = *v69;
          v68 += 2;
          v69 += 2 * v61;
        }
        while (v68 < v67);
      }
      v165 = 1;
    }
    else
    {
      v165 = 0;
      a6 = v162;
    }
  }
  if ((_DWORD)v169 == a3)
  {
    if ((a8 & 0x1E00) != 0)
      result = memcpy(v18, (const void *)(v168 + 2 * v163 + (int)v171), 2 << a9);
    if ((a8 & 0x1E000) != 0)
    {
      v71 = 2 << a9;
      v72 = (const void *)(v168 + 2 * v163 + v171 + v71);
      v73 = &v18[v71];
LABEL_140:
      result = memcpy(v73, v72, v71);
      v98 = 1;
      goto LABEL_141;
    }
  }
  else
  {
    if ((a8 & 0x1E00) != 0)
    {
      v74 = a3 - 1;
      if (*(_BYTE *)(a1 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        v75 = 0;
        v76 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        v77 = *((_DWORD *)a5 + 1);
        if (v77 > a2
          || (v78 = *a5, v77 + v78 <= a2)
          || (v79 = *((_DWORD *)a5 + 2), v79 >= a3)
          || (v80 = v79 + v78, v76 = a5, v80 < a3))
        {
          v81 = *(_DWORD *)(a1 + 4432);
          v82 = v74 - v81;
          v83 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
          if (v164 < 0)
          {
LABEL_94:
            v86 = -1;
          }
          else
          {
            v84 = a3 - v81;
            v85 = v83 - v164;
            while (v84 >> v85 != v82 >> v85)
            {
              v36 = v85++ < v83;
              if (!v36)
                goto LABEL_94;
            }
            v86 = v83 - v85;
            if (v83 - v85 < v164)
              ++v86;
          }
          v76 = *(unsigned __int8 **)(a1
                                    + 32 * v86
                                    + 8
                                    * (((a2 - *(_DWORD *)(a1 + 4428)) >> (v83 - v86)) & 1 | (2 * ((v82 >> (v83 - v86)) & 1)))
                                    + 4456);
        }
        if (v76 == a5)
          v75 = a6;
        else
          v75 = 0;
      }
      v87 = 0;
      v88 = a2 - *((_DWORD *)v76 + 1);
      if ((v88 & 0x80000000) == 0)
      {
        v89 = v74 - *((_DWORD *)v76 + 2);
        if ((v89 & 0x80000000) == 0)
        {
          v90 = *v76;
          if (v88 >= v90 || v89 >= v90)
          {
            v87 = 0;
          }
          else
          {
            v92 = *(_QWORD *)&v76[8 * v75 + 136];
            v87 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v92 + 96) + 24))(*(_QWORD *)(v92 + 96), *(_QWORD *)(v92 + 104)+ v88+ *(unsigned __int8 *)(v92 + 1) * (unint64_t)(v89 & 0xFFFFFFFE));
          }
        }
      }
      result = memcpy(v18, v87, 2 << a9);
    }
    if ((a8 & 0x1E000) != 0)
    {
      v93 = 2 << a9;
      v94 = (2 << a9) + a2;
      v95 = a3 - 1;
      if (*(_BYTE *)(a1 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        v96 = 0;
        v97 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        v99 = *((_DWORD *)a5 + 1);
        if (v99 > v94
          || (v100 = *a5, v99 + v100 <= v94)
          || (v101 = *((_DWORD *)a5 + 2), v101 >= a3)
          || (v102 = v101 + v100, v97 = a5, v102 < a3))
        {
          v103 = *(_DWORD *)(a1 + 4428);
          v104 = *(_DWORD *)(a1 + 4432);
          v105 = v94 - v103;
          v106 = v95 - v104;
          v107 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
          if (v164 < 0)
          {
LABEL_124:
            v111 = -1;
          }
          else
          {
            v108 = a2 - v103;
            v109 = a3 - v104;
            v110 = v107 - v164;
            while (v108 >> v110 != v105 >> v110 || v109 >> v110 != v106 >> v110)
            {
              v36 = v110++ < v107;
              if (!v36)
                goto LABEL_124;
            }
            v111 = v107 - v110;
            if (v107 - v110 < v164)
              ++v111;
          }
          v97 = *(unsigned __int8 **)(a1
                                    + 32 * v111
                                    + 8
                                    * ((v105 >> (v107 - v111)) & 1 | (2
                                                                                  * ((v106 >> (v107 - v111)) & 1)))
                                    + 4456);
        }
        if (v97 == a5)
          v96 = a6;
        else
          v96 = 0;
      }
      v72 = 0;
      v112 = v94 - *((_DWORD *)v97 + 1);
      if ((v112 & 0x80000000) == 0)
      {
        v113 = v95 - *((_DWORD *)v97 + 2);
        if ((v113 & 0x80000000) == 0)
        {
          v114 = *v97;
          if (v112 >= v114 || v113 >= v114)
          {
            v72 = 0;
          }
          else
          {
            v116 = *(_QWORD *)&v97[8 * v96 + 136];
            v72 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v116 + 96) + 24))(*(_QWORD *)(v116 + 96), *(_QWORD *)(v116 + 104)+ v112+ *(unsigned __int8 *)(v116 + 1) * (unint64_t)(v113 & 0xFFFFFFFE));
          }
        }
      }
      v71 = v93;
      v73 = &v18[v93];
      goto LABEL_140;
    }
  }
  v98 = 0;
LABEL_141:
  if ((a8 & 0x100) != 0)
  {
    if (v161 == a2 || (_DWORD)v169 == a3)
    {
      v122 = v171 + 2 * v163;
      if ((int)v171 <= 0)
        v122 = 0;
      v123 = v168 + (int)v170 + v122;
      *((_BYTE *)a10 - 2) = *(_BYTE *)(v123 - 2);
      result = (_BYTE *)(v123 - 1);
    }
    else
    {
      v117 = a2 - 2;
      v118 = a3 - 1;
      v119 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(a1 + 8) && (v119 == a2 || *((_DWORD *)a5 + 2) == a3))
      {
        v120 = 0;
        v121 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        if (v119 > v117
          || (v124 = *a5, v119 + v124 <= v117)
          || (v125 = *((_DWORD *)a5 + 2), v125 >= a3)
          || (v126 = v125 + v124, v121 = a5, v126 < a3))
        {
          v127 = *(_DWORD *)(a1 + 4428);
          v128 = *(_DWORD *)(a1 + 4432);
          v129 = v117 - v127;
          v130 = v118 - v128;
          v131 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
          if (v164 < 0)
          {
LABEL_160:
            v135 = -1;
          }
          else
          {
            v132 = a2 - v127;
            v133 = a3 - v128;
            v134 = v131 - v164;
            while (v132 >> v134 != v129 >> v134 || v133 >> v134 != v130 >> v134)
            {
              v36 = v134++ < v131;
              if (!v36)
                goto LABEL_160;
            }
            v135 = v131 - v134;
            if (v131 - v134 < v164)
              ++v135;
          }
          v121 = *(unsigned __int8 **)(a1
                                     + 32 * v135
                                     + 8
                                     * ((v129 >> (v131 - v135)) & 1 | (2
                                                                                   * ((v130 >> (v131 - v135)) & 1)))
                                     + 4456);
        }
        v120 = v162;
        if (v121 != a5)
          v120 = 0;
      }
      v136 = *((_DWORD *)v121 + 1);
      v137 = *((_DWORD *)v121 + 2);
      v138 = *(_QWORD *)&v121[8 * v120 + 136];
      v139 = (char *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v138 + 96) + 24))(*(_QWORD *)(v138 + 96), *(_QWORD *)(v138 + 104)+ (v117 - v136)+ *(unsigned __int8 *)(v138 + 1) * (unint64_t)((v118 - v137) & 0xFE));
      v140 = *v139;
      result = v139 + 1;
      *((_BYTE *)a10 - 2) = v140;
    }
    *((_BYTE *)a10 - 1) = *result;
  }
  v141 = 1 << a9;
  if (!v166)
  {
    if (v165)
    {
      v142 = (char *)a10 + (2 << a9) - 2;
    }
    else if ((a8 & 0x100) != 0)
    {
      v142 = (char *)(a10 - 1);
    }
    else
    {
      v142 = v18;
      if ((a8 & 0x1E00) == 0)
        v142 = &v18[2 << a9];
    }
    if (v141 < 2 << a9)
    {
      v143 = (2 << a9) - (uint64_t)v141;
      v144 = v141;
      do
      {
        LOBYTE(a10[v144]) = *v142;
        HIBYTE(a10[v144++]) = v142[1];
        --v143;
      }
      while (v143);
    }
  }
  v145 = a9 == 31 || v165;
  if ((v145 & 1) == 0)
  {
    v146 = 0;
    v147 = 0;
    v148 = 2 << a9;
    if (v141 <= 1)
      v149 = 1;
    else
      v149 = 1 << a9;
    v150 = 2 * v149;
    do
    {
      *((_BYTE *)a10 + (v146 >> 32)) = *((_BYTE *)a10 + v148);
      *((_BYTE *)a10 + (int)v147 + 1) = *((_BYTE *)a10 + (v148 | 1));
      v147 += 2;
      v146 += 0x200000000;
    }
    while (v150 != v147);
  }
  if ((a8 & 0x100) == 0)
    *(a10 - 1) = *a10;
  if (a9 != 31 && (a8 & 0x1E00) == 0)
  {
    v151 = 0;
    v152 = 0;
    if (v141 <= 1)
      v153 = 1;
    else
      v153 = 1 << a9;
    v154 = 2 * v153;
    do
    {
      v18[v151 >> 32] = *((_BYTE *)a10 - 2);
      v18[(int)v152 + 1] = *((_BYTE *)a10 - 1);
      v152 += 2;
      v151 += 0x200000000;
    }
    while (v154 != v152);
  }
  if ((v98 & 1) == 0)
  {
    v155 = 2 << a9;
    if (v141 < 2 << a9)
    {
      v156 = v155;
      v157 = v155 - 2;
      v158 = v156 - 1;
      v159 = v156 - v141;
      v160 = 2 * v141;
      do
      {
        v18[v160] = v18[v157];
        v18[v160 + 1] = v18[v158];
        v160 += 2;
        --v159;
      }
      while (v159);
    }
  }
  *(_BYTE *)(v167 + 2) = 1;
  return result;
}

_QWORD *sub_1B683A4E4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E6A15238;
  v2 = a1[2];
  if (v2)
    MEMORY[0x1BCC9814C](v2, 0x1000C4077774924);
  return a1;
}

void sub_1B683A52C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E6A15238;
  v1 = a1[2];
  if (v1)
    MEMORY[0x1BCC9814C](v1, 0x1000C4077774924);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B683A584(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 16))
    return 0;
  v2 = operator new[](*(_QWORD *)(a1 + 8), MEMORY[0x1E0DE4E10]);
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
    return 0;
  else
    return 4294954392;
}

uint64_t sub_1B683A5CC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) + a2;
}

double sub_1B683A5D8(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, __int16 a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double result;

  v10 = a3 - *(_DWORD *)(a1 + 4428);
  v11 = a4 - *(_DWORD *)(a1 + 4432);
  *((_DWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 2) = a4;
  bzero(*((void **)a2 + 11), 2 * ((unint64_t)*a2 >> 3) * ((unint64_t)*a2 >> 3));
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFFC | a5 & 3;
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0x1FF | (a6 << 9);
  sub_1B683A720((void **)a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 1872) + 10) < 2u);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2013);
  v13 = v10 + v11 * v12;
  v14 = *(_QWORD *)(a1 + 4872) + v13;
  *((_QWORD *)a2 + 3) = *(_QWORD *)(a1 + 4864);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *(_QWORD *)(a1 + 4904) + v13;
  *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 4896);
  *((_QWORD *)a2 + 8) = v15;
  v16 = v10 + (v11 >> 1) * v12;
  v17 = *(_QWORD *)(a1 + 4888) + v16;
  *((_QWORD *)a2 + 5) = *(_QWORD *)(a1 + 4880);
  *((_QWORD *)a2 + 6) = v17;
  v18 = *(_QWORD *)(a1 + 4920) + v16;
  *((_QWORD *)a2 + 9) = *(_QWORD *)(a1 + 4912);
  *((_QWORD *)a2 + 10) = v18;
  **((_BYTE **)a2 + 17) = *a2;
  if (1 << *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2012) <= *a2 >> 1)
    v19 = *a2 >> 1;
  else
    v19 = 1 << *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2012);
  *(_BYTE *)(*((_QWORD *)a2 + 17) + 1) = v19;
  *((_DWORD *)a2 + 46) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 168) = xmmword_1B6917860;
  *((_WORD *)a2 + 94) = 2;
  *((_DWORD *)a2 + 52) = 0;
  *((_OWORD *)a2 + 12) = xmmword_1B6917860;
  *((_WORD *)a2 + 106) = 0;
  return result;
}

void sub_1B683A720(void **a1, int a2)
{
  unint64_t v4;
  unsigned int v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;

  bzero(a1[12], 16 * ((unint64_t)*(unsigned __int8 *)a1 >> 2) * ((unint64_t)*(unsigned __int8 *)a1 >> 2));
  if (a2)
  {
    LODWORD(v4) = *(unsigned __int8 *)a1;
    if (v4 >= 4)
    {
      v5 = 0;
      v6 = (char *)a1[12];
      do
      {
        if (v4 >= 4)
        {
          v8 = 0;
          v9 = v6 + 9;
          do
          {
            *(_WORD *)(v9 - 1) = -1;
            ++v8;
            v4 = *(unsigned __int8 *)a1;
            v9 += 16;
          }
          while (v8 < v4 >> 2);
          v7 = v4 >> 2;
        }
        else
        {
          LODWORD(v7) = 0;
        }
        v6 += 16 * v7;
        ++v5;
      }
      while (v5 < v7);
    }
  }
}

void sub_1B683A7B8(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, char a6, __int16 a7)
{
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unint64_t v12;
  _WORD *v13;
  _WORD *v14;
  unint64_t v15;

  sub_1B683A5D8(a1, a2, a3, a4, a5, a7);
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFF3 | (4 * (a6 & 3));
  v9 = *a2;
  if (v9 >= 8)
  {
    v10 = 0;
    v11 = (_WORD *)*((_QWORD *)a2 + 11);
    v12 = v9 >> 3;
    v13 = v11;
    do
    {
      v14 = v13;
      v15 = v12;
      do
      {
        *v14++ = *v11;
        --v15;
      }
      while (v15);
      ++v10;
      v13 += v12;
    }
    while (v10 != v12);
  }
}

