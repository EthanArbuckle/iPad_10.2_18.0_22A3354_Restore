@implementation IDSGlobalLink

- (IDSGlobalLink)initWithDeviceUniqueID:(id)a3 cbuuid:(id)a4
{
  id v7;
  id v8;
  IDSGlobalLink *v9;
  IDSGlobalLink *v10;
  IDSGlobalLink *v11;
  void *v12;
  IDSUDPLink *v13;
  const char *v14;
  double v15;
  uint64_t v16;
  IDSUDPLink *udpLink;
  const char *v18;
  double v19;
  IDSUDPLink *v20;
  const char *v21;
  double v22;
  uint64_t v23;
  IDSUDPLink *udpLinkv6;
  const char *v25;
  double v26;
  IDSTCPLink *v27;
  const char *v28;
  double v29;
  uint64_t PacketLength;
  IDSTCPLink *tcpLink;
  const char *v32;
  double v33;
  IDSTCPLink *v34;
  const char *v35;
  double v36;
  uint64_t v37;
  IDSTCPLink *tcpSSLLink;
  const char *v39;
  double v40;
  IDSNWLink *v41;
  const char *v42;
  double v43;
  uint64_t v44;
  IDSNWLink *nwLink;
  const char *v46;
  double v47;
  double v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  double v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  void *v61;
  const char *v62;
  double v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  double v67;
  NSMutableArray *v68;
  NSMutableArray *activeProbingLinkIDs;
  NSMutableDictionary *v70;
  NSMutableDictionary *pluginParticipantIDs;
  NSMutableDictionary *v72;
  NSMutableDictionary *pluginNameToPluginOptionsDict;
  const char *v74;
  uint64_t v75;
  double v76;
  void *v77;
  const char *v78;
  double v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  const char *v84;
  uint64_t v85;
  double v86;
  IDSServerMaterialExchangeController *v87;
  const char *v88;
  double v89;
  uint64_t v90;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  uint64_t v92;
  NSMutableArray *unusedLinkIDs;
  int v94;
  const char *v95;
  uint64_t v96;
  double v97;
  int v98;
  uint64_t v99;
  NSMutableSet *usedLocalConnectionIDs;
  NSObject *v101;
  int maxLinkID;
  _QWORD aBlock[4];
  IDSGlobalLink *v105;
  objc_super v106;
  uint8_t buf[4];
  int v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v106.receiver = self;
  v106.super_class = (Class)IDSGlobalLink;
  v9 = -[IDSGlobalLink init](&v106, sel_init);
  v10 = v9;
  if (v9)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_19B9BB254;
    aBlock[3] = &unk_1E3C1FC28;
    v11 = v9;
    v105 = v11;
    v12 = _Block_copy(aBlock);
    objc_storeStrong((id *)&v11->_deviceUniqueID, a3);
    objc_storeStrong((id *)&v11->_cbuuid, a4);
    v13 = [IDSUDPLink alloc];
    v16 = objc_msgSend_initWithDeviceUniqueID_cbuuid_(v13, v14, (uint64_t)v11->_deviceUniqueID, v15, v11->_cbuuid);
    udpLink = v11->_udpLink;
    v11->_udpLink = (IDSUDPLink *)v16;

    objc_msgSend_setDelegate_(v11->_udpLink, v18, (uint64_t)v11, v19);
    v20 = [IDSUDPLink alloc];
    v23 = objc_msgSend_initWithDeviceUniqueID_cbuuid_(v20, v21, (uint64_t)v11->_deviceUniqueID, v22, v11->_cbuuid);
    udpLinkv6 = v11->_udpLinkv6;
    v11->_udpLinkv6 = (IDSUDPLink *)v23;

    objc_msgSend_setDelegate_(v11->_udpLinkv6, v25, (uint64_t)v11, v26);
    v27 = [IDSTCPLink alloc];
    PacketLength = objc_msgSend_initWithDeviceUniqueID_cbuuid_isSSL_getPacketLength_(v27, v28, (uint64_t)v11->_deviceUniqueID, v29, v11->_cbuuid, 0, v12);
    tcpLink = v11->_tcpLink;
    v11->_tcpLink = (IDSTCPLink *)PacketLength;

    objc_msgSend_setDelegate_(v11->_tcpLink, v32, (uint64_t)v11, v33);
    v34 = [IDSTCPLink alloc];
    v37 = objc_msgSend_initWithDeviceUniqueID_cbuuid_isSSL_getPacketLength_(v34, v35, (uint64_t)v11->_deviceUniqueID, v36, v11->_cbuuid, 1, v12);
    tcpSSLLink = v11->_tcpSSLLink;
    v11->_tcpSSLLink = (IDSTCPLink *)v37;

    objc_msgSend_setDelegate_(v11->_tcpSSLLink, v39, (uint64_t)v11, v40);
    v41 = [IDSNWLink alloc];
    v44 = objc_msgSend_initWithDeviceUniqueID_cbuuid_(v41, v42, (uint64_t)v11->_deviceUniqueID, v43, v11->_cbuuid);
    nwLink = v11->_nwLink;
    v11->_nwLink = (IDSNWLink *)v44;

    objc_msgSend_setDelegate_(v11->_nwLink, v46, (uint64_t)v11, v47);
    v48 = ids_monotonic_time();
    v11->_previousReportTime = v48;
    objc_msgSend_sharedInstance(IDSServerBag, v49, v50, v48);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v51, v52, (uint64_t)CFSTR("ids-fallback-to-tcp-first"), v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v11->_shouldFallbackToTCPFirst = objc_msgSend_BOOLValue(v54, v55, v56, v57);

    objc_msgSend_sharedInstance(IDSServerBag, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v61, v62, (uint64_t)CFSTR("ids-disable-pure-link-feature"), v63);
    v64 = objc_claimAutoreleasedReturnValue();
    v11->_disablePureLinkFeature = objc_msgSend_BOOLValue((void *)v64, v65, v66, v67);

    IDSSimpleUInt16List_Init((uint64_t)&v11->_channelNumberList, 16);
    IDSSimpleUInt16List_Init((uint64_t)&v11->_reallocChannelList, 16);
    v11->_natMappingTimeout = 35.0;
    v11->_nat64PrefixCache = (IDSNAT64PrefixCache_ *)IDSNAT64PrefixCacheCreate();
    IDSQRSendInfoList_Init((uint64_t)&v11->_sendInfoList, 4);
    v11->_remoteGlobalLinkVersion = -1;
    v68 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    activeProbingLinkIDs = v11->_activeProbingLinkIDs;
    v11->_activeProbingLinkIDs = v68;

    v70 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    pluginParticipantIDs = v11->_pluginParticipantIDs;
    v11->_pluginParticipantIDs = v70;

    v72 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    pluginNameToPluginOptionsDict = v11->_pluginNameToPluginOptionsDict;
    v11->_pluginNameToPluginOptionsDict = v72;

    objc_msgSend_sharedInstance(IDSServerBag, v74, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v77, v78, (uint64_t)CFSTR("ids-disable-server-material-exchange"), v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v64) = objc_msgSend_BOOLValue(v80, v81, v82, v83);

    if ((v64 & 1) == 0 && (_os_feature_enabled_impl() & 1) == 0)
    {
      v87 = [IDSServerMaterialExchangeController alloc];
      v90 = objc_msgSend_initWithDelegate_(v87, v88, (uint64_t)v11, v89);
      serverMaterialExchangeController = v11->_serverMaterialExchangeController;
      v11->_serverMaterialExchangeController = (IDSServerMaterialExchangeController *)v90;

    }
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v84, v85, v86);
    v92 = objc_claimAutoreleasedReturnValue();
    unusedLinkIDs = v11->_unusedLinkIDs;
    v11->_unusedLinkIDs = (NSMutableArray *)v92;

    v94 = IMGetDomainIntForKey();
    v98 = (char)v94;
    if (v94 << 24 < 0x1000000)
      v98 = 127;
    v11->_maxLinkID = v98;
    objc_msgSend_set(MEMORY[0x1E0C99E20], v95, v96, v97);
    v99 = objc_claimAutoreleasedReturnValue();
    usedLocalConnectionIDs = v11->_usedLocalConnectionIDs;
    v11->_usedLocalConnectionIDs = (NSMutableSet *)v99;

    OSLogHandleForTransportCategory();
    v101 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      maxLinkID = v11->_maxLinkID;
      *(_DWORD *)buf = 67109120;
      v108 = maxLinkID;
      _os_log_impl(&dword_19B949000, v101, OS_LOG_TYPE_DEFAULT, "initWithDeviceUniqueID: setting max link ID to %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("initWithDeviceUniqueID: setting max link ID to %d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("initWithDeviceUniqueID: setting max link ID to %d"));
      }
    }

  }
  return v10;
}

- (void)dealloc
{
  NSObject *v3;
  objc_super v4;
  uint8_t buf[4];
  IDSGlobalLink *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v6 = self;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "Dealloc IDSGlobalLink %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Dealloc IDSGlobalLink %@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Dealloc IDSGlobalLink %@."));
    }
  }
  IDSSimpleUInt16List_Destroy(&self->_channelNumberList.listSize);
  IDSSimpleUInt16List_Destroy(&self->_reallocChannelList.listSize);
  IDSNAT64PrefixCacheDestroy(self->_nat64PrefixCache);
  IDSQRSendInfoList_Destroy(self->_sendInfoList);
  v4.receiver = self;
  v4.super_class = (Class)IDSGlobalLink;
  -[IDSGlobalLink dealloc](&v4, sel_dealloc);
}

- (void)invalidate
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  double v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  void *v25;
  const char *v26;
  double v27;
  IDSGroupQUICMaterialExchangeProvider *quicMaterialExchangeProvider;
  const char *v29;
  double v30;
  const char *v31;
  double v32;
  const char *v33;
  double v34;
  NSMutableDictionary *tokenToCandidatePairs;
  NSMutableDictionary *linkIDToCandidatePairs;
  NSMutableDictionary *channelToCandidatePairs;
  NSMutableDictionary *tokenToStunCheckPairs;
  NSMutableDictionary *reallocNewCandidatePairToOldCandidatePair;
  NSMutableDictionary *retryCountPerLinkType;
  NSMutableDictionary *transactionIDToRequestMetadata;
  NSMutableDictionary *startTimeToStunReqID;
  NSMutableDictionary *tokenToStunReqID;
  NSMutableDictionary *tokenToReallocBlocks;
  NSMutableArray *localCandidateList;
  NSMutableArray *remoteCandidateList;
  NSMutableArray *nonAcceptedQRSessions;
  NSMutableArray *delayedCellInterfaces;
  NSMutableArray *allocateTimeReportBlocks;
  IDSGlobalLinkBlocks *qraBlocks;
  NSMutableArray *selfAllocateRequestIDs;
  id connectReadyHandler;
  NSMutableDictionary *connectingCandidatePairSessionInfo;
  NSMutableDictionary *unallocbindRequestToReason;
  NSMutableArray *connectedLinkIDs;
  NSMutableArray *activeProbingLinkIDs;
  NSMutableDictionary *pluginParticipantIDs;
  NSMutableDictionary *pluginNameToPluginOptionsDict;
  NSMutableDictionary *linkIDToStatsData;
  NSMutableDictionary *linkIDToReorderedPackets;
  NSMutableDictionary *linkIDToRequestTimeStampAndRTT;
  NSMutableDictionary *linkIDToHBCounter;
  NSData *avcDataBlob;
  NSDictionary *QRServerDataBlob;
  const char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  uint64_t v69;
  double v70;
  OS_nw_path_evaluator *wifiPathEvaluator;
  OS_nw_path_evaluator *cellularPathEvaluator;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  const char *v77;
  double v78;
  id disconnectCompletionHandler;
  void *v80;
  NSObject *v81;
  id v82;
  dispatch_block_t v83;
  id v84;
  IDSGlobalLink *v85;
  _QWORD block[4];
  id v87;
  uint8_t buf[4];
  IDSGlobalLink *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v89 = self;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "Invalidate IDSGlobalLink %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v85 = self;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Invalidate IDSGlobalLink %@."));
      if (_IDSShouldLog())
      {
        v85 = self;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Invalidate IDSGlobalLink %@."));
      }
    }
  }
  objc_msgSend_invalidate(self->_udpLink, v4, v5, v6, v85);
  objc_msgSend_invalidate(self->_udpLinkv6, v7, v8, v9);
  objc_msgSend_invalidate(self->_tcpLink, v10, v11, v12);
  objc_msgSend_invalidate(self->_tcpSSLLink, v13, v14, v15);
  objc_msgSend_invalidate(self->_nwLink, v16, v17, v18);
  objc_msgSend__stopAllocbindFailoverTimer_(self, v19, 0, v20);
  serverMaterialExchangeController = self->_serverMaterialExchangeController;
  if (serverMaterialExchangeController)
  {
    objc_msgSend_currentlySentMaterials(self->_serverMaterialExchangeController, v21, v22, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v26, (uint64_t)v25, v27);

  }
  quicMaterialExchangeProvider = self->_quicMaterialExchangeProvider;
  if (quicMaterialExchangeProvider)
    objc_msgSend_invalidate(quicMaterialExchangeProvider, v21, v22, v23);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_tokenToCandidatePairs, v21, (uint64_t)&unk_1E3C1B6F0, v23);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_linkIDToCandidatePairs, v29, (uint64_t)&unk_1E3C1C170, v30);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_channelToCandidatePairs, v31, (uint64_t)&unk_1E3C1C1B0, v32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_tokenToStunCheckPairs, v33, (uint64_t)&unk_1E3C1C1F0, v34);
  tokenToCandidatePairs = self->_tokenToCandidatePairs;
  self->_tokenToCandidatePairs = 0;

  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  self->_linkIDToCandidatePairs = 0;

  channelToCandidatePairs = self->_channelToCandidatePairs;
  self->_channelToCandidatePairs = 0;

  tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
  self->_tokenToStunCheckPairs = 0;

  reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
  self->_reallocNewCandidatePairToOldCandidatePair = 0;

  retryCountPerLinkType = self->_retryCountPerLinkType;
  self->_retryCountPerLinkType = 0;

  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  self->_transactionIDToRequestMetadata = 0;

  startTimeToStunReqID = self->_startTimeToStunReqID;
  self->_startTimeToStunReqID = 0;

  tokenToStunReqID = self->_tokenToStunReqID;
  self->_tokenToStunReqID = 0;

  tokenToReallocBlocks = self->_tokenToReallocBlocks;
  self->_tokenToReallocBlocks = 0;

  localCandidateList = self->_localCandidateList;
  self->_localCandidateList = 0;

  remoteCandidateList = self->_remoteCandidateList;
  self->_remoteCandidateList = 0;

  nonAcceptedQRSessions = self->_nonAcceptedQRSessions;
  self->_nonAcceptedQRSessions = 0;

  delayedCellInterfaces = self->_delayedCellInterfaces;
  self->_delayedCellInterfaces = 0;

  allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
  self->_allocateTimeReportBlocks = 0;

  qraBlocks = self->_qraBlocks;
  self->_qraBlocks = 0;

  selfAllocateRequestIDs = self->_selfAllocateRequestIDs;
  self->_selfAllocateRequestIDs = 0;

  connectReadyHandler = self->_connectReadyHandler;
  self->_connectReadyHandler = 0;

  connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
  self->_connectingCandidatePairSessionInfo = 0;

  unallocbindRequestToReason = self->_unallocbindRequestToReason;
  self->_unallocbindRequestToReason = 0;

  connectedLinkIDs = self->_connectedLinkIDs;
  self->_connectedLinkIDs = 0;

  activeProbingLinkIDs = self->_activeProbingLinkIDs;
  self->_activeProbingLinkIDs = 0;

  pluginParticipantIDs = self->_pluginParticipantIDs;
  self->_pluginParticipantIDs = 0;

  pluginNameToPluginOptionsDict = self->_pluginNameToPluginOptionsDict;
  self->_pluginNameToPluginOptionsDict = 0;

  linkIDToStatsData = self->_linkIDToStatsData;
  self->_linkIDToStatsData = 0;

  linkIDToReorderedPackets = self->_linkIDToReorderedPackets;
  self->_linkIDToReorderedPackets = 0;

  linkIDToRequestTimeStampAndRTT = self->_linkIDToRequestTimeStampAndRTT;
  self->_linkIDToRequestTimeStampAndRTT = 0;

  linkIDToHBCounter = self->_linkIDToHBCounter;
  self->_linkIDToHBCounter = 0;

  avcDataBlob = self->_avcDataBlob;
  self->_avcDataBlob = 0;

  QRServerDataBlob = self->_QRServerDataBlob;
  self->_QRServerDataBlob = 0;

  objc_msgSend__stopDisconnectTimer(self, v65, v66, v67);
  objc_msgSend__stopActivityTimer(self, v68, v69, v70);
  nw_path_evaluator_cancel();
  wifiPathEvaluator = self->_wifiPathEvaluator;
  self->_wifiPathEvaluator = 0;

  nw_path_evaluator_cancel();
  cellularPathEvaluator = self->_cellularPathEvaluator;
  self->_cellularPathEvaluator = 0;

  self->_remoteDeviceVersion = 0;
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v73, v74, v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRemoteDeviceVersion_(v76, v77, self->_remoteDeviceVersion, v78);

  disconnectCompletionHandler = self->_disconnectCompletionHandler;
  if (disconnectCompletionHandler)
  {
    v80 = _Block_copy(disconnectCompletionHandler);
    im_primary_queue();
    v81 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B9BBA00;
    block[3] = &unk_1E3C1FC70;
    v87 = v80;
    v82 = v80;
    v83 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
    dispatch_async(v81, v83);

    v84 = self->_disconnectCompletionHandler;
  }
  else
  {
    v84 = 0;
  }
  self->_disconnectCompletionHandler = 0;

}

- (id)_getLink:(int)a3 stunTransport:(int64_t)a4
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a4 == 4)
  {
    v4 = !self->_H2FallbackEnabled;
    v5 = 32;
    v6 = 40;
LABEL_5:
    if (v4)
      v5 = v6;
    return *(id *)((char *)&self->super.isa + v5);
  }
  if (a4 == 3)
  {
    v4 = !self->_H2FallbackEnabled;
    v5 = 48;
    v6 = 32;
    goto LABEL_5;
  }
  v7 = 24;
  if (a3 == 2)
    v7 = 16;
  if (self->_QUICForQREnabled)
    v5 = 48;
  else
    v5 = v7;
  return *(id *)((char *)&self->super.isa + v5);
}

- (void)_callDisconnectCompletionHandler:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  dispatch_block_t v9;
  id disconnectCompletionHandler;
  id v11;
  id WeakRetained;
  char v13;
  const char *v14;
  double v15;
  void *v16;
  void *v17;
  _QWORD block[4];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  OSLogHandleForTransportCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = _Block_copy(self->_disconnectCompletionHandler);
    *(_DWORD *)buf = 134218242;
    v22 = v6;
    v23 = 2112;
    v24 = v4;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "call disconnect completion handler %p error:%@", buf, 0x16u);

  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v16 = _Block_copy(self->_disconnectCompletionHandler);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("call disconnect completion handler %p error:%@"));

      if (_IDSShouldLog())
      {
        v17 = _Block_copy(self->_disconnectCompletionHandler);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("call disconnect completion handler %p error:%@"));

      }
    }
  }
  v7 = _Block_copy(self->_disconnectCompletionHandler);
  if (v7)
  {
    im_primary_queue();
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B9BBCEC;
    block[3] = &unk_1E3C1C7E8;
    v20 = v7;
    v19 = v4;
    v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
    dispatch_async(v8, v9);

    disconnectCompletionHandler = self->_disconnectCompletionHandler;
    self->_disconnectCompletionHandler = 0;

    v11 = v20;
LABEL_11:

    goto LABEL_12;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v13 = objc_opt_respondsToSelector();

  if ((v13 & 1) != 0)
  {
    v11 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didDisconnectOverCloud_cbuuid_(v11, v14, (uint64_t)self, v15, 0, self->_cbuuid);
    goto LABEL_11;
  }
LABEL_12:

}

- (id)_createInterfaceAddressArray:(unint64_t)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  uint64_t v9;
  const char *v10;
  id v11;
  double v12;
  unsigned __int16 v13;
  NSObject *v14;
  int startPort;
  const char *v16;
  double v17;
  unsigned int v18;
  unsigned __int16 v19;
  const char *v20;
  double v21;
  const char *v22;
  double v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  double v27;
  const char *v28;
  double v29;
  NSObject *v30;
  int v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  const char *v41;
  id v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8_t buf[4];
  _BYTE v48[20];
  uint64_t v49;

  v5 = a5;
  v6 = a4;
  v49 = *MEMORY[0x1E0C80C00];
  v9 = 24;
  if (!a3)
    v9 = 16;
  v11 = *(id *)((char *)&self->super.isa + v9);
  if (!self->_startPort)
    goto LABEL_23;
  v13 = self->_startPort + LOWORD(self->_portRange) - 1;
  OSLogHandleForIDSCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    startPort = self->_startPort;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v48 = startPort;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&v48[6] = v13;
    *(_WORD *)&v48[10] = 1024;
    *(_DWORD *)&v48[12] = a3;
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "use port range [%u, %u] for IPVersion %d.", buf, 0x14u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v45 = v13;
    v46 = a3;
    v44 = self->_startPort;
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("use port range [%u, %u] for IPVersion %d."));
  }
  v18 = self->_startPort;
  if (v18 >= v13)
  {
LABEL_12:
    objc_msgSend_setPort_(v11, v16, 0, v17, v44);
    objc_msgSend_setCellularPort_(v11, v28, 0, v29);
    OSLogHandleForTransportCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = self->_startPort;
      v32 = "IPv6";
      *(_DWORD *)buf = 67109634;
      if (!a3)
        v32 = "IPv4";
      *(_DWORD *)v48 = v31;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v13;
      *(_WORD *)&v48[10] = 2080;
      *(_QWORD *)&v48[12] = v32;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "all tries failed to bind port range [%u,%u] for %s, trying random port.", buf, 0x18u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v33 = a3 ? "IPv6" : "IPv4";
      v45 = v13;
      v46 = (unint64_t)v33;
      v44 = self->_startPort;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("all tries failed to bind port range [%u,%u] for %s, trying random port."));
      if (_IDSShouldLog())
      {
        v45 = v13;
        v46 = (unint64_t)v33;
        v44 = self->_startPort;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("all tries failed to bind port range [%u,%u] for %s, trying random port."));
      }
    }
LABEL_23:
    v26 = (void *)objc_msgSend_newSocketWithIPVersion_wantsAWDL_wantsWiFi_wantsCellular_clientUUID_(v11, v10, a3, v12, 0, v6, v5, self->_clientUUID, v44, v45, v46);
    if (v26)
    {
      OSLogHandleForTransportCategory();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = "IPv6";
        if (!a3)
          v35 = "IPv4";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v48 = v35;
        _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "bind to random port succeeded for %s.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("bind to random port succeeded for %s."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("bind to random port succeeded for %s."));
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "failed binding to random port, remove socket.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed binding to random port, remove socket."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed binding to random port, remove socket."));
        }
      }
      objc_msgSend_removeSocket(v11, v37, v38, v39);
    }
    goto LABEL_47;
  }
  while (1)
  {
    objc_msgSend_setPort_(v11, v16, (unsigned __int16)v18, v17, v44, v45, v46);
    v19 = v18 + 1;
    objc_msgSend_setCellularPort_(v11, v20, (unsigned __int16)(v18 + 1), v21);
    v26 = (void *)objc_msgSend_newSocketWithIPVersion_wantsAWDL_wantsWiFi_wantsCellular_clientUUID_(v11, v22, a3, v23, 0, v6, v5, self->_clientUUID);
    if (v26)
      break;
    objc_msgSend_removeSocket(v11, v24, v25, v27);
    LOWORD(v18) = v18 + 1;
    if (v13 <= v19)
      goto LABEL_12;
  }
  OSLogHandleForTransportCategory();
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = "IPv6";
    if (!a3)
      v41 = "IPv4";
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v48 = (unsigned __int16)v18;
    *(_WORD *)&v48[4] = 2080;
    *(_QWORD *)&v48[6] = v41;
    _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "bind to udp port %u succeeded for %s.", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("bind to udp port %u succeeded for %s."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("bind to udp port %u succeeded for %s."));
    }
  }
LABEL_47:
  v42 = v26;

  return v42;
}

- (void)_delayProcessingCellularInterfaces:(id)a3
{
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  int v10;
  NSObject *v11;
  NSMutableArray *v12;
  NSMutableArray *v13;
  const char *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t k;
  void *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  double v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  const char *v33;
  double v34;
  NSMutableArray *v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  NSMutableArray *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  NSMutableArray *v49;
  const char *v50;
  double v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t j;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  NSMutableArray *delayedCellInterfaces;
  NSMutableArray *v64;
  NSMutableArray *v65;
  NSObject *v66;
  const char *v67;
  double v68;
  NSMutableArray *v69;
  __CFArray *obj;
  __CFArray *v71;
  CFMutableArrayRef theArray;
  uint64_t v73;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  _BYTE v88[128];
  uint8_t v89[128];
  uint8_t buf[4];
  NSMutableArray *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  theArray = (CFMutableArrayRef)a3;
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_dataUsable(v6, v7, v8, v9);

  if (!v10)
  {
    v71 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    obj = theArray;
    v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v36, (uint64_t)&v79, v37, v88, 16);
    if (!v40)
      goto LABEL_57;
    v73 = *(_QWORD *)v80;
    v41 = 138412290;
    while (1)
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v80 != v73)
          objc_enumerationMutation(obj);
        v43 = *(NSMutableArray **)(*((_QWORD *)&v79 + 1) + 8 * i);
        if (objc_msgSend_isCellular(v43, v38, v39, *(double *)&v41, v69))
        {
          if (v71 && v43)
            CFArrayAppendValue(v71, v43);
          objc_msgSend_address(v43, v38, v39, *(double *)&v41);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = objc_msgSend_sa(v44, v45, v46, v47);

          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v49 = self->_delayedCellInterfaces;
          v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v75, v51, v87, 16);
          if (v54)
          {
            v56 = *(_QWORD *)v76;
            while (2)
            {
              for (j = 0; j != v54; ++j)
              {
                if (*(_QWORD *)v76 != v56)
                  objc_enumerationMutation(v49);
                objc_msgSend_address(*(void **)(*((_QWORD *)&v75 + 1) + 8 * j), v52, v53, v55);
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                v62 = objc_msgSend_sa(v58, v59, v60, v61);

                if (IsSameSA(v48, v62))
                {

                  goto LABEL_55;
                }
              }
              v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v52, (uint64_t)&v75, v55, v87, 16);
              if (v54)
                continue;
              break;
            }
          }

          delayedCellInterfaces = self->_delayedCellInterfaces;
          if (delayedCellInterfaces)
          {
            if (!v43)
              goto LABEL_49;
          }
          else
          {
            v64 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v65 = self->_delayedCellInterfaces;
            self->_delayedCellInterfaces = v64;

            delayedCellInterfaces = self->_delayedCellInterfaces;
            if (!v43)
            {
LABEL_49:
              OSLogHandleForTransportCategory();
              v66 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v91 = v43;
                _os_log_impl(&dword_19B949000, v66, OS_LOG_TYPE_DEFAULT, "delay processing cell interface %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v69 = v43;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("delay processing cell interface %@."));
                  if (_IDSShouldLog())
                  {
                    v69 = v43;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("delay processing cell interface %@."));
                  }
                }
              }
              continue;
            }
          }
          if (delayedCellInterfaces)
            CFArrayAppendValue((CFMutableArrayRef)delayedCellInterfaces, v43);
          goto LABEL_49;
        }
LABEL_55:
        ;
      }
      v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v79, *(double *)&v41, v88, 16);
      if (!v40)
      {
LABEL_57:

        objc_msgSend_removeObjectsInArray_(obj, v67, (uint64_t)v71, v68);
        v35 = (NSMutableArray *)v71;
        goto LABEL_58;
      }
    }
  }
  if (self->_delayedCellInterfaces)
  {
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = self->_delayedCellInterfaces;
      *(_DWORD *)buf = 138412290;
      v91 = v12;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "add delayed cell interfaces: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v69 = self->_delayedCellInterfaces;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add delayed cell interfaces: %@."));
        if (_IDSShouldLog())
        {
          v69 = self->_delayedCellInterfaces;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("add delayed cell interfaces: %@."));
        }
      }
    }
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v13 = self->_delayedCellInterfaces;
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v83, v15, v89, 16);
    if (v17)
    {
      v19 = *(_QWORD *)v84;
      do
      {
        for (k = 0; k != v17; ++k)
        {
          if (*(_QWORD *)v84 != v19)
            objc_enumerationMutation(v13);
          v21 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * k);
          v22 = objc_msgSend_containsObject_(theArray, v16, (uint64_t)v21, v18, v69);
          if (v21)
            v26 = theArray == 0;
          else
            v26 = 1;
          if (!v26 && v22 != 1)
            CFArrayAppendValue(theArray, v21);
          if (objc_msgSend_IPVersion(v21, v23, v24, v25) == 1)
          {
            v28 = objc_msgSend_index(v21, v16, v27, v18);
            objc_msgSend_name(v21, v29, v30, v31);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v33, v28, v34, v32, 0);

          }
        }
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v83, v18, v89, 16);
      }
      while (v17);
    }

    v35 = self->_delayedCellInterfaces;
    self->_delayedCellInterfaces = 0;
LABEL_58:

  }
}

- (void)_getNAT64PrefixForInterface:(int)a3 interfaceName:(id)a4 completionBlock:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  OSLogHandleForTransportCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v16 = v8;
    v17 = 1024;
    v18 = a3;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "[%@:%d] needs nat64 prefix.", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("[%@:%d] needs nat64 prefix."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("[%@:%d] needs nat64 prefix."));
    }
  }
  if (IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, a3))
  {
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v16) = a3;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "nat64 prefix cache hit for if:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("nat64 prefix cache hit for if:%d."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("nat64 prefix cache hit for if:%d."));
      }
    }
    self->_hasPendingAllocation = 0;
  }
  else
  {
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v16) = a3;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "waiting nat64 prefix for if:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("waiting nat64 prefix for if:%d."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("waiting nat64 prefix for if:%d."));
      }
    }
    *(_DWORD *)buf = a3;
    im_primary_queue();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v9;
    nw_nat64_copy_prefixes_async();

  }
}

- (BOOL)_synthesizeNAT64ForAddress:(sockaddr *)a3 withPrefix:(id *)a4 toAddress:(sockaddr *)a5
{
  __int128 v5;
  NSObject *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  char *v14;
  __int16 v15;
  char *v16;
  char v17[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v27 = v5;
  v28 = v5;
  *(_OWORD *)__str = v5;
  v26 = v5;
  v23 = v5;
  v24 = v5;
  v21 = v5;
  v22 = v5;
  v19 = v5;
  v20 = v5;
  *(_OWORD *)v17 = v5;
  v18 = v5;
  if (a4)
  {
    if (a3->sa_family == 2)
    {
      if (nw_nat64_synthesize_v6())
      {
        *(_WORD *)&a5->sa_len = 7708;
        *(_WORD *)a5->sa_data = *(_WORD *)a3->sa_data;
        SAToIPPortString(__str, 0x80uLL, (uint64_t)a3);
        SAToIPPortString(v17, 0x80uLL, (uint64_t)a5);
        OSLogHandleForTransportCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v14 = __str;
          v15 = 2080;
          v16 = v17;
          _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "_synthesizeNAT64ForAddress: nat64 translation: %s -> %s.", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_synthesizeNAT64ForAddress: nat64 translation: %s -> %s."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_synthesizeNAT64ForAddress: nat64 translation: %s -> %s."));
          }
        }
      }
      LOBYTE(v9) = 1;
      return v9;
    }
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "_synthesizeNAT64ForAddress: address is not AF_INET", buf, 2u);
    }

    v9 = os_log_shim_legacy_logging_enabled();
    if (v9)
    {
      v9 = _IDSShouldLogTransport();
      if (v9)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_synthesizeNAT64ForAddress: address is not AF_INET"));
        v9 = _IDSShouldLog();
        if (v9)
        {
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_synthesizeNAT64ForAddress: address is not AF_INET"));
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "_synthesizeNAT64ForAddress: nat64 translation failed due to invalid prefix.", buf, 2u);
    }

    v9 = os_log_shim_legacy_logging_enabled();
    if (v9)
    {
      v9 = _IDSShouldLogTransport();
      if (v9)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_synthesizeNAT64ForAddress: nat64 translation failed due to invalid prefix."));
        v9 = _IDSShouldLog();
        if (v9)
        {
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_synthesizeNAT64ForAddress: nat64 translation failed due to invalid prefix."));
LABEL_23:
          LOBYTE(v9) = 0;
        }
      }
    }
  }
  return v9;
}

- (id)_addSocketAndInterfaceAddress:(unint64_t)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  double v5;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  char v20;
  const char *v21;
  uint64_t v22;
  double v23;
  id v24;
  const char *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  void *v38;
  const char *v39;
  double v40;
  const char *v41;
  double v42;
  id v43;
  NSObject *v44;
  const char *v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  objc_msgSend__createInterfaceAddressArray_wantsWiFi_wantsCellular_(self, a2, a3, v5, a4, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v8, v9, v10, v11);

  if (v12)
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend_dataUsable(v16, v17, v18, v19);

    if ((v20 & 1) == 0)
      objc_msgSend__delayProcessingCellularInterfaces_(self, v21, (uint64_t)v12, v23);
    if (a3 == 1)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v24 = v12;
      v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v47, v26, v51, 16);
      if (v29)
      {
        v31 = *(_QWORD *)v48;
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v48 != v31)
              objc_enumerationMutation(v24);
            v33 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
            v34 = objc_msgSend_index(v33, v27, v28, v30);
            objc_msgSend_name(v33, v35, v36, v37);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v39, v34, v40, v38, 0);

          }
          v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v47, v30, v51, 16);
        }
        while (v29);
      }

    }
    if (objc_msgSend_count(v12, v21, v22, v23))
      objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v41, (uint64_t)v12, v42, 0);
    v43 = v12;
  }
  else
  {
    OSLogHandleForTransportCategory();
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v45 = "IPv6";
      if (!a3)
        v45 = "IPv4";
      *(_DWORD *)buf = 136315138;
      v53 = v45;
      _os_log_impl(&dword_19B949000, v44, OS_LOG_TYPE_DEFAULT, "failed to create interface address array for %s.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to create interface address array for %s."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to create interface address array for %s."));
      }
    }
  }

  return v12;
}

- (void)_parseClientUUID:(id)a3
{
  id v4;
  unsigned __int8 *clientUUID;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint8_t buf[4];
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  clientUUID = self->_clientUUID;
  uuid_clear(self->_clientUUID);
  if (v4)
  {
    objc_msgSend_UUIDString(v4, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      v11 = objc_retainAutorelease(v9);
      v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
      v16 = v15;
      if (v15 && !uuid_parse(v15, clientUUID))
      {
        OSLogHandleForTransportCategory();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v21 = v16;
          _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "Client UUID: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Client UUID: %s"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Client UUID: %s"));
          }
        }
      }
      else
      {
        OSLogHandleForTransportCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = "null";
          if (v16)
            v18 = v16;
          *(_DWORD *)buf = 136315138;
          v21 = v18;
          _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "Invalid client UUID: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Invalid client UUID: %s"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Invalid client UUID: %s"));
          }
        }
      }
    }

  }
}

+ (Class)getGLClassWithOptions:(id)a3
{
  const char *v3;
  uint64_t v4;
  const __CFDictionary *v5;
  double v6;
  void *Value;
  const char *v8;
  uint64_t v9;
  int v10;
  double v11;
  void *v12;
  int v13;
  NSObject *v14;
  uint8_t *v15;
  __CFString *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  uint8_t v21[16];
  __int16 v22;
  uint8_t v23[16];
  uint8_t buf[2];

  v5 = (const __CFDictionary *)a3;
  Value = 0;
  if (v5)
  {
    v3 = CFSTR("gl-option-client-type");
    if (CFSTR("gl-option-client-type"))
      Value = (void *)CFDictionaryGetValue(v5, CFSTR("gl-option-client-type"));
  }
  v10 = objc_msgSend_unsignedIntValue(Value, v3, v4, v6);
  v12 = 0;
  if (v5)
  {
    v8 = CFSTR("is-multiway-key");
    if (CFSTR("is-multiway-key"))
      v12 = (void *)CFDictionaryGetValue(v5, CFSTR("is-multiway-key"));
  }
  v13 = objc_msgSend_BOOLValue(v12, v8, v9, v11);
  if (v10 > 4)
  {
    if ((v10 - 5) >= 2 && v10 != 100)
      goto LABEL_32;
    goto LABEL_16;
  }
  if (v10 == 1)
  {
LABEL_16:
    if (!v13)
    {
      OSLogHandleForTransportCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "Selecting GlobalLink for FT", v23, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v16 = CFSTR("Selecting GlobalLink for FT");
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Selecting GlobalLink for FT"));
          if ((_IDSShouldLog() & 1) != 0)
            goto LABEL_37;
        }
      }
      goto LABEL_38;
    }
    OSLogHandleForTransportCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    *(_WORD *)buf = 0;
    v15 = buf;
    goto LABEL_19;
  }
  if (v10 != 2 || !v13)
  {
LABEL_32:
    OSLogHandleForTransportCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "Selecting GlobalLink for NonFT", v21, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v16 = CFSTR("Selecting GlobalLink for NonFT");
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Selecting GlobalLink for NonFT"));
        if ((_IDSShouldLog() & 1) != 0)
          goto LABEL_37;
      }
    }
    goto LABEL_38;
  }
  OSLogHandleForTransportCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 0;
    v15 = (uint8_t *)&v22;
LABEL_19:
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "Selecting GlobalLink for GFT", v15, 2u);
  }
LABEL_20:

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v16 = CFSTR("Selecting GlobalLink for GFT");
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Selecting GlobalLink for GFT"));
      if ((_IDSShouldLog() & 1) != 0)
LABEL_37:
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v16);
    }
  }
LABEL_38:
  objc_opt_class();
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return (Class)v19;
}

- (void)startWithOptions:(id)a3
{
  const __CFDictionary *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *Value;
  void **p_metricsCollector;
  NSObject *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  _BOOL4 v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  _BOOL4 v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  double v47;
  void *v48;
  const char *v49;
  double v50;
  void *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  double v55;
  NSObject *v56;
  void *v57;
  const __CFDictionary *v58;
  _BOOL4 v59;
  uint64_t v60;
  double v61;
  const char *v62;
  _BOOL4 v63;
  void *v64;
  uint64_t v65;
  double v66;
  const char *v67;
  _BOOL4 v68;
  void *v69;
  _BOOL4 v70;
  void *v71;
  NSObject *v72;
  const __CFString *v73;
  const __CFString *v74;
  NSData *avcDataBlob;
  const char *v76;
  uint64_t v77;
  double v78;
  __CFString *v79;
  __CFString *v80;
  const __CFString *v81;
  const __CFString *v82;
  void *v83;
  NSObject *v84;
  const char *v85;
  double v86;
  NSObject *v87;
  const __CFString *v88;
  __CFString *v89;
  const __CFString *v90;
  void *v91;
  const char *v92;
  double v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  double v97;
  const char *v98;
  double v99;
  NSObject *v100;
  void *v101;
  const char *v102;
  double v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  double v107;
  NSObject *v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  double v114;
  const char *v115;
  uint64_t v116;
  double v117;
  NSObject *v118;
  double delayQUICDisconnectionAfterInfo;
  int v120;
  const char *v121;
  uint64_t v122;
  double v123;
  void *v124;
  const char *v125;
  double v126;
  const char *v127;
  uint64_t v128;
  double v129;
  char v130;
  NSObject *v131;
  const char *v132;
  uint64_t v133;
  double v134;
  const __CFString *v135;
  int v136;
  const __CFString *v137;
  const __CFString *v138;
  _BOOL4 v139;
  void *v140;
  const char *v141;
  double v142;
  int v143;
  const char *v144;
  uint64_t v145;
  double v146;
  void *v147;
  const char *v148;
  double v149;
  const char *v150;
  uint64_t v151;
  double v152;
  char v153;
  void *v154;
  const char *v155;
  double v156;
  uint64_t v157;
  double v158;
  const char *v159;
  _BOOL4 v160;
  void *v161;
  uint64_t v162;
  NSObject *v163;
  const char *v164;
  uint64_t v165;
  double v166;
  NSObject *v167;
  const char *v168;
  uint64_t v169;
  int v170;
  double v171;
  void *v172;
  const char *v173;
  double v174;
  int v175;
  const char *v176;
  uint64_t v177;
  double v178;
  int v179;
  int v180;
  char v181;
  NSObject *v182;
  const char *v183;
  uint64_t v184;
  double v185;
  const __CFString *v186;
  const __CFString *v187;
  const __CFString *v188;
  const __CFString *v189;
  const __CFString *v190;
  const __CFString *v191;
  const __CFString *v192;
  uint64_t v193;
  double v194;
  const char *v195;
  _BOOL4 v196;
  void *v197;
  int v198;
  const char *v199;
  uint64_t v200;
  double v201;
  NSObject *v202;
  int v203;
  const char *v204;
  uint64_t v205;
  double v206;
  NSObject *v207;
  uint64_t v208;
  double v209;
  const char *v210;
  _BOOL4 v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  double v216;
  NSObject *v217;
  const char *v218;
  double v219;
  id v220;
  NSObject *v221;
  const char *v222;
  uint64_t v223;
  double v224;
  NSObject *v225;
  id v226;
  NSObject *v227;
  const char *v228;
  double v229;
  id v230;
  void *v231;
  const char *v232;
  double v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  double v237;
  int v238;
  NSObject *v239;
  const __CFString *v240;
  __CFString *v241;
  int v242;
  NSObject *v243;
  const __CFString *v244;
  const char *v245;
  uint64_t v246;
  double v247;
  __CFString *v248;
  void *v249;
  NSObject *v250;
  const __CFString *v251;
  __CFString *v252;
  const __CFString *v253;
  int v254;
  NSObject *v255;
  const __CFString *v256;
  __CFString *v257;
  int v258;
  NSObject *v259;
  const __CFString *v260;
  __CFString *v261;
  int v262;
  NSObject *v263;
  const __CFString *v264;
  __CFString *v265;
  int v266;
  NSObject *v267;
  const __CFString *v268;
  __CFString *v269;
  BOOL v270;
  int v271;
  int v272;
  NSObject *v273;
  const __CFString *v274;
  const char *v275;
  uint64_t v276;
  double v277;
  __CFString *v278;
  const __CFString *v279;
  NSObject *v280;
  NSObject *v281;
  OS_nw_path_evaluator *evaluator_for_endpoint;
  OS_nw_path_evaluator *wifiPathEvaluator;
  void *v284;
  NSObject *v285;
  OS_nw_path_evaluator *v286;
  OS_nw_path_evaluator *cellularPathEvaluator;
  void *v288;
  const char *v289;
  uint64_t v290;
  double v291;
  int v292;
  NSObject *v293;
  const char *v294;
  NSObject *v295;
  uint32_t v296;
  const char *v297;
  uint64_t v298;
  double v299;
  void *v300;
  uint64_t v301;
  double v302;
  const char *v303;
  _BOOL4 v304;
  void *v305;
  uint64_t v306;
  double v307;
  const char *v308;
  _BOOL4 v309;
  void *v310;
  uint64_t v311;
  double v312;
  const char *v313;
  _BOOL4 v314;
  void *v315;
  int v316;
  const char *v317;
  uint64_t v318;
  double v319;
  int v320;
  NSObject *v321;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  const char *v323;
  uint64_t v324;
  double v325;
  void *v326;
  const char *v327;
  double v328;
  IDSServerMaterialExchangeController *v329;
  void *v330;
  const char *v331;
  double v332;
  void *v333;
  void *v334;
  int64_t clientType;
  void *v336;
  __CFString *v337;
  __CFString *v338;
  uint64_t v339;
  __CFString *v340;
  __CFString *v341;
  NSData *v342;
  void *v343;
  const __CFString *v344;
  __CFString *v345;
  id v346;
  void *v347;
  void *v348;
  void *v349;
  int v350;
  int v351;
  void *v352;
  void *v353;
  const __CFDictionary *theDict;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[4];
  _BYTE v357[18];
  __int16 v358;
  const __CFString *v359;
  __int16 v360;
  const __CFString *v361;
  __int16 v362;
  const __CFString *v363;
  __int16 v364;
  const __CFString *v365;
  __int16 v366;
  const __CFString *v367;
  uint64_t v368;

  v368 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFDictionary *)a3;
  v5 = objc_opt_class();
  theDict = v4;
  if (v5 == objc_opt_class())
  {
    objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v6, v7, v8);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_processName(v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    IMLogSimulateCrashForProcess();

    goto LABEL_431;
  }
  Value = 0;
  if (v4 && CFSTR("gl-option-metrics-collector-key"))
    Value = (void *)CFDictionaryGetValue(v4, CFSTR("gl-option-metrics-collector-key"));
  p_metricsCollector = (void **)&self->_metricsCollector;
  objc_storeStrong((id *)&self->_metricsCollector, Value);
  OSLogHandleForTransportCategory();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *p_metricsCollector;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v12;
    _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "startWithOptions: MetricsCollector: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v336 = *p_metricsCollector;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("startWithOptions: MetricsCollector: %@"));
      if (_IDSShouldLog())
      {
        v336 = *p_metricsCollector;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("startWithOptions: MetricsCollector: %@"));
      }
    }
  }
  v16 = v4 != 0;
  objc_msgSend_globalLinkStart(*p_metricsCollector, v13, v14, v15, v336);
  if (CFSTR("gl-option-p2p-negotiator-key"))
    v17 = v16;
  else
    v17 = 0;
  if (v17)
    v18 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-p2p-negotiator-key"));
  else
    v18 = 0;
  objc_storeStrong((id *)&self->_p2pNegotiatorProvider, v18);
  v26 = CFSTR("gl-option-disallow-wifi");
  if (CFSTR("gl-option-disallow-wifi"))
    v27 = theDict != 0;
  else
    v27 = 0;
  if (v27)
    v28 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-disallow-wifi"));
  else
    v28 = 0;
  v351 = objc_msgSend_BOOLValue(v28, v26, v24, v25);
  self->_disallowWiFi = v351;
  if (v351)
  {
    OSLogHandleForTransportCategory();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "client disallows WiFi.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("client disallows WiFi."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("client disallows WiFi."));
      }
    }
  }
  v33 = 0;
  if (theDict)
  {
    v29 = CFSTR("gl-option-disallow-cellular");
    if (CFSTR("gl-option-disallow-cellular"))
      v33 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-disallow-cellular"));
  }
  v350 = objc_msgSend_BOOLValue(v33, v29, v30, v31);
  self->_disallowCellular = v350;
  if (v350)
  {
    OSLogHandleForTransportCategory();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v37, OS_LOG_TYPE_DEFAULT, "client disallows Cellular.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("client disallows Cellular."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("client disallows Cellular."));
      }
    }
  }
  else
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v34, v35, v36);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_reset(v41, v42, v43, v44);

    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setRemoteDeviceVersion_(v48, v49, self->_remoteDeviceVersion, v50);

  }
  v51 = 0;
  if (theDict)
  {
    v38 = CFSTR("gl-option-prefer-cellular-for-call-setup");
    if (CFSTR("gl-option-prefer-cellular-for-call-setup"))
      v51 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-prefer-cellular-for-call-setup"));
  }
  v52 = objc_msgSend_BOOLValue(v51, v38, v39, v40);
  self->_preferCellularForCallSetup = v52;
  if (v52)
  {
    OSLogHandleForTransportCategory();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v56, OS_LOG_TYPE_DEFAULT, "client prefers using cellular for call setup.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("client prefers using cellular for call setup."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("client prefers using cellular for call setup."));
      }
    }
  }
  v57 = 0;
  v58 = theDict;
  if (theDict)
  {
    v53 = CFSTR("gl-option-client-type");
    if (CFSTR("gl-option-client-type"))
    {
      v57 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-client-type"));
      v58 = theDict;
    }
  }
  v59 = v58 != 0;
  self->_clientType = objc_msgSend_unsignedIntValue(v57, v53, v54, v55);
  v62 = CFSTR("gl-option-is-gft-service");
  if (CFSTR("gl-option-is-gft-service"))
    v63 = v59;
  else
    v63 = 0;
  if (v63)
    v64 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-is-gft-service"));
  else
    v64 = 0;
  self->_isAutoDisconnectSupportedForGFTService = objc_msgSend_BOOLValue(v64, v62, v60, v61);
  v67 = CFSTR("gs-is-lightweight-participant-key");
  if (CFSTR("gs-is-lightweight-participant-key"))
    v68 = theDict != 0;
  else
    v68 = 0;
  if (v68)
    v69 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-is-lightweight-participant-key"));
  else
    v69 = 0;
  self->_isLightweightParticipant = objc_msgSend_BOOLValue(v69, v67, v65, v66);
  if (CFSTR("participant-data-key"))
    v70 = theDict != 0;
  else
    v70 = 0;
  if (v70)
    v71 = (void *)CFDictionaryGetValue(theDict, CFSTR("participant-data-key"));
  else
    v71 = 0;
  objc_storeStrong((id *)&self->_avcDataBlob, v71);
  OSLogHandleForTransportCategory();
  v72 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    v73 = CFSTR("YES");
    if (self->_isLightweightParticipant)
      v74 = CFSTR("YES");
    else
      v74 = CFSTR("NO");
    avcDataBlob = self->_avcDataBlob;
    if (!self->_isAutoDisconnectSupportedForGFTService)
      v73 = CFSTR("NO");
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)v357 = v74;
    *(_WORD *)&v357[8] = 2112;
    *(_QWORD *)&v357[10] = avcDataBlob;
    v358 = 2112;
    v359 = v73;
    _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "_isLightweightParticipant: %@, avcDataBlob: %@, _isAutoDisconnectSupportedForGFTService: %@", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v79 = self->_isLightweightParticipant ? CFSTR("YES") : CFSTR("NO");
    v80 = self->_isAutoDisconnectSupportedForGFTService ? CFSTR("YES") : CFSTR("NO");
    v342 = self->_avcDataBlob;
    v345 = v80;
    v337 = v79;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_isLightweightParticipant: %@, avcDataBlob: %@, _isAutoDisconnectSupportedForGFTService: %@"));
    if (_IDSShouldLog())
    {
      if (self->_isLightweightParticipant)
        v81 = CFSTR("YES");
      else
        v81 = CFSTR("NO");
      if (self->_isAutoDisconnectSupportedForGFTService)
        v82 = CFSTR("YES");
      else
        v82 = CFSTR("NO");
      v342 = self->_avcDataBlob;
      v345 = (__CFString *)v82;
      v337 = (__CFString *)v81;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_isLightweightParticipant: %@, avcDataBlob: %@, _isAutoDisconnectSupportedForGFTService: %@"));
    }
  }
  v83 = 0;
  if (theDict)
  {
    v76 = CFSTR("gl-option-enable-ske");
    if (CFSTR("gl-option-enable-ske"))
      v83 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-enable-ske"));
  }
  if (objc_msgSend_BOOLValue(v83, v76, v77, v78, v337, v342, v345))
  {
    self->_enableSKE = 1;
    OSLogHandleForTransportCategory();
    v84 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "Enable SKE for FaceTime call.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Enable SKE for FaceTime call."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Enable SKE for FaceTime call."));
      }
    }
  }
  else
  {
    self->_enableSKE = IMGetDomainBoolForKey();
    OSLogHandleForTransportCategory();
    v87 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_enableSKE)
        v88 = CFSTR("YES");
      else
        v88 = CFSTR("NO");
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v357 = v88;
      _os_log_impl(&dword_19B949000, v87, OS_LOG_TYPE_DEFAULT, "Found EnableSKE user defaults, enable SKE for FaceTime: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v89 = self->_enableSKE ? CFSTR("YES") : CFSTR("NO");
      v338 = v89;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Found EnableSKE user defaults, enable SKE for FaceTime: %@."));
      if (_IDSShouldLog())
      {
        if (self->_enableSKE)
          v90 = CFSTR("YES");
        else
          v90 = CFSTR("NO");
        v338 = (__CFString *)v90;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Found EnableSKE user defaults, enable SKE for FaceTime: %@."));
      }
    }
  }
  objc_msgSend_sharedInstanceForBagType_(IDSServerBag, v85, 0, v86, v338);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v91, v92, (uint64_t)CFSTR("reduce-cellular-usage"), v93);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  self->_reduceCellularUsage = objc_msgSend_BOOLValue(v94, v95, v96, v97);

  if (self->_reduceCellularUsage)
  {
    OSLogHandleForTransportCategory();
    v100 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v100, OS_LOG_TYPE_DEFAULT, "Default set to reduce cellular data usage", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Default set to reduce cellular data usage"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Default set to reduce cellular data usage"));
      }
    }
  }
  objc_msgSend_sharedInstanceForBagType_(IDSServerBag, v98, 0, v99);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v101, v102, (uint64_t)CFSTR("reduce-relay-link-creation"), v103);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  self->_reduceRelayLinkCreation = objc_msgSend_BOOLValue(v104, v105, v106, v107);

  if (self->_reduceRelayLinkCreation)
  {
    OSLogHandleForTransportCategory();
    v108 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v108, OS_LOG_TYPE_DEFAULT, "Default set to reduce relay link creation to 2.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Default set to reduce relay link creation to 2."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Default set to reduce relay link creation to 2."));
      }
    }
  }
  v109 = IMGetCachedDomainIntForKeyWithDefaultValue();
  self->_delayQUICDisconnectionAfterInfo = (double)v109;
  objc_msgSend_sharedInstance(IDSServerBag, v110, v111, (double)v109);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v112, v113, (uint64_t)CFSTR("ids-quic-disconnection-delay-after-info-2"), v114);
  v353 = (void *)objc_claimAutoreleasedReturnValue();

  if (v353)
  {
    objc_msgSend_doubleValue(v353, v115, v116, v117);
    self->_delayQUICDisconnectionAfterInfo = v117;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v115, v116, v117);
  v118 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
  {
    delayQUICDisconnectionAfterInfo = self->_delayQUICDisconnectionAfterInfo;
    *(_DWORD *)buf = 134218242;
    *(double *)v357 = delayQUICDisconnectionAfterInfo;
    *(_WORD *)&v357[8] = 2112;
    *(_QWORD *)&v357[10] = v353;
    _os_log_impl(&dword_19B949000, v118, OS_LOG_TYPE_DEFAULT, "QUIC disconnection delay after info request is set to %.1lf (from serverBag: %@)", buf, 0x16u);
  }

  v120 = IMGetDomainBoolForKeyWithDefaultValue();
  objc_msgSend_sharedInstance(IDSServerBag, v121, v122, v123);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v124, v125, (uint64_t)CFSTR("ids-rtencryption-mkm-over-qr-enabled-v2"), v126);
  v349 = (void *)objc_claimAutoreleasedReturnValue();

  if (v349)
    v130 = objc_msgSend_BOOLValue(v349, v127, v128, v129);
  else
    v130 = v120;
  self->_shouldAcceptIncomingMKMOverQR = v130;
  objc_msgSend_GlobalLink(IDSFoundationLog, v127, v128, v129);
  v131 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_shouldAcceptIncomingMKMOverQR)
      v135 = CFSTR("enabled");
    else
      v135 = CFSTR("disabled");
    v136 = objc_msgSend_BOOLValue(v349, v132, v133, v134);
    v137 = CFSTR("NO");
    if (v136)
      v138 = CFSTR("YES");
    else
      v138 = CFSTR("NO");
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)v357 = v135;
    *(_WORD *)&v357[8] = 2112;
    *(_QWORD *)&v357[10] = v138;
    if (v120)
      v137 = CFSTR("YES");
    v358 = 2112;
    v359 = v137;
    _os_log_impl(&dword_19B949000, v131, OS_LOG_TYPE_DEFAULT, "Accepting MKM over QR %@ - serverBag: %@, defaults: %@", buf, 0x20u);
  }

  self->_islocalCellAttributeInexpensive = IMGetDomainBoolForKey();
  if (CFSTR("client-uuid"))
    v139 = theDict != 0;
  else
    v139 = 0;
  if (v139)
    v140 = (void *)CFDictionaryGetValue(theDict, CFSTR("client-uuid"));
  else
    v140 = 0;
  v346 = v140;
  objc_msgSend__parseClientUUID_(self, v141, (uint64_t)v346, v142);
  self->_QRIPv6Enabled = 1;
  v143 = _os_feature_enabled_impl();
  objc_msgSend_sharedInstance(IDSServerBag, v144, v145, v146);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v147, v148, (uint64_t)CFSTR("ids-quic-for-qr-enabled"), v149);
  v348 = (void *)objc_claimAutoreleasedReturnValue();

  if (v143)
  {
    if (v348)
      v153 = objc_msgSend_BOOLValue(v348, v150, v151, v152);
    else
      v153 = 1;
  }
  else
  {
    v153 = 0;
  }
  self->_QUICForQREnabled = v153;
  objc_msgSend_sharedInstance(IDSServerBag, v150, v151, v152);
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v154, v155, (uint64_t)CFSTR("ids-quic-for-qr-enabled-for-twoway"), v156);
  v352 = (void *)objc_claimAutoreleasedReturnValue();

  v159 = CFSTR("qat");
  if (CFSTR("qat"))
    v160 = theDict != 0;
  else
    v160 = 0;
  if (v160)
    v161 = (void *)CFDictionaryGetValue(theDict, CFSTR("qat"));
  else
    v161 = 0;
  v162 = objc_msgSend_intValue(v161, v159, v157, v158);
  OSLogHandleForTransportCategory();
  v163 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v357 = v162;
    *(_WORD *)&v357[4] = 2112;
    *(_QWORD *)&v357[6] = v352;
    _os_log_impl(&dword_19B949000, v163, OS_LOG_TYPE_DEFAULT, "QR relay allocation type = %d, server bag \"ids-quic-for-qr-enabled-for-twoway\" = %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v339 = v162;
      v343 = v352;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("QR relay allocation type = %d, server bag \"ids-quic-for-qr-enabled-for-twoway\" = %@"));
      if (_IDSShouldLog())
      {
        v339 = v162;
        v343 = v352;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("QR relay allocation type = %d, server bag \"ids-quic-for-qr-enabled-for-twoway\" = %@"));
      }
    }
  }
  if ((_DWORD)v162 == 1 && v352 && (objc_msgSend_BOOLValue(v352, v164, v165, v166) & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v167 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v167, OS_LOG_TYPE_DEFAULT, "Server bag \"ids-quic-for-qr-enabled-for-idssession\" is NO and this is a TwoWay allocation. Fallback to STUN", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Server bag \"ids-quic-for-qr-enabled-for-idssession\" is NO and this is a TwoWay allocation. Fallback to STUN"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Server bag \"ids-quic-for-qr-enabled-for-idssession\" is NO and this is a TwoWay allocation. Fallback to STUN"));
      }
    }
    self->_QUICForQREnabled = 0;
  }
  v170 = IMGetDomainBoolForKey();
  if (v170)
    self->_QUICForQREnabled = 1;
  objc_msgSend_sharedInstance(IDSServerBag, v168, v169, v171, v339, v343);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v172, v173, (uint64_t)CFSTR("ids-h2-fallback-enabled"), v174);
  v347 = (void *)objc_claimAutoreleasedReturnValue();

  v175 = _os_feature_enabled_impl();
  v179 = v175;
  if (self->_QUICForQREnabled)
    v180 = v175;
  else
    v180 = 0;
  if (v180 == 1)
  {
    if (v347)
      v181 = objc_msgSend_BOOLValue(v347, v176, v177, v178);
    else
      v181 = 1;
  }
  else
  {
    v181 = 0;
  }
  self->_H2FallbackEnabled = v181;
  objc_msgSend_GlobalLink(IDSFoundationLog, v176, v177, v178);
  v182 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_QUICForQREnabled)
      v186 = CFSTR("enabled");
    else
      v186 = CFSTR("disabled");
    if (v348)
    {
      if (objc_msgSend_BOOLValue(v348, v183, v184, v185))
        v187 = CFSTR("YES");
      else
        v187 = CFSTR("NO");
    }
    else
    {
      v187 = CFSTR("missing");
    }
    if (v143)
      v188 = CFSTR("YES");
    else
      v188 = CFSTR("NO");
    if (v170)
      v189 = CFSTR("YES");
    else
      v189 = CFSTR("NO");
    if (self->_H2FallbackEnabled)
      v190 = CFSTR("YES");
    else
      v190 = CFSTR("NO");
    if (v179)
      v191 = CFSTR("YES");
    else
      v191 = CFSTR("NO");
    if (v347)
    {
      if (objc_msgSend_BOOLValue(v347, v183, v184, v185))
        v192 = CFSTR("YES");
      else
        v192 = CFSTR("NO");
    }
    else
    {
      v192 = CFSTR("missing");
    }
    *(_DWORD *)buf = 138413826;
    *(_QWORD *)v357 = v186;
    *(_WORD *)&v357[8] = 2112;
    *(_QWORD *)&v357[10] = v187;
    v358 = 2112;
    v359 = v188;
    v360 = 2112;
    v361 = v189;
    v362 = 2112;
    v363 = v190;
    v364 = 2112;
    v365 = v191;
    v366 = 2112;
    v367 = v192;
    _os_log_impl(&dword_19B949000, v182, OS_LOG_TYPE_DEFAULT, "QUIC for QR %@ - serverBag: %@, feature-flag: %@, forceEnableQUICForQR: %@, _H2FallbackEnabled: %@, H2 feature-flag: %@, H2 server bag: %@", buf, 0x48u);
  }

  v195 = CFSTR("gl-option-preferred-address-family");
  if (CFSTR("gl-option-preferred-address-family"))
    v196 = theDict != 0;
  else
    v196 = 0;
  if (v196)
    v197 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-preferred-address-family"));
  else
    v197 = 0;
  v198 = objc_msgSend_unsignedIntValue(v197, v195, v193, v194);
  objc_msgSend_GlobalLink(IDSFoundationLog, v199, v200, v201);
  v202 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v357 = v198;
    _os_log_impl(&dword_19B949000, v202, OS_LOG_TYPE_DEFAULT, "QR preferredAddressFamily from server: %d", buf, 8u);
  }

  v203 = IMGetCachedDomainIntForKeyWithDefaultValue();
  objc_msgSend_GlobalLink(IDSFoundationLog, v204, v205, v206);
  v207 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v357 = v203;
    _os_log_impl(&dword_19B949000, v207, OS_LOG_TYPE_DEFAULT, "QR preferredAddressFamily after reading from defaults: %d", buf, 8u);
  }

  v210 = CFSTR("gl-option-force-ipv6");
  if (CFSTR("gl-option-force-ipv6"))
    v211 = theDict != 0;
  else
    v211 = 0;
  if (v211)
    v212 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-force-ipv6"));
  else
    v212 = 0;
  v213 = v351 ^ 1u;
  v214 = v350 ^ 1u;
  self->_forceIPv6 = objc_msgSend_BOOLValue(v212, v210, v208, v209);
  if (self->_QUICForQREnabled)
  {
    if (v203 == 1)
    {
      OSLogHandleForTransportCategory();
      v217 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v217, OS_LOG_TYPE_DEFAULT, "client prefers IPv4, disable IPv6.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("client prefers IPv4, disable IPv6."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("client prefers IPv4, disable IPv6."));
        }
      }
      self->_QRIPv6Enabled = 0;
    }
    else
    {
      OSLogHandleForTransportCategory();
      v225 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v225, OS_LOG_TYPE_DEFAULT, "Add IPv6 address to the interface", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Add IPv6 address to the interface"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Add IPv6 address to the interface"));
        }
      }
    }
    v226 = (id)objc_msgSend__addSocketAndInterfaceAddressWithNWLink_wantsWiFi_wantsCellular_(self, v218, self->_QRIPv6Enabled, v219, v213, v214);
  }
  else
  {
    v220 = (id)objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v215, 0, v216, v213, v214);
    if (v203 == 1)
    {
      OSLogHandleForTransportCategory();
      v221 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v221, OS_LOG_TYPE_DEFAULT, "client prefers IPv4, disable IPv6.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("client prefers IPv4, disable IPv6."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("client prefers IPv4, disable IPv6."));
        }
      }
      self->_QRIPv6Enabled = 0;
    }
    else
    {
      OSLogHandleForTransportCategory();
      v227 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v227, OS_LOG_TYPE_DEFAULT, "Add IPv6 address to the interface", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Add IPv6 address to the interface"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Add IPv6 address to the interface"));
        }
      }
      v230 = (id)objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v228, 1, v229, v213, v214);
    }
  }
  objc_msgSend_sharedInstance(IDSServerBag, v222, v223, v224);
  v231 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v231, v232, (uint64_t)CFSTR("allow-quic-0rtt"), v233);
  v234 = (void *)objc_claimAutoreleasedReturnValue();

  if (v234)
  {
    v238 = objc_msgSend_BOOLValue(v234, v235, v236, v237);
    OSLogHandleForTransportCategory();
    v239 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
    {
      v240 = CFSTR("NO");
      if (v238)
        v240 = CFSTR("YES");
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v357 = v240;
      _os_log_impl(&dword_19B949000, v239, OS_LOG_TYPE_DEFAULT, "shouldEnable0RTT: got server bag value: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v241 = v238 ? CFSTR("YES") : CFSTR("NO");
      v340 = v241;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("shouldEnable0RTT: got server bag value: %@"));
      if (_IDSShouldLog())
      {
        v340 = v241;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("shouldEnable0RTT: got server bag value: %@"));
      }
    }
  }
  v242 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_shouldEnable0RTT = v242;
  OSLogHandleForTransportCategory();
  v243 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
  {
    v244 = CFSTR("NO");
    if (v242)
      v244 = CFSTR("YES");
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v357 = v244;
    *(_WORD *)&v357[8] = 2112;
    *(_QWORD *)&v357[10] = CFSTR("YES");
    _os_log_impl(&dword_19B949000, v243, OS_LOG_TYPE_DEFAULT, "_shouldEnable0RTT: %@ (Default: %@)", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v248 = v242 ? CFSTR("YES") : CFSTR("NO");
    v340 = v248;
    v344 = CFSTR("YES");
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_shouldEnable0RTT: %@ (Default: %@)"));
    if (_IDSShouldLog())
    {
      v340 = v248;
      v344 = CFSTR("YES");
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_shouldEnable0RTT: %@ (Default: %@)"));
    }
  }
  v249 = 0;
  if (theDict)
  {
    v245 = CFSTR("gs-tle-enabled-key");
    if (CFSTR("gs-tle-enabled-key"))
      v249 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-tle-enabled-key"));
  }
  self->_isTLEEnabled = objc_msgSend_BOOLValue(v249, v245, v246, v247, v340, v344);
  OSLogHandleForTransportCategory();
  v250 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isTLEEnabled)
      v251 = CFSTR("YES");
    else
      v251 = CFSTR("NO");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v251;
    _os_log_impl(&dword_19B949000, v250, OS_LOG_TYPE_DEFAULT, "_isTLEEnabled: %@ based on TU passed feature flag", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v252 = self->_isTLEEnabled ? CFSTR("YES") : CFSTR("NO");
    v341 = v252;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_isTLEEnabled: %@ based on TU passed feature flag"));
    if (_IDSShouldLog())
    {
      if (self->_isTLEEnabled)
        v253 = CFSTR("YES");
      else
        v253 = CFSTR("NO");
      v341 = (__CFString *)v253;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_isTLEEnabled: %@ based on TU passed feature flag"));
    }
  }
  v254 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_forceTLE = v254;
  OSLogHandleForTransportCategory();
  v255 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
  {
    v256 = CFSTR("NO");
    if (v254)
      v256 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v256;
    _os_log_impl(&dword_19B949000, v255, OS_LOG_TYPE_DEFAULT, "forceTLE: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v257 = v254 ? CFSTR("YES") : CFSTR("NO");
    v341 = v257;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("forceTLE: %@ based on defaults"));
    if (_IDSShouldLog())
    {
      v341 = v257;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("forceTLE: %@ based on defaults"));
    }
  }
  v258 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_forceP2PTLE = v258;
  OSLogHandleForTransportCategory();
  v259 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
  {
    v260 = CFSTR("NO");
    if (v258)
      v260 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v260;
    _os_log_impl(&dword_19B949000, v259, OS_LOG_TYPE_DEFAULT, "forceP2PTLE: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v261 = v258 ? CFSTR("YES") : CFSTR("NO");
    v341 = v261;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("forceP2PTLE: %@ based on defaults"));
    if (_IDSShouldLog())
    {
      v341 = v261;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("forceP2PTLE: %@ based on defaults"));
    }
  }
  v262 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_allowTLEOverCellular = v262;
  OSLogHandleForTransportCategory();
  v263 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
  {
    v264 = CFSTR("NO");
    if (v262)
      v264 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v264;
    _os_log_impl(&dword_19B949000, v263, OS_LOG_TYPE_DEFAULT, "allowTLEOverCellular: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v265 = v262 ? CFSTR("YES") : CFSTR("NO");
    v341 = v265;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("allowTLEOverCellular: %@ based on defaults"));
    if (_IDSShouldLog())
    {
      v341 = v265;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("allowTLEOverCellular: %@ based on defaults"));
    }
  }
  v266 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_allowTLEOverVRLinks = v266;
  OSLogHandleForTransportCategory();
  v267 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
  {
    v268 = CFSTR("NO");
    if (v266)
      v268 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v268;
    _os_log_impl(&dword_19B949000, v267, OS_LOG_TYPE_DEFAULT, "allowTLEOverVRLinks: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v269 = v266 ? CFSTR("YES") : CFSTR("NO");
    v341 = v269;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("allowTLEOverVRLinks: %@ based on defaults"));
    if (_IDSShouldLog())
    {
      v341 = v269;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("allowTLEOverVRLinks: %@ based on defaults"));
    }
  }
  keyExistsAndHasValidFormat = 0;
  v270 = CFPreferencesGetAppBooleanValue(CFSTR("serverTestOptionTLEDisabled"), CFSTR("com.apple.ids"), &keyExistsAndHasValidFormat) != 0;
  v271 = keyExistsAndHasValidFormat;
  if (keyExistsAndHasValidFormat)
    v272 = 0;
  else
    v272 = v254;
  if (v272 == 1)
  {
    v270 = 0;
    v271 = 1;
    keyExistsAndHasValidFormat = 1;
  }
  self->_shouldOverrideServerTestOptionTLEDisabled = v271 != 0;
  self->_serverTestOptionTLEDisabled = v270;
  self->_disableDirectDatapath = IMGetDomainBoolForKeyWithDefaultValue();
  OSLogHandleForTransportCategory();
  v273 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_disableDirectDatapath)
      v274 = CFSTR("YES");
    else
      v274 = CFSTR("NO");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v357 = v274;
    _os_log_impl(&dword_19B949000, v273, OS_LOG_TYPE_DEFAULT, "direct datapath: _disableDirectDatapath: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v278 = self->_disableDirectDatapath ? CFSTR("YES") : CFSTR("NO");
    v341 = v278;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("direct datapath: _disableDirectDatapath: %@ based on defaults"));
    if (_IDSShouldLog())
    {
      if (self->_disableDirectDatapath)
        v279 = CFSTR("YES");
      else
        v279 = CFSTR("NO");
      v341 = (__CFString *)v279;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("direct datapath: _disableDirectDatapath: %@ based on defaults"));
    }
  }
  if ((objc_msgSend_isSkywalkDemuxSupported(IDSNWLink, v275, v276, v277, v341) & 1) == 0)
  {
    self->_disableDirectDatapath = 1;
    OSLogHandleForTransportCategory();
    v280 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v280, OS_LOG_TYPE_DEFAULT, "direct datapath: NO because Skywalk Demux is not supported", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("direct datapath: NO because Skywalk Demux is not supported"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("direct datapath: NO because Skywalk Demux is not supported"));
      }
    }
  }
  if ((v351 & 1) == 0)
  {
    self->_wifiNWPathFlags = -1;
    v281 = nw_parameters_create();
    nw_parameters_set_required_interface_type(v281, nw_interface_type_wifi);
    evaluator_for_endpoint = (OS_nw_path_evaluator *)nw_path_create_evaluator_for_endpoint();
    wifiPathEvaluator = self->_wifiPathEvaluator;
    self->_wifiPathEvaluator = evaluator_for_endpoint;

    im_primary_queue();
    v284 = (void *)objc_claimAutoreleasedReturnValue();
    nw_path_evaluator_set_update_handler();

  }
  if ((v350 & 1) == 0)
  {
    self->_cellularNWPathFlags = -1;
    v285 = nw_parameters_create();
    nw_parameters_set_required_interface_type(v285, nw_interface_type_cellular);
    v286 = (OS_nw_path_evaluator *)nw_path_create_evaluator_for_endpoint();
    cellularPathEvaluator = self->_cellularPathEvaluator;
    self->_cellularPathEvaluator = v286;

    im_primary_queue();
    v288 = (void *)objc_claimAutoreleasedReturnValue();
    nw_path_evaluator_set_update_handler();

  }
  self->_allowOnlyOneQR = 0;
  if (IMGetDomainBoolForKey())
  {
    self->_allowP2P = 0;
LABEL_388:
    objc_msgSend_GlobalLink(IDSFoundationLog, v289, v290, v291);
    v293 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT))
    {
LABEL_392:

      goto LABEL_393;
    }
    *(_WORD *)buf = 0;
    v294 = "forceQuickRelay or disableP2PLinks default is set to YES.";
    goto LABEL_390;
  }
  v292 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_allowP2P = v292 ^ 1;
  if (((v292 ^ 1) & 1) == 0)
    goto LABEL_388;
  v334 = 0;
  if (theDict)
  {
    v289 = CFSTR("gl-option-forcerelay");
    if (CFSTR("gl-option-forcerelay"))
      v334 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-forcerelay"));
  }
  if (objc_msgSend_BOOLValue(v334, v289, v290, v291))
  {
    *(_WORD *)&self->_allowOnlyOneQR = 1;
    objc_msgSend_GlobalLink(IDSFoundationLog, v297, v298, v299);
    v293 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT))
      goto LABEL_392;
    *(_WORD *)buf = 0;
    v294 = "forceRelay option is set to YES.";
LABEL_390:
    v295 = v293;
    v296 = 2;
LABEL_391:
    _os_log_impl(&dword_19B949000, v295, OS_LOG_TYPE_DEFAULT, v294, buf, v296);
    goto LABEL_392;
  }
  if (!self->_clientType)
  {
    *(_WORD *)&self->_allowOnlyOneQR = 1;
    objc_msgSend_GlobalLink(IDSFoundationLog, v297, v298, v299);
    v293 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT))
      goto LABEL_392;
    clientType = self->_clientType;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v357 = clientType;
    v294 = "use forceQuickRelay for client: %d.";
    v295 = v293;
    v296 = 8;
    goto LABEL_391;
  }
LABEL_393:
  v300 = 0;
  if (theDict)
  {
    v297 = CFSTR("gs-force-tcp-fallback-on-wifi-key");
    if (CFSTR("gs-force-tcp-fallback-on-wifi-key"))
      v300 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-force-tcp-fallback-on-wifi-key"));
  }
  self->_forceTCPFallbackOnWiFi = objc_msgSend_BOOLValue(v300, v297, v298, v299);
  v303 = CFSTR("gs-force-tcp-fallback-on-cell-key");
  if (CFSTR("gs-force-tcp-fallback-on-cell-key"))
    v304 = theDict != 0;
  else
    v304 = 0;
  if (v304)
    v305 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-force-tcp-fallback-on-cell-key"));
  else
    v305 = 0;
  self->_forceTCPFallbackOnCell = objc_msgSend_BOOLValue(v305, v303, v301, v302);
  v308 = CFSTR("gs-shortmki-enabled-key");
  if (CFSTR("gs-shortmki-enabled-key"))
    v309 = theDict != 0;
  else
    v309 = 0;
  if (v309)
    v310 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-shortmki-enabled-key"));
  else
    v310 = 0;
  self->_isShortMKIEnabled = objc_msgSend_BOOLValue(v310, v308, v306, v307);
  v313 = CFSTR("gs-gecko-enabled-key");
  if (CFSTR("gs-gecko-enabled-key"))
    v314 = theDict != 0;
  else
    v314 = 0;
  if (v314)
    v315 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-gecko-enabled-key"));
  else
    v315 = 0;
  v316 = objc_msgSend_BOOLValue(v315, v313, v311, v312);
  self->_isGeckoEnabled = v316;
  if (self->_serverMaterialExchangeController)
    v320 = v316;
  else
    v320 = 0;
  if (v320 == 1)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v317, v318, v319);
    v321 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v321, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v321, OS_LOG_TYPE_DEFAULT, "startWithOptions: invalidate and dealloc SME because Gecko is enabled", buf, 2u);
    }

    serverMaterialExchangeController = self->_serverMaterialExchangeController;
    objc_msgSend_currentlySentMaterials(serverMaterialExchangeController, v323, v324, v325);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v327, (uint64_t)v326, v328);

    v329 = self->_serverMaterialExchangeController;
    self->_serverMaterialExchangeController = 0;

  }
  v330 = 0;
  if (theDict)
  {
    v317 = CFSTR("gs-started-as-u-plus-one-key");
    if (CFSTR("gs-started-as-u-plus-one-key"))
      v330 = (void *)CFDictionaryGetValue(theDict, CFSTR("gs-started-as-u-plus-one-key"));
  }
  if (objc_msgSend_BOOLValue(v330, v317, v318, v319))
  {
    objc_msgSend_setIsUPlusOneSession_(self, v331, 1, v332);
    self->_shouldReportAcceptDelay = 1;
  }
  else
  {
    objc_msgSend_setIsUPlusOneSession_(self, v331, 0, v332);
  }
  v333 = 0;
  if (theDict && CFSTR("gl-option-qra-blocks"))
    v333 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-qra-blocks"));
  objc_storeStrong((id *)&self->_qraBlocks, v333);
  self->_calleeAcceptTime = ids_monotonic_time();
  self->_delayFirstConnectionData = IMGetDomainIntForKey();

LABEL_431:
}

- (BOOL)_isNWPathFlagsChanged:(id)a3 existingPath:(unsigned __int16 *)a4
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  _BOOL4 is_constrained;
  const char *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  _BOOL4 v15;
  int v16;
  NSObject *v17;
  _BOOL4 is_expensive;
  const char *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  _BOOL4 v23;
  const char *v24;
  uint64_t v25;
  double v26;
  BOOL v27;
  NSObject *v28;
  int v29;
  _DWORD v31[2];
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v9 = v5;
  if (!v5)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "invalid path, return", (uint8_t *)v31, 2u);
    }

    goto LABEL_20;
  }
  is_constrained = nw_path_is_constrained(v5);
  objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (is_constrained)
  {
    if (v15)
    {
      LOWORD(v31[0]) = 0;
      v16 = 2;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Constrained", (uint8_t *)v31, 2u);
    }
    else
    {
      v16 = 2;
    }
  }
  else
  {
    if (v15)
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Not constrained", (uint8_t *)v31, 2u);
    }
    v16 = 0;
  }

  is_expensive = nw_path_is_expensive(v9);
  objc_msgSend_GlobalLink(IDSFoundationLog, v19, v20, v21);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if (is_expensive)
  {
    if (v23)
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Expensive", (uint8_t *)v31, 2u);
    }

    v16 |= 1u;
  }
  else
  {
    if (v23)
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Inexpensive", (uint8_t *)v31, 2u);
    }

  }
  if (*a4 == v16)
  {
LABEL_20:
    v27 = 0;
    goto LABEL_24;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *a4;
    v31[0] = 67109376;
    v31[1] = v29;
    v32 = 1024;
    v33 = v16;
    _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: existingPath: %u changed to curNWPathFlags: %u", (uint8_t *)v31, 0xEu);
  }

  *a4 = v16;
  v27 = 1;
LABEL_24:

  return v27;
}

- (void)_handle_wifi_path:(id)a3 nwEndPoind:(id)a4
{
  double v4;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  int wifiNWPathFlags;
  id WeakRetained;
  char v12;
  NSObject *v13;
  const char *v14;
  double v15;
  NSString *idsSessionID;
  char *v17;
  int v18;
  NSString *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (self->_state != 4)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, v4, a4);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      v17 = _IDSLinkStateStrings[self->_state];
      v18 = 138412546;
      v19 = idsSessionID;
      v20 = 2080;
      v21 = v17;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "_handle_wifi_path: Session with IDSSessionID: %@ is not connected, state [%s].", (uint8_t *)&v18, 0x16u);
    }
    goto LABEL_9;
  }
  if (objc_msgSend__isNWPathFlagsChanged_existingPath_(self, a2, (uint64_t)a3, v4, &self->_wifiNWPathFlags))
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      wifiNWPathFlags = self->_wifiNWPathFlags;
      v18 = 67109120;
      LODWORD(v19) = wifiNWPathFlags;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "_handle_wifi_path: for _wifiNWPathFlags: %u", (uint8_t *)&v18, 8u);
    }

    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      v13 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didWiFiNWPathFlagsChanged_(v13, v14, (uint64_t)self, v15, self->_wifiNWPathFlags);
LABEL_9:

    }
  }
}

- (void)_handle_cellular_path:(id)a3 nwEndPoind:(id)a4
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  nw_path_status_t status;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  int cellularNWPathFlags;
  id WeakRetained;
  char v22;
  NSObject *v23;
  const char *v24;
  double v25;
  NSString *idsSessionID;
  char *v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  nw_path_status_t v31;
  int v32;
  NSString *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v9 = v5;
  if (self->_state != 4)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    v23 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    idsSessionID = self->_idsSessionID;
    v27 = _IDSLinkStateStrings[self->_state];
    v32 = 138412546;
    v33 = idsSessionID;
    v34 = 2080;
    v35 = v27;
    v28 = "_handle_cellular_path: Session with IDSSessionID: %@ is not connected, state [%s].";
    v29 = v23;
    v30 = 22;
LABEL_12:
    _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v32, v30);
    goto LABEL_13;
  }
  status = nw_path_get_status(v5);
  if (status != nw_path_status_satisfied)
  {
    v31 = status;
    objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
    v23 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    v32 = 67109120;
    LODWORD(v33) = v31;
    v28 = "_handle_cellular_path: nw_path_status is: %d, return";
    v29 = v23;
    v30 = 8;
    goto LABEL_12;
  }
  objc_msgSend__processDelayedCellularInterfaces(self, v11, v12, v13);
  if (objc_msgSend__isNWPathFlagsChanged_existingPath_(self, v14, (uint64_t)v9, v15, &self->_cellularNWPathFlags))
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v18);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      cellularNWPathFlags = self->_cellularNWPathFlags;
      v32 = 67109120;
      LODWORD(v33) = cellularNWPathFlags;
      _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "_handle_cellular_path: for _cellularNWPathFlags: %u", (uint8_t *)&v32, 8u);
    }

    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v22 = objc_opt_respondsToSelector();

    if ((v22 & 1) != 0)
    {
      v23 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didCellularNWPathFlagsChanged_(v23, v24, (uint64_t)self, v25, self->_cellularNWPathFlags);
LABEL_13:

    }
  }

}

- (unint64_t)defaultLinkType
{
  _QWORD *v3;
  void *v4;
  NSMutableDictionary *channelToCandidatePairs;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v3 && !*((_DWORD *)v3 + 1))
  {
    OSLogHandleForTransportCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "no default link is specified yet.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no default link is specified yet."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no default link is specified yet."));
      }
    }
    return 0;
  }
  else
  {
    channelForStunCandidatePair((uint64_t)(v3 + 1), (uint64_t)(v3 + 17), *((unsigned __int16 *)v3 + 132));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    channelToCandidatePairs = self->_channelToCandidatePairs;
    if (channelToCandidatePairs
      && v4
      && (v6 = (id)CFDictionaryGetValue((CFDictionaryRef)channelToCandidatePairs, v4)) != 0)
    {
      v10 = v6;
      objc_msgSend_local(v6, v7, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isCellularStunCandidate(v11, v12, v13, v14))
        v15 = 4;
      else
        v15 = 3;

    }
    else
    {
      OSLogHandleForTransportCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v4;
        _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "failed to find default link for %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find default link for %@."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find default link for %@."));
        }
      }
      v15 = 0;
    }

  }
  return v15;
}

- (BOOL)hasReachableInterface:(unint64_t)a3
{
  int v3;
  NSMutableArray *v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
    v3 = 30;
  else
    v3 = 2;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = self->_interfaceAddressArray;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v4);
        objc_msgSend_address(*(void **)(*((_QWORD *)&v19 + 1) + 8 * i), v7, v8, v10, (_QWORD)v19);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v13;
        if (v13 && v3 == *(unsigned __int8 *)(objc_msgSend_sa(v13, v14, v15, v16) + 1))
        {

          LOBYTE(v9) = 1;
          goto LABEL_15;
        }

      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_15:

  return v9;
}

- (void)_addQRAAWDBlock:(id)a3 allocateRequestTime:(double)a4 inferredExternalRAT:(unsigned int)a5 stunTransport:(int64_t)a6 relayProviderType:(int64_t)a7 idsSessionID:(id)a8 reportingDataBlob:(id)a9 isInitiator:(BOOL)a10
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  NSMutableArray *allocateTimeReportBlocks;
  NSMutableArray *v29;
  NSMutableArray *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  id v35;
  IDSGlobalLink *v36;
  id v37;
  id v38;
  double v39;
  int64_t v40;
  int64_t v41;
  unsigned int v42;
  BOOL v43;

  v17 = a3;
  v18 = a8;
  v19 = a9;
  v31 = MEMORY[0x1E0C809B0];
  v32 = 3221225472;
  v33 = sub_19B9C1070;
  v34 = &unk_1E3C1FD10;
  v43 = a10;
  v39 = a4;
  v42 = a5;
  v20 = v17;
  v35 = v20;
  v36 = self;
  v40 = a7;
  v41 = a6;
  v21 = v18;
  v37 = v21;
  v22 = v19;
  v38 = v22;
  v23 = _Block_copy(&v31);
  v27 = (void *)objc_msgSend_copy(v23, v24, v25, v26, v31, v32, v33, v34);

  allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
  if (!allocateTimeReportBlocks)
  {
    v29 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v30 = self->_allocateTimeReportBlocks;
    self->_allocateTimeReportBlocks = v29;

    allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
  }
  if (allocateTimeReportBlocks && v27)
    CFArrayAppendValue((CFMutableArrayRef)allocateTimeReportBlocks, v27);

}

- (void)connectWithSessionInfo:(id)a3 interfaceAddress:(id)a4 joinSession:(BOOL)a5 completionHandler:(id)a6 withLocalInterfacePreference:(int)a7
{
  double v7;

  objc_msgSend__connectWithSessionInfo_interfaceAddress_joinSession_allocbindFailover_completionHandler_withLocalInterfacePreference_(self, a2, (uint64_t)a3, v7, a4, a5, 0, a6, *(_QWORD *)&a7);
}

- (unsigned)_getExternalIPAddressRAT:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int v8;
  const char *v9;
  double v10;
  int v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  unsigned int RATForIPv6Address;
  id v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[4];

  v4 = a3;
  v8 = objc_msgSend_length(v4, v5, v6, v7);
  if (v8 == 16)
  {
    memset(&v25[1], 170, 20);
    v17 = objc_retainAutorelease(v4);
    *(_OWORD *)&v25[1] = *(_OWORD *)objc_msgSend_bytes(v17, v18, v19, v20, 0xAAAAAAAAAAAAAAAALL, *(_OWORD *)&v25[1], v25[3]);
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v21, v22, *(double *)&v25[1]);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    RATForIPv6Address = GLUtilGetRATForIPv6Address((uint64_t)v25, v23);

  }
  else if (v8 == 4)
  {
    LODWORD(v25[0]) = 0;
    objc_msgSend_getBytes_length_(v4, v9, (uint64_t)v25, v10, 4);
    v11 = v25[0];
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    RATForIPv6Address = GLUtilGetRATForIPv4Address(v11, v15);

  }
  else
  {
    RATForIPv6Address = 10;
  }

  return RATForIPv6Address;
}

- (BOOL)_isAcceptedRelaySessionForAllocationRequestID:(id)a3 acceptedRelaySessionID:(id)a4
{
  id v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  BOOL v11;

  v6 = a4;
  v11 = ((objc_msgSend_containsObject_(self->_targetedAllocations, v7, (uint64_t)a3, v8) & 1) != 0
      || objc_msgSend_isEqualToString_(self->_acceptedRelaySessionID, v9, (uint64_t)v6, v10))
     && self->_isInitiator;

  return v11;
}

- (void)_connectNWTCPLink:(id)a3 disconnectAfterUse:(BOOL)a4 connectedHandler:(id)a5
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  const char *v35;
  double v36;
  uint64_t v37;
  id v38;
  const char *v39;
  void *v40;
  double v41;
  const char *v42;
  uint64_t v43;
  double v44;
  NSObject *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  IDSGlobalLink *v56;
  void *v57;
  id v58;
  const char *v59;
  double v60;
  int ready;
  const char *v62;
  double v63;
  IDSGlobalLink *v64;
  IDSNWLink *nwLink;
  unsigned int v66;
  unsigned __int8 *clientUUID;
  id v68;
  _QWORD v69[5];
  id v70;
  id v71;
  uint8_t buf[8];
  _QWORD aBlock[4];
  id v74;
  _WORD v75[5];

  v8 = a3;
  v9 = a5;
  v75[0] = 0;
  objc_msgSend_local(v8, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_index(v13, v14, v15, v16);

  objc_msgSend_local(v8, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_address(v21, v22, v23, v24);

  v29 = *(unsigned __int8 *)(v25 + 1);
  if (v29 == 2 || v29 == 30)
    *(_WORD *)(v25 + 2) = 0;
  objc_msgSend_remote(v8, v26, v27, v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_external(v30, v31, v32, v33);

  objc_msgSend_setIsQUIC_(v8, v35, 1, v36);
  v37 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19B9C1764;
  aBlock[3] = &unk_1E3C1FD38;
  v38 = v8;
  v74 = v38;
  v40 = _Block_copy(aBlock);
  if (!a4)
    objc_msgSend_setState_(v38, v39, 1, v41);
  if (IMGetDomainBoolForKey())
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v42, v43, v44);
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "forceH2FallbackToTCP enabled, fallback to TCP STUN", buf, 2u);
    }

  }
  else
  {
    v66 = v17;
    nwLink = self->_nwLink;
    clientUUID = self->_clientUUID;
    objc_msgSend_sessionID(v38, v42, v43, v44);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_relaySessionToken(v38, v47, v48, v49);
    v50 = v34;
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_relaySessionKey(v38, v52, v53, v54);
    v55 = objc_claimAutoreleasedReturnValue();
    v56 = self;
    v57 = (void *)v55;
    v69[0] = v37;
    v69[1] = 3221225472;
    v69[2] = sub_19B9C1824;
    v69[3] = &unk_1E3C1FD60;
    v64 = v56;
    v69[4] = v56;
    v58 = v38;
    v70 = v58;
    v68 = v9;
    v71 = v9;
    ready = objc_msgSend_connectTCP_localAddress_remoteAddress_clientUUID_sessionID_relaySessionToken_relaySessionKey_randomSaltBlock_newLocalPort_disconnectAfterUse_readyHandler_(nwLink, v59, v66, v60, v25, v50, clientUUID, v46, v51, v57, v40, v75, a4, v69);

    if (ready && v75[0])
      objc_msgSend__updateCandidatePair_newLocalPort_(v64, v62, (uint64_t)v58, v63);

    v9 = v68;
  }

}

- (void)_connectNWLink:(id)a3 disconnectAfterUse:(BOOL)a4 connectedHandler:(id)a5
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  double v32;
  id v33;
  const char *v34;
  double v35;
  int v36;
  int v37;
  const char *v38;
  uint64_t v39;
  double v40;
  int v41;
  _BOOL4 v42;
  _BOOL4 v43;
  NSObject *v44;
  const __CFString *v45;
  const __CFString *v46;
  _BOOL4 forceTCPFallbackOnCell;
  const __CFString *v48;
  const __CFString *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  double v56;
  int isCellularStunCandidate;
  const char *v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  double v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  BOOL shouldEnable0RTT;
  NSObject *v78;
  void *v79;
  const char *v80;
  double v81;
  int ready;
  const char *v83;
  double v84;
  NSObject *v85;
  const char *v86;
  __int16 v87;
  void *v88;
  IDSNWLink *nwLink;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  void *v93;
  _QWORD v94[4];
  NSObject *v95;
  IDSGlobalLink *v96;
  id v97;
  BOOL v98;
  _QWORD aBlock[4];
  id v100;
  __int16 v101;
  uint8_t buf[4];
  const __CFString *v103;
  __int16 v104;
  const __CFString *v105;
  __int16 v106;
  const __CFString *v107;
  __int16 v108;
  const __CFString *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v101 = 0;
  objc_msgSend_local(v8, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = objc_msgSend_index(v13, v14, v15, v16);

  objc_msgSend_local(v8, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = objc_msgSend_address(v20, v21, v22, v23);

  objc_msgSend_remote(v8, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = objc_msgSend_external(v27, v28, v29, v30);

  objc_msgSend_setIsQUIC_(v8, v31, 1, v32);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19B9C2000;
  aBlock[3] = &unk_1E3C1FD38;
  v33 = v8;
  v100 = v33;
  v93 = _Block_copy(aBlock);
  if (!a4)
    objc_msgSend_setState_(v33, v34, 1, v35);
  v36 = IMGetDomainBoolForKey();
  v37 = IMGetDomainBoolForKey();
  v41 = v37;
  if ((v36 & 1) != 0)
  {
    v42 = 0;
    if ((v37 & 1) == 0)
    {
LABEL_5:
      v43 = !self->_forceTCPFallbackOnCell;
      goto LABEL_8;
    }
  }
  else
  {
    v42 = !self->_forceTCPFallbackOnWiFi;
    if ((v37 & 1) == 0)
      goto LABEL_5;
  }
  v43 = 0;
LABEL_8:
  objc_msgSend_GlobalLink(IDSFoundationLog, v38, v39, v40);
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    v45 = CFSTR("NO");
    if (v36)
      v46 = CFSTR("YES");
    else
      v46 = CFSTR("NO");
    forceTCPFallbackOnCell = self->_forceTCPFallbackOnCell;
    if (self->_forceTCPFallbackOnWiFi)
      v48 = CFSTR("YES");
    else
      v48 = CFSTR("NO");
    *(_DWORD *)buf = 138413058;
    v103 = v46;
    if (v41)
      v49 = CFSTR("YES");
    else
      v49 = CFSTR("NO");
    v104 = 2112;
    v105 = v48;
    if (forceTCPFallbackOnCell)
      v45 = CFSTR("YES");
    v106 = 2112;
    v107 = v49;
    v108 = 2112;
    v109 = v45;
    _os_log_impl(&dword_19B949000, v44, OS_LOG_TYPE_DEFAULT, "connectNWLink forceTCPFallbackOnWiFI default: %@ manual: %@; forceTCPFallbackOnCell default: %@ manual: %@",
      buf,
      0x2Au);
  }

  objc_msgSend_local(v33, v50, v51, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v53, v54, v55, v56);

  if (((v42 | isCellularStunCandidate) & 1) == 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v58, v59, v60);
    v85 = objc_claimAutoreleasedReturnValue();
    v79 = v93;
    if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    *(_WORD *)buf = 0;
    v86 = "forceTCPFallbackOnWiFi is set, dont connect via WiFi interface";
LABEL_31:
    _os_log_impl(&dword_19B949000, v85, OS_LOG_TYPE_DEFAULT, v86, buf, 2u);
    goto LABEL_32;
  }
  if (((v43 | isCellularStunCandidate ^ 1) & 1) == 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v58, v59, v60);
    v85 = objc_claimAutoreleasedReturnValue();
    v79 = v93;
    if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    *(_WORD *)buf = 0;
    v86 = "forceTCPFallbackOnWiFi is set, dont connect via cellular interface";
    goto LABEL_31;
  }
  nwLink = self->_nwLink;
  objc_msgSend_sessionID(v33, v58, v59, v60);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_relaySessionToken(v33, v61, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_relaySessionKey(v33, v65, v66, v67);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pskTransportParameters(v33, v69, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pskH3Settings(v33, v73, v74, v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  shouldEnable0RTT = self->_shouldEnable0RTT;
  v94[0] = MEMORY[0x1E0C809B0];
  v94[1] = 3221225472;
  v94[2] = sub_19B9C20C0;
  v94[3] = &unk_1E3C1FD88;
  v98 = a4;
  v78 = v33;
  v95 = v78;
  v96 = self;
  v97 = v9;
  HIBYTE(v87) = shouldEnable0RTT;
  LOBYTE(v87) = a4;
  v79 = v93;
  ready = objc_msgSend_connect_localAddress_remoteAddress_clientUUID_sessionID_relaySessionToken_relaySessionKey_randomSaltBlock_pskTransportParameters_pskH3Settings_newLocalPort_disconnectAfterUse_holdUntilFirstPacketReady_readyHandler_(nwLink, v80, v92, v81, v91, v90, self->_clientUUID, v88, v64, v68, v93, v72, v76, &v101, v87, v94);

  if (ready && v101)
    objc_msgSend__updateCandidatePair_newLocalPort_(self, v83, (uint64_t)v78, v84);

  v85 = v95;
LABEL_32:

}

- (void)_connectWithSessionInfo:(id)a3 interfaceAddress:(id)a4 joinSession:(BOOL)a5 allocbindFailover:(BOOL)a6 completionHandler:(id)a7 withLocalInterfacePreference:(int)a8
{
  _BOOL4 v10;
  _BOOL4 v11;
  const __CFDictionary *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  unint64_t state;
  NSObject *v19;
  char *v20;
  char *v21;
  IDSQuickRelaySessionInfo *v22;
  const char *v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSString *v29;
  NSString *groupID;
  const char *v31;
  double v32;
  int hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  const char *v34;
  uint64_t v35;
  double v36;
  int v37;
  NSObject *v38;
  const __CFString *v39;
  const __CFString *v40;
  void *v41;
  NSData *v42;
  NSData *avcDataBlob;
  const char *v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  NSData *v48;
  IDSGroupQUICMaterialExchangeProvider *v49;
  IDSGroupQUICMaterialExchangeProvider *quicMaterialExchangeProvider;
  const char *v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  const char *v56;
  uint64_t v57;
  double v58;
  const char *v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  double v67;
  NSDictionary *v68;
  NSDictionary *qrSessionExperiments;
  const char *v70;
  uint64_t v71;
  double v72;
  const char *v73;
  uint64_t v74;
  double v75;
  NSObject *v76;
  const __CFString *v77;
  const char *v78;
  uint64_t v79;
  double v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  double v84;
  const char *v85;
  uint64_t v86;
  double v87;
  const char *v88;
  uint64_t v89;
  double v90;
  const char *v91;
  uint64_t v92;
  double v93;
  const char *v94;
  uint64_t v95;
  double v96;
  const char *v97;
  uint64_t v98;
  double v99;
  const char *v100;
  uint64_t v101;
  double v102;
  NSString *acceptedRelaySessionID;
  const char *v104;
  uint64_t v105;
  double v106;
  const char *v107;
  uint64_t v108;
  double v109;
  _BOOL4 v110;
  void *v111;
  void *v112;
  BOOL v113;
  NSObject *v114;
  const char *v115;
  uint64_t v116;
  double v117;
  id v118;
  const char *v119;
  uint64_t v120;
  double v121;
  void *v122;
  void *v123;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  void *v125;
  const char *v126;
  uint64_t v127;
  double v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  double v132;
  void *v133;
  const char *v134;
  double v135;
  NSObject *v136;
  const char *v137;
  uint64_t v138;
  double v139;
  const __CFString *v140;
  const __CFString *v141;
  const __CFString *v142;
  _BOOL4 v143;
  const char *v144;
  uint64_t v145;
  double v146;
  void *v147;
  const char *v148;
  double v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  double v153;
  int v154;
  const char *v155;
  uint64_t v156;
  double v157;
  NSObject *v158;
  NSMutableArray *interfaceAddressArray;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *connectingCandidatePairSessionInfo;
  NSObject *v162;
  const char *v163;
  uint64_t v164;
  double v165;
  void *v166;
  void *v167;
  int HasNonSharedRelayCandidatePair;
  void *v169;
  const char *v170;
  double v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  double v175;
  const char *v176;
  uint64_t v177;
  double v178;
  NSObject *v179;
  const char *v180;
  NSObject *v181;
  id v182;
  _BOOL4 v183;
  uint64_t v184;
  _BOOL4 isInitiator;
  const char *v186;
  uint64_t v187;
  double v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  double v192;
  NSObject *v193;
  char *v194;
  _BOOL4 v195;
  uint64_t v196;
  _BOOL4 v197;
  const char *v198;
  uint64_t v199;
  double v200;
  void *v201;
  uint64_t v202;
  char *v203;
  id v204;
  int v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  double v209;
  _BOOL4 preferCellularForCallSetup;
  NSMutableArray *v211;
  void *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  double v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  double v222;
  int v223;
  const char *v224;
  uint64_t v225;
  double v226;
  _BOOL4 v227;
  uint8_t *v228;
  uint64_t v229;
  NSObject *v230;
  char *v231;
  char *v232;
  NSObject *v233;
  const char *v234;
  uint64_t v235;
  double v236;
  const char *v237;
  id v238;
  char *v239;
  const char *v240;
  uint64_t v241;
  double v242;
  int isInternal;
  const char *v244;
  const __CFString *v245;
  _BOOL4 v246;
  IDSGFTMetricsCollector *metricsCollector;
  const char *v248;
  uint64_t v249;
  double v250;
  void *v251;
  const char *v252;
  double v253;
  const char *v254;
  uint64_t v255;
  double v256;
  uint64_t *FirstPrefix;
  NSObject *v258;
  NSString *v259;
  NSString *idsSessionID;
  id v261;
  const char *v262;
  double v263;
  void *v264;
  const char *v265;
  double v266;
  const char *v267;
  double v268;
  NSData *v269;
  NSData *controlMessageKey;
  NSObject *v271;
  NSString *v272;
  NSString *cbuuid;
  const char *v274;
  double v275;
  double v276;
  NSObject *v277;
  const char *v278;
  const char *v279;
  double v280;
  const char *v281;
  uint64_t v282;
  double v283;
  const char *v284;
  uint64_t v285;
  double v286;
  NSObject *v287;
  const char *v288;
  uint64_t v289;
  double v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  double v294;
  const char *v295;
  uint64_t v296;
  double v297;
  const char *v298;
  uint64_t v299;
  double v300;
  void *Value;
  NSObject *v302;
  NSObject *v303;
  const char *v304;
  uint64_t v305;
  double v306;
  int v307;
  const char *v308;
  uint64_t v309;
  double v310;
  const char *v311;
  uint64_t v312;
  double v313;
  void *v314;
  const char *v315;
  uint64_t v316;
  double v317;
  void *v318;
  const char *v319;
  double v320;
  NSObject *v321;
  const char *v322;
  uint64_t v323;
  double v324;
  NSObject *v325;
  const char *v326;
  double v327;
  unsigned int v328;
  __int16 v329;
  NSObject *v330;
  char *v331;
  double v332;
  NSObject *v333;
  char *v334;
  unsigned int v335;
  const __CFString *v336;
  NSString *v337;
  __CFString *v338;
  NSString *v339;
  const __CFString *v340;
  IDSTCPLink *v341;
  const char *v342;
  uint64_t v343;
  double v344;
  NSObject *v345;
  IDSTCPLink *tcpLink;
  const char *v347;
  uint64_t v348;
  double v349;
  void *v350;
  const char *v351;
  uint64_t v352;
  double v353;
  uint64_t v354;
  const char *v355;
  double v356;
  unsigned __int8 *v357;
  const char *v358;
  uint64_t v359;
  __int128 v360;
  void *v361;
  const char *v362;
  uint64_t v363;
  double v364;
  uint64_t v365;
  const char *v366;
  uint64_t v367;
  double v368;
  void *v369;
  const char *v370;
  uint64_t v371;
  double v372;
  void *v373;
  __int128 v374;
  const char *v375;
  uint64_t v376;
  void *v377;
  const char *v378;
  uint64_t v379;
  double v380;
  uint64_t v381;
  const char *v382;
  uint64_t v383;
  double v384;
  NSObject *v385;
  const char *v386;
  uint64_t v387;
  double v388;
  NSObject *v389;
  IDSTCPLink *v390;
  const char *v391;
  const char *v392;
  uint64_t v393;
  double v394;
  IDSTCPLink *tcpSSLLink;
  void *v396;
  const char *v397;
  uint64_t v398;
  double v399;
  uint64_t v400;
  const char *v401;
  double v402;
  unsigned __int8 *v403;
  const char *v404;
  uint64_t v405;
  __int128 v406;
  void *v407;
  const char *v408;
  uint64_t v409;
  double v410;
  uint64_t v411;
  const char *v412;
  uint64_t v413;
  double v414;
  void *v415;
  const char *v416;
  uint64_t v417;
  double v418;
  void *v419;
  __int128 v420;
  const char *v421;
  uint64_t v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  double v426;
  uint64_t v427;
  const char *v428;
  uint64_t v429;
  double v430;
  __int128 v431;
  _BYTE *v432;
  void *v433;
  const char *v434;
  uint64_t v435;
  double v436;
  uint64_t v437;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v439;
  id v440;
  NSObject *v441;
  const char *v442;
  uint64_t v443;
  double v444;
  unint64_t v445;
  const char *v446;
  double v447;
  unint64_t v448;
  NSObject *v449;
  char *v450;
  const char *v451;
  double v452;
  _BOOL4 v453;
  CFDictionaryRef v454;
  void *v455;
  const char *v456;
  uint64_t v457;
  double v458;
  uint64_t v459;
  const char *v460;
  uint64_t v461;
  double v462;
  void *v463;
  const char *v464;
  double v465;
  const char *v466;
  uint64_t v467;
  double v468;
  void *v469;
  const char *v470;
  double v471;
  const char *v472;
  uint64_t v473;
  double v474;
  const char *v475;
  double v476;
  const char *v477;
  uint64_t v478;
  double v479;
  uint64_t v480;
  NSObject *v481;
  const char *v482;
  uint64_t v483;
  double v484;
  id v485;
  void *v486;
  const __CFString *v487;
  const char *v488;
  uint64_t v489;
  double v490;
  void *v491;
  __CFString *v492;
  const char *v493;
  uint64_t v494;
  double v495;
  NSMutableDictionary *v496;
  NSMutableDictionary *v497;
  id v498;
  NSObject *v499;
  id v500;
  const char *v501;
  uint64_t v502;
  double v503;
  void *v504;
  const char *v505;
  uint64_t v506;
  double v507;
  void *v508;
  const char *v509;
  uint64_t v510;
  double v511;
  uint64_t v512;
  NSObject *v513;
  const char *v514;
  uint64_t v515;
  double v516;
  id v517;
  const char *v518;
  double v519;
  uint64_t v520;
  uint64_t v521;
  const char *v522;
  double v523;
  BOOL v524;
  int v525;
  const char *v526;
  uint64_t v527;
  double v528;
  double v529;
  void *v530;
  const char *v531;
  double v532;
  const char *v533;
  double v534;
  uint64_t v535;
  uint64_t v536;
  NSString *v537;
  const char *v538;
  uint64_t v539;
  double v540;
  void *v541;
  const char *v542;
  const __CFString *v543;
  uint64_t v544;
  double inviteSentTime;
  void *v546;
  void *v547;
  double v548;
  double inviteRecvTime;
  CFDictionaryRef v550;
  void *v551;
  void *v552;
  int v553;
  int v554;
  NSObject *v555;
  int v556;
  int v557;
  int v558;
  double allocbindStartTime;
  NSObject *v560;
  double v561;
  double v562;
  int v563;
  int v564;
  int v565;
  int v566;
  NSObject *v567;
  double v568;
  double v569;
  unsigned int acceptDelayU32;
  int v571;
  int v572;
  int v573;
  IDSGFTMetricsCollector *v574;
  void *v575;
  const char *v576;
  double v577;
  const char *v578;
  uint64_t v579;
  double v580;
  NSObject *v581;
  const char *v582;
  uint64_t v583;
  double v584;
  const char *v585;
  char *v586;
  NSString *v587;
  id v588;
  void *v589;
  const __CFString *v590;
  NSObject *v591;
  char *v592;
  NSObject *v593;
  const char *v594;
  uint64_t v595;
  double v596;
  uint64_t v597;
  const char *v598;
  uint64_t v599;
  double v600;
  uint64_t v601;
  const char *v602;
  uint64_t v603;
  double v604;
  uint64_t v605;
  const char *v606;
  uint64_t v607;
  double v608;
  const char *v609;
  uint64_t v610;
  double v611;
  uint64_t v612;
  const char *v613;
  uint64_t v614;
  double v615;
  void *v616;
  id connectReadyHandler;
  NSObject *v618;
  const char *v619;
  uint64_t v620;
  double v621;
  void *v622;
  const char *v623;
  uint64_t v624;
  double v625;
  uint64_t v626;
  const char *v627;
  double v628;
  const char *v629;
  uint64_t v630;
  double v631;
  NSObject *v632;
  const char *v633;
  double v634;
  NSObject *v635;
  const char *v636;
  double v637;
  NSObject *v638;
  const __CFString *v639;
  char *v640;
  __CFString *v641;
  const __CFString *v642;
  const char *v643;
  double v644;
  const char *v645;
  uint64_t v646;
  double v647;
  uint64_t v648;
  void *v649;
  uint64_t v650;
  BOOL v651;
  uint64_t v652;
  void *v653;
  int HasVPNInterfaceForSelectedAddress;
  void *v655;
  const char *v656;
  double v657;
  void *v658;
  const char *v659;
  uint64_t v660;
  double v661;
  NSObject *v662;
  char *v663;
  NSObject *v664;
  char *v665;
  NSString *v666;
  uint64_t v667;
  uint64_t v668;
  IDSQuickRelaySessionInfo *v669;
  void *v670;
  uint64_t v671;
  void *v672;
  void *v673;
  double v674;
  IDSGlobalLink *v675;
  char *v676;
  double v677;
  char *v678;
  __CFString *v679;
  char *v680;
  double v681;
  uint64_t v682;
  unsigned int isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID;
  BOOL v684;
  uint64_t v685;
  uint64_t v686;
  void *v687;
  _BOOL4 v688;
  _BOOL4 valid;
  IDSGlobalLink *v690;
  void *v691;
  void *v692;
  int v693;
  _BOOL4 v694;
  void *v695;
  _BOOL4 v696;
  uint64_t Type;
  void *key;
  id v699;
  CFDictionaryRef theDict;
  id v701;
  _QWORD v702[4];
  NSObject *v703;
  id v704;
  IDSGlobalLink *v705;
  const __CFDictionary *v706;
  id v707;
  uint64_t v708;
  int v709;
  BOOL v710;
  _QWORD v711[5];
  id v712;
  _QWORD v713[4];
  id v714;
  _QWORD v715[4];
  id v716;
  _QWORD aBlock[5];
  const __CFDictionary *v718;
  id v719;
  id v720;
  int v721;
  BOOL v722;
  id v723;
  uint64_t v724;
  uint8_t v725[4];
  _BYTE *v726;
  __int16 v727;
  _BYTE *v728;
  _BYTE v729[64];
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  _BYTE v734[32];
  _BYTE v735[48];
  __int128 v736;
  __int128 v737;
  __int128 v738;
  _OWORD v739[8];
  uint8_t buf[32];
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  uint64_t v747;

  v10 = a6;
  v11 = a5;
  v747 = *MEMORY[0x1E0C80C00];
  v14 = (const __CFDictionary *)a3;
  v701 = a4;
  v699 = a7;
  theDict = v14;
  state = self->_state;
  if (state < 5)
  {
    if (state >= 2 && !v11)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v21 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = self;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip sending info request.", buf, 0x16u);
      }
      goto LABEL_4;
    }
    v696 = v11;
    v693 = a8;
    v745 = 0u;
    v746 = 0u;
    v743 = 0u;
    v744 = 0u;
    v741 = 0u;
    v742 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v739, 0, sizeof(v739));
    v22 = objc_alloc_init(IDSQuickRelaySessionInfo);
    v25 = objc_msgSend_parseSessionInfo_(v22, v23, (uint64_t)v14, v24);
    objc_msgSend_groupID(v22, v26, v27, v28);
    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    groupID = self->_groupID;
    self->_groupID = v29;

    hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v31, 3, v32, 4, 0, 1);
    v37 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
    if (v25 && (hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & v10 & 1) == 0)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v34, v35, v36);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = CFSTR("NO");
        if (v37)
          v40 = CFSTR("YES");
        else
          v40 = CFSTR("NO");
        *(_DWORD *)v734 = 134218498;
        *(_QWORD *)&v734[4] = v25;
        *(_WORD *)&v734[12] = 2112;
        *(_QWORD *)&v734[14] = v40;
        if (v10)
          v39 = CFSTR("YES");
        *(_WORD *)&v734[22] = 2112;
        *(_QWORD *)&v734[24] = v39;
        _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "error code = %ld, hasConnectedCandidatePair = %@, allocbindFailover = %@", v734, 0x20u);
      }

      sub_19B9C5D58(v699, v25, (uint64_t)CFSTR("Invalid session info"));
      goto LABEL_464;
    }
    if (!self->_avcDataBlob)
    {
      objc_msgSend_avcDataBlob(v22, v34, v35, v36);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (v41)
      {
        objc_msgSend_avcDataBlob(v22, v34, v35, v36);
        v42 = (NSData *)objc_claimAutoreleasedReturnValue();
        avcDataBlob = self->_avcDataBlob;
        self->_avcDataBlob = v42;

        objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          v48 = self->_avcDataBlob;
          *(_DWORD *)v734 = 138412290;
          *(_QWORD *)&v734[4] = v48;
          _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: _avcDataBlob: %@", v734, 0xCu);
        }

      }
    }
    if (self->_isGeckoEnabled)
    {
      objc_msgSend_quicMaterialExchangeProvider(v22, v34, v35, v36);
      v49 = (IDSGroupQUICMaterialExchangeProvider *)objc_claimAutoreleasedReturnValue();
      quicMaterialExchangeProvider = self->_quicMaterialExchangeProvider;
      self->_quicMaterialExchangeProvider = v49;

      objc_msgSend_addHandler_(self->_quicMaterialExchangeProvider, v51, (uint64_t)self, v52);
    }
    else
    {
      objc_msgSend_initialServerDesiredMaterial(v22, v34, v35, v36);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      if (v111)
      {
        objc_msgSend_initialServerDesiredMaterialSigner(v22, v53, v54, v55);
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        v113 = v112 == 0;

        if (!v113)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v53, v54, v55);
          v114 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_initialServerDesiredMaterial(v22, v115, v116, v117);
            v118 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend_initialServerDesiredMaterialSigner(v22, v119, v120, v121);
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            v123 = _Block_copy(v122);
            *(_DWORD *)v734 = 138412546;
            *(_QWORD *)&v734[4] = v118;
            *(_WORD *)&v734[12] = 2112;
            *(_QWORD *)&v734[14] = v123;
            _os_log_impl(&dword_19B949000, v114, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: initialServerDesiredMaterial: %@ initialServerDesiredMaterialSigner: %@", v734, 0x16u);

          }
          serverMaterialExchangeController = self->_serverMaterialExchangeController;
          if (serverMaterialExchangeController && !self->_hasSetServerDesiredMaterials)
          {
            objc_msgSend_idsSessionID(v22, v53, v54, v55);
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_initialServerDesiredMaterial(v22, v126, v127, v128);
            v129 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_initialServerDesiredMaterialSigner(v22, v130, v131, v132);
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setDesiredMaterialsForSession_materials_signer_(serverMaterialExchangeController, v134, (uint64_t)v125, v135, v129, v133);

          }
        }
      }
    }
    self->_isInitiator = objc_msgSend_isInitiator(v22, v53, v54, v55);
    self->_uplinkNackDisabled = objc_msgSend_uplinkNackDisabled(v22, v56, v57, v58);
    self->_conversationShouldUseP2PTLEAccordingToServer = objc_msgSend_transportLayerEncryptionDisabled(v22, v59, v60, v61);
    self->_ipDiscoveryDisabled = objc_msgSend_ipDiscoveryDisabled(v22, v62, v63, v64);
    objc_msgSend_qrSessionExperiments(v22, v65, v66, v67);
    v68 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    qrSessionExperiments = self->_qrSessionExperiments;
    self->_qrSessionExperiments = v68;

    if (objc_msgSend_h2FallbackDisabled(v22, v70, v71, v72) && self->_H2FallbackEnabled)
    {
      self->_H2FallbackEnabled = 0;
      objc_msgSend_GlobalLink(IDSFoundationLog, v73, v74, v75);
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        if (self->_H2FallbackEnabled)
          v77 = CFSTR("YES");
        else
          v77 = CFSTR("NO");
        *(_DWORD *)v734 = 138412290;
        *(_QWORD *)&v734[4] = v77;
        _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: set _H2FallbackEnabled to %@", v734, 0xCu);
      }

    }
    if (IMGetDomainBoolForKey())
    {
      self->_H2FallbackEnabled = 1;
      objc_msgSend_GlobalLink(IDSFoundationLog, v78, v79, v80);
      v81 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v734 = 0;
        _os_log_impl(&dword_19B949000, v81, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: force enable h2 fallback", v734, 2u);
      }

    }
    Type = objc_msgSend_allocateType(v22, v78, v79, v80);
    objc_msgSend_allocateRequestID(v22, v82, v83, v84);
    v695 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_relaySessionID(v22, v85, v86, v87);
    key = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_relaySessionToken(v22, v88, v89, v90);
    v692 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_relaySessionKey(v22, v91, v92, v93);
    v691 = (void *)objc_claimAutoreleasedReturnValue();
    v685 = objc_msgSend_participantID(v22, v94, v95, v96);
    objc_msgSend_serverAddress(v22, v97, v98, v99);
    objc_msgSend_serverAddressIPv6(v22, v100, v101, v102);
    __memcpy_chk();
    __memcpy_chk();
    valid = IsValidSA((_BOOL8)v739);
    acceptedRelaySessionID = self->_acceptedRelaySessionID;
    v110 = objc_msgSend_ipPreference(v22, v104, v105, v106) == 1
        || (IMGetDomainBoolForKey() & 1) != 0
        || self->_forceIPv6;
    v694 = v110;
    objc_msgSend_GlobalLink(IDSFoundationLog, v107, v108, v109);
    v136 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_ipPreference(v22, v137, v138, v139) == 1)
        v140 = CFSTR("YES");
      else
        v140 = CFSTR("NO");
      if (IMGetDomainBoolForKey())
        v141 = CFSTR("YES");
      else
        v141 = CFSTR("NO");
      if (self->_forceIPv6)
        v142 = CFSTR("YES");
      else
        v142 = CFSTR("NO");
      *(_DWORD *)v734 = 138412802;
      *(_QWORD *)&v734[4] = v140;
      *(_WORD *)&v734[12] = 2112;
      *(_QWORD *)&v734[14] = v141;
      *(_WORD *)&v734[22] = 2112;
      *(_QWORD *)&v734[24] = v142;
      _os_log_impl(&dword_19B949000, v136, OS_LOG_TYPE_DEFAULT, "force IPv6 options server: %@; default: %@; manual: %@",
        v734,
        0x20u);
    }
    v143 = Type == 3;

    if (self->_disablePureLinkFeature)
      v146 = 2.0;
    else
      v146 = 1.0;
    objc_msgSend_sharedInstance(IDSServerBag, v144, v145, 2.0);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v147, v148, (uint64_t)CFSTR("disable-transport-score-cards"), v149);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    v154 = objc_msgSend_BOOLValue(v150, v151, v152, v153);

    if (v143 && v696)
    {
      self->_sharedSessionJoined = 1;
      goto LABEL_66;
    }
    if (Type != 3 && !v10)
    {
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v155, v156, v157);
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      HasNonSharedRelayCandidatePair = GLUtilHasNonSharedRelayCandidatePair(key, v167);

      if (HasNonSharedRelayCandidatePair)
      {
        objc_msgSend_sharedInstance(IDSServerBag, v155, v156, v157);
        v169 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKey_(v169, v170, (uint64_t)CFSTR("ids-disallow-receiver-fallback"), v171);
        v172 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend_BOOLValue(v172, v173, v174, v175))
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v176, v177, v178);
          v179 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v734 = 138412290;
            *(_QWORD *)&v734[4] = key;
            v180 = "disallowReceiverFallbackBagValue enabled: relay session %@ already exists, ignore.";
LABEL_107:
            _os_log_impl(&dword_19B949000, v179, OS_LOG_TYPE_DEFAULT, v180, v734, 0xCu);
            goto LABEL_108;
          }
          goto LABEL_108;
        }
        if (self->_isInitiator)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v176, v177, v178);
          v179 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v734 = 138412290;
            *(_QWORD *)&v734[4] = key;
            v180 = "relay session %@ already exists, ignore.";
            goto LABEL_107;
          }
LABEL_108:

          goto LABEL_463;
        }

      }
    }
LABEL_66:
    if (!v701)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v155, v156, v157);
      v158 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
      {
        interfaceAddressArray = self->_interfaceAddressArray;
        *(_DWORD *)v734 = 138412290;
        *(_QWORD *)&v734[4] = interfaceAddressArray;
        _os_log_impl(&dword_19B949000, v158, OS_LOG_TYPE_DEFAULT, "current available interfaces: %@.", v734, 0xCu);
      }

    }
    if (!v10)
    {
      if (!self->_connectingCandidatePairSessionInfo)
      {
        Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
        self->_connectingCandidatePairSessionInfo = Mutable;

      }
      objc_msgSend_GlobalLink(IDSFoundationLog, v155, v156, v157);
      v162 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v734 = 138412546;
        *(_QWORD *)&v734[4] = key;
        *(_WORD *)&v734[12] = 2112;
        *(_QWORD *)&v734[14] = CFSTR("NO");
        _os_log_impl(&dword_19B949000, v162, OS_LOG_TYPE_DEFAULT, "add relaySessionID: %@, allocbindFailover: %@", v734, 0x16u);
      }

      v166 = (void *)objc_msgSend_copy(theDict, v163, v164, v165);
      if (v166)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)self->_connectingCandidatePairSessionInfo, key, v166);
      }
      else
      {
        v181 = MEMORY[0x1E0C81028];
        v182 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          sub_19BAF131C();

      }
    }
    v724 = 0;
    if (((v694 | ~v154) & v143) != 0)
    {
      if (v701)
      {
        v183 = acceptedRelaySessionID != 0;
        v184 = objc_msgSend_linkProtocol(v22, v155, v156, v157);
        isInitiator = self->_isInitiator;
        objc_msgSend_allValues(self->_tokenToCandidatePairs, v186, v187, v188);
        v189 = (void *)objc_claimAutoreleasedReturnValue();
        v724 = GLUtilSelectStunTransport(key, v184, 1, isInitiator, v183, v10, v189, self->_state);

        if ((unint64_t)(v724 - 3) <= 1 && self->_state == 4)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v190, v191, v192);
          v193 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
          {
            v194 = (&_IDSStunTransportStrings)[v724];
            *(_DWORD *)v734 = 136315650;
            *(_QWORD *)&v734[4] = v194;
            *(_WORD *)&v734[12] = 2112;
            *(_QWORD *)&v734[14] = key;
            *(_WORD *)&v734[22] = 2112;
            *(_QWORD *)&v734[24] = v695;
            _os_log_impl(&dword_19B949000, v193, OS_LOG_TYPE_DEFAULT, "skip %s for session %@, alloc reqID %@ link is connected.", v734, 0x20u);
          }
LABEL_93:

LABEL_463:
LABEL_464:

          goto LABEL_465;
        }
        v204 = v701;
        goto LABEL_115;
      }
      v723 = 0;
      objc_msgSend__selectStunTransport_andInterfaceAddress_forRelaySessionID_preferIPv4_isValidSA_(self, v155, (uint64_t)&v724, v157, &v723, key, !v694, valid);
      v204 = v723;
    }
    else
    {
      v195 = acceptedRelaySessionID != 0;
      v196 = objc_msgSend_linkProtocol(v22, v155, v156, v157);
      v197 = self->_isInitiator;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v198, v199, v200);
      v201 = (void *)objc_claimAutoreleasedReturnValue();
      v724 = GLUtilSelectStunTransport(key, v196, Type == 3, v197, v195, v10, v201, self->_state);

      v202 = v724;
      if ((unint64_t)(v724 - 3) <= 1 && self->_state == 4)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v190, v191, v192);
        v193 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
        {
          v203 = (&_IDSStunTransportStrings)[v724];
          *(_DWORD *)v734 = 136315650;
          *(_QWORD *)&v734[4] = v203;
          *(_WORD *)&v734[12] = 2112;
          *(_QWORD *)&v734[14] = key;
          *(_WORD *)&v734[22] = 2112;
          *(_QWORD *)&v734[24] = v695;
          _os_log_impl(&dword_19B949000, v193, OS_LOG_TYPE_DEFAULT, "skip %s for session %@, alloc reqID %@, link is connected.", v734, 0x20u);
        }
        goto LABEL_93;
      }
      v204 = v701;
      if (v701)
      {
LABEL_115:
        v701 = v204;
        v215 = objc_msgSend_index(v204, v190, v191, v192);
        objc_msgSend_address(v701, v216, v217, v218);
        v219 = (void *)objc_claimAutoreleasedReturnValue();
        v223 = *(unsigned __int8 *)(objc_msgSend_sa(v219, v220, v221, v222) + 1);

        v227 = (v694 || !self->_disablePureLinkFeature) && valid;
        v684 = v223 == 30 && v227;
        v228 = buf;
        if (v684)
          v228 = (uint8_t *)v739;
        v686 = (uint64_t)v228;
        v229 = v724;
        v688 = v227;
        if (self->_H2FallbackEnabled)
        {
          if (v724 == 3)
          {
            v229 = 4;
          }
          else if (v724 == 4)
          {
            v229 = 3;
          }
          objc_msgSend_GlobalLink(IDSFoundationLog, v224, v225, v226);
          v230 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
          {
            v231 = (&_IDSStunTransportStrings)[v724];
            v232 = (&_IDSStunTransportStrings)[v229];
            *(_DWORD *)v734 = 136315394;
            *(_QWORD *)&v734[4] = v231;
            *(_WORD *)&v734[12] = 2080;
            *(_QWORD *)&v734[14] = v232;
            _os_log_impl(&dword_19B949000, v230, OS_LOG_TYPE_DEFAULT, "current stunTransport is: %s, actualSelectedTransport is: %s", v734, 0x16u);
          }

        }
        objc_msgSend_GlobalLink(IDSFoundationLog, v224, v225, v226);
        v233 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
        {
          if (v223 == 30)
            v237 = "v6";
          else
            v237 = "v4";
          objc_msgSend_name(v701, v234, v235, v236);
          v238 = (id)objc_claimAutoreleasedReturnValue();
          v239 = (&_IDSStunTransportStrings)[v229];
          isInternal = objc_msgSend_isInternal(v22, v240, v241, v242);
          v244 = "prod";
          *(_DWORD *)v734 = 136316674;
          *(_QWORD *)&v734[4] = v237;
          *(_WORD *)&v734[12] = 2112;
          if (isInternal)
            v244 = "carry";
          *(_QWORD *)&v734[14] = v238;
          v245 = CFSTR("NO");
          *(_QWORD *)&v734[24] = v239;
          *(_WORD *)&v734[22] = 2080;
          if (valid)
            v245 = CFSTR("YES");
          *(_WORD *)v735 = 2112;
          *(_QWORD *)&v735[2] = v695;
          *(_WORD *)&v735[10] = 2080;
          *(_QWORD *)&v735[12] = v244;
          *(_WORD *)&v735[20] = 1024;
          *(_DWORD *)&v735[22] = v688;
          *(_WORD *)&v735[26] = 2112;
          *(_QWORD *)&v735[28] = v245;
          _os_log_impl(&dword_19B949000, v233, OS_LOG_TYPE_DEFAULT, "selected %s interface [%@] for [%s] allocation %@, %s QR server, isConnectToQRIPv6Enabled = %d, isValidSA = %@", v734, 0x44u);

        }
        v246 = v223 == 30;

        metricsCollector = self->_metricsCollector;
        objc_msgSend_name(v701, v248, v249, v250);
        v251 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_selectedLocalInterface_(metricsCollector, v252, (uint64_t)v251, v253);

        if (!v246 || v688)
        {
          FirstPrefix = 0;
        }
        else
        {
          FirstPrefix = IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, v215);
          if (!FirstPrefix)
          {
            OSLogHandleForTransportCategory();
            v303 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
            {
              v307 = objc_msgSend_index(v701, v304, v305, v306);
              *(_DWORD *)v734 = 67109120;
              *(_DWORD *)&v734[4] = v307;
              _os_log_impl(&dword_19B949000, v303, OS_LOG_TYPE_DEFAULT, "delay connectWithSessionInfo for if:%d nat64 prefix.", v734, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v668 = objc_msgSend_index(v701, v308, v309, v310);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("delay connectWithSessionInfo for if:%d nat64 prefix."));
                if (_IDSShouldLog())
                {
                  objc_msgSend_index(v701, v311, v312, v313, v668);
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("delay connectWithSessionInfo for if:%d nat64 prefix."));
                }
              }
            }
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 3221225472;
            aBlock[2] = sub_19B9C5E54;
            aBlock[3] = &unk_1E3C1FDB0;
            aBlock[4] = self;
            v718 = theDict;
            v701 = v701;
            v719 = v701;
            v722 = v696;
            v720 = v699;
            v721 = v693;
            v314 = _Block_copy(aBlock);
            objc_msgSend_name(v701, v315, v316, v317);
            v318 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v319, v215, v320, v318, v314);

            goto LABEL_463;
          }
          OSLogHandleForTransportCategory();
          v258 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v734 = 67109120;
            *(_DWORD *)&v734[4] = v215;
            _os_log_impl(&dword_19B949000, v258, OS_LOG_TYPE_DEFAULT, "nat64 prefix cache hit for if:%d", v734, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v666 = (NSString *)v215;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("nat64 prefix cache hit for if:%d"));
              if (_IDSShouldLog())
              {
                v666 = (NSString *)v215;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("nat64 prefix cache hit for if:%d"));
              }
            }
          }
        }
        if (!self->_idsSessionID)
        {
          objc_msgSend_idsSessionID(v22, v254, v255, v256);
          v259 = (NSString *)objc_claimAutoreleasedReturnValue();
          idsSessionID = self->_idsSessionID;
          self->_idsSessionID = v259;

          memset(v729, 170, 16);
          v261 = objc_alloc(MEMORY[0x1E0CB3A28]);
          v264 = (void *)objc_msgSend_initWithUUIDString_(v261, v262, (uint64_t)self->_idsSessionID, v263);
          objc_msgSend_getUUIDBytes_(v264, v265, (uint64_t)v729, v266);

          objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v267, (uint64_t)v729, v268, 16);
          v269 = (NSData *)objc_claimAutoreleasedReturnValue();
          controlMessageKey = self->_controlMessageKey;
          self->_controlMessageKey = v269;

          OSLogHandleForTransportCategory();
          v271 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
          {
            v272 = self->_idsSessionID;
            cbuuid = self->_cbuuid;
            *(_DWORD *)v734 = 138412546;
            *(_QWORD *)&v734[4] = v272;
            *(_WORD *)&v734[12] = 2112;
            *(_QWORD *)&v734[14] = cbuuid;
            _os_log_impl(&dword_19B949000, v271, OS_LOG_TYPE_DEFAULT, "update ids-session-id:%@ for cbuuid:%@.", v734, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v666 = self->_idsSessionID;
              v676 = (char *)self->_cbuuid;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update ids-session-id:%@ for cbuuid:%@."));
              if (_IDSShouldLog())
              {
                v666 = self->_idsSessionID;
                v676 = (char *)self->_cbuuid;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update ids-session-id:%@ for cbuuid:%@."));
              }
            }
          }
        }
        v275 = ids_monotonic_time();
        v276 = v275;
        if (Type == 2)
        {
          if (objc_msgSend_containsObject_(self->_selfAllocateRequestIDs, v274, (uint64_t)v695, v275))
          {
            OSLogHandleForTransportCategory();
            v277 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v734 = 138412290;
              *(_QWORD *)&v734[4] = v695;
              _os_log_impl(&dword_19B949000, v277, OS_LOG_TYPE_DEFAULT, "receive self allocate response for request %@.", v734, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v666 = (NSString *)v695;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive self allocate response for request %@."));
                if (_IDSShouldLog())
                {
                  v666 = (NSString *)v695;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive self allocate response for request %@."));
                }
              }
            }
            objc_msgSend__sendAllocbindRequestForExtIP_startTime_(self, v278, (uint64_t)v22, v276, v666, v676);
            objc_msgSend_removeObject_(self->_selfAllocateRequestIDs, v279, (uint64_t)v695, v280);
            if (objc_msgSend_count(self->_selfAllocateRequestIDs, v281, v282, v283))
            {
              OSLogHandleForTransportCategory();
              v287 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v287, OS_LOG_TYPE_DEFAULT))
              {
                v291 = objc_msgSend_count(self->_selfAllocateRequestIDs, v288, v289, v290);
                *(_DWORD *)v734 = 134217984;
                *(_QWORD *)&v734[4] = v291;
                _os_log_impl(&dword_19B949000, v287, OS_LOG_TYPE_DEFAULT, "selfAllocation count = %lu", v734, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v667 = objc_msgSend_count(self->_selfAllocateRequestIDs, v292, v293, v294);
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("selfAllocation count = %lu"));
                  if (_IDSShouldLog())
                  {
                    objc_msgSend_count(self->_selfAllocateRequestIDs, v295, v296, v297, v667);
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("selfAllocation count = %lu"));
                  }
                }
              }
            }
            else
            {
              self->_hasPendingSelfAllocation = 0;
              objc_msgSend__discardSelfAllocateCandidatePairs(self, v284, v285, v286);
            }
          }
          else
          {
            OSLogHandleForTransportCategory();
            v302 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v302, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v734 = 138412290;
              *(_QWORD *)&v734[4] = v695;
              _os_log_impl(&dword_19B949000, v302, OS_LOG_TYPE_DEFAULT, "receive self allocate response for unknown request %@.", v734, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive self allocate response for unknown request %@."));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive self allocate response for unknown request %@."));
              }
            }
          }
          goto LABEL_463;
        }
        isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID = objc_msgSend__isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID_(self, v274, (uint64_t)v695, v275, key);
        if ((unint64_t)(v724 - 3) > 1)
          goto LABEL_247;
        Value = 0;
        if (theDict)
        {
          v298 = CFSTR("link-protocol");
          if (CFSTR("link-protocol"))
            Value = (void *)CFDictionaryGetValue(theDict, CFSTR("link-protocol"));
        }
        if (v229 == (int)objc_msgSend_intValue(Value, v298, v299, v300, v666, v676))
        {
          if (!v684)
          {
LABEL_208:
            OSLogHandleForTransportCategory();
            v333 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v333, OS_LOG_TYPE_DEFAULT))
            {
              v334 = (&_IDSStunTransportStrings)[v229];
              v335 = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
              if (self->_QUICForQREnabled)
                v336 = CFSTR("YES");
              else
                v336 = CFSTR("NO");
              *(_DWORD *)v734 = 67109634;
              *(_DWORD *)&v734[4] = v335;
              *(_WORD *)&v734[8] = 2080;
              *(_QWORD *)&v734[10] = v334;
              *(_WORD *)&v734[18] = 2112;
              *(_QWORD *)&v734[20] = v336;
              _os_log_impl(&dword_19B949000, v333, OS_LOG_TYPE_DEFAULT, "use port %u for %s, _QUICForQREnabled: %@", v734, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              v337 = (NSString *)(bswap32(*(unsigned __int16 *)&buf[2]) >> 16);
              v338 = self->_QUICForQREnabled ? CFSTR("YES") : CFSTR("NO");
              v676 = (&_IDSStunTransportStrings)[v229];
              v679 = v338;
              v666 = v337;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("use port %u for %s, _QUICForQREnabled: %@"));
              if (_IDSShouldLog())
              {
                v339 = (NSString *)(bswap32(*(unsigned __int16 *)&buf[2]) >> 16);
                if (self->_QUICForQREnabled)
                  v340 = CFSTR("YES");
                else
                  v340 = CFSTR("NO");
                v676 = (&_IDSStunTransportStrings)[v229];
                v679 = (__CFString *)v340;
                v666 = v339;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("use port %u for %s, _QUICForQREnabled: %@"));
              }
            }
            goto LABEL_223;
          }
        }
        else
        {
          if (v229 == 3)
            v328 = 80;
          else
            v328 = 443;
          v329 = __rev16(v328);
          *(_WORD *)&buf[2] = v329;
          if (!v684)
            goto LABEL_208;
          WORD1(v739[0]) = v329;
        }
        OSLogHandleForTransportCategory();
        v330 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v330, OS_LOG_TYPE_DEFAULT))
        {
          v331 = (&_IDSStunTransportStrings)[v229];
          *(_DWORD *)v734 = 67109378;
          *(_DWORD *)&v734[4] = bswap32(WORD1(v739[0])) >> 16;
          *(_WORD *)&v734[8] = 2080;
          *(_QWORD *)&v734[10] = v331;
          _os_log_impl(&dword_19B949000, v330, OS_LOG_TYPE_DEFAULT, "IPv6 only: use port %u for %s.", v734, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v666 = (NSString *)(bswap32(WORD1(v739[0])) >> 16);
            v676 = (&_IDSStunTransportStrings)[v229];
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IPv6 only: use port %u for %s."));
            if (_IDSShouldLog())
            {
              v666 = (NSString *)(bswap32(WORD1(v739[0])) >> 16);
              v676 = (&_IDSStunTransportStrings)[v229];
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IPv6 only: use port %u for %s."));
            }
          }
        }
LABEL_223:
        if (self->_H2FallbackEnabled)
        {
          if (v229 == 3)
          {
            v341 = self->_tcpLink;
            objc_msgSend_GlobalLink(IDSFoundationLog, v342, v343, v344);
            v345 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v345, OS_LOG_TYPE_DEFAULT))
            {
              tcpLink = self->_tcpLink;
              *(_DWORD *)v734 = 138412290;
              *(_QWORD *)&v734[4] = tcpLink;
              _os_log_impl(&dword_19B949000, v345, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: Use tcpLink since H2 is blocked: %@", v734, 0xCu);
            }

            objc_msgSend_address(v701, v347, v348, v349);
            v350 = (void *)objc_claimAutoreleasedReturnValue();
            v354 = objc_msgSend_sa(v350, v351, v352, v353);
            v357 = (unsigned __int8 *)objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v341, v355, v215, v356, v354, LOWORD(self->_portRange), v686, self->_clientUUID, 0);

            if (!v357)
              goto LABEL_246;
            *(_QWORD *)&v360 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v360 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v737 = v360;
            v738 = v360;
            *(_OWORD *)&v735[32] = v360;
            v736 = v360;
            *(_OWORD *)v735 = v360;
            *(_OWORD *)&v735[16] = v360;
            *(_OWORD *)v734 = v360;
            *(_OWORD *)&v734[16] = v360;
            objc_msgSend_address(v701, v358, v359, -3.72066208e-103);
            v361 = (void *)objc_claimAutoreleasedReturnValue();
            v365 = objc_msgSend_sa(v361, v362, v363, v364);
            SAToIPPortString(v734, 0x80uLL, v365);

            objc_msgSend_address(v701, v366, v367, v368);
            v369 = (void *)objc_claimAutoreleasedReturnValue();
            v373 = (void *)objc_msgSend_sa(v369, v370, v371, v372);
            memcpy(v373, v357, *v357);

            *(_QWORD *)&v374 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v374 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v732 = v374;
            v733 = v374;
            v730 = v374;
            v731 = v374;
            *(_OWORD *)&v729[32] = v374;
            *(_OWORD *)&v729[48] = v374;
            *(_OWORD *)v729 = v374;
            *(_OWORD *)&v729[16] = v374;
            objc_msgSend_address(v701, v375, v376, -3.72066208e-103);
            v377 = (void *)objc_claimAutoreleasedReturnValue();
            v381 = objc_msgSend_sa(v377, v378, v379, v380);
            SAToIPPortString(v729, 0x80uLL, v381);

            objc_msgSend_GlobalLink(IDSFoundationLog, v382, v383, v384);
            v385 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v725 = 136315394;
              v726 = v734;
              v727 = 2080;
              v728 = v729;
              _os_log_impl(&dword_19B949000, v385, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: TCP connection: change the local address from %s to: %s", v725, 0x16u);
            }
            goto LABEL_245;
          }
LABEL_247:
          *(_QWORD *)&v431 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v431 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v737 = v431;
          v738 = v431;
          *(_OWORD *)&v735[32] = v431;
          v736 = v431;
          *(_OWORD *)v735 = v431;
          *(_OWORD *)&v735[16] = v431;
          *(_OWORD *)v734 = v431;
          *(_OWORD *)&v734[16] = v431;
          if (FirstPrefix == 0
            || v684
            || (objc_msgSend__synthesizeNAT64ForAddress_withPrefix_toAddress_(self, v298, v686, -3.72066208e-103, FirstPrefix, v734) & 1) == 0)
          {
            v432 = (_BYTE *)v686;
          }
          else
          {
            v432 = v734;
          }
          objc_msgSend_address(v701, v298, v299, *(double *)&v431, v666);
          v433 = (void *)objc_claimAutoreleasedReturnValue();
          v437 = objc_msgSend_sa(v433, v434, v435, v436);
          tokenForStunCandidatePair(v437, (uint64_t)v432, key);
          v690 = (IDSGlobalLink *)objc_claimAutoreleasedReturnValue();

          tokenToCandidatePairs = self->_tokenToCandidatePairs;
          if (tokenToCandidatePairs
            && v690
            && (v439 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v690)) != 0)
          {
            v440 = v439;
            OSLogHandleForTransportCategory();
            v441 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v441, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v729 = 138412546;
              *(_QWORD *)&v729[4] = v22;
              *(_WORD *)&v729[12] = 2112;
              *(_QWORD *)&v729[14] = theDict;
              _os_log_impl(&dword_19B949000, v441, OS_LOG_TYPE_DEFAULT, "setPropertiesWithRelaySessionInfo: qrSessionInfo: %@, sessionInfo: %@", v729, 0x16u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v669 = v22;
                v676 = (char *)theDict;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("setPropertiesWithRelaySessionInfo: qrSessionInfo: %@, sessionInfo: %@"));
                if (_IDSShouldLog())
                {
                  v669 = v22;
                  v676 = (char *)theDict;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("setPropertiesWithRelaySessionInfo: qrSessionInfo: %@, sessionInfo: %@"));
                }
              }
            }
            v445 = objc_msgSend_state(v440, v442, v443, v444, v669, v676);
            v448 = v445;
            if (v445 <= 4 && ((1 << v445) & 0x1A) != 0)
            {
              OSLogHandleForTransportCategory();
              v449 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v449, OS_LOG_TYPE_DEFAULT))
              {
                v450 = (&_IDSStunCandidatePairStateStrings)[v448];
                *(_DWORD *)v729 = 138412546;
                *(_QWORD *)&v729[4] = v690;
                *(_WORD *)&v729[12] = 2080;
                *(_QWORD *)&v729[14] = v450;
                _os_log_impl(&dword_19B949000, v449, OS_LOG_TYPE_DEFAULT, "skip allocbind request for %@, state [%s]", v729, 0x16u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v670 = v690;
                  v676 = (&_IDSStunCandidatePairStateStrings)[v448];
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip allocbind request for %@, state [%s]"));
                  if (_IDSShouldLog())
                  {
                    v670 = v690;
                    v676 = (&_IDSStunCandidatePairStateStrings)[v448];
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip allocbind request for %@, state [%s]"));
                  }
                }
              }
            }
            else
            {
              objc_msgSend_setPropertiesWithRelaySessionInfo_sessionInfoDict_enableSKE_(v440, v446, (uint64_t)v22, v447, theDict, self->_enableSKE);
            }
            if (v448 <= 4 && ((1 << v448) & 0x1A) != 0)
              goto LABEL_462;
          }
          else
          {
            if (self->_isSessionAcceptedWithNoCandidatePair)
            {
              v453 = self->_isInitiator;
              v454 = theDict;
              if (self->_acceptedRelaySessionID && self->_isInitiator)
              {
                self->_isSessionAcceptedWithNoCandidatePair = 0;
                v453 = 1;
                isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID = 1;
              }
            }
            else
            {
              v453 = self->_isInitiator;
              v454 = theDict;
            }
            GLUtilCreateRelayCandidatePair(v22, v454, v701, v686, isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID, v453, self->_enableSKE, v724, self);
            v455 = (void *)objc_claimAutoreleasedReturnValue();
            v459 = objc_msgSend_clat46(v701, v456, v457, v458);
            objc_msgSend_local(v455, v460, v461, v462);
            v463 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setIsCLAT46_(v463, v464, v459, v465);

            if (FirstPrefix != 0 && !v684)
            {
              objc_msgSend_local(v455, v466, v467, v468);
              v469 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setPrefix_(v469, v470, (uint64_t)FirstPrefix, v471);

              objc_msgSend_synthesizeNat64WithPrefix(v455, v472, v473, v474);
              objc_msgSend_setIsNAT64_(v455, v475, 1, v476);
              objc_msgSend_candidatePairToken(v455, v477, v478, v479);
              v480 = objc_claimAutoreleasedReturnValue();

              v690 = (IDSGlobalLink *)v480;
            }
            OSLogHandleForTransportCategory();
            v481 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v481, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v455, v482, v483, v484);
              v485 = (id)objc_claimAutoreleasedReturnValue();
              v486 = v485;
              v487 = CFSTR("NO");
              if (isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID)
                v487 = CFSTR("YES");
              *(_DWORD *)v729 = 138412546;
              *(_QWORD *)&v729[4] = v485;
              *(_WORD *)&v729[12] = 2112;
              *(_QWORD *)&v729[14] = v487;
              _os_log_impl(&dword_19B949000, v481, OS_LOG_TYPE_DEFAULT, "create relay candidate pair, token: %@, isAcceptedRelaySession = %@", v729, 0x16u);

            }
            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v455, v488, v489, v490);
              v491 = (void *)objc_claimAutoreleasedReturnValue();
              v492 = isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID ? CFSTR("YES") : CFSTR("NO");
              v670 = v491;
              v676 = (char *)v492;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("create relay candidate pair, token: %@, isAcceptedRelaySession = %@"));

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v455, v493, v494, v495, v491, v492);
                v670 = (void *)objc_claimAutoreleasedReturnValue();
                v676 = (char *)v492;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("create relay candidate pair, token: %@, isAcceptedRelaySession = %@"));

              }
            }
            if (!self->_tokenToCandidatePairs)
            {
              v496 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v497 = self->_tokenToCandidatePairs;
              self->_tokenToCandidatePairs = v496;

            }
            v498 = v455;
            if (v498)
            {
              v440 = v498;
              CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, v690, v498);
            }
            else
            {
              v440 = 0;
              v499 = MEMORY[0x1E0C81028];
              v500 = MEMORY[0x1E0C81028];
              if (os_log_type_enabled(v499, OS_LOG_TYPE_ERROR))
                sub_19BAF12A0();

            }
          }
          v687 = v440;
          objc_msgSend_setIsConnectToQRIPv6Enabled_(v440, v451, v694, v452, v670, v676);
          if (v696)
          {
            objc_msgSend_local(v440, v501, v502, v503);
            v504 = (void *)objc_claimAutoreleasedReturnValue();

            if (v504)
            {
              objc_msgSend_local(v440, v505, v506, v507);
              v508 = (void *)objc_claimAutoreleasedReturnValue();
              v512 = objc_msgSend_radioAccessTechnology(v508, v509, v510, v511);

            }
            else
            {
              v512 = 10;
            }
            if (theDict)
              v524 = CFSTR("allocate-time") == 0;
            else
              v524 = 1;
            v525 = !v524;
            if (!v524)
              CFDictionaryGetValue(theDict, CFSTR("allocate-time"));
            objc_opt_class();
            v529 = 0.0;
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              if (v525)
                v530 = (void *)CFDictionaryGetValue(theDict, CFSTR("allocate-time"));
              else
                v530 = 0;
              objc_msgSend_doubleValue(v530, v526, v527, v528);
              v529 = v528;
            }
            v535 = v724;
            v536 = objc_msgSend_relayServerProviderType(v22, v526, v527, v528);
            v537 = self->_idsSessionID;
            objc_msgSend_reportingDataBlob(v22, v538, v539, v540);
            v541 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v671) = self->_isInitiator;
            objc_msgSend__addQRAAWDBlock_allocateRequestTime_inferredExternalRAT_stunTransport_relayProviderType_idsSessionID_reportingDataBlob_isInitiator_(self, v542, (uint64_t)v695, v529, v512, v535, v536, v537, v541, v671);

            if (self->_isInitiator)
            {
              inviteSentTime = self->_inviteSentTime;
              v546 = v701;
              if (inviteSentTime != 0.0)
                goto LABEL_349;
              v547 = 0;
              if (theDict)
              {
                v543 = CFSTR("gl-option-invite-sent-time");
                if (CFSTR("gl-option-invite-sent-time"))
                  v547 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-invite-sent-time"));
              }
              objc_msgSend_doubleValue(v547, (const char *)v543, v544, inviteSentTime);
              self->_inviteSentTime = v548;
            }
            else
            {
              inviteRecvTime = self->_inviteRecvTime;
              v550 = theDict;
              if (inviteRecvTime == 0.0)
              {
                v551 = 0;
                if (theDict)
                {
                  v543 = CFSTR("gl-option-invite-recv-time");
                  if (CFSTR("gl-option-invite-recv-time"))
                    v551 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-invite-recv-time"));
                }
                objc_msgSend_doubleValue(v551, (const char *)v543, v544, inviteRecvTime);
                self->_inviteRecvTime = inviteRecvTime;
                v550 = theDict;
              }
              v552 = 0;
              if (v550)
              {
                v543 = CFSTR("gl-option-use-secure-control-message");
                if (CFSTR("gl-option-use-secure-control-message"))
                  v552 = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-use-secure-control-message"));
              }
              v553 = objc_msgSend_BOOLValue(v552, (const char *)v543, v544, inviteRecvTime);
              if (self->_useSecureControlMessage)
                v554 = 0;
              else
                v554 = v553;
              v524 = v554 == 1;
              v546 = v701;
              if (!v524)
                goto LABEL_349;
              self->_useSecureControlMessage = 1;
              OSLogHandleForTransportCategory();
              v555 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v555, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v729 = 0;
                _os_log_impl(&dword_19B949000, v555, OS_LOG_TYPE_DEFAULT, "enable secure control message for Receiver.", v729, 2u);
              }

              v556 = os_log_shim_legacy_logging_enabled();
              v546 = v701;
              if (!v556
                || (v557 = _IDSShouldLogTransport(), v546 = v701, !v557)
                || (_IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("enable secure control message for Receiver.")),
                    v558 = _IDSShouldLog(),
                    v546 = v701,
                    !v558))
              {
LABEL_349:
                allocbindStartTime = self->_allocbindStartTime;
                if (allocbindStartTime != 0.0)
                  goto LABEL_366;
                self->_allocbindStartTime = v276;
                if (self->_isInitiator)
                {
                  OSLogHandleForTransportCategory();
                  v560 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v560, OS_LOG_TYPE_DEFAULT))
                  {
                    v561 = self->_inviteSentTime;
                    v562 = self->_allocbindStartTime;
                    *(_DWORD *)v729 = 134218240;
                    *(double *)&v729[4] = v561;
                    *(_WORD *)&v729[12] = 2048;
                    *(double *)&v729[14] = v562;
                    _os_log_impl(&dword_19B949000, v560, OS_LOG_TYPE_DEFAULT, "invite sent: %.6f, allocbind start: %.6f.", v729, 0x16u);
                  }

                  v563 = os_log_shim_legacy_logging_enabled();
                  v546 = v701;
                  if (v563)
                  {
                    v564 = _IDSShouldLogTransport();
                    v546 = v701;
                    if (v564)
                    {
                      v674 = self->_inviteSentTime;
                      v677 = self->_allocbindStartTime;
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invite sent: %.6f, allocbind start: %.6f."));
                      v565 = _IDSShouldLog();
                      v546 = v701;
                      if (v565)
                      {
                        v674 = self->_inviteSentTime;
                        v677 = self->_allocbindStartTime;
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invite sent: %.6f, allocbind start: %.6f."));
LABEL_365:
                        v546 = v701;
                      }
                    }
                  }
                }
                else
                {
                  if (self->_isUPlusOneSession)
                  {
                    self->_calleeAcceptTime = ids_monotonic_time();
                    v276 = self->_allocbindStartTime;
                  }
                  v566 = ntpTime32(v276);
                  self->_acceptDelayU32 = v566 - ntpTime32(self->_inviteRecvTime);
                  OSLogHandleForTransportCategory();
                  v567 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v567, OS_LOG_TYPE_DEFAULT))
                  {
                    v568 = self->_inviteRecvTime;
                    v569 = self->_allocbindStartTime;
                    acceptDelayU32 = self->_acceptDelayU32;
                    *(_DWORD *)v729 = 134218752;
                    *(double *)&v729[4] = v568;
                    *(_WORD *)&v729[12] = 2048;
                    *(double *)&v729[14] = v569;
                    *(_WORD *)&v729[22] = 1024;
                    *(_DWORD *)&v729[24] = acceptDelayU32;
                    *(_WORD *)&v729[28] = 2048;
                    *(double *)&v729[30] = v569 - v568;
                    _os_log_impl(&dword_19B949000, v567, OS_LOG_TYPE_DEFAULT, "invite recv: %.6f, allocbind start: %.6f, accept delay: %08x/%.6f", v729, 0x26u);
                  }

                  v571 = os_log_shim_legacy_logging_enabled();
                  v546 = v701;
                  if (v571)
                  {
                    v572 = _IDSShouldLogTransport();
                    v546 = v701;
                    if (v572)
                    {
                      v681 = self->_allocbindStartTime - self->_inviteRecvTime;
                      v679 = (__CFString *)self->_acceptDelayU32;
                      v674 = self->_inviteRecvTime;
                      v677 = self->_allocbindStartTime;
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invite recv: %.6f, allocbind start: %.6f, accept delay: %08x/%.6f"));
                      v573 = _IDSShouldLog();
                      v546 = v701;
                      if (v573)
                      {
                        v681 = self->_allocbindStartTime - self->_inviteRecvTime;
                        v679 = (__CFString *)self->_acceptDelayU32;
                        v674 = self->_inviteRecvTime;
                        v677 = self->_allocbindStartTime;
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invite recv: %.6f, allocbind start: %.6f, accept delay: %08x/%.6f"));
                        goto LABEL_365;
                      }
                    }
                  }
                }
LABEL_366:
                v574 = self->_metricsCollector;
                objc_msgSend_name(v546, (const char *)v543, v544, allocbindStartTime, *(_QWORD *)&v674, *(_QWORD *)&v677, v679, *(_QWORD *)&v681);
                v575 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_willSendAllocbindRequestThroughInterface_(v574, v576, (uint64_t)v575, v577);

                objc_msgSend_GlobalLink(IDSFoundationLog, v578, v579, v580);
                v581 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v581, OS_LOG_TYPE_DEFAULT))
                {
                  if (self->_isInitiator)
                    v585 = "Initiator";
                  else
                    v585 = "Receiver";
                  v586 = (&_IDSStunTransportStrings)[v229];
                  v587 = self->_idsSessionID;
                  objc_msgSend_relaySessionID(v22, v582, v583, v584);
                  v588 = (id)objc_claimAutoreleasedReturnValue();
                  v589 = v588;
                  *(_DWORD *)v729 = 136316162;
                  v590 = CFSTR("NO");
                  *(_QWORD *)&v729[4] = v585;
                  *(_WORD *)&v729[12] = 2080;
                  if (isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID)
                    v590 = CFSTR("YES");
                  *(_QWORD *)&v729[14] = v586;
                  *(_WORD *)&v729[22] = 2112;
                  *(_QWORD *)&v729[24] = v587;
                  *(_WORD *)&v729[32] = 2112;
                  *(_QWORD *)&v729[34] = v588;
                  *(_WORD *)&v729[42] = 2112;
                  *(_QWORD *)&v729[44] = v590;
                  _os_log_impl(&dword_19B949000, v581, OS_LOG_TYPE_DEFAULT, "*** Connect as %s, actualSelectedTransport: %s, IDSSessionID: %@, QRSessionID: %@, Accepted: %@.", v729, 0x34u);

                }
                self->_hasPendingAllocation = 0;
                if (self->_state <= 1)
                {
                  OSLogHandleForTransportCategory();
                  v591 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v591, OS_LOG_TYPE_DEFAULT))
                  {
                    v592 = _IDSLinkStateStrings[self->_state];
                    *(_DWORD *)v729 = 138412802;
                    *(_QWORD *)&v729[4] = self;
                    *(_WORD *)&v729[12] = 2080;
                    *(_QWORD *)&v729[14] = v592;
                    *(_WORD *)&v729[22] = 2080;
                    *(char **)&v729[24] = off_1EE40A110[0];
                    _os_log_impl(&dword_19B949000, v591, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", v729, 0x20u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      v678 = _IDSLinkStateStrings[self->_state];
                      v680 = off_1EE40A110[0];
                      v675 = self;
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update GL: %@ state (%s->%s)."));
                      if (_IDSShouldLog())
                      {
                        v678 = _IDSLinkStateStrings[self->_state];
                        v680 = off_1EE40A110[0];
                        v675 = self;
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update GL: %@ state (%s->%s)."));
                      }
                    }
                  }
                  self->_state = 2;
                }
                OSLogHandleForTransportCategory();
                v593 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v593, OS_LOG_TYPE_DEFAULT))
                {
                  v597 = objc_msgSend_length(v692, v594, v595, v596);
                  v601 = objc_msgSend_length(v691, v598, v599, v600);
                  *(_DWORD *)v729 = 138413058;
                  *(_QWORD *)&v729[4] = v690;
                  *(_WORD *)&v729[12] = 2048;
                  *(_QWORD *)&v729[14] = v597;
                  *(_WORD *)&v729[22] = 2048;
                  *(_QWORD *)&v729[24] = v601;
                  *(_WORD *)&v729[32] = 2048;
                  *(_QWORD *)&v729[34] = v685;
                  _os_log_impl(&dword_19B949000, v593, OS_LOG_TYPE_DEFAULT, "start allocbind for %@ (token %lu bytes, key %lu bytes), participantID:%llu", v729, 0x2Au);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v605 = objc_msgSend_length(v692, v602, v603, v604);
                    v680 = (char *)objc_msgSend_length(v691, v606, v607, v608);
                    v682 = v685;
                    v675 = v690;
                    v678 = (char *)v605;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start allocbind for %@ (token %lu bytes, key %lu bytes), participantID:%llu"));
                    if (_IDSShouldLog())
                    {
                      v612 = objc_msgSend_length(v692, v609, v610, v611, v690, v605, v680, v685);
                      v680 = (char *)objc_msgSend_length(v691, v613, v614, v615);
                      v682 = v685;
                      v675 = v690;
                      v678 = (char *)v612;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start allocbind for %@ (token %lu bytes, key %lu bytes), participantID:%llu"));
                    }
                  }
                }
                if (v699)
                {
                  v616 = _Block_copy(v699);
                  connectReadyHandler = self->_connectReadyHandler;
                  self->_connectReadyHandler = v616;

                }
                if (self->_QUICForQREnabled)
                {
                  if (v229 == 2)
                  {
                    OSLogHandleForTransportCategory();
                    v618 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v618, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v729 = 0;
                      _os_log_impl(&dword_19B949000, v618, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: using QUIC", v729, 2u);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_connectWithSessionInfo: using QUIC"));
                        if (_IDSShouldLog())
                          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_connectWithSessionInfo: using QUIC"));
                      }
                    }
                    objc_msgSend_candidatePairToken(v687, v619, v620, v621, v675, v678, v680, v682);
                    v622 = (void *)objc_claimAutoreleasedReturnValue();
                    v626 = objc_msgSend_pendingNoSessionStateAllocbind(v687, v623, v624, v625);
                    objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(self, v627, (uint64_t)v622, v628, 0, 0, 1, v626);

                    goto LABEL_433;
                  }
                  if (self->_H2FallbackEnabled && v229 == 4)
                  {
                    OSLogHandleForTransportCategory();
                    v635 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v635, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v729 = 0;
                      _os_log_impl(&dword_19B949000, v635, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: using H2", v729, 2u);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_connectWithSessionInfo: using H2"));
                        if (_IDSShouldLog())
                          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_connectWithSessionInfo: using H2"));
                      }
                    }
                    v711[0] = MEMORY[0x1E0C809B0];
                    v711[1] = 3221225472;
                    v711[2] = sub_19B9C5E7C;
                    v711[3] = &unk_1E3C1FDD8;
                    v711[4] = self;
                    v712 = v687;
                    objc_msgSend__connectNWTCPLink_disconnectAfterUse_connectedHandler_(self, v636, (uint64_t)v712, v637, 0, v711);

LABEL_433:
                    objc_msgSend__reportAWDAllocateTime(self, v629, v630, v631);
                    if (Type == 3)
                      objc_msgSend_updateURIToParticipantIDMapping_(v687, v645, (uint64_t)theDict, v647);
                    *(_DWORD *)v725 = -1431655766;
                    if (self->_shouldFallbackToTCPFirst)
                    {
                      if (v724 != 3)
                      {
                        if (v724 == 2)
                          goto LABEL_443;
                        goto LABEL_441;
                      }
                    }
                    else
                    {
                      if (v724 == 4)
                      {
LABEL_443:
                        objc_msgSend_allValues(self->_tokenToCandidatePairs, v645, v646, v647);
                        v653 = (void *)objc_claimAutoreleasedReturnValue();
                        GLUtilGetLinkInformation(key, 3, v725, 0, v653);

                        v650 = v724;
                        v651 = *(_DWORD *)v725 == 0;
                        v652 = 3;
LABEL_444:
                        if (v651)
                          v648 = v652;
                        else
                          v648 = v650;
                        goto LABEL_447;
                      }
                      if (v724 != 2)
                      {
LABEL_441:
                        v648 = 0;
LABEL_447:
                        if (!v688)
                        {
                          HasVPNInterfaceForSelectedAddress = GLUtilHasVPNInterfaceForSelectedAddress(v701, self->_interfaceAddressArray);
                          v647 = 1.0;
                          if (HasVPNInterfaceForSelectedAddress)
                            v146 = 1.0;
                        }
                        if (Type == 3 || v648 && v648 != v724)
                        {
                          objc_msgSend_sharedInstance(IDSServerBag, v645, v646, v647, v675);
                          v655 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend_objectForKey_(v655, v656, (uint64_t)CFSTR("ids-tcp-fallback-disabled-for-two-way"), v657);
                          v658 = (void *)objc_claimAutoreleasedReturnValue();

                          if (Type == 1 && objc_msgSend_BOOLValue(v658, v659, v660, v661))
                          {
                            objc_msgSend_GlobalLink(IDSFoundationLog, v659, v660, v661);
                            v662 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v662, OS_LOG_TYPE_DEFAULT))
                            {
                              v663 = (&_IDSStunTransportStrings)[v648];
                              *(_DWORD *)v729 = 136315138;
                              *(_QWORD *)&v729[4] = v663;
                              _os_log_impl(&dword_19B949000, v662, OS_LOG_TYPE_DEFAULT, "Two way allocation: don't fallback to %s due to server bag configurations", v729, 0xCu);
                            }
                          }
                          else
                          {
                            objc_msgSend_GlobalLink(IDSFoundationLog, v659, v660, v661);
                            v664 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v664, OS_LOG_TYPE_DEFAULT))
                            {
                              v665 = (&_IDSStunTransportStrings)[v648];
                              *(_DWORD *)v729 = 136315650;
                              *(_QWORD *)&v729[4] = v665;
                              *(_WORD *)&v729[12] = 2112;
                              *(_QWORD *)&v729[14] = key;
                              *(_WORD *)&v729[22] = 2048;
                              *(double *)&v729[24] = v146;
                              _os_log_impl(&dword_19B949000, v664, OS_LOG_TYPE_DEFAULT, "scheduled [%s] for session %@ after %.2f second(s).", v729, 0x20u);
                            }

                            v702[0] = MEMORY[0x1E0C809B0];
                            v702[1] = 3221225472;
                            v702[2] = sub_19B9C5ED8;
                            v702[3] = &unk_1E3C1FE00;
                            v703 = v687;
                            v704 = key;
                            v705 = self;
                            v708 = v648;
                            v706 = theDict;
                            v710 = v696;
                            v707 = v699;
                            v709 = v693;
                            IDSTransportThreadAddBlockAfter(v702, v146);

                            v662 = v703;
                          }

                        }
                        goto LABEL_461;
                      }
                    }
                    objc_msgSend_allValues(self->_tokenToCandidatePairs, v645, v646, v647);
                    v649 = (void *)objc_claimAutoreleasedReturnValue();
                    GLUtilGetLinkInformation(key, 4, v725, 0, v649);

                    v650 = v724;
                    v651 = *(_DWORD *)v725 == 0;
                    v652 = 4;
                    goto LABEL_444;
                  }
                  OSLogHandleForTransportCategory();
                  v638 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v638, OS_LOG_TYPE_DEFAULT))
                  {
                    v639 = CFSTR("YES");
                    v640 = (&_IDSStunTransportStrings)[v229];
                    if (!self->_H2FallbackEnabled)
                      v639 = CFSTR("NO");
                    *(_DWORD *)v729 = 138412546;
                    *(_QWORD *)&v729[4] = v639;
                    *(_WORD *)&v729[12] = 2080;
                    *(_QWORD *)&v729[14] = v640;
                    _os_log_impl(&dword_19B949000, v638, OS_LOG_TYPE_DEFAULT, "_H2FallbackEnabled: %@, actual transport: %s, _connectWithSessionInfo: using STUN", v729, 0x16u);
                  }

                  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
                  {
                    v641 = self->_H2FallbackEnabled ? CFSTR("YES") : CFSTR("NO");
                    v675 = (IDSGlobalLink *)v641;
                    v678 = (&_IDSStunTransportStrings)[v229];
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_H2FallbackEnabled: %@, actual transport: %s, _connectWithSessionInfo: using STUN"));
                    if (_IDSShouldLog())
                    {
                      if (self->_H2FallbackEnabled)
                        v642 = CFSTR("YES");
                      else
                        v642 = CFSTR("NO");
                      v675 = (IDSGlobalLink *)v642;
                      v678 = (&_IDSStunTransportStrings)[v229];
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_H2FallbackEnabled: %@, actual transport: %s, _connectWithSessionInfo: using STUN"));
                    }
                  }
                }
                else
                {
                  OSLogHandleForTransportCategory();
                  v632 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v632, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)v729 = 0;
                    _os_log_impl(&dword_19B949000, v632, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: using STUN", v729, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_connectWithSessionInfo: using STUN"));
                      if (_IDSShouldLog())
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_connectWithSessionInfo: using STUN"));
                    }
                  }
                }
                objc_msgSend_setIsQUIC_(v687, v633, 0, v634, v675, v678, v680, v682);
                objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(self, v643, (uint64_t)v690, v644, 0, 0, 0);
                goto LABEL_433;
              }
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("enable secure control message for Receiver."));
            }
            v546 = v701;
            goto LABEL_349;
          }
          OSLogHandleForTransportCategory();
          v513 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v513, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_groupID(v22, v514, v515, v516);
            v517 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v729 = 138412546;
            *(_QWORD *)&v729[4] = v517;
            *(_WORD *)&v729[12] = 2112;
            *(_QWORD *)&v729[14] = key;
            _os_log_impl(&dword_19B949000, v513, OS_LOG_TYPE_DEFAULT, "send info request for active participants for group %@, session %@.", v729, 0x16u);

          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_groupID(v22, v518, v520, v519);
              v672 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send info request for active participants for group %@, session %@."));

              if (_IDSShouldLog())
              {
                objc_msgSend_groupID(v22, v518, v521, v519, v672, key);
                v673 = (void *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send info request for active participants for group %@, session %@."));

              }
            }
          }
          if (self->_QUICForQREnabled)
          {
            if (v724 == 2)
            {
              v715[0] = MEMORY[0x1E0C809B0];
              v715[1] = 3221225472;
              v715[2] = sub_19B9C5E6C;
              v715[3] = &unk_1E3C1F898;
              v716 = v687;
              v440 = v716;
              objc_msgSend__connectNWLink_disconnectAfterUse_connectedHandler_(self, v522, (uint64_t)v716, v523, 1, v715);

LABEL_462:
              goto LABEL_463;
            }
            if (self->_H2FallbackEnabled)
            {
              v713[0] = MEMORY[0x1E0C809B0];
              v713[1] = 3221225472;
              v713[2] = sub_19B9C5E74;
              v713[3] = &unk_1E3C1F898;
              v714 = v687;
              v440 = v714;
              objc_msgSend__connectNWTCPLink_disconnectAfterUse_connectedHandler_(self, v533, (uint64_t)v714, v534, 1, v713);

              goto LABEL_462;
            }
          }
          objc_msgSend_setIsQUIC_(v687, v518, 0, v519);
          objc_msgSend_sendInfoRequest_(v687, v531, 0, v532);
LABEL_461:
          v440 = v687;
          goto LABEL_462;
        }
        if (v229 == 4)
        {
          v341 = self->_tcpSSLLink;
          objc_msgSend_GlobalLink(IDSFoundationLog, v392, v393, v394);
          v389 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT))
          {
            tcpSSLLink = self->_tcpSSLLink;
            *(_DWORD *)v734 = 138412290;
            *(_QWORD *)&v734[4] = tcpSSLLink;
            v391 = "_connectWithSessionInfo: Use tcpSSLLink: %@";
            goto LABEL_239;
          }
        }
        else
        {
          if (v229 != 3)
          {
            v341 = 0;
            goto LABEL_242;
          }
          v341 = self->_tcpLink;
          objc_msgSend_GlobalLink(IDSFoundationLog, v386, v387, v388);
          v389 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT))
          {
            v390 = self->_tcpLink;
            *(_DWORD *)v734 = 138412290;
            *(_QWORD *)&v734[4] = v390;
            v391 = "_connectWithSessionInfo: Use tcpLink: %@";
LABEL_239:
            _os_log_impl(&dword_19B949000, v389, OS_LOG_TYPE_DEFAULT, v391, v734, 0xCu);
          }
        }

LABEL_242:
        objc_msgSend_address(v701, v298, v299, v332, v666, v676, v679);
        v396 = (void *)objc_claimAutoreleasedReturnValue();
        v400 = objc_msgSend_sa(v396, v397, v398, v399);
        v403 = (unsigned __int8 *)objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v341, v401, v215, v402, v400, LOWORD(self->_portRange), v686, self->_clientUUID, 0);

        if (!v403)
        {
LABEL_246:

          goto LABEL_247;
        }
        *(_QWORD *)&v406 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v406 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v737 = v406;
        v738 = v406;
        *(_OWORD *)&v735[32] = v406;
        v736 = v406;
        *(_OWORD *)v735 = v406;
        *(_OWORD *)&v735[16] = v406;
        *(_OWORD *)v734 = v406;
        *(_OWORD *)&v734[16] = v406;
        objc_msgSend_address(v701, v404, v405, -3.72066208e-103);
        v407 = (void *)objc_claimAutoreleasedReturnValue();
        v411 = objc_msgSend_sa(v407, v408, v409, v410);
        SAToIPPortString(v734, 0x80uLL, v411);

        objc_msgSend_address(v701, v412, v413, v414);
        v415 = (void *)objc_claimAutoreleasedReturnValue();
        v419 = (void *)objc_msgSend_sa(v415, v416, v417, v418);
        memcpy(v419, v403, *v403);

        *(_QWORD *)&v420 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v420 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v732 = v420;
        v733 = v420;
        v730 = v420;
        v731 = v420;
        *(_OWORD *)&v729[32] = v420;
        *(_OWORD *)&v729[48] = v420;
        *(_OWORD *)v729 = v420;
        *(_OWORD *)&v729[16] = v420;
        objc_msgSend_address(v701, v421, v422, -3.72066208e-103);
        v423 = (void *)objc_claimAutoreleasedReturnValue();
        v427 = objc_msgSend_sa(v423, v424, v425, v426);
        SAToIPPortString(v729, 0x80uLL, v427);

        objc_msgSend_GlobalLink(IDSFoundationLog, v428, v429, v430);
        v385 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v725 = 136315394;
          v726 = v734;
          v727 = 2080;
          v728 = v729;
          _os_log_impl(&dword_19B949000, v385, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: TCP connection: change the local address from %s to: %s", v725, 0x16u);
        }
LABEL_245:

        goto LABEL_246;
      }
      if (self->_isInitiator)
      {
        v205 = 0;
      }
      else
      {
        objc_msgSend_objectForKey_(theDict, v190, (uint64_t)CFSTR("qia"), v192);
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        v205 = objc_msgSend_intValue(v206, v207, v208, v209);

        v202 = v724;
      }
      preferCellularForCallSetup = self->_preferCellularForCallSetup;
      v211 = self->_interfaceAddressArray;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v190, v191, v192);
      v212 = (void *)objc_claimAutoreleasedReturnValue();
      if (Type == 3)
        v213 = key;
      else
        v213 = 0;
      GLUtilSelectInterface(v202, preferCellularForCallSetup, v211, v212, v213, v205, v694, v693);
      v214 = objc_claimAutoreleasedReturnValue();

      v204 = (id)v214;
    }
    if (!v204)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v190, v191, v192);
      v321 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v321, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v734 = 0;
        _os_log_impl(&dword_19B949000, v321, OS_LOG_TYPE_DEFAULT, "Found no local interface available for QR.", v734, 2u);
      }

      if ((v37 & 1) == 0)
      {
        sub_19B9C5D58(v699, 6, (uint64_t)CFSTR("No local interface available"));
        if (self->_clientType == 6)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v322, v323, v324);
          v325 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v325, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v734 = 0;
            _os_log_impl(&dword_19B949000, v325, OS_LOG_TYPE_DEFAULT, "Found no local interface available for QR. - gathering ABC with packet capture", v734, 2u);
          }

          objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(self, v326, (uint64_t)CFSTR("IDSQuickRelayShared"), v327, CFSTR("FailedToConnect"), CFSTR("NoLocalNetwork"), 15);
        }
      }
      v701 = 0;
      goto LABEL_463;
    }
    goto LABEL_115;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = self;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip connecting to QR.", buf, 0x16u);
  }
LABEL_4:

LABEL_465:
}

- (void)_selectStunTransport:(int64_t *)a3 andInterfaceAddress:(id *)a4 forRelaySessionID:(id)a5 preferIPv4:(BOOL)a6 isValidSA:(BOOL)a7
{
  double v7;

  objc_msgSend__selectStunTransport_andInterfaceAddress_forRelaySessionID_preferIPv4_wantOnlyCell_wantOnlyNonCell_isValidSA_(self, a2, (uint64_t)a3, v7, a4, a5, a6, 0, 0, a7);
}

- (void)_selectStunTransport:(int64_t *)a3 andInterfaceAddress:(id *)a4 forRelaySessionID:(id)a5 preferIPv4:(BOOL)a6 wantOnlyCell:(BOOL)a7 wantOnlyNonCell:(BOOL)a8 isValidSA:(BOOL)a9
{
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  const char *v13;
  id v14;
  double v15;
  NSDictionary *allocationsToTransportScoreCards;
  NSDictionary *Mutable;
  NSDictionary *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  double v22;
  id v23;
  const char *v24;
  double v25;
  NSObject *v26;
  id v27;
  const char *v28;
  double v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  void *v38;
  const char *v39;
  double v40;
  const char *v41;
  uint64_t v42;
  double v43;
  char isSelfQRSession;
  unint64_t v45;
  unint64_t v46;
  int isDisconnecting;
  unint64_t v48;
  _BYTE *v49;
  const char *v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  const char *v55;
  double v56;
  void *j;
  uint64_t v58;
  NSMutableArray *v59;
  const char *v60;
  double v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t k;
  void *v69;
  uint64_t v70;
  const char *v71;
  double v72;
  int isInterfaceDelegatedWithInterfaceIndex;
  const char *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  const char *v78;
  double v79;
  const char *v80;
  double v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t m;
  void *v88;
  void *v89;
  const char *v90;
  double v91;
  const char *v92;
  uint64_t v93;
  double v94;
  char v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  const char *v101;
  double v102;
  const char *v103;
  uint64_t v104;
  double v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  double v109;
  int v110;
  const char *v111;
  uint64_t v112;
  double v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  double v124;
  int v125;
  const char *v126;
  uint64_t v127;
  double v128;
  const char *v129;
  double v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t n;
  void *v138;
  void *v139;
  const char *v140;
  double v141;
  const char *v142;
  uint64_t v143;
  double v144;
  char v145;
  unint64_t v146;
  _BYTE *v147;
  const char *v148;
  double v149;
  const char *v150;
  uint64_t v151;
  double v152;
  id v153;
  const char *v154;
  double v155;
  uint64_t v156;
  const char *v157;
  double v158;
  _BOOL4 v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t ii;
  uint64_t v164;
  uint64_t v165;
  uint64_t v167;
  unint64_t v169;
  int64_t *v170;
  const char *v171;
  uint64_t v172;
  double v173;
  NSObject *v174;
  const char *v175;
  double v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  uint64_t jj;
  uint64_t v184;
  unint64_t v185;
  NSObject *v186;
  const char *v187;
  double v188;
  uint64_t v189;
  const __CFString *v190;
  char *v191;
  id v192;
  void *v193;
  const __CFString *v194;
  const char *v195;
  uint64_t v196;
  double v197;
  NSObject *v198;
  NSMutableArray *v199;
  const char *v200;
  double v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t kk;
  void *v209;
  uint64_t v210;
  const char *v211;
  double v212;
  int v213;
  const char *v214;
  uint64_t v215;
  double v216;
  _QWORD *v218;
  _BOOL4 v219;
  int64_t *v221;
  _BOOL4 v222;
  id v223;
  int v224;
  id v225;
  _BOOL4 v226;
  id v227;
  int v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id obj;
  id obja;
  int objb;
  void *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint8_t v269[128];
  uint8_t buf[4];
  const __CFString *v271;
  __int16 v272;
  int v273;
  __int16 v274;
  char *v275;
  __int16 v276;
  id v277;
  __int16 v278;
  const __CFString *v279;
  __int16 v280;
  unint64_t v281;
  _BYTE v282[128];
  _BYTE v283[128];
  _BYTE v284[128];
  _BYTE v285[128];
  _BYTE v286[128];
  _BYTE v287[128];
  _BYTE v288[128];
  uint64_t v289;

  v9 = a8;
  v10 = a7;
  v11 = a6;
  v289 = *MEMORY[0x1E0C80C00];
  v14 = a5;
  allocationsToTransportScoreCards = self->_allocationsToTransportScoreCards;
  if (!allocationsToTransportScoreCards)
  {
    Mutable = (NSDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v18 = self->_allocationsToTransportScoreCards;
    self->_allocationsToTransportScoreCards = Mutable;

    allocationsToTransportScoreCards = self->_allocationsToTransportScoreCards;
  }
  objc_msgSend_objectForKeyedSubscript_(allocationsToTransportScoreCards, v13, (uint64_t)v14, v15, a4);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  if (!v21)
  {
    v23 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v21 = (id)objc_msgSend_initWithArray_copyItems_(v23, v24, (uint64_t)self->_transportScoreCards, v25, 1);
    if (v21)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)self->_allocationsToTransportScoreCards, v14, v21);
    }
    else
    {
      v26 = MEMORY[0x1E0C81028];
      v27 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        sub_19BAF1398();

    }
  }
  v219 = v10;
  v222 = v9;
  v236 = v14;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v19, v20, v22);
  v265 = 0u;
  v266 = 0u;
  v267 = 0u;
  v268 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v265, v29, v288, 16);
  if (v30)
  {
    v34 = v30;
    v35 = *(_QWORD *)v266;
    do
    {
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)v266 != v35)
          objc_enumerationMutation(obj);
        v37 = *(void **)(*((_QWORD *)&v265 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v37, v31, v32, v33))
        {
          objc_msgSend_sessionID(v37, v31, v32, v33);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend_isEqualToString_(v38, v39, (uint64_t)v236, v40) & 1) != 0)
          {
            isSelfQRSession = objc_msgSend_isSelfQRSession(v37, v41, v42, v43);

            if ((isSelfQRSession & 1) == 0)
            {
              v45 = objc_msgSend_state(v37, v31, v32, v33);
              if (v45 > 4
                || (v46 = v45, isDisconnecting = objc_msgSend_isDisconnecting(v37, v31, v32, v33), !v46)
                || isDisconnecting)
              {
                if (objc_msgSend_count(v21, v31, v32, v33))
                {
                  v48 = 0;
                  do
                  {
                    objc_msgSend_objectAtIndexedSubscript_(v21, v31, v48, v33);
                    v49 = (_BYTE *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend__isUsingSameRATCandidatePair_transportScoreCard_(self, v50, (uint64_t)v37, v51, v49))v49[36] = 0;

                    ++v48;
                  }
                  while (objc_msgSend_count(v21, v52, v53, v54) > v48);
                }
              }
            }
          }
          else
          {

          }
        }
      }
      v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v265, v33, v288, 16);
    }
    while (v34);
  }
  v226 = v11;

  if (!a9)
  {
    v263 = 0u;
    v264 = 0u;
    v261 = 0u;
    v262 = 0u;
    v223 = v21;
    v230 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v223, v55, (uint64_t)&v261, v56, v287, 16);
    if (v230)
    {
      v227 = *(id *)v262;
      do
      {
        for (j = 0; j != v230; j = (char *)j + 1)
        {
          if (*(id *)v262 != v227)
            objc_enumerationMutation(v223);
          v58 = *(_QWORD *)(*((_QWORD *)&v261 + 1) + 8 * (_QWORD)j);
          v257 = 0u;
          v258 = 0u;
          v259 = 0u;
          v260 = 0u;
          v59 = self->_interfaceAddressArray;
          v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v60, (uint64_t)&v257, v61, v286, 16);
          if (v62)
          {
            v66 = v62;
            v67 = *(_QWORD *)v258;
            do
            {
              for (k = 0; k != v66; ++k)
              {
                if (*(_QWORD *)v258 != v67)
                  objc_enumerationMutation(v59);
                v69 = *(void **)(*((_QWORD *)&v257 + 1) + 8 * k);
                if (objc_msgSend_index(v69, v63, v64, v65) == *(_DWORD *)(v58 + 32))
                {
                  v70 = objc_msgSend_index(v69, v63, v64, v65);
                  isInterfaceDelegatedWithInterfaceIndex = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v71, v70, v72);
                  v77 = objc_msgSend_IPVersion(v69, v74, v75, v76);
                  if (*(_BYTE *)(v58 + 37))
                  {
                    if (v77 == 1 && isInterfaceDelegatedWithInterfaceIndex != *(_QWORD *)(v58 + 24) < 4)
                      *(_BYTE *)(v58 + 36) = (GLUGetExtendedFlagsForInterface(v69) & 0x1000) == 0;
                  }
                }
              }
              v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v63, (uint64_t)&v257, v65, v286, 16);
            }
            while (v66);
          }

        }
        v230 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v223, v78, (uint64_t)&v261, v79, v287, 16);
      }
      while (v230);
    }

  }
  v255 = 0u;
  v256 = 0u;
  v253 = 0u;
  v254 = 0u;
  v231 = obj;
  v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v231, v80, (uint64_t)&v253, v81, v285, 16);
  if (v82)
  {
    v86 = v82;
    obja = *(id *)v254;
    do
    {
      for (m = 0; m != v86; ++m)
      {
        if (*(id *)v254 != obja)
          objc_enumerationMutation(v231);
        v88 = *(void **)(*((_QWORD *)&v253 + 1) + 8 * m);
        if (objc_msgSend_isRelayStunCandidatePair(v88, v83, v84, v85))
        {
          objc_msgSend_sessionID(v88, v83, v84, v85);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend_isEqualToString_(v89, v90, (uint64_t)v236, v91) & 1) != 0)
          {
            v95 = objc_msgSend_isSelfQRSession(v88, v92, v93, v94);

            if ((v95 & 1) == 0 && (unint64_t)(objc_msgSend_state(v88, v83, v84, v85) - 1) <= 1)
            {
              objc_msgSend_local(v88, v83, v84, v85);
              v96 = (void *)objc_claimAutoreleasedReturnValue();
              v100 = objc_msgSend_index(v96, v97, v98, v99);

              v224 = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v101, v100, v102);
              objc_msgSend_local(v88, v103, v104, v105);
              v106 = (void *)objc_claimAutoreleasedReturnValue();
              v110 = *(unsigned __int8 *)(objc_msgSend_address(v106, v107, v108, v109) + 1);

              if (objc_msgSend_count(v21, v111, v112, v113))
              {
                v114 = 0;
                v228 = v110 == 30;
                do
                {
                  objc_msgSend_objectAtIndexedSubscript_(v21, v83, v114, v85);
                  v115 = objc_claimAutoreleasedReturnValue();
                  v119 = v115;
                  if (*(_DWORD *)(v115 + 32) == (_DWORD)v100)
                  {
                    v120 = *(_QWORD *)(v115 + 16);
                    objc_msgSend_local(v88, v116, v117, v118);
                    v121 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v120 == objc_msgSend_transport(v121, v122, v123, v124)
                      && *(unsigned __int8 *)(v119 + 37) == v228)
                    {
                      v125 = *(_QWORD *)(v119 + 24) < 4;

                      if (v224 != v125)
                        *(_BYTE *)(v119 + 36) = 1;
                    }
                    else
                    {

                    }
                  }

                  ++v114;
                }
                while (objc_msgSend_count(v21, v126, v127, v128) > v114);
              }
            }
          }
          else
          {

          }
        }
      }
      v86 = objc_msgSend_countByEnumeratingWithState_objects_count_(v231, v83, (uint64_t)&v253, v85, v285, 16);
    }
    while (v86);
  }

  v251 = 0u;
  v252 = 0u;
  v249 = 0u;
  v250 = 0u;
  v232 = v231;
  v131 = objc_msgSend_countByEnumeratingWithState_objects_count_(v232, v129, (uint64_t)&v249, v130, v284, 16);
  if (v131)
  {
    v135 = v131;
    v136 = *(_QWORD *)v250;
    do
    {
      for (n = 0; n != v135; ++n)
      {
        if (*(_QWORD *)v250 != v136)
          objc_enumerationMutation(v232);
        v138 = *(void **)(*((_QWORD *)&v249 + 1) + 8 * n);
        if (objc_msgSend_isRelayStunCandidatePair(v138, v132, v133, v134)
          && (objc_msgSend_isDisconnecting(v138, v132, v133, v134) & 1) == 0)
        {
          objc_msgSend_sessionID(v138, v132, v133, v134);
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend_isEqualToString_(v139, v140, (uint64_t)v236, v141) & 1) != 0)
          {
            v145 = objc_msgSend_isSelfQRSession(v138, v142, v143, v144);

            if ((v145 & 1) == 0
              && (unint64_t)(objc_msgSend_state(v138, v132, v133, v134) - 3) <= 1
              && objc_msgSend_count(v21, v132, v133, v134))
            {
              v146 = 0;
              do
              {
                objc_msgSend_objectAtIndexedSubscript_(v21, v132, v146, v134);
                v147 = (_BYTE *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend__isUsingSameRATCandidatePair_transportScoreCard_(self, v148, (uint64_t)v138, v149, v147))v147[36] = 1;

                ++v146;
              }
              while (objc_msgSend_count(v21, v150, v151, v152) > v146);
            }
          }
          else
          {

          }
        }
      }
      v135 = objc_msgSend_countByEnumeratingWithState_objects_count_(v232, v132, (uint64_t)&v249, v134, v284, 16);
    }
    while (v135);
  }

  v247 = 0u;
  v248 = 0u;
  v245 = 0u;
  v246 = 0u;
  v153 = v21;
  v156 = objc_msgSend_countByEnumeratingWithState_objects_count_(v153, v154, (uint64_t)&v245, v155, v283, 16);
  v159 = v226;
  if (v156)
  {
    v160 = v156;
    v221 = 0;
    v161 = 0;
    v162 = *(_QWORD *)v246;
    do
    {
      for (ii = 0; ii != v160; ++ii)
      {
        if (*(_QWORD *)v246 != v162)
          objc_enumerationMutation(v153);
        v164 = *(_QWORD *)(*((_QWORD *)&v245 + 1) + 8 * ii);
        if (v219)
        {
          v165 = *(_QWORD *)(v164 + 24);
          if (v165 != 6 && v165 != 3)
            continue;
        }
        if (v222)
        {
          v167 = *(_QWORD *)(v164 + 24);
          if (v167 == 3 || v167 == 6)
            continue;
        }
        if (!*(_BYTE *)(v164 + 36))
        {
          v169 = *(_QWORD *)(v164 + 8);
          if (v226)
          {
            if (*(_BYTE *)(v164 + 37))
              v169 >>= 2;
            else
              v169 *= 4;
          }
          if (v169 > v161)
          {
            v170 = (int64_t *)(id)v164;

            v221 = v170;
            v161 = v169;
          }
        }
      }
      v160 = objc_msgSend_countByEnumeratingWithState_objects_count_(v153, v157, (uint64_t)&v245, v158, v283, 16);
    }
    while (v160);
  }
  else
  {
    v221 = 0;
  }

  objc_msgSend_GlobalLink(IDSFoundationLog, v171, v172, v173);
  v174 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v174, OS_LOG_TYPE_DEFAULT, "\t========== TransportScoreCards ==========", buf, 2u);
  }

  v243 = 0u;
  v244 = 0u;
  v241 = 0u;
  v242 = 0u;
  v229 = v153;
  v177 = objc_msgSend_countByEnumeratingWithState_objects_count_(v229, v175, (uint64_t)&v241, v176, v282, 16);
  if (v177)
  {
    v180 = v177;
    v181 = *(id *)v242;
    v182 = 138413570;
    v225 = *(id *)v242;
    do
    {
      for (jj = 0; jj != v180; ++jj)
      {
        if (*(id *)v242 != v181)
          objc_enumerationMutation(v229);
        v184 = *(_QWORD *)(*((_QWORD *)&v241 + 1) + 8 * jj);
        v185 = *(_QWORD *)(v184 + 8);
        if (v159)
        {
          if (*(_BYTE *)(v184 + 37))
            v185 >>= 2;
          else
            v185 *= 4;
        }
        objc_msgSend_GlobalLink(IDSFoundationLog, v178, v179, *(double *)&v182);
        v186 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
        {
          v189 = v180;
          if (*(_BYTE *)(v184 + 37))
            v190 = CFSTR("YES");
          else
            v190 = CFSTR("NO");
          objb = *(_DWORD *)(v184 + 32);
          v191 = (&_IDSStunTransportStrings)[*(_QWORD *)(v184 + 16)];
          objc_msgSend__transportInterfaceToString_(self, v187, *(_QWORD *)(v184 + 24), v188);
          v192 = (id)objc_claimAutoreleasedReturnValue();
          v193 = v192;
          v194 = CFSTR("YES");
          if (!*(_BYTE *)(v184 + 36))
            v194 = CFSTR("NO");
          *(_DWORD *)buf = 138413570;
          v271 = v190;
          v180 = v189;
          v272 = 1024;
          v273 = objb;
          v159 = v226;
          v274 = 2080;
          v275 = v191;
          v276 = 2112;
          v277 = v192;
          v278 = 2112;
          v279 = v194;
          v280 = 2048;
          v281 = v185;
          _os_log_impl(&dword_19B949000, v186, OS_LOG_TYPE_DEFAULT, "IPV6 = %@, interfaceIndex = %u, stunTransport = %s, transportInterface = %@, alreadySelected = %@, score = %llu", buf, 0x3Au);

          v181 = v225;
        }

      }
      v180 = objc_msgSend_countByEnumeratingWithState_objects_count_(v229, v178, (uint64_t)&v241, *(double *)&v182, v282, 16);
    }
    while (v180);
  }

  objc_msgSend_GlobalLink(IDSFoundationLog, v195, v196, v197);
  v198 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v198, OS_LOG_TYPE_DEFAULT, "\t==========================================", buf, 2u);
  }

  if (v221)
  {
    *a3 = v221[2];
    v237 = 0u;
    v238 = 0u;
    v239 = 0u;
    v240 = 0u;
    v199 = self->_interfaceAddressArray;
    v202 = objc_msgSend_countByEnumeratingWithState_objects_count_(v199, v200, (uint64_t)&v237, v201, v269, 16);
    if (v202)
    {
      v206 = v202;
      v207 = *(_QWORD *)v238;
      while (2)
      {
        for (kk = 0; kk != v206; ++kk)
        {
          if (*(_QWORD *)v238 != v207)
            objc_enumerationMutation(v199);
          v209 = *(void **)(*((_QWORD *)&v237 + 1) + 8 * kk);
          if (objc_msgSend_index(v209, v203, v204, v205) == *((_DWORD *)v221 + 8))
          {
            v210 = objc_msgSend_index(v209, v203, v204, v205);
            v213 = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v211, v210, v212);
            if (*((_BYTE *)v221 + 37) == (objc_msgSend_IPVersion(v209, v214, v215, v216) == 1) && v213 != v221[3] < 4)
            {
              *v218 = objc_retainAutorelease(v209);
              goto LABEL_154;
            }
          }
        }
        v206 = objc_msgSend_countByEnumeratingWithState_objects_count_(v199, v203, (uint64_t)&v237, v205, v269, 16);
        if (v206)
          continue;
        break;
      }
    }
LABEL_154:

  }
}

- (void)disconnectWithCompletionHandler:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  NSString *idsSessionID;
  const char *v10;
  uint64_t v11;
  double v12;
  unint64_t state;
  NSObject *v14;
  NSString *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  double allocbindEndTime;
  void *v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  id disconnectCompletionHandler;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  char *v39;
  NSObject *v40;
  char *v41;
  NSObject *v42;
  dispatch_block_t v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  double v48;
  char *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  void *v56;
  id WeakRetained;
  char v58;
  id v59;
  const char *v60;
  double v61;
  NSObject *v62;
  dispatch_block_t v63;
  id v64;
  char v65;
  id v66;
  const char *v67;
  double v68;
  char *v69;
  uint64_t v70;
  char *v71;
  _QWORD block[4];
  id v73;
  _QWORD v74[4];
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint8_t buf[4];
  IDSGlobalLink *v81;
  __int16 v82;
  void *v83;
  __int16 v84;
  char *v85;
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_GlobalLink(IDSFoundationLog, v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    idsSessionID = self->_idsSessionID;
    *(_DWORD *)buf = 138412546;
    v81 = self;
    v82 = 2112;
    v83 = idsSessionID;
    _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "Disconnecting IDSGlobalLink %@ with IDSSessionID: %@", buf, 0x16u);
  }

  state = self->_state;
  if (state > 3)
  {
    if (state == 4)
    {
      v30 = _Block_copy(v4);
      disconnectCompletionHandler = self->_disconnectCompletionHandler;
      self->_disconnectCompletionHandler = v30;

      objc_msgSend__didReceiveRequestToPurgeRegistration(self, v32, v33, v34);
      if (self->_state != 5)
      {
        OSLogHandleForTransportCategory();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          v39 = _IDSLinkStateStrings[self->_state];
          *(_DWORD *)buf = 138412802;
          v81 = self;
          v82 = 2080;
          v83 = v39;
          v84 = 2080;
          v85 = off_1EE40A128[0];
          _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v70 = (uint64_t)_IDSLinkStateStrings[self->_state];
            v71 = off_1EE40A128[0];
            v69 = (char *)self;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update GL: %@ state (%s->%s)."));
            if (_IDSShouldLog())
            {
              v70 = (uint64_t)_IDSLinkStateStrings[self->_state];
              v71 = off_1EE40A128[0];
              v69 = (char *)self;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update GL: %@ state (%s->%s)."));
            }
          }
        }
        self->_state = 5;
      }
      objc_msgSend__removePacketNotificationFilter(self, v35, v36, v37, v69, v70, v71);
    }
    else
    {
      OSLogHandleForTransportCategory();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v41 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 136315138;
        v81 = (IDSGlobalLink *)v41;
        _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "session is already disconnecting, state[%s].", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session is already disconnecting, state[%s]."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session is already disconnecting, state[%s]."));
        }
      }
      if (v4)
      {
        im_primary_queue();
        v42 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_19B9C73FC;
        block[3] = &unk_1E3C1FC70;
        v73 = v4;
        v43 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
        dispatch_async(v42, v43);

      }
    }
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, v12);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = self->_idsSessionID;
      v16 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 138412546;
      v81 = (IDSGlobalLink *)v15;
      v82 = 2080;
      v83 = v16;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "Session with IDSSessionID: %@ is not connected, state [%s].", buf, 0x16u);
    }

    self->_state = 6;
    allocbindEndTime = self->_allocbindEndTime;
    if (allocbindEndTime > 0.0)
    {
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v17, v18, 0.0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v76, v22, v86, 16);
      if (v25)
      {
        v27 = *(_QWORD *)v77;
        while (2)
        {
          for (i = 0; i != v25; ++i)
          {
            if (*(_QWORD *)v77 != v27)
              objc_enumerationMutation(v20);
            v29 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * i);
            if (objc_msgSend_state(v29, v23, v24, v26) == 3)
            {
              objc_msgSend_local(v29, v23, v24, v26);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              OSLogHandleForTransportCategory();
              v45 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                v49 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v44, v46, v47, v48)];
                *(_DWORD *)buf = 136315394;
                v81 = (IDSGlobalLink *)v49;
                v82 = 1024;
                LODWORD(v83) = 21;
                _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v69 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v44, v50, v51, v52)];
                  v70 = 21;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report session setup failure (%s, %d)."));
                  if (_IDSShouldLog())
                  {
                    v69 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v44, v53, v54, v55, v69, 21)];
                    v70 = 21;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report session setup failure (%s, %d)."));
                  }
                }
              }
              GLUtilReportAWDClientTimerEvent(305, 21, v29, self->_enableSKE, self->_isInitiator, 0.0);
              GLUCreateQRClientTimeEvent(305, 21, v29, self->_timeBase, 0.0);
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
              v58 = objc_opt_respondsToSelector();

              if ((v58 & 1) != 0)
              {
                v59 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didAddQREvent_(v59, v60, (uint64_t)self, v61, v56);

              }
              goto LABEL_43;
            }
          }
          v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v23, (uint64_t)&v76, v26, v86, 16);
          if (v25)
            continue;
          break;
        }
      }
LABEL_43:

    }
    objc_msgSend__discardCandidatePairsWithOption_(self, v17, 1, allocbindEndTime, v69, v70);
    if (v4)
    {
      im_primary_queue();
      v62 = objc_claimAutoreleasedReturnValue();
      v74[0] = MEMORY[0x1E0C809B0];
      v74[1] = 3221225472;
      v74[2] = sub_19B9C73EC;
      v74[3] = &unk_1E3C1FC70;
      v75 = v4;
      v63 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, v74);
      dispatch_async(v62, v63);

    }
    else
    {
      v64 = objc_loadWeakRetained((id *)&self->_delegate);
      v65 = objc_opt_respondsToSelector();

      if ((v65 & 1) != 0)
      {
        v66 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didDisconnectOverCloud_cbuuid_(v66, v67, (uint64_t)self, v68, 0, self->_cbuuid);

      }
    }
  }

}

- (void)setClientUniquePID:(unint64_t)a3
{
  double v3;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134217984;
    v8 = a3;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "Got client unique PID %llu", (uint8_t *)&v7, 0xCu);
  }

  self->_clientUniquePID = a3;
}

- (void)requestChildConnectionIDForLinkID:(char)a3 relayGroupID:(id)a4
{
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  id v8;
  double v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  unint64_t clientUniquePID;
  const char *v33;
  uint64_t v34;
  double v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  uint64_t isRelayStunCandidatePair;
  const char *v41;
  uint64_t v42;
  double v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  const char *v48;
  double v49;
  const char *v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  double v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  const char *v84;
  double v85;
  const char *v86;
  uint64_t v87;
  double v88;
  const char *v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  double v95;
  const char *v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  unint64_t v100;
  const char *v101;
  uint64_t v102;
  double v103;
  const char *v104;
  uint64_t v105;
  double v106;
  const char *v107;
  uint64_t v108;
  double v109;
  const char *v110;
  double v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  double v115;
  void *v116;
  void *v117;
  const char *v118;
  double v119;
  void *v120;
  const char *v121;
  double v122;
  id WeakRetained;
  char v124;
  const char *v125;
  uint64_t v126;
  double v127;
  NSObject *v128;
  id v129;
  const char *v130;
  double v131;
  char isCellularStunCandidate;
  uint64_t v133;
  IDSNWLink *v134;
  IDSNWLink *v135;
  unsigned int v136;
  IDSNWLink *nwLink;
  unsigned int shouldUseQRTLE;
  id v139;
  uint8_t buf[4];
  void *v141;
  __int16 v142;
  unsigned int v143;
  uint64_t v144;

  v4 = a3;
  v144 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  if (self->_QUICForQREnabled && !self->_disableDirectDatapath)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v141) = v4;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "requestChildConnectionIDForLinkID called for linkID %d", buf, 8u);
    }

    GLUtilGetCandidatePairByLinkID(v4, self->_sendInfoList, self->_linkIDToCandidatePairs, self->_channelToCandidatePairs);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isVirtualRelayStunCandidatePair(v11, v12, v13, v14) & 1) != 0)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v141) = v4;
        _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "requestChildConnectionIDForLinkID linkID %d is for a virtual link", buf, 8u);
      }
    }
    else
    {
      v136 = v4;
      nwLink = self->_nwLink;
      v139 = v8;
      objc_msgSend_local(v11, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend_address(v19, v20, v21, v22);
      objc_msgSend_remote(v11, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend_external(v27, v28, v29, v30);
      clientUniquePID = self->_clientUniquePID;
      objc_msgSend_sessionID(v11, v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v11, v37, v38, v39);
      objc_msgSend_local(v11, v41, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v44, v45, v46, v47);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v48, v23, v49, v31, clientUniquePID, v36, 0, isRelayStunCandidatePair, isCellularStunCandidate);
      v18 = objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_isRelayStunCandidatePair(v11, v50, v51, v52))
      {
        shouldUseQRTLE = objc_msgSend__shouldUseQRTLE(self, v53, v54, v55);
        v134 = self->_nwLink;
        objc_msgSend_local(v11, v56, v57, v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = objc_msgSend_address(v59, v60, v61, v62);
        objc_msgSend_remote(v11, v64, v65, v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = objc_msgSend_external(v67, v68, v69, v70);
        v72 = self->_clientUniquePID;
        objc_msgSend_sessionID(v11, v73, v74, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_local(v11, v77, v78, v79);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v133) = objc_msgSend_isCellularStunCandidate(v80, v81, v82, v83);
        objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v134, v84, v63, v85, v71, v72, v76, 7, 1, v133);
      }
      else
      {
        shouldUseQRTLE = objc_msgSend__shouldUseP2PTLE(self, v53, v54, v55);
        v135 = self->_nwLink;
        objc_msgSend_local(v11, v86, v87, v88);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v92 = objc_msgSend_address(v59, v89, v90, v91);
        objc_msgSend_remote(v11, v93, v94, v95);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v99 = objc_msgSend_external(v67, v96, v97, v98);
        v100 = self->_clientUniquePID;
        objc_msgSend_sessionID(v11, v101, v102, v103);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_local(v11, v104, v105, v106);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v133) = objc_msgSend_isCellularStunCandidate(v80, v107, v108, v109);
        objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v135, v110, v92, v111, v99, v100, v76, 9, 0, v133);
      }
      v112 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v113, v114, v115);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        GLUtilConnectionDictionaryForNWConnectionInfo(v18, 1);
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v116, v118, (uint64_t)v117, v119, CFSTR("udp"));

      }
      if (v112)
      {
        GLUtilConnectionDictionaryForNWConnectionInfo(v112, shouldUseQRTLE);
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v116, v121, (uint64_t)v120, v122, CFSTR("qpod"));

      }
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v124 = objc_opt_respondsToSelector();

      if ((v124 & 1) != 0)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v125, v126, v127);
        v128 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v141 = v116;
          v142 = 1024;
          v143 = v136;
          _os_log_impl(&dword_19B949000, v128, OS_LOG_TYPE_DEFAULT, "Send child connections %@ for linkID %d", buf, 0x12u);
        }

        v129 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didReceiveChildConnections_forLinkID_(v129, v130, (uint64_t)self, v131, v116, v136);

      }
      v8 = v139;
    }

  }
}

- (void)_updateDefaultCandidatePair:(id)a3
{
  double *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  id v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  int v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  int v43;
  const char *v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  double v53;
  NSObject *v54;
  NSObject *v55;
  id v56;
  uint64_t v57;
  id v59;
  double *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t buf[4];
  id v66;
  __int16 v67;
  int v68;
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v59 = a3;
  v3 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v3)
  {
    if (*((_DWORD *)v3 + 1))
    {
      v60 = v3;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v4, v5, v6);
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v7 = (id)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v61, v9, v69, 16);
      if (v12)
      {
        v13 = *(_QWORD *)v62;
        v14 = 138412290;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v62 != v13)
              objc_enumerationMutation(v7);
            v16 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
            objc_msgSend_local(v16, v10, v11, *(double *)&v14, v56);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = objc_msgSend_address(v17, v18, v19, v20);

            objc_msgSend_remote(v16, v22, v23, v24);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = objc_msgSend_external(v25, v26, v27, v28);

            v33 = objc_msgSend_channelNumber(v16, v30, v31, v32);
            if (IsSameSA(v21, (uint64_t)(v60 + 1))
              && IsSameSA(v29, (uint64_t)(v60 + 17))
              && *((unsigned __int16 *)v60 + 132) == v33)
            {
              objc_msgSend_setIsActive_(v16, v10, 0, *(double *)&v14);
              objc_msgSend_setLastOutgoingPacketTime_(v16, v34, v35, v60[35]);
              objc_msgSend_setLastIncomingPacketTime_(v16, v36, v37, v60[36]);
              OSLogHandleForTransportCategory();
              v38 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v66 = v16;
                _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "deactivate candidate pair %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v56 = v16;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("deactivate candidate pair %@."));
                  if (_IDSShouldLog())
                  {
                    v56 = v16;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("deactivate candidate pair %@."));
                  }
                }
              }
            }
          }
          v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v61, *(double *)&v14, v69, 16);
        }
        while (v12);
      }

    }
    IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v59, 0);
    OSLogHandleForTransportCategory();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v43 = objc_msgSend_linkID(v59, v40, v41, v42);
      *(_DWORD *)buf = 138412546;
      v66 = v59;
      v67 = 1024;
      v68 = v43;
      _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "_updateDefaultCandidatePair: update default sendInfo with:%@, linkID:%d.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v56 = v59;
        v57 = (int)objc_msgSend_linkID(v59, v44, v46, v45);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_updateDefaultCandidatePair: update default sendInfo with:%@, linkID:%d."));
        if (_IDSShouldLog())
        {
          v48 = objc_msgSend_linkID(v59, v44, v47, v45, v59, v57);
          v56 = v59;
          v57 = v48;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_updateDefaultCandidatePair: update default sendInfo with:%@, linkID:%d."));
        }
      }
    }
    objc_msgSend_setIsActive_(v59, v44, 1, v45, v56, v57);
    if ((objc_msgSend_isNominated(v59, v49, v50, v51) & 1) == 0)
    {
      objc_msgSend_setIsNominated_(v59, v52, 1, v53);
      OSLogHandleForTransportCategory();
      v54 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v66 = v59;
        _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "set nominated flag for %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("set nominated flag for %@."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("set nominated flag for %@."));
        }
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v55, OS_LOG_TYPE_DEFAULT, "_updateDefaultCandidatePair failed due to invalid list.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_updateDefaultCandidatePair failed due to invalid list."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_updateDefaultCandidatePair failed due to invalid list."));
      }
    }
  }

}

- (BOOL)_hasCandidatePairInState:(unint64_t)a3 relayCandidatePairsOnly:(BOOL)a4 excludeSelfAlloc:(BOOL)a5
{
  double v5;

  return objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, a2, a3, v5, a3, a4, a5);
}

- (BOOL)_hasCandidatePairInState:(unint64_t)a3 anotherState:(unint64_t)a4 relayCandidatePairsOnly:(BOOL)a5 excludeSelfAlloc:(BOOL)a6
{
  double v6;
  _BOOL4 v7;
  _BOOL4 v8;
  id v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  char *v34;
  __int16 v35;
  void *v36;
  _BYTE v37[128];
  uint64_t v38;

  v7 = a6;
  v8 = a5;
  v38 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, a3, v6);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v29, v13, v37, 16);
  if (v14)
  {
    v18 = v14;
    v19 = *(_QWORD *)v30;
    while (2)
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v30 != v19)
          objc_enumerationMutation(v11);
        v21 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        if ((!v7
           || objc_msgSend_allocateType(*(void **)(*((_QWORD *)&v29 + 1) + 8 * i), v15, v16, v17, (_QWORD)v29) != 2)
          && (!v8 || objc_msgSend_isRelayStunCandidatePair(v21, v15, v16, v17)))
        {
          v22 = objc_msgSend_state(v21, v15, v16, v17, (_QWORD)v29);
          if (v22 == a3 || v22 == a4)
          {
            v25 = v22;
            objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              v27 = (&_IDSStunCandidatePairStateStrings)[v25];
              *(_DWORD *)buf = 136315394;
              v34 = v27;
              v35 = 2112;
              v36 = v21;
              _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "Found a CandidatePair in state: %s for %@", buf, 0x16u);
            }

            v24 = 1;
            goto LABEL_20;
          }
        }
      }
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v29, v17, v37, 16);
      if (v18)
        continue;
      break;
    }
  }
  v24 = 0;
LABEL_20:

  return v24;
}

- (BOOL)_hasConnectingRelayCandidatePair
{
  double v2;

  return objc_msgSend__hasCandidatePairInState_relayCandidatePairsOnly_excludeSelfAlloc_(self, a2, 1, v2, 1, 0);
}

- (id)_getCandidatePairsWithSessionID:(id)a3 inState:(unint64_t)a4
{
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  BOOL v28;
  void *v29;
  const char *v30;
  double v31;
  int isEqualToString;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v34, 0.0, v38, 16);
  if (v16)
  {
    v20 = v16;
    v21 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v35 != v21)
          objc_enumerationMutation(v14);
        v23 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        v24 = objc_msgSend_state(v23, v17, v18, v19);
        if (objc_msgSend_isRelayStunCandidatePair(v23, v25, v26, v27))
          v28 = v24 == a4;
        else
          v28 = 0;
        if (v28)
        {
          objc_msgSend_sessionID(v23, v17, v18, v19);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToString = objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v6, v31);

          if (isEqualToString)
            objc_msgSend_addObject_(v10, v17, (uint64_t)v23, v19);
        }
      }
      v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v34, v19, v38, 16);
    }
    while (v20);
  }

  return v10;
}

- (void)_discardCandidatePairsWithOption:(BOOL)a3
{
  double v3;
  _BOOL4 v4;
  void *v6;
  NSObject *v7;
  const __CFString *v8;
  __CFString *v9;
  id v10;
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  double v33;
  int isQUIC;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  void *v39;
  double v40;
  uint64_t v41;
  __CFString *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  const __CFString *v49;
  uint64_t v50;

  v4 = a3;
  v50 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, a3, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = CFSTR("NO");
    if (v4)
      v8 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v49 = v8;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "_discardCandidatePairsWithOption (includeRelay:%@).", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v9 = v4 ? CFSTR("YES") : CFSTR("NO");
    v42 = v9;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_discardCandidatePairsWithOption (includeRelay:%@)."));
    if (_IDSShouldLog())
    {
      v42 = v9;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_discardCandidatePairsWithOption (includeRelay:%@)."));
    }
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v10 = v6;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v43, v12, v47, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v44;
    v17 = 138412290;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v44 != v16)
          objc_enumerationMutation(v10);
        v19 = *(__CFString **)(*((_QWORD *)&v43 + 1) + 8 * v18);
        v20 = objc_msgSend_state(v19, v13, v14, *(double *)&v17, v42);
        if (objc_msgSend_isRelayStunCandidatePair(v19, v21, v22, v23))
        {
          if (v4 && v20 <= 4)
          {
            OSLogHandleForTransportCategory();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v49 = v19;
              _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "disconnect relay candidate pair %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v42 = v19;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("disconnect relay candidate pair %@."));
                if (_IDSShouldLog())
                {
                  v42 = v19;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("disconnect relay candidate pair %@."));
                }
              }
            }
            objc_msgSend_stopSessionConnectedTimer(v19, v25, v26, v27, v42);
            objc_msgSend_stopSessionConvergenceTimer(v19, v28, v29, v30);
            isQUIC = objc_msgSend_isQUIC(v19, v31, v32, v33);
            objc_msgSend_candidatePairToken(v19, v35, v36, v37);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            if (isQUIC)
              objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v38, (uint64_t)v39, v40, 11);
            else
              objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v38, (uint64_t)v39, v40, 0, 11);

          }
        }
        else
        {
          objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v13, (uint64_t)v19, *(double *)&v17, 11);
        }
        ++v18;
      }
      while (v15 != v18);
      v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v43, *(double *)&v17, v47, 16);
      v15 = v41;
    }
    while (v41);
  }

}

- (void)_discardAllCandidatePairs
{
  NSObject *v3;
  const char *v4;
  double v5;
  const char *v6;
  double v7;
  const char *v8;
  double v9;
  uint8_t v10[16];

  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "discard all candidate pairs.", v10, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("discard all candidate pairs."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("discard all candidate pairs."));
    }
  }
  objc_msgSend__discardCandidatePairsWithOption_(self, v4, 0, v5);
  if (objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v6, 3, v7, 4, 0, 0))objc_msgSend__discardCandidatePairsWithOption_(self, v8, 1, v9);
  else
    objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v8, 0, v9, 11);
}

- (void)_discardNonAcceptedCandidatePairs
{
  NSObject *v2;
  const char *v3;
  double v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  int isQUIC;
  const char *v39;
  uint64_t v40;
  double v41;
  const char *v42;
  void *v43;
  double v44;
  const char *v45;
  uint64_t v46;
  double v47;
  void *v48;
  const char *v49;
  double v50;
  void *v51;
  id v52;
  const char *v53;
  double v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t k;
  void *v61;
  NSObject *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  char *v70;
  const char *v71;
  double v72;
  const char *v73;
  uint64_t v74;
  double v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  void *v80;
  IDSNWLink *nwLink;
  const char *v82;
  uint64_t v83;
  double v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  double v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  double v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  double v105;
  void *v106;
  NSMutableArray *obj;
  uint64_t v108;
  uint64_t v109;
  uint64_t i;
  id v111;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint8_t buf[4];
  void *v126;
  __int16 v127;
  void *v128;
  __int16 v129;
  char *v130;
  __int16 v131;
  char *v132;
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if (self->_isInitiator)
  {
    OSLogHandleForTransportCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "start to discard non-accepted candidate pairs.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start to discard non-accepted candidate pairs."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start to discard non-accepted candidate pairs."));
      }
    }
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    obj = self->_nonAcceptedQRSessions;
    v109 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v121, v4, v135, 16);
    if (v109)
    {
      v108 = *(_QWORD *)v122;
      v7 = 138412546;
      do
      {
        for (i = 0; i != v109; ++i)
        {
          if (*(_QWORD *)v122 != v108)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * i);
          if (objc_msgSend_isRelayStunCandidatePair(v8, v5, v6, *(double *)&v7))
          {
            OSLogHandleForTransportCategory();
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v8, v10, v11, v12);
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v126 = v13;
              _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "disconnect non-accepted relay candidate pair %@.", buf, 0xCu);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_candidatePairToken(v8, v14, v15, v16);
                v106 = (void *)objc_claimAutoreleasedReturnValue();
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("disconnect non-accepted relay candidate pair %@."));

                if (_IDSShouldLog())
                {
                  objc_msgSend_candidatePairToken(v8, v14, v15, v16, v106);
                  v106 = (void *)objc_claimAutoreleasedReturnValue();
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("disconnect non-accepted relay candidate pair %@."));

                }
              }
            }
            objc_msgSend_sessionID(v8, v14, v15, v16, v106);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v18, (uint64_t)v17, v19, 3);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v111 = v20;
            v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v21, (uint64_t)&v117, v22, v134, 16);
            if (v25)
            {
              v27 = *(_QWORD *)v118;
              do
              {
                for (j = 0; j != v25; ++j)
                {
                  if (*(_QWORD *)v118 != v27)
                    objc_enumerationMutation(v111);
                  v29 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * j);
                  objc_msgSend_GlobalLink(IDSFoundationLog, v23, v24, v26);
                  v30 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_sessionID(v8, v31, v32, v33);
                    v34 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138412546;
                    v126 = v29;
                    v127 = 2112;
                    v128 = v34;
                    _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "_discardNonAcceptedCandidatePairs: found succeeded candidate pair %@ with the same QRSessionID %@, send unallocbind request", buf, 0x16u);

                  }
                  isQUIC = objc_msgSend_isQUIC(v8, v35, v36, v37);
                  objc_msgSend_candidatePairToken(v29, v39, v40, v41);
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  if (isQUIC)
                    objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v42, (uint64_t)v43, v44, 8);
                  else
                    objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v42, (uint64_t)v43, v44, 0, 8);

                }
                v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v23, (uint64_t)&v117, v26, v134, 16);
              }
              while (v25);
            }

            objc_msgSend_sessionID(v8, v45, v46, v47);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v49, (uint64_t)v48, v50, 1);
            v51 = (void *)objc_claimAutoreleasedReturnValue();

            v115 = 0u;
            v116 = 0u;
            v113 = 0u;
            v114 = 0u;
            v52 = v51;
            v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v113, v54, v133, 16);
            if (v57)
            {
              v59 = *(_QWORD *)v114;
              do
              {
                for (k = 0; k != v57; ++k)
                {
                  if (*(_QWORD *)v114 != v59)
                    objc_enumerationMutation(v52);
                  v61 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * k);
                  objc_msgSend_GlobalLink(IDSFoundationLog, v55, v56, v58);
                  v62 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_sessionID(v8, v63, v64, v65);
                    v66 = (void *)objc_claimAutoreleasedReturnValue();
                    v70 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(v61, v67, v68, v69)];
                    *(_DWORD *)buf = 138413058;
                    v126 = v61;
                    v127 = 2112;
                    v128 = v66;
                    v129 = 2080;
                    v130 = v70;
                    v131 = 2080;
                    v132 = off_1EE40A688;
                    _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "_discardNonAcceptedCandidatePairs: found inProgress candidate pair %@ with the same QRSessionID %@, update state (%s->%s)", buf, 0x2Au);

                  }
                  objc_msgSend_setState_(v61, v71, 6, v72);
                  if (objc_msgSend_isQUIC(v8, v73, v74, v75))
                  {
                    objc_msgSend_GlobalLink(IDSFoundationLog, v55, v56, v58);
                    v76 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                    {
                      objc_msgSend_candidatePairToken(v8, v77, v78, v79);
                      v80 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138412290;
                      v126 = v80;
                      _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "Disconnecting discarded in-progress QUIC connection %@", buf, 0xCu);

                    }
                    nwLink = self->_nwLink;
                    objc_msgSend_sessionID(v61, v82, v83, v84);
                    v85 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_local(v61, v86, v87, v88);
                    v89 = (void *)objc_claimAutoreleasedReturnValue();
                    v93 = objc_msgSend_address(v89, v90, v91, v92);
                    objc_msgSend_remote(v61, v94, v95, v96);
                    v97 = (void *)objc_claimAutoreleasedReturnValue();
                    v101 = objc_msgSend_external(v97, v98, v99, v100);
                    objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v102, (uint64_t)v85, 5.0, v93, v101, 1);

                  }
                }
                v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v55, (uint64_t)&v113, v58, v133, 16);
              }
              while (v57);
            }

          }
        }
        v109 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v121, *(double *)&v7, v135, 16);
      }
      while (v109);
    }

    objc_msgSend_removeAllObjects(self->_nonAcceptedQRSessions, v103, v104, v105);
  }
}

- (void)_discardSelfAllocateCandidatePairs
{
  uint64_t v2;
  double v3;
  id v5;
  const char *v6;
  double v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  int isQUIC;
  const char *v24;
  uint64_t v25;
  double v26;
  const char *v27;
  void *v28;
  double v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v31, v7, v37, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v32;
    v12 = 138412290;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v32 != v11)
          objc_enumerationMutation(v5);
        v14 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v14, v8, v9, *(double *)&v12)
          && objc_msgSend_allocateType(v14, v8, v9, *(double *)&v12) == 2)
        {
          OSLogHandleForTransportCategory();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v14, v16, v17, v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v36 = v19;
            _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "disconnect self allocate candidate pair %@.", buf, 0xCu);

          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v14, v20, v21, v22);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("disconnect self allocate candidate pair %@."));

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v14, v20, v21, v22, v30);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("disconnect self allocate candidate pair %@."));

              }
            }
          }
          isQUIC = objc_msgSend_isQUIC(v14, v20, v21, v22, v30);
          objc_msgSend_candidatePairToken(v14, v24, v25, v26);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          if (isQUIC)
            objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v27, (uint64_t)v28, v29, 0);
          else
            objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v27, (uint64_t)v28, v29, 0, 0);

        }
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v31, *(double *)&v12, v37, 16);
    }
    while (v10);
  }

}

- (void)_removePacketNotificationFilter
{
  uint64_t v2;
  double v3;
  _QWORD *v5;
  _QWORD *v6;
  id v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  _BOOL4 v39;
  NSObject *v40;
  NSObject *v41;
  const char *v43;
  uint64_t v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  void *v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  void *v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v5)
  {
    v6 = v5;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v7 = v51;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v52, v9, v58, 16);
    if (v12)
    {
      v14 = *(_QWORD *)v53;
      v15 = (uint64_t)(v6 + 1);
      v16 = (uint64_t)(v6 + 17);
      while (2)
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v53 != v14)
            objc_enumerationMutation(v7);
          v18 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * i);
          objc_msgSend_local(v18, v10, v11, v13);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend_address(v19, v20, v21, v22);

          objc_msgSend_remote(v18, v24, v25, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend_external(v27, v28, v29, v30);

          objc_msgSend_local(v18, v32, v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isCellularStunCandidate(v35, v36, v37, v38) && IsSameSA(v23, v15))
          {
            v39 = IsSameSA(v31, v16);

            if (v39)
            {
              OSLogHandleForTransportCategory();
              v41 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v57 = v18;
                _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "remove packet notification filter for %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v50 = v18;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove packet notification filter for %@."));
                  if (_IDSShouldLog())
                  {
                    v50 = v18;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove packet notification filter for %@."));
                  }
                }
              }
              objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v43, v44, v45, v50);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_removePacketNotificationFilter(v46, v47, v48, v49);

              goto LABEL_28;
            }
          }
          else
          {

          }
        }
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v52, v13, v58, 16);
        if (v12)
          continue;
        break;
      }
    }
LABEL_28:

  }
  else
  {
    OSLogHandleForTransportCategory();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "_removePacketNotificationFilter failed due to invalid default link.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_removePacketNotificationFilter failed due to invalid default link."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_removePacketNotificationFilter failed due to invalid default link."));
      }
    }
  }

}

- (void)_sendSessionDisconnectedCommand
{
  uint64_t v2;
  double v3;
  id v5;
  const char *v6;
  double v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  double v22;
  NSObject *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v25, v7, v31, 16);
  if (v10)
  {
    v12 = *(_QWORD *)v26;
LABEL_3:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v26 != v12)
        objc_enumerationMutation(v5);
      v14 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v13);
      if ((objc_msgSend_isActive(v14, v8, v9, v11) & 1) != 0)
        break;
      if (v10 == ++v13)
      {
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v25, v11, v31, 16);
        if (v10)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v15 = v14;

    if (!v15)
      goto LABEL_18;
    objc_msgSend_candidatePairToken(v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v30 = v19;
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "send session disconnected using %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v24 = v19;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send session disconnected using %@."));
        if (_IDSShouldLog())
        {
          v24 = v19;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send session disconnected using %@."));
        }
      }
    }
    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v21, 2, v22, 0, 0, v19, v24);

  }
  else
  {
LABEL_9:

LABEL_18:
    OSLogHandleForTransportCategory();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair to send session disconnected command.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair to send session disconnected command."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair to send session disconnected command."));
      }
    }
  }

}

- (void)_setChannelToCandidatePair:(id)a3 localAddress:(sockaddr *)a4 remoteAddress:(sockaddr *)a5 channelNumber:(unsigned __int16)a6
{
  unsigned int v6;
  id v10;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *channelToCandidatePairs;
  void *v13;
  id v14;
  NSObject *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v6 = a6;
  v20 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  if (!self->_channelToCandidatePairs)
  {
    Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    channelToCandidatePairs = self->_channelToCandidatePairs;
    self->_channelToCandidatePairs = Mutable;

  }
  channelForStunCandidatePair((uint64_t)a4, (uint64_t)a5, v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v10;
  if (v14)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)self->_channelToCandidatePairs, v13, v14);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF1414();
  }

  OSLogHandleForTransportCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v17 = v13;
    v18 = 2112;
    v19 = v14;
    _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "set channel %@ for %@.", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("set channel %@ for %@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("set channel %@ for %@."));
    }
  }

}

- (void)_setCandidatePairConnected:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  int isVirtualRelayStunCandidatePair;
  double linkConnectTime;
  unsigned __int16 v12;
  NSObject *v13;
  int maxLinkID;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  double v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  double v35;
  const char *v36;
  double v37;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *linkIDToCandidatePairs;
  id v40;
  NSMutableDictionary *v41;
  const char *v42;
  double v43;
  const void *v44;
  _QWORD *v45;
  const char *v46;
  uint64_t v47;
  double v48;
  char v49;
  uint64_t v50;
  IDSGlobalLinkBlocks *qraBlocks;
  void (**qraCONBlock)(id, NSString *, void *);
  NSString *cbuuid;
  void *v54;
  void *v55;
  const char *v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  id WeakRetained;
  char v62;
  const char *v63;
  uint64_t v64;
  double v65;
  unint64_t v66;
  NSObject *v67;
  NSObject *v68;
  const char *v69;
  double v70;
  int isRelayStunCandidatePair;
  __CFString *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  double v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  double v88;
  NSString *idsSessionID;
  void *v90;
  const char *v91;
  uint64_t v92;
  double v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  int v99;
  const char *v100;
  uint64_t v101;
  double v102;
  const char *v103;
  uint64_t v104;
  double v105;
  NSString *v106;
  NSString *v107;
  const char *v108;
  uint64_t v109;
  double v110;
  IDSNWLink *nwLink;
  id v112;
  const char *v113;
  uint64_t v114;
  double v115;
  void *v116;
  const char *v117;
  double v118;
  const char *v119;
  double v120;
  NSMutableArray *v121;
  NSMutableArray *v122;
  void *v123;
  BOOL v124;
  NSMutableArray *connectedLinkIDs;
  void *v126;
  const char *v127;
  double v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t i;
  uint64_t v140;
  void *v141;
  const char *v142;
  double v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  double v147;
  void *v148;
  const char *v149;
  double v150;
  void *v151;
  const char *v152;
  double v153;
  const char *v154;
  double v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  double v159;
  NSObject *v160;
  id v161;
  char v162;
  id v163;
  const char *v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  __CFString *v168;
  id *location;
  void *v170;
  void *v171;
  void *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint8_t v177[128];
  uint8_t buf[4];
  _BYTE v179[14];
  __int16 v180;
  NSObject *v181;
  __int16 v182;
  NSString *v183;
  __int16 v184;
  id v185;
  __int16 v186;
  id v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v172 = v4;
  if (v4)
  {
    isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v4, v5, v6, v7);
    linkConnectTime = self->_linkConnectTime;
    if (linkConnectTime == 0.0
      && self->_isUPlusOneSession
      && (objc_msgSend_isRelayStunCandidatePair(v172, v8, v9, linkConnectTime) ^ 1 | isVirtualRelayStunCandidatePair) == 1)
    {
      self->_linkConnectTime = ids_monotonic_time();
    }
    v12 = self->_linkIDCounter + 1;
    self->_linkIDCounter = v12;
    if (self->_maxLinkID >= v12)
    {
LABEL_20:
      OSLogHandleForTransportCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v179 = (char)v12;
        _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: linkID %d", buf, 8u);
      }

      v32 = (char)v12;
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v166 = (char)v12;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_setCandidatePairConnected: linkID %d"));
          if (_IDSShouldLog())
          {
            v166 = (char)v12;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_setCandidatePairConnected: linkID %d"));
          }
        }
      }
      objc_msgSend_setLinkID_(v172, v30, (char)v12, v31, v166);
      if (((objc_msgSend_isSharedQRSession(v172, v33, v34, v35) ^ 1 | isVirtualRelayStunCandidatePair) & 1) == 0)
        objc_msgSend__updateLinkIDForPlugin_(self, v36, (uint64_t)v172, v37);
      if (!self->_linkIDToCandidatePairs)
      {
        Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        self->_linkIDToCandidatePairs = Mutable;

      }
      v40 = v172;
      v41 = self->_linkIDToCandidatePairs;
      v44 = (const void *)objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v42, v32, v43);
      CFDictionarySetValue((CFMutableDictionaryRef)v41, v44, v40);

      IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v40, v32);
      v45 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
      if (v45)
      {
        v49 = *(_DWORD *)v45 ? 1 : isVirtualRelayStunCandidatePair;
        if ((v49 & 1) == 0)
          IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v40, 0);
      }
      if ((isVirtualRelayStunCandidatePair & 1) == 0)
      {
        if (objc_msgSend_isSharedQRSession(v40, v46, v47, v48))
        {
          qraBlocks = self->_qraBlocks;
          if (qraBlocks)
          {
            qraCONBlock = (void (**)(id, NSString *, void *))qraBlocks->_qraCONBlock;
            if (qraCONBlock)
            {
              cbuuid = self->_cbuuid;
              objc_msgSend_sessionID(v40, v46, v50, v48);
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              qraCONBlock[2](qraCONBlock, cbuuid, v54);

            }
          }
        }
      }
      objc_msgSend__getLocalAttribute_(self, v46, (uint64_t)v40, v48);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__getRemoteAttribute_(self, v56, (uint64_t)v40, v57);
      v171 = (void *)objc_claimAutoreleasedReturnValue();
      if ((isVirtualRelayStunCandidatePair & 1) != 0
        || !objc_msgSend_isRelayStunCandidatePair(v40, v58, v59, v60))
      {
        objc_msgSend_didConnectUnderlyingE2ELink(self->_metricsCollector, v58, v59, v60);
      }
      else
      {
        objc_msgSend_didConnectUnderlyingRelayLink(self->_metricsCollector, v58, v59, v60);
      }
      if (IMGetDomainBoolForKey()
        && self->_isUPlusOneSession
        && !GLUtilUnderPerformanceTesting(v40, isVirtualRelayStunCandidatePair)
        || (location = (id *)&self->_delegate,
            WeakRetained = objc_loadWeakRetained((id *)&self->_delegate),
            v62 = objc_opt_respondsToSelector(),
            WeakRetained,
            (v62 & 1) == 0))
      {
        v170 = v55;
LABEL_95:

        goto LABEL_96;
      }
      v66 = 0x1E3C19000;
      if ((isVirtualRelayStunCandidatePair & 1) != 0)
      {
        v168 = CFSTR("VR ");
      }
      else
      {
        isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v40, v63, v64, v65);
        v72 = CFSTR("P2P");
        if (isRelayStunCandidatePair)
          v72 = CFSTR("RLY");
        v168 = v72;
        if ((objc_msgSend_isRelayStunCandidatePair(v40, v73, v74, v75) & 1) != 0)
        {
          objc_msgSend_local(v40, v63, v64, v65);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v80 = objc_msgSend_transport(v76, v77, v78, v79);
          GLUtilStunTransportToProtocol(v80, self->_H2FallbackEnabled);
          v81 = objc_claimAutoreleasedReturnValue();

          objc_msgSend_GlobalLink(IDSFoundationLog, v82, v83, v84);
          v85 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          {
            idsSessionID = self->_idsSessionID;
            objc_msgSend_sessionID(v40, v86, v87, v88);
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)v179 = v32;
            *(_WORD *)&v179[4] = 2112;
            *(_QWORD *)&v179[6] = v168;
            v180 = 2112;
            v181 = v81;
            v182 = 2112;
            v183 = idsSessionID;
            v184 = 2112;
            v185 = v90;
            v186 = 2112;
            v187 = v40;
            _os_log_impl(&dword_19B949000, v85, OS_LOG_TYPE_DEFAULT, "Send link connected (%d) %@ using %@ for IDSSessionID: %@ QRSessionID: %@ and %@.", buf, 0x3Au);

          }
          objc_msgSend_local(v40, v91, v92, v93);
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          v98 = objc_msgSend_transport(v94, v95, v96, v97);

          v99 = GLUtilStunTransportToLinkType(v98, self->_H2FallbackEnabled);
          if (v99 > 331)
          {
            if (v99 == 332)
            {
              objc_msgSend_linkConnectedUsingTCPSTUN(self->_metricsCollector, v100, v101, v102);
            }
            else if (v99 == 333)
            {
              objc_msgSend_linkConnectedUsingFakeTLS(self->_metricsCollector, v100, v101, v102);
            }
          }
          else if (v99 == 313)
          {
            objc_msgSend_linkConnectedUsingQUIC(self->_metricsCollector, v100, v101, v102);
          }
          else if (v99 == 331)
          {
            objc_msgSend_linkConnectedUsingHTTP2(self->_metricsCollector, v100, v101, v102);
          }
          goto LABEL_77;
        }
        v66 = 0x1E3C19000uLL;
      }
      objc_msgSend_GlobalLink(*(void **)(v66 + 2856), v63, v64, v65);
      v81 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        v106 = self->_idsSessionID;
        objc_msgSend_sessionID(v40, v103, v104, v105);
        v107 = (NSString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)v179 = v32;
        *(_WORD *)&v179[4] = 2112;
        *(_QWORD *)&v179[6] = v168;
        v180 = 2112;
        v181 = v106;
        v182 = 2112;
        v183 = v107;
        v184 = 2112;
        v185 = v40;
        _os_log_impl(&dword_19B949000, v81, OS_LOG_TYPE_DEFAULT, "Send link connected (%d) %@ for IDSSessionID: %@ QRSessionID: %@ and %@.", buf, 0x30u);

      }
LABEL_77:

      nwLink = self->_nwLink;
      if (nwLink)
        objc_msgSend_logConnectionTree(nwLink, v108, v109, v110);
      objc_msgSend__translateLinkTransportTypeWhenH2Enabled_(self, v108, (uint64_t)v55, v110);
      v170 = (void *)objc_claimAutoreleasedReturnValue();

      v112 = objc_loadWeakRetained(location);
      objc_msgSend_linkUUID(v40, v113, v114, v115);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_link_didConnectUnderlyingLink_linkUUID_localAttributes_remoteAttributes_(v112, v117, (uint64_t)self, v118, v32, v116, v170, v171);

      if (self->_connectedLinkIDs
        || (v121 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]),
            v122 = self->_connectedLinkIDs,
            self->_connectedLinkIDs = v121,
            v122,
            self->_connectedLinkIDs))
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v119, v32, v120);
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        v124 = v123 == 0;

        if (!v124)
        {
          connectedLinkIDs = self->_connectedLinkIDs;
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v119, v32, v120);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          CFArrayAppendValue((CFMutableArrayRef)connectedLinkIDs, v126);

        }
      }
      objc_msgSend__resetRetryCountForCandidatePair_(self, v119, (uint64_t)v40, v120);
      objc_msgSend_linkConnectedWithH2FallbackEnabled_(self->_metricsCollector, v127, self->_H2FallbackEnabled, v128);
      v175 = 0u;
      v176 = 0u;
      v173 = 0u;
      v174 = 0u;
      objc_msgSend_connections(v40, v129, v130, 0.0);
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v131, v132, (uint64_t)&v173, v133, v177, 16);
      if (v136)
      {
        v138 = *(_QWORD *)v174;
        do
        {
          for (i = 0; i != v136; ++i)
          {
            if (*(_QWORD *)v174 != v138)
              objc_enumerationMutation(v131);
            v140 = *(_QWORD *)(*((_QWORD *)&v173 + 1) + 8 * i);
            objc_msgSend_connections(v40, v134, v135, v137);
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v141, v142, v140, v143);
            v144 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_linkMetrics(v40, v145, v146, v147);
            v148 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v144, v149, (uint64_t)CFSTR("protocol-stack"), v150);
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_linkConnectedWithProtocolStack_(v148, v152, (uint64_t)v151, v153);

          }
          v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v131, v134, (uint64_t)&v173, v137, v177, 16);
        }
        while (v136);
      }

      objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v154, (uint64_t)v40, v155);
      GLUCreateLinkConnectedEvent(v40, self->_H2FallbackEnabled);
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_GlobalLink(IDSFoundationLog, v157, v158, v159);
      v160 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v179 = v156;
        _os_log_impl(&dword_19B949000, v160, OS_LOG_TYPE_DEFAULT, "added qrLinkConnectedEvent: %@", buf, 0xCu);
      }

      v161 = objc_loadWeakRetained(location);
      v162 = objc_opt_respondsToSelector();

      if ((v162 & 1) != 0)
      {
        v163 = objc_loadWeakRetained(location);
        objc_msgSend_link_didAddQREvent_(v163, v164, (uint64_t)self, v165, v156);

      }
      goto LABEL_95;
    }
    OSLogHandleForTransportCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      maxLinkID = self->_maxLinkID;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v179 = (char)v12;
      *(_WORD *)&v179[4] = 1024;
      *(_DWORD *)&v179[6] = maxLinkID;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: linkID %d > %d; will pick link ID to reuse",
        buf,
        0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v166 = (char)v12;
        v167 = self->_maxLinkID;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_setCandidatePairConnected: linkID %d > %d; will pick link ID to reuse"));
        if (_IDSShouldLog())
        {
          v166 = (char)v12;
          v167 = self->_maxLinkID;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_setCandidatePairConnected: linkID %d > %d; will pick link ID to reuse"));
        }
      }
    }
    if (objc_msgSend_count(self->_unusedLinkIDs, v15, v16, v17, v166, v167))
    {
      objc_msgSend_firstObject(self->_unusedLinkIDs, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v12) = objc_msgSend_intValue(v21, v22, v23, v24);

      objc_msgSend_removeFirstObject(self->_unusedLinkIDs, v25, v26, v27);
      OSLogHandleForTransportCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v179 = (char)v12;
        _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: reusing linkID %d", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v166 = (char)v12;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_setCandidatePairConnected: reusing linkID %d"));
          if (_IDSShouldLog())
          {
            v166 = (char)v12;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_setCandidatePairConnected: reusing linkID %d"));
          }
        }
      }
      goto LABEL_20;
    }
    OSLogHandleForTransportCategory();
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: could not find a linkID to reuse", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_setCandidatePairConnected: could not find a linkID to reuse"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_setCandidatePairConnected: could not find a linkID to reuse"));
      }
    }
    objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v69, 255, v70, 10);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v67, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: invalid candidatePair", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_setCandidatePairConnected: invalid candidatePair"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_setCandidatePairConnected: invalid candidatePair"));
      }
    }
  }
LABEL_96:

}

- (id)_translateLinkTransportTypeWhenH2Enabled:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  int v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __CFDictionary *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  double v23;
  void *v24;
  _DWORD v26[2];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v7 = v4;
  if (!self->_H2FallbackEnabled)
    goto LABEL_7;
  objc_msgSend_objectForKey_(v4, v5, (uint64_t)CFSTR("gl-attr-transport"), v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_unsignedCharValue(v8, v9, v10, v11);

  if (v12 == 3)
  {
    v16 = 5;
  }
  else
  {
    if (v12 != 4)
    {
LABEL_7:
      v17 = v7;
      goto LABEL_15;
    }
    v16 = 3;
  }
  if ((_DWORD)v16 == v12)
    goto LABEL_7;
  objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v26[0] = 67109376;
    v26[1] = v12;
    v27 = 1024;
    v28 = v16;
    _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "_translateLinkTransportTypeWhenH2Enabled: %d -> %d", (uint8_t *)v26, 0xEu);
  }

  v17 = (__CFDictionary *)objc_msgSend_mutableCopy(v7, v19, v20, v21);
  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v22, v16, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24)
  {
    CFDictionarySetValue(v17, CFSTR("gl-attr-transport"), v24);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF1490();
  }

LABEL_15:
  return v17;
}

- (void)_setLinkMetricsAttributesForCandidatePair:(id)a3
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  __CFString *v10;
  int isRelayStunCandidatePair;
  __CFString *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  int v40;
  void *v41;
  const char *v42;
  double v43;
  void *v44;
  const char *v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  void *v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  void *v55;
  const char *v56;
  double v57;
  void *v58;
  const char *v59;
  double v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  void *v65;
  const char *v66;
  double v67;
  void *v68;
  const char *v69;
  double v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  const char *v80;
  double v81;
  const char *v82;
  uint64_t v83;
  double v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  double v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  const char *v94;
  double v95;
  const char *v96;
  uint64_t v97;
  double v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  double v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  double v106;
  const char *v107;
  double v108;
  id v109;

  v3 = a3;
  if (!v3)
    goto LABEL_19;
  v109 = v3;
  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v3, v4, v5, v6) & 1) != 0)
  {
    v10 = CFSTR("VR ");
  }
  else
  {
    isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v109, v7, v8, v9);
    v10 = CFSTR("P2P");
    if (isRelayStunCandidatePair)
      v10 = CFSTR("RLY");
  }
  v12 = v10;
  objc_msgSend_linkMetrics(v109, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLinkType_(v16, v17, (uint64_t)v12, v18);

  objc_msgSend_connections(v109, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v22, v23, (uint64_t)CFSTR("qpod"), v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_connections(v109, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v29, v30, (uint64_t)CFSTR("udp"), v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25
    && (objc_msgSend_objectForKeyedSubscript_(v25, v33, (uint64_t)CFSTR("allow-outgoing"), v35),
        v36 = (void *)objc_claimAutoreleasedReturnValue(),
        v40 = objc_msgSend_BOOLValue(v36, v37, v38, v39),
        v36,
        v40))
  {
    objc_msgSend_linkMetrics(v109, v33, v34, v35);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v25, v42, (uint64_t)CFSTR("protocol-stack"), v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setChannelDataProtocolStack_(v41, v45, (uint64_t)v44, v46);

    objc_msgSend_linkMetrics(v109, v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setIsTLEEnabled_(v50, v51, 1, v52);
  }
  else
  {
    if (!v32)
      goto LABEL_12;
    objc_msgSend_linkMetrics(v109, v33, v34, v35);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v32, v53, (uint64_t)CFSTR("protocol-stack"), v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setChannelDataProtocolStack_(v50, v56, (uint64_t)v55, v57);

  }
LABEL_12:
  objc_msgSend_connections(v109, v33, v34, v35);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v58, v59, (uint64_t)CFSTR("qr"), v60);
  v61 = (void *)objc_claimAutoreleasedReturnValue();

  if (v61 && objc_msgSend_isRelayStunCandidatePair(v109, v62, v63, v64))
  {
    objc_msgSend_linkMetrics(v109, v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v61, v66, (uint64_t)CFSTR("protocol-stack"), v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setRelayProtocolStack_(v65, v69, (uint64_t)v68, v70);

  }
  objc_msgSend_linkMetrics(v109, v62, v63, v64);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(v109, v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = objc_msgSend_radioAccessTechnology(v75, v76, v77, v78);
  objc_msgSend_setLocalRAT_(v71, v80, v79, v81);

  objc_msgSend_linkMetrics(v109, v82, v83, v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_remote(v109, v86, v87, v88);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = objc_msgSend_radioAccessTechnology(v89, v90, v91, v92);
  objc_msgSend_setRemoteRAT_(v85, v94, v93, v95);

  objc_msgSend_linkMetrics(v109, v96, v97, v98);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(v109, v100, v101, v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(objc_msgSend_address(v103, v104, v105, v106) + 1) == 30)
    objc_msgSend_setIPVersion_(v99, v107, 6, v108);
  else
    objc_msgSend_setIPVersion_(v99, v107, 4, v108);

  v3 = v109;
LABEL_19:

}

- (void)_updateLinkIDForPlugin:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  void *v10;
  double v11;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v13;
  void *v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  double v19;
  id v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  int isCellularStunCandidate;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  int v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  void *v44;
  const char *v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  NSObject *v50;
  int v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  double v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  NSObject *v61;
  int v62;
  NSObject *v63;
  int linkIDForPlugin;
  int v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  int v70;
  const char *v71;
  uint64_t v72;
  double v73;
  int v74;
  const char *v75;
  uint64_t v76;
  double v77;
  const char *v78;
  uint64_t v79;
  double v80;
  NSMutableDictionary *pluginNameToPluginOptionsDict;
  const char *v82;
  double v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[4];
  id v88;
  id v89;
  uint8_t buf[4];
  int v91;
  __int16 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v8 = v4;
  if (self->_linkIDForPlugin)
  {
    if (self->_linkIDToCandidatePairs)
    {
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v5, self->_linkIDForPlugin, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v9, self->_linkIDForPlugin, v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v13);

      }
      else
      {
        v14 = 0;
      }

      objc_msgSend_local(v14, v21, v22, v23);
    }
    else
    {
      v14 = 0;
      objc_msgSend_local(0, v5, v6, v7);
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v24, v25, v26, v27);

    objc_msgSend_local(v8, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend_isCellularStunCandidate(v32, v33, v34, v35);

    if ((!isCellularStunCandidate || v36)
      && objc_msgSend_state(v14, v37, v38, v39) == 4
      && self->_linkIDForPlugin == objc_msgSend_linkID(v14, v37, v38, v39))
    {
      objc_msgSend_sessionID(v8, v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sessionID(v14, v41, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isEqualToString_(v40, v45, (uint64_t)v44, v46) & 1) != 0)
      {

LABEL_35:
        OSLogHandleForTransportCategory();
        v63 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          linkIDForPlugin = self->_linkIDForPlugin;
          *(_DWORD *)buf = 67109120;
          v91 = linkIDForPlugin;
          _os_log_impl(&dword_19B949000, v63, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to existing %d", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v85 = self->_linkIDForPlugin;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Setting linkID for Plugin to existing %d"));
            if (_IDSShouldLog())
            {
              v85 = self->_linkIDForPlugin;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Setting linkID for Plugin to existing %d"));
            }
          }
        }
        v20 = v14;

        goto LABEL_42;
      }
      objc_msgSend_allocateTime(v8, v47, v48, v49);
      v53 = v52;
      objc_msgSend_allocateTime(v14, v54, v55, v52);
      v57 = v56;

      if (v53 <= v57)
        goto LABEL_35;
      self->_linkIDForPlugin = objc_msgSend_linkID(v8, v58, v59, v60);
      OSLogHandleForTransportCategory();
      v61 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        v62 = self->_linkIDForPlugin;
        *(_DWORD *)buf = 67109120;
        v91 = v62;
        _os_log_impl(&dword_19B949000, v61, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to %d, after convergence", buf, 8u);
      }

      v20 = v8;
      if (!os_log_shim_legacy_logging_enabled())
        goto LABEL_42;
      v20 = v8;
      if (!_IDSShouldLogTransport())
        goto LABEL_42;
      v85 = self->_linkIDForPlugin;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Setting linkID for Plugin to %d, after convergence"));
      v20 = v8;
      if (!_IDSShouldLog())
        goto LABEL_42;
      v85 = self->_linkIDForPlugin;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Setting linkID for Plugin to %d, after convergence"));
    }
    else
    {
      self->_linkIDForPlugin = objc_msgSend_linkID(v8, v37, v38, v39);
      OSLogHandleForTransportCategory();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        v51 = self->_linkIDForPlugin;
        *(_DWORD *)buf = 67109120;
        v91 = v51;
        _os_log_impl(&dword_19B949000, v50, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to new link %d", buf, 8u);
      }

      v20 = v8;
      if (!os_log_shim_legacy_logging_enabled())
        goto LABEL_42;
      v20 = v8;
      if (!_IDSShouldLogTransport())
        goto LABEL_42;
      v85 = self->_linkIDForPlugin;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Setting linkID for Plugin to new link %d"));
      v20 = v8;
      if (!_IDSShouldLog())
        goto LABEL_42;
      v85 = self->_linkIDForPlugin;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Setting linkID for Plugin to new link %d"));
    }
    v20 = v8;
LABEL_42:
    if (v14)
    {
      if (self->_linkIDForPlugin)
      {
        v65 = self->_linkIDForPlugin;
        if (v65 != objc_msgSend_linkID(v14, v17, v18, v19))
        {
          objc_msgSend__didReceiveRequestToPurgeRegistration(self, v17, v18, v19);
          OSLogHandleForTransportCategory();
          v66 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            v70 = objc_msgSend_linkID(v14, v67, v68, v69);
            v74 = objc_msgSend_linkID(v8, v71, v72, v73);
            *(_DWORD *)buf = 67109376;
            v91 = v70;
            v92 = 1024;
            v93 = v74;
            _os_log_impl(&dword_19B949000, v66, OS_LOG_TYPE_DEFAULT, "linkID for Plugin is now changed from %d to %d", buf, 0xEu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v85 = objc_msgSend_linkID(v14, v17, v18, v19);
              v86 = (int)objc_msgSend_linkID(v8, v75, v76, v77);
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("linkID for Plugin is now changed from %d to %d"));
              if (_IDSShouldLog())
              {
                v85 = objc_msgSend_linkID(v14, v17, v18, v19, v85, v86);
                v86 = (int)objc_msgSend_linkID(v8, v78, v79, v80);
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("linkID for Plugin is now changed from %d to %d"));
              }
            }
          }
        }
      }
    }
    goto LABEL_51;
  }
  self->_linkIDForPlugin = objc_msgSend_linkID(v4, v5, v6, v7);
  OSLogHandleForTransportCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = self->_linkIDForPlugin;
    *(_DWORD *)buf = 67109120;
    v91 = v16;
    _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v85 = self->_linkIDForPlugin;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Setting linkID for Plugin to %d"));
      if (_IDSShouldLog())
      {
        v85 = self->_linkIDForPlugin;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Setting linkID for Plugin to %d"));
      }
    }
  }
  v14 = 0;
  v20 = v8;
LABEL_51:
  if (objc_msgSend_count(self->_pluginNameToPluginOptionsDict, v17, v18, v19, v85, v86))
  {
    pluginNameToPluginOptionsDict = self->_pluginNameToPluginOptionsDict;
    v87[0] = MEMORY[0x1E0C809B0];
    v87[1] = 3221225472;
    v87[2] = sub_19B9CB1DC;
    v87[3] = &unk_1E3C1FE28;
    v88 = v8;
    v89 = v20;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(pluginNameToPluginOptionsDict, v82, (uint64_t)v87, v83);

  }
  else
  {
    OSLogHandleForTransportCategory();
    v84 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "No plugin requests found.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("No plugin requests found."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("No plugin requests found."));
      }
    }
  }

}

- (void)_notifyCandidatePairConnected:(id)a3
{
  id v4;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v6;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  double v11;
  NSObject *v12;
  const char *v13;
  double v14;
  NSObject *v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (tokenToCandidatePairs
      && (v6 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v4)) != 0)
    {
      v9 = v6;
      objc_msgSend__setCandidatePairConnected_(self, v7, (uint64_t)v6, v8);
      if (self->_linkIDCounter == 1)
        objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(self, v10, (uint64_t)v4, v11, 0);
      if (self->_delayedConnData)
      {
        OSLogHandleForTransportCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "connection data is delayed, send it now.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("connection data is delayed, send it now."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("connection data is delayed, send it now."));
          }
        }
        objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v13, 0, v14);
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v4;
        _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for %@."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for %@."));
        }
      }
      v9 = 0;
    }

  }
}

- (void)_notifyCandidatePairDisconnected:(id)a3 withReason:(unsigned __int8)a4
{
  uint64_t v4;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  uint64_t v23;
  double v24;
  __CFString *v25;
  int isRelayStunCandidatePair;
  const char *v27;
  __CFString *v28;
  double v29;
  NSObject *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  char isVirtualRelayStunCandidatePair;
  char v39;
  const char *v40;
  uint64_t v41;
  double v42;
  NSObject *v43;
  IDSNWLink *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  const char *v65;
  double v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  double v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  IDSNWLink *nwLink;
  const char *v76;
  uint64_t v77;
  double v78;
  const char *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  double v85;
  const char *v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  const char *v90;
  IDSNWLink *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  double v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  double v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  const char *v113;
  double v114;
  const char *v115;
  uint64_t v116;
  double v117;
  IDSGlobalLinkBlocks *qraBlocks;
  void (**qraDISBlock)(id, NSString *, void *);
  NSString *cbuuid;
  void *v121;
  id WeakRetained;
  char v123;
  const char *v124;
  uint64_t v125;
  double v126;
  NSObject *v127;
  const char *v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  double v133;
  const char *v134;
  uint64_t v135;
  id v136;
  double v137;
  unint64_t v138;
  const char *v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  const char *v143;
  double v144;
  void *v145;
  void *v146;
  const char *v147;
  double v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  double v152;
  IDSNWLink *v153;
  id v154;
  const char *v155;
  double v156;
  NSMutableArray *connectedLinkIDs;
  const char *v158;
  double v159;
  void *v160;
  const char *v161;
  double v162;
  const char *v163;
  double v164;
  _QWORD *v165;
  const char *v166;
  uint64_t v167;
  double v168;
  NSObject *v169;
  void *v170;
  int linkIDForPlugin;
  id v172;
  const char *v173;
  double v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  double v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  double v188;
  int isCellularStunCandidate;
  NSObject *v190;
  int v191;
  NSMutableArray *unusedLinkIDs;
  void *v193;
  const char *v194;
  double v195;
  const char *v196;
  double v197;
  NSMutableArray *v198;
  void *v199;
  const char *v200;
  double v201;
  NSObject *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  void *v206;
  NSString *idsSessionID;
  id v208;
  __CFString *v209;
  void *v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint8_t v215[128];
  uint8_t buf[4];
  _BYTE v217[34];
  __int16 v218;
  id v219;
  __int16 v220;
  void *v221;
  __int16 v222;
  void *v223;
  uint64_t v224;

  v4 = a4;
  v224 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v10 = v6;
  if (v6)
  {
    v11 = objc_msgSend_state(v6, v7, v8, v9);
    v15 = objc_msgSend_linkID(v10, v12, v13, v14);
    objc_msgSend_linkUUID(v10, v16, v17, v18);
    v210 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isVirtualRelayStunCandidatePair(v10, v19, v20, v21) & 1) != 0)
    {
      v25 = CFSTR("VR ");
    }
    else
    {
      isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v10, v22, v23, v24);
      v25 = CFSTR("P2P");
      if (isRelayStunCandidatePair)
        v25 = CFSTR("RLY");
    }
    v28 = v25;
    if (v11 == 6)
      goto LABEL_86;
    objc_msgSend_setState_(v10, v27, 6, v29);
    v209 = v28;
    OSLogHandleForTransportCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = (&_IDSStunCandidatePairStateStrings)[v11];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v217 = v31;
      *(_WORD *)&v217[8] = 2080;
      *(_QWORD *)&v217[10] = off_1EE40A688;
      *(_WORD *)&v217[18] = 2112;
      *(_QWORD *)&v217[20] = v10;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v205 = off_1EE40A688;
        v206 = v10;
        v203 = (&_IDSStunCandidatePairStateStrings)[v11];
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
        if (_IDSShouldLog())
        {
          v205 = off_1EE40A688;
          v206 = v10;
          v203 = (&_IDSStunCandidatePairStateStrings)[v11];
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
        }
      }
    }
    if (objc_msgSend_isQUIC(v10, v32, v33, v34, v203, v205, v206)
      && ((isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v10, v35, v36, v37),
           (_DWORD)v4 == 5)
        ? (v39 = 1)
        : (v39 = isVirtualRelayStunCandidatePair),
          (v39 & 1) == 0))
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v35, v36, v37);
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_candidatePairToken(v10, v68, v69, v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v217 = v71;
        _os_log_impl(&dword_19B949000, v67, OS_LOG_TYPE_DEFAULT, "Disconnecting QUIC connection %@", buf, 0xCu);

      }
      if ((_DWORD)v4 == 1)
        v74 = 0.0;
      else
        v74 = 5.0;
      nwLink = self->_nwLink;
      objc_msgSend_sessionID(v10, v72, v73, 5.0);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v10, v76, v77, v78);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = objc_msgSend_address(v52, v79, v80, v81);
      objc_msgSend_remote(v10, v83, v84, v85);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v89 = objc_msgSend_external(v60, v86, v87, v88);
      objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v90, (uint64_t)v48, v74, v82, v89, 1);
    }
    else
    {
      if ((objc_msgSend_isRelayStunCandidatePair(v10, v35, v36, v37) & 1) != 0
        || (objc_msgSend_isVirtualRelayStunCandidatePair(v10, v40, v41, v42) & 1) != 0)
      {
LABEL_30:
        if (self->_QUICForQREnabled
          && (objc_msgSend_isVirtualRelayStunCandidatePair(v10, v40, v41, v42) & 1) == 0
          && !self->_disableDirectDatapath)
        {
          v91 = self->_nwLink;
          objc_msgSend_sessionID(v10, v40, v41, v42);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_local(v10, v93, v94, v95);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          v100 = objc_msgSend_address(v96, v97, v98, v99);
          objc_msgSend_remote(v10, v101, v102, v103);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          v108 = objc_msgSend_external(v104, v105, v106, v107);
          v112 = objc_msgSend_isRelayStunCandidatePair(v10, v109, v110, v111);
          objc_msgSend_removeChildConnectionEvaluatorForSessionID_localAddress_remoteAddress_isRelay_(v91, v113, (uint64_t)v92, v114, v100, v108, v112);

        }
        if ((int)v15 <= 0)
        {
          OSLogHandleForTransportCategory();
          v202 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v217 = v10;
            _os_log_impl(&dword_19B949000, v202, OS_LOG_TYPE_DEFAULT, "skip sending link disconnected with linkID 0 for %@.", buf, 0xCu);
          }

          v28 = v209;
          if (!os_log_shim_legacy_logging_enabled())
            goto LABEL_86;
          v28 = v209;
          if (!_IDSShouldLogTransport())
            goto LABEL_86;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip sending link disconnected with linkID 0 for %@."));
          v28 = v209;
          if (!_IDSShouldLog())
            goto LABEL_86;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip sending link disconnected with linkID 0 for %@."));
        }
        else
        {
          if (objc_msgSend_isSharedQRSession(v10, v40, v41, v42))
          {
            qraBlocks = self->_qraBlocks;
            if (qraBlocks)
            {
              qraDISBlock = (void (**)(id, NSString *, void *))qraBlocks->_qraDISBlock;
              if (qraDISBlock)
              {
                cbuuid = self->_cbuuid;
                objc_msgSend_sessionID(v10, v115, v116, v117);
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                qraDISBlock[2](qraDISBlock, cbuuid, v121);

              }
            }
          }
          WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
          v123 = objc_opt_respondsToSelector();

          if ((v123 & 1) != 0)
          {
            objc_msgSend_GlobalLink(IDSFoundationLog, v124, v125, v126);
            v127 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
            {
              idsSessionID = self->_idsSessionID;
              objc_msgSend_sessionID(v10, v128, v129, v130);
              v208 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend_candidatePairToken(v10, v131, v132, v133);
              v136 = (id)objc_claimAutoreleasedReturnValue();
              if (qword_1EE40B030 != -1)
                dispatch_once(&qword_1EE40B030, &unk_1E3C203A8);
              v138 = objc_msgSend_count((void *)qword_1EE40B020, v134, v135, v137);
              if (v138 > v4)
              {
                v145 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend_objectAtIndex_((void *)qword_1EE40B020, v139, v4, v141);
                v146 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(v145, v147, (uint64_t)CFSTR("%@ (%d)"), v148, v146, v4);
                v149 = (void *)objc_claimAutoreleasedReturnValue();

              }
              else
              {
                if (byte_1EE40B028)
                {
                  v142 = isRunningTests(v141, v138, v139, v140);
                  if ((_DWORD)v142)
                    throwsIDSAbortException(v144, v142, v143);
                  abort();
                }
                v149 = 0;
              }
              *(_DWORD *)buf = 67110658;
              *(_DWORD *)v217 = v15;
              *(_WORD *)&v217[4] = 2112;
              *(_QWORD *)&v217[6] = v209;
              *(_WORD *)&v217[14] = 2112;
              *(_QWORD *)&v217[16] = idsSessionID;
              *(_WORD *)&v217[24] = 2112;
              *(_QWORD *)&v217[26] = v208;
              v218 = 2112;
              v219 = v136;
              v220 = 2112;
              v221 = v210;
              v222 = 2112;
              v223 = v149;
              _os_log_impl(&dword_19B949000, v127, OS_LOG_TYPE_DEFAULT, "Send link disconnected (%d) %@ for IDSSessionID: %@ QRSessionID: %@ and %@ linkUUID:%@, reason: %@", buf, 0x44u);

            }
            v153 = self->_nwLink;
            if (v153)
              objc_msgSend_logConnectionTree(v153, v150, v151, v152);
            v154 = objc_loadWeakRetained((id *)&self->_delegate);
            objc_msgSend_link_didDisconnectUnderlyingLinkID_linkUUID_reason_(v154, v155, (uint64_t)self, v156, v15, v210, v4);

            connectedLinkIDs = self->_connectedLinkIDs;
            objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v158, v15, v159);
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_removeObject_(connectedLinkIDs, v161, (uint64_t)v160, v162);

            objc_msgSend__stopProbingOnLinkID_(self, v163, v15, v164);
          }
          v165 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
          if (*(_DWORD *)v165 == (_DWORD)v15)
          {
            *(_DWORD *)v165 = 0;
            objc_msgSend_GlobalLink(IDSFoundationLog, v166, v167, v168);
            v169 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v217 = v15;
              _os_log_impl(&dword_19B949000, v169, OS_LOG_TYPE_DEFAULT, "default link is disconnected, reset default link %d.", buf, 8u);
            }

          }
          if (self->_linkIDForPlugin == v15)
          {
            objc_msgSend_allValues(self->_tokenToCandidatePairs, v166, v167, v168);
            v170 = (void *)objc_claimAutoreleasedReturnValue();
            linkIDForPlugin = self->_linkIDForPlugin;
            v211 = 0u;
            v212 = 0u;
            v213 = 0u;
            v214 = 0u;
            v172 = v170;
            v177 = objc_msgSend_countByEnumeratingWithState_objects_count_(v172, v173, (uint64_t)&v211, v174, v215, 16);
            if (v177)
            {
              v179 = *(_QWORD *)v212;
LABEL_59:
              v180 = 0;
              while (1)
              {
                if (*(_QWORD *)v212 != v179)
                  objc_enumerationMutation(v172);
                v181 = *(void **)(*((_QWORD *)&v211 + 1) + 8 * v180);
                if (objc_msgSend_isSharedQRSession(v181, v175, v176, v178))
                {
                  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v181, v175, v176, v178) & 1) == 0
                    && objc_msgSend_state(v181, v175, v176, v178) == 4)
                  {
                    self->_linkIDForPlugin = objc_msgSend_linkID(v181, v175, v176, v178);
                    objc_msgSend_local(v181, v182, v183, v184);
                    v185 = (void *)objc_claimAutoreleasedReturnValue();
                    isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v185, v186, v187, v188);

                    if (!isCellularStunCandidate)
                      break;
                  }
                }
                if (v177 == ++v180)
                {
                  v177 = objc_msgSend_countByEnumeratingWithState_objects_count_(v172, v175, (uint64_t)&v211, v178, v215, 16);
                  if (v177)
                    goto LABEL_59;
                  break;
                }
              }
            }

            if (linkIDForPlugin == self->_linkIDForPlugin)
              self->_linkIDForPlugin = 0;
            OSLogHandleForTransportCategory();
            v190 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
            {
              v191 = self->_linkIDForPlugin;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v217 = v191;
              _os_log_impl(&dword_19B949000, v190, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to %d", buf, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v204 = self->_linkIDForPlugin;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Setting linkID for Plugin to %d"));
                if (_IDSShouldLog())
                {
                  v204 = self->_linkIDForPlugin;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Setting linkID for Plugin to %d"));
                }
              }
            }

          }
          unusedLinkIDs = self->_unusedLinkIDs;
          objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v166, v15, v168, v204);
          v193 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(unusedLinkIDs) = objc_msgSend_containsObject_(unusedLinkIDs, v194, (uint64_t)v193, v195);

          v28 = v209;
          if ((unusedLinkIDs & 1) != 0)
            goto LABEL_86;
          v198 = self->_unusedLinkIDs;
          objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v196, v15, v197);
          v199 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v198, v200, (uint64_t)v199, v201);

        }
        v28 = v209;
LABEL_86:

        goto LABEL_87;
      }
      objc_msgSend_GlobalLink(IDSFoundationLog, v40, v41, v42);
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v217 = v15;
        *(_WORD *)&v217[4] = 2112;
        *(_QWORD *)&v217[6] = v28;
        *(_WORD *)&v217[14] = 2112;
        *(_QWORD *)&v217[16] = v10;
        _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "Disconnecting connection for link (%d) %@ (candidate pair: %@)", buf, 0x1Cu);
      }

      v44 = self->_nwLink;
      objc_msgSend_sessionID(v10, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v10, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = objc_msgSend_address(v52, v53, v54, v55);
      objc_msgSend_remote(v10, v57, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = objc_msgSend_external(v60, v61, v62, v63);
      objc_msgSend_disconnectP2PWithSessionID_localAddress_remoteAddress_(v44, v65, (uint64_t)v48, v66, v56, v64);
    }

    goto LABEL_30;
  }
LABEL_87:

}

- (void)_notifyDefaultUnderlyingLinkChanged:(id)a3 error:(int64_t)a4
{
  id v6;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v8;
  void *v9;
  id WeakRetained;
  char v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL8 v17;
  id v18;
  const char *v19;
  double v20;
  NSObject *v21;
  uint8_t buf[4];
  _DWORD v23[7];

  *(_QWORD *)&v23[5] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (v6
    && (tokenToCandidatePairs = self->_tokenToCandidatePairs) != 0
    && (v8 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v6)) != 0)
  {
    v9 = v8;
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v11 = objc_opt_respondsToSelector();

    if ((v11 & 1) != 0)
    {
      v15 = objc_msgSend_linkID(v9, v12, v13, v14);
      OSLogHandleForTransportCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v23[0] = v15;
        LOWORD(v23[1]) = 1024;
        *(_DWORD *)((char *)&v23[1] + 2) = a4;
        _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "send default link changed (link:%d, error:%d).", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send default link changed (link:%d, error:%d)."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send default link changed (link:%d, error:%d)."));
        }
      }
      v17 = a4 == 0;
      v18 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didDefaultUnderlyingLinkChangeSucceeded_currentDefaultLinkID_(v18, v19, (uint64_t)self, v20, v17, v15);

    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v23 = v6;
      _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for %@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for %@."));
      }
    }
    v9 = 0;
  }

}

- (void)_notifyLinkDisconnectedWithError:(int64_t)a3 reason:(unsigned __int8)a4
{
  char *v4;
  int v5;
  NSObject *v7;
  NSObject *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  id v13;
  const char *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  int isRelayStunCandidatePair;
  int v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  double v39;
  const __CFString *v40;
  void *v41;
  void *v42;
  const char *v43;
  double v44;
  void *v45;
  IDSGlobalLink *v46;
  IDSGlobalLink *v47;
  char *v48;
  void *v49;
  char *v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t v56[128];
  uint8_t buf[4];
  IDSGlobalLink *v58;
  __int16 v59;
  _BYTE v60[10];
  char *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (self->_state != 6)
  {
    v4 = (char *)a4;
    v5 = a3;
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v58 = self;
      v59 = 1024;
      *(_DWORD *)v60 = v5;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = (_DWORD)v4;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSGlobalLink %@ disconnected, error(%d), reason(%d).", buf, 0x18u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v48 = (char *)a3;
        v50 = (char *)v4;
        v46 = self;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSGlobalLink %@ disconnected, error(%d), reason(%d)."));
        if (_IDSShouldLog())
        {
          v48 = (char *)a3;
          v50 = v4;
          v46 = self;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSGlobalLink %@ disconnected, error(%d), reason(%d)."));
        }
      }
    }
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 138412802;
      v58 = self;
      v59 = 2080;
      *(_QWORD *)v60 = v9;
      *(_WORD *)&v60[8] = 2080;
      v61 = off_1EE40A130[0];
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v48 = _IDSLinkStateStrings[self->_state];
        v50 = off_1EE40A130[0];
        v46 = self;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update GL: %@ state (%s->%s)."));
        if (_IDSShouldLog())
        {
          v48 = _IDSLinkStateStrings[self->_state];
          v50 = off_1EE40A130[0];
          v46 = self;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update GL: %@ state (%s->%s)."));
        }
      }
    }
    self->_state = 6;
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12, v46, v48, v50);
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v13 = (id)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v52, v15, v56, 16);
    if (v18)
    {
      v19 = *(_QWORD *)v53;
      v20 = 138412546;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v53 != v19)
            objc_enumerationMutation(v13);
          v22 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * i);
          v23 = objc_msgSend_state(v22, v16, v17, *(double *)&v20);
          isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v22, v24, v25, v26);
          if (v23 == 5)
            v28 = isRelayStunCandidatePair;
          else
            v28 = 0;
          if (v28 == 1)
          {
            OSLogHandleForTransportCategory();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v22, v30, v31, v32);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412546;
              v58 = self;
              v59 = 2112;
              *(_QWORD *)v60 = v33;
              _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "IDSGlobalLink %@ disconnect disconnecting candidate pairs: %@", buf, 0x16u);

            }
            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v22, v34, v36, v35);
              v47 = self;
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSGlobalLink %@ disconnect disconnecting candidate pairs: %@"));

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v22, v34, v37, v35, self, v49);
                v47 = self;
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSGlobalLink %@ disconnect disconnecting candidate pairs: %@"));

              }
            }
            objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v34, (uint64_t)v22, v35, v4, v47, v49);
          }
        }
        v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v52, *(double *)&v20, v56, 16);
      }
      while (v18);
    }

    if (a3 == 8)
    {
      v40 = CFSTR("Unallocbind timed out.");
    }
    else
    {
      if (a3 != 24)
      {
        v45 = 0;
        goto LABEL_38;
      }
      v40 = CFSTR("Unallocbind send failure.");
    }
    v41 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E0C99D80], v38, (uint64_t)v40, v39, *MEMORY[0x1E0CB2D50]);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(v41, v43, (uint64_t)CFSTR("GlobalLink"), v44, a3, v42);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_38:
    objc_msgSend__callDisconnectCompletionHandler_(self, v38, (uint64_t)v45, v39);

  }
}

- (void)_reportAWDAllocateTime
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSMutableArray *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const char *v17;
  double v18;
  NSMutableArray *allocateTimeReportBlocks;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t v26[128];
  uint8_t buf[4];
  char *v28;
  __int16 v29;
  int isExtIPDiscoveryDone;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v7 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 136315394;
    v28 = v7;
    v29 = 1024;
    isExtIPDiscoveryDone = objc_msgSend__isExtIPDiscoveryDone(self, v4, v5, v6);
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "_reportAWDAllocateTime state:%s isExtIPDiscoveryDone:%d", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v20 = _IDSLinkStateStrings[self->_state];
      v21 = objc_msgSend__isExtIPDiscoveryDone(self, v8, v9, v10);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_reportAWDAllocateTime state:%s isExtIPDiscoveryDone:%d"));
      if (_IDSShouldLog())
      {
        objc_msgSend__isExtIPDiscoveryDone(self, v8, v9, v10, v20, v21);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_reportAWDAllocateTime state:%s isExtIPDiscoveryDone:%d"));
      }
    }
  }
  if (self->_state >= 2 && objc_msgSend__isExtIPDiscoveryDone(self, v8, v9, v10))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v11 = self->_allocateTimeReportBlocks;
    v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v22, v13, v26, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v23 != v15)
            objc_enumerationMutation(v11);
          (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i) + 16))();
        }
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v17, (uint64_t)&v22, v18, v26, 16);
      }
      while (v14);
    }

    allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
    self->_allocateTimeReportBlocks = 0;

  }
}

- (void)_setFirstDefaultCandidatePair:(id)a3
{
  _DWORD *v4;
  const char *v5;
  double v6;
  id v7;

  v7 = a3;
  v4 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v4 && (!*v4 || !v4[1]))
    objc_msgSend__updateDefaultCandidatePair_(self, v5, (uint64_t)v7, v6);

}

- (id)_getAllocbindReportingDataBlob:(id)a3
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  void *v9;
  NSObject *v10;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  _BYTE v19[1472];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  bzero(v19, 0x5C0uLL);
  v12 = 0;
  if (StunUtilHasValidBinaryDataAttr(v3, 65517, v19, &v12))
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v4, (uint64_t)v19, v5, v12);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_base64EncodedStringWithOptions_(v6, v7, 0, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      OSLogHandleForTransportCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        v14 = v12;
        v15 = 2112;
        v16 = v6;
        v17 = 2112;
        v18 = v9;
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "length: %d, receive reporting data blob [%@], base64Encoded: [%@],", buf, 0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("length: %d, receive reporting data blob [%@], base64Encoded: [%@],"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("length: %d, receive reporting data blob [%@], base64Encoded: [%@],"));
        }
      }
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (BOOL)_postProcessAllocbindResponse:(id)a3 candidatePair:(id)a4 candidatePairToken:(id)a5
{
  return 0;
}

- (BOOL)_processAllocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  __int128 v15;
  const char *v16;
  uint64_t v17;
  double allocbindEndTime;
  __CFString *v19;
  void *Value;
  id v21;
  const char *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  _BOOL4 v32;
  const char *v33;
  uint64_t v34;
  double v35;
  IDSGFTMetricsCollector *metricsCollector;
  double v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  void *v42;
  const char *v43;
  double v44;
  const __CFString *v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  const char *v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  const char *v59;
  double v60;
  const char *v61;
  double v62;
  NSMutableArray *v63;
  const char *v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t i;
  void *v72;
  IDSGFTMetricsCollector *v73;
  void *v74;
  const char *v75;
  double v76;
  const char *v77;
  uint64_t v78;
  double v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  double v87;
  int v88;
  NSObject *v89;
  const char *v90;
  double v91;
  double allocbindStartTime;
  NSObject *v93;
  float v94;
  const char *v95;
  uint64_t v96;
  double v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  int v103;
  NSString *idsSessionID;
  const char *v105;
  uint64_t v106;
  double v107;
  id v108;
  const char *v109;
  double v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  double v114;
  void *v115;
  const char *v116;
  double v117;
  void *v118;
  id WeakRetained;
  char v120;
  id v121;
  const char *v122;
  double v123;
  const char *v124;
  uint64_t v125;
  double v126;
  __int128 v127;
  const char *v128;
  uint64_t v129;
  double v130;
  void *v131;
  const char *v132;
  double v133;
  const char *v134;
  uint64_t v135;
  double v136;
  unsigned int v137;
  const char *v138;
  uint64_t v139;
  double v140;
  unsigned int v141;
  NSObject *v142;
  const char *v143;
  uint64_t v144;
  double v145;
  int v146;
  const char *v147;
  double v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  const char *v154;
  double v155;
  id v156;
  const char *v157;
  double v158;
  char *v159;
  NSObject *v160;
  const char *v161;
  uint64_t v162;
  double v163;
  NSObject *v164;
  char *v165;
  const char *v166;
  uint64_t v167;
  double v168;
  const char *v169;
  uint64_t v170;
  double v171;
  const char *v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  double v178;
  void *v179;
  id v180;
  const char *v181;
  double v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  uint64_t v187;
  uint64_t j;
  id v189;
  const char *v190;
  uint64_t v191;
  double v192;
  const char *v193;
  uint64_t v194;
  double v195;
  const char *v196;
  double v197;
  NSObject *v198;
  char *v199;
  NSObject *v200;
  const char *v201;
  uint64_t v202;
  double v203;
  char *v204;
  int v205;
  const __CFString *v206;
  char *v207;
  BOOL v208;
  const char *v210;
  uint64_t v211;
  double v212;
  NSObject *v213;
  const char *v214;
  uint64_t v215;
  double v216;
  int v217;
  const __CFString *v218;
  const char *v219;
  double v220;
  uint64_t v221;
  __CFString *v222;
  uint64_t v223;
  const __CFString *v224;
  const char *v225;
  double v226;
  const char *v227;
  double v228;
  NSObject *v229;
  const char *v230;
  uint64_t v231;
  double v232;
  void *v233;
  const char *v234;
  uint64_t v235;
  double v236;
  void *v237;
  const char *v238;
  double v239;
  const char *v240;
  double v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  id v246;
  id v247;
  unint64_t v248;
  id v249;
  uint64_t v250;
  __CFString *v252;
  id key;
  id v254;
  _QWORD v255[4];
  id v256;
  IDSGlobalLink *v257;
  id v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  int v267;
  unsigned __int16 v268;
  uint8_t v269[128];
  uint8_t v270[4];
  _BYTE v271[10];
  _BYTE v272[10];
  id v273;
  _BYTE buf[32];
  __int128 v275;
  _BYTE v276[32];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _BYTE v280[128];
  _BYTE __b[1472];
  _OWORD v282[8];
  _OWORD __str[8];
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  v254 = a3;
  v249 = a4;
  key = a8;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[7] = v15;
  __str[6] = v15;
  __str[5] = v15;
  __str[4] = v15;
  __str[3] = v15;
  __str[2] = v15;
  __str[1] = v15;
  __str[0] = v15;
  v282[7] = v15;
  v282[6] = v15;
  v282[5] = v15;
  v282[4] = v15;
  v282[3] = v15;
  v282[2] = v15;
  v282[1] = v15;
  v282[0] = v15;
  v268 = 0;
  memset(__b, 170, sizeof(__b));
  v267 = 0;
  SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)a6);
  SAToIPPortString((char *)v282, 0x80uLL, (uint64_t)a7);
  allocbindEndTime = self->_allocbindEndTime;
  if (allocbindEndTime == 0.0)
    self->_allocbindEndTime = a9;
  v250 = objc_msgSend_type(v254, v16, v17, allocbindEndTime);
  v19 = CFSTR("allocbind");
  if (v250 != 4064)
    v19 = CFSTR("realloc");
  v252 = v19;
  Value = 0;
  if (key && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, key);
  v21 = Value;
  v248 = objc_msgSend_state(v21, v22, v23, v24);
  objc_msgSend_local(v21, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend_transport(v28, v29, v30, v31) == 2;

  metricsCollector = self->_metricsCollector;
  if (v32)
  {
    objc_msgSend_stunAllocbindResponse(metricsCollector, v33, v34, v35);
    GLUtilConnectionDictionaryForUDPCandidatePair(v37, (uint64_t)v21, (const char *)1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_connections(v21, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v42, v43, (uint64_t)v38, v44, CFSTR("qr"));
    v45 = CFSTR("udp");
  }
  else
  {
    objc_msgSend_tcpAllocbindResponse(metricsCollector, v33, v34, v35);
    GLUtilConnectionDictionaryForTCPCandidatePair(v46, (uint64_t)v21, (const char *)1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_connections(v21, v47, v48, v49);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v42, v50, (uint64_t)v38, v51, CFSTR("qr"));
    v45 = CFSTR("tcp");
  }

  objc_msgSend_linkMetrics(v21, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_receiveAllocbindResponse(v55, v56, v57, v58);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v59, (uint64_t)v21, v60);
  objc_msgSend_allocbindResponseForProtocolStack_(self->_metricsCollector, v61, (uint64_t)v45, v62);
  v265 = 0u;
  v266 = 0u;
  v264 = 0u;
  v263 = 0u;
  v63 = self->_interfaceAddressArray;
  v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v64, (uint64_t)&v263, v65, v280, 16);
  if (v68)
  {
    v70 = *(_QWORD *)v264;
    while (2)
    {
      for (i = 0; i != v68; ++i)
      {
        if (*(_QWORD *)v264 != v70)
          objc_enumerationMutation(v63);
        v72 = *(void **)(*((_QWORD *)&v263 + 1) + 8 * i);
        if (objc_msgSend_index(v72, v66, v67, v69) == a5)
        {
          v73 = self->_metricsCollector;
          objc_msgSend_name(v72, v66, v67, v69);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_allocbindResponseFromInterface_(v73, v75, (uint64_t)v74, v76);

          goto LABEL_21;
        }
      }
      v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v66, (uint64_t)&v263, v69, v280, 16);
      if (v68)
        continue;
      break;
    }
  }
LABEL_21:

  objc_msgSend_local(v21, v77, v78, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = objc_msgSend_address(v80, v81, v82, v83);

  v88 = *(unsigned __int8 *)(v84 + 1);
  if (v88 == 2)
  {
    if (IMGetDomainBoolForKey())
    {
LABEL_24:
      objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
      v89 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(v84 + 1) == 30)
          v90 = "IPv6";
        else
          v90 = "IPv4";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v90;
        _os_log_impl(&dword_19B949000, v89, OS_LOG_TYPE_DEFAULT, "_processAllocbindResponse: force dropping [%s] stun allocbind response.", buf, 0xCu);
      }

      goto LABEL_99;
    }
  }
  else if (v88 == 30 && (IMGetDomainBoolForKey() & 1) != 0)
  {
    goto LABEL_24;
  }
  if (self->_state >= 5 && (objc_msgSend_pendingNoSessionStateAllocbind(v21, v85, v86, v87) & 1) == 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
    v200 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
    {
      v204 = (&_IDSStunCandidatePairStateStrings)[v248];
      v205 = objc_msgSend_pendingNoSessionStateAllocbind(v21, v201, v202, v203);
      v206 = CFSTR("NO");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v204;
      *(_WORD *)&buf[12] = 2112;
      if (v205)
        v206 = CFSTR("YES");
      *(_QWORD *)&buf[14] = v206;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = v252;
      _os_log_impl(&dword_19B949000, v200, OS_LOG_TYPE_DEFAULT, "_processAllocbindResponse: candidate pair state is [%s], pendingNoSessionStateAllocbind: %@, ignore %@ response.", buf, 0x20u);
    }
    goto LABEL_94;
  }
  if (v248 > 2)
  {
    if ((objc_msgSend_pendingNoSessionStateAllocbind(v21, v85, v86, v87) & 1) != 0)
      goto LABEL_41;
    objc_msgSend_GlobalLink(IDSFoundationLog, v124, v125, v126);
    v200 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
    {
      v207 = (&_IDSStunCandidatePairStateStrings)[v248];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v207;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v252;
      _os_log_impl(&dword_19B949000, v200, OS_LOG_TYPE_DEFAULT, "candidate pair state is [%s], ignore %@ response.", buf, 0x16u);
    }
LABEL_94:

    goto LABEL_95;
  }
  allocbindStartTime = self->_allocbindStartTime;
  v91 = self->_allocbindEndTime;
  objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
  v93 = objc_claimAutoreleasedReturnValue();
  v94 = (v91 - allocbindStartTime) * 1000.0;
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_local(v21, v95, v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = objc_msgSend_transport(v98, v99, v100, v101);
    v103 = *(unsigned __int8 *)(v84 + 1);
    idsSessionID = self->_idsSessionID;
    objc_msgSend_sessionID(v21, v105, v106, v107);
    v108 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138413826;
    *(_QWORD *)&buf[4] = v252;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = key;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v94;
    LOWORD(v275) = 2048;
    *(_QWORD *)((char *)&v275 + 2) = v102;
    WORD5(v275) = 1024;
    HIDWORD(v275) = v103;
    *(_WORD *)v276 = 2112;
    *(_QWORD *)&v276[2] = idsSessionID;
    *(_WORD *)&v276[10] = 2112;
    *(_QWORD *)&v276[12] = v108;
    _os_log_impl(&dword_19B949000, v93, OS_LOG_TYPE_DEFAULT, "Received %@ response on %@ after %0.6lf ms over protocol: %ld family: %d IDSSessionID: %@ QRSessionID: %@", buf, 0x44u);

  }
  GLUtilReportAWDStunMessageEvent(v254, 0, v21, v94);
  objc_msgSend__getAllocbindReportingDataBlob_(self, v109, (uint64_t)v254, v110);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(v21, v112, v113, v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAllocbindDataBlob_(v115, v116, (uint64_t)v111, v117);

  GLUCreateQRStunMessageEvent(v254, 0, v21, self->_timeBase, v94);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  if (v118)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v120 = objc_opt_respondsToSelector();

    if ((v120 & 1) != 0)
    {
      v121 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v121, v122, (uint64_t)self, v123, v118);

    }
  }

LABEL_41:
  *(_QWORD *)&v127 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v127 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v278 = v127;
  v279 = v127;
  *(_OWORD *)&v276[16] = v127;
  v277 = v127;
  v275 = v127;
  *(_OWORD *)v276 = v127;
  *(_OWORD *)buf = v127;
  *(_OWORD *)&buf[16] = v127;
  if ((StunUtilHasValidXorMappedAddress((uint64_t)v254, buf) & 1) == 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v128, v129, v130);
    v198 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
    {
      v199 = SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)buf);
      *(_DWORD *)v270 = 138412546;
      *(_QWORD *)v271 = v252;
      *(_WORD *)&v271[8] = 2080;
      *(_QWORD *)v272 = v199;
      _os_log_impl(&dword_19B949000, v198, OS_LOG_TYPE_DEFAULT, "receive %@ response with invalid xor-mapped-address [%s]", v270, 0x16u);
    }
    goto LABEL_98;
  }
  objc_msgSend_local(v21, v128, v129, v130);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setExternal_(v131, v132, (uint64_t)buf, v133);

  v137 = objc_msgSend_channelNumber(v21, v134, v135, v136);
  if ((StunUtilHasValidChannelNumber(v254, v137, &v268) & 1) == 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v138, v139, v140);
    v198 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v270 = 138412290;
      *(_QWORD *)v271 = v252;
      _os_log_impl(&dword_19B949000, v198, OS_LOG_TYPE_DEFAULT, "receive %@ response without channel-number.", v270, 0xCu);
    }
LABEL_98:

LABEL_99:
    v208 = 0;
    goto LABEL_100;
  }
  v141 = v268;
  OSLogHandleForTransportCategory();
  v142 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
  {
    v146 = objc_msgSend_channelNumber(v21, v143, v144, v145);
    *(_DWORD *)v270 = 67109634;
    *(_DWORD *)v271 = v146;
    *(_WORD *)&v271[4] = 1024;
    *(_DWORD *)&v271[6] = v268;
    *(_WORD *)v272 = 2112;
    *(_QWORD *)&v272[2] = key;
    _os_log_impl(&dword_19B949000, v142, OS_LOG_TYPE_DEFAULT, "update channelNumber (%04x->%04x) for %@.", v270, 0x18u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v150 = objc_msgSend_channelNumber(v21, v147, v149, v148);
      v244 = v268;
      v246 = key;
      v242 = v150;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update channelNumber (%04x->%04x) for %@."));
      if (_IDSShouldLog())
      {
        v152 = objc_msgSend_channelNumber(v21, v147, v151, v148, v242, v244, key);
        v244 = v268;
        v246 = key;
        v242 = v152;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update channelNumber (%04x->%04x) for %@."));
      }
    }
  }
  v153 = bswap32(v141) >> 16;
  objc_msgSend_setChannelNumber_(v21, v147, v153, v148, v242, v244, v246);
  IDSSimpleUInt16List_AddItem((uint64_t)&self->_channelNumberList, v153);
  objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(self, v154, (uint64_t)v21, v155, a6, a7, v153);
  if (StunUtilHasValidBinaryDataAttr(v254, 32802, __b, &v267))
  {
    v156 = objc_alloc(MEMORY[0x1E0CB3940]);
    v159 = (char *)objc_msgSend_initWithBytes_length_encoding_(v156, v157, (uint64_t)__b, v158, v267, 4);
    OSLogHandleForTransportCategory();
    v160 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v270 = 138412290;
      *(_QWORD *)v271 = v159;
      _os_log_impl(&dword_19B949000, v160, OS_LOG_TYPE_DEFAULT, "receive software attribute [%@]", v270, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v243 = v159;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive software attribute [%@]"));
        if (_IDSShouldLog())
        {
          v243 = v159;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive software attribute [%@]"));
        }
      }
    }

  }
  if (StunUtilHasValidUInt16Attr((uint64_t)v254, 65509, &v268))
    objc_msgSend_setRelayLinkID_(v21, v161, v268, v163);
  if (v248 > 2)
    goto LABEL_126;
  objc_msgSend_setState_(v21, v161, 3, v163);
  OSLogHandleForTransportCategory();
  v164 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
  {
    v165 = (&_IDSStunCandidatePairStateStrings)[v248];
    *(_DWORD *)v270 = 136315650;
    *(_QWORD *)v271 = v165;
    *(_WORD *)&v271[8] = 2080;
    *(_QWORD *)v272 = off_1EE40A670;
    *(_WORD *)&v272[8] = 2112;
    v273 = key;
    _os_log_impl(&dword_19B949000, v164, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", v270, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v245 = off_1EE40A670;
      v247 = key;
      v243 = (&_IDSStunCandidatePairStateStrings)[v248];
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
      if (_IDSShouldLog())
      {
        v245 = off_1EE40A670;
        v247 = key;
        v243 = (&_IDSStunCandidatePairStateStrings)[v248];
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
      }
    }
  }
  if (self->_QUICForQREnabled)
    objc_msgSend_setConnectedToQR_(self->_nwLink, v166, 1, v168);
  if (objc_msgSend_relayProviderType(v21, v166, v167, v168, v243, v245, v247) == 1)
    objc_msgSend__stopAllocbindFailoverTimer_(self, v169, 0, v171);
  if (objc_msgSend_isRelayStunCandidatePair(v21, v169, v170, v171)
    && !(objc_msgSend_isSharedQRSession(v21, v172, v173, v174) & 1 | (v250 != 4064)))
  {
    objc_msgSend_sessionID(v21, v172, v175, v174);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v177, (uint64_t)v176, v178, 4);
    v179 = (void *)objc_claimAutoreleasedReturnValue();

    v261 = 0u;
    v262 = 0u;
    v259 = 0u;
    v260 = 0u;
    v180 = v179;
    v185 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v181, (uint64_t)&v259, v182, v269, 16);
    if (v185)
    {
      v187 = *(_QWORD *)v260;
      while (2)
      {
        for (j = 0; j != v185; ++j)
        {
          if (*(_QWORD *)v260 != v187)
            objc_enumerationMutation(v180);
          v189 = *(id *)(*((_QWORD *)&v259 + 1) + 8 * j);
          if (v189 != v21)
          {
            objc_msgSend_GlobalLink(IDSFoundationLog, v183, v184, v186);
            v229 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_sessionID(v21, v230, v231, v232);
              v233 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v270 = 138412802;
              *(_QWORD *)v271 = v189;
              *(_WORD *)&v271[8] = 2112;
              *(_QWORD *)v272 = v233;
              *(_WORD *)&v272[8] = 2112;
              v273 = v21;
              _os_log_impl(&dword_19B949000, v229, OS_LOG_TYPE_DEFAULT, "Found another connected candidate pair %@ with the same QRSessionID %@ disconnecting %@", v270, 0x20u);

            }
            objc_msgSend_candidatePairToken(v21, v234, v235, v236);
            v237 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v238, (uint64_t)v237, v239, 0, 8);

            goto LABEL_95;
          }
        }
        v185 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v183, (uint64_t)&v259, v186, v269, 16);
        if (v185)
          continue;
        break;
      }
    }

  }
  objc_msgSend__setFirstDefaultCandidatePair_(self, v172, (uint64_t)v21, v174);
  if (v250 == 4064)
  {
    objc_msgSend__processXORMappedAddress_arrivalTime_(self, v190, (uint64_t)v21, a9);
    if (objc_msgSend_allocateType(v21, v193, v194, v195) == 2)
      goto LABEL_95;
  }
  else
  {
    if ((objc_msgSend_hbStarted(v21, v190, v191, v192) & 1) == 0)
    {
      OSLogHandleForTransportCategory();
      v213 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
      {
        v217 = objc_msgSend_pendingRealloc(v21, v214, v215, v216);
        v218 = CFSTR("NO");
        if (v217)
          v218 = CFSTR("YES");
        *(_DWORD *)v270 = 138412290;
        *(_QWORD *)v271 = v218;
        _os_log_impl(&dword_19B949000, v213, OS_LOG_TYPE_DEFAULT, "receive reallocate response, send HBR (%@).", v270, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        v222 = objc_msgSend_pendingRealloc(v21, v219, v221, v220) ? CFSTR("YES") : CFSTR("NO");
        v243 = (char *)v222;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive reallocate response, send HBR (%@)."));
        if (_IDSShouldLog())
        {
          if (objc_msgSend_pendingRealloc(v21, v219, v223, v220, v243))
            v224 = CFSTR("YES");
          else
            v224 = CFSTR("NO");
          v243 = (char *)v224;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive reallocate response, send HBR (%@)."));
        }
      }
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v219, 3, v220, 0, 0, key, v243);
      objc_msgSend_setHbStarted_(v21, v225, 1, v226);
    }
    if ((objc_msgSend_isSharedQRSession(v21, v210, v211, v212) & 1) == 0)
      goto LABEL_95;
  }
  if ((objc_msgSend__postProcessAllocbindResponse_candidatePair_candidatePairToken_(self, v196, (uint64_t)v254, v197, v21, key) & 1) == 0)
  {
    if (self->_delaySessionConnected)
    {
      if (!self->_isInitiator)
      {
        v255[0] = MEMORY[0x1E0C809B0];
        v255[1] = 3221225472;
        v255[2] = sub_19B9CDDF8;
        v255[3] = &unk_1E3C1FE50;
        v256 = v21;
        v257 = self;
        v258 = key;
        objc_msgSend_startSessionConnectedTimer_block_(v256, v227, 30, v228, v255);

      }
    }
    else
    {
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v161, 1, v163, 0, 0, key);
    }
LABEL_126:
    if (objc_msgSend_pendingNoSessionStateAllocbind(v21, v161, v162, v163, v243))
      objc_msgSend_setPendingNoSessionState_(v21, v240, 0, v241);
  }
LABEL_95:
  v208 = 1;
LABEL_100:

  return v208;
}

- (BOOL)_processUnallocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  id v15;
  id v16;
  __int128 v17;
  void *Value;
  id v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  id v32;
  const char *v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  void *v43;
  const char *v44;
  double v45;
  char isEqualToString;
  const char *v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  double v52;
  unsigned int v53;
  NSObject *v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  NSObject *v60;
  void *v61;
  const char *v62;
  double v63;
  double v64;
  double v65;
  const char *v66;
  uint64_t v67;
  double v68;
  NSObject *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  double v73;
  NSString *idsSessionID;
  char *v75;
  const char *v76;
  uint64_t v77;
  double v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  double v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  double v90;
  int v91;
  float v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  double v96;
  id WeakRetained;
  char v98;
  id v99;
  const char *v100;
  double v101;
  NSObject *v102;
  char *v103;
  const char *v104;
  double v105;
  const char *v106;
  uint64_t v107;
  double v108;
  NSObject *v109;
  const char *v110;
  uint64_t v111;
  double v112;
  NSObject *v113;
  const char *v114;
  uint64_t v115;
  double v116;
  char *v117;
  const char *v118;
  uint64_t v119;
  double v120;
  const char *v121;
  uint64_t v122;
  double v123;
  void *v124;
  id v125;
  char v126;
  const char *v127;
  uint64_t v128;
  double v129;
  id v130;
  const char *v131;
  double v132;
  const char *v133;
  double v134;
  NSObject *v135;
  const char *v136;
  uint64_t v137;
  double v138;
  char *v139;
  BOOL v140;
  const char *v141;
  uint64_t v142;
  void *v143;
  double v144;
  NSMutableDictionary *unallocbindRequestToReason;
  void *v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  double v150;
  unsigned __int8 v151;
  const char *v152;
  uint64_t v153;
  double v154;
  void *v155;
  void *v156;
  const char *v157;
  double v158;
  void *v159;
  NSObject *v160;
  id v161;
  void *v162;
  const char *v163;
  double v164;
  BOOL v165;
  uint64_t v166;
  NSMutableDictionary *v167;
  void *v168;
  const char *v169;
  double v170;
  char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  char v172;
  NSObject *v173;
  const char *v174;
  double v175;
  id v176;
  char v177;
  const char *v178;
  double v179;
  const char *v180;
  double v181;
  NSObject *v182;
  char *v183;
  char *v185;
  IDSGlobalLink *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  id v190;
  void *v191;
  void *v192;
  uint64_t v193;
  id v194;
  _QWORD block[4];
  id v196;
  id v197;
  unsigned __int16 v198;
  int v199;
  uint8_t buf[4];
  void *prots;
  __int16 v202;
  char *v203;
  __int16 v204;
  id v205;
  __int16 v206;
  double v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  int v211;
  _BYTE __b[1472];
  _OWORD v213[8];
  _OWORD __str[8];
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v194 = a4;
  v16 = a8;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[6] = v17;
  __str[7] = v17;
  __str[4] = v17;
  __str[5] = v17;
  __str[2] = v17;
  __str[3] = v17;
  __str[0] = v17;
  __str[1] = v17;
  v213[6] = v17;
  v213[7] = v17;
  v213[4] = v17;
  v213[5] = v17;
  v213[2] = v17;
  v213[3] = v17;
  v213[0] = v17;
  v213[1] = v17;
  memset(__b, 170, sizeof(__b));
  v199 = 0;
  SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)a6);
  SAToIPPortString((char *)v213, 0x80uLL, (uint64_t)a7);
  Value = 0;
  if (v16 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v16);
  v19 = Value;
  v193 = objc_msgSend_state(v19, v20, v21, v22);
  if (objc_msgSend_relayProviderType(v19, v23, v24, v25) == 1)
  {
    if ((StunUtilHasValidBinaryDataAttr(v15, 65521, __b, &v199) & 1) != 0)
    {
      v32 = objc_alloc(MEMORY[0x1E0CB3A28]);
      v35 = (void *)objc_msgSend_initWithUUIDBytes_(v32, v33, (uint64_t)__b, v34);
      objc_msgSend_UUIDString(v35, v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sessionID(v19, v40, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v39, v44, (uint64_t)v43, v45);

      if ((isEqualToString & 1) != 0)
      {

        goto LABEL_9;
      }
      objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v49);
      v135 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_sessionID(v19, v136, v137, v138);
        v139 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        prots = v39;
        v202 = 2112;
        v203 = v139;
        _os_log_impl(&dword_19B949000, v135, OS_LOG_TYPE_DEFAULT, "receive unallocbind response with mismatched session-id %@ for %@.", buf, 0x16u);

      }
    }
    else
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v29, v30, v31);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_sessionID(v19, v56, v57, v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        prots = v59;
        _os_log_impl(&dword_19B949000, v55, OS_LOG_TYPE_DEFAULT, "receive unallocbind response with invalid session-id for %@.", buf, 0xCu);

      }
    }
  }
  else
  {
    v198 = 0;
    v53 = objc_msgSend_channelNumber(v19, v26, v27, v28);
    if ((StunUtilHasValidChannelNumber(v15, v53, &v198) & 1) != 0)
    {
LABEL_9:
      if (v193 == 6)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          prots = OBJC_PROTOCOL___IDSServerBagContentProvider.prots;
          _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "receive unallocbind response with state [%s], ignore.", buf, 0xCu);
        }

        goto LABEL_89;
      }
      objc_msgSend_requestID(v15, v50, v51, v52);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__startTimeForStunRequest_(self, v62, (uint64_t)v61, v63);
      v65 = v64;

      objc_msgSend_GlobalLink(IDSFoundationLog, v66, v67, v68);
      v69 = objc_claimAutoreleasedReturnValue();
      v70 = (a9 - v65) * 1000.0;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        idsSessionID = self->_idsSessionID;
        objc_msgSend_sessionID(v19, v71, v72, v73);
        v75 = (char *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_local(v19, v76, v77, v78);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v83 = objc_msgSend_transport(v79, v80, v81, v82);
        objc_msgSend_local(v19, v84, v85, v86);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = *(unsigned __int8 *)(objc_msgSend_address(v87, v88, v89, v90) + 1);
        *(_DWORD *)buf = 138413570;
        prots = idsSessionID;
        v202 = 2112;
        v203 = v75;
        v204 = 2112;
        v205 = v16;
        v206 = 2048;
        v207 = v70;
        v208 = 2048;
        v209 = v83;
        v210 = 1024;
        v211 = v91;
        _os_log_impl(&dword_19B949000, v69, OS_LOG_TYPE_DEFAULT, "Received unallocbind response for IDSSessionID: %@ QRSessionID: %@ on %@ after %0.6lf ms over protocol: %ld family: %d", buf, 0x3Au);

      }
      v92 = v70;
      GLUtilReportAWDStunMessageEvent(v15, 0, v19, v92);
      GLUCreateQRStunMessageEvent(v15, 0, v19, self->_timeBase, v92);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      if (v95)
      {
        WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        v98 = objc_opt_respondsToSelector();

        if ((v98 & 1) != 0)
        {
          v99 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v99, v100, (uint64_t)self, v101, v95);

        }
      }
      if (self->_state > 3)
      {
        if (self->_unallocbindRequestToReason)
        {
          objc_msgSend_requestID(v15, v93, v94, v96);
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          if (v143)
          {
            unallocbindRequestToReason = self->_unallocbindRequestToReason;
            objc_msgSend_requestID(v15, v141, v142, v144);
            v146 = (void *)objc_claimAutoreleasedReturnValue();
            v147 = (void *)CFDictionaryGetValue((CFDictionaryRef)unallocbindRequestToReason, v146);
            v151 = objc_msgSend_unsignedIntValue(v147, v148, v149, v150);

          }
          else
          {
            v151 = objc_msgSend_unsignedIntValue(0, v141, v142, v144);
          }

        }
        else
        {
          v151 = objc_msgSend_unsignedIntValue(0, v93, v94, v96);
        }
        objc_msgSend_requestID(v15, v152, v153, v154);
        v162 = (void *)objc_claimAutoreleasedReturnValue();
        if (v162)
        {
          v165 = self->_unallocbindRequestToReason == 0;

          if (!v165)
          {
            v167 = self->_unallocbindRequestToReason;
            objc_msgSend_requestID(v15, v163, v166, v164);
            v168 = (void *)objc_claimAutoreleasedReturnValue();
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v167, v168);

          }
        }
        objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v163, (uint64_t)v19, v164, v151);
        if (self->_isUPlusOneSession)
          objc_msgSend__destroyVirtualRelayLinksForCandidatePair_(self, v169, (uint64_t)v19, v170);
        hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v169, 3, v170, 4, 0, 0);
        v172 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
        if (self->_state == 5)
        {
          objc_msgSend__discardCandidatePairsWithOption_(self, v106, 0, v108);
          if ((v172 & 1) == 0)
            objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v106, 0, v108, v151);
        }
        else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0
               && objc_msgSend_isEqualToString_(self->_cbuuid, v106, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v108))
        {
          OSLogHandleForTransportCategory();
          v173 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v173, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no more underlying link is connected."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no more underlying link is connected."));
            }
          }
          objc_msgSend_disconnectWithCompletionHandler_(self, v174, 0, v175);
        }
        goto LABEL_81;
      }
      objc_msgSend_setState_(v19, v93, 6, v96);
      OSLogHandleForTransportCategory();
      v102 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        v103 = (&_IDSStunCandidatePairStateStrings)[v193];
        *(_DWORD *)buf = 136315650;
        prots = v103;
        v202 = 2080;
        v203 = off_1EE40A688;
        v204 = 2112;
        v205 = v16;
        _os_log_impl(&dword_19B949000, v102, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v188 = off_1EE40A688;
          v190 = v16;
          v185 = (&_IDSStunCandidatePairStateStrings)[v193];
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
          if (_IDSShouldLog())
          {
            v188 = off_1EE40A688;
            v190 = v16;
            v185 = (&_IDSStunCandidatePairStateStrings)[v193];
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
          }
        }
      }
      if ((objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v104, 3, v105, 4, 0, 0, v185, v188, v190) & 1) != 0)
      {
LABEL_81:
        if (objc_msgSend_pendingNoSessionStateAllocbind(v19, v106, v107, v108))
        {
          objc_msgSend_setState_(v19, v180, 1, v181);
          OSLogHandleForTransportCategory();
          v182 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
          {
            v183 = (&_IDSStunCandidatePairStateStrings)[v193];
            *(_DWORD *)buf = 136315650;
            prots = v183;
            v202 = 2080;
            v203 = off_1EE40A660;
            v204 = 2112;
            v205 = v16;
            _os_log_impl(&dword_19B949000, v182, OS_LOG_TYPE_DEFAULT, "unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.", buf, 0x20u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@."));
            }
          }
        }
        goto LABEL_88;
      }
      v191 = _Block_copy(self->_connectReadyHandler);
      OSLogHandleForTransportCategory();
      v109 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        prots = self;
        _os_log_impl(&dword_19B949000, v109, OS_LOG_TYPE_DEFAULT, "failed to connect GlobalLink %@ due to session connected message timed out.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v186 = self;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to connect GlobalLink %@ due to session connected message timed out."));
          if (_IDSShouldLog())
          {
            v186 = self;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to connect GlobalLink %@ due to session connected message timed out."));
          }
        }
      }
      objc_msgSend_local(v19, v110, v111, v112, v186);
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      OSLogHandleForTransportCategory();
      v113 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        v117 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v192, v114, v115, v116)];
        *(_DWORD *)buf = 136315394;
        prots = v117;
        v202 = 1024;
        LODWORD(v203) = 22;
        _os_log_impl(&dword_19B949000, v113, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v187 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v192, v118, v119, v120)];
          v189 = 22;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report session setup failure (%s, %d)."));
          if (_IDSShouldLog())
          {
            v187 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v192, v121, v122, v123, v187, 22)];
            v189 = 22;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report session setup failure (%s, %d)."));
          }
        }
      }
      GLUtilReportAWDClientTimerEvent(305, 22, v19, self->_enableSKE, self->_isInitiator, 0.0);
      GLUCreateQRClientTimeEvent(305, 22, v19, self->_timeBase, 0.0);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      v125 = objc_loadWeakRetained((id *)&self->_delegate);
      v126 = objc_opt_respondsToSelector();

      if ((v126 & 1) != 0)
      {
        v130 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v130, v131, (uint64_t)self, v132, v124);

      }
      if ((objc_msgSend_isSelfQRSession(v19, v127, v128, v129, v187, v189) & 1) != 0)
      {

LABEL_88:
LABEL_89:
        v140 = 1;
        goto LABEL_90;
      }
      if (v191)
      {
        v155 = (void *)MEMORY[0x1E0CB35C8];
        objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E0C99D80], v133, (uint64_t)CFSTR("SessionConnected message timed out."), v134, *MEMORY[0x1E0CB2D50]);
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_userInfo_(v155, v157, (uint64_t)CFSTR("GlobalLink"), v158, 9, v156);
        v159 = (void *)objc_claimAutoreleasedReturnValue();

        im_primary_queue();
        v160 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_19B9CED1C;
        block[3] = &unk_1E3C1C7E8;
        v196 = v159;
        v197 = v191;
        v161 = v159;
        dispatch_async(v160, block);

      }
      else
      {
        v176 = objc_loadWeakRetained((id *)&self->_delegate);
        v177 = objc_opt_respondsToSelector();

        if ((v177 & 1) == 0)
        {
LABEL_80:

          goto LABEL_81;
        }
        v161 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v161, v178, (uint64_t)self, v179, 0, self->_cbuuid);
      }

      goto LABEL_80;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
    v60 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(prots) = v198;
      _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "receive unallocbind response invalid channel-number %04x.", buf, 8u);
    }

  }
  v140 = 0;
LABEL_90:

  return v140;
}

- (BOOL)_processReallocIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  id v14;
  id v15;
  __int128 v16;
  NSObject *v17;
  void *Value;
  id v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  double v29;
  const char *v30;
  double v31;
  NSObject *v32;
  const char *v33;
  double v34;
  const char *v35;
  NSObject *v36;
  char *v37;
  unsigned int v38;
  NSObject *v39;
  char *v40;
  __int128 v41;
  const char *v42;
  double v43;
  NSObject *v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  double v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  NSObject *v53;
  IDSTCPLink *tcpLink;
  const char *v55;
  double v56;
  NSObject *v57;
  id v58;
  char v59;
  id v60;
  const char *v61;
  double v62;
  NSObject *v63;
  void *v64;
  id v65;
  char v66;
  id v67;
  const char *v68;
  double v69;
  BOOL v70;
  NSObject *v71;
  id WeakRetained;
  char v73;
  NSObject *v74;
  id v75;
  char v76;
  const char *v77;
  double v78;
  NSObject *v79;
  id v80;
  char v81;
  const char *v82;
  double v83;
  IDSTCPLink *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  NSObject *v88;
  IDSTCPLink *v89;
  NSObject *v90;
  IDSTCPLink *tcpSSLLink;
  const char *v92;
  double v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  double v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  double v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  double v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  const char *v123;
  double v124;
  const char *v125;
  double v126;
  const char *v127;
  double v128;
  const char *v129;
  uint64_t v130;
  double v131;
  const char *v132;
  uint64_t v133;
  uint64_t *FirstPrefix;
  double v135;
  void *v136;
  const char *v137;
  double v138;
  const char *v139;
  uint64_t v140;
  double v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  double v145;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v147;
  id v148;
  NSObject *v149;
  const char *v150;
  double v151;
  uint64_t v152;
  NSObject *v153;
  const char *v154;
  uint64_t v155;
  double v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  double v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  double v168;
  int v169;
  const char *v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  double v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  double v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  double v200;
  const char *v201;
  uint64_t v202;
  id v203;
  double v204;
  uint64_t v205;
  const char *v206;
  double v207;
  const char *v208;
  uint64_t v209;
  double v210;
  void *v211;
  const char *v212;
  uint64_t v213;
  double v214;
  uint64_t v215;
  const char *v216;
  double v217;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *v219;
  NSObject *v220;
  id v221;
  const char *v222;
  double v223;
  NSMutableDictionary *v224;
  NSMutableDictionary *reallocNewCandidatePairToOldCandidatePair;
  id v226;
  NSObject *v227;
  id v228;
  void *v229;
  id v230;
  char v231;
  id v232;
  const char *v233;
  double v234;
  NSObject *v236;
  id v237;
  char *v238;
  char *v239;
  uint64_t v240;
  id v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  id v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  uint64_t v253;
  sockaddr *v254;
  id v255;
  void *v256;
  uint8_t v257[4];
  id v258;
  __int16 v259;
  uint64_t v260;
  __int16 v261;
  uint64_t v262;
  __int16 v263;
  unsigned int v264;
  __int16 v265;
  int v266;
  _BYTE buf[32];
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  _OWORD v274[8];
  _DWORD __b[372];
  char v276[16];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  char __str[16];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;

  v253 = *(_QWORD *)&a5;
  v292 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v255 = a4;
  v15 = a8;
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v290 = v16;
  v291 = v16;
  v288 = v16;
  v289 = v16;
  v286 = v16;
  v287 = v16;
  *(_OWORD *)__str = v16;
  v285 = v16;
  v283 = v16;
  v282 = v16;
  v281 = v16;
  v280 = v16;
  v279 = v16;
  v278 = v16;
  v277 = v16;
  *(_OWORD *)v276 = v16;
  memset(__b, 170, sizeof(__b));
  memset(v274, 0, sizeof(v274));
  v254 = a6;
  SAToIPPortString(__str, 0x80uLL, (uint64_t)a6);
  SAToIPPortString(v276, 0x80uLL, (uint64_t)a7);
  OSLogHandleForTransportCategory();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "receive realloc indication on %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v237 = v15;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive realloc indication on %@"));
      if (_IDSShouldLog())
      {
        v237 = v15;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive realloc indication on %@"));
      }
    }
  }
  Value = 0;
  if (v15 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v15);
  v19 = Value;
  objc_msgSend_local(v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend_transport(v23, v24, v25, v26);

  if (objc_msgSend_getAttribute_attribute_(v14, v28, 65520, v29, __b))
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v30, (uint64_t)&__b[3], v31, __b[2]);
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v256;
      _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "receive realloc token %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v237 = v256;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive realloc token %@"));
        if (_IDSShouldLog())
        {
          v237 = v256;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive realloc token %@"));
        }
      }
    }
    if (!objc_msgSend_getAttribute_attribute_(v14, v33, 22, v34, __b, v237))
      goto LABEL_35;
    __memcpy_chk();
    OSLogHandleForTransportCategory();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v37 = SAToIPPortString(v276, 0x80uLL, (uint64_t)v274);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v37;
      _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "receive xor-relayed-address [%s].", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v238 = SAToIPPortString(v276, 0x80uLL, (uint64_t)v274);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive xor-relayed-address [%s]."));
        if (_IDSShouldLog())
        {
          v238 = SAToIPPortString(v276, 0x80uLL, (uint64_t)v274);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive xor-relayed-address [%s]."));
        }
      }
    }
    if ((unint64_t)(v27 - 3) <= 1)
    {
      if (v27 == 3)
        v38 = 80;
      else
        v38 = 443;
      WORD1(v274[0]) = __rev16(v38);
      OSLogHandleForTransportCategory();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = SAToIPPortString(v276, 0x80uLL, (uint64_t)v274);
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v40;
        _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "stunTransport: %ld, xor-relayed-address [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v238 = (char *)v27;
          v242 = SAToIPPortString(v276, 0x80uLL, (uint64_t)v274);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stunTransport: %ld, xor-relayed-address [%s]."));
          if (_IDSShouldLog())
          {
            v238 = (char *)v27;
            v242 = SAToIPPortString(v276, 0x80uLL, (uint64_t)v274);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stunTransport: %ld, xor-relayed-address [%s]."));
          }
        }
      }
    }
    if (IsValidSA((_BOOL8)v274))
    {
LABEL_35:
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v272 = v41;
      v273 = v41;
      v270 = v41;
      v271 = v41;
      v268 = v41;
      v269 = v41;
      *(_OWORD *)buf = v41;
      *(_OWORD *)&buf[16] = v41;
      if (!objc_msgSend_getAttribute_attribute_(v14, v35, 32, -3.72066208e-103, __b, v238, v242))
        goto LABEL_43;
      __memcpy_chk();
      OSLogHandleForTransportCategory();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        v45 = SAToIPPortString(v276, 0x80uLL, (uint64_t)buf);
        *(_DWORD *)v257 = 136315138;
        v258 = v45;
        _os_log_impl(&dword_19B949000, v44, OS_LOG_TYPE_DEFAULT, "receive xor-mapped-address [%s].", v257, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v239 = SAToIPPortString(v276, 0x80uLL, (uint64_t)buf);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive xor-mapped-address [%s]."));
          if (_IDSShouldLog())
          {
            v239 = SAToIPPortString(v276, 0x80uLL, (uint64_t)buf);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive xor-mapped-address [%s]."));
          }
        }
      }
      if (!IsValidSA((_BOOL8)buf))
      {
        OSLogHandleForIDSCategory();
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v257 = 0;
          _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_ERROR, "invalid xor-mapped-address.", v257, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          _IDSWarnV();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("invalid xor-mapped-address."));
          _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("invalid xor-mapped-address."));
        }
        GLUtilReportAWDStunMessageEvent(v14, 4, v19, 0.0);
        GLUCreateQRStunMessageEvent(v14, 4, v19, 0, 0.0);
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        if (v252)
        {
          WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
          v73 = objc_opt_respondsToSelector();

          if ((v73 & 1) != 0)
            goto LABEL_97;
        }
      }
      else
      {
LABEL_43:
        if (!objc_msgSend_getAttribute_attribute_(v14, v42, 12, v43, __b, v239))
          goto LABEL_51;
        if (bswap32(HIWORD(__b[2])) >> 16 == objc_msgSend_channelNumber(v19, v46, v47, v48))
        {
          OSLogHandleForTransportCategory();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v257 = 67109120;
            LODWORD(v258) = HIWORD(__b[2]);
            _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "receive channel-number [%04x].", v257, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v240 = HIWORD(__b[2]);
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive channel-number [%04x]."));
              if (_IDSShouldLog())
              {
                v240 = HIWORD(__b[2]);
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive channel-number [%04x]."));
              }
            }
          }
LABEL_51:
          objc_msgSend_sessionID(v19, v46, v47, v48, v240);
          v252 = (void *)objc_claimAutoreleasedReturnValue();
          if (v252)
          {
            if (self->_H2FallbackEnabled)
            {
              if (v27 == 4)
              {
                objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
                v53 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  tcpLink = self->_tcpLink;
                  *(_DWORD *)v257 = 138412290;
                  v258 = tcpLink;
                  _os_log_impl(&dword_19B949000, v53, OS_LOG_TYPE_DEFAULT, "_processReallocIndication: H2 enabled Use tcpLink: %@", v257, 0xCu);
                }

                objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(self->_tcpLink, v55, v253, v56, v254, LOWORD(self->_portRange), v274, self->_clientUUID, 0);
              }
            }
            else
            {
              if (v27 == 4)
              {
                objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
                v90 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                {
                  tcpSSLLink = self->_tcpSSLLink;
                  *(_DWORD *)v257 = 138412290;
                  v258 = tcpSSLLink;
                  _os_log_impl(&dword_19B949000, v90, OS_LOG_TYPE_DEFAULT, "_processReallocIndication: Use sslLink: %@", v257, 0xCu);
                }

                v84 = self->_tcpSSLLink;
                objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v84, v92, v253, v93, v254, LOWORD(self->_portRange), v274, self->_clientUUID, 0);
              }
              else
              {
                if (v27 == 3)
                {
                  v84 = self->_tcpLink;
                  objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
                  v88 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                  {
                    v89 = self->_tcpLink;
                    *(_DWORD *)v257 = 138412290;
                    v258 = v89;
                    _os_log_impl(&dword_19B949000, v88, OS_LOG_TYPE_DEFAULT, "_processReallocIndication: Use tcpLink: %@", v257, 0xCu);
                  }

                }
                else
                {
                  v84 = 0;
                }
                objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v84, v50, v253, v52, v254, LOWORD(self->_portRange), v274, self->_clientUUID, 0);
              }

            }
            objc_msgSend_local(v19, v50, v51, v52);
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            v98 = objc_msgSend_radioAccessTechnology(v94, v95, v96, v97);

            objc_msgSend_remote(v19, v99, v100, v101);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            v106 = objc_msgSend_radioAccessTechnology(v102, v103, v104, v105);

            objc_msgSend_local(v19, v107, v108, v109);
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            v114 = objc_msgSend_mtu(v110, v111, v112, v113);

            objc_msgSend_remote(v19, v115, v116, v117);
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            v122 = objc_msgSend_mtu(v118, v119, v120, v121);

            v247 = v27 - 3;
            if ((unint64_t)(v27 - 3) > 1)
            {
              objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v123, 3, v124, 2, v98, v114, v253, v254, 0);
              v251 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = 2;
            }
            else
            {
              objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v123, 3, v124, v27, v98, v114, v253, v254, buf);
              v251 = (void *)objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v125, 3, v126, v27, v106, v122, 0xFFFFFFFFLL, 0, v274);
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v127, (uint64_t)v251, v128, v249, v252, self);
            v250 = (void *)objc_claimAutoreleasedReturnValue();
            if (v254->sa_family == 30 && BYTE1(v274[0]) == 2)
            {
              FirstPrefix = IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, v253);
              if (!FirstPrefix)
              {
                OSLogHandleForTransportCategory();
                v236 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v257 = 67109120;
                  LODWORD(v258) = v253;
                  _os_log_impl(&dword_19B949000, v236, OS_LOG_TYPE_DEFAULT, "failed to get nat64 prefix for realloc (if:%d).", v257, 8u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get nat64 prefix for realloc (if:%d)."));
                    if (_IDSShouldLog())
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get nat64 prefix for realloc (if:%d)."));
                  }
                }
                v70 = 0;
                goto LABEL_154;
              }
              objc_msgSend_local(v250, v132, v133, v135);
              v136 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setPrefix_(v136, v137, (uint64_t)FirstPrefix, v138);

              objc_msgSend_synthesizeNat64WithPrefix(v250, v139, v140, v141);
            }
            objc_msgSend_candidatePairToken(v250, v129, v130, v131);
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            tokenToCandidatePairs = self->_tokenToCandidatePairs;
            if (tokenToCandidatePairs
              && v144
              && (v147 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v144)) != 0)
            {
              v148 = v147;
              OSLogHandleForTransportCategory();
              v149 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v257 = 138412290;
                v258 = v144;
                _os_log_impl(&dword_19B949000, v149, OS_LOG_TYPE_DEFAULT, "found existing candidate pair for %@.", v257, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v241 = v144;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found existing candidate pair for %@."));
                  if (_IDSShouldLog())
                  {
                    v241 = v144;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found existing candidate pair for %@."));
                  }
                }
              }
            }
            else
            {
              v152 = objc_msgSend_channelNumber(v19, v142, v143, v145);
              IDSSimpleUInt16List_AddItem((uint64_t)&self->_reallocChannelList, v152);
              OSLogHandleForTransportCategory();
              v153 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
              {
                v157 = objc_msgSend_length(v256, v154, v155, v156);
                objc_msgSend_relaySessionKey(v19, v158, v159, v160);
                v161 = (void *)objc_claimAutoreleasedReturnValue();
                v165 = objc_msgSend_length(v161, v162, v163, v164);
                v169 = objc_msgSend_channelNumber(v19, v166, v167, v168);
                *(_DWORD *)v257 = 138413314;
                v258 = v19;
                v259 = 2048;
                v260 = v157;
                v261 = 2048;
                v262 = v165;
                v263 = 1024;
                v264 = __rev16(v152);
                v265 = 1024;
                v266 = v169;
                _os_log_impl(&dword_19B949000, v153, OS_LOG_TYPE_DEFAULT, "start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).", v257, 0x2Cu);

              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v173 = objc_msgSend_length(v256, v170, v171, v172);
                  objc_msgSend_relaySessionKey(v19, v174, v175, v176);
                  v177 = (void *)objc_claimAutoreleasedReturnValue();
                  v181 = objc_msgSend_length(v177, v178, v179, v180);
                  v185 = __rev16(v152);
                  v245 = v185;
                  v246 = objc_msgSend_channelNumber(v19, v182, v183, v184);
                  v243 = v173;
                  v244 = v181;
                  v241 = v19;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d)."));

                  if (_IDSShouldLog())
                  {
                    v189 = objc_msgSend_length(v256, v186, v187, v188, v19, v173, v181, v185, v246);
                    objc_msgSend_relaySessionKey(v19, v190, v191, v192);
                    v193 = (void *)objc_claimAutoreleasedReturnValue();
                    v197 = objc_msgSend_length(v193, v194, v195, v196);
                    v245 = v185;
                    v246 = objc_msgSend_channelNumber(v19, v198, v199, v200);
                    v243 = v189;
                    v244 = v197;
                    v241 = v19;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d)."));

                  }
                }
              }
              v203 = v250;
              if (v247 <= 1)
              {
                v205 = objc_msgSend_channelNumber(v19, v201, v202, v204);
                objc_msgSend_setChannelNumber_(v203, v206, v205, v207);
              }
              objc_msgSend_setPropertiesWithReallocCandidatePair_reallocToken_(v203, v201, (uint64_t)v19, v204, v256, v241, v243, v244, v245, v246);
              objc_msgSend_remote(v203, v208, v209, v210);
              v211 = (void *)objc_claimAutoreleasedReturnValue();
              v215 = objc_msgSend_external(v211, v212, v213, v214);
              objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(self, v216, (uint64_t)v203, v217, v254, v215, v152);

              if (!self->_tokenToCandidatePairs)
              {
                Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v219 = self->_tokenToCandidatePairs;
                self->_tokenToCandidatePairs = Mutable;

              }
              v148 = v203;
              if (v148)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, v144, v148);
              }
              else
              {
                v220 = MEMORY[0x1E0C81028];
                v221 = MEMORY[0x1E0C81028];
                if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
                  sub_19BAF12A0();

              }
            }
            objc_msgSend_setIsRealloc_(v148, v150, 1, v151, v241);
            objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(self, v222, (uint64_t)v144, v223, 0, 1, 0);
            if (!self->_reallocNewCandidatePairToOldCandidatePair)
            {
              v224 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
              self->_reallocNewCandidatePairToOldCandidatePair = v224;

            }
            v226 = v19;
            if (v226)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_reallocNewCandidatePairToOldCandidatePair, v144, v226);
            }
            else
            {
              v227 = MEMORY[0x1E0C81028];
              v228 = MEMORY[0x1E0C81028];
              if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
                sub_19BAF150C();

            }
            GLUtilReportAWDStunMessageEvent(v14, 0, v226, 0.0);
            GLUCreateQRStunMessageEvent(v14, 0, v226, 0, 0.0);
            v229 = (void *)objc_claimAutoreleasedReturnValue();
            if (v229)
            {
              v230 = objc_loadWeakRetained((id *)&self->_delegate);
              v231 = objc_opt_respondsToSelector();

              if ((v231 & 1) != 0)
              {
                v232 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didAddQREvent_(v232, v233, (uint64_t)self, v234, v229);

              }
            }

            v70 = 1;
LABEL_154:

            goto LABEL_155;
          }
          OSLogHandleForTransportCategory();
          v74 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v257 = 138412290;
            v258 = v15;
            _os_log_impl(&dword_19B949000, v74, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for %@.", v257, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find relay-session-id for %@."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find relay-session-id for %@."));
            }
          }
          GLUtilReportAWDStunMessageEvent(v14, 6, v19, 0.0);
          GLUCreateQRStunMessageEvent(v14, 6, v19, 0, 0.0);
          v251 = (void *)objc_claimAutoreleasedReturnValue();
          if (v251)
          {
            v75 = objc_loadWeakRetained((id *)&self->_delegate);
            v76 = objc_opt_respondsToSelector();

            if ((v76 & 1) != 0)
            {
              v248 = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didAddQREvent_(v248, v77, (uint64_t)self, v78, v251);
              v70 = 0;

LABEL_155:
              goto LABEL_156;
            }
          }
LABEL_98:
          v70 = 0;
          goto LABEL_155;
        }
        OSLogHandleForTransportCategory();
        v79 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v257 = 0;
          _os_log_impl(&dword_19B949000, v79, OS_LOG_TYPE_DEFAULT, "channel-number mismatch in realloc indication.", v257, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("channel-number mismatch in realloc indication."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("channel-number mismatch in realloc indication."));
          }
        }
        GLUtilReportAWDStunMessageEvent(v14, 5, v19, 0.0);
        GLUCreateQRStunMessageEvent(v14, 5, v19, 0, 0.0);
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        if (v252)
        {
          v80 = objc_loadWeakRetained((id *)&self->_delegate);
          v81 = objc_opt_respondsToSelector();

          if ((v81 & 1) != 0)
          {
LABEL_97:
            v251 = objc_loadWeakRetained((id *)&self->_delegate);
            objc_msgSend_link_didAddQREvent_(v251, v82, (uint64_t)self, v83, v252);
            goto LABEL_98;
          }
        }
      }
      v70 = 0;
LABEL_156:

      goto LABEL_157;
    }
    OSLogHandleForIDSCategory();
    v63 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v63, OS_LOG_TYPE_ERROR, "invalid realloc server address.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("invalid realloc server address."));
      _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("invalid realloc server address."));
    }
    GLUtilReportAWDStunMessageEvent(v14, 3, v19, 0.0);
    GLUCreateQRStunMessageEvent(v14, 3, v19, 0, 0.0);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    if (v64)
    {
      v65 = objc_loadWeakRetained((id *)&self->_delegate);
      v66 = objc_opt_respondsToSelector();

      if ((v66 & 1) != 0)
      {
        v67 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v67, v68, (uint64_t)self, v69, v64);

      }
    }

  }
  else
  {
    OSLogHandleForIDSCategory();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_ERROR, "failed to receive realloc token.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("failed to receive realloc token."));
      _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("failed to receive realloc token."));
    }
    GLUtilReportAWDStunMessageEvent(v14, 2, v19, 0.0);
    GLUCreateQRStunMessageEvent(v14, 2, v19, 0, 0.0);
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    if (v256)
    {
      v58 = objc_loadWeakRetained((id *)&self->_delegate);
      v59 = objc_opt_respondsToSelector();

      if ((v59 & 1) != 0)
      {
        v60 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v60, v61, (uint64_t)self, v62, v256);

      }
    }
  }
  v70 = 0;
LABEL_157:

  return v70;
}

- (BOOL)_processDataIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  id v13;
  id v14;
  id v15;
  const char *v16;
  double v17;
  const char *v18;
  double v19;
  const char *v20;
  unsigned __int16 v21;
  char v22;
  NSObject *v23;
  _WORD v25[748];
  _DWORD __b[372];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a8;
  memset(__b, 170, sizeof(__b));
  if ((objc_msgSend_getAttribute_attribute_(v13, v16, 19, v17, __b) & 1) != 0)
  {
    memset(v25, 170, 0x5D0uLL);
    if (objc_msgSend_getAttribute_attribute_(v13, v18, 65509, v19, v25))
      v21 = v25[4];
    else
      v21 = 0;
    v22 = objc_msgSend__processIncomingIndicationData_length_candidatePairToken_arrivalTime_remoteRelayLinkID_(self, v20, (uint64_t)&__b[3], a9, __b[2], v15, v21);
  }
  else
  {
    OSLogHandleForIDSCategory();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v25[0] = 0;
      _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_ERROR, "receive invalid data indication.", (uint8_t *)v25, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("receive invalid data indication."));
      _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("receive invalid data indication."));
    }
    v22 = 0;
  }

  return v22;
}

- (BOOL)_processDiagnosticIndication:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  int isInternalInstall;
  id v17;
  const char *v18;
  double v19;
  void *v20;
  NSObject *v21;
  id v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  double v27;
  unsigned __int16 v28;
  char v29;
  NSObject *v30;
  __CFString *v31;
  NSObject *v32;
  void *v34;
  unsigned __int16 v35;
  int v36;
  uint8_t buf[4];
  void *v38;
  _BYTE __b[1472];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v12, v13, v14, v15);

  if (!isInternalInstall)
  {
    v29 = 1;
    goto LABEL_25;
  }
  memset(__b, 170, sizeof(__b));
  v36 = 0;
  v35 = 0;
  if (!StunUtilHasValidBinaryDataAttr(v7, 65514, __b, &v36))
  {
    OSLogHandleForIDSCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_ERROR, "receive invalid subtype indication.", buf, 2u);
    }

    v20 = 0;
    if ((os_log_shim_legacy_logging_enabled() & 1) == 0)
      goto LABEL_24;
    v31 = CFSTR("receive invalid subtype indication.");
    goto LABEL_23;
  }
  v17 = objc_alloc(MEMORY[0x1E0CB3940]);
  v20 = (void *)objc_msgSend_initWithBytes_length_encoding_(v17, v18, (uint64_t)__b, v19, v36, 4);
  OSLogHandleForTransportCategory();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v38 = v20;
    _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "receive subtype [%@]", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v34 = v20;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive subtype [%@]"));
      if (_IDSShouldLog())
      {
        v34 = v20;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive subtype [%@]"));
      }
    }
  }
  if ((StunUtilHasValidBinaryDataAttr(v7, 65515, __b, &v36) & 1) == 0)
  {
    OSLogHandleForIDSCategory();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_ERROR, "receive invalid subtype context.", buf, 2u);
    }

    if ((os_log_shim_legacy_logging_enabled() & 1) == 0)
      goto LABEL_24;
    v31 = CFSTR("receive invalid subtype context.");
LABEL_23:
    _IDSWarnV();
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), v31);
    _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), v31);
LABEL_24:

    v29 = 0;
    goto LABEL_25;
  }
  v22 = objc_alloc(MEMORY[0x1E0CB3940]);
  v25 = (void *)objc_msgSend_initWithBytes_length_encoding_(v22, v23, (uint64_t)__b, v24, v36, 4);
  if (StunUtilHasValidUInt16Attr((uint64_t)v7, 65516, &v35))
    v28 = v35;
  else
    v28 = 0;
  v29 = objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v26, (uint64_t)v8, v27, v20, v25, v28, v34);

LABEL_25:
  return v29;
}

- (BOOL)_triggerSymptomsWithCandidatePairToken:(id)a3 subType:(id)a4 subTypeContext:(id)a5 duration:(unsigned __int16)a6
{
  uint64_t v6;
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  int isInternalInstall;
  void *Value;
  void *v22;
  id v23;
  const char *v24;
  double v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t Type;
  const char *v32;
  double v33;
  void *v34;
  const char *v35;
  double v36;
  void *v37;
  const char *v38;
  double v39;
  char v40;
  _QWORD v42[5];
  _QWORD v43[6];

  v6 = a6;
  v43[5] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v16, v17, v18, v19);

  if (isInternalInstall)
  {
    Value = 0;
    if (v10 && self->_tokenToCandidatePairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v10);
    v42[0] = &unk_1E3C868C8;
    v42[1] = &unk_1E3C868E0;
    v43[0] = CFSTR("IDSQuickRelayTwoWay");
    v43[1] = CFSTR("IDSQuickRelaySelf");
    v42[2] = &unk_1E3C868F8;
    v42[3] = &unk_1E3C86910;
    v43[2] = CFSTR("IDSQuickRelayShared");
    v43[3] = CFSTR("IDSQuickRelayKeepAlive");
    v42[4] = &unk_1E3C86928;
    v43[4] = CFSTR("IDSQuickRelayMax");
    v22 = (void *)MEMORY[0x1E0C99D80];
    v23 = Value;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(v22, v24, (uint64_t)v43, v25, v42, 5);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)MEMORY[0x1E0CB37E8];
    Type = objc_msgSend_allocateType(v23, v28, v29, v30);

    objc_msgSend_numberWithInteger_(v27, v32, Type, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v26, v35, (uint64_t)v34, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(self, v38, (uint64_t)v37, v39, v11, v12, v6);
  }
  else
  {
    v40 = 1;
  }

  return v40;
}

- (BOOL)_triggerSymptomsWithType:(id)a3 subType:(id)a4 subTypeContext:(id)a5 duration:(unsigned __int16)a6
{
  uint64_t v6;
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  int isInternalInstall;
  id v19;
  const char *v20;
  double v21;
  const char *v22;
  void *v23;
  double v24;
  void *v25;
  const char *v26;
  double v27;
  void *v28;
  const char *v29;
  double v30;
  void *v31;
  NSObject *v32;
  id v33;
  id v34;
  id v35;
  BOOL v36;
  _QWORD v38[4];
  id v39;
  id v40;
  id v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[2];

  v6 = a6;
  v51[1] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 1;
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v12, v13, COERCE_DOUBLE(0x2020000000));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v14, v15, v16, v17);

  if (isInternalInstall)
  {
    v19 = objc_alloc_init((Class)CUTWeakLinkClass());
    objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(v19, v20, (uint64_t)CFSTR("IDSQuickRelay"), v21, v9, v10, v11, CFSTR("identityservicesd"), 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if ((_DWORD)v6)
    {
      if (qword_1EE40B018 != -1)
        dispatch_once(&qword_1EE40B018, &unk_1E3C1FE70);
      v50 = qword_1EE40B008;
      v48 = qword_1EE40B010;
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v22, v6, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = v25;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v26, (uint64_t)&v49, v27, &v48, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v51[0] = v28;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v29, (uint64_t)v51, v30, &v50, 1);
      v31 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v31 = 0;
    }
    im_primary_queue();
    v32 = objc_claimAutoreleasedReturnValue();
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = sub_19B9D0F64;
    v38[3] = &unk_1E3C1FED8;
    v39 = v19;
    v40 = v23;
    v41 = v31;
    v42 = &v44;
    v43 = 0x402E000000000000;
    v33 = v31;
    v34 = v23;
    v35 = v19;
    dispatch_async(v32, v38);

  }
  v36 = *((_BYTE *)v45 + 24) != 0;
  _Block_object_dispose(&v44, 8);

  return v36;
}

- (int64_t)_getQRAllocateType
{
  return 1;
}

- (BOOL)_processGoAwayIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  id v14;
  id v15;
  const char *v16;
  double v17;
  char Attribute_attribute;
  void *Value;
  id v20;
  unsigned __int16 v21;
  NSObject *v22;
  const char *v23;
  double v24;
  NSObject *v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  double v33;
  NSDictionary *v34;
  NSDictionary *QRServerDataBlob;
  uint64_t v36;
  id v37;
  const char *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t QRAllocateType;
  int v44;
  NSObject *v45;
  id v46;
  NSObject *v47;
  id v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned __int16 v52;
  id v53;
  _QWORD block[5];
  id v55;
  uint64_t v56;
  double v57;
  int v58;
  unsigned __int16 v59;
  _QWORD v60[4];
  id v61;
  id v62;
  IDSGlobalLink *v63;
  unsigned int v64;
  uint8_t v65[4];
  unsigned int v66;
  uint8_t buf[4];
  id v68;
  __int16 v69;
  int v70;
  __int16 v71;
  _DWORD *v72;
  _DWORD __b[372];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v53 = a4;
  v15 = a8;
  memset(__b, 170, sizeof(__b));
  Attribute_attribute = objc_msgSend_getAttribute_attribute_(v14, v16, 9, v17, __b);
  if ((Attribute_attribute & 1) != 0)
  {
    Value = 0;
    if (v15 && self->_tokenToCandidatePairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v15);
    v20 = Value;
    v21 = LOWORD(__b[3]) + 100 * LOWORD(__b[2]);
    v52 = v21;
    OSLogHandleForTransportCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v68 = v15;
      v69 = 1024;
      v70 = v21;
      v71 = 2080;
      v72 = &__b[4];
      _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "receive goaway indication for %@, error_code(%u) reason(%s).", buf, 0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v50 = v21;
        v51 = &__b[4];
        v49 = v15;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive goaway indication for %@, error_code(%u) reason(%s)."));
        if (_IDSShouldLog())
        {
          v50 = v21;
          v51 = &__b[4];
          v49 = v15;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive goaway indication for %@, error_code(%u) reason(%s)."));
        }
      }
    }
    bzero(buf, 0x5C0uLL);
    v64 = 0;
    if (StunUtilHasValidBinaryDataAttr(v14, 65503, buf, (int *)&v64))
    {
      OSLogHandleForTransportCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v65 = 67109120;
        v66 = v64;
        _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, "This goaway has QR Server data blob(%dB)", v65, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v49 = (id)v64;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("This goaway has QR Server data blob(%dB)"));
          if (_IDSShouldLog())
          {
            v49 = (id)v64;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("This goaway has QR Server data blob(%dB)"));
          }
        }
      }
      if ((int)v64 >= 1)
      {
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v23, (uint64_t)buf, v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = (void *)MEMORY[0x1E0C99D80];
        objc_msgSend_sessionID(v20, v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dictionaryWithObject_forKey_(v27, v32, (uint64_t)v26, v33, v31);
        v34 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        QRServerDataBlob = self->_QRServerDataBlob;
        self->_QRServerDataBlob = v34;

      }
    }
    objc_msgSend_setIsDisconnecting_(v20, v23, 1, v24, v49, v50, v51);
    v36 = MEMORY[0x1E0C809B0];
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = sub_19B9D1840;
    v60[3] = &unk_1E3C1FE50;
    v61 = v15;
    v37 = v20;
    v62 = v37;
    v63 = self;
    objc_msgSend_startSessionGoAwayTimer_block_(v37, v38, 5, v39, v60);
    QRAllocateType = objc_msgSend__getQRAllocateType(self, v40, v41, v42);
    v44 = *(_DWORD *)&a7->sa_data[2];
    im_primary_queue();
    v45 = objc_claimAutoreleasedReturnValue();
    block[0] = v36;
    block[1] = 3221225472;
    block[2] = sub_19B9D1A3C;
    block[3] = &unk_1E3C1FF00;
    v55 = v37;
    v56 = QRAllocateType;
    block[4] = self;
    v57 = a9;
    v59 = v52;
    v58 = v44;
    v46 = v37;
    dispatch_async(v45, block);

  }
  else
  {
    OSLogHandleForIDSCategory();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_ERROR, "receive invalid goaway indication.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("receive invalid goaway indication."));
      _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("receive invalid goaway indication."));
    }
  }

  return Attribute_attribute;
}

- (BOOL)_processStunPacket:(id *)a3 fromDeviceUniqueID:(id)a4 cbuuid:(id)a5 arrivalTime:(double)a6 headerOverhead:(unint64_t)a7
{
  id v12;
  id v13;
  IDSStunMessage *v14;
  const char *v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  unsigned __int16 v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  void *v29;
  double v30;
  const char *v31;
  uint64_t v32;
  double v33;
  NSMutableDictionary *tokenToStunReqID;
  const char *v35;
  NSData *v36;
  double v37;
  const char *v38;
  double v39;
  void *Value;
  const char *v41;
  uint64_t v42;
  double v43;
  NSString *v44;
  NSObject *v45;
  BOOL v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  NSMutableDictionary *tokenToCandidatePairs;
  NSMutableDictionary *tokenToStunCheckPairs;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  double v56;
  NSObject *v57;
  char *v58;
  NSObject *v59;
  NSObject *v60;
  NSData *v61;
  void *v62;
  const char *v63;
  double v64;
  char v65;
  const char *v66;
  uint64_t v67;
  double v68;
  const char *v69;
  uint64_t v70;
  double *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  NSObject *v75;
  NSObject *v76;
  const char *v77;
  double v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unsigned int var16;
  void (**v90)(_QWORD);
  const char *v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  NSObject *v95;
  void *v96;
  char *v97;
  void *v98;
  void *v99;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *tokenToReallocBlocks;
  void *v102;
  NSObject *v103;
  NSObject *v104;
  void *v105;
  const char *v106;
  double v107;
  void *v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  NSData *v114;
  void *v115;
  void *key;
  void *keya;
  _QWORD aBlock[5];
  id v119;
  id v120;
  id v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  double v138;
  unsigned int v139;
  uint8_t v140[4];
  int v141;
  __int16 v142;
  void *v143;
  __int16 v144;
  id v145;
  uint8_t buf[4];
  _BYTE v147[18];
  __int16 v148;
  char *v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v12 = a4;
  v13 = a5;
  v14 = [IDSStunMessage alloc];
  v17 = (void *)objc_msgSend_initWithType_(v14, v15, 0, v16);
  if ((objc_msgSend_read_inputLength_internal_(v17, v18, (uint64_t)a3->var0, v19, SLODWORD(a3->var2), 0) & 1) != 0)
  {
    OSLogHandleForIDSCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v147 = v17;
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "receive stun message %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    {
      v109 = v17;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive stun message %@."));
    }
    v24 = objc_msgSend_type(v17, v21, v22, v23, v109);
    objc_msgSend_requestID(v17, v25, v26, v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v29)
    {
      OSLogHandleForTransportCategory();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "failed to get request-id for stun message.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get request-id for stun message."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get request-id for stun message."));
        }
      }
      goto LABEL_155;
    }
    objc_msgSend__startTimeForStunRequest_(self, v28, (uint64_t)v29, v30);
    objc_msgSend_setStartTime_(v17, v31, v32, v33);
    tokenToStunReqID = self->_tokenToStunReqID;
    if (tokenToStunReqID)
    {
      key = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunReqID, v29);
      if (key)
      {
LABEL_49:
        if ((v24 & 0xFEFF) == 1)
        {
          if (self->_state == 4)
          {
            if (!self->_useSecureControlMessage)
            {
              v114 = 0;
              v115 = 0;
              goto LABEL_108;
            }
            v36 = self->_controlMessageKey;
            v115 = 0;
LABEL_67:
            if (v36)
            {
              v114 = v36;
              if ((objc_msgSend_verifyMessageIntegrityWithKey_inputBuffer_inputLength_(v17, v35, (uint64_t)v36, v37, a3->var0, LODWORD(a3->var2)) & 1) == 0)
              {
                OSLogHandleForTransportCategory();
                v53 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109378;
                  *(_DWORD *)v147 = v24;
                  *(_WORD *)&v147[4] = 2112;
                  *(_QWORD *)&v147[6] = key;
                  _os_log_impl(&dword_19B949000, v53, OS_LOG_TYPE_DEFAULT, "stun mesasge type %04x failed message-integrity check for %@", buf, 0x12u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v110 = v24;
                    v111 = key;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stun mesasge type %04x failed message-integrity check for %@"));
                    if (_IDSShouldLog())
                    {
                      v110 = v24;
                      v111 = key;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stun mesasge type %04x failed message-integrity check for %@"));
                    }
                  }
                }
                if (v24 == 2066)
                {
                  OSLogHandleForTransportCategory();
                  v54 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "message integrity fails, trigger symptoms", buf, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("message integrity fails, trigger symptoms"));
                      if (_IDSShouldLog())
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("message integrity fails, trigger symptoms"));
                    }
                  }
                  objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v55, (uint64_t)key, v56, CFSTR("DiagnosticIndicationFailure"), CFSTR("BadIntegrity"), 15, v110, v111);
                }
                goto LABEL_118;
              }
            }
            else
            {
              v114 = 0;
            }
LABEL_108:
            objc_msgSend_decKey(v115, v35, (uint64_t)v36, v37);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v65 = objc_msgSend_decryptAES128CTRStunAttributes_(v17, v63, (uint64_t)v62, v64);

            if ((v65 & 1) != 0)
            {
              if (objc_msgSend_isActive(v115, v66, v67, v68))
              {
                v71 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
                if (v71)
                  v71[36] = a6;
              }
              else
              {
                objc_msgSend_setLastIncomingPacketTime_(v115, v69, v70, a6);
              }
              if (v24 <= 0xFDFu)
              {
                if (v24 > 0x900u)
                {
                  switch(v24)
                  {
                    case 0xEF1u:
                      v79 = *(_OWORD *)&a3->var17.__ss_pad2[64];
                      v126 = *(_OWORD *)&a3->var17.__ss_pad2[48];
                      v127 = v79;
                      v80 = *(_OWORD *)&a3->var17.__ss_pad2[96];
                      v128 = *(_OWORD *)&a3->var17.__ss_pad2[80];
                      v129 = v80;
                      v81 = *(_OWORD *)a3->var17.__ss_pad2;
                      v122 = *(_OWORD *)&a3->var17.ss_len;
                      v123 = v81;
                      v82 = *(_OWORD *)&a3->var17.__ss_pad2[32];
                      v124 = *(_OWORD *)&a3->var17.__ss_pad2[16];
                      v125 = v82;
                      v83 = *(_OWORD *)&a3->var18.ss_len;
                      v84 = *(_OWORD *)a3->var18.__ss_pad2;
                      v85 = *(_OWORD *)&a3->var18.__ss_pad2[32];
                      v132 = *(_OWORD *)&a3->var18.__ss_pad2[16];
                      v133 = v85;
                      v130 = v83;
                      v131 = v84;
                      v86 = *(_OWORD *)&a3->var18.__ss_pad2[48];
                      v87 = *(_OWORD *)&a3->var18.__ss_pad2[64];
                      v88 = *(_OWORD *)&a3->var18.__ss_pad2[96];
                      v136 = *(_OWORD *)&a3->var18.__ss_pad2[80];
                      v137 = v88;
                      v134 = v86;
                      v135 = v87;
                      var16 = a3->var16;
                      aBlock[0] = MEMORY[0x1E0C809B0];
                      aBlock[1] = 3221225472;
                      aBlock[2] = sub_19B9D33B0;
                      aBlock[3] = &unk_1E3C1FF28;
                      aBlock[4] = self;
                      v119 = v17;
                      v120 = v12;
                      v139 = var16;
                      v112 = key;
                      v121 = v112;
                      v138 = a6;
                      v90 = (void (**)(_QWORD))_Block_copy(aBlock);
                      v94 = objc_msgSend_state(v115, v91, v92, v93);
                      if (v94 > 3)
                      {
                        v90[2](v90);
                      }
                      else
                      {
                        OSLogHandleForTransportCategory();
                        v95 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                        {
                          v96 = _Block_copy(v90);
                          v97 = (&_IDSStunCandidatePairStateStrings)[v94];
                          *(_DWORD *)buf = 134218498;
                          *(_QWORD *)v147 = v96;
                          *(_WORD *)&v147[8] = 2112;
                          *(_QWORD *)&v147[10] = v112;
                          v148 = 2080;
                          v149 = v97;
                          _os_log_impl(&dword_19B949000, v95, OS_LOG_TYPE_DEFAULT, "delay processing realloc block %p for %@, state [%s].", buf, 0x20u);

                        }
                        if (os_log_shim_legacy_logging_enabled())
                        {
                          if (_IDSShouldLogTransport())
                          {
                            v98 = _Block_copy(v90);
                            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("delay processing realloc block %p for %@, state [%s]."));

                            if (_IDSShouldLog())
                            {
                              v99 = _Block_copy(v90);
                              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("delay processing realloc block %p for %@, state [%s]."));

                            }
                          }
                        }
                        if (!self->_tokenToReallocBlocks)
                        {
                          Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                          tokenToReallocBlocks = self->_tokenToReallocBlocks;
                          self->_tokenToReallocBlocks = Mutable;

                        }
                        v102 = _Block_copy(v90);
                        if (v102)
                        {
                          CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToReallocBlocks, v112, v102);
                        }
                        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        {
                          sub_19BAF1588();
                        }

                      }
                      break;
                    case 0xEF2u:
                    case 0xEF3u:
                    case 0xEF6u:
                      goto LABEL_162;
                    case 0xEF4u:
                      objc_msgSend_processInfoIndication_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                      break;
                    case 0xEF5u:
                      objc_msgSend_processSessionInfoIndication_arrivalTime_isLightweightParticipant_(v115, v72, (uint64_t)v17, a6, self->_isLightweightParticipant);
                      break;
                    case 0xEF7u:
                      objc_msgSend_processParticipantUpdateIndication_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                      break;
                    case 0xEF8u:
                      objc_msgSend_processPluginControlIndication_(v115, v72, (uint64_t)v17, v74);
                      break;
                    default:
                      if (v24 == 2305)
                      {
                        objc_msgSend_processTestResponse_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                      }
                      else
                      {
                        if (v24 != 2321)
                          goto LABEL_162;
LABEL_122:
                        OSLogHandleForTransportCategory();
                        v76 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)v147 = v24;
                          _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "_processStunPacket, error response: messageType(%04X)", buf, 8u);
                        }

                        if (os_log_shim_legacy_logging_enabled())
                        {
                          if (_IDSShouldLogTransport())
                          {
                            v110 = v24;
                            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_processStunPacket, error response: messageType(%04X)"));
                            if (_IDSShouldLog())
                            {
                              v110 = v24;
                              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_processStunPacket, error response: messageType(%04X)"));
                            }
                          }
                        }
                        objc_msgSend_processStunErrorResponse_packetBuffer_headerOverhead_(v115, v77, (uint64_t)v17, v78, a3, a7, v110);
                      }
                      break;
                  }
                }
                else if (v24 <= 0x80Fu)
                {
                  switch(v24)
                  {
                    case 1u:
                      objc_msgSend__processBindingRequest_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var16, &a3->var17, &a3->var18, key);
                      break;
                    case 0x17u:
                      objc_msgSend__processDataIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var16, &a3->var17, &a3->var18, key);
                      break;
                    case 0x101u:
                      objc_msgSend__processBindingResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var16, &a3->var17, &a3->var18, key);
                      break;
                    default:
LABEL_162:
                      OSLogHandleForTransportCategory();
                      v104 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 67109120;
                        *(_DWORD *)v147 = v24;
                        _os_log_impl(&dword_19B949000, v104, OS_LOG_TYPE_DEFAULT, "_processStunPacket - receive unknown STUN message type(%04X).", buf, 8u);
                      }

                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_processStunPacket - receive unknown STUN message type(%04X)."));
                          if (_IDSShouldLog())
                            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_processStunPacket - receive unknown STUN message type(%04X)."));
                        }
                      }
                      break;
                  }
                }
                else
                {
                  switch(v24)
                  {
                    case 0x810u:
                      objc_msgSend__processGoAwayIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var16, &a3->var17, &a3->var18, key);
                      break;
                    case 0x811u:
                      break;
                    case 0x812u:
                      objc_msgSend__processDiagnosticIndication_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, key);
                      break;
                    case 0x813u:
                      objc_msgSend_processDataMessageErrorIndication_(v115, v72, (uint64_t)v17, v74);
                      break;
                    default:
                      goto LABEL_162;
                  }
                }
              }
              else
              {
                switch(v24)
                {
                  case 0xFE0u:
                  case 0xFE1u:
                    objc_msgSend__processAllocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var16, &a3->var17, &a3->var18, key);
                    break;
                  case 0xFE2u:
                  case 0xFF2u:
                    objc_msgSend__processUnallocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var16, &a3->var17, &a3->var18, key);
                    break;
                  case 0xFE3u:
                    objc_msgSend_processStatsResponse_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                    break;
                  case 0xFE4u:
                    objc_msgSend_processInfoResponse_packetBuffer_headerOverhead_(v115, v72, (uint64_t)v17, v74, a3, a7);
                    break;
                  case 0xFE5u:
                    objc_msgSend_processSessionInfoResponse_packetBuffer_headerOverhead_isLightweightParticipant_(v115, v72, (uint64_t)v17, v74, a3, a7, self->_isLightweightParticipant);
                    break;
                  case 0xFE7u:
                    objc_msgSend_processParticipantUpdateResponse_(v115, v72, (uint64_t)v17, v74);
                    break;
                  case 0xFE8u:
                    objc_msgSend_processPluginRegistrationResponse_(v115, v72, (uint64_t)v17, v74);
                    break;
                  case 0xFE9u:
                    objc_msgSend_processPutMaterialResponse_(v115, v72, (uint64_t)v17, v74);
                    break;
                  case 0xFF0u:
                  case 0xFF1u:
                  case 0xFF3u:
                  case 0xFF4u:
                  case 0xFF5u:
                  case 0xFF7u:
                  case 0xFF8u:
                    goto LABEL_122;
                  default:
                    goto LABEL_162;
                }
              }
              if ((v24 & 0x100) != 0)
              {
                objc_msgSend_requestID(v17, v72, v73, v74);
                v105 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend__removeStunRequest_(self, v106, (uint64_t)v105, v107);

              }
              v46 = 1;
              goto LABEL_193;
            }
            OSLogHandleForTransportCategory();
            v75 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v147 = v24;
              _os_log_impl(&dword_19B949000, v75, OS_LOG_TYPE_DEFAULT, "stun mesasge type %04x failed to decrypt - dropped", buf, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stun mesasge type %04x failed to decrypt - dropped"));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stun mesasge type %04x failed to decrypt - dropped"));
              }
            }
LABEL_118:
            v46 = 0;
LABEL_193:
            v61 = v114;
            goto LABEL_194;
          }
          OSLogHandleForTransportCategory();
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            v58 = _IDSLinkStateStrings[self->_state];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)v147 = v58;
            *(_WORD *)&v147[8] = 1024;
            *(_DWORD *)&v147[10] = v24;
            _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "GL state is [%s], ignore stun message type %04x", buf, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GL state is [%s], ignore stun message type %04x"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GL state is [%s], ignore stun message type %04x"));
            }
          }
LABEL_101:
          v115 = 0;
          v61 = 0;
          v46 = 0;
LABEL_194:

          goto LABEL_195;
        }
        tokenToCandidatePairs = self->_tokenToCandidatePairs;
        if (!tokenToCandidatePairs
          || !key
          || (v115 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, key)) == 0)
        {
          tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
          if (!tokenToStunCheckPairs
            || !key
            || (v115 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, key)) == 0)
          {
            OSLogHandleForTransportCategory();
            v60 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v147 = key;
              _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for incoming stun packet, candidatePairToken = %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for incoming stun packet, candidatePairToken = %@"));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for incoming stun packet, candidatePairToken = %@"));
              }
            }
            goto LABEL_101;
          }
          OSLogHandleForTransportCategory();
          v52 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v52, OS_LOG_TYPE_DEFAULT, "found candidate pair in stun check pair list.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found candidate pair in stun check pair list."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found candidate pair in stun check pair list."));
            }
          }
        }
        if ((v24 & 0xFFFE) != 0xFE0)
        {
          v114 = 0;
          if (v24 > 0xFE1u)
          {
            if (v24 != 4072 && v24 != 4066)
              goto LABEL_108;
          }
          else if (v24 != 2066 && v24 != 3825)
          {
            goto LABEL_108;
          }
        }
        objc_msgSend_relaySessionKey(v115, v35, (uint64_t)v36, v37);
        v36 = (NSData *)objc_claimAutoreleasedReturnValue();
        goto LABEL_67;
      }
    }
    if ((v24 & 0x110) != 0)
    {
      if ((v24 & 0x110) != 0x10)
      {
        OSLogHandleForTransportCategory();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v147 = v29;
          *(_WORD *)&v147[8] = 1024;
          *(_DWORD *)&v147[10] = v24;
          _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "no matching request with request id %@ for stun message type %04x, ignore.", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no matching request with request id %@ for stun message type %04x, ignore."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no matching request with request id %@ for stun message type %04x, ignore."));
          }
        }
        v46 = 1;
        goto LABEL_195;
      }
      bzero(buf, 0x5D0uLL);
      if (objc_msgSend_getAttribute_attribute_(v17, v38, 12, v39, buf))
      {
        if ((*(_DWORD *)&v147[4] & 0xFFFF0000) != 0)
        {
          channelForStunCandidatePair((uint64_t)&a3->var17, (uint64_t)&a3->var18, (unsigned __int16)bswap32(*(unsigned int *)&v147[4]));
          keya = (void *)objc_claimAutoreleasedReturnValue();
          Value = 0;
          if (self->_channelToCandidatePairs && keya)
            Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_channelToCandidatePairs, keya);
          v113 = Value;
          objc_msgSend_sessionID(v113, v41, v42, v43);
          v44 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (!v44)
          {
            OSLogHandleForTransportCategory();
            v103 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v140 = 67109634;
              v141 = v24;
              v142 = 2112;
              v143 = keya;
              v144 = 2112;
              v145 = v113;
              _os_log_impl(&dword_19B949000, v103, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for indication type %04x, channel %@, candidatePair: %@", v140, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find relay-session-id for indication type %04x, channel %@, candidatePair: %@"));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find relay-session-id for indication type %04x, channel %@, candidatePair: %@"));
              }
            }

            goto LABEL_155;
          }

        }
        else
        {
          v44 = self->_cbuuid;
        }
        tokenForStunCandidatePair((uint64_t)&a3->var17, (uint64_t)&a3->var18, v44);
        key = (void *)objc_claimAutoreleasedReturnValue();

        if (key)
          goto LABEL_49;
      }
      OSLogHandleForTransportCategory();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v140 = 67109120;
        v141 = v24;
        _os_log_impl(&dword_19B949000, v59, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for indication type %04x.", v140, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find relay-session-id for indication type %04x."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find relay-session-id for indication type %04x."));
        }
      }
    }
    else
    {
      if (v24 == 1)
      {
        tokenForStunCandidatePair((uint64_t)&a3->var17, (uint64_t)&a3->var18, self->_cbuuid);
        key = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_49;
      }
      OSLogHandleForTransportCategory();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v147 = v24;
        _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "receive invalid stun request (%04x).", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive invalid stun request (%04x)."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive invalid stun request (%04x)."));
        }
      }
    }
LABEL_155:
    v46 = 0;
LABEL_195:

    goto LABEL_196;
  }
  OSLogHandleForTransportCategory();
  v45 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "failed to process incoming stun message.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to process incoming stun message."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to process incoming stun message."));
    }
  }
  v46 = 0;
LABEL_196:

  return v46;
}

- (void)_processDataOnReallocChannel:(unsigned __int16)a3 localAddress:(sockaddr *)a4 remoteAddress:(sockaddr *)a5
{
  double v5;
  const char *v6;
  double v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  double v30;
  id v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  double v38;
  NSMutableDictionary *reallocNewCandidatePairToOldCandidatePair;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  __int128 v45;
  NSObject *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  double v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  double v77;
  id v78;
  const char *v79;
  uint64_t v80;
  double v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  double v85;
  char *v86;
  const char *v87;
  uint64_t v88;
  double v89;
  char *v90;
  const char *v91;
  uint64_t v92;
  double v93;
  void *v94;
  BOOL v95;
  NSMutableDictionary *v96;
  void *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  double v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  double v109;
  const char *v110;
  uint64_t v111;
  double v112;
  const char *v113;
  uint64_t v114;
  double v115;
  NSObject *v116;
  char *v117;
  const char *v118;
  uint64_t v119;
  double v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  void *v125;
  const char *v126;
  double v127;
  NSObject *v128;
  NSObject *v129;
  const char *v130;
  uint64_t v131;
  double v132;
  void *v133;
  const char *v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  double v139;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *linkIDToCandidatePairs;
  const char *v142;
  id v143;
  double v144;
  NSMutableDictionary *v145;
  const void *v146;
  _QWORD *v147;
  _QWORD *v148;
  const char *v149;
  double v150;
  id v151;
  const char *v152;
  uint64_t v153;
  double v154;
  int linkIDForPlugin;
  NSObject *v156;
  const char *v157;
  uint64_t v158;
  double v159;
  int v160;
  const char *v161;
  uint64_t v162;
  double v163;
  int v164;
  const char *v165;
  uint64_t v166;
  double v167;
  const char *v168;
  uint64_t v169;
  double v170;
  NSObject *v171;
  const char *v172;
  uint64_t v173;
  double v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  double v178;
  const char *v179;
  uint64_t v180;
  double v181;
  NSObject *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  void *v187;
  uint64_t v188;
  id obj;
  int v193;
  unsigned int v194;
  _QWORD v195[4];
  id v196;
  IDSGlobalLink *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint8_t buf[4];
  char *v205;
  __int16 v206;
  char *v207;
  __int16 v208;
  char *v209;
  __int16 v210;
  char *v211;
  char v212[16];
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  char __str[16];
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  char v228[16];
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _BYTE v236[32];
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  _BYTE v243[128];
  uint64_t v244;

  v194 = a3;
  v244 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, a3, v5);
  v202 = 0u;
  v203 = 0u;
  v200 = 0u;
  v201 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v200, v7, v243, 16);
  if (v10)
  {
    v187 = 0;
    v193 = 0;
    v11 = *(_QWORD *)v201;
    v12 = 136315906;
    while (1)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v201 != v11)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v200 + 1) + 8 * i);
        if (objc_msgSend_channelNumber(v14, v8, v9, *(double *)&v12, v183) == v194)
        {
          objc_msgSend_local(v14, v8, v9, *(double *)&v12);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend_address(v15, v16, v17, v18);

          objc_msgSend_remote(v14, v20, v21, v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = objc_msgSend_external(v23, v24, v25, v26);

          if (!IsSameSA(v19, (uint64_t)a4)
            || !IsSameSA(v27, (uint64_t)a5)
            || !objc_msgSend_pendingRealloc(v14, v28, v29, v30))
          {
            if (objc_msgSend_pendingRealloc(v14, v28, v29, v30))
            {
              *(_QWORD *)&v45 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v241 = v45;
              v242 = v45;
              v239 = v45;
              v240 = v45;
              v237 = v45;
              v238 = v45;
              *(_OWORD *)v236 = v45;
              *(_OWORD *)&v236[16] = v45;
              v234 = v45;
              v235 = v45;
              v232 = v45;
              v233 = v45;
              v230 = v45;
              v231 = v45;
              *(_OWORD *)v228 = v45;
              v229 = v45;
              v226 = v45;
              v227 = v45;
              v224 = v45;
              v225 = v45;
              v222 = v45;
              v223 = v45;
              *(_OWORD *)__str = v45;
              v221 = v45;
              v218 = v45;
              v219 = v45;
              v216 = v45;
              v217 = v45;
              v214 = v45;
              v215 = v45;
              *(_OWORD *)v212 = v45;
              v213 = v45;
              OSLogHandleForTransportCategory();
              v46 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                v47 = SAToIPPortString(v236, 0x80uLL, v19);
                v48 = SAToIPPortString(__str, 0x80uLL, (uint64_t)a4);
                v49 = SAToIPPortString(v228, 0x80uLL, v27);
                v50 = SAToIPPortString(v212, 0x80uLL, (uint64_t)a5);
                *(_DWORD *)buf = 136315906;
                v205 = v47;
                v206 = 2080;
                v207 = v48;
                v208 = 2080;
                v209 = v49;
                v210 = 2080;
                v211 = v50;
                _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, "pair local: %s, realloc local: %s, pair remote:%s, realloc remote: %s", buf, 0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v51 = SAToIPPortString(v236, 0x80uLL, v19);
                  v52 = SAToIPPortString(__str, 0x80uLL, (uint64_t)a4);
                  v185 = SAToIPPortString(v228, 0x80uLL, v27);
                  v186 = SAToIPPortString(v212, 0x80uLL, (uint64_t)a5);
                  v183 = v51;
                  v184 = (uint64_t)v52;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("pair local: %s, realloc local: %s, pair remote:%s, realloc remote: %s"));
                  if (_IDSShouldLog())
                  {
                    v53 = SAToIPPortString(v236, 0x80uLL, v19);
                    v54 = SAToIPPortString(__str, 0x80uLL, (uint64_t)a4);
                    v185 = SAToIPPortString(v228, 0x80uLL, v27);
                    v186 = SAToIPPortString(v212, 0x80uLL, (uint64_t)a5);
                    v183 = v53;
                    v184 = (uint64_t)v54;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("pair local: %s, realloc local: %s, pair remote:%s, realloc remote: %s"));
                  }
                }
              }
            }
            goto LABEL_84;
          }
          objc_msgSend_setPendingRealloc_(v14, v28, 0, v30);
          v31 = v14;

          if (self->_reallocNewCandidatePairToOldCandidatePair)
          {
            objc_msgSend_candidatePairToken(v31, v32, v33, v34);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            if (v37)
            {
              reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
              objc_msgSend_candidatePairToken(v31, v35, v36, v38);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              v41 = (id)CFDictionaryGetValue((CFDictionaryRef)reallocNewCandidatePairToOldCandidatePair, v40);

            }
            else
            {
              v41 = 0;
            }

            objc_msgSend_remote(v41, v55, v56, v57);
          }
          else
          {
            v41 = 0;
            objc_msgSend_remote(0, v32, v33, v34);
          }
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = objc_msgSend_external(v58, v59, v60, v61);

          objc_msgSend_remote(v31, v63, v64, v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v70 = objc_msgSend_external(v66, v67, v68, v69);

          if (v70 && v62)
          {
            if (!IsSameSA(v62, v70))
            {
              OSLogHandleForTransportCategory();
              v74 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_candidatePairToken(v31, v75, v76, v77);
                v78 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend_candidatePairToken(v41, v79, v80, v81);
                v82 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v236 = 138412546;
                *(_QWORD *)&v236[4] = v78;
                *(_WORD *)&v236[12] = 2112;
                *(_QWORD *)&v236[14] = v82;
                _os_log_impl(&dword_19B949000, v74, OS_LOG_TYPE_DEFAULT, "Realloc is done for: %@ remove pair: %@", v236, 0x16u);

              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  objc_msgSend_candidatePairToken(v31, v83, v84, v85);
                  v86 = (char *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_candidatePairToken(v41, v87, v88, v89);
                  v183 = v86;
                  v184 = objc_claimAutoreleasedReturnValue();
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Realloc is done for: %@ remove pair: %@"));

                  if (_IDSShouldLog())
                  {
                    objc_msgSend_candidatePairToken(v31, v83, v84, v85, v86, v184);
                    v90 = (char *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_candidatePairToken(v41, v91, v92, v93);
                    v183 = v90;
                    v184 = objc_claimAutoreleasedReturnValue();
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Realloc is done for: %@ remove pair: %@"));

                  }
                }
              }
              objc_msgSend_candidatePairToken(v31, v83, v84, v85, v183);
              v94 = (void *)objc_claimAutoreleasedReturnValue();
              if (v94)
              {
                v95 = self->_reallocNewCandidatePairToOldCandidatePair == 0;

                if (!v95)
                {
                  v96 = self->_reallocNewCandidatePairToOldCandidatePair;
                  objc_msgSend_candidatePairToken(v31, v71, v72, v73);
                  v97 = (void *)objc_claimAutoreleasedReturnValue();
                  CFDictionaryRemoveValue((CFMutableDictionaryRef)v96, v97);

                }
              }
            }
            objc_msgSend_local(v41, v71, v72, v73);
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            v102 = objc_msgSend_address(v98, v99, v100, v101);

            objc_msgSend_remote(v41, v103, v104, v105);
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            v188 = objc_msgSend_external(v106, v107, v108, v109);

            v114 = objc_msgSend_state(v31, v110, v111, v112);
            if (v114 != 4)
            {
              objc_msgSend_setState_(v31, v113, 4, v115);
              OSLogHandleForTransportCategory();
              v116 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
              {
                v117 = (&_IDSStunCandidatePairStateStrings)[v114];
                *(_DWORD *)v236 = 136315650;
                *(_QWORD *)&v236[4] = v117;
                *(_WORD *)&v236[12] = 2080;
                *(_QWORD *)&v236[14] = off_1EE40A678;
                *(_WORD *)&v236[22] = 2112;
                *(_QWORD *)&v236[24] = v31;
                _os_log_impl(&dword_19B949000, v116, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", v236, 0x20u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v184 = (uint64_t)off_1EE40A678;
                  v185 = (char *)v31;
                  v183 = (&_IDSStunCandidatePairStateStrings)[v114];
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
                  if (_IDSShouldLog())
                  {
                    v184 = (uint64_t)off_1EE40A678;
                    v185 = (char *)v31;
                    v183 = (&_IDSStunCandidatePairStateStrings)[v114];
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
                  }
                }
              }
              v123 = objc_msgSend_linkID(v41, v118, v119, v120, v183);
              if ((int)v123 < 1 || (objc_msgSend_isSharedQRSession(v41, v121, v122, v124) & 1) != 0)
              {
                objc_msgSend_candidatePairToken(v31, v121, v122, v124);
                v125 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend__notifyCandidatePairConnected_(self, v126, (uint64_t)v125, v127);

              }
              else
              {
                OSLogHandleForTransportCategory();
                v129 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_candidatePairToken(v41, v130, v131, v132);
                  v133 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)v236 = 67109378;
                  *(_DWORD *)&v236[4] = v123;
                  *(_WORD *)&v236[8] = 2112;
                  *(_QWORD *)&v236[10] = v133;
                  _os_log_impl(&dword_19B949000, v129, OS_LOG_TYPE_DEFAULT, "reuse linkID %d from original pair %@.", v236, 0x12u);

                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    objc_msgSend_candidatePairToken(v41, v134, v136, v135);
                    v183 = (char *)v123;
                    v184 = objc_claimAutoreleasedReturnValue();
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("reuse linkID %d from original pair %@."));

                    if (_IDSShouldLog())
                    {
                      objc_msgSend_candidatePairToken(v41, v134, v137, v135, v123, v184);
                      v183 = (char *)v123;
                      v184 = objc_claimAutoreleasedReturnValue();
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("reuse linkID %d from original pair %@."));

                    }
                  }
                }
                objc_msgSend_setLinkID_(v31, v134, v123, v135, v183);
                objc_msgSend_setLinkID_(v41, v138, 0, v139);
                if (!self->_linkIDToCandidatePairs)
                {
                  Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
                  self->_linkIDToCandidatePairs = Mutable;

                }
                v143 = v31;
                if (v143)
                {
                  v145 = self->_linkIDToCandidatePairs;
                  v146 = (const void *)objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v142, v123, v144);
                  CFDictionarySetValue((CFMutableDictionaryRef)v145, v146, v143);
                }

                IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v143, v123);
              }
            }
            v147 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
            v148 = v147;
            if (v147
              && IsSameSA(v102, (uint64_t)(v147 + 1))
              && IsSameSA(v188, (uint64_t)(v148 + 17))
              && *((unsigned __int16 *)v148 + 132) == v194)
            {
              objc_msgSend__updateDefaultCandidatePair_(self, v149, (uint64_t)v31, v150);
            }
            v195[0] = MEMORY[0x1E0C809B0];
            v195[1] = 3221225472;
            v195[2] = sub_19B9D43FC;
            v195[3] = &unk_1E3C1FF50;
            v151 = v41;
            v198 = v102;
            v199 = v188;
            v196 = v151;
            v197 = self;
            IDSTransportThreadAddBlockAfter(v195, 5.0);
            if (self->_linkIDForPlugin)
            {
              if (objc_msgSend_isSharedQRSession(v151, v152, v153, v154))
              {
                linkIDForPlugin = self->_linkIDForPlugin;
                if (linkIDForPlugin == objc_msgSend_linkID(v151, v152, v153, v154))
                {
                  self->_linkIDForPlugin = objc_msgSend_linkID(v31, v152, v153, v154);
                  OSLogHandleForTransportCategory();
                  v156 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
                  {
                    v160 = objc_msgSend_linkID(v151, v157, v158, v159);
                    v164 = objc_msgSend_linkID(v31, v161, v162, v163);
                    *(_DWORD *)v236 = 67109376;
                    *(_DWORD *)&v236[4] = v160;
                    *(_WORD *)&v236[8] = 1024;
                    *(_DWORD *)&v236[10] = v164;
                    _os_log_impl(&dword_19B949000, v156, OS_LOG_TYPE_DEFAULT, "linkID for Plugin is now changed from %d to %d", v236, 0xEu);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      v183 = (char *)objc_msgSend_linkID(v151, v152, v153, v154);
                      v184 = (int)objc_msgSend_linkID(v31, v165, v166, v167);
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("linkID for Plugin is now changed from %d to %d"));
                      if (_IDSShouldLog())
                      {
                        v183 = (char *)objc_msgSend_linkID(v151, v152, v153, v154, v183, v184);
                        v184 = (int)objc_msgSend_linkID(v31, v168, v169, v170);
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("linkID for Plugin is now changed from %d to %d"));
                      }
                    }
                  }
                }
              }
            }
            objc_msgSend__didReceiveRequestToPurgeRegistration(self, v152, v153, v154, v183);
            OSLogHandleForTransportCategory();
            v171 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v31, v172, v173, v174);
              v175 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v236 = 138412290;
              *(_QWORD *)&v236[4] = v175;
              _os_log_impl(&dword_19B949000, v171, OS_LOG_TYPE_DEFAULT, "realloc is done for candidatePair: %@.", v236, 0xCu);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_candidatePairToken(v31, v176, v177, v178);
                v183 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("realloc is done for candidatePair: %@."));

                if (_IDSShouldLog())
                {
                  objc_msgSend_candidatePairToken(v31, v179, v180, v181, v183);
                  v183 = (char *)objc_claimAutoreleasedReturnValue();
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("realloc is done for candidatePair: %@."));

                }
              }
            }

            v187 = v31;
LABEL_84:
            v193 |= objc_msgSend_pendingRealloc(v14, v42, v43, v44, v183, v184, v185, v186);
            continue;
          }
          OSLogHandleForTransportCategory();
          v128 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v236 = 134218240;
            *(_QWORD *)&v236[4] = v70;
            *(_WORD *)&v236[12] = 2048;
            *(_QWORD *)&v236[14] = v62;
            _os_log_impl(&dword_19B949000, v128, OS_LOG_TYPE_DEFAULT, "reallocNewCandidatePairRemoteAddress: %p, reallocOldCandidatePairRemoteAddress: %p, continue", v236, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v183 = (char *)v70;
              v184 = v62;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("reallocNewCandidatePairRemoteAddress: %p, reallocOldCandidatePairRemoteAddress: %p, continue"));
              if (_IDSShouldLog())
              {
                v183 = (char *)v70;
                v184 = v62;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("reallocNewCandidatePairRemoteAddress: %p, reallocOldCandidatePairRemoteAddress: %p, continue"));
              }
            }
          }

          v187 = v31;
        }
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v200, *(double *)&v12, v243, 16);
      if (!v10)
      {

        if ((v193 & 1) != 0)
          goto LABEL_97;
        goto LABEL_90;
      }
    }
  }

  v187 = 0;
LABEL_90:
  if (IDSSimpleUInt16List_HasItem((uint64_t)&self->_reallocChannelList, v194))
  {
    IDSSimpleUInt16List_RemoveItem((uint64_t)&self->_reallocChannelList, v194);
    OSLogHandleForTransportCategory();
    v182 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v236 = 67109120;
      *(_DWORD *)&v236[4] = __rev16(v194);
      _os_log_impl(&dword_19B949000, v182, OS_LOG_TYPE_DEFAULT, "remove channel number %04x from reallocChannelList due to realloc time out.", v236, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove channel number %04x from reallocChannelList due to realloc time out."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove channel number %04x from reallocChannelList due to realloc time out."));
      }
    }
  }
LABEL_97:

}

- (void)_processReallocChannelData:(id *)a3 channelNumber:(unsigned __int16)a4 fromDeviceUniqueID:(id)a5 cbuuid:(id)a6 arrivalTime:(double)a7
{
  uint64_t v8;
  id v11;
  id v12;
  __int128 v13;
  NSObject *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  char *v23;
  char __str[16];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v8 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v11 = a5;
  v12 = a6;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30 = v13;
  v31 = v13;
  v28 = v13;
  v29 = v13;
  v26 = v13;
  v27 = v13;
  *(_OWORD *)__str = v13;
  v25 = v13;
  OSLogHandleForTransportCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v21 = __rev16(v8);
    v22 = 2080;
    v23 = SAToIPPortString(__str, 0x80uLL, (uint64_t)&a3->var18);
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "process channel data on realloc channel %04x from [%s].", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v17 = __rev16(v8);
      v18 = v17;
      v19 = SAToIPPortString(__str, 0x80uLL, (uint64_t)&a3->var18);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process channel data on realloc channel %04x from [%s]."));
      if (_IDSShouldLog())
      {
        v18 = v17;
        v19 = SAToIPPortString(__str, 0x80uLL, (uint64_t)&a3->var18);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process channel data on realloc channel %04x from [%s]."));
      }
    }
  }
  objc_msgSend__processDataOnReallocChannel_localAddress_remoteAddress_(self, v15, v8, v16, &a3->var17, &a3->var18, v18, v19);

}

- (void)_saveStunRequest:(id)a3 startTime:(double)a4 token:(id)a5
{
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  double v14;
  const char *v15;
  uint64_t v16;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *startTimeToStunReqID;
  void *v19;
  NSMutableDictionary *v20;
  NSMutableDictionary *tokenToStunReqID;
  id key;

  key = a3;
  v8 = a5;
  objc_msgSend_allKeys(self->_startTimeToStunReqID, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_containsObject_(v12, v13, (uint64_t)key, v14) & 1) == 0)
  {
    if (!self->_startTimeToStunReqID)
    {
      Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      startTimeToStunReqID = self->_startTimeToStunReqID;
      self->_startTimeToStunReqID = Mutable;

    }
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v15, v16, a4);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
      CFDictionarySetValue((CFMutableDictionaryRef)self->_startTimeToStunReqID, key, v19);

    if (!self->_tokenToStunReqID)
    {
      v20 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      tokenToStunReqID = self->_tokenToStunReqID;
      self->_tokenToStunReqID = v20;

      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (v8)
LABEL_8:
      CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToStunReqID, key, v8);
  }
LABEL_9:

}

- (void)_removeStunRequest:(id)a3
{
  NSMutableDictionary *startTimeToStunReqID;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  id v9;

  startTimeToStunReqID = self->_startTimeToStunReqID;
  v9 = a3;
  objc_msgSend_removeObjectForKey_(startTimeToStunReqID, v5, (uint64_t)v9, v6);
  objc_msgSend_removeObjectForKey_(self->_tokenToStunReqID, v7, (uint64_t)v9, v8);

}

- (double)_startTimeForStunRequest:(id)a3
{
  double v3;
  void *Value;
  NSMutableDictionary *startTimeToStunReqID;
  double result;

  Value = 0;
  if (a3)
  {
    startTimeToStunReqID = self->_startTimeToStunReqID;
    if (startTimeToStunReqID)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)startTimeToStunReqID, a3);
  }
  objc_msgSend_doubleValue(Value, a2, (uint64_t)a3, v3);
  return result;
}

- (int64_t)_sendStunMessage:(id)a3 candidatePair:(id)a4
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  double v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  double v41;
  int v42;
  const char *v43;
  uint64_t v44;
  double v45;
  const char *v46;
  uint64_t v47;
  double v48;
  char v49;
  char v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  const char *v59;
  double v60;
  int64_t v61;
  __int16 v63;

  v5 = a4;
  v6 = a3;
  objc_msgSend_local(v5, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_index(v10, v11, v12, v13);

  objc_msgSend_local(v5, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_address(v18, v19, v20, v21);

  objc_msgSend_remote(v5, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend_external(v26, v27, v28, v29);

  objc_msgSend_local(v5, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_transport(v34, v35, v36, v37);

  v42 = objc_msgSend_linkID(v5, v39, v40, v41);
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v5, v43, v44, v45))
    v49 = objc_msgSend_delegatedLinkID(v5, v46, v47, v48);
  else
    v49 = -1;
  if (v42)
    v50 = v42;
  else
    v50 = -1;
  objc_msgSend_candidatePairToken(v5, v46, v47, v48);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(v5, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mtu(v55, v56, v57, v58);
  HIBYTE(v63) = v49;
  LOBYTE(v63) = v50;
  v61 = objc_msgSend__sendStunMessage_sourceIfIndex_source_destination_stunTransport_token_linkID_delegatedLinkID_MTULimit_(self, v59, (uint64_t)v6, v60, v14, v22, v30, v38, v51, v63);

  return v61;
}

- (int64_t)_sendStunMessage:(id)a3 sourceIfIndex:(int)a4 source:(const sockaddr *)a5 destination:(sockaddr *)a6 stunTransport:(int64_t)a7 token:(id)a8 linkID:(char)a9 delegatedLinkID:(char)a10 MTULimit:(int)a11
{
  id v16;
  __int128 v17;
  id *v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  void *v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  NSString *v30;
  double v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  uint64_t v40;
  double v41;
  int64_t v42;
  NSObject *v43;
  const char *v44;
  double v45;
  const char *v46;
  uint64_t v47;
  double v48;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  const char *v56;
  double v57;
  NSObject *v58;
  NSString *v59;
  NSObject *v60;
  NSString *idsSessionID;
  uint64_t v63;
  int v64;
  id v66;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  NSString *v70;
  __int16 v71;
  char *v72;
  __int16 v73;
  char *v74;
  char v75[16];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char __str[16];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  v66 = a8;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = v17;
  v90 = v17;
  v87 = v17;
  v88 = v17;
  v85 = v17;
  v86 = v17;
  *(_OWORD *)__str = v17;
  v84 = v17;
  v81 = v17;
  v82 = v17;
  v79 = v17;
  v80 = v17;
  v77 = v17;
  v78 = v17;
  *(_OWORD *)v75 = v17;
  v76 = v17;
  v18 = _IDSLinkPacketBufferCreate();
  objc_msgSend_write_outputLength_remainingLength_internal_(v16, v19, (uint64_t)*v18, v20, v18 + 2, v18[1], 0);
  SAToIPPortString(__str, 0x80uLL, (uint64_t)a5);
  SAToIPPortString(v75, 0x80uLL, (uint64_t)a6);
  objc_msgSend__getLink_stunTransport_(self, v21, *((unsigned __int8 *)v18 + 57), v22, a7);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (char *)v18[2];
  v30 = (NSString *)&v24[objc_msgSend_headerOverhead(v23, v25, v26, v27)];
  if ((uint64_t)v30 <= a11)
  {
    v63 = 0;
    v64 = 1;
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v28, v29, v31);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      v68 = objc_msgSend_type(v16, v33, v34, v35);
      v69 = 2048;
      v70 = v30;
      v71 = 1024;
      LODWORD(v72) = a11;
      _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "_sendStunMessage: 0x%lx, bytesSent: %lu, greater than MTU %d", buf, 0x1Cu);
    }

    if (objc_msgSend_type(v16, v36, v37, v38) == 3813)
    {
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0xF32, (uint64_t)v18, v41);
      v42 = -2;
      goto LABEL_27;
    }
    if (objc_msgSend_type(v16, v39, v40, v41) == 3815 || objc_msgSend_type(v16, v28, v29, v31) == 3808)
    {
      v64 = 0;
      v63 = -2;
    }
    else
    {
      v63 = 0;
      v64 = 1;
    }
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v28, v29, v31);
  v43 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "_sendStunMessage: setting up packet buffer", buf, 2u);
  }

  *((_BYTE *)v18 + 45) = 1;
  *((_DWORD *)v18 + 12) = a4;
  memcpy(v18 + 7, a5, a5->sa_len);
  memcpy(v18 + 23, a6, a6->sa_len);
  v42 = objc_msgSend__sendPacketBuffer_stunTransport_token_linkID_delegatedLinkID_(self, v44, (uint64_t)v18, v45, a7, v66, a9, a10);
  if (v42 < 1)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v46, v47, v48);
    v60 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      *(_DWORD *)buf = 138413058;
      v68 = (uint64_t)v16;
      v69 = 2112;
      v70 = idsSessionID;
      v71 = 2080;
      v72 = __str;
      v73 = 2080;
      v74 = v75;
      _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "Failed to send stun message %@ for IDSSessionID: %@ and %s-%s", buf, 0x2Au);
    }

  }
  else
  {
    if ((objc_msgSend_type(v16, v46, v47, v48) & 0x110) == 0)
    {
      objc_msgSend_requestID(v16, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_startTime(v16, v53, v54, v55);
      objc_msgSend__saveStunRequest_startTime_token_(self, v56, (uint64_t)v52, v57, v66);

    }
    OSLogHandleForIDSCategory();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      v59 = self->_idsSessionID;
      *(_DWORD *)buf = 138413058;
      v68 = (uint64_t)v16;
      v69 = 2112;
      v70 = v59;
      v71 = 2080;
      v72 = __str;
      v73 = 2080;
      v74 = v75;
      _os_log_impl(&dword_19B949000, v58, OS_LOG_TYPE_DEFAULT, "send stun message %@ for IDSSessionID: %@ and %s-%s.", buf, 0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send stun message %@ for IDSSessionID: %@ and %s-%s."));
    if (!v64)
      v42 = v63;
  }
LABEL_27:

  return v42;
}

- (int64_t)_sendPacketBuffer:(id *)a3 stunTransport:(int64_t)a4 token:(id)a5 linkID:(char)a6 delegatedLinkID:(char)a7
{
  uint64_t v7;
  uint64_t v8;
  id v12;
  const char *v13;
  double v14;
  void *v15;
  int64_t var2;
  const char *v17;
  uint64_t v18;
  double v19;
  int64_t v20;
  const char *v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  NSObject *v28;
  const char *v29;
  double v30;
  const char *v31;
  uint8_t buf[4];
  int64_t v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v7 = a7;
  v8 = a6;
  v37 = *MEMORY[0x1E0C80C00];
  v12 = a5;
  objc_msgSend__getLink_stunTransport_(self, v13, a3->var17.ss_family, v14, a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  var2 = a3->var2;
  v20 = objc_msgSend_headerOverhead(v15, v17, v18, v19) + var2;
  v23 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(v15, v21, (uint64_t)a3, v22, self->_deviceUniqueID, self->_cbuuid);
  if (v23)
  {
    v27 = v23;
    objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (v27 > 0xF)
        v29 = "UnexpectedSendResult";
      else
        v29 = _IDSLinkSendResultStrings[v27];
      *(_DWORD *)buf = 134218242;
      v34 = v20;
      v35 = 2080;
      v36 = v29;
      _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "Failed to send packet buffer (%ldB) (error:%s).", buf, 0x16u);
    }

    v20 = -1;
  }
  else if (v20 >= 1)
  {
    v30 = ids_monotonic_time();
    objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_(self, v31, 0, v30, v20, 1, v8, v7, v12, 0, a4);
  }

  return v20;
}

- (id)_createIDSContextBlobMaterialProto:(id)a3
{
  id v3;
  IDSQRProtoMaterialInfo *v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  IDSQRProtoMaterial *v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  double v29;
  const char *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  int v39;
  uint8_t buf[4];
  IDSQRProtoMaterial *v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc_init(IDSQRProtoMaterialInfo);
  objc_msgSend_setMaterialType_(v4, v5, 7, v6);
  v10 = (void *)objc_msgSend_copy(v3, v7, v8, v9);

  objc_msgSend_setMaterialContent_(v4, v11, (uint64_t)v10, v12);
  v39 = 0;
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v13, (uint64_t)&v39, v14, 4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setMaterialId_(v4, v16, (uint64_t)v15, v17);
  v18 = objc_alloc_init(IDSQRProtoMaterial);
  objc_msgSend_setReceiverParticipantId_(v18, v19, 0, v20);
  v42[0] = v4;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v21, (uint64_t)v42, v22, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend_mutableCopy(v23, v24, v25, v26);
  objc_msgSend_setMaterialInfos_(v18, v28, (uint64_t)v27, v29);

  objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v41 = v18;
    _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "_createDataBlobMaterialProto: %@", buf, 0xCu);
  }

  v37 = (void *)objc_msgSend_copy(v18, v34, v35, v36);
  return v37;
}

- (void)_sendAllocbindRequest:(id)a3 stunMessage:(id)a4 isRealloc:(BOOL)a5 inResponseToNoSessionState:(BOOL)a6
{
  _BOOL4 v6;
  int v7;
  __CFString *v10;
  id v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  int v28;
  const char *v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  NSObject *v33;
  int v34;
  int v35;
  const char *v36;
  uint64_t v37;
  double v38;
  int v39;
  int v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  double v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t Type;
  double v52;
  NSObject *v53;
  const __CFString *v54;
  char *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  NSObject *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  __CFDictionary *v64;
  double v65;
  unint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  double v70;
  void *v71;
  int HasCandidatePairForSameSharedSession;
  const char *v73;
  double v74;
  BOOL v75;
  unsigned int v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  double v80;
  void *v81;
  const char *v82;
  double v83;
  const char *v84;
  uint64_t v85;
  double v86;
  void *v87;
  const char *v88;
  double v89;
  NSObject *v90;
  char *v91;
  const char *v92;
  double v93;
  int hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  const char *v95;
  uint64_t v96;
  double v97;
  const char *v98;
  uint64_t v99;
  double v100;
  const char *v101;
  uint64_t v102;
  double v103;
  NSObject *v104;
  NSString *v105;
  const char *v106;
  uint64_t v107;
  double v108;
  const char *v109;
  uint64_t v110;
  double v111;
  void *v112;
  const char *v113;
  double v114;
  uint64_t AllocBindErrorCodeForSessionID;
  NSObject *v116;
  const char *v117;
  uint64_t v118;
  double v119;
  char *v120;
  const char *v121;
  uint64_t v122;
  double v123;
  const char *v124;
  uint64_t v125;
  double v126;
  id v127;
  char v128;
  const char *v129;
  uint64_t v130;
  double v131;
  id v132;
  const char *v133;
  double v134;
  NSObject *v135;
  const char *v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  double v142;
  void *v143;
  const char *v144;
  double v145;
  void *v146;
  const char *v147;
  double v148;
  void *v149;
  void *v150;
  const char *v151;
  double v152;
  void *v153;
  NSObject *v154;
  id v155;
  const char *v156;
  uint64_t v157;
  double v158;
  NSObject *v159;
  const char *v160;
  double v161;
  const char *v162;
  uint64_t v163;
  double v164;
  __CFString *v165;
  const char *v166;
  uint64_t v167;
  double v168;
  const char *v169;
  double v170;
  void *v171;
  _BOOL4 v172;
  const char *v173;
  uint64_t v174;
  double v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  double v179;
  const char *v180;
  uint64_t v181;
  double v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  double v186;
  NSDictionary *QRServerDataBlob;
  NSObject *v188;
  const char *v189;
  uint64_t v190;
  double v191;
  const char *v192;
  uint64_t v193;
  double v194;
  const char *v195;
  uint64_t v196;
  double v197;
  uint64_t v198;
  id v199;
  id v200;
  char v201;
  const char *v202;
  double v203;
  double v204;
  float v205;
  void *v206;
  id v207;
  char v208;
  const char *v209;
  uint64_t v210;
  double v211;
  id v212;
  const char *v213;
  double v214;
  const char *v215;
  double v216;
  NSObject *v217;
  const char *v218;
  uint64_t v219;
  double v220;
  void *v221;
  const char *v222;
  uint64_t v223;
  double v224;
  id v225;
  char v226;
  id v227;
  const char *v228;
  double v229;
  const char *v230;
  uint64_t v231;
  double v232;
  void *v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  double v237;
  void *v238;
  const char *v239;
  double v240;
  const char *v241;
  uint64_t v242;
  double v243;
  void *v244;
  const char *v245;
  double v246;
  NSObject *v247;
  const char *v248;
  uint64_t v249;
  double v250;
  const char *v251;
  NSString *idsSessionID;
  __CFString *v253;
  const char *v254;
  uint64_t v255;
  double v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  double v260;
  const char *v261;
  uint64_t v262;
  double v263;
  IDSGFTMetricsCollector *metricsCollector;
  const char *v265;
  uint64_t v266;
  double v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  double v271;
  const char *v272;
  double v273;
  int v274;
  int v275;
  const char *v276;
  uint64_t v277;
  double v278;
  int v279;
  _BOOL4 v280;
  _BOOL4 v281;
  NSObject *v282;
  const __CFString *v283;
  const __CFString *v284;
  _BOOL4 forceTCPFallbackOnCell;
  const __CFString *v286;
  const __CFString *v287;
  const char *v288;
  uint64_t v289;
  double v290;
  void *v291;
  const char *v292;
  uint64_t v293;
  double v294;
  int isCellularStunCandidate;
  const char *v296;
  uint64_t v297;
  double v298;
  int v299;
  NSObject *v300;
  char *v301;
  const char *v302;
  char *v303;
  const char *v304;
  double v305;
  NSObject *v306;
  const char *v307;
  uint64_t v308;
  double v309;
  const char *v310;
  double v311;
  NSObject *v312;
  BOOL v313;
  char v314;
  NSObject *v315;
  const char *v316;
  uint64_t v317;
  double v318;
  void *v319;
  const char *v320;
  uint64_t v321;
  double v322;
  const char *v323;
  uint64_t v324;
  double v325;
  id WeakRetained;
  char v327;
  id v328;
  const char *v329;
  double v330;
  char *v331;
  char *v332;
  char *v333;
  uint64_t v334;
  __CFString *v335;
  char *v336;
  _BOOL4 v337;
  void *v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  void *v343;
  unint64_t v344;
  void *v345;
  __CFDictionary *v346;
  void *v347;
  _QWORD v348[5];
  __CFString *v349;
  id v350;
  char v351;
  BOOL v352;
  _QWORD block[4];
  id v354;
  id v355;
  uint8_t buf[4];
  _BYTE v357[28];
  __int16 v358;
  const __CFString *v359;
  __int16 v360;
  const __CFString *v361;
  __int16 v362;
  const __CFString *v363;
  __int16 v364;
  const __CFString *v365;
  uint64_t v366;

  v6 = a6;
  v7 = a5;
  v366 = *MEMORY[0x1E0C80C00];
  v10 = (__CFString *)a3;
  v11 = a4;
  if (v10)
  {
    if (self->_state >= 5 && !v6)
    {
      OSLogHandleForTransportCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v357 = v10;
        *(_WORD *)&v357[8] = 2080;
        *(_QWORD *)&v357[10] = v13;
        _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "skip allocbind request for %@, GL state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip allocbind request for %@, GL state [%s]."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip allocbind request for %@, GL state [%s]."));
        }
      }
      goto LABEL_35;
    }
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (v16 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v10)) == 0)
    {
      OSLogHandleForTransportCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "send allocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send allocbind request failed due to invalid candidate pair."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send allocbind request failed due to invalid candidate pair."));
        }
      }
      v20 = 0;
      goto LABEL_34;
    }
    v20 = v16;
    if (objc_msgSend_isSharedQRSession(v16, v17, v18, v19) && !self->_sharedSessionHasJoined)
    {
      OSLogHandleForTransportCategory();
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "skip allocbind request, session is not yet joined!", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip allocbind request, session is not yet joined!"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip allocbind request, session is not yet joined!"));
        }
      }
      goto LABEL_34;
    }
    v24 = objc_msgSend_state(v20, v21, v22, v23);
    v28 = objc_msgSend_pendingRealloc(v20, v25, v26, v27);
    if (v24 == 2)
    {
      OSLogHandleForTransportCategory();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "in failed state, send allocbind request ignored", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("in failed state, send allocbind request ignored"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("in failed state, send allocbind request ignored"));
        }
      }
LABEL_34:

      goto LABEL_35;
    }
    v34 = v28;
    v35 = objc_msgSend_pendingNoSessionStateAllocbind(v20, v29, v30, v31);
    v39 = v35;
    if (v24 < 3)
      v40 = 1;
    else
      v40 = v7;
    if ((v7 & (v34 ^ 1) & 1) != 0 || !v40 || (v6 & ~v7 & v35) != 0)
    {
      OSLogHandleForTransportCategory();
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        v54 = CFSTR("allocbind");
        v55 = (&_IDSStunCandidatePairStateStrings)[v24];
        if (v7)
          v54 = CFSTR("realloc");
        *(_DWORD *)buf = 138413826;
        *(_QWORD *)v357 = v54;
        v56 = CFSTR("YES");
        *(_WORD *)&v357[8] = 2112;
        *(_QWORD *)&v357[10] = v10;
        if (v34)
          v57 = CFSTR("YES");
        else
          v57 = CFSTR("NO");
        *(_WORD *)&v357[18] = 2080;
        *(_QWORD *)&v357[20] = v55;
        if (v40)
          v58 = CFSTR("NO");
        else
          v58 = CFSTR("YES");
        v358 = 2112;
        if (v6)
          v59 = CFSTR("YES");
        else
          v59 = CFSTR("NO");
        v359 = v57;
        if (!v39)
          v56 = CFSTR("NO");
        v360 = 2112;
        v361 = v58;
        v362 = 2112;
        v363 = v59;
        v364 = 2112;
        v365 = v56;
        _os_log_impl(&dword_19B949000, v53, OS_LOG_TYPE_DEFAULT, "skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, pendingInResponseToNoSessionState: %@", buf, 0x48u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, pendingInResponseToNoSessionState: %@"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, pendingInResponseToNoSessionState: %@"));
        }
      }
      goto LABEL_34;
    }
    v340 = v24;
    if (!v11)
    {
      v61 = 3808;
      if (v7)
        v61 = 3809;
      v342 = v61;
      v64 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
      v66 = 0x1E0CB3000;
      if ((v7 & 1) == 0)
      {
        objc_msgSend_sessionID(v20, v62, v63, v65);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_allValues(self->_tokenToCandidatePairs, v68, v69, v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v346 = v64;
        HasCandidatePairForSameSharedSession = GLUtilHasCandidatePairForSameSharedSession(v67, v71);

        v75 = HasCandidatePairForSameSharedSession == 0;
        v64 = v346;
        if (v75)
          v76 = 0;
        else
          v76 = 16;
        if (v6)
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v73, v76 | 0x20, v74);
        else
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v73, v76, v74);
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        if (v77)
        {
          CFDictionarySetValue(v346, CFSTR("gl-option-additional-binding"), v77);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF1704();
        }

        objc_msgSend_sessionID(v20, v162, v163, v164);
        v165 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(self->_QRServerDataBlob, v166, v167, v168))
        {
          objc_msgSend_objectForKeyedSubscript_(self->_QRServerDataBlob, v169, (uint64_t)v165, v170);
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          v172 = v171 == 0;

          if (v172)
          {
            objc_msgSend_allKeys(self->_QRServerDataBlob, v173, v174, v175);
            v176 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_firstObject(v176, v177, v178, v179);
            v336 = (char *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_allValues(self->_QRServerDataBlob, v180, v181, v182);
            v183 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_firstObject(v183, v184, v185, v186);
            v338 = (void *)objc_claimAutoreleasedReturnValue();

            QRServerDataBlob = self->_QRServerDataBlob;
            self->_QRServerDataBlob = 0;

            OSLogHandleForTransportCategory();
            v188 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)v357 = objc_msgSend_length(v338, v189, v190, v191);
              *(_WORD *)&v357[4] = 2112;
              *(_QWORD *)&v357[6] = v336;
              *(_WORD *)&v357[14] = 2112;
              *(_QWORD *)&v357[16] = v165;
              _os_log_impl(&dword_19B949000, v188, OS_LOG_TYPE_DEFAULT, "Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@", buf, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v333 = v336;
                v335 = v165;
                v331 = (char *)objc_msgSend_length(v338, v192, v193, v194);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@"));
                if (_IDSShouldLog())
                {
                  v198 = objc_msgSend_length(v338, v195, v196, v197, v331, v336, v165);
                  v333 = v336;
                  v335 = v165;
                  v331 = (char *)v198;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@"));
                }
              }
            }
            v199 = v338;
            if (v199)
            {
              CFDictionarySetValue(v346, CFSTR("gl-option-qr-server-data-blob"), v199);
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              sub_19BAF1684();
            }

          }
        }

        v66 = 0x1E0CB3000uLL;
      }
      objc_msgSend_numberWithBool_(*(void **)(v66 + 2024), v62, self->_isLightweightParticipant, v65, v331, v333, v335);
      v233 = (void *)objc_claimAutoreleasedReturnValue();
      if (v233)
      {
        CFDictionarySetValue(v64, CFSTR("gl-option-is-lightweight-participant-key"), v233);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1604();
      }

      StunUtilCreateMessage(v342, 0, v20, v64);
      v234 = (void *)objc_claimAutoreleasedReturnValue();
      v345 = v234;
      if (!v234)
      {
        OSLogHandleForTransportCategory();
        v312 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v357 = v342;
          _os_log_impl(&dword_19B949000, v312, OS_LOG_TYPE_DEFAULT, "failed to create stun message (%04x).", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to create stun message (%04x)."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to create stun message (%04x)."));
          }
        }

        v11 = 0;
        goto LABEL_34;
      }
      objc_msgSend_requestID(v234, v235, v236, v237);
      v238 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addStunRequest_(v20, v239, (uint64_t)v238, v240);

      objc_msgSend_encKey(v20, v241, v242, v243);
      v244 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_initAES128CTR_(v345, v245, (uint64_t)v244, v246);

LABEL_150:
      objc_msgSend_GlobalLink(IDSFoundationLog, v49, v50, v52);
      v247 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
          v251 = "realloc";
        else
          v251 = "allocbind";
        idsSessionID = self->_idsSessionID;
        objc_msgSend_sessionID(v20, v248, v249, v250);
        v253 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)v357 = v251;
        *(_WORD *)&v357[8] = 2112;
        *(_QWORD *)&v357[10] = v345;
        *(_WORD *)&v357[18] = 2112;
        *(_QWORD *)&v357[20] = idsSessionID;
        v358 = 2112;
        v359 = v253;
        v360 = 2112;
        v361 = v10;
        _os_log_impl(&dword_19B949000, v247, OS_LOG_TYPE_DEFAULT, "Send %s request %@ for IDSSessionID: %@ QRSessionID: %@ token: %@", buf, 0x34u);

      }
      objc_msgSend_local(v20, v254, v255, v256);
      v257 = (void *)objc_claimAutoreleasedReturnValue();
      v339 = objc_msgSend_transport(v257, v258, v259, v260);

      metricsCollector = self->_metricsCollector;
      v344 = v339 - 3;
      if (v339 == 3)
        objc_msgSend_tcpAllocbindRequest(metricsCollector, v261, v262, v263);
      else
        objc_msgSend_stunAllocbindRequest(metricsCollector, v261, v262, v263);
      objc_msgSend_linkMetrics(v20, v265, v266, v267);
      v268 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sendAllocbindRequest(v268, v269, v270, v271);

      objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v272, (uint64_t)v20, v273);
      v274 = IMGetDomainBoolForKey();
      v275 = IMGetDomainBoolForKey();
      v279 = v275;
      v280 = (v274 & 1) != 0 || self->_forceTCPFallbackOnWiFi;
      v281 = (v275 & 1) != 0 || self->_forceTCPFallbackOnCell;
      v337 = v281;
      objc_msgSend_GlobalLink(IDSFoundationLog, v276, v277, v278);
      v282 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
      {
        v283 = CFSTR("NO");
        if (v274)
          v284 = CFSTR("YES");
        else
          v284 = CFSTR("NO");
        forceTCPFallbackOnCell = self->_forceTCPFallbackOnCell;
        if (self->_forceTCPFallbackOnWiFi)
          v286 = CFSTR("YES");
        else
          v286 = CFSTR("NO");
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)v357 = v284;
        if (v279)
          v287 = CFSTR("YES");
        else
          v287 = CFSTR("NO");
        *(_WORD *)&v357[8] = 2112;
        *(_QWORD *)&v357[10] = v286;
        if (forceTCPFallbackOnCell)
          v283 = CFSTR("YES");
        *(_WORD *)&v357[18] = 2112;
        *(_QWORD *)&v357[20] = v287;
        v358 = 2112;
        v359 = v283;
        _os_log_impl(&dword_19B949000, v282, OS_LOG_TYPE_DEFAULT, "sendAllocbindRequest forceTCPFallbackOnWiFI default: %@ manual: %@; forceTCPFallbackOnCell default: %@ manual: %@",
          buf,
          0x2Au);
      }

      objc_msgSend_local(v20, v288, v289, v290);
      v291 = (void *)objc_claimAutoreleasedReturnValue();
      isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v291, v292, v293, v294);

      v299 = !v280;
      if (v344 < 0xFFFFFFFFFFFFFFFELL)
        v299 = 1;
      if (((v299 | isCellularStunCandidate) & 1) != 0)
      {
        if (!v337 || v344 < 0xFFFFFFFFFFFFFFFELL || ((isCellularStunCandidate ^ 1) & 1) != 0)
        {
          v313 = v11 != 0;
          v314 = objc_msgSend__sendStunMessage_candidatePair_(self, v296, (uint64_t)v345, v298, v20) != -2 || v313;
          if ((v314 & 1) != 0)
            goto LABEL_189;
          OSLogHandleForTransportCategory();
          v315 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v315, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v20, v316, v317, v318);
            v319 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)v357 = v345;
            *(_WORD *)&v357[8] = 2112;
            *(_QWORD *)&v357[10] = v319;
            _os_log_impl(&dword_19B949000, v315, OS_LOG_TYPE_DEFAULT, "warning: allocbind request %@ for %@ exceeds MTU size", buf, 0x16u);

          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v20, v320, v321, v322);
              v331 = (char *)v345;
              v333 = (char *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("warning: allocbind request %@ for %@ exceeds MTU size"));

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v20, v323, v324, v325, v345, v333);
                v331 = (char *)v345;
                v333 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("warning: allocbind request %@ for %@ exceeds MTU size"));

              }
            }
          }
          GLUCreateQRStunMessageEvent(v345, 36, v20, self->_timeBase, 0.0);
          v300 = objc_claimAutoreleasedReturnValue();
          if (v300)
          {
            WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
            v327 = objc_opt_respondsToSelector();

            if ((v327 & 1) != 0)
            {
              v328 = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didAddQREvent_(v328, v329, (uint64_t)self, v330, v300);

            }
          }
        }
        else
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v296, v297, v298);
          v300 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT))
          {
            v301 = (&_IDSStunTransportStrings)[v339];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)v357 = v301;
            v302 = "forceTCPFallbackOnCell is set, skip STUN message %s";
LABEL_187:
            _os_log_impl(&dword_19B949000, v300, OS_LOG_TYPE_DEFAULT, v302, buf, 0xCu);
          }
        }
      }
      else
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v296, v297, v298);
        v300 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT))
        {
          v303 = (&_IDSStunTransportStrings)[v339];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v357 = v303;
          v302 = "forceTCPFallbackOnWiFi is set, skip STUN message %s";
          goto LABEL_187;
        }
      }

LABEL_189:
      if (!v340)
      {
        objc_msgSend_setState_(v20, v304, 1, v305);
        OSLogHandleForTransportCategory();
        v306 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v357 = _IDSStunCandidatePairStateStrings;
          *(_WORD *)&v357[8] = 2080;
          *(_QWORD *)&v357[10] = off_1EE40A660;
          *(_WORD *)&v357[18] = 2112;
          *(_QWORD *)&v357[20] = v10;
          _os_log_impl(&dword_19B949000, v306, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v333 = off_1EE40A660;
            v335 = v10;
            v331 = _IDSStunCandidatePairStateStrings;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
            if (_IDSShouldLog())
            {
              v333 = off_1EE40A660;
              v335 = v10;
              v331 = _IDSStunCandidatePairStateStrings;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
            }
          }
        }
        if ((objc_msgSend_isSelfQRSession(v20, v307, v308, v309, v331, v333, v335) & 1) == 0)
          objc_msgSend__startAllocbindFailoverTimerOnCandidatePair_delay_(self, v310, (uint64_t)v20, v311, 2);
      }
      if (v344 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v348[0] = MEMORY[0x1E0C809B0];
        v348[1] = 3221225472;
        v348[2] = sub_19B9D6D88;
        v348[3] = &unk_1E3C1FF78;
        v348[4] = self;
        v349 = v10;
        v11 = v345;
        v350 = v11;
        v351 = v7;
        v352 = v6;
        IDSTransportThreadAddBlockAfter(v348, 1.0);

      }
      else
      {
        v11 = v345;
      }
      goto LABEL_34;
    }
    v41 = objc_msgSend_type(v11, v36, v37, v38);
    v42 = ids_monotonic_time();
    objc_msgSend_startTime(v11, v43, v44, v42);
    v46 = v42 - v45;
    Type = objc_msgSend_allocateType(v20, v47, v48, v45);
    v52 = 10.0;
    if (Type == 2)
      v52 = GLUtilNATCheckTimeout(10.0, 2, v49, v50);
    if (v46 < v52)
    {
      v345 = v11;
      goto LABEL_150;
    }
    objc_msgSend_setState_(v20, v49, 2, v52);
    objc_msgSend_requestID(v11, v78, v79, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__removeStunRequest_(self, v82, (uint64_t)v81, v83);

    objc_msgSend_requestID(v11, v84, v85, v86);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeStunRequest_(v20, v88, (uint64_t)v87, v89);

    OSLogHandleForTransportCategory();
    v90 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      v91 = (&_IDSStunCandidatePairStateStrings)[v24];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v357 = v91;
      *(_WORD *)&v357[8] = 2080;
      *(_QWORD *)&v357[10] = off_1EE40A668;
      *(_WORD *)&v357[18] = 2112;
      *(_QWORD *)&v357[20] = v10;
      _os_log_impl(&dword_19B949000, v90, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v333 = off_1EE40A668;
        v335 = v10;
        v331 = (&_IDSStunCandidatePairStateStrings)[v24];
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
        if (_IDSShouldLog())
        {
          v333 = off_1EE40A668;
          v335 = v10;
          v331 = (&_IDSStunCandidatePairStateStrings)[v24];
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
        }
      }
    }
    hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v92, 3, v93, 4, 0, 0, v331, v333, v335);
    if (((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc | objc_msgSend__hasConnectingRelayCandidatePair(self, v95, v96, v97)) & 1) != 0)
    {
LABEL_124:
      if (Type == 2)
      {
        objc_msgSend_startTime(v11, v98, v99, v100);
        v205 = (float)((v42 - v204) * 1000.0);
        GLUtilReportAWDClientTimerEvent(308, 23, v20, self->_enableSKE, self->_isInitiator, v205);
        GLUCreateQRClientTimeEvent(308, 23, v20, self->_timeBase, v205);
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        v207 = objc_loadWeakRetained((id *)&self->_delegate);
        v208 = objc_opt_respondsToSelector();

        if ((v208 & 1) != 0)
        {
          v212 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v212, v213, (uint64_t)self, v214, v206);

        }
        if (objc_msgSend__isExtIPDiscoveryDone(self, v209, v210, v211))
        {
          OSLogHandleForTransportCategory();
          v217 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v217, OS_LOG_TYPE_DEFAULT, "discard self allocate candidate pairs", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("discard self allocate candidate pairs"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("discard self allocate candidate pairs"));
            }
          }
          objc_msgSend__discardSelfAllocateCandidatePairs(self, v218, v219, v220);
        }
        objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v215, 0, v216);
      }
      else
      {
        objc_msgSend_linkMetrics(v20, v98, v99, v100);
        v221 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_allocBindRequestTimeOut(v221, v222, v223, v224);

        GLUtilReportAWDStunMessageEvent(v11, 7, v20, 0.0);
        GLUCreateQRStunMessageEvent(v11, 7, v20, 0, 0.0);
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        if (v206)
        {
          v225 = objc_loadWeakRetained((id *)&self->_delegate);
          v226 = objc_opt_respondsToSelector();

          if ((v226 & 1) != 0)
          {
            v227 = objc_loadWeakRetained((id *)&self->_delegate);
            objc_msgSend_link_didAddQREvent_(v227, v228, (uint64_t)self, v229, v206);

          }
        }
      }

      objc_msgSend__reportAWDAllocateTime(self, v230, v231, v232);
      goto LABEL_34;
    }
    v347 = _Block_copy(self->_connectReadyHandler);
    objc_msgSend_GlobalLink(IDSFoundationLog, v101, v102, v103);
    v104 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
    {
      v105 = self->_idsSessionID;
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v357 = v105;
      *(_WORD *)&v357[8] = 2048;
      *(_QWORD *)&v357[10] = v41;
      *(_WORD *)&v357[18] = 2048;
      *(_QWORD *)&v357[20] = 0x4024000000000000;
      _os_log_impl(&dword_19B949000, v104, OS_LOG_TYPE_DEFAULT, "Connect to QR server for IDSSessionID: %@, stun message type %ld timed out after %lf seconds.", buf, 0x20u);
    }

    objc_msgSend_local(v20, v106, v107, v108);
    v343 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sessionID(v20, v109, v110, v111);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    AllocBindErrorCodeForSessionID = objc_msgSend_getAllocBindErrorCodeForSessionID_(self, v113, (uint64_t)v112, v114);

    OSLogHandleForTransportCategory();
    v116 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
    {
      v120 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v343, v117, v118, v119)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v357 = v120;
      *(_WORD *)&v357[8] = 1024;
      *(_DWORD *)&v357[10] = 7;
      _os_log_impl(&dword_19B949000, v116, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v332 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v343, v121, v122, v123)];
        v334 = 7;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report session setup failure (%s, %d)."));
        if (_IDSShouldLog())
        {
          v332 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v343, v124, v125, v126, v332, 7)];
          v334 = 7;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report session setup failure (%s, %d)."));
        }
      }
    }
    GLUtilReportAWDClientTimerEvent(305, 7, v20, self->_enableSKE, self->_isInitiator, 0.0);
    GLUCreateQRClientTimeEvent(305, AllocBindErrorCodeForSessionID, v20, self->_timeBase, 0.0);
    v341 = (void *)objc_claimAutoreleasedReturnValue();
    v127 = objc_loadWeakRetained((id *)&self->_delegate);
    v128 = objc_opt_respondsToSelector();

    if ((v128 & 1) != 0)
    {
      v132 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v132, v133, (uint64_t)self, v134, v341);

    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v129, v130, v131, v332, v334);
    v135 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
    {
      v139 = objc_msgSend_participantID(v20, v136, v137, v138);
      objc_msgSend_relaySessionToken(v20, v140, v141, v142);
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_base64EncodedStringWithOptions_(v143, v144, 0, v145);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)v357 = v139;
      *(_WORD *)&v357[8] = 2112;
      *(_QWORD *)&v357[10] = v146;
      _os_log_impl(&dword_19B949000, v135, OS_LOG_TYPE_DEFAULT, "failed participant:[%16llX], token:[%@]", buf, 0x16u);

    }
    if (v347)
    {
      v149 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E0C99D80], v147, (uint64_t)CFSTR("Allocbind timed out."), v148, *MEMORY[0x1E0CB2D50]);
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_userInfo_(v149, v151, (uint64_t)CFSTR("GlobalLink"), v152, 7, v150);
      v153 = (void *)objc_claimAutoreleasedReturnValue();

      im_primary_queue();
      v154 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19B9D6D78;
      block[3] = &unk_1E3C1C7E8;
      v355 = v347;
      v155 = v153;
      v354 = v155;
      dispatch_async(v154, block);

      if (self->_clientType == 6)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v156, v157, v158);
        v159 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v159, OS_LOG_TYPE_DEFAULT, "Stun Allocbind timed out. - gathering ABC with packet capture", buf, 2u);
        }

        objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(self, v160, (uint64_t)CFSTR("IDSQuickRelayShared"), v161, CFSTR("FailedToConnect"), CFSTR("StunAllocbindTimedout"), 15);
      }

    }
    else
    {
      v200 = objc_loadWeakRetained((id *)&self->_delegate);
      v201 = objc_opt_respondsToSelector();

      if ((v201 & 1) == 0)
      {
LABEL_123:

        goto LABEL_124;
      }
      v155 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v155, v202, (uint64_t)self, v203, 0, self->_cbuuid);
    }

    goto LABEL_123;
  }
  OSLogHandleForTransportCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "failed to send allocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to send allocbind request due to invalid token."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to send allocbind request due to invalid token."));
    }
  }
LABEL_35:

}

- (void)_sendUnallocbindRequestTimeOut:(id)a3 stunMessage:(id)a4 reason:(unsigned __int8)a5
{
  uint64_t v5;
  id v8;
  id v9;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  const char *v27;
  double v28;
  NSMutableDictionary *unallocbindRequestToReason;
  uint64_t v30;
  NSMutableDictionary *v31;
  void *v32;
  const char *v33;
  double v34;
  char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  const char *v36;
  double v37;
  char v38;
  const char *v39;
  double v40;
  NSObject *v41;
  NSObject *v42;
  const char *v43;
  double v44;
  void *v45;
  id WeakRetained;
  char v47;
  id v48;
  const char *v49;
  double v50;
  uint8_t v51[16];
  uint8_t buf[16];
  uint8_t v53[16];

  v5 = a5;
  v8 = a3;
  v9 = a4;
  if (v8
    && (tokenToCandidatePairs = self->_tokenToCandidatePairs) != 0
    && (v11 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v8)) != 0)
  {
    v15 = v11;
    if (objc_msgSend_state(v11, v12, v13, v14) != 6)
    {
      OSLogHandleForTransportCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "_sendUnallocbindRequestTimeOut: unallocbind request timed out.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_sendUnallocbindRequestTimeOut: unallocbind request timed out."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_sendUnallocbindRequestTimeOut: unallocbind request timed out."));
        }
      }
      objc_msgSend_requestID(v9, v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__removeStunRequest_(self, v21, (uint64_t)v20, v22);

      objc_msgSend_requestID(v9, v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v26)
      {
        unallocbindRequestToReason = self->_unallocbindRequestToReason;

        if (unallocbindRequestToReason)
        {
          v31 = self->_unallocbindRequestToReason;
          objc_msgSend_requestID(v9, v27, v30, v28);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          CFDictionaryRemoveValue((CFMutableDictionaryRef)v31, v32);

        }
      }
      objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v27, (uint64_t)v15, v28, v5);
      if (self->_isUPlusOneSession)
        objc_msgSend__destroyVirtualRelayLinksForCandidatePair_(self, v33, (uint64_t)v15, v34);
      hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v33, 3, v34, 4, 0, 0);
      v38 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
      if (self->_state == 5)
      {
        objc_msgSend__discardCandidatePairsWithOption_(self, v36, 0, v37);
        if ((v38 & 1) == 0)
          objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v39, 8, v40, v5);
      }
      else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0
             && objc_msgSend_isEqualToString_(self->_cbuuid, v36, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v37))
      {
        OSLogHandleForTransportCategory();
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v51 = 0;
          _os_log_impl(&dword_19B949000, v42, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", v51, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no more underlying link is connected."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no more underlying link is connected."));
          }
        }
        objc_msgSend_disconnectWithCompletionHandler_(self, v43, 0, v44);
      }
      GLUtilReportAWDStunMessageEvent(v9, 8, v15, 0.0);
      GLUCreateQRStunMessageEvent(v9, 8, v15, 0, 0.0);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      if (v45)
      {
        WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        v47 = objc_opt_respondsToSelector();

        if ((v47 & 1) != 0)
        {
          v48 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v48, v49, (uint64_t)self, v50, v45);

        }
      }

    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "_sendUnallocbindRequestTimeOut: invalid candidate pair.", v53, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_sendUnallocbindRequestTimeOut: invalid candidate pair."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_sendUnallocbindRequestTimeOut: invalid candidate pair."));
      }
    }
    v15 = 0;
  }

}

- (void)_sendUnallocbindRequest:(id)a3 stunMessage:(id)a4 reason:(unsigned __int8)a5
{
  uint64_t v5;
  id v8;
  id v9;
  NSObject *v10;
  char *v11;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  double v45;
  double v46;
  NSObject *v47;
  NSObject *v48;
  const char *v49;
  double v50;
  const char *v51;
  uint64_t v52;
  double v53;
  NSObject *v54;
  char *v55;
  char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  char v57;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *unallocbindRequestToReason;
  const char *v60;
  uint64_t v61;
  void *v62;
  double v63;
  NSMutableDictionary *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  double v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  double v79;
  const char *v80;
  uint64_t v81;
  double v82;
  NSObject *v83;
  id v84;
  char *v85;
  id v86;
  char *v87;
  id v88;
  _QWORD v89[5];
  id v90;
  id v91;
  char v92;
  _QWORD v93[5];
  id v94;
  id v95;
  char v96;
  uint8_t buf[4];
  char *v98;
  __int16 v99;
  char *v100;
  __int16 v101;
  id v102;
  uint64_t v103;

  v5 = a5;
  v103 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  if (self->_state >= 6)
  {
    OSLogHandleForTransportCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      v98 = v11;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "skip unallocbind request, GL state (%s).", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip unallocbind request, GL state (%s)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip unallocbind request, GL state (%s)."));
      }
    }
    goto LABEL_34;
  }
  if (v8)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (v13 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v8)) == 0)
    {
      OSLogHandleForTransportCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "send unallocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send unallocbind request failed due to invalid candidate pair."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send unallocbind request failed due to invalid candidate pair."));
        }
      }
      v17 = 0;
      goto LABEL_27;
    }
    v17 = v13;
    if ((objc_msgSend_isRelayStunCandidatePair(v13, v14, v15, v16) & 1) == 0)
    {
      OSLogHandleForTransportCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v98 = (char *)v8;
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, not over relay.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip unallocbind request for %@, not over relay."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip unallocbind request for %@, not over relay."));
        }
      }
      goto LABEL_27;
    }
    v21 = objc_msgSend_state(v17, v18, v19, v20);
    v25 = v21;
    if (v21 <= 6 && ((1 << v21) & 0x47) != 0)
    {
      OSLogHandleForTransportCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = (&_IDSStunCandidatePairStateStrings)[v25];
        *(_DWORD *)buf = 138412546;
        v98 = (char *)v8;
        v99 = 2080;
        v100 = v27;
        _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip unallocbind request for %@, state [%s]."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip unallocbind request for %@, state [%s]."));
        }
      }
      goto LABEL_27;
    }
    objc_msgSend_sessionID(v17, v22, v23, v24);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v33)
    {
      OSLogHandleForTransportCategory();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid relay-session-id.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to send unallocbind request due to invalid relay-session-id."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to send unallocbind request due to invalid relay-session-id."));
        }
      }
      goto LABEL_91;
    }
    objc_msgSend_stopSessionConnectedTimer(v17, v31, v32, v34);
    objc_msgSend_stopSessionConvergenceTimer(v17, v35, v36, v37);
    objc_msgSend_stopSessionGoAwayTimer(v17, v38, v39, v40);
    if (v9)
    {
      v41 = ids_monotonic_time();
      objc_msgSend_startTime(v9, v42, v43, v41);
      v46 = v41 - v45;
      if (v46 > 3.0)
      {
        objc_msgSend__sendUnallocbindRequestTimeOut_stunMessage_reason_(self, v44, (uint64_t)v8, v46, v9, v5);
LABEL_91:

LABEL_27:
        goto LABEL_34;
      }
    }
    else
    {
      StunUtilCreateMessage(3810, 0, v17, 0);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      if (!v9)
      {
        OSLogHandleForTransportCategory();
        v83 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v83, OS_LOG_TYPE_DEFAULT, "failed to create unallocbind message.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to create unallocbind message."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to create unallocbind message."));
          }
        }
        v9 = 0;
        goto LABEL_91;
      }
    }
    OSLogHandleForTransportCategory();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v98 = (char *)v9;
      v99 = 2112;
      v100 = (char *)v8;
      _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "send unallocbind request %@ for %@.", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v84 = v9;
        v86 = v8;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send unallocbind request %@ for %@."));
        if (_IDSShouldLog())
        {
          v84 = v9;
          v86 = v8;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send unallocbind request %@ for %@."));
        }
      }
    }
    v52 = objc_msgSend__sendStunMessage_candidatePair_(self, v49, (uint64_t)v9, v50, v17, v84, v86);
    if (v25 != 5)
    {
      objc_msgSend_setState_(v17, v51, 5, v53);
      OSLogHandleForTransportCategory();
      v54 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        v55 = (&_IDSStunCandidatePairStateStrings)[v25];
        *(_DWORD *)buf = 136315650;
        v98 = v55;
        v99 = 2080;
        v100 = off_1EE40A680;
        v101 = 2112;
        v102 = v8;
        _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v87 = off_1EE40A680;
          v88 = v8;
          v85 = (&_IDSStunCandidatePairStateStrings)[v25];
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
          if (_IDSShouldLog())
          {
            v87 = off_1EE40A680;
            v88 = v8;
            v85 = (&_IDSStunCandidatePairStateStrings)[v25];
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
          }
        }
      }
    }
    if (v52 == -1
      && ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v51, 3, v53, 4, 0, 0), self->_state != 5)? (v57 = 1): (v57 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc), (v57 & 1) == 0))
    {
      objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v51, 24, v53, v5);
    }
    else
    {
      if (!self->_unallocbindRequestToReason)
      {
        Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        unallocbindRequestToReason = self->_unallocbindRequestToReason;
        self->_unallocbindRequestToReason = Mutable;

      }
      objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v51, v5, v53, v85, v87, v88);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      if (v62)
      {
        v64 = self->_unallocbindRequestToReason;
        objc_msgSend_requestID(v9, v60, v61, v63);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        CFDictionarySetValue((CFMutableDictionaryRef)v64, v65, v62);

      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1784(v9, v66, v67, v68);
      }

      objc_msgSend_local(v17, v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = objc_msgSend_transport(v72, v73, v74, v75);

      if ((unint64_t)(v76 - 1) > 1)
      {
        if ((unint64_t)(v76 - 3) <= 1)
        {
          v89[0] = MEMORY[0x1E0C809B0];
          v89[1] = 3221225472;
          v89[2] = sub_19B9D7DC4;
          v89[3] = &unk_1E3C1FFA0;
          v89[4] = self;
          v90 = v8;
          v9 = v9;
          v91 = v9;
          v92 = v5;
          IDSTransportThreadAddBlockAfter(v89, 3.0);

        }
      }
      else if ((_DWORD)v5 != 5
             || (objc_msgSend_testOptions(v17, v77, v78, v79) & 8) == 0
             || objc_msgSend_testRequestedErrorCode(v17, v80, v81, v82) != 601)
      {
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 3221225472;
        v93[2] = sub_19B9D7DB0;
        v93[3] = &unk_1E3C1FFA0;
        v93[4] = self;
        v94 = v8;
        v9 = v9;
        v95 = v9;
        v96 = v5;
        IDSTransportThreadAddBlockAfter(v93, 0.5);

      }
    }
    goto LABEL_91;
  }
  OSLogHandleForTransportCategory();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to send unallocbind request due to invalid token."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to send unallocbind request due to invalid token."));
    }
  }
LABEL_34:

}

- (int)_getExpensiveLinkFlags:(BOOL)a3 candidatePair:(id)a4
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  int isCellularStunCandidate;
  NSObject *v15;
  int isInterfaceExpensiveWithInterfaceIndex;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  double v23;
  uint8_t buf[4];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  v9 = v5;
  if (self->_islocalCellAttributeInexpensive
    && (objc_msgSend_local(v5, v6, v7, v8),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v10, v11, v12, v13),
        v10,
        isCellularStunCandidate))
  {
    OSLogHandleForTransportCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v26 = 0;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "defaults write: clear IDSFixedLinkAttributesFlagIsExpensive, linkFlags: %u", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("defaults write: clear IDSFixedLinkAttributesFlagIsExpensive, linkFlags: %u"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("defaults write: clear IDSFixedLinkAttributesFlagIsExpensive, linkFlags: %u"));
      }
    }
    isInterfaceExpensiveWithInterfaceIndex = 0;
  }
  else
  {
    objc_msgSend_local(v9, v6, v7, v8);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_index(v17, v18, v19, v20);
    isInterfaceExpensiveWithInterfaceIndex = objc_msgSend__isInterfaceExpensiveWithInterfaceIndex_(self, v22, v21, v23);

  }
  return isInterfaceExpensiveWithInterfaceIndex;
}

- (id)_createCommandData:(int64_t)a3 options:(id)a4 candidatePair:(id)a5
{
  const char *v8;
  uint64_t v9;
  double v10;
  int v11;
  BOOL v12;
  BOOL v13;
  __CFDictionary *Mutable;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  const char *v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  unsigned __int16 v26;
  uint64_t v27;
  NSData *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  unsigned __int16 v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  unsigned __int16 v41;
  const char *v42;
  uint64_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  double v47;
  unsigned __int16 v48;
  const char *v49;
  uint64_t v50;
  double v51;
  NSData *v52;
  __CFDictionary *v53;
  void *v54;
  const char *v55;
  double v56;
  void *v57;
  id v58;
  const char *v59;
  double v60;
  void *v61;
  void *v62;
  __CFArray *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  double v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t i;
  NSData *v75;
  unsigned __int16 ExpensiveLinkFlags_candidatePair;
  const char *v77;
  uint64_t v78;
  double v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  const char *v85;
  double v86;
  int isInterfaceConstrainedWithInterfaceIndex;
  const char *v88;
  uint64_t v89;
  double v90;
  unsigned __int16 v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  const char *v97;
  double v98;
  int isInterfaceDelegatedWithInterfaceIndex;
  const char *v100;
  uint64_t v101;
  double v102;
  unsigned __int16 v103;
  void *v104;
  const char *v105;
  double v106;
  BOOL v107;
  NSObject *v108;
  const char *v109;
  uint64_t v110;
  double v111;
  void *v112;
  const char *v113;
  double v114;
  void *v115;
  NSObject *v116;
  const char *v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  double v135;
  const char *v136;
  double v137;
  void *v138;
  __CFDictionary *v139;
  double v140;
  BOOL v141;
  const char *v142;
  void *v143;
  const char *v144;
  double v145;
  const char *v146;
  uint64_t v147;
  double v148;
  int v149;
  const char *v150;
  uint64_t v151;
  double v152;
  int isActive;
  int v154;
  double v155;
  unint64_t v156;
  const char *v157;
  double v158;
  void *v159;
  const char *v160;
  double v161;
  void *v162;
  const char *v163;
  uint64_t v164;
  double v165;
  void *v166;
  const char *v167;
  double v168;
  _BOOL4 v169;
  const char *v170;
  uint64_t v171;
  double v172;
  void *v173;
  const char *v174;
  double v175;
  const char *v176;
  double v177;
  void *v178;
  const char *v179;
  double v180;
  NSObject *v181;
  void *v182;
  const __CFDictionary *linkIDToRequestTimeStampAndRTT;
  const char *v184;
  uint64_t v185;
  id v186;
  double v187;
  const char *v188;
  double v189;
  void *v190;
  const char *v191;
  double v192;
  CFMutableDictionaryRef v193;
  NSMutableDictionary *v194;
  NSObject *v195;
  NSData *skeData;
  NSData *v197;
  id v198;
  const char *v199;
  double v200;
  void *v201;
  NSObject *v202;
  id v203;
  const char *v204;
  double v205;
  const char *v206;
  double v207;
  void *v208;
  NSObject *v209;
  id v210;
  BOOL v211;
  NSObject *v212;
  NSData *v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  const char *v219;
  double v220;
  NSObject *v221;
  void *v222;
  NSObject *v223;
  id v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  double v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  double v232;
  uint64_t v233;
  const char *v234;
  double v235;
  void *v236;
  NSObject *v237;
  id v238;
  void *v239;
  const char *v240;
  uint64_t v241;
  double v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  double v246;
  uint64_t v247;
  const char *v248;
  double v249;
  void *v250;
  NSObject *v251;
  id v252;
  const char *v253;
  double v254;
  void *v255;
  NSObject *v256;
  id v257;
  const char *v258;
  uint64_t v259;
  double v260;
  void *v261;
  const char *v262;
  uint64_t v263;
  double v264;
  uint64_t v265;
  const char *v266;
  double v267;
  void *v268;
  id v269;
  NSObject *v270;
  id v271;
  const char *v272;
  double v273;
  unsigned __int16 v274;
  const char *v275;
  uint64_t v276;
  double v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  double v281;
  uint64_t v282;
  const char *v283;
  double v284;
  int v285;
  const char *v286;
  uint64_t v287;
  double v288;
  unsigned __int16 v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  double v293;
  uint64_t v294;
  const char *v295;
  double v296;
  int v297;
  void *v298;
  const char *v299;
  double v300;
  const char *v301;
  double v302;
  void *v303;
  NSObject *v304;
  id v305;
  const char *v306;
  uint64_t v307;
  double v308;
  void *v309;
  const char *v310;
  uint64_t v311;
  double v312;
  uint64_t v313;
  const char *v314;
  double v315;
  void *v316;
  NSObject *v317;
  id v318;
  const char *v319;
  uint64_t v320;
  double v321;
  void *v322;
  const char *v323;
  double v324;
  const char *v325;
  double v326;
  const char *v327;
  uint64_t v328;
  double v329;
  void *v330;
  const char *v331;
  __CFString *v332;
  double v333;
  const char *v334;
  double v335;
  void *v336;
  NSObject *v337;
  NSObject *v338;
  id v339;
  void *v340;
  const char *v341;
  double v342;
  const char *v343;
  double v344;
  void *v345;
  NSObject *v346;
  id v347;
  NSData *v348;
  NSObject *v349;
  id v350;
  const char *v351;
  double v352;
  void *v353;
  const char *v354;
  double v355;
  const char *v356;
  double v357;
  NSData *v359;
  uint64_t v360;
  void *v361;
  id v362;
  int64_t v363;
  id v364;
  IDSGlobalLink *v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  int v370;
  _BYTE buf[32];
  _BYTE v372[128];
  _BYTE __b[1024];
  uint64_t v374;

  v374 = *MEMORY[0x1E0C80C00];
  v362 = a4;
  v364 = a5;
  memset(__b, 170, sizeof(__b));
  v370 = 0;
  v363 = a3;
  if (a3 == 1 && self->_remoteGlobalLinkVersion > 0)
    goto LABEL_16;
  if (self->_remoteGlobalLinkVersion)
  {
    v11 = 0;
    if (a3 != 1 || !self->_isInitiator)
      goto LABEL_17;
    goto LABEL_16;
  }
  v12 = self->_isInitiator && a3 == 1;
  v13 = !self->_isInitiator && a3 == 32769;
  if (v13 || v12)
  {
LABEL_16:
    v11 = 1;
    goto LABEL_17;
  }
  v11 = 0;
LABEL_17:
  v365 = self;
  switch(a3)
  {
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_35;
    case 3:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v15 = (void *)MEMORY[0x1E0CB37E8];
      v19 = objc_msgSend_hbCounter(v364, v16, v17, v18);
      objc_msgSend_numberWithUnsignedShort_(v15, v20, v19, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-counter"), v22);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1E14();
      }

      objc_msgSend_objectForKey_(v362, v144, (uint64_t)CFSTR("gl-attr-active-probing-link-id"), v145);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v149 = objc_msgSend_charValue(v62, v146, v147, v148);
      isActive = objc_msgSend_isActive(v364, v150, v151, v152);
      if (v149 > 0)
        v154 = 1;
      else
        v154 = isActive;
      if (v154 == 1)
      {
        *(_QWORD *)&buf[4] = 0;
        v155 = ids_monotonic_time();
        v156 = ntpTime32(v155);
        *(_DWORD *)buf = bswap32(v156);
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v157, (uint64_t)buf, v158, 12);
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        if (v159)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-rttreport"), v159);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF1F14();
        }

        if (v149 > 0)
        {
          if (!v62
            || (linkIDToRequestTimeStampAndRTT = (const __CFDictionary *)v365->_linkIDToRequestTimeStampAndRTT) == 0
            || (v186 = (id)CFDictionaryGetValue(linkIDToRequestTimeStampAndRTT, v62)) == 0)
          {
            v186 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          }
          if (objc_msgSend_count(v186, v184, v185, v187) == 250)
            objc_msgSend_removeObjectAtIndex_(v186, v188, 0, v189);
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v188, v156, v189);
          v190 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v186, v191, (uint64_t)v190, v192);

          if (!v365->_linkIDToRequestTimeStampAndRTT)
          {
            v193 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v194 = v365->_linkIDToRequestTimeStampAndRTT;
            v365->_linkIDToRequestTimeStampAndRTT = (NSMutableDictionary *)v193;

          }
          if (v186)
            CFDictionarySetValue((CFMutableDictionaryRef)v365->_linkIDToRequestTimeStampAndRTT, v62, v186);

        }
      }
      goto LABEL_257;
    case 4:
      objc_msgSend_sharedInstance(IDSStunConnectionDataController, v8, v9, v10);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataFromCandidates_token_remoteDeviceVersion_(v54, v55, (uint64_t)self->_localCandidateList, v56, self->_cbuuid, self->_remoteDeviceVersion);
      v57 = (void *)objc_claimAutoreleasedReturnValue();

      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v58 = v57;
      if (v58)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-conndata"), v58);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1E94();
      }
      v62 = v58;

      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v160, self->_localConnDataCounter, v161);
      v162 = (void *)objc_claimAutoreleasedReturnValue();
      if (v162)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-counter"), v162);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1E14();
      }

      objc_msgSend_sharedInstance(IDSStunConnectionDataController, v163, v164, v165);
      v166 = (void *)objc_claimAutoreleasedReturnValue();
      v169 = objc_msgSend_deliveryStatus_(v166, v167, (uint64_t)self->_cbuuid, v168) == 0;

      if (v169)
      {
        objc_msgSend_sharedInstance(IDSStunConnectionDataController, v170, v171, v172);
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setDeliveryStatus_status_(v173, v174, (uint64_t)self->_cbuuid, v175, 1);

      }
      goto LABEL_257;
    case 5:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v59, self->_nominateCount, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      v62 = v61;
      if (v61)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-counter"), v61);
        goto LABEL_257;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_257;
      sub_19BAF1E14();
      goto LABEL_165;
    case 6:
      v63 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v366 = 0u;
      v367 = 0u;
      v368 = 0u;
      v369 = 0u;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v64, v65, 0.0);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v66, v67, (uint64_t)&v366, v68, v372, 16);
      if (v71)
      {
        v72 = *(_QWORD *)v367;
        v73 = 138412290;
        do
        {
          for (i = 0; i != v71; ++i)
          {
            if (*(_QWORD *)v367 != v72)
              objc_enumerationMutation(v66);
            v75 = *(NSData **)(*((_QWORD *)&v366 + 1) + 8 * i);
            if (objc_msgSend_isSharedQRSession(v75, v69, v70, *(double *)&v73, v359)
              && objc_msgSend_state(v75, v69, v70, *(double *)&v73) == 4)
            {
              ExpensiveLinkFlags_candidatePair = objc_msgSend__getExpensiveLinkFlags_candidatePair_(v365, v69, v365->_islocalCellAttributeInexpensive, *(double *)&v73, v75);
              objc_msgSend_local(v75, v77, v78, v79);
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              v84 = objc_msgSend_index(v80, v81, v82, v83);
              isInterfaceConstrainedWithInterfaceIndex = objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(v365, v85, v84, v86);

              if (isInterfaceConstrainedWithInterfaceIndex)
                v91 = ExpensiveLinkFlags_candidatePair | 2;
              else
                v91 = ExpensiveLinkFlags_candidatePair;
              objc_msgSend_local(v75, v88, v89, v90);
              v92 = (void *)objc_claimAutoreleasedReturnValue();
              v96 = objc_msgSend_index(v92, v93, v94, v95);
              isInterfaceDelegatedWithInterfaceIndex = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(v365, v97, v96, v98);

              if (isInterfaceDelegatedWithInterfaceIndex)
                v103 = v91 | 4;
              else
                v103 = v91;
              objc_msgSend_local(v75, v100, v101, v102);
              v104 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setLinkFlags_(v104, v105, v103, v106);

              v107 = v63 == 0;
              if (!v75)
                v107 = 1;
              if (!v107)
                CFArrayAppendValue(v63, v75);
              OSLogHandleForTransportCategory();
              v108 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v75;
                _os_log_impl(&dword_19B949000, v108, OS_LOG_TYPE_DEFAULT, "succeededCandidatePair: %@", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v359 = v75;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("succeededCandidatePair: %@"));
                  if (_IDSShouldLog())
                  {
                    v359 = v75;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("succeededCandidatePair: %@"));
                  }
                }
              }
            }
          }
          v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v66, v69, (uint64_t)&v366, *(double *)&v73, v372, 16);
        }
        while (v71);
      }

      objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v109, v110, v111);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_createRelayInterfaceInfoFromCandidatePairs_token_(v112, v113, (uint64_t)v63, v114, v365->_cbuuid);
      v115 = (void *)objc_claimAutoreleasedReturnValue();

      OSLogHandleForTransportCategory();
      v116 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        v120 = objc_msgSend_count(v63, v117, v118, v119);
        v124 = objc_msgSend_length(v115, v121, v122, v123);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v120;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v124;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v362;
        _os_log_impl(&dword_19B949000, v116, OS_LOG_TYPE_DEFAULT, "candidatePair count: %lu, interfaceInfoRequest length: %lu options: %@", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v128 = objc_msgSend_count(v63, v125, v126, v127);
          v360 = objc_msgSend_length(v115, v129, v130, v131);
          v361 = v362;
          v359 = (NSData *)v128;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("candidatePair count: %lu, interfaceInfoRequest length: %lu options: %@"));
          if (_IDSShouldLog())
          {
            v132 = objc_msgSend_count(v63, v125, v126, v127, v128, v360, v362);
            v360 = objc_msgSend_length(v115, v133, v134, v135);
            v361 = v362;
            v359 = (NSData *)v132;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("candidatePair count: %lu, interfaceInfoRequest length: %lu options: %@"));
          }
        }
      }
      Mutable = (__CFDictionary *)objc_msgSend_mutableCopy(v362, v125, v126, v127, v359, v360, v361);
      if (!Mutable)
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v136, 1, v137);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      if (v138)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-capability"), v138);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1B14();
      }

      if (v365->_shouldReportAcceptDelay && !v365->_isInitiator)
      {
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v176, v365->_acceptDelayU32, v177);
        v178 = (void *)objc_claimAutoreleasedReturnValue();
        if (v178)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-acceptdelay"), v178);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF1D14();
        }

      }
      v198 = v115;
      if (v198)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-relay-link-interface-info"), v198);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1F94();
      }

      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v199, v365->_localRelayInterfaceCounter, v200);
      v201 = (void *)objc_claimAutoreleasedReturnValue();
      if (v201)
      {
        CFDictionarySetValue(Mutable, CFSTR("gl-attr-counter"), v201);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF1E14();
      }

      v62 = v63;
      goto LABEL_257;
    default:
      if (a3 == 32774)
      {
        v139 = (__CFDictionary *)objc_msgSend_mutableCopy(v362, v8, v9, v10);
        Mutable = v139;
        if (CFSTR("gl-attr-remote-relay-link-id"))
          v141 = v139 == 0;
        else
          v141 = 1;
        if (!v141)
          CFDictionaryRemoveValue(v139, CFSTR("gl-attr-remote-relay-link-id"));
        v142 = CFSTR("gl-attr-active-probing-link-id");
        if (CFSTR("gl-attr-active-probing-link-id") && Mutable)
          CFDictionaryRemoveValue(Mutable, CFSTR("gl-attr-active-probing-link-id"));
        objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v142, 1, v140);
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        if (v143)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-capability"), v143);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF1B14();
        }

        if (!self->_shouldReportAcceptDelay || self->_isInitiator)
          goto LABEL_258;
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v179, self->_acceptDelayU32, v180);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = v61;
        if (v61)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-acceptdelay"), v61);
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
LABEL_257:

            self = v365;
            goto LABEL_258;
          }
          sub_19BAF1D14();
        }
LABEL_165:
        v62 = v61;
        goto LABEL_257;
      }
      if (a3 != 32769)
      {
LABEL_35:
        if ((unint64_t)(a3 - 32771) > 2)
        {
LABEL_259:
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          self = v365;
          goto LABEL_260;
        }
        v53 = (__CFDictionary *)objc_msgSend_mutableCopy(v362, v8, v9, v10);
        Mutable = v53;
        if (CFSTR("gl-attr-remote-relay-link-id") && v53)
          CFDictionaryRemoveValue(v53, CFSTR("gl-attr-remote-relay-link-id"));
        if (CFSTR("gl-attr-active-probing-link-id") && Mutable)
        {
          CFDictionaryRemoveValue(Mutable, CFSTR("gl-attr-active-probing-link-id"));
          goto LABEL_260;
        }
LABEL_258:
        if (!Mutable)
          goto LABEL_259;
LABEL_260:
        v348 = self->_controlMessageKey;
        if (v348)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-hmac"), v348);
        }
        else
        {
          v349 = MEMORY[0x1E0C81028];
          v350 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v349, OS_LOG_TYPE_ERROR))
            sub_19BAF1818();

        }
        objc_msgSend_messageWithCommand_attributes_(IDSGlobalLinkMessage, v351, v363, v352, Mutable);
        v353 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_write_outputLength_(v353, v354, (uint64_t)__b, v355, &v370);
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v356, (uint64_t)__b, v357, v370);
        v182 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_266;
      }
LABEL_22:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v11)
      {
LABEL_185:
        objc_msgSend_local(v364, v23, v24, v25, v359, v360, v361);
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        v218 = objc_msgSend_radioAccessTechnology(v214, v215, v216, v217);

        if (v365->_remoteDeviceVersion <= 2 && (_DWORD)v218 == 9)
        {
          OSLogHandleForTransportCategory();
          v221 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v221, OS_LOG_TYPE_DEFAULT, "RATType Wired -> NonCell due to remote version", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("RATType Wired -> NonCell due to remote version"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("RATType Wired -> NonCell due to remote version"));
            }
          }
          v218 = 0;
        }
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v219, v218, v220);
        v222 = (void *)objc_claimAutoreleasedReturnValue();
        if (v222)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-rat"), v222);
        }
        else
        {
          v223 = MEMORY[0x1E0C81028];
          v224 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
            sub_19BAF1C94();

        }
        v225 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend_local(v364, v226, v227, v228);
        v229 = (void *)objc_claimAutoreleasedReturnValue();
        v233 = objc_msgSend_transport(v229, v230, v231, v232);
        objc_msgSend_numberWithInteger_(v225, v234, v233, v235);
        v236 = (void *)objc_claimAutoreleasedReturnValue();

        if (v236)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-transport"), v236);
        }
        else
        {
          v237 = MEMORY[0x1E0C81028];
          v238 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
            sub_19BAF1C14();

        }
        v239 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend_local(v364, v240, v241, v242);
        v243 = (void *)objc_claimAutoreleasedReturnValue();
        v247 = objc_msgSend_mtu(v243, v244, v245, v246);
        objc_msgSend_numberWithUnsignedInt_(v239, v248, v247, v249);
        v250 = (void *)objc_claimAutoreleasedReturnValue();

        if (v250)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-mtu"), v250);
        }
        else
        {
          v251 = MEMORY[0x1E0C81028];
          v252 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
            sub_19BAF1B94();

        }
        objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v253, 1, v254);
        v255 = (void *)objc_claimAutoreleasedReturnValue();
        if (v255)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-capability"), v255);
        }
        else
        {
          v256 = MEMORY[0x1E0C81028];
          v257 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
            sub_19BAF1B14();

        }
        objc_msgSend_local(v364, v258, v259, v260);
        v261 = (void *)objc_claimAutoreleasedReturnValue();
        v265 = objc_msgSend_address(v261, v262, v263, v264);
        objc_msgSend_wrapperWithSockAddr_(IDSSockAddrWrapper, v266, v265, v267);
        v268 = (void *)objc_claimAutoreleasedReturnValue();

        v269 = v268;
        if (v269)
        {
          v62 = v269;
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-relayremoteaddress"), v269);
        }
        else
        {
          v62 = 0;
          v270 = MEMORY[0x1E0C81028];
          v271 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
            sub_19BAF1A94();

        }
        v274 = objc_msgSend__getExpensiveLinkFlags_candidatePair_(v365, v272, v365->_islocalCellAttributeInexpensive, v273, v364);
        objc_msgSend_local(v364, v275, v276, v277);
        v278 = (void *)objc_claimAutoreleasedReturnValue();
        v282 = objc_msgSend_index(v278, v279, v280, v281);
        v285 = objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(v365, v283, v282, v284);

        if (v285)
          v289 = v274 | 2;
        else
          v289 = v274;
        if (v365->_remoteDeviceVersion >= 2)
        {
          objc_msgSend_local(v364, v286, v287, v288);
          v290 = (void *)objc_claimAutoreleasedReturnValue();
          v294 = objc_msgSend_index(v290, v291, v292, v293);
          v297 = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(v365, v295, v294, v296);

          if (v297)
            v289 |= 4u;
        }
        objc_msgSend_local(v364, v286, v287, v288);
        v298 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setLinkFlags_(v298, v299, v289, v300);

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v301, v289, v302);
        v303 = (void *)objc_claimAutoreleasedReturnValue();
        if (v303)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-link-flags"), v303);
        }
        else
        {
          v304 = MEMORY[0x1E0C81028];
          v305 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
            sub_19BAF1A14();

        }
        objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v306, v307, v308);
        v309 = (void *)objc_claimAutoreleasedReturnValue();
        v313 = objc_msgSend_dataSoMaskBits(v309, v310, v311, v312);

        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v314, v313, v315);
        v316 = (void *)objc_claimAutoreleasedReturnValue();
        if (v316)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-data-so-mask"), v316);
        }
        else
        {
          v317 = MEMORY[0x1E0C81028];
          v318 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v317, OS_LOG_TYPE_ERROR))
            sub_19BAF1994();

        }
        objc_msgSend_local(v364, v319, v320, v321);
        v322 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setDataSoMask_(v322, v323, v313, v324);

        if (objc_msgSend_isEqualToString_(v365->_cbuuid, v325, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v326))
        {
          objc_msgSend_defaultRemoteDeviceCBUUID(v364, v327, v328, v329);
          v330 = (void *)objc_claimAutoreleasedReturnValue();
          v332 = CFSTR("gl-attr-remote-cbuuid");
          if (v330)
          {
            memset(buf, 170, 16);
            objc_msgSend_getUUIDBytes_(v330, v331, (uint64_t)buf, v333);
            objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v334, (uint64_t)buf, v335, 16);
            v336 = (void *)objc_claimAutoreleasedReturnValue();
            if (v336)
            {
              CFDictionarySetValue(Mutable, v332, v336);
            }
            else
            {
              v338 = MEMORY[0x1E0C81028];
              v339 = MEMORY[0x1E0C81028];
              if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
                sub_19BAF1918();

            }
          }
          else
          {
            OSLogHandleForTransportCategory();
            v337 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v337, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19B949000, v337, OS_LOG_TYPE_DEFAULT, "watch cbuuid is missing.", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("watch cbuuid is missing."));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("watch cbuuid is missing."));
              }
            }
          }

        }
        if (v363 == 1)
        {
          memset(buf, 170, 16);
          objc_msgSend_linkUUID(v364, v327, v328, v329);
          v340 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_getUUIDBytes_(v340, v341, (uint64_t)buf, v342);

          objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v343, (uint64_t)buf, v344, 16);
          v345 = (void *)objc_claimAutoreleasedReturnValue();
          if (v345)
          {
            CFDictionarySetValue(Mutable, CFSTR("gl-attr-linkuuid"), v345);
          }
          else
          {
            v346 = MEMORY[0x1E0C81028];
            v347 = MEMORY[0x1E0C81028];
            if (os_log_type_enabled(v346, OS_LOG_TYPE_ERROR))
              sub_19BAF1898();

          }
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-version"), &unk_1E3C86940);
        }
        goto LABEL_257;
      }
      v26 = objc_msgSend_length(self->_skeData, v23, v24, v25);
      v27 = v26;
      if (!v26 || self->_skeToRemoteComplete)
      {
        if (!self->_isInitiator)
        {
          objc_msgSend_skeData(v364, v23, v24, v25);
          v28 = (NSData *)objc_claimAutoreleasedReturnValue();
          if (v28)
          {
            OSLogHandleForTransportCategory();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              v33 = objc_msgSend_length(v28, v30, v31, v32);
              objc_msgSend_candidatePairToken(v364, v34, v35, v36);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v28;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v33;
              *(_WORD *)&buf[18] = 2112;
              *(_QWORD *)&buf[20] = v37;
              _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "piggyback SKE data %p (%uB) for realloc pair %@.", buf, 0x1Cu);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v41 = objc_msgSend_length(v28, v38, v39, v40);
                objc_msgSend_candidatePairToken(v364, v42, v43, v44);
                v360 = v41;
                v361 = (void *)objc_claimAutoreleasedReturnValue();
                v359 = v28;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("piggyback SKE data %p (%uB) for realloc pair %@."));

                if (_IDSShouldLog())
                {
                  v48 = objc_msgSend_length(v28, v45, v46, v47, v28, v41, v361);
                  objc_msgSend_candidatePairToken(v364, v49, v50, v51);
                  v360 = v48;
                  v361 = (void *)objc_claimAutoreleasedReturnValue();
                  v359 = v28;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("piggyback SKE data %p (%uB) for realloc pair %@."));

                }
              }
            }
            v52 = v28;
            CFDictionarySetValue(Mutable, CFSTR("gl-attr-skedata"), v52);

          }
        }
        goto LABEL_185;
      }
      if (v26 < 0x101u)
      {
        OSLogHandleForTransportCategory();
        v195 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
        {
          skeData = self->_skeData;
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = skeData;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          _os_log_impl(&dword_19B949000, v195, OS_LOG_TYPE_DEFAULT, "piggyback SKE data %p (%uB), send session connected.", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v359 = self->_skeData;
            v360 = v27;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("piggyback SKE data %p (%uB), send session connected."));
            if (_IDSShouldLog())
            {
              v359 = self->_skeData;
              v360 = v27;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("piggyback SKE data %p (%uB), send session connected."));
            }
          }
        }
        v197 = self->_skeData;
        if (v197)
        {
          CFDictionarySetValue(Mutable, CFSTR("gl-attr-skedata"), v197);
        }
        else
        {
          v202 = MEMORY[0x1E0C81028];
          v203 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
            sub_19BAF1D94();

        }
        objc_msgSend_setSentSKEData_(v364, v204, 1, v205);
        self->_delaySessionConnected = 0;
        if (!self->_isInitiator)
        {
          objc_msgSend_setSkeData_(v364, v23, (uint64_t)self->_skeData, v25);
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v206, self->_acceptDelayU32, v207);
          v208 = (void *)objc_claimAutoreleasedReturnValue();
          if (v208)
          {
            CFDictionarySetValue(Mutable, CFSTR("gl-attr-acceptdelay"), v208);
          }
          else
          {
            v209 = MEMORY[0x1E0C81028];
            v210 = MEMORY[0x1E0C81028];
            if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
              sub_19BAF1D14();

          }
          v211 = v363 != 32769;
          if (self->_remoteGlobalLinkVersion)
            v211 = 1;
          if (!v211)
          {
            OSLogHandleForTransportCategory();
            v212 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT))
            {
              v213 = self->_skeData;
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v213;
              _os_log_impl(&dword_19B949000, v212, OS_LOG_TYPE_DEFAULT, "SKE is complete for Receiver, remove SKE data %p.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v359 = self->_skeData;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SKE is complete for Receiver, remove SKE data %p."));
                if (_IDSShouldLog())
                {
                  v359 = self->_skeData;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SKE is complete for Receiver, remove SKE data %p."));
                }
              }
            }
            self->_skeToRemoteComplete = 1;
          }
        }
        goto LABEL_185;
      }
      OSLogHandleForTransportCategory();
      v181 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v27;
        _os_log_impl(&dword_19B949000, v181, OS_LOG_TYPE_DEFAULT, "SKE data is too long (%uB).", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SKE data is too long (%uB)."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SKE data is too long (%uB)."));
        }
      }
      v182 = 0;
LABEL_266:

      return v182;
  }
}

- (BOOL)_skipCommandMessage:(int64_t)a3 candidatePair:(id)a4 timeNow:(double)a5
{
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  double v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  double v27;
  unint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v13 = objc_msgSend_state(v7, v8, v9, v10);
  if (v13 > 2 || objc_msgSend_isNominated(v7, v11, v12, v14))
  {
    switch(a3)
    {
      case 1:
        LOBYTE(v15) = v13 != 3;
        goto LABEL_20;
      case 2:
        LOBYTE(v15) = v13 == 6;
        goto LABEL_20;
      case 3:
        if ((objc_msgSend_pendingRealloc(v7, v11, v12, v14) & 1) != 0)
          goto LABEL_19;
        LODWORD(v15) = objc_msgSend_hbStarted(v7, v16, v17, v18) ^ 1;
        goto LABEL_20;
      case 4:
        objc_msgSend_sharedInstance(IDSStunConnectionDataController, v11, v12, v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend_deliveryStatus_(v19, v20, (uint64_t)self->_cbuuid, v21);

        LOBYTE(v15) = v15 > 1;
        goto LABEL_20;
      case 5:
        if ((objc_msgSend_isActive(v7, v11, v12, v14) & 1) != 0
          || (objc_msgSend_isNominated(v7, v22, v23, v24) & 1) == 0)
        {
          break;
        }
        goto LABEL_19;
      case 6:
        objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v11, v12, v14);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend_relayInterfaceInfoDeliveryStatus_(v25, v26, (uint64_t)self->_cbuuid, v27);

        if (v28 < 3)
          goto LABEL_19;
        OSLogHandleForIDSCategory();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_candidatePairToken(v7, v30, v31, v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v40 = v33;
          _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "skip command 0006 for %@", buf, 0xCu);

        }
        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          objc_msgSend_candidatePairToken(v7, v34, v35, v36);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip command 0006 for %@"));

        }
        break;
      default:
LABEL_19:
        LOBYTE(v15) = 0;
        goto LABEL_20;
    }
  }
  LOBYTE(v15) = 1;
LABEL_20:

  return v15;
}

- (BOOL)_shouldSkipCommand:(int64_t)a3 withCandidatePair:(id)a4 connectionDataCounter:(int)a5 relayInterfaceCounter:(int)a6
{
  id v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  const char *v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  int localConnDataCounter;
  NSObject *v27;
  unsigned int localRelayInterfaceCounter;
  BOOL v29;
  NSObject *v30;
  uint8_t buf[4];
  _DWORD v33[7];

  *(_QWORD *)&v33[5] = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v14 = v10;
  if (a3 == 6)
  {
    objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v11, v12, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_relayInterfaceInfoDeliveryStatus_(v16, v17, (uint64_t)self->_cbuuid, v18);

    if ((unint64_t)(v19 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      OSLogHandleForTransportCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v33 = v14;
        _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "relay interface info is not in progress or waiting, no need to retransmit: %@, return YES", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("relay interface info is not in progress or waiting, no need to retransmit: %@, return YES"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("relay interface info is not in progress or waiting, no need to retransmit: %@, return YES"));
        }
      }
      goto LABEL_44;
    }
    if ((a6 & 0x80000000) == 0 && self->_localRelayInterfaceCounter > a6)
    {
      OSLogHandleForTransportCategory();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        localRelayInterfaceCounter = self->_localRelayInterfaceCounter;
        *(_DWORD *)buf = 67109376;
        v33[0] = a6;
        LOWORD(v33[1]) = 1024;
        *(_DWORD *)((char *)&v33[1] + 2) = localRelayInterfaceCounter;
        _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "relayInterfaceCounter increased, skip sending old version old %d current %d", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("relayInterfaceCounter increased, skip sending old version old %d current %d"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("relayInterfaceCounter increased, skip sending old version old %d current %d"));
        }
      }
      goto LABEL_44;
    }
  }
  else if (a3 == 4)
  {
    objc_msgSend_sharedInstance(IDSStunConnectionDataController, v11, v12, v13);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_deliveryStatus_(v21, v22, (uint64_t)self->_cbuuid, v23);

    if (v24 != 1)
    {
      OSLogHandleForTransportCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v33 = v14;
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "connection data is not in progress, no need to retransmit: %@, return YES", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("connection data is not in progress, no need to retransmit: %@, return YES"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("connection data is not in progress, no need to retransmit: %@, return YES"));
        }
      }
      goto LABEL_44;
    }
    if ((a5 & 0x80000000) == 0 && self->_localConnDataCounter > a5)
    {
      OSLogHandleForTransportCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        localConnDataCounter = self->_localConnDataCounter;
        *(_DWORD *)buf = 67109376;
        v33[0] = a5;
        LOWORD(v33[1]) = 1024;
        *(_DWORD *)((char *)&v33[1] + 2) = localConnDataCounter;
        _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, "connection data counter increased, skip sending old version old %d current %d", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("connection data counter increased, skip sending old version old %d current %d"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("connection data counter increased, skip sending old version old %d current %d"));
        }
      }
      goto LABEL_44;
    }
  }
  else if (a3 == 1
         && self->_enableSKE
         && self->_skeToRemoteComplete
         && objc_msgSend_recvConnectedAck(v10, v11, v12, v13))
  {
    OSLogHandleForTransportCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "already received remote SKE, return YES", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("already received remote SKE, return YES"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("already received remote SKE, return YES"));
      }
    }
LABEL_44:
    v29 = 1;
    goto LABEL_45;
  }
  v29 = 0;
LABEL_45:

  return v29;
}

- (void)_sendCommandMessage:(int64_t)a3 stunMessage:(id)a4 options:(id)a5 candidatePairToken:(id)a6
{
  id v10;
  id v11;
  const char *v12;
  double v13;
  NSObject *v14;
  char *v15;
  const void *v16;
  NSMutableDictionary *tokenToCandidatePairs;
  uint64_t v18;
  NSObject *v19;
  NSMutableDictionary *tokenToStunCheckPairs;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  const char *v60;
  double v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  double v67;
  _BOOL4 v68;
  NSObject *v69;
  char *v70;
  NSObject *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  NSObject *v77;
  id v78;
  NSObject *v79;
  char *v81;
  double v82;
  const char *v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  const char *v89;
  double v90;
  uint64_t v91;
  const char *v92;
  double v93;
  double v94;
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  double v98;
  const char *v99;
  double v100;
  NSObject *v101;
  const char *v102;
  uint64_t v103;
  double v104;
  char *v105;
  const char *v106;
  uint64_t v107;
  double v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  double v112;
  uint64_t v113;
  IDSStunMessage *v114;
  const char *v115;
  double v116;
  const char *v117;
  uint64_t v118;
  double v119;
  unsigned int v120;
  __CFDictionary *v121;
  const char *v122;
  double v123;
  void *v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  NSObject *v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  double v138;
  const char *v139;
  uint64_t v140;
  double v141;
  NSObject *v142;
  const char *v143;
  double v144;
  void *v145;
  const char *v146;
  double v147;
  const char *v148;
  uint64_t v149;
  NSObject *v150;
  _BOOL4 v151;
  const char *v152;
  uint64_t v153;
  double v154;
  unsigned __int16 v155;
  NSString *v156;
  const char *v157;
  uint64_t v158;
  double v159;
  void *v160;
  const char *v161;
  double v162;
  const char *v163;
  double v164;
  const __CFDictionary *linkIDToCandidatePairs;
  NSObject *v166;
  NSObject *v167;
  unsigned __int16 v168;
  NSString *idsSessionID;
  const char *v170;
  uint64_t v171;
  double v172;
  void *v173;
  NSObject *v174;
  const char *v175;
  double v176;
  const char *v177;
  uint64_t v178;
  double v179;
  void *v180;
  const char *v181;
  double v182;
  NSObject *v183;
  const char *v184;
  uint64_t v185;
  double v186;
  void *v187;
  const char *v188;
  double v189;
  const char *v190;
  double v191;
  const char *v192;
  uint64_t v193;
  double v194;
  id v195;
  int64_t v196;
  BOOL v197;
  double v198;
  double v199;
  void *v200;
  double v201;
  double v202;
  NSObject *v203;
  NSObject *v204;
  const char *v205;
  uint64_t v206;
  double v207;
  NSObject *v208;
  char *v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  int64_t v213;
  void *v214;
  id v215;
  IDSGlobalLink *v216;
  void *v217;
  _QWORD v218[5];
  id v219;
  id v220;
  id v221;
  int64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint8_t buf[4];
  _BYTE v228[10];
  _BYTE v229[36];
  _BYTE v230[128];
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v215 = a5;
  v11 = a6;
  v216 = self;
  v217 = v11;
  v213 = a3;
  v214 = v10;
  if (self->_state < 6)
  {
    v16 = v11;
    if (!v11
      || (tokenToCandidatePairs = self->_tokenToCandidatePairs) == 0
      || (v19 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v16),
          v16 = v217,
          !v19))
    {
      if (!v16
        || (tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
        || (v19 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v16), v16 = v217, !v19))
      {
        objc_msgSend__findVirtualCandidatePair_(self, v12, (uint64_t)v16, v13);
        v19 = objc_claimAutoreleasedReturnValue();
        v16 = v217;
        if (!v19)
        {
          OSLogHandleForTransportCategory();
          v71 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)v228 = v213;
            *(_WORD *)&v228[8] = 2112;
            *(_QWORD *)v229 = v217;
            _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "send command %04lx failed due to invalid candidate pair %@", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send command %04lx failed due to invalid candidate pair %@"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send command %04lx failed due to invalid candidate pair %@"));
            }
          }
          v19 = 0;
          goto LABEL_161;
        }
      }
    }
    if (objc_msgSend_isRelayStunCandidatePair(v19, v12, v18, v13))
    {
      objc_msgSend__sendChannelDataCommandMessage_packetBuffer_options_candidatePairToken_(self, v21, v213, v23, 0, v215, v16);
      goto LABEL_161;
    }
    v212 = objc_msgSend_state(v19, v21, v22, v23);
    objc_msgSend_local(v19, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_address(v27, v28, v29, v30);

    if (objc_msgSend_isRelayStunCandidatePair(v19, v32, v33, v34)
      && (unint64_t)(v212 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v35, v36, 0.0);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v223, v39, v230, 16);
      if (v42)
      {
        v44 = *(_QWORD *)v224;
        while (2)
        {
          for (i = 0; i != v42; ++i)
          {
            if (*(_QWORD *)v224 != v44)
              objc_enumerationMutation(v37);
            v46 = *(void **)(*((_QWORD *)&v223 + 1) + 8 * i);
            objc_msgSend_local(v46, v40, v41, v43);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = objc_msgSend_address(v47, v48, v49, v50);

            objc_msgSend_sessionID(v46, v52, v53, v54);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_sessionID(v19, v56, v57, v58);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend_isEqualToString_(v55, v60, (uint64_t)v59, v61)
              && (objc_msgSend_state(v46, v62, v63, v64) == 3 || objc_msgSend_state(v46, v65, v66, v67) == 4))
            {
              v68 = IsSameSA(v31, v51);

              if (v68)
              {
                v72 = v217;
                objc_msgSend_candidatePairToken(v46, v73, v74, v75);
                v76 = (void *)objc_claimAutoreleasedReturnValue();
                v77 = v46;

                v78 = v76;
                v217 = v78;
                OSLogHandleForTransportCategory();
                v79 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  v81 = (&_IDSStunCandidatePairStateStrings)[v212];
                  *(_DWORD *)buf = 138413058;
                  *(_QWORD *)v228 = v72;
                  *(_WORD *)&v228[8] = 2080;
                  *(_QWORD *)v229 = v81;
                  *(_WORD *)&v229[8] = 1024;
                  *(_DWORD *)&v229[10] = (unsigned __int16)v213;
                  *(_WORD *)&v229[14] = 2112;
                  *(_QWORD *)&v229[16] = v78;
                  _os_log_impl(&dword_19B949000, v79, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], send command %04x using %@.", buf, 0x26u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v210 = (unsigned __int16)v213;
                    v211 = v78;
                    v208 = v72;
                    v209 = (&_IDSStunCandidatePairStateStrings)[v212];
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%@ has state [%s], send command %04x using %@."));
                    if (_IDSShouldLog())
                    {
                      v210 = (unsigned __int16)v213;
                      v211 = v78;
                      v208 = v72;
                      v209 = (&_IDSStunCandidatePairStateStrings)[v212];
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%@ has state [%s], send command %04x using %@."));
                    }
                  }
                }

                v19 = v77;
                goto LABEL_52;
              }
            }
            else
            {

            }
          }
          v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v223, v43, v230, 16);
          if (v42)
            continue;
          break;
        }
      }

      OSLogHandleForTransportCategory();
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        v70 = (&_IDSStunCandidatePairStateStrings)[v212];
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)v228 = v217;
        *(_WORD *)&v228[8] = 2080;
        *(_QWORD *)v229 = v70;
        *(_WORD *)&v229[8] = 1024;
        *(_DWORD *)&v229[10] = (unsigned __int16)v213;
        _os_log_impl(&dword_19B949000, v69, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], Found no other connected candidate pair to send command %04x", buf, 0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%@ has state [%s], Found no other connected candidate pair to send command %04x"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%@ has state [%s], Found no other connected candidate pair to send command %04x"));
        }
      }
      goto LABEL_161;
    }
LABEL_52:
    v82 = ids_monotonic_time();
    objc_msgSend_objectForKey_(v215, v83, (uint64_t)CFSTR("gl-attr-active-probing-link-id"), v82);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = objc_msgSend_charValue(v84, v85, v86, v87);

    v91 = v213;
    if (!(_DWORD)v88)
    {
      if (objc_msgSend__skipCommandMessage_candidatePair_timeNow_(v216, v89, v213, v82, v19))
      {
        OSLogHandleForIDSCategory();
        v101 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        {
          v105 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(v19, v102, v103, v104)];
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v228 = v213;
          *(_WORD *)&v228[8] = 2112;
          *(_QWORD *)v229 = v217;
          *(_WORD *)&v229[8] = 2080;
          *(_QWORD *)&v229[10] = v105;
          _os_log_impl(&dword_19B949000, v101, OS_LOG_TYPE_DEBUG, "skip session command %04lx for %@, state [%s].", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          objc_msgSend_state(v19, v106, v107, v108);
          _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip session command %04lx for %@, state [%s]."));
        }
        goto LABEL_161;
      }
      v91 = v213;
      if (v213 == 3)
      {
        objc_msgSend_hbStartTime(v19, v89, 3, v90);
        if (v132 == 0.0)
        {
          OSLogHandleForTransportCategory();
          v133 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v228 = v19;
            _os_log_impl(&dword_19B949000, v133, OS_LOG_TYPE_DEFAULT, "session heartbeat request start now for %@", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v208 = v19;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session heartbeat request start now for %@"));
              if (_IDSShouldLog())
              {
                v208 = v19;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session heartbeat request start now for %@"));
              }
            }
          }
          objc_msgSend_setHbStartTime_(v19, v134, v135, v82, v208, v209, v210, v211);
          v91 = 3;
        }
        else
        {
          v90 = v82 - v132;
          v91 = 3;
          if (v90 > 60.0)
          {
            OSLogHandleForTransportCategory();
            v204 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v228 = v19;
              _os_log_impl(&dword_19B949000, v204, OS_LOG_TYPE_DEFAULT, "session heartbeat request message timed out, disconnect %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v208 = v19;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session heartbeat request message timed out, disconnect %@"));
                if (_IDSShouldLog())
                {
                  v208 = v19;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session heartbeat request message timed out, disconnect %@"));
                }
              }
            }
            if (objc_msgSend_isQUIC(v19, v205, v206, v207, v208, v209, v210, v211))
              goto LABEL_65;
            goto LABEL_172;
          }
        }
      }
    }
    if (!v214)
    {
      objc_msgSend__createCommandData_options_candidatePair_(v216, v89, v91, v90, v215, v19);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v111)
      {
        OSLogHandleForTransportCategory();
        v142 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)v228 = v213;
          _os_log_impl(&dword_19B949000, v142, OS_LOG_TYPE_DEFAULT, "failed to get indication data, skip session command (%04lx) message.", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get indication data, skip session command (%04lx) message."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get indication data, skip session command (%04lx) message."));
          }
        }
        v214 = 0;
        goto LABEL_161;
      }
      if (objc_msgSend_isRelayStunCandidatePair(v19, v109, v110, v112))
        v113 = 22;
      else
        v113 = 23;
      v114 = [IDSStunMessage alloc];
      v214 = (void *)objc_msgSend_initWithType_(v114, v115, v113, v116);
      v120 = objc_msgSend_channelNumber(v19, v117, v118, v119);
      v121 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v122, __rev16(v120), v123);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      if (v124)
      {
        CFDictionarySetValue(v121, CFSTR("ids-stun-attribute-channelnumber"), v124);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF2014();
      }

      CFDictionarySetValue(v121, CFSTR("ids-stun-attribute-data"), v111);
      objc_msgSend_objectForKey_(v215, v143, (uint64_t)CFSTR("gl-attr-remote-relay-link-id"), v144);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      if (v145)
        CFDictionarySetValue(v121, CFSTR("ids-stun-attribute-relay-link-id"), v145);

      objc_msgSend_setTransactionID_attributes_(v214, v146, 0, v147, v121);
      objc_msgSend_setStartTime_(v214, v148, v149, v82);

      goto LABEL_108;
    }
    objc_msgSend_startTime(v214, v89, v91, v90);
    v94 = v82 - v93;
    if (v94 > 30.0)
    {
      if (v213 == 6)
      {
        OSLogHandleForTransportCategory();
        v174 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v174, OS_LOG_TYPE_DEFAULT, "session relay interface information message timed out.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session relay interface information message timed out."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session relay interface information message timed out."));
          }
        }
        objc_msgSend__discardKeyMaterialMessage_(v216, v175, 12, v176, v208);
        objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v177, v178, v179);
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setRelayInterfaceInfoDeliveryStatus_status_(v180, v181, (uint64_t)v216->_cbuuid, v182, 4);

        goto LABEL_161;
      }
      if (v213 == 4)
      {
        OSLogHandleForTransportCategory();
        v183 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v183, OS_LOG_TYPE_DEFAULT, "session connection data message timed out.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connection data message timed out."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connection data message timed out."));
          }
        }
        objc_msgSend_sharedInstance(IDSStunConnectionDataController, v184, v185, v186, v208);
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setDeliveryStatus_status_(v187, v188, (uint64_t)v216->_cbuuid, v189, 3);

        goto LABEL_161;
      }
      if (v213 != 1)
      {
LABEL_161:

        goto LABEL_162;
      }
      OSLogHandleForTransportCategory();
      v95 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v228 = v19;
        _os_log_impl(&dword_19B949000, v95, OS_LOG_TYPE_DEFAULT, "session connected message timed out, disconnect %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v208 = v19;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connected message timed out, disconnect %@."));
          if (_IDSShouldLog())
          {
            v208 = v19;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connected message timed out, disconnect %@."));
          }
        }
      }
      if (objc_msgSend_isQUIC(v19, v96, v97, v98, v208))
      {
LABEL_65:
        objc_msgSend__sendQUICUnallocbindRequest_reason_(v216, v99, (uint64_t)v217, v100, 9);
        goto LABEL_161;
      }
LABEL_172:
      objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v216, v99, (uint64_t)v217, v100, 0, 9);
      goto LABEL_161;
    }
    v125 = v213;
    if ((v213 & 0xFFFFFFFFFFFF7FFFLL) == 4 && v215)
    {
      objc_msgSend_objectForKey_(v215, v92, (uint64_t)CFSTR("gl-attr-counter"), v94);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v130 = objc_msgSend_intValue(v126, v127, v128, v129);
      v131 = 0xFFFFFFFFLL;
    }
    else
    {
      v130 = 0xFFFFFFFFLL;
      v131 = 0xFFFFFFFFLL;
      if ((v213 & 0xFFFFFFFFFFFF7FFFLL) != 6 || !v215)
      {
LABEL_94:
        if ((objc_msgSend__shouldSkipCommand_withCandidatePair_connectionDataCounter_relayInterfaceCounter_(v216, v92, v125, v94, v19, v130, v131, v208) & 1) != 0)goto LABEL_161;
LABEL_108:
        objc_msgSend_GlobalLink(IDSFoundationLog, v139, v140, v141);
        v150 = objc_claimAutoreleasedReturnValue();
        v151 = os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT);
        if ((int)v88 <= 0)
        {
          if (v151)
          {
            v168 = objc_msgSend_type(v214, v152, v153, v154);
            idsSessionID = v216->_idsSessionID;
            objc_msgSend_sessionID(v19, v170, v171, v172);
            v173 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)v228 = (unsigned __int16)v213;
            *(_WORD *)&v228[4] = 1024;
            *(_DWORD *)&v228[6] = v168;
            *(_WORD *)v229 = 2112;
            *(_QWORD *)&v229[2] = v217;
            *(_WORD *)&v229[10] = 2112;
            *(_QWORD *)&v229[12] = idsSessionID;
            *(_WORD *)&v229[20] = 2112;
            *(_QWORD *)&v229[22] = v173;
            _os_log_impl(&dword_19B949000, v150, OS_LOG_TYPE_DEFAULT, "Send command %04x (stun:%04x) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x2Cu);

          }
          v167 = v19;
        }
        else
        {
          if (v151)
          {
            v155 = objc_msgSend_type(v214, v152, v153, v154);
            v156 = v216->_idsSessionID;
            objc_msgSend_sessionID(v19, v157, v158, v159);
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)v228 = (unsigned __int16)v213;
            *(_WORD *)&v228[4] = 1024;
            *(_DWORD *)&v228[6] = v88;
            *(_WORD *)v229 = 1024;
            *(_DWORD *)&v229[2] = v155;
            *(_WORD *)&v229[6] = 2112;
            *(_QWORD *)&v229[8] = v217;
            *(_WORD *)&v229[16] = 2112;
            *(_QWORD *)&v229[18] = v156;
            *(_WORD *)&v229[26] = 2112;
            *(_QWORD *)&v229[28] = v160;
            _os_log_impl(&dword_19B949000, v150, OS_LOG_TYPE_DEFAULT, "Send command %04x (active probing on link %d) (stun:%04x) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x32u);

          }
          if (v216->_linkIDToCandidatePairs)
          {
            objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v161, v88, v162);
            v150 = objc_claimAutoreleasedReturnValue();
            if (v150)
            {
              linkIDToCandidatePairs = (const __CFDictionary *)v216->_linkIDToCandidatePairs;
              objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v163, v88, v164);
              v166 = objc_claimAutoreleasedReturnValue();
              v167 = (id)CFDictionaryGetValue(linkIDToCandidatePairs, v166);

              v19 = v166;
            }
            else
            {
              v167 = 0;
            }

          }
          else
          {
            v167 = 0;
            v150 = v19;
          }
        }

        objc_msgSend__sendStunMessage_candidatePair_(v216, v190, (uint64_t)v214, v191, v167);
        v195 = 0;
        v196 = v213;
        if (v213 != 3 && (v213 & 0x8000) == 0)
          v195 = v214;
        v197 = (int)v88 > 0 && v213 == 3;
        if (v197 || (v213 & 0x8000) != 0)
          goto LABEL_160;
        v198 = 1.0;
        if (v213 != 6 && v213 != 1)
        {
          v200 = v217;
          goto LABEL_159;
        }
        objc_msgSend_startTime(v214, v192, v193, v194, v208);
        if (v82 - v199 < 2.0)
        {
          v200 = v217;
          v201 = v216->_allocbindEndTime - v216->_allocbindStartTime;
          v196 = v213;
          if (v201 <= 0.0)
          {
LABEL_159:
            v218[0] = MEMORY[0x1E0C809B0];
            v218[1] = 3221225472;
            v218[2] = sub_19B9DB654;
            v218[3] = &unk_1E3C1FFC8;
            v218[4] = v216;
            v222 = v196;
            v219 = v195;
            v220 = v215;
            v221 = v200;
            IDSTransportThreadAddBlockAfter(v218, v198);

LABEL_160:
            v19 = v167;
            goto LABEL_161;
          }
          v202 = v201 + v201;
          if (v201 + v201 > 0.2)
            v202 = 0.2;
          if (v202 >= 0.05)
            v198 = v202;
          else
            v198 = 0.05;
          OSLogHandleForTransportCategory();
          v203 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)v228 = v198;
            *(_WORD *)&v228[8] = 2048;
            *(double *)v229 = v201;
            _os_log_impl(&dword_19B949000, v203, OS_LOG_TYPE_DEFAULT, "use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec."));
            }
          }
        }
        v200 = v217;
        v196 = v213;
        goto LABEL_159;
      }
      objc_msgSend_objectForKey_(v215, v92, (uint64_t)CFSTR("gl-attr-counter"), v94);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v131 = objc_msgSend_intValue(v126, v136, v137, v138);
    }

    v125 = v213;
    goto LABEL_94;
  }
  OSLogHandleForTransportCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v228 = a3;
    *(_WORD *)&v228[8] = 2080;
    *(_QWORD *)v229 = v15;
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "skip session command %04lx, GL state (%s).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip session command %04lx, GL state (%s)."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip session command %04lx, GL state (%s)."));
    }
  }
LABEL_162:

}

- (BOOL)_processIncomingIndicationData:(char *)a3 length:(int)a4 candidatePairToken:(id)a5 arrivalTime:(double)a6 remoteRelayLinkID:(unsigned __int16)a7
{
  uint64_t v7;
  uint64_t v9;
  id v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *Value;
  id v23;
  const char *v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  NSString *idsSessionID;
  void *v32;
  const char *v33;
  double v34;
  NSObject *v35;
  BOOL v36;
  NSObject *v37;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  id v42;
  __int16 v43;
  NSString *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v7 = a7;
  v9 = *(_QWORD *)&a4;
  v47 = *MEMORY[0x1E0C80C00];
  v12 = a5;
  objc_msgSend_messageWithBuffer_length_(IDSGlobalLinkMessage, v13, (uint64_t)a3, v14, v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_command(v15, v16, v17, v18);
  if (self->_useSecureControlMessage
    && (objc_msgSend_verifyHMacDigestWithKey_inputBuffer_inputLength_(v15, v19, (uint64_t)self->_controlMessageKey, v21, a3, v9) & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v40 = (unsigned __int16)v20;
      v41 = 2112;
      v42 = v12;
      _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "failed to verify HMac, drop command %04x for %@.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to verify HMac, drop command %04x for %@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to verify HMac, drop command %04x for %@."));
      }
    }
    v36 = 0;
  }
  else
  {
    Value = 0;
    if (v12 && self->_tokenToCandidatePairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v12);
    v23 = Value;
    objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      objc_msgSend_sessionID(v23, v28, v29, v30);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 67109890;
      v40 = (unsigned __int16)v20;
      v41 = 2112;
      v42 = v12;
      v43 = 2112;
      v44 = idsSessionID;
      v45 = 2112;
      v46 = v32;
      _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "Received command %04x on %@ for IDSSessionID: %@ QRSessionID: %@", buf, 0x26u);

    }
    switch(v20)
    {
      case 1:
LABEL_11:
        objc_msgSend__processCommandConnected_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 2:
LABEL_19:
        objc_msgSend__processCommandDisconnected_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 3:
LABEL_20:
        objc_msgSend__processCommandHeartbeat_candidatePairToken_arrivalTime_remoteRelayLinkID_(self, v33, (uint64_t)v15, a6, v12, v7);
        break;
      case 4:
LABEL_21:
        objc_msgSend__processCommandConnectionData_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 5:
LABEL_22:
        objc_msgSend__processCommandNominate_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 6:
LABEL_23:
        objc_msgSend__processCommandRelayInterfaceInfo_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      default:
        switch(v20)
        {
          case 32769:
            goto LABEL_11;
          case 32770:
            goto LABEL_19;
          case 32771:
            goto LABEL_20;
          case 32772:
            goto LABEL_21;
          case 32773:
            goto LABEL_22;
          case 32774:
            goto LABEL_23;
          default:
            OSLogHandleForTransportCategory();
            v37 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              v40 = (unsigned __int16)v20;
              _os_log_impl(&dword_19B949000, v37, OS_LOG_TYPE_DEFAULT, "receive invalid command %04x.", buf, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive invalid command %04x."));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive invalid command %04x."));
              }
            }
            break;
        }
        break;
    }

    v36 = 1;
  }

  return v36;
}

- (void)_notifyQRSessionConnected:(id)a3
{
  const char *v3;
  uint64_t v4;
  double v5;
  const char *v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  const char *v10;
  double v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  IDSGlobalLink *v16;
  NSObject *v17;
  NSString *cbuuid;
  const char *v19;
  double v20;
  int v21;
  NSObject *v22;
  char *v23;
  const char *v24;
  double v25;
  IDSGlobalLink *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  int isInternalInstall;
  const char *v35;
  uint64_t v36;
  double v37;
  void *v38;
  NSObject *v39;
  dispatch_block_t v40;
  id v41;
  id WeakRetained;
  char v43;
  const char *v44;
  double v45;
  id v46;
  const char *v47;
  double v48;
  const char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  uint64_t v53;
  int isActive;
  double v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  IDSGlobalLink *v60;
  const char *v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  IDSGlobalLink *v65;
  NSData *skeData;
  const char *v67;
  uint64_t v68;
  double v69;
  const char *v70;
  uint64_t v71;
  double v72;
  NSObject *v73;
  char *v74;
  const char *v75;
  uint64_t v76;
  double v77;
  const char *v78;
  double v79;
  const char *v80;
  uint64_t v81;
  double v82;
  const char *v83;
  uint64_t v84;
  double v85;
  const char *v86;
  uint64_t v87;
  double v88;
  void *v89;
  const char *v90;
  double v91;
  void *v92;
  id v93;
  const char *v94;
  double v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t i;
  IDSGlobalLink *v102;
  char isRealloc;
  char v104;
  NSObject *v105;
  const char *v106;
  uint64_t v107;
  double v108;
  char *v109;
  const char *v110;
  uint64_t v111;
  double v112;
  int isQUIC;
  const char *v114;
  uint64_t v115;
  double v116;
  const char *v117;
  void *v118;
  double v119;
  const void *Value;
  void (**v121)(_QWORD);
  NSObject *v122;
  IDSGlobalLink *v123;
  NSMutableDictionary *tokenToReallocBlocks;
  const char *v125;
  double v126;
  id v127;
  const char *v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  double v133;
  void *v134;
  const char *v135;
  double v136;
  unint64_t v137;
  const char *v138;
  double v139;
  char *v140;
  char *v141;
  char *v142;
  int v143;
  char *key;
  IDSGlobalLink *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _QWORD block[4];
  id v152;
  uint8_t v153[128];
  uint8_t buf[4];
  IDSGlobalLink *v155;
  __int16 v156;
  char *v157;
  __int16 v158;
  char *v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v146 = (IDSGlobalLink *)a3;
  objc_msgSend_candidatePairToken(v146, v3, v4, v5);
  key = (char *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_state(v146, v6, v7, v8);
  v12 = v9;
  if (v9 <= 2)
  {
    OSLogHandleForTransportCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "receive session connected message before allocbind response.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive session connected message before allocbind response."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive session connected message before allocbind response."));
      }
    }
LABEL_15:
    v16 = self;
    if (self->_state == 4)
    {
      if (!self->_allowOnlyOneQR)
      {
        v143 = 0;
LABEL_54:
        if (v12 <= 3)
        {
          objc_msgSend_setState_(v146, v10, 4, v11);
          OSLogHandleForTransportCategory();
          v73 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            v74 = (&_IDSStunCandidatePairStateStrings)[v12];
            *(_DWORD *)buf = 136315650;
            v155 = (IDSGlobalLink *)v74;
            v156 = 2080;
            v157 = off_1EE40A678;
            v158 = 2112;
            v159 = key;
            _os_log_impl(&dword_19B949000, v73, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v141 = off_1EE40A678;
              v142 = key;
              v140 = (&_IDSStunCandidatePairStateStrings)[v12];
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
              if (_IDSShouldLog())
              {
                v141 = off_1EE40A678;
                v142 = key;
                v140 = (&_IDSStunCandidatePairStateStrings)[v12];
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
              }
            }
          }
          objc_msgSend_stopSessionConnectedTimer(v146, v75, v76, v77, v140, v141, v142);
          objc_msgSend__notifyCandidatePairConnected_(self, v78, (uint64_t)key, v79);
          if (objc_msgSend_isRelayStunCandidatePair(v146, v80, v81, v82)
            && (objc_msgSend_isSharedQRSession(v146, v83, v84, v85) & 1) == 0)
          {
            objc_msgSend_sessionID(v146, v86, v87, v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v90, (uint64_t)v89, v91, 3);
            v92 = (void *)objc_claimAutoreleasedReturnValue();

            v149 = 0u;
            v150 = 0u;
            v147 = 0u;
            v148 = 0u;
            v93 = v92;
            v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v94, (uint64_t)&v147, v95, v153, 16);
            if (v98)
            {
              v99 = *(_QWORD *)v148;
              v100 = 138412546;
              do
              {
                for (i = 0; i != v98; ++i)
                {
                  if (*(_QWORD *)v148 != v99)
                    objc_enumerationMutation(v93);
                  v102 = *(IDSGlobalLink **)(*((_QWORD *)&v147 + 1) + 8 * i);
                  isRealloc = objc_msgSend_isRealloc(v102, v96, v97, *(double *)&v100);
                  if (v102 == v146)
                    v104 = 1;
                  else
                    v104 = isRealloc;
                  if ((v104 & 1) == 0)
                  {
                    objc_msgSend_GlobalLink(IDSFoundationLog, v96, v97, *(double *)&v100);
                    v105 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
                    {
                      objc_msgSend_sessionID(v102, v106, v107, v108);
                      v109 = (char *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138412546;
                      v155 = v102;
                      v156 = 2112;
                      v157 = v109;
                      _os_log_impl(&dword_19B949000, v105, OS_LOG_TYPE_DEFAULT, "Found another succeeded candidate pair %@ with the same QRSessionID %@, disconnecting", buf, 0x16u);

                    }
                    isQUIC = objc_msgSend_isQUIC(v102, v110, v111, v112);
                    objc_msgSend_candidatePairToken(v102, v114, v115, v116);
                    v118 = (void *)objc_claimAutoreleasedReturnValue();
                    if (isQUIC)
                      objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v117, (uint64_t)v118, v119, 8);
                    else
                      objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v117, (uint64_t)v118, v119, 0, 8);

                  }
                }
                v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v96, (uint64_t)&v147, *(double *)&v100, v153, 16);
              }
              while (v98);
            }

          }
          Value = 0;
          if (self->_tokenToReallocBlocks && key)
            Value = CFDictionaryGetValue((CFDictionaryRef)self->_tokenToReallocBlocks, key);
          v121 = (void (**)(_QWORD))_Block_copy(Value);
          if (v121)
          {
            OSLogHandleForTransportCategory();
            v122 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              v123 = (IDSGlobalLink *)_Block_copy(v121);
              *(_DWORD *)buf = 134218242;
              v155 = v123;
              v156 = 2112;
              v157 = key;
              _os_log_impl(&dword_19B949000, v122, OS_LOG_TYPE_DEFAULT, "process delayed realloc block %p for %@.", buf, 0x16u);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v140 = (char *)_Block_copy(v121);
                v141 = key;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process delayed realloc block %p for %@."));

                if (_IDSShouldLog())
                {
                  v140 = (char *)_Block_copy(v121);
                  v141 = key;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process delayed realloc block %p for %@."));

                }
              }
            }
            v121[2](v121);
            if (key)
            {
              tokenToReallocBlocks = self->_tokenToReallocBlocks;
              if (tokenToReallocBlocks)
                CFDictionaryRemoveValue((CFMutableDictionaryRef)tokenToReallocBlocks, key);
            }
          }

          v16 = self;
        }
        if (v143)
        {
          objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(v16, v10, (uint64_t)key, v11, 0);
          v16 = self;
        }
        objc_msgSend__selectBetterDefaultCandidatePair_(v16, v10, (uint64_t)v146, v11, v140, v141);
        v127 = (id)objc_msgSend__convergeSharedSessions_(self, v125, (uint64_t)v146, v126);
        if (objc_msgSend_isRelayStunCandidatePair(v146, v128, v129, v130))
        {
          objc_msgSend_sharedInstance(IDSStunConnectionDataController, v131, v132, v133);
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          v137 = objc_msgSend_deliveryStatus_(v134, v135, (uint64_t)self->_cbuuid, v136);

          if (v137 <= 1)
            objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v138, 0, v139);
        }
        goto LABEL_100;
      }
      if (!objc_msgSend_isEqualToString_(self->_cbuuid, v10, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v11))
      {
        v143 = 0;
        goto LABEL_53;
      }
      OSLogHandleForTransportCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        cbuuid = self->_cbuuid;
        *(_DWORD *)buf = 138412546;
        v155 = v146;
        v156 = 2112;
        v157 = (char *)cbuuid;
        _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is connected but GL is already connected, override for %@", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v140 = (char *)v146;
          v141 = (char *)self->_cbuuid;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("candidate pair %@ is connected but GL is already connected, override for %@"));
          if (_IDSShouldLog())
          {
            v140 = (char *)v146;
            v141 = (char *)self->_cbuuid;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("candidate pair %@ is connected but GL is already connected, override for %@"));
          }
        }
      }
      objc_msgSend__updateDefaultCandidatePair_(self, v19, (uint64_t)v146, v20, v140, v141);
      v21 = 1;
LABEL_52:
      v143 = v21;
LABEL_53:
      v16 = self;
      goto LABEL_54;
    }
    OSLogHandleForTransportCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 138412802;
      v155 = self;
      v156 = 2080;
      v157 = v23;
      v158 = 2080;
      v159 = off_1EE40A120[0];
      _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v141 = _IDSLinkStateStrings[self->_state];
        v142 = off_1EE40A120[0];
        v140 = (char *)self;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update GL: %@ state (%s->%s)."));
        if (_IDSShouldLog())
        {
          v141 = _IDSLinkStateStrings[self->_state];
          v142 = off_1EE40A120[0];
          v140 = (char *)self;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update GL: %@ state (%s->%s)."));
        }
      }
    }
    v26 = self;
    self->_state = 4;
    if (!self->_isUPlusOneSession)
    {
      v25 = ids_monotonic_time();
      v26 = self;
      self->_linkConnectTime = v25;
    }
    objc_msgSend__stopAllocbindFailoverTimer_(v26, v24, 0, v25, v140, v141, v142);
    objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    isInternalInstall = objc_msgSend_isInternalInstall(v30, v31, v32, v33);

    if (isInternalInstall)
      objc_msgSend_setTestOptionsFromUserDefaults(v146, v35, v36, v37);
    v38 = _Block_copy(self->_connectReadyHandler);
    if (v38)
    {
      im_primary_queue();
      v39 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19B9DC794;
      block[3] = &unk_1E3C1FC70;
      v152 = v38;
      v40 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, QOS_CLASS_USER_INTERACTIVE, 0, block);
      dispatch_async(v39, v40);

      v41 = v152;
    }
    else
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v43 = objc_opt_respondsToSelector();

      if ((v43 & 1) == 0)
      {
LABEL_41:
        v46 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didConnectForDeviceUniqueID_cbuuid_(v46, v47, (uint64_t)self, v48, self->_deviceUniqueID, self->_cbuuid);

        isActive = objc_msgSend_isActive(v146, v49, v50, v51);
        if ((isActive & 1) == 0)
        {
          OSLogHandleForTransportCategory();
          v56 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v146, v57, v58, v59);
            v60 = (IDSGlobalLink *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v155 = v60;
            _os_log_impl(&dword_19B949000, v56, OS_LOG_TYPE_DEFAULT, "default candidate pair is not connected, switch to %@.", buf, 0xCu);

          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v146, v61, v63, v62);
              v140 = (char *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("default candidate pair is not connected, switch to %@."));

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v146, v61, v64, v62, v140);
                v140 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("default candidate pair is not connected, switch to %@."));

              }
            }
          }
          objc_msgSend__updateDefaultCandidatePair_(self, v61, (uint64_t)v146, v62, v140);
        }
        v65 = self;
        if (self->_skeToRemoteComplete)
        {
          skeData = self->_skeData;
          self->_skeData = 0;

          v65 = self;
        }
        objc_msgSend__discardNonAcceptedCandidatePairs(v65, v52, v53, v55);
        objc_msgSend__startActivityTimer(self, v67, v68, v69);
        objc_msgSend__startExtIPDiscovery(self, v70, v71, v72);

        v21 = isActive ^ 1;
        goto LABEL_52;
      }
      v41 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didConnectOverCloud_cbuuid_(v41, v44, (uint64_t)self, v45, 0, self->_cbuuid);
    }

    goto LABEL_41;
  }
  if (v9 - 5 > 1)
    goto LABEL_15;
  OSLogHandleForTransportCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = (&_IDSStunCandidatePairStateStrings)[v12];
    *(_DWORD *)buf = 138412546;
    v155 = (IDSGlobalLink *)key;
    v156 = 2080;
    v157 = v15;
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], ignore session connected.", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%@ has state [%s], ignore session connected."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%@ has state [%s], ignore session connected."));
    }
  }
LABEL_100:

}

- (void)_setRemoteGlobalLinkVersionWithCommand:(int64_t)a3 receivedRemoteVersion:(BOOL)a4 versionValue:(unsigned __int16)a5 receivedSKE:(BOOL)a6
{
  if (a4)
    goto LABEL_9;
  if (!self->_isInitiator)
  {
    if (a3 != 1)
      return;
    goto LABEL_8;
  }
  if (a3 == 32769 && self->_enableSKE && a6)
  {
LABEL_8:
    a5 = 0;
LABEL_9:
    self->_remoteGlobalLinkVersion = a5;
  }
}

- (void)_processCommandConnected:(id)a3 candidatePairToken:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  unsigned __int16 v27;
  const char *v28;
  double v29;
  uint64_t v30;
  _BOOL8 enableSKE;
  NSObject *v32;
  NSObject *v33;
  const __CFString *v34;
  _BOOL4 skeToRemoteComplete;
  const __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  NSObject *v41;
  id WeakRetained;
  const char *v43;
  double v44;
  uint64_t HasValidUInt16Attr;
  const char *v46;
  double v47;
  unsigned int v48;
  double v49;
  NSObject *v50;
  unsigned int acceptDelayU32;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  double v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  void *v62;
  const char *v63;
  double v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  double v68;
  void *v69;
  const char *v70;
  double v71;
  NSObject *v72;
  unsigned int remoteCapabilityFlag_low;
  int v74;
  const char *v75;
  uint64_t v76;
  double v77;
  int v78;
  void *v79;
  const char *v80;
  double v81;
  int HasValidUInt32Attr;
  const char *v83;
  uint64_t v84;
  double v85;
  int v86;
  void *v87;
  const char *v88;
  double v89;
  const char *v90;
  double v91;
  const char *v92;
  uint64_t v93;
  double v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  __int128 v100;
  const char *v101;
  uint64_t v102;
  double v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  double v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  double v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  const char *v125;
  double v126;
  void *v127;
  const char *v128;
  double v129;
  NSObject *v130;
  char *v131;
  const char *v132;
  double v133;
  int v134;
  id v135;
  const char *v136;
  double v137;
  const char *v138;
  uint64_t v139;
  char *v140;
  double v141;
  void *v142;
  const char *v143;
  double v144;
  _BOOL4 v145;
  const char *v146;
  double v147;
  NSObject *v148;
  const char *v149;
  uint64_t v150;
  double v151;
  id v152;
  const char *v153;
  uint64_t v154;
  double v155;
  const char *v156;
  uint64_t v157;
  double v158;
  const char *v159;
  uint64_t v160;
  double v161;
  void *v162;
  int v163;
  id v164;
  const char *v165;
  double v166;
  char *v167;
  NSObject *v168;
  const char *v169;
  double v170;
  NSObject *v171;
  const char *v172;
  uint64_t v173;
  double v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  double v178;
  char *v179;
  const char *v180;
  uint64_t v181;
  double v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  double v186;
  unsigned int v187;
  const char *v188;
  const char *v189;
  uint64_t v190;
  double v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  double v195;
  int v196;
  int v197;
  int remoteGlobalLinkVersion;
  const char *v199;
  uint64_t v200;
  double v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  double v205;
  char *v206;
  const char *v207;
  uint64_t v208;
  double v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  double v213;
  unsigned int v214;
  const char *v215;
  const char *v216;
  uint64_t v217;
  double v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  double v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  double v227;
  char *v228;
  const char *v229;
  uint64_t v230;
  double v231;
  void *v232;
  const char *v233;
  uint64_t v234;
  double v235;
  unsigned int v236;
  const char *v237;
  const char *v238;
  uint64_t v239;
  double v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  double v244;
  uint64_t v245;
  signed __int16 v246;
  _BOOL4 v247;
  int v248;
  int v249;
  int v250;
  NSObject *v251;
  const __CFString *v252;
  NSObject *v253;
  const __CFString *v254;
  const __CFString *v255;
  _BOOL4 recvRemoteSKEData;
  const __CFString *v257;
  const __CFString *v258;
  const char *v259;
  double v260;
  const char *v261;
  double v262;
  NSObject *v263;
  NSObject *v264;
  NSObject *v265;
  const char *v266;
  double v267;
  NSObject *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  __CFString *v272;
  double v273;
  uint64_t v274;
  __CFString *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int16 v280;
  unsigned int v281;
  uint8_t v282[4];
  char *v283;
  __int16 v284;
  id v285;
  _BYTE v286[48];
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  int v292;
  unsigned int v293;
  __int16 v294;
  double v295;
  __int16 v296;
  const __CFString *v297;
  __int128 v298;
  _DWORD buf[2];
  _DWORD v300[260];
  uint64_t v301;

  v301 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v279 = objc_msgSend_command(v6, v8, v9, v10);
  if (v7)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (tokenToCandidatePairs)
    {
      v12 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v7);
      if (v12)
      {
        v16 = v12;
        if (objc_msgSend_pendingRealloc(v12, v13, v14, v15))
        {
          OSLogHandleForTransportCategory();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 67109378;
            buf[1] = (unsigned __int16)v279;
            LOWORD(v300[0]) = 2112;
            *(_QWORD *)((char *)v300 + 2) = v7;
            _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "receive session connected command %04x on realloc pair %@, ignore.", (uint8_t *)buf, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive session connected command %04x on realloc pair %@, ignore."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive session connected command %04x on realloc pair %@, ignore."));
            }
          }
          goto LABEL_18;
        }
        bzero(buf, 0x410uLL);
        if (objc_msgSend_getAttribute_attribute_(v6, v19, 4, v20, buf))
        {
          objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v21, (uint64_t)&v300[1], v22, v300[0]);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = objc_msgSend_length(v23, v24, v25, v26);
          v30 = v27;
          if (v27)
            enableSKE = self->_enableSKE;
          else
            enableSKE = 0;
          if (enableSKE)
          {
            if (self->_recvRemoteSKEData)
            {
              OSLogHandleForTransportCategory();
              v32 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v292) = 0;
                _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "already received remote SKE data, ignore.", (uint8_t *)&v292, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("already received remote SKE data, ignore."));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("already received remote SKE data, ignore."));
                }
              }
            }
            else
            {
              self->_recvRemoteSKEData = 1;
              objc_msgSend_setRecvSKEData_(v16, v28, 1, v29);
              OSLogHandleForTransportCategory();
              v41 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                v292 = 67109120;
                v293 = v30;
                _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "receive new remote SKE data %u bytes.", (uint8_t *)&v292, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v269 = v30;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive new remote SKE data %u bytes."));
                  if (_IDSShouldLog())
                  {
                    v269 = v30;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive new remote SKE data %u bytes."));
                  }
                }
              }
              WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didReceiveSKEData_(WeakRetained, v43, (uint64_t)self, v44, v23);

              if (!self->_isInitiator)
              {
                self->_skeStartTime = ids_monotonic_time();
                if (self->_skeData)
                {
                  self->_delaySessionConnected = 0;
                  OSLogHandleForTransportCategory();
                  v265 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(v292) = 0;
                    _os_log_impl(&dword_19B949000, v265, OS_LOG_TYPE_DEFAULT, "SKE data is ready, need to send SKE", (uint8_t *)&v292, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SKE data is ready, need to send SKE"));
                      if (_IDSShouldLog())
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SKE data is ready, need to send SKE"));
                    }
                  }
                }
                else
                {
                  self->_delaySessionConnected = 1;
                  OSLogHandleForTransportCategory();
                  v268 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(v292) = 0;
                    _os_log_impl(&dword_19B949000, v268, OS_LOG_TYPE_DEFAULT, "SKE data is not ready, delay session connected.", (uint8_t *)&v292, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SKE data is not ready, delay session connected."));
                      if (_IDSShouldLog())
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SKE data is not ready, delay session connected."));
                    }
                  }
                }
              }
            }
          }
          else
          {
            OSLogHandleForTransportCategory();
            v33 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              v34 = CFSTR("YES");
              skeToRemoteComplete = self->_skeToRemoteComplete;
              if (self->_enableSKE)
                v36 = CFSTR("YES");
              else
                v36 = CFSTR("NO");
              v292 = 67109634;
              if (!skeToRemoteComplete)
                v34 = CFSTR("NO");
              v293 = v30;
              v294 = 2112;
              v295 = *(double *)&v36;
              v296 = 2112;
              v297 = v34;
              _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "ignore SKE data %uB (EnableSKE %@, SKEComplete %@).", (uint8_t *)&v292, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              v37 = self->_enableSKE ? CFSTR("YES") : CFSTR("NO");
              v38 = self->_skeToRemoteComplete ? CFSTR("YES") : CFSTR("NO");
              v272 = v37;
              v275 = v38;
              v269 = v30;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("ignore SKE data %uB (EnableSKE %@, SKEComplete %@)."));
              if (_IDSShouldLog())
              {
                if (self->_enableSKE)
                  v39 = CFSTR("YES");
                else
                  v39 = CFSTR("NO");
                if (self->_skeToRemoteComplete)
                  v40 = CFSTR("YES");
                else
                  v40 = CFSTR("NO");
                v272 = (__CFString *)v39;
                v275 = (__CFString *)v40;
                v269 = v30;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("ignore SKE data %uB (EnableSKE %@, SKEComplete %@)."));
              }
            }
          }

        }
        else
        {
          enableSKE = 0;
        }
        v281 = 0;
        v280 = 0;
        v298 = 0uLL;
        if (v279 == 1)
        {
          HasValidUInt16Attr = GLUtilHasValidUInt16Attr(v6, 18, &v280);
          objc_msgSend__setRemoteGlobalLinkVersionWithCommand_receivedRemoteVersion_versionValue_receivedSKE_(self, v46, 1, v47, HasValidUInt16Attr, v280, enableSKE, v269, v272, v275);
        }
        else
        {
          objc_msgSend__setRemoteGlobalLinkVersionWithCommand_receivedRemoteVersion_versionValue_receivedSKE_(self, v21, v279, v22, 0, 0, enableSKE, v269, v272, v275);
        }
        if (GLUtilHasValidUInt32Attr(v6, 7, &v281))
        {
          v48 = v281;
          self->_acceptDelayU32 = v281;
          v49 = (double)(unsigned __int16)v48 * 0.0000152587891 + (double)HIWORD(v48);
          OSLogHandleForTransportCategory();
          v50 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            acceptDelayU32 = self->_acceptDelayU32;
            v292 = 67109376;
            v293 = acceptDelayU32;
            v294 = 2048;
            v295 = v49;
            _os_log_impl(&dword_19B949000, v50, OS_LOG_TYPE_DEFAULT, "receive accept delay: %08x/%.6f", (uint8_t *)&v292, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v273 = v49;
              v270 = (char *)self->_acceptDelayU32;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive accept delay: %08x/%.6f"));
              if (_IDSShouldLog())
              {
                v273 = v49;
                v270 = (char *)self->_acceptDelayU32;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive accept delay: %08x/%.6f"));
              }
            }
          }
        }
        if (GLUtilHasValidUInt16Attr(v6, 2, &v280))
        {
          objc_msgSend_remote(v16, v52, v53, v54);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v58 = v55;
          if (v280 <= 4u)
            objc_msgSend_updateTransport_(v55, v56, v280, v57, v270, *(_QWORD *)&v273);
          else
            objc_msgSend_updateTransport_(v55, v56, 0, v57, v270, *(_QWORD *)&v273);

        }
        if (GLUtilHasValidUInt16Attr(v6, 5, &v280))
        {
          objc_msgSend_remote(v16, v59, v60, v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v65 = v62;
          if (v280 >= 0xAu)
            objc_msgSend_setRadioAccessTechnology_(v62, v63, 10, v64, v270);
          else
            objc_msgSend_setRadioAccessTechnology_(v62, v63, v280, v64, v270);

        }
        if (GLUtilHasValidUInt16Attr(v6, 6, &v280))
        {
          objc_msgSend_remote(v16, v66, v67, v68);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setMtu_(v69, v70, v280, v71);

        }
        if (GLUtilHasValidUInt16Attr(v6, 12, &v280) && self->_remoteCapabilityFlag != v280)
        {
          self->_remoteCapabilityFlag = v280;
          OSLogHandleForTransportCategory();
          v72 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            remoteCapabilityFlag_low = LOWORD(self->_remoteCapabilityFlag);
            v292 = 67109120;
            v293 = remoteCapabilityFlag_low;
            _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "update remote capability: %04X.", (uint8_t *)&v292, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v270 = (char *)LOWORD(self->_remoteCapabilityFlag);
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update remote capability: %04X."));
              if (_IDSShouldLog())
              {
                v270 = (char *)LOWORD(self->_remoteCapabilityFlag);
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update remote capability: %04X."));
              }
            }
          }
        }
        v74 = GLUtilHasValidUInt16Attr(v6, 19, &v280);
        if (v280)
          v78 = v74;
        else
          v78 = 0;
        if (v78 == 1)
        {
          objc_msgSend_remote(v16, v75, v76, v77);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setLinkFlags_(v79, v80, v280, v81);

        }
        HasValidUInt32Attr = GLUtilHasValidUInt32Attr(v6, 20, &v281);
        if (v281)
          v86 = HasValidUInt32Attr;
        else
          v86 = 0;
        if (v86 == 1)
        {
          objc_msgSend_remote(v16, v83, v84, v85);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setDataSoMask_(v87, v88, v281, v89);

        }
        bzero(&v292, 0x410uLL);
        if (objc_msgSend_getAttribute_attribute_(v6, v90, 8, v91, &v292))
        {
          objc_msgSend_relayRemote(v16, v92, v93, v94);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          v99 = objc_msgSend_address(v95, v96, v97, v98);

          *(_QWORD *)&v100 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v290 = v100;
          v291 = v100;
          v288 = v100;
          v289 = v100;
          *(_OWORD *)&v286[32] = v100;
          v287 = v100;
          *(_OWORD *)v286 = v100;
          *(_OWORD *)&v286[16] = v100;
          if (IsValidSA((_BOOL8)&v294) && (!v99 || !IsSameSA((uint64_t)&v294, v99)))
          {
            objc_msgSend_remote(v16, v101, v102, v103, v270);
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            v108 = objc_msgSend_transport(v104, v105, v106, v107);
            objc_msgSend_remote(v16, v109, v110, v111);
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            v116 = objc_msgSend_radioAccessTechnology(v112, v113, v114, v115);
            objc_msgSend_remote(v16, v117, v118, v119);
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            v124 = objc_msgSend_mtu(v120, v121, v122, v123);
            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v125, 3, v126, v108, v116, v124, 0xFFFFFFFFLL, &v294, &v294);
            v127 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_setRelayRemote_(v16, v128, (uint64_t)v127, v129);
            OSLogHandleForTransportCategory();
            v130 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
            {
              v131 = SAToIPPortString(v286, 0x80uLL, (uint64_t)&v294);
              *(_DWORD *)v282 = 136315394;
              v283 = v131;
              v284 = 2112;
              v285 = v7;
              _os_log_impl(&dword_19B949000, v130, OS_LOG_TYPE_DEFAULT, "receive relay-remote-address %s for %@.", v282, 0x16u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v270 = SAToIPPortString(v286, 0x80uLL, (uint64_t)&v294);
                v273 = *(double *)&v7;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive relay-remote-address %s for %@."));
                if (_IDSShouldLog())
                {
                  v270 = SAToIPPortString(v286, 0x80uLL, (uint64_t)&v294);
                  v273 = *(double *)&v7;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive relay-remote-address %s for %@."));
                }
              }
            }

          }
        }
        v133 = GLUtilHasValidUUIDAttr(v6, 11, &v298);
        if (!v134)
        {
LABEL_126:
          if (!objc_msgSend_isEqualToString_(self->_cbuuid, v132, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v133, v270, *(_QWORD *)&v273))goto LABEL_138;
          objc_msgSend_defaultRemoteDeviceCBUUID(v16, v159, v160, v161);
          v162 = (void *)objc_claimAutoreleasedReturnValue();
          GLUtilHasValidUUIDAttr(v6, 13, &v298);
          if (v163)
          {
            v164 = objc_alloc(MEMORY[0x1E0CB3A28]);
            v167 = (char *)objc_msgSend_initWithUUIDBytes_(v164, v165, (uint64_t)&v298, v166);
            if (v167)
            {
              OSLogHandleForTransportCategory();
              v168 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v286 = 138412546;
                *(_QWORD *)&v286[4] = v167;
                *(_WORD *)&v286[12] = 1024;
                *(_DWORD *)&v286[14] = 13;
                _os_log_impl(&dword_19B949000, v168, OS_LOG_TYPE_DEFAULT, "receive watch cbuuid: %@, attr(%04x).", v286, 0x12u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v271 = v167;
                  v274 = 13;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive watch cbuuid: %@, attr(%04x)."));
                  if (_IDSShouldLog())
                  {
                    v271 = v167;
                    v274 = 13;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive watch cbuuid: %@, attr(%04x)."));
                  }
                }
              }
              if ((objc_msgSend_isEqual_(v162, v169, (uint64_t)v167, v170, v271, v274) & 1) != 0)
              {

                goto LABEL_137;
              }
              OSLogHandleForTransportCategory();
              v264 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v286 = 138412802;
                *(_QWORD *)&v286[4] = v167;
                *(_WORD *)&v286[12] = 2112;
                *(_QWORD *)&v286[14] = v162;
                *(_WORD *)&v286[22] = 1024;
                *(_DWORD *)&v286[24] = (unsigned __int16)v279;
                _os_log_impl(&dword_19B949000, v264, OS_LOG_TYPE_DEFAULT, "watch cbuuid mismatch (%@, %@), reject session command %04x.", v286, 0x1Cu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("watch cbuuid mismatch (%@, %@), reject session command %04x."));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("watch cbuuid mismatch (%@, %@), reject session command %04x."));
                }
              }
            }
            else
            {
              OSLogHandleForTransportCategory();
              v263 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v286 = 67109120;
                *(_DWORD *)&v286[4] = (unsigned __int16)v279;
                _os_log_impl(&dword_19B949000, v263, OS_LOG_TYPE_DEFAULT, "recieve invalid watch cbuuid, reject session command %04x.", v286, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("recieve invalid watch cbuuid, reject session command %04x."));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("recieve invalid watch cbuuid, reject session command %04x."));
                }
              }
            }

            goto LABEL_18;
          }
LABEL_137:

LABEL_138:
          OSLogHandleForTransportCategory();
          v171 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_remote(v16, v172, v173, v174);
            v175 = (void *)objc_claimAutoreleasedReturnValue();
            v179 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v175, v176, v177, v178)];
            objc_msgSend_remote(v16, v180, v181, v182);
            v183 = (void *)objc_claimAutoreleasedReturnValue();
            v187 = objc_msgSend_radioAccessTechnology(v183, v184, v185, v186);
            v188 = IDSRadioAccessTechnologyToString(v187);
            objc_msgSend_remote(v16, v189, v190, v191);
            v192 = (void *)objc_claimAutoreleasedReturnValue();
            v196 = objc_msgSend_mtu(v192, v193, v194, v195);
            v197 = LOWORD(self->_remoteCapabilityFlag);
            remoteGlobalLinkVersion = self->_remoteGlobalLinkVersion;
            *(_DWORD *)v286 = 136316162;
            *(_QWORD *)&v286[4] = v179;
            *(_WORD *)&v286[12] = 2080;
            *(_QWORD *)&v286[14] = v188;
            *(_WORD *)&v286[22] = 1024;
            *(_DWORD *)&v286[24] = v196;
            *(_WORD *)&v286[28] = 1024;
            *(_DWORD *)&v286[30] = v197;
            *(_WORD *)&v286[34] = 1024;
            *(_DWORD *)&v286[36] = remoteGlobalLinkVersion;
            _os_log_impl(&dword_19B949000, v171, OS_LOG_TYPE_DEFAULT, "session connected message payload (%s/%s/%d/%04X/%d).", v286, 0x28u);

          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_remote(v16, v199, v200, v201);
              v202 = (void *)objc_claimAutoreleasedReturnValue();
              v206 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v202, v203, v204, v205)];
              objc_msgSend_remote(v16, v207, v208, v209);
              v210 = (void *)objc_claimAutoreleasedReturnValue();
              v214 = objc_msgSend_radioAccessTechnology(v210, v211, v212, v213);
              v215 = IDSRadioAccessTechnologyToString(v214);
              objc_msgSend_remote(v16, v216, v217, v218);
              v219 = (void *)objc_claimAutoreleasedReturnValue();
              v223 = objc_msgSend_mtu(v219, v220, v221, v222);
              v277 = LOWORD(self->_remoteCapabilityFlag);
              v278 = self->_remoteGlobalLinkVersion;
              v274 = (uint64_t)v215;
              v276 = v223;
              v271 = v206;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connected message payload (%s/%s/%d/%04X/%d)."));

              if (_IDSShouldLog())
              {
                objc_msgSend_remote(v16, v199, v200, v201, v206, v215, v276, v277, v278);
                v224 = (void *)objc_claimAutoreleasedReturnValue();
                v228 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v224, v225, v226, v227)];
                objc_msgSend_remote(v16, v229, v230, v231);
                v232 = (void *)objc_claimAutoreleasedReturnValue();
                v236 = objc_msgSend_radioAccessTechnology(v232, v233, v234, v235);
                v237 = IDSRadioAccessTechnologyToString(v236);
                objc_msgSend_remote(v16, v238, v239, v240);
                v241 = (void *)objc_claimAutoreleasedReturnValue();
                v245 = objc_msgSend_mtu(v241, v242, v243, v244);
                v277 = LOWORD(self->_remoteCapabilityFlag);
                v278 = self->_remoteGlobalLinkVersion;
                v274 = (uint64_t)v237;
                v276 = v245;
                v271 = v228;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connected message payload (%s/%s/%d/%04X/%d)."));

              }
            }
          }
          if (v279 != 1)
          {
            if (v279 == 32769)
            {
              v247 = !self->_enableSKE;
              if (self->_enableSKE)
                self->_skeToRemoteComplete = 1;
              objc_msgSend_setRecvConnectedAck_(v16, v199, 1, v201, v271, v274, v276, v277, v278);
            }
            else
            {
              v247 = 0;
            }
            goto LABEL_159;
          }
          v246 = self->_remoteGlobalLinkVersion;
          v247 = v246 == 0;
          if (!v246)
          {
            if (self->_isInitiator || self->_delaySessionConnected)
            {
              v247 = 0;
LABEL_158:
              objc_msgSend_setRecvConnected_(v16, v199, 1, v201, v271);
LABEL_159:
              if (self->_enableSKE)
                v247 = self->_recvRemoteSKEData && self->_skeToRemoteComplete;
              if (self->_remoteGlobalLinkVersion >= 2)
                v248 = objc_msgSend_recvConnected(v16, v199, v200, v201) ^ 1;
              else
                v248 = 0;
              v249 = objc_msgSend_recvConnectedAck(v16, v199, v200, v201, v271);
              if (v247)
              {
                v250 = v249;
                if ((v248 | v249 ^ 1) == 1)
                {
                  OSLogHandleForTransportCategory();
                  v251 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
                  {
                    v252 = CFSTR("NO");
                    if (v250)
                      v252 = CFSTR("YES");
                    *(_DWORD *)v286 = 138412290;
                    *(_QWORD *)&v286[4] = v252;
                    _os_log_impl(&dword_19B949000, v251, OS_LOG_TYPE_DEFAULT, "still not finished Connected command exchange. recvConnectedAck = %@", v286, 0xCu);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("still not finished Connected command exchange. recvConnectedAck = %@"));
                      if (_IDSShouldLog())
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("still not finished Connected command exchange. recvConnectedAck = %@"));
                    }
                  }
                  v247 = 0;
                }
                else
                {
                  v247 = 1;
                }
              }
              OSLogHandleForTransportCategory();
              v253 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
              {
                v254 = CFSTR("YES");
                if (self->_enableSKE)
                  v255 = CFSTR("YES");
                else
                  v255 = CFSTR("NO");
                recvRemoteSKEData = self->_recvRemoteSKEData;
                if (self->_skeToRemoteComplete)
                  v257 = CFSTR("YES");
                else
                  v257 = CFSTR("NO");
                *(_DWORD *)v286 = 138413058;
                if (recvRemoteSKEData)
                  v258 = CFSTR("YES");
                else
                  v258 = CFSTR("NO");
                *(_QWORD *)&v286[4] = v255;
                *(_WORD *)&v286[12] = 2112;
                if (!v247)
                  v254 = CFSTR("NO");
                *(_QWORD *)&v286[14] = v257;
                *(_WORD *)&v286[22] = 2112;
                *(_QWORD *)&v286[24] = v258;
                *(_WORD *)&v286[32] = 2112;
                *(_QWORD *)&v286[34] = v254;
                _os_log_impl(&dword_19B949000, v253, OS_LOG_TYPE_DEFAULT, "SKE state enableSKE: %@ local complete: %@ remote complete: %@ isConnected: %@", v286, 0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SKE state enableSKE: %@ local complete: %@ remote complete: %@ isConnected: %@"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SKE state enableSKE: %@ local complete: %@ remote complete: %@ isConnected: %@"));
                }
              }
              if (v247)
              {
                objc_msgSend__notifyQRSessionConnected_(self, v259, (uint64_t)v16, v260);
                objc_msgSend__setupNewQRLinkIfNecessary_(self, v261, 0, v262);
              }
              goto LABEL_18;
            }
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v199, 32769, v201, 0, 0, v7);
            objc_msgSend_setRecvConnectedAck_(v16, v266, 1, v267);
            v246 = self->_remoteGlobalLinkVersion;
          }
          if (v246 >= 1)
          {
            if (self->_isInitiator
              || self->_delaySessionConnected
              || !self->_enableSKE
              || self->_skeToRemoteComplete
              || objc_msgSend_sentSKEData(v16, v199, v200, v201))
            {
              objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v199, 32769, v201, 0, 0, v7, v271, v274, v276, v277, v278);
            }
            else
            {
              objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v199, 1, v201, 0, 0, v7, v271, v274, v276, v277, v278);
            }
          }
          goto LABEL_158;
        }
        v135 = objc_alloc(MEMORY[0x1E0CB3A28]);
        v140 = (char *)objc_msgSend_initWithUUIDBytes_(v135, v136, (uint64_t)&v298, v137);
        if (v140)
        {
          objc_msgSend_linkUUID(v16, v138, v139, v141);
          v142 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend_isEqual_(v140, v143, (uint64_t)v142, v144) & 1) == 0)
          {
            v145 = !self->_isInitiator;

            if (!v145)
              goto LABEL_125;
            objc_msgSend_setLinkUUID_(v16, v146, (uint64_t)v140, v147);
            OSLogHandleForTransportCategory();
            v148 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v16, v149, v150, v151);
              v152 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v286 = 138412546;
              *(_QWORD *)&v286[4] = v140;
              *(_WORD *)&v286[12] = 2112;
              *(_QWORD *)&v286[14] = v152;
              _os_log_impl(&dword_19B949000, v148, OS_LOG_TYPE_DEFAULT, "update linkUUID %@ for %@.", v286, 0x16u);

            }
            if (!os_log_shim_legacy_logging_enabled())
              goto LABEL_125;
            if (!_IDSShouldLogTransport())
              goto LABEL_125;
            objc_msgSend_candidatePairToken(v16, v153, v154, v155);
            v270 = v140;
            v273 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update linkUUID %@ for %@."));

            if (!_IDSShouldLog())
              goto LABEL_125;
            objc_msgSend_candidatePairToken(v16, v156, v157, v158, v140, *(_QWORD *)&v273);
            v142 = (void *)objc_claimAutoreleasedReturnValue();
            v270 = v140;
            v273 = *(double *)&v142;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update linkUUID %@ for %@."));
          }

        }
LABEL_125:

        goto LABEL_126;
      }
    }
  }
  OSLogHandleForTransportCategory();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair.", (uint8_t *)buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair."));
    }
  }
  v16 = 0;
LABEL_18:

}

- (void)_processCommandDisconnected:(id)a3 candidatePairToken:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  void *Value;
  id v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  NSObject *v23;
  char *v24;
  const char *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  const char *v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  double v38;
  IDSGlobalLink *v39;
  char *v40;
  char *v41;
  uint8_t buf[4];
  IDSGlobalLink *v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v11 = objc_msgSend_command(v6, v8, v9, v10);
  Value = 0;
  if (v7 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v7);
  v13 = Value;
  v16 = v13;
  if (v11 == 2)
  {
    objc_msgSend_setRecvDisconnected_(v13, v14, 1, v15);
    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v17, 32770, v18, 0, 0, v7);
    if (self->_allowOnlyOneQR && self->_state <= 4)
    {
      OSLogHandleForTransportCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v43 = self;
        _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "Disconnecting IDSGlobalLink %@, remote side is disconnecting.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v39 = self;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Disconnecting IDSGlobalLink %@, remote side is disconnecting."));
          if (_IDSShouldLog())
          {
            v39 = self;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Disconnecting IDSGlobalLink %@, remote side is disconnecting."));
          }
        }
      }
      OSLogHandleForTransportCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412802;
        v43 = self;
        v44 = 2080;
        v45 = v24;
        v46 = 2080;
        v47 = off_1EE40A128[0];
        _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "update GL %@ state (%s->%s).", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v40 = _IDSLinkStateStrings[self->_state];
          v41 = off_1EE40A128[0];
          v39 = self;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update GL %@ state (%s->%s)."));
          if (_IDSShouldLog())
          {
            v40 = _IDSLinkStateStrings[self->_state];
            v41 = off_1EE40A128[0];
            v39 = self;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update GL %@ state (%s->%s)."));
          }
        }
      }
      self->_state = 5;
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v25, 2, v26, 0, 0, v7, v39, v40, v41);
      objc_msgSend__startDisconnectTimer(self, v27, v28, v29);
    }
  }
  else
  {
    objc_msgSend_setRecvDisconnectedAck_(v13, v14, 1, v15);
  }
  if (objc_msgSend_recvDisconnected(v16, v19, v20, v21)
    && objc_msgSend_recvDisconnectedAck(v16, v30, v31, v32))
  {
    objc_msgSend__stopDisconnectTimer(self, v33, v34, v35);
    objc_msgSend__discardAllCandidatePairs(self, v36, v37, v38);
  }

}

- (void)_processCommandHeartbeat:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5 remoteRelayLinkID:(unsigned __int16)a6
{
  uint64_t v6;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  void *Value;
  id v17;
  const char *v18;
  double v19;
  unsigned __int16 v20;
  const char *v21;
  double v22;
  int Attribute_attribute;
  const char *v24;
  uint64_t v25;
  double v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  double v36;
  void *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  double v41;
  int v42;
  __CFDictionary *v43;
  const char *v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  double v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  const char *v67;
  double v68;
  double v69;
  double v70;
  NSObject *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  int isActive;
  const __CFString *v76;
  const char *v77;
  uint64_t v78;
  const void *v79;
  double v80;
  void *v81;
  IDSGlobalLink *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  double v86;
  CFMutableDictionaryRef *p_linkIDToReorderedPackets;
  void *v88;
  CFMutableDictionaryRef v89;
  CFMutableDictionaryRef v90;
  void *v91;
  void *v92;
  id v93;
  const char *v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  void *v100;
  const char *v101;
  double v102;
  void *v103;
  const char *v104;
  double v105;
  int isEqualToNumber;
  uint64_t v107;
  const char *v108;
  double v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  double v115;
  void *v116;
  const char *v117;
  double v118;
  CFMutableDictionaryRef Mutable;
  NSMutableDictionary *linkIDToRequestTimeStampAndRTT;
  const char *v121;
  double v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  double v127;
  NSObject *v128;
  const char *v129;
  uint64_t v130;
  double v131;
  float v132;
  id WeakRetained;
  char v134;
  id v135;
  const char *v136;
  double v137;
  double v138;
  int v139;
  const char *v140;
  unsigned int v141;
  double v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  double v146;
  NSObject *v147;
  void *v148;
  const char *v149;
  double v150;
  void *v151;
  void *key;
  void *v153;
  IDSGlobalLink *v154;
  void *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _QWORD v160[2];
  uint8_t v161[128];
  uint8_t buf[4];
  _BYTE v163[10];
  __int16 v164;
  _BYTE v165[10];
  _BYTE v166[6];
  int v167;
  __int16 v168;
  unsigned int v169;
  __int16 v170;
  double v171;
  _DWORD v172[3];
  _BYTE v173[12];
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  _BYTE v177[8];
  unsigned __int16 v178;
  uint64_t v179;

  v6 = a6;
  v179 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v15 = objc_msgSend_command(v10, v12, v13, v14);
  Value = 0;
  if (v11 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v11);
  v155 = v11;
  v17 = Value;
  bzero(v177, 0x410uLL);
  if (objc_msgSend_getAttribute_attribute_(v10, v18, 1, v19, v177))
    v20 = v178;
  else
    v20 = 0;
  bzero(v173, 0x410uLL);
  v153 = v10;
  Attribute_attribute = objc_msgSend_getAttribute_attribute_(v10, v21, 10, v22, v173);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (Attribute_attribute)
  {
    v27 = ntpTime32(a5);
    v30 = bswap32(v174);
    v29 = bswap32(v175);
    v28 = bswap32(v176);
  }
  v154 = self;
  if ((_DWORD)v6)
  {
    v31 = objc_msgSend_relayLinkID(v17, v24, v25, v26);
    localRemoteRelayLinkIDForVirtualStunCandidatePair(v31, (const char *)v6, v32);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = 0;
    if (self->_localRemoteRelayLinkIDToVirtualCandidatePairs && v35)
      v37 = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_localRemoteRelayLinkIDToVirtualCandidatePairs, v35);
    v38 = objc_msgSend_linkID(v37, v33, v34, v36);

  }
  else
  {
    v38 = objc_msgSend_linkID(v17, v24, v25, v26);
  }
  if (v15 == 32771)
  {
    if (objc_msgSend_pendingRealloc(v17, v39, v40, v41))
    {
      objc_msgSend_local(v17, v47, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend_address(v50, v51, v52, v53);

      objc_msgSend_remote(v17, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v62 = objc_msgSend_external(v58, v59, v60, v61);

      v66 = objc_msgSend_channelNumber(v17, v63, v64, v65);
      objc_msgSend__processDataOnReallocChannel_localAddress_remoteAddress_(v154, v67, v66, v68, v54, v62);
    }
    if ((_DWORD)v29)
    {
      v69 = (double)((v27 - (v28 + v29)) >> 16);
      v70 = (double)(unsigned __int16)(v27 - (v28 + v29)) * 0.0000152587891 + v69;
      objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v69);
      v71 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        isActive = objc_msgSend_isActive(v17, v72, v73, v74);
        *(_DWORD *)buf = 67110658;
        v76 = CFSTR("NO");
        *(_DWORD *)v163 = v38;
        *(_WORD *)&v163[4] = 1024;
        if (isActive)
          v76 = CFSTR("YES");
        *(_DWORD *)&v163[6] = v20;
        v164 = 2112;
        *(_QWORD *)v165 = v76;
        *(_WORD *)&v165[8] = 1024;
        *(_DWORD *)v166 = v27;
        *(_WORD *)&v166[4] = 1024;
        v167 = v29;
        v168 = 1024;
        v169 = v28;
        v170 = 2048;
        v171 = v70;
        _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "receive rtt response on link %d (counter:%04x active:%@ a:%08x e:%08x, d:%08x), rtt:%.6f sec).", buf, 0x34u);
      }

    }
    else
    {
      v70 = 0.0;
    }
    if ((int)v38 < 1)
      goto LABEL_65;
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v47, v38, v49);
    v79 = (const void *)objc_claimAutoreleasedReturnValue();
    v81 = 0;
    v82 = v154;
    if (v154->_linkIDToHBCounter && v79)
      v81 = (void *)CFDictionaryGetValue((CFDictionaryRef)v154->_linkIDToHBCounter, v79);
    v83 = objc_msgSend_unsignedShortValue(v81, v77, v78, v80);
    if (v20 - v83 >= 0x8000)
    {
      if (v83 == v20)
      {
LABEL_47:
        v92 = 0;
        if (v82->_linkIDToRequestTimeStampAndRTT && v79)
          v92 = (void *)CFDictionaryGetValue((CFDictionaryRef)v82->_linkIDToRequestTimeStampAndRTT, v79);
        key = (void *)v79;
        v156 = 0u;
        v157 = 0u;
        v158 = 0u;
        v159 = 0u;
        v93 = v92;
        v96 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v94, (uint64_t)&v156, v95, v161, 16);
        if (v96)
        {
          v97 = v96;
          v98 = *(_QWORD *)v157;
          while (2)
          {
            for (i = 0; i != v97; ++i)
            {
              if (*(_QWORD *)v157 != v98)
                objc_enumerationMutation(v93);
              v100 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v101, v29, v102);
                v103 = (void *)objc_claimAutoreleasedReturnValue();
                isEqualToNumber = objc_msgSend_isEqualToNumber_(v100, v104, (uint64_t)v103, v105);

                if (isEqualToNumber)
                {
                  v107 = objc_msgSend_indexOfObject_(v93, v101, (uint64_t)v100, v102);
                  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v108, v29, v109);
                  v110 = (void *)objc_claimAutoreleasedReturnValue();
                  v160[0] = v110;
                  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v111, v112, v70);
                  v113 = (void *)objc_claimAutoreleasedReturnValue();
                  v160[1] = v113;
                  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v114, (uint64_t)v160, v115, 2);
                  v116 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_replaceObjectAtIndex_withObject_(v93, v117, v107, v118, v116);

                  if (!v154->_linkIDToRequestTimeStampAndRTT)
                  {
                    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    linkIDToRequestTimeStampAndRTT = v154->_linkIDToRequestTimeStampAndRTT;
                    v154->_linkIDToRequestTimeStampAndRTT = (NSMutableDictionary *)Mutable;

                  }
                  if (v93)
                    CFDictionarySetValue((CFMutableDictionaryRef)v154->_linkIDToRequestTimeStampAndRTT, key, v93);
                  goto LABEL_64;
                }
              }
            }
            v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v101, (uint64_t)&v156, v102, v161, 16, key);
            if (v97)
              continue;
            break;
          }
        }
LABEL_64:

LABEL_65:
        if (v17 && objc_msgSend_hbStarted(v17, v47, v48, v49))
        {
          objc_msgSend_setHbStarted_(v17, v121, 0, v122);
          objc_msgSend_setHbStartTime_(v17, v123, v124, 0.0);
          objc_msgSend_GlobalLink(IDSFoundationLog, v125, v126, v127);
          v128 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v163 = v155;
            _os_log_impl(&dword_19B949000, v128, OS_LOG_TYPE_DEFAULT, "stop HB request for %@.", buf, 0xCu);
          }

          if (objc_msgSend_isActive(v17, v129, v130, v131))
          {
            if (v70 > 0.0)
            {
              v132 = v70 * 1000.0;
              GLUtilReportAWDActiveLinkRTT(v17, v154->_enableSKE, v154->_isInitiator, v132);
              GLUCreateQRActiveLinkRTTEvent(v17, v132);
              v43 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
              WeakRetained = objc_loadWeakRetained((id *)&v154->_delegate);
              v134 = objc_opt_respondsToSelector();

              if ((v134 & 1) != 0)
              {
                v135 = objc_loadWeakRetained((id *)&v154->_delegate);
                objc_msgSend_link_didAddQREvent_(v135, v136, (uint64_t)v154, v137, v43);

              }
              goto LABEL_96;
            }
          }
        }
        goto LABEL_97;
      }
      v88 = 0;
      p_linkIDToReorderedPackets = (CFMutableDictionaryRef *)&v154->_linkIDToReorderedPackets;
      if (v154->_linkIDToReorderedPackets && v79)
        v88 = (void *)CFDictionaryGetValue((CFDictionaryRef)v154->_linkIDToReorderedPackets, v79);
      v20 = objc_msgSend_unsignedShortValue(v88, v84, v85, v86) + 1;
    }
    else
    {
      p_linkIDToReorderedPackets = (CFMutableDictionaryRef *)&v154->_linkIDToHBCounter;
    }
    if (!*p_linkIDToReorderedPackets)
    {
      v89 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v90 = *p_linkIDToReorderedPackets;
      *p_linkIDToReorderedPackets = v89;

    }
    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v84, v20, v86);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    if (v91)
      CFDictionarySetValue(*p_linkIDToReorderedPackets, v79, v91);

    v82 = v154;
    goto LABEL_47;
  }
  if (v15 == 3)
  {
    v42 = v20;
    if (v20)
    {
      v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v44, v20, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      if (v46)
      {
        CFDictionarySetValue(v43, CFSTR("gl-attr-counter"), v46);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF2214();
      }

      if (!v30)
        goto LABEL_85;
    }
    else
    {
      v43 = 0;
      if (!v30)
      {
LABEL_85:
        if ((_DWORD)v6)
        {
          objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v39, v38, v41);
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          if (v148)
          {
            CFDictionarySetValue(v43, CFSTR("gl-attr-active-probing-link-id"), v148);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF2114();
          }

          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v149, v6, v150);
          v151 = (void *)objc_claimAutoreleasedReturnValue();
          if (v151)
          {
            CFDictionarySetValue(v43, CFSTR("gl-attr-remote-relay-link-id"), v151);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF2094();
          }

        }
        objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v154, v39, 32771, v41, 0, v43, v155);
LABEL_96:

        goto LABEL_97;
      }
    }
    v172[0] = 0;
    v172[1] = bswap32(v30);
    v138 = ids_monotonic_time();
    v139 = ntpTime32(v138);
    v141 = v139 - ntpTime32(a5);
    v172[2] = bswap32(v141);
    if (!v43)
      v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v140, (uint64_t)v172, v142, 12);
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    if (v143)
    {
      CFDictionarySetValue(v43, CFSTR("gl-attr-rttreport"), v143);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF2194();
    }

    objc_msgSend_GlobalLink(IDSFoundationLog, v144, v145, v146);
    v147 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)v163 = v38;
      *(_WORD *)&v163[4] = 1024;
      *(_DWORD *)&v163[6] = v42;
      v164 = 1024;
      *(_DWORD *)v165 = v30;
      *(_WORD *)&v165[4] = 1024;
      *(_DWORD *)&v165[6] = v30;
      *(_WORD *)v166 = 1024;
      *(_DWORD *)&v166[2] = v141;
      _os_log_impl(&dword_19B949000, v147, OS_LOG_TYPE_DEFAULT, "receive rtt request on link %d (counter:%04x m:%08x), send resp (e:%08x d:%08x).", buf, 0x20u);
    }

    goto LABEL_85;
  }
LABEL_97:

}

- (void)_processCommandConnectionData:(id)a3 candidatePairToken:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  void *v18;
  const char *v19;
  double v20;
  NSObject *v21;
  const char *v22;
  double v23;
  const char *v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  double v33;
  void *v34;
  const char *v35;
  double v36;
  NSObject *v37;
  const char *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  NSObject *v43;
  _BOOL4 v44;
  NSObject *v45;
  _BOOL4 v46;
  NSObject *v47;
  void *v48;
  id pendingCommandConnectionDataBlock;
  const char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  const char *v54;
  double v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[4];
  id v63;
  id v64;
  id v65;
  unsigned __int16 v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  uint64_t v70;
  id __b[130];

  __b[129] = *(id *)MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v66 = 0;
  if ((GLUtilHasValidUInt16Attr(v6, 1, &v66) & 1) != 0)
  {
    if (self->_isUPlusOneSession && !self->_receivedRemoteDeviceVersion)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v8, v9, v10);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__b[0]) = 0;
        _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "[U+1] no remote device version received yet. Saving incoming ConnectionData[Ack] for later", (uint8_t *)__b, 2u);
      }

      __b[0] = (id)0xAAAAAAAAAAAAAAAALL;
      objc_initWeak(__b, self);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = sub_19B9DF348;
      aBlock[3] = &unk_1E3C1FFF0;
      objc_copyWeak(&v65, __b);
      v63 = v6;
      v64 = v7;
      v48 = _Block_copy(aBlock);
      pendingCommandConnectionDataBlock = self->_pendingCommandConnectionDataBlock;
      self->_pendingCommandConnectionDataBlock = v48;

      objc_destroyWeak(&v65);
      objc_destroyWeak(__b);
    }
    else
    {
      if (objc_msgSend_command(v6, v8, v9, v10) == 4)
      {
        memset(__b, 170, 0x400uLL);
        v61 = 0;
        if ((GLUtilHasValidBinaryDataAttr(v6, 3, __b, &v61) & 1) == 0)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v16);
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "_processCommandConnectionData failed due to invalid data.", buf, 2u);
          }
          goto LABEL_36;
        }
        v17 = (void *)MEMORY[0x1E0C99D80];
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v14, v66, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dictionaryWithObject_forKey_(v17, v19, (uint64_t)v18, v20, CFSTR("gl-attr-counter"));
        v21 = objc_claimAutoreleasedReturnValue();

        objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v22, 32772, v23, 0, v21, v7);
        if (self->_allowP2P)
        {
          if (self->_remoteConnDataCounter < v66)
          {
            self->_remoteConnDataCounter = v66;
            OSLogHandleForTransportCategory();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              v68 = v66;
              v69 = 2048;
              v70 = v61;
              _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "receive connection data(count:%u, length:%zdB).", buf, 0x12u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v59 = v66;
                v60 = v61;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive connection data(count:%u, length:%zdB)."));
                if (_IDSShouldLog())
                {
                  v59 = v66;
                  v60 = v61;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive connection data(count:%u, length:%zdB)."));
                }
              }
            }
            objc_msgSend_sharedInstance(IDSStunConnectionDataController, v28, v29, v30, v59, v60);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v32, (uint64_t)__b, v33, v61);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_candidatesFromData_token_(v31, v35, (uint64_t)v34, v36, self->_cbuuid);
            v37 = objc_claimAutoreleasedReturnValue();

            objc_msgSend__processRemoteCandidates_(self, v38, (uint64_t)v37, v39);
            objc_msgSend__setupRelayConnectionForNetworkAddressChanges(self, v40, v41, v42);
            goto LABEL_35;
          }
          objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v68 = v66;
            v56 = "receive old conn data(count:%u), ignore.";
            v57 = v37;
            v58 = 8;
            goto LABEL_34;
          }
        }
        else
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v56 = "P2P is not allowed, skip processing remote connection data.";
            v57 = v37;
            v58 = 2;
LABEL_34:
            _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, v56, buf, v58);
          }
        }
LABEL_35:

LABEL_36:
        goto LABEL_37;
      }
      v44 = self->_localConnDataCounter > v66;
      objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (v44)
      {
        if (v46)
        {
          LODWORD(__b[0]) = 67109120;
          HIDWORD(__b[0]) = v66;
          _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "receive connection data ack(count:%u), ignore.", (uint8_t *)__b, 8u);
        }

      }
      else
      {
        if (v46)
        {
          LODWORD(__b[0]) = 67109120;
          HIDWORD(__b[0]) = v66;
          _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "receive connection data ack(count:%u).", (uint8_t *)__b, 8u);
        }

        objc_msgSend_sharedInstance(IDSStunConnectionDataController, v50, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setDeliveryStatus_status_(v53, v54, (uint64_t)self->_cbuuid, v55, 2);

      }
    }
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v8, v9, v10);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__b[0]) = 0;
      _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "_processCommandConnectionData failed due to invalid counter.", (uint8_t *)__b, 2u);
    }

  }
LABEL_37:

}

- (void)_processCommandNominate:(id)a3 candidatePairToken:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  double v13;
  uint64_t v14;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v16;
  void *v17;
  char v18;
  NSObject *v19;
  NSMutableDictionary *tokenToStunCheckPairs;
  void *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  double v29;
  const char *v30;
  double v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  double v37;
  __CFDictionary *v38;
  const char *v39;
  double v40;
  void *v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const char *v47;
  double v48;
  const char *v49;
  double v50;
  uint64_t v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  id v55;
  _BYTE v56[8];
  unsigned __int16 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v11 = objc_msgSend_command(v6, v8, v9, v10);
  bzero(v56, 0x410uLL);
  if ((objc_msgSend_getAttribute_attribute_(v6, v12, 1, v13, v56) & 1) != 0)
  {
    v14 = v57;
    if (v7
      && (tokenToCandidatePairs = self->_tokenToCandidatePairs) != 0
      && (v16 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v7)) != 0)
    {
      v17 = v16;
      v18 = 0;
    }
    else
    {
      if (!v7
        || (tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
        || (v21 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v7)) == 0)
      {
        OSLogHandleForTransportCategory();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          v53 = (unsigned __int16)v11;
          v54 = 2112;
          v55 = v7;
          _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "failed to process session command %04x due to invalid candidate pair for %@.", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to process session command %04x due to invalid candidate pair for %@."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to process session command %04x due to invalid candidate pair for %@."));
          }
        }
        v17 = 0;
        goto LABEL_31;
      }
      v17 = v21;
      v18 = 1;
    }
    if (v11 == 5)
    {
      if (self->_isInitiator)
      {
        OSLogHandleForTransportCategory();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "receive nomination while being Initiator, this shouldn't happen.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive nomination while being Initiator, this shouldn't happen."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive nomination while being Initiator, this shouldn't happen."));
          }
        }
      }
      else if (self->_nominateCount <= (int)v14)
      {
        OSLogHandleForTransportCategory();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v53 = v14;
          _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "receive new nomination #%d.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v51 = v14;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive new nomination #%d."));
            if (_IDSShouldLog())
            {
              v51 = v14;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive new nomination #%d."));
            }
          }
        }
        self->_nominateCount = v14;
        objc_msgSend__updateNominatedCandidatePair_(self, v36, (uint64_t)v7, v37, v51);
        v38 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v39, v14, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if (v41)
        {
          CFDictionarySetValue(v38, CFSTR("gl-attr-counter"), v41);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF2214();
        }

        objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v42, 32773, v43, 0, v38, v7);
        if ((v18 & 1) == 0 && (objc_msgSend_isActive(v17, v44, v45, v46) & 1) == 0)
        {
          objc_msgSend__updateDefaultCandidatePair_(self, v47, (uint64_t)v17, v48);
          objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(self, v49, (uint64_t)v7, v50, 0);
        }

      }
      else
      {
        OSLogHandleForTransportCategory();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v53 = v14;
          _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "receive old nomination #%d.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive old nomination #%d."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive old nomination #%d."));
          }
        }
      }
    }
    else if (self->_isInitiator)
    {
      if (self->_nominateCount == (_DWORD)v14)
      {
        OSLogHandleForTransportCategory();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v53 = v14;
          _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "nomination #%d is accepted.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("nomination #%d is accepted."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("nomination #%d is accepted."));
          }
        }
        if ((v18 & 1) == 0 && (objc_msgSend_isActive(v17, v25, v26, v27) & 1) == 0)
        {
          objc_msgSend__updateDefaultCandidatePair_(self, v28, (uint64_t)v17, v29);
          objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(self, v30, (uint64_t)v7, v31, 0);
        }
      }
      else
      {
        OSLogHandleForTransportCategory();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v53 = v14;
          _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "receive nomination #%d ack, ignore.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive nomination #%d ack, ignore."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive nomination #%d ack, ignore."));
          }
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "receive nomination ack while being Receiver, this shouldn't happen.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive nomination ack while being Receiver, this shouldn't happen."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive nomination ack while being Receiver, this shouldn't happen."));
        }
      }
    }
LABEL_31:

    goto LABEL_32;
  }
  OSLogHandleForTransportCategory();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v53 = (unsigned __int16)v11;
    _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "missing nominate count in command %04x.", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("missing nominate count in command %04x."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("missing nominate count in command %04x."));
    }
  }
LABEL_32:

}

- (void)_sendConnectionDataWithRemovedAddressList:(id)a3
{
  const char *v4;
  id v5;
  double v6;
  int64_t delayFirstConnectionData;
  NSObject *v8;
  int64_t v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  delayFirstConnectionData = self->_delayFirstConnectionData;
  if (delayFirstConnectionData < 1)
  {
    if (!delayFirstConnectionData)
      objc_msgSend__sendNowConnectionDataWithRemovedAddressList_(self, v4, (uint64_t)v5, v6);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = self->_delayFirstConnectionData;
      *(_DWORD *)buf = 134217984;
      v13 = v9;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "delaying first connection data transmission by %lu ms", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("delaying first connection data transmission by %lu ms"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("delaying first connection data transmission by %lu ms"));
      }
    }
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_19B9DFE8C;
    v10[3] = &unk_1E3C1FA08;
    v10[4] = self;
    v11 = v5;
    IDSTransportThreadAddBlockAfter(v10, (double)self->_delayFirstConnectionData / 1000.0);
    self->_delayFirstConnectionData = -self->_delayFirstConnectionData;

  }
}

- (void)_sendNowConnectionDataWithRemovedAddressList:(id)a3
{
  id v4;
  id v5;
  const char *v6;
  double v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  char v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  double v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  uint64_t v33;
  const char *v34;
  double v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  id v41;
  const char *v42;
  uint64_t v43;
  double v44;
  int v45;
  const char *v46;
  uint64_t v47;
  double v48;
  const char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  const char *v55;
  double v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  const char *v74;
  double v75;
  void *v76;
  const char *v77;
  double v78;
  char v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  double v83;
  NSObject *v84;
  int localConnDataCounter;
  const char *v86;
  double v87;
  void *v88;
  void *v89;
  const char *v90;
  double v91;
  void *v92;
  const char *v93;
  double v94;
  NSObject *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id obj;
  IDSGlobalLink *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint8_t v111[128];
  uint8_t buf[4];
  _BYTE v113[14];
  _BYTE v114[128];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v99 = v4;
  if (self->_allowP2P)
  {
    v102 = self;
    self->_delayedConnData = 1;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v5 = v4;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v107, v7, v114, 16);
    v11 = 0;
    if (v10)
    {
      v12 = *(_QWORD *)v108;
      v13 = 138412546;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v108 != v12)
            objc_enumerationMutation(v5);
          v15 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * i);
          v16 = (void *)MEMORY[0x1E0CB37E8];
          v17 = objc_msgSend_index(v15, v8, v9, *(double *)&v13, v97, v98);
          objc_msgSend_numberWithUnsignedInt_(v16, v18, v17, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend_containsObject_(v11, v21, (uint64_t)v20, v22);

          if ((v23 & 1) == 0)
          {
            if (v11 || (v11 = objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
            {
              v24 = (void *)MEMORY[0x1E0CB37E8];
              v25 = objc_msgSend_index(v15, v8, v9, *(double *)&v13);
              objc_msgSend_numberWithUnsignedInt_(v24, v26, v25, v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              LOBYTE(v24) = v28 == 0;

              if ((v24 & 1) == 0)
              {
                v32 = (void *)MEMORY[0x1E0CB37E8];
                v33 = objc_msgSend_index(v15, v29, v30, v31);
                objc_msgSend_numberWithUnsignedInt_(v32, v34, v33, v35);
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                CFArrayAppendValue((CFMutableArrayRef)v11, v36);

              }
            }
            OSLogHandleForTransportCategory();
            v37 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_name(v15, v38, v39, v40);
              v41 = (id)objc_claimAutoreleasedReturnValue();
              v45 = objc_msgSend_index(v15, v42, v43, v44);
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)v113 = v41;
              *(_WORD *)&v113[8] = 1024;
              *(_DWORD *)&v113[10] = v45;
              _os_log_impl(&dword_19B949000, v37, OS_LOG_TYPE_DEFAULT, "removed if_index [%@:%d].", buf, 0x12u);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_name(v15, v8, v9, *(double *)&v13);
                v97 = objc_claimAutoreleasedReturnValue();
                v98 = objc_msgSend_index(v15, v46, v47, v48);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("removed if_index [%@:%d]."));

                if (_IDSShouldLog())
                {
                  objc_msgSend_name(v15, v8, v9, *(double *)&v13, v97, v98);
                  v97 = objc_claimAutoreleasedReturnValue();
                  v98 = objc_msgSend_index(v15, v49, v50, v51);
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("removed if_index [%@:%d]."));

                }
              }
            }
          }
        }
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v107, *(double *)&v13, v114, 16);
      }
      while (v10);
    }

    objc_msgSend_allValues(v102->_tokenToCandidatePairs, v52, v53, v54);
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v103, v56, v111, 16);
    if (!v59)
    {
      v100 = 0;
      goto LABEL_51;
    }
    v100 = 0;
    v60 = 0;
    v61 = *(_QWORD *)v104;
    v62 = 67109378;
    while (1)
    {
      for (j = 0; j != v59; ++j)
      {
        if (*(_QWORD *)v104 != v61)
          objc_enumerationMutation(obj);
        v64 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * j);
        objc_msgSend_local(v64, v57, v58, *(double *)&v62, v97, v98);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = objc_msgSend_index(v65, v66, v67, v68);

        v73 = objc_msgSend_state(v64, v70, v71, v72);
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v74, v69, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = objc_msgSend_containsObject_(v11, v77, (uint64_t)v76, v78);

        if ((v79 & 1) == 0)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v64, v57, v58, *(double *)&v62))
          {
            if (v73 != 4)
              continue;
          }
          else if (v73 != 3)
          {
            continue;
          }
          objc_msgSend_candidatePairToken(v64, v57, v58, *(double *)&v62);
          v80 = objc_claimAutoreleasedReturnValue();

          if ((v60 & 1) == 0)
          {
            objc_msgSend_sharedInstance(IDSStunConnectionDataController, v57, v58, *(double *)&v62);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_removeData_(v81, v82, (uint64_t)v102->_cbuuid, v83);

            ++v102->_localConnDataCounter;
          }
          if (v80)
          {
            v102->_delayedConnData = 0;
            OSLogHandleForTransportCategory();
            v84 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              localConnDataCounter = v102->_localConnDataCounter;
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)v113 = localConnDataCounter;
              *(_WORD *)&v113[4] = 2112;
              *(_QWORD *)&v113[6] = v80;
              _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "send connection data (count:%d) using %@.", buf, 0x12u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v97 = v102->_localConnDataCounter;
                v98 = v80;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send connection data (count:%d) using %@."));
                if (_IDSShouldLog())
                {
                  v97 = v102->_localConnDataCounter;
                  v98 = v80;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send connection data (count:%d) using %@."));
                }
              }
            }
            v88 = (void *)MEMORY[0x1E0C99D80];
            objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v86, v102->_localConnDataCounter, v87, v97, v98);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            v97 = (uint64_t)CFSTR("gl-attr-counter");
            v98 = 0;
            objc_msgSend_dictionaryWithObjectsAndKeys_(v88, v90, (uint64_t)v89, v91);
            v92 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v102, v93, 4, v94, 0, v92, v80);
            v60 = 1;
            v100 = (void *)v80;
          }
          else
          {
            v100 = 0;
            v60 = 1;
          }
        }
      }
      v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v103, *(double *)&v62, v111, 16);
      if (!v59)
      {
LABEL_51:

        if (v102->_delayedConnData)
        {
          OSLogHandleForTransportCategory();
          v96 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v96, OS_LOG_TYPE_DEFAULT, "delay sending connection data, no link is available.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("delay sending connection data, no link is available."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("delay sending connection data, no link is available."));
            }
          }
        }

        goto LABEL_59;
      }
    }
  }
  OSLogHandleForTransportCategory();
  v95 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v95, OS_LOG_TYPE_DEFAULT, "P2P is not allowed, skip sending connection data.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("P2P is not allowed, skip sending connection data."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("P2P is not allowed, skip sending connection data."));
    }
  }
LABEL_59:

}

- (void)_handleDisconnectTimer
{
  NSObject *v3;
  OS_dispatch_source *disconnectTimer;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  OS_dispatch_source *v11;
  uint8_t buf[4];
  OS_dispatch_source *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    disconnectTimer = self->_disconnectTimer;
    *(_DWORD *)buf = 134217984;
    v13 = disconnectTimer;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "disconnect timer %p fired.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v11 = self->_disconnectTimer;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("disconnect timer %p fired."));
      if (_IDSShouldLog())
      {
        v11 = self->_disconnectTimer;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("disconnect timer %p fired."));
      }
    }
  }
  objc_msgSend__discardAllCandidatePairs(self, v5, v6, v7, v11);
  objc_msgSend__stopDisconnectTimer(self, v8, v9, v10);
}

- (void)_startDisconnectTimer
{
  NSObject *disconnectTimer;
  NSObject *v4;
  OS_dispatch_source *v5;
  OS_dispatch_source *v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  NSObject *v10;
  OS_dispatch_source *v11;
  _QWORD handler[5];
  uint8_t buf[4];
  OS_dispatch_source *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  disconnectTimer = self->_disconnectTimer;
  if (disconnectTimer)
    dispatch_source_cancel(disconnectTimer);
  im_primary_queue();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (OS_dispatch_source *)dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v4);
  v6 = self->_disconnectTimer;
  self->_disconnectTimer = v5;

  v7 = self->_disconnectTimer;
  v8 = dispatch_time(0, 3000000000);
  dispatch_source_set_timer(v7, v8, 0xB2D05E00uLL, 0x5F5E100uLL);
  v9 = self->_disconnectTimer;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = sub_19B9E09AC;
  handler[3] = &unk_1E3C1F898;
  handler[4] = self;
  dispatch_source_set_event_handler(v9, handler);
  dispatch_resume((dispatch_object_t)self->_disconnectTimer);
  OSLogHandleForTransportCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = self->_disconnectTimer;
    *(_DWORD *)buf = 134217984;
    v14 = v11;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "start disconnect timer %p.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start disconnect timer %p."));
    if (_IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start disconnect timer %p."));
  }
}

- (void)_stopDisconnectTimer
{
  NSObject *disconnectTimer;
  NSObject *v4;
  OS_dispatch_source *v5;
  OS_dispatch_source *v6;
  uint8_t buf[4];
  OS_dispatch_source *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  disconnectTimer = self->_disconnectTimer;
  if (disconnectTimer)
  {
    dispatch_source_cancel(disconnectTimer);
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = self->_disconnectTimer;
      *(_DWORD *)buf = 134217984;
      v8 = v5;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "stop disconnect timer %p.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stop disconnect timer %p."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stop disconnect timer %p."));
    }
    v6 = self->_disconnectTimer;
    self->_disconnectTimer = 0;

  }
}

- (void)_handleActivityTimer
{
  double v2;
  NSObject *v3;
  OS_dispatch_source *activityTimer;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t i;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  double v25;
  int isActive;
  const char *v27;
  uint64_t v28;
  double v29;
  int isRelayStunCandidatePair;
  const char *v31;
  uint64_t v32;
  double v33;
  char isSelfQRSession;
  const char *v35;
  uint64_t v36;
  double v37;
  char isSharedQRSession;
  char v39;
  char v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  int isInternalInstall;
  const char *v46;
  uint64_t v47;
  double v48;
  const char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  int isQUIC;
  const char *v60;
  uint64_t v61;
  double v62;
  const char *v63;
  void *v64;
  double v65;
  double v66;
  double v67;
  const char *v68;
  uint64_t v69;
  double v70;
  double v71;
  const char *v72;
  uint64_t v73;
  double v74;
  double v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  double *v82;
  double v83;
  const char *v84;
  double v85;
  double *v86;
  double *v87;
  const char *v88;
  uint64_t v89;
  unsigned int v90;
  const char *v91;
  uint64_t v92;
  double v93;
  const char *v94;
  double v95;
  NSMutableDictionary *linkIDToStatsData;
  void *v97;
  const char *v98;
  double v99;
  void *v100;
  NSMutableDictionary *v101;
  const char *v102;
  double v103;
  void *v104;
  const char *v105;
  double v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  double v110;
  const char *v111;
  uint64_t v112;
  double v113;
  CFMutableDictionaryRef Mutable;
  const char *v115;
  double v116;
  double natMappingTimeout;
  NSObject *v118;
  double v119;
  const char *v120;
  uint64_t v121;
  double v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  double v126;
  const __CFString *v127;
  int v128;
  const __CFString *v129;
  int v130;
  const char *v131;
  uint64_t v132;
  double v133;
  void *v134;
  const char *v135;
  double v136;
  double v137;
  NSObject *v138;
  const char *v139;
  uint64_t v140;
  double v141;
  void *v142;
  const char *v143;
  double v144;
  NSObject *v145;
  const char *v146;
  uint64_t v147;
  double v148;
  OS_dispatch_source *v149;
  uint64_t v150;
  double v151;
  id obj;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint8_t buf[4];
  void *v159;
  __int16 v160;
  double v161;
  __int16 v162;
  const __CFString *v163;
  __int16 v164;
  const __CFString *v165;
  _BYTE v166[128];
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v2 = ids_monotonic_time();
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    activityTimer = self->_activityTimer;
    *(_DWORD *)buf = 134218240;
    v159 = activityTimer;
    v160 = 2048;
    v161 = v2;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "activity timer %p fired (%.6f).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v151 = v2;
      v149 = self->_activityTimer;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("activity timer %p fired (%.6f)."));
      if (_IDSShouldLog())
      {
        v151 = v2;
        v149 = self->_activityTimer;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("activity timer %p fired (%.6f)."));
      }
    }
  }
  if (self->_state != 4)
  {
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      v159 = v8;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "GL state is [%s], stop activity timer.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v149 = (OS_dispatch_source *)_IDSLinkStateStrings[self->_state];
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GL state is [%s], stop activity timer."));
        if (_IDSShouldLog())
        {
          v149 = (OS_dispatch_source *)_IDSLinkStateStrings[self->_state];
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GL state is [%s], stop activity timer."));
        }
      }
    }
    objc_msgSend__stopActivityTimer(self, v9, v10, v11, v149, *(_QWORD *)&v151);
  }
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, 0.0, v149);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v154, v13, v166, 16);
  if (!v16)
  {

    return;
  }
  v17 = *(_QWORD *)v155;
  v18 = 0.0;
  *(_QWORD *)&v19 = 138412546;
  do
  {
    for (i = 0; i != v16; ++i)
    {
      if (*(_QWORD *)v155 != v17)
        objc_enumerationMutation(obj);
      v21 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * i);
      v22 = objc_msgSend_state(v21, v14, v15, v19);
      isActive = objc_msgSend_isActive(v21, v23, v24, v25);
      isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v21, v27, v28, v29);
      isSelfQRSession = objc_msgSend_isSelfQRSession(v21, v31, v32, v33);
      isSharedQRSession = objc_msgSend_isSharedQRSession(v21, v35, v36, v37);
      if ((unint64_t)(v22 - 5) < 0xFFFFFFFFFFFFFFFELL)
        v39 = 1;
      else
        v39 = isSelfQRSession;
      if ((v39 & 1) != 0)
        continue;
      v40 = isSharedQRSession;
      objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v14, v15, v19);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      isInternalInstall = objc_msgSend_isInternalInstall(v41, v42, v43, v44);

      if (isInternalInstall)
      {
        objc_msgSend_testStartTime(v21, v46, v47, v48);
        if (v48 != 0.0)
        {
          objc_msgSend_testStartTime(v21, v46, v47, v48);
          if (v2 >= v48)
          {
            if (objc_msgSend_isQUIC(v21, v46, v47, v48))
              objc_msgSend_sendQUICTestRequest(v21, v49, v50, v51);
            else
              objc_msgSend_sendTestRequest_(v21, v49, 0, v51);
            if ((objc_msgSend_testOptions(v21, v52, v53, v54) & 8) != 0
              && objc_msgSend_testRequestedErrorCode(v21, v46, v47, v48) == 601)
            {
              OSLogHandleForTransportCategory();
              v55 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_19B949000, v55, OS_LOG_TYPE_DEFAULT, "_handleActivityTimer: _sendUnallocbindRequest", buf, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_handleActivityTimer: _sendUnallocbindRequest"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_handleActivityTimer: _sendUnallocbindRequest"));
                }
              }
              isQUIC = objc_msgSend_isQUIC(v21, v56, v57, v58);
              objc_msgSend_candidatePairToken(v21, v60, v61, v62);
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              if (isQUIC)
                objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v63, (uint64_t)v64, v65, 5);
              else
                objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v63, (uint64_t)v64, v65, 0, 5);

            }
          }
        }
      }
      objc_msgSend_lastOutgoingPacketTime(v21, v46, v47, v48);
      v67 = v66;
      objc_msgSend_lastIncomingPacketTime(v21, v68, v69, v66);
      v71 = v70;
      objc_msgSend_lastStatsReport(v21, v72, v73, v70);
      v75 = v74;
      v80 = objc_msgSend_linkID(v21, v76, v77, v74);
      if ((_DWORD)v80)
      {
        v81 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, v80);
        v82 = v81;
        if (v81)
        {
          if (v67 < v81[35])
            v67 = v81[35];
          if (v71 < v81[36])
            v71 = v81[36];
          v83 = v81[37];
          if (v75 < v83)
            v75 = v81[37];
          objc_msgSend_setTotalPacketsSentOnLink_(v21, v78, *((unsigned int *)v81 + 76), v83);
          objc_msgSend_setTotalPacketsReceivedOnLink_(v21, v84, *((unsigned int *)v82 + 77), v85);
        }
        if (isActive)
        {
LABEL_52:
          v86 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
          v87 = v86;
          if (v86)
          {
            if (v67 < v86[35])
              v67 = v86[35];
            if (v71 < v86[36])
              v71 = v86[36];
            if (v75 < v86[37])
              v75 = v86[37];
          }
          goto LABEL_62;
        }
      }
      else
      {
        v82 = 0;
        if (isActive)
          goto LABEL_52;
      }
      v87 = 0;
LABEL_62:
      objc_msgSend_setLastOutgoingPacketTime_(v21, v78, v79, v67);
      objc_msgSend_setLastIncomingPacketTime_(v21, v88, v89, v71);
      if (v18 < v71)
        v18 = v71;
      if (!isRelayStunCandidatePair)
      {
        if (v67 > 0.0)
        {
          natMappingTimeout = self->_natMappingTimeout;
          goto LABEL_80;
        }
LABEL_93:
        if (v71 > 0.0)
        {
          v137 = v2 - v71;
          if (v137 >= 30.0 && (objc_msgSend_hbStarted(v21, v14, v15, v19) & 1) == 0)
          {
            objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v19);
            v138 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v21, v139, v140, v141);
              v142 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412546;
              v159 = v142;
              v160 = 2048;
              v161 = v137;
              _os_log_impl(&dword_19B949000, v138, OS_LOG_TYPE_DEFAULT, "%@ has no remote packet for %.6f sec, send HBR.", buf, 0x16u);

            }
            objc_msgSend__startHB_(self, v143, (uint64_t)v21, v144);
          }
        }
        continue;
      }
      v90 = objc_msgSend_statsIntervalInSeconds(v21, v14, v15, v19);
      v19 = v2 - v75;
      if (v2 - v75 >= (double)v90)
      {
        if (v82)
          v82[37] = v2;
        if (v87)
          v87[37] = v2;
        objc_msgSend_setLastStatsReport_(v21, v14, v15, v2);
        if ((objc_msgSend_isQUIC(v21, v91, v92, v93) & 1) != 0)
        {
          linkIDToStatsData = self->_linkIDToStatsData;
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v94, (uint64_t)CFSTR("%d-send"), v95, v80);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(linkIDToStatsData, v98, (uint64_t)v97, v99);
          v100 = (void *)objc_claimAutoreleasedReturnValue();

          v101 = self->_linkIDToStatsData;
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v102, (uint64_t)CFSTR("%d-recv"), v103, v80);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v101, v105, (uint64_t)v104, v106);
          v107 = (void *)objc_claimAutoreleasedReturnValue();

          if (v100 && v107)
          {
            objc_msgSend_unsignedIntValue(v100, v108, v109, v110);
            objc_msgSend_unsignedIntValue(v107, v111, v112, v113);
          }
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          objc_msgSend_sendQUICStatsRequestWithOptions_(v21, v115, (uint64_t)Mutable, v116);

        }
        else
        {
          objc_msgSend_sendStatsRequest_options_(v21, v94, 0, v95, 0);
        }
      }
      if ((v40 & 1) == 0)
      {
        natMappingTimeout = 15.0;
        if (v67 > 0.0)
        {
LABEL_80:
          objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v19);
          v118 = objc_claimAutoreleasedReturnValue();
          v119 = v2 - v67;
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v21, v120, v121, v122);
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            if (isActive)
              v127 = CFSTR("YES");
            else
              v127 = CFSTR("NO");
            v128 = objc_msgSend_hbStarted(v21, v123, v124, v126);
            *(_DWORD *)buf = 138413058;
            v129 = CFSTR("NO");
            if (v128)
              v129 = CFSTR("YES");
            v159 = v125;
            v160 = 2048;
            v161 = v119;
            v162 = 2112;
            v163 = v127;
            v164 = 2112;
            v165 = v129;
            _os_log_impl(&dword_19B949000, v118, OS_LOG_TYPE_DEFAULT, "%@ is idle for %.6f sec (active:%@, hbStarted:%@).", buf, 0x2Au);

          }
          if (v119 >= natMappingTimeout)
            v130 = 1;
          else
            v130 = isActive;
          if (v130 == 1 && (objc_msgSend_hbStarted(v21, v14, v15, v19) & 1) == 0)
          {
            objc_msgSend_setHbStarted_(v21, v14, 1, v19);
            objc_msgSend_candidatePairToken(v21, v131, v132, v133);
            v134 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v135, 3, v136, 0, 0, v134);

          }
        }
        goto LABEL_93;
      }
    }
    v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v154, v19, v166, 16);
  }
  while (v16);

  if (v18 != 0.0 && v2 - v18 >= 60.0)
  {
    OSLogHandleForTransportCategory();
    v145 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v159) = 60;
      _os_log_impl(&dword_19B949000, v145, OS_LOG_TYPE_DEFAULT, "No remote packets for %d seconds.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v150 = 60;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("No remote packets for %d seconds."));
      if (_IDSShouldLog())
      {
        v150 = 60;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("No remote packets for %d seconds."));
      }
    }
    objc_msgSend__handleNoRemotePacket(self, v146, v147, v148, v150);
  }
}

- (void)_startActivityTimer
{
  NSObject *activityTimer;
  NSObject *v4;
  OS_dispatch_source *v5;
  OS_dispatch_source *v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  NSObject *v10;
  OS_dispatch_source *v11;
  _QWORD handler[5];
  uint8_t buf[4];
  OS_dispatch_source *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  activityTimer = self->_activityTimer;
  if (activityTimer)
    dispatch_source_cancel(activityTimer);
  im_primary_queue();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (OS_dispatch_source *)dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v4);
  v6 = self->_activityTimer;
  self->_activityTimer = v5;

  v7 = self->_activityTimer;
  v8 = dispatch_time(0, 5000000000);
  dispatch_source_set_timer(v7, v8, 0x12A05F200uLL, 0x5F5E100uLL);
  v9 = self->_activityTimer;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = sub_19B9E17A0;
  handler[3] = &unk_1E3C1F898;
  handler[4] = self;
  dispatch_source_set_event_handler(v9, handler);
  dispatch_resume((dispatch_object_t)self->_activityTimer);
  OSLogHandleForTransportCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = self->_activityTimer;
    *(_DWORD *)buf = 134217984;
    v14 = v11;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "start activity timer %p.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start activity timer %p."));
    if (_IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start activity timer %p."));
  }
}

- (void)_stopActivityTimer
{
  NSObject *activityTimer;
  NSObject *v4;
  OS_dispatch_source *v5;
  OS_dispatch_source *v6;
  uint8_t buf[4];
  OS_dispatch_source *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  activityTimer = self->_activityTimer;
  if (activityTimer)
  {
    dispatch_source_cancel(activityTimer);
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = self->_activityTimer;
      *(_DWORD *)buf = 134217984;
      v8 = v5;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "stop activity timer %p.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stop activity timer %p."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stop activity timer %p."));
    }
    v6 = self->_activityTimer;
    self->_activityTimer = 0;

  }
}

- (void)_addStunCheckPair:(id)a3 isRemoteCandidate:(BOOL)a4 excludeLocalAddress:(sockaddr *)a5
{
  _BOOL4 v5;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  int v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  double v28;
  _BOOL4 v29;
  uint64_t i;
  void *v31;
  NSMutableArray *v32;
  NSMutableArray *v33;
  NSMutableArray *v34;
  char *v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  double v45;
  int hasNATIPv4External;
  NSMutableArray *v47;
  const char *v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t j;
  void *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  double v60;
  void *v61;
  const char *v62;
  double v63;
  const char *v64;
  uint64_t v65;
  double v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  double v70;
  NSMutableArray *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  const char *v75;
  uint64_t v76;
  double v77;
  NSMutableArray *v78;
  IDSGlobalLink *v79;
  const __CFDictionary *tokenToStunCheckPairs;
  CFMutableDictionaryRef Mutable;
  NSMutableDictionary *v82;
  NSMutableArray *v83;
  NSObject *v84;
  NSObject *v85;
  const char *v86;
  double v87;
  const char *v88;
  double v89;
  NSObject *v90;
  void *v91;
  char *v92;
  void *v93;
  id v94;
  _BOOL4 v96;
  NSMutableArray *obj;
  uint64_t v98;
  NSMutableArray *v99;
  uint64_t v100;
  IDSGlobalLink *v101;
  _BOOL4 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint8_t buf[4];
  NSMutableArray *v116;
  __int16 v117;
  const char *v118;
  __int16 v119;
  void *v120;
  _BYTE v121[128];
  _BYTE v122[128];
  _BYTE v123[128];
  uint64_t v124;

  v5 = a4;
  v124 = *MEMORY[0x1E0C80C00];
  v99 = (NSMutableArray *)a3;
  if (!self->_allowP2P)
    goto LABEL_91;
  v7 = 448;
  if (v5)
    v7 = 440;
  v101 = self;
  v8 = *(id *)((char *)&self->super.isa + v7);
  v102 = v5;
  v94 = v8;
  if (!v5)
  {
LABEL_17:
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    obj = (NSMutableArray *)v8;
    v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v107, v28, v122, 16);
    if (!v100)
      goto LABEL_90;
    v29 = v5;
    if (!a5)
      v29 = 0;
    v96 = v29;
    v98 = *(_QWORD *)v108;
    while (1)
    {
      for (i = 0; i != v100; ++i)
      {
        if (*(_QWORD *)v108 != v98)
          objc_enumerationMutation(obj);
        v31 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * i);
        if (v102)
          v32 = *(NSMutableArray **)(*((_QWORD *)&v107 + 1) + 8 * i);
        else
          v32 = v99;
        if (v102)
          v33 = v99;
        else
          v33 = *(NSMutableArray **)(*((_QWORD *)&v107 + 1) + 8 * i);
        v34 = v32;
        v35 = v33;
        if (objc_msgSend_isCompatibleWithStunCandidate_(v34, v36, (uint64_t)v35, v37))
        {
          if (!v96 || (v41 = objc_msgSend_address(v34, v38, v39, v40), !IsSameSA(v41, (uint64_t)a5)))
          {
            if (!v102)
            {
              v42 = objc_msgSend_external(v31, v38, v39, v40);
              hasNATIPv4External = objc_msgSend_hasNATIPv4External(v31, v43, v44, v45);
              v105 = 0u;
              v106 = 0u;
              v103 = 0u;
              v104 = 0u;
              v47 = v101->_localCandidateList;
              v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v103, v49, v121, 16);
              if (v52)
              {
                v54 = *(_QWORD *)v104;
                while (2)
                {
                  for (j = 0; j != v52; ++j)
                  {
                    if (*(_QWORD *)v104 != v54)
                      objc_enumerationMutation(v47);
                    v56 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * j);
                    v57 = objc_msgSend_address(v56, v50, v51, v53, v91, v92, v93);
                    if (hasNATIPv4External)
                    {
                      if (IsSameIP(v57, v42))
                        goto LABEL_64;
                    }
                    else if (IsSameSA(v57, v42))
                    {
LABEL_64:
                      OSLogHandleForTransportCategory();
                      v84 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412802;
                        v116 = v34;
                        v117 = 2112;
                        v118 = v35;
                        v119 = 2112;
                        v120 = v56;
                        _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "skip invalid local-remote candidate pair %@-%@ (due to local candidate %@)", buf, 0x20u);
                      }

                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          v92 = v35;
                          v93 = v56;
                          v91 = v34;
                          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip invalid local-remote candidate pair %@-%@ (due to local candidate %@)"));
                          if (_IDSShouldLog())
                          {
                            v92 = v35;
                            v93 = v56;
                            v91 = v34;
                            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip invalid local-remote candidate pair %@-%@ (due to local candidate %@)"));
                          }
                        }
                      }
                      goto LABEL_80;
                    }
                  }
                  v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v50, (uint64_t)&v103, v53, v121, 16);
                  if (v52)
                    continue;
                  break;
                }
              }

            }
            objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v38, (uint64_t)v34, v40, v35, v101->_cbuuid, v91);
            v47 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
            if (v101->_isInitiator)
            {
              objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v58, v59, v60);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setLinkUUID_(v47, v62, (uint64_t)v61, v63);

            }
            if ((objc_msgSend_hasNATIPv4Address(v34, v58, v59, v60) & 1) == 0
              && objc_msgSend_hasNATIPv4External(v35, v64, v65, v66))
            {
              OSLogHandleForTransportCategory();
              v67 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_candidatePairToken(v47, v68, v69, v70);
                v71 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                v116 = v71;
                _os_log_impl(&dword_19B949000, v67, OS_LOG_TYPE_DEFAULT, "skip stun check pair %@.", buf, 0xCu);

              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  objc_msgSend_candidatePairToken(v47, v72, v73, v74);
                  v91 = (void *)objc_claimAutoreleasedReturnValue();
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip stun check pair %@."));

                  if (_IDSShouldLog())
                  {
                    objc_msgSend_candidatePairToken(v47, v75, v76, v77, v91);
                    v91 = (void *)objc_claimAutoreleasedReturnValue();
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip stun check pair %@."));

                  }
                }
              }
              goto LABEL_80;
            }
            objc_msgSend_candidatePairToken(v47, v64, v65, v66);
            v78 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
            v79 = v101;
            tokenToStunCheckPairs = (const __CFDictionary *)v101->_tokenToStunCheckPairs;
            if (tokenToStunCheckPairs && v78)
            {
              if (!CFDictionaryGetValue(tokenToStunCheckPairs, v78))
              {
                v79 = v101;
                tokenToStunCheckPairs = (const __CFDictionary *)v101->_tokenToStunCheckPairs;
                goto LABEL_60;
              }
            }
            else
            {
LABEL_60:
              if (!tokenToStunCheckPairs)
              {
                Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v82 = v101->_tokenToStunCheckPairs;
                v101->_tokenToStunCheckPairs = (NSMutableDictionary *)Mutable;

                v79 = v101;
              }
              v83 = v47;
              if (v83)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)v79->_tokenToStunCheckPairs, v78, v83);
              }
              else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v116 = v78;
                v117 = 2080;
                v118 = "_tokenToStunCheckPairs";
                _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
              }

              OSLogHandleForTransportCategory();
              v85 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v116 = v83;
                _os_log_impl(&dword_19B949000, v85, OS_LOG_TYPE_DEFAULT, "add stun check pair %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v91 = v83;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add stun check pair %@."));
                  if (_IDSShouldLog())
                  {
                    v91 = v83;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("add stun check pair %@."));
                  }
                }
              }
              objc_msgSend__startStunCheck_(v101, v86, (uint64_t)v78, v87, v91);
            }

LABEL_80:
          }
        }

      }
      v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v88, (uint64_t)&v107, v89, v122, 16);
      if (!v100)
        goto LABEL_90;
    }
  }
  v12 = objc_msgSend_external(v99, v9, v10, v11);
  v16 = objc_msgSend_hasNATIPv4External(v99, v13, v14, v15);
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  obj = self->_localCandidateList;
  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v111, v18, v123, 16);
  if (!v21)
    goto LABEL_16;
  v23 = *(_QWORD *)v112;
LABEL_7:
  v24 = 0;
  while (1)
  {
    if (*(_QWORD *)v112 != v23)
      objc_enumerationMutation(obj);
    v25 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * v24);
    v26 = objc_msgSend_address(v25, v19, v20, v22);
    if (v16)
    {
      if (IsSameIP(v26, v12))
        break;
      goto LABEL_14;
    }
    if (IsSameSA(v26, v12))
      break;
LABEL_14:
    if (v21 == ++v24)
    {
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v19, (uint64_t)&v111, v22, v123, 16);
      if (!v21)
      {
LABEL_16:

        v8 = v94;
        goto LABEL_17;
      }
      goto LABEL_7;
    }
  }
  OSLogHandleForTransportCategory();
  v90 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v116 = v99;
    v117 = 2112;
    v118 = (const char *)v25;
    _os_log_impl(&dword_19B949000, v90, OS_LOG_TYPE_DEFAULT, "skip invalid remote candidate %@ (due to local candidate %@)", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip invalid remote candidate %@ (due to local candidate %@)"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip invalid remote candidate %@ (due to local candidate %@)"));
    }
  }
LABEL_90:

LABEL_91:
}

- (void)_addStunCheckPair:(id)a3 isRemoteCandidate:(BOOL)a4
{
  double v4;

  objc_msgSend__addStunCheckPair_isRemoteCandidate_excludeLocalAddress_(self, a2, (uint64_t)a3, v4, a4, 0);
}

- (BOOL)_addCandidate:(id)a3 isRemoteCandidate:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  NSMutableArray *remoteCandidateList;
  NSMutableArray *v14;
  NSMutableArray *v15;
  NSObject *v16;
  __CFString *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  uint64_t v23;
  const char *v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  const char *v30;
  double v31;
  NSMutableArray *localCandidateList;
  NSMutableArray *v33;
  NSMutableArray *v34;
  NSObject *v35;
  uint8_t buf[4];
  void *v37;
  uint64_t v38;

  v4 = a4;
  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v10 = v6;
  if (v6 && (objc_msgSend_isLinkLocalStunCandidate(v6, v7, v8, v9) & 1) == 0)
  {
    if (v4)
    {
      if ((objc_msgSend_containsObject_(self->_remoteCandidateList, v11, (uint64_t)v10, v12) & 1) == 0)
      {
        remoteCandidateList = self->_remoteCandidateList;
        if (remoteCandidateList
          || (v14 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]),
              v15 = self->_remoteCandidateList,
              self->_remoteCandidateList = v14,
              v15,
              (remoteCandidateList = self->_remoteCandidateList) != 0))
        {
          CFArrayAppendValue((CFMutableArrayRef)remoteCandidateList, v10);
        }
        OSLogHandleForTransportCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v37 = v10;
          _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "add remote candidate %@.", buf, 0xCu);
        }

        if (!os_log_shim_legacy_logging_enabled())
          goto LABEL_29;
        if (!_IDSShouldLogTransport())
          goto LABEL_29;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add remote candidate %@."));
        if ((_IDSShouldLog() & 1) == 0)
          goto LABEL_29;
        v17 = CFSTR("add remote candidate %@.");
LABEL_28:
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v17);
LABEL_29:
        v21 = 1;
        goto LABEL_16;
      }
    }
    else if ((objc_msgSend_containsObject_(self->_localCandidateList, v11, (uint64_t)v10, v12) & 1) == 0)
    {
      v23 = objc_msgSend_index(v10, v18, v19, v20);
      if (objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v24, v23, v25))
      {
        v29 = objc_msgSend_linkFlags(v10, v26, v27, v28);
        objc_msgSend_setLinkFlags_(v10, v30, v29 | 4u, v31);
      }
      localCandidateList = self->_localCandidateList;
      if (localCandidateList
        || (v33 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]),
            v34 = self->_localCandidateList,
            self->_localCandidateList = v33,
            v34,
            (localCandidateList = self->_localCandidateList) != 0))
      {
        CFArrayAppendValue((CFMutableArrayRef)localCandidateList, v10);
      }
      OSLogHandleForTransportCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v37 = v10;
        _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "add local candidate %@.", buf, 0xCu);
      }

      if (!os_log_shim_legacy_logging_enabled())
        goto LABEL_29;
      if (!_IDSShouldLogTransport())
        goto LABEL_29;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add local candidate %@."));
      if ((_IDSShouldLog() & 1) == 0)
        goto LABEL_29;
      v17 = CFSTR("add local candidate %@.");
      goto LABEL_28;
    }
  }
  v21 = 0;
LABEL_16:

  return v21;
}

- (BOOL)_hasActiveAllocbindFailoverTimerForSessionID:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  const char *v21;
  double v22;
  int isEqualToString;
  void *v24;
  NSObject *v25;
  BOOL v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  void *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v10 = v8;
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v41, v12, v47, 16);
    if (v15)
    {
      v17 = *(_QWORD *)v42;
      while (2)
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v42 != v17)
            objc_enumerationMutation(v10);
          v19 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
          objc_msgSend_sessionID(v19, v13, v14, v16);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToString = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)v4, v22);

          if (isEqualToString)
          {
            objc_msgSend_allocbindFailoverTimer(v19, v13, v14, v16);
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            if (v24)
            {
              OSLogHandleForTransportCategory();
              v27 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_allocbindFailoverTimer(v19, v28, v29, v30);
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134217984;
                v46 = v31;
                _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "found active allocbind failover timer: %p", buf, 0xCu);

              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  objc_msgSend_allocbindFailoverTimer(v19, v32, v33, v34);
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found active allocbind failover timer: %p"));

                  if (_IDSShouldLog())
                  {
                    objc_msgSend_allocbindFailoverTimer(v19, v35, v36, v37, v39);
                    v40 = (void *)objc_claimAutoreleasedReturnValue();
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found active allocbind failover timer: %p"));

                  }
                }
              }

              v26 = 1;
              goto LABEL_26;
            }
          }
        }
        v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v41, v16, v47, 16);
        if (v15)
          continue;
        break;
      }
    }

  }
  else
  {
    OSLogHandleForTransportCategory();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, "Couldn't find active allocbind failover timer due to invalid relaySessionID", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Couldn't find active allocbind failover timer due to invalid relaySessionID"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Couldn't find active allocbind failover timer due to invalid relaySessionID"));
      }
    }
  }
  v26 = 0;
LABEL_26:

  return v26;
}

- (void)_startAllocbindFailoverTimerOnCandidatePair:(id)a3 delay:(int)a4
{
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  int isCellularStunCandidate;
  int v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  double v21;
  char v22;
  void *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  double v28;
  dispatch_time_t v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  uint64_t v40;
  double v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[4];
  NSObject *v56;
  id v57;
  int v58;
  _QWORD handler[4];
  id v60;
  id v61;
  NSObject *v62;
  int v63;
  uint8_t buf[4];
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_local(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v10, v11, v12, v13);
  if (isCellularStunCandidate)
    v15 = 2;
  else
    v15 = 1;

  objc_msgSend_allocbindFailoverTimer(v6, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
  {

  }
  else
  {
    if (self->_reduceCellularUsage)
      v22 = isCellularStunCandidate;
    else
      v22 = 1;
    if ((v22 & 1) != 0)
    {
      objc_msgSend_weakRefWithObject_(MEMORY[0x1E0D13238], v20, (uint64_t)self, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23;
      if (a4 < 1)
      {
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = sub_19B9E2D3C;
        v55[3] = &unk_1E3C20068;
        v56 = v23;
        v57 = v6;
        v58 = v15;
        IDSTransportThreadAddBlock(v55);
        OSLogHandleForTransportCategory();
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          v46 = objc_msgSend_count(self->_tokenToCandidatePairs, v43, v44, v45);
          *(_DWORD *)buf = 134217984;
          v65 = v46;
          _os_log_impl(&dword_19B949000, v42, OS_LOG_TYPE_DEFAULT, "start allocbind failover now, _tokenToCandidatePairs: %lu", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v53 = objc_msgSend_count(self->_tokenToCandidatePairs, v47, v48, v49);
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start allocbind failover now, _tokenToCandidatePairs: %lu"));
            if (_IDSShouldLog())
            {
              objc_msgSend_count(self->_tokenToCandidatePairs, v50, v51, v52, v53);
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start allocbind failover now, _tokenToCandidatePairs: %lu"));
            }
          }
        }

        v30 = v56;
      }
      else
      {
        im_primary_queue();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v25);

        objc_msgSend_setAllocbindFailoverTimer_(v6, v27, (uint64_t)v26, v28);
        v29 = dispatch_time(0, 1000000000 * a4);
        dispatch_source_set_timer(v26, v29, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3221225472;
        handler[2] = sub_19B9E2C5C;
        handler[3] = &unk_1E3C20040;
        v60 = v24;
        v61 = v6;
        v30 = v26;
        v62 = v30;
        v63 = v15;
        dispatch_source_set_event_handler(v30, handler);
        dispatch_resume(v30);
        OSLogHandleForTransportCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v35 = objc_msgSend_count(self->_tokenToCandidatePairs, v32, v33, v34);
          *(_DWORD *)buf = 134218240;
          v65 = (uint64_t)v30;
          v66 = 2048;
          v67 = v35;
          _os_log_impl(&dword_19B949000, v31, OS_LOG_TYPE_DEFAULT, "start allocbind failover timer %p, _tokenToCandidatePairs: %lu", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v54 = objc_msgSend_count(self->_tokenToCandidatePairs, v36, v37, v38);
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start allocbind failover timer %p, _tokenToCandidatePairs: %lu"));
            if (_IDSShouldLog())
            {
              objc_msgSend_count(self->_tokenToCandidatePairs, v39, v40, v41, v30, v54);
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start allocbind failover timer %p, _tokenToCandidatePairs: %lu"));
            }
          }
        }

      }
    }
  }

}

- (void)_handleAllocbindFailoverTimerWithTransportScoreCards:(id)a3 failoverTimerOnCandidatePair:(id)a4 onInterface:(int)a5
{
  void *v5;
  id v8;
  const char *v9;
  uint64_t v10;
  id v11;
  double v12;
  int isConnectToQRIPv6Enabled;
  const char *v14;
  uint64_t v15;
  double v16;
  int isSharedQRSession;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  const char *v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  int v28;
  const char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  char *v37;
  void *v38;
  const char *v39;
  double v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  void *v46;
  const char *v47;
  double v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  double v68;
  void *v69;
  const char *v70;
  double v71;
  int TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell;
  NSObject *v73;
  IDSQuickRelaySessionInfo *v74;
  const char *v75;
  uint64_t v76;
  double v77;
  void *v78;
  const char *v79;
  double v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  double v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  double v88;
  void *v89;
  BOOL valid;
  const char *v91;
  uint64_t v92;
  double v93;
  void *v94;
  const char *v95;
  double v96;
  id v97;
  NSObject *v98;
  const char *v99;
  uint64_t v100;
  double v101;
  void *v102;
  const char *v103;
  double v104;
  const char *v105;
  double v106;
  NSObject *v107;
  id v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  id v112;
  void *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint8_t v117[4];
  int v118;
  __int16 v119;
  id v120;
  uint8_t buf[48];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v5 = *(void **)&a5;
  v127 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v11 = a4;
  if (v8)
  {
    isConnectToQRIPv6Enabled = objc_msgSend_isConnectToQRIPv6Enabled(v8, v9, v10, v12);
    isSharedQRSession = objc_msgSend_isSharedQRSession(v8, v14, v15, v16);
    objc_msgSend_sharedInstance(IDSServerBag, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v21, v22, (uint64_t)CFSTR("disable-transport-score-cards"), v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_BOOLValue(v24, v25, v26, v27);

    v32 = isConnectToQRIPv6Enabled ^ 1u;
    if ((v28 & v32 & 1) != 0 || ((isSharedQRSession ^ 1) & 1) != 0)
    {
      objc_msgSend_sessionInfoDict(v8, v29, v30, v31);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__handleAllocbindFailoverTimer_failoverTimerOnCandidatePair_onInterface_(self, v47, (uint64_t)v46, v48, v11, v5);

    }
    else if (self->_state < 4)
    {
      OSLogHandleForTransportCategory();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v53 = objc_msgSend_count(self->_tokenToCandidatePairs, v50, v51, v52);
        v57 = objc_msgSend_count(self->_interfaceAddressArray, v54, v55, v56);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v53;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = (_DWORD)v5;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v57;
        _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu", buf, 0x26u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v61 = objc_msgSend_count(self->_tokenToCandidatePairs, v58, v59, v60);
          v113 = v5;
          v114 = objc_msgSend_count(self->_interfaceAddressArray, v62, v63, v64);
          v108 = v11;
          v111 = v61;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu"));
          if (_IDSShouldLog())
          {
            v65 = objc_msgSend_count(self->_tokenToCandidatePairs, v58, v59, v60, v11, v61, v5, v114);
            v113 = v5;
            v114 = objc_msgSend_count(self->_interfaceAddressArray, v66, v67, v68);
            v108 = v11;
            v111 = v65;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu"));
          }
        }
      }
      objc_msgSend_sessionID(v8, v58, v59, v60, v108, v111, v113, v114);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell = objc_msgSend__findTriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell_(self, v70, (uint64_t)v69, v71, (_DWORD)v5 == 1, (_DWORD)v5 == 2);

      if (TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell)
      {
        OSLogHandleForTransportCategory();
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v73, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards: no need to try!", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards: no need to try!"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards: no need to try!"));
          }
        }
      }
      else
      {
        v74 = objc_alloc_init(IDSQuickRelaySessionInfo);
        objc_msgSend_sessionInfoDict(v8, v75, v76, v77);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        v81 = objc_msgSend_parseSessionInfo_(v74, v79, (uint64_t)v78, v80);

        if (v81)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v82, v83, v84);
          v85 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_sessionInfoDict(v8, v86, v87, v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)&buf[4] = v81;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v89;
            _os_log_impl(&dword_19B949000, v85, OS_LOG_TYPE_DEFAULT, "error code = %ld - parsing sessionInfo: %@", buf, 0x16u);

          }
        }
        else
        {
          objc_msgSend_serverAddressIPv6(v74, v82, v83, v84);
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v122 = 0u;
          memset(buf, 0, sizeof(buf));
          __memcpy_chk();
          valid = IsValidSA((_BOOL8)buf);
          v115 = 0;
          v116 = 0;
          objc_msgSend_sessionID(v8, v91, v92, v93);
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v109) = valid;
          objc_msgSend__selectStunTransport_andInterfaceAddress_forRelaySessionID_preferIPv4_wantOnlyCell_wantOnlyNonCell_isValidSA_(self, v95, (uint64_t)&v116, v96, &v115, v94, v32, (_DWORD)v5 == 1, (_DWORD)v5 == 2, v109);
          v97 = v115;

          if (v97)
          {
            OSLogHandleForTransportCategory();
            v98 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v117 = 67109378;
              v118 = (int)v5;
              v119 = 2112;
              v120 = v97;
              _os_log_impl(&dword_19B949000, v98, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards interface: %u, newLocalAddress: %@", v117, 0x12u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v110 = v5;
                v112 = v97;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards interface: %u, newLocalAddress: %@"));
                if (_IDSShouldLog())
                {
                  v110 = v5;
                  v112 = v97;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards interface: %u, newLocalAddress: %@"));
                }
              }
            }
            objc_msgSend_sessionInfoDict(v8, v99, v100, v101, v110, v112);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__connectWithSessionInfo_interfaceAddress_joinSession_allocbindFailover_completionHandler_withLocalInterfacePreference_(self, v103, (uint64_t)v102, v104, v97, 1, 1, self->_connectReadyHandler, 0);

          }
          else
          {
            OSLogHandleForTransportCategory();
            v107 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v117 = 0;
              _os_log_impl(&dword_19B949000, v107, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards: no interface available to connect!", v117, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards: no interface available to connect!"));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards: no interface available to connect!"));
              }
            }
          }
          objc_msgSend__stopAllocbindFailoverTimer_(self, v105, (uint64_t)v11, v106);

        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v37 = _IDSLinkStateStrings[self->_state];
        objc_msgSend_sessionInfoDict(v8, v34, v35, v36);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v38;
        _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "Return: handling allocbind failover timer %p, _state = %s, relaySessionInfo = %p", buf, 0x20u);

      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v42 = _IDSLinkStateStrings[self->_state];
          objc_msgSend_sessionInfoDict(v8, v39, v41, v40);
          v111 = (uint64_t)v42;
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          v108 = v11;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Return: handling allocbind failover timer %p, _state = %s, relaySessionInfo = %p"));

          if (_IDSShouldLog())
          {
            v44 = _IDSLinkStateStrings[self->_state];
            objc_msgSend_sessionInfoDict(v8, v39, v43, v40, v11, v42, v113);
            v111 = (uint64_t)v44;
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            v108 = v11;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Return: handling allocbind failover timer %p, _state = %s, relaySessionInfo = %p"));

          }
        }
      }
      objc_msgSend__stopAllocbindFailoverTimer_(self, v39, 0, v40, v108, v111, v113);
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards: invalid candidatePair!", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards: invalid candidatePair!"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_handleAllocbindFailoverTimerWithTransportScoreCards: invalid candidatePair!"));
      }
    }
  }

}

- (BOOL)_findTriedCandidatePairForSession:(id)a3 wantOnlyCell:(BOOL)a4 wantOnlyNonCell:(BOOL)a5
{
  int v5;
  int v6;
  const char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  const char *v23;
  double v24;
  int isEqual;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  char isCellularStunCandidate;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  int v35;
  BOOL v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v5 = a5;
  v6 = a4;
  v43 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  if (v6 == v5)
  {
    v36 = 0;
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v8, v9, 0.0, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v38, v13, v42, 16);
    if (v14)
    {
      v18 = v14;
      v19 = *(_QWORD *)v39;
      while (2)
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v39 != v19)
            objc_enumerationMutation(v11);
          v21 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          if (objc_msgSend_isRelayStunCandidatePair(v21, v15, v16, v17))
          {
            objc_msgSend_sessionID(v21, v15, v16, v17);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            isEqual = objc_msgSend_isEqual_(v22, v23, (uint64_t)v10, v24);

            if (isEqual)
            {
              if (objc_msgSend_state(v21, v15, v16, v17)
                && (unint64_t)objc_msgSend_state(v21, v15, v16, v17) <= 4)
              {
                if (v6)
                {
                  objc_msgSend_local(v21, v15, v16, v17);
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v26, v27, v28, v29);

                  if ((isCellularStunCandidate & 1) != 0)
                    goto LABEL_19;
                }
                if (v5)
                {
                  objc_msgSend_local(v21, v15, v16, v17);
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  v35 = objc_msgSend_isCellularStunCandidate(v31, v32, v33, v34);

                  if (!v35)
                  {
LABEL_19:
                    v36 = 1;
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }
        v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v38, v17, v42, 16);
        if (v18)
          continue;
        break;
      }
    }
    v36 = 0;
LABEL_20:

  }
  return v36;
}

- (void)_stopAllocbindFailoverTimer:(id)a3
{
  const char *v4;
  uint64_t v5;
  double v6;
  id v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  id v17;
  _BOOL4 v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  BOOL v34;
  const char *v35;
  uint64_t v36;
  double v37;
  NSMutableDictionary *connectingCandidatePairSessionInfo;
  void *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  id v50;
  const char *v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  void *v59;
  void *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  double v68;
  NSObject *v69;
  const char *v70;
  double v71;
  const char *v72;
  uint64_t v73;
  double v74;
  void *v75;
  BOOL v76;
  NSMutableDictionary *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  _BYTE v95[128];
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v82 = a3;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v4, v5, v6);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  if (v82)
  {
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v7 = v81;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v83, v9, v95, 16);
    if (v12)
    {
      v14 = *(_QWORD *)v84;
      while (2)
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v84 != v14)
            objc_enumerationMutation(v7);
          v16 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * i);
          objc_msgSend_allocbindFailoverTimer(v16, v10, v11, v13);
          v17 = (id)objc_claimAutoreleasedReturnValue();
          v18 = v17 == v82;

          if (v18)
          {
            objc_msgSend_allocbindFailoverTimer(v16, v10, v11, v13);
            v19 = objc_claimAutoreleasedReturnValue();
            dispatch_source_cancel(v19);

            OSLogHandleForTransportCategory();
            v20 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v24 = objc_msgSend_count(self->_tokenToCandidatePairs, v21, v22, v23);
              *(_DWORD *)buf = 134218240;
              v92 = (uint64_t)v82;
              v93 = 2048;
              v94 = v24;
              _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "stop specified allocbind failover timer %p, _tokenToCandidatePairs: %lu", buf, 0x16u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v79 = v82;
                v80 = objc_msgSend_count(self->_tokenToCandidatePairs, v25, v27, v26);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stop specified allocbind failover timer %p, _tokenToCandidatePairs: %lu"));
                if (_IDSShouldLog())
                {
                  v29 = objc_msgSend_count(self->_tokenToCandidatePairs, v25, v28, v26, v82, v80);
                  v79 = v82;
                  v80 = v29;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stop specified allocbind failover timer %p, _tokenToCandidatePairs: %lu"));
                }
              }
            }
            objc_msgSend_setAllocbindFailoverTimer_(v16, v25, 0, v26, v79, v80);
            objc_msgSend_sessionID(v16, v30, v31, v32);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            if (v33)
            {
              v34 = self->_connectingCandidatePairSessionInfo == 0;

              if (!v34)
              {
                connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
                objc_msgSend_sessionID(v16, v35, v36, v37);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                CFDictionaryRemoveValue((CFMutableDictionaryRef)connectingCandidatePairSessionInfo, v39);

              }
            }
            goto LABEL_43;
          }
        }
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v83, v13, v95, 16);
        if (v12)
          continue;
        break;
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v92 = objc_msgSend_count(v81, v41, v42, v43);
      _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "stop all active allocbind failover timer. # candidatePairs = %lu", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v79 = (void *)objc_msgSend_count(v81, v44, v45, v46);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stop all active allocbind failover timer. # candidatePairs = %lu"));
        if (_IDSShouldLog())
        {
          v79 = (void *)objc_msgSend_count(v81, v47, v48, v49, v79);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stop all active allocbind failover timer. # candidatePairs = %lu"));
        }
      }
    }
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v50 = v81;
    v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v87, v52, v96, 16);
    if (v55)
    {
      v56 = *(_QWORD *)v88;
      v57 = 134217984;
      do
      {
        for (j = 0; j != v55; ++j)
        {
          if (*(_QWORD *)v88 != v56)
            objc_enumerationMutation(v50);
          v59 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * j);
          objc_msgSend_allocbindFailoverTimer(v59, v53, v54, *(double *)&v57, v79);
          v60 = (void *)objc_claimAutoreleasedReturnValue();

          if (v60)
          {
            OSLogHandleForTransportCategory();
            v61 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_allocbindFailoverTimer(v59, v62, v63, v64);
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 134217984;
              v92 = (uint64_t)v65;
              _os_log_impl(&dword_19B949000, v61, OS_LOG_TYPE_DEFAULT, "stop allocbind failover timer: %p", buf, 0xCu);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_allocbindFailoverTimer(v59, v66, v67, v68);
                v79 = (void *)objc_claimAutoreleasedReturnValue();
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stop allocbind failover timer: %p"));

                if (_IDSShouldLog())
                {
                  objc_msgSend_allocbindFailoverTimer(v59, v66, v67, v68, v79);
                  v79 = (void *)objc_claimAutoreleasedReturnValue();
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stop allocbind failover timer: %p"));

                }
              }
            }
            objc_msgSend_allocbindFailoverTimer(v59, v66, v67, v68, v79);
            v69 = objc_claimAutoreleasedReturnValue();
            dispatch_source_cancel(v69);

            objc_msgSend_setAllocbindFailoverTimer_(v59, v70, 0, v71);
            objc_msgSend_sessionID(v59, v72, v73, v74);
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            if (v75)
            {
              v76 = self->_connectingCandidatePairSessionInfo == 0;

              if (!v76)
              {
                v77 = self->_connectingCandidatePairSessionInfo;
                objc_msgSend_sessionID(v59, v53, v54, *(double *)&v57);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                CFDictionaryRemoveValue((CFMutableDictionaryRef)v77, v78);

              }
            }
          }
        }
        v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v53, (uint64_t)&v87, *(double *)&v57, v96, 16);
      }
      while (v55);
    }
  }
LABEL_43:

}

- (void)_handleAllocbindFailoverTimer:(id)a3 failoverTimerOnCandidatePair:(id)a4 onInterface:(int)a5
{
  char *v5;
  char *v8;
  IDSQuickRelaySessionInfo *v9;
  const char *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  unint64_t *p_state;
  NSObject *v16;
  char *v17;
  const char *v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  int TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  id v51;
  const char *v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t i;
  void *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  int v65;
  char *v66;
  id v67;
  const char *v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  double v80;
  int v81;
  NSObject *v82;
  const char *v83;
  double v84;
  NSObject *v85;
  const char *v86;
  double v87;
  NSObject *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  id v93;
  IDSQuickRelaySessionInfo *v94;
  id v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[128];
  uint8_t v105[128];
  uint8_t buf[4];
  id v107;
  __int16 v108;
  _BYTE v109[24];
  uint64_t v110;

  v5 = *(char **)&a5;
  v110 = *MEMORY[0x1E0C80C00];
  v8 = (char *)a3;
  v95 = a4;
  v9 = objc_alloc_init(IDSQuickRelaySessionInfo);
  v94 = v9;
  if (objc_msgSend_parseSessionInfo_(v9, v10, (uint64_t)v8, v11))
  {
    p_state = &self->_state;
LABEL_3:
    OSLogHandleForTransportCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = _IDSLinkStateStrings[*p_state];
      *(_DWORD *)buf = 134218498;
      v107 = v95;
      v108 = 2080;
      *(_QWORD *)v109 = v17;
      *(_WORD *)&v109[8] = 2048;
      *(_QWORD *)&v109[10] = v8;
      _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "Return: handling allocbind failover timer %p, _state = %s, relaySessionInfo = %p", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v90 = _IDSLinkStateStrings[*p_state];
        v91 = v8;
        v89 = (char *)v95;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Return: handling allocbind failover timer %p, _state = %s, relaySessionInfo = %p"));
        if (_IDSShouldLog())
        {
          v90 = _IDSLinkStateStrings[*p_state];
          v91 = v8;
          v89 = (char *)v95;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Return: handling allocbind failover timer %p, _state = %s, relaySessionInfo = %p"));
        }
      }
    }
    objc_msgSend__stopAllocbindFailoverTimer_(self, v18, 0, v19, v89, v90, v91);
    goto LABEL_10;
  }
  objc_msgSend_relaySessionID(v9, v12, v13, v14);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell = objc_msgSend__findTriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell_(self, v21, (uint64_t)v20, v22, (_DWORD)v5 == 1, (_DWORD)v5 == 2);

  p_state = &self->_state;
  if (self->_state > 3 || TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell)
    goto LABEL_3;
  OSLogHandleForTransportCategory();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v28 = objc_msgSend_count(self->_tokenToCandidatePairs, v25, v26, v27);
    v32 = objc_msgSend_count(self->_interfaceAddressArray, v29, v30, v31);
    *(_DWORD *)buf = 134218752;
    v107 = v95;
    v108 = 2048;
    *(_QWORD *)v109 = v28;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = (_DWORD)v5;
    *(_WORD *)&v109[14] = 2048;
    *(_QWORD *)&v109[16] = v32;
    _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu", buf, 0x26u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v36 = objc_msgSend_count(self->_tokenToCandidatePairs, v33, v34, v35);
      v91 = v5;
      v92 = objc_msgSend_count(self->_interfaceAddressArray, v37, v38, v39);
      v89 = (char *)v95;
      v90 = (char *)v36;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu"));
      if (_IDSShouldLog())
      {
        v43 = objc_msgSend_count(self->_tokenToCandidatePairs, v40, v41, v42, v95, v36, v5, v92);
        v91 = v5;
        v92 = objc_msgSend_count(self->_interfaceAddressArray, v44, v45, v46);
        v89 = (char *)v95;
        v90 = (char *)v43;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu"));
      }
    }
  }
  GLUtilGetRemainingInterfaces(self->_interfaceAddressArray);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = v47;
  if (!v47)
    goto LABEL_71;
  if (!objc_msgSend_count(v47, v48, v49, v50))
  {
    OSLogHandleForTransportCategory();
    v82 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v82, OS_LOG_TYPE_DEFAULT, "Device does not have a second interface to retry", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Device does not have a second interface to retry"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Device does not have a second interface to retry"));
      }
    }
    goto LABEL_70;
  }
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v51 = v93;
  v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v100, v53, v105, 16);
  if (v56)
  {
    v58 = *(_QWORD *)v101;
    while (2)
    {
      for (i = 0; i != v56; ++i)
      {
        if (*(_QWORD *)v101 != v58)
          objc_enumerationMutation(v51);
        v60 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * i);
        objc_msgSend_address(v60, v54, v55, v57, v89, v90, v91, v92);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = *(unsigned __int8 *)(objc_msgSend_sa(v61, v62, v63, v64) + 1);

        if (v65 == 2)
        {
          if ((_DWORD)v5 == 1)
          {
            if ((objc_msgSend_isCellular(v60, v54, v55, v57) & 1) != 0)
              goto LABEL_35;
          }
          else if ((_DWORD)v5 != 2 || !objc_msgSend_isCellular(v60, v54, v55, v57))
          {
LABEL_35:
            v66 = v60;

            if (v66)
              goto LABEL_57;
            goto LABEL_36;
          }
        }
      }
      v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v54, (uint64_t)&v100, v57, v105, 16);
      if (v56)
        continue;
      break;
    }
  }

LABEL_36:
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v67 = v51;
  v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v67, v68, (uint64_t)&v96, v69, v104, 16);
  if (!v72)
  {
LABEL_49:

LABEL_64:
    OSLogHandleForTransportCategory();
    v88 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v107) = (_DWORD)v5;
      _os_log_impl(&dword_19B949000, v88, OS_LOG_TYPE_DEFAULT, "Device does not have interface type: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v89 = v5;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Device does not have interface type: %d"));
        if (_IDSShouldLog())
        {
          v89 = v5;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Device does not have interface type: %d"));
        }
      }
    }
    goto LABEL_70;
  }
  v74 = *(_QWORD *)v97;
LABEL_38:
  v75 = 0;
  while (1)
  {
    if (*(_QWORD *)v97 != v74)
      objc_enumerationMutation(v67);
    v76 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * v75);
    objc_msgSend_address(v76, v70, v71, v73, v89);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = *(unsigned __int8 *)(objc_msgSend_sa(v77, v78, v79, v80) + 1);

    if (v81 != 30)
      goto LABEL_47;
    if ((_DWORD)v5 != 1)
      break;
    if ((objc_msgSend_isCellular(v76, v70, v71, v73) & 1) != 0)
      goto LABEL_56;
LABEL_47:
    if (v72 == ++v75)
    {
      v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v67, v70, (uint64_t)&v96, v73, v104, 16);
      if (v72)
        goto LABEL_38;
      goto LABEL_49;
    }
  }
  if ((_DWORD)v5 == 2 && objc_msgSend_isCellular(v76, v70, v71, v73))
    goto LABEL_47;
LABEL_56:
  v66 = v76;

  if (!v66)
    goto LABEL_64;
LABEL_57:
  OSLogHandleForTransportCategory();
  v85 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    v107 = v95;
    v108 = 1024;
    *(_DWORD *)v109 = (_DWORD)v5;
    *(_WORD *)&v109[4] = 2112;
    *(_QWORD *)&v109[6] = v66;
    _os_log_impl(&dword_19B949000, v85, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimer: %p, interface: %u, newLocalAddress: %@", buf, 0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v90 = v5;
      v91 = v66;
      v89 = (char *)v95;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_handleAllocbindFailoverTimer: %p, interface: %u, newLocalAddress: %@"));
      if (_IDSShouldLog())
      {
        v90 = v5;
        v91 = v66;
        v89 = (char *)v95;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_handleAllocbindFailoverTimer: %p, interface: %u, newLocalAddress: %@"));
      }
    }
  }
  objc_msgSend__connectWithSessionInfo_interfaceAddress_joinSession_allocbindFailover_completionHandler_withLocalInterfacePreference_(self, v86, (uint64_t)v8, v87, v66, 1, 1, self->_connectReadyHandler, 0, v89, v90, v91);

LABEL_70:
  objc_msgSend__stopAllocbindFailoverTimer_(self, v83, (uint64_t)v95, v84, v89);
  v47 = v93;
LABEL_71:

LABEL_10:
}

- (BOOL)_isExtIPDiscoveryDone
{
  uint64_t v2;
  double v3;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  int v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  id v17;
  const char *v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  uint64_t v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (self->_hasPendingSelfAllocation)
  {
    OSLogHandleForTransportCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend_count(self->_selfAllocateRequestIDs, v6, v7, v8);
      *(_DWORD *)buf = 67109120;
      LODWORD(v46) = v9;
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "_isExtIPDiscoveryDone: _hasPendingSelfAllocation, count = %u", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v39 = objc_msgSend_count(self->_selfAllocateRequestIDs, v10, v11, v12);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_isExtIPDiscoveryDone: _hasPendingSelfAllocation, count = %u"));
        if (_IDSShouldLog())
        {
          objc_msgSend_count(self->_selfAllocateRequestIDs, v13, v14, v15, v39);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_isExtIPDiscoveryDone: _hasPendingSelfAllocation, count = %u"));
        }
      }
    }
    return 0;
  }
  else
  {
    objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v17 = (id)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v41, v19, v47, 16);
    if (v22)
    {
      v24 = *(_QWORD *)v42;
      while (2)
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v42 != v24)
            objc_enumerationMutation(v17);
          v26 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
          if (objc_msgSend_allocateType(v26, v20, v21, v23) == 2
            && (unint64_t)objc_msgSend_state(v26, v20, v21, v23) <= 1)
          {
            OSLogHandleForTransportCategory();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              v31 = objc_msgSend_state(v26, v28, v29, v30);
              *(_DWORD *)buf = 134217984;
              v46 = v31;
              _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "[candidatePair state] = %lu", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v40 = objc_msgSend_state(v26, v32, v33, v34);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("[candidatePair state] = %lu"));
                if (_IDSShouldLog())
                {
                  objc_msgSend_state(v26, v35, v36, v37, v40);
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("[candidatePair state] = %lu"));
                }
              }
            }
            v16 = 0;
            goto LABEL_26;
          }
        }
        v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v41, v23, v47, 16);
        if (v22)
          continue;
        break;
      }
    }
    v16 = 1;
LABEL_26:

  }
  return v16;
}

- (void)_handleSelfAllocationTimeout:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  NSObject *v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  id v16;
  uint8_t buf[4];
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend_containsObject_(self->_selfAllocateRequestIDs, v5, (uint64_t)v4, v6))
  {
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v4;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "self allocation request %@ timed out.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v16 = v4;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("self allocation request %@ timed out."));
        if (_IDSShouldLog())
        {
          v16 = v4;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("self allocation request %@ timed out."));
        }
      }
    }
    objc_msgSend_removeObject_(self->_selfAllocateRequestIDs, v8, (uint64_t)v4, v9, v16);
    if (!objc_msgSend_count(self->_selfAllocateRequestIDs, v10, v11, v12))
    {
      self->_hasPendingSelfAllocation = 0;
      objc_msgSend__discardSelfAllocateCandidatePairs(self, v13, v14, v15);
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v13, 0, v15);
  }

}

- (void)_processXORMappedAddress:(id)a3 arrivalTime:(double)a4
{
  id v5;
  __int128 v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  double v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  const char *v54;
  double v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  const char *v65;
  double v66;
  const char *v67;
  uint64_t v68;
  double v69;
  uint64_t Type;
  NSObject *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  float v81;
  const char *v82;
  uint64_t v83;
  double v84;
  void *v85;
  id WeakRetained;
  char v87;
  id v88;
  const char *v89;
  double v90;
  const char *v91;
  double v92;
  const char *v93;
  double v94;
  NSObject *v95;
  NSObject *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t buf[4];
  _BYTE v104[18];
  char v105[16];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char __str[16];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v119 = v6;
  v120 = v6;
  v117 = v6;
  v118 = v6;
  v115 = v6;
  v116 = v6;
  *(_OWORD *)__str = v6;
  v114 = v6;
  v111 = v6;
  v112 = v6;
  v109 = v6;
  v110 = v6;
  v107 = v6;
  v108 = v6;
  *(_OWORD *)v105 = v6;
  v106 = v6;
  objc_msgSend_local(v5, v7, v8, -3.72066208e-103);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v101 = objc_msgSend_address(v9, v10, v11, v12);

  objc_msgSend_local(v5, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_external(v16, v17, v18, v19);

  SAToIPPortString(__str, 0x80uLL, v101);
  SAToIPPortString(v105, 0x80uLL, v20);
  OSLogHandleForTransportCategory();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v104 = v105;
    *(_WORD *)&v104[8] = 2080;
    *(_QWORD *)&v104[10] = __str;
    _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "discover external address on [%s] on [%s].", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v97 = v105;
      v99 = __str;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("discover external address on [%s] on [%s]."));
      if (_IDSShouldLog())
      {
        v97 = v105;
        v99 = __str;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("discover external address on [%s] on [%s]."));
      }
    }
  }
  objc_msgSend_local(v5, v22, v23, v24, v97, v99);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend_radioAccessTechnology(v25, v26, v27, v28);
  objc_msgSend_local(v5, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend_mtu(v33, v34, v35, v36);
  objc_msgSend_local(v5, v38, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend_index(v41, v42, v43, v44);
  objc_msgSend_local(v5, v46, v47, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = objc_msgSend_address(v49, v50, v51, v52);
  objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v54, 1, v55, 1, v29, v37, v45, v53, v20);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_local(v5, v57, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend_linkFlags(v60, v61, v62, v63);
  objc_msgSend_setLinkFlags_(v56, v65, v64, v66);

  Type = objc_msgSend_allocateType(v5, v67, v68, v69);
  OSLogHandleForTransportCategory();
  v71 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    v75 = objc_msgSend_allocateType(v5, v72, v73, v74);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v104 = Type == 2;
    *(_WORD *)&v104[4] = 2048;
    *(_QWORD *)&v104[6] = v75;
    _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "isSelfAllocate: %d, [candidatePair allocateType]: %ld", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v98 = (char *)(Type == 2);
      v100 = objc_msgSend_allocateType(v5, v76, v77, v78);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("isSelfAllocate: %d, [candidatePair allocateType]: %ld"));
      if (_IDSShouldLog())
      {
        v79 = objc_msgSend_allocateType(v5, v76, v77, v78, v98, v100);
        v98 = (char *)(Type == 2);
        v100 = v79;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("isSelfAllocate: %d, [candidatePair allocateType]: %ld"));
      }
    }
  }
  if (Type == 2)
  {
    objc_msgSend_selfAllocateStartTime(v5, v76, v77, v78);
    v81 = (float)((a4 - v80) * 1000.0);
    GLUtilReportAWDClientTimerEvent(308, 0, v5, self->_enableSKE, self->_isInitiator, v81);
    objc_msgSend__reportAWDAllocateTime(self, v82, v83, v84);
    GLUCreateQRClientTimeEvent(308, 0, v5, self->_timeBase, v81);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v87 = objc_opt_respondsToSelector();

    if ((v87 & 1) != 0)
    {
      v88 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v88, v89, (uint64_t)self, v90, v85);

    }
  }
  if (*(unsigned __int8 *)(v101 + 1) == *(unsigned __int8 *)(v20 + 1))
  {
    if ((objc_msgSend__addCandidate_isRemoteCandidate_(self, v76, (uint64_t)v56, v78, 0) & 1) != 0)
    {
      objc_msgSend__addStunCheckPair_isRemoteCandidate_(self, v91, (uint64_t)v56, v92, 0);
    }
    else
    {
      OSLogHandleForTransportCategory();
      v96 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v104 = v105;
        _os_log_impl(&dword_19B949000, v96, OS_LOG_TYPE_DEFAULT, "external address [%s] already exists, do not add stun check pairs", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v98 = v105;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("external address [%s] already exists, do not add stun check pairs"));
          if (_IDSShouldLog())
          {
            v98 = v105;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("external address [%s] already exists, do not add stun check pairs"));
          }
        }
      }
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v93, 0, v94, v98, v100);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v95 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v95, OS_LOG_TYPE_DEFAULT, "local and external addresses have mismatched family, ignore.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("local and external addresses have mismatched family, ignore."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("local and external addresses have mismatched family, ignore."));
      }
    }
  }

}

- (BOOL)_IsExtIPDiscoveryNeeded:(sockaddr *)a3 candidatePairList:(id)a4
{
  id v5;
  const char *v6;
  double v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  BOOL v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = a4;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v23, v7, v27, 16);
  if (v8)
  {
    v12 = v8;
    v13 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v24 != v13)
          objc_enumerationMutation(v5);
        v15 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v15, v9, v10, v11, (_QWORD)v23))
        {
          objc_msgSend_local(v15, v9, v10, v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend_address(v16, v17, v18, v19);

          if (IsSameSA(v20, (uint64_t)a3))
          {
            v21 = 0;
            goto LABEL_12;
          }
        }
      }
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v23, v11, v27, 16);
      if (v12)
        continue;
      break;
    }
  }
  v21 = 1;
LABEL_12:

  return v21;
}

- (void)_sendAllocbindRequestForExtIP:(id)a3 startTime:(double)a4
{
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  BOOL v29;
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  void *v47;
  const char *v48;
  double v49;
  int IsExtIPDiscoveryNeeded_candidatePairList;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  double v63;
  void *v64;
  const char *v65;
  double v66;
  void *v67;
  NSObject *v68;
  const char *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *tokenToCandidatePairs;
  id v75;
  NSObject *v76;
  const char *v77;
  double v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  NSMutableArray *obj;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint8_t buf[4];
  id v90;
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v82 = a3;
  v8 = objc_msgSend_serverAddress(v82, v5, v6, v7);
  objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v9, 3, v10, 1, 10, 1400, 0xFFFFFFFFLL, 0, v8);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  obj = self->_interfaceAddressArray;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v85, v12, v91, 16);
  if (v15)
  {
    v17 = *(_QWORD *)v86;
    while (2)
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v86 != v17)
          objc_enumerationMutation(obj);
        v19 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * i);
        v20 = objc_msgSend_index(v19, v13, v14, v16);
        objc_msgSend_address(v19, v21, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend_sa(v24, v25, v26, v27);

        v29 = IsLinkLocalSA(v28);
        v33 = objc_msgSend_IPVersion(v19, v30, v31, v32);
        if ((objc_msgSend_isCellular(v19, v34, v35, v36) & 1) != 0)
        {
          objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v37, v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = objc_msgSend_radioAccessTechnology(v40, v41, v42, v43);

        }
        else if (objc_msgSend_isWired(v19, v37, v38, v39))
        {
          v44 = 9;
        }
        else
        {
          v44 = 0;
        }
        if (v28)
          v45 = (int)v20 < 1;
        else
          v45 = 1;
        v46 = v45 || v29;
        if ((v46 & 1) == 0 && v33 != 1 && (objc_msgSend_isCompanionLink(v19, v13, v14, v16) & 1) == 0)
        {
          objc_msgSend_allValues(self->_tokenToCandidatePairs, v13, v14, v16);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          IsExtIPDiscoveryNeeded_candidatePairList = objc_msgSend__IsExtIPDiscoveryNeeded_candidatePairList_(self, v48, v28, v49, v47);

          if (IsExtIPDiscoveryNeeded_candidatePairList)
          {
            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v13, 3, v16, 1, v44, 1450, v20, v28, v28);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v55 = objc_msgSend_serverAddress(v82, v52, v53, v54);
            objc_msgSend_relaySessionID(v82, v56, v57, v58);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            tokenForStunCandidatePair(v28, v55, v59);
            v60 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_relaySessionID(v82, v61, v62, v63);
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v65, (uint64_t)v51, v66, v81, v64, self);
            v67 = (void *)objc_claimAutoreleasedReturnValue();

            OSLogHandleForTransportCategory();
            v68 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v90 = v82;
              _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, "_sendAllocbindRequestForExtIP: setPropertiesWithRelaySessionInfo: qrSessionInfo: %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v79 = v82;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_sendAllocbindRequestForExtIP: setPropertiesWithRelaySessionInfo: qrSessionInfo: %@"));
                if (_IDSShouldLog())
                {
                  v79 = v82;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_sendAllocbindRequestForExtIP: setPropertiesWithRelaySessionInfo: qrSessionInfo: %@"));
                }
              }
            }
            objc_msgSend_setPropertiesWithRelaySessionInfo_sessionInfoDict_enableSKE_(v67, v69, (uint64_t)v82, v70, 0, self->_enableSKE, v79);
            objc_msgSend_setSelfAllocateStartTime_(v67, v71, v72, a4);
            if (!self->_tokenToCandidatePairs)
            {
              Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              tokenToCandidatePairs = self->_tokenToCandidatePairs;
              self->_tokenToCandidatePairs = Mutable;

            }
            v75 = v67;
            if (v75)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, v60, v75);
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              sub_19BAF12A0();
            }

            OSLogHandleForTransportCategory();
            v76 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v90 = v60;
              _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "start extIP discovery for %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v80 = v60;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start extIP discovery for %@."));
                if (_IDSShouldLog())
                {
                  v80 = v60;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start extIP discovery for %@."));
                }
              }
            }
            objc_msgSend_sendAllocbindRequest_isRealloc_inResponseToNoSessionState_reconnectQUIC_(self, v77, (uint64_t)v75, v78, 0, 0, 0, v80);

            goto LABEL_43;
          }
        }
      }
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v85, v16, v91, 16);
      if (v15)
        continue;
      break;
    }
  }
LABEL_43:

}

- (BOOL)_requestSelfAllocationForInterfaceAddress:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  char IsExtIPDiscoveryNeeded_candidatePairList;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v33;
  void *v34;
  _QWORD block[5];
  id v36;
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_address(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_sa(v8, v9, v10, v11);

  objc_msgSend_allValues(self->_tokenToCandidatePairs, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  IsExtIPDiscoveryNeeded_candidatePairList = objc_msgSend__IsExtIPDiscoveryNeeded_candidatePairList_(self, v17, v12, v18, v16);

  if ((IsExtIPDiscoveryNeeded_candidatePairList & 1) != 0)
  {
    if (!self->_hasPendingSelfAllocation)
      self->_hasPendingSelfAllocation = 1;
    im_primary_queue();
    v20 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B9E5A98;
    block[3] = &unk_1E3C1FDD8;
    block[4] = self;
    v36 = v4;
    dispatch_async(v20, block);

  }
  else
  {
    OSLogHandleForTransportCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_address(v4, v22, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v38 = v25;
      _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "no need to request self allocation for [%@].", buf, 0xCu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_address(v4, v26, v27, v28);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no need to request self allocation for [%@]."));

        if (_IDSShouldLog())
        {
          objc_msgSend_address(v4, v29, v30, v31, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no need to request self allocation for [%@]."));

        }
      }
    }
  }

  return IsExtIPDiscoveryNeeded_candidatePairList;
}

- (void)_startExtIPDiscovery
{
  NSObject *v2;
  const char *v3;
  double v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BOOL4 v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  int isCompanionLink;
  const char *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  double v42;
  unsigned int v43;
  const char *isCellular;
  uint64_t v45;
  double v46;
  uint64_t LocalMTU;
  BOOL v48;
  int v49;
  void *v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  __CFArray *v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  const char *v60;
  uint64_t v61;
  double v62;
  NSObject *v63;
  __CFArray *v64;
  const char *v65;
  double v66;
  const char *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t j;
  uint64_t v72;
  __CFArray *v73;
  NSObject *v74;
  const char *v75;
  double v76;
  __CFArray *v77;
  __CFArray *v78;
  NSMutableArray *obj;
  uint64_t v80;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint8_t v90[128];
  uint8_t buf[4];
  __CFArray *v92;
  _BYTE v93[128];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (self->_allowP2P)
  {
    OSLogHandleForTransportCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "== start external IP discovery for all interfaces ==", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("== start external IP discovery for all interfaces =="));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("== start external IP discovery for all interfaces =="));
      }
    }
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    obj = self->_interfaceAddressArray;
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v86, v4, v93, 16);
    if (v7)
    {
      v78 = 0;
      v80 = *(_QWORD *)v87;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v87 != v80)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * i);
          v11 = objc_msgSend_index(v10, v5, v6, v8);
          objc_msgSend_address(v10, v12, v13, v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend_sa(v15, v16, v17, v18);

          v20 = IsLinkLocalSA(v19);
          v24 = objc_msgSend_IPVersion(v10, v21, v22, v23);
          isCompanionLink = objc_msgSend_isCompanionLink(v10, v25, v26, v27);
          if ((objc_msgSend_isCellular(v10, v29, v30, v31) & 1) != 0)
          {
            objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v32, v33, v34);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend_radioAccessTechnology(v35, v36, v37, v38);

          }
          else if (objc_msgSend_isWired(v10, v32, v33, v34))
          {
            v39 = 9;
          }
          else
          {
            v39 = 0;
          }
          if (*(_BYTE *)(v19 + 1) == 30)
            v43 = 6;
          else
            v43 = 5;
          isCellular = (const char *)objc_msgSend_isCellular(v10, v40, v41, v42);
          LocalMTU = GLUtilGetLocalMTU(v43, isCellular, v45, v46);
          if (v19)
            v48 = (int)v11 < 1;
          else
            v48 = 1;
          v49 = v48 || v20;
          if (((v49 | isCompanionLink) & 1) == 0)
          {
            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v5, 0, v8, 1, v39, LocalMTU, v11, v19, v19);
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v51, (uint64_t)v50, v52, 0))
              objc_msgSend__addStunCheckPair_isRemoteCandidate_(self, v53, (uint64_t)v50, v54, 0);
            if (v24 != 1)
            {
              v55 = v78;
              if (!v78)
                v55 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v78 = v55;
              if (v10 && v55)
                CFArrayAppendValue(v55, v10);
            }

          }
        }
        v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v86, v8, v93, 16);
      }
      while (v7);
    }
    else
    {
      v78 = 0;
    }

    if (objc_msgSend_count(v78, v57, v58, v59))
    {
      OSLogHandleForTransportCategory();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v92 = v78;
        _os_log_impl(&dword_19B949000, v63, OS_LOG_TYPE_DEFAULT, "need external IP discovery for interfaces:%@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v77 = v78;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("need external IP discovery for interfaces:%@"));
          if (_IDSShouldLog())
          {
            v77 = v78;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("need external IP discovery for interfaces:%@"));
          }
        }
      }
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v64 = v78;
      v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v65, (uint64_t)&v82, v66, v90, 16);
      if (v68)
      {
        v70 = *(_QWORD *)v83;
        do
        {
          for (j = 0; j != v68; ++j)
          {
            if (*(_QWORD *)v83 != v70)
              objc_enumerationMutation(v64);
            objc_msgSend__requestSelfAllocationForInterfaceAddress_(self, v67, *(_QWORD *)(*((_QWORD *)&v82 + 1) + 8 * j), v69, v77);
          }
          v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v67, (uint64_t)&v82, v69, v90, 16);
        }
        while (v68);
      }

    }
    if (!self->_hasPendingSelfAllocation || (v72 = objc_msgSend_count(v78, v60, v61, v62), v73 = v78, !v72))
    {
      OSLogHandleForTransportCategory();
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v74, OS_LOG_TYPE_DEFAULT, "external IP discovery is not needed, send connection data.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("external IP discovery is not needed, send connection data."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("external IP discovery is not needed, send connection data."));
      }
      objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v75, 0, v76, v77);
      v73 = v78;
    }

  }
  else
  {
    OSLogHandleForTransportCategory();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v56, OS_LOG_TYPE_DEFAULT, "skip external IP discovery because P2P is not allowed.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip external IP discovery because P2P is not allowed."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip external IP discovery because P2P is not allowed."));
      }
    }
  }
}

- (void)_processRemoteCandidates:(id)a3
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t i;
  const void *v14;
  __CFArray *v15;
  BOOL v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  double v22;
  const char *v23;
  double v24;
  uint64_t v25;
  __CFArray *v26;
  uint64_t j;
  void *v28;
  id v29;
  const char *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t k;
  void *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  const char *v44;
  double v45;
  NSObject *v46;
  const char *v47;
  double v48;
  __CFArray *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t m;
  void *v56;
  BOOL v57;
  const char *v58;
  double v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t n;
  void *v66;
  void *v67;
  id v68;
  const char *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t ii;
  void *v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  const char *v87;
  double v88;
  NSObject *v89;
  const char *v90;
  double v91;
  void *v92;
  void *v93;
  NSMutableArray *v94;
  id v95;
  __CFArray *v96;
  __CFArray *v97;
  id obj;
  __CFArray *obja;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[128];
  _BYTE v126[128];
  _BYTE v127[128];
  _BYTE v128[128];
  _BYTE v129[128];
  uint8_t v130[128];
  uint8_t buf[4];
  void *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v93 = v3;
  if (objc_msgSend_count(v3, v4, v5, v6))
  {
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    obj = v3;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v121, v8, v130, 16);
    if (v10)
    {
      v97 = 0;
      v12 = *(_QWORD *)v122;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v122 != v12)
            objc_enumerationMutation(obj);
          v14 = *(const void **)(*((_QWORD *)&v121 + 1) + 8 * i);
          if ((objc_msgSend_containsObject_(self->_remoteCandidateList, v9, (uint64_t)v14, v11) & 1) == 0)
          {
            v15 = v97;
            if (!v97)
              v15 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (v14)
              v16 = v15 == 0;
            else
              v16 = 1;
            v97 = v15;
            if (!v16)
              CFArrayAppendValue(v15, v14);
          }
        }
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v121, v11, v130, 16);
      }
      while (v10);
    }
    else
    {
      v97 = 0;
    }

    if (objc_msgSend_count(v97, v18, v19, v20))
      objc_msgSend__processNewRemoteCandidates_(self, v21, (uint64_t)v97, v22);
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v94 = self->_remoteCandidateList;
    v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v94, v23, (uint64_t)&v117, v24, v129, 16);
    v26 = 0;
    if (v25)
    {
      v95 = *(id *)v118;
      do
      {
        for (j = 0; j != v25; ++j)
        {
          if (*(id *)v118 != v95)
            objc_enumerationMutation(v94);
          v28 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * j);
          v113 = 0u;
          v114 = 0u;
          v115 = 0u;
          v116 = 0u;
          v29 = obj;
          v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v113, v31, v128, 16);
          if (v34)
          {
            v36 = *(_QWORD *)v114;
            while (2)
            {
              for (k = 0; k != v34; ++k)
              {
                if (*(_QWORD *)v114 != v36)
                  objc_enumerationMutation(v29);
                v38 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * k);
                v39 = objc_msgSend_address(v28, v32, v33, v35, v92);
                v43 = objc_msgSend_address(v38, v40, v41, v42);
                if (IsSameIP(v39, v43))
                {

                  goto LABEL_52;
                }
              }
              v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v32, (uint64_t)&v113, v35, v128, 16);
              if (v34)
                continue;
              break;
            }
          }

          if (v26 || (v26 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
          {
            if (v28)
              CFArrayAppendValue(v26, v28);
          }
          OSLogHandleForTransportCategory();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v132 = v28;
            _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, "Try to remove remote candidate %@.", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v92 = v28;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Try to remove remote candidate %@."));
              if (_IDSShouldLog())
              {
                v92 = v28;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Try to remove remote candidate %@."));
              }
            }
          }
LABEL_52:
          ;
        }
        v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v94, v44, (uint64_t)&v117, v45, v129, 16);
      }
      while (v25);
    }

    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    obja = v26;
    v49 = 0;
    v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v47, (uint64_t)&v109, v48, v127, 16);
    if (v52)
    {
      v54 = *(_QWORD *)v110;
      do
      {
        for (m = 0; m != v52; ++m)
        {
          if (*(_QWORD *)v110 != v54)
            objc_enumerationMutation(obja);
          v56 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * m);
          if (objc_msgSend_type(v56, v50, v51, v53, v92) == 2)
          {
            if (!v49)
              v49 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (v56)
              v57 = v49 == 0;
            else
              v57 = 1;
            if (!v57)
              CFArrayAppendValue(v49, v56);
          }
        }
        v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v50, (uint64_t)&v109, v53, v127, 16);
      }
      while (v52);
    }

    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v96 = v49;
    v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v58, (uint64_t)&v105, v59, v126, 16);
    if (v62)
    {
      v63 = *(_QWORD *)v106;
      v64 = 138412290;
      do
      {
        for (n = 0; n != v62; ++n)
        {
          if (*(_QWORD *)v106 != v63)
            objc_enumerationMutation(v96);
          v66 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * n);
          objc_msgSend_allValues(self->_tokenToCandidatePairs, v60, v61, *(double *)&v64, v92);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v68 = v67;
          v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v101, v70, v125, 16);
          if (v73)
          {
            v75 = *(_QWORD *)v102;
            while (2)
            {
              for (ii = 0; ii != v73; ++ii)
              {
                if (*(_QWORD *)v102 != v75)
                  objc_enumerationMutation(v68);
                v77 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * ii);
                if (objc_msgSend_state(v77, v71, v72, v74) == 3)
                {
                  objc_msgSend_remote(v77, v71, v72, v74);
                  v78 = (void *)objc_claimAutoreleasedReturnValue();
                  v82 = objc_msgSend_external(v78, v79, v80, v81);
                  v86 = objc_msgSend_external(v66, v83, v84, v85);
                  LOBYTE(v82) = IsSameSA(v82, v86);

                  if ((v82 & 1) != 0)
                  {

                    goto LABEL_90;
                  }
                }
              }
              v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v71, (uint64_t)&v101, v74, v125, 16);
              if (v73)
                continue;
              break;
            }
          }

          objc_msgSend_removeObject_(obja, v87, (uint64_t)v66, v88);
          OSLogHandleForTransportCategory();
          v89 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v132 = v66;
            _os_log_impl(&dword_19B949000, v89, OS_LOG_TYPE_DEFAULT, "Add back removed PRLX remote candidate %@", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v92 = v66;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Add back removed PRLX remote candidate %@"));
              if (_IDSShouldLog())
              {
                v92 = v66;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Add back removed PRLX remote candidate %@"));
              }
            }
          }
LABEL_90:

        }
        v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v60, (uint64_t)&v105, *(double *)&v64, v126, 16);
      }
      while (v62);
    }

    objc_msgSend__processRemovedRemoteCandidates_(self, v90, (uint64_t)obja, v91);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v132 = v93;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "invalid remote candidate list %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invalid remote candidate list %@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invalid remote candidate list %@."));
      }
    }
  }

}

- (void)_startStunCheck:(id)a3
{
  ((void (*)(IDSGlobalLink *, char *, id))MEMORY[0x1E0DE7D20])(self, sel__sendBindingRequest_stunMessage_, a3);
}

- (void)_updateNominatedCandidatePair:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  NSMutableDictionary *tokenToCandidatePairs;
  const char *v26;
  id v27;
  double v28;
  void *Value;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  id v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v35, 0.0, v42, 16);
  if (v12)
  {
    v14 = *(_QWORD *)v36;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v36 != v14)
          objc_enumerationMutation(v8);
        objc_msgSend_setIsNominated_(*(void **)(*((_QWORD *)&v35 + 1) + 8 * v15++), v10, 0, v13);
      }
      while (v12 != v15);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v35, v13, v42, 16);
    }
    while (v12);
  }
  objc_msgSend_allValues(self->_tokenToStunCheckPairs, v10, v11, v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v17 = v16;
  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v31, v19, v41, 16);
  if (v21)
  {
    v23 = *(_QWORD *)v32;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v32 != v23)
          objc_enumerationMutation(v17);
        objc_msgSend_setIsNominated_(*(void **)(*((_QWORD *)&v31 + 1) + 8 * v24++), v20, 0, v22);
      }
      while (v21 != v24);
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v31, v22, v41, 16);
    }
    while (v21);
  }

  if (!v4
    || (tokenToCandidatePairs = self->_tokenToCandidatePairs) == 0
    || (v27 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v4)) == 0)
  {
    Value = 0;
    if (v4 && self->_tokenToStunCheckPairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToStunCheckPairs, v4);
    v27 = Value;
  }
  objc_msgSend_setIsNominated_(v27, v26, 1, v28);
  OSLogHandleForTransportCategory();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v40 = v27;
    _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "set nominated flag for %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("set nominated flag for %@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("set nominated flag for %@."));
    }
  }

}

- (void)_nominateCandidatePair:(id)a3
{
  id v4;
  void *Value;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  const char *v10;
  double v11;
  NSObject *v12;
  int nominateCount;
  const char *v14;
  double v15;
  uint64_t v16;
  id v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (self->_isInitiator)
  {
    Value = 0;
    if (v4 && self->_tokenToCandidatePairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v4);
    v6 = Value;
    if ((objc_msgSend_isSharedQRSession(v6, v7, v8, v9) & 1) == 0)
    {
      ++self->_nominateCount;
      objc_msgSend__updateNominatedCandidatePair_(self, v10, (uint64_t)v4, v11);
      OSLogHandleForTransportCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        nominateCount = self->_nominateCount;
        *(_DWORD *)buf = 67109378;
        v19 = nominateCount;
        v20 = 2112;
        v21 = v4;
        _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "start nomination #%d: %@.", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v16 = self->_nominateCount;
          v17 = v4;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start nomination #%d: %@."));
          if (_IDSShouldLog())
          {
            v16 = self->_nominateCount;
            v17 = v4;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start nomination #%d: %@."));
          }
        }
      }
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v14, 5, v15, 0, 0, v4, v16, v17);
    }

  }
}

- (void)_sendBindingRequest:(id)a3 stunMessage:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  id v13;
  const char *v14;
  double v15;
  NSMutableDictionary *tokenToStunCheckPairs;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  NSObject *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  double v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  const char *v34;
  double v35;
  id v36;
  const char *v37;
  uint64_t v38;
  void (**v39)(void *, id);
  double v40;
  double v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  const char *v46;
  uint64_t v47;
  double v48;
  void *v49;
  const char *v50;
  double v51;
  NSObject *v52;
  char *v53;
  IDSStunMessage *v54;
  const char *v55;
  double v56;
  __CFDictionary *v57;
  const char *v58;
  uint64_t v59;
  double v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  const char *v66;
  double v67;
  NSObject *v68;
  void *v69;
  double v70;
  NSObject *v71;
  double v72;
  NSData *v73;
  const char *v74;
  uint64_t v75;
  double v76;
  void *v77;
  const char *v78;
  double v79;
  const char *v80;
  double v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  double v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  double v89;
  BOOL v90;
  double v91;
  const char *v92;
  uint64_t v93;
  NSObject *v94;
  const char *v95;
  double v96;
  _QWORD v97[4];
  id v98;
  id v99;
  IDSGlobalLink *v100;
  __CFDictionary *v101;
  id v102;
  void (**v103)(void *, id);
  _QWORD v104[5];
  id v105;
  id v106;
  _QWORD aBlock[4];
  id v108;
  IDSGlobalLink *v109;
  id v110;
  unint64_t v111;
  _BYTE buf[22];
  __int16 v113;
  char *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (self->_state < 5)
  {
    if (!v6
      || (tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
      || (v17 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v6)) == 0)
    {
      OSLogHandleForTransportCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "send bind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send bind request failed due to invalid candidate pair."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send bind request failed due to invalid candidate pair."));
        }
      }
      if (!v7)
      {
        v13 = 0;
        goto LABEL_86;
      }
      objc_msgSend_requestID(v7, v31, v32, v33);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__removeStunRequest_(self, v34, (uint64_t)v27, v35);
      v13 = 0;
LABEL_85:

      goto LABEL_86;
    }
    v13 = v17;
    v21 = objc_msgSend_state(v17, v18, v19, v20);
    if (v21 >= 3)
    {
      OSLogHandleForIDSCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = (&_IDSStunCandidatePairStateStrings)[v21];
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v23;
        _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "skip binding request for %@, state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip binding request for %@, state [%s]."));
      if (!v7)
        goto LABEL_86;
      objc_msgSend_requestID(v7, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__removeStunRequest_(self, v28, (uint64_t)v27, v29);
      goto LABEL_85;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_19B9E7C14;
    aBlock[3] = &unk_1E3C200B8;
    v13 = v13;
    v108 = v13;
    v109 = self;
    v111 = v21;
    v36 = v6;
    v110 = v36;
    v39 = (void (**)(void *, id))_Block_copy(aBlock);
    if (v7)
    {
      objc_msgSend_startTime(v7, v37, v38, v40);
      v42 = v41;
      v45 = ids_monotonic_time() - v41;
      if (v45 <= 60.0)
      {
        objc_msgSend_triggeredCheckTime(v13, v43, v44, v45);
        if (v70 <= v42)
        {
          v39[2](v39, v7);
        }
        else
        {
          OSLogHandleForTransportCategory();
          v71 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v7;
            _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "cancel binding request %@ with triggered check", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("cancel binding request %@ with triggered check"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("cancel binding request %@ with triggered check"));
            }
          }
          v104[0] = MEMORY[0x1E0C809B0];
          v104[1] = 3221225472;
          v104[2] = sub_19B9E8144;
          v104[3] = &unk_1E3C20090;
          v104[4] = self;
          v105 = v36;
          v7 = v7;
          v106 = v7;
          v72 = ids_monotonic_time();
          IDSTransportThreadAddBlockAfter(v104, v42 + 60.0 - v72 + 0.1);

        }
      }
      else
      {
        objc_msgSend_setState_(v13, v43, 2, v45);
        objc_msgSend_requestID(v7, v46, v47, v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__removeStunRequest_(self, v50, (uint64_t)v49, v51);

        OSLogHandleForTransportCategory();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          v53 = (&_IDSStunCandidatePairStateStrings)[v21];
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v13;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v53;
          v113 = 2080;
          v114 = off_1EE40A668;
          _os_log_impl(&dword_19B949000, v52, OS_LOG_TYPE_DEFAULT, "binding request %@ timed out, update state (%s->%s).", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("binding request %@ timed out, update state (%s->%s)."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("binding request %@ timed out, update state (%s->%s)."));
          }
        }
      }
      goto LABEL_84;
    }
    v54 = [IDSStunMessage alloc];
    v7 = (id)objc_msgSend_initWithType_(v54, v55, 1, v56);
    v57 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend_local(v13, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend_radioAccessTechnology(v61, v62, v63, v64);

    if (self->_remoteDeviceVersion <= 2 && (_DWORD)v65 == 9)
    {
      OSLogHandleForTransportCategory();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, "RATType Wired -> NonCell due to remote version", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("RATType Wired -> NonCell due to remote version"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("RATType Wired -> NonCell due to remote version"));
        }
      }
      v65 = 0;
    }
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v66, v65, v67);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if (v69)
    {
      CFDictionarySetValue(v57, CFSTR("ids-stun-attribute-cellrat"), v69);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF2394();
    }

    v73 = self->_controlMessageKey;
    if (v73)
    {
      CFDictionarySetValue(v57, CFSTR("ids-stun-attribute-messageintegrity"), v73);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF2314();
    }

    if (self->_isInitiator && (self->_remoteCapabilityFlag & 1) != 0)
    {
      memset(buf, 170, 16);
      objc_msgSend_linkUUID(v13, v74, v75, v76);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_getUUIDBytes_(v77, v78, (uint64_t)buf, v79);

      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v80, (uint64_t)buf, v81, 16);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      if (v82)
      {
        CFDictionarySetValue(v57, CFSTR("ids-stun-attribute-linkuuid"), v82);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF2294();
      }

    }
    if (!objc_msgSend__shouldUseP2PTLE(self, v74, v75, v76))
      goto LABEL_74;
    objc_msgSend_local(v13, v83, v84, v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isCellularStunCandidate(v86, v87, v88, v89) & 1) != 0)
    {
      v90 = !self->_allowTLEOverCellular;

      if (v90)
      {
LABEL_74:
        objc_msgSend_setTransactionID_attributes_(v7, v83, 0, v85, v57);
        v91 = ids_monotonic_time();
        objc_msgSend_setStartTime_(v7, v92, v93, v91);
        v39[2](v39, v7);
LABEL_83:

LABEL_84:
        v27 = v108;
        goto LABEL_85;
      }
    }
    else
    {

    }
    OSLogHandleForTransportCategory();
    v94 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v36;
      _os_log_impl(&dword_19B949000, v94, OS_LOG_TYPE_DEFAULT, "getting p2p negotiation for: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("getting p2p negotiation for: %@"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("getting p2p negotiation for: %@"));
      }
    }
    v97[0] = MEMORY[0x1E0C809B0];
    v97[1] = 3221225472;
    v97[2] = sub_19B9E8154;
    v97[3] = &unk_1E3C200E0;
    v98 = v36;
    v99 = v13;
    v100 = self;
    v101 = v57;
    v102 = v7;
    v103 = v39;
    objc_msgSend__getP2PNegotiationForCandidatePair_completionBlock_(self, v95, (uint64_t)v99, v96, v97);

    goto LABEL_83;
  }
  OSLogHandleForTransportCategory();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "skip bind request, GL state [%s].", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip bind request, GL state [%s]."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip bind request, GL state [%s]."));
    }
  }
  if (v7)
  {
    objc_msgSend_requestID(v7, v10, v11, v12);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend__removeStunRequest_(self, v14, (uint64_t)v13, v15);
LABEL_86:

  }
}

- (BOOL)_shouldUseP2PTLE
{
  _BOOL4 forceP2PTLE;
  NSObject *v3;
  const __CFString *v4;
  uint8_t buf[4];
  const __CFString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  forceP2PTLE = self->_forceP2PTLE;
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CFSTR("NO");
    if (forceP2PTLE)
      v4 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v7 = v4;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "_shouldUseP2PTLE: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_shouldUseP2PTLE: %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_shouldUseP2PTLE: %@"));
    }
  }
  return forceP2PTLE;
}

- (BOOL)_shouldUseVRTLE
{
  return self->_isTLEEnabled && self->_allowTLEOverVRLinks;
}

- (BOOL)_shouldUseQRTLE
{
  _BOOL4 v3;
  NSObject *v4;
  const __CFString *v5;
  const __CFString *v6;
  _BOOL4 forceTLE;
  const __CFString *v8;
  uint8_t buf[4];
  const __CFString *v11;
  __int16 v12;
  const __CFString *v13;
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = self->_isTLEEnabled || self->_forceTLE;
  OSLogHandleForTransportCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CFSTR("NO");
    if (v3)
      v6 = CFSTR("YES");
    else
      v6 = CFSTR("NO");
    forceTLE = self->_forceTLE;
    if (self->_isTLEEnabled)
      v8 = CFSTR("YES");
    else
      v8 = CFSTR("NO");
    *(_DWORD *)buf = 138412802;
    v11 = v6;
    v12 = 2112;
    if (forceTLE)
      v5 = CFSTR("YES");
    v13 = v8;
    v14 = 2112;
    v15 = v5;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "_shouldUseQRTLE: %@ (TLE enabled: %@, force: %@)", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_shouldUseQRTLE: %@ (TLE enabled: %@, force: %@)"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_shouldUseQRTLE: %@ (TLE enabled: %@, force: %@)"));
    }
  }
  return v3;
}

- (void)_getP2PNegotiationForCandidatePair:(id)a3 completionBlock:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  IDSGlobalLinkP2PKeyNegotiatorProvider *p2pNegotiatorProvider;
  IDSGlobalLinkP2PKeyNegotiatorProvider *v10;
  NSString *groupID;
  id v12;
  id v13;
  const char *v14;
  double v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  IDSGlobalLinkP2PKeyNegotiatorProvider *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  OSLogHandleForTransportCategory();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    p2pNegotiatorProvider = self->_p2pNegotiatorProvider;
    *(_DWORD *)buf = 138412290;
    v20 = p2pNegotiatorProvider;
    _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "getting p2p negotiator from %@...", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("getting p2p negotiator from %@..."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("getting p2p negotiator from %@..."));
    }
  }
  v10 = self->_p2pNegotiatorProvider;
  groupID = self->_groupID;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_19B9E89FC;
  v16[3] = &unk_1E3C20130;
  v17 = v6;
  v18 = v7;
  v12 = v7;
  v13 = v6;
  objc_msgSend_negotiatorForGroup_completionHandler_(v10, v14, (uint64_t)groupID, v15, v16);

}

- (void)_processRemoteLinkUUID:(id)a3 candidatePair:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  double v15;
  char isEqual;
  const char *v17;
  double v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  void *v31;
  void *v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v11 = v7;
  if (self->_isInitiator)
  {
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "receive linkUUID from Receiver, ignore.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive linkUUID from Receiver, ignore."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive linkUUID from Receiver, ignore."));
      }
    }
  }
  else if (v6)
  {
    objc_msgSend_linkUUID(v7, v8, v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v6, v14, (uint64_t)v13, v15);

    if ((isEqual & 1) == 0)
    {
      objc_msgSend_setLinkUUID_(v11, v17, (uint64_t)v6, v18);
      OSLogHandleForTransportCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_candidatePairToken(v11, v20, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v34 = v6;
        v35 = 2112;
        v36 = v23;
        _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "_processRemoteLinkUUID: update linkUUID %@ for %@.", buf, 0x16u);

      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          objc_msgSend_candidatePairToken(v11, v24, v25, v26);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_processRemoteLinkUUID: update linkUUID %@ for %@."));

          if (_IDSShouldLog())
          {
            objc_msgSend_candidatePairToken(v11, v27, v28, v29, v6, v31);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_processRemoteLinkUUID: update linkUUID %@ for %@."));

          }
        }
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "receive invalid linkUUID, ignore.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive invalid linkUUID, ignore."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive invalid linkUUID, ignore."));
      }
    }
  }

}

- (BOOL)_isCellularInterfaceForCandidatePair:(id)a3 localAddress:(sockaddr *)a4
{
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  BOOL v22;
  NSMutableArray *v23;
  const char *v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  _BOOL4 v39;
  int v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  BOOL v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v10 = v6;
  if (v6)
  {
    objc_msgSend_local(v6, v7, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_radioAccessTechnology(v11, v12, v13, v14))
    {
      objc_msgSend_local(v10, v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend_radioAccessTechnology(v18, v19, v20, v21) != 9;

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v23 = self->_interfaceAddressArray;
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v47, v25, v51, 16);
    if (v26)
    {
      v30 = v26;
      v31 = *(_QWORD *)v48;
      while (2)
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v48 != v31)
            objc_enumerationMutation(v23);
          v33 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
          objc_msgSend_address(v33, v27, v28, v29, (_QWORD)v47);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = objc_msgSend_sa(v34, v35, v36, v37);
          v39 = IsSameSA(v38, (uint64_t)a4);

          if (v39 && objc_msgSend_isCellular(v33, v27, v28, v29))
          {
            objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v27, v28, v29);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend_radioAccessTechnology(v41, v42, v43, v44);

            goto LABEL_17;
          }
        }
        v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v47, v29, v51, 16);
        if (v30)
          continue;
        break;
      }
    }
    v40 = 0;
LABEL_17:

    if (v40)
      v45 = v40 == 9;
    else
      v45 = 1;
    v22 = !v45;
  }

  return v22;
}

- (BOOL)_processBindingRequest:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v10;
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  void *Value;
  const char *v19;
  uint64_t v20;
  double v21;
  IDSStunMessage *v22;
  const char *v23;
  double v24;
  __CFDictionary *v25;
  const char *v26;
  double v27;
  id v28;
  NSObject *v29;
  id v30;
  NSData *v31;
  NSObject *v32;
  id v33;
  const char *v34;
  double v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  double v39;
  void *v40;
  NSObject *v41;
  id v42;
  const char *v43;
  uint64_t v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  const char *v51;
  double v52;
  void *v53;
  NSObject *v54;
  id v55;
  const char *v56;
  double v57;
  void *v58;
  NSObject *v59;
  id v60;
  void *v61;
  const char *v62;
  double v63;
  void *v64;
  id v65;
  id v66;
  const char *v67;
  double v68;
  const char *v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  NSObject *v73;
  const char *v74;
  void *v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t LocalMTU;
  const char *v80;
  double v81;
  NSObject *v82;
  const char *v83;
  double v84;
  const char *v85;
  double v86;
  NSMutableArray *v87;
  const char *v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  id v94;
  uint64_t v95;
  uint64_t i;
  void *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  double v106;
  BOOL v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  const char *v111;
  double v112;
  void *v113;
  const char *v114;
  double v115;
  const char *v116;
  double v117;
  uint64_t v118;
  void *v119;
  NSObject *v120;
  const char *v121;
  double v122;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *tokenToStunCheckPairs;
  id v125;
  NSObject *v126;
  id v127;
  NSObject *v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  double v133;
  const char *v134;
  double v135;
  const char *v136;
  double v137;
  const char *v138;
  uint64_t v139;
  double v140;
  id v141;
  const char *v142;
  double v143;
  void *v144;
  const char *v145;
  double v146;
  const char *v147;
  uint64_t v148;
  double v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  double v153;
  BOOL v154;
  uint64_t v155;
  const char *v156;
  double v157;
  id v159;
  const char *v160;
  void *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  id v165;
  id v166;
  void *v167;
  id v168;
  void *v169;
  __CFDictionary *v170;
  void (**v171)(void);
  void *v172;
  _QWORD v173[4];
  __CFDictionary *v174;
  void (**v175)(void);
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _QWORD v180[5];
  id v181;
  _BYTE v182[128];
  _QWORD aBlock[5];
  id v184;
  __CFDictionary *v185;
  id v186;
  id v187;
  id v188;
  _BYTE *v189;
  _QWORD *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  int v207;
  uint8_t v208[16];
  _BYTE buf[24];
  char *v210;
  void (*v211)(uint64_t);
  id v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _OWORD v229[8];
  _DWORD __b[372];
  char v231[16];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  char __str[16];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;

  v10 = *(_QWORD *)&a5;
  v247 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v168 = a4;
  v14 = a8;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v245 = v15;
  v246 = v15;
  v243 = v15;
  v244 = v15;
  v241 = v15;
  v242 = v15;
  *(_OWORD *)__str = v15;
  v240 = v15;
  v238 = v15;
  v237 = v15;
  v236 = v15;
  v235 = v15;
  v234 = v15;
  v233 = v15;
  v232 = v15;
  *(_OWORD *)v231 = v15;
  memset(__b, 170, sizeof(__b));
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v229[7] = v16;
  v229[6] = v16;
  v229[5] = v16;
  v229[4] = v16;
  v229[3] = v16;
  v229[2] = v16;
  v229[1] = v16;
  v229[0] = v16;
  v228 = v16;
  v227 = v16;
  v225 = v16;
  v226 = v16;
  v223 = v16;
  v224 = v16;
  v221 = v16;
  v222 = v16;
  v219 = v16;
  v220 = v16;
  v217 = v16;
  v218 = v16;
  v215 = v16;
  v216 = v16;
  v213 = v16;
  v214 = v16;
  __memcpy_chk();
  __memcpy_chk();
  SAToIPPortString(__str, 0x80uLL, (uint64_t)&v221);
  SAToIPPortString(v231, 0x80uLL, (uint64_t)&v213);
  OSLogHandleForTransportCategory();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v231;
    *(_WORD *)&buf[22] = 2080;
    v210 = __str;
    LOWORD(v211) = 1024;
    *(_DWORD *)((char *)&v211 + 2) = v10;
    _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "receive binding request %@ from %s on %s(%u)", buf, 0x26u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v163 = __str;
      v164 = v10;
      v159 = v13;
      v162 = v231;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive binding request %@ from %s on %s(%u)"));
      if (_IDSShouldLog())
      {
        v163 = __str;
        v164 = v10;
        v159 = v13;
        v162 = v231;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive binding request %@ from %s on %s(%u)"));
      }
    }
  }
  __memcpy_chk();
  Value = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v210 = (char *)sub_19B9EA494;
  v211 = sub_19B9EA4A4;
  v212 = (id)0xAAAAAAAAAAAAAAAALL;
  if (v14 && self->_tokenToStunCheckPairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToStunCheckPairs, v14);
  v212 = Value;
  objc_msgSend_linkUUID(*(void **)(*(_QWORD *)&buf[8] + 40), v19, v20, v21);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  v180[0] = 0;
  v180[1] = v180;
  v180[2] = 0x3032000000;
  v180[3] = sub_19B9EA494;
  v180[4] = sub_19B9EA4A4;
  v181 = (id)0xAAAAAAAAAAAAAAAALL;
  v22 = [IDSStunMessage alloc];
  v181 = (id)objc_msgSend_initWithType_(v22, v23, 257, v24);
  v25 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend_wrapperWithSockAddr_(IDSSockAddrWrapper, v26, (uint64_t)v229, v27);
  v28 = (id)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    CFDictionarySetValue(v25, CFSTR("ids-stun-attribute-xormappedaddress"), v28);
  }
  else
  {
    v29 = MEMORY[0x1E0C81028];
    v30 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      sub_19BAF2710();

  }
  v167 = v28;

  v31 = self->_controlMessageKey;
  if (v31)
  {
    CFDictionarySetValue(v25, CFSTR("ids-stun-attribute-messageintegrity"), v31);
  }
  else
  {
    v32 = MEMORY[0x1E0C81028];
    v33 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      sub_19BAF2314();

  }
  if (self->_islocalCellAttributeInexpensive)
  {
    LODWORD(v36) = 0;
    v37 = v172;
  }
  else
  {
    v37 = v172;
    LODWORD(v36) = objc_msgSend__isInterfaceExpensiveWithInterfaceIndex_(self, v34, v10, v35);
  }
  if (objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(self, v34, v10, v35, v159, v162, v163, v164))v36 = v36 | 2;
  else
    v36 = v36;
  if (self->_remoteDeviceVersion >= 2
    && (objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v38, v10, v39) & 1) != 0)
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v38, v36 | 4, v39);
  }
  else
  {
    if (!(_DWORD)v36)
      goto LABEL_37;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v38, v36, v39);
  }
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  if (v40)
  {
    CFDictionarySetValue(v25, CFSTR("ids-stun-attribute-link-attributes"), v40);
  }
  else
  {
    v41 = MEMORY[0x1E0C81028];
    v42 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      sub_19BAF2690();

  }
  v37 = v172;
LABEL_37:
  if (objc_msgSend__isCellularInterfaceForCandidatePair_localAddress_(self, v38, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v39, &v221))
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend_dataSoMaskBits(v46, v47, v48, v49);

    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v51, v50, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      CFDictionarySetValue(v25, CFSTR("ids-stun-attribute-data-so-masks-attributes"), v53);
    }
    else
    {
      v54 = MEMORY[0x1E0C81028];
      v55 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        sub_19BAF2610();

    }
    v37 = v172;
  }
  if (self->_isInitiator && (self->_remoteCapabilityFlag & 1) != 0)
  {
    if (!v37)
    {
      objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v43, v44, v45);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
    }
    memset(v208, 170, sizeof(v208));
    v172 = v37;
    objc_msgSend_getUUIDBytes_(v37, v43, (uint64_t)v208, v45);
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v56, (uint64_t)v208, v57, 16);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    if (v58)
    {
      CFDictionarySetValue(v25, CFSTR("ids-stun-attribute-linkuuid"), v58);
    }
    else
    {
      v59 = MEMORY[0x1E0C81028];
      v60 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        sub_19BAF2294();

    }
  }
  objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v43, (uint64_t)__str, v45, 4);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v62, (uint64_t)v231, v63, 4);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19B9EA4AC;
  aBlock[3] = &unk_1E3C20158;
  v189 = buf;
  aBlock[4] = self;
  v195 = v225;
  v196 = v226;
  v197 = v227;
  v198 = v228;
  v191 = v221;
  v192 = v222;
  v193 = v223;
  v194 = v224;
  v201 = v215;
  v202 = v216;
  v199 = v213;
  v200 = v214;
  v205 = v219;
  v206 = v220;
  v203 = v217;
  v204 = v218;
  v190 = v180;
  v65 = v13;
  v184 = v65;
  v170 = v25;
  v185 = v170;
  v165 = v61;
  v186 = v165;
  v166 = v64;
  v187 = v166;
  v207 = v10;
  v66 = v14;
  v188 = v66;
  v171 = (void (**)(void))_Block_copy(aBlock);
  if (objc_msgSend_getAttribute_attribute_(v65, v67, 32775, v68, __b))
  {
    if (__b[2] >= 0xAu)
      v72 = 10;
    else
      v72 = __b[2];
    OSLogHandleForTransportCategory();
    v73 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v74 = IDSRadioAccessTechnologyToString(v72);
      *(_DWORD *)v208 = 136315138;
      *(_QWORD *)&v208[4] = v74;
      _os_log_impl(&dword_19B949000, v73, OS_LOG_TYPE_DEFAULT, "receive remote cellular RAT [%s].", v208, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v160 = IDSRadioAccessTechnologyToString(v72);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive remote cellular RAT [%s]."));
        if (_IDSShouldLog())
        {
          v160 = IDSRadioAccessTechnologyToString(v72);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive remote cellular RAT [%s]."));
        }
      }
    }
  }
  else
  {
    v72 = 0;
  }
  v75 = *(void **)(*(_QWORD *)&buf[8] + 40);
  if (!v75)
  {
    if (BYTE1(v213) == 30)
      v76 = 6;
    else
      v76 = 5;
    if ((_DWORD)v72)
      v77 = (_DWORD)v72 == 9;
    else
      v77 = 1;
    v78 = !v77;
    LocalMTU = GLUtilGetLocalMTU(v76, (const char *)v78, v70, v71);
    objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v80, 2, v81, 1, v72, LocalMTU, 0xFFFFFFFFLL, &v213, &v213);
    v169 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v82 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v208 = 138412290;
      *(_QWORD *)&v208[4] = v169;
      _os_log_impl(&dword_19B949000, v82, OS_LOG_TYPE_DEFAULT, "discover remote prlx candidate %@.", v208, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v161 = v169;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("discover remote prlx candidate %@."));
        if (_IDSShouldLog())
        {
          v161 = v169;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("discover remote prlx candidate %@."));
        }
      }
    }
    if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v83, (uint64_t)v169, v84, 1, v161))
      objc_msgSend__addStunCheckPair_isRemoteCandidate_excludeLocalAddress_(self, v85, (uint64_t)v169, v86, 1, &v221);
    v178 = 0u;
    v179 = 0u;
    v176 = 0u;
    v177 = 0u;
    v87 = self->_interfaceAddressArray;
    v92 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v88, (uint64_t)&v176, v89, v182, 16);
    if (v92)
    {
      v94 = v66;
      v95 = *(_QWORD *)v177;
      while (2)
      {
        for (i = 0; i != v92; ++i)
        {
          if (*(_QWORD *)v177 != v95)
            objc_enumerationMutation(v87);
          v97 = *(void **)(*((_QWORD *)&v176 + 1) + 8 * i);
          if (objc_msgSend_index(v97, v90, v91, v93) == (_DWORD)v10)
          {
            v66 = v94;
            if (objc_msgSend_isCellular(v97, v90, v91, v93))
            {
              objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v98, v99, v100);
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              v92 = objc_msgSend_radioAccessTechnology(v101, v102, v103, v104);

            }
            else if (objc_msgSend_isWired(v97, v98, v99, v100))
            {
              v92 = 9;
            }
            else
            {
              v92 = 0;
            }
            goto LABEL_97;
          }
        }
        v92 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v90, (uint64_t)&v176, v93, v182, 16);
        if (v92)
          continue;
        break;
      }
      v66 = v94;
    }
LABEL_97:

    if ((_DWORD)v92)
      v107 = (_DWORD)v92 == 9;
    else
      v107 = 1;
    v108 = !v107;
    if (BYTE1(v221) == 30)
      v109 = 6;
    else
      v109 = 5;
    v110 = GLUtilGetLocalMTU(v109, (const char *)v108, v105, v106);
    objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v111, 0, v112, 1, v92, v110, v10, &v221, &v221);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__addCandidate_isRemoteCandidate_(self, v114, (uint64_t)v113, v115, 0);
    objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v116, (uint64_t)v113, v117, v169, self->_cbuuid, self);
    v118 = objc_claimAutoreleasedReturnValue();
    v119 = *(void **)(*(_QWORD *)&buf[8] + 40);
    *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v118;

    if (self->_isInitiator)
    {
      OSLogHandleForTransportCategory();
      v120 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v208 = 138412290;
        *(_QWORD *)&v208[4] = v172;
        _os_log_impl(&dword_19B949000, v120, OS_LOG_TYPE_DEFAULT, "use linkUUID %@ for triggered check.", v208, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v160 = (const char *)v172;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("use linkUUID %@ for triggered check."));
          if (_IDSShouldLog())
          {
            v160 = (const char *)v172;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("use linkUUID %@ for triggered check."));
          }
        }
      }
      objc_msgSend_setLinkUUID_(*(void **)(*(_QWORD *)&buf[8] + 40), v121, (uint64_t)v172, v122, v160);
    }
    if (!self->_tokenToStunCheckPairs)
    {
      Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
      self->_tokenToStunCheckPairs = Mutable;

    }
    v125 = *(id *)(*(_QWORD *)&buf[8] + 40);
    if (v125)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToStunCheckPairs, v66, v125);
    }
    else
    {
      v126 = MEMORY[0x1E0C81028];
      v127 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
        sub_19BAF2594();

    }
    OSLogHandleForTransportCategory();
    v128 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
    {
      v129 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      *(_DWORD *)v208 = 138412290;
      *(_QWORD *)&v208[4] = v129;
      _os_log_impl(&dword_19B949000, v128, OS_LOG_TYPE_DEFAULT, "add stun check pair %@.", v208, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v160 = *(const char **)(*(_QWORD *)&buf[8] + 40);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add stun check pair %@."));
        if (_IDSShouldLog())
        {
          v160 = *(const char **)(*(_QWORD *)&buf[8] + 40);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("add stun check pair %@."));
        }
      }
    }

    v75 = *(void **)(*(_QWORD *)&buf[8] + 40);
  }
  objc_msgSend_linkMetrics(v75, v69, v70, v71, v160);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_receiveBindingRequest(v130, v131, v132, v133);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v134, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v135);
  if (objc_msgSend_getAttribute_attribute_(v65, v136, 32776, v137, __b))
  {
    v141 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v144 = (void *)objc_msgSend_initWithUUIDBytes_(v141, v142, (uint64_t)&__b[3], v143);
    objc_msgSend__processRemoteLinkUUID_candidatePair_(self, v145, (uint64_t)v144, v146, *(_QWORD *)(*(_QWORD *)&buf[8] + 40));

  }
  if (!objc_msgSend__shouldUseP2PTLE(self, v138, v139, v140))
    goto LABEL_133;
  objc_msgSend_local(*(void **)(*(_QWORD *)&buf[8] + 40), v147, v148, v149);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isCellularStunCandidate(v150, v151, v152, v153) & 1) == 0)
  {

    goto LABEL_135;
  }
  v154 = !self->_allowTLEOverCellular;

  if (!v154)
  {
LABEL_135:
    v155 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v173[0] = MEMORY[0x1E0C809B0];
    v173[1] = 3221225472;
    v173[2] = sub_19B9EA744;
    v173[3] = &unk_1E3C20180;
    v174 = v170;
    v175 = v171;
    objc_msgSend__attemptP2PNegotiationForSTUNMessage_candidatePair_completionHandler_(self, v156, (uint64_t)v65, v157, v155, v173);

    goto LABEL_136;
  }
LABEL_133:
  v171[2]();
LABEL_136:

  _Block_object_dispose(v180, 8);
  _Block_object_dispose(buf, 8);

  return 1;
}

- (void)_attemptP2PNegotiationForSTUNMessage:(id)a3 candidatePair:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  unint64_t nextP2PNegotiationAttempt;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  _BOOL4 v23;
  const char *v24;
  double v25;
  const char *v26;
  double v27;
  uint64_t v28;
  const char *v29;
  double v30;
  uint64_t v31;
  const char *v32;
  double v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  double v37;
  NSObject *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  uint8_t v43[4];
  unint64_t v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  id v48;
  uint8_t buf[1496];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  nextP2PNegotiationAttempt = self->_nextP2PNegotiationAttempt;
  self->_nextP2PNegotiationAttempt = nextP2PNegotiationAttempt + 1;
  OSLogHandleForTransportCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = nextP2PNegotiationAttempt;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "_attemptP2PNegotiationForSTUNMessage[%llu]", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v39 = nextP2PNegotiationAttempt;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_attemptP2PNegotiationForSTUNMessage[%llu]"));
      if (_IDSShouldLog())
      {
        v39 = nextP2PNegotiationAttempt;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_attemptP2PNegotiationForSTUNMessage[%llu]"));
      }
    }
  }
  if (!objc_msgSend__shouldUseP2PTLE(self, v13, v14, v15, v39))
    goto LABEL_10;
  objc_msgSend_local(v9, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isCellularStunCandidate(v19, v20, v21, v22) & 1) != 0)
  {
    v23 = !self->_allowTLEOverCellular;

    if (v23)
    {
LABEL_10:
      (*((void (**)(id, _QWORD, _QWORD))v10 + 2))(v10, 0, 0);
      goto LABEL_35;
    }
  }
  else
  {

  }
  memset(buf, 170, 0x5D0uLL);
  if (objc_msgSend_getAttribute_attribute_(v8, v24, 36866, v25, buf))
    v28 = *(unsigned int *)&buf[8];
  else
    v28 = 0;
  if (objc_msgSend_getAttribute_attribute_(v8, v26, 36867, v27, buf))
    v31 = *(unsigned int *)&buf[8];
  else
    v31 = 0;
  if ((_DWORD)v28 && (_DWORD)v31 && objc_msgSend_getAttribute_attribute_(v8, v29, 36865, v30, buf))
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v32, (uint64_t)&buf[12], v33, *(int *)&buf[8]);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v43 = 134218498;
      v44 = nextP2PNegotiationAttempt;
      v45 = 2112;
      v46 = v34;
      v47 = 2112;
      v48 = v9;
      _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "_attemptP2PNegotiationForSTUNMessage[%llu]: received p2p negotiation blob: %@ from:%@", v43, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v41 = v34;
        v42 = v9;
        v40 = nextP2PNegotiationAttempt;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_attemptP2PNegotiationForSTUNMessage[%llu]: received p2p negotiation blob: %@ from:%@"));
        if (_IDSShouldLog())
        {
          v41 = v34;
          v42 = v9;
          v40 = nextP2PNegotiationAttempt;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_attemptP2PNegotiationForSTUNMessage[%llu]: received p2p negotiation blob: %@ from:%@"));
        }
      }
    }
    objc_msgSend__receiveP2PNegotiationBlob_attemptID_remoteIDSConnectionID_remoteAVCConnectionID_candidatePair_completionHandler_(self, v36, (uint64_t)v34, v37, nextP2PNegotiationAttempt, v31, v28, v9, v10, v40, v41, v42);

  }
  else
  {
    OSLogHandleForTransportCategory();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v43 = 134217984;
      v44 = nextP2PNegotiationAttempt;
      _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "_attemptP2PNegotiationForSTUNMessage[%llu]: no p2p negotiation info in stun message", v43, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_attemptP2PNegotiationForSTUNMessage[%llu]: no p2p negotiation info in stun message"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_attemptP2PNegotiationForSTUNMessage[%llu]: no p2p negotiation info in stun message"));
      }
    }
    (*((void (**)(id, _QWORD, _QWORD))v10 + 2))(v10, 0, 0);
  }
LABEL_35:

}

- (void)_receiveP2PNegotiationBlob:(id)a3 attemptID:(unint64_t)a4 remoteIDSConnectionID:(unsigned int)a5 remoteAVCConnectionID:(unsigned int)a6 candidatePair:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  const char *v20;
  double v21;
  _QWORD v22[4];
  id v23;
  id v24;
  IDSGlobalLink *v25;
  id v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v14 = a3;
  v15 = a7;
  v16 = a8;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_19B9EAED4;
  v22[3] = &unk_1E3C201F8;
  v23 = v15;
  v24 = v14;
  v26 = v16;
  v27 = a4;
  v28 = a6;
  v29 = a5;
  v25 = self;
  v17 = v16;
  v18 = v14;
  v19 = v15;
  objc_msgSend__getP2PNegotiationForCandidatePair_completionBlock_(self, v20, (uint64_t)v19, v21, v22);

}

- (void)setUpP2PQUICPodConnectionsForCandidatePair:(id)a3 attemptID:(unint64_t)a4 completionHandler:(id)a5
{
  id v7;
  id v8;
  IDSNWLink *nwLink;
  NSString *cbuuid;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  const char *v39;
  double v40;
  NSObject *v41;
  uint8_t buf[4];
  unint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a5;
  nwLink = self->_nwLink;
  cbuuid = self->_cbuuid;
  objc_msgSend_local(v7, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_address(v14, v15, v16, v17);
  objc_msgSend_remote(v7, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend_address(v22, v23, v24, v25);
  objc_msgSend_QUICConnectionIDs(v7, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_p2pNegotiatedKeys(v7, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_channelNumber(v7, v35, v36, v37);
  LOBYTE(nwLink) = objc_msgSend_createQUICPodP2PConnectionsForSession_localAddress_remoteAddress_quicConnectionIDs_negotiatedKeys_channelNumber_completionHandler_(nwLink, v39, (uint64_t)cbuuid, v40, v18, v26, v30, v34, v38, v8);

  if ((nwLink & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v44 = a4;
      _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "setUpP2PQUICPodConnectionsForCandidatePair[%llu]: failed to set up p2p connections", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("setUpP2PQUICPodConnectionsForCandidatePair[%llu]: failed to set up p2p connections"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("setUpP2PQUICPodConnectionsForCandidatePair[%llu]: failed to set up p2p connections"));
      }
    }
  }

}

- (BOOL)_processBindingResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v11;
  char *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  NSObject *v19;
  void *Value;
  id v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  double v30;
  const char *v31;
  double v32;
  const char *v33;
  double v34;
  id v35;
  const char *v36;
  double v37;
  void *v38;
  const char *v39;
  double v40;
  NSObject *v41;
  char *v42;
  const char *v43;
  double v44;
  const char *v45;
  uint64_t v46;
  double v47;
  NSObject *v48;
  BOOL v49;
  NSObject *v50;
  __CFString *v51;
  NSObject *v52;
  void *v54;
  const char *v55;
  double v56;
  int Attribute_attribute;
  const char *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  int v62;
  void *v63;
  const char *v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  double v73;
  char *v74;
  char isRemoteCandidate;
  void *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  double v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  const char *v89;
  double v90;
  NSObject *v91;
  const char *v92;
  double v93;
  const char *v94;
  uint64_t v95;
  double v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  uint64_t isCLAT46;
  const char *v102;
  double v103;
  id v104;
  char *v105;
  const char *v106;
  double v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unsigned int v114;
  id v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  __int128 *v123;
  _QWORD v124[4];
  id v125;
  IDSGlobalLink *v126;
  id v127;
  char *v128;
  uint64_t *v129;
  uint64_t *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  double v147;
  int v148;
  __int16 v149;
  char v150;
  uint8_t buf[4];
  char *v152;
  __int16 v153;
  char *v154;
  __int16 v155;
  char *v156;
  __int16 v157;
  int v158;
  _OWORD v159[8];
  _DWORD __b[372];
  char v161[16];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char __str[16];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;

  v11 = *(_QWORD *)&a5;
  v193 = *MEMORY[0x1E0C80C00];
  v14 = (char *)a3;
  v115 = a4;
  v15 = a8;
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v191 = v16;
  v192 = v16;
  v189 = v16;
  v190 = v16;
  v187 = v16;
  v188 = v16;
  v185 = v16;
  v186 = v16;
  v184 = v16;
  v183 = v16;
  v182 = v16;
  v181 = v16;
  v180 = v16;
  v179 = v16;
  v178 = v16;
  v177 = v16;
  __memcpy_chk();
  __memcpy_chk();
  v120 = 0;
  v121 = &v120;
  v122 = 0x2020000000;
  v123 = &v185;
  v116 = 0;
  v117 = &v116;
  v118 = 0x2020000000;
  v119 = &v177;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v176 = v17;
  v175 = v17;
  v174 = v17;
  v173 = v17;
  v172 = v17;
  v171 = v17;
  v170 = v17;
  *(_OWORD *)__str = v17;
  v168 = v17;
  v167 = v17;
  v166 = v17;
  v165 = v17;
  v164 = v17;
  v163 = v17;
  v162 = v17;
  *(_OWORD *)v161 = v17;
  memset(__b, 170, sizeof(__b));
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v159[6] = v18;
  v159[7] = v18;
  v159[4] = v18;
  v159[5] = v18;
  v159[2] = v18;
  v159[3] = v18;
  v159[0] = v18;
  v159[1] = v18;
  SAToIPPortString(__str, 0x80uLL, (uint64_t)&v185);
  SAToIPPortString(v161, 0x80uLL, v117[3]);
  OSLogHandleForTransportCategory();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    v152 = v14;
    v153 = 2080;
    v154 = v161;
    v155 = 2080;
    v156 = __str;
    v157 = 1024;
    v158 = v11;
    _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "receive binding response %@ from %s on %s(%u)", buf, 0x26u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v112 = __str;
      v113 = v11;
      v108 = v14;
      v111 = v161;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive binding response %@ from %s on %s(%u)"));
      if (_IDSShouldLog())
      {
        v112 = __str;
        v113 = v11;
        v108 = v14;
        v111 = v161;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive binding response %@ from %s on %s(%u)"));
      }
    }
  }
  Value = 0;
  if (v15 && self->_tokenToStunCheckPairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToStunCheckPairs, v15);
  v21 = Value;
  objc_msgSend_linkMetrics(v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_receiveBindingResponse(v25, v26, v27, v28);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v29, (uint64_t)v21, v30);
  if (!v21)
  {
    OSLogHandleForTransportCategory();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v152 = (char *)v15;
      _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for %@."));
        if (_IDSShouldLog())
        {
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for %@."));
          v49 = 0;
          goto LABEL_46;
        }
      }
    }
    goto LABEL_45;
  }
  if (objc_msgSend_getAttribute_attribute_(v14, v31, 32776, v32, __b))
  {
    v35 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v38 = (void *)objc_msgSend_initWithUUIDBytes_(v35, v36, (uint64_t)&__b[3], v37);
    objc_msgSend__processRemoteLinkUUID_candidatePair_(self, v39, (uint64_t)v38, v40, v21);

  }
  if ((objc_msgSend_getAttribute_attribute_(v14, v33, 32, v34, __b, v108, v111, v112, v113) & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v50, OS_LOG_TYPE_DEFAULT, "failed to receive xor-mapped-address.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to receive xor-mapped-address."));
        if ((_IDSShouldLog() & 1) != 0)
        {
          v51 = CFSTR("failed to receive xor-mapped-address.");
LABEL_44:
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v51);
          v49 = 0;
          goto LABEL_46;
        }
      }
    }
LABEL_45:
    v49 = 0;
    goto LABEL_46;
  }
  __memcpy_chk();
  if (!IsValidSA((_BOOL8)v159))
  {
    OSLogHandleForTransportCategory();
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v52, OS_LOG_TYPE_DEFAULT, "receive invalid xor-mapped-address.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive invalid xor-mapped-address."));
        if (_IDSShouldLog())
        {
          v51 = CFSTR("receive invalid xor-mapped-address.");
          goto LABEL_44;
        }
      }
    }
    goto LABEL_45;
  }
  OSLogHandleForTransportCategory();
  v41 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v42 = SAToIPPortString(v161, 0x80uLL, (uint64_t)v159);
    *(_DWORD *)buf = 136315138;
    v152 = v42;
    _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "receive xor-mapped-address [%s].", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v109 = SAToIPPortString(v161, 0x80uLL, (uint64_t)v159);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive xor-mapped-address [%s]."));
      if (_IDSShouldLog())
      {
        v109 = SAToIPPortString(v161, 0x80uLL, (uint64_t)v159);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive xor-mapped-address [%s]."));
      }
    }
  }
  if (!objc_msgSend_getAttribute_attribute_(v14, v43, 32803, v44, __b, v109)
    || (__b[2] - 1) > 6)
  {
    goto LABEL_25;
  }
  if ((__b[2] & 4) != 0)
  {
    v114 = __b[2] & 3 | 4;
    goto LABEL_48;
  }
  v114 = __b[2] & 3;
  if ((__b[2] & 3) != 0)
  {
LABEL_48:
    objc_msgSend_remote(v21, v45, v46, v47);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLinkFlags_(v54, v55, v114, v56);

    goto LABEL_49;
  }
LABEL_25:
  LOWORD(v114) = 0;
LABEL_49:
  Attribute_attribute = objc_msgSend_getAttribute_attribute_(v14, v45, 32804, v47, __b);
  v61 = __b[2];
  if (__b[2])
    v62 = Attribute_attribute;
  else
    v62 = 0;
  if (v62 == 1)
  {
    objc_msgSend_remote(v21, v58, v59, v60);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setDataSoMask_(v63, v64, v61, v65);

  }
  else
  {
    LODWORD(v61) = 0;
  }
  objc_msgSend_local(v21, v58, v59, v60);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = objc_msgSend_external(v66, v67, v68, v69);

  if (IsSameSA(v70, (uint64_t)v159))
  {
    v74 = 0;
    isRemoteCandidate = 0;
  }
  else
  {
    objc_msgSend_local(v21, v71, v72, v73);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = objc_msgSend_radioAccessTechnology(v76, v77, v78, v79);

    objc_msgSend_local(v21, v81, v82, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = objc_msgSend_mtu(v84, v85, v86, v87);

    objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v89, 2, v90, 1, v80, v88, v11, v121[3], v159);
    v74 = (char *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v91 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v152 = v74;
      _os_log_impl(&dword_19B949000, v91, OS_LOG_TYPE_DEFAULT, "discover local prlx candidate %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v110 = v74;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("discover local prlx candidate %@."));
        if (_IDSShouldLog())
        {
          v110 = v74;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("discover local prlx candidate %@."));
        }
      }
    }
    isRemoteCandidate = objc_msgSend__addCandidate_isRemoteCandidate_(self, v92, (uint64_t)v74, v93, 0, v110);
    objc_msgSend_local(v21, v94, v95, v96);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    isCLAT46 = objc_msgSend_isCLAT46(v97, v98, v99, v100);
    objc_msgSend_setIsCLAT46_(v74, v102, isCLAT46, v103);

  }
  v124[0] = MEMORY[0x1E0C809B0];
  v124[1] = 3221225472;
  v124[2] = sub_19B9EC3F0;
  v124[3] = &unk_1E3C20220;
  v135 = v189;
  v136 = v190;
  v137 = v191;
  v138 = v192;
  v131 = v185;
  v132 = v186;
  v133 = v187;
  v134 = v188;
  v129 = &v120;
  v130 = &v116;
  v145 = v183;
  v146 = v184;
  v143 = v181;
  v144 = v182;
  v141 = v179;
  v142 = v180;
  v139 = v177;
  v140 = v178;
  v104 = v21;
  v125 = v104;
  v126 = self;
  v127 = v15;
  v150 = isRemoteCandidate;
  v105 = v74;
  v128 = v105;
  v149 = v114;
  v148 = v61;
  v147 = a9;
  objc_msgSend__attemptP2PNegotiationForSTUNMessage_candidatePair_completionHandler_(self, v106, (uint64_t)v14, v107, v104, v124);

  v49 = 1;
LABEL_46:

  _Block_object_dispose(&v116, 8);
  _Block_object_dispose(&v120, 8);

  return v49;
}

- (void)_updateInterfaceAddressesWithAddList:(id)a3 removeList:(id)a4
{
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  double v10;
  NSMutableArray *v11;
  NSMutableArray *interfaceAddressArray;
  const char *v13;
  uint64_t v14;
  double v15;
  const char *v16;
  double v17;
  NSMutableArray *v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  unsigned int v29;
  const char *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  NSObject *v35;
  const char *v36;
  double v37;
  const char *v38;
  double v39;
  const char *v40;
  double v41;
  const char *v42;
  double v43;
  const char *v44;
  double v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[4];
  id v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v9 = a4;
  if (!self->_interfaceAddressArray)
  {
    v11 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    interfaceAddressArray = self->_interfaceAddressArray;
    self->_interfaceAddressArray = v11;

  }
  if (objc_msgSend_count(v6, v7, v8, v10))
    objc_msgSend_addObjectsFromArray_(self->_interfaceAddressArray, v13, (uint64_t)v6, v15);
  if (objc_msgSend_count(v9, v13, v14, v15))
    objc_msgSend_removeObjectsInArray_(self->_interfaceAddressArray, v16, (uint64_t)v9, v17);
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v18 = self->_interfaceAddressArray;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v47, v20, v53, 16);
  if (v23)
  {
    v25 = 0;
    v26 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v48 != v26)
          objc_enumerationMutation(v18);
        v28 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        if (objc_msgSend_isCellular(v28, v21, v22, v24))
        {
          if (!v25)
            v25 = objc_alloc_init(MEMORY[0x1E0CB3788]);
          v29 = objc_msgSend_index(v28, v21, v22, v24);
          objc_msgSend_addIndex_(v25, v30, v29, v31);
        }
      }
      v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v21, (uint64_t)&v47, v24, v53, 16);
    }
    while (v23);

    if (v25)
    {
      OSLogHandleForTransportCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v52 = v25;
        _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "current cellular interface indices: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v46 = v25;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("current cellular interface indices: %@"));
          if (_IDSShouldLog())
          {
            v46 = v25;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("current cellular interface indices: %@"));
          }
        }
      }
      objc_msgSend_setCellularInterfaceIndices_(self->_udpLink, v36, (uint64_t)v25, v37, v46);
      objc_msgSend_setCellularInterfaceIndices_(self->_udpLinkv6, v38, (uint64_t)v25, v39);
      objc_msgSend_setCellularInterfaceIndices_(self->_tcpLink, v40, (uint64_t)v25, v41);
      objc_msgSend_setCellularInterfaceIndices_(self->_tcpSSLLink, v42, (uint64_t)v25, v43);
      objc_msgSend_setCellularInterfaceIndices_(self->_nwLink, v44, (uint64_t)v25, v45);
    }
  }
  else
  {

    v25 = 0;
  }
  objc_msgSend__generateTransportScoreCard(self, v32, v33, v34);

}

- (void)_generateTransportScoreCard
{
  uint64_t v2;
  double v3;
  NSMutableArray *transportScoreCards;
  NSMutableArray *v6;
  NSMutableArray *v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  char isWired;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int isCellular;
  BOOL v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char shouldFallbackToTCPFirst;
  IDSTransportScoreCard *v43;
  const char *v44;
  double v45;
  const char *v46;
  uint64_t v47;
  double v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  const void *v54;
  id v55;
  const char *v56;
  double v57;
  void *v58;
  const char *v59;
  double v60;
  NSObject *v61;
  uint64_t v62;
  void *v63;
  NSMutableArray *obj;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  const char *v80;
  _BYTE v81[128];
  _BYTE v82[128];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  transportScoreCards = self->_transportScoreCards;
  if (!transportScoreCards)
  {
    v6 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v7 = self->_transportScoreCards;
    self->_transportScoreCards = v6;

    transportScoreCards = self->_transportScoreCards;
  }
  objc_msgSend_removeAllObjects(transportScoreCards, a2, v2, v3);
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  obj = self->_interfaceAddressArray;
  v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v73, v9, v82, 16);
  if (v66)
  {
    v65 = *(_QWORD *)v74;
    v12 = MEMORY[0x1E0C81028];
    v13 = 138412546;
    do
    {
      v67 = 0;
      do
      {
        if (*(_QWORD *)v74 != v65)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * v67);
        if (objc_msgSend_IPVersion(v14, v10, v11, *(double *)&v13, v63)
          || !objc_msgSend_clat46(v14, v15, v16, v17)
          || self->_disablePureLinkFeature)
        {
          v68 = objc_msgSend_index(v14, v15, v16, v17);
          objc_msgSend_delegatedName(v14, v18, v19, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          isWired = objc_msgSend_isWired(v14, v22, v23, v24);
          if (v21)
          {
            if ((isWired & 1) != 0)
            {
              v29 = 31;
              v30 = 4;
              goto LABEL_27;
            }
            isCellular = objc_msgSend_isCellular(v14, v26, v27, v28);
            v32 = isCellular == 0;
            if (isCellular)
              v29 = 1;
            else
              v29 = 25;
            v33 = 5;
LABEL_24:
            if (v32)
              v30 = v33;
            else
              v30 = v33 + 1;
            goto LABEL_27;
          }
          if ((isWired & 1) == 0)
          {
            v34 = objc_msgSend_isCellular(v14, v26, v27, v28);
            v32 = v34 == 0;
            if (v34)
              v29 = 3;
            else
              v29 = 27;
            v33 = 2;
            goto LABEL_24;
          }
          v29 = 33;
          v30 = 1;
LABEL_27:
          v37 = objc_msgSend_IPVersion(v14, v26, v27, v28);
          if (v37 == 1)
            v29 *= 4;
          else
            objc_msgSend_IPVersion(v14, v35, v36, v38);
          v39 = v37 == 1;
          v40 = 2;
          while (2)
          {
            if (v40 == 4)
            {
              shouldFallbackToTCPFirst = !self->_shouldFallbackToTCPFirst;
            }
            else
            {
              if (v40 != 3)
              {
                if (v40 == 2)
                  v41 = 100 * v29;
                else
                  v41 = v29;
LABEL_39:
                v43 = objc_alloc_init(IDSTransportScoreCard);
                v43->score = v41;
                v43->stunTransport = v40;
                v43->transportInterface = v30;
                v43->interfaceIndex = v68;
                v43->alreadySelected = 0;
                v43->isIPv6 = v39;
                objc_msgSend_addObject_(self->_transportScoreCards, v44, (uint64_t)v43, v45);

                if (++v40 == 5)
                {
                  objc_msgSend_allKeys(self->_allocationsToTransportScoreCards, v46, v47, v48);
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  v71 = 0u;
                  v72 = 0u;
                  v69 = 0u;
                  v70 = 0u;
                  v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v69, 0.0, v81, 16);
                  if (v51)
                  {
                    v52 = *(_QWORD *)v70;
                    do
                    {
                      for (i = 0; i != v51; ++i)
                      {
                        if (*(_QWORD *)v70 != v52)
                          objc_enumerationMutation(v49);
                        v54 = *(const void **)(*((_QWORD *)&v69 + 1) + 8 * i);
                        v55 = objc_alloc(MEMORY[0x1E0C99DE8]);
                        v58 = (void *)objc_msgSend_initWithArray_copyItems_(v55, v56, (uint64_t)self->_transportScoreCards, v57, 1);
                        if (v58)
                        {
                          CFDictionarySetValue((CFMutableDictionaryRef)self->_allocationsToTransportScoreCards, v54, v58);
                        }
                        else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 138412546;
                          v78 = (void *)v54;
                          v79 = 2080;
                          v80 = "_allocationsToTransportScoreCards";
                          _os_log_error_impl(&dword_19B949000, v12, OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
                        }

                      }
                      v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v59, (uint64_t)&v69, v60, v81, 16);
                    }
                    while (v51);
                  }

                  goto LABEL_52;
                }
                continue;
              }
              shouldFallbackToTCPFirst = self->_shouldFallbackToTCPFirst;
            }
            break;
          }
          v41 = v29 << shouldFallbackToTCPFirst;
          goto LABEL_39;
        }
        OSLogHandleForTransportCategory();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v78 = v14;
          _os_log_impl(&dword_19B949000, v61, OS_LOG_TYPE_DEFAULT, "_generateTransportScoreCard: skipping %@ which is a simualted IPv4 interface!", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v63 = v14;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_generateTransportScoreCard: skipping %@ which is a simualted IPv4 interface!"));
            if (_IDSShouldLog())
            {
              v63 = v14;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_generateTransportScoreCard: skipping %@ which is a simualted IPv4 interface!"));
            }
          }
        }
LABEL_52:
        ++v67;
      }
      while (v67 != v66);
      v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v73, *(double *)&v13, v82, 16);
      v66 = v62;
    }
    while (v62);
  }

}

- (BOOL)_isUsingSameRATCandidatePair:(id)a3 transportScoreCard:(id)a4
{
  id v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v36;

  v5 = a3;
  v6 = a4;
  objc_msgSend_local(v5, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_radioAccessTechnology(v10, v11, v12, v13) == 9)
  {
    v14 = v6[3];
    if (v14 == 1)
      goto LABEL_21;

    if (v14 == 4)
      goto LABEL_24;
  }
  else
  {

  }
  objc_msgSend_local(v5, v15, v16, v17);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_radioAccessTechnology(v10, v18, v19, v20))
  {

LABEL_8:
    objc_msgSend_local(v5, v21, v22, v23);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_radioAccessTechnology(v10, v24, v25, v26))
    {
      objc_msgSend_local(v5, v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_radioAccessTechnology(v30, v31, v32, v33) > 8)
      {
        LOBYTE(v14) = 0;
      }
      else
      {
        v34 = v6[3];
        LOBYTE(v14) = v34 == 3 || v34 == 6;
      }

    }
    else
    {
      LOBYTE(v14) = 0;
    }
    goto LABEL_21;
  }
  v36 = v6[3];
  if (v36 != 2)
  {

    if (v36 == 5)
    {
LABEL_24:
      LOBYTE(v14) = 1;
      goto LABEL_22;
    }
    goto LABEL_8;
  }
  LOBYTE(v14) = 1;
LABEL_21:

LABEL_22:
  return v14;
}

- (id)_transportInterfaceToString:(int64_t)a3
{
  if ((unint64_t)a3 > 6)
    return 0;
  else
    return off_1E3C203C8[a3];
}

- (BOOL)_processRemovedLocalAddressList:(id)a3
{
  const char *v3;
  double v4;
  const char *v5;
  uint64_t v6;
  __CFArray *v7;
  __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  id v21;
  const char *v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  _BOOL4 v36;
  void *v37;
  BOOL v38;
  const char *v39;
  uint64_t v40;
  double v41;
  void *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  id v47;
  const char *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  double v54;
  const char *v55;
  uint64_t v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  void *v61;
  const char *v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t j;
  void *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  _BOOL4 v76;
  void *v77;
  BOOL v78;
  const char *v79;
  uint64_t v80;
  double v81;
  void *v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  double v86;
  id v87;
  NSMutableArray *v88;
  const char *v89;
  double v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t k;
  void *v97;
  uint64_t v98;
  BOOL v99;
  NSObject *v100;
  const char *v101;
  uint64_t v102;
  double v103;
  const char *v104;
  uint64_t v105;
  double v106;
  NSObject *v107;
  const char *v108;
  uint64_t v109;
  double v110;
  id v111;
  const char *v112;
  uint64_t v113;
  double v114;
  NSObject *v115;
  const char *v116;
  uint64_t v117;
  double v118;
  id v119;
  const char *v120;
  double v121;
  NSObject *v122;
  NSMutableArray *localCandidateList;
  const char *v124;
  double v125;
  NSObject *v126;
  NSMutableArray *interfaceAddressArray;
  NSObject *v128;
  const __CFString *v129;
  const __CFString *v130;
  void *v132;
  void *v133;
  NSMutableArray *v134;
  id obj;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v140;
  uint64_t v141;
  __CFArray *theArray;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint8_t buf[4];
  id v160;
  __int16 v161;
  const __CFString *v162;
  _BYTE v163[128];
  _BYTE v164[128];
  _BYTE v165[128];
  _BYTE v166[128];
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0u;
  obj = a3;
  v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v155, v4, v166, 16);
  if (v137)
  {
    v141 = 0;
    theArray = 0;
    v140 = 0;
    v7 = 0;
    v8 = 0;
    v136 = *(_QWORD *)v156;
    v9 = 138412290;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v156 != v136)
        {
          v11 = v10;
          objc_enumerationMutation(obj);
          v10 = v11;
        }
        v138 = v10;
        objc_msgSend_address(*(void **)(*((_QWORD *)&v155 + 1) + 8 * v10), v5, v6, *(double *)&v9, v132);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend_sa(v12, v13, v14, v15);

        objc_msgSend_allValues(self->_tokenToCandidatePairs, v17, v18, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        v153 = 0u;
        v154 = 0u;
        v151 = 0u;
        v152 = 0u;
        v21 = v20;
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v151, v23, v165, 16);
        if (v26)
        {
          v28 = *(_QWORD *)v152;
          do
          {
            for (i = 0; i != v26; ++i)
            {
              if (*(_QWORD *)v152 != v28)
                objc_enumerationMutation(v21);
              v30 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * i);
              objc_msgSend_local(v30, v24, v25, v27);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v35 = objc_msgSend_address(v31, v32, v33, v34);
              v36 = IsSameIP(v16, v35);

              if (v36)
              {
                if (v8 || (v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
                {
                  objc_msgSend_candidatePairToken(v30, v24, v25, v27);
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  v38 = v37 == 0;

                  if (!v38)
                  {
                    objc_msgSend_candidatePairToken(v30, v39, v40, v41);
                    v42 = (void *)objc_claimAutoreleasedReturnValue();
                    CFArrayAppendValue(v8, v42);

                  }
                }
                OSLogHandleForTransportCategory();
                v43 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_candidatePairToken(v30, v44, v45, v46);
                  v47 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412290;
                  v160 = v47;
                  _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "remove candidate pair %@.", buf, 0xCu);

                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    objc_msgSend_candidatePairToken(v30, v48, v50, v49);
                    v132 = (void *)objc_claimAutoreleasedReturnValue();
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove candidate pair %@."));

                    if (_IDSShouldLog())
                    {
                      objc_msgSend_candidatePairToken(v30, v48, v51, v49, v132);
                      v132 = (void *)objc_claimAutoreleasedReturnValue();
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove candidate pair %@."));

                    }
                  }
                }
                objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v48, (uint64_t)v30, v49, 1, v132);
                LOBYTE(v141) = objc_msgSend_isActive(v30, v52, v53, v54) | v141;
                HIDWORD(v141) |= objc_msgSend_isNominated(v30, v55, v56, v57);
              }
            }
            v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v24, (uint64_t)&v151, v27, v165, 16);
          }
          while (v26);
        }

        objc_msgSend_allValues(self->_tokenToStunCheckPairs, v58, v59, v60);
        v61 = (void *)objc_claimAutoreleasedReturnValue();

        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v140 = v61;
        v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v140, v62, (uint64_t)&v147, v63, v164, 16);
        if (v66)
        {
          v68 = *(_QWORD *)v148;
          do
          {
            for (j = 0; j != v66; ++j)
            {
              if (*(_QWORD *)v148 != v68)
                objc_enumerationMutation(v140);
              v70 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * j);
              objc_msgSend_local(v70, v64, v65, v67, v132);
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              v75 = objc_msgSend_address(v71, v72, v73, v74);
              v76 = IsSameIP(v16, v75);

              if (v76)
              {
                if (theArray || (theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
                {
                  objc_msgSend_candidatePairToken(v70, v64, v65, v67);
                  v77 = (void *)objc_claimAutoreleasedReturnValue();
                  v78 = v77 == 0;

                  if (!v78)
                  {
                    objc_msgSend_candidatePairToken(v70, v79, v80, v81);
                    v82 = (void *)objc_claimAutoreleasedReturnValue();
                    CFArrayAppendValue(theArray, v82);

                  }
                }
                else
                {
                  theArray = 0;
                }
                OSLogHandleForTransportCategory();
                v83 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_candidatePairToken(v70, v84, v85, v86);
                  v87 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412290;
                  v160 = v87;
                  _os_log_impl(&dword_19B949000, v83, OS_LOG_TYPE_DEFAULT, "remove stun check pair %@.", buf, 0xCu);

                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    objc_msgSend_candidatePairToken(v70, v64, v65, v67);
                    v132 = (void *)objc_claimAutoreleasedReturnValue();
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove stun check pair %@."));

                    if (_IDSShouldLog())
                    {
                      objc_msgSend_candidatePairToken(v70, v64, v65, v67, v132);
                      v132 = (void *)objc_claimAutoreleasedReturnValue();
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove stun check pair %@."));

                    }
                  }
                }
              }
            }
            v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v140, v64, (uint64_t)&v147, v67, v164, 16);
          }
          while (v66);
        }

        v145 = 0u;
        v146 = 0u;
        v143 = 0u;
        v144 = 0u;
        v88 = self->_localCandidateList;
        v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v88, v89, (uint64_t)&v143, v90, v163, 16);
        if (v93)
        {
          v95 = *(_QWORD *)v144;
          do
          {
            for (k = 0; k != v93; ++k)
            {
              if (*(_QWORD *)v144 != v95)
                objc_enumerationMutation(v88);
              v97 = *(void **)(*((_QWORD *)&v143 + 1) + 8 * k);
              v98 = objc_msgSend_address(v97, v91, v92, v94, v132);
              if (IsSameIP(v16, v98))
              {
                if (!v7)
                  v7 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
                if (v97)
                  v99 = v7 == 0;
                else
                  v99 = 1;
                if (!v99)
                  CFArrayAppendValue(v7, v97);
                OSLogHandleForTransportCategory();
                v100 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v160 = v97;
                  _os_log_impl(&dword_19B949000, v100, OS_LOG_TYPE_DEFAULT, "remove local candidate %@.", buf, 0xCu);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v132 = v97;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove local candidate %@."));
                    if (_IDSShouldLog())
                    {
                      v132 = v97;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove local candidate %@."));
                    }
                  }
                }
              }
            }
            v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v88, v91, (uint64_t)&v143, v94, v163, 16);
          }
          while (v93);
        }

        v10 = v138 + 1;
      }
      while (v138 + 1 != v137);
      v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v155, *(double *)&v9, v166, 16);
    }
    while (v137);
  }
  else
  {
    v141 = 0;
    theArray = 0;
    v140 = 0;
    v7 = 0;
    v8 = 0;
  }

  if (objc_msgSend_count(v8, v101, v102, v103))
  {
    objc_msgSend_removeObjectsForKeys_(self->_tokenToCandidatePairs, v104, (uint64_t)v8, v106);
    OSLogHandleForTransportCategory();
    v107 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v108, v109, v110);
      v111 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v160 = v111;
      _os_log_impl(&dword_19B949000, v107, OS_LOG_TYPE_DEFAULT, "remaining candidate pairs: %@.", buf, 0xCu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_allValues(self->_tokenToCandidatePairs, v104, v105, v106);
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining candidate pairs: %@."));

        if (_IDSShouldLog())
        {
          objc_msgSend_allValues(self->_tokenToCandidatePairs, v104, v105, v106, v132);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining candidate pairs: %@."));

        }
      }
    }
  }
  if (objc_msgSend_count(theArray, v104, v105, v106, v132))
  {
    objc_msgSend_removeObjectsForKeys_(self->_tokenToStunCheckPairs, v112, (uint64_t)theArray, v114);
    OSLogHandleForTransportCategory();
    v115 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(self->_tokenToStunCheckPairs, v116, v117, v118);
      v119 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v160 = v119;
      _os_log_impl(&dword_19B949000, v115, OS_LOG_TYPE_DEFAULT, "remaining stun check pairs: %@.", buf, 0xCu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_allValues(self->_tokenToStunCheckPairs, v112, v113, v114);
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining stun check pairs: %@."));

        if (_IDSShouldLog())
        {
          objc_msgSend_allValues(self->_tokenToStunCheckPairs, v112, v113, v114, v133);
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining stun check pairs: %@."));

        }
      }
    }
  }
  if (objc_msgSend_count(v7, v112, v113, v114, v133))
  {
    objc_msgSend_removeObjectsInArray_(self->_localCandidateList, v120, (uint64_t)v7, v121);
    OSLogHandleForTransportCategory();
    v122 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
    {
      localCandidateList = self->_localCandidateList;
      *(_DWORD *)buf = 138412290;
      v160 = localCandidateList;
      _os_log_impl(&dword_19B949000, v122, OS_LOG_TYPE_DEFAULT, "remaining local candidates: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v134 = self->_localCandidateList;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining local candidates: %@."));
        if (_IDSShouldLog())
        {
          v134 = self->_localCandidateList;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining local candidates: %@."));
        }
      }
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v124, (uint64_t)obj, v125, v134);
  }
  objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v120, 0, v121, obj);
  OSLogHandleForTransportCategory();
  v126 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
  {
    interfaceAddressArray = self->_interfaceAddressArray;
    *(_DWORD *)buf = 138412290;
    v160 = interfaceAddressArray;
    _os_log_impl(&dword_19B949000, v126, OS_LOG_TYPE_DEFAULT, "remaining local address list: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining local address list: %@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining local address list: %@."));
    }
  }
  if (((v141 | BYTE4(v141)) & 1) != 0)
  {
    OSLogHandleForTransportCategory();
    v128 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
    {
      v129 = CFSTR("NO");
      if ((v141 & 1) != 0)
        v130 = CFSTR("YES");
      else
        v130 = CFSTR("NO");
      if ((v141 & 0x100000000) != 0)
        v129 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v160 = (id)v130;
      v161 = 2112;
      v162 = v129;
      _os_log_impl(&dword_19B949000, v128, OS_LOG_TYPE_DEFAULT, "default/nominated link is removed(default:%@, nominated:%@).", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("default/nominated link is removed(default:%@, nominated:%@)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("default/nominated link is removed(default:%@, nominated:%@)."));
      }
    }
  }

  return (v141 | BYTE4(v141)) & 1;
}

- (void)_processNewLocalAddressList:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  NSObject *v7;
  NSMutableArray *interfaceAddressArray;
  const char *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  char v14;
  uint64_t i;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  BOOL v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  const char *v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  const char *isCellular;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  unsigned int v44;
  uint64_t LocalMTU;
  const char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  double v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  double v66;
  uint64_t v67;
  const char *v68;
  double v69;
  NSObject *v70;
  const char *v71;
  double v72;
  NSObject *v73;
  uint64_t v74;
  char v75;
  id obj;
  void *v77;
  IDSGlobalLink *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint8_t v85[128];
  uint8_t buf[4];
  NSMutableArray *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v78 = self;
  objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v5, (uint64_t)v4, v6, 0);
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    interfaceAddressArray = self->_interfaceAddressArray;
    *(_DWORD *)buf = 138412290;
    v87 = interfaceAddressArray;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "current local address list: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v74 = (uint64_t)self->_interfaceAddressArray;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("current local address list: %@."));
      if (_IDSShouldLog())
      {
        v74 = (uint64_t)self->_interfaceAddressArray;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("current local address list: %@."));
      }
    }
  }
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  obj = v4;
  v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v81, v10, v85, 16);
  if (v80)
  {
    v14 = 0;
    v77 = 0;
    v75 = 1;
    v79 = *(_QWORD *)v82;
    do
    {
      for (i = 0; i != v80; ++i)
      {
        if (*(_QWORD *)v82 != v79)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * i);
        objc_msgSend_address(v16, v11, v12, v13, v74);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v17 == 0;

        if (!v18)
        {
          objc_msgSend_address(v16, v11, v12, v13);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend_sa(v19, v20, v21, v22);
          v24 = IsLinkLocalSA(v23);

          if (!v24)
          {
            objc_msgSend_address(v16, v11, v12, v13);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = *(unsigned __int8 *)(objc_msgSend_sa(v25, v26, v27, v28) + 1);

            isCellular = (const char *)objc_msgSend_isCellular(v16, v30, v31, v32);
            if ((_DWORD)isCellular)
            {
              objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v33, v34, v36);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(v41) = objc_msgSend_radioAccessTechnology(v37, v38, v39, v40);

              if (v41 >= 0xA)
                v41 = 10;
              else
                v41 = v41;
            }
            else if (objc_msgSend_isWired(v16, v33, v34, v36))
            {
              v41 = 9;
            }
            else
            {
              v41 = 0;
            }
            if (v29 == 30)
              v44 = 6;
            else
              v44 = 5;
            LocalMTU = GLUtilGetLocalMTU(v44, isCellular, v42, v43);
            v49 = objc_msgSend_index(v16, v46, v47, v48);
            objc_msgSend_address(v16, v50, v51, v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v57 = objc_msgSend_sa(v53, v54, v55, v56);
            objc_msgSend_address(v16, v58, v59, v60);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            v74 = objc_msgSend_sa(v61, v62, v63, v64);
            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v65, 0, v66, 1, v41, LocalMTU, v49, v57);
            v67 = objc_claimAutoreleasedReturnValue();

            if (objc_msgSend__addCandidate_isRemoteCandidate_(v78, v68, v67, v69, 0))
              objc_msgSend__addStunCheckPair_isRemoteCandidate_(v78, v11, v67, v13, 0);
            if (v29 != 30)
            {
              if (v78->_allowP2P)
                objc_msgSend__requestSelfAllocationForInterfaceAddress_(v78, v11, (uint64_t)v16, v13);
              v75 = 0;
            }
            v14 = 1;
            v77 = (void *)v67;
          }
        }
      }
      v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v81, v13, v85, 16);
    }
    while (v80);

    if ((v14 & 1) != 0)
    {
      if ((v75 & 1) != 0)
      {
        OSLogHandleForTransportCategory();
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v70, OS_LOG_TYPE_DEFAULT, "new address list is IPv6 only, send connection data.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("new address list is IPv6 only, send connection data."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("new address list is IPv6 only, send connection data."));
          }
        }
        objc_msgSend__sendConnectionDataWithRemovedAddressList_(v78, v71, 0, v72);
      }
      goto LABEL_49;
    }
  }
  else
  {

    v77 = 0;
  }
  OSLogHandleForTransportCategory();
  v73 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v73, OS_LOG_TYPE_DEFAULT, "no new valid local address is found, ignore.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no new valid local address is found, ignore."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no new valid local address is found, ignore."));
    }
  }
LABEL_49:

}

- (BOOL)_isInterfaceExpensiveWithInterfaceIndex:(unsigned int)a3
{
  NSMutableArray *v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  char v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = self->_interfaceAddressArray;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, v6, v21, 16);
  if (v7)
  {
    v11 = v7;
    v12 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(v4);
        v14 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (_QWORD)v17) == a3)
        {
          v15 = objc_msgSend_expensive(v14, v8, v9, v10);
          goto LABEL_11;
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, v10, v21, 16);
      if (v11)
        continue;
      break;
    }
  }
  v15 = 0;
LABEL_11:

  return v15;
}

- (BOOL)_isInterfaceConstrainedWithInterfaceIndex:(unsigned int)a3
{
  NSMutableArray *v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = self->_interfaceAddressArray;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, v6, v21, 16);
  if (v7)
  {
    v11 = v7;
    v12 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(v4);
        v14 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (_QWORD)v17) == a3
          && (objc_msgSend_constrained(v14, v8, v9, v10) & 1) != 0)
        {
          v15 = 1;
          goto LABEL_12;
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, v10, v21, 16);
      if (v11)
        continue;
      break;
    }
  }
  v15 = 0;
LABEL_12:

  return v15;
}

- (BOOL)_isInterfaceDelegatedWithInterfaceIndex:(unsigned int)a3
{
  NSMutableArray *v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  BOOL v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = self->_interfaceAddressArray;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v18, v6, v22, 16);
  if (v7)
  {
    v11 = v7;
    v12 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v4);
        v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (_QWORD)v18) == a3)
        {
          objc_msgSend_delegatedName(v14, v8, v9, v10);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (v15)
          {
            v16 = 1;
            goto LABEL_12;
          }
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v18, v10, v22, 16);
      if (v11)
        continue;
      break;
    }
  }
  v16 = 0;
LABEL_12:

  return v16;
}

- (id)_interfaceNameForInterfaceIndex:(unsigned int)a3
{
  NSMutableArray *v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  uint64_t i;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = self->_interfaceAddressArray;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, v6, v21, 16);
  if (v7)
  {
    v11 = v7;
    v12 = *(_QWORD *)v18;
    v13 = &stru_1E3C2E4E8;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(v4);
        v15 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (objc_msgSend_index(v15, v8, v9, v10, (_QWORD)v17) == a3)
        {
          objc_msgSend_name(v15, v8, v9, v10);
          v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
          goto LABEL_12;
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, v10, v21, 16);
      if (v11)
        continue;
      break;
    }
  }
  else
  {
    v13 = &stru_1E3C2E4E8;
  }
LABEL_12:

  return v13;
}

- (void)_processRemovedRemoteCandidates:(id)a3
{
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  NSMutableArray *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  id v27;
  const char *v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  _BOOL4 v37;
  const char *v38;
  double v39;
  const char *v40;
  double v41;
  __CFArray *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const char *v47;
  double v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  id v54;
  const char *v55;
  double v56;
  __CFArray *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t k;
  void *v64;
  void *v65;
  const char *v66;
  double v67;
  int v68;
  NSMutableArray *v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  double v73;
  const char *v74;
  double v75;
  NSObject *v76;
  NSMutableArray *remoteCandidateList;
  const char *v78;
  uint64_t v79;
  double v80;
  const char *v81;
  uint64_t v82;
  double v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  NSMutableArray *v88;
  const char *v89;
  double v90;
  NSObject *v91;
  const char *v92;
  uint64_t v93;
  double v94;
  NSMutableArray *v95;
  const char *v96;
  uint64_t v97;
  double v98;
  const char *v99;
  uint64_t v100;
  double v101;
  NSMutableArray *v102;
  void *v103;
  void *v104;
  void *v105;
  CFMutableArrayRef theArray;
  id obj;
  IDSGlobalLink *v108;
  uint64_t v109;
  id v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint8_t v123[128];
  uint8_t buf[4];
  NSMutableArray *v125;
  _BYTE v126[128];
  _BYTE v127[128];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v110 = a3;
  v108 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v4, v5, v6);
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v119, v8, v127, 16);
  if (v11)
  {
    theArray = 0;
    v109 = *(_QWORD *)v120;
    v12 = 138412290;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v120 != v109)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * i);
        objc_msgSend_candidatePairToken(v14, v9, v10, *(double *)&v12, v102);
        v15 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isRelayStunCandidatePair(v14, v16, v17, v18))
        {
          objc_msgSend_relayRemote(v14, v19, v20, v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend_address(v22, v23, v24, v25);

          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v27 = v110;
          v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v115, v29, v126, 16);
          if (v32)
          {
            v34 = *(_QWORD *)v116;
            while (2)
            {
              for (j = 0; j != v32; ++j)
              {
                if (*(_QWORD *)v116 != v34)
                  objc_enumerationMutation(v27);
                v36 = objc_msgSend_address(*(void **)(*((_QWORD *)&v115 + 1) + 8 * j), v30, v31, v33);
                if (v36)
                  v37 = v26 != 0;
                else
                  v37 = 0;
                if (v37 && IsSameIP(v36, v26))
                {
                  OSLogHandleForTransportCategory();
                  v43 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    v125 = v15;
                    _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "remote interface is removed, disconnect relay candidate pair %@.", buf, 0xCu);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      v102 = v15;
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remote interface is removed, disconnect relay candidate pair %@."));
                      if (_IDSShouldLog())
                      {
                        v102 = v15;
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remote interface is removed, disconnect relay candidate pair %@."));
                      }
                    }
                  }
                  if (objc_msgSend_isQUIC(v14, v44, v45, v46, v102))
                    objc_msgSend__sendQUICUnallocbindRequest_reason_(v108, v47, (uint64_t)v15, v48, 2);
                  else
                    objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v108, v47, (uint64_t)v15, v48, 0, 2);
                  goto LABEL_41;
                }
              }
              v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v115, v33, v126, 16);
              if (v32)
                continue;
              break;
            }
          }
        }
        else
        {
          objc_msgSend_remote(v14, v19, v20, v21);
          v27 = (id)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_containsObject_(v110, v38, (uint64_t)v27, v39))
          {
            objc_msgSend__notifyCandidatePairDisconnected_withReason_(v108, v40, (uint64_t)v14, v41, 2);
            v42 = theArray;
            if (theArray || (v42 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
            {
              if (v15)
                CFArrayAppendValue(v42, v15);
            }
            theArray = v42;
            OSLogHandleForTransportCategory();
            v49 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v125 = v15;
              _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "remove candidate pair %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v102 = v15;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove candidate pair %@."));
                if (_IDSShouldLog())
                {
                  v102 = v15;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove candidate pair %@."));
                }
              }
            }
          }
        }
LABEL_41:

      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v119, *(double *)&v12, v127, 16);
    }
    while (v11);
  }
  else
  {
    theArray = 0;
  }

  objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v50, v51, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v54 = v53;
  v57 = 0;
  v60 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v55, (uint64_t)&v111, v56, v123, 16);
  if (v60)
  {
    v61 = *(_QWORD *)v112;
    v62 = 138412290;
    do
    {
      for (k = 0; k != v60; ++k)
      {
        if (*(_QWORD *)v112 != v61)
          objc_enumerationMutation(v54);
        v64 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * k);
        if ((objc_msgSend_isRelayStunCandidatePair(v64, v58, v59, *(double *)&v62, v102) & 1) == 0)
        {
          objc_msgSend_remote(v64, v58, v59, *(double *)&v62);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = objc_msgSend_containsObject_(v110, v66, (uint64_t)v65, v67);

          if (v68)
          {
            objc_msgSend_candidatePairToken(v64, v58, v59, *(double *)&v62);
            v69 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
            if (v57 || (v57 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
            {
              if (v69)
                CFArrayAppendValue(v57, v69);
            }
            OSLogHandleForTransportCategory();
            v70 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v125 = v69;
              _os_log_impl(&dword_19B949000, v70, OS_LOG_TYPE_DEFAULT, "remove stun check pair %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v102 = v69;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove stun check pair %@."));
                if (_IDSShouldLog())
                {
                  v102 = v69;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove stun check pair %@."));
                }
              }
            }

          }
        }
      }
      v60 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v58, (uint64_t)&v111, *(double *)&v62, v123, 16);
    }
    while (v60);
  }

  if (objc_msgSend_count(v110, v71, v72, v73))
    objc_msgSend_removeObjectsInArray_(v108->_remoteCandidateList, v74, (uint64_t)v110, v75);
  OSLogHandleForTransportCategory();
  v76 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    remoteCandidateList = v108->_remoteCandidateList;
    *(_DWORD *)buf = 138412290;
    v125 = remoteCandidateList;
    _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "remaining remote candidates: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v102 = v108->_remoteCandidateList;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining remote candidates: %@."));
      if (_IDSShouldLog())
      {
        v102 = v108->_remoteCandidateList;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining remote candidates: %@."));
      }
    }
  }
  if (objc_msgSend_count(theArray, v78, v79, v80, v102))
  {
    objc_msgSend_removeObjectsForKeys_(v108->_tokenToCandidatePairs, v81, (uint64_t)theArray, v83);
    OSLogHandleForTransportCategory();
    v84 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(v108->_tokenToCandidatePairs, v85, v86, v87);
      v88 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v125 = v88;
      _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "remaining candidate pairs: %@.", buf, 0xCu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_allValues(v108->_tokenToCandidatePairs, v81, v82, v83);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining candidate pairs: %@."));

        if (_IDSShouldLog())
        {
          objc_msgSend_allValues(v108->_tokenToCandidatePairs, v81, v82, v83, v103);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining candidate pairs: %@."));

        }
      }
    }
  }
  if (objc_msgSend_count(v57, v81, v82, v83, v103))
  {
    objc_msgSend_removeObjectsForKeys_(v108->_tokenToStunCheckPairs, v89, (uint64_t)v57, v90);
    OSLogHandleForTransportCategory();
    v91 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v92, v93, v94);
      v95 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v125 = v95;
      _os_log_impl(&dword_19B949000, v91, OS_LOG_TYPE_DEFAULT, "remaining stun check pairs: %@.", buf, 0xCu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v96, v97, v98);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining stun check pairs: %@."));

        if (_IDSShouldLog())
        {
          objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v99, v100, v101, v104);
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining stun check pairs: %@."));

        }
      }
    }
  }

}

- (void)_processNewRemoteCandidates:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  OSLogHandleForTransportCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v22 = v4;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "new remote candidates %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v15 = v4;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("new remote candidates %@."));
      if (_IDSShouldLog())
      {
        v15 = v4;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("new remote candidates %@."));
      }
    }
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = v4;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v16, v8, v20, 16);
  if (v10)
  {
    v12 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v17 != v12)
          objc_enumerationMutation(v6);
        v14 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v9, v14, v11, 1, v15))
          objc_msgSend__addStunCheckPair_isRemoteCandidate_(self, v9, v14, v11, 1);
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v16, v11, v20, 16);
    }
    while (v10);
  }

}

- (void)_setupRelayConnectionForNetworkAddressChanges
{
  uint64_t v2;
  double v3;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  id v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  IDSGlobalLink *v25;
  NSObject *v26;
  const char *v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  int HasSharedRelayCandidatePairSucceededOrConnected;
  NSObject *v34;
  id WeakRetained;
  char v36;
  NSObject *v37;
  id v38;
  const char *v39;
  double v40;
  NSObject *v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  int hasActiveAllocbindFailoverTimerForSessionID;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  const __CFString *v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  __CFString *v59;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  NSObject *v64;
  NSString *acceptedRelaySessionID;
  NSMutableDictionary *connectingCandidatePairSessionInfo;
  NSString *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  id v73;
  const char *v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  const char *v84;
  double v85;
  char isEqualToString;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  char *v90;
  const char *v91;
  double v92;
  id v93;
  const char *v94;
  double v95;
  NSObject *v96;
  NSString *v97;
  __CFString *v98;
  char *v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint8_t v109[128];
  uint8_t buf[4];
  IDSGlobalLink *v111;
  __int16 v112;
  const __CFString *v113;
  __int16 v114;
  char *v115;
  _BYTE v116[128];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  GLUtilGetSharedSessionIDs(v5);
  v100 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v100, v6, v7, v8))
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v9, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v111) = objc_msgSend_count(v100, v13, v14, v15);
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "set up new QR link for %d shared session(s).", buf, 8u);
    }

    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v16 = v100;
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v105, v18, v116, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v106;
      v23 = 138412290;
LABEL_6:
      v24 = 0;
      while (1)
      {
        if (*(_QWORD *)v106 != v22)
          objc_enumerationMutation(v16);
        v25 = *(IDSGlobalLink **)(*((_QWORD *)&v105 + 1) + 8 * v24);
        objc_msgSend_GlobalLink(IDSFoundationLog, v19, v20, *(double *)&v23);
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v111 = v25;
          _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "set up new QR link for shared session %@.", buf, 0xCu);
        }

        if ((objc_msgSend__hasCandidatePairInState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v27, 1, v28, 1, 1) & 1) != 0)break;
        objc_msgSend_allValues(self->_tokenToCandidatePairs, v29, v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        HasSharedRelayCandidatePairSucceededOrConnected = GLUtilHasSharedRelayCandidatePairSucceededOrConnected(v25, v32);

        if (HasSharedRelayCandidatePairSucceededOrConnected)
          objc_msgSend__setupNewQRLinkIfNecessary_(self, v19, (uint64_t)v25, *(double *)&v23);
        if (v21 == ++v24)
        {
          v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v105, *(double *)&v23, v116, 16);
          if (v21)
            goto LABEL_6;
          break;
        }
      }
    }

  }
  else if (objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v9, 3, v11, 4, 0, 1))
  {
    if (self->_allowOnlyOneQR)
    {
      OSLogHandleForTransportCategory();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "skip set up new relay link because only one QR link is allowed.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip set up new relay link because only one QR link is allowed."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip set up new relay link because only one QR link is allowed."));
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "set up new QR link additionally with existing connected pair", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("set up new QR link additionally with existing connected pair"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("set up new QR link additionally with existing connected pair"));
        }
      }
      objc_msgSend__setupNewQRLinkIfNecessary_(self, v42, 0, v43);
    }
  }
  else if (self->_allowOnlyOneQR)
  {
    if (!self->_connectReadyHandler)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v36 = objc_opt_respondsToSelector();

      if ((v36 & 1) != 0)
      {
        OSLogHandleForTransportCategory();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v111 = self;
          _os_log_impl(&dword_19B949000, v37, OS_LOG_TYPE_DEFAULT, "all links are removed due to interface change, disconnect %@ immediately.", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("all links are removed due to interface change, disconnect %@ immediately."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("all links are removed due to interface change, disconnect %@ immediately."));
          }
        }
        v38 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didDisconnectOverCloud_cbuuid_(v38, v39, (uint64_t)self, v40, 0, self->_cbuuid);

      }
    }
  }
  else if (GLUtilHasDefaultInterface(self->_interfaceAddressArray))
  {
    hasActiveAllocbindFailoverTimerForSessionID = objc_msgSend__hasActiveAllocbindFailoverTimerForSessionID_(self, v44, (uint64_t)self->_acceptedRelaySessionID, v46);
    OSLogHandleForTransportCategory();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v52 = objc_msgSend_count(self->_tokenToCandidatePairs, v49, v50, v51);
      v53 = CFSTR("NO");
      v54 = _IDSLinkStateStrings[self->_state];
      if (hasActiveAllocbindFailoverTimerForSessionID)
        v53 = CFSTR("YES");
      *(_DWORD *)buf = 134218498;
      v111 = (IDSGlobalLink *)v52;
      v112 = 2112;
      v113 = v53;
      v114 = 2080;
      v115 = v54;
      _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "all links are removed due to interface change, set up QR link now. %lu, hasActiveAllocbindFailoverTimer: %@, GL state = %s", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v58 = objc_msgSend_count(self->_tokenToCandidatePairs, v55, v56, v57);
      v59 = hasActiveAllocbindFailoverTimerForSessionID ? CFSTR("YES") : CFSTR("NO");
      v98 = v59;
      v99 = _IDSLinkStateStrings[self->_state];
      v97 = (NSString *)v58;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("all links are removed due to interface change, set up QR link now. %lu, hasActiveAllocbindFailoverTimer: %@, GL state = %s"));
      if (_IDSShouldLog())
      {
        v63 = objc_msgSend_count(self->_tokenToCandidatePairs, v60, v61, v62, v97, v59, v99);
        v98 = v59;
        v99 = _IDSLinkStateStrings[self->_state];
        v97 = (NSString *)v63;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("all links are removed due to interface change, set up QR link now. %lu, hasActiveAllocbindFailoverTimer: %@, GL state = %s"));
      }
    }
    if ((hasActiveAllocbindFailoverTimerForSessionID & 1) != 0 || self->_state == 2)
    {
      OSLogHandleForTransportCategory();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        acceptedRelaySessionID = self->_acceptedRelaySessionID;
        *(_DWORD *)buf = 138412290;
        v111 = (IDSGlobalLink *)acceptedRelaySessionID;
        _os_log_impl(&dword_19B949000, v64, OS_LOG_TYPE_DEFAULT, "try to reconnect to the QR server, accepted relay sessionID: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v97 = self->_acceptedRelaySessionID;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("try to reconnect to the QR server, accepted relay sessionID: %@"));
          if (_IDSShouldLog())
          {
            v97 = self->_acceptedRelaySessionID;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("try to reconnect to the QR server, accepted relay sessionID: %@"));
          }
        }
      }
      connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
      if (connectingCandidatePairSessionInfo
        && (v67 = self->_acceptedRelaySessionID) != 0
        && (v68 = (id)CFDictionaryGetValue((CFDictionaryRef)connectingCandidatePairSessionInfo, v67)) != 0)
      {
        v72 = v68;
        objc_msgSend_allValues(self->_tokenToCandidatePairs, v69, v70, v71);
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v73 = (id)objc_claimAutoreleasedReturnValue();
        v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v74, (uint64_t)&v101, v75, v109, 16);
        if (v78)
        {
          v80 = *(_QWORD *)v102;
LABEL_68:
          v81 = 0;
          while (1)
          {
            if (*(_QWORD *)v102 != v80)
              objc_enumerationMutation(v73);
            v82 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * v81);
            objc_msgSend_sessionID(v82, v76, v77, v79, v97, v98, v99);
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v83, v84, (uint64_t)self->_acceptedRelaySessionID, v85);

            if ((isEqualToString & 1) != 0)
              break;
            if (v78 == ++v81)
            {
              v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v76, (uint64_t)&v101, v79, v109, 16);
              if (v78)
                goto LABEL_68;
              goto LABEL_74;
            }
          }
          v93 = v82;

          if (!v93)
            goto LABEL_93;
          objc_msgSend__handleAllocbindFailoverTimerWithTransportScoreCards_failoverTimerOnCandidatePair_onInterface_(self, v94, (uint64_t)v93, v95, 0, 0);

        }
        else
        {
LABEL_74:

LABEL_93:
          OSLogHandleForTransportCategory();
          v96 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v96, OS_LOG_TYPE_DEFAULT, "couldn't find candidatePair for accepted session, return", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("couldn't find candidatePair for accepted session, return"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("couldn't find candidatePair for accepted session, return"));
            }
          }
        }

      }
      else
      {
        OSLogHandleForTransportCategory();
        v88 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v88, OS_LOG_TYPE_DEFAULT, "couldn't find accepted session, return", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("couldn't find accepted session, return"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("couldn't find accepted session, return"));
          }
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v89 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        v90 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 136315138;
        v111 = (IDSGlobalLink *)v90;
        _os_log_impl(&dword_19B949000, v89, OS_LOG_TYPE_DEFAULT, "state = %s, try to setup New QR Link ", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v97 = (NSString *)_IDSLinkStateStrings[self->_state];
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("state = %s, try to setup New QR Link "));
          if (_IDSShouldLog())
          {
            v97 = (NSString *)_IDSLinkStateStrings[self->_state];
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("state = %s, try to setup New QR Link "));
          }
        }
      }
      objc_msgSend__setupNewQRLinkIfNecessary_(self, v91, 0, v92, v97, v98, v99);
    }
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
    v87 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v87, OS_LOG_TYPE_DEFAULT, "default interface is not ready, skip setting up QR link.", buf, 2u);
    }

  }
}

- (void)handleNetworkAddressChanges:(BOOL)a3 hasIPv6AddressChange:(BOOL)a4
{
  _BOOL4 v4;
  NSObject *v5;
  const __CFString *v6;
  const __CFString *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  __CFString *v11;
  __CFString *v12;
  IDSGlobalLink *v13;
  _BOOL4 disallowWiFi;
  _BOOL4 disallowCellular;
  const char *v16;
  double v17;
  NSMutableArray *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  double v23;
  id v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  const char *v34;
  double v35;
  const char *v36;
  double v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  const char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  const char *v46;
  double v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  NSMutableArray *v53;
  const char *v54;
  double v55;
  void *v56;
  const char *v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t i;
  void *v65;
  void *v66;
  const char *v67;
  double v68;
  char v69;
  BOOL v70;
  const char *v71;
  uint64_t v72;
  double v73;
  NSObject *v74;
  const char *v75;
  double v76;
  NSMutableArray *v77;
  const char *v78;
  double v79;
  __CFArray *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t j;
  void *v87;
  void *v88;
  const char *v89;
  double v90;
  char v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  double v95;
  int v96;
  BOOL v97;
  _BOOL4 v98;
  const char *v99;
  uint64_t v100;
  double v101;
  const char *v102;
  uint64_t v103;
  double v104;
  NSObject *v105;
  const char *v106;
  double v107;
  NSObject *v108;
  __CFString *v109;
  uint64_t v110;
  __CFArray *v111;
  __CFString *v112;
  uint64_t v113;
  void *v114;
  _BOOL4 v116;
  _BOOL4 v117;
  NSMutableArray *obj;
  void *v119;
  _QWORD v120[5];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[128];
  uint8_t v130[128];
  uint8_t buf[4];
  uint64_t v132;
  __int16 v133;
  const __CFString *v134;
  uint64_t v135;

  v4 = a4;
  v135 = *MEMORY[0x1E0C80C00];
  v117 = a3;
  if (a3 || a4)
  {
    v116 = a4;
    OSLogHandleForTransportCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = CFSTR("NO");
      if (v117)
        v7 = CFSTR("YES");
      else
        v7 = CFSTR("NO");
      if (v4)
        v6 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v132 = (uint64_t)v7;
      v133 = 2112;
      v134 = v6;
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "handleNetworkAddressChange (IPv4:%@, IPv6:%@).", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v11 = v117 ? CFSTR("YES") : CFSTR("NO");
      v12 = v116 ? CFSTR("YES") : CFSTR("NO");
      v109 = v11;
      v112 = v12;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("handleNetworkAddressChange (IPv4:%@, IPv6:%@)."));
      if (_IDSShouldLog())
      {
        v109 = v11;
        v112 = v12;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("handleNetworkAddressChange (IPv4:%@, IPv6:%@)."));
      }
    }
    v13 = self;
    disallowWiFi = self->_disallowWiFi;
    disallowCellular = self->_disallowCellular;
    if (self->_QUICForQREnabled)
    {
      if ((objc_msgSend_hasListener(self->_nwLink, v8, v9, v10) & 1) == 0)
      {
        objc_msgSend__addSocketAndInterfaceAddressWithNWLink_wantsWiFi_wantsCellular_(self, v16, self->_QRIPv6Enabled, v17, !disallowWiFi, !disallowCellular, v109, v112);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (id)objc_msgSend_mutableCopy(v30, v31, v32, v33);

        v18 = self->_interfaceAddressArray;
        v114 = 0;
        objc_msgSend__delayProcessingCellularInterfaces_(self, v34, (uint64_t)v18, v35, v110);
        goto LABEL_37;
      }
      v18 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v114 = (void *)objc_msgSend_copyCurrentNetworkInterfaces(self->_nwLink, v19, v20, v21);
      objc_msgSend_addObjectsFromArray_(v18, v22, (uint64_t)v114, v23);
      v24 = 0;
    }
    else
    {
      if (v117)
      {
        if (objc_msgSend_socket(self->_udpLink, v8, v9, v10) == -1)
        {
          objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v25, 0, v27, !disallowWiFi, !disallowCellular, v109, v112);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = (id)objc_msgSend_mutableCopy(v38, v39, v40, v41);

          v13 = self;
          v18 = self->_interfaceAddressArray;
          v114 = 0;
        }
        else
        {
          v114 = (void *)objc_msgSend_copyCurrentNetworkInterfaces(self->_udpLink, v25, v26, v27);
          v18 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          objc_msgSend_addObjectsFromArray_(v18, v28, (uint64_t)v114, v29);
          v24 = 0;
          v13 = self;
        }
      }
      else
      {
        v114 = 0;
        v18 = 0;
        v24 = 0;
      }
      if (!v116)
        goto LABEL_36;
      if (objc_msgSend_socket(v13->_udpLinkv6, v8, v9, v10) == -1)
      {
        objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v42, 1, v44, !disallowWiFi, !disallowCellular);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = objc_msgSend_mutableCopy(v48, v49, v50, v51);

        v53 = self->_interfaceAddressArray;
        v18 = v53;
        v24 = (id)v52;
      }
      else
      {
        v45 = objc_msgSend_copyCurrentNetworkInterfaces(self->_udpLinkv6, v42, v43, v44);

        if (!v18)
          v18 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend_addObjectsFromArray_(v18, v46, v45, v47, v109);
        v114 = (void *)v45;
      }
    }
    v13 = self;
LABEL_36:
    objc_msgSend__delayProcessingCellularInterfaces_(v13, v8, (uint64_t)v18, v10, v109);
LABEL_37:
    objc_msgSend_addressesFromInterfaceAddresses_(IDSInterfaceAddress, v36, (uint64_t)v18, v37);
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addressesFromInterfaceAddresses_(IDSInterfaceAddress, v54, (uint64_t)self->_interfaceAddressArray, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    obj = v18;
    v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v125, v58, v130, 16);
    if (v61)
    {
      v63 = *(_QWORD *)v126;
      do
      {
        for (i = 0; i != v61; ++i)
        {
          if (*(_QWORD *)v126 != v63)
            objc_enumerationMutation(obj);
          v65 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * i);
          objc_msgSend_address(v65, v59, v60, v62);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v69 = objc_msgSend_containsObject_(v56, v67, (uint64_t)v66, v68);

          if ((v69 & 1) == 0)
          {
            if (!v24)
              v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (v65)
              v70 = v24 == 0;
            else
              v70 = 1;
            if (!v70)
              CFArrayAppendValue((CFMutableArrayRef)v24, v65);
          }
        }
        v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v59, (uint64_t)&v125, v62, v130, 16);
      }
      while (v61);
    }

    v113 = objc_msgSend_count(v24, v71, v72, v73);
    if (v113)
    {
      OSLogHandleForTransportCategory();
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v132 = (uint64_t)v24;
        _os_log_impl(&dword_19B949000, v74, OS_LOG_TYPE_DEFAULT, "new local address list: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v111 = (__CFArray *)v24;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("new local address list: %@"));
          if (_IDSShouldLog())
          {
            v111 = (__CFArray *)v24;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("new local address list: %@"));
          }
        }
      }
      objc_msgSend__processNewLocalAddressList_(self, v75, (uint64_t)v24, v76, v111);
    }
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v77 = self->_interfaceAddressArray;
    v80 = 0;
    v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v77, v78, (uint64_t)&v121, v79, v129, 16);
    if (v83)
    {
      v85 = *(_QWORD *)v122;
      do
      {
        for (j = 0; j != v83; ++j)
        {
          if (*(_QWORD *)v122 != v85)
            objc_enumerationMutation(v77);
          v87 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * j);
          objc_msgSend_address(v87, v81, v82, v84);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = objc_msgSend_containsObject_(v119, v89, (uint64_t)v88, v90);

          if ((v91 & 1) == 0)
          {
            objc_msgSend_address(v87, v81, v82, v84);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            v96 = *(unsigned __int8 *)(objc_msgSend_sa(v92, v93, v94, v95) + 1);

            v97 = v96 == 2 && v117;
            v98 = v96 == 30 && v116;
            if (v97 || v98)
            {
              if (v80)
              {
                if (!v87)
                  continue;
              }
              else
              {
                v80 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
                if (!v87)
                  continue;
              }
              if (v80)
                CFArrayAppendValue(v80, v87);
            }
          }
        }
        v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v77, v81, (uint64_t)&v121, v84, v129, 16);
      }
      while (v83);
    }

    if (objc_msgSend_count(v80, v99, v100, v101))
    {
      OSLogHandleForTransportCategory();
      v105 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v132 = (uint64_t)v80;
        _os_log_impl(&dword_19B949000, v105, OS_LOG_TYPE_DEFAULT, "removed local address list: %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v111 = v80;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("removed local address list: %@."));
          if (_IDSShouldLog())
          {
            v111 = v80;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("removed local address list: %@."));
          }
        }
      }
      objc_msgSend__processRemovedLocalAddressList_(self, v106, (uint64_t)v80, v107, v111);
    }
    else if (!v113)
    {
LABEL_94:

      return;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v102, v103, v104);
    v108 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v132 = 0x4000000000000000;
      _os_log_impl(&dword_19B949000, v108, OS_LOG_TYPE_DEFAULT, "delay set up new QR link for %.3f sec", buf, 0xCu);
    }

    v120[0] = MEMORY[0x1E0C809B0];
    v120[1] = 3221225472;
    v120[2] = sub_19B9F1080;
    v120[3] = &unk_1E3C1F258;
    v120[4] = self;
    IDSTransportThreadAddBlockAfter(v120, 2.0);
    goto LABEL_94;
  }
}

- (void)_processDelayedCellularInterfaces
{
  NSObject *v3;
  NSMutableArray *delayedCellInterfaces;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSMutableArray *v10;
  NSMutableArray *v11;
  uint8_t buf[4];
  NSMutableArray *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (self->_delayedCellInterfaces)
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      delayedCellInterfaces = self->_delayedCellInterfaces;
      *(_DWORD *)buf = 138412290;
      v13 = delayedCellInterfaces;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "process delayed cell interfaces:%@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v11 = self->_delayedCellInterfaces;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process delayed cell interfaces:%@"));
      if (_IDSShouldLog())
      {
        v11 = self->_delayedCellInterfaces;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process delayed cell interfaces:%@"));
      }
    }
    objc_msgSend__processNewLocalAddressList_(self, v5, (uint64_t)self->_delayedCellInterfaces, v6, v11);
    objc_msgSend__setupRelayConnectionForNetworkAddressChanges(self, v7, v8, v9);
    v10 = self->_delayedCellInterfaces;
    self->_delayedCellInterfaces = 0;

  }
}

- (void)_handleNewRATChange
{
  uint64_t v2;
  double v3;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  NSObject *v10;
  id WeakRetained;
  char v12;
  NSObject *v13;
  const char *v14;
  id v15;
  const char *v16;
  double v17;
  uint8_t buf[4];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_radioAccessTechnology(v5, v6, v7, v8);

  OSLogHandleForTransportCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v19 = IDSRadioAccessTechnologyToString(v9);
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "handle cellular RAT change (newRAT:%s).", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      IDSRadioAccessTechnologyToString(v9);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("handle cellular RAT change (newRAT:%s)."));
      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v9);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("handle cellular RAT change (newRAT:%s)."));
      }
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v12 = objc_opt_respondsToSelector();

  if ((v12 & 1) != 0)
  {
    OSLogHandleForTransportCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = IDSRadioAccessTechnologyToString(v9);
      *(_DWORD *)buf = 136315138;
      v19 = v14;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "send didRATChange, newRAT:%s.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      IDSRadioAccessTechnologyToString(v9);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send didRATChange, newRAT:%s."));
      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v9);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send didRATChange, newRAT:%s."));
      }
    }
    v15 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didRATChange_(v15, v16, (uint64_t)self, v17, v9);

  }
}

- (void)handleCellularRATChange
{
  uint64_t v2;
  double v3;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  NSMutableArray *v16;
  const char *v17;
  double v18;
  char v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  id v30;
  const char *v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t j;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  const char *v46;
  double v47;
  NSObject *v48;
  id WeakRetained;
  char v50;
  id v51;
  const char *v52;
  double v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint8_t buf[4];
  int v64;
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  objc_msgSend__handleNewRATChange(self, a2, v2, v3);
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_cellularMTU(v8, v9, v10, v11);

  if ((_DWORD)v12)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v16 = self->_localCandidateList;
    v19 = 0;
    v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v59, v18, v66, 16);
    if (v22)
    {
      v24 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v60 != v24)
            objc_enumerationMutation(v16);
          v26 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
          if (objc_msgSend_isCellularStunCandidate(v26, v20, v21, v23)
            && objc_msgSend_mtu(v26, v20, v21, v23) != (_DWORD)v12)
          {
            objc_msgSend_setMtu_(v26, v20, v12, v23);
            v19 = 1;
          }
        }
        v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v20, (uint64_t)&v59, v23, v66, 16);
      }
      while (v22);
    }

    objc_msgSend_allValues(self->_tokenToCandidatePairs, v27, v28, v29);
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v30 = (id)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v55, v32, v65, 16);
    if (v35)
    {
      v37 = *(_QWORD *)v56;
      do
      {
        for (j = 0; j != v35; ++j)
        {
          if (*(_QWORD *)v56 != v37)
            objc_enumerationMutation(v30);
          objc_msgSend_local(*(void **)(*((_QWORD *)&v55 + 1) + 8 * j), v33, v34, v36);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isCellularStunCandidate(v39, v40, v41, v42)
            && objc_msgSend_mtu(v39, v43, v44, v45) != (_DWORD)v12)
          {
            objc_msgSend_setMtu_(v39, v46, v12, v47);
          }

        }
        v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v55, v36, v65, 16);
      }
      while (v35);
    }

    if ((v19 & 1) != 0)
    {
      OSLogHandleForTransportCategory();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v64 = v12;
        _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "send cellular MTU change event with new MTU %uB.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v54 = v12;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send cellular MTU change event with new MTU %uB."));
          if (_IDSShouldLog())
          {
            v54 = v12;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send cellular MTU change event with new MTU %uB."));
          }
        }
      }
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v50 = objc_opt_respondsToSelector();

      if ((v50 & 1) != 0)
      {
        v51 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didCellularMTUChange_(v51, v52, (uint64_t)self, v53, (unsigned __int16)v12);

      }
    }

  }
  objc_msgSend__processDelayedCellularInterfaces(self, v13, v14, v15, v54);
}

- (unint64_t)headerOverhead
{
  _QWORD *v2;
  int v3;
  int v4;

  v2 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (!v2)
    return 255;
  v3 = 4 * (*((_WORD *)v2 + 132) != 0);
  v4 = *((unsigned __int8 *)v2 + 9);
  if (v4 == 30)
  {
    return (v3 | 0x30);
  }
  else if (v4 == 2)
  {
    return (v3 + 28);
  }
  else
  {
    return 255;
  }
}

- (NSString)linkTypeString
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  const __CFString *v5;

  v4 = objc_msgSend_defaultLinkType(self, a2, v2, v3);
  v5 = CFSTR("GlobalLink");
  if (v4 == 4)
    v5 = CFSTR("GlobalLink-WWAN");
  if (v4 == 3)
    return (NSString *)CFSTR("GlobalLink-WiFi");
  else
    return &v5->isa;
}

- (id)copyLinkStatsDict
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  double v11;
  void *v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  void *v18;

  v3 = objc_alloc(MEMORY[0x1E0C99D80]);
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v4, self->_totalBytesReceived, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v7, self->_totalBytesSent, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v10, self->_totalPacketsReceived, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v13, self->_totalPacketsSent, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend_initWithObjectsAndKeys_(v3, v16, (uint64_t)v6, v17, CFSTR("bytesReceived"), v9, CFSTR("bytesSent"), v12, CFSTR("packetsReceived"), v15, CFSTR("packetsSent"), 0);

  return v18;
}

- (BOOL)remoteHostAwake
{
  return 1;
}

- (void)_reportSessionSetupTime
{
  NSObject *v3;
  const __CFString *v4;
  __CFString *v5;
  const __CFString *v6;
  double allocbindEndTime;
  double skeStartTime;
  double linkConnectTime;
  int v10;
  double *p_firstClientPacketTime;
  int v12;
  double v13;
  int v14;
  double allocbindStartTime;
  const __CFDictionary *linkIDToCandidatePairs;
  const __CFDictionary *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  unsigned int v34;
  const char *v35;
  uint64_t v36;
  int v37;
  void *v38;
  const char *v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t i;
  NSObject *v47;
  void *v48;
  id WeakRetained;
  char v50;
  id v51;
  const char *v52;
  double v53;
  double remoteJoinedUPlusOneTime;
  int v56;
  int v57;
  NSObject *v58;
  const __CFString *v59;
  const char *v60;
  const char *v61;
  const __CFString *v62;
  void *v63;
  id v64;
  char v65;
  void *v66;
  const char *v67;
  double v68;
  int v69;
  double v70;
  NSObject *v71;
  const __CFString *v72;
  const char *v73;
  const char *v74;
  const __CFString *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  double v79;
  void *v80;
  const char *v81;
  double v82;
  void *v83;
  id v84;
  char v85;
  id v86;
  const char *v87;
  double v88;
  void *v89;
  id v90;
  char v91;
  id v92;
  const char *v93;
  double v94;
  void *v95;
  id v96;
  char v97;
  id v98;
  const char *v99;
  double v100;
  void *v101;
  id v102;
  char v103;
  id v104;
  const char *v105;
  double v106;
  __CFString *v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint8_t buf[4];
  _BYTE v117[40];
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  _QWORD v123[2];
  const __CFString *v124;
  void *v125;
  _BYTE v126[128];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isUPlusOneSession)
      v4 = CFSTR("YES");
    else
      v4 = CFSTR("NO");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v117 = v4;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "_reportSessionSetupTime (U+1:%@)", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v5 = self->_isUPlusOneSession ? CFSTR("YES") : CFSTR("NO");
    v107 = v5;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_reportSessionSetupTime (U+1:%@)"));
    if (_IDSShouldLog())
    {
      if (self->_isUPlusOneSession)
        v6 = CFSTR("YES");
      else
        v6 = CFSTR("NO");
      v107 = (__CFString *)v6;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_reportSessionSetupTime (U+1:%@)"));
    }
  }
  allocbindEndTime = self->_allocbindEndTime;
  if (self->_isInitiator
    && ((skeStartTime = self->_skeStartTime, skeStartTime > 0.0)
     || self->_isUPlusOneSession && (skeStartTime = self->_remoteJoinedUPlusOneTime, skeStartTime > 0.0)))
  {
    linkConnectTime = self->_linkConnectTime;
    v10 = (int)((linkConnectTime - skeStartTime) * 1000.0);
    p_firstClientPacketTime = &self->_firstClientPacketTime;
    v12 = (int)((self->_firstClientPacketTime - linkConnectTime) * 1000.0);
  }
  else
  {
    p_firstClientPacketTime = &self->_firstClientPacketTime;
    v13 = self->_linkConnectTime;
    v10 = (int)((v13 - allocbindEndTime) * 1000.0);
    v12 = (int)((self->_firstClientPacketTime - v13) * 1000.0);
    if (!self->_isInitiator)
    {
LABEL_23:
      v14 = (int)((self->_firstDataReceivedTime - allocbindEndTime) * 1000.0);
      goto LABEL_25;
    }
  }
  if (self->_isSecondOrLaterParticipant)
    goto LABEL_23;
  v14 = 0;
LABEL_25:
  v111 = v10;
  allocbindStartTime = self->_allocbindStartTime;
  linkIDToCandidatePairs = (const __CFDictionary *)self->_linkIDToCandidatePairs;
  if (linkIDToCandidatePairs)
    linkIDToCandidatePairs = (const __CFDictionary *)CFDictionaryGetValue(linkIDToCandidatePairs, &unk_1E3C86958);
  v17 = linkIDToCandidatePairs;
  objc_msgSend_local(v17, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_radioAccessTechnology(v21, v22, v23, v24);

  if (v25 >= 0xA)
    v29 = 10;
  else
    v29 = v25;
  v110 = v29;
  objc_msgSend_remote(v17, v26, v27, v28, v107);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_radioAccessTechnology(v30, v31, v32, v33);

  if (v34 >= 0xA)
    v37 = 10;
  else
    v37 = v34;
  v109 = v37;
  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v35, v36, 0.0);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v112, v40, v126, 16);
  if (v43)
  {
    v45 = *(_QWORD *)v113;
    while (2)
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v113 != v45)
          objc_enumerationMutation(v38);
        if ((objc_msgSend_pendingRealloc(*(void **)(*((_QWORD *)&v112 + 1) + 8 * i), v41, v42, v44) & 1) != 0)
        {
          v108 = 1;
          goto LABEL_43;
        }
      }
      v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v41, (uint64_t)&v112, v44, v126, 16);
      if (v43)
        continue;
      break;
    }
  }
  v108 = 0;
LABEL_43:

  if (v14 >= 1)
  {
    OSLogHandleForTransportCategory();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v117 = v14;
      _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "received data duration: %d ms", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("received data duration: %d ms"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("received data duration: %d ms"));
      }
    }
    GLUCreateQRClientTimeEvent(310, 0, v17, self->_timeBase, (float)v14);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v50 = objc_opt_respondsToSelector();

    if ((v50 & 1) != 0)
    {
      v51 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v51, v52, (uint64_t)self, v53, v48);

    }
  }
  if (self->_isInitiator)
  {
    remoteJoinedUPlusOneTime = self->_skeStartTime;
    if (remoteJoinedUPlusOneTime != 0.0 && remoteJoinedUPlusOneTime < self->_allocbindEndTime)
      v56 = (int)((*p_firstClientPacketTime - remoteJoinedUPlusOneTime) * 1000.0);
    else
      v56 = v12 + v111;
    v70 = (double)(unsigned __int16)self->_acceptDelayU32 * 0.0000152587891 + (double)HIWORD(self->_acceptDelayU32);
    if (remoteJoinedUPlusOneTime == 0.0)
    {
      if (!self->_isUPlusOneSession
        || (remoteJoinedUPlusOneTime = self->_remoteJoinedUPlusOneTime, remoteJoinedUPlusOneTime <= 0.0))
      {
        remoteJoinedUPlusOneTime = self->_allocbindEndTime;
      }
    }
    v69 = (int)((remoteJoinedUPlusOneTime - self->_inviteSentTime - v70) * 1000.0);
    OSLogHandleForTransportCategory();
    v71 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_isInitiator)
        v72 = CFSTR("YES");
      else
        v72 = CFSTR("NO");
      v73 = IDSRadioAccessTechnologyToString(v110);
      v74 = IDSRadioAccessTechnologyToString(v109);
      if (v108)
        v75 = CFSTR("YES");
      else
        v75 = CFSTR("NO");
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)v117 = v56;
      *(_WORD *)&v117[4] = 2112;
      *(_QWORD *)&v117[6] = v72;
      *(_WORD *)&v117[14] = 2080;
      *(_QWORD *)&v117[16] = v73;
      *(_WORD *)&v117[24] = 2080;
      *(_QWORD *)&v117[26] = v74;
      *(_WORD *)&v117[34] = 1024;
      *(_DWORD *)&v117[36] = v69;
      v118 = 1024;
      v119 = v111;
      v120 = 1024;
      v121 = v12;
      v122 = 2112;
      v123[0] = v75;
      _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "got first client packet %d ms after Accept. (Initiator:%@, localRAT:%s, remoteRAT:%s, invite_time:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).", buf, 0x42u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        IDSRadioAccessTechnologyToString(v110);
        IDSRadioAccessTechnologyToString(v109);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("got first client packet %d ms after Accept. (Initiator:%@, localRAT:%s, remoteRAT:%s, invite_time:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@)."));
        if (_IDSShouldLog())
        {
          IDSRadioAccessTechnologyToString(v110);
          IDSRadioAccessTechnologyToString(v109);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("got first client packet %d ms after Accept. (Initiator:%@, localRAT:%s, remoteRAT:%s, invite_time:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@)."));
        }
      }
    }
    v63 = objc_loadWeakRetained((id *)&self->_delegate);
    v124 = CFSTR("gl-attr-acceptdelay");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v76, v77, v70 * 1000.0);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v125 = v66;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v78, (uint64_t)&v125, v79, &v124, 1);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_link_didReceiveReportEvent_(v63, v81, (uint64_t)self, v82, v80);

    goto LABEL_92;
  }
  v56 = v12 + v111 + (int)((allocbindEndTime - allocbindStartTime) * 1000.0);
  v57 = (int)((self->_firstDataReceivedTime - self->_calleeAcceptTime) * 1000.0);
  OSLogHandleForTransportCategory();
  v58 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isInitiator)
      v59 = CFSTR("YES");
    else
      v59 = CFSTR("NO");
    v60 = IDSRadioAccessTechnologyToString(v110);
    v61 = IDSRadioAccessTechnologyToString(v109);
    if (v108)
      v62 = CFSTR("YES");
    else
      v62 = CFSTR("NO");
    *(_DWORD *)buf = 67111170;
    *(_DWORD *)v117 = v12 + v111 + (int)((allocbindEndTime - allocbindStartTime) * 1000.0);
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v57;
    *(_WORD *)&v117[10] = 2112;
    *(_QWORD *)&v117[12] = v59;
    *(_WORD *)&v117[20] = 2080;
    *(_QWORD *)&v117[22] = v60;
    *(_WORD *)&v117[30] = 2080;
    *(_QWORD *)&v117[32] = v61;
    v118 = 1024;
    v119 = (int)((allocbindEndTime - allocbindStartTime) * 1000.0);
    v120 = 1024;
    v121 = v111;
    v122 = 1024;
    LODWORD(v123[0]) = v12;
    WORD2(v123[0]) = 2112;
    *(_QWORD *)((char *)v123 + 6) = v62;
    _os_log_impl(&dword_19B949000, v58, OS_LOG_TYPE_DEFAULT, "got first client packet %d ms after Accept, calleeAcceptToFirstIncomingData: %d ms(Initiator:%@, localRAT:%s, remoteRAT:%s, allocbind:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).", buf, 0x48u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      IDSRadioAccessTechnologyToString(v110);
      IDSRadioAccessTechnologyToString(v109);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("got first client packet %d ms after Accept, calleeAcceptToFirstIncomingData: %d ms(Initiator:%@, localRAT:%s, remoteRAT:%s, allocbind:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@)."));
      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v110);
        IDSRadioAccessTechnologyToString(v109);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("got first client packet %d ms after Accept, calleeAcceptToFirstIncomingData: %d ms(Initiator:%@, localRAT:%s, remoteRAT:%s, allocbind:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@)."));
      }
    }
  }
  if (v57 >= 1)
  {
    GLUCreateQRClientTimeEvent(302, 0, v17, self->_timeBase, (float)v57);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = objc_loadWeakRetained((id *)&self->_delegate);
    v65 = objc_opt_respondsToSelector();

    if ((v65 & 1) == 0)
    {
      v69 = 0;
      goto LABEL_93;
    }
    v66 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didAddQREvent_(v66, v67, (uint64_t)self, v68, v63);
    v69 = 0;
LABEL_92:

LABEL_93:
    goto LABEL_94;
  }
  v69 = 0;
LABEL_94:
  if (v56 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(301, 0, v17, self->_enableSKE, self->_isInitiator, (float)v56);
    GLUCreateQRClientTimeEvent(301, 0, v17, self->_timeBase, (float)v56);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = objc_loadWeakRetained((id *)&self->_delegate);
    v85 = objc_opt_respondsToSelector();

    if ((v85 & 1) != 0)
    {
      v86 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v86, v87, (uint64_t)self, v88, v83);

    }
  }
  if (v111 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(305, 0, v17, self->_enableSKE, self->_isInitiator, (float)v111);
    GLUCreateQRClientTimeEvent(305, 0, v17, self->_timeBase, (float)v111);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = objc_loadWeakRetained((id *)&self->_delegate);
    v91 = objc_opt_respondsToSelector();

    if ((v91 & 1) != 0)
    {
      v92 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v92, v93, (uint64_t)self, v94, v89);

    }
  }
  if (v12 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(303, 0, v17, self->_enableSKE, self->_isInitiator, (float)v12);
    GLUCreateQRClientTimeEvent(303, 0, v17, self->_timeBase, (float)v12);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = objc_loadWeakRetained((id *)&self->_delegate);
    v97 = objc_opt_respondsToSelector();

    if ((v97 & 1) != 0)
    {
      v98 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v98, v99, (uint64_t)self, v100, v95);

    }
  }
  if (self->_isInitiator && v69 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(306, 0, v17, self->_enableSKE, 1u, (float)v69);
    GLUCreateQRClientTimeEvent(306, 0, v17, self->_timeBase, (float)v69);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = objc_loadWeakRetained((id *)&self->_delegate);
    v103 = objc_opt_respondsToSelector();

    if ((v103 & 1) != 0)
    {
      v104 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v104, v105, (uint64_t)self, v106, v101);

    }
  }

}

- (BOOL)_getPacketBufferSendInfo:(id *)a3 channelNumber:(unsigned __int16 *)a4 transport:(int64_t *)a5
{
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  int var24;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, a3->var24);
  v9 = v8;
  if (v8)
  {
    a3->var16 = *((_DWORD *)v8 + 1);
    memcpy(&a3->var17, v8 + 1, *((unsigned __int8 *)v8 + 8));
    memcpy(&a3->var18, v9 + 17, *((unsigned __int8 *)v9 + 136));
    if (a4)
      *a4 = *((_WORD *)v9 + 132);
    if (a5)
      *a5 = v9[34];
  }
  else
  {
    OSLogHandleForTransportCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      var24 = a3->var24;
      *(_DWORD *)buf = 67109120;
      v14 = var24;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "_getPacketBufferSendInfo failed due to invalid linkID: %d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_getPacketBufferSendInfo failed due to invalid linkID: %d."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_getPacketBufferSendInfo failed due to invalid linkID: %d."));
      }
    }
  }
  return v9 != 0;
}

- (void)_updateSendStatsWithResult:(unint64_t)a3 bytesSent:(int64_t)a4 packetsSent:(int)a5 linkID:(char)a6 delegatedLinkID:(char)a7 token:(id)a8 isClientData:(BOOL)a9 sendTime:(double)a10 stunTransport:(int64_t)a11
{
  int v12;
  int v13;
  const char *v18;
  uint64_t v19;
  id v20;
  double v21;
  NSObject *v22;
  char *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  unint64_t v27;
  double *v28;
  int v29;
  const char *v30;
  double *v31;
  double v32;
  void *v33;
  const char *v34;
  double v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  const char *v41;
  double v42;
  double v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  _BOOL4 v48;
  void *Value;
  const char *v50;
  uint64_t v51;
  double v52;
  _BOOL4 v53;
  NSMutableDictionary *linkIDToCandidatePairs;
  uint8_t buf[4];
  _BYTE v56[14];
  __int16 v57;
  _BYTE v58[10];
  __int16 v59;
  int v60;
  uint64_t v61;

  v12 = a7;
  v13 = a6;
  v61 = *MEMORY[0x1E0C80C00];
  v20 = a8;
  if (a3)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v18, v19, v21);
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = _IDSLinkSendResultStrings[a3];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v56 = a5;
      *(_WORD *)&v56[4] = 2048;
      *(_QWORD *)&v56[6] = a4;
      v57 = 2080;
      *(_QWORD *)v58 = v23;
      v24 = "GLW failed for %d packet(s), %zdB (%s).";
      v25 = v22;
      v26 = 28;
LABEL_29:
      _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
      goto LABEL_30;
    }
    goto LABEL_30;
  }
  v27 = a11;
  self->_totalPacketsSent += a5;
  self->_totalBytesSent += a4;
  if (!a9)
  {
    Value = 0;
    if (v20 && self->_tokenToCandidatePairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v20);
    objc_msgSend_setLastOutgoingPacketTime_(Value, v18, v19, a10);
    objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
    v22 = objc_claimAutoreleasedReturnValue();
    v53 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v12 == -1)
    {
      if (v53)
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)v56 = a4;
        *(_WORD *)&v56[8] = 1024;
        *(_DWORD *)&v56[10] = GLUtilStunTransportChar(a11);
        v57 = 1024;
        *(_DWORD *)v58 = v13;
        v24 = "NCD %zdB (%c %d)";
        v25 = v22;
        v26 = 24;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    if (!v53)
      goto LABEL_30;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v56 = a4;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = GLUtilStunTransportChar(a11);
    v57 = 1024;
    *(_DWORD *)v58 = v13;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v12;
    v24 = "NCD %zdB (%c %d/%d)";
LABEL_26:
    v25 = v22;
    v26 = 30;
    goto LABEL_29;
  }
  v28 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, v13);
  if (v12 == -1)
    v29 = v13;
  else
    v29 = v12;
  v31 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, v29);
  if (v28 && !*((_DWORD *)v28 + 76))
  {
    linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v30, *(unsigned int *)v28, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(linkIDToCandidatePairs, v34, (uint64_t)v33, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_linkMetrics(v36, v37, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_event_(v40, v41, (uint64_t)CFSTR("glr"), v42);

    v27 = a11;
  }
  if (v31)
  {
    v31[35] = a10;
    *((_DWORD *)v31 + 76) += a5;
  }
  if (v28 != v31)
  {
    v28[35] = a10;
    *((_DWORD *)v28 + 76) += a5;
  }
  kdebug_trace();
  v43 = ids_monotonic_time();
  objc_msgSend_reportLinkMetricsForLinkID_lastPacketReceivedTime_lastPacketSentTime_(self, v44, v13, 0.0, v43);
  objc_msgSend_GlobalLink(IDSFoundationLog, v45, v46, v47);
  v22 = objc_claimAutoreleasedReturnValue();
  v48 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if (v12 == -1)
  {
    if (!v48)
      goto LABEL_30;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v56 = a4;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = a5;
    v57 = 1024;
    *(_DWORD *)v58 = GLUtilStunTransportChar(v27);
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v13;
    v24 = "GLW %zdB/%1d (%c %d)";
    goto LABEL_26;
  }
  if (v48)
  {
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)v56 = a4;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = a5;
    v57 = 1024;
    *(_DWORD *)v58 = GLUtilStunTransportChar(v27);
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v13;
    v59 = 1024;
    v60 = v12;
    v24 = "GLW %zdB/%1d (%c %d/%d)";
    v25 = v22;
    v26 = 36;
    goto LABEL_29;
  }
LABEL_30:

}

- (unint64_t)_prepareOutgoingChannelData:(id *)a3 arraySize:(int)a4 channelNumber:(unsigned __int16)a5 candidatePair:(id)a6 linkID:(char)a7 delegatedLinkID:(char *)a8 stunTransport:(int64_t)a9
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  id v15;
  id v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  double v27;
  uint64_t v28;
  const char *v29;
  double v30;
  void *v31;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v59;
  void *v60;
  id v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const void *v65;
  unint64_t v66;
  NSObject *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  double v72;
  uint64_t v73;
  NSObject *v74;
  double v75;
  uint64_t v76;
  NSObject *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  id v82;

  v10 = a7;
  v11 = a5;
  v12 = *(_QWORD *)&a4;
  v15 = a6;
  v16 = v15;
  if (!v11)
  {
    v66 = 0;
    goto LABEL_48;
  }
  if (!v15 || (v10 & 0x80000000) == 0)
  {
    GLUtilGetCandidatePairByLinkID(v10, self->_sendInfoList, self->_linkIDToCandidatePairs, self->_channelToCandidatePairs);
    v17 = objc_claimAutoreleasedReturnValue();

    v16 = (id)v17;
  }
  v16 = v16;
  v24 = v16;
  if (!objc_msgSend_isVirtualRelayStunCandidatePair(v16, v18, v19, v20))
    goto LABEL_13;
  v25 = objc_msgSend_delegatedLinkID(v16, v21, v22, v23);
  *a8 = v25;
  if (!self->_linkIDToCandidatePairs
    || (objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v26, v25, v27),
        (v28 = objc_claimAutoreleasedReturnValue()) == 0))
  {

    goto LABEL_28;
  }
  v31 = (void *)v28;
  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v29, *a8, v30);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v33);

  if (!v24)
  {
LABEL_28:
    objc_msgSend_GlobalLink(IDSFoundationLog, v34, v35, v36);
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      sub_19BAF280C();

    if ((int)v12 >= 1)
    {
      v69 = v12;
      v66 = 9;
      do
      {
        v70 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x1FA3, v70, v68);
        --v69;
      }
      while (v69);
      v24 = 0;
      goto LABEL_47;
    }
    v24 = 0;
LABEL_35:
    v66 = 9;
    goto LABEL_47;
  }
  if ((v11 & 0xF0) != 0x60)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v34, v35, v36);
    v78 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      sub_19BAF28C4();

    if ((int)v12 >= 1)
    {
      v80 = v12;
      v66 = 9;
      do
      {
        v81 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x1FB2, v81, v79);
        --v80;
      }
      while (v80);
      goto LABEL_47;
    }
    goto LABEL_35;
  }
  v37 = objc_msgSend_remoteRelayLinkID(v16, v34, v35, v36);
  if ((int)v12 < 1)
  {
LABEL_25:
    StunUtilPrepareOutgoingChannelData(v11, (_QWORD **)a3, v12, a9, v23);
    v66 = 0;
    goto LABEL_47;
  }
  v38 = v12;
  v39 = a3;
  do
  {
    v40 = (uint64_t)*v39++;
    *(_WORD *)(v40 + 524) = v37;
    *(_DWORD *)(v40 + 520) = 1;
    --v38;
  }
  while (v38);
LABEL_13:
  if ((int)v12 < 1)
    goto LABEL_25;
  v82 = v16;
  v41 = v12;
  v42 = v12;
  v43 = (uint64_t *)a3;
  do
  {
    if ((*(_BYTE *)(*v43 + 536) & 1) != 0)
      StunUtilGetMappedParticipantID(*v43, 0, v24, 0);
    ++v43;
    --v42;
  }
  while (v42);
  v44 = v12;
  v45 = a3;
  while (1)
  {
    v46 = (uint64_t *)*v45;
    if ((*((_BYTE *)*v45 + 537) & 4) == 0)
      goto LABEL_23;
    v47 = *v46;
    v48 = v46[2];
    objc_msgSend_hbhEncKey(v24, v21, v22, v23);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    IDSHBHEncryptDataWithKey(v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v50)
      break;
    v54 = *((_QWORD *)*v45 + 1);
    if (v54 < objc_msgSend_length(v50, v51, v52, v53))
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v55, v56, v57);
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        sub_19BAF2898();

      do
      {
        v76 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x1FCB, v76, v75);
        --v41;
      }
      while (v41);

      v66 = 4;
      goto LABEL_46;
    }
    v58 = objc_msgSend_length(v50, v55, v56, v57);
    v59 = *v45;
    *((_QWORD *)v59 + 2) = v58;
    v60 = *(void **)v59;
    v61 = objc_retainAutorelease(v50);
    v65 = (const void *)objc_msgSend_bytes(v61, v62, v63, v64);
    memcpy(v60, v65, *((_QWORD *)*v45 + 2));

LABEL_23:
    ++v45;
    if (!--v44)
    {
      v16 = v82;
      goto LABEL_25;
    }
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v51, v52, v53);
  v71 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    sub_19BAF286C();

  v66 = 11;
  do
  {
    v73 = (uint64_t)*a3++;
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x1FC4, v73, v72);
    --v41;
  }
  while (v41);
LABEL_46:
  v16 = v82;
LABEL_47:

LABEL_48:
  return v66;
}

- (unint64_t)_sendChannelDataPacketBuffer:(id *)a3 candidatePair:(id)a4
{
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  unsigned __int8 *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  unsigned __int8 *v42;
  const char *v43;
  double v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  double v48;
  unsigned int v49;
  const char *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  double v55;
  int64_t var2;
  const char *v57;
  uint64_t v59;
  char v60;
  $D38D7C82BC04D962879521F520F2ED6C *v61;

  v61 = a3;
  v6 = a4;
  v10 = objc_msgSend_channelNumber(v6, v7, v8, v9);
  objc_msgSend_local(v6, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_transport(v14, v15, v16, v17);

  v19 = ids_monotonic_time();
  objc_msgSend_local(v6, v20, v21, v19);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend_index(v22, v23, v24, v25);

  objc_msgSend_local(v6, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = (unsigned __int8 *)objc_msgSend_address(v30, v31, v32, v33);

  objc_msgSend_remote(v6, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = (unsigned __int8 *)objc_msgSend_external(v38, v39, v40, v41);

  a3->var16 = v26;
  memcpy(&a3->var17, v34, *v34);
  memcpy(&a3->var18, v42, *v42);
  objc_msgSend__getLink_stunTransport_(self, v43, a3->var17.ss_family, v44, v18);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend_linkID(v6, v46, v47, v48);
  if (v49)
    v52 = v49;
  else
    v52 = 0xFFFFFFFFLL;
  v60 = -1;
  v53 = objc_msgSend__prepareOutgoingChannelData_arraySize_channelNumber_candidatePair_linkID_delegatedLinkID_stunTransport_(self, v50, (uint64_t)&v61, v51, 1, v10, v6, v52, &v60, v18);

  if (!v53)
  {
    var2 = v61->var2;
    v53 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(v45, v54, (uint64_t)v61, v55, self->_deviceUniqueID, self->_cbuuid);
    LOBYTE(v59) = 1;
    objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_(self, v57, v53, v19, var2, 1, (char)v52, v60, 0, v59, v18);
  }

  return v53;
}

- (unint64_t)sendPacketBuffer:(id *)a3 toDeviceUniqueID:(id)a4 cbuuid:(id)a5
{
  $D38D7C82BC04D962879521F520F2ED6C *v6;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  double firstClientPacketTime;
  NSObject *v14;
  const __CFString *v15;
  uint64_t v16;
  const char *v17;
  double v18;
  const char *v19;
  void *v20;
  double v21;
  uint64_t var24;
  int64_t var2;
  uint64_t v24;
  const char *v25;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 v29;
  $D38D7C82BC04D962879521F520F2ED6C *v30;
  uint8_t buf[4];
  const __CFString *v32;
  uint64_t v33;

  v6 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  v30 = a3;
  v8 = a4;
  v9 = a5;
  v29 = 0;
  v28 = 0xAAAAAAAAAAAAAAAALL;
  v12 = ids_monotonic_time();
  firstClientPacketTime = self->_firstClientPacketTime;
  if (firstClientPacketTime == 0.0 && (!self->_isUPlusOneSession || v6->var2 >= 11))
  {
    self->_firstClientPacketTime = v12;
    self->_reportClientPacketTime = 1;
    objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, firstClientPacketTime);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_reportDataReceivedTime)
        v15 = CFSTR("YES");
      else
        v15 = CFSTR("NO");
      *(_DWORD *)buf = 138412290;
      v32 = v15;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "sendPacketBuffer: _firstDataReceivedTime _reportDataReceivedTime: %@", buf, 0xCu);
    }

    if (self->_reportDataReceivedTime)
    {
      objc_msgSend__reportSessionSetupTime(self, v10, v16, firstClientPacketTime);
      self->_reportClientPacketTime = 0;
    }
  }
  if (!v6->var24 && (v6->var23[0].var20 & 0x4000) != 0)
    v6->var24 = self->_linkIDForPlugin;
  if ((objc_msgSend__getPacketBufferSendInfo_channelNumber_transport_(self, v10, (uint64_t)v6, firstClientPacketTime, &v29, &v28) & 1) != 0)
  {
    objc_msgSend__getLink_stunTransport_(self, v17, v6->var17.ss_family, v18, v28);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = -1;
    var24 = v6->var24;
    if (!v6->var15)
    {
      v24 = objc_msgSend__prepareOutgoingChannelData_arraySize_channelNumber_candidatePair_linkID_delegatedLinkID_stunTransport_(self, v19, (uint64_t)&v30, v21, 1, v29, 0, var24, buf, v28);
      if (v24)
        goto LABEL_19;
      v6 = v30;
    }
    var2 = v6->var2;
    v24 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(v20, v19, (uint64_t)v6, v21, v8, v9);
    LOBYTE(v27) = 1;
    objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_(self, v25, v24, v12, var2, 1, var24, (char)buf[0], 0, v27, v28);
LABEL_19:

    goto LABEL_20;
  }
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x200A, (uint64_t)v6, v18);
  v24 = 9;
LABEL_20:

  return v24;
}

- (unint64_t)sendPacketBufferArray:(id *)a3 arraySize:(int)a4 toDeviceUniqueID:(id)a5 cbuuid:(id)a6
{
  uint64_t v7;
  id v10;
  const char *v11;
  id v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v17;
  const char *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v23;
  const char *v24;
  double v25;
  void *v26;
  char v27;
  const char *v28;
  double v29;
  const char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned __int16 v40;

  v7 = *(_QWORD *)&a4;
  v10 = a5;
  v12 = a6;
  if ((_DWORD)v7 == 1)
  {
    v14 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(self, v11, (uint64_t)*a3, v13, v10, v12);
  }
  else if ((v7 - 9) > 0xFFFFFFF7)
  {
    v17 = *a3;
    v40 = 0;
    v39 = 0;
    v19 = ids_monotonic_time();
    v20 = v19;
    v21 = 0;
    v22 = v7;
    do
    {
      v23 = a3[v21];
      if (!*((_BYTE *)v23 + 1216) && (*((_BYTE *)v23 + 537) & 0x40) != 0)
        *((_BYTE *)v23 + 1216) = self->_linkIDForPlugin;
      ++v21;
    }
    while (v7 != v21);
    if ((objc_msgSend__getPacketBufferSendInfo_channelNumber_transport_(self, v18, (uint64_t)v17, v19, &v40, &v39) & 1) != 0)
    {
      objc_msgSend__getLink_stunTransport_(self, v24, *((unsigned __int8 *)v17 + 57), v25, v39);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = -1;
      v27 = *((_BYTE *)v17 + 1216);
      v14 = objc_msgSend__prepareOutgoingChannelData_arraySize_channelNumber_candidatePair_linkID_delegatedLinkID_stunTransport_(self, v28, (uint64_t)a3, v29, v7, v40, 0, v27, &v38, v39);
      if (!v14)
      {
        v32 = 0;
        v33 = 0;
        do
          v33 += *((_QWORD *)a3[v32++] + 2);
        while (v7 != v32);
        v14 = objc_msgSend_sendPacketBufferArray_arraySize_toDeviceUniqueID_cbuuid_(v26, v30, (uint64_t)a3, v31, v7, v10, v12);
        LOBYTE(v37) = 1;
        objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_(self, v34, v14, v20, v33, v7, v27, v38, 0, v37, v39);
      }

    }
    else
    {
      v14 = 9;
      do
      {
        v35 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x203B, v35, v25);
        --v22;
      }
      while (v22);
    }
  }
  else if ((int)v7 < 1)
  {
    v14 = 9;
  }
  else
  {
    v15 = v7;
    v14 = 9;
    do
    {
      v16 = (uint64_t)*a3++;
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2029, v16, v13);
      --v15;
    }
    while (v15);
  }

  return v14;
}

- (id)generateLinkReport:(double)a3 isCurrentLink:(BOOL)a4
{
  double previousReportTime;
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t state;
  const char *v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  unint64_t totalPacketsSent;
  const char *v18;
  double v19;
  void *v20;
  unint64_t v21;
  const char *v22;
  double v23;
  void *v24;
  const char *v25;
  void *v26;
  unint64_t totalPacketsReceived;
  const char *v28;
  double v29;
  void *v30;
  const char *v31;
  double v32;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;

  previousReportTime = self->_previousReportTime;
  if (previousReportTime == 0.0)
  {
    v13 = 0;
  }
  else
  {
    v7 = a3 - previousReportTime;
    v8 = self->_totalBytesSent - self->_previousBytesSent;
    v9 = self->_totalBytesReceived - self->_previousBytesReceived;
    if (a4)
      v10 = 42;
    else
      v10 = 32;
    v36 = v10;
    v37 = (void *)MEMORY[0x1E0CB3940];
    state = self->_state;
    if (state > 6)
      v12 = "UnexpectedState";
    else
      v12 = _IDSLinkStateStrings[state];
    v35 = v12;
    v34 = self->_totalPacketsSent - self->_previousPacketsSent;
    formattedBytes(v8, a2, previousReportTime);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    formattedSpeed((unint64_t)((double)(8 * v8) / v7 + 0.5), v15, (double)(8 * v8) / v7 + 0.5);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    totalPacketsSent = self->_totalPacketsSent;
    formattedBytes(self->_totalBytesSent, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = self->_totalPacketsReceived - self->_previousPacketsReceived;
    formattedBytes(v9, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    formattedSpeed((unint64_t)((double)(8 * v9) / v7 + 0.5), v25, (double)(8 * v9) / v7 + 0.5);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    totalPacketsReceived = self->_totalPacketsReceived;
    formattedBytes(self->_totalBytesReceived, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v37, v31, (uint64_t)CFSTR("%c GlobalLink(%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B\n                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B\n"), v32, v36, v35, v34, v14, v16, totalPacketsSent, v20, v21, v24, v26, totalPacketsReceived, v30);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  self->_previousReportTime = a3;
  self->_previousBytesSent = self->_totalBytesSent;
  *(_OWORD *)&self->_previousPacketsSent = *(_OWORD *)&self->_totalPacketsSent;
  self->_previousPacketsReceived = self->_totalPacketsReceived;
  return v13;
}

- (void)_sendSKEDataWithSelectedCandidatePair
{
  uint64_t v2;
  double v3;
  const char *v4;
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const __CFString *v20;
  int v21;
  const char *v22;
  uint64_t v23;
  double v24;
  int v25;
  const __CFString *v26;
  const __CFString *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  double v33;
  __CFString *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  __CFString *v38;
  __CFString *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  const __CFString *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const __CFString *v47;
  const __CFString *v48;
  char v49;
  char v50;
  __CFString *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  int isCellularStunCandidate;
  const char *v60;
  double v61;
  id v62;
  const char *v63;
  double v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  NSObject *v72;
  const __CFString *v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  double v77;
  char *v78;
  const char *v79;
  uint64_t v80;
  double v81;
  const char *v82;
  uint64_t v83;
  double v84;
  double v85;
  NSObject *v86;
  const __CFString *v87;
  const char *v88;
  uint64_t v89;
  double v90;
  __CFString *v91;
  const __CFString *v92;
  void *v93;
  const char *v94;
  double v95;
  _BOOL4 v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  double v100;
  const char *v101;
  double v102;
  char *v103;
  __CFString *v104;
  __CFString *v105;
  __CFString *v106;
  __CFString *v107;
  void *v108;
  __CFString *v110;
  id obj;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint8_t v121[128];
  uint8_t buf[4];
  const char *v123;
  __int16 v124;
  const __CFString *v125;
  __int16 v126;
  const __CFString *v127;
  __int16 v128;
  const __CFString *v129;
  __int16 v130;
  const __CFString *v131;
  _BYTE v132[128];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  if (!self->_isInitiator)
  {
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v62 = v108;
    v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v63, (uint64_t)&v113, v64, v121, 16);
    if (v67)
    {
      v69 = *(_QWORD *)v114;
LABEL_53:
      v70 = 0;
      while (1)
      {
        if (*(_QWORD *)v114 != v69)
          objc_enumerationMutation(v62);
        v71 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * v70);
        if ((objc_msgSend_recvSKEData(v71, v65, v66, v68) & 1) != 0)
          break;
        if (v67 == ++v70)
        {
          v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v65, (uint64_t)&v113, v68, v121, 16);
          if (v67)
            goto LABEL_53;
          goto LABEL_59;
        }
      }
      v51 = v71;

      if (!v51)
        goto LABEL_60;
      goto LABEL_71;
    }
    goto LABEL_59;
  }
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  obj = v108;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v117, v5, v132, 16);
  if (!v8)
  {
LABEL_59:

    goto LABEL_60;
  }
  v110 = 0;
  v112 = *(_QWORD *)v118;
  v9 = 136316162;
LABEL_4:
  v10 = 0;
  while (1)
  {
    if (*(_QWORD *)v118 != v112)
      objc_enumerationMutation(obj);
    v11 = *(__CFString **)(*((_QWORD *)&v117 + 1) + 8 * v10);
    v12 = objc_msgSend_state(v11, v6, v7, *(double *)&v9);
    OSLogHandleForTransportCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_isAcceptedRelaySession(v11, v14, v15, v16))
        v20 = CFSTR("YES");
      else
        v20 = CFSTR("NO");
      v21 = objc_msgSend_pendingRealloc(v11, v17, v18, v19);
      v25 = objc_msgSend_sentSKEData(v11, v22, v23, v24);
      *(_DWORD *)buf = 136316162;
      if (v21)
        v26 = CFSTR("YES");
      else
        v26 = CFSTR("NO");
      v123 = "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]";
      if (v25)
        v27 = CFSTR("YES");
      else
        v27 = CFSTR("NO");
      v124 = 2112;
      v125 = v11;
      v126 = 2112;
      v127 = v20;
      v128 = 2112;
      v129 = v26;
      v130 = 2112;
      v131 = v27;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@", buf, 0x34u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v34 = objc_msgSend_isAcceptedRelaySession(v11, v28, v29, v30) ? CFSTR("YES") : CFSTR("NO");
      v38 = objc_msgSend_pendingRealloc(v11, v31, v32, v33) ? CFSTR("YES") : CFSTR("NO");
      v39 = objc_msgSend_sentSKEData(v11, v35, v36, v37) ? CFSTR("YES") : CFSTR("NO");
      v106 = v38;
      v107 = v39;
      v104 = v11;
      v105 = v34;
      v103 = "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]";
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@"));
      if (_IDSShouldLog())
      {
        if (objc_msgSend_isAcceptedRelaySession(v11, v28, v29, v30, "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]", v11, v34, v38, v107))v43 = CFSTR("YES");
        else
          v43 = CFSTR("NO");
        if (objc_msgSend_pendingRealloc(v11, v40, v41, v42))
          v47 = CFSTR("YES");
        else
          v47 = CFSTR("NO");
        if (objc_msgSend_sentSKEData(v11, v44, v45, v46))
          v48 = CFSTR("YES");
        else
          v48 = CFSTR("NO");
        v106 = (__CFString *)v47;
        v107 = (__CFString *)v48;
        v104 = v11;
        v105 = (__CFString *)v43;
        v103 = "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]";
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@"));
      }
    }
    if (objc_msgSend_isAcceptedRelaySession(v11, v28, v29, v30, v103, v104, v105, v106, v107)
      && (objc_msgSend_pendingRealloc(v11, v6, v7, *(double *)&v9) & 1) == 0)
    {
      v49 = objc_msgSend_sentSKEData(v11, v6, v7, *(double *)&v9);
      v50 = (unint64_t)(v12 - 5) < 0xFFFFFFFFFFFFFFFELL ? 1 : v49;
      if ((v50 & 1) == 0)
      {
        v51 = v11;

        objc_msgSend_local(v51, v52, v53, v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v55, v56, v57, v58);

        v110 = v51;
        if (!isCellularStunCandidate)
          break;
      }
    }
    if (v8 == ++v10)
    {
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v117, *(double *)&v9, v132, 16);
      v51 = v110;
      if (v8)
        goto LABEL_4;
      break;
    }
  }

  if (v51)
  {
    objc_msgSend_setSentSKEData_(v51, v60, 1, v61);
LABEL_71:
    OSLogHandleForTransportCategory();
    v74 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_candidatePairToken(v51, v75, v76, v77);
      v78 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v123 = v78;
      _os_log_impl(&dword_19B949000, v74, OS_LOG_TYPE_DEFAULT, "send SKE data using %@.", buf, 0xCu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_candidatePairToken(v51, v79, v80, v81);
        v103 = (char *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send SKE data using %@."));

        if (_IDSShouldLog())
        {
          objc_msgSend_candidatePairToken(v51, v82, v83, v84, v103);
          v103 = (char *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send SKE data using %@."));

        }
      }
    }
    v85 = ids_monotonic_time() - self->_skeStartTime;
    OSLogHandleForTransportCategory();
    v86 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
    {
      v87 = CFSTR("YES");
      if (!self->_isInitiator)
        v87 = CFSTR("NO");
      *(_DWORD *)buf = 134218242;
      v123 = *(const char **)&v85;
      v124 = 2112;
      v125 = v87;
      _os_log_impl(&dword_19B949000, v86, OS_LOG_TYPE_DEFAULT, "send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v91 = self->_isInitiator ? CFSTR("YES") : CFSTR("NO");
      v104 = v91;
      v103 = *(char **)&v85;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@)."));
      if (_IDSShouldLog())
      {
        if (self->_isInitiator)
          v92 = CFSTR("YES");
        else
          v92 = CFSTR("NO");
        v104 = (__CFString *)v92;
        v103 = *(char **)&v85;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@)."));
      }
    }
    if (self->_remoteGlobalLinkVersion)
    {
      objc_msgSend_candidatePairToken(v51, v88, v89, v90);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v94, 1, v95, 0, 0, v93);

    }
    else
    {
      v96 = !self->_isInitiator;
      if (self->_isInitiator)
        v97 = 1;
      else
        v97 = 32769;
      objc_msgSend_candidatePairToken(v51, v88, v89, v90, v103, v104);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v99, v97, v100, 0, 0, v98);

      if (v96)
        objc_msgSend__notifyQRSessionConnected_(self, v101, (uint64_t)v51, v102);
    }
    goto LABEL_98;
  }
LABEL_60:
  OSLogHandleForTransportCategory();
  v72 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isInitiator)
      v73 = CFSTR("YES");
    else
      v73 = CFSTR("NO");
    *(_DWORD *)buf = 138412290;
    v123 = (const char *)v73;
    _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "failed to select candidate pair to send SKE data (isInitiator:%@).", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to select candidate pair to send SKE data (isInitiator:%@)."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to select candidate pair to send SKE data (isInitiator:%@)."));
    }
  }
  v51 = 0;
LABEL_98:

}

- (void)_sendSKEDataToSucceededCandidatePairs
{
  uint64_t v2;
  double v3;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const __CFString *v24;
  int v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  const __CFString *v30;
  const __CFString *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  __CFString *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  __CFString *v42;
  __CFString *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const __CFString *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  const __CFString *v51;
  const __CFString *v52;
  char v53;
  char v54;
  __CFString *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  double v62;
  int isCellularStunCandidate;
  const char *v64;
  uint64_t v65;
  double v66;
  const char *v67;
  double v68;
  const char *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t i;
  void *v77;
  const char *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t j;
  void *v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  char *v88;
  const char *v89;
  uint64_t v90;
  double v91;
  const char *v92;
  uint64_t v93;
  double v94;
  double v95;
  NSObject *v96;
  const __CFString *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  const __CFString *v101;
  const __CFString *v102;
  void *v103;
  const char *v104;
  double v105;
  const char *v106;
  double v107;
  _BOOL4 v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  double v112;
  NSObject *v113;
  const __CFString *v114;
  char *v115;
  const __CFString *v116;
  __CFString *v117;
  __CFString *v118;
  __CFString *v119;
  void *v120;
  __CFString *v121;
  void *v122;
  __CFString *obj;
  id v124;
  id v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[128];
  uint8_t v139[128];
  uint8_t buf[4];
  const char *v141;
  __int16 v142;
  const __CFString *v143;
  __int16 v144;
  const __CFString *v145;
  __int16 v146;
  const __CFString *v147;
  __int16 v148;
  const __CFString *v149;
  _BYTE v150[128];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  if (!self->_isInitiator)
  {
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v55 = v120;
    v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v69, (uint64_t)&v130, v70, v139, 16);
    if (v73)
    {
      v75 = *(_QWORD *)v131;
      do
      {
        for (i = 0; i != v73; ++i)
        {
          if (*(_QWORD *)v131 != v75)
            objc_enumerationMutation(v55);
          v77 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * i);
          if (objc_msgSend_recvSKEData(v77, v71, v72, v74) && objc_msgSend_state(v77, v71, v72, v74) == 3)
            objc_msgSend_addObject_(v122, v71, (uint64_t)v77, v74);
        }
        v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v71, (uint64_t)&v130, v74, v139, 16);
      }
      while (v73);
    }
    goto LABEL_63;
  }
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  obj = v120;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v134, v9, v150, 16);
  if (!v12)
  {
    v55 = obj;
    goto LABEL_63;
  }
  v121 = 0;
  v124 = *(id *)v135;
  v13 = 136316162;
LABEL_4:
  v14 = 0;
  while (1)
  {
    if (*(id *)v135 != v124)
      objc_enumerationMutation(obj);
    v15 = *(__CFString **)(*((_QWORD *)&v134 + 1) + 8 * v14);
    v16 = objc_msgSend_state(v15, v10, v11, *(double *)&v13);
    OSLogHandleForTransportCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_isAcceptedRelaySession(v15, v18, v19, v20))
        v24 = CFSTR("YES");
      else
        v24 = CFSTR("NO");
      v25 = objc_msgSend_pendingRealloc(v15, v21, v22, v23);
      v29 = objc_msgSend_sentSKEData(v15, v26, v27, v28);
      *(_DWORD *)buf = 136316162;
      if (v25)
        v30 = CFSTR("YES");
      else
        v30 = CFSTR("NO");
      v141 = "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]";
      if (v29)
        v31 = CFSTR("YES");
      else
        v31 = CFSTR("NO");
      v142 = 2112;
      v143 = v15;
      v144 = 2112;
      v145 = v24;
      v146 = 2112;
      v147 = v30;
      v148 = 2112;
      v149 = v31;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@", buf, 0x34u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v38 = objc_msgSend_isAcceptedRelaySession(v15, v32, v33, v34) ? CFSTR("YES") : CFSTR("NO");
      v42 = objc_msgSend_pendingRealloc(v15, v35, v36, v37) ? CFSTR("YES") : CFSTR("NO");
      v43 = objc_msgSend_sentSKEData(v15, v39, v40, v41) ? CFSTR("YES") : CFSTR("NO");
      v118 = v42;
      v119 = v43;
      v116 = v15;
      v117 = v38;
      v115 = "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]";
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@"));
      if (_IDSShouldLog())
      {
        if (objc_msgSend_isAcceptedRelaySession(v15, v32, v33, v34, "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]", v15, v38, v42, v119))v47 = CFSTR("YES");
        else
          v47 = CFSTR("NO");
        if (objc_msgSend_pendingRealloc(v15, v44, v45, v46))
          v51 = CFSTR("YES");
        else
          v51 = CFSTR("NO");
        if (objc_msgSend_sentSKEData(v15, v48, v49, v50))
          v52 = CFSTR("YES");
        else
          v52 = CFSTR("NO");
        v118 = (__CFString *)v51;
        v119 = (__CFString *)v52;
        v116 = v15;
        v117 = (__CFString *)v47;
        v115 = "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]";
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@"));
      }
    }
    if (objc_msgSend_isAcceptedRelaySession(v15, v32, v33, v34, v115, v116, v117, v118, v119)
      && (objc_msgSend_pendingRealloc(v15, v10, v11, *(double *)&v13) & 1) == 0)
    {
      v53 = objc_msgSend_sentSKEData(v15, v10, v11, *(double *)&v13);
      v54 = (unint64_t)(v16 - 5) < 0xFFFFFFFFFFFFFFFELL ? 1 : v53;
      if ((v54 & 1) == 0)
      {
        v55 = v15;

        objc_msgSend_local(v55, v56, v57, v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v59, v60, v61, v62);

        v121 = v55;
        if (!isCellularStunCandidate)
          break;
      }
    }
    if (v12 == ++v14)
    {
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v134, *(double *)&v13, v150, 16);
      v55 = v121;
      if (v12)
        goto LABEL_4;
      break;
    }
  }

  if (v55)
  {
    objc_msgSend_setSentSKEData_(v55, v64, 1, v66);
    objc_msgSend_addObject_(v122, v67, (uint64_t)v55, v68);
LABEL_63:

  }
  if (objc_msgSend_count(v122, v64, v65, v66))
  {
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = v122;
    v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v78, (uint64_t)&v126, v79, v138, 16);
    if (v80)
    {
      v81 = *(_QWORD *)v127;
      do
      {
        for (j = 0; j != v80; ++j)
        {
          if (*(_QWORD *)v127 != v81)
            objc_enumerationMutation(v125);
          v83 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * j);
          OSLogHandleForTransportCategory();
          v84 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v83, v85, v86, v87);
            v88 = (char *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v141 = v88;
            _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "_sendSKEDataToSucceededCandidatePairs: send SKE data using %@.", buf, 0xCu);

          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v83, v89, v90, v91);
              v115 = (char *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_sendSKEDataToSucceededCandidatePairs: send SKE data using %@."));

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v83, v92, v93, v94, v115);
                v115 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_sendSKEDataToSucceededCandidatePairs: send SKE data using %@."));

              }
            }
          }
          v95 = ids_monotonic_time() - self->_skeStartTime;
          OSLogHandleForTransportCategory();
          v96 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            v97 = CFSTR("YES");
            if (!self->_isInitiator)
              v97 = CFSTR("NO");
            *(_DWORD *)buf = 134218242;
            v141 = *(const char **)&v95;
            v142 = 2112;
            v143 = v97;
            _os_log_impl(&dword_19B949000, v96, OS_LOG_TYPE_DEFAULT, "_sendSKEDataToSucceededCandidatePairs: send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
          {
            v101 = CFSTR("YES");
            if (!self->_isInitiator)
              v101 = CFSTR("NO");
            v116 = v101;
            v115 = *(char **)&v95;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_sendSKEDataToSucceededCandidatePairs: send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@)."));
            if (_IDSShouldLog())
            {
              v102 = CFSTR("YES");
              if (!self->_isInitiator)
                v102 = CFSTR("NO");
              v116 = v102;
              v115 = *(char **)&v95;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_sendSKEDataToSucceededCandidatePairs: send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@)."));
            }
          }
          if (self->_remoteGlobalLinkVersion)
          {
            objc_msgSend_candidatePairToken(v83, v98, v99, v100);
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v104, 1, v105, 0, 0, v103);

          }
          else
          {
            v108 = !self->_isInitiator;
            if (self->_isInitiator)
              v109 = 1;
            else
              v109 = 32769;
            objc_msgSend_candidatePairToken(v83, v98, v99, v100, v115, v116);
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v111, v109, v112, 0, 0, v110);

            if (v108)
              objc_msgSend__notifyQRSessionConnected_(self, v106, (uint64_t)v83, v107);
          }
        }
        v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v106, (uint64_t)&v126, v107, v138, 16);
      }
      while (v80);
    }

  }
  else
  {
    OSLogHandleForTransportCategory();
    v113 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_isInitiator)
        v114 = CFSTR("YES");
      else
        v114 = CFSTR("NO");
      *(_DWORD *)buf = 138412290;
      v141 = (const char *)v114;
      _os_log_impl(&dword_19B949000, v113, OS_LOG_TYPE_DEFAULT, "failed to get candidate pair to send SKE data (isInitiator:%@).", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get candidate pair to send SKE data (isInitiator:%@)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get candidate pair to send SKE data (isInitiator:%@)."));
      }
    }
  }

}

- (void)_requestNonUDPRelayAllocation:(int64_t)a3 relaySessionID:(id)a4
{
  id v6;
  void *v7;
  _BOOL4 shouldFallbackToTCPFirst;
  int v9;
  int v10;
  int v11;
  _QWORD v12[5];
  id v13;
  int64_t v14;

  v6 = a4;
  v7 = v6;
  if ((unint64_t)(a3 - 5) >= 0xFFFFFFFFFFFFFFFELL)
  {
    shouldFallbackToTCPFirst = self->_shouldFallbackToTCPFirst;
    if (a3 == 3)
      v9 = 3;
    else
      v9 = 5;
    if (a3 == 4)
      v10 = 3;
    else
      v10 = 5;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_19B9F4A28;
    v12[3] = &unk_1E3C1F7D0;
    if (shouldFallbackToTCPFirst)
      v11 = v9;
    else
      v11 = v10;
    v12[4] = self;
    v14 = a3;
    v13 = v6;
    IDSTransportThreadAddBlockAfter(v12, (double)v11);

  }
}

- (void)setAcceptedRelaySession:(id)a3 options:(id)a4
{
  NSData *v7;
  NSString **p_acceptedRelaySessionID;
  NSString *acceptedRelaySessionID;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void *Value;
  int v20;
  int v21;
  NSObject *v22;
  double v23;
  NSMutableDictionary *tokenToCandidatePairs;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  id v30;
  const char *v31;
  double v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *v41;
  const char *v42;
  double v43;
  int isEqualToString;
  const char *v45;
  uint64_t v46;
  double v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  NSData *v56;
  char *v57;
  const char *v58;
  double v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  IDSGlobalLink *v63;
  id v64;
  const char *v65;
  double v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  const char *v75;
  double v76;
  int v77;
  const char *v78;
  double v79;
  const char *v80;
  uint64_t v81;
  double v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  double v86;
  NSObject *v87;
  const char *v88;
  uint64_t v89;
  double v90;
  NSData *v91;
  char *v92;
  void *v93;
  __CFArray *nonAcceptedQRSessions;
  NSMutableArray *v95;
  NSMutableArray *v96;
  NSObject *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  NSData *v101;
  NSObject *v102;
  NSData *skeData;
  const char *v104;
  uint64_t v105;
  double v106;
  const char *v107;
  double v108;
  NSData *v109;
  void *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  const __CFDictionary *theDict;
  IDSGlobalLink *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[128];
  uint8_t v125[128];
  uint8_t buf[4];
  NSData *v127;
  __int16 v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v7 = (NSData *)a3;
  theDict = (const __CFDictionary *)a4;
  if (self->_isInitiator)
  {
    if (v7)
    {
      p_acceptedRelaySessionID = &self->_acceptedRelaySessionID;
      v115 = self;
      acceptedRelaySessionID = self->_acceptedRelaySessionID;
      objc_storeStrong((id *)p_acceptedRelaySessionID, a3);
      OSLogHandleForTransportCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v14 = objc_msgSend_count(v115->_tokenToCandidatePairs, v11, v12, v13);
        *(_DWORD *)buf = 138412546;
        v127 = v7;
        v128 = 2048;
        v129 = v14;
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "receive accepted relay-session-id %@, _tokenToCandidatePairs count = %lu", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v109 = v7;
          v111 = objc_msgSend_count(v115->_tokenToCandidatePairs, v15, v16, v17);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive accepted relay-session-id %@, _tokenToCandidatePairs count = %lu"));
          if (_IDSShouldLog())
          {
            v18 = objc_msgSend_count(v115->_tokenToCandidatePairs, v15, v16, v17, v7, v111);
            v109 = v7;
            v111 = v18;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive accepted relay-session-id %@, _tokenToCandidatePairs count = %lu"));
          }
        }
      }
      Value = 0;
      if (theDict)
      {
        v15 = CFSTR("gl-option-use-secure-control-message");
        if (CFSTR("gl-option-use-secure-control-message"))
          Value = (void *)CFDictionaryGetValue(theDict, CFSTR("gl-option-use-secure-control-message"));
      }
      v20 = objc_msgSend_BOOLValue(Value, v15, v16, v17, v109, v111);
      if (v115->_useSecureControlMessage)
        v21 = 0;
      else
        v21 = v20;
      if (v21 == 1)
      {
        v115->_useSecureControlMessage = 1;
        OSLogHandleForTransportCategory();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "enable secure control message for Initiator.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("enable secure control message for Initiator."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("enable secure control message for Initiator."));
          }
        }
      }
      v23 = ids_monotonic_time();
      tokenToCandidatePairs = v115->_tokenToCandidatePairs;
      v115->_skeStartTime = v23;
      objc_msgSend_allValues(tokenToCandidatePairs, v25, v26, v23);
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_count(v115->_tokenToCandidatePairs, v27, v28, v29))
      {
        OSLogHandleForTransportCategory();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "No valid candiate pair, _isSessionAccepted yes", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("No valid candiate pair, _isSessionAccepted yes"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("No valid candiate pair, _isSessionAccepted yes"));
          }
        }
        v33 = 0;
        v63 = v115;
        v115->_isSessionAcceptedWithNoCandidatePair = 1;
LABEL_89:
        if (v63->_skeData)
        {
          OSLogHandleForTransportCategory();
          v102 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
            skeData = v63->_skeData;
            *(_DWORD *)buf = 134217984;
            v127 = skeData;
            _os_log_impl(&dword_19B949000, v102, OS_LOG_TYPE_DEFAULT, "found saved SKE data %p, send it immediately.", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v110 = v115->_skeData;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found saved SKE data %p, send it immediately."));
              if (_IDSShouldLog())
              {
                v110 = v115->_skeData;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found saved SKE data %p, send it immediately."));
              }
            }
          }
          objc_msgSend__sendSKEDataWithSelectedCandidatePair(v115, v104, v105, v106, v110);
          v63 = v115;
        }
        if (v33 == 2)
        {
          objc_msgSend__requestNonUDPRelayAllocation_relaySessionID_(v63, v58, 3, v59, v7);
          objc_msgSend__requestNonUDPRelayAllocation_relaySessionID_(v115, v107, 4, v108, v7);
        }

        goto LABEL_100;
      }
      if (acceptedRelaySessionID)
      {
        v118 = 0uLL;
        v119 = 0uLL;
        v116 = 0uLL;
        v117 = 0uLL;
        v30 = v113;
        v33 = 0;
        v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v116, v32, v124, 16);
        if (v36)
        {
          v37 = *(_QWORD *)v117;
          v38 = 138412546;
          do
          {
            for (i = 0; i != v36; ++i)
            {
              if (*(_QWORD *)v117 != v37)
                objc_enumerationMutation(v30);
              v40 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * i);
              if (objc_msgSend_isRelayStunCandidatePair(v40, v34, v35, *(double *)&v38, v110, v112))
              {
                objc_msgSend_sessionID(v40, v34, v35, *(double *)&v38);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                isEqualToString = objc_msgSend_isEqualToString_(v41, v42, (uint64_t)v7, v43);

                if (isEqualToString)
                {
                  objc_msgSend_setIsAcceptedRelaySession_(v40, v34, 1, *(double *)&v38);
                  objc_msgSend_local(v40, v45, v46, v47);
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  v33 = objc_msgSend_transport(v48, v49, v50, v51);

                  OSLogHandleForTransportCategory();
                  v52 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_candidatePairToken(v40, v53, v54, v55);
                    v56 = (NSData *)objc_claimAutoreleasedReturnValue();
                    v57 = (&_IDSStunTransportStrings)[v33];
                    *(_DWORD *)buf = 138412546;
                    v127 = v56;
                    v128 = 2080;
                    v129 = (uint64_t)v57;
                    _os_log_impl(&dword_19B949000, v52, OS_LOG_TYPE_DEFAULT, "new relay candidate pair %@ is accepted, transport: %s.", buf, 0x16u);

                  }
                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      objc_msgSend_candidatePairToken(v40, v34, v35, *(double *)&v38);
                      v110 = (void *)objc_claimAutoreleasedReturnValue();
                      v112 = (&_IDSStunTransportStrings)[v33];
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("new relay candidate pair %@ is accepted, transport: %s."));

                      if (_IDSShouldLog())
                      {
                        objc_msgSend_candidatePairToken(v40, v34, v35, *(double *)&v38, v110, v112);
                        v110 = (void *)objc_claimAutoreleasedReturnValue();
                        v112 = (&_IDSStunTransportStrings)[v33];
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("new relay candidate pair %@ is accepted, transport: %s."));

                      }
                    }
                  }
                }
              }
            }
            v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v34, (uint64_t)&v116, *(double *)&v38, v124, 16);
          }
          while (v36);
        }

LABEL_88:
        v63 = v115;
        goto LABEL_89;
      }
      v122 = 0uLL;
      v123 = 0uLL;
      v120 = 0uLL;
      v121 = 0uLL;
      v64 = v113;
      v33 = 0;
      v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v65, (uint64_t)&v120, v66, v125, 16);
      if (!v69)
        goto LABEL_87;
      v70 = *(_QWORD *)v121;
      v71 = 138412290;
LABEL_61:
      v72 = 0;
      while (1)
      {
        if (*(_QWORD *)v121 != v70)
          objc_enumerationMutation(v64);
        v73 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * v72);
        if (!objc_msgSend_isRelayStunCandidatePair(v73, v67, v68, *(double *)&v71, v110, v112))
          goto LABEL_85;
        objc_msgSend_sessionID(v73, v67, v68, *(double *)&v71);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = objc_msgSend_isEqualToString_(v74, v75, (uint64_t)v7, v76);

        if (!v77)
          break;
        objc_msgSend_setIsAcceptedRelaySession_(v73, v78, 1, v79);
        objc_msgSend_local(v73, v80, v81, v82);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend_transport(v83, v84, v85, v86);

        OSLogHandleForTransportCategory();
        v87 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_candidatePairToken(v73, v88, v89, v90);
          v91 = (NSData *)objc_claimAutoreleasedReturnValue();
          v92 = (&_IDSStunTransportStrings)[v33];
          *(_DWORD *)buf = 138412546;
          v127 = v91;
          v128 = 2080;
          v129 = (uint64_t)v92;
          _os_log_impl(&dword_19B949000, v87, OS_LOG_TYPE_DEFAULT, "relay candidate pair %@ is accepted, transport: %s.", buf, 0x16u);

        }
        if (!os_log_shim_legacy_logging_enabled())
          goto LABEL_85;
        if (!_IDSShouldLogTransport())
          goto LABEL_85;
        objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = (&_IDSStunTransportStrings)[v33];
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("relay candidate pair %@ is accepted, transport: %s."));

        if (!_IDSShouldLog())
          goto LABEL_85;
        objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71, v110, v112);
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        v110 = v93;
        v112 = (&_IDSStunTransportStrings)[v33];
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("relay candidate pair %@ is accepted, transport: %s."));
LABEL_84:

LABEL_85:
        if (v69 == ++v72)
        {
          v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v67, (uint64_t)&v120, *(double *)&v71, v125, 16);
          if (!v69)
          {
LABEL_87:

            goto LABEL_88;
          }
          goto LABEL_61;
        }
      }
      nonAcceptedQRSessions = (__CFArray *)v115->_nonAcceptedQRSessions;
      if (nonAcceptedQRSessions)
      {
        if (!v73)
          goto LABEL_78;
      }
      else
      {
        v95 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v96 = v115->_nonAcceptedQRSessions;
        v115->_nonAcceptedQRSessions = v95;

        nonAcceptedQRSessions = (__CFArray *)v115->_nonAcceptedQRSessions;
        if (!v73)
        {
LABEL_78:
          OSLogHandleForTransportCategory();
          v97 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v73, v98, v99, v100);
            v101 = (NSData *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v127 = v101;
            _os_log_impl(&dword_19B949000, v97, OS_LOG_TYPE_DEFAULT, "relay candidate pair %@ is not accepted, added to remove list.", buf, 0xCu);

          }
          if (!os_log_shim_legacy_logging_enabled())
            goto LABEL_85;
          if (!_IDSShouldLogTransport())
            goto LABEL_85;
          objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71);
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("relay candidate pair %@ is not accepted, added to remove list."));

          if (!_IDSShouldLog())
            goto LABEL_85;
          objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71, v110);
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          v110 = v93;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("relay candidate pair %@ is not accepted, added to remove list."));
          goto LABEL_84;
        }
      }
      if (nonAcceptedQRSessions)
        CFArrayAppendValue(nonAcceptedQRSessions, v73);
      goto LABEL_78;
    }
    OSLogHandleForTransportCategory();
    v61 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v61, OS_LOG_TYPE_DEFAULT, "setAcceptedRelaySession failed due to invalid relay-session-id.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("setAcceptedRelaySession failed due to invalid relay-session-id."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("setAcceptedRelaySession failed due to invalid relay-session-id."));
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v60 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "setAcceptedRelaySession failed, not Initiator.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("setAcceptedRelaySession failed, not Initiator."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("setAcceptedRelaySession failed, not Initiator."));
      }
    }
  }
LABEL_100:

}

- (void)setServerDesiredMaterialsForSession:(id)a3 materials:(id)a4 signer:(id)a5
{
  double v5;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;

  serverMaterialExchangeController = self->_serverMaterialExchangeController;
  if (serverMaterialExchangeController)
  {
    self->_hasSetServerDesiredMaterials = 1;
    objc_msgSend_setDesiredMaterialsForSession_materials_signer_(serverMaterialExchangeController, a2, (uint64_t)a3, v5, a4, a5);
  }
}

- (void)requestMaterialsForSession:(id)a3 participantIDs:(id)a4 materialType:(int)a5
{
  id v8;
  id v9;
  int v10;
  const char *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  _QWORD v20[5];
  id v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = IMGetDomainBoolForKey();
  objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: ignoring because DisableQUICMaterialRecovery is set", buf, 2u);
    }

  }
  else
  {
    if (v15)
    {
      *(_DWORD *)buf = 67109378;
      v24 = a5;
      v25 = 2112;
      v26 = v8;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: Trying to request material of type %d over active QUIC link for IDSSessionID: %@", buf, 0x12u);
    }

    if (self->_serverMaterialExchangeController || self->_quicMaterialExchangeProvider)
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = sub_19B9F608C;
      v20[3] = &unk_1E3C20068;
      v20[4] = self;
      v21 = v9;
      v22 = a5;
      IDSTransportThreadAddBlock(v20);

    }
    else
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v18);
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: SME disabled", buf, 2u);
      }

    }
  }

}

- (BOOL)qrMaterialExchangePutMaterial:(id)a3
{
  const char *v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  NSString *idsSessionID;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  double v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  IDSQRProtoMessage *v29;
  const char *v30;
  double v31;
  void *v32;
  const char *v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  NSObject *v39;
  const char *v40;
  double v41;
  const char *v42;
  uint64_t v43;
  char v44;
  NSObject *v45;
  const char *v46;
  double v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  double v59;
  id v60;
  const char *v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  NSString *v67;
  id v68;
  IDSQRProtoPutMaterialMaterials *v69;
  const char *v70;
  double v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  const char *v77;
  double v78;
  const char *v79;
  uint64_t v80;
  double v81;
  NSObject *v82;
  const char *v83;
  double v84;
  const char *v85;
  double v86;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  NSString *v105;
  _BYTE v106[128];
  _BYTE v107[128];
  const __CFString *v108;
  id v109;
  uint8_t v110[128];
  uint8_t buf[4];
  id v112;
  __int16 v113;
  NSString *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v92 = a3;
  objc_msgSend_GlobalLink(IDSFoundationLog, v4, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    idsSessionID = self->_idsSessionID;
    *(_DWORD *)buf = 138412546;
    v112 = v92;
    v113 = 2112;
    v114 = idsSessionID;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: Trying to send material %@ over active QUIC link for IDSSessionID: %@", buf, 0x16u);
  }

  if (!self->_linkIDForPlugin)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v9, v10, v11);
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: no active QUIC link", buf, 2u);
    }
    goto LABEL_46;
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v9, v10, 0.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v101, v14, v110, 16);
  if (!v15)
  {

    goto LABEL_25;
  }
  v18 = v15;
  v19 = 0;
  v20 = *(_QWORD *)v102;
  v21 = 138412290;
  do
  {
    for (i = 0; i != v18; ++i)
    {
      if (*(_QWORD *)v102 != v20)
        objc_enumerationMutation(v12);
      v23 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * i);
      v24 = objc_msgSend_state(v23, v16, v17, *(double *)&v21);
      if (objc_msgSend_isActualRelayStunCandidatePair(v23, v25, v26, v27))
      {
        if (objc_msgSend_isQUIC(v23, v16, v17, *(double *)&v21) && v24 == 4)
        {
          v29 = [IDSQRProtoMessage alloc];
          v108 = CFSTR("gl-option-materials-key");
          v109 = v92;
          objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v30, (uint64_t)&v109, v31, &v108, 1);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = (void *)objc_msgSend_initWithType_candidatePair_options_(v29, v33, 24, v34, v23, v32);

          objc_msgSend_GlobalLink(IDSFoundationLog, v36, v37, v38);
          v39 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v112 = v23;
            _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: send quic message on %@", buf, 0xCu);
          }

          objc_msgSend_sendQUICPutMaterialRequest_(v23, v40, (uint64_t)v35, v41);
          v19 = 1;
        }
      }
    }
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v16, (uint64_t)&v101, *(double *)&v21, v110, 16);
  }
  while (v18);

  if ((v19 & 1) == 0)
  {
LABEL_25:
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v42, v43, 0.0);
    v45 = objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v46, (uint64_t)&v97, v47, v107, 16);
    if (v48)
    {
      v51 = v48;
      v44 = 0;
      v52 = *(_QWORD *)v98;
      v53 = 138412546;
      v88 = *(_QWORD *)v98;
      v89 = v45;
      do
      {
        v54 = 0;
        v90 = v51;
        do
        {
          if (*(_QWORD *)v98 != v52)
            objc_enumerationMutation(v45);
          v55 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * v54);
          v56 = objc_msgSend_state(v55, v49, v50, *(double *)&v53);
          if (objc_msgSend_isActualRelayStunCandidatePair(v55, v57, v58, v59)
            && (objc_msgSend_isQUIC(v55, v49, v50, *(double *)&v53) & 1) == 0
            && v56 == 4)
          {
            v91 = v54;
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            v60 = v92;
            v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v61, (uint64_t)&v93, v62, v106, 16);
            if (v63)
            {
              v64 = v63;
              v65 = *(_QWORD *)v94;
              do
              {
                for (j = 0; j != v64; ++j)
                {
                  if (*(_QWORD *)v94 != v65)
                    objc_enumerationMutation(v60);
                  v67 = *(NSString **)(*((_QWORD *)&v93 + 1) + 8 * j);
                  v68 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                  v69 = objc_alloc_init(IDSQRProtoPutMaterialMaterials);
                  v105 = v67;
                  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v70, (uint64_t)&v105, v71, 1);
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  v76 = (void *)objc_msgSend_mutableCopy(v72, v73, v74, v75);
                  objc_msgSend_setMaterials_(v69, v77, (uint64_t)v76, v78);

                  objc_msgSend_GlobalLink(IDSFoundationLog, v79, v80, v81);
                  v82 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    v112 = v55;
                    v113 = 2112;
                    v114 = v67;
                    _os_log_impl(&dword_19B949000, v82, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: send stun message on %@ for key material %@", buf, 0x16u);
                  }

                  objc_msgSend_sendPutMaterialRequest_options_(v55, v83, 0, v84, v68);
                }
                v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v85, (uint64_t)&v93, v86, v106, 16);
              }
              while (v64);
            }

            v44 = 1;
            v52 = v88;
            v45 = v89;
            v51 = v90;
            v54 = v91;
          }
          ++v54;
        }
        while (v54 != v51);
        v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v49, (uint64_t)&v97, *(double *)&v53, v107, 16);
      }
      while (v51);
      goto LABEL_47;
    }
LABEL_46:
    v44 = 0;
LABEL_47:

    goto LABEL_48;
  }
  v44 = 1;
LABEL_48:

  return v44 & 1;
}

- (void)qrMaterialExchangePutMaterial:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19B9F6950;
  v10[3] = &unk_1E3C20270;
  v11 = v6;
  v12 = v7;
  v10[4] = self;
  v8 = v6;
  v9 = v7;
  IDSTransportThreadAddBlock(v10);

}

- (void)setIDSContextBlob:(id)a3
{
  objc_storeStrong((id *)&self->_idsContextBlob, a3);
}

- (id)_getLocalAttribute:(id)a3
{
  id v4;
  __CFDictionary *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  int v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  const char *v32;
  double v33;
  id v34;
  NSObject *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  double v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  const char *v56;
  double v57;
  unsigned __int16 ExpensiveLinkFlags_candidatePair;
  const char *v59;
  uint64_t v60;
  double v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  const char *v67;
  double v68;
  int isInterfaceConstrainedWithInterfaceIndex;
  const char *v70;
  uint64_t v71;
  double v72;
  unsigned __int16 v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  const char *v79;
  double v80;
  int isInterfaceDelegatedWithInterfaceIndex;
  void *v82;
  const char *v83;
  uint64_t v84;
  double v85;
  const char *v86;
  uint64_t v87;
  double v88;
  int v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  double v93;
  int isCLAT46;
  unsigned __int16 v95;
  unsigned __int16 v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  const char *v101;
  uint64_t v102;
  double v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  double v111;
  BOOL v112;
  char v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  double v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  double v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  double v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  const char *v131;
  double v132;
  const char *v133;
  double v134;
  void *v135;
  __CFDictionary *v136;
  NSObject *v137;
  id v138;
  const char *v139;
  double v140;
  void *v141;
  NSObject *v142;
  id v143;
  const char *v144;
  double v145;
  void *v146;
  NSObject *v147;
  id v148;
  const char *v149;
  double v150;
  void *v151;
  uint64_t v152;
  NSObject *v153;
  id v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  const char *v160;
  double v161;
  void *v162;
  NSObject *v163;
  id v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  const char *v170;
  double v171;
  void *v172;
  NSObject *v173;
  id v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  const char *v180;
  double v181;
  void *v182;
  NSObject *v183;
  id v184;
  const char *v185;
  double v186;
  void *v187;
  NSObject *v188;
  id v189;
  void *v190;
  NSObject *v191;
  id v192;
  id v193;
  NSObject *v194;
  id v195;
  id v196;
  IDSGlobalLink *v197;
  NSObject *v198;
  id v199;
  const char *v200;
  uint64_t v201;
  double v202;
  void *v203;
  NSObject *v204;
  id v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  double v209;
  uint64_t IsDegraded;
  const char *v211;
  double v212;
  void *v213;
  NSObject *v214;
  id v215;
  const char *v216;
  double v217;
  void *v218;
  NSObject *v219;
  id v220;
  id v221;
  NSObject *v222;
  id v223;
  unsigned int v224;
  const char *v225;
  uint64_t v226;
  double v227;
  NSObject *v228;
  const char *v229;
  uint64_t v230;
  double v231;
  const char *v232;
  uint64_t v233;
  double v234;
  unint64_t clientUniquePID;
  const char *v236;
  uint64_t v237;
  double v238;
  unsigned int shouldUseVRTLE;
  const char *v240;
  uint64_t v241;
  double v242;
  void *v243;
  int v244;
  const char *v245;
  uint64_t v246;
  double v247;
  IDSNWLink *nwLink;
  void *v249;
  const char *v250;
  uint64_t v251;
  double v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  double v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  double v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  double v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  double v268;
  uint64_t isRelayStunCandidatePair;
  const char *v270;
  uint64_t v271;
  double v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  double v276;
  const char *v277;
  double v278;
  const char *v279;
  uint64_t v280;
  double v281;
  const char *v282;
  uint64_t v283;
  double v284;
  IDSNWLink *v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  double v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  double v293;
  void *v294;
  const char *v295;
  uint64_t v296;
  double v297;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  double v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  double v305;
  void *v306;
  const char *v307;
  uint64_t v308;
  double v309;
  const char *v310;
  double v311;
  IDSNWLink *v312;
  const char *v313;
  uint64_t v314;
  double v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  double v319;
  const char *v320;
  uint64_t v321;
  double v322;
  uint64_t v323;
  const char *v324;
  uint64_t v325;
  double v326;
  const char *v327;
  uint64_t v328;
  double v329;
  const char *v330;
  uint64_t v331;
  double v332;
  const char *v333;
  double v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  double v338;
  const char *v339;
  uint64_t v340;
  double v341;
  IDSNWLink *v342;
  void *v343;
  const char *v344;
  uint64_t v345;
  double v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  double v350;
  void *v351;
  const char *v352;
  uint64_t v353;
  double v354;
  uint64_t v355;
  const char *v356;
  uint64_t v357;
  double v358;
  void *v359;
  const char *v360;
  double v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  double v365;
  NSObject *v366;
  const char *v367;
  uint64_t v368;
  double v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  double v373;
  void *v374;
  NSObject *v375;
  id v376;
  unsigned int v377;
  char isP2P;
  const char *v379;
  uint64_t v380;
  double v381;
  void *v382;
  const char *v383;
  uint64_t v384;
  void *v385;
  double v386;
  void *v387;
  const char *v388;
  double v389;
  void *v390;
  const char *v391;
  double v392;
  NSObject *v393;
  const char *v394;
  uint64_t v395;
  double v396;
  int v397;
  void *v398;
  const char *v399;
  uint64_t v400;
  double v401;
  uint64_t v402;
  const char *v403;
  double v404;
  void *v405;
  NSObject *v406;
  id v407;
  const char *v408;
  uint64_t v409;
  double v410;
  void *v411;
  NSObject *v412;
  id v413;
  const char *v414;
  uint64_t v415;
  double v416;
  void *v417;
  NSObject *v418;
  id v419;
  id v420;
  NSObject *v421;
  id v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  double v426;
  void *v427;
  NSDictionary *v428;
  NSObject *v429;
  id v430;
  const char *v431;
  double v432;
  void *v433;
  NSObject *v434;
  id v435;
  void *v436;
  uint64_t LinkOverhead;
  const char *v438;
  double v439;
  void *v440;
  NSObject *v441;
  id v442;
  const char *v443;
  uint64_t v444;
  double v445;
  void *v446;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  id v452;
  id v453;
  char v454;
  void *v455;
  id v456;
  unsigned int v457;
  void *v458;
  unsigned int isVirtualRelayStunCandidatePair;
  void *v460;
  unsigned int v461;
  unsigned int v462;
  __CFDictionary *theDict;
  IDSGlobalLink *v464;
  uint8_t buf[4];
  _BYTE v466[18];
  __int16 v467;
  int v468;
  char __str[16];
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  uint64_t v477;

  v477 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v4, v6, v7, v8);
  objc_msgSend_local(v4, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_transport(v12, v13, v14, v15);

  if (v16 == 2)
  {
    v20 = 4;
  }
  else
  {
    objc_msgSend_local(v4, v17, v18, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_transport(v21, v22, v23, v24);

    if (v25 == 3)
      v20 = 896;
    else
      v20 = 0;
  }
  objc_msgSend_local(v4, v17, v18, v19);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend_address(v26, v27, v28, v29);

  *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v475 = v31;
  v476 = v31;
  v473 = v31;
  v474 = v31;
  v471 = v31;
  v472 = v31;
  *(_OWORD *)__str = v31;
  v470 = v31;
  SAToIPPortString(__str, 0x80uLL, v30);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v32, (uint64_t)CFSTR("%s"), v33, __str);
  v34 = (id)objc_claimAutoreleasedReturnValue();
  if (v34)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-local-address-key"), v34);
  }
  else
  {
    v35 = MEMORY[0x1E0C81028];
    v36 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      sub_19BAF34A4();

  }
  v40 = *(unsigned __int8 *)(v30 + 1);
  v41 = v20 | 1;
  if (v40 != 2)
    v41 = v20;
  if (v40 == 30)
    v42 = 2;
  else
    v42 = v40 == 2;
  if (v40 == 30)
    v43 = v20 | 2;
  else
    v43 = v41;
  v462 = v43;
  if (objc_msgSend_isRelayStunCandidatePair(v4, v37, v38, v39))
  {
    objc_msgSend_local(v4, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend_transport(v47, v48, v49, v50);

  }
  else
  {
    v51 = 1;
  }
  objc_msgSend_local(v4, v44, v45, v46);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v461 = objc_msgSend_mtu(v52, v53, v54, v55);

  ExpensiveLinkFlags_candidatePair = objc_msgSend__getExpensiveLinkFlags_candidatePair_(self, v56, self->_islocalCellAttributeInexpensive, v57, v4);
  objc_msgSend_local(v4, v59, v60, v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend_index(v62, v63, v64, v65);
  v464 = self;
  isInterfaceConstrainedWithInterfaceIndex = objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(self, v67, v66, v68);

  if (isInterfaceConstrainedWithInterfaceIndex)
    v73 = ExpensiveLinkFlags_candidatePair | 2;
  else
    v73 = ExpensiveLinkFlags_candidatePair;
  if (v464->_remoteDeviceVersion >= 2)
  {
    objc_msgSend_local(v4, v70, v71, v72);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = objc_msgSend_index(v74, v75, v76, v77);
    isInterfaceDelegatedWithInterfaceIndex = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(v464, v79, v78, v80);

    if (isInterfaceDelegatedWithInterfaceIndex)
      v73 |= 4u;
  }
  objc_msgSend_remote(v4, v70, v71, v72);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_linkFlags(v82, v83, v84, v85);

  v89 = *(unsigned __int8 *)(v30 + 1);
  if (v89 == 2)
  {
    objc_msgSend_local(v4, v86, v87, v88);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    isCLAT46 = objc_msgSend_isCLAT46(v90, v91, v92, v93);

    v89 = *(unsigned __int8 *)(v30 + 1);
  }
  else
  {
    isCLAT46 = 0;
  }
  theDict = v5;
  v95 = v73;
  if (v89 == 30)
  {
    if (objc_msgSend_isNAT64(v4, v86, v87, v88))
      v95 = v73 | 0x10;
    else
      v95 = v73;
  }
  if (isCLAT46)
    v96 = v73 | 8;
  else
    v96 = v95;
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v86, v87, v88);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  v457 = objc_msgSend_dataSoMaskBits(v97, v98, v99, v100);

  objc_msgSend_local(v4, v101, v102, v103);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  v108 = objc_msgSend_radioAccessTechnology(v104, v105, v106, v107);

  if ((_DWORD)v108)
    v112 = (_DWORD)v108 == 9;
  else
    v112 = 1;
  v113 = !v112;
  v454 = v113;
  v114 = objc_msgSend_relayProviderType(v4, v109, v110, v111);
  objc_msgSend_relaySessionToken(v4, v115, v116, v117);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_relaySessionKey(v4, v119, v120, v121);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(v4, v123, v124, v125);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v130 = objc_msgSend_index(v126, v127, v128, v129);
  objc_msgSend__interfaceNameForInterfaceIndex_(v464, v131, v130, v132);
  v455 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v133, v42, v134);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  if (v135)
  {
    v136 = theDict;
    CFDictionarySetValue(theDict, CFSTR("gl-attr-ipfamily"), v135);
  }
  else
  {
    v137 = MEMORY[0x1E0C81028];
    v138 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
      sub_19BAF3424();

    v136 = theDict;
  }

  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v139, v51, v140);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  if (v141)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-transport"), v141);
  }
  else
  {
    v142 = MEMORY[0x1E0C81028];
    v143 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
      sub_19BAF33A4();

  }
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v144, v108, v145);
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  if (v146)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-rat"), v146);
  }
  else
  {
    v147 = MEMORY[0x1E0C81028];
    v148 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
      sub_19BAF3324();

  }
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v149, v96, v150);
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  if (v151)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-link-flags"), v151);
    v152 = isVirtualRelayStunCandidatePair;
  }
  else
  {
    v153 = MEMORY[0x1E0C81028];
    v154 = MEMORY[0x1E0C81028];
    v152 = isVirtualRelayStunCandidatePair;
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      sub_19BAF32A4();

  }
  v155 = (void *)MEMORY[0x1E0CB37E8];
  v159 = objc_msgSend_delegatedLinkID(v4, v156, v157, v158);
  objc_msgSend_numberWithChar_(v155, v160, v159, v161);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  if (v162)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-delegated-link-id"), v162);
  }
  else
  {
    v163 = MEMORY[0x1E0C81028];
    v164 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
      sub_19BAF3224();

  }
  v165 = (void *)MEMORY[0x1E0CB37E8];
  v169 = objc_msgSend_relayLinkID(v4, v166, v167, v168);
  objc_msgSend_numberWithUnsignedShort_(v165, v170, v169, v171);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  if (v172)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-local-relay-link-id"), v172);
  }
  else
  {
    v173 = MEMORY[0x1E0C81028];
    v174 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
      sub_19BAF31A4();

  }
  v175 = (void *)MEMORY[0x1E0CB37E8];
  v179 = objc_msgSend_remoteRelayLinkID(v4, v176, v177, v178);
  objc_msgSend_numberWithUnsignedShort_(v175, v180, v179, v181);
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  if (v182)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-remote-relay-link-id"), v182);
  }
  else
  {
    v183 = MEMORY[0x1E0C81028];
    v184 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
      sub_19BAF3124();

  }
  if ((_DWORD)v108 && (_DWORD)v108 != 9)
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v185, v457, v186);
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    if (v187)
    {
      CFDictionarySetValue(v136, CFSTR("gl-attr-data-so-mask"), v187);
    }
    else
    {
      v188 = MEMORY[0x1E0C81028];
      v189 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
        sub_19BAF30A4();

    }
  }
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v185, v114, v186);
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  if (v190)
  {
    CFDictionarySetValue(v136, CFSTR("qr-server-provider"), v190);
  }
  else
  {
    v191 = MEMORY[0x1E0C81028];
    v192 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
      sub_19BAF3024();

  }
  v193 = v118;
  if (v193)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-relay-sessiontoken"), v193);
  }
  else
  {
    v194 = MEMORY[0x1E0C81028];
    v195 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
      sub_19BAF2FA4();

  }
  v196 = v122;
  if (v196)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-relay-sessionkey"), v196);
    v197 = v464;
  }
  else
  {
    v198 = MEMORY[0x1E0C81028];
    v199 = MEMORY[0x1E0C81028];
    v197 = v464;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
      sub_19BAF2F24();

  }
  objc_msgSend_sessionID(v4, v200, v201, v202);
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  if (v203)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-relay-sessionid"), v203);
  }
  else
  {
    v204 = MEMORY[0x1E0C81028];
    v205 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
      sub_19BAF2EA4();

  }
  v206 = (void *)MEMORY[0x1E0CB37E8];
  IsDegraded = objc_msgSend_serverIsDegraded(v4, v207, v208, v209);
  objc_msgSend_numberWithBool_(v206, v211, IsDegraded, v212);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  if (v213)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-relay-serverdegraded"), v213);
  }
  else
  {
    v214 = MEMORY[0x1E0C81028];
    v215 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
      sub_19BAF2E24();

  }
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v216, v152, v217);
  v218 = (void *)objc_claimAutoreleasedReturnValue();
  if (v218)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-is-virtual-link"), v218);
  }
  else
  {
    v219 = MEMORY[0x1E0C81028];
    v220 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
      sub_19BAF2DA4();

  }
  v221 = v455;
  if (v221)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-interface-name"), v221);
  }
  else
  {
    v222 = MEMORY[0x1E0C81028];
    v223 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
      sub_19BAF2D24();

  }
  v224 = v462;

  v458 = v196;
  if (v197->_QUICForQREnabled)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v225, v226, v227);
    v228 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT))
    {
      if ((_DWORD)v152)
        v152 = (uint64_t)CFSTR("YES");
      else
        v152 = (uint64_t)CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v466 = v4;
      *(_WORD *)&v466[8] = 2112;
      *(_QWORD *)&v466[10] = v152;
      LOBYTE(v152) = isVirtualRelayStunCandidatePair;
      v467 = 1024;
      v468 = objc_msgSend_delegatedLinkID(v4, v229, v230, v231);
      _os_log_impl(&dword_19B949000, v228, OS_LOG_TYPE_DEFAULT, "Setting up child connection for candidatepair %@ isVirtualRelayLink %@ delegatedLinkID %d", buf, 0x1Cu);
    }

    if ((v152 & 1) != 0 || v197->_disableDirectDatapath)
      clientUniquePID = 0;
    else
      clientUniquePID = v197->_clientUniquePID;
    v452 = v193;
    v453 = v34;
    v456 = v221;
    if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v232, v233, v234))
    {
      shouldUseVRTLE = objc_msgSend__shouldUseVRTLE(v197, v236, v237, v238);
    }
    else if (objc_msgSend_isRelayStunCandidatePair(v4, v236, v237, v238))
    {
      shouldUseVRTLE = objc_msgSend__shouldUseQRTLE(v197, v245, v246, v247);
    }
    else
    {
      shouldUseVRTLE = objc_msgSend__shouldUseP2PTLE(v197, v245, v246, v247);
    }
    v451 = shouldUseVRTLE;
    nwLink = v197->_nwLink;
    objc_msgSend_local(v4, v240, v241, v242);
    v249 = (void *)objc_claimAutoreleasedReturnValue();
    v253 = objc_msgSend_address(v249, v250, v251, v252);
    objc_msgSend_remote(v4, v254, v255, v256);
    v257 = (void *)objc_claimAutoreleasedReturnValue();
    v261 = objc_msgSend_external(v257, v258, v259, v260);
    objc_msgSend_sessionID(v4, v262, v263, v264);
    v265 = (void *)objc_claimAutoreleasedReturnValue();
    isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v4, v266, v267, v268);
    objc_msgSend_local(v4, v270, v271, v272);
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v448) = objc_msgSend_isCellularStunCandidate(v273, v274, v275, v276);
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v277, v253, v278, v261, clientUniquePID, v265, 0, isRelayStunCandidatePair, v448);
    v460 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend_isRelayStunCandidatePair(v4, v279, v280, v281) & 1) != 0
      || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v282, v283, v284))
    {
      v285 = v464->_nwLink;
      objc_msgSend_local(v4, v282, v283, v284);
      v286 = (void *)objc_claimAutoreleasedReturnValue();
      v290 = objc_msgSend_address(v286, v287, v288, v289);
      objc_msgSend_remote(v4, v291, v292, v293);
      v294 = (void *)objc_claimAutoreleasedReturnValue();
      v298 = objc_msgSend_external(v294, v295, v296, v297);
      objc_msgSend_sessionID(v4, v299, v300, v301);
      v302 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v4, v303, v304, v305);
      v306 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v449) = objc_msgSend_isCellularStunCandidate(v306, v307, v308, v309);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v285, v310, v290, v311, v298, clientUniquePID, v302, 7, 1, v449);
    }
    else
    {
      v312 = v464->_nwLink;
      objc_msgSend_local(v4, v282, v283, v284);
      v286 = (void *)objc_claimAutoreleasedReturnValue();
      v316 = objc_msgSend_address(v286, v313, v314, v315);
      objc_msgSend_remote(v4, v317, v318, v319);
      v294 = (void *)objc_claimAutoreleasedReturnValue();
      v323 = objc_msgSend_external(v294, v320, v321, v322);
      objc_msgSend_sessionID(v4, v324, v325, v326);
      v302 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v4, v327, v328, v329);
      v306 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v449) = objc_msgSend_isCellularStunCandidate(v306, v330, v331, v332);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v312, v333, v316, v334, v323, clientUniquePID, v302, 9, 0, v449);
    }
    v335 = (void *)objc_claimAutoreleasedReturnValue();

    v197 = v464;
    if (objc_msgSend_isRelayStunCandidatePair(v4, v336, v337, v338))
    {
      v342 = v464->_nwLink;
      objc_msgSend_local(v4, v339, v340, v341);
      v343 = (void *)objc_claimAutoreleasedReturnValue();
      v347 = objc_msgSend_address(v343, v344, v345, v346);
      objc_msgSend_remote(v4, v348, v349, v350);
      v351 = (void *)objc_claimAutoreleasedReturnValue();
      v355 = objc_msgSend_external(v351, v352, v353, v354);
      objc_msgSend_sessionID(v4, v356, v357, v358);
      v359 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v450) = v454;
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v342, v360, v347, v361, v355, 0, v359, 5, 1, v450);
      v362 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_GlobalLink(IDSFoundationLog, v363, v364, v365);
      v366 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v366, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_protocolStackDescription(v362, v367, v368, v369);
        v370 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v466 = v370;
        _os_log_impl(&dword_19B949000, v366, OS_LOG_TYPE_DEFAULT, "relay control connection has protocol stack: %@", buf, 0xCu);

      }
      objc_msgSend_protocolStackDescription(v362, v371, v372, v373);
      v374 = (void *)objc_claimAutoreleasedReturnValue();
      v197 = v464;
      if (v374)
      {
        CFDictionarySetValue(theDict, CFSTR("gl-relay-protocol-stack"), v374);
      }
      else
      {
        v375 = MEMORY[0x1E0C81028];
        v376 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(v375, OS_LOG_TYPE_ERROR))
          sub_19BAF2CA4();

      }
    }
    if (v335)
      v377 = v451;
    else
      v377 = 0;
    isP2P = objc_msgSend_isP2P(v4, v339, v340, v341);
    if (v377 == 1)
    {
      v382 = v460;
      if ((isP2P & 1) != 0 || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v379, v380, v381))
        v461 -= GLUtilGetLinkOverhead(8u);
    }
    else
    {
      v382 = v460;
    }
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v379, v380, v381);
    v385 = (void *)objc_claimAutoreleasedReturnValue();
    if (v382)
    {
      GLUtilConnectionDictionaryForNWConnectionInfo(v382, 1);
      v387 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v385, v388, (uint64_t)v387, v389, CFSTR("udp"));

    }
    if (v335)
    {
      GLUtilConnectionDictionaryForNWConnectionInfo(v335, v451);
      v390 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v385, v391, (uint64_t)v390, v392, CFSTR("qpod"));

    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v383, v384, v386);
    v393 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v393, OS_LOG_TYPE_DEFAULT))
    {
      v397 = objc_msgSend_linkID(v4, v394, v395, v396);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v466 = v397;
      *(_WORD *)&v466[4] = 2112;
      *(_QWORD *)&v466[6] = v385;
      _os_log_impl(&dword_19B949000, v393, OS_LOG_TYPE_DEFAULT, "connections for link %d: %@", buf, 0x12u);
    }

    v398 = (void *)MEMORY[0x1E0CB37E8];
    v402 = objc_msgSend_channelNumber(v4, v399, v400, v401);
    objc_msgSend_numberWithUnsignedShort_(v398, v403, v402, v404);
    v405 = (void *)objc_claimAutoreleasedReturnValue();
    if (v405)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-attr-linkchannelnumber"), v405);
    }
    else
    {
      v406 = MEMORY[0x1E0C81028];
      v407 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v406, OS_LOG_TYPE_ERROR))
        sub_19BAF2C24();

    }
    objc_msgSend_hbhEncKey(v4, v408, v409, v410);
    v411 = (void *)objc_claimAutoreleasedReturnValue();
    if (v411)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-attr-hbhenckey"), v411);
    }
    else
    {
      v412 = MEMORY[0x1E0C81028];
      v413 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v412, OS_LOG_TYPE_ERROR))
        sub_19BAF2BA4();

    }
    objc_msgSend_hbhDecKey(v4, v414, v415, v416);
    v417 = (void *)objc_claimAutoreleasedReturnValue();
    if (v417)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-attr-hbhdeckey"), v417);
    }
    else
    {
      v418 = MEMORY[0x1E0C81028];
      v419 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v418, OS_LOG_TYPE_ERROR))
        sub_19BAF2B24();

    }
    v420 = v385;
    if (v420)
    {
      v243 = v452;
      CFDictionarySetValue(theDict, CFSTR("gl-attr-connections"), v420);
      v221 = v456;
    }
    else
    {
      v421 = MEMORY[0x1E0C81028];
      v422 = MEMORY[0x1E0C81028];
      v221 = v456;
      if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR))
        sub_19BAF2AA4();
      v243 = v452;

    }
    v224 = v462;
    if (v377)
    {
      v224 = v462 | 8;
      v244 = 16;
    }
    else
    {
      v244 = 32;
    }
    v136 = theDict;
    v34 = v453;
  }
  else
  {
    v243 = v193;
    v244 = 32;
  }
  v423 = v221;
  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v4, v225, v226, v227) & 1) != 0
    || objc_msgSend_isRelayStunCandidatePair(v4, v424, v425, v426))
  {
    v427 = v34;
    v224 |= v244;
  }
  else
  {
    v427 = v34;
  }
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v424, v425, v426))
    v224 |= 0x40u;
  v428 = v197->_qrExperiments;
  if (v428)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-qr-experiments"), v428);
  }
  else
  {
    v429 = MEMORY[0x1E0C81028];
    v430 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v429, OS_LOG_TYPE_ERROR))
      sub_19BAF2A24();

  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v431, v461, v432);
  v433 = (void *)objc_claimAutoreleasedReturnValue();
  if (v433)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-mtu"), v433);
  }
  else
  {
    v434 = MEMORY[0x1E0C81028];
    v435 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v434, OS_LOG_TYPE_ERROR))
      sub_19BAF29A4();

  }
  v436 = (void *)MEMORY[0x1E0CB37E8];
  LinkOverhead = GLUtilGetLinkOverhead(v224);
  objc_msgSend_numberWithUnsignedShort_(v436, v438, LinkOverhead, v439);
  v440 = (void *)objc_claimAutoreleasedReturnValue();
  if (v440)
  {
    CFDictionarySetValue(v136, CFSTR("gl-attr-constant-overhead"), v440);
  }
  else
  {
    v441 = MEMORY[0x1E0C81028];
    v442 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v441, OS_LOG_TYPE_ERROR))
      sub_19BAF2924();

  }
  v446 = (void *)objc_msgSend_copy(v136, v443, v444, v445);

  return v446;
}

- (id)_getRemoteAttribute:(id)a3
{
  id v4;
  __CFDictionary *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  char isVirtualRelayStunCandidatePair;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  double v20;
  int v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  __int128 v32;
  const char *v33;
  double v34;
  id v35;
  const char *v36;
  uint64_t v37;
  double v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  const char *v55;
  uint64_t v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  int shouldUseVRTLE;
  const char *v62;
  uint64_t v63;
  double v64;
  int v65;
  const char *v66;
  uint64_t v67;
  double v68;
  const char *v69;
  uint64_t v70;
  double v71;
  IDSNWLink *nwLink;
  void *v73;
  const char *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  double v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  double v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  double v96;
  const char *v97;
  double v98;
  IDSNWLink *v99;
  const char *v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  double v106;
  const char *v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  double v113;
  const char *v114;
  uint64_t v115;
  double v116;
  const char *v117;
  uint64_t v118;
  double v119;
  const char *v120;
  double v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  double v125;
  char isP2P;
  const char *v127;
  uint64_t v128;
  double v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  double v133;
  unsigned __int16 v134;
  const char *v135;
  uint64_t v136;
  double v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  double v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  double v153;
  int v154;
  const char *v155;
  uint64_t v156;
  double v157;
  int v158;
  const char *v159;
  double v160;
  unsigned int v161;
  void *v162;
  const char *v163;
  double v164;
  void *v165;
  const char *v166;
  double v167;
  void *v168;
  void *v169;
  uint64_t LinkOverhead;
  const char *v171;
  double v172;
  void *v173;
  const char *v174;
  double v175;
  void *v176;
  const char *v177;
  double v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  double v182;
  void *v183;
  void *v184;
  uint64_t v186;
  int v187;
  char v188;
  IDSGlobalLink *v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  char __str[16];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v4, v6, v7, v8);
  objc_msgSend_remote(v4, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_transport(v13, v14, v15, v16);

  if (v17 == 2)
  {
    v21 = 4;
  }
  else
  {
    objc_msgSend_remote(v4, v18, v19, v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend_transport(v22, v23, v24, v25);

    if (v26 == 3)
      v21 = 896;
    else
      v21 = 0;
  }
  objc_msgSend_remote(v4, v18, v19, v20);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend_external(v27, v28, v29, v30);

  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v200 = v32;
  v201 = v32;
  v198 = v32;
  v199 = v32;
  v196 = v32;
  v197 = v32;
  *(_OWORD *)__str = v32;
  v195 = v32;
  SAToIPPortString(__str, 0x80uLL, v31);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v33, (uint64_t)CFSTR("%s"), v34, __str);
  v35 = (id)objc_claimAutoreleasedReturnValue();
  if (v35)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-remote-address-key"), v35);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF38A4();
  }

  v39 = *(unsigned __int8 *)(v31 + 1);
  v40 = v21 | 1;
  if (v39 != 2)
    v40 = v21;
  v41 = v39 == 30;
  if (v39 == 30)
    v42 = 2;
  else
    v42 = v39 == 2;
  v191 = v42;
  if (v41)
    v43 = v21 | 2;
  else
    v43 = v40;
  if (objc_msgSend_isRelayStunCandidatePair(v4, v36, v37, v38))
  {
    objc_msgSend_local(v4, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v192 = objc_msgSend_transport(v47, v48, v49, v50);

  }
  else
  {
    v192 = 1;
  }
  objc_msgSend_remote(v4, v44, v45, v46);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = objc_msgSend_mtu(v51, v52, v53, v54);

  if (self->_QUICForQREnabled)
  {
    if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v55, v56, v57))
    {
      shouldUseVRTLE = objc_msgSend__shouldUseVRTLE(self, v58, v59, v60);
    }
    else if (objc_msgSend_isRelayStunCandidatePair(v4, v58, v59, v60))
    {
      shouldUseVRTLE = objc_msgSend__shouldUseQRTLE(self, v66, v67, v68);
    }
    else
    {
      shouldUseVRTLE = objc_msgSend__shouldUseP2PTLE(self, v66, v67, v68);
    }
    v187 = shouldUseVRTLE;
    v188 = isVirtualRelayStunCandidatePair;
    v190 = v35;
    v189 = self;
    if ((objc_msgSend_isRelayStunCandidatePair(v4, v62, v63, v64) & 1) != 0
      || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v69, v70, v71))
    {
      nwLink = self->_nwLink;
      objc_msgSend_local(v4, v69, v70, v71);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v77 = objc_msgSend_address(v73, v74, v75, v76);
      objc_msgSend_remote(v4, v78, v79, v80);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v85 = objc_msgSend_external(v81, v82, v83, v84);
      objc_msgSend_sessionID(v4, v86, v87, v88);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v4, v90, v91, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v186) = objc_msgSend_isCellularStunCandidate(v93, v94, v95, v96);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v97, v77, v98, v85, 0, v89, 7, 1, v186);
    }
    else
    {
      v99 = self->_nwLink;
      objc_msgSend_local(v4, v69, v70, v71);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = objc_msgSend_address(v73, v100, v101, v102);
      objc_msgSend_remote(v4, v104, v105, v106);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v110 = objc_msgSend_external(v81, v107, v108, v109);
      objc_msgSend_sessionID(v4, v111, v112, v113);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v4, v114, v115, v116);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v186) = objc_msgSend_isCellularStunCandidate(v93, v117, v118, v119);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v99, v120, v103, v121, v110, 0, v89, 9, 0, v186);
    }
    v122 = (void *)objc_claimAutoreleasedReturnValue();

    isP2P = objc_msgSend_isP2P(v4, v123, v124, v125);
    if (v122)
      v65 = v187;
    else
      v65 = 0;
    if (v65 == 1)
    {
      self = v189;
      isVirtualRelayStunCandidatePair = v188;
      if ((isP2P & 1) != 0 || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v127, v128, v129))
        v193 -= GLUtilGetLinkOverhead(8u);
    }
    else
    {
      self = v189;
      isVirtualRelayStunCandidatePair = v188;
    }

    v35 = v190;
  }
  else
  {
    v65 = 0;
  }
  objc_msgSend_remote(v4, v55, v56, v57);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  v134 = objc_msgSend_linkFlags(v130, v131, v132, v133);

  if ((isVirtualRelayStunCandidatePair & 1) == 0 && self->_remoteDeviceVersion < 2)
    v134 &= ~4u;
  objc_msgSend_remote(v4, v135, v136, v137);
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = objc_msgSend_dataSoMask(v138, v139, v140, v141);

  objc_msgSend_remote(v4, v143, v144, v145);
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  v150 = objc_msgSend_radioAccessTechnology(v146, v147, v148, v149);

  if (v65)
    v154 = v43 | 8;
  else
    v154 = v43;
  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v4, v151, v152, v153) & 1) != 0
    || objc_msgSend_isRelayStunCandidatePair(v4, v155, v156, v157))
  {
    if (v65)
      v158 = 16;
    else
      v158 = 32;
    v154 |= v158;
  }
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v155, v156, v157))
    v161 = v154 | 0x40;
  else
    v161 = v154;
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v159, v191, v160);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  if (v162)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-ipfamily"), v162);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF3824();
  }

  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v163, v192, v164);
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  if (v165)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-transport"), v165);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF37A4();
  }

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v166, v193, v167);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  if (v168)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-mtu"), v168);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF3724();
  }

  v169 = (void *)MEMORY[0x1E0CB37E8];
  LinkOverhead = GLUtilGetLinkOverhead(v161);
  objc_msgSend_numberWithUnsignedShort_(v169, v171, LinkOverhead, v172);
  v173 = (void *)objc_claimAutoreleasedReturnValue();
  if (v173)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-constant-overhead"), v173);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF36A4();
  }

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v174, v150, v175);
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  if (v176)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-rat"), v176);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF3624();
  }

  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v177, v134, v178);
  v179 = (void *)objc_claimAutoreleasedReturnValue();
  if (v179)
  {
    CFDictionarySetValue(v5, CFSTR("gl-attr-link-flags"), v179);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF35A4();
  }

  if ((_DWORD)v150 && (_DWORD)v150 != 9)
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v180, v142, v182);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    if (v183)
    {
      CFDictionarySetValue(v5, CFSTR("gl-attr-data-so-mask"), v183);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF3524();
    }

  }
  v184 = (void *)objc_msgSend_copy(v5, v180, v181, v182);

  return v184;
}

- (void)sendConnectedLinkInfoToAVC
{
  uint64_t v2;
  double v3;
  IDSGlobalLink *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  const char *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  id *p_delegate;
  uint64_t v15;
  void *v16;
  const __CFDictionary *linkIDToCandidatePairs;
  BOOL v18;
  void *Value;
  id v20;
  const char *v21;
  uint64_t v22;
  double v23;
  char isVirtualRelayStunCandidatePair;
  const char *v25;
  double v26;
  void *v27;
  IDSGlobalLink *v28;
  const char *v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  id *v35;
  id WeakRetained;
  char v37;
  const char *v38;
  uint64_t v39;
  double v40;
  __CFString *v41;
  int isRelayStunCandidatePair;
  __CFString *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  NSString *idsSessionID;
  void *v52;
  const char *v53;
  double v54;
  uint64_t v55;
  id v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  double v62;
  id v63;
  char v64;
  const char *v65;
  uint64_t v66;
  double v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  id v73;
  const char *v74;
  uint64_t v75;
  double v76;
  void *v77;
  const char *v78;
  double v79;
  const char *v80;
  double v81;
  uint64_t v82;
  id obj;
  uint64_t v84;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint8_t buf[4];
  _BYTE v91[14];
  __int16 v92;
  NSString *v93;
  __int16 v94;
  void *v95;
  __int16 v96;
  id v97;
  _BYTE v98[128];
  uint64_t v99;

  v4 = self;
  v99 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_copy(self->_connectedLinkIDs, a2, v2, v3);
  objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v91 = v5;
    _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "sendConnectedLinkInfoToAVC: current connected links: %@", buf, 0xCu);
  }

  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  obj = v5;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v86, v11, v98, 16);
  if (v12)
  {
    v13 = v12;
    v84 = *(_QWORD *)v87;
    p_delegate = (id *)&v4->_delegate;
    do
    {
      v15 = 0;
      v82 = v13;
      do
      {
        if (*(_QWORD *)v87 != v84)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v15);
        linkIDToCandidatePairs = (const __CFDictionary *)v4->_linkIDToCandidatePairs;
        if (linkIDToCandidatePairs)
          v18 = v16 == 0;
        else
          v18 = 1;
        if (v18)
          Value = 0;
        else
          Value = (void *)CFDictionaryGetValue(linkIDToCandidatePairs, *(const void **)(*((_QWORD *)&v86 + 1) + 8 * v15));
        v20 = Value;
        isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v20, v21, v22, v23);
        objc_msgSend__getLocalAttribute_(v4, v25, (uint64_t)v20, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v4;
        objc_msgSend__getRemoteAttribute_(v4, v29, (uint64_t)v20, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v85 = objc_msgSend_charValue(v16, v32, v33, v34);
        v35 = p_delegate;
        WeakRetained = objc_loadWeakRetained(p_delegate);
        v37 = objc_opt_respondsToSelector();

        if ((v37 & 1) != 0)
        {
          v41 = CFSTR("VR");
          if ((isVirtualRelayStunCandidatePair & 1) == 0)
          {
            isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v20, v38, v39, v40);
            v41 = CFSTR("P2P");
            if (isRelayStunCandidatePair)
              v41 = CFSTR("RLY");
          }
          v43 = v41;
          objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
          v47 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            idsSessionID = v28->_idsSessionID;
            objc_msgSend_sessionID(v20, v48, v49, v50);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)v91 = v85;
            *(_WORD *)&v91[4] = 2112;
            *(_QWORD *)&v91[6] = v43;
            v92 = 2112;
            v93 = idsSessionID;
            v94 = 2112;
            v95 = v52;
            v96 = 2112;
            v97 = v20;
            _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "Send link cached connected (%d) %@ for IDSSessionID: %@ QRSessionID: %@ and %@.", buf, 0x30u);

          }
          objc_msgSend__translateLinkTransportTypeWhenH2Enabled_(v28, v53, (uint64_t)v27, v54);
          v55 = objc_claimAutoreleasedReturnValue();

          p_delegate = v35;
          v4 = v28;
          v56 = objc_loadWeakRetained(p_delegate);
          objc_msgSend_linkUUID(v20, v57, v58, v59);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_link_didConnectUnderlyingLink_linkUUID_localAttributes_remoteAttributes_(v56, v61, (uint64_t)v4, v62, v85, v60, v55, v31);

          v27 = (void *)v55;
          v13 = v82;
        }
        else
        {
          p_delegate = v35;
          v4 = v28;
        }
        v63 = objc_loadWeakRetained(p_delegate);
        v64 = objc_opt_respondsToSelector();

        if ((v64 & 1) != 0)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v65, v66, v67);
          v68 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_participantIDMap(v20, v69, v70, v71);
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)v91 = v85;
            *(_WORD *)&v91[4] = 2112;
            *(_QWORD *)&v91[6] = v72;
            _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, "Send updated participantID cached map for link: %d, map: %@", buf, 0x12u);

          }
          v73 = objc_loadWeakRetained(p_delegate);
          objc_msgSend_participantIDMap(v20, v74, v75, v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_link_didReceiveMappedParticipantsDict_forLinkID_(v73, v78, (uint64_t)v4, v79, v77, v85);

        }
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v80, (uint64_t)&v86, v81, v98, 16);
    }
    while (v13);
  }

}

- (void)reportLinkEvent:(id)a3 linkID:(unsigned __int8)a4
{
  uint64_t v4;
  id v6;
  NSMutableDictionary *linkIDToCandidatePairs;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  _BOOL4 v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  double v23;
  NSMutableDictionary *v24;
  int v25;
  _BYTE v26[18];
  uint64_t v27;

  v4 = a4;
  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v8, v4, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(linkIDToCandidatePairs, v11, (uint64_t)v10, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v18)
    {
      v25 = 138412546;
      *(_QWORD *)v26 = v6;
      *(_WORD *)&v26[8] = 2112;
      *(_QWORD *)&v26[10] = v13;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "reportLinkEvent: eventName: %@, candidate pair: %@", (uint8_t *)&v25, 0x16u);
    }

    objc_msgSend_linkMetrics(v13, v19, v20, v21);
    v17 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_event_(v17, v22, (uint64_t)v6, v23);
  }
  else if (v18)
  {
    v24 = self->_linkIDToCandidatePairs;
    v25 = 67109378;
    *(_DWORD *)v26 = v4;
    *(_WORD *)&v26[4] = 2112;
    *(_QWORD *)&v26[6] = v24;
    _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "reportLinkEvent: no candidate pair found for linkID %d; candidate pairs: %@",
      (uint8_t *)&v25,
      0x12u);
  }

}

- (void)setPacketNotificationFilter:(char)a3 uniqueTag:(unsigned int)a4 isEnabled:(BOOL)a5
{
  double v5;
  uint64_t v6;
  _BOOL4 v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  double v13;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  _BYTE *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  uint64_t v40;
  double v41;
  const char *v42;
  uint64_t v43;
  double v44;
  char v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  int v50;
  NSMutableArray *v51;
  const char *v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  double v67;
  int v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t i;
  void *v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  double v91;
  __int128 v92;
  IDSNWLink *nwLink;
  void *v94;
  const char *v95;
  uint64_t v96;
  double v97;
  uint64_t isRelayStunCandidatePair;
  const char *v99;
  double v100;
  int isQRConnection;
  _OWORD *v102;
  void *v103;
  const char *v104;
  double v105;
  void *v106;
  void *v107;
  unsigned __int8 v108;
  void *v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[8];
  _BYTE buf[32];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  _BYTE v127[128];
  _BYTE v128[128];
  uint64_t v129;

  v6 = a3;
  v129 = *MEMORY[0x1E0C80C00];
  if (self->_state < 5 || !a5)
  {
    if (!self->_linkIDToCandidatePairs)
      goto LABEL_22;
    v9 = a5;
    v10 = *(_QWORD *)&a4;
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], a2, a3, v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
      goto LABEL_22;
    linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v11, v6, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v15);

    if (v16)
    {
      if ((unint64_t)objc_msgSend_state(v16, v17, v18, v19) < 5)
      {
        objc_msgSend_local(v16, v20, v21, v22);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = (_BYTE *)objc_msgSend_address(v27, v28, v29, v30);

        objc_msgSend_remote(v16, v32, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v110 = objc_msgSend_external(v35, v36, v37, v38);

        if (v9)
        {
          self->_basebandPacketChannelNumber = objc_msgSend_channelNumber(v16, v39, v40, v41);
          self->_basebandPacketLinkID = v6;
          if (self->_clientType == 5)
            v45 = 1;
          else
            v45 = 2;
          v108 = v45;
          objc_msgSend_local(v16, v42, v43, v44);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = objc_msgSend_index(v46, v47, v48, v49);

          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v51 = self->_interfaceAddressArray;
          v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v115, v53, v128, 16);
          if (v56)
          {
            v58 = *(_QWORD *)v116;
LABEL_37:
            v59 = 0;
            while (1)
            {
              if (*(_QWORD *)v116 != v58)
                objc_enumerationMutation(v51);
              v60 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * v59);
              if (objc_msgSend_index(v60, v54, v55, v57) == v50)
                break;
              if (v56 == ++v59)
              {
                v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v54, (uint64_t)&v115, v57, v128, 16);
                if (v56)
                  goto LABEL_37;
                goto LABEL_43;
              }
            }
            objc_msgSend_name(v60, v54, v55, v57);
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = objc_msgSend_delegatedIndex(v60, v65, v66, v67);

            if (!v68)
              goto LABEL_64;
            v113 = 0u;
            v114 = 0u;
            v111 = 0u;
            v112 = 0u;
            v51 = self->_interfaceAddressArray;
            v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v71, (uint64_t)&v111, v72, v127, 16);
            if (v75)
            {
              v77 = *(_QWORD *)v112;
              while (2)
              {
                for (i = 0; i != v75; ++i)
                {
                  if (*(_QWORD *)v112 != v77)
                    objc_enumerationMutation(v51);
                  v79 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * i);
                  if (objc_msgSend_index(v79, v73, v74, v76) == v68)
                  {
                    if (objc_msgSend_isCellular(v79, v73, v74, v76))
                    {
                      OSLogHandleForTransportCategory();
                      v80 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                      {
                        objc_msgSend_name(v79, v81, v82, v83);
                        v84 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138412546;
                        *(_QWORD *)&buf[4] = v109;
                        *(_WORD *)&buf[12] = 2112;
                        *(_QWORD *)&buf[14] = v84;
                        _os_log_impl(&dword_19B949000, v80, OS_LOG_TYPE_DEFAULT, "setPacketNotificationFilter: overriding source interface [%@] with [%@]", buf, 0x16u);

                      }
                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          objc_msgSend_name(v79, v85, v86, v87);
                          v106 = v109;
                          v107 = (void *)objc_claimAutoreleasedReturnValue();
                          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("setPacketNotificationFilter: overriding source interface [%@] with [%@]"));

                          if (_IDSShouldLog())
                          {
                            objc_msgSend_name(v79, v85, v86, v87, v109, v107);
                            v106 = v109;
                            v107 = (void *)objc_claimAutoreleasedReturnValue();
                            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("setPacketNotificationFilter: overriding source interface [%@] with [%@]"));

                          }
                        }
                      }
                      objc_msgSend_address(v79, v85, v86, v87, v106, v107);
                      v88 = (void *)objc_claimAutoreleasedReturnValue();
                      v31 = (_BYTE *)objc_msgSend_sa(v88, v89, v90, v91);

                    }
                    goto LABEL_63;
                  }
                }
                v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v73, (uint64_t)&v111, v76, v127, 16);
                if (v75)
                  continue;
                break;
              }
            }
          }
          else
          {
LABEL_43:
            v109 = 0;
          }
LABEL_63:

LABEL_64:
          *(_QWORD *)&v92 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v92 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v125 = v92;
          v126 = v92;
          v123 = v92;
          v124 = v92;
          v121 = v92;
          v122 = v92;
          *(_OWORD *)buf = v92;
          *(_OWORD *)&buf[16] = v92;
          v119[6] = v92;
          v119[7] = v92;
          v119[4] = v92;
          v119[5] = v92;
          v119[2] = v92;
          v119[3] = v92;
          v119[0] = v92;
          v119[1] = v92;
          if (self->_QUICForQREnabled)
          {
            nwLink = self->_nwLink;
            objc_msgSend_sessionID(v16, v69, v70, -3.72066208e-103);
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v16, v95, v96, v97);
            isQRConnection = objc_msgSend_getEffectiveSourceAddress_fromSourceAddress_effectiveDestinationAddress_fromDestinationAddress_sessionID_isQRConnection_(nwLink, v99, (uint64_t)buf, v100, v31, v119, v110, v94, isRelayStunCandidatePair);

            if (isQRConnection)
              v31 = buf;
            v102 = (_OWORD *)v110;
            if (isQRConnection)
              v102 = v119;
            v110 = (uint64_t)v102;
          }
          objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v69, v70, *(double *)&v92);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setPacketNotificationFilter_remote_uniqueTag_callType_(v103, v104, (uint64_t)v31, v105, v110, v10, v108);

        }
        else
        {
          objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v39, v40, v41);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removePacketNotificationFilter(v61, v62, v63, v64);

          self->_basebandPacketChannelNumber = 0;
          self->_basebandPacketLinkID = 0;
        }
      }
      else
      {
        OSLogHandleForTransportCategory();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v6;
          _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "candidate pair for linkID:%d has been already disconnected.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("candidate pair for linkID:%d has been already disconnected."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("candidate pair for linkID:%d has been already disconnected."));
          }
        }
      }
    }
    else
    {
LABEL_22:
      OSLogHandleForTransportCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for linkID:%d.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for linkID:%d."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for linkID:%d."));
        }
      }
      v16 = 0;
    }

  }
  else
  {
    OSLogHandleForTransportCategory();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "GL link already disconnected - not setting packet notification filter for link %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GL link already disconnected - not setting packet notification filter for link %d"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GL link already disconnected - not setting packet notification filter for link %d"));
    }
  }
}

- (void)dropIPPackets:(char)a3 payloadArray:(id)a4
{
  uint64_t v4;
  const char *v6;
  id v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  unsigned __int8 v21;
  NSObject *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  double v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  uint64_t isRelayStunCandidate;
  const char *v48;
  double v49;
  uint8_t buf[4];
  int v51;
  uint64_t v52;

  v4 = a3;
  v52 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (!self->_linkIDToCandidatePairs)
    goto LABEL_6;
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v6, v4, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
    goto LABEL_6;
  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v9, v4, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v13);

  if (v14)
  {
    if (objc_msgSend_isSharedQRSession(v14, v15, v16, v17))
      v21 = objc_msgSend_channelNumber(v14, v18, v19, v20);
    else
      v21 = 0;
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v18, v19, v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(v14, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_address(v27, v28, v29, v30);
    objc_msgSend_remote(v14, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend_external(v35, v36, v37, v38);
    objc_msgSend_local(v14, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    isRelayStunCandidate = objc_msgSend_isRelayStunCandidate(v43, v44, v45, v46);
    objc_msgSend_dropIPPackets_localAddress_remoteAddress_isRelay_channelNumberMSB_(v23, v48, (uint64_t)v7, v49, v31, v39, isRelayStunCandidate, v21);

  }
  else
  {
LABEL_6:
    OSLogHandleForTransportCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v51 = v4;
      _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for linkID:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for linkID:%d."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for linkID:%d."));
      }
    }
  }

}

- (void)updateProtocolQualityOfService:(char)a3 isGood:(BOOL)a4
{
  double v4;
  uint64_t v5;
  _BOOL8 v6;
  const char *v8;
  void *v9;
  double v10;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  double v26;
  NSObject *v27;
  id v28;
  uint8_t buf[4];
  int v30;
  uint64_t v31;

  v5 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  if (!self->_linkIDToCandidatePairs)
    goto LABEL_5;
  v6 = a4;
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], a2, a3, v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
    goto LABEL_5;
  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v8, v5, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v12);

  if (v28)
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(v28, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_address(v20, v21, v22, v23);
    objc_msgSend_updateProtocolQualityOfService_localAddress_(v16, v25, v6, v26, v24);

  }
  else
  {
LABEL_5:
    OSLogHandleForTransportCategory();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v30 = v5;
      _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for linkID:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for linkID:%d."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for linkID:%d."));
    }
  }
}

- (void)stopKeepAlive:(id)a3
{
  id v3;
  NSObject *v4;
  uint8_t buf[4];
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  OSLogHandleForTransportCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v6 = v3;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "stop heart beat for linkIDs:%@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stop heart beat for linkIDs:%@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stop heart beat for linkIDs:%@"));
    }
  }

}

- (void)currentCellularSignalStrength:(int *)a3 signalStrength:(int *)a4 signalGrade:(int *)a5
{
  double v5;
  const char *v9;
  double v10;
  NSObject *v11;
  id v12;
  uint8_t buf[16];

  if (a3 && a4 && a5)
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, (uint64_t)a3, v5);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_currentCellularSignalStrength_signalStrength_signalGrade_(v12, v9, (uint64_t)a3, v10, a4, a5);

  }
  else
  {
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "currentCellularSignalStrength failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("currentCellularSignalStrength failed due to invalid parameter."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("currentCellularSignalStrength failed due to invalid parameter."));
    }
  }
}

- (void)setWiFiAssistState:(BOOL)a3
{
  double v3;
  _BOOL8 v4;
  const char *v6;
  double v7;
  const char *v8;
  double v9;
  const char *v10;
  double v11;
  const char *v12;
  double v13;

  v4 = a3;
  objc_msgSend_setWiFiAssistState_(self->_udpLink, a2, a3, v3);
  objc_msgSend_setWiFiAssistState_(self->_udpLinkv6, v6, v4, v7);
  objc_msgSend_setWiFiAssistState_(self->_tcpLink, v8, v4, v9);
  objc_msgSend_setWiFiAssistState_(self->_tcpSSLLink, v10, v4, v11);
  objc_msgSend_setWiFiAssistState_(self->_nwLink, v12, v4, v13);
}

- (void)startLinkProbing:(id)a3
{
  id v4;
  NSMutableArray *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;
  void *v11;
  const char *v12;
  double v13;
  int isEqualToString;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  void *Value;
  id v20;
  const char *v21;
  double v22;
  uint64_t v23;
  const char *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  NSMutableArray *activeProbingLinkIDs;
  const char *v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  unsigned int v43;
  double v44;
  void *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  NSMutableArray *v51;
  const char *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  __CFArray *v56;
  uint64_t v57;
  uint64_t j;
  const void *v59;
  NSMutableDictionary *linkIDToCandidatePairs;
  BOOL v61;
  void *v62;
  NSMutableArray *v63;
  const char *v64;
  uint64_t v65;
  double v66;
  const char *v67;
  uint64_t v68;
  double v69;
  NSObject *v70;
  const char *v71;
  double v72;
  const char *v73;
  double v74;
  const char *v75;
  uint64_t v76;
  double v77;
  NSObject *v78;
  NSMutableArray *v79;
  unsigned int probingTimeout;
  NSMutableArray *v81;
  id v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint8_t buf[4];
  NSMutableArray *v93;
  __int16 v94;
  _BYTE v95[10];
  _BYTE v96[128];
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend_objectForKeyedSubscript_(v4, v6, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v4, v9, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v11, v12, (uint64_t)CFSTR("ids-extchannel-probing-all-links-value"), v13);

    if (isEqualToString)
    {
      v18 = (void *)objc_msgSend_copy(self->_connectedLinkIDs, v15, v16, v17);
      goto LABEL_9;
    }
  }
  else
  {

  }
  Value = 0;
  if (v4 && CFSTR("ids-extchannel-probing-link-ids-key"))
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-probing-link-ids-key"));
  v18 = (void *)objc_msgSend_copy(Value, v15, v16, v17);
LABEL_9:
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v20 = v18;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v88, v22, v97, 16);
  if (v23)
  {
    v26 = v23;
    v27 = *(_QWORD *)v89;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v89 != v27)
          objc_enumerationMutation(v20);
        v29 = *(_QWORD *)(*((_QWORD *)&v88 + 1) + 8 * i);
        if ((objc_msgSend_containsObject_(self->_activeProbingLinkIDs, v24, v29, v25) & 1) == 0)
          objc_msgSend_addObject_(v5, v24, v29, v25);
      }
      v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v88, v25, v97, 16);
    }
    while (v26);
  }

  objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    activeProbingLinkIDs = self->_activeProbingLinkIDs;
    *(_DWORD *)buf = 138412546;
    v93 = v5;
    v94 = 2112;
    *(_QWORD *)v95 = activeProbingLinkIDs;
    _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "startLinkProbing: add new probing linkIDs: %@, to activeProbingLinkIDs: %@", buf, 0x16u);
  }

  objc_msgSend_addObjectsFromArray_(self->_activeProbingLinkIDs, v35, (uint64_t)v5, v36);
  v40 = 0;
  if (v4)
  {
    v37 = CFSTR("ids-extchannel-probing-timeout-key");
    if (CFSTR("ids-extchannel-probing-timeout-key"))
      v40 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-probing-timeout-key"));
  }
  v43 = objc_msgSend_unsignedIntValue(v40, v37, v38, v39);
  v45 = 0;
  self->_probingTimeout = v43;
  v83 = v20;
  if (v4)
  {
    v41 = CFSTR("ids-extchannel-probing-interval-key");
    if (CFSTR("ids-extchannel-probing-interval-key"))
      v45 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-probing-interval-key"));
  }
  v46 = objc_msgSend_unsignedIntValue(v45, v41, v42, v44);
  if ((_DWORD)v46)
  {
    v50 = v46;
    v81 = v5;
    v82 = v4;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v51 = v5;
    v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v84, v53, v96, 16);
    if (v54)
    {
      v55 = v54;
      v56 = 0;
      v57 = *(_QWORD *)v85;
      do
      {
        for (j = 0; j != v55; ++j)
        {
          if (*(_QWORD *)v85 != v57)
            objc_enumerationMutation(v51);
          v59 = *(const void **)(*((_QWORD *)&v84 + 1) + 8 * j);
          linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
          if (linkIDToCandidatePairs)
            v61 = v59 == 0;
          else
            v61 = 1;
          if (v61)
            v62 = 0;
          else
            v62 = (void *)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, *(const void **)(*((_QWORD *)&v84 + 1) + 8 * j));
          v63 = v62;
          if (objc_msgSend_isSharedQRSession(v63, v64, v65, v66))
          {
            objc_msgSend_GlobalLink(IDSFoundationLog, v67, v68, v69);
            v70 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v93 = v63;
              _os_log_impl(&dword_19B949000, v70, OS_LOG_TYPE_DEFAULT, "startLinkProbing: skipped shared QR session %@", buf, 0xCu);
            }

            if (!v56)
              v56 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (v56 && v59)
              CFArrayAppendValue(v56, v59);
          }
          else
          {
            objc_msgSend_startLinkProbingTimer_(v63, v67, v50, v69);
          }

        }
        v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v71, (uint64_t)&v84, v72, v96, 16);
      }
      while (v55);
    }
    else
    {
      v56 = 0;
    }

    objc_msgSend_removeObjectsInArray_(self->_activeProbingLinkIDs, v73, (uint64_t)v56, v74);
    objc_msgSend_GlobalLink(IDSFoundationLog, v75, v76, v77);
    v78 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      v79 = self->_activeProbingLinkIDs;
      probingTimeout = self->_probingTimeout;
      *(_DWORD *)buf = 138412802;
      v93 = v79;
      v94 = 1024;
      *(_DWORD *)v95 = v50;
      *(_WORD *)&v95[4] = 1024;
      *(_DWORD *)&v95[6] = probingTimeout;
      _os_log_impl(&dword_19B949000, v78, OS_LOG_TYPE_DEFAULT, "startLinkProbing: activeProbingLinkIDs: %@, probingInterval: %u, _probingTimeout: %u", buf, 0x18u);
    }

    v5 = v81;
    v4 = v82;
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v49);
    v56 = (__CFArray *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v56, OS_LOG_TYPE_ERROR))
      sub_19BAF3924();
  }

}

- (void)stopLinkProbing:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  int isEqualToString;
  const char *v14;
  uint64_t v15;
  double v16;
  id v17;
  void *Value;
  id v19;
  const char *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  NSMutableDictionary *linkIDToCandidatePairs;
  BOOL v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  NSMutableArray *activeProbingLinkIDs;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  id v48;
  __int16 v49;
  NSMutableArray *v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v4, v8, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("ids-extchannel-probing-all-links-value"), v12);

    if (isEqualToString)
    {
      v17 = (id)objc_msgSend_copy(self->_activeProbingLinkIDs, v14, v15, v16);
      goto LABEL_9;
    }
  }
  else
  {

  }
  Value = 0;
  if (v4 && CFSTR("ids-extchannel-probing-link-ids-key"))
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-probing-link-ids-key"));
  v17 = Value;
LABEL_9:
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v19 = v17;
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v43, v21, v51, 16);
  if (v22)
  {
    v25 = v22;
    v26 = *(_QWORD *)v44;
    do
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v44 != v26)
          objc_enumerationMutation(v19);
        v28 = *(const char **)(*((_QWORD *)&v43 + 1) + 8 * v27);
        linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        if (linkIDToCandidatePairs)
          v30 = v28 == 0;
        else
          v30 = 1;
        if (v30)
        {
          objc_msgSend_stopLinkProbingTimer(0, v28, v23, v24, (_QWORD)v43);
        }
        else
        {
          v31 = (void *)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v28);
          objc_msgSend_stopLinkProbingTimer(v31, v32, v33, v34, (_QWORD)v43);
        }
        ++v27;
      }
      while (v25 != v27);
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v35, (uint64_t)&v43, v24, v51, 16);
    }
    while (v25);
  }

  objc_msgSend_removeObjectsInArray_(self->_activeProbingLinkIDs, v36, (uint64_t)v19, v37);
  objc_msgSend_GlobalLink(IDSFoundationLog, v38, v39, v40);
  v41 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    activeProbingLinkIDs = self->_activeProbingLinkIDs;
    *(_DWORD *)buf = 138412546;
    v48 = v19;
    v49 = 2112;
    v50 = activeProbingLinkIDs;
    _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "stopLinkProbing: linkIDs: %@, activeProbingLinkIDs: %@", buf, 0x16u);
  }

}

- (void)_stopProbingOnLinkID:(char)a3
{
  double v3;
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  double v11;
  void *v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v4 = a3;
  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v22 = v4;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "_stopProbingOnLinkID: %d", buf, 8u);
  }

  v19 = CFSTR("ids-extchannel-probing-link-ids-key");
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v7, v4, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v9;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v10, (uint64_t)&v18, v11, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v12;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v13, (uint64_t)&v20, v14, &v19, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stopLinkProbing_(self, v16, (uint64_t)v15, v17);

}

- (void)queryLinkProbingStatus:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  int isEqualToString;
  const char *v14;
  uint64_t v15;
  double v16;
  __CFString *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  __CFString *v22;
  NSObject *v23;
  __CFString *v24;
  const char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  __CFArray *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  NSMutableDictionary *linkIDToCandidatePairs;
  BOOL v34;
  void *v35;
  __CFString *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  __CFString *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const void *v47;
  NSObject *v48;
  void *v49;
  id v50;
  const char *v51;
  double v52;
  void *v53;
  char isKindOfClass;
  const char *v55;
  double v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  double v60;
  void *v61;
  unsigned int v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  NSObject *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  const char *v76;
  double v77;
  void *v78;
  double v79;
  unsigned int v80;
  const char *v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  uint64_t v87;
  uint64_t i;
  void *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  unsigned int v93;
  const char *v94;
  uint64_t v95;
  double v96;
  unsigned int v97;
  const char *v98;
  double v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  double v103;
  unsigned int v104;
  const char *v105;
  uint64_t v106;
  double v107;
  unsigned int v108;
  NSObject *v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  double v113;
  double v114;
  unsigned int v115;
  NSObject *v116;
  void *v117;
  const char *v118;
  double v119;
  void *v120;
  const char *v121;
  double v122;
  void *v123;
  const char *v124;
  double v125;
  void *v126;
  id v127;
  __CFDictionary *Mutable;
  const char *v129;
  double v130;
  void *v131;
  id v132;
  id v133;
  const char *v134;
  double v135;
  void *v136;
  const char *v137;
  double v138;
  void *v139;
  const char *v140;
  double v141;
  const char *v142;
  uint64_t v143;
  double v144;
  void *v145;
  __CFDictionary *linkIDToReorderedPackets;
  __CFDictionary *linkIDToRequestTimeStampAndRTT;
  void *v148;
  const char *v149;
  uint64_t v150;
  double v151;
  NSObject *v152;
  const char *v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  CFMutableDictionaryRef v157;
  NSMutableDictionary *v158;
  const char *v159;
  double v160;
  const char *v161;
  uint64_t v162;
  double v163;
  const char *v164;
  uint64_t v165;
  double v166;
  void *v167;
  const char *v168;
  double v169;
  const char *v170;
  double v171;
  uint64_t v172;
  __CFString *v173;
  id WeakRetained;
  char v175;
  id v176;
  const char *v177;
  double v178;
  const void *v179;
  void *v180;
  uint64_t v181;
  __CFString *v182;
  CFMutableDictionaryRef theDict;
  uint64_t v184;
  __CFString *v185;
  __CFString *v186;
  uint64_t v187;
  __CFArray *v188;
  const char *key;
  id value;
  unsigned int v191;
  IDSGlobalLink *v192;
  id obj;
  id v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  _QWORD v203[2];
  uint8_t v204[128];
  uint8_t buf[4];
  const __CFString *v206;
  __int16 v207;
  const char *v208;
  __int16 v209;
  int v210;
  __int16 v211;
  uint64_t v212;
  __int16 v213;
  void *v214;
  _BYTE v215[128];
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  theDict = (CFMutableDictionaryRef)objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v180 = v4;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v4, v8, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("ids-extchannel-probing-all-links-value"), v12);

    if (isEqualToString)
    {
      v17 = (__CFString *)objc_msgSend_copy(self->_connectedLinkIDs, v14, v15, v16);
      goto LABEL_9;
    }
  }
  else
  {

  }
  v21 = 0;
  if (v4 && CFSTR("ids-extchannel-probing-link-ids-key"))
    v21 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-probing-link-ids-key"));
  v17 = v21;
LABEL_9:
  v22 = v17;
  objc_msgSend_GlobalLink(IDSFoundationLog, v18, v19, v20, CFSTR("ids-extchannel-probing-link-ids-key"));
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v206 = v22;
    _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: linkIDs: %@", buf, 0xCu);
  }

  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  v24 = v22;
  v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v199, v26, v215, 16);
  if (v27)
  {
    v28 = v27;
    v29 = 0;
    v30 = *(_QWORD *)v200;
    v181 = *(_QWORD *)v200;
    v182 = v24;
    v192 = self;
    while (1)
    {
      v31 = 0;
      v184 = v28;
      do
      {
        if (*(_QWORD *)v200 != v30)
          objc_enumerationMutation(v24);
        v32 = *(const void **)(*((_QWORD *)&v199 + 1) + 8 * v31);
        linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        if (linkIDToCandidatePairs)
          v34 = v32 == 0;
        else
          v34 = 1;
        if (v34)
          v35 = 0;
        else
          v35 = (void *)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, *(const void **)(*((_QWORD *)&v199 + 1) + 8 * v31));
        v36 = v35;
        objc_msgSend_candidatePairToken(v36, v37, v38, v39);
        v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isSharedQRSession(v36, v41, v42, v43))
        {
          v47 = v32;
          objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v206 = v36;
            _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: skipped shared QR session %@", buf, 0xCu);
          }

          if (!v29)
            v29 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (v29 && v47)
            CFArrayAppendValue(v29, v47);
          goto LABEL_98;
        }
        v49 = 0;
        if (self->_linkIDToRequestTimeStampAndRTT && v32)
          v49 = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_linkIDToRequestTimeStampAndRTT, v32);
        key = (const char *)v32;
        v50 = v49;
        objc_msgSend_objectAtIndexedSubscript_(v50, v51, 0, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        objc_msgSend_objectAtIndexedSubscript_(v50, v55, 0, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = v57;
        if ((isKindOfClass & 1) != 0)
        {
          v62 = objc_msgSend_unsignedIntValue(v57, v58, v59, v60);
        }
        else
        {
          objc_msgSend_objectAtIndexedSubscript_(v57, v58, 0, v60);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = objc_msgSend_unsignedIntValue(v63, v64, v65, v66);

        }
        v186 = v36;

        v67 = ((double)(unsigned __int16)v62 * 0.0000152587891 + (double)HIWORD(v62)) * 1000.0;
        v68 = v67;
        objc_msgSend_GlobalLink(IDSFoundationLog, v69, v70, v67);
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          v75 = objc_msgSend_count(v50, v72, v73, v74);
          objc_msgSend_objectAtIndexedSubscript_(v50, v76, 0, v77);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138413314;
          v206 = v40;
          v207 = 2112;
          v208 = key;
          v209 = 1024;
          v210 = v68;
          v211 = 2048;
          v212 = v75;
          v213 = 2112;
          v214 = v78;
          _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: candidatePairToken %@, linkID: %@, baseRequestTimeStampInMS: %u, requestTimeStampAndRTTs count: %lu, requestTimeStampAndRTTs: %@ ...", buf, 0x30u);

        }
        v185 = v40;
        v187 = v31;
        v188 = v29;

        v194 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        value = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v79 = ids_monotonic_time();
        v80 = ntpTime32(v79);
        v195 = 0u;
        v196 = 0u;
        v197 = 0u;
        v198 = 0u;
        obj = v50;
        v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v81, (uint64_t)&v195, v82, v204, 16);
        if (v83)
        {
          v84 = v83;
          v85 = 0;
          v86 = 0;
          v191 = (((double)(unsigned __int16)v80 * 0.0000152587891 + (double)HIWORD(v80)) * 1000.0);
          v87 = *(_QWORD *)v196;
          while (1)
          {
            for (i = 0; i != v84; ++i)
            {
              if (*(_QWORD *)v196 != v87)
                objc_enumerationMutation(obj);
              v89 = *(void **)(*((_QWORD *)&v195 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v93 = objc_msgSend_unsignedIntValue(v89, v90, v91, v92);
                v96 = ((double)(unsigned __int16)v93 * 0.0000152587891 + (double)HIWORD(v93)) * 1000.0;
                v97 = v96;
                if (v191 - v96 < v192->_probingTimeout)
                {
                  objc_msgSend_addObject_(value, v94, (uint64_t)v89, v96);
                  continue;
                }
                v108 = v97 - v68;
                if (v97 - v68 >= 0x10000)
                {
                  objc_msgSend_GlobalLink(IDSFoundationLog, v94, v95, v96);
                  v116 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109120;
                    LODWORD(v206) = v108;
                    _os_log_impl(&dword_19B949000, v116, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: ProbingTimeout: differenceInMS: %u is out of scope", buf, 8u);
                  }

                  LOWORD(v108) = -1;
                }
                LOWORD(v115) = -1;
              }
              else
              {
                objc_msgSend_objectAtIndexedSubscript_(v89, v90, 0, v92);
                v100 = (void *)objc_claimAutoreleasedReturnValue();
                v104 = objc_msgSend_unsignedIntValue(v100, v101, v102, v103);

                v107 = ((double)(unsigned __int16)v104 * 0.0000152587891 + (double)HIWORD(v104)) * 1000.0;
                v108 = v107 - v68;
                if (v108 >= 0x10000)
                {
                  objc_msgSend_GlobalLink(IDSFoundationLog, v105, v106, v107);
                  v109 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109120;
                    LODWORD(v206) = v108;
                    _os_log_impl(&dword_19B949000, v109, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: differenceInMS: %u is out of scope", buf, 8u);
                  }

                  LOWORD(v108) = -1;
                }
                ++v86;
                objc_msgSend_objectAtIndexedSubscript_(v89, v105, 1, v107);
                v110 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_doubleValue(v110, v111, v112, v113);
                v115 = (v114 * 1000.0);

                if (v115 >= 0x10000)
                  LOWORD(v115) = -2;
              }
              ++v85;
              objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v94, (unsigned __int16)v108, v96);
              v117 = (void *)objc_claimAutoreleasedReturnValue();
              v203[0] = v117;
              objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v118, (unsigned __int16)v115, v119);
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              v203[1] = v120;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v121, (uint64_t)v203, v122, 2);
              v123 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObject_(v194, v124, (uint64_t)v123, v125);

            }
            v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v98, (uint64_t)&v195, v99, v204, 16);
            if (!v84)
              goto LABEL_62;
          }
        }
        v85 = 0;
        v86 = 0;
LABEL_62:

        v126 = 0;
        self = v192;
        if (v192->_linkIDToReorderedPackets && key)
          v126 = (void *)CFDictionaryGetValue((CFDictionaryRef)v192->_linkIDToReorderedPackets, key);
        v127 = v126;
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v129, v68, v130);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        if (v131)
        {
          CFDictionarySetValue(Mutable, CFSTR("ids-extchannel-time-stamp-key"), v131);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v206 = CFSTR("ids-extchannel-time-stamp-key");
          v207 = 2080;
          v208 = "linkStatus";
          _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
        }

        v132 = v127;
        if (v132)
        {
          CFDictionarySetValue(Mutable, CFSTR("ids-extchannel-number-reordered-packets-key"), v132);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v206 = CFSTR("ids-extchannel-number-reordered-packets-key");
          v207 = 2080;
          v208 = "linkStatus";
          _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
        }

        v133 = v194;
        if (v133)
        {
          CFDictionarySetValue(Mutable, CFSTR("ids-extchannel-probing-request-offset-rtt-key"), v133);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v206 = CFSTR("ids-extchannel-probing-request-offset-rtt-key");
          v207 = 2080;
          v208 = "linkStatus";
          _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
        }

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v134, v85, v135);
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        if (v136)
        {
          CFDictionarySetValue(Mutable, CFSTR("ids-extchannel-number-requests-key"), v136);
          v29 = v188;
        }
        else
        {
          v29 = v188;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v206 = CFSTR("ids-extchannel-number-requests-key");
            v207 = 2080;
            v208 = "linkStatus";
            _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
          }
        }

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v137, v86, v138);
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        if (v139)
        {
          CFDictionarySetValue(Mutable, CFSTR("ids-extchannel-number-response-key"), v139);
          v31 = v187;
        }
        else
        {
          v31 = v187;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v206 = CFSTR("ids-extchannel-number-response-key");
            v207 = 2080;
            v208 = "linkStatus";
            _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
          }
        }

        objc_msgSend_setObject_forKeyedSubscript_(theDict, v140, (uint64_t)Mutable, v141, key);
        v145 = value;
        if (key)
        {
          linkIDToReorderedPackets = (__CFDictionary *)v192->_linkIDToReorderedPackets;
          if (linkIDToReorderedPackets)
          {
            CFDictionaryRemoveValue(linkIDToReorderedPackets, key);
            v145 = value;
          }
          linkIDToRequestTimeStampAndRTT = (__CFDictionary *)v192->_linkIDToRequestTimeStampAndRTT;
          if (linkIDToRequestTimeStampAndRTT)
          {
            CFDictionaryRemoveValue(linkIDToRequestTimeStampAndRTT, key);
            v145 = value;
          }
        }
        v148 = v145;
        if (objc_msgSend_count(v145, v142, v143, v144))
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v149, v150, v151);
          v152 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
          {
            v156 = objc_msgSend_count(value, v153, v154, v155);
            *(_DWORD *)buf = 134217984;
            v206 = (const __CFString *)v156;
            _os_log_impl(&dword_19B949000, v152, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: remainingTimeStamp count: %lu", buf, 0xCu);
          }

          if (!v192->_linkIDToRequestTimeStampAndRTT)
          {
            v157 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v158 = v192->_linkIDToRequestTimeStampAndRTT;
            v192->_linkIDToRequestTimeStampAndRTT = (NSMutableDictionary *)v157;

          }
          v148 = value;
          if (value)
            CFDictionarySetValue((CFMutableDictionaryRef)v192->_linkIDToRequestTimeStampAndRTT, key, value);
        }

        v30 = v181;
        v24 = v182;
        v28 = v184;
        v40 = v185;
        v36 = v186;
LABEL_98:

        ++v31;
      }
      while (v31 != v28);
      v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v159, (uint64_t)&v199, v160, v215, 16);
      if (!v28)
        goto LABEL_102;
    }
  }
  v29 = 0;
LABEL_102:

  if (objc_msgSend_count(v29, v161, v162, v163))
  {
    v167 = (void *)objc_msgSend_mutableCopy(v24, v164, v165, v166);
    objc_msgSend_removeObjectsInArray_(v167, v168, (uint64_t)v29, v169);
    objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v170, (uint64_t)v167, v171);
    v172 = objc_claimAutoreleasedReturnValue();

    v24 = (__CFString *)v172;
  }
  if (!theDict)
    theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v173 = v24;
  if (v173)
  {
    CFDictionarySetValue(theDict, v179, v173);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF3950();
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v175 = objc_opt_respondsToSelector();

  if ((v175 & 1) != 0)
  {
    v176 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didGetLinkProbingStatus_(v176, v177, (uint64_t)self, v178, theDict);

  }
}

- (void)flushLinkProbingStatus:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  int isEqualToString;
  const char *v14;
  uint64_t v15;
  double v16;
  id v17;
  void *Value;
  id v19;
  const char *v20;
  double v21;
  uint64_t v22;
  const char *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  NSMutableDictionary *linkIDToReorderedPackets;
  NSMutableDictionary *linkIDToRequestTimeStampAndRTT;
  NSMutableDictionary *linkIDToHBCounter;
  const char *v32;
  uint64_t v33;
  double v34;
  NSObject *v35;
  NSMutableArray *activeProbingLinkIDs;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  id v42;
  __int16 v43;
  NSMutableArray *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v4, v8, (uint64_t)CFSTR("ids-extchannel-probing-link-ids-key"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("ids-extchannel-probing-all-links-value"), v12);

    if (isEqualToString)
    {
      v17 = (id)objc_msgSend_copy(self->_connectedLinkIDs, v14, v15, v16);
      goto LABEL_9;
    }
  }
  else
  {

  }
  Value = 0;
  if (v4 && CFSTR("ids-extchannel-probing-link-ids-key"))
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-probing-link-ids-key"));
  v17 = Value;
LABEL_9:
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v19 = v17;
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v37, v21, v45, 16);
  if (v22)
  {
    v25 = v22;
    v26 = *(_QWORD *)v38;
    do
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v38 != v26)
          objc_enumerationMutation(v19);
        v28 = *(const void **)(*((_QWORD *)&v37 + 1) + 8 * v27);
        if (v28)
        {
          linkIDToReorderedPackets = self->_linkIDToReorderedPackets;
          if (linkIDToReorderedPackets)
            CFDictionaryRemoveValue((CFMutableDictionaryRef)linkIDToReorderedPackets, *(const void **)(*((_QWORD *)&v37 + 1) + 8 * v27));
          linkIDToRequestTimeStampAndRTT = self->_linkIDToRequestTimeStampAndRTT;
          if (linkIDToRequestTimeStampAndRTT)
            CFDictionaryRemoveValue((CFMutableDictionaryRef)linkIDToRequestTimeStampAndRTT, v28);
          linkIDToHBCounter = self->_linkIDToHBCounter;
          if (linkIDToHBCounter)
            CFDictionaryRemoveValue((CFMutableDictionaryRef)linkIDToHBCounter, v28);
        }
        ++v27;
      }
      while (v25 != v27);
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v23, (uint64_t)&v37, v24, v45, 16);
    }
    while (v25);
  }

  objc_msgSend_GlobalLink(IDSFoundationLog, v32, v33, v34, (_QWORD)v37);
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    activeProbingLinkIDs = self->_activeProbingLinkIDs;
    *(_DWORD *)buf = 138412546;
    v42 = v19;
    v43 = 2112;
    v44 = activeProbingLinkIDs;
    _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "flushLinkProbingStatus: linkIDs: %@, activeProbingLinkIDs: %@", buf, 0x16u);
  }

}

- (void)sendStatsRequestForClient:(id)a3
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  char isKindOfClass;
  const char *v12;
  uint64_t v13;
  double v14;
  void *Value;
  NSObject *v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  NSMutableDictionary *linkIDToCandidatePairs;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  double v39;
  NSObject *v40;
  int v41;
  NSObject *v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CFSTR("linkid-key"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v4, v8, (uint64_t)CFSTR("ids-extchannel-stat-identifier-key"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      Value = 0;
      if (v4 && CFSTR("linkid-key"))
        Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("linkid-key"));
      v16 = Value;
      v17 = 0;
      if (v4 && CFSTR("ids-extchannel-stat-identifier-key"))
        v17 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ids-extchannel-stat-identifier-key"));
      v18 = v17;
      objc_msgSend_GlobalLink(IDSFoundationLog, v19, v20, v21);
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v41 = 138412546;
        v42 = v16;
        v43 = 2112;
        v44 = v18;
        _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "sendStatsRequestForClient: linkID: %@, statIdentifier: %@", (uint8_t *)&v41, 0x16u);
      }

      linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
      if (linkIDToCandidatePairs
        && v16
        && (v27 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v16)) != 0)
      {
        v28 = v27;
        if (objc_msgSend_isRelayStunCandidatePair(v27, v23, v24, v25))
        {
          v32 = ids_monotonic_time();
          objc_msgSend_setLastStatsReport_(v28, v33, v34, v32);
          if (objc_msgSend_isQUIC(v28, v35, v36, v37))
            objc_msgSend_sendQUICStatsRequestWithOptions_(v28, v38, (uint64_t)v4, v39);
          else
            objc_msgSend_sendStatsRequest_options_(v28, v38, 0, v39, v4);
        }
        else
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v29, v30, v31);
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            sub_19BAF3A2C();

        }
      }
      else
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v23, v24, v25);
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          sub_19BAF39CC();
      }

      goto LABEL_23;
    }
  }
  else
  {

  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v12, v13, v14);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    sub_19BAF3A8C();
LABEL_23:

}

- (void)sendStatsRequest:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  double v8;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *linkIDToStatsData;
  NSMutableDictionary *v11;
  NSMutableDictionary *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  int isRelayStunCandidatePair;
  const char *v31;
  uint64_t v32;
  double v33;
  char isSelfQRSession;
  double v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  double v41;
  void *v42;
  const char *v43;
  double v44;
  void *v45;
  const char *v46;
  double v47;
  void *v48;
  const char *v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  const char *v55;
  uint64_t v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  CFMutableDictionaryRef v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  double v67;
  const char *v68;
  double v69;
  void *v70;
  void *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v7 = ids_monotonic_time();
  v8 = v7;
  if (!self->_linkIDToStatsData)
  {
    Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    linkIDToStatsData = self->_linkIDToStatsData;
    self->_linkIDToStatsData = Mutable;

  }
  v71 = v4;
  v11 = (NSMutableDictionary *)objc_msgSend_mutableCopy(v4, v5, v6, v7);
  v12 = self->_linkIDToStatsData;
  self->_linkIDToStatsData = v11;

  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v13, v14, 0.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v72, v17, v76, 16);
  if (v18)
  {
    v22 = v18;
    v23 = *(_QWORD *)v73;
    v70 = v15;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v73 != v23)
          objc_enumerationMutation(v15);
        v25 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * i);
        v26 = objc_msgSend_state(v25, v19, v20, v21);
        isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v25, v27, v28, v29);
        isSelfQRSession = objc_msgSend_isSelfQRSession(v25, v31, v32, v33);
        if ((unint64_t)(v26 - 5) >= 0xFFFFFFFFFFFFFFFELL && (isSelfQRSession & 1) == 0)
        {
          objc_msgSend_lastStatsReport(v25, v19, v20, v21);
          v36 = v8 - v35;
          v21 = (double)objc_msgSend_statsIntervalInSeconds(v25, v37, v38, v35);
          if (v36 >= v21)
          {
            v39 = (int)objc_msgSend_linkID(v25, v19, v20, v21);
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v40, (uint64_t)CFSTR("%d-send"), v41, v39);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v71, v43, (uint64_t)v42, v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v46, (uint64_t)CFSTR("%d-recv"), v47, v39);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v71, v49, (uint64_t)v48, v50);
            v51 = (void *)objc_claimAutoreleasedReturnValue();

            if (v45)
            {
              if (v51)
              {
                objc_msgSend_unsignedIntValue(v45, v52, v53, v54);
                objc_msgSend_unsignedIntValue(v51, v55, v56, v57);
                if (isRelayStunCandidatePair)
                {
                  if ((objc_msgSend_isQUIC(v25, v58, v59, v60) & 1) != 0)
                  {
                    v63 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    objc_msgSend_setLastStatsReport_(v25, v64, v65, v8);
                    objc_msgSend_sendQUICStatsRequestWithOptions_(v25, v66, (uint64_t)v63, v67);

                  }
                  else
                  {
                    objc_msgSend_setLastStatsReport_(v25, v61, v62, v8);
                    objc_msgSend_sendStatsRequest_options_(v25, v68, 0, v69, 0);
                  }
                }
              }
            }

            v15 = v70;
          }
        }
      }
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v72, v21, v76, 16);
    }
    while (v22);
  }

}

- (void)setReceivedRemoteDeviceVersion:(BOOL)a3
{
  double v3;
  int v4;
  int receivedRemoteDeviceVersion;
  NSObject *v7;
  _BOOL4 v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  uint64_t v25;
  const char *v26;
  double v27;
  void (**pendingCommandConnectionDataBlock)(void);
  id v29;
  void (**pendingCommandRelayInterfaceInfoBlock)(void);
  int v31;
  const __CFString *v32;
  __int16 v33;
  const __CFString *v34;
  uint64_t v35;

  v4 = a3;
  v35 = *MEMORY[0x1E0C80C00];
  receivedRemoteDeviceVersion = self->_receivedRemoteDeviceVersion;
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (receivedRemoteDeviceVersion == v4)
  {
    if (v8)
    {
      v9 = CFSTR("YES");
      if (self->_receivedRemoteDeviceVersion)
        v10 = CFSTR("YES");
      else
        v10 = CFSTR("NO");
      if (!v4)
        v9 = CFSTR("NO");
      v31 = 138412546;
      v32 = v10;
      v33 = 2112;
      v34 = v9;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: _receivedRemoteDeviceVersion: %@ is the same as receivedRemoteDeviceVersion: %@", (uint8_t *)&v31, 0x16u);
    }
    goto LABEL_22;
  }
  if (v8)
  {
    v11 = CFSTR("NO");
    if (v4)
      v11 = CFSTR("YES");
    v31 = 138412290;
    v32 = v11;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "setReceivedRemoteDeviceVersion: %@", (uint8_t *)&v31, 0xCu);
  }

  self->_receivedRemoteDeviceVersion = v4;
  if (v4)
  {
    objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_relayInterfaceInfoDeliveryStatus_(v15, v16, (uint64_t)self->_cbuuid, v17);

    if (v18 == 1)
      objc_msgSend__sendRelayInterfaceInfo_(self, v19, 0, v21);
    objc_msgSend_sharedInstance(IDSStunConnectionDataController, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_deliveryStatus_(v22, v23, (uint64_t)self->_cbuuid, v24);

    if (!v25)
      objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v26, 0, v27);
    pendingCommandConnectionDataBlock = (void (**)(void))self->_pendingCommandConnectionDataBlock;
    if (pendingCommandConnectionDataBlock)
    {
      pendingCommandConnectionDataBlock[2]();
      v29 = self->_pendingCommandConnectionDataBlock;
      self->_pendingCommandConnectionDataBlock = 0;

    }
    pendingCommandRelayInterfaceInfoBlock = (void (**)(void))self->_pendingCommandRelayInterfaceInfoBlock;
    if (pendingCommandRelayInterfaceInfoBlock)
    {
      pendingCommandRelayInterfaceInfoBlock[2]();
      v7 = self->_pendingCommandRelayInterfaceInfoBlock;
      self->_pendingCommandRelayInterfaceInfoBlock = 0;
LABEL_22:

    }
  }
}

- (void)setRemoteDeviceVersion:(unsigned int)a3
{
  double v3;
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  NSMutableArray *v15;
  const char *v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  int v47;
  void *v48;
  const char *v49;
  double v50;
  const char *v51;
  uint64_t v52;
  double v53;
  NSObject *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t v65[128];
  uint8_t buf[4];
  void *v67;
  _BYTE v68[128];
  uint64_t v69;

  v4 = *(_QWORD *)&a3;
  v69 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, *(uint64_t *)&a3, v3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v67) = v4;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: version: %u", buf, 8u);
  }

  self->_remoteDeviceVersion = v4;
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRemoteDeviceVersion_(v10, v11, v4, v12);

  objc_msgSend_setReceivedRemoteDeviceVersion_(self, v13, 1, v14);
  if (self->_remoteDeviceVersion == 1)
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v15 = self->_localCandidateList;
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v61, v17, v68, 16);
    if (v18)
    {
      v22 = v18;
      v23 = *(_QWORD *)v62;
      *(_QWORD *)&v21 = 138412290;
      v55 = v21;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v62 != v23)
            objc_enumerationMutation(v15);
          v25 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
          if (objc_msgSend_radioAccessTechnology(v25, v19, v20, *(double *)&v21, v55) == 8)
          {
            objc_msgSend_setRadioAccessTechnology_(v25, v19, 5, *(double *)&v21);
            objc_msgSend_GlobalLink(IDSFoundationLog, v26, v27, v28);
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v55;
              v67 = v25;
              _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: update local %@ local RAT from NR to LTE", buf, 0xCu);
            }

          }
        }
        v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v61, *(double *)&v21, v68, 16);
      }
      while (v22);
    }

    objc_msgSend_allValues(self->_tokenToCandidatePairs, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v57, 0.0, v65, 16);
    if (v35)
    {
      v39 = v35;
      v40 = *(_QWORD *)v58;
      *(_QWORD *)&v38 = 138412290;
      v56 = v38;
      do
      {
        for (j = 0; j != v39; ++j)
        {
          if (*(_QWORD *)v58 != v40)
            objc_enumerationMutation(v33);
          v42 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * j);
          objc_msgSend_local(v42, v36, v37, *(double *)&v38, v56);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = objc_msgSend_radioAccessTechnology(v43, v44, v45, v46);

          if (v47 == 8)
          {
            objc_msgSend_local(v42, v36, v37, *(double *)&v38);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setRadioAccessTechnology_(v48, v49, 5, v50);

            objc_msgSend_GlobalLink(IDSFoundationLog, v51, v52, v53);
            v54 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v56;
              v67 = v42;
              _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: update candidate pair %@ local RAT from NR to LTE", buf, 0xCu);
            }

          }
        }
        v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v57, *(double *)&v38, v65, 16);
      }
      while (v39);
    }

  }
}

- (BOOL)_sendInfoRequest:(id)a3 relaySessionID:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  const char *v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  void *v28;
  const char *v29;
  double v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  char *v39;
  BOOL v40;
  NSObject *v41;
  const char *v43;
  uint64_t v44;
  double v45;
  int v46;
  const char *v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  double v52;
  IDSGlobalLink *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t buf[4];
  _BYTE v60[28];
  __int16 v61;
  id v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v54 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v8, v9, v10);
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v55, v13, v63, 16);
  if (!v14)
    goto LABEL_14;
  v18 = v14;
  v19 = *(_QWORD *)v56;
  while (2)
  {
    for (i = 0; i != v18; ++i)
    {
      if (*(_QWORD *)v56 != v19)
        objc_enumerationMutation(v11);
      v21 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
      objc_msgSend_groupID(v21, v15, v16, v17);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_isEqualToString_(v22, v23, (uint64_t)v6, v24))
        goto LABEL_11;
      objc_msgSend_sessionID(v21, v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isEqualToString_(v28, v29, (uint64_t)v7, v30) & 1) == 0)
      {

LABEL_11:
        continue;
      }
      v34 = objc_msgSend_state(v21, v31, v32, v33);

      if (v34 == 4)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          v46 = objc_msgSend_linkID(v21, v43, v44, v45);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v60 = v46;
          *(_WORD *)&v60[4] = 2112;
          *(_QWORD *)&v60[6] = v6;
          *(_WORD *)&v60[14] = 2112;
          *(_QWORD *)&v60[16] = v7;
          _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "send info request using link %d for group %@, session %@.", buf, 0x1Cu);
        }

        if (objc_msgSend_isQUIC(v21, v47, v48, v49))
          objc_msgSend_sendQUICInfoRequest(v21, v50, v51, v52);
        else
          objc_msgSend_sendInfoRequest_(v21, v50, 0, v52);
        v40 = 1;
        v38 = v11;
        goto LABEL_24;
      }
    }
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v55, v17, v63, 16);
    if (v18)
      continue;
    break;
  }
LABEL_14:

  if (v54->_state < 2)
  {
    v40 = 0;
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v35, v36, v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v39 = _IDSLinkStateStrings[v54->_state];
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)v60 = v54;
      *(_WORD *)&v60[8] = 2080;
      *(_QWORD *)&v60[10] = v39;
      *(_WORD *)&v60[18] = 2112;
      *(_QWORD *)&v60[20] = v6;
      v61 = 2112;
      v62 = v7;
      _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip sending info request for group %@, session %@.", buf, 0x2Au);
    }
    v40 = 0;
LABEL_24:

  }
  return v40;
}

- (BOOL)_getSessionParticipants:(id)a3 relaySessionID:(id)a4 options:(id)a5
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  id v13;
  const char *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  const char *v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  _BOOL4 v35;
  const char *v36;
  uint64_t v37;
  double v38;
  NSObject *v39;
  char *v40;
  BOOL v41;
  NSObject *v42;
  const char *v44;
  uint64_t v45;
  double v46;
  int v47;
  __CFDictionary *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t SessionInfoReqID;
  const char *v54;
  double v55;
  void *v56;
  const char *v57;
  double v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  double v66;
  void *v67;
  NSObject *v68;
  const char *v69;
  double v70;
  const char *v71;
  double v72;
  id v74;
  id v75;
  IDSGlobalLink *v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint8_t buf[4];
  _BYTE v83[28];
  __int16 v84;
  id v85;
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v76 = self;
  v77 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12);
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v78, v15, v86, 16);
  if (!v18)
    goto LABEL_14;
  v20 = *(_QWORD *)v79;
  while (2)
  {
    for (i = 0; i != v18; ++i)
    {
      if (*(_QWORD *)v79 != v20)
        objc_enumerationMutation(v13);
      v22 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
      objc_msgSend_groupID(v22, v16, v17, v19);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_isEqualToString_(v23, v24, (uint64_t)v8, v25))
        goto LABEL_11;
      objc_msgSend_sessionID(v22, v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v9, v31) & 1) == 0)
      {

LABEL_11:
        continue;
      }
      v35 = objc_msgSend_state(v22, v32, v33, v34) == 4;

      if (v35)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v19);
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          v47 = objc_msgSend_linkID(v22, v44, v45, v46);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v83 = v47;
          *(_WORD *)&v83[4] = 2112;
          *(_QWORD *)&v83[6] = v8;
          *(_WORD *)&v83[14] = 2112;
          *(_QWORD *)&v83[16] = v9;
          _os_log_impl(&dword_19B949000, v42, OS_LOG_TYPE_DEFAULT, "request participants session-info using link %d for group %@, session %@.", buf, 0x1Cu);
        }

        v48 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
        CFDictionarySetValue(v48, CFSTR("gl-option-sessioninfo-request-type"), &unk_1E3C868C8);
        v49 = (void *)MEMORY[0x1E0CB37E8];
        SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(v22, v50, v51, v52);
        objc_msgSend_numberWithUnsignedInt_(v49, v54, SessionInfoReqID, v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        if (v56)
        {
          CFDictionarySetValue(v48, CFSTR("gl-option-sessioninfo-request-id"), v56);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF3B34();
        }

        objc_msgSend_objectForKey_(v77, v57, (uint64_t)CFSTR("gl-option-sessioninfo-command-flag"), v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = objc_msgSend_unsignedIntValue(v59, v60, v61, v62);

        if ((_DWORD)v63)
        {
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v64, v63, v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          if (v67)
          {
            CFDictionarySetValue(v48, CFSTR("gl-option-sessioninfo-command-flag"), v67);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF3AB8();
          }

        }
        if (objc_msgSend_isQUIC(v22, v64, v65, v66))
          objc_msgSend_sendQUICSessionInfoRequestWithOptions_(v22, v71, (uint64_t)v48, v72);
        else
          objc_msgSend_sendSessionInfoRequest_options_(v22, v71, 0, v72, v48);

        goto LABEL_43;
      }
    }
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v78, v19, v86, 16);
    if (v18)
      continue;
    break;
  }
LABEL_14:

  if (v77)
  {
    if (v76->_state >= 2)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v36, v37, v38);
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = _IDSLinkStateStrings[v76->_state];
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)v83 = v76;
        *(_WORD *)&v83[8] = 2080;
        *(_QWORD *)&v83[10] = v40;
        *(_WORD *)&v83[18] = 2112;
        *(_QWORD *)&v83[20] = v8;
        v84 = 2112;
        v85 = v9;
        _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip sending session-info request for group %@, session %@.", buf, 0x2Au);
      }

      goto LABEL_19;
    }
    OSLogHandleForTransportCategory();
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v83 = v8;
      *(_WORD *)&v83[8] = 2112;
      *(_QWORD *)&v83[10] = v9;
      _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, "trying cached response for group %@, session %@.", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v74 = v8;
        v75 = v9;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("trying cached response for group %@, session %@."));
        if (_IDSShouldLog())
        {
          v74 = v8;
          v75 = v9;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("trying cached response for group %@, session %@."));
        }
      }
    }
    objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(v76, v69, (uint64_t)v77, v70, 0, 0, 0, 0, v74, v75);
LABEL_43:
    v41 = 1;
  }
  else
  {
LABEL_19:
    v41 = 0;
  }

  return v41;
}

- (BOOL)_getSessionStreamInfo:(id)a3 relaySessionID:(id)a4 options:(id)a5
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const __CFDictionary *v12;
  double v13;
  void *Value;
  const char *v15;
  uint64_t v16;
  char v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  double v29;
  NSMutableDictionary *linkIDToCandidatePairs;
  id v31;
  void *v32;
  const __CFDictionary *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  int v45;
  NSMutableDictionary *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  NSMutableDictionary *v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  unsigned int SessionInfoReqID;
  const char *v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  void *v69;
  double v70;
  NSMutableDictionary *v71;
  unsigned int v72;
  id v73;
  void *v74;
  const __CFDictionary *v75;
  void *v76;
  const char *v77;
  void *v78;
  double v79;
  NSMutableDictionary *v80;
  void *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  double v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  double v89;
  const char *v90;
  uint64_t v91;
  double v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  double v96;
  const char *v97;
  uint64_t v98;
  double v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  double v103;
  int v104;
  const char *v105;
  uint64_t v106;
  double v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  double v111;
  const char *v112;
  uint64_t v113;
  double v114;
  const char *v115;
  uint64_t v116;
  double v117;
  const char *v118;
  uint64_t v119;
  double v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  double v128;
  NSObject *v129;
  const char *v130;
  uint64_t v131;
  double v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  double v136;
  void *v137;
  const char *v138;
  BOOL v139;
  void *v141;
  const char *v142;
  uint64_t v143;
  double v144;
  void *v145;
  const char *v146;
  double v147;
  char isEqualToString;
  const char *v149;
  uint64_t v150;
  double v151;
  const char *v152;
  double v153;
  void *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  double v158;
  const char *v159;
  uint64_t v160;
  double v161;
  const char *v162;
  double v163;
  void *v164;
  const char *v165;
  double v166;
  void *v167;
  const char *v168;
  double v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  double v176;
  const char *v177;
  void *v178;
  void *v179;
  const char *v180;
  double v181;
  uint64_t v182;
  void *v183;
  id v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  void *v188;
  uint8_t buf[4];
  _BYTE v190[10];
  void *v191;
  unsigned int v192;
  __int16 v193;
  unsigned int v194;
  __int16 v195;
  id v196;
  __int16 v197;
  id v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v12 = (const __CFDictionary *)a5;
  Value = 0;
  if (v12)
  {
    v10 = CFSTR("gl-option-linkid");
    if (CFSTR("gl-option-linkid"))
      Value = (void *)CFDictionaryGetValue(v12, CFSTR("gl-option-linkid"));
  }
  v17 = objc_msgSend_intValue(Value, v10, v11, v13);
  v19 = 0;
  if (v12 && CFSTR("gl-option-sessioninfo-link-id-to-query"))
    v19 = (void *)CFDictionaryGetValue(v12, CFSTR("gl-option-sessioninfo-link-id-to-query"));
  v22 = objc_msgSend_intValue(v19, v15, v16, v18);
  v24 = (char)v22;
  v25 = 0x1E0CB3000uLL;
  if (self->_linkIDToCandidatePairs)
  {
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v20, v24, v23);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (v28)
    {
      linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v26, v24, v29);
      v31 = v8;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (const __CFDictionary *)linkIDToCandidatePairs;
      v25 = 0x1E0CB3000;
      v34 = (void *)CFDictionaryGetValue(v33, v32);
      v186 = objc_msgSend_relayLinkID(v34, v35, v36, v37);

      v8 = v31;
    }
    else
    {
      v186 = objc_msgSend_relayLinkID(0, v26, v27, v29);
    }

  }
  else
  {
    v186 = objc_msgSend_relayLinkID(0, v20, v21, v23);
  }
  v41 = 0;
  if (v12)
  {
    v38 = CFSTR("stream-info-generation-counter");
    if (CFSTR("stream-info-generation-counter"))
      v41 = (void *)CFDictionaryGetValue(v12, CFSTR("stream-info-generation-counter"));
  }
  v187 = objc_msgSend_unsignedIntValue(v41, v38, v39, v40);
  v45 = v22 << 24;
  v46 = self->_linkIDToCandidatePairs;
  v47 = v17;
  if (!v45)
  {
    if (v46)
    {
      objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v42, v17, v44);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = v48;
      if (v48)
      {
        v53 = self->_linkIDToCandidatePairs;
        objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v49, v47, v51);
        goto LABEL_23;
      }
LABEL_25:
      SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(v48, v49, v50, v51);
      goto LABEL_26;
    }
LABEL_24:
    SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(0, v42, v43, v44);
    goto LABEL_27;
  }
  if (!v46)
    goto LABEL_24;
  objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v42, v24, v44);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = v48;
  if (!v48)
    goto LABEL_25;
  v53 = self->_linkIDToCandidatePairs;
  objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v49, v24, v51);
LABEL_23:
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = (void *)CFDictionaryGetValue((CFDictionaryRef)v53, v54);
  SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(v55, v56, v57, v58);

  v25 = 0x1E0CB3000;
LABEL_26:

LABEL_27:
  v63 = 0x1E3C19000uLL;
  objc_msgSend_GlobalLink(IDSFoundationLog, v60, v61, v62);
  v64 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)v190 = v187;
    *(_WORD *)&v190[4] = 1024;
    *(_DWORD *)&v190[6] = v47;
    LOWORD(v191) = 1024;
    *(_DWORD *)((char *)&v191 + 2) = v24;
    HIWORD(v191) = 1024;
    v192 = v186;
    v193 = 1024;
    v194 = SessionInfoReqID;
    v195 = 2112;
    v196 = v8;
    v197 = 2112;
    v198 = v9;
    _os_log_impl(&dword_19B949000, v64, OS_LOG_TYPE_DEFAULT, "request session info (gc:%u, linkID:%1d, linkIDToQuery:%1d, relayLinkID:%04x, reqID:%08x) for group %@, session %@.", buf, 0x34u);
  }

  if (self->_linkIDToCandidatePairs)
  {
    objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v65, v47, v67);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if (v69)
    {
      v71 = self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v68, v47, v70);
      v72 = SessionInfoReqID;
      v73 = v8;
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = (const __CFDictionary *)v71;
      v25 = 0x1E0CB3000;
      v76 = (id)CFDictionaryGetValue(v75, v74);

      v8 = v73;
      SessionInfoReqID = v72;
      v63 = 0x1E3C19000;
    }
    else
    {
      v76 = 0;
    }

  }
  else
  {
    v76 = 0;
  }
  if (self->_linkIDToCandidatePairs)
  {
    objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v65, v24, v67);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    if (v78)
    {
      v80 = self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(*(void **)(v25 + 2024), v77, v24, v79);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = (id)CFDictionaryGetValue((CFDictionaryRef)v80, v81);

    }
    else
    {
      v82 = 0;
    }

  }
  else
  {
    v82 = 0;
  }
  v188 = v9;
  if (!objc_msgSend_isSharedQRSession(v76, v65, v66, v67)
    || (objc_msgSend_isSharedQRSession(v82, v83, v84, v85) & 1) == 0)
  {
    objc_msgSend_GlobalLink(*(void **)(v63 + 2856), v83, v84, v85);
    v129 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v190 = v76;
      *(_WORD *)&v190[8] = 2112;
      v191 = v82;
      _os_log_impl(&dword_19B949000, v129, OS_LOG_TYPE_DEFAULT, "try to query with invalid candidate pairs: %@, %@ return", buf, 0x16u);
    }
    goto LABEL_51;
  }
  objc_msgSend_remote(v76, v83, v84, v85);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v185 = SessionInfoReqID;
  if (!objc_msgSend_external(v86, v87, v88, v89))
    goto LABEL_56;
  objc_msgSend_remote(v82, v90, v91, v92);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_external(v93, v94, v95, v96))
  {
LABEL_55:

LABEL_56:
    goto LABEL_57;
  }
  v184 = v8;
  objc_msgSend_remote(v76, v97, v98, v99);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v104 = *(unsigned __int8 *)(objc_msgSend_external(v100, v101, v102, v103) + 1);
  objc_msgSend_remote(v82, v105, v106, v107);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  if (v104 != *(unsigned __int8 *)(objc_msgSend_external(v108, v109, v110, v111) + 1))
  {

    v8 = v184;
    goto LABEL_55;
  }
  objc_msgSend_remote(v76, v112, v113, v114);
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  v182 = objc_msgSend_external(v183, v115, v116, v117);
  objc_msgSend_remote(v82, v118, v119, v120);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  v125 = objc_msgSend_external(v121, v122, v123, v124);
  LOBYTE(v182) = IsSameSA(v182, v125);

  v8 = v184;
  if ((v182 & 1) == 0)
  {
    objc_msgSend_GlobalLink(*(void **)(v63 + 2856), v126, v127, v128);
    v129 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_remote(v76, v130, v131, v132);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_remote(v82, v134, v135, v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v190 = v133;
      *(_WORD *)&v190[8] = 2112;
      v191 = v137;
      v138 = "linkID's server: %@ is different from linkIDToQuery's server: %@, return";
LABEL_63:
      _os_log_impl(&dword_19B949000, v129, OS_LOG_TYPE_DEFAULT, v138, buf, 0x16u);

      goto LABEL_51;
    }
    goto LABEL_51;
  }
LABEL_57:
  objc_msgSend_sessionID(v76, v126, v127, v128);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sessionID(v82, v142, v143, v144);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v141, v146, (uint64_t)v145, v147);

  if ((isEqualToString & 1) != 0)
  {
    if (!v76)
    {
      v139 = 0;
      goto LABEL_53;
    }
    v129 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-request-type"), &unk_1E3C868E0);
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v152, v24, v153);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    if (v154)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-link-id-to-query"), v154);
      v155 = v185;
    }
    else
    {
      v155 = v185;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_19BAF3AB8();
    }

    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v162, v186, v163);
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    if (v164)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-relay-link-id"), v164);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF3D34();
    }

    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v165, v155, v166);
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    if (v167)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-request-id"), v167);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF3B34();
    }

    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v168, v187, v169);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    if (v170)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-generation-counter"), v170);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF3CB4();
    }

    if (v12
      && CFSTR("stream-info-published-streams")
      && (v171 = (id)CFDictionaryGetValue(v12, CFSTR("stream-info-published-streams"))) != 0)
    {
      v172 = v171;
      CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-published-streams"), v171);

    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF3C34();
      if (!v12)
        goto LABEL_89;
    }
    else if (!v12)
    {
      goto LABEL_89;
    }
    if (CFSTR("stream-info-subscribed-streams"))
    {
      v173 = (id)CFDictionaryGetValue(v12, CFSTR("stream-info-subscribed-streams"));
      if (v173)
      {
        v174 = v173;
        CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-subscribed-streams"), v173);

LABEL_91:
        v177 = CFSTR("stream-info-max-concurrent-streams");
        if (CFSTR("stream-info-max-concurrent-streams"))
        {
          v178 = (id)CFDictionaryGetValue(v12, CFSTR("stream-info-max-concurrent-streams"));
          if (v178)
          {
            v179 = v178;
            CFDictionarySetValue((CFMutableDictionaryRef)v129, CFSTR("gl-option-sessioninfo-max-concurrent-streams"), v178);

          }
        }
        goto LABEL_94;
      }
    }
LABEL_89:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF3BB4();
      if (v12)
        goto LABEL_91;
    }
    else if (v12)
    {
      goto LABEL_91;
    }
LABEL_94:
    if (objc_msgSend_isQUIC(v76, v177, v175, v176))
      objc_msgSend_sendQUICSessionInfoRequestWithOptions_(v76, v180, (uint64_t)v129, v181);
    else
      objc_msgSend_sendSessionInfoRequest_options_(v76, v180, 0, v181, v129);
    v139 = 1;
    goto LABEL_52;
  }
  objc_msgSend_GlobalLink(*(void **)(v63 + 2856), v149, v150, v151);
  v129 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_sessionID(v76, v156, v157, v158);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sessionID(v82, v159, v160, v161);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v190 = v133;
    *(_WORD *)&v190[8] = 2112;
    v191 = v137;
    v138 = "linkID's session %@, linkIDToQuery's session: %@ are different, return";
    goto LABEL_63;
  }
LABEL_51:
  v139 = 0;
LABEL_52:

LABEL_53:
  return v139;
}

- (void)getSessionInfo:(id)a3 relaySessionID:(id)a4 requestType:(int64_t)a5 options:(id)a6
{
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  double v23;
  NSObject *v24;
  const char *v25;
  double v26;
  int v27;
  id v28;
  __int16 v29;
  id v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  v16 = v12;
  if (a5 == 2)
  {
    if ((objc_msgSend__getSessionStreamInfo_relaySessionID_options_(self, v13, (uint64_t)v10, v15, v11, v12) & 1) != 0)
      goto LABEL_12;
  }
  else if (a5 == 1)
  {
    objc_msgSend_objectForKey_(v12, v13, (uint64_t)CFSTR("gl-option-info-request-type"), v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_unsignedIntegerValue(v17, v18, v19, v20);

    if (v21 == 1)
    {
      if ((objc_msgSend__sendInfoRequest_relaySessionID_(self, v22, (uint64_t)v10, v23, v11) & 1) != 0)
        goto LABEL_12;
    }
    else if ((objc_msgSend__getSessionParticipants_relaySessionID_options_(self, v22, (uint64_t)v10, v23, v11, v16) & 1) != 0)
    {
      goto LABEL_12;
    }
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v27 = 138412802;
    v28 = v10;
    v29 = 2112;
    v30 = v11;
    v31 = 1024;
    v32 = a5;
    _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "get session info failed for group %@, session %@, request-type %d.", (uint8_t *)&v27, 0x1Cu);
  }

  objc_msgSend__notifySessionInfoReceived_relayGroupID_relaySessionID_status_(self, v25, 0, v26, v10, v11, 5);
LABEL_12:

}

- (void)updateSessionParticipants:(id)a3 relaySessionID:(id)a4 participants:(id)a5
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  const char *v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  int isEqualToString;
  NSObject *v33;
  const char *v34;
  double v35;
  __int128 v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  id v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v37 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v38, 0.0, v46, 16);
  if (v15)
  {
    v19 = v15;
    v20 = *(_QWORD *)v39;
    *(_QWORD *)&v18 = 138412546;
    v36 = v18;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v39 != v20)
          objc_enumerationMutation(v13);
        v22 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend_sessionID(v22, v16, v17, *(double *)&v18, v36);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_isEqualToString_(v23, v24, (uint64_t)v9, v25) & 1) != 0)
        {
          objc_msgSend_groupID(v22, v26, v27, v28);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToString = objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v8, v31);

          if (isEqualToString)
          {
            objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, *(double *)&v18);
            v33 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v36;
              v43 = v8;
              v44 = 2112;
              v45 = v9;
              _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "updateSessionParticipants for group %@, session %@.", buf, 0x16u);
            }

            objc_msgSend_updateParticipantIDMap_(v22, v34, (uint64_t)v37, v35);
          }
        }
        else
        {

        }
      }
      v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v38, *(double *)&v18, v46, 16);
    }
    while (v19);
  }

}

- (void)registerPluginWithOptions:(id)a3 relayGroupID:(id)a4
{
  const __CFDictionary *v6;
  const char *v7;
  id v8;
  double v9;
  const char *v10;
  void *v11;
  double v12;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v14;
  void *v15;
  const void *Value;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int isSharedQRSession;
  const char *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  double v38;
  NSObject *v39;
  const char *v40;
  double v41;
  void *v42;
  int linkIDForPlugin;
  int v44;
  id v45;
  __int16 v46;
  const __CFDictionary *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = (const __CFDictionary *)a3;
  v8 = a4;
  if (self->_linkIDToCandidatePairs)
  {
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v7, self->_linkIDForPlugin, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v10, self->_linkIDForPlugin, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v14);

    }
    else
    {
      v15 = 0;
    }

  }
  else
  {
    v15 = 0;
  }
  Value = 0;
  if (v6 && CFSTR("gl-option-plugin-name"))
    Value = CFDictionaryGetValue(v6, CFSTR("gl-option-plugin-name"));
  objc_msgSend_setObject_forKey_(self->_pluginNameToPluginOptionsDict, v7, (uint64_t)v6, v9, Value);
  objc_msgSend_groupID(v15, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v20, v21, (uint64_t)v8, v22)
    && objc_msgSend_state(v15, v23, v24, v25) == 4)
  {
    isSharedQRSession = objc_msgSend_isSharedQRSession(v15, v26, v27, v28);

    if (isSharedQRSession)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v44 = 138412546;
        v45 = v8;
        v46 = 2112;
        v47 = v6;
        _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "Register plugin for group %@ and options %@", (uint8_t *)&v44, 0x16u);
      }

      if (objc_msgSend_isQUIC(v15, v34, v35, v36))
        objc_msgSend_sendQUICPluginRegistrationRequestWithOptions_(v15, v37, (uint64_t)v6, v38);
      else
        objc_msgSend_sendQRPluginRegistrationRequest_options_(v15, v37, 0, v38, v6);
      goto LABEL_21;
    }
  }
  else
  {

  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
  v39 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_objectForKeyedSubscript_(v6, v40, (uint64_t)CFSTR("gl-option-plugin-name"), v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    linkIDForPlugin = self->_linkIDForPlugin;
    v44 = 138412802;
    v45 = v42;
    v46 = 2112;
    v47 = (const __CFDictionary *)v8;
    v48 = 1024;
    v49 = linkIDForPlugin;
    _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "FAILED: Register plugin %@ for group %@. linkID %d is not for a valid link", (uint8_t *)&v44, 0x1Cu);

  }
LABEL_21:

}

- (void)setForceTCPFallbackOnWiFi:(BOOL)a3
{
  double v3;
  _BOOL4 v4;
  NSObject *v6;
  const __CFString *v7;
  int v8;
  const __CFString *v9;
  uint64_t v10;

  v4 = a3;
  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    if (v4)
      v7 = CFSTR("YES");
    v8 = 138412290;
    v9 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "Setting ForceTCPFallbackOnWiFi %@", (uint8_t *)&v8, 0xCu);
  }

  self->_forceTCPFallbackOnWiFi = v4;
}

- (void)setForceTCPFallbackOnCell:(BOOL)a3
{
  double v3;
  _BOOL4 v4;
  NSObject *v6;
  const __CFString *v7;
  int v8;
  const __CFString *v9;
  uint64_t v10;

  v4 = a3;
  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    if (v4)
      v7 = CFSTR("YES");
    v8 = 138412290;
    v9 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "Setting ForceTCPFallbackOnCell %@", (uint8_t *)&v8, 0xCu);
  }

  self->_forceTCPFallbackOnCell = v4;
}

- (id)_findVirtualCandidatePair:(id)a3
{
  return 0;
}

- (unint64_t)createAliasForParticipantID:(unint64_t)a3 salt:(id)a4 relayGroupID:(id)a5
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  const char *v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  const char *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  const char *v30;
  uint64_t v31;
  double v32;
  int isSharedQRSession;
  uint64_t AliasForParticipantID_salt;
  const char *v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  NSObject *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  unint64_t v46;
  __int16 v47;
  id v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12);
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v41, v15, v49, 16);
  if (v16)
  {
    v20 = v16;
    v21 = *(_QWORD *)v42;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v42 != v21)
          objc_enumerationMutation(v13);
        v23 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
        objc_msgSend_groupID(v23, v17, v18, v19, (_QWORD)v41);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v24, v25, (uint64_t)v9, v26)
          && objc_msgSend_state(v23, v27, v28, v29) == 4)
        {
          isSharedQRSession = objc_msgSend_isSharedQRSession(v23, v30, v31, v32);

          if (isSharedQRSession)
          {
            AliasForParticipantID_salt = objc_msgSend_createAliasForParticipantID_salt_(v23, v17, a3, v19, v8);
            if (AliasForParticipantID_salt)
            {
              v38 = AliasForParticipantID_salt;
              v39 = v13;
              goto LABEL_17;
            }
          }
        }
        else
        {

        }
      }
      v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v41, v19, v49, 16);
    }
    while (v20);
  }

  objc_msgSend_GlobalLink(IDSFoundationLog, v35, v36, v37);
  v39 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    v46 = a3;
    v47 = 2112;
    v48 = v8;
    _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "createAliasForParticipantID could not find participantID %llu salt %@", buf, 0x16u);
  }
  v38 = 0;
LABEL_17:

  return v38;
}

- (unint64_t)participantIDForAlias:(unint64_t)a3 salt:(id)a4 relayGroupID:(id)a5
{
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  const char *v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  int v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  double v38;
  int isEqualToString;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  double v47;
  int isSharedQRSession;
  const __CFString *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  unint64_t v53;
  NSObject *v54;
  unint64_t v56;
  __CFString *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t buf[4];
  unint64_t v63;
  __int16 v64;
  const __CFString *v65;
  __int16 v66;
  id v67;
  _BYTE v68[128];
  uint64_t v69;

  v56 = a3;
  v69 = *MEMORY[0x1E0C80C00];
  v57 = (__CFString *)a4;
  v7 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v8, v9, v10);
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v58, v13, v68, 16);
  if (!v14)
    goto LABEL_20;
  v17 = v14;
  v18 = *(_QWORD *)v59;
  v19 = 134218242;
  do
  {
    for (i = 0; i != v17; ++i)
    {
      if (*(_QWORD *)v59 != v18)
        objc_enumerationMutation(v11);
      v21 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * i);
      objc_msgSend_groupID(v21, v15, v16, *(double *)&v19, v56);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_isEqualToString_(v22, v23, (uint64_t)v7, v24)
        || objc_msgSend_state(v21, v25, v26, v27) != 4)
      {

LABEL_12:
        objc_msgSend_groupID(v21, v32, v33, v34);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v36, v37, (uint64_t)v7, v38);

        if (isEqualToString)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, *(double *)&v19);
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            v44 = objc_msgSend_state(v21, v41, v42, v43);
            isSharedQRSession = objc_msgSend_isSharedQRSession(v21, v45, v46, v47);
            *(_DWORD *)buf = 134218242;
            v49 = CFSTR("NO");
            if (isSharedQRSession)
              v49 = CFSTR("YES");
            v63 = v44;
            v64 = 2112;
            v65 = v49;
            _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "participantIDForAlias: found candidate pair with state: %lu, isSharedSession: %@", buf, 0x16u);
          }

        }
        continue;
      }
      v31 = objc_msgSend_isSharedQRSession(v21, v28, v29, v30);

      if (!v31)
        goto LABEL_12;
      v35 = objc_msgSend_participantIDForAlias_salt_(v21, v32, v56, v34, v57);
      if (v35)
      {
        v53 = v35;
        v54 = v11;
        goto LABEL_23;
      }
    }
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v58, *(double *)&v19, v68, 16);
  }
  while (v17);
LABEL_20:

  objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
  v54 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    v63 = v56;
    v64 = 2112;
    v65 = v57;
    v66 = 2112;
    v67 = v7;
    _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "participantIDForAlias could not find candidate pair that matches the alias %llu salt %@, for %@", buf, 0x20u);
  }
  v53 = 0;
LABEL_23:

  return v53;
}

- (BOOL)link:(id)a3 didReceivePacket:(id *)a4 fromDeviceUniqueID:(id)a5 cbuuid:(id)a6
{
  id v10;
  id v11;
  id v12;
  int64x2_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  const char *v19;
  char v20;
  uint64_t var34;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  NSObject *v26;
  int64_t var2;
  NSObject *v28;
  int v29;
  uint64_t v30;
  const char *v31;
  int v32;
  double *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  double *v37;
  _BOOL4 v38;
  int var14;
  char v40;
  int v41;
  const char *v42;
  void *v43;
  double v44;
  NSMutableDictionary *linkIDToCandidatePairs;
  void *v46;
  void *v47;
  char v48;
  const char *v49;
  double v50;
  NSMutableDictionary *channelToCandidatePairs;
  CFDictionaryRef v52;
  uint64_t v53;
  const __CFDictionary *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  unsigned int v58;
  double v59;
  void *v60;
  NSMutableDictionary *localRemoteRelayLinkIDToVirtualCandidatePairs;
  void *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  char v67;
  const char *v68;
  void *v69;
  double v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  double v82;
  _BOOL4 v83;
  const char *v84;
  uint64_t v85;
  double v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  double v90;
  unsigned __int8 *v91;
  const char *v92;
  CFDictionaryRef v93;
  __int128 v94;
  NSObject *v95;
  int64_t v96;
  NSObject *v97;
  const char *v98;
  void *v99;
  __int128 v100;
  NSObject *v101;
  int64_t v102;
  char v103;
  int v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  int var22;
  char v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  double v114;
  const char *v115;
  unsigned int *v116;
  unsigned int *v117;
  NSMutableDictionary *v118;
  void *v119;
  const char *v120;
  double v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  double v125;
  void *v126;
  const char *v127;
  double v128;
  const char *v129;
  uint64_t v130;
  double firstDataReceivedTime;
  NSObject *v132;
  const __CFString *v133;
  const char *v134;
  void *v135;
  double v136;
  NSMutableDictionary *v137;
  void *v138;
  void *v139;
  char *var0;
  int64_t v141;
  void *v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  double v146;
  char *v147;
  id v148;
  const char *v149;
  uint64_t v150;
  double v151;
  const void *v152;
  uint64_t var24;
  double v154;
  const char *v155;
  const char *v156;
  uint64_t v157;
  double v158;
  NSObject *v159;
  _BOOL4 v160;
  int64_t v161;
  int v162;
  int v163;
  int64_t v164;
  int v165;
  int v166;
  id WeakRetained;
  const char *v168;
  double v169;
  NSObject *v171;
  uint64_t v172;
  CFDictionaryRef theDict;
  const __CFDictionary *theDictb;
  CFDictionaryRef theDicta;
  sockaddr_storage *__dst;
  void *key;
  sockaddr_storage *p_var18;
  char v179;
  char v180;
  _BOOL4 v181;
  uint8_t v182[4];
  int64_t v183;
  __int16 v184;
  void *v185;
  __int16 v186;
  char *v187;
  __int16 v188;
  char *v189;
  char __str[16];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _BYTE buf[32];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  if (a4)
  {
    if (!a4->var2 && a4->var33 == 200)
    {
      LOBYTE(a4) = 0;
      goto LABEL_182;
    }
    v13 = vdupq_n_s64(1uLL);
    v13.i64[0] = a4->var2;
    *(int64x2_t *)&self->_totalBytesReceived = vaddq_s64(*(int64x2_t *)&self->_totalBytesReceived, v13);
    v16 = ids_monotonic_time();
    v17 = v16;
    if (a4->var13)
    {
      v18 = objc_msgSend_headerOverhead(v10, v14, v15, v16);
      v20 = objc_msgSend__processProtoPacket_fromDeviceUniqueID_cbuuid_arrivalTime_headerOverhead_(self, v19, (uint64_t)a4, v17, v11, v12, v18);
LABEL_7:
      LOBYTE(a4) = v20;
      goto LABEL_182;
    }
    var34 = a4->var34;
    if (a4->var2 > 3 || a4->var34)
    {
      if (a4->var34)
      {
        if ((IDSSimpleUInt16List_HasItem((uint64_t)&self->_channelNumberList, a4->var34) & 1) != 0)
        {
          v181 = (var34 & 0xF0) == 96;
          if ((StunUtilProcessIncomingChannelDataWithoutChannelHeader((unsigned __int16 **)a4, (var34 & 0xF0) == 96, LOWORD(a4->var2)) & 1) != 0)goto LABEL_13;
          goto LABEL_19;
        }
      }
      else
      {
        var34 = *(unsigned __int16 *)a4->var0;
        if ((IDSSimpleUInt16List_HasItem((uint64_t)&self->_channelNumberList, *(unsigned __int16 *)a4->var0) & 1) != 0)
        {
          v181 = (var34 & 0xF0) == 96;
          if ((StunUtilProcessIncomingChannelData((unsigned __int16 **)a4, (var34 & 0xF0) == 96, v23, v24) & 1) != 0)
          {
LABEL_13:
            if (a4->var22 >= 1 && a4->var23[0].var19)
            {
              if (a4->var23[0].var14 < 1)
                v25 = 0;
              else
                v25 = a4->var23[0].var15[0];
              OSLogHandleForTransportCategory();
              v97 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v25;
                _os_log_impl(&dword_19B949000, v97, OS_LOG_TYPE_DEFAULT, "received command message with remote relay linkID %u", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v172 = v25;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("received command message with remote relay linkID %u"));
                  if (_IDSShouldLog())
                  {
                    v172 = v25;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("received command message with remote relay linkID %u"));
                  }
                }
              }
              v20 = objc_msgSend__processChannelDataCommandMessage_remoteRelayLinkID_channelNumber_fromDeviceUniqueID_cbuuid_arrivalTime_(self, v98, (uint64_t)a4, v17, v25, var34, v11, v12, v172);
              goto LABEL_7;
            }
            if (IDSSimpleUInt16List_HasItem((uint64_t)&self->_reallocChannelList, var34))
              objc_msgSend__processReallocChannelData_channelNumber_fromDeviceUniqueID_cbuuid_arrivalTime_(self, v92, (uint64_t)a4, v17, var34, v11, v12);
            goto LABEL_40;
          }
LABEL_19:
          OSLogHandleForTransportCategory();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            var2 = a4->var2;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = var2;
            _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "drop channel data (%zdB).", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("drop channel data (%zdB)."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("drop channel data (%zdB)."));
            }
          }
          goto LABEL_181;
        }
      }
      if ((var34 & 0xC0) != 0)
      {
        if (self->_shouldProcessBasebandNotification && a4->var2 >= 4 && *(_DWORD *)a4->var0 == -272716322)
        {
          LODWORD(var34) = self->_basebandPacketChannelNumber;
          OSLogHandleForIDSCategory();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEBUG, "receive baseband notification packet.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
            _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive baseband notification packet."));
          v181 = 0;
          v29 = 1;
          goto LABEL_41;
        }
      }
      else if (a4->var2 >= 20 && *((_DWORD *)a4->var0 + 1) == 1118048801)
      {
        v30 = objc_msgSend_headerOverhead(v10, v22, v23, v24);
        objc_msgSend__processStunPacket_fromDeviceUniqueID_cbuuid_arrivalTime_headerOverhead_(self, v31, (uint64_t)a4, v17, v11, v12, v30);
        LODWORD(var34) = 0;
        v181 = 0;
        v29 = 0;
        v32 = 0;
        goto LABEL_42;
      }
      LODWORD(var34) = 0;
    }
    v181 = 0;
LABEL_40:
    v29 = 0;
LABEL_41:
    v32 = 1;
LABEL_42:
    v33 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
    v37 = v33;
    if (v33)
    {
      v38 = IsSameSA((uint64_t)(v33 + 1), (uint64_t)&a4->var17);
      if (v38)
        v38 = IsSameSA((uint64_t)(v37 + 17), (uint64_t)&a4->var18);
      if (!v32)
        goto LABEL_181;
    }
    else
    {
      v38 = 0;
      if (!v32)
      {
LABEL_181:
        LOBYTE(a4) = 1;
        goto LABEL_182;
      }
    }
    var14 = a4->var23[0].var14;
    if (v38 && *((unsigned __int16 *)v37 + 132) == (_DWORD)var34 && var14 <= 0)
    {
      if (v37)
        v40 = v29;
      else
        v40 = 1;
      if ((v40 & 1) == 0)
        v37[36] = v17;
      if (self->_supportChannelData)
      {
        v41 = *(_DWORD *)v37;
        a4->var24 = *(_DWORD *)v37;
        if (v181)
        {
          if (self->_linkIDToCandidatePairs)
          {
            objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v34, (char)v41, v36);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            if (v43)
            {
              linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
              objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v42, a4->var24, v44);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v46);

            }
            else
            {
              v47 = 0;
            }

            v99 = v47;
          }
          else
          {
            v99 = 0;
          }
          key = v99;
          v108 = objc_msgSend_capabilityFlags(v99, v34, v35, v36);
          var22 = a4->var22;
          if (var22 >= 1)
          {
            v110 = v108;
            v111 = 0;
            v112 = 536;
            do
            {
              if ((v110 & 8) != 0 && (*((_BYTE *)&a4->var0 + v112) & 1) != 0)
              {
                StunUtilGetMappedParticipantID((uint64_t)a4, v111, key, 1);
                var22 = a4->var22;
              }
              ++v111;
              v112 += 96;
            }
            while (v111 < var22);
          }
          v179 = -1;
LABEL_131:

          v48 = v179;
          if ((v29 & 1) == 0)
            goto LABEL_132;
          goto LABEL_63;
        }
      }
LABEL_62:
      v48 = -1;
      if ((v29 & 1) == 0)
      {
LABEL_132:
        v180 = v48;
        v113 = (unsigned int *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, a4->var24);
        v115 = (const char *)v180;
        if ((int)v115 < 1)
          v116 = 0;
        else
          v116 = (unsigned int *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, (int)v115);
        if (v116)
          v117 = v116;
        else
          v117 = v113;
        if (!v117[77])
        {
          v118 = self->_linkIDToCandidatePairs;
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v115, *v117, v114);
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v118, v120, (uint64_t)v119, v121);
          v122 = (void *)objc_claimAutoreleasedReturnValue();

          if (v122)
          {
            objc_msgSend_linkMetrics(v122, v123, v124, v125);
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_event_(v126, v127, (uint64_t)CFSTR("glr"), v128);

          }
        }
        if (v116)
          ++v116[77];
        if (v113)
          ++v113[77];
        kdebug_trace();
        firstDataReceivedTime = self->_firstDataReceivedTime;
        if (firstDataReceivedTime == 0.0 && a4->var2 >= 1)
        {
          self->_reportDataReceivedTime = 1;
          self->_firstDataReceivedTime = v17;
          objc_msgSend_GlobalLink(IDSFoundationLog, v129, v130, firstDataReceivedTime);
          v132 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
          {
            if (self->_reportClientPacketTime)
              v133 = CFSTR("YES");
            else
              v133 = CFSTR("NO");
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v133;
            _os_log_impl(&dword_19B949000, v132, OS_LOG_TYPE_DEFAULT, "didReceivePacket: _firstDataReceivedTime, _reportClientPacketTime: %@", buf, 0xCu);
          }

          if (self->_reportClientPacketTime)
          {
            objc_msgSend__reportSessionSetupTime(self, v129, v130, firstDataReceivedTime);
            self->_reportDataReceivedTime = 0;
          }
        }
        if (v181)
        {
          if (self->_linkIDToCandidatePairs)
          {
            objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v129, a4->var24, firstDataReceivedTime);
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            if (v135)
            {
              v137 = self->_linkIDToCandidatePairs;
              objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v134, a4->var24, v136);
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              v139 = (id)CFDictionaryGetValue((CFDictionaryRef)v137, v138);

            }
            else
            {
              v139 = 0;
            }

          }
          else
          {
            v139 = 0;
          }
          if ((a4->var23[0].var20 & 0x400) != 0)
          {
            var0 = a4->var0;
            v141 = a4->var2;
            objc_msgSend_hbhDecKey(v139, v129, v130, firstDataReceivedTime);
            v142 = (void *)objc_claimAutoreleasedReturnValue();
            IDSHBHDecryptDataWithKey((uint64_t)var0, v141, v142);
            v143 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v143)
            {
              objc_msgSend_GlobalLink(IDSFoundationLog, v144, v145, v146);
              v171 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
                sub_19BAF3DB4();

              goto LABEL_181;
            }
            a4->var2 = objc_msgSend_length(v143, v144, v145, v146);
            v147 = a4->var0;
            v148 = objc_retainAutorelease(v143);
            v152 = (const void *)objc_msgSend_bytes(v148, v149, v150, v151);
            memcpy(v147, v152, a4->var2);

          }
        }
        var24 = a4->var24;
        v154 = ids_monotonic_time();
        objc_msgSend_reportLinkMetricsForLinkID_lastPacketReceivedTime_lastPacketSentTime_(self, v155, var24, v154, 0.0);
        objc_msgSend_GlobalLink(IDSFoundationLog, v156, v157, v158);
        v159 = objc_claimAutoreleasedReturnValue();
        v160 = os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT);
        if (v180 == -1)
        {
          if (v160)
          {
            v164 = a4->var2;
            if ((_DWORD)var34)
              v165 = 82;
            else
              v165 = 80;
            v166 = a4->var24;
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v164;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v165;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v166;
            _os_log_impl(&dword_19B949000, v159, OS_LOG_TYPE_DEFAULT, "GLR %zdB (%c %d)", buf, 0x18u);
          }

          goto LABEL_180;
        }
        if (v160)
        {
          v161 = a4->var2;
          if ((_DWORD)var34)
            v162 = 82;
          else
            v162 = 80;
          v163 = a4->var24;
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = v161;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v162;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v180;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v163;
          _os_log_impl(&dword_19B949000, v159, OS_LOG_TYPE_DEFAULT, "GLR %zdB (%c %d/%d)", buf, 0x1Eu);
        }

        v48 = v180;
LABEL_173:
        a4->var24 = v48;
LABEL_180:
        a4->var6 = 1;
        a4->var27 = v17;
        WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didReceivePacket_fromDeviceUniqueID_cbuuid_(WeakRetained, v168, (uint64_t)self, v169, a4, v11, v12);

        goto LABEL_181;
      }
LABEL_63:
      if (v48 == -1)
        goto LABEL_180;
      goto LABEL_173;
    }
    if (a4->var15)
      goto LABEL_62;
    __dst = &a4->var17;
    p_var18 = &a4->var18;
    channelForStunCandidatePair((uint64_t)&a4->var17, (uint64_t)&a4->var18, var34);
    key = (void *)objc_claimAutoreleasedReturnValue();
    channelToCandidatePairs = self->_channelToCandidatePairs;
    if (channelToCandidatePairs)
    {
      if (key)
      {
        v52 = (id)CFDictionaryGetValue((CFDictionaryRef)channelToCandidatePairs, key);
        if (v52)
        {
          if ((v29 & 1) == 0)
          {
            v54 = v52;
            objc_msgSend_setLastIncomingPacketTime_(v52, v49, v53, v17);
            v52 = v54;
          }
          goto LABEL_70;
        }
      }
    }
    if (v29 && self->_basebandPacketLinkID)
    {
      if (!self->_linkIDToCandidatePairs)
        goto LABEL_86;
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v49, self->_basebandPacketLinkID, v50);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v69)
        goto LABEL_86;
      theDictb = (const __CFDictionary *)self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v68, self->_basebandPacketLinkID, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      theDicta = (id)CFDictionaryGetValue(theDictb, v71);

      if (theDicta)
      {
        objc_msgSend_remote(theDicta, v72, v73, v74);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = objc_msgSend_external(v75, v76, v77, v78);
        if (IsSameSA(v79, (uint64_t)p_var18))
        {
          v83 = objc_msgSend_channelNumber(theDicta, v80, v81, v82) == var34;

          if (v83)
          {
            objc_msgSend_local(theDicta, v84, v85, v86);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            v91 = (unsigned __int8 *)objc_msgSend_address(v87, v88, v89, v90);

            memcpy(__dst, v91, *v91);
            a4->var24 = self->_basebandPacketLinkID;

            v52 = 0;
LABEL_70:
            if (!self->_supportChannelData)
            {
              v179 = -1;
LABEL_121:

              goto LABEL_131;
            }
            theDict = v52;
            a4->var24 = objc_msgSend_linkID(v52, v49, v53, v50);
            if (var14 < 1)
            {
              v67 = -1;
LABEL_113:
              v52 = theDict;
              v179 = v67;
              if (v181)
              {
                v103 = objc_msgSend_capabilityFlags(theDict, v55, v56, v57);
                v104 = a4->var22;
                if (v104 >= 1)
                {
                  v105 = v103;
                  v106 = 0;
                  v107 = 536;
                  do
                  {
                    if ((v105 & 8) != 0 && (*((_BYTE *)&a4->var0 + v107) & 1) != 0)
                    {
                      StunUtilGetMappedParticipantID((uint64_t)a4, v106, theDict, 1);
                      v104 = a4->var22;
                    }
                    ++v106;
                    v107 += 96;
                  }
                  while (v106 < v104);
                }
                v52 = theDict;
              }
              goto LABEL_121;
            }
            v58 = objc_msgSend_relayLinkID(theDict, v55, v56, v57);
            localRemoteRelayLinkIDForVirtualStunCandidatePair(v58, (const char *)a4->var23[0].var15[0], v59);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            localRemoteRelayLinkIDToVirtualCandidatePairs = self->_localRemoteRelayLinkIDToVirtualCandidatePairs;
            if (localRemoteRelayLinkIDToVirtualCandidatePairs)
            {
              if (v60)
              {
                v62 = (id)CFDictionaryGetValue((CFDictionaryRef)localRemoteRelayLinkIDToVirtualCandidatePairs, v60);
                if (v62)
                {
                  v66 = v62;
                  v67 = objc_msgSend_linkID(v62, v63, v64, v65);

                  goto LABEL_113;
                }
              }
            }
            *(_QWORD *)&v100 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v203 = v100;
            v204 = v100;
            v201 = v100;
            v202 = v100;
            v199 = v100;
            v200 = v100;
            *(_OWORD *)buf = v100;
            *(_OWORD *)&buf[16] = v100;
            v196 = v100;
            v197 = v100;
            v194 = v100;
            v195 = v100;
            v192 = v100;
            v193 = v100;
            *(_OWORD *)__str = v100;
            v191 = v100;
            OSLogHandleForTransportCategory();
            v101 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
            {
              v102 = a4->var2;
              *(_DWORD *)v182 = 134218754;
              v183 = v102;
              v184 = 2112;
              v185 = key;
              v186 = 2080;
              v187 = SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
              v188 = 2080;
              v189 = SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var18);
              _os_log_impl(&dword_19B949000, v101, OS_LOG_TYPE_DEFAULT, "No valid virtual candidate pair. Drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]", v182, 0x2Au);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
                SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var18);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("No valid virtual candidate pair. Drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]"));
                if (_IDSShouldLog())
                {
                  SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
                  SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var18);
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("No valid virtual candidate pair. Drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]"));
                }
              }
            }

            goto LABEL_111;
          }
        }
        else
        {

        }
        v93 = theDicta;
      }
      else
      {
LABEL_86:
        v93 = 0;
      }

    }
    *(_QWORD *)&v94 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v203 = v94;
    v204 = v94;
    v201 = v94;
    v202 = v94;
    v199 = v94;
    v200 = v94;
    *(_OWORD *)buf = v94;
    *(_OWORD *)&buf[16] = v94;
    v196 = v94;
    v197 = v94;
    v194 = v94;
    v195 = v94;
    v192 = v94;
    v193 = v94;
    *(_OWORD *)__str = v94;
    v191 = v94;
    OSLogHandleForTransportCategory();
    v95 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      v96 = a4->var2;
      *(_DWORD *)v182 = 134218754;
      v183 = v96;
      v184 = 2112;
      v185 = key;
      v186 = 2080;
      v187 = SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
      v188 = 2080;
      v189 = SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var18);
      _os_log_impl(&dword_19B949000, v95, OS_LOG_TYPE_DEFAULT, "drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]", v182, 0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
        SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var18);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]"));
        if (_IDSShouldLog())
        {
          SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
          SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var18);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]"));
        }
      }
    }
LABEL_111:

    goto LABEL_181;
  }
LABEL_182:

  return (char)a4;
}

- (void)link:(id)a3 didMitigateCollision:(BOOL)a4
{
  ((void (*)(IDSGFTMetricsCollector *, char *, BOOL))MEMORY[0x1E0DE7D20])(self->_metricsCollector, sel_didMitigateCollision_, a4);
}

- (void)linkTransactionIDMismatchDetected:(id)a3
{
  double v3;
  const char *v5;
  double v6;

  objc_msgSend_transactionIDMismatchDetected(self->_metricsCollector, a2, (uint64_t)a3, v3);
  objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v5, (uint64_t)&stru_1E3C2E4E8, v6, CFSTR("NWLinkError"), CFSTR("transactionIDMismatch"), 15);
}

- (void)link:(id)a3 didFailConnectionOfType:(id)a4
{
  ((void (*)(IDSGFTMetricsCollector *, char *, id))MEMORY[0x1E0DE7D20])(self->_metricsCollector, sel_didFailConnectionOfType_, a4);
}

- (BOOL)_qrLinkLimitExceededWithNewLinkType:(unsigned __int8)a3 cellularRelayLinkCount:(unsigned __int16)a4 wifiRelayLinkCount:(unsigned __int16)a5
{
  unsigned int v5;
  BOOL v6;

  if (self->_reduceRelayLinkCreation || self->_reduceCellularUsage)
    v5 = 2;
  else
    v5 = 8;
  if (a5 + a4 >= v5)
    return 1;
  v6 = a3 == 4 || a3 == 8;
  if (v6 && a4 < 2u)
    return 0;
  return (a3 - 3) < 0xFFFFFFFE || a5 > 1u;
}

- (unsigned)_getNewLinkType:(id)a3 remoteInterface:(int *)a4
{
  void *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  NSMutableArray *v20;
  const char *v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  int v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  double v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unsigned __int16 v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  double v50;
  int isRelayStunCandidatePair;
  __int16 v52;
  int v53;
  void *v54;
  const char *v55;
  double v56;
  char isEqualToString;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  int isCellularStunCandidate;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  int v70;
  char v71;
  char v72;
  __int16 v73;
  __int16 v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  double v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  NSMutableDictionary *retryCountPerLinkType;
  CFMutableDictionaryRef Mutable;
  NSMutableDictionary *v85;
  const char *v86;
  uint64_t v87;
  double v88;
  const char *v89;
  uint64_t v90;
  double v91;
  NSObject *v92;
  const char *v93;
  NSObject *v94;
  uint32_t v95;
  NSMutableDictionary *v96;
  void *v97;
  const char *v98;
  double v99;
  const char *v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  NSMutableDictionary *v104;
  const char *v105;
  double v106;
  void *v107;
  const char *v108;
  double v109;
  void *v110;
  const char *v111;
  double v112;
  void *v114;
  IDSGlobalLink *v115;
  int *v116;
  unsigned __int16 v117;
  int v118;
  id v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint8_t buf[4];
  _BYTE v133[10];
  void *v134;
  __int16 v135;
  void *v136;
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v119 = a3;
  v116 = a4;
  *a4 = 0;
  GLUtilGetRemainingInterfaces(self->_interfaceAddressArray);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  if (!v6)
  {
    LOBYTE(v19) = 0;
    goto LABEL_82;
  }
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v128, 0.0, v139, 16);
  if (v9)
  {
    v13 = v9;
    v118 = 0;
    v14 = *(_QWORD *)v129;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v129 != v14)
          objc_enumerationMutation(v8);
        v16 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * i);
        objc_msgSend_delegatedName(v16, v10, v11, v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v17)
        {
          if (objc_msgSend_isCellular(v16, v10, v11, v12))
            v18 = 1;
          else
            v18 = 2;
          v118 |= v18;
        }
      }
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v128, v12, v139, 16);
    }
    while (v13);
  }
  else
  {
    v118 = 0;
  }
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v20 = self->_remoteCandidateList;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v124, v22, v138, 16);
  if (v23)
  {
    v27 = v23;
    v28 = *(_QWORD *)v125;
    do
    {
      for (j = 0; j != v27; ++j)
      {
        if (*(_QWORD *)v125 != v28)
          objc_enumerationMutation(v20);
        v30 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * j);
        if ((objc_msgSend_linkFlags(v30, v24, v25, v26) & 4) == 0)
        {
          if (objc_msgSend_isCellularStunCandidate(v30, v24, v25, v26))
            v31 = 1;
          else
            v31 = 2;
          *v116 |= v31;
        }
      }
      v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v124, v26, v138, 16);
    }
    while (v27);
  }
  v114 = v8;

  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v115 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v32, v33, 0.0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v120, v36, v137, 16);
  if (!v37)
  {
    v117 = 0;
    v42 = 0;
    v43 = 0;
    goto LABEL_65;
  }
  v41 = v37;
  v117 = 0;
  v42 = 0;
  v43 = 0;
  v44 = *(_QWORD *)v121;
  do
  {
    v45 = 0;
    do
    {
      if (*(_QWORD *)v121 != v44)
        objc_enumerationMutation(v34);
      v46 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * v45);
      v47 = objc_msgSend_state(v46, v38, v39, v40);
      isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v46, v48, v49, v50);
      v52 = isRelayStunCandidatePair;
      if (v119)
      {
        if (v47 == 4)
          v53 = isRelayStunCandidatePair;
        else
          v53 = 0;
        if (v53 != 1)
          goto LABEL_55;
        objc_msgSend_sessionID(v46, v38, v39, v40);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v119, v55, (uint64_t)v54, v56);

        if ((isEqualToString & 1) == 0)
          goto LABEL_55;
      }
      else if (isRelayStunCandidatePair)
      {
        if (v47 != 4)
          goto LABEL_55;
      }
      else if (v47 != 3)
      {
        goto LABEL_55;
      }
      objc_msgSend_local(v46, v38, v39, v40);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v58, v59, v60, v61);

      objc_msgSend_remote(v46, v63, v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = objc_msgSend_isCellularStunCandidate(v66, v67, v68, v69);

      if (v70)
        v71 = 8;
      else
        v71 = 4;
      if (v70)
        v72 = 2;
      else
        v72 = 1;
      if (isCellularStunCandidate)
        v73 = v52;
      else
        v73 = 0;
      v117 += v73;
      if (isCellularStunCandidate)
        v74 = 0;
      else
        v74 = v52;
      v42 += v74;
      if (!isCellularStunCandidate)
        v71 = v72;
      v43 |= v71;
LABEL_55:
      ++v45;
    }
    while (v41 != v45);
    v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v38, (uint64_t)&v120, v40, v137, 16);
    v41 = v75;
  }
  while (v75);
LABEL_65:

  objc_msgSend_GlobalLink(IDSFoundationLog, v76, v77, v78);
  v79 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    GLUtilInterfaceTypeListToString(v118);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    GLUtilInterfaceTypeListToString(*v116);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    GLUtilLinkTypeListToString(v43);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)v133 = v80;
    *(_WORD *)&v133[8] = 2112;
    v134 = v81;
    v135 = 2112;
    v136 = v82;
    _os_log_impl(&dword_19B949000, v79, OS_LOG_TYPE_DEFAULT, "current interface types L:%@, R:%@, link types: %@.", buf, 0x20u);

  }
  retryCountPerLinkType = v115->_retryCountPerLinkType;
  if (!retryCountPerLinkType)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v85 = v115->_retryCountPerLinkType;
    v115->_retryCountPerLinkType = (NSMutableDictionary *)Mutable;

    retryCountPerLinkType = v115->_retryCountPerLinkType;
  }
  v19 = GLUtilNewQRLinkType(v43, v118, *v116, retryCountPerLinkType);
  if ((_DWORD)v19)
  {
    if (objc_msgSend__qrLinkLimitExceededWithNewLinkType_cellularRelayLinkCount_wifiRelayLinkCount_(v115, v86, v19, v88, v117, v42))
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v89, v90, v91);
      v92 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v133 = v117;
        *(_WORD *)&v133[4] = 1024;
        *(_DWORD *)&v133[6] = v42;
        v93 = "skip set up new QR link, exceeded limit cellularLinkcount: %d wifiLinkCount: %d";
        v94 = v92;
        v95 = 14;
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    v96 = v115->_retryCountPerLinkType;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v89, v19, v91);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v96, v98, (uint64_t)v97, v99);
    v92 = objc_claimAutoreleasedReturnValue();

    if (v92)
    {
      v103 = objc_msgSend_intValue(v92, v100, v101, v102) + 1;
      v104 = v115->_retryCountPerLinkType;
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v105, v103, v106);
    }
    else
    {
      v104 = v115->_retryCountPerLinkType;
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v100, 1, v102);
    }
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v108, v19, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v104, v111, (uint64_t)v107, v112, v110);

  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v86, v87, v88);
    v92 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v93 = "set up new QR link is not needed.";
      v94 = v92;
      v95 = 2;
LABEL_75:
      _os_log_impl(&dword_19B949000, v94, OS_LOG_TYPE_DEFAULT, v93, buf, v95);
LABEL_76:
      LOBYTE(v19) = 0;
    }
  }

  v8 = v114;
LABEL_82:

  return v19;
}

- (id)_findCandidatePairWithRelaySessionID:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  id v12;
  double v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  const char *v18;
  double v19;
  char isEqualToString;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, 0.0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v22, v9, v26, 16);
  if (v12)
  {
    v14 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v14)
          objc_enumerationMutation(v7);
        v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend_isVirtualRelayStunCandidatePair(v16, v10, v11, v13) & 1) == 0)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v16, v10, v11, v13))
          {
            objc_msgSend_sessionID(v16, v10, v11, v13);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v4, v18, (uint64_t)v17, v19);

            if ((isEqualToString & 1) != 0)
            {
              v12 = v16;
              goto LABEL_13;
            }
          }
        }
      }
      v12 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v22, v13, v26, 16);
      if (v12)
        continue;
      break;
    }
  }
LABEL_13:

  return v12;
}

- (BOOL)_isSharedQRSession:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  const char *v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  char isSharedQRSession;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, 0.0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v25, v9, v29, 16);
  if (v12)
  {
    v14 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v26 != v14)
          objc_enumerationMutation(v7);
        v16 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend_sessionID(v16, v10, v11, v13);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v4, v18, (uint64_t)v17, v19))
        {
          isSharedQRSession = objc_msgSend_isSharedQRSession(v16, v20, v21, v22);

          if ((isSharedQRSession & 1) != 0)
          {
            LOBYTE(v12) = 1;
            goto LABEL_12;
          }
        }
        else
        {

        }
      }
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v25, v13, v29, 16);
    }
    while (v12);
  }
LABEL_12:

  return v12;
}

- (void)_requestNewTwoWayQRAllocation:(id)a3
{
  double v3;
  int NewLinkType_remoteInterface;
  const char *v6;
  uint64_t v7;
  double v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[5];
  int v13;
  char v14;
  uint8_t buf[12];
  int v16;

  v16 = -1431655766;
  NewLinkType_remoteInterface = objc_msgSend__getNewLinkType_remoteInterface_(self, a2, (uint64_t)a3, v3, &v16);
  if (NewLinkType_remoteInterface)
  {
    v9 = NewLinkType_remoteInterface;
    self->_hasPendingAllocation = 1;
    im_primary_queue();
    v10 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_19B9FF42C;
    v12[3] = &unk_1E3C20298;
    v13 = v16;
    v12[4] = self;
    v14 = v9;
    dispatch_async(v10, v12);

  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "skip set up new QR link, no more QR link is required or not possible", buf, 2u);
    }

  }
}

- (BOOL)_setupNewQRLinkIfNecessary:(id)a3
{
  char *v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  char *v14;
  BOOL v15;
  NSObject *v16;
  NSString *idsSessionID;
  const char *v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  _QWORD v26[5];
  id v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  NSString *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (char *)a3;
  if (!objc_msgSend__isSharedQRSession_(self, v5, (uint64_t)v4, v6) || !self->_sharedSessionJoined)
  {
    if (self->_state == 4)
      goto LABEL_4;
LABEL_9:
    objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v14 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      v29 = v14;
      v11 = "skip set up new QR link, GL state [%s].";
      v12 = v10;
      v13 = 12;
      goto LABEL_11;
    }
LABEL_12:
    v15 = 0;
    goto LABEL_19;
  }
  if (self->_state > 4)
    goto LABEL_9;
LABEL_4:
  if (!self->_allowConcurrentQRSetup
    && objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v7, 1, v9, 3, 1, 1))
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v11 = "skip set up new QR link, concurrent QR setup not allowed with a connecting candidate pair.";
      v12 = v10;
      v13 = 2;
LABEL_11:
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!v4)
  {
    v15 = 1;
    goto LABEL_20;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    idsSessionID = self->_idsSessionID;
    *(_DWORD *)buf = 138412546;
    v29 = v4;
    v30 = 2112;
    v31 = idsSessionID;
    _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "set up new QR link for %@, ids-sesion-id %@.", buf, 0x16u);
  }

  objc_msgSend__findCandidatePairWithRelaySessionID_(self, v18, (uint64_t)v4, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_GlobalLink(IDSFoundationLog, v21, v22, v23);
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v29 = v4;
    _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "found candidate pair for QR session %@.", buf, 0xCu);
  }

  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_19B9FF974;
  v26[3] = &unk_1E3C1FA08;
  v26[4] = self;
  v27 = v20;
  v10 = v20;
  IDSTransportThreadAddBlock(v26);

  v15 = 1;
LABEL_19:

LABEL_20:
  return v15;
}

- (id)_convergeSharedSessions:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  int HasDifferentSharedRelayCandidatePair;
  const char *v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  double v46;
  const char *v47;
  uint64_t v48;
  id v49;
  const char *v50;
  double v51;
  void *v52;
  id v53;
  const char *v54;
  uint64_t v55;
  double v56;
  void *v57;
  const char *v58;
  double v59;
  void *v60;
  const char *v61;
  double v62;
  uint64_t v63;
  BOOL v64;
  const char *v65;
  uint64_t v66;
  double v67;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  void *v69;
  const char *v70;
  double v71;
  IDSGlobalLink *v72;
  int linkIDForPlugin;
  const char *v74;
  uint64_t v75;
  double v76;
  const char *v77;
  uint64_t v78;
  double v79;
  int v80;
  int v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  double v85;
  const char *v86;
  uint64_t v87;
  double v88;
  NSObject *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  const char *v93;
  double v94;
  const char *v95;
  uint64_t v96;
  double v97;
  id v98;
  const char *v99;
  double v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t i;
  void *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  double v112;
  NSObject *v113;
  id v114;
  const char *v115;
  double v116;
  uint64_t v118;
  void *v119;
  char v120;
  id v121;
  void *v122;
  char v123;
  _QWORD v124[5];
  id v125;
  _QWORD v126[4];
  id v127;
  void *v128;
  IDSGlobalLink *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint8_t v138[128];
  uint8_t buf[4];
  _BYTE v140[10];
  _BYTE v141[128];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!objc_msgSend_isSharedQRSession(v4, v5, v6, v7))
  {
    v121 = 0;
    goto LABEL_56;
  }
  objc_msgSend_sessionID(v4, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  HasDifferentSharedRelayCandidatePair = GLUtilHasDifferentSharedRelayCandidatePair(v11, v15);

  if (!HasDifferentSharedRelayCandidatePair)
  {
    v121 = 0;
    goto LABEL_55;
  }
  v121 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (!v121)
    v121 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend_GlobalLink(IDSFoundationLog, v17, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v140 = v11;
    _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: start session convergence for session %@.", buf, 0xCu);
  }

  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v21, v22, 0.0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v134, v25, v141, 16);
  v122 = v11;
  if (!v26)
  {
    v120 = 0;
    goto LABEL_41;
  }
  v29 = v26;
  v120 = 0;
  v123 = 0;
  v30 = *(_QWORD *)v135;
  v31 = 67109376;
  v118 = 67109376;
  do
  {
    v32 = 0;
    do
    {
      if (*(_QWORD *)v135 != v30)
        objc_enumerationMutation(v23);
      v33 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * v32);
      if (objc_msgSend_isSharedQRSession(v33, v27, v28, *(double *)&v31, v118))
      {
        objc_msgSend_sessionID(v33, v27, v28, *(double *)&v31);
        v34 = objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_isEqualToString_(v34, v35, (uint64_t)v11, v36) & 1) != 0)
          goto LABEL_14;
        v40 = objc_msgSend_state(v33, v37, v38, v39);

        if (v40 == 4)
        {
          objc_msgSend_allocateTime(v4, v27, v28, *(double *)&v31);
          v42 = v41;
          objc_msgSend_allocateTime(v33, v43, v44, v41);
          if (v42 < *(double *)&v31)
            goto LABEL_27;
          objc_msgSend_allocateTime(v4, v27, v28, *(double *)&v31);
          v46 = v45;
          objc_msgSend_allocateTime(v33, v47, v48, v45);
          if (v46 != *(double *)&v31)
            goto LABEL_20;
          v49 = objc_alloc(MEMORY[0x1E0CB3A28]);
          v52 = (void *)objc_msgSend_initWithUUIDString_(v49, v50, (uint64_t)v11, v51);
          v53 = objc_alloc(MEMORY[0x1E0CB3A28]);
          objc_msgSend_sessionID(v33, v54, v55, v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v60 = (void *)objc_msgSend_initWithUUIDString_(v53, v58, (uint64_t)v57, v59);

          v63 = objc_msgSend_compare_(v52, v61, (uint64_t)v60, v62);
          v64 = v63 == 1;
          v11 = v122;
          if (v64)
          {
LABEL_20:
            if ((objc_msgSend_isDisconnecting(v33, v27, v28, *(double *)&v31) & 1) == 0)
              objc_msgSend_addObject_(v121, v65, (uint64_t)v33, v67);
            serverMaterialExchangeController = self->_serverMaterialExchangeController;
            objc_msgSend_currentlySentMaterials(serverMaterialExchangeController, v65, v66, v67);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v70, (uint64_t)v69, v71);

            v72 = self;
            linkIDForPlugin = self->_linkIDForPlugin;
            if (linkIDForPlugin)
            {
              v11 = v122;
              if (linkIDForPlugin == objc_msgSend_linkID(v33, v27, v28, *(double *)&v31))
              {
                self = v72;
                v72->_linkIDForPlugin = objc_msgSend_linkID(v4, v27, v28, *(double *)&v31);
                objc_msgSend_GlobalLink(IDSFoundationLog, v74, v75, v76);
                v34 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                {
                  v80 = objc_msgSend_linkID(v33, v77, v78, v79);
                  v81 = v72->_linkIDForPlugin;
                  *(_DWORD *)buf = v118;
                  *(_DWORD *)v140 = v80;
                  *(_WORD *)&v140[4] = 1024;
                  *(_DWORD *)&v140[6] = v81;
                  _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: linkID for Plugin is now changed from %d to %d", buf, 0xEu);
                }
                v120 = 1;
LABEL_14:

                goto LABEL_28;
              }
              self = v72;
            }
            else
            {
              self = v72;
              v11 = v122;
            }
          }
          else
          {
LABEL_27:
            v123 = 1;
          }
        }
      }
LABEL_28:
      ++v32;
    }
    while (v29 != v32);
    v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v134, *(double *)&v31, v141, 16);
    v29 = v82;
  }
  while (v82);

  if ((v123 & 1) != 0)
  {
    objc_msgSend_candidatePairToken(v4, v83, v84, v85);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_GlobalLink(IDSFoundationLog, v86, v87, v88);
    v89 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v140 = v23;
      _os_log_impl(&dword_19B949000, v89, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: Should remove the current candidatePair %@.", buf, 0xCu);
    }

    if ((objc_msgSend_isDisconnecting(v4, v90, v91, v92) & 1) == 0)
      objc_msgSend_addObject_(v121, v93, (uint64_t)v4, v94);
LABEL_41:

  }
  if (objc_msgSend_count(v121, v83, v84, v85))
  {
    v119 = v4;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v98 = v121;
    v101 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v99, (uint64_t)&v130, v100, v138, 16);
    if (v101)
    {
      v104 = v101;
      v105 = *(_QWORD *)v131;
      v106 = 138412290;
      do
      {
        for (i = 0; i != v104; ++i)
        {
          if (*(_QWORD *)v131 != v105)
            objc_enumerationMutation(v98);
          v108 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * i);
          objc_msgSend_candidatePairToken(v108, v102, v103, *(double *)&v106, v119);
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_GlobalLink(IDSFoundationLog, v110, v111, v112);
          v113 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v140 = v109;
            _os_log_impl(&dword_19B949000, v113, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: Setting timer to disconnect candidatePairToken %@ for convergence.", buf, 0xCu);
          }

          v126[0] = MEMORY[0x1E0C809B0];
          v126[1] = 3221225472;
          v126[2] = sub_19BA00028;
          v126[3] = &unk_1E3C1FE50;
          v127 = v109;
          v128 = v108;
          v129 = self;
          v114 = v109;
          objc_msgSend_startSessionConvergenceTimer_block_(v108, v115, 5, v116, v126);

        }
        v104 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v102, (uint64_t)&v130, *(double *)&v106, v138, 16);
      }
      while (v104);
    }

    v124[0] = MEMORY[0x1E0C809B0];
    v124[1] = 3221225472;
    v124[2] = sub_19BA00110;
    v124[3] = &unk_1E3C1FA08;
    v124[4] = self;
    v4 = v119;
    v125 = v119;
    IDSTransportThreadAddBlockAfter(v124, 8.0);

    v11 = v122;
  }
  if ((v120 & 1) != 0)
    objc_msgSend__didReceiveRequestToPurgeRegistration(self, v95, v96, v97);
LABEL_55:

LABEL_56:
  return v121;
}

- (void)_notifySessionInfoReceived:(id)a3 relayGroupID:(id)a4 relaySessionID:(id)a5 status:(unsigned int)a6
{
  uint64_t v6;
  id v10;
  id v11;
  id v12;
  id WeakRetained;
  char v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  id v19;
  const char *v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double remoteJoinedUPlusOneTime;
  int v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  int v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v6 = *(_QWORD *)&a6;
  v38 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v14 = objc_opt_respondsToSelector();

  if ((v14 & 1) != 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v30 = 138413058;
      v31 = v11;
      v32 = 2112;
      v33 = v12;
      v34 = 1024;
      v35 = v6;
      v36 = 2112;
      v37 = v10;
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "notify session-info received for group %@, session %@, status: %u: %@.", (uint8_t *)&v30, 0x26u);
    }

    v19 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didReceiveSessionInfo_relayGroupID_relaySessionID_status_(v19, v20, (uint64_t)self, v21, v10, v11, v12, v6);

  }
  if (v10)
  {
    if (self->_isUPlusOneSession)
    {
      objc_msgSend_objectForKeyedSubscript_(v10, v15, (uint64_t)CFSTR("gl-option-sessioninfo-response-participants-key"), v17);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_count(v22, v23, v24, v25);

      if (v26 == 2)
      {
        remoteJoinedUPlusOneTime = self->_remoteJoinedUPlusOneTime;
        if (remoteJoinedUPlusOneTime == 0.0)
        {
          remoteJoinedUPlusOneTime = ids_monotonic_time();
          self->_remoteJoinedUPlusOneTime = remoteJoinedUPlusOneTime;
        }
        objc_msgSend__enableE2E(self, v27, v28, remoteJoinedUPlusOneTime);
      }
    }
  }

}

- (void)candidatePair:(id)a3 didReceiveSessionInfo:(id)a4 status:(unsigned int)a5
{
  uint64_t v5;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  id v19;

  v5 = *(_QWORD *)&a5;
  v8 = a4;
  v9 = a3;
  objc_msgSend_groupID(v9, v10, v11, v12);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sessionID(v9, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend__notifySessionInfoReceived_relayGroupID_relaySessionID_status_(self, v17, (uint64_t)v8, v18, v19, v16, v5);
}

- (void)candidatePair:(id)a3 didReceiveSessionStats:(id)a4 success:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id v9;
  id WeakRetained;
  char v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const __CFString *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  id v39;
  const char *v40;
  uint64_t v41;
  double v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  double v49;
  void *v50;
  uint8_t buf[4];
  id v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  const __CFString *v56;
  __int16 v57;
  id v58;
  uint64_t v59;

  v5 = a5;
  v59 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v11 = objc_opt_respondsToSelector();

  if ((v11 & 1) != 0)
  {
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_groupID(v8, v13, v14, v15);
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sessionID(v8, v17, v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = (void *)v20;
      v22 = CFSTR("NO");
      *(_DWORD *)buf = 138413058;
      v52 = v16;
      if (v5)
        v22 = CFSTR("YES");
      v53 = 2112;
      v54 = v20;
      v55 = 2112;
      v56 = v22;
      v57 = 2112;
      v58 = v9;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "notify session stats received for group %@, session %@, success:%@: %@.", buf, 0x2Au);

    }
    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      objc_msgSend_groupID(v8, v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sessionID(v8, v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
        v31 = CFSTR("YES");
      else
        v31 = CFSTR("NO");
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("notify session stats received for group %@, session %@, success:%@: %@."));

      if (_IDSShouldLog())
      {
        objc_msgSend_groupID(v8, v32, v33, v34, v26, v30, v31, v9);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_sessionID(v8, v36, v37, v38);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("notify session stats received for group %@, session %@, success:%@: %@."));

      }
    }
    v39 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_groupID(v8, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sessionID(v8, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_link_didReceiveSessionStats_relayGroupID_relaySessionID_success_(v39, v48, (uint64_t)self, v49, v9, v43, v47, v5);

  }
}

- (void)_removeChannelFromChannelToCandidatePair:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  unsigned int v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSObject *v29;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *channelToCandidatePairs;
  NSMutableDictionary *v32;
  int v33;
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_local(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_address(v8, v9, v10, v11);

  objc_msgSend_remote(v4, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_external(v16, v17, v18, v19);

  v24 = objc_msgSend_channelNumber(v4, v21, v22, v23);
  channelForStunCandidatePair(v12, v20, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_GlobalLink(IDSFoundationLog, v26, v27, v28);
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v33 = 138412546;
    v34 = v25;
    v35 = 2112;
    v36 = v4;
    _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "remove channel %@ from _channelToCandidatePairs for candidatePair: %@", (uint8_t *)&v33, 0x16u);
  }

  if (!self->_channelToCandidatePairs)
  {
    Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    channelToCandidatePairs = self->_channelToCandidatePairs;
    self->_channelToCandidatePairs = Mutable;

  }
  if (v25)
  {
    v32 = self->_channelToCandidatePairs;
    if (v32)
      CFDictionaryRemoveValue((CFMutableDictionaryRef)v32, v25);
  }

}

- (BOOL)_handleRemapping:(id)a3 errorCode:(unsigned __int16)a4 reconnectQUIC:(BOOL)a5
{
  _BOOL8 v5;
  uint64_t v6;
  __CFString *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  id WeakRetained;
  char v31;
  const char *v32;
  double v33;
  id v34;
  const char *v35;
  double v36;
  const char *v37;
  double v38;
  const char *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  const char *v43;
  double v44;
  const char *v45;
  double v46;
  const char *v47;
  double v48;
  NSObject *v49;
  char *v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  BOOL v55;
  unint64_t v56;
  char hasNoSessionStateTestOptions;
  char v58;
  char *v60;
  char *v61;
  __CFString *v62;
  uint8_t buf[4];
  char *v64;
  __int16 v65;
  char *v66;
  __int16 v67;
  const __CFString *v68;
  __int16 v69;
  const __CFString *v70;
  uint64_t v71;

  v5 = a5;
  v6 = a4;
  v71 = *MEMORY[0x1E0C80C00];
  v8 = (__CFString *)a3;
  v12 = objc_msgSend_state(v8, v9, v10, v11);
  if (v5
    || ((v56 = v12, hasNoSessionStateTestOptions = objc_msgSend_hasNoSessionStateTestOptions(v8, v13, v14, v15), v56 > 4)
      ? (v58 = hasNoSessionStateTestOptions)
      : (v58 = 0),
        (v58 & 1) != 0 || v56 - 2 <= 2))
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_pendingNoSessionStateAllocbind(v8, v17, v18, v19))
        v23 = CFSTR("YES");
      else
        v23 = CFSTR("NO");
      *(_DWORD *)buf = 134218754;
      if (objc_msgSend_hasNoSessionStateTestOptions(v8, v20, v21, v22))
        v24 = CFSTR("YES");
      else
        v24 = CFSTR("NO");
      v64 = (char *)v6;
      if (v5)
        v25 = CFSTR("YES");
      else
        v25 = CFSTR("NO");
      v65 = 2112;
      v66 = (char *)v23;
      v67 = 2112;
      v68 = v24;
      v69 = 2112;
      v70 = v25;
      _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "_handleRemapping: error code: %ld, pendingNoSessionStateAllocbind = %@, hasNoSessionStateTestOptions = %@, reconnectQUIC = %@", buf, 0x2Au);
    }

    if ((objc_msgSend_pendingNoSessionStateAllocbind(v8, v26, v27, v28) & 1) == 0)
    {
      GLUCreateQRNoSessionStateEvent(v8, 237, v6);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v31 = objc_opt_respondsToSelector();

      if ((v31 & 1) != 0)
      {
        v34 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v34, v35, (uint64_t)self, v36, v29);

      }
      objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v32, (uint64_t)v8, v33, 5);
      objc_msgSend__removeChannelFromChannelToCandidatePair_(self, v37, (uint64_t)v8, v38);
      if (self->_isUPlusOneSession)
        objc_msgSend__destroyVirtualRelayLinksForCandidatePair_(self, v39, (uint64_t)v8, v41);
      v42 = objc_msgSend_state(v8, v39, v40, v41);
      objc_msgSend_setState_(v8, v43, 1, v44);
      objc_msgSend_setChannelNumber_(v8, v45, 0, v46);
      objc_msgSend_setLinkID_(v8, v47, 0, v48);
      OSLogHandleForTransportCategory();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v50 = (&_IDSStunCandidatePairStateStrings)[v42];
        *(_DWORD *)buf = 136315650;
        v64 = v50;
        v65 = 2080;
        v66 = off_1EE40A660;
        v67 = 2112;
        v68 = v8;
        _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v61 = off_1EE40A660;
          v62 = v8;
          v60 = (&_IDSStunCandidatePairStateStrings)[v42];
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
          if (_IDSShouldLog())
          {
            v61 = off_1EE40A660;
            v62 = v8;
            v60 = (&_IDSStunCandidatePairStateStrings)[v42];
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
          }
        }
      }
      objc_msgSend_sendAllocbindRequest_isRealloc_inResponseToNoSessionState_reconnectQUIC_(self, v51, (uint64_t)v8, v52, 0, 1, v5, v60, v61, v62);
      objc_msgSend_setPendingNoSessionState_(v8, v53, 1, v54);

    }
    v55 = 1;
  }
  else
  {
    v55 = 0;
  }

  return v55;
}

- (BOOL)_hasConnectedP2pLink
{
  uint64_t v2;
  double v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  double v10;
  uint64_t v11;
  NSObject *i;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  void *v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v15, v6, v21, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v9; i = ((char *)i + 1))
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend_state(v13, v7, v8, v10, (_QWORD)v15) == 3 || objc_msgSend_state(v13, v7, v8, v10) == 4)
          && (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10) & 1) == 0)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v10);
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v20 = v13;
            _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "has connected P2P link: %@", buf, 0xCu);
          }

          LOBYTE(v9) = 1;
          goto LABEL_15;
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v15, v10, v21, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_15:

  return (char)v9;
}

- (void)candidatePair:(id)a3 didReceiveStunErrorResponse:(int64_t)a4 errorCode:(unsigned __int16)a5 didLocalExternalAddressChange:(BOOL)a6
{
  _BOOL4 v6;
  int v7;
  id v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  double v19;
  id WeakRetained;
  char v21;
  void *v22;
  const char *v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  double v30;
  NSObject *v31;
  _QWORD block[4];
  id v33;
  IDSGlobalLink *v34;
  __int16 v35;

  v6 = a6;
  v7 = a5;
  v10 = a3;
  v14 = v10;
  if (a4 == 4080)
  {
    if (!objc_msgSend_isSharedQRSession(v10, v11, v12, v13))
      goto LABEL_25;
    if (v7 > 607)
    {
      if (v7 != 608)
      {
        if (v7 != 611)
        {
          if (v7 == 613)
            objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, 50, v17);
          goto LABEL_25;
        }
        goto LABEL_18;
      }
      objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, 49, v17);
      objc_msgSend_candidatePairToken(v14, v26, v27, v28);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v29, (uint64_t)v22, v30, CFSTR("DiagnosticRemoveParticipant"), CFSTR("NotUploadKeys"), 15);
LABEL_23:

      goto LABEL_25;
    }
    if (v7 == 441)
    {
      objc_msgSend__didReceiveRequestToPurgeRegistration(self, v15, v16, v17);
      im_primary_queue();
      v31 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19BA00F44;
      block[3] = &unk_1E3C202C0;
      v33 = v14;
      v34 = self;
      v35 = 441;
      dispatch_async(v31, block);

      goto LABEL_25;
    }
    if (v7 == 603)
    {
LABEL_18:
      if (v7 == 603)
        v25 = 44;
      else
        v25 = 46;
      objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, v25, v17);
    }
  }
  else
  {
    if (v7 == 602)
    {
      if (self->_isUPlusOneSession && objc_msgSend__hasConnectedP2pLink(self, v11, v12, v13))
      {
        objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, v18, (uint64_t)v14, v19, 602, 1);
        goto LABEL_25;
      }
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v21 = objc_opt_respondsToSelector();

      if ((v21 & 1) == 0)
        goto LABEL_25;
      v22 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_terminateCallDueToIdleClientForLink_(v22, v23, (uint64_t)self, v24);
      goto LABEL_23;
    }
    if (v7 == 601)
      objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, v11, (uint64_t)v10, v13, 601, !v6);
  }
LABEL_25:

}

- (void)candidatePair:(id)a3 didAddQREvent:(id)a4
{
  id WeakRetained;
  char v6;
  id v7;
  const char *v8;
  double v9;
  id v10;

  v10 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    v7 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didAddQREvent_(v7, v8, (uint64_t)self, v9, v10);

  }
}

- (void)candidatePair:(id)a3 didReceiveParticipantUpdate:(id)a4 status:(unsigned __int16)a5
{
  uint64_t v5;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  int v13;
  id WeakRetained;
  char v15;
  id v16;
  const char *v17;
  double v18;
  id v19;

  v5 = a5;
  v19 = a4;
  objc_msgSend_objectForKey_(v19, v7, (uint64_t)CFSTR("ids-stun-attribute-session-state-type"), v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_unsignedShortValue(v9, v10, v11, v12);

  if ((_DWORD)v5 && (v13 - 7) <= 1)
    self->_isLightweightParticipant = v13 != 7;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v15 = objc_opt_respondsToSelector();

  if ((v15 & 1) != 0)
  {
    v16 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didReceiveParticipantUpdate_status_(v16, v17, (uint64_t)self, v18, v19, v5);

  }
}

- (void)candidatePair:(id)a3 didReceivePluginRegistration:(unint64_t)a4 pluginName:(id)a5
{
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  const char *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  const char *v41;
  uint64_t v42;
  double v43;
  int isSharedQRSession;
  const char *v45;
  double v46;
  const char *v47;
  double v48;
  NSMutableDictionary *pluginParticipantIDs;
  void *v50;
  const char *v51;
  double v52;
  id WeakRetained;
  char v54;
  const char *v55;
  uint64_t v56;
  double v57;
  id v58;
  const char *v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  IDSGlobalLink *v64;
  id v65;
  void *v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v65 = a5;
  objc_msgSend_groupID(v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = v7;
  objc_msgSend_sessionID(v7, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v68, 0.0, v73, 16);
  if (v21)
  {
    v25 = v21;
    v26 = *(_QWORD *)v69;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v69 != v26)
          objc_enumerationMutation(v19);
        v28 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
        objc_msgSend_sessionID(v28, v22, v23, v24);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v15, v31))
        {
          objc_msgSend_groupID(v28, v32, v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isEqualToString_(v35, v36, (uint64_t)v11, v37)
            && objc_msgSend_state(v28, v38, v39, v40) == 4)
          {
            isSharedQRSession = objc_msgSend_isSharedQRSession(v28, v41, v42, v43);

            if (!isSharedQRSession)
              continue;
            objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v22, a4, v24);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v72 = v29;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v45, (uint64_t)&v72, v46, 1);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_updateParticipantIDMap_(v28, v47, (uint64_t)v35, v48);
          }

        }
      }
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v68, v24, v73, 16);
    }
    while (v25);
  }
  if (v65)
  {
    pluginParticipantIDs = v64->_pluginParticipantIDs;
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v22, a4, v24);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(pluginParticipantIDs, v51, (uint64_t)v65, v52, v50);

  }
  WeakRetained = objc_loadWeakRetained((id *)&v64->_delegate);
  v54 = objc_opt_respondsToSelector();

  if ((v54 & 1) != 0)
  {
    v58 = objc_loadWeakRetained((id *)&v64->_delegate);
    objc_msgSend_link_didReceivePluginRegistration_pluginName_(v58, v59, (uint64_t)v64, v60, a4, v65);

  }
  if (v64->_linkIDForPlugin != objc_msgSend_linkID(v66, v55, v56, v57))
    objc_msgSend__didReceiveRequestToPurgeRegistration(v64, v61, v62, v63);

}

- (void)candidatePair:(id)a3 didReceivePluginUnregistration:(unint64_t)a4 pluginName:(id)a5
{
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  const char *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  const char *v41;
  uint64_t v42;
  double v43;
  int isSharedQRSession;
  const char *v45;
  double v46;
  const char *v47;
  double v48;
  NSMutableDictionary *pluginParticipantIDs;
  void *v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  id WeakRetained;
  char v56;
  id v57;
  const char *v58;
  double v59;
  IDSGlobalLink *v60;
  id v61;
  void *v62;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *v68;
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v61 = a5;
  objc_msgSend_groupID(v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = v7;
  objc_msgSend_sessionID(v7, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v64, 0.0, v69, 16);
  if (v21)
  {
    v25 = v21;
    v26 = *(_QWORD *)v65;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v65 != v26)
          objc_enumerationMutation(v19);
        v28 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
        objc_msgSend_sessionID(v28, v22, v23, v24);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v15, v31))
        {
          objc_msgSend_groupID(v28, v32, v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isEqualToString_(v35, v36, (uint64_t)v11, v37)
            && objc_msgSend_state(v28, v38, v39, v40) == 4)
          {
            isSharedQRSession = objc_msgSend_isSharedQRSession(v28, v41, v42, v43);

            if (!isSharedQRSession)
              continue;
            objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v22, a4, v24);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = v29;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v45, (uint64_t)&v68, v46, 1);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_removeFromParticipantIDMap_(v28, v47, (uint64_t)v35, v48);
          }

        }
      }
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v64, v24, v69, 16);
    }
    while (v25);
  }
  if (v61)
  {
    pluginParticipantIDs = v60->_pluginParticipantIDs;
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v22, a4, v24);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(pluginParticipantIDs, v51, (uint64_t)v50, v52);

    objc_msgSend_removeObjectForKey_(v60->_pluginNameToPluginOptionsDict, v53, (uint64_t)v61, v54);
  }
  WeakRetained = objc_loadWeakRetained((id *)&v60->_delegate);
  v56 = objc_opt_respondsToSelector();

  if ((v56 & 1) != 0)
  {
    v57 = objc_loadWeakRetained((id *)&v60->_delegate);
    objc_msgSend_link_didReceivePluginUnregistration_pluginName_(v57, v58, (uint64_t)v60, v59, a4, v61);

  }
}

- (void)candidatePair:(id)a3 didReceivePluginControlEvent:(unint64_t)a4 operation:(unsigned __int8)a5 transactionID:(id)a6
{
  int v7;
  id v10;
  id v11;
  const char *v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  NSMutableArray *pluginControlDisconnectRecentTransactionIDs;
  NSMutableArray *v25;
  NSMutableArray *v26;
  int v27;
  void *v28;
  uint64_t v29;

  v7 = a5;
  v29 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a6;
  v14 = v11;
  if (v7 != 2)
    goto LABEL_13;
  if (!v11)
  {
LABEL_12:
    objc_msgSend__disconnectPluginConnectionsForParticipantID_andPurgeRegistration_(self, v12, a4, v13, 0);
    goto LABEL_13;
  }
  if ((objc_msgSend_containsObject_(self->_pluginControlDisconnectRecentTransactionIDs, v12, (uint64_t)v11, v13) & 1) == 0)
  {
    if ((unint64_t)objc_msgSend_count(self->_pluginControlDisconnectRecentTransactionIDs, v15, v16, v17) >= 0x14)
    {
      do
        objc_msgSend_removeObjectAtIndex_(self->_pluginControlDisconnectRecentTransactionIDs, v19, 0, v20);
      while ((unint64_t)objc_msgSend_count(self->_pluginControlDisconnectRecentTransactionIDs, v21, v22, v23) > 0x13);
    }
    pluginControlDisconnectRecentTransactionIDs = self->_pluginControlDisconnectRecentTransactionIDs;
    if (!pluginControlDisconnectRecentTransactionIDs)
    {
      v25 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v26 = self->_pluginControlDisconnectRecentTransactionIDs;
      self->_pluginControlDisconnectRecentTransactionIDs = v25;

      pluginControlDisconnectRecentTransactionIDs = self->_pluginControlDisconnectRecentTransactionIDs;
    }
    objc_msgSend_addObject_(pluginControlDisconnectRecentTransactionIDs, v19, (uint64_t)v14, v20);
    goto LABEL_12;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v27 = 138412290;
    v28 = v14;
    _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "PluginControl indication event has duplicate transactionID %@ - dropped", (uint8_t *)&v27, 0xCu);
  }

LABEL_13:
}

- (void)candidatePair:(id)a3 didReceiveMappedParticipantsDict:(id)a4 forLinkID:(char)a5
{
  uint64_t v5;
  id WeakRetained;
  char v8;
  id v9;
  const char *v10;
  double v11;
  id v12;

  v5 = a5;
  v12 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v8 = objc_opt_respondsToSelector();

  if ((v8 & 1) != 0)
  {
    v9 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didReceiveMappedParticipantsDict_forLinkID_(v9, v10, (uint64_t)self, v11, v12, v5);

  }
}

- (void)candidatePair:(id)a3 didReceivePutMaterialIndication:(id)a4
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  uint8_t v19[16];

  v5 = a4;
  if (IMGetDomainBoolForKey())
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "didReceivePutMaterialIndication: ignoring because DisableQUICMaterialIndication is set", v19, 2u);
    }

  }
  else
  {
    objc_msgSend_materials(v5, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__getAndProcessDatablobsFromReceivedMaterials_(self, v11, (uint64_t)v10, v12);
    objc_msgSend_materials(v5, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_receiveKeyMaterials_(self, v17, (uint64_t)v16, v18);

  }
}

- (void)candidatePair:(id)a3 didReceiveGetMaterialResponse:(id)a4
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  const char *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const char *v15;
  double v16;
  id v17;

  v5 = a4;
  objc_msgSend_materials(v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__getAndProcessDatablobsFromReceivedMaterials_(self, v10, (uint64_t)v9, v11);

  objc_msgSend_materials(v5, v12, v13, v14);
  v17 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_receiveKeyMaterials_(self, v15, (uint64_t)v17, v16);
}

- (void)receiveKeyMaterials:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  id v25;
  const char *v26;
  double v27;
  const char *v28;
  double v29;
  id v30;
  id obj;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v30 = v4;
    obj = v4;
    v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v38, v8, v45, 16);
    if (v33)
    {
      v32 = *(_QWORD *)v39;
      v11 = 138412290;
      do
      {
        for (i = 0; i != v33; ++i)
        {
          if (*(_QWORD *)v39 != v32)
            objc_enumerationMutation(obj);
          v13 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          objc_msgSend_GlobalLink(IDSFoundationLog, v9, v10, *(double *)&v11);
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v44 = v13;
            _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "receiveKeyMaterials received material: %@", buf, 0xCu);
          }

          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          objc_msgSend_materialInfos(v13, v15, v16, 0.0);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v34, v19, v42, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v35;
            do
            {
              for (j = 0; j != v21; ++j)
              {
                if (*(_QWORD *)v35 != v22)
                  objc_enumerationMutation(v17);
                v24 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * j);
                v25 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didReceiveMaterialInfo_material_(v25, v26, (uint64_t)self, v27, v24, v13);

              }
              v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v28, (uint64_t)&v34, v29, v42, 16);
            }
            while (v21);
          }

        }
        v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v38, *(double *)&v11, v45, 16);
      }
      while (v33);
    }

    v4 = v30;
  }

}

- (void)_didReceiveRequestToPurgeRegistration
{
  uint64_t v2;
  double v3;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  const char *v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v18, 0.0, v22, 16);
  if (v7)
  {
    v11 = v7;
    v12 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v5);
        v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        if (objc_msgSend_state(v14, v8, v9, v10) == 4 && objc_msgSend_isSharedQRSession(v14, v8, v9, v10))
        {
          objc_msgSend_allKeys(self->_pluginParticipantIDs, v8, v9, v10);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removeFromParticipantIDMap_(v14, v16, (uint64_t)v15, v17);

        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v18, v10, v22, 16);
    }
    while (v11);
  }
  objc_msgSend__disconnectPluginConnectionsForParticipantID_andPurgeRegistration_(self, v8, 0, v10, 1);

}

- (void)_disconnectPluginConnectionsForParticipantID:(unint64_t)a3 andPurgeRegistration:(BOOL)a4
{
  _BOOL4 v4;
  id v7;
  const char *v8;
  double v9;
  void *v10;
  NSMutableDictionary *pluginParticipantIDs;
  void *v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  NSMutableDictionary *v19;
  void *v20;
  const char *v21;
  double v22;
  void *v23;
  const char *v24;
  double v25;
  void *v26;
  const char *v27;
  double v28;
  const char *v29;
  double v30;
  NSMutableDictionary *v31;
  void *v32;
  const char *v33;
  double v34;
  const char *v35;
  double v36;
  id v37;
  const char *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  id v46;
  char v47;
  id v48;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  const char *v53;
  double v54;
  const char *v55;
  uint64_t v56;
  double v57;
  NSObject *v58;
  id WeakRetained;
  char v60;
  id v61;
  const char *v62;
  double v63;
  void *v64;
  const char *v65;
  double v66;
  void *v67;
  const char *v68;
  double v69;
  id v70;
  char v71;
  const char *v72;
  uint64_t v73;
  double v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  id v80;
  const char *v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, void *, void *);
  void *v86;
  id v87;
  void *v88;
  uint8_t buf[4];
  unint64_t v90;
  uint64_t v91;

  v4 = a4;
  v91 = *MEMORY[0x1E0C80C00];
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v10 = v7;
  pluginParticipantIDs = self->_pluginParticipantIDs;
  if (a3)
  {
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v8, a3, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(pluginParticipantIDs, v13, (uint64_t)v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v19 = self->_pluginParticipantIDs;
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v16, a3, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v19, v21, (uint64_t)v20, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v24, a3, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKey_(v10, v27, (uint64_t)v23, v28, v26);

      if (v4)
      {
        v31 = self->_pluginParticipantIDs;
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v29, a3, v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectForKey_(v31, v33, (uint64_t)v32, v34);

        objc_msgSend_removeObjectForKey_(self->_pluginNameToPluginOptionsDict, v35, (uint64_t)v15, v36);
      }
    }
    else
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v18);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v90 = a3;
        _os_log_impl(&dword_19B949000, v58, OS_LOG_TYPE_DEFAULT, "_disconnectPluginConnectionsForParticipantID cannot find pluginName for participantID %llu", buf, 0xCu);
      }

    }
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v60 = objc_opt_respondsToSelector();

    if ((v60 & 1) != 0)
    {
      v61 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v62, a3, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = v64;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v65, (uint64_t)&v88, v66, 1);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_link_didReceivePluginDisconnect_(v61, v68, (uint64_t)self, v69, v67);

    }
    if (v4)
    {
LABEL_17:
      if (objc_msgSend_count(v10, v55, v56, v57, v83, v84, v85, v86))
      {
        v70 = objc_loadWeakRetained((id *)&self->_delegate);
        v71 = objc_opt_respondsToSelector();

        if ((v71 & 1) != 0)
        {
          objc_msgSend_GlobalLink(IDSFoundationLog, v72, v73, v74);
          v75 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            v79 = objc_msgSend_count(v10, v76, v77, v78);
            *(_DWORD *)buf = 134217984;
            v90 = v79;
            _os_log_impl(&dword_19B949000, v75, OS_LOG_TYPE_DEFAULT, "didReceiveRequestToPurgeRegistration for %lu plugins.", buf, 0xCu);
          }

          v80 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didReceiveRequestToPurgeRegistration_(v80, v81, (uint64_t)self, v82, v10);

        }
      }
    }
  }
  else
  {
    v83 = MEMORY[0x1E0C809B0];
    v84 = 3221225472;
    v85 = sub_19BA021AC;
    v86 = &unk_1E3C202E8;
    v37 = v7;
    v87 = v37;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(pluginParticipantIDs, v38, (uint64_t)&v83, v39);
    if (v4)
    {
      objc_msgSend_removeAllObjects(self->_pluginParticipantIDs, v40, v41, v42, v83, v84, v85, v86);
      objc_msgSend_removeAllObjects(self->_pluginNameToPluginOptionsDict, v43, v44, v45);
    }
    v46 = objc_loadWeakRetained((id *)&self->_delegate);
    v47 = objc_opt_respondsToSelector();

    if ((v47 & 1) != 0)
    {
      v48 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_allKeys(v37, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_link_didReceivePluginDisconnect_(v48, v53, (uint64_t)self, v54, v52);

    }
    if (v4)
      goto LABEL_17;
  }

}

- (void)candidatePair:(id)a3 protoRequestDidTimeOut:(unint64_t)a4
{
  double v4;

  objc_msgSend__removeProtoRequest_status_(self, a2, a4, v4, 0);
}

- (void)disconnectIdleQUICConnectionForCandidatePair:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  IDSNWLink *nwLink;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  const char *v40;
  int v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend_isQUIC(v4, v5, v6, v7) && (unint64_t)objc_msgSend_state(v4, v8, v9, v10) <= 2)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_candidatePairToken(v4, v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = 138412290;
      v42 = v18;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "Disconnecting QUIC connection %@ after Info request", (uint8_t *)&v41, 0xCu);

    }
    nwLink = self->_nwLink;
    objc_msgSend_sessionID(v4, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(v4, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_address(v27, v28, v29, v30);
    objc_msgSend_remote(v4, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend_external(v35, v36, v37, v38);
    objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v40, (uint64_t)v23, self->_delayQUICDisconnectionAfterInfo, v31, v39, 0);

  }
}

- (void)sendAllocbindRequest:(id)a3 isRealloc:(BOOL)a4 inResponseToNoSessionState:(BOOL)a5 reconnectQUIC:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL8 v7;
  _BOOL8 v8;
  id v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  const char *v42;
  IDSNWLink *nwLink;
  char v44;
  _QWORD v45[5];
  id v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  char v50;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v10 = a3;
  objc_msgSend_candidatePairToken(v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isQUIC(v10, v15, v16, v17))
  {
    v23 = objc_msgSend_pendingNoSessionStateAllocbind(v10, v18, v19, v20);
    if (v6)
    {
      nwLink = self->_nwLink;
      v44 = v23;
      objc_msgSend_sessionID(v10, v21, v22, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v10, v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend_address(v29, v30, v31, v32);
      objc_msgSend_remote(v10, v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend_external(v37, v38, v39, v40);
      objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v42, (uint64_t)v25, 0.0, v33, v41, 1);

      v45[0] = MEMORY[0x1E0C809B0];
      v45[1] = 3221225472;
      v45[2] = sub_19BA0251C;
      v45[3] = &unk_1E3C20068;
      v45[4] = self;
      v46 = v14;
      v47 = v8;
      v48 = v7;
      v49 = v6;
      v50 = v44;
      IDSTransportThreadAddBlockAfter(v45, 0.5);

    }
    else
    {
      objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(self, v21, (uint64_t)v14, v24, v8, v7, 0, v23);
    }
  }
  else
  {
    objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(self, v18, (uint64_t)v14, v20, 0, v8, v7);
  }

}

- (void)sendProbingRequestWithoptions:(id)a3 candidatePairToken:(id)a4
{
  double v4;

  objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, a2, 3, v4, 0, a3, a4);
}

- (BOOL)receiveNoSessionStateForCandidatePair:(id)a3 didLocalExternalAddressChange:(BOOL)a4
{
  double v4;

  return objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, a2, (uint64_t)a3, v4, 601, !a4);
}

- (void)receiveIdleClientErrorForCandidatePair:(id)a3
{
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  double v8;
  id WeakRetained;
  char v10;
  id v11;
  const char *v12;
  double v13;
  id v14;

  v14 = a3;
  if (self->_isUPlusOneSession && objc_msgSend__hasConnectedP2pLink(self, v4, v5, v6))
  {
    objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, v7, (uint64_t)v14, v8, 602, 1);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v10 = objc_opt_respondsToSelector();

    if ((v10 & 1) != 0)
    {
      v11 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_terminateCallDueToIdleClientForLink_(v11, v12, (uint64_t)self, v13);

    }
  }

}

- (void)receiveBlockedIndicationWithReason:(unsigned int)a3
{
  uint64_t v3;
  IDSLinkDelegate **p_delegate;
  id WeakRetained;
  char v7;
  const char *v8;
  double v9;
  id v10;

  v3 = *(_QWORD *)&a3;
  p_delegate = &self->_delegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) != 0)
  {
    v10 = objc_loadWeakRetained((id *)p_delegate);
    objc_msgSend_didReceiveBlockedIndicationForLink_reason_(v10, v8, (uint64_t)self, v9, v3);

  }
}

- (void)receiveErrorIndicationWithCode:(unsigned int)a3
{
  uint64_t v3;
  IDSLinkDelegate **p_delegate;
  id WeakRetained;
  char v7;
  const char *v8;
  double v9;
  id v10;

  v3 = *(_QWORD *)&a3;
  p_delegate = &self->_delegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) != 0)
  {
    v10 = objc_loadWeakRetained((id *)p_delegate);
    objc_msgSend_link_didReceiveErrorIndicationWithCode_(v10, v8, (uint64_t)self, v9, v3);

  }
}

- (id)createLinkCycleForCandidatePair:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  double v27;
  NSMutableDictionary *tokenToStunCheckPairs;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;

  v4 = a3;
  if ((objc_msgSend_isRelayStunCandidatePair(v4, v5, v6, v7) & 1) != 0
    || (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v8, v9, v10) & 1) != 0)
  {
    goto LABEL_12;
  }
  if (!self->_tokenToStunCheckPairs)
  {
    v43 = 0;
LABEL_11:

LABEL_12:
    objc_msgSend_createLinkCycle(self->_metricsCollector, v8, v9, v10);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  objc_msgSend_local(v4, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_address(v11, v12, v13, v14);
  objc_msgSend_remote(v4, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_address(v19, v20, v21, v22);
  tokenForStunCandidatePair(v15, v23, self->_cbuuid);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v26)
  {
    tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
    objc_msgSend_local(v4, v24, v25, v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend_address(v29, v30, v31, v32);
    objc_msgSend_remote(v4, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = objc_msgSend_address(v37, v38, v39, v40);
    tokenForStunCandidatePair(v33, v41, self->_cbuuid);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v42);

  }
  else
  {
    v43 = 0;
  }

  if (!v43)
    goto LABEL_11;
  objc_msgSend_linkMetrics(v43, v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v47)
    goto LABEL_11;
  objc_msgSend_linkMetrics(v43, v48, v49, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_13:
  return v51;
}

- (id)_createInterfaceAddressArrayWithNWLink:(BOOL)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  double v5;
  _BOOL8 v6;
  _BOOL8 v7;
  unsigned __int16 v9;
  NSObject *v10;
  int startPort;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  double v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  const char *v30;
  uint64_t v31;
  double v32;
  int v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  id v50;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t buf[4];
  _DWORD v57[7];

  v6 = a5;
  v7 = a4;
  *(_QWORD *)&v57[5] = *MEMORY[0x1E0C80C00];
  if (!self->_startPort)
  {
LABEL_23:
    v19 = (void *)objc_msgSend_newListenerWithClientUUID_wantsWiFi_wantsCellular_(self->_nwLink, a2, (uint64_t)self->_clientUUID, v5, v7, v6, v52, v54);
    if (v19)
    {
      OSLogHandleForTransportCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v29 = objc_msgSend_port(self->_nwLink, v26, v27, v28);
        v33 = objc_msgSend_cellularPort(self->_nwLink, v30, v31, v32);
        *(_DWORD *)buf = 67109376;
        v57[0] = v29;
        LOWORD(v57[1]) = 1024;
        *(_DWORD *)((char *)&v57[1] + 2) = v33;
        _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, "bind to random ports(%u,%u) succeeded", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v53 = objc_msgSend_port(self->_nwLink, v34, v35, v36);
          v55 = objc_msgSend_cellularPort(self->_nwLink, v37, v38, v39);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("bind to random ports(%u,%u) succeeded"));
          if (_IDSShouldLog())
          {
            objc_msgSend_port(self->_nwLink, v40, v41, v42, v53, v55);
            objc_msgSend_cellularPort(self->_nwLink, v43, v44, v45);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("bind to random ports(%u,%u) succeeded"));
          }
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, "failed binding to random port, remove listeners.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed binding to random port, remove listeners."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed binding to random port, remove listeners."));
        }
      }
      objc_msgSend_cleanup(self->_nwLink, v47, v48, v49);
    }
    goto LABEL_37;
  }
  v9 = self->_startPort + LOWORD(self->_portRange) - 1;
  OSLogHandleForIDSCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    startPort = self->_startPort;
    *(_DWORD *)buf = 67109376;
    v57[0] = startPort;
    LOWORD(v57[1]) = 1024;
    *(_DWORD *)((char *)&v57[1] + 2) = v9;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "use port range [%u, %u]", buf, 0xEu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v52 = (void *)self->_startPort;
    v54 = v9;
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("use port range [%u, %u]"));
  }
  v14 = self->_startPort;
  if (v14 >= v9)
  {
LABEL_17:
    objc_msgSend_setPort_(self->_nwLink, v12, 0, *(double *)&v13, v52);
    objc_msgSend_setCellularPort_(self->_nwLink, v21, 0, v22);
    OSLogHandleForTransportCategory();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = self->_startPort;
      *(_DWORD *)buf = 67109376;
      v57[0] = v24;
      LOWORD(v57[1]) = 1024;
      *(_DWORD *)((char *)&v57[1] + 2) = v9;
      _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "all tries failed to bind port range [%u,%u], trying random port.", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v52 = (void *)self->_startPort;
        v54 = v9;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("all tries failed to bind port range [%u,%u], trying random port."));
        if (_IDSShouldLog())
        {
          v52 = (void *)self->_startPort;
          v54 = v9;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("all tries failed to bind port range [%u,%u], trying random port."));
        }
      }
    }
    goto LABEL_23;
  }
  v13 = 138412290;
  while (1)
  {
    objc_msgSend_setPort_(self->_nwLink, v12, (unsigned __int16)v14, *(double *)&v13, v52, v54);
    objc_msgSend_setCellularPort_(self->_nwLink, v15, (unsigned __int16)(v14 + 1), v16);
    v19 = (void *)objc_msgSend_newListenerWithClientUUID_wantsWiFi_wantsCellular_(self->_nwLink, v17, (uint64_t)self->_clientUUID, v18, v7, v6);
    OSLogHandleForTransportCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v57 = v19;
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "Interface address array = %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v52 = v19;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Interface address array = %@"));
        if (_IDSShouldLog())
        {
          v52 = v19;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Interface address array = %@"));
        }
      }
    }
    if (v19)
      break;
    LOWORD(v14) = v14 + 2;
    if (v9 <= (unsigned __int16)v14)
      goto LABEL_17;
  }
LABEL_37:
  v50 = v19;

  return v50;
}

- (id)_addSocketAndInterfaceAddressWithNWLink:(BOOL)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  double v5;
  _BOOL4 v6;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  double v14;
  id v15;
  const char *v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  double v36;
  id v37;
  NSObject *v38;
  const __CFString *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  const __CFString *v47;
  uint64_t v48;

  v6 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  objc_msgSend__createInterfaceAddressArrayWithNWLink_wantsWiFi_wantsCellular_(self, a2, a3, v5, a4, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v8, v9, v10, v11);

  if (v12)
  {
    objc_msgSend__delayProcessingCellularInterfaces_(self, v13, (uint64_t)v12, v14);
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v15 = v12;
    v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v41, v17, v45, 16);
    if (v20)
    {
      v22 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v42 != v22)
            objc_enumerationMutation(v15);
          v24 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
          if (objc_msgSend_IPVersion(v24, v18, v19, v21) == 1)
          {
            v25 = objc_msgSend_index(v24, v18, v19, v21);
            objc_msgSend_name(v24, v26, v27, v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v30, v25, v31, v29, 0);

          }
        }
        v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v41, v21, v45, 16);
      }
      while (v20);
    }

    if (objc_msgSend_count(v15, v32, v33, v34))
      objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v35, (uint64_t)v15, v36, 0);
    v37 = v15;
  }
  else
  {
    OSLogHandleForTransportCategory();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v39 = CFSTR("NO");
      if (v6)
        v39 = CFSTR("YES");
      *(_DWORD *)buf = 138412290;
      v47 = v39;
      _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "failed to create interface address array enableIPv6 %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to create interface address array enableIPv6 %@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to create interface address array enableIPv6 %@."));
      }
    }
  }

  return v12;
}

- (void)_getAndProcessDatablobsFromReceivedMaterials:(id)a3
{
  __CFDictionary *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  CFMutableDictionaryRef Mutable;
  const char *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  void *v30;
  double v31;
  void *v33;
  const char *v34;
  double v35;
  id v36;
  const char *v37;
  double v38;
  const char *v39;
  double v40;
  void *v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  id WeakRetained;
  char v52;
  id v53;
  const char *v54;
  double v55;
  __CFDictionary *obj;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  uint8_t v70[128];
  uint8_t buf[4];
  CFMutableDictionaryRef v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = (__CFDictionary *)a3;
  objc_msgSend_GlobalLink(IDSFoundationLog, v4, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v72 = v3;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "_getAndProcessDatablobsFromReceivedMaterials: materials: %@", buf, 0xCu);
  }

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  obj = v3;
  v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v65, v10, v70, 16);
  if (v59)
  {
    v58 = *(_QWORD *)v66;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v66 != v58)
          objc_enumerationMutation(obj);
        v60 = v14;
        objc_msgSend_materialInfos(*(void **)(*((_QWORD *)&v65 + 1) + 8 * v14), v11, v12, v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = 0u;
        v62 = 0u;
        v63 = 0u;
        v64 = 0u;
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v61, 0.0, v69, 16);
        if (v17)
        {
          v21 = v17;
          v22 = *(_QWORD *)v62;
          do
          {
            for (i = 0; i != v21; ++i)
            {
              if (*(_QWORD *)v62 != v22)
                objc_enumerationMutation(v15);
              v24 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
              v25 = objc_msgSend_materialType(v24, v18, v19, v20);
              objc_msgSend_materialContent(v24, v26, v27, v28);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              if ((_DWORD)v25 == 12 || (_DWORD)v25 == 6)
              {
                objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v29, v25, v31);
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectForKey_(Mutable, v34, (uint64_t)v33, v35);
                v36 = (id)objc_claimAutoreleasedReturnValue();

                if (!v36)
                  v36 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                objc_msgSend_addObject_(v36, v37, (uint64_t)v30, v38);
                objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v39, v25, v40);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setObject_forKey_(Mutable, v42, (uint64_t)v36, v43, v41);

              }
            }
            v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v61, v20, v69, 16);
          }
          while (v21);
        }

        v14 = v60 + 1;
      }
      while (v60 + 1 != v59);
      v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v65, v13, v70, 16);
    }
    while (v59);
  }

  objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
  v47 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v72 = Mutable;
    _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "_getAndProcessDatablobsFromReceivedMaterials: typeToEncryptedDataBlobs: %@", buf, 0xCu);
  }

  if (objc_msgSend_count(Mutable, v48, v49, v50))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    v52 = objc_opt_respondsToSelector();

    if ((v52 & 1) != 0)
    {
      v53 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didReceiveEncryptedDataBlobs_(v53, v54, (uint64_t)self, v55, Mutable);

    }
  }

}

- (BOOL)_postProcessQUICAllocbindResponse:(id)a3 candidatePair:(id)a4
{
  return 0;
}

- (void)_parseActiveExperiments:(id)a3
{
  id v3;
  id v4;
  id v5;
  const char *v6;
  double v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  int v24;
  const char *v25;
  uint64_t v26;
  double v27;
  int v28;
  void *v29;
  uint64_t v30;
  const char *v31;
  double v32;
  uint64_t v33;
  const char *v34;
  double v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  double v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  NSDictionary *v46;
  NSDictionary *qrChannelExperiments;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  _QWORD v54[3];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v5 = v3;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v49, v7, v55, 16);
  if (!v8)
    goto LABEL_23;
  v11 = v8;
  v12 = *(_QWORD *)v50;
  v13 = 67109378;
  while (2)
  {
    v14 = 0;
    do
    {
      if (*(_QWORD *)v50 != v12)
        objc_enumerationMutation(v5);
      v15 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v14);
      objc_msgSend_experimentName(v15, v9, v10, *(double *)&v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v16)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v17, v18, v19);
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v54[0] = v15;
          _os_log_impl(&dword_19B949000, v42, OS_LOG_TYPE_DEFAULT, "Experiment name is not set in IDSQRProtoChannelExperiment: %@. Skipping...", buf, 0xCu);
        }

        goto LABEL_23;
      }
      objc_msgSend_experimentName(v15, v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend_testValue(v15, v21, v22, v23);
      if (v24 == 3)
      {
        v36 = (void *)MEMORY[0x1E0CB37E8];
        v37 = objc_msgSend_int32Value(v15, v25, v26, v27);
        objc_msgSend_numberWithInt_(v36, v38, v37, v39);
        v33 = objc_claimAutoreleasedReturnValue();
        goto LABEL_13;
      }
      v28 = v24;
      if (v24 == 2)
      {
        objc_msgSend_stringValue(v15, v25, v26, v27);
        v33 = objc_claimAutoreleasedReturnValue();
        goto LABEL_13;
      }
      if (v24 == 1)
      {
        v29 = (void *)MEMORY[0x1E0CB37E8];
        v30 = objc_msgSend_BOOLValue(v15, v25, v26, v27);
        objc_msgSend_numberWithBool_(v29, v31, v30, v32);
        v33 = objc_claimAutoreleasedReturnValue();
LABEL_13:
        v40 = v33;
        objc_msgSend_setObject_forKey_(v4, v34, v33, v35, v20);
        goto LABEL_14;
      }
      objc_msgSend_GlobalLink(IDSFoundationLog, v25, v26, v27);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        LODWORD(v54[0]) = v28;
        WORD2(v54[0]) = 2112;
        *(_QWORD *)((char *)v54 + 6) = v15;
        _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "Received unknown IDSQRProtoChannelExperiment_TestValue: %d in IDSQRProtoChannelExperiment: %@", buf, 0x12u);
      }
LABEL_14:

      ++v14;
    }
    while (v11 != v14);
    v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v49, *(double *)&v13, v55, 16);
    v11 = v41;
    if (v41)
      continue;
    break;
  }
LABEL_23:

  v46 = (NSDictionary *)objc_msgSend_copy(v4, v43, v44, v45);
  qrChannelExperiments = self->_qrChannelExperiments;
  self->_qrChannelExperiments = v46;

}

- (void)_buildQrExperiments
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSDictionary *v10;
  const char *v11;
  double v12;
  uint64_t v13;
  const char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  void *v20;
  const char *v21;
  double v22;
  void *v23;
  const char *v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSDictionary *v29;
  const char *v30;
  double v31;
  uint64_t v32;
  const char *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  void *v39;
  const char *v40;
  double v41;
  void *v42;
  const char *v43;
  double v44;
  NSDictionary *v45;
  NSDictionary *qrExperiments;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (objc_msgSend_count(self->_qrSessionExperiments, v4, v5, v6))
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v10 = self->_qrSessionExperiments;
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v51, v12, v56, 16);
    if (v13)
    {
      v16 = v13;
      v17 = *(_QWORD *)v52;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v52 != v17)
            objc_enumerationMutation(v10);
          v19 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
          objc_msgSend_objectForKey_(self->_qrSessionExperiments, v14, v19, v15);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("qrse_%@"), v22, v19);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v3, v24, (uint64_t)v20, v25, v23);

        }
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v14, (uint64_t)&v51, v15, v56, 16);
      }
      while (v16);
    }

  }
  if (objc_msgSend_count(self->_qrChannelExperiments, v7, v8, v9))
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v29 = self->_qrChannelExperiments;
    v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v47, v31, v55, 16);
    if (v32)
    {
      v35 = v32;
      v36 = *(_QWORD *)v48;
      do
      {
        for (j = 0; j != v35; ++j)
        {
          if (*(_QWORD *)v48 != v36)
            objc_enumerationMutation(v29);
          v38 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * j);
          objc_msgSend_objectForKey_(self->_qrChannelExperiments, v33, v38, v34);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v40, (uint64_t)CFSTR("qrce_%@"), v41, v38);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v3, v43, (uint64_t)v39, v44, v42);

        }
        v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v33, (uint64_t)&v47, v34, v55, 16);
      }
      while (v35);
    }

  }
  v45 = (NSDictionary *)objc_msgSend_copy(v3, v26, v27, v28);
  qrExperiments = self->_qrExperiments;
  self->_qrExperiments = v45;

}

- (BOOL)_processNWLinkAllocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  const char *v16;
  uint64_t v17;
  double allocbindEndTime;
  NSMutableArray *v19;
  const char *v20;
  double v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  IDSGFTMetricsCollector *metricsCollector;
  void *v30;
  const char *v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  double v39;
  int v40;
  const char *v41;
  uint64_t v42;
  double v43;
  void *Value;
  const char *v45;
  uint64_t v46;
  double v47;
  IDSNWLink *nwLink;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  const char *v60;
  double v61;
  IDSGFTMetricsCollector *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  double v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  double v72;
  void *v73;
  const char *v74;
  double v75;
  const char *v76;
  uint64_t v77;
  double v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  double v82;
  const char *v83;
  double v84;
  const char *v85;
  uint64_t v86;
  double v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  double v95;
  int v96;
  uint64_t v97;
  const char *v98;
  double v99;
  const char *v100;
  uint64_t v101;
  double v102;
  const char *v103;
  uint64_t v104;
  double v105;
  const char *v106;
  double v107;
  const char *v108;
  uint64_t v109;
  double v110;
  double v111;
  double allocbindStartTime;
  NSObject *v113;
  float v114;
  const char *v115;
  uint64_t v116;
  double v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  int v123;
  NSString *idsSessionID;
  const char *v125;
  uint64_t v126;
  double v127;
  id v128;
  unsigned __int16 v129;
  const char *v130;
  uint64_t v131;
  double v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  double v136;
  void *v137;
  const char *v138;
  double v139;
  void *v140;
  const char *v141;
  double v142;
  void *v143;
  id WeakRetained;
  char v145;
  id v146;
  const char *v147;
  double v148;
  const char *v149;
  uint64_t v150;
  double v151;
  NSObject *v152;
  BOOL v153;
  NSObject *v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  double v158;
  const char *v159;
  uint64_t v160;
  NSObject *v161;
  const char *v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  const char *v166;
  NSObject *v167;
  uint32_t v168;
  const char *v169;
  uint64_t v170;
  double v171;
  const char *v172;
  uint64_t v173;
  double v174;
  void *v175;
  const char *v176;
  double v177;
  const char *v178;
  uint64_t v179;
  double v180;
  const char *v181;
  uint64_t v182;
  unsigned int v183;
  double v184;
  unint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  NSObject *v189;
  NSObject *v190;
  const char *v191;
  uint64_t v192;
  double v193;
  char *v194;
  int v195;
  const __CFString *v196;
  NSObject *v197;
  NSObject *v198;
  char *v199;
  NSObject *v200;
  const char *v201;
  double v202;
  const char *v203;
  double v204;
  NSObject *v205;
  const char *v206;
  uint64_t v207;
  double v208;
  char v209;
  const __CFString *v210;
  const char *v211;
  uint64_t v212;
  double v213;
  __CFString *v214;
  const char *v215;
  uint64_t v216;
  double v217;
  const __CFString *v218;
  NSObject *v219;
  const char *v220;
  uint64_t v221;
  double v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  double v226;
  unsigned __int16 v227;
  const char *v228;
  double v229;
  const char *v230;
  uint64_t v231;
  double v232;
  const char *v233;
  double v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t j;
  void *v241;
  void *v242;
  const char *v243;
  uint64_t v244;
  double v245;
  int v246;
  const char *v247;
  uint64_t v248;
  double v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  double v253;
  void *v254;
  NSObject *v255;
  const char *v256;
  uint64_t v257;
  double v258;
  const char *v259;
  uint64_t v260;
  double v261;
  void *v262;
  const char *v263;
  uint64_t v264;
  double v265;
  BOOL v266;
  NSObject *v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  double v271;
  int isComplete;
  const char *v273;
  uint64_t v274;
  double v275;
  void *v276;
  const char *v277;
  uint64_t v278;
  double v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  double v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  double v287;
  void *v288;
  const char *v289;
  uint64_t v290;
  double v291;
  uint64_t v292;
  const char *v293;
  uint64_t v294;
  double v295;
  void *v296;
  const char *v297;
  uint64_t v298;
  double v299;
  uint64_t v300;
  const char *v301;
  double v302;
  __int128 v303;
  NSObject *v304;
  uint64_t v305;
  NSObject *v306;
  const char *v307;
  uint64_t v308;
  double v309;
  id v310;
  NSObject *v311;
  const char *v312;
  uint64_t v313;
  double v314;
  id v315;
  const char *v316;
  uint64_t v317;
  double v318;
  const char *v319;
  uint64_t v320;
  double v321;
  NSObject *v322;
  const char *v323;
  uint64_t v324;
  double v325;
  id v326;
  const char *v327;
  double v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  const char *v332;
  double v333;
  const char *v334;
  uint64_t v335;
  double v336;
  const char *v337;
  uint64_t v338;
  double v339;
  void *v340;
  const char *v341;
  double v342;
  const char *v343;
  uint64_t v344;
  double v345;
  IDSGlobalLink *v346;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  IDSGroupQUICMaterialExchangeProvider *quicMaterialExchangeProvider;
  NSObject *v349;
  char *v350;
  const char *v351;
  uint64_t v352;
  double v353;
  const char *v354;
  uint64_t v355;
  double v356;
  uint64_t v357;
  void *v358;
  const char *v359;
  double v360;
  void *v361;
  id v362;
  const char *v363;
  double v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  double v368;
  uint64_t v369;
  uint64_t v370;
  NSObject *v371;
  NSObject *v372;
  const char *v373;
  uint64_t v374;
  double v375;
  const char *v376;
  uint64_t v377;
  double v378;
  NSObject *v379;
  const char *v380;
  uint64_t v381;
  double v382;
  int v383;
  const __CFString *v384;
  const char *v385;
  double v386;
  uint64_t v387;
  __CFString *v388;
  uint64_t v389;
  const __CFString *v390;
  const char *v391;
  double v392;
  const char *v393;
  double v394;
  const char *v395;
  uint64_t v396;
  double v397;
  const char *v398;
  double v399;
  NSObject *v400;
  const char *v401;
  uint64_t v402;
  double v403;
  id v404;
  const char *v405;
  double v406;
  const char *v407;
  double v408;
  uint64_t v410;
  void *v411;
  void *v412;
  char *v413;
  __CFString *v414;
  unint64_t v415;
  char *v416;
  _OWORD *v417;
  id v418;
  void *v419;
  uint64_t v420;
  int isRealloc;
  NSObject *v422;
  uint64_t v423;
  unint64_t v424;
  id v425;
  __CFString *v426;
  void *v427;
  id key;
  void *v429;
  id v430;
  IDSGlobalLink *v431;
  id obj;
  NSObject *v433;
  _QWORD v434[4];
  NSObject *v435;
  IDSGlobalLink *v436;
  id v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  uint8_t v450[128];
  uint8_t v451[4];
  void *v452;
  __int16 v453;
  _BYTE *v454;
  __int16 v455;
  _OWORD *v456;
  __int16 v457;
  void *v458;
  __int16 v459;
  unsigned int v460;
  _OWORD __str[8];
  _BYTE buf[32];
  __int128 v463;
  _BYTE v464[32];
  __int128 v465;
  __int128 v466;
  __int128 v467;
  _BYTE v468[128];
  _BYTE v469[128];
  uint64_t v470;

  v470 = *MEMORY[0x1E0C80C00];
  v430 = a3;
  v425 = a4;
  key = a8;
  allocbindEndTime = self->_allocbindEndTime;
  if (allocbindEndTime == 0.0)
    self->_allocbindEndTime = a9;
  objc_msgSend_quicAllocbindResponse(self->_metricsCollector, v16, v17, allocbindEndTime);
  v448 = 0u;
  v449 = 0u;
  v446 = 0u;
  v447 = 0u;
  v431 = self;
  v19 = self->_interfaceAddressArray;
  v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v446, v21, v469, 16);
  if (v24)
  {
    v26 = *(_QWORD *)v447;
    while (2)
    {
      for (i = 0; i != v24; ++i)
      {
        if (*(_QWORD *)v447 != v26)
          objc_enumerationMutation(v19);
        v28 = *(void **)(*((_QWORD *)&v446 + 1) + 8 * i);
        if (objc_msgSend_index(v28, v22, v23, v25) == a5)
        {
          metricsCollector = v431->_metricsCollector;
          objc_msgSend_name(v28, v22, v23, v25);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_allocbindResponseFromInterface_(metricsCollector, v31, (uint64_t)v30, v32);

          goto LABEL_13;
        }
      }
      v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v446, v25, v469, 16);
      if (v24)
        continue;
      break;
    }
  }
LABEL_13:

  v36 = objc_msgSend_messageType(v430, v33, v34, v35);
  v40 = v36;
  if (v36 >= 0x25)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v37, (uint64_t)CFSTR("(unknown: %i)"), v39, v36);
    v426 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v426 = off_1E3C20400[(int)v36];
  }
  objc_msgSend_allocbindResponse(v430, v37, v38, v39);
  v429 = (void *)objc_claimAutoreleasedReturnValue();
  if (v429)
  {
    Value = 0;
    if (key && v431->_tokenToCandidatePairs)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v431->_tokenToCandidatePairs, key);
    v433 = Value;
    v424 = objc_msgSend_state(v433, v45, v46, v47);
    nwLink = v431->_nwLink;
    objc_msgSend_sessionID(v433, v49, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(v433, v53, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v410) = objc_msgSend_isCellularStunCandidate(v56, v57, v58, v59);
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v60, (uint64_t)a6, v61, a7, 0, v52, 5, 1, v410);
    v427 = (void *)objc_claimAutoreleasedReturnValue();

    v62 = v431->_metricsCollector;
    objc_msgSend_protocolStackDescription(v427, v63, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allocbindResponseForProtocolStack_(v62, v67, (uint64_t)v66, v68);

    GLUtilConnectionDictionaryForNWConnectionInfo(v427, 1);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_connections(v433, v70, v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v73, v74, (uint64_t)v69, v75, CFSTR("qr"));

    objc_msgSend_linkMetrics(v433, v76, v77, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_receiveAllocbindResponse(v79, v80, v81, v82);

    objc_msgSend__setLinkMetricsAttributesForCandidatePair_(v431, v83, (uint64_t)v433, v84);
    objc_msgSend_local(v433, v85, v86, v87);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = objc_msgSend_address(v88, v89, v90, v91);

    v96 = *(unsigned __int8 *)(v92 + 1);
    if (v96 == 2)
    {
      if (!IMGetDomainBoolForKey())
        goto LABEL_23;
    }
    else if (v96 != 30 || (IMGetDomainBoolForKey() & 1) == 0)
    {
LABEL_23:
      v97 = objc_msgSend_transactionID(v430, v93, v94, v95);
      if ((objc_msgSend_removeProtoRequest_(v433, v98, v97, v99) & 1) != 0)
      {
        isRealloc = objc_msgSend_isRealloc(v433, v100, v101, v102);
        if (v431->_state < 5 || (objc_msgSend_pendingNoSessionStateAllocbind(v433, v103, v104, v105) & 1) != 0)
        {
          objc_msgSend_materials(v429, v103, v104, v105);
          v423 = objc_claimAutoreleasedReturnValue();
          objc_msgSend__getAndProcessDatablobsFromReceivedMaterials_(v431, v106, v423, v107);
          if (v424 > 2)
          {
            if ((objc_msgSend_pendingNoSessionStateAllocbind(v433, v108, v109, v110) & 1) == 0)
            {
              objc_msgSend_GlobalLink(IDSFoundationLog, v149, v150, v151);
              v198 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
              {
                v199 = (&_IDSStunCandidatePairStateStrings)[v424];
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v199;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v426;
                _os_log_impl(&dword_19B949000, v198, OS_LOG_TYPE_DEFAULT, "candidate pair state is [%s], ignore %@", buf, 0x16u);
              }
              v153 = 1;
              goto LABEL_209;
            }
          }
          else
          {
            allocbindStartTime = v431->_allocbindStartTime;
            v111 = v431->_allocbindEndTime;
            objc_msgSend_GlobalLink(IDSFoundationLog, v108, v109, v110);
            v113 = objc_claimAutoreleasedReturnValue();
            v114 = (v111 - allocbindStartTime) * 1000.0;
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_local(v433, v115, v116, v117);
              v118 = (void *)objc_claimAutoreleasedReturnValue();
              v122 = objc_msgSend_transport(v118, v119, v120, v121);
              v123 = *(unsigned __int8 *)(v92 + 1);
              idsSessionID = v431->_idsSessionID;
              objc_msgSend_sessionID(v433, v125, v126, v127);
              v128 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138413826;
              *(_QWORD *)&buf[4] = v426;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = key;
              *(_WORD *)&buf[22] = 2048;
              *(double *)&buf[24] = v114;
              LOWORD(v463) = 2048;
              *(_QWORD *)((char *)&v463 + 2) = v122;
              WORD5(v463) = 1024;
              HIDWORD(v463) = v123;
              *(_WORD *)v464 = 2112;
              *(_QWORD *)&v464[2] = idsSessionID;
              *(_WORD *)&v464[10] = 2112;
              *(_QWORD *)&v464[12] = v128;
              _os_log_impl(&dword_19B949000, v113, OS_LOG_TYPE_DEFAULT, "Received %@ on %@ after %0.6lf ms over protocol: %ld family: %d IDSSessionID: %@ QRSessionID: %@", buf, 0x44u);

            }
            v129 = stunMessageTypeFromProtoMessageType(v40, isRealloc);
            GLUtilReportAWDStunMessageEventWithType(v129, 0, v433, v114);
            objc_msgSend_reportingDataBlob(v429, v130, v131, v132);
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_local(v433, v134, v135, v136);
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_base64EncodedStringWithOptions_(v133, v138, 0, v139);
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setAllocbindDataBlob_(v137, v141, (uint64_t)v140, v142);

            GLUCreateQRStunMessageEventWithType(v129, 0, v433, v431->_timeBase, v114);
            v143 = (void *)objc_claimAutoreleasedReturnValue();
            if (v143)
            {
              WeakRetained = objc_loadWeakRetained((id *)&v431->_delegate);
              v145 = objc_opt_respondsToSelector();

              if ((v145 & 1) != 0)
              {
                v146 = objc_loadWeakRetained((id *)&v431->_delegate);
                objc_msgSend_link_didAddQREvent_(v146, v147, (uint64_t)v431, v148, v143);

              }
            }

          }
          objc_msgSend_clientAddress(v429, v149, v150, v151);
          v422 = objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_length(v422, v169, v170, v171))
          {
            objc_msgSend_local(v433, v172, v173, v174);
            v175 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setExternalAddress_(v175, v176, (uint64_t)v422, v177);

            v183 = objc_msgSend_channelId(v429, v178, v179, v180);
            v185 = (unsigned __int16)v183;
            if ((_WORD)v183)
            {
              v186 = objc_msgSend_channelNumber(v433, v181, v182, v184);
              v187 = bswap32(v183) >> 16;
              if (!v186)
              {
                OSLogHandleForTransportCategory();
                v200 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109634;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = (unsigned __int16)v183;
                  *(_WORD *)&buf[14] = 2112;
                  *(_QWORD *)&buf[16] = key;
                  _os_log_impl(&dword_19B949000, v200, OS_LOG_TYPE_DEFAULT, "update channelNumber (%04x->%04x) for %@", buf, 0x18u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v415 = (unsigned __int16)v183;
                    v417 = key;
                    v411 = 0;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update channelNumber (%04x->%04x) for %@"));
                    if (_IDSShouldLog())
                    {
                      v415 = (unsigned __int16)v183;
                      v417 = key;
                      v411 = 0;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update channelNumber (%04x->%04x) for %@"));
                    }
                  }
                }
                objc_msgSend_setChannelNumber_(v433, v201, v187, v202, v411, v415, v417);
LABEL_78:
                IDSSimpleUInt16List_AddItem((uint64_t)&v431->_channelNumberList, v187);
                objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(v431, v203, (uint64_t)v433, v204, a6, a7, v187);
                OSLogHandleForTransportCategory();
                v205 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
                {
                  v209 = objc_msgSend_participantType(v429, v206, v207, v208);
                  v210 = CFSTR("lightweight");
                  if ((v209 & 1) == 0)
                    v210 = CFSTR("normal");
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)&buf[4] = v210;
                  _os_log_impl(&dword_19B949000, v205, OS_LOG_TYPE_DEFAULT, "server reports this client is a %@ participant", buf, 0xCu);
                }

                if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
                {
                  v214 = (objc_msgSend_participantType(v429, v211, v212, v213) & 1) != 0
                       ? CFSTR("lightweight")
                       : CFSTR("normal");
                  v411 = v214;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("server reports this client is a %@ participant"));
                  if (_IDSShouldLog())
                  {
                    if ((objc_msgSend_participantType(v429, v215, v216, v217, v411) & 1) != 0)
                      v218 = CFSTR("lightweight");
                    else
                      v218 = CFSTR("normal");
                    v411 = (void *)v218;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("server reports this client is a %@ participant"));
                  }
                }
                OSLogHandleForTransportCategory();
                v219 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_software(v429, v220, v221, v222);
                  v223 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)&buf[4] = v223;
                  _os_log_impl(&dword_19B949000, v219, OS_LOG_TYPE_DEFAULT, "received QR server build version %@", buf, 0xCu);

                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    objc_msgSend_software(v429, v224, v225, v226);
                    v411 = (void *)objc_claimAutoreleasedReturnValue();
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("received QR server build version %@"));

                    if (_IDSShouldLog())
                    {
                      objc_msgSend_software(v429, v224, v225, v226, v411);
                      v411 = (void *)objc_claimAutoreleasedReturnValue();
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("received QR server build version %@"));

                    }
                  }
                }
                v227 = objc_msgSend_linkId(v429, v224, v225, v226, v411);
                objc_msgSend_setRelayLinkID_(v433, v228, v227, v229);
                objc_msgSend_quicConnectionInfos(v429, v230, v231, v232);
                v444 = 0u;
                v445 = 0u;
                v443 = 0u;
                v442 = 0u;
                obj = (id)objc_claimAutoreleasedReturnValue();
                v237 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v233, (uint64_t)&v442, v234, v468, 16);
                if (v237)
                {
                  v238 = *(_QWORD *)v443;
                  v239 = 67109378;
                  do
                  {
                    for (j = 0; j != v237; ++j)
                    {
                      if (*(_QWORD *)v443 != v238)
                        objc_enumerationMutation(obj);
                      v241 = *(void **)(*((_QWORD *)&v442 + 1) + 8 * j);
                      objc_msgSend_quicConnectionId(v241, v235, v236, *(double *)&v239);
                      v242 = (void *)objc_claimAutoreleasedReturnValue();
                      v246 = objc_msgSend_quicConnectionType(v241, v243, v244, v245);
                      objc_msgSend_QUICConnectionIDs(v433, v247, v248, v249);
                      v250 = (void *)objc_claimAutoreleasedReturnValue();
                      v254 = v250;
                      if (v246 == 1)
                      {
                        objc_msgSend_setRemoteIDSConnectionIDData_(v250, v251, (uint64_t)v242, v253);
                      }
                      else if (v246)
                      {
                        objc_msgSend_GlobalLink(IDSFoundationLog, v251, v252, v253);
                        v255 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109378;
                          *(_DWORD *)&buf[4] = v246;
                          *(_WORD *)&buf[8] = 2112;
                          *(_QWORD *)&buf[10] = v241;
                          _os_log_impl(&dword_19B949000, v255, OS_LOG_TYPE_DEFAULT, "Received unknown QuicConnectionType: %d in QuicConnectionInfo: %@", buf, 0x12u);
                        }

                      }
                      else
                      {
                        objc_msgSend_setRemoteAVCConnectionIDData_(v250, v251, (uint64_t)v242, v253);
                      }

                    }
                    v237 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v235, (uint64_t)&v442, *(double *)&v239, v468, 16);
                  }
                  while (v237);
                }

                if (objc_msgSend__shouldUseQRTLE(v431, v256, v257, v258))
                {
                  objc_msgSend_local(v433, v259, v260, v261);
                  v262 = (void *)objc_claimAutoreleasedReturnValue();
                  if ((objc_msgSend_isCellularStunCandidate(v262, v263, v264, v265) & 1) != 0)
                  {
                    v266 = !v431->_allowTLEOverCellular;

                    if (v266)
                      goto LABEL_154;
                  }
                  else
                  {

                  }
                  objc_msgSend_QUICConnectionIDs(v433, v259, v260, v261);
                  v268 = (void *)objc_claimAutoreleasedReturnValue();
                  isComplete = objc_msgSend_isComplete(v268, v269, v270, v271);

                  if (isComplete)
                  {
                    objc_msgSend_sessionID(v433, v273, v274, v275);
                    v276 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_local(v433, v277, v278, v279);
                    v280 = (void *)objc_claimAutoreleasedReturnValue();
                    v284 = objc_msgSend_address(v280, v281, v282, v283);

                    objc_msgSend_remote(v433, v285, v286, v287);
                    v288 = (void *)objc_claimAutoreleasedReturnValue();
                    v292 = objc_msgSend_external(v288, v289, v290, v291);

                    objc_msgSend_QUICConnectionIDs(v433, v293, v294, v295);
                    v296 = (void *)objc_claimAutoreleasedReturnValue();
                    v300 = objc_msgSend_channelNumber(v433, v297, v298, v299);
                    if (objc_msgSend_createQUICPodQRConnectionsForSession_localAddress_remoteAddress_quicConnectionIDs_channelNumber_(v431->_nwLink, v301, (uint64_t)v276, v302, v284, v292, v296, v300))
                    {
                      *(_QWORD *)&v303 = 0xAAAAAAAAAAAAAAAALL;
                      *((_QWORD *)&v303 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      v466 = v303;
                      v467 = v303;
                      *(_OWORD *)&v464[16] = v303;
                      v465 = v303;
                      v463 = v303;
                      *(_OWORD *)v464 = v303;
                      *(_OWORD *)buf = v303;
                      *(_OWORD *)&buf[16] = v303;
                      __str[6] = v303;
                      __str[7] = v303;
                      __str[4] = v303;
                      __str[5] = v303;
                      __str[2] = v303;
                      __str[3] = v303;
                      __str[0] = v303;
                      __str[1] = v303;
                      SAToIPPortString(buf, 0x80uLL, v284);
                      SAToIPPortString((char *)__str, 0x80uLL, v292);
                      OSLogHandleForTransportCategory();
                      v304 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v451 = 138413314;
                        v452 = v276;
                        v453 = 2080;
                        v454 = buf;
                        v455 = 2080;
                        v456 = __str;
                        v457 = 2112;
                        v458 = v296;
                        v459 = 1024;
                        v460 = __rev16(v300);
                        _os_log_impl(&dword_19B949000, v304, OS_LOG_TYPE_DEFAULT, "createQUICPodQRConnectionsForSession(%@, %s, %s, %@, 0x%04x) succeeded", v451, 0x30u);
                      }

                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          v305 = __rev16(v300);
                          v419 = v296;
                          v420 = v305;
                          v417 = __str;
                          v412 = v276;
                          v415 = (unint64_t)buf;
                          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("createQUICPodQRConnectionsForSession(%@, %s, %s, %@, 0x%04x) succeeded"));
                          if (_IDSShouldLog())
                          {
                            v419 = v296;
                            v420 = v305;
                            v417 = __str;
                            v412 = v276;
                            v415 = (unint64_t)buf;
                            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("createQUICPodQRConnectionsForSession(%@, %s, %s, %@, 0x%04x) succeeded"));
                          }
                        }
                      }
                    }
                    else
                    {
                      OSLogHandleForTransportCategory();
                      v311 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v311, OS_LOG_TYPE_DEFAULT))
                      {
                        objc_msgSend_sessionID(v433, v312, v313, v314);
                        v315 = (id)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138412290;
                        *(_QWORD *)&buf[4] = v315;
                        _os_log_impl(&dword_19B949000, v311, OS_LOG_TYPE_DEFAULT, "createQUICPodQRConnectionsForSession(%@) failed", buf, 0xCu);

                      }
                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          objc_msgSend_sessionID(v433, v316, v317, v318);
                          v412 = (void *)objc_claimAutoreleasedReturnValue();
                          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("createQUICPodQRConnectionsForSession(%@) failed"));

                          if (_IDSShouldLog())
                          {
                            objc_msgSend_sessionID(v433, v319, v320, v321, v412);
                            v412 = (void *)objc_claimAutoreleasedReturnValue();
                            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("createQUICPodQRConnectionsForSession(%@) failed"));

                          }
                        }
                      }
                      if (v431->_clientType == 6)
                      {
                        OSLogHandleForTransportCategory();
                        v322 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
                        {
                          objc_msgSend_sessionID(v433, v323, v324, v325);
                          v326 = (id)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138412290;
                          *(_QWORD *)&buf[4] = v326;
                          _os_log_impl(&dword_19B949000, v322, OS_LOG_TYPE_DEFAULT, "createQUICPodQRConnectionsForSession(%@) failed, triggering ABC", buf, 0xCu);

                        }
                        if (os_log_shim_legacy_logging_enabled())
                        {
                          if (_IDSShouldLogTransport())
                          {
                            objc_msgSend_sessionID(v433, v327, v329, v328);
                            v412 = (void *)objc_claimAutoreleasedReturnValue();
                            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("createQUICPodQRConnectionsForSession(%@) failed, triggering ABC"));

                            if (_IDSShouldLog())
                            {
                              objc_msgSend_sessionID(v433, v327, v330, v328, v412);
                              v412 = (void *)objc_claimAutoreleasedReturnValue();
                              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("createQUICPodQRConnectionsForSession(%@) failed, triggering ABC"));

                            }
                          }
                        }
                        objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(v431, v327, (uint64_t)CFSTR("IDSQuickRelayShared"), v328, CFSTR("TLE"), CFSTR("SetupFailed"), 0, v412);
                      }
                    }

                    goto LABEL_153;
                  }
                  OSLogHandleForTransportCategory();
                  v306 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_QUICConnectionIDs(v433, v307, v308, v309);
                    v310 = (id)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138412290;
                    *(_QWORD *)&buf[4] = v310;
                    _os_log_impl(&dword_19B949000, v306, OS_LOG_TYPE_DEFAULT, "QUIC connectionIDs not available for TLE (%@)", buf, 0xCu);

                  }
                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      objc_msgSend_QUICConnectionIDs(v433, v259, v260, v261);
                      v412 = (void *)objc_claimAutoreleasedReturnValue();
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("QUIC connectionIDs not available for TLE (%@)"));

                      if (_IDSShouldLog())
                      {
                        objc_msgSend_QUICConnectionIDs(v433, v259, v260, v261, v412);
                        v276 = (void *)objc_claimAutoreleasedReturnValue();
                        v412 = v276;
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("QUIC connectionIDs not available for TLE (%@)"));
LABEL_153:

                      }
                    }
                  }
                }
LABEL_154:
                objc_msgSend_activeExperiments(v429, v259, v260, v261, v412, v415, v417, v419, v420);
                v331 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend__parseActiveExperiments_(v431, v332, (uint64_t)v331, v333);

                objc_msgSend__buildQrExperiments(v431, v334, v335, v336);
                objc_msgSend_materials(v429, v337, v338, v339);
                v340 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_receiveKeyMaterials_(v431, v341, (uint64_t)v340, v342);

                v346 = v431;
                serverMaterialExchangeController = v431->_serverMaterialExchangeController;
                if (serverMaterialExchangeController)
                {
                  objc_msgSend_setNeedsUpdate(serverMaterialExchangeController, v343, v344, v345);
                  v346 = v431;
                }
                quicMaterialExchangeProvider = v346->_quicMaterialExchangeProvider;
                if (quicMaterialExchangeProvider)
                  objc_msgSend_sendDesiredMaterialsIfNeeded(quicMaterialExchangeProvider, v343, v344, v345);
                if (v424 > 2)
                  goto LABEL_205;
                objc_msgSend_setState_(v433, v343, 3, v345);
                OSLogHandleForTransportCategory();
                v349 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT))
                {
                  v350 = (&_IDSStunCandidatePairStateStrings)[v424];
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = v350;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = off_1EE40A670;
                  *(_WORD *)&buf[22] = 2112;
                  *(_QWORD *)&buf[24] = key;
                  _os_log_impl(&dword_19B949000, v349, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v416 = off_1EE40A670;
                    v418 = key;
                    v413 = (&_IDSStunCandidatePairStateStrings)[v424];
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
                    if (_IDSShouldLog())
                    {
                      v416 = off_1EE40A670;
                      v418 = key;
                      v413 = (&_IDSStunCandidatePairStateStrings)[v424];
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
                    }
                  }
                }
                if (objc_msgSend_isRelayStunCandidatePair(v433, v351, v352, v353, v413, v416, v418)
                  && ((objc_msgSend_isSharedQRSession(v433, v354, v355, v356) | isRealloc) & 1) == 0)
                {
                  objc_msgSend_sessionID(v433, v354, v357, v356);
                  v358 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend__getCandidatePairsWithSessionID_inState_(v431, v359, (uint64_t)v358, v360, 4);
                  v361 = (void *)objc_claimAutoreleasedReturnValue();

                  v440 = 0u;
                  v441 = 0u;
                  v438 = 0u;
                  v439 = 0u;
                  v362 = v361;
                  v367 = objc_msgSend_countByEnumeratingWithState_objects_count_(v362, v363, (uint64_t)&v438, v364, v450, 16);
                  if (v367)
                  {
                    v369 = *(_QWORD *)v439;
                    while (2)
                    {
                      v370 = 0;
                      v371 = v433;
                      do
                      {
                        if (*(_QWORD *)v439 != v369)
                        {
                          objc_enumerationMutation(v362);
                          v371 = v433;
                        }
                        v372 = *(NSObject **)(*((_QWORD *)&v438 + 1) + 8 * v370);
                        if (v372 != v371)
                        {
                          objc_msgSend_GlobalLink(IDSFoundationLog, v365, v366, v368);
                          v400 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v400, OS_LOG_TYPE_DEFAULT))
                          {
                            objc_msgSend_sessionID(v433, v401, v402, v403);
                            v404 = (id)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138412802;
                            *(_QWORD *)&buf[4] = v372;
                            *(_WORD *)&buf[12] = 2112;
                            *(_QWORD *)&buf[14] = v404;
                            *(_WORD *)&buf[22] = 2112;
                            *(_QWORD *)&buf[24] = v433;
                            _os_log_impl(&dword_19B949000, v400, OS_LOG_TYPE_DEFAULT, "Found another connected candidate pair %@ with the same QRSessionID %@ disconnecting %@", buf, 0x20u);

                          }
                          objc_msgSend__sendQUICUnallocbindRequest_reason_(v431, v405, (uint64_t)key, v406, 8);

                          goto LABEL_207;
                        }
                        ++v370;
                      }
                      while (v367 != v370);
                      v367 = objc_msgSend_countByEnumeratingWithState_objects_count_(v362, v365, (uint64_t)&v438, v368, v450, 16);
                      if (v367)
                        continue;
                      break;
                    }
                  }

                }
                objc_msgSend__setFirstDefaultCandidatePair_(v431, v354, (uint64_t)v433, v356);
                if (isRealloc)
                {
                  if ((objc_msgSend_hbStarted(v433, v373, v374, v375) & 1) == 0)
                  {
                    OSLogHandleForTransportCategory();
                    v379 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v379, OS_LOG_TYPE_DEFAULT))
                    {
                      v383 = objc_msgSend_pendingRealloc(v433, v380, v381, v382);
                      v384 = CFSTR("NO");
                      if (v383)
                        v384 = CFSTR("YES");
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v384;
                      _os_log_impl(&dword_19B949000, v379, OS_LOG_TYPE_DEFAULT, "receive reallocate response, send HBR (%@).", buf, 0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
                    {
                      v388 = objc_msgSend_pendingRealloc(v433, v385, v387, v386)
                           ? CFSTR("YES")
                           : CFSTR("NO");
                      v414 = v388;
                      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive reallocate response, send HBR (%@)."));
                      if (_IDSShouldLog())
                      {
                        if (objc_msgSend_pendingRealloc(v433, v385, v389, v386, v414))
                          v390 = CFSTR("YES");
                        else
                          v390 = CFSTR("NO");
                        v414 = (__CFString *)v390;
                        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive reallocate response, send HBR (%@)."));
                      }
                    }
                    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v431, v385, 3, v386, 0, 0, key, v414);
                    objc_msgSend_setHbStarted_(v433, v391, 1, v392);
                  }
                  if ((objc_msgSend_isSharedQRSession(v433, v376, v377, v378) & 1) == 0)
                    goto LABEL_207;
                }
                else
                {
                  objc_msgSend__processXORMappedAddress_arrivalTime_(v431, v373, (uint64_t)v433, a9);
                  if (objc_msgSend_allocateType(v433, v395, v396, v397) == 2)
                  {
                    objc_msgSend__sendQUICUnallocbindRequest_reason_(v431, v393, (uint64_t)key, v394, 0);
                    goto LABEL_207;
                  }
                }
                if ((objc_msgSend__postProcessQUICAllocbindResponse_candidatePair_(v431, v393, (uint64_t)v429, v394, v433) & 1) == 0)
                {
                  if (v431->_delaySessionConnected)
                  {
                    if (!v431->_isInitiator)
                    {
                      v434[0] = MEMORY[0x1E0C809B0];
                      v434[1] = 3221225472;
                      v434[2] = sub_19BA05644;
                      v434[3] = &unk_1E3C1FE50;
                      v435 = v433;
                      v436 = v431;
                      v437 = key;
                      objc_msgSend_startSessionConnectedTimer_block_(v435, v398, 30, v399, v434);

                    }
                  }
                  else
                  {
                    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v431, v343, 1, v345, 0, 0, key);
                  }
LABEL_205:
                  if (objc_msgSend_pendingNoSessionStateAllocbind(v433, v343, v344, v345))
                    objc_msgSend_setPendingNoSessionState_(v433, v407, 0, v408);
                }
LABEL_207:

                v153 = 1;
                goto LABEL_208;
              }
              v188 = __rev16(v186);
              if ((unsigned __int16)v183 == v188)
              {
                OSLogHandleForTransportCategory();
                v189 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v185;
                  _os_log_impl(&dword_19B949000, v189, OS_LOG_TYPE_DEFAULT, "channelNumber unchanged (%04x)", buf, 8u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v411 = (void *)v185;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("channelNumber unchanged (%04x)"));
                    if (_IDSShouldLog())
                    {
                      v411 = (void *)v185;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("channelNumber unchanged (%04x)"));
                    }
                  }
                }
                goto LABEL_78;
              }
              OSLogHandleForTransportCategory();
              v267 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v188;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v185;
                _os_log_impl(&dword_19B949000, v267, OS_LOG_TYPE_DEFAULT, "channelNumber mismatch (%04x->%04x)", buf, 0xEu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("channelNumber mismatch (%04x->%04x)"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("channelNumber mismatch (%04x->%04x)"));
                }
              }
LABEL_122:
              v153 = 0;
LABEL_208:
              v198 = v422;
LABEL_209:

              v155 = (void *)v423;
              goto LABEL_210;
            }
            objc_msgSend_GlobalLink(IDSFoundationLog, v181, v182, v184);
            v197 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v426;
              _os_log_impl(&dword_19B949000, v197, OS_LOG_TYPE_DEFAULT, "receive %@ without channel-number", buf, 0xCu);
            }
          }
          else
          {
            objc_msgSend_GlobalLink(IDSFoundationLog, v172, v173, v174);
            v197 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v426;
              _os_log_impl(&dword_19B949000, v197, OS_LOG_TYPE_DEFAULT, "receive %@ with invalid client address", buf, 0xCu);
            }
          }

          goto LABEL_122;
        }
        objc_msgSend_GlobalLink(IDSFoundationLog, v103, v104, v105);
        v190 = objc_claimAutoreleasedReturnValue();
        v155 = v190;
        if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        {
          v194 = (&_IDSStunCandidatePairStateStrings)[v424];
          v195 = objc_msgSend_pendingNoSessionStateAllocbind(v433, v191, v192, v193);
          v196 = CFSTR("NO");
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v194;
          *(_WORD *)&buf[12] = 2112;
          if (v195)
            v196 = CFSTR("YES");
          *(_QWORD *)&buf[14] = v196;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v426;
          v166 = "_processNWLinkAllocbindResponse: candidate pair state is [%s], pendingNoSessionStateAllocbind: %@, ignore %@";
          v155 = v190;
          v167 = v190;
          v168 = 32;
          goto LABEL_45;
        }
      }
      else
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v100, v101, v102);
        v161 = objc_claimAutoreleasedReturnValue();
        v155 = v161;
        if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
        {
          v165 = objc_msgSend_transactionID(v430, v162, v163, v164);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v165;
          v166 = "_processNWLinkAllocbindResponse: %llu not pending proto request";
          v155 = v161;
          v167 = v161;
          v168 = 12;
LABEL_45:
          _os_log_impl(&dword_19B949000, v167, OS_LOG_TYPE_DEFAULT, v166, buf, v168);
        }
      }
      v153 = 1;
LABEL_210:

      v152 = v433;
      goto LABEL_211;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v93, v94, v95);
    v154 = objc_claimAutoreleasedReturnValue();
    v155 = v154;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v92 + 1) == 30)
        v159 = "IPv6";
      else
        v159 = "IPv4";
      v160 = objc_msgSend_transactionID(v430, v156, v157, v158);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v159;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v160;
      v155 = v154;
      _os_log_impl(&dword_19B949000, v154, OS_LOG_TYPE_DEFAULT, "_processNWLinkAllocbindResponse: force dropping [%s] quic allocbind response %llu.", buf, 0x16u);
    }
    v153 = 0;
    goto LABEL_210;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v41, v42, v43);
  v152 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v426;
    _os_log_impl(&dword_19B949000, v152, OS_LOG_TYPE_DEFAULT, "invalid %@ received", buf, 0xCu);
  }
  v153 = 0;
LABEL_211:

  return v153;
}

- (BOOL)_processQUICUnallocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  id v13;
  id v14;
  void *Value;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  double v40;
  const char *v41;
  uint64_t v42;
  double v43;
  NSString *idsSessionID;
  char *v45;
  const char *v46;
  uint64_t v47;
  double v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  double v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  double v60;
  int v61;
  const char *v62;
  uint64_t v63;
  double v64;
  int v65;
  unsigned __int16 v66;
  float v67;
  const char *v68;
  uint64_t v69;
  double v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  const char *v75;
  uint64_t v76;
  double v77;
  void *v78;
  const char *v79;
  double v80;
  void *v81;
  const char *v82;
  double v83;
  const char *v84;
  uint64_t v85;
  double v86;
  id WeakRetained;
  char v88;
  id v89;
  const char *v90;
  double v91;
  NSObject *v92;
  char *v93;
  const char *v94;
  uint64_t v95;
  double v96;
  NSObject *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  void *v101;
  IDSNWLink *nwLink;
  const char *v103;
  uint64_t v104;
  double v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  double v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  double v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  const char *v123;
  const char *v124;
  double v125;
  const char *v126;
  uint64_t v127;
  double v128;
  NSObject *v129;
  const char *v130;
  uint64_t v131;
  double v132;
  NSObject *v133;
  const char *v134;
  uint64_t v135;
  double v136;
  char *v137;
  const char *v138;
  uint64_t v139;
  double v140;
  const char *v141;
  uint64_t v142;
  double v143;
  void *v144;
  id v145;
  char v146;
  const char *v147;
  uint64_t v148;
  double v149;
  id v150;
  const char *v151;
  double v152;
  const char *v153;
  double v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  const char *v159;
  uint64_t v160;
  void *v161;
  double v162;
  NSMutableDictionary *unallocbindRequestToReason;
  void *v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  double v168;
  const char *v169;
  double v170;
  void *v171;
  void *v172;
  const char *v173;
  double v174;
  void *v175;
  NSObject *v176;
  id v177;
  NSMutableDictionary *v178;
  void *v179;
  const char *v180;
  double v181;
  const char *v182;
  double v183;
  const char *v184;
  double v185;
  char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  char v187;
  NSObject *v188;
  const char *v189;
  double v190;
  id v191;
  char v192;
  const char *v193;
  double v194;
  const char *v195;
  double v196;
  NSObject *v197;
  char *v198;
  char *v200;
  IDSGlobalLink *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  id v205;
  void *v206;
  void *v207;
  unsigned __int8 v208;
  uint64_t v209;
  void *v210;
  id v211;
  _QWORD block[4];
  id v213;
  id v214;
  uint8_t buf[4];
  uint64_t prots;
  __int16 v217;
  char *v218;
  __int16 v219;
  id v220;
  __int16 v221;
  double v222;
  __int16 v223;
  uint64_t v224;
  __int16 v225;
  int v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v211 = a4;
  v14 = a8;
  Value = 0;
  if (v14 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v14);
  v16 = Value;
  v20 = objc_msgSend_state(v16, v17, v18, v19);
  v24 = objc_msgSend_transactionID(v13, v21, v22, v23);
  if ((objc_msgSend_removeProtoRequest_(v16, v25, v24, v26) & 1) != 0)
  {
    if (v20 == 6)
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v27, v28, v29);
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        prots = (uint64_t)OBJC_PROTOCOL___IDSServerBagContentProvider.prots;
        v31 = "receive unallocbind response with state [%s], ignore.";
LABEL_10:
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, v31, buf, 0xCu);
        goto LABEL_76;
      }
      goto LABEL_76;
    }
    v209 = v20;
    objc_msgSend_startTime(v13, v27, v28, v29);
    v36 = v35;
    objc_msgSend_GlobalLink(IDSFoundationLog, v37, v38, v35);
    v39 = objc_claimAutoreleasedReturnValue();
    v40 = (a9 - v36) * 1000.0;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      objc_msgSend_sessionID(v16, v41, v42, v43);
      v45 = (char *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_local(v16, v46, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend_transport(v49, v50, v51, v52);
      objc_msgSend_local(v16, v54, v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = *(unsigned __int8 *)(objc_msgSend_address(v57, v58, v59, v60) + 1);
      *(_DWORD *)buf = 138413570;
      prots = (uint64_t)idsSessionID;
      v217 = 2112;
      v218 = v45;
      v219 = 2112;
      v220 = v14;
      v221 = 2048;
      v222 = v40;
      v223 = 2048;
      v224 = v53;
      v225 = 1024;
      v226 = v61;
      _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "Received unallocbind response for IDSSessionID: %@ QRSessionID: %@ on %@ after %0.6lf ms over protocol: %ld family: %d", buf, 0x3Au);

    }
    v65 = objc_msgSend_messageType(v13, v62, v63, v64);
    v66 = stunMessageTypeFromProtoMessageType(v65, 0);
    v67 = v40;
    GLUtilReportAWDStunMessageEventWithType(v66, 0, v16, v67);
    objc_msgSend_unallocbindResponse(v13, v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_reportingDataBlob(v71, v72, v73, v74);
    v30 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_local(v16, v75, v76, v77);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_base64EncodedStringWithOptions_(v30, v79, 0, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAllocbindDataBlob_(v78, v82, (uint64_t)v81, v83);

    GLUCreateQRStunMessageEventWithType(v66, 0, v16, self->_timeBase, v67);
    v210 = (void *)objc_claimAutoreleasedReturnValue();
    if (v210)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v88 = objc_opt_respondsToSelector();

      if ((v88 & 1) != 0)
      {
        v89 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v89, v90, (uint64_t)self, v91, v210);

      }
    }
    if (self->_state > 3)
    {
      v157 = objc_msgSend_transactionID(v13, v84, v85, v86);
      if (self->_unallocbindRequestToReason)
      {
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v155, v157, v158);
        v161 = (void *)objc_claimAutoreleasedReturnValue();
        if (v161)
        {
          unallocbindRequestToReason = self->_unallocbindRequestToReason;
          objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v159, v157, v162);
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v165 = (void *)CFDictionaryGetValue((CFDictionaryRef)unallocbindRequestToReason, v164);
          v208 = objc_msgSend_unsignedIntValue(v165, v166, v167, v168);

        }
        else
        {
          v208 = objc_msgSend_unsignedIntValue(0, v159, v160, v162);
        }

      }
      else
      {
        v208 = objc_msgSend_unsignedIntValue(0, v155, v156, v158);
      }
      v178 = self->_unallocbindRequestToReason;
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v169, v157, v170);
      v179 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removeObjectForKey_(v178, v180, (uint64_t)v179, v181);

      objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v182, (uint64_t)v16, v183, v208);
      if (self->_isUPlusOneSession)
        objc_msgSend__destroyVirtualRelayLinksForCandidatePair_(self, v184, (uint64_t)v16, v185);
      hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v184, 3, v185, 4, 0, 0);
      v187 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
      if (self->_state == 5)
      {
        objc_msgSend__discardCandidatePairsWithOption_(self, v126, 0, v128);
        if ((v187 & 1) == 0)
          objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v126, 0, v128, v208);
      }
      else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0
             && objc_msgSend_isEqualToString_(self->_cbuuid, v126, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v128))
      {
        OSLogHandleForTransportCategory();
        v188 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v188, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no more underlying link is connected."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no more underlying link is connected."));
          }
        }
        objc_msgSend_disconnectWithCompletionHandler_(self, v189, 0, v190);
      }
      goto LABEL_68;
    }
    objc_msgSend_setState_(v16, v84, 6, v86);
    OSLogHandleForTransportCategory();
    v92 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      v93 = (&_IDSStunCandidatePairStateStrings)[v209];
      *(_DWORD *)buf = 136315650;
      prots = (uint64_t)v93;
      v217 = 2080;
      v218 = off_1EE40A688;
      v219 = 2112;
      v220 = v14;
      _os_log_impl(&dword_19B949000, v92, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v203 = off_1EE40A688;
        v205 = v14;
        v200 = (&_IDSStunCandidatePairStateStrings)[v209];
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
        if (_IDSShouldLog())
        {
          v203 = off_1EE40A688;
          v205 = v14;
          v200 = (&_IDSStunCandidatePairStateStrings)[v209];
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
        }
      }
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v94, v95, v96, v200, v203, v205);
    v97 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_candidatePairToken(v16, v98, v99, v100);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      prots = (uint64_t)v101;
      _os_log_impl(&dword_19B949000, v97, OS_LOG_TYPE_DEFAULT, "Disconnecting unconnected QUIC connection %@ after successful unallocbind response", buf, 0xCu);

    }
    nwLink = self->_nwLink;
    objc_msgSend_sessionID(v16, v103, v104, v105);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(v16, v107, v108, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = objc_msgSend_address(v110, v111, v112, v113);
    objc_msgSend_remote(v16, v115, v116, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v122 = objc_msgSend_external(v118, v119, v120, v121);
    objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v123, (uint64_t)v106, 5.0, v114, v122, 1);

    if ((objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v124, 3, v125, 4, 0, 0) & 1) != 0)
    {
LABEL_68:
      if (objc_msgSend_pendingNoSessionStateAllocbind(v16, v126, v127, v128))
      {
        objc_msgSend_setState_(v16, v195, 1, v196);
        OSLogHandleForTransportCategory();
        v197 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
        {
          v198 = (&_IDSStunCandidatePairStateStrings)[v209];
          *(_DWORD *)buf = 136315650;
          prots = (uint64_t)v198;
          v217 = 2080;
          v218 = off_1EE40A660;
          v219 = 2112;
          v220 = v14;
          _os_log_impl(&dword_19B949000, v197, OS_LOG_TYPE_DEFAULT, "unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@."));
          }
        }
      }
      goto LABEL_75;
    }
    v206 = _Block_copy(self->_connectReadyHandler);
    OSLogHandleForTransportCategory();
    v129 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      prots = (uint64_t)self;
      _os_log_impl(&dword_19B949000, v129, OS_LOG_TYPE_DEFAULT, "failed to connect GlobalLink %@ due to session connected message timed out.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v201 = self;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to connect GlobalLink %@ due to session connected message timed out."));
        if (_IDSShouldLog())
        {
          v201 = self;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to connect GlobalLink %@ due to session connected message timed out."));
        }
      }
    }
    objc_msgSend_local(v16, v130, v131, v132, v201);
    v207 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v133 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      v137 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v207, v134, v135, v136)];
      *(_DWORD *)buf = 136315394;
      prots = (uint64_t)v137;
      v217 = 1024;
      LODWORD(v218) = 22;
      _os_log_impl(&dword_19B949000, v133, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v202 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v207, v138, v139, v140)];
        v204 = 22;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report session setup failure (%s, %d)."));
        if (_IDSShouldLog())
        {
          v202 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v207, v141, v142, v143, v202, 22)];
          v204 = 22;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report session setup failure (%s, %d)."));
        }
      }
    }
    GLUtilReportAWDClientTimerEvent(305, 22, v16, self->_enableSKE, self->_isInitiator, 0.0);
    GLUCreateQRClientTimeEvent(305, 22, v16, self->_timeBase, 0.0);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    v145 = objc_loadWeakRetained((id *)&self->_delegate);
    v146 = objc_opt_respondsToSelector();

    if ((v146 & 1) != 0)
    {
      v150 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v150, v151, (uint64_t)self, v152, v144);

    }
    if ((objc_msgSend_isSelfQRSession(v16, v147, v148, v149, v202, v204) & 1) != 0)
    {

LABEL_75:
      goto LABEL_76;
    }
    if (v206)
    {
      v171 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E0C99D80], v153, (uint64_t)CFSTR("SessionConnected message timed out."), v154, *MEMORY[0x1E0CB2D50]);
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_userInfo_(v171, v173, (uint64_t)CFSTR("GlobalLink"), v174, 9, v172);
      v175 = (void *)objc_claimAutoreleasedReturnValue();

      im_primary_queue();
      v176 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19BA064A0;
      block[3] = &unk_1E3C1C7E8;
      v213 = v175;
      v214 = v206;
      v177 = v175;
      dispatch_async(v176, block);

    }
    else
    {
      v191 = objc_loadWeakRetained((id *)&self->_delegate);
      v192 = objc_opt_respondsToSelector();

      if ((v192 & 1) == 0)
      {
LABEL_67:

        goto LABEL_68;
      }
      v177 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v177, v193, (uint64_t)self, v194, 0, self->_cbuuid);
    }

    goto LABEL_67;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v27, v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    prots = objc_msgSend_transactionID(v13, v32, v33, v34);
    v31 = "_processQUICUnallocbindResponse: %llu not pending proto request";
    goto LABEL_10;
  }
LABEL_76:

  return 1;
}

- (BOOL)_processQUICReallocIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v10;
  id v13;
  id v14;
  void *Value;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  int v28;
  const char *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  NSObject *v44;
  __int128 v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  const char *v51;
  uint64_t v52;
  double v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  double v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  const char *v66;
  uint64_t v67;
  double v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  double v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  const char *v82;
  double v83;
  const char *v84;
  double v85;
  const char *v86;
  double v87;
  const char *v88;
  uint64_t v89;
  double v90;
  const char *v91;
  uint64_t v92;
  uint64_t *FirstPrefix;
  double v94;
  void *v95;
  const char *v96;
  double v97;
  const char *v98;
  uint64_t v99;
  double v100;
  const char *v101;
  uint64_t v102;
  double v103;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v105;
  id v106;
  NSObject *v107;
  const char *v108;
  double v109;
  NSObject *v110;
  BOOL v111;
  NSObject *v112;
  id v113;
  char v114;
  const char *v115;
  double v116;
  NSObject *v117;
  void *v118;
  id v119;
  char v120;
  id v121;
  const char *v122;
  double v123;
  NSObject *v124;
  id v125;
  char v126;
  const char *v127;
  double v128;
  NSObject *v129;
  id v130;
  char v131;
  const char *v132;
  double v133;
  uint64_t v134;
  NSObject *v135;
  const char *v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  double v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  double v150;
  int v151;
  const char *v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  double v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  double v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  double v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  double v182;
  id v183;
  const char *v184;
  double v185;
  const char *v186;
  uint64_t v187;
  double v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  const char *v194;
  double v195;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *v197;
  const char *v198;
  uint64_t v199;
  double v200;
  uint64_t v201;
  const char *v202;
  double v203;
  NSMutableDictionary *v204;
  NSMutableDictionary *reallocNewCandidatePairToOldCandidatePair;
  id v206;
  void *v207;
  id WeakRetained;
  char v209;
  id v210;
  const char *v211;
  double v212;
  NSObject *v214;
  uint64_t v215;
  void *v216;
  id v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  id v224;
  void *v225;
  unsigned int keya;
  void *key;
  void *v228;
  void *v229;
  unsigned __int16 v231;
  void *v232;
  void *v233;
  id v234;
  void *v235;
  uint8_t v236[4];
  id v237;
  __int16 v238;
  uint64_t v239;
  __int16 v240;
  uint64_t v241;
  __int16 v242;
  unsigned int v243;
  __int16 v244;
  int v245;
  uint8_t v246[16];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _BYTE buf[32];
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;

  v10 = *(_QWORD *)&a5;
  v261 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v234 = a4;
  v14 = a8;
  Value = 0;
  if (v14 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v14);
  v16 = Value;
  objc_msgSend_reallocateIndication(v13, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForTransportCategory();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = objc_msgSend_txnId(v20, v22, v23, v24);
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v14;
    _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "receive realloc indication(%llu) on %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v215 = objc_msgSend_txnId(v20, v25, v26, v27);
      v218 = v14;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive realloc indication(%llu) on %@"));
      if (_IDSShouldLog())
      {
        v215 = objc_msgSend_txnId(v20, v25, v26, v27, v215, v14);
        v218 = v14;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive realloc indication(%llu) on %@"));
      }
    }
  }
  if (v20)
  {
    v28 = objc_msgSend_messageType(v13, v25, v26, v27);
    v231 = stunMessageTypeFromProtoMessageType(v28, 0);
    objc_msgSend_reallocateToken(v20, v29, v30, v31);
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v235, v32, v33, v34))
    {
      OSLogHandleForTransportCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v235;
        _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "receive realloc token %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v215 = (uint64_t)v235;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive realloc token %@"));
          if (_IDSShouldLog())
          {
            v215 = (uint64_t)v235;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive realloc token %@"));
          }
        }
      }
      objc_msgSend_clientAddress(v20, v36, v37, v38, v215, v218);
      v233 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_serverAddress(v20, v39, v40, v41);
      v232 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v42 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v259 = v42;
      v260 = v42;
      v257 = v42;
      v258 = v42;
      v255 = v42;
      v256 = v42;
      *(_OWORD *)buf = v42;
      *(_OWORD *)&buf[16] = v42;
      v43 = IPPortStringToSA(v232, (uint64_t)buf);
      if (IsValidSA(v43))
      {
        OSLogHandleForTransportCategory();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v246 = 138412290;
          *(_QWORD *)&v246[4] = v232;
          _os_log_impl(&dword_19B949000, v44, OS_LOG_TYPE_DEFAULT, "receive new relay server address [%@].", v246, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v216 = v232;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive new relay server address [%@]."));
            if (_IDSShouldLog())
            {
              v216 = v232;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive new relay server address [%@]."));
            }
          }
        }
        *(_QWORD *)&v45 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v252 = v45;
        v253 = v45;
        v250 = v45;
        v251 = v45;
        v248 = v45;
        v249 = v45;
        *(_OWORD *)v246 = v45;
        v247 = v45;
        v46 = IPPortStringToSA(v233, (uint64_t)v246);
        if (IsValidSA(v46))
        {
          OSLogHandleForTransportCategory();
          v47 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v236 = 138412290;
            v237 = v233;
            _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "receive client address [%@].", v236, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v216 = v233;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive client address [%@]."));
              if (_IDSShouldLog())
              {
                v216 = v233;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive client address [%@]."));
              }
            }
          }
          objc_msgSend_sessionID(v16, v48, v49, v50, v216);
          v229 = (void *)objc_claimAutoreleasedReturnValue();
          if (v229)
          {
            objc_msgSend_local(v16, v51, v52, v53);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            v58 = objc_msgSend_radioAccessTechnology(v54, v55, v56, v57);

            objc_msgSend_remote(v16, v59, v60, v61);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            keya = objc_msgSend_radioAccessTechnology(v62, v63, v64, v65);

            objc_msgSend_local(v16, v66, v67, v68);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v73 = objc_msgSend_mtu(v69, v70, v71, v72);

            objc_msgSend_remote(v16, v74, v75, v76);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v81 = objc_msgSend_mtu(v77, v78, v79, v80);

            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v82, 3, v83, 2, v58, v73, v10, a6, 0);
            v228 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v84, 3, v85, 2, keya, v81, 0xFFFFFFFFLL, 0, buf);
            v223 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v86, (uint64_t)v228, v87, v223, v229, self);
            v225 = (void *)objc_claimAutoreleasedReturnValue();
            if (a6->sa_family == 30 && buf[1] == 2)
            {
              FirstPrefix = IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, v10);
              if (!FirstPrefix)
              {
                OSLogHandleForTransportCategory();
                v214 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v236 = 67109120;
                  LODWORD(v237) = v10;
                  _os_log_impl(&dword_19B949000, v214, OS_LOG_TYPE_DEFAULT, "failed to get nat64 prefix for realloc (if:%d).", v236, 8u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get nat64 prefix for realloc (if:%d)."));
                    if (_IDSShouldLog())
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get nat64 prefix for realloc (if:%d)."));
                  }
                }
                v111 = 0;
                goto LABEL_111;
              }
              objc_msgSend_local(v225, v91, v92, v94);
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setPrefix_(v95, v96, (uint64_t)FirstPrefix, v97);

              objc_msgSend_synthesizeNat64WithPrefix(v225, v98, v99, v100);
            }
            objc_msgSend_candidatePairToken(v225, v88, v89, v90);
            key = (void *)objc_claimAutoreleasedReturnValue();
            tokenToCandidatePairs = self->_tokenToCandidatePairs;
            if (tokenToCandidatePairs
              && key
              && (v105 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, key)) != 0)
            {
              v106 = v105;
              OSLogHandleForTransportCategory();
              v107 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v236 = 138412290;
                v237 = key;
                _os_log_impl(&dword_19B949000, v107, OS_LOG_TYPE_DEFAULT, "found existing candidate pair for %@.", v236, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v217 = key;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found existing candidate pair for %@."));
                  if (_IDSShouldLog())
                  {
                    v217 = key;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found existing candidate pair for %@."));
                  }
                }
              }
            }
            else
            {
              v134 = objc_msgSend_channelNumber(v16, v101, v102, v103);
              IDSSimpleUInt16List_AddItem((uint64_t)&self->_reallocChannelList, v134);
              OSLogHandleForTransportCategory();
              v135 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
              {
                v139 = objc_msgSend_length(v235, v136, v137, v138);
                objc_msgSend_relaySessionKey(v16, v140, v141, v142);
                v143 = (void *)objc_claimAutoreleasedReturnValue();
                v147 = objc_msgSend_length(v143, v144, v145, v146);
                v151 = objc_msgSend_channelNumber(v16, v148, v149, v150);
                *(_DWORD *)v236 = 138413314;
                v237 = v16;
                v238 = 2048;
                v239 = v139;
                v240 = 2048;
                v241 = v147;
                v242 = 1024;
                v243 = __rev16(v134);
                v244 = 1024;
                v245 = v151;
                _os_log_impl(&dword_19B949000, v135, OS_LOG_TYPE_DEFAULT, "start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).", v236, 0x2Cu);

              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v155 = objc_msgSend_length(v235, v152, v153, v154);
                  objc_msgSend_relaySessionKey(v16, v156, v157, v158);
                  v159 = (void *)objc_claimAutoreleasedReturnValue();
                  v163 = objc_msgSend_length(v159, v160, v161, v162);
                  v167 = __rev16(v134);
                  v221 = v167;
                  v222 = objc_msgSend_channelNumber(v16, v164, v165, v166);
                  v219 = v155;
                  v220 = v163;
                  v217 = v16;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d)."));

                  if (_IDSShouldLog())
                  {
                    v171 = objc_msgSend_length(v235, v168, v169, v170, v16, v155, v163, v167, v222);
                    objc_msgSend_relaySessionKey(v16, v172, v173, v174);
                    v175 = (void *)objc_claimAutoreleasedReturnValue();
                    v179 = objc_msgSend_length(v175, v176, v177, v178);
                    v221 = v167;
                    v222 = objc_msgSend_channelNumber(v16, v180, v181, v182);
                    v219 = v171;
                    v220 = v179;
                    v217 = v16;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d)."));

                  }
                }
              }
              v183 = v225;
              objc_msgSend_setPropertiesWithReallocCandidatePair_reallocToken_(v183, v184, (uint64_t)v16, v185, v235);
              objc_msgSend_remote(v183, v186, v187, v188);
              v189 = (void *)objc_claimAutoreleasedReturnValue();
              v193 = objc_msgSend_external(v189, v190, v191, v192);
              objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(self, v194, (uint64_t)v183, v195, a6, v193, v134);

              if (!self->_tokenToCandidatePairs)
              {
                Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v197 = self->_tokenToCandidatePairs;
                self->_tokenToCandidatePairs = Mutable;

              }
              v106 = v183;
              if (v106)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, key, v106);
              }
              else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                sub_19BAF12A0();
              }

            }
            objc_msgSend_setIsRealloc_(v106, v108, 1, v109, v217, v219, v220, v221, v222);
            v201 = objc_msgSend_pendingNoSessionStateAllocbind(v106, v198, v199, v200);
            objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(self, v202, (uint64_t)key, v203, 1, 0, 1, v201);
            if (!self->_reallocNewCandidatePairToOldCandidatePair)
            {
              v204 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
              self->_reallocNewCandidatePairToOldCandidatePair = v204;

            }
            v206 = v16;
            if (v206)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_reallocNewCandidatePairToOldCandidatePair, key, v206);
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              sub_19BAF150C();
            }

            GLUtilReportAWDStunMessageEventWithType(v231, 0, v206, 0.0);
            GLUCreateQRStunMessageEventWithType(v231, 0, v206, 0, 0.0);
            v207 = (void *)objc_claimAutoreleasedReturnValue();
            if (v207)
            {
              WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
              v209 = objc_opt_respondsToSelector();

              if ((v209 & 1) != 0)
              {
                v210 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didAddQREvent_(v210, v211, (uint64_t)self, v212, v207);

              }
            }

            v111 = 1;
LABEL_111:

            goto LABEL_113;
          }
          OSLogHandleForTransportCategory();
          v129 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v236 = 138412290;
            v237 = v14;
            _os_log_impl(&dword_19B949000, v129, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for %@.", v236, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find relay-session-id for %@."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find relay-session-id for %@."));
            }
          }
          GLUtilReportAWDStunMessageEventWithType(v231, 6, v16, 0.0);
          GLUCreateQRStunMessageEventWithType(v231, 6, v16, 0, 0.0);
          v228 = (void *)objc_claimAutoreleasedReturnValue();
          if (v228)
          {
            v130 = objc_loadWeakRetained((id *)&self->_delegate);
            v131 = objc_opt_respondsToSelector();

            if ((v131 & 1) != 0)
            {
              v224 = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didAddQREvent_(v224, v132, (uint64_t)self, v133, v228);
              v111 = 0;

LABEL_113:
              goto LABEL_114;
            }
          }
        }
        else
        {
          OSLogHandleForIDSCategory();
          v124 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v236 = 0;
            _os_log_impl(&dword_19B949000, v124, OS_LOG_TYPE_ERROR, "invalid client address.", v236, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            _IDSWarnV();
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("invalid client address."));
            _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("invalid client address."));
          }
          GLUtilReportAWDStunMessageEventWithType(v231, 4, v16, 0.0);
          GLUCreateQRStunMessageEventWithType(v231, 4, v16, 0, 0.0);
          v229 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v229
            || (v125 = objc_loadWeakRetained((id *)&self->_delegate),
                v126 = objc_opt_respondsToSelector(),
                v125,
                (v126 & 1) == 0))
          {
            v111 = 0;
LABEL_114:

            goto LABEL_115;
          }
          v228 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v228, v127, (uint64_t)self, v128, v229);
        }
        v111 = 0;
        goto LABEL_113;
      }
      OSLogHandleForIDSCategory();
      v117 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v246 = 0;
        _os_log_impl(&dword_19B949000, v117, OS_LOG_TYPE_ERROR, "invalid realloc server address.", v246, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        _IDSWarnV();
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("invalid realloc server address."));
        _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("invalid realloc server address."));
      }
      GLUtilReportAWDStunMessageEventWithType(v231, 3, v16, 0.0);
      GLUCreateQRStunMessageEventWithType(v231, 3, v16, 0, 0.0);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      if (v118)
      {
        v119 = objc_loadWeakRetained((id *)&self->_delegate);
        v120 = objc_opt_respondsToSelector();

        if ((v120 & 1) != 0)
        {
          v121 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v121, v122, (uint64_t)self, v123, v118);

        }
      }

    }
    else
    {
      OSLogHandleForIDSCategory();
      v112 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v112, OS_LOG_TYPE_ERROR, "failed to receive realloc token.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        _IDSWarnV();
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("failed to receive realloc token."));
        _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("failed to receive realloc token."));
      }
      GLUtilReportAWDStunMessageEventWithType(v231, 2, v16, 0.0);
      GLUCreateQRStunMessageEventWithType(v231, 2, v16, 0, 0.0);
      v233 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v233
        || (v113 = objc_loadWeakRetained((id *)&self->_delegate),
            v114 = objc_opt_respondsToSelector(),
            v113,
            (v114 & 1) == 0))
      {
        v111 = 0;
LABEL_116:

        goto LABEL_117;
      }
      v232 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v232, v115, (uint64_t)self, v116, v233);
    }
    v111 = 0;
LABEL_115:

    goto LABEL_116;
  }
  OSLogHandleForTransportCategory();
  v110 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v110, OS_LOG_TYPE_DEFAULT, "_processReallocIndication failed due to invalid reallocateIndication.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_processReallocIndication failed due to invalid reallocateIndication."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_processReallocIndication failed due to invalid reallocateIndication."));
    }
  }
  v111 = 0;
LABEL_117:

  return v111;
}

- (BOOL)_processQUICDiagnosticIndication:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  int isInternalInstall;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  const char *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unsigned __int16 v38;
  const char *v39;
  double v40;
  char v41;
  NSObject *v42;
  uint64_t v44;
  void *v45;
  void *v46;
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v12, v13, v14, v15);

  if (isInternalInstall)
  {
    objc_msgSend_diagnosticIndication(v7, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v20;
    if (v20)
    {
      objc_msgSend_failureSubtype(v20, v21, v22, v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_failureSubtypeContext(v24, v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      OSLogHandleForTransportCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218498;
        v48 = objc_msgSend_txnId(v24, v31, v32, v33);
        v49 = 2112;
        v50 = v25;
        v51 = 2112;
        v52 = v29;
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "receive diagnostic indication(%llu) subtype [%@] context [%@}", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v45 = v25;
          v46 = v29;
          v44 = objc_msgSend_txnId(v24, v34, v35, v36);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive diagnostic indication(%llu) subtype [%@] context [%@}"));
          if (_IDSShouldLog())
          {
            v37 = objc_msgSend_txnId(v24, v34, v35, v36, v44, v25, v29);
            v45 = v25;
            v46 = v29;
            v44 = v37;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive diagnostic indication(%llu) subtype [%@] context [%@}"));
          }
        }
      }
      v38 = objc_msgSend_packetsRecordDuration(v24, v34, v35, v36, v44, v45, v46);
      v41 = objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v39, (uint64_t)v8, v40, v25, v29, v38);

    }
    else
    {
      OSLogHandleForTransportCategory();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v42, OS_LOG_TYPE_DEFAULT, "_processDiagnosticIndication failed due to invalid diagnosticIndication.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_processDiagnosticIndication failed due to invalid diagnosticIndication."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_processDiagnosticIndication failed due to invalid diagnosticIndication."));
        }
      }
      v41 = 0;
    }
  }
  else
  {
    v41 = 1;
  }

  return v41;
}

- (BOOL)_processQUICGoAwayIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  id v14;
  id v15;
  void *Value;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  void *v52;
  const char *v53;
  double v54;
  NSDictionary *v55;
  NSDictionary *QRServerDataBlob;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  void *v58;
  const char *v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  const char *v64;
  double v65;
  uint64_t v66;
  id v67;
  const char *v68;
  double v69;
  const char *v70;
  uint64_t v71;
  double v72;
  uint64_t QRAllocateType;
  int v74;
  NSObject *v75;
  NSObject *v76;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void *v82;
  unsigned __int16 v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  _QWORD block[5];
  id v89;
  uint64_t v90;
  double v91;
  int v92;
  unsigned __int16 v93;
  _QWORD v94[4];
  id v95;
  id v96;
  IDSGlobalLink *v97;
  uint8_t buf[4];
  uint64_t v99;
  __int16 v100;
  id v101;
  __int16 v102;
  int v103;
  __int16 v104;
  void *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v86 = a4;
  v15 = a8;
  Value = 0;
  if (v15 && self->_tokenToCandidatePairs)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v15);
  v87 = Value;
  v85 = v14;
  objc_msgSend_goAwayIndication(v14, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v20;
  if (v20)
  {
    v83 = objc_msgSend_reasonCode(v20, v21, v22, v23);
    objc_msgSend_reasonString(v24, v25, v26, v27);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218754;
      v99 = objc_msgSend_txnId(v24, v29, v30, v31);
      v100 = 2112;
      v101 = v15;
      v102 = 1024;
      v103 = v83;
      v104 = 2112;
      v105 = v84;
      _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "receive goaway indication(%llu) for %@, error_code(%u) reason(%@).", buf, 0x26u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v81 = v83;
        v82 = v84;
        v78 = objc_msgSend_txnId(v24, v32, v33, v34);
        v80 = v15;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive goaway indication(%llu) for %@, error_code(%u) reason(%@)."));
        if (_IDSShouldLog())
        {
          v35 = objc_msgSend_txnId(v24, v32, v33, v34, v78, v15, v83, v84);
          v81 = v83;
          v82 = v84;
          v78 = v35;
          v80 = v15;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive goaway indication(%llu) for %@, error_code(%u) reason(%@)."));
        }
      }
    }
    objc_msgSend_serverBlob(v24, v32, v33, v34, v78, v80, v81, v82);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v36, v37, v38, v39))
    {
      OSLogHandleForTransportCategory();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        v47 = objc_msgSend_length(v36, v44, v45, v46);
        *(_DWORD *)buf = 134217984;
        v99 = v47;
        _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "This goaway has QR Server data blob(%luB)", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v79 = objc_msgSend_length(v36, v48, v49, v50);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("This goaway has QR Server data blob(%luB)"));
          if (_IDSShouldLog())
          {
            v79 = objc_msgSend_length(v36, v48, v49, v50, v79);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("This goaway has QR Server data blob(%luB)"));
          }
        }
      }
      v51 = (void *)MEMORY[0x1E0C99D80];
      objc_msgSend_sessionID(v87, v48, v49, v50, v79);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dictionaryWithObject_forKey_(v51, v53, (uint64_t)v36, v54, v52);
      v55 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
      QRServerDataBlob = self->_QRServerDataBlob;
      self->_QRServerDataBlob = v55;

    }
    serverMaterialExchangeController = self->_serverMaterialExchangeController;
    objc_msgSend_currentlySentMaterials(serverMaterialExchangeController, v40, v41, v42);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v59, (uint64_t)v58, v60);

    objc_msgSend_invalidate(self->_quicMaterialExchangeProvider, v61, v62, v63);
    objc_msgSend_setIsDisconnecting_(v87, v64, 1, v65);
    v66 = MEMORY[0x1E0C809B0];
    v94[0] = MEMORY[0x1E0C809B0];
    v94[1] = 3221225472;
    v94[2] = sub_19BA07FC0;
    v94[3] = &unk_1E3C1FE50;
    v95 = v15;
    v67 = v87;
    v96 = v67;
    v97 = self;
    objc_msgSend_startSessionGoAwayTimer_block_(v67, v68, 5, v69, v94);
    QRAllocateType = objc_msgSend__getQRAllocateType(self, v70, v71, v72);
    v74 = *(_DWORD *)&a7->sa_data[2];
    im_primary_queue();
    v75 = objc_claimAutoreleasedReturnValue();
    block[0] = v66;
    block[1] = 3221225472;
    block[2] = sub_19BA081B8;
    block[3] = &unk_1E3C1FF00;
    block[4] = self;
    v90 = QRAllocateType;
    v89 = v67;
    v91 = a9;
    v93 = v83;
    v92 = v74;
    dispatch_async(v75, block);

  }
  else
  {
    OSLogHandleForTransportCategory();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "_processGoAwayIndication failed due to invalid goAwayIndication.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_processGoAwayIndication failed due to invalid goAwayIndication."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_processGoAwayIndication failed due to invalid goAwayIndication."));
      }
    }
  }

  return v24 != 0;
}

- (BOOL)_processProtoPacket:(id *)a3 fromDeviceUniqueID:(id)a4 cbuuid:(id)a5 arrivalTime:(double)a6 headerOverhead:(unint64_t)a7
{
  const char *v12;
  uint64_t v13;
  double v14;
  unint64_t var30;
  const char *v16;
  uint64_t v17;
  __CFString *v18;
  double v19;
  IDSQRProtoMessage *v20;
  const char *v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  double v30;
  unsigned int var32;
  NSObject *v32;
  unsigned int var33;
  const char *v34;
  double v35;
  double v36;
  double v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  double v41;
  void *v42;
  id v43;
  void *v44;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  double *v53;
  const char *v54;
  uint64_t v55;
  double v56;
  NSObject *v57;
  char updated;
  double v59;
  unsigned __int8 v60;
  const char *v61;
  double v62;
  const char *v63;
  uint64_t v64;
  double v65;
  char started;
  const char *v67;
  double v68;
  NSObject *v69;
  NSObject *v71;
  NSObject *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unsigned int var16;
  id v83;
  void (**v84)(_QWORD);
  const char *v85;
  uint64_t v86;
  double v87;
  unint64_t v88;
  NSObject *v89;
  void *v90;
  char *v91;
  void *v92;
  void *v93;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *tokenToReallocBlocks;
  void *v96;
  id v97;
  id v98;
  uint8_t v99[4];
  void *v100;
  __int16 v101;
  id v102;
  __int16 v103;
  char *v104;
  _QWORD aBlock[5];
  NSObject *v106;
  id v107;
  id v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  double v125;
  unsigned int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE buf[48];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v98 = a4;
  v97 = a5;
  var30 = a3->var30;
  if (a3->var33 && a3->var32 != 7)
  {
    v27 = 0;
LABEL_9:
    var32 = a3->var32;
    v18 = CFSTR("error_response");
    goto LABEL_10;
  }
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v12, (uint64_t)a3->var0, v14, a3->var2, 0);
  v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v19);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      sub_19BAF3DE0();
    goto LABEL_46;
  }
  v20 = [IDSQRProtoMessage alloc];
  v23 = objc_msgSend_initWithData_(v20, v21, (uint64_t)v18, v22);
  if (!v23)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      sub_19BAF3E0C(v18, (char *)v27, v59);
    goto LABEL_46;
  }
  v27 = v23;

  if (a3->var33)
    goto LABEL_9;
  v28 = objc_msgSend_messageType(v27, v12, v13, v14);
  var32 = v28;
  if (v28 >= 0x25)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v29, (uint64_t)CFSTR("(unknown: %i)"), v30, v28);
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v18 = off_1E3C20400[(int)v28];
  }
  objc_msgSend_setTransactionID_(v27, v29, var30, v30);
LABEL_10:
  objc_msgSend_GlobalLink(IDSFoundationLog, v12, v13, v14);
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    var33 = a3->var33;
    *(_DWORD *)buf = 138413314;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = var32;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = var30;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = var33;
    *(_WORD *)&buf[34] = 2112;
    *(_QWORD *)&buf[36] = v27;
    _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "received %@[%d](%llu) error %u proto message %@", buf, 0x2Cu);
  }

  objc_msgSend__startTimeForProtoRequest_(self, v34, var30, v35);
  v37 = v36;
  objc_msgSend_setStartTime_(v27, v38, v39, v36);
  objc_msgSend__tokenForProtoRequest_(self, v40, var30, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (v42)
    goto LABEL_17;
  if (var32 <= 0x24 && ((1 << var32) & 0x1084027218) != 0)
  {
    v43 = a3->var31;
    if (v43)
    {
      v44 = v43;
      tokenForStunCandidatePair((uint64_t)&a3->var17, (uint64_t)&a3->var18, v43);
      v42 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_17:
      tokenToCandidatePairs = self->_tokenToCandidatePairs;
      if (tokenToCandidatePairs
        && v42
        && (v46 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v42)) != 0)
      {
        v50 = v46;
        if (objc_msgSend_isActive(v46, v47, v48, v49))
        {
          v53 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
          if (v53)
            v53[36] = a6;
        }
        else
        {
          objc_msgSend_setLastIncomingPacketTime_(v50, v51, v52, a6);
        }
        v60 = objc_msgSend_linkID(v50, v54, v55, v56);
        objc_msgSend_didReceiveProtobufPacketForLinkID_(self, v61, v60, v62);
        switch(var32)
        {
          case 1u:
          case 5u:
          case 7u:
          case 0xAu:
          case 0xFu:
          case 0x12u:
          case 0x14u:
          case 0x16u:
            started = objc_msgSend_processQUICErrorResponse_packetBuffer_startTime_headerOverhead_(v50, v63, (uint64_t)v27, v37, a3, a7);
            goto LABEL_37;
          case 2u:
            started = objc_msgSend__processNWLinkAllocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v98, a3->var16, &a3->var17, &a3->var18, v42);
            goto LABEL_37;
          case 3u:
            updated = objc_msgSend__processQUICDiagnosticIndication_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v42);

            goto LABEL_39;
          case 4u:
            updated = objc_msgSend__processQUICGoAwayIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v98, a3->var16, &a3->var17, &a3->var18, v42);

            goto LABEL_39;
          case 6u:
            started = objc_msgSend_processQUICInfoResponse_receivedBytes_(v50, v63, (uint64_t)v27, v65, a3->var2 + a7);
            goto LABEL_37;
          case 8u:
            started = objc_msgSend_processQUICParticipantUpdateResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 9u:
            updated = objc_msgSend_processQUICParticipantUpdateIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0xBu:
            started = objc_msgSend_processQUICPluginRegistrationResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 0xCu:
            updated = objc_msgSend_processQUICPluginControlIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0xDu:
            updated = objc_msgSend_processQUICErrorIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0xEu:
            v73 = *(_OWORD *)&a3->var17.__ss_pad2[64];
            v137 = *(_OWORD *)&a3->var17.__ss_pad2[48];
            v138 = v73;
            v74 = *(_OWORD *)&a3->var17.__ss_pad2[96];
            v139 = *(_OWORD *)&a3->var17.__ss_pad2[80];
            v140 = v74;
            v75 = *(_OWORD *)a3->var17.__ss_pad2;
            *(_OWORD *)buf = *(_OWORD *)&a3->var17.ss_len;
            *(_OWORD *)&buf[16] = v75;
            v76 = *(_OWORD *)&a3->var17.__ss_pad2[32];
            *(_OWORD *)&buf[32] = *(_OWORD *)&a3->var17.__ss_pad2[16];
            v136 = v76;
            v77 = *(_OWORD *)&a3->var18.__ss_pad2[64];
            v78 = *(_OWORD *)&a3->var18.__ss_pad2[80];
            v131 = *(_OWORD *)&a3->var18.__ss_pad2[48];
            v132 = v77;
            v79 = *(_OWORD *)&a3->var18.__ss_pad2[96];
            v133 = v78;
            v134 = v79;
            v80 = *(_OWORD *)a3->var18.__ss_pad2;
            v127 = *(_OWORD *)&a3->var18.ss_len;
            v128 = v80;
            v81 = *(_OWORD *)&a3->var18.__ss_pad2[32];
            v129 = *(_OWORD *)&a3->var18.__ss_pad2[16];
            v130 = v81;
            var16 = a3->var16;
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 3221225472;
            aBlock[2] = sub_19BA08FF8;
            aBlock[3] = &unk_1E3C1FF28;
            aBlock[4] = self;
            v106 = v27;
            v107 = v98;
            v126 = var16;
            v113 = v137;
            v114 = v138;
            v115 = v139;
            v116 = v140;
            v109 = *(_OWORD *)buf;
            v110 = *(_OWORD *)&buf[16];
            v111 = *(_OWORD *)&buf[32];
            v112 = v136;
            v123 = v133;
            v124 = v134;
            v121 = v131;
            v122 = v132;
            v119 = v129;
            v120 = v130;
            v117 = v127;
            v118 = v128;
            v83 = v42;
            v108 = v83;
            v125 = a6;
            v84 = (void (**)(_QWORD))_Block_copy(aBlock);
            v88 = objc_msgSend_state(v50, v85, v86, v87);
            if (v88 > 3)
            {
              v84[2](v84);
            }
            else
            {
              OSLogHandleForTransportCategory();
              v89 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
              {
                v90 = _Block_copy(v84);
                v91 = (&_IDSStunCandidatePairStateStrings)[v88];
                *(_DWORD *)v99 = 134218498;
                v100 = v90;
                v101 = 2112;
                v102 = v83;
                v103 = 2080;
                v104 = v91;
                _os_log_impl(&dword_19B949000, v89, OS_LOG_TYPE_DEFAULT, "delay processing realloc block %p for %@, state [%s].", v99, 0x20u);

              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v92 = _Block_copy(v84);
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("delay processing realloc block %p for %@, state [%s]."));

                  if (_IDSShouldLog())
                  {
                    v93 = _Block_copy(v84);
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("delay processing realloc block %p for %@, state [%s]."));

                  }
                }
              }
              if (!self->_tokenToReallocBlocks)
              {
                Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                tokenToReallocBlocks = self->_tokenToReallocBlocks;
                self->_tokenToReallocBlocks = Mutable;

              }
              v96 = _Block_copy(v84);
              if (v96)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToReallocBlocks, v83, v96);
              }
              else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                sub_19BAF1588();
              }

            }
            updated = 1;
            goto LABEL_39;
          case 0x10u:
            started = objc_msgSend_processQUICSessionInfoResponse_receivedBytes_isLightweightParticipant_(v50, v63, (uint64_t)v27, v65, a3->var2 + a7, self->_isLightweightParticipant);
            goto LABEL_37;
          case 0x11u:
            updated = objc_msgSend_processQUICSessionInfoIndication_arrivalTime_isLightweightParticipant_(v50, v63, (uint64_t)v27, a6, self->_isLightweightParticipant);

            goto LABEL_39;
          case 0x13u:
            started = objc_msgSend_processQUICStatsResponse_arrivalTime_(v50, v63, (uint64_t)v27, a6);
            goto LABEL_37;
          case 0x15u:
            started = objc_msgSend_processQUICTestResponse_arrivalTime_(v50, v63, (uint64_t)v27, a6);
            goto LABEL_37;
          case 0x17u:
            started = objc_msgSend__processQUICUnallocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v98, a3->var16, &a3->var17, &a3->var18, v42);
            goto LABEL_37;
          case 0x19u:
            started = objc_msgSend_processQUICPutMaterialResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 0x1Au:
            updated = objc_msgSend_processQUICPutMaterialIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0x1Cu:
            started = objc_msgSend_processQUICGetMaterialResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 0x1Du:
          case 0x20u:
            started = objc_msgSend__processReliableUnicastRegistrationErrorResponse_packetBuffer_startTime_candidatePair_(self, v63, (uint64_t)v27, v37, a3, v50);
            goto LABEL_37;
          case 0x1Eu:
            started = objc_msgSend__processRegisterResponse_candidatePairToken_(self, v63, (uint64_t)v27, v65, v42);
            goto LABEL_37;
          case 0x1Fu:
            started = objc_msgSend__processRegisterIndication_candidatePairToken_(self, v63, (uint64_t)v27, v65, v42);
            goto LABEL_37;
          case 0x21u:
            started = objc_msgSend__processRegisterAckResponse_candidatePairToken_(self, v63, (uint64_t)v27, v65, v42);
LABEL_37:
            updated = started;
            break;
          default:
            objc_msgSend_GlobalLink(IDSFoundationLog, v63, v64, v65);
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
              sub_19BAF3E9C();

            updated = 0;
            break;
        }
        objc_msgSend__removeProtoRequest_status_(self, v67, var30, v68, a3->var33);

      }
      else
      {
        OSLogHandleForTransportCategory();
        v57 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v42;
          _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for incoming proto message, candidagePairToken = %@", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find candidate pair for incoming proto message, candidagePairToken = %@"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find candidate pair for incoming proto message, candidagePairToken = %@"));
          }
        }
        updated = 0;
      }
LABEL_39:

      goto LABEL_47;
    }
    OSLogHandleForTransportCategory();
    v69 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_19B949000, v69, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find relay-session-id for %@"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find relay-session-id for %@"));
      }
    }
LABEL_46:
    updated = 0;
    goto LABEL_47;
  }
  OSLogHandleForTransportCategory();
  v71 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = var30;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v18;
    _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "no matching request with QUIC transactionID %llu for %@ proto message, ignore.", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no matching request with QUIC transactionID %llu for %@ proto message, ignore."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no matching request with QUIC transactionID %llu for %@ proto message, ignore."));
    }
  }
  updated = 1;
LABEL_47:

  return updated;
}

- (BOOL)_processRegisterIndication:(id)a3 candidatePairToken:(id)a4
{
  return 0;
}

- (BOOL)_processRegisterAckResponse:(id)a3 candidatePairToken:(id)a4
{
  return 0;
}

- (BOOL)_processRegisterResponse:(id)a3 candidatePairToken:(id)a4
{
  return 0;
}

- (BOOL)_processReliableUnicastRegistrationErrorResponse:(id)a3 packetBuffer:(id *)a4 startTime:(double)a5 candidatePair:(id)a6
{
  return 0;
}

- (void)_updateCandidatePair:(id)a3 newLocalPort:(unsigned __int16)a4
{
  uint64_t v4;
  id v6;
  NSMutableDictionary *tokenToCandidatePairs;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *v21;
  id v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  NSMutableDictionary *v27;
  void *v28;
  _BOOL8 v29;
  const char *v30;
  uint64_t v31;
  double v32;

  v4 = a4;
  v6 = a3;
  tokenToCandidatePairs = self->_tokenToCandidatePairs;
  objc_msgSend_candidatePairToken(v6, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(tokenToCandidatePairs, v12, (uint64_t)v11, v13);

  objc_msgSend_local(v6, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLocalPort_(v17, v18, v4, v19);

  if (!self->_tokenToCandidatePairs)
  {
    Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v21 = self->_tokenToCandidatePairs;
    self->_tokenToCandidatePairs = Mutable;

  }
  v22 = v6;
  v26 = v22;
  if (v22)
  {
    v27 = self->_tokenToCandidatePairs;
    objc_msgSend_candidatePairToken(v22, v23, v24, v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    CFDictionarySetValue((CFMutableDictionaryRef)v27, v28, v26);

  }
  else
  {
    v29 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v29)
      sub_19BAF3EFC(v32, v29, v30, v31);
  }

}

- (void)_saveProtoRequest:(id)a3 token:(id)a4
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  double v19;
  NSMutableDictionary *transactionIDToRequestMetadata;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *v22;
  void *v23;
  const char *v24;
  double v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  IDSGFTMetricsCollector *metricsCollector;
  uint64_t v31;
  const char *v32;
  double v33;
  __CFString *v34;
  void *v35;
  IDSGlobalLinkRequestMetadata *v36;
  const char *v37;
  void *started;
  NSMutableDictionary *v39;
  void *v40;
  id v41;
  const char *v42;
  double v43;
  const void *v44;
  uint64_t v45;
  double v46;
  id v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  double v51;
  __int16 v52;
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v11 = objc_msgSend_transactionID(v6, v8, v9, v10);
  objc_msgSend_startTime(v6, v12, v13, v14);
  v16 = v15;
  OSLogHandleForTransportCategory();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    v49 = v11;
    v50 = 2048;
    v51 = v16;
    v52 = 2112;
    v53 = v7;
    _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "_saveProtoRequest %llu %.3f for %@", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v47 = v7;
      v46 = v16;
      v45 = v11;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_saveProtoRequest %llu %.3f for %@"));
      if (_IDSShouldLog())
      {
        v47 = v7;
        v46 = v16;
        v45 = v11;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_saveProtoRequest %llu %.3f for %@"));
      }
    }
  }
  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  if (!transactionIDToRequestMetadata)
  {
    Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = self->_transactionIDToRequestMetadata;
    self->_transactionIDToRequestMetadata = Mutable;

    transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  }
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v18, v11, v19, v45, *(_QWORD *)&v46, v47);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v24, (uint64_t)v23, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v26)
  {
    metricsCollector = self->_metricsCollector;
    v31 = objc_msgSend_messageType(v6, v27, v28, v29);
    if (v31 >= 0x25)
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v32, (uint64_t)CFSTR("(unknown: %i)"), v33, v31);
      v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v34 = off_1E3C20400[(int)v31];
    }
    objc_msgSend_request_(metricsCollector, v32, (uint64_t)v34, v33);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = [IDSGlobalLinkRequestMetadata alloc];
    started = (void *)objc_msgSend_initWithStartTime_token_metricsRequest_(v36, v37, (uint64_t)v7, v16, v35);
    v26 = started;
    if (started)
    {
      v39 = self->_transactionIDToRequestMetadata;
      v40 = (void *)MEMORY[0x1E0CB37E8];
      v41 = started;
      v44 = (const void *)objc_msgSend_numberWithUnsignedLongLong_(v40, v42, v11, v43);
      CFDictionarySetValue((CFMutableDictionaryRef)v39, v44, v41);

    }
  }

}

- (void)_removeProtoRequest:(unint64_t)a3 status:(unsigned int)a4
{
  uint64_t v4;
  NSObject *v7;
  const char *v8;
  double v9;
  NSMutableDictionary *transactionIDToRequestMetadata;
  void *v11;
  const char *v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  double v20;
  NSMutableDictionary *v21;
  const char *v22;
  double v23;
  void *v24;
  const char *v25;
  double v26;
  unint64_t v27;
  uint8_t buf[4];
  unint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)&a4;
  v30 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v29 = a3;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "_removeProtoRequest %llu", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v27 = a3;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_removeProtoRequest %llu"));
      if (_IDSShouldLog())
      {
        v27 = a3;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_removeProtoRequest %llu"));
      }
    }
  }
  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v8, a3, v9, v27);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v12, (uint64_t)v11, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_metricsRequest(v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_receivedResponse_(v18, v19, v4, v20);

  v21 = self->_transactionIDToRequestMetadata;
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v22, a3, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v21, v25, (uint64_t)v24, v26);

}

- (double)_startTimeForProtoRequest:(unint64_t)a3
{
  double v3;
  NSMutableDictionary *transactionIDToRequestMetadata;
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;

  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, a3, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_startTime(v8, v9, v10, v11);
  v13 = v12;

  return v13;
}

- (id)_tokenForProtoRequest:(unint64_t)a3
{
  double v3;
  NSMutableDictionary *transactionIDToRequestMetadata;
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;

  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, a3, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_token(v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (int64_t)_sendProtoMessage:(id)a3 candidatePair:(id)a4
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  unsigned __int8 *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  unsigned __int8 *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  const char *v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  int v46;
  const char *v47;
  uint64_t v48;
  double v49;
  char v50;
  const char *v51;
  uint64_t v52;
  double v53;
  char v54;
  __int128 v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  id *v68;
  const char *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  double v73;
  const char *v74;
  uint64_t v75;
  double v76;
  int v77;
  uint64_t v78;
  id v79;
  const char *v80;
  double v81;
  const char *v82;
  uint64_t v83;
  int64_t v84;
  double v85;
  NSObject *v86;
  NSString *v87;
  NSObject *v88;
  NSString *idsSessionID;
  uint64_t v91;
  int v92;
  void *__buf;
  uint8_t buf[4];
  id v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  NSString *v100;
  __int16 v101;
  char *v102;
  __int16 v103;
  char *v104;
  char v105[16];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _OWORD __str[8];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend_local(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = objc_msgSend_index(v10, v11, v12, v13);

  objc_msgSend_local(v6, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (unsigned __int8 *)objc_msgSend_address(v17, v18, v19, v20);

  objc_msgSend_remote(v6, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (unsigned __int8 *)objc_msgSend_external(v25, v26, v27, v28);

  objc_msgSend_local(v6, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = objc_msgSend_transport(v33, v34, v35, v36);

  objc_msgSend_candidatePairToken(v6, v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  __buf = (void *)0xAAAAAAAAAAAAAAAALL;
  arc4random_buf(&__buf, 8uLL);
  objc_msgSend_setTransactionID_(v5, v41, (uint64_t)__buf, v42);
  v46 = objc_msgSend_linkID(v6, v43, v44, v45);
  if (v46)
    v50 = v46;
  else
    v50 = -1;
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v6, v47, v48, v49))
    v54 = objc_msgSend_delegatedLinkID(v6, v51, v52, v53);
  else
    v54 = -1;
  *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[6] = v55;
  __str[7] = v55;
  __str[4] = v55;
  __str[5] = v55;
  __str[2] = v55;
  __str[3] = v55;
  __str[0] = v55;
  __str[1] = v55;
  v111 = v55;
  v112 = v55;
  v109 = v55;
  v110 = v55;
  v107 = v55;
  v108 = v55;
  *(_OWORD *)v105 = v55;
  v106 = v55;
  SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)v21);
  SAToIPPortString(v105, 0x80uLL, (uint64_t)v29);
  objc_msgSend_data(v5, v56, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = objc_msgSend_length(v59, v60, v61, v62);
  v67 = objc_msgSend_length(v59, v64, v65, v66);
  v68 = _IDSLinkPacketBufferCreateWithSize((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 11716, v67);
  objc_msgSend_getBytes_length_(v59, v69, (uint64_t)*v68, v70, v63);
  v68[2] = (id)v63;
  *((_BYTE *)v68 + 44) = 1;
  v68[157] = __buf;
  if (objc_msgSend_messageType(v5, v71, v72, v73) == 1
    && (objc_msgSend_isRealloc(v6, v74, v75, v76) & 1) != 0)
  {
    v77 = 14;
  }
  else
  {
    v77 = objc_msgSend_messageType(v5, v74, v75, v76);
  }
  *((_DWORD *)v68 + 318) = v77;
  objc_msgSend_sessionID(v6, v74, v75, v76);
  v78 = objc_claimAutoreleasedReturnValue();
  v79 = v68[158];
  v68[158] = (id)v78;

  *((_DWORD *)v68 + 12) = v92;
  memcpy(v68 + 7, v21, *v21);
  memcpy(v68 + 23, v29, *v29);
  v84 = objc_msgSend__sendPacketBuffer_stunTransport_token_linkID_delegatedLinkID_(self, v80, (uint64_t)v68, v81, v91, v40, v50, v54);
  if (v84 < 1)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v82, v83, v85);
    v88 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      *(_DWORD *)buf = 138413058;
      v96 = v5;
      v97 = 2112;
      v98 = (uint64_t)idsSessionID;
      v99 = 2080;
      v100 = (NSString *)__str;
      v101 = 2080;
      v102 = v105;
      _os_log_impl(&dword_19B949000, v88, OS_LOG_TYPE_DEFAULT, "Failed to send proto message %@ for IDSSessionID: %@ and %s-%s", buf, 0x2Au);
    }

  }
  else
  {
    objc_msgSend__saveProtoRequest_token_(self, v82, (uint64_t)v5, v85, v40);
    OSLogHandleForIDSCategory();
    v86 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
    {
      v87 = self->_idsSessionID;
      *(_DWORD *)buf = 138413314;
      v96 = v5;
      v97 = 2048;
      v98 = (uint64_t)__buf;
      v99 = 2112;
      v100 = v87;
      v101 = 2080;
      v102 = (char *)__str;
      v103 = 2080;
      v104 = v105;
      _os_log_impl(&dword_19B949000, v86, OS_LOG_TYPE_DEFAULT, "send proto message %@ (%llu) for IDSSessionID: %@ and %s-%s.", buf, 0x34u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send proto message %@ (%llu) for IDSSessionID: %@ and %s-%s."));
  }

  return v84;
}

- (void)_sendQUICAllocbindRequest:(id)a3 isRealloc:(BOOL)a4 inResponseToNoSessionState:(BOOL)a5 shouldConnectLinkFirst:(BOOL)a6 isPendingInResponseToNoSessionState:(BOOL)a7
{
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  __CFString *v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  id v21;
  const char *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  const char *v30;
  uint64_t v31;
  double v32;
  const char *v33;
  double v34;
  NSObject *v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  double v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  int HasCandidatePairForSameSharedSession;
  const char *v53;
  double v54;
  unsigned int v55;
  void *v56;
  NSObject *v57;
  NSObject *v58;
  const __CFString *v59;
  char *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  NSObject *v65;
  id v66;
  const char *v67;
  uint64_t v68;
  double v69;
  const char *v70;
  uint64_t v71;
  double v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  double v76;
  BOOL v77;
  IDSQUICConnectionIDs *v78;
  const char *v79;
  uint64_t v80;
  double v81;
  void *v82;
  const char *v83;
  double v84;
  void *v85;
  id v86;
  const char *v87;
  double v88;
  const char *v89;
  double v90;
  const char *v91;
  uint64_t v92;
  double v93;
  void *v94;
  NSObject *v95;
  id v96;
  const char *v97;
  uint64_t v98;
  double v99;
  void *v100;
  NSObject *v101;
  id v102;
  void *v103;
  NSObject *v104;
  id v105;
  const char *v106;
  double v107;
  void *v108;
  NSObject *v109;
  id v110;
  const char *v111;
  double v112;
  void *v113;
  NSObject *v114;
  id v115;
  const char *v116;
  double v117;
  void *v118;
  NSObject *v119;
  id v120;
  const char *v121;
  uint64_t v122;
  double v123;
  __CFString *v124;
  const char *v125;
  uint64_t v126;
  double v127;
  const char *v128;
  double v129;
  void *v130;
  _BOOL4 v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  double v136;
  char *v137;
  const char *v138;
  uint64_t v139;
  double v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  double v144;
  void *v145;
  NSDictionary *QRServerDataBlob;
  NSObject *v147;
  const char *v148;
  uint64_t v149;
  double v150;
  int v151;
  const char *v152;
  uint64_t v153;
  double v154;
  const char *v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  id v159;
  NSObject *v160;
  id v161;
  NSData *idsContextBlob;
  id v163;
  NSObject *v164;
  id v165;
  NSDictionary *v166;
  NSObject *v167;
  id v168;
  const char *v169;
  uint64_t v170;
  double v171;
  IDSServerMaterialExchangeController *serverMaterialExchangeController;
  void *v173;
  const char *v174;
  uint64_t v175;
  double v176;
  void *v177;
  const char *v178;
  double v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  double v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  double v187;
  void *v188;
  const char *v189;
  double v190;
  const char *v191;
  uint64_t v192;
  double v193;
  NSObject *v194;
  const __CFString *v195;
  const __CFString *v196;
  const char *v197;
  double v198;
  const char *v199;
  double v200;
  const char *v201;
  double v202;
  IDSGroupQUICMaterialExchangeProvider *quicMaterialExchangeProvider;
  void *v204;
  const char *v205;
  double v206;
  void *v207;
  NSObject *v208;
  id v209;
  const char *v210;
  double v211;
  void *v212;
  NSObject *v213;
  id v214;
  IDSQRProtoMessage *v215;
  const char *v216;
  double v217;
  const char *v218;
  uint64_t v219;
  double v220;
  NSObject *v221;
  const char *v222;
  uint64_t v223;
  double v224;
  NSString *idsSessionID;
  __CFString *v226;
  const char *v227;
  uint64_t v228;
  double v229;
  const char *v230;
  uint64_t v231;
  double v232;
  void *v233;
  const char *v234;
  uint64_t v235;
  double v236;
  const char *v237;
  double v238;
  const char *v239;
  uint64_t v240;
  double v241;
  void *v242;
  const char *v243;
  uint64_t v244;
  double v245;
  int v246;
  int v247;
  const char *v248;
  uint64_t v249;
  double v250;
  int v251;
  _BOOL4 v252;
  NSObject *v253;
  BOOL v254;
  NSObject *v255;
  const __CFString *v256;
  const __CFString *v257;
  _BOOL4 forceTCPFallbackOnCell;
  const __CFString *v259;
  const __CFString *v260;
  const char *v261;
  uint64_t v262;
  double v263;
  void *v264;
  const char *v265;
  uint64_t v266;
  double v267;
  int isCellularStunCandidate;
  const char *v269;
  uint64_t v270;
  double v271;
  int v272;
  char v273;
  NSObject *v274;
  char *v275;
  const char *v276;
  double v277;
  char *v278;
  const char *v279;
  uint64_t v280;
  double v281;
  uint64_t v282;
  const char *v283;
  double v284;
  NSObject *v285;
  const char *v286;
  uint64_t v287;
  double v288;
  uint64_t Type;
  const char *v290;
  uint64_t v291;
  double v292;
  double v293;
  BOOL v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  __CFString *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  void *v303;
  void *v304;
  __CFDictionary *theDict;
  _QWORD v306[4];
  id v307;
  IDSGlobalLink *v308;
  __CFString *v309;
  id v310;
  id v311;
  uint64_t v312;
  uint64_t v313;
  double v314;
  uint64_t v315;
  char v316;
  BOOL v317;
  id v318;
  _QWORD v319[5];
  id v320;
  char v321;
  BOOL v322;
  BOOL v323;
  uint8_t buf[4];
  _BYTE v325[28];
  __int16 v326;
  const __CFString *v327;
  __int16 v328;
  const __CFString *v329;
  __int16 v330;
  const __CFString *v331;
  __int16 v332;
  const __CFString *v333;
  uint64_t v334;

  v7 = a7;
  v8 = a6;
  v9 = a5;
  v10 = a4;
  v334 = *MEMORY[0x1E0C80C00];
  v12 = (__CFString *)a3;
  if (v12)
  {
    if (self->_state >= 5 && !v9)
    {
      OSLogHandleForTransportCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v325 = v12;
        *(_WORD *)&v325[8] = 2080;
        *(_QWORD *)&v325[10] = v14;
        _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "skip allocbind request for %@, GL state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip allocbind request for %@, GL state [%s]."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip allocbind request for %@, GL state [%s]."));
        }
      }
      goto LABEL_34;
    }
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (v17 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v12)) == 0)
    {
      OSLogHandleForTransportCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "send allocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send allocbind request failed due to invalid candidate pair."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send allocbind request failed due to invalid candidate pair."));
        }
      }
      v21 = 0;
      goto LABEL_33;
    }
    v21 = v17;
    if (objc_msgSend_isSharedQRSession(v17, v18, v19, v20) && !self->_sharedSessionHasJoined)
    {
      OSLogHandleForTransportCategory();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "skip allocbind request, session is not yet joined!", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip allocbind request, session is not yet joined!"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip allocbind request, session is not yet joined!"));
        }
      }
      goto LABEL_33;
    }
    if (v8)
    {
      v319[0] = MEMORY[0x1E0C809B0];
      v319[1] = 3221225472;
      v319[2] = sub_19BA0B230;
      v319[3] = &unk_1E3C20310;
      v319[4] = self;
      v21 = v21;
      v320 = v21;
      v321 = v10;
      v322 = v9;
      v323 = v7;
      objc_msgSend__connectNWLink_disconnectAfterUse_connectedHandler_(self, v25, (uint64_t)v21, v26, 0, v319);
      if ((objc_msgSend_isSelfQRSession(v21, v27, v28, v29) & 1) == 0)
      {
        if (objc_msgSend_isSharedQRSession(v21, v30, v31, v32))
          objc_msgSend__startAllocbindFailoverTimerOnCandidatePair_delay_(self, v33, (uint64_t)v21, v34, 0);
        else
          objc_msgSend__startAllocbindFailoverTimerOnCandidatePair_delay_(self, v33, (uint64_t)v21, v34, 2);
      }

      goto LABEL_33;
    }
    v36 = objc_msgSend_state(v21, v22, v23, v24);
    v40 = objc_msgSend_pendingRealloc(v21, v37, v38, v39);
    if (v36 == 2)
    {
      OSLogHandleForTransportCategory();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "in failed state, send allocbind request ignored", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("in failed state, send allocbind request ignored"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("in failed state, send allocbind request ignored"));
        }
      }
      goto LABEL_33;
    }
    v42 = v40;
    if (v36 < 3)
      v43 = 1;
    else
      v43 = v10;
    if ((v7 & ~v10 & v9 & 1) != 0 || (v10 & (v40 ^ 1) & 1) != 0 || !v43)
    {
      OSLogHandleForTransportCategory();
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        v59 = CFSTR("allocbind");
        v60 = (&_IDSStunCandidatePairStateStrings)[v36];
        if (v10)
          v59 = CFSTR("realloc");
        *(_DWORD *)buf = 138413826;
        *(_QWORD *)v325 = v59;
        v61 = CFSTR("YES");
        *(_WORD *)&v325[8] = 2112;
        *(_QWORD *)&v325[10] = v12;
        if (v42)
          v62 = CFSTR("YES");
        else
          v62 = CFSTR("NO");
        *(_WORD *)&v325[18] = 2080;
        *(_QWORD *)&v325[20] = v60;
        if (v43)
          v63 = CFSTR("NO");
        else
          v63 = CFSTR("YES");
        v326 = 2112;
        if (v9)
          v64 = CFSTR("YES");
        else
          v64 = CFSTR("NO");
        v327 = v62;
        if (!v7)
          v61 = CFSTR("NO");
        v328 = 2112;
        v329 = v63;
        v330 = 2112;
        v331 = v64;
        v332 = 2112;
        v333 = v61;
        _os_log_impl(&dword_19B949000, v58, OS_LOG_TYPE_DEFAULT, "skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, isPendingInResponseToNoSessionState: %@", buf, 0x48u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, isPendingInResponseToNoSessionState: %@"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, isPendingInResponseToNoSessionState: %@"));
        }
      }
      goto LABEL_33;
    }
    v302 = v36;
    v300 = stunMessageTypeFromProtoMessageType(1, v10);
    theDict = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend_sessionID(v21, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v48, v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    HasCandidatePairForSameSharedSession = GLUtilHasCandidatePairForSameSharedSession(v47, v51);

    if (HasCandidatePairForSameSharedSession)
      v55 = 16;
    else
      v55 = 0;
    if (v9)
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v53, v55 | 0x20, v54);
    else
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v53, v55, v54);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    if (v56)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-option-additional-binding"), v56);
    }
    else
    {
      v65 = MEMORY[0x1E0C81028];
      v66 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        sub_19BAF4490();

    }
    if (objc_msgSend__shouldUseQRTLE(self, v67, v68, v69))
    {
      objc_msgSend_local(v21, v70, v71, v72);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isCellularStunCandidate(v73, v74, v75, v76) & 1) != 0)
      {
        v77 = !self->_allowTLEOverCellular;

        if (v77)
          goto LABEL_100;
      }
      else
      {

      }
      v78 = objc_alloc_init(IDSQUICConnectionIDs);
      v82 = (void *)objc_msgSend_copy(self->_usedLocalConnectionIDs, v79, v80, v81);
      v318 = v82;
      objc_msgSend_generateLocalIDs_(v78, v83, (uint64_t)&v318, v84);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = v318;

      objc_msgSend_addObjectsFromArray_(self->_usedLocalConnectionIDs, v87, (uint64_t)v85, v88);
      objc_msgSend_setQUICConnectionIDs_(v21, v89, (uint64_t)v78, v90);
      objc_msgSend_localAVCConnectionIDData(v78, v91, v92, v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      if (v94)
      {
        CFDictionarySetValue(theDict, CFSTR("gl-option-qr-connection-id-avc-key"), v94);
      }
      else
      {
        v95 = MEMORY[0x1E0C81028];
        v96 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
          sub_19BAF4410();

      }
      objc_msgSend_localIDSConnectionIDData(v78, v97, v98, v99);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      if (v100)
      {
        CFDictionarySetValue(theDict, CFSTR("gl-option-qr-connection-id-ids-key"), v100);
      }
      else
      {
        v101 = MEMORY[0x1E0C81028];
        v102 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          sub_19BAF4390();

      }
    }
LABEL_100:
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v70, self->_isShortMKIEnabled, v72);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    if (v103)
    {
      CFDictionarySetValue(theDict, CFSTR("gs-shortmki-enabled-key"), v103);
    }
    else
    {
      v104 = MEMORY[0x1E0C81028];
      v105 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        sub_19BAF4310();

    }
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v106, self->_isTLEEnabled, v107);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    if (v108)
    {
      CFDictionarySetValue(theDict, CFSTR("gs-tle-enabled-key"), v108);
    }
    else
    {
      v109 = MEMORY[0x1E0C81028];
      v110 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
        sub_19BAF4290();

    }
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v111, self->_shouldOverrideServerTestOptionTLEDisabled, v112);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    if (v113)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-option-should-override-server-test-option-tle-disabled"), v113);
    }
    else
    {
      v114 = MEMORY[0x1E0C81028];
      v115 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        sub_19BAF4210();

    }
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v116, self->_serverTestOptionTLEDisabled, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    if (v118)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-option-server-test-option-tle-disabled"), v118);
    }
    else
    {
      v119 = MEMORY[0x1E0C81028];
      v120 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        sub_19BAF4190();

    }
    objc_msgSend_sessionID(v21, v121, v122, v123);
    v124 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(self->_QRServerDataBlob, v125, v126, v127))
    {
      objc_msgSend_objectForKeyedSubscript_(self->_QRServerDataBlob, v128, (uint64_t)v124, v129);
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      v131 = v130 == 0;

      if (v131)
      {
        objc_msgSend_allKeys(self->_QRServerDataBlob, v128, v132, v129);
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_firstObject(v133, v134, v135, v136);
        v137 = (char *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_allValues(self->_QRServerDataBlob, v138, v139, v140);
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_firstObject(v141, v142, v143, v144);
        v145 = (void *)objc_claimAutoreleasedReturnValue();

        QRServerDataBlob = self->_QRServerDataBlob;
        self->_QRServerDataBlob = 0;

        OSLogHandleForTransportCategory();
        v147 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
        {
          v151 = objc_msgSend_length(v145, v148, v149, v150);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v325 = v151;
          *(_WORD *)&v325[4] = 2112;
          *(_QWORD *)&v325[6] = v137;
          *(_WORD *)&v325[14] = 2112;
          *(_QWORD *)&v325[16] = v124;
          _os_log_impl(&dword_19B949000, v147, OS_LOG_TYPE_DEFAULT, "Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@", buf, 0x1Cu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v298 = v137;
            v299 = v124;
            v296 = objc_msgSend_length(v145, v152, v153, v154);
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@"));
            if (_IDSShouldLog())
            {
              v158 = objc_msgSend_length(v145, v155, v156, v157, v296, v137, v124);
              v298 = v137;
              v299 = v124;
              v296 = v158;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@"));
            }
          }
        }
        v159 = v145;
        if (v159)
        {
          CFDictionarySetValue(theDict, CFSTR("gl-option-qr-server-data-blob"), v159);
        }
        else
        {
          v160 = MEMORY[0x1E0C81028];
          v161 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
            sub_19BAF4110();

        }
      }
    }
    idsContextBlob = self->_idsContextBlob;
    if (idsContextBlob)
    {
      objc_msgSend__createIDSContextBlobMaterialProto_(self, v128, (uint64_t)idsContextBlob, v129);
      v163 = (id)objc_claimAutoreleasedReturnValue();
      if (v163)
      {
        CFDictionarySetValue(theDict, CFSTR("gl-option-ids-context-blob-key"), v163);
      }
      else
      {
        v164 = MEMORY[0x1E0C81028];
        v165 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
          sub_19BAF4090();

      }
    }
    if (self->_state != 4)
      CFDictionarySetValue(theDict, CFSTR("gl-option-ids-context-reason-key"), &unk_1E3C86970);
    v166 = self->_qrSessionExperiments;
    if (v166)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-option-qr-session-experiments"), v166);
    }
    else
    {
      v167 = MEMORY[0x1E0C81028];
      v168 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
        sub_19BAF4010();

    }
    serverMaterialExchangeController = self->_serverMaterialExchangeController;
    if (serverMaterialExchangeController)
    {
      objc_msgSend_desiredMaterials(serverMaterialExchangeController, v169, v170, v171);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_set(MEMORY[0x1E0C99E20], v174, v175, v176);
      v177 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_materialProtosForDesiredMaterials_failures_(self->_serverMaterialExchangeController, v178, (uint64_t)v173, v179, v177);
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      v184 = (void *)objc_msgSend_mutableCopy(v180, v181, v182, v183);

      v188 = (void *)objc_msgSend_copy(v184, v185, v186, v187);
      objc_msgSend_setObject_forKeyedSubscript_(theDict, v189, (uint64_t)v188, v190, CFSTR("gl-option-materials-key"));

      if (self->_isAutoDisconnectSupportedForGFTService)
      {
        if (self->_isLightweightParticipant)
          goto LABEL_159;
        objc_msgSend_GlobalLink(IDSFoundationLog, v191, v192, v193);
        v194 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
        {
          v195 = CFSTR("YES");
          if (self->_isAutoDisconnectSupportedForGFTService)
            v196 = CFSTR("YES");
          else
            v196 = CFSTR("NO");
          if (!self->_isLightweightParticipant)
            v195 = CFSTR("NO");
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v325 = v196;
          *(_WORD *)&v325[8] = 2112;
          *(_QWORD *)&v325[10] = v195;
          _os_log_impl(&dword_19B949000, v194, OS_LOG_TYPE_DEFAULT, "_isAutoDisconnectSupportedForGFTService: %@, _isLightweightParticipant: %@", buf, 0x16u);
        }

        objc_msgSend_setObject_forKeyedSubscript_(theDict, v197, MEMORY[0x1E0C9AAB0], v198, CFSTR("gl-option-should-auto-disconnect-for-standard-participant"));
        if (self->_isAutoDisconnectSupportedForGFTService)
LABEL_159:
          objc_msgSend_setObject_forKeyedSubscript_(theDict, v191, MEMORY[0x1E0C9AAB0], v193, CFSTR("gl-option-is-facetime-session"), v296, v298, v299);
      }
      v303 = (void *)objc_msgSend_mutableCopy(v173, v191, v192, v193, v296);
      objc_msgSend_minusSet_(v303, v199, (uint64_t)v177, v200);
      objc_msgSend_markMaterialsInSetAsSent_(self->_serverMaterialExchangeController, v201, (uint64_t)v303, v202);

    }
    else
    {
      v303 = 0;
    }
    quicMaterialExchangeProvider = self->_quicMaterialExchangeProvider;
    if (quicMaterialExchangeProvider)
    {
      objc_msgSend_takeAllCurrentMaterials(quicMaterialExchangeProvider, v169, v170, v171);
      v204 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(theDict, v205, (uint64_t)v204, v206, CFSTR("gl-option-materials-key"));

    }
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v169, self->_isLightweightParticipant, v171, v296);
    v207 = (void *)objc_claimAutoreleasedReturnValue();
    if (v207)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-option-is-lightweight-participant-key"), v207);
    }
    else
    {
      v208 = MEMORY[0x1E0C81028];
      v209 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
        sub_19BAF1604();

    }
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v210, self->_uplinkNackDisabled, v211);
    v212 = (void *)objc_claimAutoreleasedReturnValue();
    if (v212)
    {
      CFDictionarySetValue(theDict, CFSTR("gl-option-uplink-nack-disabled"), v212);
    }
    else
    {
      v213 = MEMORY[0x1E0C81028];
      v214 = MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
        sub_19BAF3F90();

    }
    v215 = [IDSQRProtoMessage alloc];
    v304 = (void *)objc_msgSend_initWithType_candidatePair_options_(v215, v216, 1, v217, v21, theDict);
    if (!v304)
    {
      OSLogHandleForTransportCategory();
      v253 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v325 = CFSTR("allocbind_request");
        _os_log_impl(&dword_19B949000, v253, OS_LOG_TYPE_DEFAULT, "failed to create proto message (%@).", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to create proto message (%@)."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to create proto message (%@)."));
        }
      }
      goto LABEL_228;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v218, v219, v220);
    v221 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      objc_msgSend_sessionID(v21, v222, v223, v224);
      v226 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413314;
      *(_QWORD *)v325 = CFSTR("allocbind_request");
      *(_WORD *)&v325[8] = 2112;
      *(_QWORD *)&v325[10] = v304;
      *(_WORD *)&v325[18] = 2112;
      *(_QWORD *)&v325[20] = idsSessionID;
      v326 = 2112;
      v327 = v226;
      v328 = 2112;
      v329 = v12;
      _os_log_impl(&dword_19B949000, v221, OS_LOG_TYPE_DEFAULT, "Send %@ %@ for IDSSessionID: %@ QRSessionID: %@ token: %@", buf, 0x34u);

    }
    objc_msgSend_quicAllocbindRequest(self->_metricsCollector, v227, v228, v229);
    objc_msgSend_linkMetrics(v21, v230, v231, v232);
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sendAllocbindRequest(v233, v234, v235, v236);

    objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v237, (uint64_t)v21, v238);
    objc_msgSend_local(v21, v239, v240, v241);
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    v301 = objc_msgSend_transport(v242, v243, v244, v245);

    v246 = IMGetDomainBoolForKey();
    v247 = IMGetDomainBoolForKey();
    v251 = v247;
    v252 = (v246 & 1) == 0 && !self->_forceTCPFallbackOnWiFi;
    v254 = (v247 & 1) == 0 && !self->_forceTCPFallbackOnCell;
    objc_msgSend_GlobalLink(IDSFoundationLog, v248, v249, v250);
    v255 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
    {
      v256 = CFSTR("NO");
      if (v246)
        v257 = CFSTR("YES");
      else
        v257 = CFSTR("NO");
      forceTCPFallbackOnCell = self->_forceTCPFallbackOnCell;
      if (self->_forceTCPFallbackOnWiFi)
        v259 = CFSTR("YES");
      else
        v259 = CFSTR("NO");
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)v325 = v257;
      if (v251)
        v260 = CFSTR("YES");
      else
        v260 = CFSTR("NO");
      *(_WORD *)&v325[8] = 2112;
      *(_QWORD *)&v325[10] = v259;
      if (forceTCPFallbackOnCell)
        v256 = CFSTR("YES");
      *(_WORD *)&v325[18] = 2112;
      *(_QWORD *)&v325[20] = v260;
      v326 = 2112;
      v327 = v256;
      _os_log_impl(&dword_19B949000, v255, OS_LOG_TYPE_DEFAULT, "sendQUICAllocbindRequest forceTCPFallbackOnWiFI default: %@ manual: %@; forceTCPFallbackOnCell default: %@ manual: %@",
        buf,
        0x2Au);
    }

    objc_msgSend_local(v21, v261, v262, v263);
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v264, v265, v266, v267);

    v272 = (unint64_t)(v301 - 3) < 0xFFFFFFFFFFFFFFFELL || v252;
    if (((v272 | isCellularStunCandidate) & 1) != 0)
    {
      v273 = (unint64_t)(v301 - 3) < 0xFFFFFFFFFFFFFFFELL || v254;
      if ((v273 & 1) != 0 || ((isCellularStunCandidate ^ 1) & 1) != 0)
      {
        objc_msgSend__sendProtoMessage_candidatePair_(self, v269, (uint64_t)v304, v271, v21);
        v282 = objc_msgSend_transactionID(v304, v279, v280, v281);
        objc_msgSend_addProtoRequest_(v21, v283, v282, v284);
LABEL_218:
        if (!v302)
        {
          objc_msgSend_setState_(v21, v276, 1, v277);
          OSLogHandleForTransportCategory();
          v285 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)v325 = _IDSStunCandidatePairStateStrings;
            *(_WORD *)&v325[8] = 2080;
            *(_QWORD *)&v325[10] = off_1EE40A660;
            *(_WORD *)&v325[18] = 2112;
            *(_QWORD *)&v325[20] = v12;
            _os_log_impl(&dword_19B949000, v285, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v298 = off_1EE40A660;
              v299 = v12;
              v297 = _IDSStunCandidatePairStateStrings;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
              if (_IDSShouldLog())
              {
                v298 = off_1EE40A660;
                v299 = v12;
                v297 = _IDSStunCandidatePairStateStrings;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
              }
            }
          }
          Type = objc_msgSend_allocateType(v21, v286, v287, v288, v297, v298, v299);
          v293 = 10.0;
          v294 = Type == 2;
          if (Type == 2)
          {
            v292 = GLUtilNATCheckTimeout(v292, 2, v290, v291);
            v293 = v292;
          }
          v295 = objc_msgSend_transactionID(v304, v290, v291, v292);
          v306[0] = MEMORY[0x1E0C809B0];
          v306[1] = 3221225472;
          v306[2] = sub_19BA0B284;
          v306[3] = &unk_1E3C20338;
          v307 = v21;
          v308 = self;
          v312 = v295;
          v313 = 0;
          v309 = v12;
          v310 = v303;
          v316 = v10;
          v314 = v293;
          v317 = v294;
          v311 = v304;
          v315 = v300;
          IDSTransportThreadAddBlockAfter(v306, v293);

        }
LABEL_228:

LABEL_33:
        goto LABEL_34;
      }
      objc_msgSend_GlobalLink(IDSFoundationLog, v269, v270, v271);
      v274 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
      {
        v275 = (&_IDSStunTransportStrings)[v301];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v325 = v275;
        _os_log_impl(&dword_19B949000, v274, OS_LOG_TYPE_DEFAULT, "forceTCPFallbackOnCell is set, skip message %s", buf, 0xCu);
      }
    }
    else
    {
      objc_msgSend_GlobalLink(IDSFoundationLog, v269, v270, v271);
      v274 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
      {
        v278 = (&_IDSStunTransportStrings)[v301];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v325 = v278;
        _os_log_impl(&dword_19B949000, v274, OS_LOG_TYPE_DEFAULT, "forceTCPFallbackOnWiFi is set, skip message %s", buf, 0xCu);
      }
    }

    goto LABEL_218;
  }
  OSLogHandleForTransportCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "failed to send allocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to send allocbind request due to invalid token."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to send allocbind request due to invalid token."));
    }
  }
LABEL_34:

}

- (void)_sendQUICUnallocbindRequest:(id)a3 reason:(unsigned __int8)a4
{
  uint64_t v4;
  __CFString *v6;
  __CFString *v7;
  NSObject *v8;
  char *v9;
  NSMutableDictionary *tokenToCandidatePairs;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  NSObject *v24;
  char *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  double v40;
  NSData *idsContextBlob;
  id v42;
  NSObject *v43;
  const void *v44;
  IDSQRProtoMessage *v45;
  const char *v46;
  double v47;
  __CFString *v48;
  NSObject *v49;
  const char *v50;
  double v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  const char *v57;
  double v58;
  const char *v59;
  uint64_t v60;
  double v61;
  NSObject *v62;
  char *v63;
  char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  char v65;
  const char *v66;
  uint64_t v67;
  double v68;
  NSMutableDictionary *Mutable;
  NSMutableDictionary *unallocbindRequestToReason;
  const char *v71;
  void *v72;
  double v73;
  NSMutableDictionary *v74;
  const void *v75;
  NSObject *v76;
  __CFString *v77;
  char *v78;
  __CFString *v79;
  char *v80;
  __CFString *v81;
  __CFDictionary *theDict;
  _QWORD v83[4];
  id v84;
  IDSGlobalLink *v85;
  uint64_t v86;
  int v87;
  char v88;
  uint8_t buf[4];
  const __CFString *v90;
  __int16 v91;
  char *v92;
  __int16 v93;
  __CFString *v94;
  uint64_t v95;

  v4 = a4;
  v95 = *MEMORY[0x1E0C80C00];
  v6 = (__CFString *)a3;
  v7 = v6;
  if (self->_state >= 6)
  {
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      v90 = (const __CFString *)v9;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "skip unallocbind request, GL state (%s).", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip unallocbind request, GL state (%s)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip unallocbind request, GL state (%s)."));
      }
    }
    goto LABEL_34;
  }
  if (v6)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (v11 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v7)) == 0)
    {
      OSLogHandleForTransportCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "send unallocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send unallocbind request failed due to invalid candidate pair."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send unallocbind request failed due to invalid candidate pair."));
        }
      }
      v15 = 0;
      goto LABEL_27;
    }
    v15 = v11;
    if ((objc_msgSend_isRelayStunCandidatePair(v11, v12, v13, v14) & 1) == 0)
    {
      OSLogHandleForTransportCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v90 = v7;
        _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, not over relay.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip unallocbind request for %@, not over relay."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip unallocbind request for %@, not over relay."));
        }
      }
      goto LABEL_27;
    }
    v19 = objc_msgSend_state(v15, v16, v17, v18);
    v23 = v19;
    if (v19 <= 6 && ((1 << v19) & 0x47) != 0)
    {
      OSLogHandleForTransportCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v25 = (&_IDSStunCandidatePairStateStrings)[v23];
        *(_DWORD *)buf = 138412546;
        v90 = v7;
        v91 = 2080;
        v92 = v25;
        _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip unallocbind request for %@, state [%s]."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip unallocbind request for %@, state [%s]."));
        }
      }
      goto LABEL_27;
    }
    objc_msgSend_sessionID(v15, v20, v21, v22);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v31)
    {
      OSLogHandleForTransportCategory();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid relay-session-id.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to send unallocbind request due to invalid relay-session-id."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to send unallocbind request due to invalid relay-session-id."));
        }
      }
      goto LABEL_91;
    }
    objc_msgSend_stopSessionConnectedTimer(v15, v29, v30, v32);
    objc_msgSend_stopSessionConvergenceTimer(v15, v33, v34, v35);
    objc_msgSend_stopSessionGoAwayTimer(v15, v36, v37, v38);
    theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    idsContextBlob = self->_idsContextBlob;
    if (idsContextBlob)
    {
      objc_msgSend__createIDSContextBlobMaterialProto_(self, v39, (uint64_t)idsContextBlob, v40);
      v42 = (id)objc_claimAutoreleasedReturnValue();
      if (v42)
      {
        CFDictionarySetValue(theDict, CFSTR("gl-option-ids-context-blob-key"), v42);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAF4090();
      }

    }
    if ((_DWORD)v4 == 4)
    {
      v44 = &unk_1E3C86988;
    }
    else
    {
      if (!objc_msgSend_isSharedQRSession(v15, v39, (uint64_t)idsContextBlob, v40)
        || self->_sharedSessionHasJoined)
      {
        goto LABEL_59;
      }
      v44 = &unk_1E3C86970;
    }
    CFDictionarySetValue(theDict, CFSTR("gl-option-ids-context-reason-key"), v44);
LABEL_59:
    v45 = [IDSQRProtoMessage alloc];
    v48 = (__CFString *)objc_msgSend_initWithType_candidatePair_options_(v45, v46, 22, v47, v15, theDict);
    if (v48)
    {
      OSLogHandleForTransportCategory();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v90 = v48;
        v91 = 2112;
        v92 = (char *)v7;
        _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "send unallocbind request %@ for %@.", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v77 = v48;
          v79 = v7;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send unallocbind request %@ for %@."));
          if (_IDSShouldLog())
          {
            v77 = v48;
            v79 = v7;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send unallocbind request %@ for %@."));
          }
        }
      }
      v52 = objc_msgSend__sendProtoMessage_candidatePair_(self, v50, (uint64_t)v48, v51, v15, v77, v79);
      v56 = objc_msgSend_transactionID(v48, v53, v54, v55);
      objc_msgSend_addProtoRequest_(v15, v57, v56, v58);
      if (v23 != 5)
      {
        objc_msgSend_setState_(v15, v59, 5, v61);
        OSLogHandleForTransportCategory();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          v63 = (&_IDSStunCandidatePairStateStrings)[v23];
          *(_DWORD *)buf = 136315650;
          v90 = (const __CFString *)v63;
          v91 = 2080;
          v92 = off_1EE40A680;
          v93 = 2112;
          v94 = v7;
          _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v80 = off_1EE40A680;
            v81 = v7;
            v78 = (&_IDSStunCandidatePairStateStrings)[v23];
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
            if (_IDSShouldLog())
            {
              v80 = off_1EE40A680;
              v81 = v7;
              v78 = (&_IDSStunCandidatePairStateStrings)[v23];
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
            }
          }
        }
      }
      if (v52 == -1
        && ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v59, 3, v61, 4, 0, 0), self->_state != 5)? (v65 = 1): (v65 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc), (v65 & 1) == 0))
      {
        objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v59, 24, v61, v4);
      }
      else
      {
        v67 = objc_msgSend_transactionID(v48, v59, v60, v61, v78, v80, v81);
        if (!self->_unallocbindRequestToReason)
        {
          Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          unallocbindRequestToReason = self->_unallocbindRequestToReason;
          self->_unallocbindRequestToReason = Mutable;

        }
        objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v66, v4, v68);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        if (v72)
        {
          v74 = self->_unallocbindRequestToReason;
          v75 = (const void *)objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v71, v67, v73);
          CFDictionarySetValue((CFMutableDictionaryRef)v74, v75, v72);
        }

        v83[0] = MEMORY[0x1E0C809B0];
        v83[1] = 3221225472;
        v83[2] = sub_19BA0C85C;
        v83[3] = &unk_1E3C20360;
        v84 = v15;
        v85 = self;
        v86 = v67;
        v88 = v4;
        v87 = 22;
        IDSTransportThreadAddBlockAfter(v83, 3.0);

      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v90 = CFSTR("unallocbind_request");
        _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "failed to create proto message (%@)", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to create proto message (%@)"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to create proto message (%@)"));
        }
      }
    }

LABEL_91:
LABEL_27:

    goto LABEL_34;
  }
  OSLogHandleForTransportCategory();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to send unallocbind request due to invalid token."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to send unallocbind request due to invalid token."));
    }
  }
LABEL_34:

}

- (void)_sendChannelDataCommandMessage:(int64_t)a3 packetBuffer:(id *)a4 options:(id)a5 candidatePairToken:(id)a6
{
  char *v10;
  double v11;
  NSObject *v12;
  char *v13;
  double v14;
  const char *v15;
  NSMutableDictionary *tokenToCandidatePairs;
  uint64_t v17;
  NSObject *v18;
  NSMutableDictionary *tokenToStunCheckPairs;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  double v57;
  const char *v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  _BOOL4 v64;
  NSObject *v65;
  char *v66;
  double v67;
  char *v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  NSObject *v73;
  char *v74;
  NSObject *v75;
  char *v77;
  double v78;
  const char *v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  const char *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  NSObject *v90;
  const char *v91;
  uint64_t v92;
  double v93;
  const char *v94;
  double v95;
  uint64_t v96;
  NSObject *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  char *v101;
  double v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  double v108;
  const char *v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  const char *v113;
  double v114;
  const char *v115;
  double v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  double v120;
  void *v121;
  $D38D7C82BC04D962879521F520F2ED6C *v122;
  unsigned __int16 v123;
  const char *v124;
  uint64_t v125;
  double v126;
  NSObject *v127;
  double v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  NSObject *v136;
  const char *v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  double v141;
  NSObject *v142;
  _BOOL4 v143;
  const char *v144;
  uint64_t v145;
  double v146;
  NSString *v147;
  void *v148;
  const char *v149;
  double v150;
  const char *v151;
  double v152;
  const __CFDictionary *linkIDToCandidatePairs;
  NSObject *v154;
  NSObject *v155;
  NSString *idsSessionID;
  void *v157;
  NSObject *v158;
  NSObject *v159;
  const char *v160;
  double v161;
  const char *v162;
  uint64_t v163;
  double v164;
  void *v165;
  const char *v166;
  double v167;
  NSObject *v168;
  const char *v169;
  uint64_t v170;
  double v171;
  void *v172;
  const char *v173;
  double v174;
  const char *v175;
  double v176;
  id *v177;
  __int16 v178;
  _BOOL4 v179;
  double var27;
  int64_t v181;
  BOOL v182;
  double v183;
  char *v184;
  double v185;
  double v186;
  NSObject *v187;
  NSObject *v188;
  const char *v189;
  uint64_t v190;
  double v191;
  const char *v192;
  double v193;
  double v194;
  NSObject *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  $D38D7C82BC04D962879521F520F2ED6C *v200;
  int64_t v201;
  id v202;
  IDSGlobalLink *v203;
  char *key;
  _QWORD v205[5];
  id v206;
  char *v207;
  int64_t v208;
  id *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint8_t buf[4];
  _BYTE v215[40];
  _BYTE v216[128];
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v202 = a5;
  v10 = (char *)a6;
  v203 = self;
  key = v10;
  v201 = a3;
  if (self->_state < 6)
  {
    v15 = v10;
    v200 = a4;
    if (!v10
      || (tokenToCandidatePairs = self->_tokenToCandidatePairs) == 0
      || (v18 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v15),
          v15 = key,
          !v18))
    {
      if (!v15
        || (tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
        || (v18 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v15), v15 = key, !v18))
      {
        objc_msgSend__findVirtualCandidatePair_(self, v15, (uint64_t)v15, v11);
        v18 = objc_claimAutoreleasedReturnValue();
        if (!v18)
        {
          OSLogHandleForTransportCategory();
          v127 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)v215 = a3;
            *(_WORD *)&v215[8] = 2112;
            *(_QWORD *)&v215[10] = key;
            _os_log_impl(&dword_19B949000, v127, OS_LOG_TYPE_DEFAULT, "send command %04lx failed due to invalid candidate pair %@", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send command %04lx failed due to invalid candidate pair %@"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send command %04lx failed due to invalid candidate pair %@"));
            }
          }
          _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2F7A, (uint64_t)a4, v128);
          v18 = 0;
          goto LABEL_166;
        }
      }
    }
    v199 = objc_msgSend_state(v18, v15, v17, v11);
    objc_msgSend_local(v18, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend_address(v23, v24, v25, v26);

    if (objc_msgSend_isRelayStunCandidatePair(v18, v28, v29, v30)
      && (unint64_t)(v199 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v212 = 0u;
      v213 = 0u;
      v210 = 0u;
      v211 = 0u;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v31, v32, 0.0);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v210, v35, v216, 16);
      if (v38)
      {
        v40 = *(_QWORD *)v211;
        while (2)
        {
          for (i = 0; i != v38; ++i)
          {
            if (*(_QWORD *)v211 != v40)
              objc_enumerationMutation(v33);
            v42 = *(void **)(*((_QWORD *)&v210 + 1) + 8 * i);
            objc_msgSend_local(v42, v36, v37, v39);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend_address(v43, v44, v45, v46);

            objc_msgSend_sessionID(v42, v48, v49, v50);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_sessionID(v18, v52, v53, v54);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend_isEqualToString_(v51, v56, (uint64_t)v55, v57)
              && (objc_msgSend_state(v42, v58, v59, v60) == 3 || objc_msgSend_state(v42, v61, v62, v63) == 4))
            {
              v64 = IsSameSA(v27, v47);

              if (v64)
              {
                v68 = key;
                objc_msgSend_candidatePairToken(v42, v69, v70, v71);
                v72 = (void *)objc_claimAutoreleasedReturnValue();
                v73 = v42;

                v74 = v72;
                key = v74;
                OSLogHandleForTransportCategory();
                v75 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                {
                  v77 = (&_IDSStunCandidatePairStateStrings)[v199];
                  *(_DWORD *)buf = 138413058;
                  *(_QWORD *)v215 = v68;
                  *(_WORD *)&v215[8] = 2080;
                  *(_QWORD *)&v215[10] = v77;
                  *(_WORD *)&v215[18] = 1024;
                  *(_DWORD *)&v215[20] = (unsigned __int16)v201;
                  *(_WORD *)&v215[24] = 2112;
                  *(_QWORD *)&v215[26] = v74;
                  _os_log_impl(&dword_19B949000, v75, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], send command %04x using %@.", buf, 0x26u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v197 = (unsigned __int16)v201;
                    v198 = v74;
                    v195 = v68;
                    v196 = (&_IDSStunCandidatePairStateStrings)[v199];
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%@ has state [%s], send command %04x using %@."));
                    if (_IDSShouldLog())
                    {
                      v197 = (unsigned __int16)v201;
                      v198 = v74;
                      v195 = v68;
                      v196 = (&_IDSStunCandidatePairStateStrings)[v199];
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%@ has state [%s], send command %04x using %@."));
                    }
                  }
                }

                v18 = v73;
                goto LABEL_45;
              }
            }
            else
            {

            }
          }
          v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v210, v39, v216, 16);
          if (v38)
            continue;
          break;
        }
      }

      OSLogHandleForTransportCategory();
      v65 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        v66 = (&_IDSStunCandidatePairStateStrings)[v199];
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)v215 = key;
        *(_WORD *)&v215[8] = 2080;
        *(_QWORD *)&v215[10] = v66;
        *(_WORD *)&v215[18] = 1024;
        *(_DWORD *)&v215[20] = (unsigned __int16)v201;
        _os_log_impl(&dword_19B949000, v65, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], Found no other connected candidate pair to send command %04x", buf, 0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%@ has state [%s], Found no other connected candidate pair to send command %04x"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%@ has state [%s], Found no other connected candidate pair to send command %04x"));
        }
      }
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2F97, (uint64_t)v200, v67);
      goto LABEL_166;
    }
LABEL_45:
    v78 = ids_monotonic_time();
    objc_msgSend_objectForKey_(v202, v79, (uint64_t)CFSTR("gl-attr-active-probing-link-id"), v78);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = objc_msgSend_charValue(v80, v81, v82, v83);

    v87 = v201;
    if (!(_DWORD)v84)
    {
      if (objc_msgSend__skipCommandMessage_candidatePair_timeNow_(v203, v85, v201, v78, v18))
      {
        OSLogHandleForIDSCategory();
        v97 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          v101 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(v18, v98, v99, v100)];
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v215 = v201;
          *(_WORD *)&v215[8] = 2112;
          *(_QWORD *)&v215[10] = key;
          *(_WORD *)&v215[18] = 2080;
          *(_QWORD *)&v215[20] = v101;
          _os_log_impl(&dword_19B949000, v97, OS_LOG_TYPE_DEBUG, "skip session command %04lx for %@, state [%s].", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          objc_msgSend_state(v18, v103, v104, v102);
          _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip session command %04lx for %@, state [%s]."));
        }
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2FA2, (uint64_t)v200, v102);
        goto LABEL_166;
      }
      v87 = v201;
      if (v201 == 3)
      {
        objc_msgSend_hbStartTime(v18, v85, v96, v86);
        if (v135 == 0.0)
        {
          OSLogHandleForTransportCategory();
          v136 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v215 = v18;
            _os_log_impl(&dword_19B949000, v136, OS_LOG_TYPE_DEFAULT, "session heartbeat request start now for %@", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v195 = v18;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session heartbeat request start now for %@"));
              if (_IDSShouldLog())
              {
                v195 = v18;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session heartbeat request start now for %@"));
              }
            }
          }
          objc_msgSend_setHbStartTime_(v18, v137, v138, v78, v195, v196, v197, v198);
          v87 = 3;
        }
        else
        {
          v86 = v78 - v135;
          v87 = 3;
          if (v86 > 60.0)
          {
            OSLogHandleForTransportCategory();
            v188 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v215 = v18;
              _os_log_impl(&dword_19B949000, v188, OS_LOG_TYPE_DEFAULT, "session heartbeat request message timed out, disconnect %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v195 = v18;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session heartbeat request message timed out, disconnect %@"));
                if (_IDSShouldLog())
                {
                  v195 = v18;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session heartbeat request message timed out, disconnect %@"));
                }
              }
            }
            if (objc_msgSend_isQUIC(v18, v189, v190, v191, v195, v196, v197, v198))
              objc_msgSend__sendQUICUnallocbindRequest_reason_(v203, v192, (uint64_t)key, v193, 9);
            else
              objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v203, v192, (uint64_t)key, v193, 0, 9);
            _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2FB4, (uint64_t)v200, v194);
            goto LABEL_166;
          }
        }
      }
    }
    v88 = (uint64_t)v200;
    if (!v200)
    {
      objc_msgSend__createCommandData_options_candidatePair_(v203, v85, v87, v86, v202, v18);
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v105)
      {
        OSLogHandleForTransportCategory();
        v158 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)v215 = v201;
          _os_log_impl(&dword_19B949000, v158, OS_LOG_TYPE_DEFAULT, "failed to get indication data, skip session command (%04lx) message.", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get indication data, skip session command (%04lx) message."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get indication data, skip session command (%04lx) message."));
          }
        }
        goto LABEL_166;
      }
      v200 = ($D38D7C82BC04D962879521F520F2ED6C *)_IDSLinkPacketBufferCreate();
      v200->var24 = objc_msgSend_linkID(v18, v106, v107, v108);
      v112 = objc_msgSend_length(v105, v109, v110, v111);
      v200->var2 = v112;
      objc_msgSend_getBytes_length_(v105, v113, (uint64_t)v200->var0, v114, v112);
      v200->var22 = 1;
      v200->var23[0].var19 = 1;
      objc_msgSend_objectForKey_(v202, v115, (uint64_t)CFSTR("gl-attr-remote-relay-link-id"), v116);
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      v121 = v117;
      v122 = v200;
      if (v117)
      {
        v200->var23[0].var14 = 1;
        v123 = objc_msgSend_unsignedShortValue(v117, v118, v119, v120);
        v122 = v200;
        v200->var23[0].var15[0] = v123;
      }
      v122->var27 = v78;

      goto LABEL_95;
    }
    v89 = v78 - v200->var27;
    if (v89 > 30.0)
    {
      switch(v87)
      {
        case 6:
          OSLogHandleForTransportCategory();
          v159 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v159, OS_LOG_TYPE_DEFAULT, "session relay interface information message timed out.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session relay interface information message timed out."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session relay interface information message timed out."));
            }
          }
          objc_msgSend__discardKeyMaterialMessage_(v203, v160, 12, v161, v195);
          objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v162, v163, v164);
          v165 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setRelayInterfaceInfoDeliveryStatus_status_(v165, v166, (uint64_t)v203->_cbuuid, v167, 4);

          break;
        case 4:
          OSLogHandleForTransportCategory();
          v168 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v168, OS_LOG_TYPE_DEFAULT, "session connection data message timed out.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connection data message timed out."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connection data message timed out."));
            }
          }
          objc_msgSend_sharedInstance(IDSStunConnectionDataController, v169, v170, v171, v195);
          v172 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setDeliveryStatus_status_(v172, v173, (uint64_t)v203->_cbuuid, v174, 3);

          break;
        case 1:
          OSLogHandleForTransportCategory();
          v90 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v215 = v18;
            _os_log_impl(&dword_19B949000, v90, OS_LOG_TYPE_DEFAULT, "session connected message timed out, disconnect %@.", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v195 = v18;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connected message timed out, disconnect %@."));
              if (_IDSShouldLog())
              {
                v195 = v18;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connected message timed out, disconnect %@."));
              }
            }
          }
          if (objc_msgSend_isQUIC(v18, v91, v92, v93, v195))
            objc_msgSend__sendQUICUnallocbindRequest_reason_(v203, v94, (uint64_t)key, v95, 9);
          else
            objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v203, v94, (uint64_t)key, v95, 0, 9);
          break;
        default:
LABEL_165:
          _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2FCB, v88, v89);
          goto LABEL_166;
      }
      v88 = (uint64_t)v200;
      goto LABEL_165;
    }
    if ((v87 & 0xFFFFFFFFFFFF7FFFLL) == 4 && v202)
    {
      objc_msgSend_objectForKey_(v202, v85, (uint64_t)CFSTR("gl-attr-counter"), v89);
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      v133 = objc_msgSend_intValue(v129, v130, v131, v132);
      v134 = 0xFFFFFFFFLL;
    }
    else
    {
      v133 = 0xFFFFFFFFLL;
      v134 = 0xFFFFFFFFLL;
      if ((v87 & 0xFFFFFFFFFFFF7FFFLL) != 6 || !v202)
      {
LABEL_93:
        if (objc_msgSend__shouldSkipCommand_withCandidatePair_connectionDataCounter_relayInterfaceCounter_(v203, v85, v87, v89, v18, v133, v134, v195))
        {
          _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2FD8, (uint64_t)v200, v126);
LABEL_166:

          goto LABEL_167;
        }
LABEL_95:
        objc_msgSend_GlobalLink(IDSFoundationLog, v124, v125, v126);
        v142 = objc_claimAutoreleasedReturnValue();
        v143 = os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT);
        if ((int)v84 <= 0)
        {
          if (v143)
          {
            idsSessionID = v203->_idsSessionID;
            objc_msgSend_sessionID(v18, v144, v145, v146);
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)v215 = (unsigned __int16)v201;
            *(_WORD *)&v215[4] = 2112;
            *(_QWORD *)&v215[6] = key;
            *(_WORD *)&v215[14] = 2112;
            *(_QWORD *)&v215[16] = idsSessionID;
            *(_WORD *)&v215[24] = 2112;
            *(_QWORD *)&v215[26] = v157;
            _os_log_impl(&dword_19B949000, v142, OS_LOG_TYPE_DEFAULT, "Send command %04x (relay) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x26u);

          }
          v155 = v18;
        }
        else
        {
          if (v143)
          {
            v147 = v203->_idsSessionID;
            objc_msgSend_sessionID(v18, v144, v145, v146);
            v148 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)v215 = (unsigned __int16)v201;
            *(_WORD *)&v215[4] = 1024;
            *(_DWORD *)&v215[6] = v84;
            *(_WORD *)&v215[10] = 2112;
            *(_QWORD *)&v215[12] = key;
            *(_WORD *)&v215[20] = 2112;
            *(_QWORD *)&v215[22] = v147;
            *(_WORD *)&v215[30] = 2112;
            *(_QWORD *)&v215[32] = v148;
            _os_log_impl(&dword_19B949000, v142, OS_LOG_TYPE_DEFAULT, "Send command %04x (active probing on link %d) (relay) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x2Cu);

          }
          if (v203->_linkIDToCandidatePairs)
          {
            objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v149, v84, v150);
            v142 = objc_claimAutoreleasedReturnValue();
            if (v142)
            {
              linkIDToCandidatePairs = (const __CFDictionary *)v203->_linkIDToCandidatePairs;
              objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v151, v84, v152);
              v154 = objc_claimAutoreleasedReturnValue();
              v155 = (id)CFDictionaryGetValue(linkIDToCandidatePairs, v154);

              v18 = v154;
            }
            else
            {
              v155 = 0;
            }

          }
          else
          {
            v155 = 0;
            v142 = v18;
          }
        }

        v177 = 0;
        v178 = v201;
        if (v201 != 3 && (v201 & 0x8000) == 0)
        {
          v177 = _IDSLinkPacketBufferClone((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 12284, (uint64_t)v200);
          v178 = v201;
        }
        v179 = (v178 & 0x8000) == 0;
        var27 = v200->var27;
        objc_msgSend__sendChannelDataPacketBuffer_candidatePair_(v203, v175, (uint64_t)v200, v176, v155);
        v181 = v201;
        v182 = v201 == 3 && (int)v84 > 0;
        if (!v182 && v179)
        {
          v183 = 1.0;
          if (v201 == 6 || v201 == 1)
          {
            v184 = key;
            if (v78 - var27 < 2.0)
            {
              v185 = v203->_allocbindEndTime - v203->_allocbindStartTime;
              if (v185 > 0.0)
              {
                v186 = v185 + v185;
                if (v185 + v185 > 0.2)
                  v186 = 0.2;
                if (v186 >= 0.05)
                  v183 = v186;
                else
                  v183 = 0.05;
                OSLogHandleForTransportCategory();
                v187 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134218240;
                  *(double *)v215 = v183;
                  *(_WORD *)&v215[8] = 2048;
                  *(double *)&v215[10] = v185;
                  _os_log_impl(&dword_19B949000, v187, OS_LOG_TYPE_DEFAULT, "use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.", buf, 0x16u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec."));
                    if (_IDSShouldLog())
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec."));
                  }
                }
                v184 = key;
                v181 = v201;
              }
            }
          }
          else
          {
            v184 = key;
          }
          v205[0] = MEMORY[0x1E0C809B0];
          v205[1] = 3221225472;
          v205[2] = sub_19BA0E094;
          v205[3] = &unk_1E3C20388;
          v205[4] = v203;
          v208 = v181;
          v209 = v177;
          v206 = v202;
          key = v184;
          v207 = key;
          IDSTransportThreadAddBlockAfter(v205, v183);

        }
        v18 = v155;
        goto LABEL_166;
      }
      objc_msgSend_objectForKey_(v202, v85, (uint64_t)CFSTR("gl-attr-counter"), v89);
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      v134 = objc_msgSend_intValue(v129, v139, v140, v141);
    }

    v87 = v201;
    goto LABEL_93;
  }
  OSLogHandleForTransportCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v215 = a3;
    *(_WORD *)&v215[8] = 2080;
    *(_QWORD *)&v215[10] = v13;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "skip session command %04lx, GL state (%s).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip session command %04lx, GL state (%s)."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip session command %04lx, GL state (%s)."));
    }
  }
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2F6F, (uint64_t)a4, v14);
LABEL_167:

}

- (BOOL)_processChannelDataCommandMessage:(id *)a3 remoteRelayLinkID:(unsigned __int16)a4 channelNumber:(unsigned __int16)a5 fromDeviceUniqueID:(id)a6 cbuuid:(id)a7 arrivalTime:(double)a8
{
  unsigned int v10;
  uint64_t v11;
  id v14;
  id v15;
  void *v16;
  NSMutableDictionary *channelToCandidatePairs;
  BOOL v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double *v30;
  const char *v31;
  NSObject *v32;
  NSMutableDictionary *v33;
  char v34;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  NSMutableDictionary *v39;
  uint64_t v40;

  v10 = a5;
  v11 = a4;
  v40 = *MEMORY[0x1E0C80C00];
  v14 = a6;
  v15 = a7;
  channelForStunCandidatePair((uint64_t)&a3->var17, (uint64_t)&a3->var18, v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  channelToCandidatePairs = self->_channelToCandidatePairs;
  if (channelToCandidatePairs)
    v18 = v16 == 0;
  else
    v18 = 1;
  if (v18
    || (v19 = (id)CFDictionaryGetValue((CFDictionaryRef)channelToCandidatePairs, v16)) == 0)
  {
    OSLogHandleForTransportCategory();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = self->_channelToCandidatePairs;
      *(_DWORD *)buf = 138412546;
      v37 = v16;
      v38 = 2112;
      v39 = v33;
      _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for command message, channel %@, _channelToCandidatePairs = %@", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find relay-session-id for command message, channel %@, _channelToCandidatePairs = %@"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find relay-session-id for command message, channel %@, _channelToCandidatePairs = %@"));
      }
    }
    v34 = 0;
  }
  else
  {
    v23 = v19;
    objc_msgSend_candidatePairToken(v19, v20, v21, v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isActive(v23, v25, v26, v27))
    {
      v30 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
      if (v30)
        v30[36] = a8;
    }
    else
    {
      objc_msgSend_setLastIncomingPacketTime_(v23, v28, v29, a8);
    }
    v34 = objc_msgSend__processIncomingIndicationData_length_candidatePairToken_arrivalTime_remoteRelayLinkID_(self, v31, (uint64_t)a3->var0, a8, LODWORD(a3->var2), v24, v11);

  }
  return v34;
}

- (int64_t)getAllocBindErrorCodeForSessionID:(id)a3
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  id v8;
  const char *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  const char *v21;
  double v22;
  int isEqualToString;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  BOOL v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  NSObject *v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  id v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, v7);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v38, v10, v46, 16);
  if (!v13)
  {

LABEL_20:
    OSLogHandleForTransportCategory();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v43 = "-[IDSGlobalLink getAllocBindErrorCodeForSessionID:]";
      v44 = 2112;
      v45 = v4;
      _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "%s: did not find candidate pairs for session %@", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s: did not find candidate pairs for session %@"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s: did not find candidate pairs for session %@"));
      }
    }
    v35 = 7;
    goto LABEL_27;
  }
  v15 = 0;
  v16 = 0;
  v17 = *(_QWORD *)v39;
  do
  {
    for (i = 0; i != v13; ++i)
    {
      if (*(_QWORD *)v39 != v17)
        objc_enumerationMutation(v8);
      v19 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
      objc_msgSend_sessionID(v19, v11, v12, v14);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)v4, v22);

      if (isEqualToString)
      {
        objc_msgSend_local(v19, v11, v12, v14);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = *(_BYTE *)(objc_msgSend_address(v24, v25, v26, v27) + 1) == 30;

        if (v28)
        {
          v15 = 1;
        }
        else
        {
          objc_msgSend_local(v19, v11, v12, v14);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = *(_BYTE *)(objc_msgSend_address(v29, v30, v31, v32) + 1) == 2;

          v16 |= v33;
        }
      }
    }
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v38, v14, v46, 16);
  }
  while (v13);

  v34 = 37;
  if ((v16 & 1 & v15) != 0)
    v34 = 7;
  if ((v16 & 1) != 0)
    v35 = v34;
  else
    v35 = 38;
  if (((v16 | v15) & 1) == 0)
    goto LABEL_20;
LABEL_27:

  return v35;
}

- (NSString)cbuuid
{
  return (NSString *)objc_getProperty(self, a2, 624, 1);
}

- (void)setCbuuid:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 624);
}

- (NSString)deviceUniqueID
{
  return (NSString *)objc_getProperty(self, a2, 632, 1);
}

- (void)setDeviceUniqueID:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 632);
}

- (unint64_t)state
{
  return self->_state;
}

- (IDSLinkDelegate)delegate
{
  return (IDSLinkDelegate *)objc_loadWeakRetained((id *)&self->_delegate);
}

- (void)setDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_delegate, a3);
}

- (IDSLinkDelegate)alternateDelegate
{
  return (IDSLinkDelegate *)objc_loadWeakRetained((id *)&self->_alternateDelegate);
}

- (void)setAlternateDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_alternateDelegate, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_usedLocalConnectionIDs, 0);
  objc_storeStrong((id *)&self->_groupID, 0);
  objc_storeStrong((id *)&self->_p2pNegotiatorProvider, 0);
  objc_storeStrong((id *)&self->_linkIDToStatsData, 0);
  objc_storeStrong((id *)&self->_qrExperiments, 0);
  objc_storeStrong((id *)&self->_qrChannelExperiments, 0);
  objc_storeStrong((id *)&self->_qrSessionExperiments, 0);
  objc_storeStrong((id *)&self->_transportScoreCards, 0);
  objc_storeStrong((id *)&self->_allocationsToTransportScoreCards, 0);
  objc_storeStrong((id *)&self->_metricsCollector, 0);
  objc_storeStrong((id *)&self->_quicMaterialExchangeProvider, 0);
  objc_storeStrong((id *)&self->_serverMaterialExchangeController, 0);
  objc_storeStrong((id *)&self->_idsContextBlob, 0);
  objc_storeStrong((id *)&self->_avcDataBlob, 0);
  objc_storeStrong((id *)&self->_pluginControlDisconnectRecentTransactionIDs, 0);
  objc_storeStrong((id *)&self->_pluginNameToPluginOptionsDict, 0);
  objc_storeStrong((id *)&self->_pluginParticipantIDs, 0);
  objc_storeStrong((id *)&self->_QRServerDataBlob, 0);
  objc_storeStrong((id *)&self->_timeBase, 0);
  objc_storeStrong(&self->_pendingCommandRelayInterfaceInfoBlock, 0);
  objc_storeStrong(&self->_pendingCommandConnectionDataBlock, 0);
  objc_storeStrong((id *)&self->_localRemoteRelayLinkIDToVirtualCandidatePairs, 0);
  objc_storeStrong((id *)&self->_retryCountPerLinkType, 0);
  objc_storeStrong((id *)&self->_cellularPathEvaluator, 0);
  objc_storeStrong((id *)&self->_wifiPathEvaluator, 0);
  objc_storeStrong((id *)&self->_idsSessionID, 0);
  objc_storeStrong((id *)&self->_deviceUniqueID, 0);
  objc_storeStrong((id *)&self->_cbuuid, 0);
  objc_storeStrong((id *)&self->_selfAllocateRequestIDs, 0);
  objc_storeStrong((id *)&self->_allocateTimeReportBlocks, 0);
  objc_storeStrong((id *)&self->_qraBlocks, 0);
  objc_storeStrong((id *)&self->_controlMessageKey, 0);
  objc_storeStrong((id *)&self->_targetedAllocations, 0);
  objc_storeStrong((id *)&self->_delayedCellInterfaces, 0);
  objc_storeStrong((id *)&self->_nonAcceptedQRSessions, 0);
  objc_storeStrong((id *)&self->_acceptedRelaySessionID, 0);
  objc_storeStrong((id *)&self->_skeData, 0);
  objc_storeStrong((id *)&self->_tokenToStunCheckPairs, 0);
  objc_storeStrong((id *)&self->_remoteCandidateList, 0);
  objc_storeStrong((id *)&self->_localCandidateList, 0);
  objc_storeStrong((id *)&self->_unusedLinkIDs, 0);
  objc_storeStrong((id *)&self->_interfaceAddressArray, 0);
  objc_storeStrong((id *)&self->_connectingCandidatePairSessionInfo, 0);
  objc_storeStrong((id *)&self->_activeProbingLinkIDs, 0);
  objc_storeStrong((id *)&self->_connectedLinkIDs, 0);
  objc_storeStrong((id *)&self->_linkIDToHBCounter, 0);
  objc_storeStrong((id *)&self->_linkIDToRequestTimeStampAndRTT, 0);
  objc_storeStrong((id *)&self->_linkIDToReorderedPackets, 0);
  objc_storeStrong((id *)&self->_activityTimer, 0);
  objc_storeStrong((id *)&self->_disconnectTimer, 0);
  objc_storeStrong((id *)&self->_unallocbindRequestToReason, 0);
  objc_storeStrong((id *)&self->_reallocNewCandidatePairToOldCandidatePair, 0);
  objc_storeStrong((id *)&self->_tokenToReallocBlocks, 0);
  objc_storeStrong((id *)&self->_tokenToStunReqID, 0);
  objc_storeStrong((id *)&self->_startTimeToStunReqID, 0);
  objc_storeStrong((id *)&self->_transactionIDToRequestMetadata, 0);
  objc_storeStrong((id *)&self->_channelToCandidatePairs, 0);
  objc_storeStrong((id *)&self->_linkIDToCandidatePairs, 0);
  objc_storeStrong((id *)&self->_tokenToCandidatePairs, 0);
  objc_storeStrong(&self->_disconnectCompletionHandler, 0);
  objc_storeStrong(&self->_connectReadyHandler, 0);
  objc_destroyWeak((id *)&self->_alternateDelegate);
  objc_destroyWeak((id *)&self->_delegate);
  objc_storeStrong((id *)&self->_nwLink, 0);
  objc_storeStrong((id *)&self->_tcpSSLLink, 0);
  objc_storeStrong((id *)&self->_tcpLink, 0);
  objc_storeStrong((id *)&self->_udpLinkv6, 0);
  objc_storeStrong((id *)&self->_udpLink, 0);
}

@end
