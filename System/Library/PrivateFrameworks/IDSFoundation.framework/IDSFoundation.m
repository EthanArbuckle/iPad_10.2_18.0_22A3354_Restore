void sub_19B94B24C()
{
  const char *v0;
  double v1;
  id v2;

  IDSGetMainBundleIdentifier();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  byte_1ECDD4918 = objc_msgSend_isEqualToString_(v2, v0, (uint64_t)CFSTR("com.apple.identityservicesd"), v1);

}

uint64_t sub_19B94B28C()
{
  char v0;
  uint64_t result;

  if (os_variant_has_internal_ui())
    v0 = _os_feature_enabled_impl();
  else
    v0 = 1;
  byte_1ECDD4889 = v0;
  result = _os_feature_enabled_impl();
  byte_1ECDD485A = result;
  return result;
}

void sub_19B94B638()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    byte_1ECDD4911 = CFEqual(v0, CFSTR("Vendor")) != 0;
    byte_1ECDD48E2 = CFEqual(v1, CFSTR("VendorNonUI")) != 0;
    CFRelease(v1);
    if (byte_1ECDD4911 | byte_1ECDD48E2)
      byte_1EE40B4F8 = 1;
  }
  else
  {
    byte_1ECDD4911 = 0;
    byte_1ECDD48E2 = 0;
  }
}

void sub_19B94B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFArray *sub_19B94BBFC(void *a1, void *a2, int a3, __CFError **a4)
{
  const char *v7;
  uint64_t v8;
  id v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  int v23;
  id v24;
  id v25;
  __CFArray *Mutable;
  id v27;
  const char *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFData *v34;
  SecCertificateRef v35;
  SecCertificateRef v36;
  const char *v37;
  double v38;
  CFIndex Count;
  const char *v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  __CFString *v46;
  SecPolicyRef v47;
  SecPolicyRef v48;
  const char *v49;
  uint64_t v50;
  double v51;
  int v52;
  const __CFAllocator *v53;
  CFAbsoluteTime Current;
  const __CFDate *v55;
  OSStatus v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  double v63;
  NSObject *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  double v73;
  NSObject *v74;
  uint64_t v75;
  __CFError *v76;
  __CFError **v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  double v81;
  NSObject *v82;
  uint64_t v83;
  __CFError *v84;
  __CFError **v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  double v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  double v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  double v101;
  void *v102;
  const char *v103;
  double v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  double v108;
  void *v109;
  const char *v110;
  double v111;
  const char *v112;
  uint64_t v113;
  double v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  double v118;
  int isInternalInstall;
  id v121;
  __CFError **v122;
  int v123;
  id v124;
  int v125;
  SecTrustRef trust;
  CFErrorRef error[2];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint8_t buf[4];
  uint64_t v132;
  __int16 v133;
  void *v134;
  __int16 v135;
  CFErrorRef v136;
  __int16 v137;
  const __CFDate *v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if (!a1)
  {
LABEL_56:
    Mutable = 0;
    goto LABEL_57;
  }
  objc_msgSend_config(a1, v7, v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_url(v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_config(a1, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_validateAgainstIDSPolicy(v19, v20, v21, v22);
  v24 = v9;
  v25 = v15;
  if (v25)
  {
    v125 = v23;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v121 = v24;
      v122 = a4;
      v123 = a3;
      v124 = v9;
      v129 = 0u;
      v130 = 0u;
      *(_OWORD *)error = 0u;
      v128 = 0u;
      v27 = v24;
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)error, v29, buf, 16);
      if (v30)
      {
        v31 = v30;
        v32 = *(_QWORD *)v128;
LABEL_6:
        v33 = 0;
        while (1)
        {
          if (*(_QWORD *)v128 != v32)
            objc_enumerationMutation(v27);
          v34 = (const __CFData *)*((_QWORD *)error[1] + v33);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            break;
          v35 = SecCertificateCreateWithData(0, v34);
          if (!v35)
            break;
          v36 = v35;
          CFArrayAppendValue(Mutable, v35);
          CFRelease(v36);
          if (v31 == ++v33)
          {
            v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v37, (uint64_t)error, v38, buf, 16);
            if (v31)
              goto LABEL_6;
            break;
          }
        }
      }

      trust = 0;
      Count = CFArrayGetCount(Mutable);
      v9 = v124;
      a4 = v122;
      if (Count == objc_msgSend_count(v27, v40, v41, v42))
      {
        objc_msgSend_host(v25, v43, v44, v45);
        v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v47 = v125 ? (SecPolicyRef)SecPolicyCreateAppleIDSService() : SecPolicyCreateSSL(1u, v46);
        v48 = v47;

        if (v48)
        {
          if (SecTrustCreateWithCertificates(Mutable, v48, &trust) && trust)
          {
            CFRelease(trust);
            trust = 0;
          }
          CFRelease(v48);
        }
      }
      CFRelease(Mutable);
      Mutable = trust;
      a3 = v123;
      v24 = v121;
    }
  }
  else
  {
    Mutable = 0;
  }

  if (Mutable)
  {
    error[0] = 0;
    if (!SecTrustEvaluateWithError(Mutable, error))
    {
      if (!SecTrustIsExpiredOnly())
      {
        objc_msgSend_config(a1, v49, v50, v51);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logCategory(v70, v71, v72, v73);
        v74 = objc_claimAutoreleasedReturnValue();

        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          v75 = objc_opt_class();
          *(_DWORD *)buf = 138412802;
          v132 = v75;
          v133 = 2048;
          v134 = a1;
          v135 = 2112;
          v136 = error[0];
          _os_log_impl(&dword_19B949000, v74, OS_LOG_TYPE_DEFAULT, "<%@:%p> Failed trust evaluate, not expired {errorRef: %@}", buf, 0x20u);
        }

        if (a4)
        {
          v76 = objc_retainAutorelease(error[0]);
          v77 = a4;
          LODWORD(a4) = 0;
          v69 = 0;
          *v77 = v76;
          if (!a3)
          {
LABEL_49:
            if (IMGetDomainBoolForKey())
            {
              objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v112, v113, v114);
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              isInternalInstall = objc_msgSend_isInternalInstall(v115, v116, v117, v118);

            }
            else
            {
              isInternalInstall = 0;
            }
            if (((a4 | isInternalInstall) & 1) == 0)
            {
              if (error[0])
              {
                CFRelease(error[0]);
                error[0] = 0;
              }
              CFRelease(Mutable);
              goto LABEL_56;
            }
            goto LABEL_57;
          }
        }
        else
        {
          v69 = 0;
          if (!a3)
            goto LABEL_49;
        }
LABEL_48:
        objc_msgSend_config(a1, v66, v67, v68);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        v90 = objc_msgSend_sosDomain(v86, v87, v88, v89);
        objc_msgSend_config(a1, v91, v92, v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_url(v94, v95, v96, v97);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_absoluteString(v98, v99, v100, v101);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_metricWithDomain_type_error_bagURL_(IDSSOSMetric, v103, v90, v104, v69, 9001, v102);
        v105 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_logger(IDSSOSLogger, v106, v107, v108);
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logMetric_(v109, v110, (uint64_t)v105, v111);

        goto LABEL_49;
      }
      v52 = a3;
      v53 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v55 = CFDateCreate(v53, Current + -604800.0);
      v56 = SecTrustSetVerifyDate(Mutable, v55);
      CFRelease(v55);
      if (v56)
      {
        objc_msgSend_config(a1, v57, v58, v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logCategory(v60, v61, v62, v63);
        v64 = objc_claimAutoreleasedReturnValue();

        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          v65 = objc_opt_class();
          *(_DWORD *)buf = 138413058;
          v132 = v65;
          v133 = 2048;
          v134 = a1;
          v135 = 2112;
          v136 = error[0];
          v137 = 1024;
          LODWORD(v138) = v56;
          _os_log_impl(&dword_19B949000, v64, OS_LOG_TYPE_DEFAULT, "<%@:%p> Failed trust evaluate, unable to check verify date {errorRef: %@, setDateStatus: %d}", buf, 0x26u);
        }

        LODWORD(a4) = 0;
LABEL_31:
        v69 = 0;
        goto LABEL_47;
      }
      if (error[0])
      {
        CFRelease(error[0]);
        error[0] = 0;
      }
      if (SecTrustEvaluateWithError(Mutable, error))
      {
        LODWORD(a4) = 1;
        v69 = 1;
      }
      else
      {
        objc_msgSend_config(a1, v66, v67, v68);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logCategory(v78, v79, v80, v81);
        v82 = objc_claimAutoreleasedReturnValue();

        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          v83 = objc_opt_class();
          *(_DWORD *)buf = 138413058;
          v132 = v83;
          v133 = 2048;
          v134 = a1;
          v135 = 2112;
          v136 = error[0];
          v137 = 2112;
          v138 = v55;
          _os_log_impl(&dword_19B949000, v82, OS_LOG_TYPE_DEFAULT, "<%@:%p> Failed trust evaluate, after date adjustment {errorRef: %@, oneWeekAgo: %@}", buf, 0x2Au);
        }

        if (!a4)
          goto LABEL_31;
        v84 = objc_retainAutorelease(error[0]);
        v85 = a4;
        LODWORD(a4) = 0;
        v69 = 0;
        *v85 = v84;
      }
LABEL_47:
      if (!v52)
        goto LABEL_49;
      goto LABEL_48;
    }
  }
LABEL_57:

  return Mutable;
}

void sub_19B94C4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id IDSLoggableDescriptionForHandlesOnService(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  _QWORD v16[4];
  id v17;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if ((IDSShouldUseRestrictedLoggingForService(v4) & 1) != 0)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = sub_19B9741A0;
      v16[3] = &unk_1E3C1C3B8;
      v17 = v4;
      objc_msgSend___imArrayByApplyingBlock_(v3, v8, (uint64_t)v16, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_description(v10, v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend_description(v3, v5, v6, v7);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

uint64_t IDSShouldUseRestrictedLoggingForService(void *a1)
{
  const char *v1;
  uint64_t v2;
  id v3;
  double v4;
  unsigned __int8 v5;
  const char *v6;
  double v7;
  uint64_t v8;

  v3 = a1;
  if (qword_1ECDD4920 != -1)
    dispatch_once(&qword_1ECDD4920, &unk_1E3C1B5F0);
  if (byte_1ECDD485A)
    goto LABEL_11;
  v5 = atomic_load(byte_1EE40AF88);
  if ((v5 & 1) != 0)
    goto LABEL_11;
  if (!byte_1ECDD4889)
  {
    v8 = 0;
    goto LABEL_12;
  }
  if (!v3 || !objc_msgSend_length(v3, v1, v2, v4))
  {
LABEL_11:
    v8 = 1;
  }
  else
  {
    if (qword_1EE40AF98 != -1)
      dispatch_once(&qword_1EE40AF98, &unk_1E3C1BF10);
    v8 = objc_msgSend_containsObject_((void *)qword_1EE40AF90, v6, (uint64_t)v3, v7);
  }
LABEL_12:

  return v8;
}

id _IDSCopyOrderedAliasStrings(void *a1, uint64_t a2, int a3)
{
  void *v3;
  id v4;
  id v5;
  const char *v6;
  double v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  double v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  _IDSCopyOrderedAliasesWithGetter(a1, a2, a3, 0, &unk_1E3C1B570);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0C99E10]);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = v3;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v19, v7, v23, 16);
  if (v8)
  {
    v12 = v8;
    v13 = *(_QWORD *)v20;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v5);
        objc_msgSend__stripFZIDPrefix(*(void **)(*((_QWORD *)&v19 + 1) + 8 * v14), v9, v10, v11, (_QWORD)v19);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v4, v16, (uint64_t)v15, v17);

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v19, v11, v23, 16);
    }
    while (v12);
  }

  return v4;
}

id _IDSCopyOrderedAliasesWithGetter(void *a1, uint64_t a2, int a3, char a4, void *a5)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  id v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  id v38;
  id v39;
  uint64_t v40;
  const __CFString *v41;
  void *v42;
  const char *v43;
  double v44;
  const char *v45;
  NSObject *v46;
  double v47;
  const char *v48;
  double v49;
  const char *v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  const char *v60;
  double v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  id v73;
  const char *v74;
  double v75;
  void *v76;
  id v77;
  const char *v78;
  double v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  NSObject *v84;
  void (**v88)(_QWORD);
  int v89;
  _QWORD v90[4];
  id v91;
  _QWORD aBlock[4];
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint8_t buf[4];
  id v104;
  _BYTE v105[128];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v88 = a5;
  v8 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v9 = v7;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v99, v11, v105, 16);
  if (!v12)
  {
    LOBYTE(v14) = 0;
    goto LABEL_29;
  }
  v13 = v12;
  v14 = 0;
  v15 = *(_QWORD *)v100;
  v16 = CFSTR("____--SENTINEL--SELF--ALIAS--V0--____");
  do
  {
    v17 = 0;
    do
    {
      if (*(_QWORD *)v100 != v15)
        objc_enumerationMutation(v9);
      v18 = *(id *)(*((_QWORD *)&v99 + 1) + 8 * v17);
      if (objc_msgSend__appearsToBePhoneNumber(v18, v19, v20, v21))
      {
        v26 = _IDSCopyIDForPhoneNumberWithOptions(v18, 0);
        if (v26)
          objc_msgSend_addObject_(v8, v25, (uint64_t)v26, v27);

        v14 = 1;
      }
      else
      {
        if (objc_msgSend__appearsToBeEmail(v18, v22, v23, v24))
        {
          if ((_DWORD)a2)
          {
            objc_msgSend_lowercaseString(v18, v28, v29, v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend_hasMobileMeSuffix(v31, v32, v33, v34))
            {
              objc_msgSend_stripMobileMSuffixIfPresent(v31, v35, v36, v37);
              v89 = v14;
              v38 = v8;
              v39 = v9;
              v40 = a2;
              v41 = v16;
              v42 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_stringByAppendingString_(v42, v43, (uint64_t)CFSTR("@icloud.com"), v44);
              v31 = (void *)objc_claimAutoreleasedReturnValue();

              v16 = v41;
              a2 = v40;
              v9 = v39;
              v8 = v38;
              v14 = v89;
            }

            v18 = v31;
          }
          v46 = _IDSCopyIDForEmailAddress(v18);
          if (v46)
            objc_msgSend_addObject_(v8, v45, (uint64_t)v46, v47);
LABEL_17:

          goto LABEL_21;
        }
        if ((objc_msgSend__appearsToBeDSID(v18, v28, v29, v30) & 1) != 0
          || objc_msgSend_isEqualToIgnoringCase_(v18, v48, (uint64_t)v16, v49))
        {
          objc_msgSend_addObject_(v8, v48, (uint64_t)v18, v49);
        }
        else if ((objc_msgSend_isEqualToIgnoringCase_(v18, v48, (uint64_t)CFSTR("____--SENTINEL--ALIAS--V0--____"), v49) & 1) == 0)
        {
          objc_msgSend_registration(MEMORY[0x1E0D36AA8], v52, v53, v54);
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v104 = v18;
            _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, "Ignoring malformed alias %@ in _IDSCopyOrderedAliases", buf, 0xCu);
          }
          goto LABEL_17;
        }
      }
LABEL_21:

      ++v17;
    }
    while (v13 != v17);
    v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v50, (uint64_t)&v99, v51, v105, 16);
    v13 = v55;
  }
  while (v55);
LABEL_29:

  if (_IMWillLog())
    _IMAlwaysLog();
  if (v88 == 0 || (v14 & 1) == 0)
  {
    v62 = 0;
  }
  else
  {
    v88[2](v88);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v56, v57, v58, v59))
    {
      objc_msgSend___imArrayByApplyingBlock_(v56, v60, (uint64_t)&unk_1E3C1BD10, v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v62 = 0;
    }

  }
  ValidMobileMeDomains();
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
    v64 = 0;
  else
    v64 = 100;
  v65 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19BA93598;
  aBlock[3] = &unk_1E3C21A20;
  v66 = v62;
  v93 = v66;
  v96 = v64;
  v67 = v63;
  v94 = v67;
  v95 = &unk_1E3C88818;
  v98 = a4;
  v97 = 1000;
  v68 = _Block_copy(aBlock);
  objc_msgSend_allObjects(v8, v69, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v90[0] = v65;
  v90[1] = 3221225472;
  v90[2] = sub_19BA93840;
  v90[3] = &unk_1E3C21A48;
  v73 = v68;
  v91 = v73;
  objc_msgSend_sortedArrayUsingComparator_(v72, v74, (uint64_t)v90, v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();

  v77 = objc_alloc(MEMORY[0x1E0C99E40]);
  v80 = (void *)objc_msgSend_initWithArray_(v77, v78, (uint64_t)v76, v79);
  objc_msgSend_registration(MEMORY[0x1E0D36AA8], v81, v82, v83);
  v84 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    sub_19BAF9428();

  return v80;
}

id IDSLoggableDescriptionSalt()
{
  const char *v0;
  uint64_t v1;
  double v2;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  double v18;

  if ((_IDSRunningInDaemon() & 1) != 0)
  {
    if (qword_1EE40AD20 != -1)
      dispatch_once(&qword_1EE40AD20, &unk_1E3C1C390);
    v3 = (id)qword_1EE40AD28;
  }
  else
  {
    if (qword_1EE40AFB0 != -1)
      dispatch_once(&qword_1EE40AFB0, &unk_1E3C1C3D8);
    objc_msgSend_sharedInstance((void *)qword_1EE40AFB8, v0, v1, v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v4;
    if (v4)
    {
      objc_msgSend_listener(v4, v5, v6, v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }

    objc_msgSend_latestPrivateLoggingSalt(v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EE40AFA8);
    if (v13 && (unint64_t)objc_msgSend_length(v13, v14, v15, v16) >= 0x20)
    {
      if ((!qword_1EE40AFA0 || (objc_msgSend_isEqualToData_((void *)qword_1EE40AFA0, v17, (uint64_t)v13, v18) & 1) == 0)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19BAEDD18();
      }
      objc_storeStrong((id *)&qword_1EE40AFA0, v13);
    }
    v3 = (id)qword_1EE40AFA0;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EE40AFA8);

  }
  return v3;
}

uint64_t _IDSRunningInDaemon()
{
  if (qword_1ECDD4940 != -1)
    dispatch_once(&qword_1ECDD4940, &unk_1E3C1B910);
  return byte_1ECDD4918;
}

id sub_19B94E674(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  double v10;
  uint64_t v11;
  const char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  double v25;
  void *v26;
  const char *v27;
  double v28;
  const char *v29;
  double v30;
  void *v31;
  const char *v32;
  double v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    if (!qword_1ECDD4908)
    {
      v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v6 = (void *)qword_1ECDD4908;
      qword_1ECDD4908 = (uint64_t)v5;

    }
    v7 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v39 = v1;
    v8 = v1;
    v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v40, v10, v44, 16);
    if (v11)
    {
      v14 = v11;
      v15 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v41 != v15)
            objc_enumerationMutation(v8);
          v17 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * i);
          v18 = objc_msgSend_indexOfObject_((void *)qword_1ECDD4908, v12, v17, v13);
          v22 = (void *)MEMORY[0x1E0CB37E8];
          if (v18 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v23 = objc_msgSend_count((void *)qword_1ECDD4908, v19, v20, v21);
            objc_msgSend_numberWithUnsignedInteger_(v22, v24, v23, v25);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v7, v27, (uint64_t)v26, v28);

            objc_msgSend_addObject_((void *)qword_1ECDD4908, v29, v17, v30);
          }
          else
          {
            objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v19, v18, v21);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v7, v32, (uint64_t)v31, v33);

          }
        }
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v12, (uint64_t)&v40, v13, v44, 16);
      }
      while (v14);
    }

    v37 = (void *)objc_msgSend_copy(v7, v34, v35, v36);
    v1 = v39;
  }
  else
  {
    v37 = 0;
  }

  return v37;
}

uint64_t sub_19B94E900(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  id v5;
  const char *v6;
  double v7;
  uint64_t v8;
  const __CFString *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  __int128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  size_t v27;
  int v28;
  __int16 *v29;
  size_t v30;
  _BYTE *v31;
  int v32;
  void (**v33)(_QWORD, _QWORD);
  char v34;
  uint64_t *v35;
  uintptr_t v36;
  os_unfair_lock_s *v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t i;
  void (**v45)(_QWORD, _QWORD);
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v56;
  BOOL v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  __int128 v64;
  double v65;
  double v66;
  NSObject *v67;
  uint64_t v68;
  __int128 v69;
  __int16 *v70;
  uintptr_t v71;
  int v72;
  NSObject *v73;
  uint32_t *v74;
  int v75;
  NSObject *v76;
  int v77;
  NSObject *v78;
  int v79;
  NSObject *v80;
  uint64_t v82;
  id v83;
  __int128 v84;
  uint32_t *p_fflags;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  os_unfair_lock_t v89;
  int v90;
  char *v91;
  int v92;
  uint64_t v93;
  kevent buf;
  uint8_t v95[32];
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v83 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 == 200)
    v3 = 31;
  else
    v3 = 37;
  if (v2 == 100)
    v4 = 20;
  else
    v4 = v3;
  sub_19BAC5100(v4, 0);
  sub_19BAC5290();
  if (*(_QWORD *)(a1 + 72))
  {
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    v8 = *(_QWORD *)(a1 + 72);
    v9 = CFSTR("Sync");
    if (v8 == 200)
      v9 = CFSTR("Default");
    if (v8 == 300)
      v10 = (void *)objc_msgSend_initWithFormat_(v5, v6, (uint64_t)CFSTR("TransportThread %@"), v7, CFSTR("URGENT"));
    else
      v10 = (void *)objc_msgSend_initWithFormat_(v5, v6, (uint64_t)CFSTR("TransportThread %@"), v7, v9);
    v14 = v10;
    v15 = (const char *)objc_msgSend_UTF8String(v10, v11, v12, v13);
    pthread_setname_np(v15);

  }
  else
  {
    pthread_setname_np("TransportThread Primary");
  }
  v93 = a1;
  v16 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.ident) = 0;
    _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "IDSTransportProc started...", (uint8_t *)&buf, 2u);
  }
  v17 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v17)
  {
    v17 = _IDSShouldLog();
    a1 = v93;
    if ((_DWORD)v17)
    {
      v17 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportProc started..."));
      a1 = v93;
    }
  }
  v92 = 0;
  v87 = 0;
  v89 = (os_unfair_lock_t)(a1 + 28);
  p_fflags = &buf.fflags;
  v19 = 0.0;
  *(_QWORD *)&v18 = 134217984;
  v88 = v18;
  *(_QWORD *)&v18 = 67109632;
  v84 = v18;
  while (1)
  {
    v86 = &v82;
    MEMORY[0x1E0C80A78](v17);
    v22 = &v82 - 4 * v20;
    v23 = 0;
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    do
    {
      v25 = &v22[v23 / 8];
      *(_OWORD *)v25 = v24;
      *((_OWORD *)v25 + 1) = v24;
      v23 += 32;
    }
    while (v21 != v23);
    v26 = kevent(*(_DWORD *)(a1 + 32), 0, 0, (kevent *)&v82 - v20, v20, 0);
    if ((v26 & 0x80000000) != 0)
      break;
    ++v87;
    v27 = v26;
    MEMORY[0x1E0C80A78](v26);
    if ((_DWORD)v17)
    {
      v28 = v17;
      v17 = (uint64_t)memset((char *)&v82 - ((v27 + 15) & 0x1FFFFFFF0), 170, v27);
      v90 = *(_DWORD *)(v93 + 24);
      v29 = (__int16 *)(v22 + 3);
      v30 = v27;
      v91 = (char *)&v82 - ((v27 + 15) & 0x1FFFFFFF0);
      v31 = v91;
      v32 = v28;
      do
      {
        if (*(v29 - 8) == -7)
        {
          v33 = *(void (***)(_QWORD, _QWORD))v29;
          *v31 = 1;
          v33[2](v33, 0);
          _Block_release(v33);
        }
        ++v31;
        v29 += 16;
        --v30;
      }
      while (v30);
      v34 = 0;
      do
      {
        v35 = &v22[4 * v30];
        if (*((__int16 *)v35 + 4) == -10)
        {
          v36 = v35[3];
          v91[v30] = 1;
          if (v36 == 3)
          {
            v34 = 1;
          }
          else if (v36 == 1)
          {
            v37 = v89;
            os_unfair_lock_lock(v89);
            v38 = *(void **)(v93 + 16);
            *(_QWORD *)(v93 + 16) = 0;
            os_unfair_lock_unlock(v37);
            v96 = 0u;
            v97 = 0u;
            memset(v95, 0, sizeof(v95));
            v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)v95, 0.0, &buf, 16);
            if (v41)
            {
              v43 = **(_QWORD **)&v95[16];
              do
              {
                for (i = 0; i != v41; ++i)
                {
                  if (**(_QWORD **)&v95[16] != v43)
                    objc_enumerationMutation(v38);
                  v45 = *(void (***)(_QWORD, _QWORD))(*(_QWORD *)&v95[8] + 8 * i);
                  if (v45)
                  {
                    v45[2](*(_QWORD *)(*(_QWORD *)&v95[8] + 8 * i), v34 & 1);
                    _Block_release(v45);
                  }
                }
                v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v40, (uint64_t)v95, v42, &buf, 16);
              }
              while (v41);
            }

            ++v92;
          }
          else
          {
            v46 = OSLogHandleForIDSCategory();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.ident) = v88;
              *(uintptr_t *)((char *)&buf.ident + 4) = v36;
              _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, "Unknown control command %lu", (uint8_t *)&buf, 0xCu);
            }
            v17 = os_log_shim_legacy_logging_enabled();
            if ((_DWORD)v17)
            {
              v17 = _IDSShouldLog();
              if ((_DWORD)v17)
                v17 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Unknown control command %lu"));
            }
          }
        }
        ++v30;
      }
      while (v30 != v27);
      v47 = 0;
      v48 = v32;
      v49 = 1;
      v50 = v22;
      do
      {
        if (*((__int16 *)v50 + 4) == -2)
        {
          v51 = v50[3];
          v52 = *v50;
          v53 = _Block_copy(*(const void **)(*(_QWORD *)(v93 + 64) + 8 * v51));
          v54 = v53;
          if (v52 == *(_DWORD *)(*(_QWORD *)(v93 + 48) + 4 * v51) && v53 != 0)
          {
            v91[v47] = 1;
            (*((void (**)(void *))v53 + 2))(v53);
            ++v92;
          }
          _Block_release(v54);
          if (v90 != *(_DWORD *)(v93 + 24))
            break;
        }
        v49 = ++v47 < v48;
        v50 += 4;
      }
      while (v27 != v47);
      if (!v49)
      {
        v56 = 0;
        v57 = 1;
        v58 = v22;
        do
        {
          if (*((__int16 *)v58 + 4) == -1)
          {
            v59 = v58[3];
            v60 = *v58;
            v61 = _Block_copy(*(const void **)(*(_QWORD *)(v93 + 56) + 8 * v59));
            v62 = v61;
            if (v60 == *(_DWORD *)(*(_QWORD *)(v93 + 48) + 4 * v59) && v61 != 0)
            {
              v91[v56] = 1;
              (*((void (**)(void *))v61 + 2))(v61);
              ++v92;
            }
            _Block_release(v62);
            if (v90 != *(_DWORD *)(v93 + 24))
              break;
          }
          v57 = ++v56 < v48;
          v58 += 4;
        }
        while (v27 != v56);
        if (!v57)
        {
          v68 = 0;
          *(_QWORD *)&v69 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v69 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.data = v69;
          *(_OWORD *)&buf.ident = v69;
          v70 = (__int16 *)(v22 + 1);
          do
          {
            if (!v91[v68])
            {
              v71 = *((_QWORD *)v70 - 1);
              v72 = *v70;
              v73 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v95 = v84;
                *(_DWORD *)&v95[4] = v68;
                *(_WORD *)&v95[8] = 2048;
                *(_QWORD *)&v95[10] = v71;
                *(_WORD *)&v95[18] = 1024;
                *(_DWORD *)&v95[20] = v72;
                _os_log_impl(&dword_19B949000, v73, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%lu) failed to match event for filter:%hd", v95, 0x18u);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%lu) failed to match event for filter:%hd"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%lu) failed to match event for filter:%hd"));
                }
              }
              buf.ident = v71;
              buf.filter = v72;
              buf.flags = 2;
              v74 = p_fflags;
              *(_QWORD *)p_fflags = 0;
              *((_QWORD *)v74 + 1) = 0;
              v74[4] = 0;
              v17 = kevent(*(_DWORD *)(v93 + 32), &buf, 1, 0, 0, 0);
              if ((v17 & 0x80000000) != 0)
              {
                v75 = *__error();
                v76 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v95 = v84;
                  *(_DWORD *)&v95[4] = v68;
                  *(_WORD *)&v95[8] = 2048;
                  *(_QWORD *)&v95[10] = v71;
                  *(_WORD *)&v95[18] = 1024;
                  *(_DWORD *)&v95[20] = v75;
                  _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%lu, READ, DELETE) failed with error(%d)", v95, 0x18u);
                }
                v17 = os_log_shim_legacy_logging_enabled();
                if ((_DWORD)v17)
                {
                  v17 = _IDSShouldLogTransport();
                  if ((_DWORD)v17)
                  {
                    _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%lu, READ, DELETE) failed with error(%d)"));
                    v17 = _IDSShouldLog();
                    if ((_DWORD)v17)
                      v17 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%lu, READ, DELETE) failed with error(%d)"));
                  }
                }
              }
            }
            v70 += 16;
            ++v68;
          }
          while (v27 != v68);
          goto LABEL_73;
        }
      }
      a1 = v93;
      if ((v34 & 1) != 0)
        goto LABEL_109;
    }
    else
    {
      v34 = 0;
      *(_QWORD *)&v64 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&buf.data = v64;
      *(_OWORD *)&buf.ident = v64;
LABEL_73:
      if (__ROR8__(0x1CAC083126E978D5 * v87, 3) <= 0x4189374BC6A7EFuLL)
      {
        v65 = ids_monotonic_time();
        v66 = v65 - v19;
        if (v66 < 1.0)
        {
          v67 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v95 = v88;
            *(double *)&v95[4] = v66;
            _os_log_impl(&dword_19B949000, v67, OS_LOG_TYPE_DEFAULT, "Warning ! _IDSTransportProc processed 1000 iterations in %f seconds.", v95, 0xCu);
          }
          v17 = os_log_shim_legacy_logging_enabled();
          if ((_DWORD)v17)
          {
            v17 = _IDSShouldLogTransport();
            if ((_DWORD)v17)
            {
              _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("Warning ! _IDSTransportProc processed 1000 iterations in %f seconds."));
              v17 = _IDSShouldLog();
              if ((_DWORD)v17)
                v17 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Warning ! _IDSTransportProc processed 1000 iterations in %f seconds."));
            }
          }
        }
        v19 = v65;
      }
      if (v92 >= 31)
      {

        v17 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB34A8]);
        v83 = (id)v17;
        v92 = 0;
      }
      a1 = v93;
      if ((v34 & 1) != 0)
        goto LABEL_109;
    }
  }
  v77 = *__error();
  v78 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    v79 = *(_DWORD *)(v93 + 36) + 1;
    LODWORD(buf.ident) = 67109376;
    HIDWORD(buf.ident) = v79;
    buf.filter = 1024;
    *(_DWORD *)&buf.flags = v77;
    _os_log_impl(&dword_19B949000, v78, OS_LOG_TYPE_DEFAULT, "kevent failed, (maxfd: %d, error: %d)", (uint8_t *)&buf, 0xEu);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent failed, (maxfd: %d, error: %d)"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent failed, (maxfd: %d, error: %d)"));
    }
  }
LABEL_109:

  v80 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.ident) = 0;
    _os_log_impl(&dword_19B949000, v80, OS_LOG_TYPE_DEFAULT, "IDSTransportProc ended", (uint8_t *)&buf, 2u);
  }
  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportProc ended"));
  return 0;
}

uint64_t sub_19B94F610(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return pthread_dependency_fulfill_np();
}

void sub_19B94F640(_opaque_pthread_t **a1, const void *a2)
{
  _opaque_pthread_t *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  double v13;
  void *v14;
  _QWORD v15[6];
  uint8_t buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = *a1;
    if (v4 == pthread_self())
    {
      v5 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *a1;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "should not add a sync block to the current thread %p", buf, 0xCu);
      }
      v7 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v7)
      {
        v7 = _IDSShouldLogTransport();
        if ((_DWORD)v7)
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("should not add a sync block to the current thread %p"));
          v7 = _IDSShouldLog();
          if ((_DWORD)v7)
            v7 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("should not add a sync block to the current thread %p"));
        }
      }
      v11 = isRunningTests(v10, v7, v8, v9);
      if ((_DWORD)v11)
        throwsIDSAbortException(v13, v11, v12);
      abort();
    }
    memset(buf, 170, 16);
    pthread_dependency_init_np();
    v14 = _Block_copy(a2);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_19B94F610;
    v15[3] = &unk_1E3C22190;
    v15[4] = v14;
    v15[5] = buf;
    sub_19B94F9A8((uint64_t)a1, v15);
    pthread_dependency_wait_np();
    _Block_release(v14);
  }
}

void sub_19B94F9A8(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  id v5;
  void *v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;

  if (a2)
  {
    v4 = (os_unfair_lock_s *)(a1 + 28);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28));
    v5 = *(id *)(a1 + 16);
    if (!v5)
    {
      v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      *(_QWORD *)(a1 + 16) = v5;
    }
    v6 = _Block_copy(a2);
    objc_msgSend_addObject_(v5, v7, (uint64_t)v6, v8);
    if (objc_msgSend_count(v5, v9, v10, v11) == 1)
      sub_19B94FA34(a1, (void *)1);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t sub_19B94FA34(uint64_t a1, void *a2)
{
  uint64_t result;
  int v3;
  NSObject *v4;
  kevent changelist;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  changelist.ident = 1;
  *(_QWORD *)&changelist.filter = 0x10000000021FFF6;
  changelist.data = 0;
  changelist.udata = a2;
  result = kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0);
  if ((result & 0x80000000) != 0)
  {
    v3 = *__error();
    v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v7 = v3;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "kevent EVFILT_USER failed with error(%d)", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent EVFILT_USER failed with error(%d)"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent EVFILT_USER failed with error(%d)"));
      }
    }
  }
  return result;
}

#error "19B94FBB0: too big function (funcsize=0)"

__CFString *IDSDataProtectionClassStringFromDataProtectionClass(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E3C21C88[a1];
}

uint64_t _IDSSupportsDirectMessaging()
{
  return _os_feature_enabled_impl();
}

void IDSTransportThreadAddBlock(const void *a1)
{
  sub_19B94F9A8((uint64_t)&qword_1EE40AB68, a1);
}

__CFString *_IDSBinaryStringForValue(uint64_t a1, unsigned int a2)
{
  char v3;
  const char *v4;
  __CFString *v5;
  double v6;
  unint64_t v7;
  BOOL v8;

  if (a2)
  {
    if (a2 >= 0x40)
      v3 = 64;
    else
      v3 = a2;
    v5 = (__CFString *)objc_alloc_init(MEMORY[0x1E0CB37A0]);
    v7 = 1 << (v3 - 1);
    do
    {
      if ((v7 & a1) != 0)
        objc_msgSend_appendFormat_(v5, v4, (uint64_t)CFSTR("%@"), v6, CFSTR("1"));
      else
        objc_msgSend_appendFormat_(v5, v4, (uint64_t)CFSTR("%@"), v6, CFSTR("0"));
      v8 = v7 > 1;
      v7 >>= 1;
    }
    while (v8);
  }
  else
  {
    v5 = &stru_1E3C2E4E8;
  }
  return v5;
}

id _IDSServiceDictionaryForIdentifier(uint64_t a1)
{
  return _IDSServiceDictionaryForIdentifierBypassPlatforms(a1);
}

id _IDSServiceDictionaryForIdentifierBypassPlatforms(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  double v6;
  void *v7;

  if (a1)
  {
    sub_19B94FBB0();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v1, v2, v3, v4) == 1)
    {
      objc_msgSend_objectAtIndex_(v1, v5, 0, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

__CFBundle *IDSGetMainBundleIdentifier()
{
  __CFBundle *MainBundle;

  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    CFBundleGetIdentifier(MainBundle);
    MainBundle = (__CFBundle *)objc_claimAutoreleasedReturnValue();
  }
  return MainBundle;
}

const __CFString *_IDSServerBagTypeInternalString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_1E3C20A18[a1];
}

const __CFString *_IDSServerBagHashAlgorithmString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (!a1)
    v1 = CFSTR("SHA1");
  if (a1 == 1)
    return CFSTR("SHA256");
  else
    return v1;
}

id IDSServerBagContentErrorWithUnderlyingError(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v6 = v3;
  if (v3)
  {
    v12 = *MEMORY[0x1E0CB3388];
    v13[0] = v3;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v13, v5, &v12, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v8, (uint64_t)CFSTR("com.apple.ids.serverbag.contentprovider"), v9, a1, v7);
  }
  else
  {
    v7 = 0;
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v4, (uint64_t)CFSTR("com.apple.ids.serverbag.contentprovider"), v5, a1, 0);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void IDSTransportThreadAddSyncBlock(const void *a1)
{
  sub_19B94F640(&qword_1EE40AB68, a1);
}

id _IDSCopyIDForPhoneNumberWithOptions(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  double v9;
  id v10;
  id v11;
  void *v12;
  const char *v13;
  double v14;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7))
  {
    if (objc_msgSend_hasPrefix_(v3, v8, (uint64_t)CFSTR("tel:"), v9))
    {
      v10 = v3;
    }
    else
    {
      v11 = objc_alloc(MEMORY[0x1E0CB3940]);
      IMInternationalForPhoneNumberWithOptions();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (id)objc_msgSend_initWithFormat_(v11, v13, (uint64_t)CFSTR("tel:%@"), v14, v12);

    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

double ids_monotonic_time()
{
  if (qword_1EE40ACF8 != -1)
    dispatch_once(&qword_1EE40ACF8, &unk_1E3C1B6D0);
  return *(double *)&bst_mach_time_rate * (double)mach_continuous_time();
}

id _IDSCopyIDForEmailAddress(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;
  id v11;
  id v12;
  const char *v13;
  double v14;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    objc_msgSend_lowercaseString(v1, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_hasPrefix_(v8, v9, (uint64_t)CFSTR("mailto:"), v10))
    {
      v11 = v8;
      v1 = v11;
    }
    else
    {
      v12 = objc_alloc(MEMORY[0x1E0CB3940]);
      v11 = (id)objc_msgSend_initWithFormat_(v12, v13, (uint64_t)CFSTR("mailto:%@"), v14, v8);
      v1 = v8;
    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t _IDSPrefersPhoneNumbersForServiceIdentifier(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  const char *v6;
  double v7;
  const char *v8;
  double v9;
  const char *v10;
  double v11;
  const char *v12;
  double v13;
  const char *v14;
  double v15;
  const char *v16;
  double v17;
  const char *v18;
  double v19;
  const char *v20;
  double v21;
  const char *v22;
  double v23;
  uint64_t isEqualToIgnoringCase;

  v1 = a1;
  if ((objc_msgSend_isEqualToIgnoringCase_(v1, v2, (uint64_t)CFSTR("com.apple.madrid"), v3) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v4, (uint64_t)CFSTR("com.apple.madrid.lite"), v5) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v6, (uint64_t)CFSTR("com.apple.private.alloy.sms"), v7) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v8, (uint64_t)CFSTR("com.apple.private.alloy.electrictouch"), v9) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v10, (uint64_t)CFSTR("com.apple.private.alloy.tincan.audio"), v11) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v12, (uint64_t)CFSTR("com.apple.private.alloy.facetime.audio"), v13) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v14, (uint64_t)CFSTR("com.apple.private.alloy.facetime.video"), v15) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v16, (uint64_t)CFSTR("com.apple.private.alloy.facetime.lp"), v17) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v18, (uint64_t)CFSTR("com.apple.private.alloy.facetime.multi"), v19) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v20, (uint64_t)CFSTR("com.apple.private.alloy.biz"), v21) & 1) != 0)
  {
    isEqualToIgnoringCase = 1;
  }
  else
  {
    isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v1, v22, (uint64_t)CFSTR("com.apple.private.alloy.health.sync.sharingsetup"), v23);
  }

  return isEqualToIgnoringCase;
}

id _IDSCopyCallerIDWithSelfMessagingHint(void *a1, void *a2, void *a3, void *a4, int a5, int a6, char a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const char *v34;
  uint64_t v35;
  double v36;
  id v37;
  id v38;
  id v39;
  const char *v40;
  double v41;
  const char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void *i;
  void *v47;
  int v48;
  id v49;
  const char *v50;
  uint64_t v51;
  double v52;
  const __CFString *v53;
  NSObject *v54;
  uint64_t v55;
  id v56;
  const char *v57;
  double v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  void *v70;
  const char *v71;
  double v72;
  char isEqualToString;
  id v74;
  id v75;
  id v76;
  const char *v77;
  double v78;
  uint64_t v79;
  const char *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t k;
  const char *v85;
  uint64_t v86;
  double v87;
  const char *v88;
  uint64_t v89;
  double v90;
  void *v91;
  const char *v92;
  double v93;
  NSObject *v94;
  const __CFString *v96;
  id v97;
  id v98;
  id v99;
  const __CFString *v100;
  id v101;
  id v102;
  id v103;
  void *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE v117[128];
  uint8_t v118[128];
  uint8_t buf[4];
  id v120;
  __int16 v121;
  id v122;
  __int16 v123;
  id v124;
  __int16 v125;
  const __CFString *v126;
  _BYTE v127[128];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v20 = v16;
  if (a5)
  {
    if (v13 && v16 && (objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v19) & 1) == 0)
    {
      objc_msgSend_warning(MEMORY[0x1E0D36AA8], v17, v18, v19);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_19BAF92F0();
    }
    else
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v17, v18, v19);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        sub_19BAF9284();
    }

    v33 = v20;
  }
  else if ((objc_msgSend__appearsToBeDSID(0, v17, v18, v19) & 1) != 0
         || objc_msgSend_isEqualToIgnoringCase_(0, v22, (uint64_t)CFSTR("____--SENTINEL--SELF--ALIAS--V0--____"), v24))
  {
    objc_msgSend_warning(MEMORY[0x1E0D36AA8], v22, v23, v24);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_19BAF9360(v25, v26, v27, v28, v29, v30, v31, v32);

    v33 = 0;
    v13 = 0;
  }
  else
  {
    v33 = 0;
  }
  if (!objc_msgSend_count(v14, v22, v23, v24))
  {
    v38 = 0;
    goto LABEL_76;
  }
  v104 = v20;
  if (v33)
  {
    v37 = 0;
    if (v13)
      goto LABEL_45;
    goto LABEL_47;
  }
  _IDSCopyOrderedAliasesWithGetter(v14, 0, a6, a7, &unk_1E3C1B570);
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v39 = (id)objc_claimAutoreleasedReturnValue();
  v33 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v40, (uint64_t)&v113, v41, v127, 16);
  if (!v33)
  {
    v37 = 0;
    goto LABEL_39;
  }
  v102 = v15;
  v37 = 0;
  v45 = *(_QWORD *)v114;
  while (2)
  {
    for (i = 0; i != v33; i = (char *)i + 1)
    {
      if (*(_QWORD *)v114 != v45)
        objc_enumerationMutation(v39);
      v47 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)i);
      if (!v37)
      {
        objc_msgSend__stripFZIDPrefix(*(void **)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)i), v42, v43, v44);
        v37 = (id)objc_claimAutoreleasedReturnValue();
      }
      v48 = objc_msgSend__appearsToBeDSID(v47, v42, v43, v44);
      if (a5)
      {
        if (v48)
        {
          v49 = v47;
LABEL_37:
          v33 = v49;
          goto LABEL_38;
        }
      }
      else if ((v48 & 1) == 0)
      {
        objc_msgSend__stripFZIDPrefix(v47, v42, v43, v44);
        v49 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_37;
      }
    }
    v33 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v42, (uint64_t)&v113, v44, v127, 16);
    if (v33)
      continue;
    break;
  }
LABEL_38:
  v15 = v102;
LABEL_39:

  if (_IMWillLog())
  {
    v53 = CFSTR("NO");
    if (a6)
      v53 = CFSTR("YES");
    v97 = v33;
    v98 = v39;
    v99 = v14;
    v100 = v53;
    _IMAlwaysLog();
  }
  objc_msgSend_registration(MEMORY[0x1E0D36AA8], v50, v51, v52, v97, v98, v99, v100);
  v54 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    v96 = CFSTR("NO");
    *(_DWORD *)buf = 138413058;
    v120 = v33;
    v121 = 2112;
    if (a6)
      v96 = CFSTR("YES");
    v122 = v39;
    v123 = 2112;
    v124 = v14;
    v125 = 2112;
    v126 = v96;
    _os_log_debug_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEBUG, "CallerID - no fromID - choosing %@ from aliases %@ (originally %@). Prefer phone numbers %@", buf, 0x2Au);
  }

  if (v13)
  {
LABEL_45:
    if ((a5 & 1) == 0)
    {
      objc_msgSend__stripFZIDPrefix(v13, v34, v35, v36);
      v55 = objc_claimAutoreleasedReturnValue();

      v33 = (id)v55;
      goto LABEL_48;
    }
  }
LABEL_47:
  if (v13)
  {
LABEL_48:
    if (objc_msgSend__appearsToBePseudonymID(v13, v34, v35, v36))
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v103 = v15;
      v56 = v15;
      v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v57, (uint64_t)&v109, v58, v118, 16);
      if (v59)
      {
        v63 = v59;
        v64 = *(_QWORD *)v110;
        v101 = v14;
        while (2)
        {
          for (j = 0; j != v63; ++j)
          {
            if (*(_QWORD *)v110 != v64)
              objc_enumerationMutation(v56);
            objc_msgSend_URI(*(void **)(*((_QWORD *)&v109 + 1) + 8 * j), v60, v61, v62);
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_prefixedURI(v66, v67, v68, v69);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v70, v71, (uint64_t)v13, v72);

            if ((isEqualToString & 1) != 0)
            {
              v38 = v13;

              v14 = v101;
              v15 = v103;
              goto LABEL_75;
            }
          }
          v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v60, (uint64_t)&v109, v62, v118, 16);
          v14 = v101;
          if (v63)
            continue;
          break;
        }
      }

      v38 = 0;
      v15 = v103;
      goto LABEL_75;
    }
  }
  v74 = v15;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v75 = v14;
  v76 = v14;
  v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v77, (uint64_t)&v105, v78, v117, 16);
  if (v79)
  {
    v82 = v79;
    v83 = *(_QWORD *)v106;
    while (2)
    {
      for (k = 0; k != v82; ++k)
      {
        if (*(_QWORD *)v106 != v83)
          objc_enumerationMutation(v76);
        if (objc_msgSend_isEqualToIgnoringCase_(v33, v80, *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * k), v81))
        {
          v33 = v33;

          v38 = v33;
          v14 = v75;
          v15 = v74;
          goto LABEL_75;
        }
      }
      v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v80, (uint64_t)&v105, v81, v117, 16);
      if (v82)
        continue;
      break;
    }
  }

  if (!objc_msgSend_length(v37, v85, v86, v87))
  {
    objc_msgSend___imFirstObject(v76, v88, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_isEqualToIgnoringCase_(v91, v92, (uint64_t)CFSTR("____--SENTINEL--SELF--ALIAS--V0--____"), v93))
    {

      v37 = 0;
    }
    else
    {
      v37 = v91;
    }
  }
  v15 = v74;
  objc_msgSend_warning(MEMORY[0x1E0D36AA8], v88, v89, v90);
  v94 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    v120 = v13;
    v121 = 2112;
    v122 = v76;
    v123 = 2112;
    v124 = v37;
    _os_log_error_impl(&dword_19B949000, v94, OS_LOG_TYPE_ERROR, "Unable to find fromID %@ in set of valid aliases %@   (falling back to: %@)", buf, 0x20u);
  }

  v37 = v37;
  v38 = v37;
  v14 = v75;
LABEL_75:

  v20 = v104;
LABEL_76:

  return v38;
}

void sub_19B971C58(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  void *v6;

  v1 = objc_alloc(*(Class *)(a1 + 32));
  v5 = objc_msgSend__init(v1, v2, v3, v4);
  v6 = (void *)qword_1ECDD4930;
  qword_1ECDD4930 = v5;

}

void sub_19B971C80()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Registration", "CourierServerBag");
  v1 = (void *)qword_1ECDD48A0;
  qword_1ECDD48A0 = (uint64_t)v0;

}

void sub_19B971CB0()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  IDSServerBag *v6;
  const char *v7;
  double v8;
  uint64_t v9;
  void *v10;
  dispatch_queue_t v11;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_get_global_queue(21, 0);
  v1 = objc_claimAutoreleasedReturnValue();
  v11 = dispatch_queue_create_with_target_V2("com.apple.ids.serverbag.courier", v0, v1);

  objc_msgSend_courierConfig(IDSServerBagConfig, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = [IDSServerBag alloc];
  v9 = objc_msgSend_initWithConfig_queue_(v6, v7, (uint64_t)v5, v8, v11);
  v10 = (void *)qword_1ECDD4898;
  qword_1ECDD4898 = v9;

}

void sub_19B971D5C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Registration", "IDSServerBag");
  v1 = (void *)qword_1ECDD48B8;
  qword_1ECDD48B8 = (uint64_t)v0;

}

void sub_19B971D8C()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  IDSServerBag *v6;
  const char *v7;
  double v8;
  uint64_t v9;
  void *v10;
  dispatch_queue_t v11;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_get_global_queue(21, 0);
  v1 = objc_claimAutoreleasedReturnValue();
  v11 = dispatch_queue_create_with_target_V2("com.apple.ids.serverbag.ids", v0, v1);

  objc_msgSend_IDSConfig(IDSServerBagConfig, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = [IDSServerBag alloc];
  v9 = objc_msgSend_initWithConfig_queue_(v6, v7, (uint64_t)v5, v8, v11);
  v10 = (void *)qword_1ECDD48C0;
  qword_1ECDD48C0 = v9;

}

uint64_t IDSDebuggingRegistrationDebuggingEnabled(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Registration Debugging Enabled !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

BOOL sub_19B971FD4(void *a1, void *a2, void *a3, __SecTrust *a4, int a5, _QWORD *a6)
{
  const __CFData *v11;
  const char *v12;
  uint64_t v13;
  const __CFData *v14;
  double v15;
  SecKeyRef v16;
  const char *v17;
  uint64_t v18;
  double v19;
  SecKeyRef v20;
  const __CFString **v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const __CFString *v31;
  int v32;
  _BOOL8 v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  uint64_t v42;
  __CFString *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  uint64_t v52;
  const __CFData *v53;
  CFErrorRef error;
  uint8_t buf[4];
  uint64_t v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  const __CFString *v60;
  __int16 v61;
  CFErrorRef v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v14 = a3;
  if (!a1)
    goto LABEL_20;
  if (!v11 || !a4)
  {
    objc_msgSend_config(a1, v12, v13, v15);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v22, v23, v24, v25);
    v26 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_19BAFA97C((uint64_t)a1, v26);
    goto LABEL_19;
  }
  v16 = SecTrustCopyKey(a4);
  if (!v16)
  {
    objc_msgSend_config(a1, v17, v18, v19);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v27, v28, v29, v30);
    v26 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      sub_19BAFA84C((uint64_t)a1, v26);
    goto LABEL_19;
  }
  v20 = v16;
  if (a5 == 1)
  {
    v21 = (const __CFString **)MEMORY[0x1E0CD6E98];
    goto LABEL_13;
  }
  if (a5)
  {
    CFRelease(v16);
    objc_msgSend_config(a1, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v47, v48, v49, v50);
    v26 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      sub_19BAFA8CC((uint64_t)a1, a5, v26);
LABEL_19:

LABEL_20:
    v33 = 0;
    goto LABEL_28;
  }
  v21 = (const __CFString **)MEMORY[0x1E0CD6E88];
LABEL_13:
  v31 = *v21;
  v53 = v14;
  error = 0;
  v32 = SecKeyVerifySignature(v16, v31, v14, v11, &error);
  v33 = v32 != 0;
  objc_msgSend_config(a1, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_logCategory(v37, v38, v39, v40);
  v41 = objc_claimAutoreleasedReturnValue();

  if (v32)
  {
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      v42 = objc_opt_class();
      _IDSServerBagHashAlgorithmString(a5);
      v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v56 = v42;
      v57 = 2048;
      v58 = a1;
      v59 = 2112;
      v60 = v43;
      _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_INFO, "<%@:%p> Server bag signature verification succeeded {algorithm: %@}", buf, 0x20u);

    }
    v14 = v53;
  }
  else
  {
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v52 = objc_opt_class();
      *(_DWORD *)buf = 138413058;
      v56 = v52;
      v57 = 2048;
      v58 = a1;
      v59 = 2112;
      v60 = v31;
      v61 = 2112;
      v62 = error;
      _os_log_error_impl(&dword_19B949000, v41, OS_LOG_TYPE_ERROR, "<%@:%p> Server bag signature failed to verify {secAlgorithm: %@, error: %@}", buf, 0x2Au);
    }

    v14 = v53;
    if (a6)
      *a6 = objc_retainAutorelease(error);
  }
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
  CFRelease(v20);
LABEL_28:

  return v33;
}

id sub_19B973434(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  const char *v9;
  double v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  const char *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  id v23;
  id v24;
  id v25;
  const char *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  double v43;
  const char *v44;
  id v45;
  double v46;
  const char *v47;
  double v48;
  const char *v49;
  double v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  uint64_t v55;
  void *v56;
  id v57;
  const char *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  const char *v62;
  double v63;
  void *v64;
  id v65;
  const char *v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  const char *v70;
  double v71;
  void *v72;
  id v73;
  const char *v74;
  double v75;
  uint64_t v76;
  const char *v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t k;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  double v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  double v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  double v94;
  void *v95;
  const char *v96;
  double v97;
  id v98;
  const char *v99;
  double v100;
  void *v101;
  const char *v102;
  double v103;
  id v104;
  const char *v105;
  double v106;
  const char *v107;
  double v108;
  uint64_t m;
  uint64_t v110;
  void *v111;
  id v112;
  const char *v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  const char *v117;
  double v118;
  void *v119;
  id v120;
  const char *v121;
  double v122;
  uint64_t v123;
  const char *v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t n;
  const char *v129;
  void *v130;
  double v131;
  const char *v132;
  double v133;
  void *v134;
  id v135;
  const char *v136;
  double v137;
  void *v138;
  const char *v139;
  double v140;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  id obj;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _BYTE v177[128];
  _BYTE v178[128];
  _BYTE v179[128];
  _BYTE v180[128];
  _BYTE v181[128];
  _BYTE v182[128];
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v8 = objc_msgSend_count(v3, v5, v6, v7);
  v152 = (id)objc_msgSend_initWithCapacity_(v4, v9, v8, v10);
  v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v173 = 0u;
  v174 = 0u;
  v175 = 0u;
  v176 = 0u;
  v144 = v3;
  objc_msgSend_allValues(v3, v12, v13, 0.0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v173, v16, v182, 16);
  if (v17)
  {
    v20 = v17;
    v21 = *(_QWORD *)v174;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v174 != v21)
          objc_enumerationMutation(v14);
        objc_msgSend_addObjectsFromArray_(v11, v18, *(_QWORD *)(*((_QWORD *)&v173 + 1) + 8 * i), v19);
      }
      v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v173, v19, v182, 16);
    }
    while (v20);
  }

  v23 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v24 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  v172 = 0u;
  v25 = v11;
  v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v169, v27, v181, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v170;
    do
    {
      for (j = 0; j != v29; ++j)
      {
        if (*(_QWORD *)v170 != v30)
          objc_enumerationMutation(v25);
        v32 = *(void **)(*((_QWORD *)&v169 + 1) + 8 * j);
        v33 = v24;
        objc_msgSend_URI(v32, v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_prefixedURI(v37, v38, v39, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_objectForKey_(v33, v42, (uint64_t)v41, v43);
        v45 = (id)objc_claimAutoreleasedReturnValue();
        if (!v45)
        {
          v45 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          objc_msgSend_setObject_forKey_(v33, v47, (uint64_t)v45, v48, v41);
        }
        objc_msgSend_addObject_(v45, v44, (uint64_t)v32, v46);

      }
      v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v49, (uint64_t)&v169, v50, v181, 16);
    }
    while (v29);
  }
  v142 = v24;
  v143 = v25;

  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  obj = v23;
  v146 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v165, v52, v180, 16);
  if (v146)
  {
    v145 = *(_QWORD *)v166;
    do
    {
      v55 = 0;
      do
      {
        if (*(_QWORD *)v166 != v145)
          objc_enumerationMutation(obj);
        v148 = *(_QWORD *)(*((_QWORD *)&v165 + 1) + 8 * v55);
        v150 = v55;
        objc_msgSend_objectForKey_(obj, v53, v148, v54);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = objc_alloc(MEMORY[0x1E0C99DE8]);
        v61 = objc_msgSend_count(v56, v58, v59, v60);
        v64 = (void *)objc_msgSend_initWithCapacity_(v57, v62, v61, v63);
        v65 = objc_alloc(MEMORY[0x1E0C99E20]);
        v69 = objc_msgSend_count(v56, v66, v67, v68);
        v72 = (void *)objc_msgSend_initWithCapacity_(v65, v70, v69, v71);
        v161 = 0u;
        v162 = 0u;
        v163 = 0u;
        v164 = 0u;
        v73 = v56;
        v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v74, (uint64_t)&v161, v75, v179, 16);
        if (v76)
        {
          v79 = v76;
          v80 = *(_QWORD *)v162;
          do
          {
            for (k = 0; k != v79; ++k)
            {
              if (*(_QWORD *)v162 != v80)
                objc_enumerationMutation(v73);
              v82 = *(void **)(*((_QWORD *)&v161 + 1) + 8 * k);
              objc_msgSend_participantDeviceFromEndpoint_(MEMORY[0x1E0D1F468], v77, (uint64_t)v82, v78);
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              if (v85)
                objc_msgSend_addObject_(v64, v83, (uint64_t)v85, v86);
              objc_msgSend_URI(v82, v83, v84, v86);
              v87 = (void *)objc_claimAutoreleasedReturnValue();

              if (v87)
              {
                objc_msgSend_URI(v82, v88, v89, v90);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_prefixedURI(v91, v92, v93, v94);
                v95 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObject_(v72, v96, (uint64_t)v95, v97);

              }
            }
            v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v77, (uint64_t)&v161, v78, v179, 16);
          }
          while (v79);
        }

        v98 = objc_alloc(MEMORY[0x1E0D1F460]);
        v101 = (void *)objc_msgSend_initWithAccountPublicKey_aliases_devices_(v98, v99, v148, v100, v72, v64);
        objc_msgSend_addObject_(v152, v102, (uint64_t)v101, v103);

        v55 = v150 + 1;
      }
      while (v150 + 1 != v146);
      v146 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v53, (uint64_t)&v165, v54, v180, 16);
    }
    while (v146);
  }

  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v104 = v142;
  v151 = objc_msgSend_countByEnumeratingWithState_objects_count_(v104, v105, (uint64_t)&v157, v106, v178, 16);
  if (v151)
  {
    v149 = *(_QWORD *)v158;
    do
    {
      for (m = 0; m != v151; ++m)
      {
        if (*(_QWORD *)v158 != v149)
          objc_enumerationMutation(v104);
        v110 = *(_QWORD *)(*((_QWORD *)&v157 + 1) + 8 * m);
        objc_msgSend_objectForKey_(v104, v107, v110, v108);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = objc_alloc(MEMORY[0x1E0C99DE8]);
        v116 = objc_msgSend_count(v111, v113, v114, v115);
        v119 = (void *)objc_msgSend_initWithCapacity_(v112, v117, v116, v118);
        v153 = 0u;
        v154 = 0u;
        v155 = 0u;
        v156 = 0u;
        v120 = v111;
        v123 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v121, (uint64_t)&v153, v122, v177, 16);
        if (v123)
        {
          v126 = v123;
          v127 = *(_QWORD *)v154;
          do
          {
            for (n = 0; n != v126; ++n)
            {
              if (*(_QWORD *)v154 != v127)
                objc_enumerationMutation(v120);
              objc_msgSend_participantDeviceFromEndpoint_(MEMORY[0x1E0D1F468], v124, *(_QWORD *)(*((_QWORD *)&v153 + 1) + 8 * n), v125);
              v130 = (void *)objc_claimAutoreleasedReturnValue();
              if (v130)
                objc_msgSend_addObject_(v119, v129, (uint64_t)v130, v131);

            }
            v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v124, (uint64_t)&v153, v125, v177, 16);
          }
          while (v126);
        }

        objc_msgSend_setWithObject_(MEMORY[0x1E0C99E60], v132, v110, v133);
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        v135 = objc_alloc(MEMORY[0x1E0D1F460]);
        v138 = (void *)objc_msgSend_initWithAccountPublicKey_aliases_devices_(v135, v136, 0, v137, v134, v119);
        objc_msgSend_addObject_(v152, v139, (uint64_t)v138, v140);

      }
      v151 = objc_msgSend_countByEnumeratingWithState_objects_count_(v104, v107, (uint64_t)&v157, v108, v178, 16);
    }
    while (v151);
  }

  return v152;
}

id sub_19B973AAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  const char *v21;
  id v22;
  double v23;
  const char *v24;
  double v25;
  double v26;
  id obj;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v3;
  v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v35, v6, v40, 16);
  if (v30)
  {
    v29 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v36 != v29)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        objc_msgSend_aliases(v10, v7, v8, 0.0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v31, v13, v39, 16);
        if (v14)
        {
          v17 = v14;
          v18 = *(_QWORD *)v32;
          do
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v32 != v18)
                objc_enumerationMutation(v11);
              v20 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * j);
              objc_msgSend_objectForKeyedSubscript_(v4, v15, v20, v16);
              v22 = (id)objc_claimAutoreleasedReturnValue();
              if (!v22)
              {
                v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                objc_msgSend_setObject_forKeyedSubscript_(v4, v24, (uint64_t)v22, v25, v20);
              }
              objc_msgSend_addObject_(v22, v21, (uint64_t)v10, v23);

            }
            v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v31, v16, v39, 16);
          }
          while (v17);
        }

      }
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v35, v26, v40, 16);
    }
    while (v30);
  }

  return v4;
}

id sub_19B973CA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  double v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  const char *v16;
  double v17;
  void *v18;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v20 = 0;
  objc_msgSend_cypherWithEndpoint_error_(IDSLegacyDeviceMessageProtectionCypher, v4, (uint64_t)v3, v5, &v20);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v20;
  if (v6)
  {
    v11 = objc_alloc(MEMORY[0x1E0D1F468]);
    objc_msgSend_pushToken(v3, v12, v13, v14);
    v15 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend_initWithDevicePublicKey_cypher_identifier_(v11, v16, 0, v17, v6, v15);
  }
  else
  {
    objc_msgSend_utilities(MEMORY[0x1E0D1F458], v7, v8, v10);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v22 = v3;
      v23 = 2114;
      v24 = v9;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "participantDeviceFromEndpoint - failed to create cypher - Fail {endpoint: %{public}@, error: %{public}@}", buf, 0x16u);
    }
    v18 = 0;
  }

  return v18;
}

id sub_19B973E28(double a1, uint64_t a2, void *a3)
{
  void *v3;
  IDSURI *v4;
  const char *v5;
  double v6;
  void *v7;

  objc_msgSend__stripPotentialTokenURIWithToken_(a3, (const char *)a3, 0, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = [IDSURI alloc];
  v7 = (void *)objc_msgSend_initWithPrefixedURI_(v4, v5, (uint64_t)v3, v6);

  return v7;
}

uint64_t sub_19B973EB4(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_prefixedURI(a3, (const char *)a3, a4, a1);
}

void IDSLoggableDescriptionSetForceRestricted()
{
  atomic_store(1u, byte_1EE40AF88);
}

void sub_19B973ED0()
{
  id v0;
  void *v1;
  const char *v2;
  double v3;
  uint64_t v4;
  const char *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  int v15;
  void *v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  _IDSServiceDictionaries();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v24, v3, v28, 16);
  if (v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v1);
        v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend__numberForKey_(v10, v5, (uint64_t)CFSTR("RestrictedLogging"), v6, (_QWORD)v24);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend_BOOLValue(v11, v12, v13, v14);

        if (v15)
        {
          objc_msgSend__stringForKey_(v10, v5, (uint64_t)CFSTR("Identifier"), v6);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v0, v17, (uint64_t)v16, v18);

        }
      }
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v5, (uint64_t)&v24, v6, v28, 16);
    }
    while (v7);
  }

  v22 = objc_msgSend_copy(v0, v19, v20, v21);
  v23 = (void *)qword_1EE40AF90;
  qword_1EE40AF90 = v22;

}

void sub_19B974050()
{
  id v0;
  const char *v1;
  double v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;

  v0 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v3 = objc_msgSend_initWithLength_(v0, v1, 32, v2);
  v4 = (void *)qword_1EE40AD28;
  qword_1EE40AD28 = v3;

  v8 = (void *)objc_msgSend_mutableBytes((void *)qword_1EE40AD28, v5, v6, v7);
  arc4random_buf(v8, 0x20uLL);
}

id IDSSaltedHash(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  double v11;
  const char *v12;
  double v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  double v18;
  const void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  CC_LONG v23;
  id v24;
  const char *v25;
  uint64_t v26;
  double v27;
  unsigned __int8 *v28;
  const char *v29;
  double v30;
  const char *v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  id v37;

  v3 = (objc_class *)MEMORY[0x1E0C99DF0];
  v4 = a2;
  v5 = a1;
  v6 = [v3 alloc];
  v9 = (void *)objc_msgSend_initWithData_(v6, v7, (uint64_t)v4, v8);

  objc_msgSend_appendData_(v9, v10, (uint64_t)v5, v11);
  objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v12, 32, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_retainAutorelease(v9);
  v19 = (const void *)objc_msgSend_bytes(v15, v16, v17, v18);
  v23 = objc_msgSend_length(v15, v20, v21, v22);
  v24 = objc_retainAutorelease(v14);
  v28 = (unsigned __int8 *)objc_msgSend_mutableBytes(v24, v25, v26, v27);
  CC_SHA256(v19, v23, v28);
  objc_msgSend_setLength_(v24, v29, 12, v30);
  objc_msgSend_base64EncodedStringWithOptions_(v24, v31, 0, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0;
  if (objc_msgSend_length(v33, v34, v35, v36) == 16)
    v37 = v33;

  return v37;
}

id sub_19B9741A0(uint64_t a1, void *a2)
{
  return IDSLoggableDescriptionForHandleOnService(a2, *(void **)(a1 + 32));
}

id IDSLoggableDescriptionForHandleOnService(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  void *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  double v20;
  const char *v21;
  void *v22;
  double v23;
  id v24;
  id v26;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if ((IDSShouldUseRestrictedLoggingForService(v4) & 1) != 0)
    {
      v26 = 0;
      objc_msgSend__stripPotentialTokenURIWithToken_(v3, v5, (uint64_t)&v26, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v26;
      objc_msgSend__stripFZIDPrefix(v7, v9, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      IDSLoggableDescriptionSalt();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataUsingEncoding_allowLossyConversion_(v12, v14, 4, v15, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      IDSSaltedHash(v13, v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        if (v8 && objc_msgSend_length(v8, v17, v18, v20))
        {
          IDSSaltedHash(v13, v8);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (v22)
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("t:%@/u:%@"), v23, v22, v19);
          else
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("t:TOKEN/u:%@"), v23, v19);
          v24 = (id)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)CFSTR("u:%@"), v20, v19);
          v24 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        v24 = 0;
      }

    }
    else
    {
      v24 = v3;
    }
  }
  else
  {
    v24 = 0;
  }

  return v24;
}

id IDSLoggableDescriptionForTokenOnService(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  void *v10;
  double v11;
  void *v12;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if ((IDSShouldUseRestrictedLoggingForService(v4) & 1) != 0)
    {
      IDSLoggableDescriptionSalt();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      IDSSaltedHash(v8, v3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("t:%@"), v11, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v12 = 0;
      }

    }
    else
    {
      objc_msgSend_debugDescription(v3, v5, v6, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id IDSLoggableDescriptionForObjectOnService(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  double v15;
  void *v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  double v26;
  uint64_t v28;
  uint64_t v29;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if ((IDSShouldUseRestrictedLoggingForService(v4) & 1) != 0)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v9 = (void *)MEMORY[0x1E0CB3940];
        v10 = objc_opt_class();
        v28 = objc_msgSend_count(v3, v11, v12, v13);
        objc_msgSend_stringWithFormat_(v9, v14, (uint64_t)CFSTR("<redacted %@ count:%llu>"), v15, v10, v28);
      }
      else
      {
        v18 = objc_opt_respondsToSelector();
        v19 = (void *)MEMORY[0x1E0CB3940];
        v20 = objc_opt_class();
        v24 = v20;
        if ((v18 & 1) != 0)
        {
          v29 = objc_msgSend_length(v3, v21, v22, v23);
          objc_msgSend_stringWithFormat_(v19, v25, (uint64_t)CFSTR("<redacted %@ length:%llu>"), v26, v24, v29);
        }
        else
        {
          objc_msgSend_stringWithFormat_(v19, v21, (uint64_t)CFSTR("<redacted %@>"), v23, v20);
        }
      }
      v17 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend_description(v3, v6, v7, v8);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    v16 = (void *)v17;
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

Class sub_19B974558()
{
  Class result;

  result = NSClassFromString(CFSTR("IDSDaemonController"));
  qword_1EE40AFB8 = (uint64_t)result;
  return result;
}

id sub_19B97457C(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;

  objc_msgSend_response(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__cacheTime(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id sub_19B9745B4(void *a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  double v18;
  void *v19;
  const char *v20;
  double v21;
  uint64_t v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  const char *v30;
  double v31;
  void *v32;
  int v33;
  const char *v34;
  uint64_t v35;
  void *v36;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_allHeaderFields(a1, v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v5, v6, (uint64_t)CFSTR("Cache-Control"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((int)objc_msgSend_intValue(v8, v9, v10, v11) < 1)
    {
      if (objc_msgSend_rangeOfString_(v8, v12, (uint64_t)CFSTR("max-age="), v14) == 0x7FFFFFFFFFFFFFFFLL)
      {
        v19 = 0;
      }
      else
      {
        v22 = objc_msgSend_rangeOfString_(v8, v20, (uint64_t)CFSTR("max-age="), v21);
        objc_msgSend_substringFromIndex_(v8, v23, (uint64_t)&v23[v22], v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend_intValue(v25, v26, v27, v28);
        if ((int)v29 < 1)
        {
          v19 = 0;
        }
        else
        {
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v30, v29, v31);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
        }

      }
    }
    else
    {
      v15 = (void *)MEMORY[0x1E0CB37E8];
      v16 = objc_msgSend_intValue(v8, v12, v13, v14);
      objc_msgSend_numberWithInt_(v15, v17, v16, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v19 = 0;
  }
  v32 = (void *)MEMORY[0x1E0CB37E8];
  v33 = objc_msgSend_intValue(v19, v2, v3, v4);
  objc_msgSend_numberWithDouble_(v32, v34, v35, fmax((double)v33, 3600.0));
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  return v36;
}

void sub_19B9747EC(uint64_t a1)
{
  sub_19B9747F8(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

void sub_19B9747F8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  double v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  id v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  void *v39;
  const char *v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  void *v50;
  const char *v51;
  double v52;
  uint64_t v53;
  const char *v54;
  double v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  void *v65;
  const char *v66;
  double v67;
  const char *v68;
  uint64_t v69;
  double v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  double v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  id v85;
  const char *v86;
  double v87;
  const char *v88;
  uint64_t v89;
  double v90;
  int v91;
  const char *v92;
  uint64_t v93;
  double v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  double v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD v109[5];
  id v110;
  id v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint8_t buf[4];
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  int v121;
  __int16 v122;
  void *v123;
  _BYTE v124[128];
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (!a1)
    goto LABEL_29;
  objc_msgSend_queue((void *)a1, v3, v4, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  objc_msgSend_config((void *)a1, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_bypassProcessChecks(v11, v12, v13, v14) & 1) != 0 || (_IDSRunningInDaemon() & 1) != 0)
  {

  }
  else
  {
    if (qword_1ECDD48D8 != -1)
      dispatch_once(&qword_1ECDD48D8, &unk_1E3C1B610);
    v91 = byte_1ECDD48B0;

    if (!v91)
    {
      objc_msgSend_config((void *)a1, v92, v93, v94);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_logCategory(v95, v96, v97, v98);
      v99 = objc_claimAutoreleasedReturnValue();

      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        v100 = objc_opt_class();
        v101 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 138412802;
        v117 = v100;
        v118 = 2048;
        v119 = a1;
        v120 = 1024;
        v121 = v101;
        _os_log_impl(&dword_19B949000, v99, OS_LOG_TYPE_DEFAULT, "<%@:%p> not allowed to load, returning {_loaderState: %d}", buf, 0x1Cu);
      }

      goto LABEL_29;
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend_config((void *)a1, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v18, v19, v20, v21);
    v22 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = objc_opt_class();
      v24 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138412802;
      v117 = v23;
      v118 = 2048;
      v119 = a1;
      v120 = 1024;
      v121 = v24;
      v25 = "<%@:%p> not idle, returning {_loaderState: %d}";
LABEL_27:
      _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, v25, buf, 0x1Cu);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  v26 = _Block_copy(v5);
  v27 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v26;

  if ((sub_19B974DA0((const os_unfair_lock *)a1) & 1) == 0)
  {
    *(_QWORD *)(a1 + 64) = 2;
    objc_msgSend_config((void *)a1, v28, v29, v30);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v102, v103, v104, v105);
    v22 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v106 = objc_opt_class();
      v107 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138412802;
      v117 = v106;
      v118 = 2048;
      v119 = a1;
      v120 = 1024;
      v121 = v107;
      v25 = "<%@:%p> server not available, returning {_loaderState: %d}";
      goto LABEL_27;
    }
LABEL_28:

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    goto LABEL_29;
  }
  v31 = objc_alloc(MEMORY[0x1E0CB37A8]);
  objc_msgSend_config((void *)a1, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_url(v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = (void *)objc_msgSend_initWithURL_cachePolicy_timeoutInterval_(v31, v40, (uint64_t)v39, 60.0, 1);

  v42 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A10], v43, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_userAgentString(v46, v47, v48, v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v42, v51, (uint64_t)CFSTR("%@ %@"), v52, CFSTR("server-bag"), v50);
  v53 = objc_claimAutoreleasedReturnValue();

  v108 = (void *)v53;
  objc_msgSend_setValue_forHTTPHeaderField_(v41, v54, v53, v55, CFSTR("user-agent"));
  IDSAdditionalRequestHeaders();
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v57, (uint64_t)&v112, 0.0, v124, 16);
  if (v58)
  {
    v61 = v58;
    v62 = *(_QWORD *)v113;
    do
    {
      for (i = 0; i != v61; ++i)
      {
        if (*(_QWORD *)v113 != v62)
          objc_enumerationMutation(v56);
        v64 = *(_QWORD *)(*((_QWORD *)&v112 + 1) + 8 * i);
        objc_msgSend_objectForKey_(v56, v59, v64, v60);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setValue_forHTTPHeaderField_(v41, v66, (uint64_t)v65, v67, v64);

      }
      v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v59, (uint64_t)&v112, v60, v124, 16);
    }
    while (v61);
  }
  objc_msgSend_setHTTPShouldHandleCookies_(v41, v59, 0, v60);
  objc_msgSend_date(MEMORY[0x1E0C99D68], v68, v69, v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 64) = 1;
  objc_msgSend_config((void *)a1, v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_logCategory(v75, v76, v77, v78);
  v79 = objc_claimAutoreleasedReturnValue();

  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    v80 = objc_opt_class();
    v81 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138413058;
    v117 = v80;
    v118 = 2048;
    v119 = a1;
    v120 = 1024;
    v121 = v81;
    v122 = 2112;
    v123 = v41;
    _os_log_impl(&dword_19B949000, v79, OS_LOG_TYPE_DEFAULT, "<%@:%p> starting load {_loaderState: %d, urlRequest: %@}", buf, 0x26u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v82 = objc_claimAutoreleasedReturnValue();
  v83 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v82;

  v84 = *(void **)(a1 + 56);
  v109[0] = MEMORY[0x1E0C809B0];
  v109[1] = 3221225472;
  v109[2] = sub_19B974E08;
  v109[3] = &unk_1E3C1C428;
  v109[4] = a1;
  v110 = v71;
  v111 = v5;
  v85 = v71;
  objc_msgSend_performRequest_completionBlock_(v84, v86, (uint64_t)v41, v87, v109);
  objc_msgSend_finishTasksAndInvalidate(*(void **)(a1 + 56), v88, v89, v90);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));

LABEL_29:
}

const os_unfair_lock *sub_19B974DA0(const os_unfair_lock *result)
{
  os_unfair_lock *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD);
  uint64_t v7;
  void *v8;

  if (result)
  {
    v1 = (os_unfair_lock *)result;
    os_unfair_lock_assert_owner(result + 2);
    v5 = *(void **)&v1[12]._os_unfair_lock_opaque;
    if (!v5)
    {
      objc_msgSend_connectionMonitorBlock(v1, v2, v3, v4);
      v6 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, os_unfair_lock *))v6)[2](v6, v1);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = *(void **)&v1[12]._os_unfair_lock_opaque;
      *(_QWORD *)&v1[12]._os_unfair_lock_opaque = v7;

      v5 = *(void **)&v1[12]._os_unfair_lock_opaque;
    }
    return (const os_unfair_lock *)objc_msgSend_isImmediatelyReachable(v5, v2, v3, v4);
  }
  return result;
}

void sub_19B974E08(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  id v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  uint64_t v40;
  double v41;
  id v42;
  id v43;
  int v44;
  const char *v45;
  double v46;
  void *v47;
  const char *v48;
  double v49;
  void *v50;
  id v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  const char *v62;
  void *v63;
  const char *v64;
  double v65;
  void *v66;
  const char *v67;
  double v68;
  void *v69;
  IDSServerBagRawContents *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *Date_timeToLive_serverSignature_serverCerts_signedBag;
  double v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  NSObject *v80;
  uint64_t v81;
  const char *v82;
  double v83;
  const char *v84;
  double v85;
  const char *v86;
  double v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  double v91;
  const char *v92;
  uint64_t v93;
  double v94;
  int v95;
  uint64_t v96;
  void *v97;
  int v98;
  void *v99;
  id v100;
  int v101;
  id v102;
  id v103;
  uint8_t buf[4];
  uint64_t v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  _BYTE v109[20];
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a4;
  v12 = a5;
  if (v12)
  {
    objc_msgSend_config(*(void **)(a1 + 32), v10, v11, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v14, v15, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = objc_opt_class();
      v20 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138413058;
      v105 = v19;
      v106 = 2048;
      v107 = v20;
      v108 = 1024;
      *(_DWORD *)v109 = objc_msgSend_loaderState(v20, v21, v22, v23);
      *(_WORD *)&v109[4] = 2112;
      *(_QWORD *)&v109[6] = v12;
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "<%@:%p> finished loading with error {_loaderState: %d, error: %@}", buf, 0x26u);
    }

    v24 = *(_QWORD *)(a1 + 48);
    IDSServerBagContentErrorWithUnderlyingError(100, v12);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v24 + 16))(v24, 0, v25);
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend_allHeaderFields(v8, v26, v27, v28);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v25 = 0;
    }
    objc_msgSend_config(*(void **)(a1 + 32), v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v29, v30, v31, v32);
    v33 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = objc_opt_class();
      v35 = *(void **)(a1 + 32);
      v101 = objc_msgSend_loaderState(v35, v36, v37, v38);
      v42 = v8;
      v43 = v9;
      v44 = objc_msgSend_length(v9, v39, v40, v41);
      objc_msgSend_descriptionForDictionary_options_(IDSLogFormatter, v45, (uint64_t)v25, v46, 0);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413314;
      v105 = v34;
      v106 = 2048;
      v107 = v35;
      v108 = 1024;
      *(_DWORD *)v109 = v101;
      *(_WORD *)&v109[4] = 1024;
      *(_DWORD *)&v109[6] = v44;
      v9 = v43;
      v8 = v42;
      *(_WORD *)&v109[10] = 2112;
      *(_QWORD *)&v109[12] = v47;
      _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "<%@:%p> finished loading {_loaderState: %d, resultDataLen: %d, headerFields: %@}", buf, 0x2Cu);

    }
    v103 = 0;
    objc_msgSend_propertyListWithData_options_format_error_(MEMORY[0x1E0CB38B0], v48, (uint64_t)v9, v49, 0, 0, &v103);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v103;
    v55 = v51;
    if (v50)
    {
      v100 = v51;
      v102 = v9;
      objc_msgSend__cacheTime(v8, v52, v53, v54);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v56, v57, v58, v59);
      v61 = v60;

      if (v61 > 86400.0)
        v61 = 86400.0;
      objc_msgSend__arrayForKey_(v50, v62, (uint64_t)CFSTR("certs"), 86400.0);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__dataForKey_(v50, v64, (uint64_t)CFSTR("signature"), v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__dataForKey_(v50, v67, (uint64_t)CFSTR("bag"), v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = [IDSServerBagRawContents alloc];
      Date_timeToLive_serverSignature_serverCerts_signedBag = (void *)objc_msgSend_initWithLoadDate_timeToLive_serverSignature_serverCerts_signedBag_(v70, v71, *(_QWORD *)(a1 + 40), v61, v66, v63, v69);
      if (!Date_timeToLive_serverSignature_serverCerts_signedBag)
      {
        v99 = v66;
        objc_msgSend_config(*(void **)(a1 + 32), v72, v73, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logCategory(v76, v77, v78, v79);
        v80 = objc_claimAutoreleasedReturnValue();

        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          v88 = objc_opt_class();
          v97 = *(void **)(a1 + 32);
          v98 = objc_msgSend_count(v63, v89, v90, v91);
          v95 = objc_msgSend_length(v69, v92, v93, v94);
          v96 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138413826;
          v105 = v88;
          v106 = 2048;
          v107 = v97;
          v108 = 2048;
          *(double *)v109 = v61;
          *(_WORD *)&v109[8] = 2112;
          *(_QWORD *)&v109[10] = v99;
          *(_WORD *)&v109[18] = 1024;
          v110 = v98;
          v111 = 1024;
          v112 = v95;
          v113 = 2112;
          v114 = v96;
          _os_log_error_impl(&dword_19B949000, v80, OS_LOG_TYPE_ERROR, "<%@:%p> request succeeded but could not parse raw contents {serverGivenInterval: %f, signature: %@, certificatesCount: %d, signedBagLen: %d, startLoadDate: %@}", buf, 0x40u);
        }

        v66 = v99;
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

      v55 = v100;
      v9 = v102;
    }
    else
    {
      v81 = *(_QWORD *)(a1 + 48);
      IDSServerBagContentErrorWithUnderlyingError(200, v51);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v81 + 16))(v81, 0, v63);
    }

  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend_setLoaderState_(*(void **)(a1 + 32), v82, 0, v83);
  objc_msgSend_setStoredCompletion_(*(void **)(a1 + 32), v84, 0, v85);
  objc_msgSend_setURLRequestSession_(*(void **)(a1 + 32), v86, 0, v87);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));

}

void sub_19B975650(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int v4;
  const char *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  char HasEntitlement;
  char v13;
  NSObject *v14;
  uint64_t v15;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v18;

  qword_1ECDD4900 = objc_msgSend_UTF8String(CFSTR("com.apple.idsremoteurlconnectionagent.embedded.auth"), a3, a4, a1);
  getpid();
  v15 = qword_1ECDD4900;
  v4 = sandbox_check();
  *(_OWORD *)task_info_out = 0u;
  v18 = 0u;
  task_info_outCnt = 8;
  if (task_info(*MEMORY[0x1E0C83DA0], 0xFu, task_info_out, &task_info_outCnt))
  {
    objc_msgSend_serverBag(MEMORY[0x1E0D36AA8], v5, v6, v7, v15);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19BAEDE70(v8);

    HasEntitlement = 0;
  }
  else if ((IMDAuditTokenTaskHasEntitlement() & 1) != 0)
  {
    HasEntitlement = 1;
  }
  else
  {
    HasEntitlement = IMDAuditTokenTaskHasEntitlement();
  }
  if (v4)
    v13 = 0;
  else
    v13 = HasEntitlement;
  byte_1ECDD48B0 = v13;
  objc_msgSend_serverBag(MEMORY[0x1E0D36AA8], v9, v10, v11, v15);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    sub_19BAEDDB4(v4 == 0, HasEntitlement, v14);

}

BOOL IDSQRProtoH3EndToEndChannelRegisterE2EChannelRegisterReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t IDSByteBufferInitForWriteWithAllocatedSpace(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result)
    sub_19BAEDEB0();
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a2 + a3 - 1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t IDSByteBufferInitForWrite(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  uint8_t v5[16];

  if (!a1)
    sub_19BAEDED8();
  v1 = a1;
  v2 = (char *)malloc_type_malloc(0x400uLL, 0xE3DFB912uLL);
  if (v2)
  {
    *(_QWORD *)v1 = v2;
    *(_QWORD *)(v1 + 8) = v2 + 1023;
    *(_QWORD *)(v1 + 16) = v2;
    *(_QWORD *)(v1 + 24) = v2;
    *(_BYTE *)(v1 + 32) = 1;
  }
  else
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "Could not allocate base for ReaderWriter", v5, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSFieldReaderWriter"), CFSTR("IDS"), CFSTR("Could not allocate base for ReaderWriter"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSFieldReaderWriter"), CFSTR("Could not allocate base for ReaderWriter"));
      }
    }
    return 0;
  }
  return v1;
}

uint64_t IDSByteBufferInitForRead(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result)
    sub_19BAEDF00();
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a2 + a3 - 1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

BOOL sub_19B975D58(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    sub_19BAEDF28();
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v3 = v2 + 1;
  v4 = 2 * (v2 + 1);
  if (__CFADD__(v3, v3))
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_19BAEDF50(result, v6, v7, v8, v9, v10, v11, v12);
    return 0;
  }
  v13 = (char *)malloc_type_malloc(2 * (v2 + 1), 0xC70FD46EuLL);
  if (v13)
  {
    v14 = v13;
    memcpy(v13, *(const void **)a1, v3);
    free(*(void **)(a1 + 24));
    v15 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = &v14[v4 - 1];
    *(_QWORD *)(a1 + 16) = &v14[v15];
    *(_QWORD *)(a1 + 24) = v14;
    return 1;
  }
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_19BAEDF84(result, v16, v17, v18, v19, v20, v21, v22);
    return 0;
  }
  return result;
}

BOOL IDSByteBufferWriteField(uint64_t a1, char a2, void *__src, size_t __n)
{
  unsigned int v4;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a1)
    sub_19BAEDFB8();
  v4 = __n;
  v8 = __n;
  v9 = __n + 3;
  while (1)
  {
    v10 = *(_BYTE **)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 8) - (_QWORD)v10 + 1;
    if (v9 <= v11)
    {
      *v10 = a2;
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v12 + 1;
      *(_WORD *)(v12 + 1) = __rev16(v4);
      v13 = (void *)(*(_QWORD *)(a1 + 16) + 2);
      *(_QWORD *)(a1 + 16) = v13;
      memcpy(v13, __src, v8);
      *(_QWORD *)(a1 + 16) += v8;
      return v9 <= v11;
    }
    if (!*(_BYTE *)(a1 + 32))
      break;
    if (!sub_19B975D58(a1))
      return v9 <= v11;
  }
  v14 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
  if (v14)
    sub_19BAEDFE0(v14, v15, v16, v17, v18, v19, v20, v21);
  return v9 <= v11;
}

BOOL IDSByteBufferReadField(uint64_t a1, _BYTE *a2, _QWORD *a3, _WORD *a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_19BAEE014();
  v5 = *(_BYTE **)(a1 + 16);
  if ((unint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v5 - 2) > 0xFFFFFFFFFFFFFFFCLL)
    return 0;
  *a2 = *v5;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8 + 1;
  v9 = bswap32(*(unsigned __int16 *)(v8 + 1)) >> 16;
  *a4 = v9;
  v10 = v8 + 3;
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(_QWORD *)(a1 + 8) - v10 + 1;
  v12 = v11 >= v9;
  if (v11 < v9)
  {
    OSLogHandleForTransportCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *a2;
      v16 = (unsigned __int16)*a4;
      v17 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16) + 1;
      *(_DWORD *)buf = 67109632;
      v20 = v15;
      v21 = 1024;
      v22 = v16;
      v23 = 2048;
      v24 = v17;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "readFieldFromByteBuffer not enough bytes, %u %u %ld", buf, 0x18u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSFieldReaderWriter"), CFSTR("IDS"), CFSTR("readFieldFromByteBuffer not enough bytes, %u %u %ld"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSFieldReaderWriter"), CFSTR("readFieldFromByteBuffer not enough bytes, %u %u %ld"));
      }
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    *a3 = v10;
    v13 = *(_QWORD *)(a1 + 16) + v9;
  }
  *(_QWORD *)(a1 + 16) = v13;
  return v12;
}

double IDSByteBufferRelease(uint64_t a1)
{
  double result;

  if (!a1)
    sub_19BAEE03C();
  if (*(_BYTE *)(a1 + 32))
    free(*(void **)a1);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_19B976168(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

BOOL IsSameIP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 1);
    if (v3 == *(unsigned __int8 *)(a2 + 1))
    {
      if (v3 == 30)
        return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
      else
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL IsSameSA(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 1);
    if (v3 == *(unsigned __int8 *)(a2 + 1))
    {
      if (v3 == 30)
      {
        if (*(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2))
          return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
      }
      else if (*(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2))
      {
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
      }
    }
    return 0;
  }
  return v2;
}

BOOL IsValidSA(_BOOL8 result)
{
  int v1;
  BOOL v2;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30)
    {
      if (*(_WORD *)(result + 2))
      {
        if (*(_QWORD *)(result + 8))
          v2 = 0;
        else
          v2 = *(_QWORD *)(result + 16) == 0;
        return !v2;
      }
    }
    else if (v1 == 2 && *(_WORD *)(result + 2))
    {
      v2 = *(_DWORD *)(result + 4) == 0;
      return !v2;
    }
    return 0;
  }
  return result;
}

BOOL IsLinkLocalSA(_BOOL8 result)
{
  int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30)
    {
      if (*(unsigned __int8 *)(result + 8) == 254)
        return (*(_BYTE *)(result + 9) & 0xC0) == 128;
    }
    else if (v1 == 2)
    {
      return *(__int16 *)(result + 4) == -343;
    }
    return 0;
  }
  return result;
}

char *IPv4ToString(char *__str, size_t __size, unsigned int a3)
{
  if (__str)
    snprintf(__str, __size, "%u.%u.%u.%u", HIBYTE(a3), BYTE2(a3), BYTE1(a3), a3);
  return __str;
}

char *SAToIPPortString(char *__str, size_t __size, uint64_t a3)
{
  unsigned int v3;
  char *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  unsigned int v16;
  char v18[16];
  uint64_t v19;
  char v20;
  __int128 v21;
  _BYTE v22[31];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v3 = __size;
  v4 = __str;
  if (*(_BYTE *)(a3 + 1) != 30)
  {
    v16 = bswap32(*(_DWORD *)(a3 + 4));
    snprintf(__str, __size, "%u.%u.%u.%u:%u", HIBYTE(v16), BYTE2(v16), BYTE1(v16), v16, bswap32(*(unsigned __int16 *)(a3 + 2)) >> 16);
    return v4;
  }
  v19 = (uint64_t)&v19;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22[15] = v5;
  *(_OWORD *)v22 = v5;
  v21 = v5;
  MEMORY[0x1E0C80A78](__str);
  v6 = 0;
  v8 = bswap32(*(unsigned __int16 *)(v7 + 2));
  *(_QWORD *)v18 = 0xAAAAAAAAAAAAAAAALL;
  v9 = HIWORD(v8);
  v10 = v7 + 8;
  v20 = 0;
  v11 = v7 + 10;
  v12 = 1;
  while (1)
  {
    if ((v12 & 1) == 0 || *(_WORD *)(v10 + 2 * v6))
    {
      if (v6)
        __strncat_chk();
      snprintf(v18, 8uLL, "%x", bswap32(*(unsigned __int16 *)(v10 + 2 * v6)) >> 16);
      strlen(v18);
      __strncat_chk();
      goto LABEL_9;
    }
    v14 = v6;
    __strncat_chk();
    --v6;
    do
    {
      ++v6;
      if (v14 > 6)
        break;
    }
    while (!*(unsigned __int16 *)(v11 + 2 * v14++));
    if (v6 == 7)
      break;
    v12 = 0;
LABEL_9:
    if (v6++ >= 7)
      goto LABEL_19;
  }
  __strncat_chk();
LABEL_19:
  snprintf(v4, v3, "[%s]:%u", &v20, v9);
  return v4;
}

unsigned __int8 *SAToIPString(uint64_t a1)
{
  unsigned __int8 *v1;
  __int128 v2;
  const char *v3;
  double v4;
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  int v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  double v20;
  _OWORD v22[8];
  uint64_t v23;

  v1 = (unsigned __int8 *)a1;
  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[6] = v2;
    v22[7] = v2;
    v22[4] = v2;
    v22[5] = v2;
    v22[2] = v2;
    v22[3] = v2;
    v22[0] = v2;
    v22[1] = v2;
    SAToIPPortString((char *)v22, 0x80uLL, a1);
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v3, (uint64_t)v22, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v5;
    v9 = v1[1];
    if (v9 == 2)
    {
      v18 = objc_msgSend_rangeOfString_(v5, v6, (uint64_t)CFSTR(":"), v7);
      objc_msgSend_substringToIndex_(v8, v19, v18, v20);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v9 != 30)
      {
        v1 = 0;
        goto LABEL_8;
      }
      v10 = objc_msgSend_rangeOfString_(v5, v6, (uint64_t)CFSTR("["), v7);
      v12 = v11;
      v14 = objc_msgSend_rangeOfString_(v8, v11, (uint64_t)CFSTR("]"), v13);
      objc_msgSend_substringWithRange_(v8, v15, (uint64_t)&v12[v10], v16, v14 - (_QWORD)&v12[v10]);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    v1 = (unsigned __int8 *)v17;
LABEL_8:

  }
  return v1;
}

uint64_t SAToPort(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 2 || v1 == 30)
      return bswap32(*(unsigned __int16 *)(result + 2)) >> 16;
    else
      return 0;
  }
  return result;
}

uint64_t SASetPort(uint64_t result, unsigned int a2)
{
  int v2;

  if (result)
  {
    v2 = *(unsigned __int8 *)(result + 1);
    if (v2 == 2 || v2 == 30)
      *(_WORD *)(result + 2) = __rev16(a2);
  }
  return result;
}

uint64_t SAToIPVersion(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30)
      return 96;
    else
      return 4 * (v1 == 2);
  }
  return result;
}

uint64_t IPPortToSA4(unsigned int a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  if (!a4)
    goto LABEL_5;
  if (*a4 >= 0x10u)
  {
    *a4 = 16;
LABEL_5:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_WORD *)a3 = 528;
    *(_DWORD *)(a3 + 4) = bswap32(a1);
    *(_WORD *)(a3 + 2) = __rev16(a2);
    return a3;
  }
  return 0;
}

uint64_t IPPortToSA6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t getEffectiveInterface(uint64_t a1, int a2, char *a3, _DWORD *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  unsigned int v12[6];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  __strlcpy_chk();
  v7 = socket(a2, 2, 0);
  if (v7 < 0)
    return 0;
  v8 = v7;
  if (ioctl(v7, 0xC020699DuLL, &v11) < 0 || !if_indextoname(v12[0], a3))
  {
    v9 = 0;
  }
  else
  {
    if (a4)
      *a4 = v12[0];
    v9 = 1;
  }
  close(v8);
  return v9;
}

BOOL isInterfaceConstrained(uint64_t a1, int a2)
{
  int v3;
  int v4;
  _BOOL8 v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  __strlcpy_chk();
  v3 = socket(a2, 2, 0);
  if (v3 < 0)
    return 0;
  v4 = v3;
  v6 = ioctl(v3, 0xC02069CCuLL, &v8) != -1 && (_DWORD)v9 != 0;
  close(v4);
  return v6;
}

uint64_t IPPortStringToSA(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  double v8;
  uint64_t v9;
  const char *v10;
  double v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  double v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  double v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  const char *v34;
  double v35;
  const char *v36;
  uint64_t v37;
  double v38;
  const char *v39;
  __int128 v41;

  v3 = a1;
  v6 = objc_msgSend_rangeOfString_(v3, v4, (uint64_t)CFSTR("["), v5);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = objc_msgSend_rangeOfString_(v3, v7, (uint64_t)CFSTR(":"), v8);
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v12 = v9;
      v13 = v10;
      objc_msgSend_substringToIndex_(v3, v10, v9, v11);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_substringFromIndex_(v3, v15, (uint64_t)&v13[v12], v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v41) = -1431655766;
      v18 = objc_retainAutorelease(v14);
      v22 = (const char *)objc_msgSend_UTF8String(v18, v19, v20, v21);
      if (inet_pton(2, v22, &v41) == 1)
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_WORD *)a2 = 528;
        *(_DWORD *)(a2 + 4) = v41;
LABEL_9:
        *(_WORD *)(a2 + 2) = bswap32(objc_msgSend_intValue(v17, v23, v24, v25, (_QWORD)v41)) >> 16;
LABEL_11:

        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else
  {
    v26 = v6;
    v27 = v7;
    v28 = objc_msgSend_rangeOfString_(v3, v7, (uint64_t)CFSTR("]"), v8);
    if (v28 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v31 = v28;
      v32 = v29;
      objc_msgSend_substringWithRange_(v3, v29, (uint64_t)&v27[v26], v30, v28 - (_QWORD)&v27[v26]);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_substringFromIndex_(v3, v34, (uint64_t)&v32[v31], v35);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v18 = objc_retainAutorelease(v33);
      v39 = (const char *)objc_msgSend_UTF8String(v18, v36, v37, v38);
      if (inet_pton(30, v39, &v41) == 1)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 24) = 0;
        *(_WORD *)a2 = 7708;
        v25 = *(double *)&v41;
        *(_OWORD *)(a2 + 8) = v41;
        goto LABEL_9;
      }
LABEL_10:
      a2 = 0;
      goto LABEL_11;
    }
  }
  a2 = 0;
LABEL_12:

  return a2;
}

uint64_t sub_19B977330(double a1, uint64_t a2, const char *a3)
{
  return objc_msgSend_URIWithPrefixedURI_(IDSURI, a3, (uint64_t)a3, a1);
}

uint64_t sub_19B97760C(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_prefixedURI(a3, (const char *)a3, a4, a1);
}

uint64_t IDSQRProtoPluginControlResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_36:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19B97A2D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  void *v18;
  const char *v19;
  __CFDictionary *v20;
  double v21;
  id v22;
  const char *v23;
  uint64_t v24;
  double v25;
  id v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  double v32;
  int isEqualToString;
  void *v34;
  IDSMPDecryptionResult *v35;
  const char *v36;
  double v37;
  void *v38;
  const char *v39;
  double v40;
  NSObject *v41;
  const char *v42;
  double v43;
  void *v44;
  void *v45;
  const char *v46;
  double v47;
  void *v48;
  void *v49;
  const char *v50;
  double v51;
  uint64_t v52;
  _QWORD v53[2];

  v53[1] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = a4;
  objc_msgSend_objectForKey_(v12, v13, (uint64_t)&unk_1E3C86778, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v12, v16, (uint64_t)&unk_1E3C86790, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (v15 && v18)
  {
    v22 = v15;
    CFDictionarySetValue(v20, &unk_1E3C867A8, v18);
  }
  else
  {
    if (v15)
    {
      v26 = v15;
    }
    else
    {
      if (!v18)
      {
        v48 = *(void **)(a1 + 32);
        objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v19, (uint64_t)CFSTR("com.apple.ids.IDSDecryptionErrorDomain"), v21, 19, 0);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_failWithError_(v48, v50, (uint64_t)v49, v51);

        v22 = 0;
        goto LABEL_21;
      }
      v26 = v18;
    }
    v22 = v26;
  }
  if (!objc_msgSend_code(v22, v23, v24, v25))
  {
    objc_msgSend_domain(v22, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v30, v31, (uint64_t)CFSTR("com.apple.messageprotection"), v32);

    if (isEqualToString)
    {

      v22 = 0;
    }
  }
  if (v9)
  {
    v34 = *(void **)(a1 + 32);
    v35 = [IDSMPDecryptionResult alloc];
    v38 = (void *)objc_msgSend_initWithData_encryptedAttributes_withCommitState_additionalDecryptionResult_(v35, v36, (uint64_t)v9, v37, v10, v11, v20);
    objc_msgSend_fulfillWithValue_(v34, v39, (uint64_t)v38, v40);
  }
  else
  {
    objc_msgSend_accountIdentity(IDSFoundationLog, v27, v28, v29);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      sub_19BAEE5DC();

    if (v22)
    {
      v52 = *MEMORY[0x1E0CB3388];
      v53[0] = v22;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v42, (uint64_t)v53, v43, &v52, 1);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v38 = 0;
    }
    v44 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v42, (uint64_t)CFSTR("com.apple.ids.IDSDecryptionErrorDomain"), v43, 15, v38);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_failWithError_(v44, v46, (uint64_t)v45, v47);

  }
LABEL_21:

}

void sub_19B97AAE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  id v11;
  double v12;
  void *v13;
  IDSMPDecryptionResult *v14;
  const char *v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  NSObject *v20;
  const char *v21;
  double v22;
  void *v23;
  void *v24;
  const char *v25;
  double v26;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v11 = a4;
  if (v7)
  {
    v13 = *(void **)(a1 + 48);
    v14 = [IDSMPDecryptionResult alloc];
    v17 = (void *)objc_msgSend_initWithData_encryptedAttributes_withCommitState_additionalDecryptionResult_(v14, v15, (uint64_t)v7, v16, 0, v11, 0);
    objc_msgSend_fulfillWithValue_(v13, v18, (uint64_t)v17, v19);
  }
  else
  {
    objc_msgSend_accountIdentity(IDSFoundationLog, v9, v10, v12);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      sub_19BAEE770();

    if (v8)
    {
      v27 = *MEMORY[0x1E0CB3388];
      v28[0] = v8;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v21, (uint64_t)v28, v22, &v27, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v17 = 0;
    }
    v23 = *(void **)(a1 + 48);
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v21, (uint64_t)CFSTR("com.apple.ids.IDSDecryptionErrorDomain"), v22, 18, v17);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_failWithError_(v23, v25, (uint64_t)v24, v26);

  }
}

void sub_19B97D788(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_19B97D7C4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_19B97D81C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_19B97D82C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_19B97D888(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

void sub_19B97D894(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void sub_19B97D8A8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t IDSQRProtoAllocBindTestOptionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IDSQRProtoExperimentOverride *v17;
  const char *v18;
  double v19;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IDSQRProtoExperimentOverride);
        objc_msgSend_addExperimentOverrides_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoExperimentOverrideReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19B97ED60()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40AFC0 = result;
  return result;
}

void sub_19B97ED8C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  double v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  id v17;

  v17 = a2;
  if (!objc_msgSend_response(v17, v3, v4, v5) && (v7 = *(_QWORD *)(a1 + 32)) != 0
    || objc_msgSend_response(v17, v6, v7, v8) == 1 && (v7 = *(_QWORD *)(a1 + 40)) != 0)
  {
    objc_msgSend_URLWithString_(MEMORY[0x1E0C99E98], v6, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v13 = (void *)v9;
      objc_msgSend_defaultWorkspace((void *)qword_1EE40AFC0, v10, v11, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_openURL_configuration_completionHandler_(v14, v15, (uint64_t)v13, v16, 0, &unk_1E3C1C750);

    }
  }

}

void sub_19B97EE30(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v3;
  uint64_t v4;
  id v5;
  double v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v3, v4, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v5;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "Failed to send registration push for prompt {error: %@}", (uint8_t *)&v8, 0xCu);
    }

  }
}

_QWORD *IDSNAT64PrefixCreate(const void *a1, unsigned int a2, int a3)
{
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v6 = 16 * a2;
  v7 = malloc_type_malloc(v6 + 24, 0x1604095AuLL);
  v8 = v7;
  if (v7)
  {
    *v7 = v7 + 3;
    memcpy(v7 + 3, a1, v6);
    *((_DWORD *)v8 + 2) = a2;
    *((_DWORD *)v8 + 3) = a3;
  }
  return v8;
}

void IDSNAT64PrefixDestroy(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t IDSNAT64PrefixGetPrefix(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[2];
  return *(_QWORD *)a1;
}

_QWORD *IDSNAT64PrefixCacheCreate()
{
  _QWORD *result;

  result = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  *result = 0;
  return result;
}

void IDSNAT64PrefixCacheDestroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    v2 = (_QWORD *)*a1;
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)v2[2];
        free(v2);
        v2 = v3;
      }
      while (v3);
    }
    free(a1);
  }
}

uint64_t IDSNAT64PrefixCacheGetPrefixes(uint64_t *a1, int a2)
{
  uint64_t result;

  for (result = *a1; result; result = *(_QWORD *)(result + 16))
  {
    if (*(_DWORD *)(result + 12) == a2)
      break;
  }
  return result;
}

void IDSNAT64PrefixCacheSetPrefixes(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(v4 + 12) == v5)
    {
      v6 = 0;
      v7 = *a1;
LABEL_7:
      v9 = (_QWORD *)(v6 + 16);
      if (!v6)
        v9 = a1;
      *v9 = *(_QWORD *)(v7 + 16);
      free((void *)v7);
      v4 = *a1;
    }
    else
    {
      v8 = *a1;
      while (1)
      {
        v7 = *(_QWORD *)(v8 + 16);
        if (!v7)
          break;
        v6 = v8;
        v8 = *(_QWORD *)(v8 + 16);
        if (*(_DWORD *)(v7 + 12) == v5)
          goto LABEL_7;
      }
    }
  }
  *(_QWORD *)(a2 + 16) = v4;
  *a1 = a2;
}

uint64_t *IDSNAT64PrefixCacheGetFirstPrefix(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (*result)
    {
      while (*(_DWORD *)(v2 + 12) != a2)
      {
        v2 = *(_QWORD *)(v2 + 16);
        if (!v2)
          return 0;
      }
      return *(uint64_t **)v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_19B9809F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_19B980C7C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1EE40AC98;
  qword_1EE40AC98 = (uint64_t)v1;

}

id sub_19B981004(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  id v12;
  NSObject *v13;

  v5 = a3;
  objc_msgSend_objectForKey_(a2, v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = v8;
  }
  else
  {
    if (v8)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v9, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        sub_19BAEEF7C((uint64_t)v5, a1, v13);

    }
    v12 = 0;
  }

  return v12;
}

void sub_19B9810AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const __CFString *v8;
  uint64_t v9;
  IDSAPSUserPayload *v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  void *v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    OSLogHandleForIDSCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = CFSTR("YES");
      v9 = *(_QWORD *)(a1 + 32);
      if (!*(_BYTE *)(a1 + 64))
        v8 = CFSTR("NO");
      *(_DWORD *)buf = 138413058;
      v27 = v5;
      v28 = 2112;
      v29 = v8;
      v30 = 2112;
      v31 = v6;
      v32 = 2112;
      v33 = v9;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "BlastDoorError: Received from blast door, result {%@} Will Fault On error? {%@} error {%@} for incoming payload {%@}", buf, 0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSBlastDoorConnectionHelper"), CFSTR("BlastDoorError: Received from blast door, result {%@} Will Fault On error? {%@} error {%@} for incoming payload {%@}"));
    (*(void (**)(_QWORD, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), v6);
  }
  else
  {
    v10 = [IDSAPSUserPayload alloc];
    v13 = (void *)objc_msgSend_initWithBlastDoorObject_(v10, v11, (uint64_t)v5, v12);
    v17 = v13;
    if (!*(_BYTE *)(a1 + 64))
      objc_msgSend_logHeaderDiffAgainstSource_(v13, v14, *(_QWORD *)(a1 + 40), v16);
    objc_msgSend_payload(v17, v14, v15, v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 65))
      objc_msgSend_addAllowlistedKey_toValidatedPayload_fromOriginalPayload_(*(void **)(a1 + 48), v18, (uint64_t)CFSTR("i"), v20, v19, *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)(a1 + 66))
      objc_msgSend_addAllowlistedKey_toValidatedPayload_fromOriginalPayload_(*(void **)(a1 + 48), v18, (uint64_t)CFSTR("b"), v20, v19, *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)(a1 + 64))
    {
      objc_msgSend_auditMissingHeaderKeys_target_(*(void **)(a1 + 48), v18, *(_QWORD *)(a1 + 32), v20, v19);
      v21 = *(_QWORD *)(a1 + 56);
      v25 = (void *)objc_msgSend_copy(v19, v22, v23, v24);
      (*(void (**)(uint64_t, void *, _QWORD, _QWORD))(v21 + 16))(v21, v25, *(unsigned __int8 *)(a1 + 64), 0);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }

  }
}

void sub_19B981530(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  id v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  double v15;
  id v16;
  const char *v17;
  double v18;
  const char *v19;
  void *v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  int isEqual;
  NSObject *v26;
  id *v27;
  id v28;
  id *v29;
  NSObject *v30;
  NSObject *v31;
  id v32;
  NSObject *v33;
  _QWORD v34[4];
  id v35;
  NSObject *v36;
  id v37;
  _QWORD v38[4];
  uint64_t v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  _QWORD block[4];
  id v45;
  id v46;
  uint8_t buf[4];
  id v48;
  __int16 v49;
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    OSLogHandleForIDSCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v48 = v6;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSBlastDoor: Received Error %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSBlastDoorConnectionHelper"), CFSTR("IDSBlastDoor: Received Error %@"));
    im_primary_queue();
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B981A24;
    block[3] = &unk_1E3C1C7E8;
    v9 = block;
    v46 = *(id *)(a1 + 32);
    v45 = v6;
    dispatch_async(v8, block);

LABEL_23:
    v16 = (id)v9[5];
    goto LABEL_24;
  }
  OSLogHandleForIDSCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v48 = v5;
    v49 = 2112;
    v50 = (id)objc_opt_class();
    v11 = v50;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "IDSBlastDoor: Received result %@ class %@", buf, 0x16u);

  }
  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    objc_opt_class();
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSBlastDoorConnectionHelper"), CFSTR("IDSBlastDoor: Received result %@ class %@"));
  }
  v12 = (void *)objc_opt_class();
  v13 = objc_opt_class();
  if ((objc_msgSend_isSubclassOfClass_(v12, v14, v13, v15) & 1) == 0)
  {
    OSLogHandleForIDSCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "IDSBlastDoor: Received result is not a dictionary", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSBlastDoorConnectionHelper"), CFSTR("IDSBlastDoor: Received result is not a dictionary"));
    im_primary_queue();
    v31 = objc_claimAutoreleasedReturnValue();
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = sub_19B981A3C;
    v41[3] = &unk_1E3C1C7E8;
    v9 = v41;
    v32 = *(id *)(a1 + 32);
    v42 = 0;
    v43 = v32;
    dispatch_async(v31, v41);

    goto LABEL_23;
  }
  v16 = v5;
  objc_msgSend_objectForKey_(v16, v17, (uint64_t)CFSTR("ids-client-message-type"), v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20
    && (objc_msgSend_objectForKey_(v16, v19, (uint64_t)CFSTR("ids-client-message-type"), v21),
        v22 = (void *)objc_claimAutoreleasedReturnValue(),
        isEqual = objc_msgSend_isEqual_(v22, v23, (uint64_t)&unk_1E3C867C0, v24),
        v22,
        v20,
        isEqual))
  {
    im_primary_queue();
    v26 = objc_claimAutoreleasedReturnValue();
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = sub_19B981A54;
    v38[3] = &unk_1E3C1C7E8;
    v27 = &v40;
    v28 = *(id *)(a1 + 32);
    v29 = (id *)&v39;
    v39 = 0;
    v40 = v28;
    dispatch_async(v26, v38);
  }
  else
  {
    im_primary_queue();
    v33 = objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = sub_19B981A6C;
    v34[3] = &unk_1E3C1C810;
    v37 = *(id *)(a1 + 32);
    v35 = v16;
    v36 = 0;
    dispatch_async(v33, v34);

    v27 = &v37;
    v29 = &v35;
    v26 = v36;
  }

LABEL_24:
}

uint64_t sub_19B981A24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_19B981A3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_19B981A54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 1, *(_QWORD *)(a1 + 32));
}

uint64_t sub_19B981A6C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[6] + 16))(a1[6], a1[4], 2, a1[5]);
}

_QWORD *IDSOSDataChannelCreate(int a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint8_t buf[4];
  _DWORD v17[7];

  *(_QWORD *)&v17[5] = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x80000000) == 0 && a2 || a1 < 0 && !a2)
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v17[0] = a1;
      LOWORD(v17[1]) = 2048;
      *(_QWORD *)((char *)&v17[1] + 2) = a2;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "Invalid fd,channel: %d,%p\n", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("Invalid fd,channel: %d,%p\n"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("Invalid fd,channel: %d,%p\n"));
      }
    }
    return 0;
  }
  v5 = malloc_type_calloc(1uLL, 0x40uLL, 0x10B0040F1EC886AuLL);
  if (!v5)
  {
    OSLogHandleForTransportCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "out of memory", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("out of memory"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("out of memory"));
      }
    }
    return 0;
  }
  v6 = v5;
  if (a2)
  {
    if (os_channel_attr_create())
    {
      if (os_channel_read_attr())
      {
        v7 = *__error();
        OSLogHandleForTransportCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v17 = strerror(v7);
          _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "os_channel_read_attr failed: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            strerror(v7);
            _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("os_channel_read_attr failed: %s"));
            if (_IDSShouldLog())
            {
              strerror(v7);
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("os_channel_read_attr failed: %s"));
            }
          }
        }
      }
      else if (os_channel_attr_get())
      {
        v13 = *__error();
        OSLogHandleForTransportCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v17 = strerror(v13);
          _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "os_channel_attr_get failed: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            strerror(v13);
            _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("os_channel_attr_get failed: %s"));
            if (_IDSShouldLog())
            {
              strerror(v13);
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("os_channel_attr_get failed: %s"));
            }
          }
        }
      }
      os_channel_attr_destroy();
      v6[5] = 0;
    }
    else
    {
      v11 = *__error();
      OSLogHandleForTransportCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v17 = strerror(v11);
        _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "os_channel_attr_create failed: %s", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          strerror(v11);
          _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("os_channel_attr_create failed: %s"));
          if (_IDSShouldLog())
          {
            strerror(v11);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("os_channel_attr_create failed: %s"));
          }
        }
      }
      v6[5] = 0;
    }
    IDSOSDataChannelDestroy(v6);
    return 0;
  }
  OSLogHandleForTransportCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "use socket", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("use socket"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("use socket"));
    }
  }
  *(_DWORD *)v6 = a1;
  return v6;
}

void IDSOSDataChannelDestroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = (void *)a1[3];
    if (v2)
      free(v2);
    v3 = (void *)a1[4];
    if (v3)
      free(v3);
    v4 = (void *)a1[6];
    if (v4)
      free(v4);
    free(a1);
  }
}

uint64_t IDSOSDataChannelFd(unsigned int *a1)
{
  if (a1)
    return *a1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t IDSOSDataChannelSetNonBlocking(uint64_t a1)
{
  int v3;

  if (a1
    && !*(_QWORD *)(a1 + 8)
    && ((v3 = fcntl(*(_DWORD *)a1, 3, 0), v3 < 0) || fcntl(*(_DWORD *)a1, 4, v3 | 4u) < 0))
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 0;
  }
}

ssize_t IDSOSDataChannelRead(uint64_t a1, char *__dst, size_t __n, int a4, BOOL *a5)
{
  size_t v6;
  char *v7;
  size_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  uint64_t next_slot;
  char *v19;
  unsigned __int16 v20;
  int v21;
  NSObject *v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  double v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  double v34;
  char *v35;
  size_t __na[2];
  void *__src[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = __n;
    v7 = __dst;
    if (!*(_QWORD *)(a1 + 8))
    {
      *a5 = 0;
      return recv(*(_DWORD *)a1, __dst, __n, a4);
    }
    v9 = *(unsigned __int16 *)(a1 + 56);
    if (*(_WORD *)(a1 + 56))
    {
      if (v9 >= v6)
      {
        *a5 = 0;
        memcpy(__dst, *(const void **)(a1 + 48), v6);
        *(_WORD *)(a1 + 56) -= v6;
        return v6;
      }
      memcpy(__dst, *(const void **)(a1 + 48), v9);
      v10 = *(unsigned __int16 *)(a1 + 56);
      v6 -= v10;
      v35 = v7;
      v7 += v10;
      *(_WORD *)(a1 + 56) = 0;
    }
    else
    {
      v35 = __dst;
    }
    if (*(_DWORD *)(a1 + 16) && v6)
    {
      v14 = 0;
      do
      {
        v15 = os_channel_available_slot_count();
        if (v15)
        {
          v16 = 1;
          while (1)
          {
            *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v38 = v17;
            v39 = v17;
            *(_OWORD *)__na = v17;
            *(_OWORD *)__src = v17;
            next_slot = os_channel_get_next_slot();
            v19 = (char *)__src[0];
            if (v6 < WORD1(__na[0]))
              break;
            memcpy(v7, __src[0], WORD1(__na[0]));
            v6 -= WORD1(__na[0]);
            v7 += WORD1(__na[0]);
            if (v16 < v15)
            {
              ++v16;
              if (v6)
                continue;
            }
            if (!next_slot)
              goto LABEL_27;
            goto LABEL_20;
          }
          memcpy(v7, __src[0], v6);
          v20 = WORD1(__na[0]) - v6;
          *(_WORD *)(a1 + 56) = WORD1(__na[0]) - v6;
          memcpy(*(void **)(a1 + 48), &v19[v6], v20);
          v7 += v6;
          v6 = 0;
          if (!next_slot)
            continue;
LABEL_20:
          v21 = os_channel_advance_slot();
          if (v21)
          {
            OSLogHandleForTransportCategory();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(__na[0]) = 67109120;
              HIDWORD(__na[0]) = v21;
              _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "advance_slot failed for read %d", (uint8_t *)__na, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("advance_slot failed for read %d"));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("advance_slot failed for read %d"));
              }
            }
          }
        }
LABEL_27:
        ;
      }
      while (++v14 < (unint64_t)*(unsigned int *)(a1 + 16) && v6 != 0);
    }
    v24 = *(_QWORD *)(a1 + 8);
    if (v24)
      os_channel_sync();
    *a5 = v24 != 0;
    v25 = (void *)qword_1EE40B530;
    if (qword_1EE40B530)
    {
      v26 = os_channel_ring_notify_time();
      v27 = os_channel_ring_sync_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v25, v28, (uint64_t)CFSTR("IDSOSDataChannelRead RX"), v29, v26, v27);
      v30 = (void *)qword_1EE40B530;
      v31 = os_channel_ring_sync_time();
      v32 = os_channel_ring_notify_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v30, v33, (uint64_t)CFSTR("IDSOSDataChannelRead TX"), v34, v31, v32);
    }
    v6 = v7 - v35;
    if (v7 > v35)
      return v6;
    v11 = __error();
    v12 = 35;
  }
  else
  {
    *a5 = 0;
    v11 = __error();
    v12 = 9;
  }
  *v11 = v12;
  return -1;
}

uint64_t IDSOSDataChannelSync(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !*(_QWORD *)(a1 + 8))
  {
    if (a3)
    {
      if (*a3)
        sub_19BAEF074();
    }
    return 0;
  }
  if (!a3)
  {
    os_channel_sync();
    return 1;
  }
  if (!*a3)
    return 0;
  os_channel_sync();
  *a3 = 0;
  return 1;
}

ssize_t IDSOSDataChannelWrite(uint64_t a1, char *a2, size_t a3, int a4, int a5, _DWORD *a6, _BYTE *a7)
{
  size_t v7;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t next_slot;
  size_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v21;
  BOOL v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  double v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  double v33;
  _BYTE *v36;
  uint8_t buf[16];
  void *__dst[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = a3;
    if (!*(_QWORD *)(a1 + 8))
    {
      *a7 = 0;
      return send(*(_DWORD *)a1, a2, a3, a4);
    }
    if (!a6)
      sub_19BAEF09C();
    if (*(_DWORD *)(a1 + 20) && a3)
    {
      v36 = a7;
      v10 = 0;
      v11 = a2;
      do
      {
        v12 = os_channel_available_slot_count();
        if (v12)
        {
          v13 = 1;
          do
          {
            *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v39 = v14;
            v40 = v14;
            *(_OWORD *)buf = v14;
            *(_OWORD *)__dst = v14;
            next_slot = os_channel_get_next_slot();
            *(_WORD *)buf = 0;
            v16 = *(_QWORD *)(a1 + 40);
            if (v7 < v16)
              LOWORD(v16) = v7;
            *(_WORD *)&buf[2] = v16;
            memcpy(__dst[0], v11, (unsigned __int16)v16);
            v17 = *(unsigned __int16 *)&buf[2];
            os_channel_set_slot_properties();
            v7 -= v17;
            v11 += v17;
            ++*a6;
            if (v13 >= v12)
              break;
            ++v13;
          }
          while (v7);
          if (next_slot)
          {
            v18 = os_channel_advance_slot();
            if (v18)
            {
              OSLogHandleForTransportCategory();
              v19 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v18;
                _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "advance_slot failed for write %d", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("IDSOSDataChannel"), CFSTR("IDS"), CFSTR("advance_slot failed for write %d"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSOSDataChannel"), CFSTR("advance_slot failed for write %d"));
                }
              }
            }
          }
        }
      }
      while (++v10 < (unint64_t)*(unsigned int *)(a1 + 20) && v7 != 0);
      a7 = v36;
      *v36 = 0;
      v23 = v11 > a2;
      v21 = v11 - a2;
      if (v23)
      {
        if (a5)
          *v36 = IDSOSDataChannelSync(a1, 1, a6);
        goto LABEL_35;
      }
    }
    else
    {
      *a7 = 0;
    }
    *a7 = IDSOSDataChannelSync(a1, 1, a6);
    *__error() = 35;
    v21 = -1;
LABEL_35:
    v24 = (void *)qword_1EE40B530;
    if (qword_1EE40B530)
    {
      v25 = os_channel_ring_notify_time();
      v26 = os_channel_ring_sync_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v24, v27, (uint64_t)CFSTR("IDSOSDataChannelWrite RX"), v28, v25, v26);
      v29 = (void *)qword_1EE40B530;
      v30 = os_channel_ring_sync_time();
      v31 = os_channel_ring_notify_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v29, v32, (uint64_t)CFSTR("IDSOSDataChannelWrite TX"), v33, v30, v31);
    }
    return v21;
  }
  *a7 = 0;
  *__error() = 9;
  return -1;
}

BOOL IDSQRProtoPutMaterialResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t IDSQRProtoReallocateIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_24;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 5u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_24:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 0xFu:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 56) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_37;
        v21 += 7;
        v14 = v22++ >= 9;
        if (v14)
        {
          v23 = 0;
          goto LABEL_39;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_39:
      *(_QWORD *)(a1 + 8) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoTestRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_44;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_46:
          v36 = 24;
          goto LABEL_55;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_50:
          v36 = 12;
          goto LABEL_55;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v34;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          break;
        v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
        *(_QWORD *)(a2 + v31) = v32 + 1;
        v19 |= (unint64_t)(v33 & 0x7F) << v29;
        if ((v33 & 0x80) == 0)
          goto LABEL_52;
        v29 += 7;
        v14 = v30++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_54:
      v36 = 8;
LABEL_55:
      *(_DWORD *)(a1 + v36) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoParticipantUpdateParticipantModeInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  IDSQRProtoMaterial *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _IDSCertifiedDeliveryVersion()
{
  if (_os_feature_enabled_impl())
    return 2;
  else
    return 1;
}

uint64_t IDSQRProtoMaterialInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_30;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_41;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_41:
          v32 = 24;
          goto LABEL_46;
        case 3u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_30:
          v26 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 4u:
          v27 = 0;
          v28 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v22 |= (unint64_t)(v31 & 0x7F) << v27;
        if ((v31 & 0x80) == 0)
          goto LABEL_43;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_45:
      v32 = 28;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id NWLinkQueue()
{
  if (qword_1EE40AE10 != -1)
    dispatch_once(&qword_1EE40AE10, &unk_1E3C1B670);
  return (id)qword_1EE40AE18;
}

void sub_19B989794()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  void *v3;

  dispatch_queue_attr_make_initially_inactive(0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.ids-IDSNWLink", v0);
  v2 = (void *)qword_1EE40AE18;
  qword_1EE40AE18 = (uint64_t)v1;

  IDSRealTimeContext();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  nw_queue_context_target_dispatch_queue();

  dispatch_activate((dispatch_object_t)qword_1EE40AE18);
}

id _tokenWithParameters(void *a1, void *a2, void *a3, unint64_t a4, uint64_t a5)
{
  id v9;
  NSObject *v10;
  NSObject *v11;
  const char *hostname;
  const char *v13;
  unsigned int port;
  unsigned int v15;
  const char *v16;
  double v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;

  v9 = a3;
  v10 = a2;
  v11 = a1;
  hostname = nw_endpoint_get_hostname(v11);
  v13 = nw_endpoint_get_hostname(v10);
  port = nw_endpoint_get_port(v11);

  v15 = nw_endpoint_get_port(v10);
  if (a4 - 7 > 3)
  {
    if (a4 > 1)
    {
      v20 = "UDP";
      switch(a4)
      {
        case 0uLL:
          goto LABEL_13;
        case 1uLL:
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%@-%s"), v17, hostname, port, v13, v15, v9, "CD");
          break;
        case 2uLL:
          v19 = (void *)MEMORY[0x1E0CB3940];
          v18 = "CDH2";
          goto LABEL_5;
        case 3uLL:
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%@-%s"), v17, hostname, port, v13, v15, v9, "RU");
          break;
        case 4uLL:
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%@-%s"), v17, hostname, port, v13, v15, v9, "ID");
          break;
        case 5uLL:
          v20 = "QR";
LABEL_13:
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%@-%s"), v17, hostname, port, v13, v15, v9, v20);
          break;
        case 6uLL:
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%@-%s%llu"), v17, hostname, port, v13, v15, v9, "QR+", a5);
          break;
        default:
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%@-%s"), v17, hostname, port, v13, v15, v9, "??");
          break;
      }
    }
    else
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%s:%hu-%s:%hu"), v17, hostname, port, v13, v15);
    }
  }
  else
  {
    v18 = off_1E3C1F8D8[a4 - 7];
    v19 = (void *)MEMORY[0x1E0CB3940];
LABEL_5:
    objc_msgSend_stringWithFormat_(v19, v16, (uint64_t)CFSTR("%s:%hu-%s:%hu-%s"), v17, hostname, port, v13, v15, v18);
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

id _tokenForNWLinkConnection(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v22;

  v1 = a1;
  objc_msgSend_localEndpoint(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_remoteEndpoint(v1, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sessionID(v1, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_type(v1, v14, v15, v16);
  v21 = objc_msgSend_connectionID(v1, v18, v19, v20);

  _tokenWithParameters(v5, v9, v13, v17, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

uint64_t _supportsNAT64(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3;
  uint64_t does_interface_index_support_nat64;
  __int128 v6;
  NSObject *v7;
  char *v8;
  const __CFString *v9;
  _DWORD v11[2];
  __int16 v12;
  char *v13;
  __int16 v14;
  const __CFString *v15;
  char __str[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = (int)a2;
  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 1) == 2)
    does_interface_index_support_nat64 = nw_nat64_does_interface_index_support_nat64();
  else
    does_interface_index_support_nat64 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22 = v6;
  v23 = v6;
  v20 = v6;
  v21 = v6;
  v18 = v6;
  v19 = v6;
  *(_OWORD *)__str = v6;
  v17 = v6;
  objc_msgSend_IDSNWLink(IDSFoundationLog, a2, a3, -3.72066208e-103);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = SAToIPPortString(__str, 0x80uLL, a1);
    v9 = CFSTR("NO");
    v11[0] = 67109634;
    v11[1] = v3;
    if ((_DWORD)does_interface_index_support_nat64)
      v9 = CFSTR("YES");
    v12 = 2080;
    v13 = v8;
    v14 = 2112;
    v15 = v9;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "Interface %d (%s) supports NAT64: %@", (uint8_t *)v11, 0x1Cu);
  }

  return does_interface_index_support_nat64;
}

const char *_getPathForMessageType(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  int v5;
  const char *result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1 - 1;
  result = "/QR/AllocBind";
  switch(v5)
  {
    case 0:
      return result;
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 15:
    case 16:
    case 18:
    case 20:
    case 22:
    case 24:
    case 25:
    case 27:
    case 29:
    case 30:
    case 32:
      goto LABEL_6;
    case 2:
      result = "/QR/Indications";
      break;
    case 4:
      result = "/QR/Info";
      break;
    case 6:
      result = "/QR/ParticipantUpdate";
      break;
    case 9:
      result = "/QR/PluginControl";
      break;
    case 13:
      result = "/QR/Reallocate";
      break;
    case 14:
      result = "/QR/SessionInfo";
      break;
    case 17:
      result = "/QR/Stats";
      break;
    case 19:
      result = "/QR/Test";
      break;
    case 21:
      result = "/QR/UnAllocBind";
      break;
    case 23:
    case 26:
      result = "/QR/Material";
      break;
    case 28:
    case 33:
      result = "/QR/E2EChannelRegister";
      break;
    case 31:
      result = "/QR/E2EChannelRegisterAck";
      break;
    default:
      if ((_DWORD)a1 == 1001)
      {
        result = "/QR/ChannelData";
      }
      else
      {
LABEL_6:
        objc_msgSend_IDSNWLink(IDSFoundationLog, a2, a3, a4);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_19BAEF338(a1, v7, v8, v9, v10, v11, v12, v13);

        result = "/QR/Unknown";
      }
      break;
  }
  return result;
}

uint64_t _getHTTPMethodForMessageType(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 26)
  {
    if (a1 != 27)
    {
      if (a1 != 1001)
        return 4;
      return 6;
    }
  }
  else if (a1 != 3)
  {
    return 4;
  }
  return result;
}

NSObject *_createQRContentContext(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *metadata;
  char *v10;
  int port;
  __int128 v12;
  nw_endpoint_t url;
  __int128 v14;
  char v16[16];
  __int128 v17;
  char __str[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = nw_content_context_create("QR request");
  metadata = nw_http_create_metadata();
  v10 = nw_endpoint_copy_address_string(v7);
  port = nw_endpoint_get_port(v7);

  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24 = v12;
  v25 = v12;
  v22 = v12;
  v23 = v12;
  v20 = v12;
  v21 = v12;
  *(_OWORD *)__str = v12;
  v19 = v12;
  snprintf(__str, 0x80uLL, "https://%s:%u", v10, port);
  free(v10);
  url = nw_endpoint_create_url(__str);
  nw_http_metadata_set_endpoint();
  nw_http_metadata_set_method();
  nw_http_metadata_set_path();
  nw_http_metadata_add_header();
  nw_http_metadata_add_header();
  nw_http_metadata_add_header();
  if (a5)
  {
    nw_http_metadata_add_header();
  }
  else
  {
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v16 = v14;
    v17 = v14;
    snprintf(v16, 0x20uLL, "%llu", a4);
  }
  nw_http_metadata_add_header();
  nw_content_context_set_metadata_for_protocol(v8, metadata);

  return v8;
}

NSObject *_nwProtocolMetaDataForTrafficClass(int a1)
{
  NSObject *v2;
  uint64_t *v3;
  nw_protocol_metadata_t v4;
  nw_service_class_t v5;
  nw_protocol_metadata_t metadata;
  nw_protocol_metadata_t v7;

  v2 = 0;
  if (a1 > 699)
  {
    switch(a1)
    {
      case 700:
        v3 = &qword_1EE40AFE0;
        v4 = (nw_protocol_metadata_t)qword_1EE40AFE0;
        if (!qword_1EE40AFE0)
        {
          v5 = nw_service_class_interactive_video;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 800:
        v3 = &qword_1EE40AFE8;
        v4 = (nw_protocol_metadata_t)qword_1EE40AFE8;
        if (!qword_1EE40AFE8)
        {
          v5 = nw_service_class_interactive_voice;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 900:
        v3 = &qword_1EE40AFF0;
        v4 = (nw_protocol_metadata_t)qword_1EE40AFF0;
        if (!qword_1EE40AFF0)
        {
          v5 = nw_service_class_signaling;
          goto LABEL_18;
        }
LABEL_19:
        v2 = v4;
        break;
    }
  }
  else
  {
    if (a1 == 100 || a1 == 200)
    {
      v3 = &qword_1EE40AFD0;
      v4 = (nw_protocol_metadata_t)qword_1EE40AFD0;
      if (!qword_1EE40AFD0)
      {
        v5 = nw_service_class_background;
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    if (a1 == 600)
    {
      v3 = &qword_1EE40AFD8;
      v4 = (nw_protocol_metadata_t)qword_1EE40AFD8;
      if (!qword_1EE40AFD8)
      {
        v5 = nw_service_class_responsive_data;
LABEL_18:
        metadata = nw_ip_create_metadata();
        v7 = (nw_protocol_metadata_t)*v3;
        *v3 = (uint64_t)metadata;

        nw_ip_metadata_set_service_class((nw_protocol_metadata_t)*v3, v5);
        nw_ip_metadata_set_enable_fragmentation();
        v4 = (nw_protocol_metadata_t)*v3;
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  return v2;
}

void sub_19B98A8B8(uint64_t a1, const char *a2, void *a3, double a4)
{
  void *v4;
  const char *v5;
  double v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_connection(a3, a2, (uint64_t)a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v4, v5, (uint64_t)v7, v6);

}

uint64_t sub_19B98A8FC(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, 1);
}

void sub_19B98AE78(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v11;
  uint64_t v12;
  id v13;
  double v14;
  NSObject *v15;
  _BOOL4 v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  const char *v26;
  void *v27;
  const char *v28;
  double v29;
  void *v30;
  void *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  const char *v37;
  double v38;
  void *v39;
  id v40;
  const char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  const char *v45;
  double v46;
  id v47;
  const char *v48;
  double v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  double v53;
  NSObject *v54;
  uint8_t buf[4];
  void *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  if (a2 != 3
    || (objc_msgSend_IDSNWLink(IDSFoundationLog, v11, v12, v14),
        v15 = objc_claimAutoreleasedReturnValue(),
        v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG),
        v15,
        v16))
  {
    v17 = objc_msgSend_type(v13, v11, v12, v14);
    if (v17 > 0xA)
      v21 = "??";
    else
      v21 = off_1E3C1F918[v17];
    v24 = objc_msgSend_state(v13, v18, v19, v20) - 1;
    if (v24 > 3)
      v26 = "Connecting";
    else
      v26 = off_1E3C1F8F8[v24];
    objc_msgSend_sessionID(v13, v22, v23, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v27;
    if (v27)
    {
      objc_msgSend_substringToIndex_(v27, v28, 8, v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_alloc(MEMORY[0x1E0CB3940]);
      v36 = objc_msgSend_connectionID(v13, v33, v34, v35);
      v39 = (void *)objc_msgSend_initWithFormat_(v32, v37, (uint64_t)CFSTR("%-3s connection %@ [C%llu] (%s) %s"), v38, v21, v31, v36, v26, a3);

    }
    else
    {
      v40 = objc_alloc(MEMORY[0x1E0CB3940]);
      v44 = objc_msgSend_connectionID(v13, v41, v42, v43);
      v39 = (void *)objc_msgSend_initWithFormat_(v40, v45, (uint64_t)CFSTR("%-3s connection [C%llu] (%s) %s"), v46, v21, v44, v26, a3);
    }
    v47 = objc_alloc(MEMORY[0x1E0CB3940]);
    v52 = (void *)objc_msgSend_initWithFormat_arguments_(v47, v48, (uint64_t)v39, v49, &a9);
    switch(a2)
    {
      case 2:
        objc_msgSend_IDSNWLink(IDSFoundationLog, v50, v51, v53);
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          sub_19BAEF39C((uint64_t)v52, v54);
        break;
      case 3:
        objc_msgSend_IDSNWLink(IDSFoundationLog, v50, v51, v53);
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
          sub_19BAEF40C((uint64_t)v52, v54);
        break;
      case 1:
        objc_msgSend_IDSNWLink(IDSFoundationLog, v50, v51, v53);
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v56 = v52;
          _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
        }
        break;
      default:
LABEL_22:

        goto LABEL_23;
    }

    goto LABEL_22;
  }
LABEL_23:

}

uint64_t sub_19B98B118(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__failConnectionsRandomly(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19B98CAF4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  char v5;
  const char *v6;
  double v7;
  id v8;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
    v5 = objc_opt_respondsToSelector();

    if ((v5 & 1) != 0)
    {
      v8 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
      objc_msgSend_link_didMitigateCollision_(v8, v6, *(_QWORD *)(a1 + 32), v7, 0);

    }
  }
}

void sub_19B98CBAC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  char v5;
  const char *v6;
  double v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
    v5 = objc_opt_respondsToSelector();

    if ((v5 & 1) != 0)
    {
      v8 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
      objc_msgSend_link_didMitigateCollision_(v8, v6, *(_QWORD *)(a1 + 32), v7, 1);

    }
  }
}

uint64_t sub_19B98CC4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98CC64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98CC7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98CC94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98CCAC(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, (uint64_t)a2, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v5;
  if (v5)
    a3 = objc_msgSend_longLongValue(v5, v6, v7, v8);

  return a3;
}

uint64_t sub_19B98CCF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19B98CD08(uint64_t a1, int a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  double v25;
  uint64_t v26;
  int8x16_t v27;
  _QWORD v28[4];
  id v29;
  BOOL v30;
  _QWORD v31[4];
  int8x16_t v32;
  id v33;
  id v34;
  char v35;

  v10 = a3;
  switch(a2)
  {
    case 5:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v5, v6, v7, v8, v9, v26);
      if ((objc_msgSend_ignoreCancel(*(void **)(a1 + 32), v21, v22, v23) & 1) == 0)
        objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v24, *(_QWORD *)(a1 + 32), v25, *(_QWORD *)(a1 + 48));
      break;
    case 4:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v10);
      if (*(_QWORD *)(a1 + 56))
      {
        v20 = objc_msgSend_disconnectionState(*(void **)(a1 + 32), v17, v18, v19) == 2;
        v28[0] = MEMORY[0x1E0C809B0];
        v28[1] = 3221225472;
        v28[2] = sub_19B98D0A4;
        v28[3] = &unk_1E3C1F2F8;
        v29 = *(id *)(a1 + 56);
        v30 = v20;
        IDSTransportThreadAddBlock(v28);

      }
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 32), v19, 0);
      break;
    case 3:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"ready", v5, v6, v7, v8, v9, v26);
      objc_msgSend__addToRecentQRServerList_(*(void **)(a1 + 40), v11, *(_QWORD *)(a1 + 32), v12);
      objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 13));
      v15 = MEMORY[0x1E0C809B0];
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 14) = 1;
      v31[0] = v15;
      v31[1] = 3221225472;
      v31[2] = sub_19B98CED4;
      v31[3] = &unk_1E3C1F2D0;
      v34 = *(id *)(a1 + 56);
      v35 = *(_BYTE *)(a1 + 64);
      v27 = *(int8x16_t *)(a1 + 32);
      v16 = (id)v27.i64[0];
      v32 = vextq_s8(v27, v27, 8uLL);
      v33 = *(id *)(a1 + 48);
      IDSTransportThreadAddBlock(v31);

      break;
  }

}

void sub_19B98CED4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  double v4;
  const char *v5;
  double v6;
  void *v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  double v13;
  id v14;
  const char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  double v28;
  const char *v29;
  double v30;
  const char *v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 && !*(_BYTE *)(a1 + 64))
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v2 + 16))(v2, 1, 0, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 48));
  objc_msgSend_setState_(*(void **)(a1 + 40), v3, 1, v4);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  if (!v7)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 112);
    *(_QWORD *)(v9 + 112) = Mutable;

    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  }
  objc_msgSend_objectForKeyedSubscript_(v7, v5, *(_QWORD *)(a1 + 48), v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v12, 0, v13, *(_QWORD *)(a1 + 48));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 48));
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v14 = v11;
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v33, v16, v37, 16);
  if (v17)
  {
    v23 = v17;
    v24 = *(_QWORD *)v34;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v34 != v24)
          objc_enumerationMutation(v14);
        v26 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v25);
        sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"performing queued peel-off...", v18, v19, v20, v21, v22, v33);
        (*(void (**)(uint64_t, _QWORD))(v26 + 16))(v26, *(_QWORD *)(a1 + 40));
        ++v25;
      }
      while (v23 != v25);
      v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v27, (uint64_t)&v33, v28, v37, 16);
    }
    while (v23);
  }

  objc_msgSend__createIndicationConnection_(*(void **)(a1 + 32), v29, *(_QWORD *)(a1 + 40), v30);
  objc_msgSend__createChannelDataConnection_(*(void **)(a1 + 32), v31, *(_QWORD *)(a1 + 40), v32);

}

uint64_t sub_19B98D0A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 1, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_19B98D0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"start: calling ready handler immediately", a4, a5, a6, a7, a8, v10);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_19B98D9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19B98D9EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98DA08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19B98DA18(uint64_t a1)
{

}

uint64_t sub_19B98DA20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98DA3C(uint64_t a1, const char *a2, double a3)
{
  objc_msgSend__getConnectedLocalPortAndSetLocalEndpointForConnection_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_19B98DA84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19B98DAA0(uint64_t a1, id a2)
{
  NSObject *v3;
  const char *v4;
  double v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  double v9;
  uint64_t v10;
  id v11;
  const char *v12;
  double v13;
  id v14;
  const char *v15;
  uint64_t v16;
  double v17;
  char *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  size_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const void *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  _QWORD v42[4];
  id v43;

  v3 = a2;
  sec_protocol_options_add_tls_application_protocol(v3, "h2");
  sec_protocol_options_set_min_tls_protocol_version(v3, tls_protocol_version_TLSv13);
  objc_msgSend_derivePSKFromSessionKey_salt_(IDSNWLink, v4, *(_QWORD *)(a1 + 32), v5, *(_QWORD *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v10 = objc_msgSend_length(*(void **)(a1 + 48), v6, v7, v9) + 13;
    v11 = objc_alloc(MEMORY[0x1E0C99DF0]);
    v14 = objc_retainAutorelease((id)objc_msgSend_initWithLength_(v11, v12, v10, v13));
    v18 = (char *)objc_msgSend_mutableBytes(v14, v15, v16, v17);
    *v18 = 0;
    v19 = objc_retainAutorelease(*(id *)(a1 + 40));
    v23 = objc_msgSend_bytes(v19, v20, v21, v22);
    v24 = *(_QWORD *)v23;
    *(_DWORD *)(v18 + 9) = *(_DWORD *)(v23 + 8);
    *(_QWORD *)(v18 + 1) = v24;
    v25 = objc_retainAutorelease(*(id *)(a1 + 48));
    v29 = (const void *)objc_msgSend_bytes(v25, v26, v27, v28);
    v33 = objc_msgSend_length(*(void **)(a1 + 48), v30, v31, v32);
    memcpy(v18 + 13, v29, v33);
    v34 = objc_retainAutorelease(v8);
    v38 = (const void *)objc_msgSend_bytes(v34, v35, v36, v37);
    v39 = dispatch_data_create(v38, 0x20uLL, 0, 0);
    v40 = dispatch_data_create(v18, v10, 0, 0);
    sec_protocol_options_add_pre_shared_key(v3, v39, v40);

  }
  else
  {
    objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      sub_19BAEF64C();

    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = sub_19B98DC70;
    v42[3] = &unk_1E3C1F2A8;
    v43 = *(id *)(a1 + 56);
    IDSTransportThreadAddBlock(v42);

  }
}

uint64_t sub_19B98DC70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B98DC8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19B98DCA8(uint64_t a1, int a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  double v12;
  uint64_t v13;
  id v14;
  const char *v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  id v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[5];
  __int128 v26;
  BOOL v27;
  _QWORD v28[5];
  __int128 v29;
  uint64_t v30;

  v10 = a3;
  switch(a2)
  {
    case 5:
      sub_19B98AE78(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 1, (uint64_t)"connectTCP: cancelled", v5, v6, v7, v8, v9, v22);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 32), v15, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      break;
    case 4:
      sub_19B98AE78(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 1, (uint64_t)"connectTCP: failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v10);
      if (*(_QWORD *)(a1 + 40))
      {
        v20 = objc_msgSend_disconnectionState(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v17, v18, v19) == 2;
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = sub_19B98E124;
        v25[3] = &unk_1E3C1F3E8;
        v25[4] = *(_QWORD *)(a1 + 32);
        v24 = *(_OWORD *)(a1 + 40);
        v21 = (id)v24;
        v26 = v24;
        v27 = v20;
        IDSTransportThreadAddBlock(v25);

      }
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), v17, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v19, 0);
      break;
    case 3:
      sub_19B98AE78(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 1, (uint64_t)"connectTCP: ready", v5, v6, v7, v8, v9, v22);
      objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 32), v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v12, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 13));
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 14) = 1;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = sub_19B98DE98;
      v28[3] = &unk_1E3C1F3C0;
      v13 = *(_QWORD *)(a1 + 56);
      v28[4] = *(_QWORD *)(a1 + 32);
      v30 = v13;
      v23 = *(_OWORD *)(a1 + 40);
      v14 = (id)v23;
      v29 = v23;
      IDSTransportThreadAddBlock(v28);

      break;
  }

}

void sub_19B98DE98(uint64_t a1, const char *a2, double a3)
{
  uint64_t ConnectedLocalPortAndSetLocalEndpointForConnection;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  double v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  id v18;
  const char *v19;
  double v20;
  void *v21;
  const char *v22;
  double v23;
  id v24;
  const char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  double v38;
  const char *v39;
  double v40;
  const char *v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  ConnectedLocalPortAndSetLocalEndpointForConnection = objc_msgSend__getConnectedLocalPortAndSetLocalEndpointForConnection_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  _tokenForNWLinkConnection(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 32), v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 16))(v10, 1, 0, 0, ConnectedLocalPortAndSetLocalEndpointForConnection);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 48));
  objc_msgSend_setState_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v11, 1, v12);
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v15)
  {
    v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v19, (uint64_t)v18, v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

  }
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v17);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v22, 0, v23, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 48));
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v24 = v21;
  v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v43, v26, v47, 16);
  if (v27)
  {
    v33 = v27;
    v34 = *(_QWORD *)v44;
    do
    {
      v35 = 0;
      do
      {
        if (*(_QWORD *)v44 != v34)
          objc_enumerationMutation(v24);
        v36 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v35);
        sub_19B98AE78(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 1, (uint64_t)"performing queued peel-off...", v28, v29, v30, v31, v32, v43);
        (*(void (**)(uint64_t, _QWORD))(v36 + 16))(v36, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
        ++v35;
      }
      while (v33 != v35);
      v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v37, (uint64_t)&v43, v38, v47, 16);
    }
    while (v33);
  }

  objc_msgSend__createIndicationConnection_(*(void **)(a1 + 32), v39, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v40);
  objc_msgSend__createChannelDataConnectionForH2_(*(void **)(a1 + 32), v41, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v42);

}

uint64_t sub_19B98E124(uint64_t a1, const char *a2, double a3)
{
  objc_msgSend__getConnectedLocalPortAndSetLocalEndpointForConnection_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_19B98E6CC(void **a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v4;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  double v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  double v33;
  const char *v34;
  double v35;
  NSObject *v36;
  void *v37;
  uint64_t port;
  const char *v39;
  double v40;
  void *v41;
  const char *v42;
  double v43;
  void *v44;
  const char *v45;
  double v46;
  void *v47;
  const char *v48;
  double v49;
  void *v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  uint8_t buf[4];
  NSObject *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a1[4] + 8))
  {
    _tokenWithParameters(a1[5], a1[6], a1[7], 5uLL, 0);
    v4 = objc_claimAutoreleasedReturnValue();
    objc_msgSend__NWLinkConnectionForToken_(a1[4], v7, (uint64_t)v4, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v9;
    if (v9)
    {
      v14 = objc_msgSend_disconnectionState(v9, v10, v11, v12);
      if ((a2 & 1) == 0 && v14 != 3)
      {
        if (v14 != 1)
        {
          objc_msgSend_IDSNWLink(IDSFoundationLog, v15, v16, v22);
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v31 = "disconnectWithSessionID cancelled by a new connection";
            goto LABEL_19;
          }
LABEL_20:

          goto LABEL_21;
        }
        v23 = ids_monotonic_time();
        objc_msgSend_scheduledDisconnectTime(v13, v24, v25, v23);
        v29 = v28 + -0.5;
        if (v23 < v29)
        {
          objc_msgSend_IDSNWLink(IDSFoundationLog, v26, v27, v29);
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v31 = "disconnectWithSessionID another disconnection scheduled later time - ignoring this";
LABEL_19:
            _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, v31, buf, 2u);
            goto LABEL_20;
          }
          goto LABEL_20;
        }
      }
      sub_19B98AE78(v13, 1, (uint64_t)"disconnecting %@", v17, v18, v19, v20, v21, (uint64_t)v4);
      objc_msgSend__cancelNWLinkConnection_remove_(a1[4], v32, (uint64_t)v13, v33, a2);
      if ((_DWORD)a2)
        objc_msgSend_setIgnoreCancel_(v13, v34, 1, v35);
    }
    else
    {
      objc_msgSend_IDSNWLink(IDSFoundationLog, v10, v11, v12);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v56 = v4;
        _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "cannot find QR connection to disconnect for %@", buf, 0xCu);
      }

    }
    v37 = a1[4];
    port = nw_endpoint_get_port((nw_endpoint_t)a1[5]);
    objc_msgSend__removeExtraListener_(v37, v39, port, v40);
    _tokenWithParameters(a1[5], a1[6], a1[7], 1uLL, 0);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v42, (uint64_t)v41, v43, a2);
    _tokenWithParameters(a1[5], a1[6], a1[7], 2uLL, 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v45, (uint64_t)v44, v46, a2);
    _tokenWithParameters(a1[5], a1[6], a1[7], 4uLL, 0);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v48, (uint64_t)v47, v49, a2);
    _tokenWithParameters(a1[5], a1[6], a1[7], 7uLL, 0);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v51, (uint64_t)v50, v52, a2);
    _tokenWithParameters(a1[5], a1[6], a1[7], 8uLL, 0);
    v4 = objc_claimAutoreleasedReturnValue();

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v53, (uint64_t)v4, v54, a2);
LABEL_21:

    goto LABEL_22;
  }
  objc_msgSend_IDSNWLink(IDSFoundationLog, a2, a3, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "disconnectWithSessionID alread invalidated", buf, 2u);
  }
LABEL_22:

}

uint64_t sub_19B98EA28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19B98F6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_19B98F734(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  void *v10;
  const __CFString *v11;

  v8 = a2;
  v10 = (void *)a1[4];
  v11 = CFSTR("NO");
  if (a2)
    v11 = CFSTR("YES");
  sub_19B98AE78(v10, 1, (uint64_t)"createQUICPodP2PConnectionsForSession: create AVC successful: %@", a4, a5, a6, a7, a8, (uint64_t)v11);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  if ((v8 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24))
      (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_19B98F7FC(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  void *v10;
  const __CFString *v11;

  v8 = a2;
  v10 = (void *)a1[4];
  v11 = CFSTR("NO");
  if (a2)
    v11 = CFSTR("YES");
  sub_19B98AE78(v10, 1, (uint64_t)"createQUICPodP2PConnectionsForSession: create IDS successful: %@", a4, a5, a6, a7, a8, (uint64_t)v11);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  if ((v8 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
      (*(void (**)(void))(a1[5] + 16))();
  }
}

uint64_t sub_19B98FFA8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;

  v5 = a2;
  if (v5)
  {
    v7 = objc_msgSend__sendData_withPacketBuffer_NWLinkConnection_(*(void **)(a1 + 32), v3, *(_QWORD *)(a1 + 40), v6, *(_QWORD *)(a1 + 56), v5);
    v13 = v7;
    if (v7)
    {
      if (v7 > 0xF)
        v14 = "UnexpectedSendResult";
      else
        v14 = _IDSLinkSendResultStrings[v7];
      sub_19B98AE78(v5, 2, (uint64_t)"_sendData failed %s", v8, v9, v10, v11, v12, (uint64_t)v14);
    }
  }
  else
  {
    objc_msgSend_IDSNWLink(IDSFoundationLog, v3, v4, v6);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_19BAEF7AC(a1, v15, v16);

    v13 = 6;
  }

  return v13;
}

void sub_19B991514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_19B991548(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t interface_index;
  NSObject *v6;
  NSObject *v7;
  nw_endpoint_t v8;
  nw_endpoint_t v9;
  const char *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  const sockaddr *v16;
  const sockaddr *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  const sockaddr *v22;
  const char *v23;
  double v24;
  unsigned int v25;
  nw_endpoint_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  NSObject *v31;
  NWLinkConnection *v32;
  const char *v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  const char *v38;
  double v39;
  const char *v40;
  double v41;
  const char *v42;
  double v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  double v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  double v56;
  const char *v57;
  uint64_t v58;
  double v59;
  NSObject *v60;
  id v61;
  uint64_t v62;
  id v63;
  const char *v64;
  double v65;
  NSObject *v66;
  unsigned int v67;
  NSObject *v68;
  _QWORD handler[4];
  id v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  int v74;
  uint8_t buf[4];
  nw_endpoint_t v76;
  __int16 v77;
  NSObject *v78;
  __int16 v79;
  int v80;
  sockaddr address;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_connection_copy_current_path(v3);
  interface_index = nw_path_get_interface_index();
  v6 = nw_connection_copy_parameters(v3);
  v7 = nw_parameters_copy_local_endpoint(v6);
  v8 = nw_connection_copy_endpoint(v3);
  v9 = nw_path_copy_effective_remote_endpoint(v4);
  if ((objc_msgSend__shouldAllowP2PConnectionTo_anotherRemoteEndpoint_(*(void **)(a1 + 32), v10, (uint64_t)v8, v11, v9) & 1) != 0)
  {
    v68 = v6;
    v74 = interface_index;
    v15 = v8;
    v16 = nw_endpoint_get_address(v15);
    if (v16->sa_family == 30 && (v17 = v16, v73 = 0xAAAAAAAAAAAAAAAALL, v18 = nw_nat64_copy_prefixes(), v18 >= 1))
    {
      v67 = interface_index;
      v19 = 0;
      *(_DWORD *)&address.sa_data[10] = 0;
      *(_QWORD *)&address.sa_data[2] = 0;
      *(_WORD *)&address.sa_len = 528;
      *(_WORD *)address.sa_data = *(_WORD *)v17->sa_data;
      v20 = 16 * v18;
      while (!nw_nat64_extract_v4())
      {
        v19 += 16;
        if (v20 == v19)
        {
          interface_index = v67;
          goto LABEL_8;
        }
      }
      v8 = nw_endpoint_create_address(&address);
      objc_msgSend_IDSNWLink(IDSFoundationLog, v57, v58, v59);
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        v76 = v8;
        v77 = 2112;
        v78 = v15;
        v79 = 1024;
        v80 = v74;
        _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "extracted %@ from %@ on if:%u", buf, 0x1Cu);
      }

      v21 = 0;
      interface_index = v67;
    }
    else
    {
LABEL_8:
      v8 = v15;
      v21 = 1;
    }

    v22 = nw_endpoint_get_address(v7);
    if ((v21 & 1) == 0
      && v22->sa_family == 30
      && (v25 = objc_msgSend__NAT64LocalAddressForInterfaceIndex_(*(void **)(a1 + 32), v23, interface_index, v24)) != 0)
    {
      *(_QWORD *)&address.sa_data[6] = 0;
      *(_WORD *)&address.sa_len = 528;
      *(_DWORD *)&address.sa_data[2] = bswap32(v25);
      *(_WORD *)address.sa_data = __rev16(nw_endpoint_get_port(v7));
      v26 = nw_endpoint_create_address(&address);
      objc_msgSend_IDSNWLink(IDSFoundationLog, v27, v28, v29);
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v76 = v7;
        v77 = 2112;
        v78 = v26;
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "converted %@ to %@", buf, 0x16u);
      }

    }
    else
    {
      v26 = v7;
    }
    v32 = [NWLinkConnection alloc];
    v35 = (void *)objc_msgSend_initWithType_interfaceIndex_localEndpoint_remoteEndpoint_(v32, v33, 0, v34, interface_index, v26, v8);
    objc_msgSend_setHasRequiredInterface_(v35, v36, 0, v37);
    objc_msgSend_setConnection_(v35, v38, (uint64_t)v3, v39);
    objc_msgSend_setName_(v35, v40, (uint64_t)CFSTR("UDP connection from listener"), v41);
    objc_msgSend_setProtocolStackDescription_(v35, v42, *(_QWORD *)(a1 + 40), v43);
    _tokenForNWLinkConnection(v35);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    sub_19B98AE78(v35, 1, (uint64_t)"new incoming connection %@ from %@(%@)", v45, v46, v47, v48, v49, (uint64_t)v44);
    if ((IMGetDomainBoolForKey() & 1) != 0
      || (IMGetDomainBoolForKeyWithDefaultValue() & 1) != 0
      || *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
    {
      objc_msgSend_IDSNWLink(IDSFoundationLog, v50, v51, v52);
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        v54 = *(NSObject **)(a1 + 32);
        *(_DWORD *)buf = 134217984;
        v76 = v54;
        _os_log_impl(&dword_19B949000, v53, OS_LOG_TYPE_DEFAULT, "<%p> nw_listener_set_new_connection_handler - disabled by forceQuickRelay or disableP2PLinks", buf, 0xCu);
      }

      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), v55, (uint64_t)v35, v56, 0);
    }
    else
    {
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = sub_19B991A68;
      handler[3] = &unk_1E3C1F4B0;
      v61 = v35;
      v62 = *(_QWORD *)(a1 + 32);
      v70 = v61;
      v71 = v62;
      v63 = v44;
      v72 = v63;
      nw_connection_set_state_changed_handler(v3, handler);
      objc_msgSend__addUDPConnectionInProgress_(*(void **)(a1 + 32), v64, (uint64_t)v63, v65);
      NWLinkQueue();
      v66 = objc_claimAutoreleasedReturnValue();
      nw_connection_set_queue(v3, v66);

      nw_connection_start(v3);
    }

    v7 = v26;
    v6 = v68;
  }
  else
  {
    objc_msgSend_IDSNWLink(IDSFoundationLog, v12, v13, v14);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v76 = v9;
      v77 = 2112;
      v78 = v8;
      _os_log_impl(&dword_19B949000, v31, OS_LOG_TYPE_DEFAULT, "received a late incoming packet from %@(%@) - ignoring", buf, 0x16u);
    }

    nw_connection_cancel(v3);
  }

}

void sub_19B991A68(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  uint64_t v23;
  id v24;

  v5 = a3;
  if (a2 == 5)
  {
    v24 = v5;
    sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v6, v7, v8, v9, v10, v23);
    objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v21, *(_QWORD *)(a1 + 32), v22, *(_QWORD *)(a1 + 48));
    goto LABEL_5;
  }
  if (a2 == 3)
  {
    v24 = v5;
    sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"ready", v6, v7, v8, v9, v10, v23);
    objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
    objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, *(_QWORD *)(a1 + 48));
    objc_msgSend__removeUDPConnectionInProgress_(*(void **)(a1 + 40), v15, *(_QWORD *)(a1 + 48), v16);
    objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 32), v18, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 13));
    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v19, *(_QWORD *)(a1 + 32), v20, 1);
LABEL_5:
    v5 = v24;
  }

}

void sub_19B991B20(uint64_t a1, int a2, void *a3)
{
  const char *v6;
  uint64_t v7;
  id v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  _WORD v21[17];

  *(_QWORD *)&v21[13] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  switch(a2)
  {
    case 4:
      objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v18 = 134217984;
        v19 = v14;
        _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "listener %p cancelled. Invalidating...", (uint8_t *)&v18, 0xCu);
      }

      nw_listener_set_new_connection_handler(*(nw_listener_t *)(a1 + 32), 0);
      nw_listener_set_state_changed_handler(*(nw_listener_t *)(a1 + 32), 0);
      goto LABEL_13;
    case 3:
      objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 32);
        v18 = 134218242;
        v19 = v16;
        v20 = 2112;
        *(_QWORD *)v21 = v16;
        _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "listener %p failed %@", (uint8_t *)&v18, 0x16u);
      }

      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
      goto LABEL_13;
    case 2:
      objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = **(unsigned __int16 **)(a1 + 64);
        v18 = 134218498;
        v19 = v11;
        v20 = 1024;
        *(_DWORD *)v21 = v12;
        v21[2] = 2112;
        *(_QWORD *)&v21[3] = v11;
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "listener %p on port %u ready %@", (uint8_t *)&v18, 0x1Cu);
      }

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
LABEL_13:
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
      goto LABEL_17;
  }
  objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    sub_19BAEF928(a1, a2, v17);

LABEL_17:
}

void sub_19B992068(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  const char *v23;
  double v24;
  uint64_t v25;
  id v26;

  v5 = a3;
  switch(a2)
  {
    case 5:
      v26 = v5;
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v6, v7, v8, v9, v10, v25);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v21, *(_QWORD *)(a1 + 32), v22, *(_QWORD *)(a1 + 48));
      goto LABEL_7;
    case 4:
      v26 = v5;
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v23, *(_QWORD *)(a1 + 32), v24, 0);
      goto LABEL_7;
    case 3:
      v26 = v5;
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"ready", v6, v7, v8, v9, v10, v25);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, *(_QWORD *)(a1 + 48));
      objc_msgSend__removeUDPConnectionInProgress_(*(void **)(a1 + 40), v15, *(_QWORD *)(a1 + 48), v16);
      objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 32), v18, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 13));
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v19, *(_QWORD *)(a1 + 32), v20, 1);
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_7:
      v5 = v26;
      break;
  }

}

uint64_t sub_19B992330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;

  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"_sheduleRetryConnectionIfNeeded(%s): retrying", a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 56));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"_sheduleRetryConnectionIfNeeded(%s): logging connection tree after retry", v9, v10, v11, v12, v13, *(_QWORD *)(a1 + 56));
  return objc_msgSend_logConnectionTree(*(void **)(a1 + 40), v14, v15, v16);
}

uint64_t sub_19B99251C(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__createChannelDataConnectionForH2_retryIndex_, *(_QWORD *)(a1 + 40), a2);
}

void sub_19B99252C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  void *v27;
  const char *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  NSObject *v42;
  uint64_t v43;
  _QWORD completion[5];
  id v45;
  const char *v46;

  v10 = a2;
  if (v10)
  {
    if (!objc_msgSend__shouldFail(*(void **)(a1 + 32), v3, v4, v11))
    {
      objc_msgSend_setName_(v10, v12, (uint64_t)CFSTR("H2 Channel Data connection"), v18);
      objc_msgSend_remoteEndpoint(v10, v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      _createQRContentContext(6, (uint64_t)"/QR/ChannelData", v26, 0, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setContentContext_(v10, v28, (uint64_t)v27, v29);

      sub_19B98AE78(v10, 1, (uint64_t)"_createChannelDataConnectionForH2: sending %s with empty body", v30, v31, v32, v33, v34, (uint64_t)"/QR/ChannelData");
      objc_msgSend_connection(v10, v35, v36, v37);
      v38 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_contentContext(v10, v39, v40, v41);
      v42 = objc_claimAutoreleasedReturnValue();
      completion[0] = MEMORY[0x1E0C809B0];
      completion[1] = 3221225472;
      completion[2] = sub_19B9926D0;
      completion[3] = &unk_1E3C1F5A0;
      completion[4] = *(_QWORD *)(a1 + 32);
      v45 = v10;
      v46 = "/QR/ChannelData";
      nw_connection_send(v38, MEMORY[0x1E0C80D00], v42, 0, completion);

      goto LABEL_7;
    }
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"_createChannelDataConnectionForH2: failed to peel off nwLinkConnection for h2 channeldata connection", v13, v14, v15, v16, v17, v43);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v19, (uint64_t)v10, v20);
  }
  else
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"_createChannelDataConnectionForH2: failed to peel off nwLinkConnection for h2 channeldata connection", v5, v6, v7, v8, v9, v43);
  }
  objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), v21, 0, v22, *(_QWORD *)(a1 + 40), "CD H2", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
LABEL_7:

}

void sub_19B9926D0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int shouldFail;
  uint64_t v12;
  double v13;
  const char *v14;
  double v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  double v24;
  void *v25;
  id v26;

  v3 = a2;
  v26 = v3;
  if (v3 || (shouldFail = objc_msgSend__shouldFail(*(void **)(a1 + 32), 0, v4, v10), v3 = 0, shouldFail))
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"_createChannelDataConnectionForH2: send failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v3);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v14, *(_QWORD *)(a1 + 40), v15);
  }
  else
  {
    v16 = *(void **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    objc_msgSend_contentContext(v16, 0, v12, v13);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    sub_19B98AE78(v16, 1, (uint64_t)"_createChannelDataConnectionForH2: sent %s, h2context: %p", v18, v19, v20, v21, v22, v17);

    objc_msgSend__tryReadH2Header_(*(void **)(a1 + 32), v23, *(_QWORD *)(a1 + 40), v24);
  }

}

void sub_19B99277C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  double v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  sub_19B98AE78(v11, 2, (uint64_t)"_createChannelDataConnectionForH2: cancelled", v3, v4, v5, v6, v7, v10);
  objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), v8, (uint64_t)v11, v9, *(_QWORD *)(a1 + 40), "CD H2", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_19B992890(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  double v17;
  const char *v18;
  double v19;
  NSObject *v20;
  nw_protocol_metadata_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t status;
  double v35;
  const char *v36;
  double v37;
  const char *v38;
  double v39;
  IDSCapsuleParser *v40;
  void *v41;
  const char *v42;
  double v43;
  void *v44;
  const char *v45;
  double v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  double v53;
  const char *v54;
  double v55;
  uint64_t v56;
  id v57;
  id v58;

  v57 = a2;
  v8 = a3;
  v16 = a5;
  if (v16 || (objc_msgSend__shouldFail(*(void **)(a1 + 32), v9, v10, v17) & 1) != 0)
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"_tryReadH2Header: receive failed (%@)", v11, v12, v13, v14, v15, (uint64_t)v16);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v18, *(_QWORD *)(a1 + 40), v19);
    goto LABEL_4;
  }
  if (!v8)
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"Null context", v11, v12, v13, v14, v15, v56);
    goto LABEL_11;
  }
  v20 = nw_protocol_copy_http_definition();
  v21 = nw_content_context_copy_protocol_metadata(v8, v20);

  if (!v21)
  {
LABEL_11:
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"_tryReadH2Header: failed to get metadata; reading some more...",
      v22,
      v23,
      v24,
      v25,
      v26,
      v56);
    objc_msgSend__tryReadH2Header_(*(void **)(a1 + 32), v38, *(_QWORD *)(a1 + 40), v39);
    goto LABEL_4;
  }
  status = nw_http_metadata_get_status();
  if ((_DWORD)status == 200 && (objc_msgSend__shouldFail(*(void **)(a1 + 32), v27, v28, v35) & 1) == 0)
  {
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"_tryReadH2Header: received 200 OK", v29, v30, v31, v32, v33, v56);
    v40 = [IDSCapsuleParser alloc];
    NWLinkQueue();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = (void *)objc_msgSend_initWithQueue_(v40, v42, (uint64_t)v41, v43);
    objc_msgSend_setCapsuleParser_(*(void **)(a1 + 40), v45, (uint64_t)v44, v46);

    v47 = *(_QWORD *)(a1 + 48);
    objc_msgSend_capsuleParser(*(void **)(a1 + 40), v48, v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setConnection_(v51, v52, v47, v53);

    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 32), v54, *(_QWORD *)(a1 + 40), v55, 1);
  }
  else
  {
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"_tryReadH2Header: response status %u", v29, v30, v31, v32, v33, status);
    v58 = *(id *)(a1 + 40);
    nw_http_metadata_enumerate_headers();
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v36, *(_QWORD *)(a1 + 40), v37);

  }
LABEL_4:

}

uint64_t sub_19B992A8C(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  size_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v9 = (a3 + 1);
  if (a3 != -1)
    memset((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  v10 = __CFADD__(a5, 1);
  v11 = (a5 + 1);
  if (!v10)
    memset((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), 170, v11);
  strlcpy((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), a4, v11);
  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"_tryReadH2Header: %s: %s", v12, v13, v14, v15, v16, (uint64_t)v18 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

uint64_t sub_19B992F3C(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__createChannelDataConnection_retryIndex_, *(_QWORD *)(a1 + 40), a2);
}

void sub_19B992F4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  const char *v19;
  double v20;
  uint64_t v21;
  id v22;

  v5 = a3;
  v22 = v5;
  switch((_DWORD)a2)
  {
    case 5:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"CD cancelled", v6, v7, v8, v9, v10, v21);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(_QWORD *)(a1 + 32), v16, *(_QWORD *)(a1 + 48));
      objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 32), v18, *(_QWORD *)(a1 + 56), "CD", *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 64));
      break;
    case 4:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"CD failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v19, *(_QWORD *)(a1 + 32), v20);
      break;
    case 3:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"CD ready", v6, v7, v8, v9, v10, v21);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"CD state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }

}

void sub_19B9932AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  uint64_t v19;
  id v20;

  v5 = a3;
  v20 = v5;
  switch((_DWORD)a2)
  {
    case 5:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"RU cancelled", v6, v7, v8, v9, v10, v19);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(_QWORD *)(a1 + 32), v16, *(_QWORD *)(a1 + 48));
      break;
    case 4:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"RU failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 32), v18, 0);
      break;
    case 3:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"RU ready", v6, v7, v8, v9, v10, v19);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"RU state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }

}

uint64_t sub_19B99368C(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__createIndicationConnection_retryIndex_, *(_QWORD *)(a1 + 40), a2);
}

void sub_19B99369C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  double v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD completion[5];
  id v39;
  const char *v40;
  uint64_t __buf;

  v10 = a2;
  if (v10)
  {
    if (!objc_msgSend__shouldFail(*(void **)(a1 + 32), v3, v4, v11))
    {
      objc_msgSend_setName_(v10, v12, (uint64_t)CFSTR("Indication connection"), v18);
      __buf = 0xAAAAAAAAAAAAAAAALL;
      arc4random_buf(&__buf, 8uLL);
      objc_msgSend_remoteEndpoint(v10, v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      _createQRContentContext(1, (uint64_t)"/QR/Indications", v26, __buf, 0);
      v27 = objc_claimAutoreleasedReturnValue();

      sub_19B98AE78(v10, 1, (uint64_t)"sending %s(%llu) with empty body", v28, v29, v30, v31, v32, (uint64_t)"/QR/Indications");
      objc_msgSend_connection(v10, v33, v34, v35);
      v36 = objc_claimAutoreleasedReturnValue();
      completion[0] = MEMORY[0x1E0C809B0];
      completion[1] = 3221225472;
      completion[2] = sub_19B993838;
      completion[3] = &unk_1E3C1F5A0;
      completion[4] = *(_QWORD *)(a1 + 32);
      v39 = v10;
      v40 = "/QR/Indications";
      nw_connection_send(v36, MEMORY[0x1E0C80D00], v27, 1, completion);

      goto LABEL_7;
    }
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"failed to peel off nwLinkConnection for indication connection", v13, v14, v15, v16, v17, v37);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v19, (uint64_t)v10, v20);
  }
  else
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"failed to peel off nwLinkConnection for indication connection", v5, v6, v7, v8, v9, v37);
  }
  objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), v21, 0, v22, *(_QWORD *)(a1 + 40), "ID", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
LABEL_7:

}

void sub_19B993838(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  const char *v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  void *v18;
  _QWORD completion[5];
  id v20;

  v10 = a2;
  if (v10 || objc_msgSend__shouldFail(*(void **)(a1 + 32), v3, v4, v11))
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"send failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v10);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v12, *(_QWORD *)(a1 + 40), v13);
  }
  else
  {
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"sent %s", v5, v6, v7, v8, v9, *(_QWORD *)(a1 + 48));
    objc_msgSend_connection(*(void **)(a1 + 40), v14, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    completion[0] = MEMORY[0x1E0C809B0];
    completion[1] = 3221225472;
    completion[2] = sub_19B993928;
    completion[3] = &unk_1E3C1F668;
    v18 = *(void **)(a1 + 40);
    completion[4] = *(_QWORD *)(a1 + 32);
    v20 = v18;
    nw_connection_receive(v17, 0, 0, completion);

  }
}

void sub_19B993928(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  double v17;
  void *v18;
  const char *v19;
  const char *v20;
  double v21;
  NSObject *v22;
  nw_protocol_metadata_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t status;
  double v32;
  const char *v33;
  double v34;
  const char *v35;
  double v36;
  uint64_t v37;
  id v38;
  id v39;

  v38 = a2;
  v8 = a3;
  v16 = a5;
  if (v16 || (objc_msgSend__shouldFail(*(void **)(a1 + 32), v9, v10, v17) & 1) != 0)
  {
    v18 = *(void **)(a1 + 40);
    v37 = (uint64_t)v16;
    v19 = "receive failed (%@)";
LABEL_4:
    sub_19B98AE78(v18, 2, (uint64_t)v19, v11, v12, v13, v14, v15, v37);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v20, *(_QWORD *)(a1 + 40), v21);
    goto LABEL_5;
  }
  if (!v8)
  {
    sub_19B98AE78(*(void **)(a1 + 40), 2, (uint64_t)"Null context", v11, v12, v13, v14, v15, v37);
    goto LABEL_12;
  }
  v22 = nw_protocol_copy_http_definition();
  v23 = nw_content_context_copy_protocol_metadata(v8, v22);

  if (!v23)
  {
LABEL_12:
    v18 = *(void **)(a1 + 40);
    v19 = "failed to get metadata";
    goto LABEL_4;
  }
  status = nw_http_metadata_get_status();
  if ((_DWORD)status == 200 && (objc_msgSend__shouldFail(*(void **)(a1 + 32), v24, v25, v32) & 1) == 0)
  {
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"received 200 OK", v26, v27, v28, v29, v30, v37);
    objc_msgSend__handleIncomingIndicationMessage_(*(void **)(a1 + 32), v35, *(_QWORD *)(a1 + 40), v36);
  }
  else
  {
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"response status %u", v26, v27, v28, v29, v30, status);
    v39 = *(id *)(a1 + 40);
    nw_http_metadata_enumerate_headers();
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v33, *(_QWORD *)(a1 + 40), v34);

  }
LABEL_5:

}

uint64_t sub_19B993AB4(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  size_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v9 = (a3 + 1);
  if (a3 != -1)
    memset((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  v10 = __CFADD__(a5, 1);
  v11 = (a5 + 1);
  if (!v10)
    memset((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), 170, v11);
  strlcpy((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), a4, v11);
  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"%s: %s", v12, v13, v14, v15, v16, (uint64_t)v18 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

uint64_t sub_19B993BC0(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, *(_QWORD *)(a1 + 40), "ID", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_19B993E10(uint64_t a1, void *a2)
{
  id v3;
  NWLinkConnection *v4;
  const char *v5;
  double v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  nw_parameters_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  double v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t isH2Connection;
  const char *v26;
  double v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  const char *v32;
  double v33;
  const char *v34;
  double v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  double v50;
  const char *v51;
  double v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD handler[4];
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  _QWORD *v66;
  _QWORD v67[3];
  char v68;

  v3 = a2;
  v4 = [NWLinkConnection alloc];
  v7 = (void *)objc_msgSend_initWithBaseNWLinkConnection_type_(v4, v5, (uint64_t)v3, v6, *(_QWORD *)(a1 + 64));
  _tokenForNWLinkConnection(v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_connection(v3, v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = nw_connection_copy_parameters(v12);
  v14 = nw_parameters_copy(v13);

  objc_msgSend_protocolStackDescription(*(void **)(a1 + 32), v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setProtocolStackDescription_(v7, v19, (uint64_t)v18, v20);

  v21 = *(void **)(a1 + 40);
  isH2Connection = objc_msgSend_isH2Connection(v3, v22, v23, v24);
  objc_msgSend__setParameters_NWLinkConnection_sharePortWithListener_isTCP_(v21, v26, (uint64_t)v14, v27, v7, 0, isH2Connection);
  v30 = nw_connection_create_with_connection();
  if (v30)
  {
    objc_msgSend_setConnection_(v7, v28, (uint64_t)v30, v31);
    objc_msgSend_setName_(v7, v32, (uint64_t)CFSTR("(unnamed peeled off connection)"), v33);
    objc_msgSend_setHasQUICStarted_(v7, v34, 1, v35);
    if (*(_QWORD *)(a1 + 64) == 6)
    {
      _tokenForNWLinkConnection(v7);
      v36 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v36;
    }
    v67[0] = 0;
    v67[1] = v67;
    v67[2] = 0x2020000000;
    v68 = 0;
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = sub_19B9940C8;
    handler[3] = &unk_1E3C1F690;
    v37 = v7;
    v61 = v37;
    v66 = v67;
    v38 = *(id *)(a1 + 48);
    v39 = *(_QWORD *)(a1 + 40);
    v64 = v38;
    v62 = v39;
    v8 = v8;
    v63 = v8;
    v65 = *(id *)(a1 + 56);
    nw_connection_set_state_changed_handler(v30, handler);
    v43 = objc_msgSend_connectionID(v3, v40, v41, v42);
    sub_19B98AE78(v37, 1, (uint64_t)"peeled off [C%llu]", v44, v45, v46, v47, v48, v43);
    objc_msgSend_setParent_(v37, v49, (uint64_t)v3, v50);
    objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 40), v51, (uint64_t)v37, v52, v8);
    NWLinkQueue();
    v53 = objc_claimAutoreleasedReturnValue();
    nw_connection_set_queue(v30, v53);

    nw_connection_start(v30);
    _Block_object_dispose(v67, 8);
  }
  else
  {
    v54 = objc_msgSend_connectionID(v3, v28, v29, v31);
    sub_19B98AE78(v7, 2, (uint64_t)"could NOT peel off a new connection from [C%llu] for %@", v55, v56, v57, v58, v59, v54);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_19B9940B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B9940C8(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  uint64_t v15;
  const char *v16;
  double v17;
  uint64_t v18;
  id v19;
  id v20;

  v5 = a3;
  switch(a2)
  {
    case 5:
      v20 = v5;
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v6, v7, v8, v9, v10, v18);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, *(_QWORD *)(a1 + 48));
      v5 = v20;
      v15 = *(_QWORD *)(a1 + 64);
      if (!v15)
        break;
      (*(void (**)(uint64_t, _QWORD))(v15 + 16))(v15, *(_QWORD *)(a1 + 32));
LABEL_11:
      v5 = v20;
      break;
    case 4:
      v20 = v5;
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      }
      objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v16, *(_QWORD *)(a1 + 32), v17);
      goto LABEL_11;
    case 3:
      v19 = v5;
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"ready", v6, v7, v8, v9, v10, v18);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      v5 = v19;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        v5 = v19;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      }
      break;
  }

}

uint64_t sub_19B994204(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19B9949B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19B9949EC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = nw_qpod_set_secrets();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    sub_19B98AE78(*(void **)(a1 + 48), 1, (uint64_t)"setting QUIC ConnectionIDs: localCID %@, remoteCID %@", v3, v4, v5, v6, v7, *(_QWORD *)(a1 + 56));
    nw_qpod_set_scid();
    nw_qpod_set_dcid();
  }

}

void sub_19B994A7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  uint64_t v17;
  const char *v18;
  double v19;
  uint64_t v20;
  id v21;

  v5 = a3;
  v21 = v5;
  switch((_DWORD)a2)
  {
    case 5:
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      }
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod cancelled", v6, v7, v8, v9, v10, v20);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(_QWORD *)(a1 + 32), v16, *(_QWORD *)(a1 + 48));
      break;
    case 4:
      v17 = (uint64_t)v5;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        v17 = (uint64_t)v21;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      }
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod failed (%@)", v6, v7, v8, v9, v10, v17);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v18, *(_QWORD *)(a1 + 32), v19, 0);
      break;
    case 3:
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
        objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      }
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod ready", v6, v7, v8, v9, v10, v20);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }

}

void sub_19B99504C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19B995070(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = nw_qpod_setup_secrets();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"setting QUIC ConnectionIDs: localCID %@, remoteCID %@", v3, v4, v5, v6, v7, *(_QWORD *)(a1 + 48));
    nw_qpod_set_scid();
    nw_qpod_set_dcid();
  }

}

void sub_19B995100(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  uint64_t v19;
  id v20;

  v5 = a3;
  v20 = v5;
  switch((_DWORD)a2)
  {
    case 5:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod cancelled", v6, v7, v8, v9, v10, v19);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(_QWORD *)(a1 + 32), v16, *(_QWORD *)(a1 + 48));
      break;
    case 4:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 32), v18, 0);
      break;
    case 3:
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod ready", v6, v7, v8, v9, v10, v19);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }

}

void sub_19B9955E8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  const char *PathForMessageType;
  double v19;
  int v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  NSObject *v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  const char *v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  NSObject *v59;
  const char *v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD completion[4];
  id v65;
  uint64_t v66;
  const char *v67;

  v3 = a2;
  v11 = v3;
  if (!v3)
  {
    sub_19B98AE78(0, 2, (uint64_t)"send failed: no connection", v5, v6, v7, v8, v9, v62);
    goto LABEL_14;
  }
  objc_msgSend_setMessageType_(v3, v4, *(unsigned int *)(a1 + 64), v10);
  objc_msgSend_setTransactionID_(v11, v12, *(_QWORD *)(a1 + 56), v13);
  PathForMessageType = _getPathForMessageType(*(unsigned int *)(a1 + 64), v14, v15, v16);
  v20 = *(_DWORD *)(a1 + 64);
  v21 = 1;
  if (v20 > 26)
  {
    if (v20 != 27)
    {
      if (v20 != 1001)
      {
LABEL_9:
        v21 = 4;
        goto LABEL_10;
      }
      v21 = 6;
    }
  }
  else if (v20 != 3)
  {
    goto LABEL_9;
  }
LABEL_10:
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)CFSTR("%s"), v19, PathForMessageType);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v11, v23, (uint64_t)v22, v24);

  objc_msgSend_remoteEndpoint(v11, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  _createQRContentContext(v21, (uint64_t)PathForMessageType, v28, *(_QWORD *)(a1 + 56), 0);
  v29 = objc_claimAutoreleasedReturnValue();

  dispatch_data_get_size(*(dispatch_data_t *)(a1 + 32));
  sub_19B98AE78(v11, 1, (uint64_t)"sending %s(%llu) %ldB", v30, v31, v32, v33, v34, (uint64_t)PathForMessageType);
  if ((objc_msgSend_hasQUICStarted(*(void **)(a1 + 40), v35, v36, v37) & 1) != 0)
  {
    objc_msgSend_connection(v11, v38, v39, v45);
    v46 = objc_claimAutoreleasedReturnValue();
    v47 = *(NSObject **)(a1 + 32);
    completion[0] = MEMORY[0x1E0C809B0];
    completion[1] = 3221225472;
    completion[2] = sub_19B99582C;
    completion[3] = &unk_1E3C1F5A0;
    v48 = v11;
    v49 = *(_QWORD *)(a1 + 48);
    v65 = v48;
    v66 = v49;
    v67 = PathForMessageType;
    nw_connection_send(v46, v47, v29, 1, completion);

  }
  else
  {
    sub_19B98AE78(v11, 1, (uint64_t)"start: got early data; starting connection and sending",
      v40,
      v41,
      v42,
      v43,
      v44,
      v63);
    objc_msgSend_setHasQUICStarted_(*(void **)(a1 + 40), v50, 1, v51);
    objc_msgSend_connection(v11, v52, v53, v54);
    v55 = objc_claimAutoreleasedReturnValue();
    nw_connection_send(v55, *(dispatch_data_t *)(a1 + 32), v29, 1, (nw_connection_send_completion_t)*MEMORY[0x1E0CCECE0]);

    objc_msgSend_connection(v11, v56, v57, v58);
    v59 = objc_claimAutoreleasedReturnValue();
    nw_connection_start(v59);

    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 48), v60, (uint64_t)v11, v61, 0);
  }

LABEL_14:
}

uint64_t sub_19B99582C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const char *v10;
  double v11;
  const char *v13;
  double v14;

  v9 = *(void **)(a1 + 32);
  if (a2)
  {
    sub_19B98AE78(v9, 2, (uint64_t)"send failed (%@)", a4, a5, a6, a7, a8, a2);
    return objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v10, *(_QWORD *)(a1 + 32), v11, 0);
  }
  else
  {
    sub_19B98AE78(v9, 1, (uint64_t)"sent %s request", a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 48));
    return objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 32), v14, 0);
  }
}

uint64_t sub_19B9958A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  double v10;

  if (a2)
  {
    v8 = result;
    sub_19B98AE78(*(void **)(result + 32), 2, (uint64_t)"send failed (%@)", a4, a5, a6, a7, a8, a2);
    return objc_msgSend__failNWLinkConnection_(*(void **)(v8 + 40), v9, *(_QWORD *)(v8 + 32), v10);
  }
  return result;
}

uint64_t sub_19B9958EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  double v10;

  if (a2)
  {
    v8 = result;
    sub_19B98AE78(*(void **)(result + 32), 2, (uint64_t)"_sendData: h2 send failed (%@)", a4, a5, a6, a7, a8, a2);
    return objc_msgSend__failNWLinkConnection_(*(void **)(v8 + 40), v9, *(_QWORD *)(v8 + 32), v10);
  }
  return result;
}

void sub_19B995AD0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  double v33;
  void *v34;
  id *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  const char *v40;
  double v41;
  dispatch_data_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  dispatch_data_t v48;
  const char *v49;
  uint64_t v50;
  double v51;
  NSObject *v52;
  NSObject *v53;
  int status;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  const char *PathForMessageType;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  double v81;
  NSObject *v82;
  NSObject *v83;
  const sockaddr *address;
  const char *v85;
  uint64_t v86;
  double v87;
  NSObject *v88;
  const sockaddr *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  const char *v96;
  uint64_t v97;
  double v98;
  const char *v99;
  uint64_t v100;
  double v101;
  const char *v102;
  uint64_t v103;
  double v104;
  __int16 v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  const char *v114;
  uint64_t v115;
  double v116;
  const char *v117;
  id v118;
  const char *v119;
  uint64_t v120;
  double v121;
  const char *v122;
  double v123;
  void *v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  double v128;
  id WeakRetained;
  id v130;
  char v131;
  id v132;
  const char *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  int8x16_t v137;
  _QWORD v138[4];
  int8x16_t v139;
  id *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t, char *, int, const char *, int);
  void *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, char *, int, const char *, int);
  void *v149;
  id v150;
  uint64_t *v151;
  void **v152;
  uint64_t *v153;
  int v154;
  void *buffer_ptr;
  void **p_buffer_ptr;
  uint64_t v157;
  char v158;
  size_t size_ptr;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  void *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a5;
  sub_19B98AE78(*(void **)(a1 + 32), 3, (uint64_t)"receive handler called", v11, v12, v13, v14, v15, v135);
  v160 = 0;
  v161 = &v160;
  v162 = 0x2020000000;
  v163 = 0;
  v164 = 0;
  v165 = &v164;
  v166 = 0xA010000000;
  v167 = &unk_19BB6F9F9;
  v23 = 0.0;
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  v172 = 0u;
  v173 = 0u;
  v174 = 0u;
  v175 = 0u;
  if (v10)
  {
    sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"receive failed (%@)", v18, v19, v20, v21, v22, (uint64_t)v10);
    if (*(_DWORD *)(a1 + 48) == 22)
    {
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"generating empty /QR/UnAllocBind response", v25, v26, v27, v28, v29, v136);
      objc_msgSend_dataWithEmptyUnAllocBindResponse(IDSQRProtoMessage, v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = _IDSLinkPacketBufferCreate();
      v39 = objc_msgSend_length(v34, v36, v37, v38);
      v35[2] = (id)v39;
      objc_msgSend_getBytes_length_(v34, v40, (uint64_t)*v35, v41, v39);

    }
    else
    {
      v35 = 0;
    }
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v24, *(_QWORD *)(a1 + 32), v30);
    goto LABEL_27;
  }
  if (!v8)
  {
    v35 = 0;
    if (!v9)
      goto LABEL_27;
LABEL_13:
    v52 = nw_protocol_copy_http_definition();
    v53 = nw_content_context_copy_protocol_metadata(v9, v52);

    if (v53)
    {
      status = nw_http_metadata_get_status();
      v55 = *(void **)(a1 + 32);
      PathForMessageType = _getPathForMessageType(*(unsigned int *)(a1 + 48), v56, v57, v58);
      objc_msgSend_transactionID(*(void **)(a1 + 32), v60, v61, v62);
      sub_19B98AE78(v55, 1, (uint64_t)"received %s(%llu) %u response %@", v63, v64, v65, v66, v67, (uint64_t)PathForMessageType);
      buffer_ptr = 0;
      p_buffer_ptr = &buffer_ptr;
      v157 = 0x2020000000;
      v158 = 0;
      v68 = MEMORY[0x1E0C809B0];
      v146 = MEMORY[0x1E0C809B0];
      v147 = 3221225472;
      v148 = sub_19B9961C8;
      v149 = &unk_1E3C1F7A8;
      v151 = &v160;
      v150 = *(id *)(a1 + 32);
      v152 = &buffer_ptr;
      v153 = &v164;
      v154 = status;
      nw_http_metadata_enumerate_headers();
      if (*((_BYTE *)p_buffer_ptr + 24))
      {
        v72 = *(void **)(a1 + 32);
        v73 = objc_msgSend_transactionID(v72, v69, v70, v71);
        sub_19B98AE78(v72, 1, (uint64_t)"transactionID mismatch! expected: %llu", v74, v75, v76, v77, v78, v73);
        v141 = v68;
        v142 = 3221225472;
        v143 = sub_19B99637C;
        v144 = &unk_1E3C1F5F0;
        v145 = *(id *)(a1 + 32);
        nw_http_metadata_enumerate_headers();
        v79 = *(_QWORD *)(a1 + 40);
        if (!*(_BYTE *)(v79 + 15))
        {
          *(_BYTE *)(v79 + 15) = 1;
          WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 192));
          if (WeakRetained)
          {
            v130 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 192));
            v131 = objc_opt_respondsToSelector();

            if ((v131 & 1) != 0)
            {
              v132 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 192));
              objc_msgSend_linkTransactionIDMismatchDetected_(v132, v133, *(_QWORD *)(a1 + 40), v134);

            }
          }
        }

      }
      if (status != 200)
      {
        if (!v35)
        {
          v35 = _IDSLinkPacketBufferCreate();
          v35[2] = 0;
        }
        *((_DWORD *)v35 + 318) = *(_DWORD *)(a1 + 48);
        *((_DWORD *)v35 + 319) = status;
      }

      _Block_object_dispose(&buffer_ptr, 8);
    }
    else
    {
      v82 = nw_protocol_copy_ip_definition();
      v53 = nw_content_context_copy_protocol_metadata(v9, v82);

      if (v53 && v35)
        *((_BYTE *)v35 + 442) = nw_ip_metadata_get_ecn_flag(v53);
    }

    goto LABEL_27;
  }
  buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
  size_ptr = 0xAAAAAAAAAAAAAAAALL;
  v42 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
  if (!v42)
  {
    sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"dispatch_data_create_map failed", v43, v44, v45, v46, v47, v136);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v80, *(_QWORD *)(a1 + 32), v81);
    goto LABEL_50;
  }
  v48 = v42;
  v35 = _IDSLinkPacketBufferCreateWithSize((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", 3188, size_ptr);
  memcpy(*v35, buffer_ptr, size_ptr);
  v35[2] = (id)size_ptr;
  if (objc_msgSend_type(*(void **)(a1 + 32), v49, v50, v51) == 3)
    *((_BYTE *)v35 + 46) = 1;

  if (v9)
    goto LABEL_13;
LABEL_27:
  if (v35)
  {
    objc_msgSend_localEndpoint(*(void **)(a1 + 32), v16, v17, v23);
    v83 = objc_claimAutoreleasedReturnValue();
    address = nw_endpoint_get_address(v83);

    objc_msgSend_remoteEndpoint(*(void **)(a1 + 32), v85, v86, v87);
    v88 = objc_claimAutoreleasedReturnValue();
    v89 = nw_endpoint_get_address(v88);

    memcpy(v35 + 7, address, address->sa_len);
    memcpy(v35 + 23, v89, v89->sa_len);
    memcpy(v35 + 39, v165 + 4, *((unsigned __int8 *)v165 + 32));
    *((_BYTE *)v35 + 44) = *(_BYTE *)(a1 + 52);
    v93 = v161[3];
    if (!v93)
      v93 = objc_msgSend_transactionID(*(void **)(a1 + 32), v90, v91, v92);
    v35[157] = (id)v93;
    objc_msgSend_sessionID(*(void **)(a1 + 32), v90, v91, v92);
    v94 = objc_claimAutoreleasedReturnValue();
    v95 = v35[158];
    v35[158] = (id)v94;

    *((_DWORD *)v35 + 12) = objc_msgSend_interfaceIndex(*(void **)(a1 + 32), v96, v97, v98);
    if (objc_msgSend_type(*(void **)(a1 + 32), v99, v100, v101) == 7
      || objc_msgSend_type(*(void **)(a1 + 32), v102, v103, v104) == 8
      || objc_msgSend_type(*(void **)(a1 + 32), v102, v103, v104) == 9
      || objc_msgSend_type(*(void **)(a1 + 32), v102, v103, v104) == 10)
    {
      v105 = objc_msgSend_channelNumber(*(void **)(a1 + 32), v102, v103, v104);
    }
    else
    {
      v105 = 0;
    }
    *((_WORD *)v35 + 640) = v105;
    if (objc_msgSend_type(*(void **)(a1 + 32), v102, v103, v104) == 9
      || objc_msgSend_type(*(void **)(a1 + 32), v106, v107, v113) == 10)
    {
      v117 = "received p2p qpod packet";
    }
    else
    {
      v117 = "received qr qpod packet";
      if (objc_msgSend_type(*(void **)(a1 + 32), v114, v115, v116) != 7
        && objc_msgSend_type(*(void **)(a1 + 32), v126, v127, v128) != 8)
      {
        v117 = "received packet";
      }
    }
    sub_19B98AE78(*(void **)(a1 + 32), 3, (uint64_t)v117, v108, v109, v110, v111, v112, v136);
    v138[0] = MEMORY[0x1E0C809B0];
    v138[1] = 3221225472;
    v138[2] = sub_19B996488;
    v138[3] = &unk_1E3C1F7D0;
    v140 = v35;
    v137 = *(int8x16_t *)(a1 + 32);
    v118 = (id)v137.i64[0];
    v139 = vextq_s8(v137, v137, 8uLL);
    IDSTransportThreadAddBlock(v138);

  }
  objc_msgSend_setShouldTreatNextTryAsFirstTry_(*(void **)(a1 + 32), v16, 1, v23);
  if (v10 || !*(_BYTE *)(a1 + 53))
  {
    if (objc_msgSend_type(*(void **)(a1 + 32), v119, v120, v121) != 5)
    {
      v125 = *(_QWORD *)(a1 + 32);
      v124 = *(void **)(a1 + 40);
      if (v10)
        objc_msgSend__failNWLinkConnection_(v124, v122, v125, v123);
      else
        objc_msgSend__cancelNWLinkConnection_remove_(v124, v122, v125, v123, 0);
    }
  }
  else
  {
    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v119, *(_QWORD *)(a1 + 32), v121, 1);
  }
LABEL_50:
  _Block_object_dispose(&v164, 8);
  _Block_object_dispose(&v160, 8);

}

void sub_19B99616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19B9961C8(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  size_t v9;
  size_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v9 = (a3 + 1);
  if (a3 != -1)
    memset((char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  v10 = (a5 + 1);
  if (a5 != -1)
    memset((char *)v24 - ((v10 + 15) & 0x1FFFFFFF0), 170, v10);
  strlcpy((char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v24 - ((v10 + 15) & 0x1FFFFFFF0), a4, v10);
  if (!strcmp((const char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), "txn_id"))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = strtoull((const char *)v24 - ((v10 + 15) & 0x1FFFFFFF0), 0, 0);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (v19 != objc_msgSend_transactionID(*(void **)(a1 + 32), v20, v21, v22))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else if (!strcmp((const char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), "client_address"))
  {
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v11, (uint64_t)v24 - ((v10 + 15) & 0x1FFFFFFF0), v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    IPPortStringToSA(v18, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32);

  }
  if (*(_DWORD *)(a1 + 64) != 200)
    sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"%s: %s", v12, v13, v14, v15, v16, (uint64_t)v24 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

uint64_t sub_19B99637C(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  size_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v9 = (a3 + 1);
  if (a3 != -1)
    memset((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  v10 = __CFADD__(a5, 1);
  v11 = (a5 + 1);
  if (!v10)
    memset((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), 170, v11);
  strlcpy((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), a4, v11);
  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"%s: %s", v12, v13, v14, v15, v16, (uint64_t)v18 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

void sub_19B996488(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  double v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  v5 = objc_msgSend_link_didReceivePacket_fromDeviceUniqueID_cbuuid_(WeakRetained, v3, *(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176));

  if ((v5 & 1) == 0)
  {
    *(_BYTE *)(**(_QWORD **)(a1 + 48) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16)) = 0;
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"content (%dB) \"%s\" NOT processed", v6, v7, v8, v9, v10, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
  }
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", (const char *)0xCDE, *(_QWORD *)(a1 + 48), v11);
}

uint64_t sub_19B996520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  double v11;

  if (a2 == 16725925 || a3 == 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"get capsuleType: 0x%x, data: %@", a4, a5, a6, a7, a8, a2);
  return objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v10, *(_QWORD *)(a1 + 32), v11, *(unsigned __int8 *)(a1 + 56));
}

void sub_19B996644(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_data_t v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  const char *v28;
  double v29;
  _QWORD completion[4];
  id v31;
  uint64_t v32;
  int v33;
  size_t size_ptr;
  void *buffer_ptr;

  v8 = a2;
  v9 = a3;
  v15 = a5;
  if (v15)
  {
    sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"receive(%u) failed (%@)", v10, v11, v12, v13, v14, 4);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v16, *(_QWORD *)(a1 + 32), v17);
  }
  else if (v8)
  {
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    size_ptr = 0xAAAAAAAAAAAAAAAALL;
    v23 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
    if (v23 && size_ptr == 4)
    {
      v24 = bswap32(*(_DWORD *)buffer_ptr);
      sub_19B98AE78(*(void **)(a1 + 32), 1, (uint64_t)"receiving %u byte indication message", v18, v19, v20, v21, v22, v24);
      v25 = *(NSObject **)(a1 + 48);
      completion[0] = MEMORY[0x1E0C809B0];
      completion[1] = 3221225472;
      completion[2] = sub_19B9967C0;
      completion[3] = &unk_1E3C1F848;
      v26 = *(id *)(a1 + 32);
      v33 = v24;
      v27 = *(_QWORD *)(a1 + 40);
      v31 = v26;
      v32 = v27;
      nw_connection_receive(v25, v24, v24, completion);

    }
    else
    {
      sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"receive(%u) invalid content (%p, %lu)", v18, v19, v20, v21, v22, 4);
      objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v28, *(_QWORD *)(a1 + 32), v29);
    }

  }
}

void sub_19B9967C0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_data_t v23;
  uint64_t v24;
  id *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSObject *v29;
  const sockaddr *address;
  const char *v31;
  uint64_t v32;
  double v33;
  NSObject *v34;
  const sockaddr *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  id v40;
  const char *v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const char *v47;
  double v48;
  id v49;
  const char *v50;
  double v51;
  const char *v52;
  double v53;
  int8x16_t v54;
  _QWORD v55[4];
  int8x16_t v56;
  id *v57;
  size_t size_ptr;
  void *buffer_ptr;

  v8 = a2;
  v9 = a3;
  v15 = a5;
  if (!v15)
  {
    if (!v8)
      goto LABEL_10;
    size_ptr = 0xAAAAAAAAAAAAAAAALL;
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    v23 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
    if (v23)
    {
      v24 = *(unsigned int *)(a1 + 48);
      if (size_ptr == v24)
      {
        v25 = _IDSLinkPacketBufferCreateWithSize((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", 3373, size_ptr);
        memcpy(*v25, buffer_ptr, size_ptr);
        v25[2] = (id)size_ptr;
        objc_msgSend_localEndpoint(*(void **)(a1 + 32), v26, v27, v28);
        v29 = objc_claimAutoreleasedReturnValue();
        address = nw_endpoint_get_address(v29);

        objc_msgSend_remoteEndpoint(*(void **)(a1 + 32), v31, v32, v33);
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = nw_endpoint_get_address(v34);

        memcpy(v25 + 7, address, address->sa_len);
        memcpy(v25 + 23, v35, v35->sa_len);
        *((_BYTE *)v25 + 44) = 1;
        objc_msgSend_sessionID(*(void **)(a1 + 32), v36, v37, v38);
        v39 = objc_claimAutoreleasedReturnValue();
        v40 = v25[158];
        v25[158] = (id)v39;

        v25[157] = (id)objc_msgSend_transactionID(*(void **)(a1 + 32), v41, v42, v43);
        *((_DWORD *)v25 + 12) = objc_msgSend_interfaceIndex(*(void **)(a1 + 32), v44, v45, v46);
        objc_msgSend_setShouldTreatNextTryAsFirstTry_(*(void **)(a1 + 32), v47, 1, v48);
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = sub_19B9969EC;
        v55[3] = &unk_1E3C1F7D0;
        v57 = v25;
        v54 = *(int8x16_t *)(a1 + 32);
        v49 = (id)v54.i64[0];
        v56 = vextq_s8(v54, v54, 8uLL);
        IDSTransportThreadAddBlock(v55);
        objc_msgSend__handleIncomingIndicationMessage_(*(void **)(a1 + 40), v50, *(_QWORD *)(a1 + 32), v51);

LABEL_9:
        goto LABEL_10;
      }
    }
    else
    {
      v24 = *(unsigned int *)(a1 + 48);
    }
    sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"receive2(%u) invalid content (%p, %lu)", v18, v19, v20, v21, v22, v24);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v52, *(_QWORD *)(a1 + 32), v53);
    goto LABEL_9;
  }
  sub_19B98AE78(*(void **)(a1 + 32), 2, (uint64_t)"receive1(%u) failed (%@)", v10, v11, v12, v13, v14, *(unsigned int *)(a1 + 48));
  objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v16, *(_QWORD *)(a1 + 32), v17);
LABEL_10:

}

void sub_19B9969EC(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  double v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  v5 = objc_msgSend_link_didReceivePacket_fromDeviceUniqueID_cbuuid_(WeakRetained, v3, *(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176));

  if ((v5 & 1) == 0)
  {
    *(_BYTE *)(**(_QWORD **)(a1 + 48) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16)) = 0;
    sub_19B98AE78(*(void **)(a1 + 40), 1, (uint64_t)"content (%dB) \"%s\" NOT processed", v6, v7, v8, v9, v10, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
  }
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", (const char *)0xD45, *(_QWORD *)(a1 + 48), v11);
}

id sub_19B996A84(NSObject *a1)
{
  nw_protocol_definition_t v1;
  uint64_t identifier;
  const char *v3;
  double v4;
  void *v5;

  v1 = nw_protocol_options_copy_definition(a1);
  identifier = nw_protocol_definition_get_identifier();
  objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v3, identifier, v4, 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_19B996C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B996C2C(uint64_t a1, NSObject *a2)
{
  void *v3;
  const char *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = (void *)MEMORY[0x1E0CB3940];
  sub_19B996A84(a2);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v3, v4, (uint64_t)CFSTR(".%@%@"), v5, v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

BOOL sub_19B99724C(NSObject *a1, void *a2)
{
  NSObject *v3;
  const sockaddr *address;
  const sockaddr *v5;

  v3 = a2;
  address = nw_endpoint_get_address(a1);
  v5 = nw_endpoint_get_address(v3);

  return IsSameSA((uint64_t)address, (uint64_t)v5);
}

void sub_19B998B68(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5;
  const char *v6;
  double v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  double v11;

  v5 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    v8 = v5;
    for (i = 0; i != v8; ++i)
    {
      v10 = objc_msgSend_pointerAtIndex_(*(void **)(a1 + 32), v6, i, v7);
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", (const char *)0x18A, v10, v11);
    }
  }
}

void sub_19B998BE0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t IDSQRProtoSessionExperimentReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t result;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        if (v13 == -1 || v13 >= *(_QWORD *)(a2 + *v5))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          v11 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(_BYTE *)(a2 + *v6))
        v11 = 0;
LABEL_14:
      v17 = v11 & 7;
      if (v16 || (_DWORD)v17 == 4)
        break;
      v19 = (const char *)(v11 >> 3);
      switch((v11 >> 3))
      {
        case 0u:
          v20 = 0;
          do
          {
            v21 = *v4;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
              goto LABEL_54;
            }
            v23 = v22 + 1;
            v24 = *(char *)(*(_QWORD *)(a2 + *v8) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0)
              break;
          }
          while (v20++ <= 8);
          continue;
        case 2u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          *(_DWORD *)(a1 + 32) = 1;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v30 = *v4;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
              *(_QWORD *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v15 = v28++ >= 9;
                if (v15)
                {
                  v29 = 0;
                  goto LABEL_49;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v29 = 0;
LABEL_49:
          *(_BYTE *)(a1 + 36) = v29 != 0;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          *(_BYTE *)(a1 + 40) |= 2u;
          *(_DWORD *)(a1 + 32) = 2;
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 24;
          goto LABEL_44;
        case 4u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          *(_DWORD *)(a1 + 32) = 3;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        case 5u:
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 8;
LABEL_44:
          v41 = *(void **)(a1 + v34);
          *(_QWORD *)(a1 + v34) = v33;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v4;
        v39 = *(_QWORD *)(a2 + v38);
        if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v5))
          break;
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v39);
        *(_QWORD *)(a2 + v38) = v39 + 1;
        v37 |= (unint64_t)(v40 & 0x7F) << v35;
        if ((v40 & 0x80) == 0)
          goto LABEL_51;
        v35 += 7;
        v15 = v36++ >= 9;
        if (v15)
        {
          LODWORD(v37) = 0;
          goto LABEL_53;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_51:
      if (*(_BYTE *)(a2 + *v6))
        LODWORD(v37) = 0;
LABEL_53:
      *(_DWORD *)(a1 + 16) = v37;
LABEL_54:
      ;
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t sub_19B99BBC4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  ssize_t v9;
  uint64_t v10;
  size_t *p_iov_len;
  size_t *v12;
  size_t v13;
  ssize_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  double v25;
  NSObject *v26;
  uint64_t result;
  NSObject *v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t buf[4];
  _BYTE v36[10];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  iovec __b;
  uint64_t v41;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v41 = *MEMORY[0x1E0C80C00];
  memset(&__b, 170, 0x4000uLL);
  if (v3 < 1025)
  {
    if (v3 < 1)
      goto LABEL_21;
  }
  else
  {
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v3;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = 1024;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "buffer array count too big: %d, use %d", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("buffer array count too big: %d, use %d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("buffer array count too big: %d, use %d"));
      }
    }
    v3 = 1024;
  }
  v8 = 0;
  v9 = 0;
  v10 = v3;
  p_iov_len = &__b.iov_len;
  do
  {
    v12 = (size_t *)v5[v8];
    *(p_iov_len - 1) = *v12;
    v13 = v12[2];
    *p_iov_len = v13;
    p_iov_len += 2;
    v9 += v13;
    ++v8;
  }
  while (v3 != v8);
  if (v9)
  {
    if (!*(_BYTE *)(v6 + 4))
    {
      OSLogHandleForTransportCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "connecting", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("connecting"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("connecting"));
        }
      }
      if (!*(_QWORD *)(v6 + 288))
        *(_QWORD *)(v6 + 288) = _IDSLinkPacketBufferClone((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", 736, *v5);
      return 14;
    }
    v14 = writev(*(_DWORD *)v6, &__b, v3);
    v18 = v14;
    if (v14 >= 1)
    {
      v19 = *(_QWORD **)(v6 + 296);
      *v19 += v14;
      if (v14 >= v9)
      {
        result = 0;
        v19[1] += v3;
        return result;
      }
      for (i = v5; ; ++i)
      {
        v21 = *i;
        v22 = *(_QWORD *)(*i + 16);
        if (v18 < v22)
          break;
        ++v19[1];
        v18 -= v22;
        if (!--v10)
        {
          v23 = isRunningTests(v17, v14, v15, v16);
          if ((_DWORD)v23)
            throwsIDSAbortException(v25, v23, v24);
          abort();
        }
      }
      IDSLinkPacketBufferAddBufferStart((_QWORD *)*i, (const char *)v18, v16, v17);
      goto LABEL_59;
    }
    if (v14 == -1)
    {
      v30 = *__error();
      if (v30 == 55 || v30 == 35)
      {
        v21 = *v5;
      }
      else
      {
        OSLogHandleForTransportCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v36 = v30;
          _os_log_impl(&dword_19B949000, v31, OS_LOG_TYPE_DEFAULT, "write failed: %d", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("write failed: %d"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("write failed: %d"));
          }
        }
        sub_19B99C8BC((unsigned int *)v6);
        v21 = 0;
      }
      v18 = -1;
      if (v30 == 35 || v30 == 55)
      {
LABEL_59:
        OSLogHandleForTransportCategory();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          v33 = *(_QWORD *)(v21 + 16);
          v34 = *(_QWORD *)(v6 + 288);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)v36 = v33;
          *(_WORD *)&v36[8] = 2048;
          v37 = v18;
          v38 = 2048;
          v39 = v34;
          _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "would block: %zd %zd %p", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("would block: %zd %zd %p"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("would block: %zd %zd %p"));
          }
        }
        if (!*(_QWORD *)(v6 + 288))
        {
          *(_QWORD *)(v6 + 288) = _IDSLinkPacketBufferClone((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", 782, v21);
          IDSTransportThreadResumeSocket(*(_DWORD *)v6, 2);
        }
        return 14;
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "connection closed by peer", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("connection closed by peer"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("connection closed by peer"));
        }
      }
      sub_19B99C8BC((unsigned int *)v6);
    }
    return 11;
  }
LABEL_21:
  OSLogHandleForTransportCategory();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "nothing to write", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("nothing to write"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("nothing to write"));
    }
  }
  return 0;
}

void sub_19B99C7C4(unsigned int *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "IDSTCPConnectionDestroy", v3, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("IDSTCPConnectionDestroy"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("IDSTCPConnectionDestroy"));
    }
  }
  sub_19B99C8BC(a1);
  free(a1);
}

uint64_t sub_19B99C8BC(unsigned int *a1)
{
  NSObject *v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t result;
  uint8_t buf[4];
  unsigned int *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a1;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "IDSTCPConnectionInvalidate: conn: %p", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("IDSTCPConnectionInvalidate: conn: %p"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("IDSTCPConnectionInvalidate: conn: %p"));
    }
  }
  v4 = (void *)*((_QWORD *)a1 + 2);
  if (v4)
  {
    sub_19BA5814C(v4);
    *((_QWORD *)a1 + 2) = 0;
  }
  v5 = *((_QWORD *)a1 + 35);
  if (v5)
  {
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", (const char *)0x1C4, v5, v3);
    *((_QWORD *)a1 + 35) = 0;
  }
  v6 = *((_QWORD *)a1 + 36);
  if (v6)
  {
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", (const char *)0x1C8, v6, v3);
    *((_QWORD *)a1 + 36) = 0;
  }
  v7 = (const void *)*((_QWORD *)a1 + 41);
  if (v7)
  {
    _Block_release(v7);
    *((_QWORD *)a1 + 41) = 0;
  }
  result = *a1;
  if ((result & 0x80000000) == 0)
  {
    IDSTransportThreadRemoveSocket(result);
    result = close(*a1);
    *a1 = -1;
  }
  *((_BYTE *)a1 + 4) = 0;
  return result;
}

void sub_19B99CA5C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  socklen_t v6;
  int v7;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v6 = 4;
  v7 = -1431655766;
  if (getsockopt(*(_DWORD *)v1, 0xFFFF, 4103, &v7, &v6))
  {
    v7 = *__error();
    OSLogHandleForTransportCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v9) = v7;
      _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "getsockopt failed: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("getsockopt failed: %d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("getsockopt failed: %d"));
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (v7)
        v4 = "not connected";
      else
        v4 = "connected";
      *(_DWORD *)buf = 136315138;
      v9 = v4;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "async connect completed, status: %s", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("async connect completed, status: %s"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("async connect completed, status: %s"));
      }
    }
    if (v7)
      sub_19B99C8BC((unsigned int *)v1);
    else
      sub_19B99CD38(v1);
  }
  if (v7 || !*(_DWORD *)(v1 + 12))
  {
    v5 = *(_QWORD *)(v1 + 328);
    if (v5)
    {
      (*(void (**)(uint64_t))(v5 + 16))(v5);
      _Block_release(*(const void **)(v1 + 328));
      *(_QWORD *)(v1 + 328) = 0;
    }
  }
}

uint64_t sub_19B99CD38(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 288);
    *(_DWORD *)buf = 134217984;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "connect done, outbound packet: %p", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("connect done, outbound packet: %p"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("connect done, outbound packet: %p"));
    }
  }
  if (*(_DWORD *)(a1 + 12))
  {
    result = sub_19B99CF2C((int *)a1, &unk_19BB127F4, 0x33uLL);
    if ((_DWORD)result)
    {
      v5 = *(_DWORD *)a1;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = sub_19B99D0B4;
      v9[3] = &unk_1E3C1C798;
      v9[4] = a1;
      return IDSTransportThreadAddSocket(v5, v9, 0);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 4) = 1;
    v6 = *(_DWORD *)a1;
    v7[4] = a1;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_19B99E3C4;
    v8[3] = &unk_1E3C1C798;
    v8[4] = a1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19B99E3CC;
    v7[3] = &unk_1E3C1C798;
    return IDSTransportThreadAddSocket(v6, v8, v7);
  }
  return result;
}

BOOL sub_19B99CF2C(int *a1, const void *a2, size_t a3)
{
  ssize_t v5;
  int v6;
  NSObject *v7;
  uint8_t buf[4];
  size_t v10;
  __int16 v11;
  ssize_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = write(*a1, a2, a3);
  if (v5 != a3)
  {
    v6 = *__error();
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      v10 = a3;
      v11 = 2048;
      v12 = v5;
      v13 = 1024;
      v14 = v6;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSTCPConnectionSmallWrite: %zu %zd %d", buf, 0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("IDSTCPConnectionSmallWrite: %zu %zd %d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("IDSTCPConnectionSmallWrite: %zu %zd %d"));
      }
    }
    sub_19B99C8BC((unsigned int *)a1);
  }
  return v5 == a3;
}

void sub_19B99D0B4(uint64_t a1)
{
  sub_19B99D0BC(*(_QWORD *)(a1 + 32));
}

void sub_19B99D0BC(uint64_t a1)
{
  uint64_t *v2;
  unsigned __int8 **v3;
  _BYTE *v4;
  size_t v5;
  _BYTE *v6;
  ssize_t v7;
  const char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t isChannelData;
  const char *v23;
  double v24;
  BOOL v25;
  unint64_t v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD v53[5];
  _BYTE buf[24];
  void *v55;
  uint64_t v56;
  uint8_t v57[4];
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(unsigned __int8 ***)(a1 + 280);
  v4 = (_BYTE *)v2[3];
  v5 = v2[1] - (_QWORD)v4;
  if (v5 <= 0x3FF)
  {
    sub_19BA58158(*(_QWORD *)(a1 + 16));
    v6 = (_BYTE *)v2[1];
    v4 = (_BYTE *)v2[3];
    v5 = v6 - v4;
    if (v6 == v4)
    {
      OSLogHandleForTransportCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "buffer full", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("buffer full"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("buffer full"));
        }
      }
      goto LABEL_106;
    }
  }
  v7 = read(*(_DWORD *)a1, v4, v5);
  if (v7 <= 0)
  {
    if (v7 < 0)
    {
      v37 = *__error();
      OSLogHandleForTransportCategory();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v37;
        _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "read failed: %d", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("read failed: %d"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("read failed: %d"));
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "Connection closed by peer", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("Connection closed by peer"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("Connection closed by peer"));
        }
      }
    }
LABEL_106:
    sub_19B99C8BC((unsigned int *)a1);
    return;
  }
  v9 = 0;
  v10 = (unsigned __int8 *)(v2[3] + v7);
  v2[3] = (uint64_t)v10;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 16) += v7;
  v11 = (unsigned __int8 *)v2[2];
  v12 = 134217984;
  while (1)
  {
    v13 = *(_DWORD *)(a1 + 12);
    if (!v13)
      break;
    if ((unint64_t)(v10 - v11) <= 4)
    {
      OSLogHandleForTransportCategory();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "partial header received", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("partial header received"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("partial header received"));
        }
      }
      return;
    }
    v14 = *(unsigned __int16 *)(v11 + 3);
    v15 = bswap32(v14) >> 16;
    if (v10 - v11 < (unint64_t)(v15 + 5))
    {
      OSLogHandleForTransportCategory();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "partial record received", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("partial record received"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("partial record received"));
        }
      }
      return;
    }
    v16 = v11 + 5;
    v2[2] = (uint64_t)(v11 + 5);
    switch(*v11)
    {
      case 0x14u:
        OSLogHandleForTransportCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "SSL change cipher spec", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL change cipher spec"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL change cipher spec"));
          }
        }
        *(_DWORD *)(a1 + 12) = 7;
        goto LABEL_81;
      case 0x15u:
        if ((unsigned __int16)v14 != 512)
        {
          OSLogHandleForTransportCategory();
          v47 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v15;
            _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "SSL3 slert, bad record length: %u", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL3 slert, bad record length: %u"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL3 slert, bad record length: %u"));
            }
          }
          goto LABEL_123;
        }
        OSLogHandleForTransportCategory();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = v11[5];
          v29 = v11[6];
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v28;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v29;
          _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "SSL3 slert: %u %u", buf, 0xEu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v50 = v11[5];
            v51 = v11[6];
            _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL3 slert: %u %u"));
            if (_IDSShouldLog())
            {
              v50 = v11[5];
              v51 = v11[6];
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL3 slert: %u %u"));
            }
          }
        }
        if (*v16 == 2)
          goto LABEL_123;
        if (*(_DWORD *)(a1 + 12))
        {
          v15 = 2;
          v9 = 2;
          goto LABEL_83;
        }
        v26 = 0;
        v15 = 2;
LABEL_82:
        v9 = v15;
        v15 = v26;
LABEL_83:
        v11 = (unsigned __int8 *)(v2[2] + v15);
        v2[2] = (uint64_t)v11;
        ++*(_QWORD *)(*(_QWORD *)(a1 + 296) + 24);
        v10 = (unsigned __int8 *)v2[3];
        if (!*(_QWORD *)(a1 + 280) || v10 == v11)
        {
          if (v10 == v11)
          {
            v39 = *v2;
            v2[2] = *v2;
            v2[3] = v39;
          }
          return;
        }
        break;
      case 0x16u:
        if (v13 == 7)
        {
          OSLogHandleForTransportCategory();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = *(_QWORD *)(a1 + 288);
            *(_DWORD *)v57 = 134217984;
            v58 = v19;
            _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "SSL handshake completed, %p", v57, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v50 = *(_QWORD *)(a1 + 288);
              _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL handshake completed, %p"));
              if (_IDSShouldLog())
              {
                v50 = *(_QWORD *)(a1 + 288);
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL handshake completed, %p"));
              }
            }
          }
          *(_DWORD *)(a1 + 12) = 8;
          *(_BYTE *)(a1 + 4) = 1;
          v20 = *(_DWORD *)a1;
          v53[4] = a1;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_19B99E51C;
          v55 = &unk_1E3C1C798;
          v56 = a1;
          v53[0] = MEMORY[0x1E0C809B0];
          v53[1] = 3221225472;
          v53[2] = sub_19B99E524;
          v53[3] = &unk_1E3C1C798;
          IDSTransportThreadAddSocket(v20, buf, v53);
          v21 = *(_QWORD *)(a1 + 328);
          if (v21)
          {
            (*(void (**)(uint64_t, _QWORD))(v21 + 16))(v21, 0);
            _Block_release(*(const void **)(a1 + 328));
            *(_QWORD *)(a1 + 328) = 0;
          }
        }
        else
        {
          v30 = *v16;
          switch(v30)
          {
            case 14:
              OSLogHandleForTransportCategory();
              v33 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v57 = 0;
                _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "SSL server done", v57, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL server done"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL server done"));
                }
              }
              *(_DWORD *)(a1 + 12) = 6;
              if (!sub_19B99CF2C((int *)a1, &unk_19BB12827, 0x6DuLL))
              {
                OSLogHandleForTransportCategory();
                v49 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v57 = 0;
                  _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "failed to send client hello done", v57, 2u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("failed to send client hello done"));
                    if (_IDSShouldLog())
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("failed to send client hello done"));
                  }
                }
                goto LABEL_123;
              }
              break;
            case 12:
              OSLogHandleForTransportCategory();
              v32 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v57 = 0;
                _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "SSL server key exchange", v57, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL server key exchange"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL server key exchange"));
                }
              }
              break;
            case 2:
              OSLogHandleForTransportCategory();
              v31 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v57 = 0;
                _os_log_impl(&dword_19B949000, v31, OS_LOG_TYPE_DEFAULT, "SSL server hello", v57, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL server hello"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL server hello"));
                }
              }
              break;
            default:
              OSLogHandleForTransportCategory();
              v48 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v57 = 67109120;
                LODWORD(v58) = v30;
                _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "Unknown SSL handshake type: %u", v57, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("Unknown SSL handshake type: %u"));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("Unknown SSL handshake type: %u"));
                }
              }
              goto LABEL_123;
          }
        }
        v26 = 0;
        goto LABEL_73;
      case 0x17u:
        if (v15 <= 2)
        {
          OSLogHandleForTransportCategory();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v15;
            _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, "SSL user data has no padding: %u", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("SSL user data has no padding: %u"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("SSL user data has no padding: %u"));
            }
          }
          goto LABEL_123;
        }
        v15 -= 3;
        v11 += 8;
        v2[2] = (uint64_t)v11;
        goto LABEL_28;
      default:
        OSLogHandleForTransportCategory();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          v45 = *v11;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v45;
          _os_log_impl(&dword_19B949000, v44, OS_LOG_TYPE_DEFAULT, "Unknown SSL record type: %u", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("Unknown SSL record type: %u"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("Unknown SSL record type: %u"));
          }
        }
        goto LABEL_123;
    }
  }
  v15 = v9;
LABEL_28:
  *v3 = v11;
  v3[2] = (unsigned __int8 *)(v10 - v11);
  v52 = -86;
  isChannelData = objc_msgSend_getPacketLength_isChannelData_(*(void **)(a1 + 320), v8, (uint64_t)v3, *(double *)&v12, &v52, v50, v51);
  if (isChannelData < 0)
  {
    if (isChannelData == -1)
    {
      OSLogHandleForTransportCategory();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "need more bytes to find packet length", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("need more bytes to find packet length"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("need more bytes to find packet length"));
        }
      }
      return;
    }
LABEL_123:
    sub_19B99C8BC((unsigned int *)a1);
    return;
  }
  if (v52)
    v25 = (isChannelData & 3) == 0;
  else
    v25 = 1;
  if (v25)
    v26 = isChannelData;
  else
    v26 = (isChannelData & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((uint64_t)v26 > (uint64_t)v3[2])
    return;
  v3[2] = (unsigned __int8 *)isChannelData;
  ++*(_DWORD *)(a1 + 8);
  objc_msgSend_processIncomingPacket_(*(void **)(a1 + 320), v23, (uint64_t)v3, v24);
  v25 = (*(_DWORD *)(a1 + 8))-- == 1;
  if (!v25)
  {
    if ((*(_DWORD *)a1 & 0x80000000) != 0)
      goto LABEL_125;
LABEL_73:
    if (*(_DWORD *)(a1 + 12))
    {
      if (v15 < v26)
      {
        OSLogHandleForTransportCategory();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v26;
          _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "cross SSL record boundary: %zu %zd", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v50 = v15;
            v51 = v26;
            _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("cross SSL record boundary: %zu %zd"));
            if (_IDSShouldLog())
            {
              v50 = v15;
              v51 = v26;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("cross SSL record boundary: %zu %zd"));
            }
          }
        }
      }
LABEL_81:
      v9 = v15;
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  sub_19B99C7C4((unsigned int *)a1);
LABEL_125:
  OSLogHandleForTransportCategory();
  v42 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v42, OS_LOG_TYPE_DEFAULT, "conn was destroyed or invalidated", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("conn was destroyed or invalidated"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("conn was destroyed or invalidated"));
    }
  }
}

void sub_19B99E3C4(uint64_t a1)
{
  sub_19B99D0BC(*(_QWORD *)(a1 + 32));
}

void sub_19B99E3CC(uint64_t a1)
{
  sub_19B99E3D4(*(_QWORD *)(a1 + 32));
}

void sub_19B99E3D4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  double v5;
  NSObject *v6;
  uint8_t v7[16];

  if (*(_QWORD *)(a1 + 288))
  {
    v2 = (uint64_t *)(a1 + 288);
    v3 = sub_19B99BBC4(a1);
    if (*(_DWORD *)a1 != -1 && v3 != 14)
    {
      IDSTransportThreadSuspendSocket(*(_DWORD *)a1, 2);
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", (const char *)0x31D, *v2, v5);
      *v2 = 0;
    }
  }
  else
  {
    IDSTransportThreadSuspendSocket(*(_DWORD *)a1, 2);
    OSLogHandleForTransportCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "nothing to send", v7, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TCPLink"), CFSTR("IDS"), CFSTR("nothing to send"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TCPLink"), CFSTR("nothing to send"));
      }
    }
  }
}

uint64_t sub_19B99E51C(uint64_t a1)
{
  return sub_19B99D0BC(*(_QWORD *)(a1 + 32));
}

void sub_19B99E524(uint64_t a1)
{
  sub_19B99E3D4(*(_QWORD *)(a1 + 32));
}

BOOL IDSQRProtoH3EndToEndChannelRegisterAckE2EChannelRegisterAckReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t writeStunAddressAttribute(unsigned __int16 *a1, uint64_t a2, int *a3, unint64_t a4, double a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v9;
  int v10;

  v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 <= 3)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19BAEF9BC();
LABEL_8:

      return 0;
    }
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    if (a4 == 4)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_19BAEFA1C();
      goto LABEL_12;
    }
    *(_BYTE *)(a2 + 4) = 0;
    if (*((_BYTE *)a1 + 9) == 30)
    {
      if (*((_DWORD *)a1 + 4) || *((_DWORD *)a1 + 5) || *((_DWORD *)a1 + 6) != -65536)
      {
        if (a4 == 5)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_19BAEFBA4();
          goto LABEL_12;
        }
        *(_BYTE *)(a2 + 5) = 2;
        if (a4 - 6 <= 1)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_19BAEFC08();
          goto LABEL_12;
        }
        *(_WORD *)(a2 + 6) = a1[5];
        if (a4 - 8 <= 0xF)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            sub_19BAEFC68();
          goto LABEL_8;
        }
        *(_OWORD *)(a2 + 8) = *((_OWORD *)a1 + 1);
        v10 = 24;
LABEL_44:
        *(_WORD *)(a2 + 2) = ((_WORD)v10 << 8) - 1024;
        *a3 = v10;
        return 1;
      }
      if (a4 != 5)
      {
        *(_BYTE *)(a2 + 5) = 1;
        if (a4 - 6 <= 1)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_19BAEFAE4();
          goto LABEL_12;
        }
        *(_WORD *)(a2 + 6) = a1[5];
        if (a4 - 8 <= 3)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            sub_19BAEFB44();
          goto LABEL_8;
        }
        v9 = *((_DWORD *)a1 + 7);
        goto LABEL_37;
      }
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
LABEL_32:
        sub_19BAEFA80();
    }
    else
    {
      if (a4 != 5)
      {
        *(_BYTE *)(a2 + 5) = 1;
        if (a4 - 6 <= 1)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_19BAEFCC8();
          goto LABEL_12;
        }
        *(_WORD *)(a2 + 6) = a1[5];
        if (a4 - 8 <= 3)
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            sub_19BAEFD28();
          goto LABEL_8;
        }
        v9 = *((_DWORD *)a1 + 3);
LABEL_37:
        *(_DWORD *)(a2 + 8) = v9;
        v10 = 12;
        goto LABEL_44;
      }
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_32;
    }
LABEL_12:

    return 0;
  }
  return v5;
}

uint64_t writeStunXORAddressAttribute(unsigned __int16 *a1, void *a2, uint64_t a3, _DWORD *a4, unint64_t a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  id v18;
  const char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v13 = v9;
  v14 = 0;
  if (a5 && a1 && v9 && a3 && a4)
  {
    if (a5 <= 3)
    {
      objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 134217984;
        v32 = a5;
        v16 = "writeStunXORAddressAttribute: for type: remainingLength: %zd < 4";
LABEL_12:
        _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v31, 0xCu);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    *(_WORD *)a3 = bswap32(*a1) >> 16;
    if (a5 == 4)
    {
      objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 134217984;
        v32 = 0;
        v16 = "writeStunXORAddressAttribute: for payload: remainingLength: %zd < 1";
        goto LABEL_12;
      }
LABEL_13:

      v14 = 0;
      goto LABEL_14;
    }
    *(_BYTE *)(a3 + 4) = 0;
    if (*((_BYTE *)a1 + 9) == 30)
    {
      if (*((_DWORD *)a1 + 4) || *((_DWORD *)a1 + 5) || *((_DWORD *)a1 + 6) != -65536)
      {
        if (a5 == 5)
        {
          objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
          v15 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_13;
          v31 = 134217984;
          v32 = 0;
          v16 = "writeStunXORAddressAttribute: for IPv6_v4Mapped: remainingLength: %zd < 1";
          goto LABEL_12;
        }
        *(_BYTE *)(a3 + 5) = 2;
        if (a5 - 6 <= 1)
        {
          objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
          v15 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_13;
          v31 = 134217984;
          v32 = a5 - 6;
          v16 = "writeStunXORAddressAttribute: for IPv6_v4Mapped STUN_MAGIC_COOKIE: remainingLength: %zd < 2";
          goto LABEL_12;
        }
        *(_WORD *)(a3 + 6) = a1[5] ^ 0x1221;
        v18 = objc_retainAutorelease(v9);
        v22 = objc_msgSend_bytes(v18, v19, v20, v21);
        if (a5 - 8 <= 0xF)
        {
          objc_msgSend_Stun(IDSFoundationLog, v23, v24, *(double *)v25.i64);
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            sub_19BAEFD88();
          goto LABEL_13;
        }
        v25.i64[0] = *(_QWORD *)v22;
        v25.i32[2] = *(_DWORD *)(v22 + 8);
        v26 = vextq_s8(v25, v25, 0xCuLL);
        v26.i32[0] = 1118048801;
        *(_OWORD *)(a3 + 8) = *((_OWORD *)a1 + 1);
        v27 = a3 + 24;
        *(int8x16_t *)(a3 + 8) = veorq_s8(*(int8x16_t *)(a3 + 8), v26);
LABEL_42:
        v29 = v27 - a3;
        *(_WORD *)(a3 + 2) = bswap32(v29 - 4) >> 16;
        *a4 = v29;
        v14 = 1;
        goto LABEL_14;
      }
      if (a5 == 5)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_13;
        v31 = 134217984;
        v32 = 0;
        v16 = "writeStunXORAddressAttribute: for IPv6: remainingLength: %zd < 1";
        goto LABEL_12;
      }
      *(_BYTE *)(a3 + 5) = 1;
      if (a5 - 6 <= 1)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_13;
        v31 = 134217984;
        v32 = a5 - 6;
        v16 = "writeStunXORAddressAttribute: for IPv6 STUN_MAGIC_COOKIE: remainingLength: %zd < 2";
        goto LABEL_12;
      }
      v30 = a5 - 8;
      *(_WORD *)(a3 + 6) = a1[5] ^ 0x1221;
      if (v30 <= 3)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_13;
        v31 = 134217984;
        v32 = v30;
        v16 = "writeStunXORAddressAttribute: for IPv6 STUN_MAGIC_COOKIE: remainingLength: %zd < 4";
        goto LABEL_12;
      }
      v28 = *((_DWORD *)a1 + 7);
    }
    else
    {
      if (a5 == 5)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_19BAEFDE8();
        goto LABEL_13;
      }
      *(_BYTE *)(a3 + 5) = 1;
      if (a5 - 6 <= 1)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_19BAEFE4C();
        goto LABEL_13;
      }
      *(_WORD *)(a3 + 6) = a1[5] ^ 0x1221;
      if (a5 - 8 <= 3)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_19BAEFEAC();
        goto LABEL_13;
      }
      v28 = *((_DWORD *)a1 + 3);
    }
    *(_DWORD *)(a3 + 8) = v28 ^ 0x42A41221;
    v27 = a3 + 12;
    goto LABEL_42;
  }
LABEL_14:

  return v14;
}

uint64_t writeStunUINT8Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  NSObject *v9;
  NSObject *v10;
  int v12;
  unsigned __int16 *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  _DWORD *v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a4 || !a1 || !a2 || !a3)
  {
    objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 134218752;
      v13 = a1;
      v14 = 2048;
      v15 = a2;
      v16 = 2048;
      v17 = a3;
      v18 = 2048;
      v19 = a4;
      _os_log_error_impl(&dword_19B949000, v10, OS_LOG_TYPE_ERROR, "writeStunUINT8Attribute: invalid parameter, attribute: %p, outputBuffer: %p, outputLength: %p, remainingLength: %zd", (uint8_t *)&v12, 0x2Au);
    }

    return 0;
  }
  if (a4 <= 1)
  {
    objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19BAEFF0C();
LABEL_20:

    return 0;
  }
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  if (a4 - 2 <= 1)
  {
    objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19BAEFF70();
    goto LABEL_20;
  }
  *(_WORD *)(a2 + 2) = 256;
  if (a4 == 4)
  {
    objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19BAEFFD0();
    goto LABEL_20;
  }
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a1 + 8);
  if (a4 - 5 <= 2)
  {
    objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19BAF0034();
    goto LABEL_20;
  }
  *(_BYTE *)(a2 + 7) = 0;
  *(_WORD *)(a2 + 5) = 0;
  *a3 = 8;
  return 1;
}

uint64_t writeStunUINT16Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 1)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      if (a4 - 2 > 1)
      {
        *(_WORD *)(a2 + 2) = 512;
        if (a4 - 4 > 1)
        {
          *(_WORD *)(a2 + 4) = bswap32(a1[4]) >> 16;
          if (a4 - 6 > 1)
          {
            *(_WORD *)(a2 + 6) = 0;
            *a3 = 8;
            return 1;
          }
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_19BAF01B8();
        }
        else
        {
          objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_19BAF0158();
        }
      }
      else
      {
        objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_19BAF00F8();
      }

    }
    else
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19BAF0094();

    }
    return 0;
  }
  return v5;
}

uint64_t writeStunUINT32Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 1)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      if (a4 - 2 > 1)
      {
        *(_WORD *)(a2 + 2) = 1024;
        if (a4 - 4 > 3)
        {
          *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)a1 + 2));
          *a3 = 8;
          return 1;
        }
        objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_19BAF02DC();
      }
      else
      {
        objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_19BAF027C();
      }

    }
    else
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19BAF0218();

    }
    return 0;
  }
  return v5;
}

uint64_t writeStunUINT64Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 1)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      if (a4 - 2 > 1)
      {
        *(_WORD *)(a2 + 2) = 2048;
        if (a4 - 4 > 7)
        {
          *(_QWORD *)(a2 + 4) = bswap64(*((_QWORD *)a1 + 1));
          *a3 = 12;
          return 1;
        }
        objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_19BAF0400();
      }
      else
      {
        objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_19BAF03A0();
      }

    }
    else
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19BAF033C();

    }
    return 0;
  }
  return v5;
}

uint64_t writeStunBinaryDataAttribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t result;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  double v15;
  int v16;
  int v17;

  result = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 3)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      v10 = *((int *)a1 + 2);
      v11 = a4 - 4 - v10;
      if (a4 - 4 >= v10)
      {
        v12 = a2 + 4;
        memcpy((void *)(a2 + 4), a1 + 6, *((int *)a1 + 2));
        v16 = v10 + 4;
        *(_WORD *)(a2 + 2) = bswap32(v10) >> 16;
        if ((int)v10 <= 0)
          v17 = -(-(int)v10 & 3);
        else
          v17 = v10 & 3;
        if (v17 >= 1)
        {
          if (v11 < (4 - v17))
          {
            objc_msgSend_Stun(IDSFoundationLog, v13, v14, v15);
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
              sub_19BAF0544();
            goto LABEL_18;
          }
          v16 = v12 + v10 + 4 - v17 - a2;
        }
        *a3 = v16;
        return 1;
      }
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF04DC();
    }
    else
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF047C();
    }
LABEL_18:

    return 0;
  }
  return result;
}

uint64_t writeStunErrorCodeAttribute(_DWORD *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;

  result = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 <= 3)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF05AC();
LABEL_26:

      return 0;
    }
    *(_WORD *)a2 = bswap32(*(unsigned __int16 *)a1) >> 16;
    if (a4 - 4 <= 1)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF060C();
      goto LABEL_26;
    }
    *(_WORD *)a2 = 0;
    if (a4 - 6 <= 1)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF066C();
      goto LABEL_26;
    }
    v10 = a4 - 8;
    *(_BYTE *)(a2 + 6) = a1[2];
    *(_BYTE *)(a2 + 7) = a1[3];
    v11 = (int)a1[36];
    v12 = a4 - 8 - v11;
    if (a4 - 8 < v11)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, v11, a5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF06CC(a1 + 36, v10, v9);
      goto LABEL_26;
    }
    memcpy((void *)(a2 + 8), a1 + 4, v11);
    v16 = a2 + 8 + a1[36];
    v17 = a1[36] + 4;
    *(_WORD *)(a2 + 2) = bswap32(v17) >> 16;
    if (v12 <= 3)
    {
      objc_msgSend_Stun(IDSFoundationLog, v13, v14, v15);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_19BAF0748();
      goto LABEL_26;
    }
    v18 = (-v17 & 0x80000000) != 0;
    v19 = -v17 & 3;
    v20 = v17 & 3;
    if (!v18)
      v20 = -v19;
    if (v20 <= 0)
      v21 = 0;
    else
      v21 = 4 - v20;
    *a3 = v16 + v21 - a2;
    return 1;
  }
  return result;
}

uint64_t writeStunUnknownAttribute(int *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5;
  NSObject *v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  int v17;

  v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 <= 3)
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19BAF07A8();
LABEL_25:

      return 0;
    }
    v7 = a4 - 4;
    *(_WORD *)a2 = bswap32(*(unsigned __int16 *)a1) >> 16;
    v8 = (_WORD *)(a2 + 4);
    if (a1[2] >= 1)
    {
      v9 = v7 >> 1;
      v10 = a4 & 1;
      v11 = 6;
      v12 = -(uint64_t)(v7 >> 1);
      while (v12 + v11 != 6)
      {
        *v8++ = bswap32(*((unsigned __int16 *)a1 + v11)) >> 16;
        v7 -= 2;
        v13 = v11 - 5;
        ++v11;
        if (v13 >= a1[2])
          goto LABEL_12;
      }
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19BAF0808(v9, v10, v6);
      goto LABEL_25;
    }
LABEL_12:
    v14 = (_DWORD)v8 - a2 - 4;
    *(_WORD *)(a2 + 2) = bswap32(v14) >> 16;
    if (4 - ((int)v8 - (int)a2) >= 0)
      v15 = -((4 - ((_DWORD)v8 - a2)) & 3);
    else
      v15 = v14 & 3;
    if (v7 < (4 - v15))
    {
      objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_19BAF0880();

      return 0;
    }
    if (v15 <= 0)
      v17 = 0;
    else
      v17 = 4 - v15;
    *a3 = (_DWORD)v8 + v17 - a2;
    return 1;
  }
  return v5;
}

uint64_t readStunXORAddressAttribute(int8x16_t *a1, _DWORD *a2, void *a3, uint64_t a4, unsigned int a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  int8x16_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v30;
  int v31;
  int8x16_t v32;

  v9 = a3;
  v13 = v9;
  if (*a2 > (signed int)a5)
    goto LABEL_23;
  if ((int)a5 > 1)
  {
    if (*(_BYTE *)(a4 + 1) == 2)
    {
      if ((unint64_t)objc_msgSend_length(v9, v10, v11, v12) <= 0xB)
      {
        objc_msgSend_Stun(IDSFoundationLog, v15, v16, v17);
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_19BAF0948();
LABEL_22:

        goto LABEL_23;
      }
      v19 = objc_retainAutorelease(v13);
      v23 = objc_msgSend_bytes(v19, v20, v21, v22);
      if (a5 < 4)
      {
        objc_msgSend_Stun(IDSFoundationLog, v24, v25, *(double *)v26.i64);
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_19BAF0A14();
        goto LABEL_22;
      }
      v26.i64[0] = *(_QWORD *)v23;
      v26.i32[2] = *(_DWORD *)(v23 + 8);
      v27 = *(_WORD *)(a4 + 2);
      a1->i64[1] = 0;
      a1[1].i64[0] = 0;
      a1[2].i32[0] = 0;
      a1[1].i64[1] = 0;
      a1->i16[4] = 7708;
      a1->i16[5] = v27 ^ 0x1221;
      if (a5 < 0x14)
      {
        objc_msgSend_Stun(IDSFoundationLog, v24, v25, *(double *)v26.i64);
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_19BAF09B4();
        goto LABEL_22;
      }
      v32 = vextq_s8(v26, v26, 0xCuLL);
      v32.i32[0] = 1118048801;
      a1[1] = *(int8x16_t *)(a4 + 4);
      a1[1] = veorq_s8(a1[1], v32);
    }
    else
    {
      if (a5 <= 3)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_19BAF0A74();
        goto LABEL_19;
      }
      if (a5 <= 7)
      {
        objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_19BAF0AD4();
        goto LABEL_19;
      }
      v30 = *(_WORD *)(a4 + 2) ^ 0x1221;
      v31 = *(_DWORD *)(a4 + 4) ^ 0x42A41221;
      a1->i64[1] = 0;
      a1[1].i64[0] = 0;
      a1->i16[4] = 528;
      a1->i32[3] = v31;
      a1->i16[5] = v30;
    }
    v28 = 1;
    goto LABEL_24;
  }
  objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    sub_19BAF08E8();
LABEL_19:

LABEL_23:
  v28 = 0;
LABEL_24:

  return v28;
}

uint64_t readStunUINT8Attribute(uint64_t a1, char *a2, _BYTE *a3, int a4, double a5)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a2 <= a4)
  {
    if (a4)
    {
      *(_BYTE *)(a1 + 8) = *a3;
      *(_DWORD *)a2 = 4;
      return 1;
    }
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19BAF0B34(v6, v7, v8);

  }
  return 0;
}

uint64_t readStunUINT16Attribute(uint64_t a1, char *a2, unsigned __int16 *a3, unsigned int a4, double a5)
{
  NSObject *v6;

  if (*(_DWORD *)a2 <= (signed int)a4)
  {
    if (a4 > 1)
    {
      *(_WORD *)(a1 + 8) = bswap32(*a3) >> 16;
      *(_DWORD *)a2 = 4;
      return 1;
    }
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19BAF0BB0();

  }
  return 0;
}

uint64_t readStunUINT32Attribute(uint64_t a1, char *a2, unsigned int *a3, unsigned int a4, double a5)
{
  NSObject *v6;

  if (*(_DWORD *)a2 <= (signed int)a4)
  {
    if (a4 > 3)
    {
      *(_DWORD *)(a1 + 8) = bswap32(*a3);
      *(_DWORD *)a2 = 4;
      return 1;
    }
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19BAF0C1C();

  }
  return 0;
}

uint64_t readStunUINT64Attribute(uint64_t a1, char *a2, unint64_t *a3, unsigned int a4, double a5)
{
  NSObject *v6;

  if (*(_DWORD *)a2 <= (signed int)a4)
  {
    if (a4 > 7)
    {
      *(_QWORD *)(a1 + 8) = bswap64(*a3);
      *(_DWORD *)a2 = 8;
      return 1;
    }
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19BAF0C88();

  }
  return 0;
}

BOOL readStunBinaryDataAttribute(uint64_t a1, int *a2, void *__src, int a4)
{
  int v4;
  _BOOL8 v6;
  int v8;

  v4 = *a2;
  v6 = *a2 < 1473 && v4 <= a4;
  if (v6)
  {
    *(_DWORD *)(a1 + 8) = v4;
    memcpy((void *)(a1 + 12), __src, *a2);
    if (*a2 <= 0)
      v8 = -(-*a2 & 3);
    else
      v8 = *a2 & 3;
    if (v8 >= 1)
      *a2 = *a2 - v8 + 4;
  }
  return v6;
}

uint64_t readStunErrorCodeAttribute(_DWORD *a1, char *a2, unsigned __int8 *a3, int a4, double a5)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_DWORD *)a2 > a4)
  {
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_19BAF0CF4((int *)a2, a4, v7);

    return 0;
  }
  if (a4 < 2)
  {
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19BAF0EA8();
    goto LABEL_20;
  }
  if (a4 == 2)
  {
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19BAF0D78(v8, v9, v10, v11, v12, v13, v14, v15);
LABEL_20:

    return 0;
  }
  a1[2] = a3[2];
  if (a4 <= 3)
  {
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19BAF0E40(v8, v19, v20, v21, v22, v23, v24, v25);
    goto LABEL_20;
  }
  a1[3] = a3[3];
  v17 = *(int *)a2;
  if ((v17 - 5) >= 0x80)
  {
    objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19BAF0DE0();
    goto LABEL_20;
  }
  memcpy(a1 + 4, a3 + 4, v17 - 4);
  a1[36] = v17 - 4;
  if ((v17 & 3) != 0)
    *(_DWORD *)a2 = *(_DWORD *)a2 - (v17 & 3) + 4;
  return 1;
}

uint64_t readStunUnknownAttribute(uint64_t a1, int *a2, unsigned __int16 *a3, int a4)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  _WORD *v9;
  BOOL v10;
  unsigned int v11;
  int v12;

  result = 0;
  v6 = *a2;
  if (*a2 <= a4 && v6 <= 41)
  {
    if (v6 >= 0)
      v7 = *a2;
    else
      v7 = v6 + 1;
    v8 = (v7 >> 1);
    *(_DWORD *)(a1 + 8) = v8;
    if (v6 <= 1)
    {
LABEL_10:
      if (*a2 <= 0)
        v12 = -(-*a2 & 3);
      else
        v12 = *a2 & 3;
      if (v12 >= 1)
        *a2 = *a2 - v12 + 4;
      return 1;
    }
    else
    {
      v9 = (_WORD *)(a1 + 12);
      while (1)
      {
        v10 = __OFSUB__(a4, 2);
        a4 -= 2;
        if (a4 < 0 != v10)
          return 0;
        v11 = *a3++;
        *v9++ = bswap32(v11) >> 16;
        if (!--v8)
          goto LABEL_10;
      }
    }
  }
  return result;
}

BOOL isReservedStunEncryptedAttribute(__int16 a1)
{
  return (unsigned __int16)(a1 + 4599) < 0xF7u;
}

void sub_19B9A104C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19B9A1068(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

id sub_19B9A29C0(void *a1)
{
  id v1;
  id v2;
  id v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v3 = v1;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v25, v5, v29, 16);
  if (v6)
  {
    v10 = v6;
    v11 = *(_QWORD *)v26;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v3);
        v13 = (void *)qword_1ECDD4908;
        v14 = objc_msgSend_unsignedIntegerValue(*(void **)(*((_QWORD *)&v25 + 1) + 8 * v12), v7, v8, v9, (_QWORD)v25);
        objc_msgSend_objectAtIndex_(v13, v15, v14, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v2, v18, (uint64_t)v17, v19);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v25, v9, v29, 16);
    }
    while (v10);
  }

  v23 = (void *)objc_msgSend_copy(v2, v20, v21, v22);
  return v23;
}

uint64_t sub_19B9A4860(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

BOOL IDSQRProtoH3EndToEndChannelUnRegisterResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19B9A5974()
{
  IDSRegistrationKeychainReader *v0;
  void *v1;

  v0 = objc_alloc_init(IDSRegistrationKeychainReader);
  v1 = (void *)qword_1ECDD47F8;
  qword_1ECDD47F8 = (uint64_t)v0;

}

void sub_19B9A5B2C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19B9A5B5C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  void *v6;
  void **WeakRetained;

  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_invalidate(WeakRetained[2], v2, v3, v4);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = 0;

}

void sub_19B9A5BA8(uint64_t a1)
{
  const char *v2;
  _QWORD *WeakRetained;
  double v4;
  void *v5;
  id v6;
  void *v7;
  const char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)WeakRetained[2];
  if (v5)
  {
    objc_msgSend_updateTimerInterval_repeats_(v5, v2, 10, v4, 0);
  }
  else
  {
    v6 = objc_alloc(MEMORY[0x1E0D36A18]);
    im_primary_queue();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_19B9A5C84;
    v13[3] = &unk_1E3C1F9C8;
    v14 = *(id *)(a1 + 32);
    v10 = objc_msgSend_initWithQueue_interval_repeats_handlerBlock_(v6, v8, (uint64_t)v7, v9, 10, 0, v13);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(v11 + 16);
    *(_QWORD *)(v11 + 16) = v10;

  }
}

uint64_t sub_19B9A5C84(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__flush, a4, a2);
}

void sub_19B9A5C8C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    MEMORY[0x1E0DE7D20](a3, sel__flush, a4, a1);
}

uint64_t sub_19B9A74A0(uint64_t a1, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
    return MEMORY[0x1E0DE7D20](v4, sel__readyTransaction_, v5, a3);
  else
    return MEMORY[0x1E0DE7D20](v4, sel__removeTransaction_, v5, a3);
}

BOOL IDSQRProtoStatsRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientTimestampNtp;
              goto LABEL_53;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientTimestampNtp;
              goto LABEL_56;
            }
          }
          v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientTimestampNtp;
          goto LABEL_54;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientLatencyMs;
              goto LABEL_53;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientLatencyMs;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientLatencyMs;
          goto LABEL_54;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__sentPackets;
              goto LABEL_53;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__sentPackets;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__sentPackets;
          goto LABEL_54;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__receivedPackets;
          goto LABEL_54;
        }
        v35 += 7;
        v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__receivedPackets;
          goto LABEL_56;
        }
      }
      v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__receivedPackets;
LABEL_53:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoMaterialReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  IDSQRProtoMaterialInfo *v29;
  const char *v30;
  double v31;
  uint64_t result;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 != 3)
      {
        if ((_DWORD)v17 != 2)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_49;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        v33 = 16;
        goto LABEL_48;
      }
      v29 = objc_alloc_init(IDSQRProtoMaterialInfo);
      objc_msgSend_addMaterialInfo_(a1, v30, (uint64_t)v29, v31);
      if (!PBReaderPlaceMark() || (IDSQRProtoMaterialInfoReadFrom((uint64_t)v29, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_45;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v20 = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_47:
    v33 = 8;
LABEL_48:
    *(_QWORD *)&a1[v33] = v20;
    goto LABEL_49;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const char *IDSRadioAccessTechnologyToString(unsigned int a1)
{
  NSObject *v3;
  uint8_t buf[4];
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 < 0xB)
    return off_1E3C1FA68[a1];
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v5 = a1;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "Reserved IDS RAT: %u", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Reserved IDS RAT: %u"));
    if (_IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Reserved IDS RAT: %u"));
  }
  return "Reserved";
}

void sub_19B9AA510()
{
  IDSCellularLinkMonitor *v0;
  void *v1;

  v0 = objc_alloc_init(IDSCellularLinkMonitor);
  v1 = (void *)qword_1ECDD4800;
  qword_1ECDD4800 = (uint64_t)v0;

}

uint64_t sub_19B9AA80C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  const char *v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  if (!v5)
  {
    objc_msgSend_weakObjectsHashTable(MEMORY[0x1E0CB3690], a2, a3, a4);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = v6;

    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  }
  result = objc_msgSend_containsObject_(v5, a2, *(_QWORD *)(a1 + 40), a4);
  if ((result & 1) == 0)
  {
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 48), v10, *(_QWORD *)(a1 + 40), v11);
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v15 = v13;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "add cellularLinkDelegate %@.", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add cellularLinkDelegate %@."));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("add cellularLinkDelegate %@."));
      }
    }
  }
  return result;
}

uint64_t sub_19B9AAA04(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v9 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "remove cellularLinkDelegate %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v7 = *(_QWORD *)(a1 + 32);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remove cellularLinkDelegate %@."));
      if (_IDSShouldLog())
      {
        v7 = *(_QWORD *)(a1 + 32);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove cellularLinkDelegate %@."));
      }
    }
  }
  return objc_msgSend_removeObject_(*(void **)(*(_QWORD *)(a1 + 40) + 48), v4, *(_QWORD *)(a1 + 32), v5, v7);
}

void sub_19B9AACF8(double a1, uint64_t a2, void *a3, void *a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  NSObject *v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_copy(a3, (const char *)a3, (uint64_t)a4, a1);
  v9 = (void *)objc_msgSend_copy(a4, v6, v7, v8);
  OSLogHandleForTransportCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v12 = v5;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "Data status notification shouldn't be called: %@ %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Data status notification shouldn't be called: %@ %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Data status notification shouldn't be called: %@ %@"));
    }
  }

}

void sub_19B9AFA98(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  double v6;
  id v7;

  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processCTConnectionStateChangeNotification_connectionStatus_(v7, v5, *(_QWORD *)(a1 + 32), v6, *(_QWORD *)(a1 + 40));

}

void sub_19B9B0310(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  id v14;
  id v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD block[4];
  id v21;
  id v22;

  v7 = a3;
  if (a2)
  {
    objc_msgSend_objectForKey_(a2, v5, (uint64_t)CFSTR("kPayloadKey"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_queue(*(void **)(a1 + 32), v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B9B044C;
    block[3] = &unk_1E3C1C7E8;
    v14 = *(id *)(a1 + 40);
    v21 = v9;
    v22 = v14;
    v15 = v9;
    dispatch_async(v13, block);

  }
  else
  {
    objc_msgSend_queue(*(void **)(a1 + 32), v5, v6, v8);
    v16 = objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_19B9B0460;
    v17[3] = &unk_1E3C1C7E8;
    v19 = *(id *)(a1 + 40);
    v18 = v7;
    dispatch_async(v16, v17);

    v15 = v19;
  }

}

uint64_t sub_19B9B044C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_19B9B0460(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_19B9B062C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v5 = a4;
  objc_msgSend_queue(*(void **)(a1 + 32), v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_19B9B06D4;
  v12[3] = &unk_1E3C1C7E8;
  v10 = *(id *)(a1 + 40);
  v13 = v5;
  v14 = v10;
  v11 = v5;
  dispatch_async(v9, v12);

}

uint64_t sub_19B9B06D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19B9B076C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  objc_msgSend_queue(*(void **)(a1 + 32), v7, v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19B9B0838;
  block[3] = &unk_1E3C1FB18;
  v15 = v5;
  v11 = *(id *)(a1 + 40);
  v16 = v6;
  v17 = v11;
  v12 = v6;
  v13 = v5;
  dispatch_async(v10, block);

}

uint64_t sub_19B9B0838(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 40));
}

void sub_19B9B0924(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  objc_msgSend_queue(*(void **)(a1 + 32), v4, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19B9B09CC;
  v10[3] = &unk_1E3C1C7E8;
  v8 = *(id *)(a1 + 40);
  v11 = v3;
  v12 = v8;
  v9 = v3;
  dispatch_async(v7, v10);

}

uint64_t sub_19B9B09CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t IDSQRProtoInfoResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if ((_DWORD)v18 == 3)
        {
          if (v16 != 2)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            while (1)
            {
              v55 = *v3;
              v56 = *(_QWORD *)(a2 + v55);
              if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
                goto LABEL_87;
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v14 = v53++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_88;
            }
          }
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            while (1)
            {
              v37 = *v3;
              v38 = *(_QWORD *)(a2 + v37);
              if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                break;
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_62;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
            PBRepeatedUInt64Add();
          }
LABEL_63:
          PBReaderRecallMark();
          continue;
        }
        if ((_DWORD)v18 == 16)
        {
          if (v16 != 2)
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            while (1)
            {
              v49 = *v3;
              v50 = *(_QWORD *)(a2 + v49);
              if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
                break;
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_88;
            }
LABEL_87:
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_88:
            PBRepeatedUInt64Add();
            continue;
          }
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = *v3;
              v30 = *(_QWORD *)(a2 + v29);
              if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
                break;
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_48;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
            PBRepeatedUInt64Add();
          }
          goto LABEL_63;
        }
      }
      else
      {
        if ((_DWORD)v18 == 1)
        {
          PBReaderReadString();
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v32;

          continue;
        }
        if ((_DWORD)v18 == 2)
        {
          if (v16 != 2)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            while (1)
            {
              v43 = *v3;
              v44 = *(_QWORD *)(a2 + v43);
              if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
                goto LABEL_87;
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v42 |= (unint64_t)(v45 & 0x7F) << v40;
              if (v45 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_88;
            }
          }
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_33;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
            PBRepeatedUInt64Add();
          }
          goto LABEL_63;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_19B9B693C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 8;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoSubscribedStreamReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 44) |= 4u;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)(a2 + v21);
                if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                  break;
                v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0)
                  goto LABEL_56;
                v18 += 7;
                v14 = v19++ >= 9;
                if (v14)
                {
                  v20 = 0;
                  goto LABEL_58;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
              if (*(_BYTE *)(a2 + *v5))
                v20 = 0;
LABEL_58:
              v42 = v20 != 0;
              v43 = 41;
              goto LABEL_67;
            case 2u:
              v24 = 0;
              v25 = 0;
              v26 = 0;
              *(_BYTE *)(a1 + 44) |= 1u;
              while (2)
              {
                v27 = *v3;
                v28 = *(_QWORD *)(a2 + v27);
                if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
                  *(_QWORD *)(a2 + v27) = v28 + 1;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if (v29 < 0)
                  {
                    v24 += 7;
                    v14 = v25++ >= 9;
                    if (v14)
                    {
                      v26 = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v26 = 0;
LABEL_62:
              *(_QWORD *)(a1 + 32) = v26;
              goto LABEL_78;
            case 3u:
              if (v16 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v30 = 0;
                  v31 = 0;
                  v32 = 0;
                  while (1)
                  {
                    v33 = *v3;
                    v34 = *(_QWORD *)(a2 + v33);
                    if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
                    *(_QWORD *)(a2 + v33) = v34 + 1;
                    v32 |= (unint64_t)(v35 & 0x7F) << v30;
                    if (v35 < 0)
                    {
                      v30 += 7;
                      v14 = v31++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_47;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
                  PBRepeatedUInt32Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                while (1)
                {
                  v47 = *v3;
                  v48 = *(_QWORD *)(a2 + v47);
                  if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
                  *(_QWORD *)(a2 + v47) = v48 + 1;
                  v46 |= (unint64_t)(v49 & 0x7F) << v44;
                  if (v49 < 0)
                  {
                    v44 += 7;
                    v14 = v45++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_77;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_77:
                PBRepeatedUInt32Add();
              }
LABEL_78:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            case 4u:
              v36 = 0;
              v37 = 0;
              v38 = 0;
              *(_BYTE *)(a1 + 44) |= 2u;
              while (2)
              {
                v39 = *v3;
                v40 = *(_QWORD *)(a2 + v39);
                if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
                  *(_QWORD *)(a2 + v39) = v40 + 1;
                  v38 |= (unint64_t)(v41 & 0x7F) << v36;
                  if (v41 < 0)
                  {
                    v36 += 7;
                    v14 = v37++ >= 9;
                    if (v14)
                    {
                      v38 = 0;
                      goto LABEL_66;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v38 = 0;
LABEL_66:
              v42 = v38 != 0;
              v43 = 40;
LABEL_67:
              *(_BYTE *)(a1 + v43) = v42;
              goto LABEL_78;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_78;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

double sub_19B9B7EB8()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  result = (double)v0 / (double)v1 / 1000000000.0;
  bst_mach_time_rate = *(_QWORD *)&result;
  return result;
}

uint64_t TrafficClassForIDSOpenSocketPriorityLevel(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  if (a1 == 800)
    v1 = 800;
  else
    v1 = 0;
  if (a1 == 700)
    v2 = 700;
  else
    v2 = v1;
  if (a1 == 600)
    v3 = 600;
  else
    v3 = v2;
  if (a1 == 300)
    v4 = 600;
  else
    v4 = 0;
  if (a1 == 100)
    v5 = 100;
  else
    v5 = v4;
  if (a1 <= 599)
    return v5;
  else
    return v3;
}

void sub_19B9B7F4C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  double v5;
  const char *v6;
  FILE *v7;
  __int128 v8;
  FILE *v9;
  size_t v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  char *v17;
  char __s[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[31];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v13 = objc_retainAutorelease(a2);
  v6 = (const char *)objc_msgSend_UTF8String(v13, v3, v4, v5);
  v7 = fopen(v6, "r");
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v32[15] = v8;
  v31 = v8;
  *(_OWORD *)v32 = v8;
  v29 = v8;
  v30 = v8;
  v27 = v8;
  v28 = v8;
  v25 = v8;
  v26 = v8;
  v23 = v8;
  v24 = v8;
  v21 = v8;
  v22 = v8;
  v19 = v8;
  v20 = v8;
  *(_OWORD *)__s = v8;
  v33 = 0;
  if (v7)
  {
    v9 = v7;
    while (fgets(__s, 255, v9))
    {
      v10 = strlen(__s);
      if (v10 && __s[v10 - 1] == 10)
        __s[v10 - 1] = 0;
      OSLogHandleForTransportCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v15 = a1;
        v16 = 2080;
        v17 = __s;
        _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "%s: %s", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: %s"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: %s"));
        }
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v15 = a1;
      v16 = 2112;
      v17 = (char *)v13;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "%s: No such file %@ to dump", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: No such file %@ to dump"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: No such file %@ to dump"));
      }
    }
  }

}

void IDSNetworkingLogDump(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  id v20;
  const char *v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  dispatch_time_t v25;
  NSObject *v26;
  id v27;
  pid_t v28;
  NSObject *v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  void *v38;
  const char *v39;
  double v40;
  id v41;
  const char *v42;
  uint64_t v43;
  double v44;
  NSObject *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  int isInternalInstall;
  pid_t v51;
  NSObject *v52;
  void *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  void *v58;
  const char *v59;
  double v60;
  void *v61;
  const char *v62;
  double v63;
  id v64;
  const char *v65;
  uint64_t v66;
  double v67;
  NSObject *v68;
  double v69;
  double v70;
  NSObject *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  void *v80;
  const char *v81;
  double v82;
  void *v83;
  double v84;
  double v85;
  NSObject *v86;
  NSObject *v87;
  const char *v88;
  uint64_t v89;
  double v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  double v94;
  _QWORD v95[5];
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v98;
  __int16 v99;
  double v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v98 = a1;
    v99 = 2048;
    *(_QWORD *)&v100 = a2;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "%s: asked to dump networking logs flags %lu", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v93 = a1;
      *(_QWORD *)&v94 = a2;
      _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: asked to dump networking logs flags %lu"));
      if (_IDSShouldLog())
      {
        v93 = a1;
        *(_QWORD *)&v94 = a2;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: asked to dump networking logs flags %lu"));
      }
    }
  }
  if ((a2 & 8) != 0)
  {
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v98 = a1;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "%s: netdiagnose start packetcapture", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: netdiagnose start packetcapture"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: netdiagnose start packetcapture"));
      }
    }
    v9 = (void *)MEMORY[0x1E0CB3940];
    NSTemporaryDirectory();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringGUID(MEMORY[0x1E0CB3940], v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v9, v15, (uint64_t)CFSTR("%@/netdiagnose_identityservicesd_%@.txt"), v16, v10, v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v18, (uint64_t)CFSTR("/usr/local/bin/netdiagnose start packetcapture > %@"), v19, v17);
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend_UTF8String(v20, v21, v22, v23);
    IMPerformSystem();
    OSLogHandleForTransportCategory();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v98 = a1;
      _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "%s: wait 1 second to capture", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v93 = a1;
        _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: wait 1 second to capture"));
        if (_IDSShouldLog())
        {
          v93 = a1;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: wait 1 second to capture"));
        }
      }
    }
    v25 = dispatch_time(0, 1000000000);
    v26 = MEMORY[0x1E0C80D38];
    v27 = MEMORY[0x1E0C80D38];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B9B8F94;
    block[3] = &unk_1E3C1C798;
    block[4] = a1;
    dispatch_after(v25, v26, block);

    sub_19B9B7F4C(a1, v17);
  }
  if ((a2 & 1) != 0)
  {
    v28 = getpid();
    OSLogHandleForTransportCategory();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v98 = a1;
      v99 = 2048;
      *(_QWORD *)&v100 = v28;
      _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "%s: lskq for identityservicesd %lu", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: lskq for identityservicesd %lu"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: lskq for identityservicesd %lu"));
      }
    }
    v30 = (void *)MEMORY[0x1E0CB3940];
    NSTemporaryDirectory();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringGUID(MEMORY[0x1E0CB3940], v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v30, v36, (uint64_t)CFSTR("%@/lskq_identityservicesd_%@.txt"), v37, v31, v35);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v39, (uint64_t)CFSTR("/usr/bin/lskq -p %lu > %@"), v40, v28, v38);
    v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend_UTF8String(v41, v42, v43, v44);
    IMPerformSystem();
    OSLogHandleForTransportCategory();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v98 = a1;
      v99 = 2112;
      v100 = *(double *)&v38;
      _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "%s: === lskq file [%@] ===", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v93 = a1;
        v94 = *(double *)&v38;
        _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: === lskq file [%@] ==="));
        if (_IDSShouldLog())
        {
          v93 = a1;
          v94 = *(double *)&v38;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: === lskq file [%@] ==="));
        }
      }
    }
    sub_19B9B7F4C(a1, v38);

  }
  if ((a2 & 0x10) != 0)
  {
    objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v5, v6, v7);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    isInternalInstall = objc_msgSend_isInternalInstall(v46, v47, v48, v49);

    if (isInternalInstall)
    {
      v51 = getpid();
      OSLogHandleForTransportCategory();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v98 = a1;
        v99 = 2048;
        *(_QWORD *)&v100 = v51;
        _os_log_impl(&dword_19B949000, v52, OS_LOG_TYPE_DEFAULT, "%s: lsof for identityservicesd %lu", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: lsof for identityservicesd %lu"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: lsof for identityservicesd %lu"));
        }
      }
      v53 = (void *)MEMORY[0x1E0CB3940];
      NSTemporaryDirectory();
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringGUID(MEMORY[0x1E0CB3940], v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v53, v59, (uint64_t)CFSTR("%@/lsof_identityservicesd_%@.txt"), v60, v54, v58);
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v62, (uint64_t)CFSTR("/usr/sbin/lsof -lnPp %lu > %@"), v63, v51, v61);
      v64 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend_UTF8String(v64, v65, v66, v67);
      IMPerformSystem();
      OSLogHandleForTransportCategory();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v98 = a1;
        v99 = 2112;
        v100 = *(double *)&v61;
        _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, "%s: === lsof file [%@] ===", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v93 = a1;
          v94 = *(double *)&v61;
          _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: === lsof file [%@] ==="));
          if (_IDSShouldLog())
          {
            v93 = a1;
            v94 = *(double *)&v61;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: === lsof file [%@] ==="));
          }
        }
      }
      sub_19B9B7F4C(a1, v61);

    }
  }
  if ((a2 & 2) != 0)
  {
    v69 = ids_monotonic_time();
    if (*(double *)&qword_1EE40AFF8 == 0.0
      || (v70 = v69 - *(double *)&qword_1EE40AFF8, v69 - *(double *)&qword_1EE40AFF8 > 10.0))
    {
      OSLogHandleForTransportCategory();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v98 = a1;
        _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "%s: simulate crash", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v93 = a1;
          _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: simulate crash"));
          if (_IDSShouldLog())
          {
            v93 = a1;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: simulate crash"));
          }
        }
      }
      objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v73, v74, v75, v93, *(_QWORD *)&v94);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_processName(v76, v77, v78, v79);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      getpid();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v81, a1, v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      IMLogSimulateCrashForProcessAndPID();

    }
    else
    {
      OSLogHandleForTransportCategory();
      v71 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v98 = a1;
        v99 = 2048;
        v100 = v70;
        _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "%s: simulate crash skipped - already done recently (%.6lfs ago)", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v94 = v70;
          v93 = a1;
          _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: simulate crash skipped - already done recently (%.6lfs ago)"));
          if (_IDSShouldLog())
          {
            v94 = v70;
            v93 = a1;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: simulate crash skipped - already done recently (%.6lfs ago)"));
          }
        }
      }
    }
    qword_1EE40AFF8 = *(_QWORD *)&v69;
  }
  if ((a2 & 4) != 0)
  {
    v84 = ids_monotonic_time();
    if (*(double *)&qword_1EE40B000 == 0.0
      || (v85 = v84 - *(double *)&qword_1EE40B000, v84 - *(double *)&qword_1EE40B000 > 30.0))
    {
      OSLogHandleForTransportCategory();
      v87 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v98 = a1;
        _os_log_impl(&dword_19B949000, v87, OS_LOG_TYPE_DEFAULT, "%s: kick off sysdiagnose", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v93 = a1;
          _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: kick off sysdiagnose"));
          if (_IDSShouldLog())
          {
            v93 = a1;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: kick off sysdiagnose"));
          }
        }
      }
      objc_msgSend_sharedInstance(IDSSysdiagnoseLogCollector, v88, v89, v90, v93, *(_QWORD *)&v94);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      v95[0] = MEMORY[0x1E0C809B0];
      v95[1] = 3221225472;
      v95[2] = sub_19B9B90FC;
      v95[3] = &unk_1E3C1FB88;
      v95[4] = a1;
      objc_msgSend_collectSysdiagnoseLog_(v91, v92, (uint64_t)v95, COERCE_DOUBLE(3221225472));

    }
    else
    {
      OSLogHandleForTransportCategory();
      v86 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v98 = a1;
        v99 = 2048;
        v100 = v85;
        _os_log_impl(&dword_19B949000, v86, OS_LOG_TYPE_DEFAULT, "%s: sysdiagnose skipped - already done recently (%.6lfs ago)", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: sysdiagnose skipped - already done recently (%.6lfs ago)"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: sysdiagnose skipped - already done recently (%.6lfs ago)"));
      }
    }
    qword_1EE40B000 = *(_QWORD *)&v84;
  }
}

void sub_19B9B8F94(uint64_t a1, const char *a2, double a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("/usr/local/bin/netdiagnose stop packetcapture"), a3);
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend_UTF8String(v4, v5, v6, v7);
  IMPerformSystem();
  OSLogHandleForTransportCategory();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136315138;
    v11 = v9;
    _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "%s: netdiagnose stop packetcapture", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: netdiagnose stop packetcapture"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: netdiagnose stop packetcapture"));
    }
  }

}

void sub_19B9B90FC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  OSLogHandleForTransportCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136315138;
    v7 = v5;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "%s: sysdiagnose finished", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("IDSNetworkingLogDump"), CFSTR("IDS"), CFSTR("%s: sysdiagnose finished"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSNetworkingLogDump"), CFSTR("%s: sysdiagnose finished"));
    }
  }

}

void sub_19B9B9528(uint64_t a1, void *a2)
{
  const char *v3;
  double v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend_connectionDidClose_(v5, v3, *(_QWORD *)(a1 + 32), v4);

}

uint64_t sub_19B9B9688(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19B9B9D2C(uint64_t a1, void *a2)
{
  const char *v3;
  double v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend_connection_didReceiveData_(v5, v3, *(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 40));

}

void sub_19B9B9DD4(uint64_t a1)
{
  uint64_t v1;
  dispatch_source_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD handler[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 40))
  {
    v3 = dispatch_source_create(MEMORY[0x1E0C80DB8], *(int *)(v1 + 56), 0, *(dispatch_queue_t *)(v1 + 32));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(NSObject **)(v6 + 40);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = sub_19B9B9E78;
    handler[3] = &unk_1E3C1F898;
    handler[4] = v6;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 40));
  }
}

uint64_t sub_19B9B9E78(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processBytesAvailable, a4, a2);
}

void sub_19B9BA6D8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19B9BA264);
  }
  _Unwind_Resume(a1);
}

void sub_19B9BA7D0(uint64_t a1)
{
  uint64_t v2;
  dispatch_source_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v9[8];
  _QWORD handler[5];

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 48))
  {
    v3 = dispatch_source_create(MEMORY[0x1E0C80DF0], *(int *)(v2 + 56), 0, *(dispatch_queue_t *)(v2 + 32));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = v3;

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(NSObject **)(v6 + 48);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = sub_19B9BA964;
    handler[3] = &unk_1E3C1F898;
    handler[4] = v6;
    dispatch_source_set_event_handler(v7, handler);
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    OSLogHandleForIDSCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "Resuming write source", v9, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (MarcoShouldLog())
        MarcoLog();
      if (IMShouldLog())
        IMLogString();
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 1;
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 48));
  }
}

uint64_t sub_19B9BA964(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__sendToConnectedSocket, a4, a2);
}

uint64_t sub_19B9BAA40(_QWORD *a1, const char *a2, double a3)
{
  const char *v4;
  uint64_t v5;
  double v6;
  uint64_t result;

  objc_msgSend_addObject_(*(void **)(a1[4] + 24), a2, a1[5], a3);
  result = a1[4];
  if (!*(_QWORD *)(result + 48) || !*(_BYTE *)(result + 88))
    result = objc_msgSend__setupWriteSource((void *)result, v4, v5, v6);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return result;
}

uint64_t sub_19B9BB254(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  unsigned int v6;
  NSObject *v7;
  uint8_t buf[4];
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2[2] < 4)
    return -1;
  *a3 = 0;
  v6 = *(unsigned __int16 *)*a2;
  if (IDSSimpleUInt16List_HasItem(*(_QWORD *)(a1 + 32) + 272, v6))
  {
    *a3 = 1;
    return (bswap32(*(unsigned __int16 *)(*a2 + 2)) >> 16) + 4;
  }
  else if ((v6 & 0xC0) != 0)
  {
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v9 = __rev16(v6);
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "unknown packet, %04x", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("unknown packet, %04x"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("unknown packet, %04x"));
    }
    return -2;
  }
  else
  {
    if (a2[2] < 20)
      return -1;
    return (bswap32(*(unsigned __int16 *)(*a2 + 2)) >> 16) + 20;
  }
}

uint64_t sub_19B9BB9E0(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19B9BB9E8(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19B9BB9F0(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19B9BB9F8(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19B9BBA00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B9BBCEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19B9BCC94(uint64_t a1, signed int a2, const void *a3)
{
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  int v9;
  void *v10;
  NSObject *v11;
  signed int v12;
  _QWORD v13[5];
  id v14;
  _QWORD *v15;
  int v16;
  uint8_t buf[4];
  signed int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v18 = a2;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "prefixCount: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("prefixCount: %d"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("prefixCount: %d"));
    }
  }
  if (a2 >= 1 && (v7 = IDSNAT64PrefixCreate(a3, a2, *(_DWORD *)(a1 + 48))) != 0)
  {
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109376;
      v18 = a2;
      v19 = 1024;
      v20 = v9;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "receive %d nat64 prefix for if:%d", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive %d nat64 prefix for if:%d"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive %d nat64 prefix for if:%d"));
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_19B9BD02C;
    v13[3] = &unk_1E3C1FC98;
    v16 = *(_DWORD *)(a1 + 48);
    v10 = *(void **)(a1 + 40);
    v13[4] = *(_QWORD *)(a1 + 32);
    v15 = v7;
    v14 = v10;
    IDSTransportThreadAddBlock(v13);

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 552) = 0;
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109120;
      v18 = v12;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "nw_nat64_copy_prefixes_async failed for if:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("nw_nat64_copy_prefixes_async failed for if:%d."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("nw_nat64_copy_prefixes_async failed for if:%d."));
      }
    }
  }
}

uint64_t sub_19B9BD02C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t result;
  uint8_t buf[4];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)buf = 67109120;
    v6 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "set nat64 prefix for if:%d in cache.", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("set nat64 prefix for if:%d in cache."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("set nat64 prefix for if:%d in cache."));
    }
  }
  IDSNAT64PrefixCacheSetPrefixes(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 216), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(result + 16))(result);
  return result;
}

void sub_19B9C043C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19B9C04B4;
  v5[3] = &unk_1E3C1FA08;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  IDSTransportThreadAddBlock(v5);

}

uint64_t sub_19B9C04B4(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handle_wifi_path_nwEndPoind_, *(_QWORD *)(a1 + 40), a2);
}

void sub_19B9C04C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19B9C053C;
  v5[3] = &unk_1E3C1FA08;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  IDSTransportThreadAddBlock(v5);

}

uint64_t sub_19B9C053C(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handle_cellular_path_nwEndPoind_, *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_19B9C1070(uint64_t a1)
{
  double v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  _BYTE v16[14];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a1 + 64);
  if (*(_BYTE *)(a1 + 92) && (v2 == 0.0 || *(_DWORD *)(a1 + 88) == 10))
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v16 = v4;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = 10;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "initiator: allocateRequestTime: %f, IDSRadioAccessTechnology_Unknown: %u", buf, 0x12u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("initiator: allocateRequestTime: %f, IDSRadioAccessTechnology_Unknown: %u"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("initiator: allocateRequestTime: %f, IDSRadioAccessTechnology_Unknown: %u"));
      }
    }
  }
  else
  {
    v6 = (int)(v2 * 1000.0);
    OSLogHandleForTransportCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v16 = 402;
      *(_WORD *)&v16[4] = 2112;
      *(_QWORD *)&v16[6] = v8;
      v17 = 1024;
      v18 = v6;
      v19 = 1024;
      v20 = v9;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "report AWD allocator event %d for request %@, duration %u ms, RAT: %u", buf, 0x1Eu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        v13 = v6;
        v14 = *(unsigned int *)(a1 + 88);
        v11 = 402;
        v12 = *(_QWORD *)(a1 + 32);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report AWD allocator event %d for request %@, duration %u ms, RAT: %u"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
        {
          v13 = v6;
          v14 = *(unsigned int *)(a1 + 88);
          v11 = 402;
          v12 = *(_QWORD *)(a1 + 32);
          result = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report AWD allocator event %d for request %@, duration %u ms, RAT: %u"));
        }
      }
    }
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 592);
    if (v10)
    {
      result = *(_QWORD *)(v10 + 16);
      if (result)
      {
        LOBYTE(v11) = *(_BYTE *)(a1 + 92);
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, 402, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 88), (int)v6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v11, v12, v13, v14);
      }
    }
  }
  return result;
}

id sub_19B9C1764(uint64_t a1)
{
  id v2;
  const char *v3;
  double v4;
  void *v5;
  const __SecRandom *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v2 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v5 = (void *)objc_msgSend_initWithLength_(v2, v3, 12, v4);
  v6 = (const __SecRandom *)*MEMORY[0x1E0CD7000];
  v7 = objc_retainAutorelease(v5);
  v11 = (void *)objc_msgSend_mutableBytes(v7, v8, v9, v10);
  v12 = SecRandomCopyBytes(v6, 0xCuLL, v11);
  if ((_DWORD)v12)
  {
    v16 = v12;
    objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_19BAF123C(v16, v17, v18, v19, v20, v21, v22, v23);

    v24 = 0;
  }
  else
  {
    objc_msgSend_deriveAES128CTRKeys_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15);
    v24 = v7;
  }

  return v24;
}

uint64_t sub_19B9C1824(uint64_t a1, const char *a2, char a3, int a4, uint64_t a5, double a6)
{
  uint64_t result;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  double v23;
  NSObject *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    if ((_DWORD)a5)
      objc_msgSend__updateCandidatePair_newLocalPort_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a6, a5);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if ((a3 & 1) == 0)
    {
      OSLogHandleForTransportCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(*(void **)(a1 + 40), v10, v11, v12)];
        v14 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315650;
        v29 = v13;
        v30 = 2080;
        v31 = off_1EE40A668;
        v32 = 2112;
        v33 = v14;
        _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v18 = objc_msgSend_state(*(void **)(a1 + 40), v15, v17, v16);
          v26 = off_1EE40A668;
          v27 = *(_QWORD *)(a1 + 40);
          v25 = (&_IDSStunCandidatePairStateStrings)[v18];
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
          if (_IDSShouldLog())
          {
            v20 = objc_msgSend_state(*(void **)(a1 + 40), v15, v19, v16, v25, v26, v27);
            v26 = off_1EE40A668;
            v27 = *(_QWORD *)(a1 + 40);
            v25 = (&_IDSStunCandidatePairStateStrings)[v20];
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
          }
        }
      }
      objc_msgSend_setState_(*(void **)(a1 + 40), v15, 2, v16, v25, v26, v27);
    }
    if (a4)
    {
      OSLogHandleForTransportCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "QR connection(H2) to the QR server failed - reconnecting...", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("QR connection(H2) to the QR server failed - reconnecting..."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("QR connection(H2) to the QR server failed - reconnecting..."));
        }
      }
      return objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(*(void **)(a1 + 32), v22, *(_QWORD *)(a1 + 40), v23, 699, 1);
    }
    else
    {
      OSLogHandleForTransportCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "QR connection(H2) to the QR server failed - do not reconnect", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("QR connection(H2) to the QR server failed - do not reconnect"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("QR connection(H2) to the QR server failed - do not reconnect"));
        }
      }
    }
  }
  return result;
}

id sub_19B9C2000(uint64_t a1)
{
  id v2;
  const char *v3;
  double v4;
  void *v5;
  const __SecRandom *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v2 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v5 = (void *)objc_msgSend_initWithLength_(v2, v3, 12, v4);
  v6 = (const __SecRandom *)*MEMORY[0x1E0CD7000];
  v7 = objc_retainAutorelease(v5);
  v11 = (void *)objc_msgSend_mutableBytes(v7, v8, v9, v10);
  v12 = SecRandomCopyBytes(v6, 0xCuLL, v11);
  if ((_DWORD)v12)
  {
    v16 = v12;
    objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_19BAF123C(v16, v17, v18, v19, v20, v21, v22, v23);

    v24 = 0;
  }
  else
  {
    objc_msgSend_deriveAES128CTRKeys_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15);
    v24 = v7;
  }

  return v24;
}

uint64_t sub_19B9C20C0(uint64_t a1, const char *a2, char a3, int a4, double a5)
{
  uint64_t result;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  double v22;
  NSObject *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint8_t buf[4];
  char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    if (!*(_BYTE *)(a1 + 56))
      objc_msgSend_setState_(*(void **)(a1 + 32), a2, 0, a5);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if ((a3 & 1) == 0)
    {
      OSLogHandleForTransportCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(*(void **)(a1 + 32), v9, v10, v11)];
        v13 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136315650;
        v28 = v12;
        v29 = 2080;
        v30 = off_1EE40A668;
        v31 = 2112;
        v32 = v13;
        _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v17 = objc_msgSend_state(*(void **)(a1 + 32), v14, v16, v15);
          v25 = off_1EE40A668;
          v26 = *(_QWORD *)(a1 + 32);
          v24 = (&_IDSStunCandidatePairStateStrings)[v17];
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
          if (_IDSShouldLog())
          {
            v19 = objc_msgSend_state(*(void **)(a1 + 32), v14, v18, v15, v24, v25, v26);
            v25 = off_1EE40A668;
            v26 = *(_QWORD *)(a1 + 32);
            v24 = (&_IDSStunCandidatePairStateStrings)[v19];
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
          }
        }
      }
      objc_msgSend_setState_(*(void **)(a1 + 32), v14, 2, v15, v24, v25, v26);
    }
    if (a4)
    {
      OSLogHandleForTransportCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "QR connection to the QR server failed - reconnecting...", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("QR connection to the QR server failed - reconnecting..."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("QR connection to the QR server failed - reconnecting..."));
        }
      }
      return objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(*(void **)(a1 + 40), v21, *(_QWORD *)(a1 + 32), v22, 699, 1);
    }
    else
    {
      OSLogHandleForTransportCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "QR connection to the QR server failed - do not reconnect", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("QR connection to the QR server failed - do not reconnect"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("QR connection to the QR server failed - do not reconnect"));
        }
      }
    }
  }
  return result;
}

void sub_19B9C5D58(void *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  id v6;
  double v7;
  void *v8;
  void *v9;
  const char *v10;
  double v11;
  void *v12;
  NSObject *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v6 = a1;
  if (v6)
  {
    v8 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E0C99D80], v5, a3, v7, *MEMORY[0x1E0CB2D50]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(v8, v10, (uint64_t)CFSTR("GlobalLink"), v11, a2, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    im_primary_queue();
    v13 = objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_19BA0E960;
    v15[3] = &unk_1E3C1C7E8;
    v16 = v12;
    v17 = v6;
    v14 = v12;
    dispatch_async(v13, v15);

  }
}

uint64_t sub_19B9C5E54(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 68), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64));
}

uint64_t sub_19B9C5E6C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend_sendQUICInfoRequest(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_19B9C5E74(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend_sendQUICInfoRequest(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19B9C5E7C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  const char *v10;
  double v11;
  id v12;

  v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_pendingNoSessionStateAllocbind(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(v5, v10, (uint64_t)v12, v11, 0, 0, 0, v9);

}

void sub_19B9C5ED8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend_local(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_radioAccessTechnology(v5, v6, v7, v8);

  v10 = *(void **)(a1 + 40);
  objc_msgSend_allValues(*(void **)(*(_QWORD *)(a1 + 48) + 224), v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v10) = GLUtilHasRelayCandidatePairSucceededOrConnected(v10, v14, v9);

  if ((_DWORD)v10)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 40);
      v20 = (&_IDSStunTransportStrings)[*(_QWORD *)(a1 + 72)];
      v21 = 138412802;
      v22 = v19;
      v23 = 2080;
      v24 = v20;
      v25 = 2080;
      v26 = IDSRadioAccessTechnologyToString(v9);
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "session %@ is connected to QR, skip [%s] attempt with RAT %s.", (uint8_t *)&v21, 0x20u);
    }

  }
  else
  {
    objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(*(void **)(a1 + 48), v15, *(_QWORD *)(a1 + 56), v17, 0, *(unsigned __int8 *)(a1 + 84), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 80));
  }
}

uint64_t sub_19B9C73EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19B9C73FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19B9CB1DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  int isQUIC;
  double v13;
  void *v14;
  id v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v17 = v5;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "Register plugin: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v15 = v5;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Register plugin: %@"));
      if (_IDSShouldLog())
      {
        v15 = v5;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Register plugin: %@"));
      }
    }
  }
  isQUIC = objc_msgSend_isQUIC(*(void **)(a1 + 32), v8, v9, v10, v15);
  v14 = *(void **)(a1 + 40);
  if (isQUIC)
    objc_msgSend_sendQUICPluginRegistrationRequestWithOptions_(v14, v11, (uint64_t)v6, v13);
  else
    objc_msgSend_sendQRPluginRegistrationRequest_options_(v14, v11, 0, v13, v6);

}

uint64_t sub_19B9CDDF8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v9 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "session connected message timed out for receiver, disconnect %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v7 = *(_QWORD *)(a1 + 32);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connected message timed out for receiver, disconnect %@."));
      if (_IDSShouldLog())
      {
        v7 = *(_QWORD *)(a1 + 32);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connected message timed out for receiver, disconnect %@."));
      }
    }
  }
  return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(*(void **)(a1 + 40), v4, *(_QWORD *)(a1 + 48), v5, 0, 9, v7);
}

uint64_t sub_19B9CED1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19B9D0EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t *sub_19B9D0F0C()
{
  uint64_t *result;

  qword_1EE40B008 = *(_QWORD *)MEMORY[0x1A1AC7380]("kSymptomDiagnosticActionProbePacketCapture", CFSTR("SymptomDiagnosticReporter"));
  result = (uint64_t *)MEMORY[0x1A1AC7380]("kSymptomDiagnosticActionProbeDuration", CFSTR("SymptomDiagnosticReporter"));
  qword_1EE40B010 = *result;
  return result;
}

uint64_t sub_19B9D0F64(uint64_t a1, const char *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  NSObject *v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_snapshotWithSignature_delay_events_payload_actions_reply_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(double *)(a1 + 64), 0, 0, *(_QWORD *)(a1 + 48), &unk_1E3C1FEB0) & 1) != 0)
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v9 = v4;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "SymptomReporter: Sent snapshot for signature %@", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SymptomReporter: Sent snapshot for signature %@"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SymptomReporter: Sent snapshot for signature %@"));
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v9 = v7;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "SymptomReporter: Failed to send snapshot for signature %@", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SymptomReporter: Failed to send snapshot for signature %@"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          result = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SymptomReporter: Failed to send snapshot for signature %@"));
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }
  return result;
}

void sub_19B9D11AC(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t buf[4];
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  OSLogHandleForTransportCategory();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v5 = v2;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "SymptomReporter: got response from diagnosticReporter - %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("SymptomReporter: got response from diagnosticReporter - %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("SymptomReporter: got response from diagnosticReporter - %@"));
    }
  }

}

uint64_t sub_19B9D1840(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  unint64_t v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v20 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "disconnect session %@ for goaway.", buf, 0xCu);
  }

  objc_msgSend_setIsDisconnecting_(*(void **)(a1 + 40), v7, 0, v8);
  v13 = objc_msgSend_state(*(void **)(a1 + 40), v9, v10, v11);
  if (v13 < 5)
    return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(*(void **)(a1 + 48), v12, *(_QWORD *)(a1 + 32), v14, 0, 4);
  OSLogHandleForTransportCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = (&_IDSStunCandidatePairStateStrings)[v13];
    *(_DWORD *)buf = 138412546;
    v20 = v16;
    v21 = 2080;
    v22 = v17;
    _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is already disconnecting [%s], ignore.", buf, 0x16u);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLogTransport();
    if ((_DWORD)result)
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("candidate pair %@ is already disconnecting [%s], ignore."));
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("candidate pair %@ is already disconnecting [%s], ignore."));
    }
  }
  return result;
}

void sub_19B9D1A3C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 592);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 48);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
      *(_DWORD *)buf = 67109378;
      v26 = v4;
      v27 = 2112;
      v28 = v5;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "request new allocation with type %d for goaway indication (ids-session-id:%@).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v22 = *(_QWORD *)(a1 + 48);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("request new allocation with type %d for goaway indication (ids-session-id:%@)."));
      if (_IDSShouldLog())
      {
        v22 = *(_QWORD *)(a1 + 48);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("request new allocation with type %d for goaway indication (ids-session-id:%@)."));
      }
    }
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 592) + 8);
    v11 = *(_QWORD *)(v9 + 672);
    objc_msgSend_sessionID(*(void **)(a1 + 40), v6, v7, v8, v22, v23);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(double *)(a1 + 56);
    v15 = *(unsigned __int16 *)(a1 + 68);
    v16 = *(_DWORD *)(a1 + 64);
    objc_msgSend_relaySessionToken(*(void **)(a1 + 40), v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    LOWORD(v24) = 0;
    v21 = (id)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, uint64_t, uint64_t, unint64_t, uint64_t, int, void *, _QWORD, _DWORD))(v10 + 16))(v10, v11, 0, v12, v13, 4, (unint64_t)v14, v15, v16, v20, v24, 0);

  }
}

uint64_t sub_19B9D33B0(uint64_t a1, const char *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[8];
  _OWORD v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 144);
  v12[4] = *(_OWORD *)(a1 + 128);
  v12[5] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v12[6] = *(_OWORD *)(a1 + 160);
  v12[7] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v12[0] = *(_OWORD *)(a1 + 64);
  v12[1] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v12[2] = *(_OWORD *)(a1 + 96);
  v12[3] = v5;
  v6 = *(_OWORD *)(a1 + 272);
  v11[4] = *(_OWORD *)(a1 + 256);
  v11[5] = v6;
  v7 = *(_OWORD *)(a1 + 304);
  v11[6] = *(_OWORD *)(a1 + 288);
  v11[7] = v7;
  v8 = *(_OWORD *)(a1 + 208);
  v11[0] = *(_OWORD *)(a1 + 192);
  v11[1] = v8;
  v9 = *(_OWORD *)(a1 + 240);
  v11[2] = *(_OWORD *)(a1 + 224);
  v11[3] = v9;
  return objc_msgSend__processReallocIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(double *)(a1 + 320), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 328), v12, v11, *(_QWORD *)(a1 + 56));
}

void sub_19B9D43FC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  double v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  int v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  int isQUIC;
  double v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  NSObject *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  objc_msgSend_sessionID(*(void **)(a1 + 32), a2, a3, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    tokenForStunCandidatePair(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v7);
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 672);
      objc_msgSend_sessionID(*(void **)(a1 + 32), v14, v15, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend_linkID(*(void **)(a1 + 32), v19, v20, v21);
      v33 = 138413058;
      v34 = v17;
      v35 = 2112;
      v36 = v18;
      v37 = 2112;
      v38 = v9;
      v39 = 1024;
      v40 = v22;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "Realloc Done: Send unallocbind for IDSSessionID: %@ QRSessionID: %@ and %@, linkID: %d", (uint8_t *)&v33, 0x26u);

    }
    isQUIC = objc_msgSend_isQUIC(*(void **)(a1 + 32), v23, v24, v25);
    v29 = *(void **)(a1 + 40);
    if (isQUIC)
      objc_msgSend__sendQUICUnallocbindRequest_reason_(v29, v26, (uint64_t)v9, v28, 3);
    else
      objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v29, v26, (uint64_t)v9, v28, 0, 3);
    objc_msgSend_stopSessionConnectedTimer(*(void **)(a1 + 32), v30, v31, v32);
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v5, v6, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v33) = 0;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "invalid sessionID, return", (uint8_t *)&v33, 2u);
    }
  }

}

void sub_19B9D6C60(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19B9D60DCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19B9D6D78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_19B9D6D88(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

uint64_t sub_19B9D7DB0(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_19B9D7DC4(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendUnallocbindRequestTimeOut_stunMessage_reason_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_19B9DB654(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 64), a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t sub_19B9DC794(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19B9DF348(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  id WeakRetained;
  const char *v7;
  double v8;
  uint8_t v9[16];

  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "[U+1] now that remote device version is received, processing incoming ConnectionData", v9, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__processCommandConnectionData_candidatePairToken_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40));

}

uint64_t sub_19B9DFE8C(uint64_t a1, const char *a2, double a3)
{
  uint64_t result;

  result = objc_msgSend__sendNowConnectionDataWithRemovedAddressList_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 856) = 0;
  return result;
}

void sub_19B9E09AC(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19B9E0A00;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19B9E0A00(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__handleDisconnectTimer(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19B9E17A0(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19B9E17F4;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19B9E17F4(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleActivityTimer, a4, a2);
}

void sub_19B9E2C28(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19B9E2B58);
  }
  _Unwind_Resume(a1);
}

void sub_19B9E2C5C(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;
  id v5;
  int v6;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_19B9E2CF8;
  v2[3] = &unk_1E3C20018;
  v3 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 56);
  IDSTransportThreadAddBlock(v2);

}

void sub_19B9E2CF8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  double v6;
  id v7;

  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__handleAllocbindFailoverTimerWithTransportScoreCards_failoverTimerOnCandidatePair_onInterface_(v7, v5, *(_QWORD *)(a1 + 40), v6, *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));

}

void sub_19B9E2D3C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  double v6;
  id v7;

  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__handleAllocbindFailoverTimerWithTransportScoreCards_failoverTimerOnCandidatePair_onInterface_(v7, v5, *(_QWORD *)(a1 + 40), v6, 0, *(unsigned int *)(a1 + 48));

}

void sub_19B9E3DF0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19B9E3AF4);
  }
  _Unwind_Resume(a1);
}

void sub_19B9E5A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  id v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD v23[5];
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 592);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      LOWORD(v21) = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _DWORD, _QWORD, _QWORD, _DWORD))(v4 + 16))(v4, *(_QWORD *)(v1 + 672), 0, 0, 2, 0xFFFFLL, 0, 0, 0, 0, v21, 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      OSLogHandleForTransportCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_address(*(void **)(a1 + 40), v7, v8, v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
        *(_DWORD *)buf = 138412802;
        v26 = v10;
        v27 = 2112;
        v28 = v5;
        v29 = 2112;
        v30 = v11;
        _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "request self allocation for [%@], requestID %@, ids-sesion-id %@", buf, 0x20u);

      }
      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        objc_msgSend_address(*(void **)(a1 + 40), v12, v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("request self allocation for [%@], requestID %@, ids-sesion-id %@"));

        if (_IDSShouldLog())
        {
          objc_msgSend_address(*(void **)(a1 + 40), v16, v17, v18, v15, v5, v22);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("request self allocation for [%@], requestID %@, ids-sesion-id %@"));

        }
      }
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_19B9E5CE4;
      v23[3] = &unk_1E3C1FA08;
      v23[4] = *(_QWORD *)(a1 + 32);
      v24 = v5;
      v20 = v5;
      IDSTransportThreadAddBlock(v23);

    }
  }
}

void sub_19B9E5CE4(uint64_t a1)
{
  uint64_t v2;
  __CFArray *v3;
  id v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  _QWORD v8[5];
  id v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(__CFArray **)(v2 + 616);
  if (v3
    || (v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]),
        v5 = *(_QWORD *)(a1 + 32),
        v6 = *(void **)(v5 + 616),
        *(_QWORD *)(v5 + 616) = v4,
        v6,
        v2 = *(_QWORD *)(a1 + 32),
        (v3 = *(__CFArray **)(v2 + 616)) != 0))
  {
    v7 = *(const void **)(a1 + 40);
    if (v7)
    {
      CFArrayAppendValue(v3, v7);
      v2 = *(_QWORD *)(a1 + 32);
    }
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19B9E5D9C;
  v8[3] = &unk_1E3C1FA08;
  v8[4] = v2;
  v9 = *(id *)(a1 + 40);
  IDSTransportThreadAddBlockAfter(v8, 10.0);

}

uint64_t sub_19B9E5D9C(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleSelfAllocationTimeout_, *(_QWORD *)(a1 + 40), a2);
}

void sub_19B9E7C14(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  const char *v10;
  double v11;
  __int128 v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  id v27;
  const char *v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  double v44;
  NSObject *v45;
  char *v46;
  char *v47;
  const char *v48;
  double v49;
  const char *v50;
  double v51;
  NSObject *v52;
  char *v53;
  char *v54;
  void *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  _QWORD v62[5];
  id v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t buf[4];
  char *v70;
  __int16 v71;
  char *v72;
  __int16 v73;
  char *v74;
  _BYTE v75[128];
  _OWORD v76[8];
  _OWORD __str[8];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v61 = a2;
  objc_msgSend_linkMetrics(*(void **)(a1 + 32), v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sendBindingRequest(v6, v7, v8, v9);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(*(void **)(a1 + 40), v10, *(_QWORD *)(a1 + 32), v11);
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[6] = v12;
  __str[7] = v12;
  __str[4] = v12;
  __str[5] = v12;
  __str[2] = v12;
  __str[3] = v12;
  __str[0] = v12;
  __str[1] = v12;
  v76[6] = v12;
  v76[7] = v12;
  v76[4] = v12;
  v76[5] = v12;
  v76[2] = v12;
  v76[3] = v12;
  v76[0] = v12;
  v76[1] = v12;
  objc_msgSend_local(*(void **)(a1 + 32), v13, v14, -3.72066208e-103);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_address(v15, v16, v17, v18);

  objc_msgSend_remote(*(void **)(a1 + 32), v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = objc_msgSend_external(v23, v24, v25, v26);

  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v27 = *(id *)(*(_QWORD *)(a1 + 40) + 408);
  v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v65, v29, v75, 16);
  if (v32)
  {
    v34 = *(_QWORD *)v66;
    while (2)
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_QWORD *)v66 != v34)
          objc_enumerationMutation(v27);
        v36 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_msgSend_address(v36, v30, v31, v33);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = objc_msgSend_sa(v37, v38, v39, v40);

        if (IsSameSA(v41, v19) && objc_msgSend_clat46(v36, v30, v31, v33) && *(_BYTE *)(v19 + 1) == 2)
        {
          objc_msgSend_local(*(void **)(a1 + 32), v30, v31, v33);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setIsCLAT46_(v42, v43, 1, v44);

          goto LABEL_13;
        }
      }
      v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v65, v33, v75, 16);
      if (v32)
        continue;
      break;
    }
  }
LABEL_13:

  OSLogHandleForTransportCategory();
  v45 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    v46 = SAToIPPortString((char *)__str, 0x80uLL, v19);
    v47 = SAToIPPortString((char *)v76, 0x80uLL, v60);
    *(_DWORD *)buf = 138412802;
    v70 = v61;
    v71 = 2080;
    v72 = v46;
    v73 = 2080;
    v74 = v47;
    _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "send binding request %@ for %s-%s.", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v58 = SAToIPPortString((char *)__str, 0x80uLL, v19);
      v59 = SAToIPPortString((char *)v76, 0x80uLL, v60);
      v57 = v61;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send binding request %@ for %s-%s."));
      if (_IDSShouldLog())
      {
        v58 = SAToIPPortString((char *)__str, 0x80uLL, v19);
        v59 = SAToIPPortString((char *)v76, 0x80uLL, v60);
        v57 = v61;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send binding request %@ for %s-%s."));
      }
    }
  }
  objc_msgSend__sendStunMessage_candidatePair_(*(void **)(a1 + 40), v48, (uint64_t)v61, v49, *(_QWORD *)(a1 + 32), v57, v58, v59);
  if (!*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_setState_(*(void **)(a1 + 32), v50, 1, v51);
    OSLogHandleForTransportCategory();
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      v53 = *(char **)(a1 + 48);
      v54 = (&_IDSStunCandidatePairStateStrings)[*(_QWORD *)(a1 + 56)];
      *(_DWORD *)buf = 136315650;
      v70 = v54;
      v71 = 2080;
      v72 = off_1EE40A660;
      v73 = 2112;
      v74 = v53;
      _os_log_impl(&dword_19B949000, v52, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
      }
    }
  }
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 3221225472;
  v62[2] = sub_19B9E8134;
  v62[3] = &unk_1E3C20090;
  v55 = *(void **)(a1 + 48);
  v62[4] = *(_QWORD *)(a1 + 40);
  v63 = v55;
  v64 = v61;
  v56 = v61;
  IDSTransportThreadAddBlockAfter(v62, 1.0);

}

uint64_t sub_19B9E8134(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__sendBindingRequest_stunMessage_, *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_19B9E8144(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__sendBindingRequest_stunMessage_, *(_QWORD *)(a1 + 40), a2);
}

void sub_19B9E8154(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  IDSQUICConnectionIDs *v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  void *v23;
  id v24;
  const char *v25;
  double v26;
  const char *v27;
  double v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  const char *v35;
  double v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  const char *v43;
  double v44;
  void *v45;
  const char *v46;
  double v47;
  void *v48;
  double v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  OSLogHandleForTransportCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_blob(v3, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v56 = v8;
    v57 = 2112;
    v58 = v9;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "p2p negotiation blob: %@ for:%@", buf, 0x16u);

  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      objc_msgSend_blob(v3, v10, v11, v12);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = *(_QWORD *)(a1 + 32);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("p2p negotiation blob: %@ for:%@"));

      if (_IDSShouldLog())
      {
        objc_msgSend_blob(v3, v10, v11, v12, v52, v53);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = *(_QWORD *)(a1 + 32);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("p2p negotiation blob: %@ for:%@"));

      }
    }
  }
  objc_msgSend_QUICConnectionIDs(*(void **)(a1 + 40), v10, v11, v12, v52, v53);
  v15 = (IDSQUICConnectionIDs *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    v15 = objc_alloc_init(IDSQUICConnectionIDs);
    v20 = (void *)objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 48) + 1088), v17, v18, v19);
    v54 = v20;
    objc_msgSend_generateLocalIDs_(v15, v21, (uint64_t)&v54, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v54;

    objc_msgSend_addObjectsFromArray_(*(void **)(*(_QWORD *)(a1 + 48) + 1088), v25, (uint64_t)v23, v26);
    objc_msgSend_setQUICConnectionIDs_(*(void **)(a1 + 40), v27, (uint64_t)v15, v28);

  }
  objc_msgSend_blob(v3, v13, v14, v16);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("ids-stun-attribute-tle-p2p-blob"), v29);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF2514();
  }

  v30 = (void *)MEMORY[0x1E0CB37E8];
  v34 = objc_msgSend_localAVCConnectionID(v15, v31, v32, v33);
  objc_msgSend_numberWithUnsignedInt_(v30, v35, v34, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("ids-stun-attribute-tle-p2p-connection-id-avc"), v37);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF2494();
  }

  v38 = (void *)MEMORY[0x1E0CB37E8];
  v42 = objc_msgSend_localIDSConnectionID(v15, v39, v40, v41);
  objc_msgSend_numberWithUnsignedInt_(v38, v43, v42, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (v45)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("ids-stun-attribute-tle-p2p-connection-id-ids"), v45);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF2414();
  }

  objc_msgSend_setTransactionID_attributes_(*(void **)(a1 + 64), v46, 0, v47, *(_QWORD *)(a1 + 56));
  v48 = *(void **)(a1 + 64);
  v49 = ids_monotonic_time();
  objc_msgSend_setStartTime_(v48, v50, v51, v49);
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_19B9E89FC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19B9E8A98;
  v6[3] = &unk_1E3C20108;
  v7 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v4;
  v5 = v3;
  IDSTransportThreadAddBlock(v6);

}

void sub_19B9E8A98(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  double v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v33 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "getting negotiation from candidate pair %@...", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v29 = *(_QWORD *)(a1 + 32);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("getting negotiation from candidate pair %@..."));
      if (_IDSShouldLog())
      {
        v29 = *(_QWORD *)(a1 + 32);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("getting negotiation from candidate pair %@..."));
      }
    }
  }
  objc_msgSend_p2pNegotiation(*(void **)(a1 + 32), v4, v5, v6, v29);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(void **)(a1 + 32);
      objc_msgSend_p2pNegotiation(v12, v9, v10, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v33 = v12;
      v34 = 2112;
      v35 = v13;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "negotiation exists for candidate pair %@: %@", buf, 0x16u);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v17 = *(void **)(a1 + 32);
        objc_msgSend_p2pNegotiation(v17, v14, v15, v16);
        v30 = v17;
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("negotiation exists for candidate pair %@: %@"));

        if (_IDSShouldLog())
        {
          v18 = *(void **)(a1 + 32);
          objc_msgSend_p2pNegotiation(v18, v14, v15, v16, v30, v31);
          v30 = v18;
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("negotiation exists for candidate pair %@: %@"));

        }
      }
    }
    v19 = *(_QWORD *)(a1 + 48);
    objc_msgSend_p2pNegotiation(*(void **)(a1 + 32), v14, v15, v16, v30, v31);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v33 = v22;
      _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "creating negotiation for candidate pair %@...", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v30 = *(void **)(a1 + 32);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("creating negotiation for candidate pair %@..."));
        if (_IDSShouldLog())
        {
          v30 = *(void **)(a1 + 32);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("creating negotiation for candidate pair %@..."));
        }
      }
    }
    objc_msgSend_beginNegotiation(*(void **)(a1 + 40), v23, v24, v25, v30);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setP2pNegotiation_(*(void **)(a1 + 32), v26, (uint64_t)v20, v27);
    OSLogHandleForTransportCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v33 = v20;
      _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "negotiation: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("negotiation: %@"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("negotiation: %@"));
      }
    }
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  }

}

void sub_19B9EA380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&STACK[0x300], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19B9EA494(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19B9EA4A4(uint64_t a1)
{

}

uint64_t sub_19B9EA4AC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  const char *v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  double v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  const char *v34;
  double v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t result;
  double v40;
  void *v41;
  double v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t buf[4];
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 80;
  objc_msgSend_linkMetrics(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), a2, a3, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sendBindingResponse(v6, v7, v8, v9);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(*(void **)(a1 + 32), v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 40), v11);
  v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  objc_msgSend_transactionID(*(void **)(a1 + 40), v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTransactionID_attributes_(v12, v17, (uint64_t)v16, v18, *(_QWORD *)(a1 + 48));

  OSLogHandleForTransportCategory();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138412802;
    v52 = v20;
    v53 = 2112;
    v54 = v21;
    v55 = 2112;
    v56 = v22;
    _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "send binding response %@ for %@-%@.", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v49 = *(_QWORD *)(a1 + 56);
      v50 = *(_QWORD *)(a1 + 64);
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("send binding response %@ for %@-%@."));
      if (_IDSShouldLog())
      {
        v49 = *(_QWORD *)(a1 + 56);
        v50 = *(_QWORD *)(a1 + 64);
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("send binding response %@ for %@-%@."));
      }
    }
  }
  v26 = *(void **)(a1 + 32);
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  v28 = *(unsigned int *)(a1 + 352);
  v29 = *(_QWORD *)(a1 + 72);
  objc_msgSend_local(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v23, v24, v25, v47, v49, v50);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  HIDWORD(v48) = objc_msgSend_mtu(v30, v31, v32, v33);
  LOWORD(v48) = -1;
  objc_msgSend__sendStunMessage_sourceIfIndex_source_destination_stunTransport_token_linkID_delegatedLinkID_MTULimit_(v26, v34, v27, v35, v28, a1 + 96, a1 + 224, 2, v29, v48);

  result = objc_msgSend_triggeredCheckTime(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v36, v37, v38);
  if (v40 == 0.0)
  {
    v41 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v42 = ids_monotonic_time();
    objc_msgSend_setTriggeredCheckTime_(v41, v43, v44, v42);
    return objc_msgSend__startStunCheck_(*(void **)(a1 + 32), v45, *(_QWORD *)(a1 + 72), v46);
  }
  return result;
}

void sub_19B9EA744(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  const char *v14;
  double v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  double v23;
  void *v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v26 = v5;
    v27 = 2112;
    v28 = v6;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "p2p info for binding response: %@, %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("p2p info for binding response: %@, %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("p2p info for binding response: %@, %@"));
    }
  }
  if (v5)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("ids-stun-attribute-tle-p2p-blob"), v5);
    v9 = (void *)MEMORY[0x1E0CB37E8];
    v13 = objc_msgSend_localAVCConnectionID(v6, v10, v11, v12);
    objc_msgSend_numberWithUnsignedInt_(v9, v14, v13, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("ids-stun-attribute-tle-p2p-connection-id-avc"), v16);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF2494();
    }

    v17 = (void *)MEMORY[0x1E0CB37E8];
    v21 = objc_msgSend_localIDSConnectionID(v6, v18, v19, v20);
    objc_msgSend_numberWithUnsignedInt_(v17, v22, v21, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("ids-stun-attribute-tle-p2p-connection-id-ids"), v24);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF2414();
    }

  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v8);

}

void sub_19B9EAED4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19B9EAF94;
  v8[3] = &unk_1E3C201D0;
  v9 = *(id *)(a1 + 32);
  v10 = v3;
  v4 = *(id *)(a1 + 40);
  v5 = *(void **)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 48);
  v11 = v4;
  v12 = v6;
  v13 = v5;
  v7 = v3;
  IDSTransportThreadAddBlock(v8);

}

void sub_19B9EAF94(uint64_t a1, const char *a2, double a3)
{
  void *v4;
  const char *v5;
  double v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  IDSQUICConnectionIDs *v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  void *v38;
  id v39;
  const char *v40;
  double v41;
  const char *v42;
  double v43;
  const char *v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  IDSQUICConnectionIDs *v49;
  const char *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  id v58;
  IDSQUICConnectionIDs *v59;
  id v60;
  uint64_t v61;
  id v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  objc_msgSend_receiveBlob_(*(void **)(a1 + 40), a2, *(_QWORD *)(a1 + 48), a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setP2pNegotiatedKeys_(*(void **)(a1 + 32), v5, (uint64_t)v4, v6);

  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 72);
    objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v8, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218498;
    v64 = v11;
    v65 = 2112;
    v66 = v12;
    v67 = 2112;
    v68 = v13;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: p2p negotiated keys:%@ candidatePair:%@", buf, 0x20u);

  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v17 = *(_QWORD *)(a1 + 72);
      objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v14, v15, v16);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = *(_QWORD *)(a1 + 32);
      v52 = v17;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_receiveP2PNegotiationBlob[%llu]: p2p negotiated keys:%@ candidatePair:%@"));

      if (_IDSShouldLog())
      {
        v18 = *(_QWORD *)(a1 + 72);
        objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v14, v15, v16, v52, v54, v56);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = *(_QWORD *)(a1 + 32);
        v52 = v18;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_receiveP2PNegotiationBlob[%llu]: p2p negotiated keys:%@ candidatePair:%@"));

      }
    }
  }
  objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v14, v15, v16, v52, v54, v56);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    OSLogHandleForTransportCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 134218240;
      v64 = v21;
      v65 = 1024;
      LODWORD(v66) = v22;
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: p2p negotiated AVC connection ID: %08x", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v53 = *(_QWORD *)(a1 + 72);
        v55 = *(unsigned int *)(a1 + 80);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_receiveP2PNegotiationBlob[%llu]: p2p negotiated AVC connection ID: %08x"));
        if (_IDSShouldLog())
        {
          v53 = *(_QWORD *)(a1 + 72);
          v55 = *(unsigned int *)(a1 + 80);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_receiveP2PNegotiationBlob[%llu]: p2p negotiated AVC connection ID: %08x"));
        }
      }
    }
    OSLogHandleForTransportCategory();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_QWORD *)(a1 + 72);
      v25 = *(_DWORD *)(a1 + 84);
      *(_DWORD *)buf = 134218240;
      v64 = v24;
      v65 = 1024;
      LODWORD(v66) = v25;
      _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: p2p negotiated IDS connection ID: %08x", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v53 = *(_QWORD *)(a1 + 72);
        v55 = *(unsigned int *)(a1 + 84);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_receiveP2PNegotiationBlob[%llu]: p2p negotiated IDS connection ID: %08x"));
        if (_IDSShouldLog())
        {
          v53 = *(_QWORD *)(a1 + 72);
          v55 = *(unsigned int *)(a1 + 84);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_receiveP2PNegotiationBlob[%llu]: p2p negotiated IDS connection ID: %08x"));
        }
      }
    }
    objc_msgSend_QUICConnectionIDs(*(void **)(a1 + 32), v26, v27, v28, v53, v55);
    v30 = (IDSQUICConnectionIDs *)objc_claimAutoreleasedReturnValue();
    if (!v30)
    {
      v30 = objc_alloc_init(IDSQUICConnectionIDs);
      v35 = (void *)objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 56) + 1088), v32, v33, v34);
      v62 = v35;
      objc_msgSend_generateLocalIDs_(v30, v36, (uint64_t)&v62, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = v62;

      objc_msgSend_addObjectsFromArray_(*(void **)(*(_QWORD *)(a1 + 56) + 1088), v40, (uint64_t)v38, v41);
      objc_msgSend_setQUICConnectionIDs_(*(void **)(a1 + 32), v42, (uint64_t)v30, v43);

    }
    objc_msgSend_setRemoteAVCConnectionID_(v30, v29, *(unsigned int *)(a1 + 80), v31);
    objc_msgSend_setRemoteIDSConnectionID_(v30, v44, *(unsigned int *)(a1 + 84), v45);
    v46 = *(_QWORD *)(a1 + 32);
    v47 = *(_QWORD *)(a1 + 72);
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 3221225472;
    v57[2] = sub_19B9EB4A8;
    v57[3] = &unk_1E3C201A8;
    v61 = v47;
    v48 = *(void **)(a1 + 56);
    v60 = *(id *)(a1 + 64);
    v58 = *(id *)(a1 + 40);
    v59 = v30;
    v49 = v30;
    objc_msgSend_setUpP2PQUICPodConnectionsForCandidatePair_attemptID_completionHandler_(v48, v50, v46, v51, v47, v57);

  }
}

void sub_19B9EB4A8(uint64_t a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134217984;
      v16 = v4;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: set up p2p qpod connections", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v8 = (uint64_t *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 56);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_receiveP2PNegotiationBlob[%llu]: set up p2p qpod connections"));
        if ((_IDSShouldLog() & 1) != 0)
        {
          v9 = CFSTR("_receiveP2PNegotiationBlob[%llu]: set up p2p qpod connections");
LABEL_14:
          v14 = *v8;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v9);
        }
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134217984;
      v16 = v11;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: failed to set up p2p qpod connections", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v8 = (uint64_t *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 56);
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_receiveP2PNegotiationBlob[%llu]: failed to set up p2p qpod connections"));
        if ((_IDSShouldLog() & 1) != 0)
        {
          v9 = CFSTR("_receiveP2PNegotiationBlob[%llu]: failed to set up p2p qpod connections");
          goto LABEL_14;
        }
      }
    }
  }
  v12 = *(_QWORD *)(a1 + 48);
  objc_msgSend_blob(*(void **)(a1 + 32), v5, v6, v7, v14);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD))(v12 + 16))(v12, v13, *(_QWORD *)(a1 + 40));

}

void sub_19B9EC3F0(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  int isRelayStunCandidatePair;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  double v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  double v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  double v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  double v73;
  const char *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  double v80;
  const char *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  double v87;
  const char *v88;
  uint64_t v89;
  double v90;
  const char *v91;
  uint64_t v92;
  double v93;
  const char *v94;
  double v95;
  void *v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  void *v101;
  const char *v102;
  double v103;
  const char *v104;
  uint64_t v105;
  double v106;
  uint64_t shouldUseP2PTLE;
  void *v108;
  const char *v109;
  uint64_t v110;
  double v111;
  void *v112;
  const char *v113;
  double v114;
  const char *v115;
  uint64_t v116;
  double v117;
  unint64_t v118;
  const char *v119;
  uint64_t v120;
  double v121;
  unint64_t v122;
  NSObject *v123;
  char *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  double v129;
  _BOOL4 v130;
  const char *v131;
  double v132;
  _QWORD *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  void *v137;
  double v138;
  const __CFDictionary *v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  id v144;
  double v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  double v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  const char *v159;
  double v160;
  void *v161;
  const char *v162;
  double v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  double v169;
  NSObject *v170;
  const char *v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  double v180;
  void *v181;
  const char *v182;
  double v183;
  const char *v184;
  uint64_t v185;
  double v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  double v191;
  void *v192;
  const char *v193;
  double v194;
  const char *v195;
  double v196;
  const char *v197;
  uint64_t v198;
  double v199;
  void *v200;
  const char *v201;
  double v202;
  const char *v203;
  uint64_t v204;
  double v205;
  const char *v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  CFMutableDictionaryRef Mutable;
  uint64_t v211;
  void *v212;
  id v213;
  const char *v214;
  uint64_t v215;
  double v216;
  void *v217;
  NSObject *v218;
  const char *v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  double v225;
  void *v226;
  uint64_t v227;
  const char *v228;
  uint64_t v229;
  double v230;
  uint64_t v231;
  const char *v232;
  double v233;
  const char *v234;
  double v235;
  const char *v236;
  uint64_t v237;
  double v238;
  const char *v239;
  uint64_t v240;
  double v241;
  NSObject *v242;
  const char *v243;
  double v244;
  const char *v245;
  double v246;
  char isCellularStunCandidate;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  void *v251;
  id v252;
  id v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  id v258;
  id v259;
  void *v260;
  uint64_t v261;
  uint8_t buf[4];
  char *v263;
  __int16 v264;
  char *v265;
  __int16 v266;
  void *v267;
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  v258 = a2;
  v259 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = a1 + 80;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = a1 + 208;
  v261 = a1;
  v5 = *(void **)(a1 + 32);
  a1 += 32;
  isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v5, v6, v7, v8);
  v10 = *(void **)(*(_QWORD *)(a1 + 8) + 48);
  objc_msgSend_local(*(void **)a1, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_address(v14, v15, v16, v17);
  objc_msgSend_remote(*(void **)a1, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend_address(v22, v23, v24, v25);
  objc_msgSend_sessionID(*(void **)a1, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(*(void **)a1, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v34, v35, v36, v37);
  if (isRelayStunCandidatePair)
  {
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v10, v38, v18, v39, v26, 0, v30, 0, 1, isCellularStunCandidate);
    v260 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = *(void **)(*(_QWORD *)(v261 + 40) + 48);
    objc_msgSend_local(*(void **)(v261 + 32), v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_address(v44, v45, v46, v47);
    objc_msgSend_remote(*(void **)(v261 + 32), v49, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_address(v52, v53, v54, v55);
    objc_msgSend_sessionID(*(void **)(v261 + 32), v57, v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(*(void **)(v261 + 32), v61, v62, v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v248) = objc_msgSend_isCellularStunCandidate(v64, v65, v66, v67);
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v40, v68, v48, v69, v56, 0, v60, 7, 1, v248);
  }
  else
  {
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v10, v38, v18, v39, v26, 0, v30, 0, 0, isCellularStunCandidate);
    v260 = (void *)objc_claimAutoreleasedReturnValue();

    v70 = *(void **)(*(_QWORD *)(v261 + 40) + 48);
    objc_msgSend_local(*(void **)(v261 + 32), v71, v72, v73);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = objc_msgSend_address(v44, v74, v75, v76);
    objc_msgSend_remote(*(void **)(v261 + 32), v78, v79, v80);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = objc_msgSend_address(v52, v81, v82, v83);
    objc_msgSend_sessionID(*(void **)(v261 + 32), v85, v86, v87);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_local(*(void **)(v261 + 32), v88, v89, v90);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v250) = objc_msgSend_isCellularStunCandidate(v64, v91, v92, v93);
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v70, v94, v77, v95, v84, 0, v60, 9, 0, v250);
  }
  v96 = (void *)objc_claimAutoreleasedReturnValue();

  GLUtilConnectionDictionaryForNWConnectionInfo(v260, 1);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_connections(*(void **)(v261 + 32), v98, v99, v100);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v101, v102, (uint64_t)v97, v103, CFSTR("udp"));

  shouldUseP2PTLE = objc_msgSend__shouldUseP2PTLE(*(void **)(v261 + 40), v104, v105, v106);
  GLUtilConnectionDictionaryForNWConnectionInfo(v96, shouldUseP2PTLE);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_connections(*(void **)(v261 + 32), v109, v110, v111);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v112, v113, (uint64_t)v108, v114, CFSTR("qpod"));

  v118 = objc_msgSend_state(*(void **)(v261 + 32), v115, v116, v117);
  if (v118 <= 2)
  {
    v122 = v118;
    objc_msgSend_setState_(*(void **)(v261 + 32), v119, 3, v121);
    OSLogHandleForTransportCategory();
    v123 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      v124 = (&_IDSStunCandidatePairStateStrings)[v122];
      v125 = *(void **)(v261 + 48);
      *(_DWORD *)buf = 136315650;
      v263 = v124;
      v264 = 2080;
      v265 = off_1EE40A670;
      v266 = 2112;
      v267 = v125;
      _os_log_impl(&dword_19B949000, v123, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v254 = off_1EE40A670;
        v256 = *(_QWORD *)(v261 + 48);
        v249 = (&_IDSStunCandidatePairStateStrings)[v122];
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
        if (_IDSShouldLog())
        {
          v254 = off_1EE40A670;
          v256 = *(_QWORD *)(v261 + 48);
          v249 = (&_IDSStunCandidatePairStateStrings)[v122];
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
        }
      }
    }
  }
  v126 = v261;
  if (*(_BYTE *)(v261 + 350))
  {
    objc_msgSend_sharedInstance(IDSStunConnectionDataController, v119, v120, v121);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    v130 = objc_msgSend_deliveryStatus_(v127, v128, *(_QWORD *)(*(_QWORD *)(v261 + 40) + 624), v129) == 1;

    v126 = v261;
    if (v130)
    {
      objc_msgSend__sendConnectionDataWithRemovedAddressList_(*(void **)(v261 + 40), v131, 0, v132);
      v126 = v261;
    }
  }
  v134 = *(_QWORD *)(v126 + 40);
  v133 = (_QWORD *)(v126 + 40);
  tokenForStunCandidatePair(*(_QWORD *)(*(_QWORD *)(v133[3] + 8) + 24), *(_QWORD *)(*(_QWORD *)(v133[4] + 8) + 24), *(void **)(v134 + 624));
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  v139 = *(const __CFDictionary **)(*v133 + 224);
  if (!v139 || !v137 || !CFDictionaryGetValue(v139, v137))
  {
    v140 = v261;
    v141 = *(void **)(v261 + 56);
    if (v141)
    {
      v144 = v141;
    }
    else
    {
      objc_msgSend_local(*(void **)(v261 + 32), v135, v136, v138);
      v144 = (id)objc_claimAutoreleasedReturnValue();
      v140 = v261;
    }
    objc_msgSend_remote(*(void **)(v140 + 32), v142, v143, v145, v249, v254, v256);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v150 = objc_msgSend_radioAccessTechnology(v146, v147, v148, v149);

    objc_msgSend_remote(*(void **)(v140 + 32), v151, v152, v153);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    v158 = objc_msgSend_mtu(v154, v155, v156, v157);

    objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v159, 2, v160, 1, v150, v158, 0xFFFFFFFFLL, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v261 + 72) + 8) + 24));
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    v164 = v161;
    v165 = v261;
    if (*(_WORD *)(v261 + 348))
    {
      objc_msgSend_setLinkFlags_(v161, v162, *(unsigned __int16 *)(v261 + 348), v163);
      v165 = v261;
    }
    v166 = *(unsigned int *)(v165 + 344);
    if ((_DWORD)v166)
    {
      objc_msgSend_setDataSoMask_(v164, v162, v166, v163);
      v165 = v261;
    }
    v168 = objc_msgSend_indexOfObject_(*(void **)(*(_QWORD *)(v165 + 40) + 448), v162, (uint64_t)v164, v163);
    if (v168 == 0x7FFFFFFFFFFFFFFFLL)
    {
      OSLogHandleForTransportCategory();
      v170 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v263 = (char *)v164;
        _os_log_impl(&dword_19B949000, v170, OS_LOG_TYPE_DEFAULT, "failed to find stored remote candidate %@, this should NOT happen.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v251 = v164;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to find stored remote candidate %@, this should NOT happen."));
          if (_IDSShouldLog())
          {
            v251 = v164;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to find stored remote candidate %@, this should NOT happen."));
          }
        }
      }
    }
    else
    {
      objc_msgSend_objectAtIndex_(*(void **)(*(_QWORD *)(v261 + 40) + 448), v167, v168, v169);
      v173 = objc_claimAutoreleasedReturnValue();

      v164 = (void *)v173;
    }
    v174 = v261;
    if (*(_WORD *)(v261 + 348))
    {
      objc_msgSend_setLinkFlags_(v164, v171, *(unsigned __int16 *)(v261 + 348), v172);
      v174 = v261;
    }
    v175 = *(unsigned int *)(v174 + 344);
    if ((_DWORD)v175)
    {
      objc_msgSend_setDataSoMask_(v164, v171, v175, v172);
      v174 = v261;
    }
    objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v171, (uint64_t)v144, v172, v164, *(_QWORD *)(*(_QWORD *)(v174 + 40) + 624), v251);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    GLUtilConnectionDictionaryForNWConnectionInfo(v260, 1);
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_connections(v176, v178, v179, v180);
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v181, v182, (uint64_t)v177, v183, CFSTR("udp"));

    v187 = objc_msgSend__shouldUseP2PTLE(*(void **)(v174 + 40), v184, v185, v186);
    GLUtilConnectionDictionaryForNWConnectionInfo(v96, v187);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_connections(v176, v189, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v192, v193, (uint64_t)v188, v194, CFSTR("qpod"));

    objc_msgSend_setState_(v176, v195, 3, v196);
    objc_msgSend_linkUUID(*(void **)(v261 + 32), v197, v198, v199);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLinkUUID_(v176, v201, (uint64_t)v200, v202);

    if (objc_msgSend_isNominated(*(void **)(v261 + 32), v203, v204, v205))
      objc_msgSend_setIsNominated_(v176, v206, 1, v208);
    objc_msgSend_setLastIncomingPacketTime_(v176, v206, v207, *(double *)(v261 + 336));
    v209 = v261;
    if (!*(_QWORD *)(*(_QWORD *)(v261 + 40) + 224))
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v211 = *(_QWORD *)(v261 + 40);
      v212 = *(void **)(v211 + 224);
      *(_QWORD *)(v211 + 224) = Mutable;

      v209 = v261;
    }
    v213 = v176;
    if (v213)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(v209 + 40) + 224), v137, v213);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF2790();
    }

    objc_msgSend_allValues(*(void **)(*(_QWORD *)(v261 + 40) + 224), v214, v215, v216);
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v218 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
    {
      v222 = objc_msgSend_count(v217, v219, v220, v221);
      *(_DWORD *)buf = 138412802;
      v263 = (char *)v213;
      v264 = 2048;
      v265 = (char *)v222;
      v266 = 2112;
      v267 = v217;
      _os_log_impl(&dword_19B949000, v218, OS_LOG_TYPE_DEFAULT, "add valid pair %@, #total:%lu.\n(%@).", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v255 = objc_msgSend_count(v217, v223, v224, v225);
        v257 = v217;
        v252 = v213;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("add valid pair %@, #total:%lu.\n(%@)."));
        if (_IDSShouldLog())
        {
          v255 = objc_msgSend_count(v217, v223, v224, v225, v213, v255, v217);
          v257 = v217;
          v252 = v213;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("add valid pair %@, #total:%lu.\n(%@)."));
        }
      }
    }
    v226 = *(void **)(v261 + 40);
    v227 = objc_msgSend_address(v144, v223, v224, v225, v252, v255, v257);
    v231 = objc_msgSend_external(v164, v228, v229, v230);
    objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(v226, v232, (uint64_t)v213, v233, v227, v231, 0);
    objc_msgSend__notifyCandidatePairConnected_(*(void **)(v261 + 40), v234, (uint64_t)v137, v235);
    if (objc_msgSend_isNominated(v213, v236, v237, v238)
      && (objc_msgSend_isActive(v213, v239, v240, v241) & 1) == 0)
    {
      OSLogHandleForTransportCategory();
      v242 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v263 = (char *)v213;
        _os_log_impl(&dword_19B949000, v242, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is already nominated.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v253 = v213;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("candidate pair %@ is already nominated."));
          if (_IDSShouldLog())
          {
            v253 = v213;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("candidate pair %@ is already nominated."));
          }
        }
      }
      objc_msgSend__updateDefaultCandidatePair_(*(void **)(v261 + 40), v243, (uint64_t)v213, v244, v253);
      objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(*(void **)(v261 + 40), v245, (uint64_t)v137, v246, 0);
    }
    objc_msgSend__selectBetterDefaultCandidatePair_(*(void **)(v261 + 40), v239, (uint64_t)v213, v241);

  }
}

void sub_19B9EE5C0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x19B9EE1ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_19B9EFA08(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19B9EF91CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19B9F1080(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__setupRelayConnectionForNetworkAddressChanges(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19B9F25A4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19B9F1EE0);
  }
  _Unwind_Resume(a1);
}

void sub_19B9F4A28(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5;
  id v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  _BOOL4 v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  char *v30;
  _QWORD block[5];
  id v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  char *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  char *v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  if (*(_QWORD *)(v5 + 648) == 2)
  {
    objc_msgSend_allValues(*(void **)(v5 + 224), a2, a3, a4);
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v34, v8, v44, 16);
    if (v11)
    {
      v13 = *(_QWORD *)v35;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v35 != v13)
            objc_enumerationMutation(v6);
          v15 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
          objc_msgSend_sessionID(v15, v9, v10, v12);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isEqualToString_(v16, v17, *(_QWORD *)(a1[4] + 496), v18))
          {
            v22 = objc_msgSend_state(v15, v19, v20, v21) == 3;

            if (v22)
            {
              OSLogHandleForTransportCategory();
              v28 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                v30 = _IDSLinkStateStrings[*(_QWORD *)(a1[4] + 648)];
                *(_DWORD *)buf = 136315650;
                v39 = v30;
                v40 = 2112;
                v41 = v15;
                v42 = 2080;
                v43 = off_1EE40A670;
                _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "skip TCP/TCP-SSL relay set up, GL state [%s], candidatePair %@ in state: %s", buf, 0x20u);
              }

              if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip TCP/TCP-SSL relay set up, GL state [%s], candidatePair %@ in state: %s"));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip TCP/TCP-SSL relay set up, GL state [%s], candidatePair %@ in state: %s"));
              }

              goto LABEL_27;
            }
          }
          else
          {

          }
        }
        v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v34, v12, v44, 16);
        if (v11)
          continue;
        break;
      }
    }

    im_primary_queue();
    v23 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19B9F4E48;
    block[3] = &unk_1E3C20248;
    v25 = (void *)a1[5];
    v24 = a1[6];
    block[4] = a1[4];
    v33 = v24;
    v32 = v25;
    dispatch_async(v23, block);

LABEL_27:
  }
  else
  {
    OSLogHandleForTransportCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = _IDSLinkStateStrings[*(_QWORD *)(a1[4] + 648)];
      *(_DWORD *)buf = 136315138;
      v39 = v27;
      _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "skip TCP/TCP-SSL relay set up, GL state [%s].", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip TCP/TCP-SSL relay set up, GL state [%s]."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip TCP/TCP-SSL relay set up, GL state [%s]."));
      }
    }
  }
}

void sub_19B9F4E48(_QWORD *a1)
{
  uint64_t v1;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1[4] + 592);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (&_IDSStunTransportStrings)[a1[6]];
      v5 = a1[4];
      v6 = *(_QWORD *)(v5 + 496);
      v7 = *(_QWORD *)(v5 + 672);
      *(_DWORD *)buf = 136315650;
      v13 = v4;
      v14 = 2112;
      v15 = v6;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "set up %s session: %@, ids-session-id: %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("set up %s session: %@, ids-session-id: %@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("set up %s session: %@, ids-session-id: %@."));
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1[4] + 592) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1[4] + 592) + 8), *(_QWORD *)(a1[4] + 672), 0, a1[5]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_19B9F5084;
    v10[3] = &unk_1E3C1FA08;
    v10[4] = a1[4];
    v11 = v8;
    v9 = v8;
    IDSTransportThreadAddBlock(v10);

  }
}

uint64_t sub_19B9F5084(uint64_t a1)
{
  __CFArray *v2;
  id v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 560);
  if (v2
    || (v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]),
        v4 = *(_QWORD *)(a1 + 32),
        v5 = *(void **)(v4 + 560),
        *(_QWORD *)(v4 + 560) = v3,
        v5,
        (v2 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 560)) != 0))
  {
    v6 = *(const void **)(a1 + 40);
    if (v6)
      CFArrayAppendValue(v2, v6);
  }
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 560);
    *(_DWORD *)buf = 138412290;
    v11 = v8;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "_requestNonUDPRelayAllocation: targeted allocation request IDs: %@", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLogTransport();
    if ((_DWORD)result)
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_requestNonUDPRelayAllocation: targeted allocation request IDs: %@"));
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_requestNonUDPRelayAllocation: targeted allocation request IDs: %@"));
    }
  }
  return result;
}

void sub_19B9F608C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const __CFDictionary *v9;
  void *v10;
  NSObject *v11;
  IDSQRProtoGetMaterialRequest *v12;
  id v13;
  const char *v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  IDSQRProtoMaterialOwner *v24;
  const char *v25;
  double v26;
  const char *v27;
  double v28;
  const char *v29;
  double v30;
  IDSQRProtoMessage *v31;
  const char *v32;
  double v33;
  void *v34;
  const char *v35;
  double v36;
  void *v37;
  const char *v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[16];
  const __CFString *v45;
  IDSQRProtoGetMaterialRequest *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 130))
  {
    if (*(_QWORD *)(v4 + 232)
      && (objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], a2, *(char *)(v4 + 130), a4),
          (v6 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      v7 = (void *)v6;
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(const __CFDictionary **)(v8 + 232);
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], a2, *(char *)(v8 + 130), a4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (id)CFDictionaryGetValue(v9, v10);

      if (v11 && objc_msgSend_isQUIC(v11, a2, a3, a4) && objc_msgSend_state(v11, a2, a3, a4) == 4)
      {
        v12 = objc_alloc_init(IDSQRProtoGetMaterialRequest);
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v13 = *(id *)(a1 + 40);
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v40, v15, v47, 16);
        if (v16)
        {
          v20 = v16;
          v21 = *(_QWORD *)v41;
          do
          {
            for (i = 0; i != v20; ++i)
            {
              if (*(_QWORD *)v41 != v21)
                objc_enumerationMutation(v13);
              v23 = objc_msgSend_unsignedLongLongValue(*(void **)(*((_QWORD *)&v40 + 1) + 8 * i), v17, v18, v19, (_QWORD)v40);
              v24 = objc_alloc_init(IDSQRProtoMaterialOwner);
              objc_msgSend_setParticipantId_(v24, v25, v23, v26);
              objc_msgSend_addMaterialType_(v24, v27, *(unsigned int *)(a1 + 48), v28);
              objc_msgSend_addMaterialOwners_(v12, v29, (uint64_t)v24, v30);

            }
            v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v40, v19, v47, 16);
          }
          while (v20);
        }

        v31 = [IDSQRProtoMessage alloc];
        v45 = CFSTR("gl-option-materials-request-key");
        v46 = v12;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v32, (uint64_t)&v46, v33, &v45, 1);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = (void *)objc_msgSend_initWithType_candidatePair_options_(v31, v35, 27, v36, v11, v34);

        objc_msgSend_sendQUICGetMaterialRequest_(v11, v38, (uint64_t)v37, v39);
LABEL_18:

        goto LABEL_21;
      }
    }
    else
    {
      v11 = 0;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
    v12 = (IDSQRProtoGetMaterialRequest *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v12->super.super.super, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, &v12->super.super.super, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: no QUIC link candidate pair", buf, 2u);
    }
    goto LABEL_18;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: no active QUIC link", buf, 2u);
  }
LABEL_21:

}

uint64_t sub_19B9F6950(uint64_t a1, const char *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = objc_msgSend_qrMaterialExchangePutMaterial_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

void sub_19B9FF42C(uint64_t a1)
{
  int PreferredRemoteInterface;
  int PreferredLocalInterface;
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (GLUtilShouldSetRemoteInterfacePreference(*(_DWORD *)(a1 + 40), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 778)))PreferredRemoteInterface = GLUtilGetPreferredRemoteInterface(*(_BYTE *)(a1 + 44));
  else
    PreferredRemoteInterface = 0;
  PreferredLocalInterface = GLUtilGetPreferredLocalInterface(*(unsigned __int8 *)(a1 + 44));
  GLUtilLinkTypeMaskToString(*(_BYTE *)(a1 + 44));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_GlobalLink(IDSFoundationLog, v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(v9 + 496);
    v11 = *(_QWORD *)(v9 + 672);
    *(_DWORD *)buf = 138412802;
    v21 = v4;
    v22 = 2112;
    v23 = v10;
    v24 = 2112;
    v25 = v11;
    _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "set up new QR link [%@], accepted session %@, ids-session-id %@.", buf, 0x20u);
  }

  v12 = *(_QWORD **)(a1 + 32);
  v13 = v12[74];
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      HIDWORD(v17) = PreferredRemoteInterface;
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _DWORD, _QWORD, uint64_t, int))(v14 + 16))(v14, v12[84], 0, v12[62], 1, 0xFFFFLL, 0, 0, 0, 0, v17, PreferredLocalInterface);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = sub_19B9FF5E8;
      v18[3] = &unk_1E3C1FA08;
      v18[4] = *(_QWORD *)(a1 + 32);
      v19 = v15;
      v16 = v15;
      IDSTransportThreadAddBlock(v18);

    }
  }

}

void sub_19B9FF5E8(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v5;
  id v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 560);
  if (v5
    || (v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]),
        v7 = *(_QWORD *)(a1 + 32),
        v8 = *(void **)(v7 + 560),
        *(_QWORD *)(v7 + 560) = v6,
        v8,
        (v5 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 560)) != 0))
  {
    v9 = *(const void **)(a1 + 40);
    if (v9)
      CFArrayAppendValue(v5, v9);
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, (const char *)v9, a4, a2);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 560);
    v12 = 138412290;
    v13 = v11;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "_requestNewTwoWayQRAllocation: targeted allocation request IDs: %@", (uint8_t *)&v12, 0xCu);
  }

}

void sub_19B9FF974(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  objc_msgSend_sessionInfoDict(*(void **)(a1 + 40), a2, a3, a4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(v5, v6, (uint64_t)v8, v7, 0, 1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), 0);

}

uint64_t sub_19BA00028(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t result;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  int isQUIC;
  double v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v19 = 138412290;
    v20 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: disconnect candidatePairToken %@ for convergence.", (uint8_t *)&v19, 0xCu);
  }

  result = objc_msgSend_isDisconnecting(*(void **)(a1 + 40), v7, v8, v9);
  if ((result & 1) == 0)
  {
    isQUIC = objc_msgSend_isQUIC(*(void **)(a1 + 40), v11, v12, v13);
    v17 = *(void **)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 32);
    if (isQUIC)
      return objc_msgSend__sendQUICUnallocbindRequest_reason_(v17, v14, v18, v16, 6);
    else
      return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v17, v14, v18, v16, 0, 6);
  }
  return result;
}

void sub_19BA00110(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  char v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  double v21;
  uint8_t v22[16];

  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: Try to gather the participant list from the final qr session.", v22, 2u);
    }

    objc_msgSend_delegate(*(void **)(a1 + 32), v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    objc_msgSend_sessionID(*(void **)(a1 + 40), v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_link_didFinishConvergenceForRelaySessionID_(v14, v20, v15, v21, v19);

  }
}

void sub_19BA00F44(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  id v30;
  unsigned int v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  objc_msgSend_remote(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_external(v5, v6, v7, v8);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 592);
  if (v13 && *(_QWORD *)(v13 + 8))
  {
    v14 = *(_DWORD *)(v9 + 4);
    objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, v12);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 672);
      *(_DWORD *)buf = 138412290;
      v33 = v16;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "request shared allocation for ids-session-id %@.", buf, 0xCu);
    }

    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 592) + 8);
    v19 = *(_QWORD *)(v17 + 672);
    objc_msgSend_sessionID(*(void **)(a1 + 32), v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = ids_monotonic_time();
    v25 = (unint64_t)v24;
    v26 = *(unsigned __int16 *)(a1 + 48);
    objc_msgSend_relaySessionToken(*(void **)(a1 + 32), v27, v28, v24);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    LOWORD(v31) = 0;
    v30 = (id)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, uint64_t, uint64_t, unint64_t, uint64_t, int, void *, _QWORD, _DWORD))(v18 + 16))(v18, v19, 0, v23, 3, 2, v25, v26, v14, v29, v31, 0);

  }
}

void sub_19BA021AC(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  id v15;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a3;
  v10 = objc_msgSend_unsignedLongLongValue(a2, v7, v8, v9);
  objc_msgSend_numberWithUnsignedLongLong_(v5, v11, v10, v12);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v4, v13, (uint64_t)v6, v14, v15);

}

uint64_t sub_19BA0251C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50), *(unsigned __int8 *)(a1 + 51));
}

void sub_19BA0552C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x19BA04E30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19BA05644(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OSLogHandleForTransportCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v9 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "session connected message timed out for receiver, disconnect %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v7 = *(_QWORD *)(a1 + 32);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session connected message timed out for receiver, disconnect %@."));
      if (_IDSShouldLog())
      {
        v7 = *(_QWORD *)(a1 + 32);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session connected message timed out for receiver, disconnect %@."));
      }
    }
  }
  return objc_msgSend__sendQUICUnallocbindRequest_reason_(*(void **)(a1 + 40), v4, *(_QWORD *)(a1 + 48), v5, 9, v7);
}

uint64_t sub_19BA064A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BA07F78(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BA07C7CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19BA07FC0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  unint64_t v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v20 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "disconnect session %@ for goaway.", buf, 0xCu);
  }

  objc_msgSend_setIsDisconnecting_(*(void **)(a1 + 40), v7, 0, v8);
  v13 = objc_msgSend_state(*(void **)(a1 + 40), v9, v10, v11);
  if (v13 < 5)
    return objc_msgSend__sendQUICUnallocbindRequest_reason_(*(void **)(a1 + 48), v12, *(_QWORD *)(a1 + 32), v14, 4);
  OSLogHandleForTransportCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = (&_IDSStunCandidatePairStateStrings)[v13];
    *(_DWORD *)buf = 138412546;
    v20 = v16;
    v21 = 2080;
    v22 = v17;
    _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is already disconnecting [%s], ignore.", buf, 0x16u);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLogTransport();
    if ((_DWORD)result)
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("candidate pair %@ is already disconnecting [%s], ignore."));
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("candidate pair %@ is already disconnecting [%s], ignore."));
    }
  }
  return result;
}

void sub_19BA081B8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 592);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 48);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
      *(_DWORD *)buf = 67109378;
      v26 = v4;
      v27 = 2112;
      v28 = v5;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "request new allocation with type %d for goaway indication (ids-session-id:%@).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v22 = *(_QWORD *)(a1 + 48);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("request new allocation with type %d for goaway indication (ids-session-id:%@)."));
      if (_IDSShouldLog())
      {
        v22 = *(_QWORD *)(a1 + 48);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("request new allocation with type %d for goaway indication (ids-session-id:%@)."));
      }
    }
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 592) + 8);
    v11 = *(_QWORD *)(v9 + 672);
    objc_msgSend_sessionID(*(void **)(a1 + 40), v6, v7, v8, v22, v23);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(double *)(a1 + 56);
    v15 = *(unsigned __int16 *)(a1 + 68);
    v16 = *(_DWORD *)(a1 + 64);
    objc_msgSend_relaySessionToken(*(void **)(a1 + 40), v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    LOWORD(v24) = 0;
    v21 = (id)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, uint64_t, uint64_t, unint64_t, uint64_t, int, void *, _QWORD, _DWORD))(v10 + 16))(v10, v11, 0, v12, v13, 4, (unint64_t)v14, v15, v16, v20, v24, 0);

  }
}

uint64_t sub_19BA08FF8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processQUICReallocIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_, *(_QWORD *)(a1 + 40), *(double *)(a1 + 320));
}

void sub_19BA0B230(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(v5, v6, (uint64_t)v8, v7, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), 0, *(unsigned __int8 *)(a1 + 50));

}

unint64_t sub_19BA0B284(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  unint64_t result;
  const char *v6;
  double v7;
  const char *v8;
  double v9;
  const char *v10;
  double v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  int hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  const char *v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  NSObject *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  double v66;
  void *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  double v71;
  void *v72;
  const char *v73;
  double v74;
  uint64_t AllocBindErrorCodeForSessionID;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  char *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  const char *v84;
  uint64_t v85;
  double v86;
  void *v87;
  id WeakRetained;
  char v89;
  const char *v90;
  uint64_t v91;
  double v92;
  id v93;
  const char *v94;
  double v95;
  NSObject *v96;
  const char *v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  double v103;
  void *v104;
  const char *v105;
  double v106;
  char *v107;
  const char *v108;
  double v109;
  void *v110;
  void *v111;
  const char *v112;
  double v113;
  void *v114;
  NSObject *v115;
  id v116;
  const char *v117;
  uint64_t v118;
  double v119;
  NSObject *v120;
  const char *v121;
  double v122;
  id v123;
  char v124;
  const char *v125;
  double v126;
  double v127;
  const char *v128;
  uint64_t v129;
  double v130;
  void *v131;
  id v132;
  char v133;
  const char *v134;
  uint64_t v135;
  double v136;
  id v137;
  const char *v138;
  double v139;
  const char *v140;
  double v141;
  NSObject *v142;
  const char *v143;
  uint64_t v144;
  double v145;
  const char *v146;
  uint64_t v147;
  double v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  double v152;
  float v153;
  float v154;
  id v155;
  char v156;
  id v157;
  const char *v158;
  double v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD block[4];
  id v166;
  id v167;
  uint8_t buf[4];
  uint64_t v169;
  __int16 v170;
  char *v171;
  __int16 v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4);
  if (result > 1)
    return result;
  objc_msgSend__removeProtoRequest_status_(*(void **)(a1 + 40), v6, *(_QWORD *)(a1 + 72), v7, 0);
  objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 72), v9);
  objc_msgSend_setState_(*(void **)(a1 + 32), v10, 2, v11);
  OSLogHandleForTransportCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (&_IDSStunCandidatePairStateStrings)[*(_QWORD *)(a1 + 80)];
    v14 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315650;
    v169 = (uint64_t)v13;
    v170 = 2080;
    v171 = off_1EE40A668;
    v172 = 2112;
    v173 = v14;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v162 = off_1EE40A668;
      v164 = *(_QWORD *)(a1 + 48);
      v160 = (&_IDSStunCandidatePairStateStrings)[*(_QWORD *)(a1 + 80)];
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("update state (%s->%s) for %@."));
      if (_IDSShouldLog())
      {
        v162 = off_1EE40A668;
        v164 = *(_QWORD *)(a1 + 48);
        v160 = (&_IDSStunCandidatePairStateStrings)[*(_QWORD *)(a1 + 80)];
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("update state (%s->%s) for %@."));
      }
    }
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17, v160, v162, v164);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_candidatePairToken(*(void **)(a1 + 32), v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v169 = (uint64_t)v22;
    _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "Disconnecting QUIC connection %@ after allocbind timed out", buf, 0xCu);

  }
  v23 = *(void **)(*(_QWORD *)(a1 + 40) + 48);
  objc_msgSend_sessionID(*(void **)(a1 + 32), v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_local(*(void **)(a1 + 32), v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_address(v31, v32, v33, v34);
  objc_msgSend_remote(*(void **)(a1 + 32), v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_external(v39, v40, v41, v42);
  objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(v23, v44, (uint64_t)v27, 5.0, v35, v43, 0);

  v48 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v48 + 952))
  {
    objc_msgSend_invalidateMaterialsInSet_(*(void **)(*(_QWORD *)(a1 + 40) + 952), v45, *(_QWORD *)(a1 + 56), v47);
    v48 = *(_QWORD *)(a1 + 40);
  }
  if (*(_QWORD *)(v48 + 960))
  {
    objc_msgSend_invalidate(*(void **)(v48 + 960), v45, v46, v47);
    v48 = *(_QWORD *)(a1 + 40);
  }
  hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_((void *)v48, v45, 3, v47, 4, 0, 0);
  if (((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc | objc_msgSend__hasConnectingRelayCandidatePair(*(void **)(a1 + 40), v50, v51, v52)) & 1) == 0)
  {
    v56 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 40) + 80));
    objc_msgSend_GlobalLink(IDSFoundationLog, v57, v58, v59);
    v60 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      v61 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 672);
      if (*(_BYTE *)(a1 + 104))
        v62 = "realloc";
      else
        v62 = "allocbind";
      v63 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 138412802;
      v169 = v61;
      v170 = 2080;
      v171 = (char *)v62;
      v172 = 2048;
      v173 = v63;
      _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "Connect to QR server for IDSSessionID: %@, proto message type %s timed out after %lf seconds.", buf, 0x20u);
    }

    objc_msgSend_local(*(void **)(a1 + 32), v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = *(void **)(a1 + 40);
    objc_msgSend_sessionID(*(void **)(a1 + 32), v69, v70, v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    AllocBindErrorCodeForSessionID = objc_msgSend_getAllocBindErrorCodeForSessionID_(v68, v73, (uint64_t)v72, v74);

    OSLogHandleForTransportCategory();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      v80 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v67, v77, v78, v79)];
      *(_DWORD *)buf = 136315394;
      v169 = (uint64_t)v80;
      v170 = 1024;
      LODWORD(v171) = 7;
      _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v161 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v67, v81, v82, v83)];
        v163 = 7;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report session setup failure (%s, %d)."));
        if (_IDSShouldLog())
        {
          v161 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v67, v84, v85, v86, v161, 7)];
          v163 = 7;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report session setup failure (%s, %d)."));
        }
      }
    }
    GLUtilReportAWDClientTimerEvent(305, 7, *(void **)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 464), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 428), 0.0);
    GLUCreateQRClientTimeEvent(305, AllocBindErrorCodeForSessionID, *(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 40) + 896), 0.0);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
    v89 = objc_opt_respondsToSelector();

    if ((v89 & 1) != 0)
    {
      v93 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
      objc_msgSend_link_didAddQREvent_(v93, v94, *(_QWORD *)(a1 + 40), v95, v87);

    }
    objc_msgSend_GlobalLink(IDSFoundationLog, v90, v91, v92, v161, v163);
    v96 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
    {
      v100 = objc_msgSend_participantID(*(void **)(a1 + 32), v97, v98, v99);
      objc_msgSend_relaySessionToken(*(void **)(a1 + 32), v101, v102, v103);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_base64EncodedStringWithOptions_(v104, v105, 0, v106);
      v107 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v169 = v100;
      v170 = 2112;
      v171 = v107;
      _os_log_impl(&dword_19B949000, v96, OS_LOG_TYPE_DEFAULT, "failed participant:[%16llX], token:[%@]", buf, 0x16u);

    }
    if (v56)
    {
      v110 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E0C99D80], v108, (uint64_t)CFSTR("Allocbind timed out."), v109, *MEMORY[0x1E0CB2D50]);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_userInfo_(v110, v112, (uint64_t)CFSTR("GlobalLink"), v113, 7, v111);
      v114 = (void *)objc_claimAutoreleasedReturnValue();

      im_primary_queue();
      v115 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19BA0BCD8;
      block[3] = &unk_1E3C1C7E8;
      v167 = v56;
      v116 = v114;
      v166 = v116;
      dispatch_async(v115, block);

      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) == 6)
      {
        objc_msgSend_GlobalLink(IDSFoundationLog, v117, v118, v119);
        v120 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v120, OS_LOG_TYPE_DEFAULT, "QUIC Allocbind timed out. - gathering ABC with packet capture", buf, 2u);
        }

        objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(*(void **)(a1 + 40), v121, (uint64_t)CFSTR("IDSQuickRelayShared"), v122, CFSTR("FailedToConnect"), CFSTR("QUICAllocbindTimedout"), 15);
      }

    }
    else
    {
      v123 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
      v124 = objc_opt_respondsToSelector();

      if ((v124 & 1) == 0)
      {
LABEL_39:

        goto LABEL_40;
      }
      v116 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
      objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v116, v125, *(_QWORD *)(a1 + 40), v126, 0, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 624));
    }

    goto LABEL_39;
  }
LABEL_40:
  if (*(_BYTE *)(a1 + 105))
  {
    v127 = ids_monotonic_time();
    objc_msgSend_startTime(*(void **)(a1 + 64), v128, v129, v127);
    *(float *)&v127 = (float)((v127 - v130) * 1000.0);
    GLUtilReportAWDClientTimerEvent(308, 23, *(void **)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 464), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 428), *(float *)&v127);
    GLUCreateQRClientTimeEvent(308, 23, *(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 40) + 896), *(float *)&v127);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    v132 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
    v133 = objc_opt_respondsToSelector();

    if ((v133 & 1) != 0)
    {
      v137 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
      objc_msgSend_link_didAddQREvent_(v137, v138, *(_QWORD *)(a1 + 40), v139, v131);

    }
    if (objc_msgSend__isExtIPDiscoveryDone(*(void **)(a1 + 40), v134, v135, v136))
    {
      OSLogHandleForTransportCategory();
      v142 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v142, OS_LOG_TYPE_DEFAULT, "discard self allocate candidate pairs", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("discard self allocate candidate pairs"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("discard self allocate candidate pairs"));
      }
      objc_msgSend__discardSelfAllocateCandidatePairs(*(void **)(a1 + 40), v143, v144, v145);
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(*(void **)(a1 + 40), v140, 0, v141);
  }
  else
  {
    objc_msgSend_linkMetrics(*(void **)(a1 + 32), v53, v54, v55);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allocBindRequestTimeOut(v149, v150, v151, v152);

    v153 = *(double *)(a1 + 88);
    GLUtilReportAWDStunMessageEventWithType(*(unsigned __int16 *)(a1 + 96), 7, *(void **)(a1 + 32), v153);
    v154 = *(double *)(a1 + 88);
    GLUCreateQRStunMessageEventWithType(*(unsigned __int16 *)(a1 + 96), 7, *(void **)(a1 + 32), 0, v154);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    if (v131)
    {
      v155 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
      v156 = objc_opt_respondsToSelector();

      if ((v156 & 1) != 0)
      {
        v157 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
        objc_msgSend_link_didAddQREvent_(v157, v158, *(_QWORD *)(a1 + 40), v159, v131);

      }
    }
  }

  return objc_msgSend__reportAWDAllocateTime(*(void **)(a1 + 40), v146, v147, v148);
}

uint64_t sub_19BA0BCD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BA0C85C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  const char *v6;
  double v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  double v15;
  const char *v16;
  double v17;
  const char *v18;
  double v19;
  _BYTE *v20;
  const char *v21;
  char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
  double v23;
  uint64_t v24;
  const char *v25;
  double v26;
  NSObject *v27;
  const char *v28;
  double v29;
  unsigned int v30;
  void *v31;
  id WeakRetained;
  char v33;
  id v34;
  const char *v35;
  double v36;
  uint8_t v37[16];
  uint8_t buf[16];

  if (objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4) != 6)
  {
    OSLogHandleForTransportCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "unallocbind request timed out.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("unallocbind request timed out."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("unallocbind request timed out."));
      }
    }
    objc_msgSend__removeProtoRequest_status_(*(void **)(a1 + 40), v6, *(_QWORD *)(a1 + 48), v7, 0);
    objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 48), v9);
    v10 = *(void **)(*(_QWORD *)(a1 + 40) + 336);
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v11, *(_QWORD *)(a1 + 48), v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v10, v14, (uint64_t)v13, v15);

    objc_msgSend__notifyCandidatePairDisconnected_withReason_(*(void **)(a1 + 40), v16, *(_QWORD *)(a1 + 32), v17, *(unsigned __int8 *)(a1 + 60));
    v20 = *(_BYTE **)(a1 + 40);
    if (v20[828])
    {
      objc_msgSend__destroyVirtualRelayLinksForCandidatePair_(v20, v18, *(_QWORD *)(a1 + 32), v19);
      v20 = *(_BYTE **)(a1 + 40);
    }
    hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(v20, v18, 3, v19, 4, 0, 0);
    v24 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v24 + 648) == 5)
    {
      objc_msgSend__discardCandidatePairsWithOption_((void *)v24, v21, 0, v23);
      if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0)
        objc_msgSend__notifyLinkDisconnectedWithError_reason_(*(void **)(a1 + 40), v25, 8, v26, *(unsigned __int8 *)(a1 + 60));
    }
    else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0
           && objc_msgSend_isEqualToString_(*(void **)(v24 + 624), v21, (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v23))
    {
      OSLogHandleForTransportCategory();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", v37, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no more underlying link is connected."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no more underlying link is connected."));
        }
      }
      objc_msgSend_disconnectWithCompletionHandler_(*(void **)(a1 + 40), v28, 0, v29);
    }
    v30 = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(v30, 8, *(void **)(a1 + 32), 0.0);
    GLUCreateQRStunMessageEventWithType(v30, 8, *(void **)(a1 + 32), 0, 0.0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
    {
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
      v33 = objc_opt_respondsToSelector();

      if ((v33 & 1) != 0)
      {
        v34 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
        objc_msgSend_link_didAddQREvent_(v34, v35, *(_QWORD *)(a1 + 40), v36, v31);

      }
    }

  }
}

uint64_t sub_19BA0E094(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendChannelDataCommandMessage_packetBuffer_options_candidatePairToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 56), a3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_19BA0E960(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BA0E970()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  double v3;
  const char *v4;
  uint64_t v5;
  double v6;
  id v7;

  v0 = (void *)qword_1EE40B020;
  qword_1EE40B020 = (uint64_t)&unk_1E3C887B8;

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v1, v2, v3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EE40B028 = objc_msgSend_isInternalInstall(v7, v4, v5, v6);

}

uint64_t IDSQRProtoPluginControlIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        if ((_DWORD)v17 == 15)
        {
          v30 = 0;
          v31 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
              break;
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v20 |= (unint64_t)(v34 & 0x7F) << v30;
            if ((v34 & 0x80) == 0)
              goto LABEL_53;
            v30 += 7;
            v14 = v31++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_55;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_55:
          v36 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 2)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_45;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_47;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_47:
          v36 = 8;
        }
        *(_QWORD *)(a1 + v36) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoSessionInfoRequestReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  IDSQRProtoSubscribedStream *v31;
  const char *v32;
  double v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = 0x1EE400000uLL;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  v9 = 0x1EE400000uLL;
  v10 = 0x1EE400000uLL;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v15);
      *(_QWORD *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v17 = v12++ >= 9;
      if (v17)
      {
        v13 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v13 = 0;
LABEL_14:
    v19 = v13 & 7;
    if (v18 || v19 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v13 >> 3))
    {
      case 1u:
        if (v19 != 2)
        {
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (1)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
              break;
            v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v71);
            *(_QWORD *)(a2 + v70) = v71 + 1;
            v69 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v17 = v68++ >= 9;
              if (!v17)
                continue;
            }
            goto LABEL_113;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_113:
          PBRepeatedUInt32Add();
LABEL_114:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        result = PBReaderPlaceMark();
        if ((_DWORD)result)
        {
          while (1)
          {
            if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4) || *(_BYTE *)(a2 + *v5))
            {
              PBReaderRecallMark();
              goto LABEL_114;
            }
            v22 = 0;
            v23 = 0;
            v24 = 0;
            while (1)
            {
              v25 = *v3;
              v26 = *(_QWORD *)(a2 + v25);
              if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
                break;
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v26);
              *(_QWORD *)(a2 + v25) = v26 + 1;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if (v27 < 0)
              {
                v22 += 7;
                v17 = v23++ >= 9;
                if (!v17)
                  continue;
              }
              goto LABEL_31;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
            PBRepeatedUInt32Add();
          }
        }
        return result;
      case 2u:
        v28 = v10;
        v29 = v9;
        v30 = v7;
        v31 = objc_alloc_init(IDSQRProtoSubscribedStream);
        objc_msgSend_addSubscribedStreams_(a1, v32, (uint64_t)v31, v33);
        if (!PBReaderPlaceMark() || (IDSQRProtoSubscribedStreamReadFrom((uint64_t)v31, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

        v7 = v30;
        v9 = v29;
        v10 = v28;
        goto LABEL_114;
      case 3u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        a1[*(int *)(v9 + 3676)] |= 0x20u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              v17 = v35++ >= 9;
              if (v17)
              {
                v36 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_82:
        a1[*(int *)(v10 + 3680)] = v36 != 0;
        goto LABEL_114;
      case 4u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        a1[*(int *)(v9 + 3676)] |= 8u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v17 = v41++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v42) = 0;
LABEL_86:
        v66 = 44;
        goto LABEL_103;
      case 6u:
        v46 = 0;
        v47 = 0;
        v42 = 0;
        a1[*(int *)(v9 + 3676)] |= 4u;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v42 |= (unint64_t)(v50 & 0x7F) << v46;
            if (v50 < 0)
            {
              v46 += 7;
              v17 = v47++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v42) = 0;
LABEL_90:
        v66 = 40;
        goto LABEL_103;
      case 7u:
        v51 = 0;
        v52 = 0;
        v42 = 0;
        a1[*(int *)(v9 + 3676)] |= 0x10u;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 1;
            v42 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              v17 = v52++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v42) = 0;
LABEL_94:
        v66 = 48;
        goto LABEL_103;
      case 8u:
        v56 = 0;
        v57 = 0;
        v42 = 0;
        a1[*(int *)(v9 + 3676)] |= 1u;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v59);
            *(_QWORD *)(a2 + v58) = v59 + 1;
            v42 |= (unint64_t)(v60 & 0x7F) << v56;
            if (v60 < 0)
            {
              v56 += 7;
              v17 = v57++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v42) = 0;
LABEL_98:
        v66 = 32;
        goto LABEL_103;
      case 0x10u:
        v61 = 0;
        v62 = 0;
        v42 = 0;
        a1[*(int *)(v9 + 3676)] |= 2u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v42 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              v17 = v62++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v42) = 0;
LABEL_102:
        v66 = 36;
LABEL_103:
        *(_DWORD *)&a1[v66] = v42;
        goto LABEL_114;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_114;
    }
  }
}

uint64_t IDSQRProtoPutMaterialRequestReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IDSQRProtoMaterial *v17;
  const char *v18;
  double v19;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BA13054()
{
  IDSPushHandler *v0;
  void *v1;

  v0 = objc_alloc_init(IDSPushHandler);
  v1 = (void *)qword_1ECDD4808;
  qword_1ECDD4808 = (uint64_t)v0;

}

uint64_t sub_19BA1307C()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1EE40AC18;
  qword_1EE40AC18 = (uint64_t)v0;

  return pthread_mutex_init(&stru_1EE40AC28, 0);
}

id sub_19BA138EC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  id v11;
  NSObject *v12;

  v4 = a3;
  objc_msgSend_objectForKey_(a2, v5, (uint64_t)v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = v7;
  }
  else
  {
    if (v7)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v8, v9, v10);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        sub_19BAF4510();

    }
    v11 = 0;
  }

  return v11;
}

void *sub_19BA13A18()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("PLLogRegisteredEvent", CFSTR("PowerLog"));
  off_1EE40AD60 = result;
  return result;
}

uint64_t sub_19BA14974(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_pushTokenChanged_((void *)a1[4], v4, a1[5], v5, a1[6], v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

void sub_19BA15140(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x19BA14F74);
  }
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_19BA151A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19BA151B8(uint64_t a1)
{

}

uint64_t sub_19BA151C0(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_pushTokenChanged_((void *)a1[4], v4, a1[5], v5, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

void sub_19BA154AC(uint64_t a1, void *a2, double a3)
{
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  double v8;
  id v9;

  if ((objc_msgSend_containsObject_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a3) & 1) == 0)
  {
    objc_msgSend_apsConnection(*(void **)(a1 + 40), v4, v5, v6);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_subscribeToChannel_forTopic_(v9, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 48));

  }
}

uint64_t sub_19BA15A34(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_pushTokenChanged_((void *)a1[4], v4, a1[5], v5, a1[6], v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

void sub_19BA16274(uint64_t a1, void *a2, int a3, void *a4)
{
  const char *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  int v17;
  NSObject *v18;
  const char *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  double v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  id v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  void *v50;
  const char *v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  NSObject *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  const char *v64;
  uint64_t v65;
  double v66;
  void *v67;
  id v68;
  const char *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t jj;
  uint64_t v76;
  void *v77;
  const char *v78;
  double v79;
  const char *v80;
  uint64_t v81;
  double v82;
  NSObject *v83;
  uint64_t v84;
  NSObject *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  double v94;
  const char *v95;
  uint64_t v96;
  double v97;
  const char *v98;
  uint64_t v99;
  double v100;
  void *v101;
  id v102;
  const char *v103;
  double v104;
  const char *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t k;
  uint64_t v110;
  void *v111;
  const char *v112;
  double v113;
  const char *v114;
  uint64_t v115;
  double v116;
  id v117;
  const char *v118;
  double v119;
  const char *v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t kk;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  double v129;
  NSObject *v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  double v134;
  NSObject *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  double v139;
  void *v140;
  const char *v141;
  double v142;
  int isEqualToString;
  const char *v144;
  uint64_t v145;
  double v146;
  const char *v147;
  uint64_t v148;
  double v149;
  void *v150;
  id v151;
  const char *v152;
  double v153;
  const char *v154;
  uint64_t v155;
  double v156;
  uint64_t v157;
  uint64_t n;
  uint64_t v159;
  void *v160;
  const char *v161;
  double v162;
  const char *v163;
  uint64_t v164;
  double v165;
  NSObject *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  const char *v171;
  double v172;
  const char *v173;
  uint64_t v174;
  double v175;
  uint64_t v176;
  uint64_t j;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  double v182;
  NSObject *v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  double v188;
  NSObject *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  const char *v198;
  double v199;
  const char *v200;
  uint64_t v201;
  double v202;
  uint64_t v203;
  uint64_t m;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  double v209;
  NSObject *v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  uint64_t v214;
  double v215;
  id v216;
  const char *v217;
  double v218;
  const char *v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  uint64_t ii;
  void *v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  double v229;
  NSObject *v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  double v234;
  BOOL v235;
  const char *v236;
  double v237;
  id v238;
  id v239;
  id v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  id v246;
  void *v247;
  void *v248;
  void *v249;
  id v250;
  NSObject *v251;
  _QWORD block[6];
  id v253;
  id v254;
  NSObject *v255;
  id v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _QWORD v265[6];
  id v266;
  id v267;
  id v268;
  NSObject *v269;
  id v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  _QWORD v279[6];
  id v280;
  id v281;
  NSObject *v282;
  id v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _QWORD v292[6];
  id v293;
  NSObject *v294;
  id v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  os_activity_scope_state_s state;
  NSObject *v305;
  _BYTE v306[128];
  _BYTE v307[128];
  _BYTE v308[128];
  _BYTE v309[128];
  _BYTE v310[128];
  _BYTE v311[128];
  _BYTE v312[128];
  _BYTE v313[128];
  _BYTE buf[22];
  __int16 v315;
  void *v316;
  __int16 v317;
  uint64_t v318;
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  v250 = a2;
  v246 = a4;
  if (!v246 || !a3)
  {
    objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v7, v8, v9);
    if ((objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1 + 32) + 24), v12, *(_QWORD *)(a1 + 40), v13) & 1) != 0
      || (objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v14, *(_QWORD *)(a1 + 40), v16) & 1) != 0)
    {
      v17 = 1;
    }
    else
    {
      v17 = objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v14, *(_QWORD *)(a1 + 40), v16);
    }
    objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v14, v15, v16);
    v18 = objc_alloc_init(MEMORY[0x1E0D36A60]);
    objc_msgSend_setContext_(v18, v19, *(_QWORD *)(a1 + 48), v20);
    v251 = v18;
    if (v17)
    {
      v21 = objc_opt_class();
      sub_19BA138EC(v21, v250, CFSTR("c"));
      v247 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_opt_class();
      sub_19BA138EC(v22, v250, CFSTR("sP"));
      v249 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v247)
      {
        OSLogHandleForIDSCategory();
        v83 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          v84 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v84;
          _os_log_impl(&dword_19B949000, v83, OS_LOG_TYPE_DEFAULT, "Received message with no command: %@", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Received message with no command: %@"));
        state.opaque[0] = (uint64_t)_os_activity_create(&dword_19B949000, "Dropping push without command", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
        memset(buf, 170, 16);
        os_activity_scope_enter((os_activity_t)state.opaque[0], (os_activity_scope_state_t)buf);
        os_activity_scope_leave((os_activity_scope_state_t)buf);
        cut_arc_os_release();

        goto LABEL_144;
      }
      if (objc_msgSend_integerValue(v247, v23, v24, v25) == 160)
      {
        v305 = _os_activity_create(&dword_19B949000, "Incoming storage pending push", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
        state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
        state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
        os_activity_scope_enter(v305, &state);
        OSLogHandleForIDSCategory();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v30;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v247;
          _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "Received offline pending message for topic %@ with command %@", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          v238 = *(id *)(a1 + 40);
          v241 = v247;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Received offline pending message for topic %@ with command %@"));
        }
        objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v31, v32, v33, v238, v241);
        if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 32) + 16), v34, v35, v36))
        {
          objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E0CB3748], v37, v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v302 = 0u;
          v303 = 0u;
          v300 = 0u;
          v301 = 0u;
          v41 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
          v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v300, v43, v313, 16);
          if (v45)
          {
            v47 = *(_QWORD *)v301;
            do
            {
              for (i = 0; i != v45; ++i)
              {
                if (*(_QWORD *)v301 != v47)
                  objc_enumerationMutation(v41);
                v49 = *(_QWORD *)(*((_QWORD *)&v300 + 1) + 8 * i);
                if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v44, v49, v46, sel_handler_receivedOfflineMessagePendingForTopic_messageContext_, *(_QWORD *)(a1 + 40), 0))
                {
                  objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v44, v49, v46);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setObject_forKey_(v40, v51, (uint64_t)v50, v52, v49);

                }
              }
              v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v44, (uint64_t)&v300, v46, v313, 16);
            }
            while (v45);
          }
        }
        else
        {
          OSLogHandleForIDSCategory();
          v166 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
          {
            NSStringFromSelector(sel_handler_receivedOfflineMessagePendingForTopic_messageContext_);
            v167 = (void *)objc_claimAutoreleasedReturnValue();
            v168 = *(_QWORD *)(a1 + 40);
            v169 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138413058;
            *(_QWORD *)&buf[4] = v167;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v168;
            v315 = 2112;
            v316 = 0;
            v317 = 2112;
            v318 = v169;
            _os_log_impl(&dword_19B949000, v166, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);

          }
          if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
          {
            v40 = 0;
            goto LABEL_106;
          }
          NSStringFromSelector(sel_handler_receivedOfflineMessagePendingForTopic_messageContext_);
          v41 = (id)objc_claimAutoreleasedReturnValue();
          v244 = 0;
          v245 = *(_QWORD *)(a1 + 48);
          v239 = v41;
          v242 = *(_QWORD *)(a1 + 40);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("No incoming push handler for selector: %@    topic: %@   command: %@   context: %@"));
          v40 = 0;
        }

LABEL_106:
        objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v53, v54, v55, v239, v242, v244, v245);
        v298 = 0u;
        v299 = 0u;
        v296 = 0u;
        v297 = 0u;
        v170 = v40;
        v174 = objc_msgSend_countByEnumeratingWithState_objects_count_(v170, v171, (uint64_t)&v296, v172, v312, 16);
        if (v174)
        {
          v176 = *(_QWORD *)v297;
          do
          {
            for (j = 0; j != v174; ++j)
            {
              if (*(_QWORD *)v297 != v176)
                objc_enumerationMutation(v170);
              v178 = *(_QWORD *)(*((_QWORD *)&v296 + 1) + 8 * j);
              objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v173, v178, v175);
              v179 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_queue(v179, v180, v181, v182);
              v183 = objc_claimAutoreleasedReturnValue();
              v292[0] = MEMORY[0x1E0C809B0];
              v292[1] = 3221225472;
              v292[2] = sub_19BA17B50;
              v292[3] = &unk_1E3C20558;
              v184 = *(_QWORD *)(a1 + 32);
              v185 = *(void **)(a1 + 40);
              v292[4] = v178;
              v292[5] = v184;
              v293 = v185;
              v294 = v251;
              v295 = *(id *)(a1 + 48);
              dispatch_async(v183, v292);

            }
            v174 = objc_msgSend_countByEnumeratingWithState_objects_count_(v170, v173, (uint64_t)&v296, v175, v312, 16);
          }
          while (v174);
        }

        objc_msgSend_count(v170, v186, v187, v188);
        os_activity_scope_leave(&state);
        cut_arc_os_release();

LABEL_144:
LABEL_145:
        v11 = v251;
        goto LABEL_146;
      }
      if (objc_msgSend_integerValue(v247, v26, v27, v28) == 165)
      {
        v305 = _os_activity_create(&dword_19B949000, "Incoming storage empty push", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
        state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
        state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
        os_activity_scope_enter(v305, &state);
        OSLogHandleForIDSCategory();
        v89 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          v90 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v90;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v247;
          _os_log_impl(&dword_19B949000, v89, OS_LOG_TYPE_DEFAULT, "Received offline storage empty message for topic %@ with command %@", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          v238 = *(id *)(a1 + 40);
          v241 = v247;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Received offline storage empty message for topic %@ with command %@"));
        }
        v91 = objc_opt_class();
        sub_19BA138EC(v91, v250, CFSTR("scU"));
        v248 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v92, v93, v94);
        if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 32) + 16), v95, v96, v97))
        {
          objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E0CB3748], v98, v99, v100);
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          v290 = 0u;
          v291 = 0u;
          v288 = 0u;
          v289 = 0u;
          v102 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
          v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v102, v103, (uint64_t)&v288, v104, v311, 16);
          if (v106)
          {
            v108 = *(_QWORD *)v289;
            do
            {
              for (k = 0; k != v106; ++k)
              {
                if (*(_QWORD *)v289 != v108)
                  objc_enumerationMutation(v102);
                v110 = *(_QWORD *)(*((_QWORD *)&v288 + 1) + 8 * k);
                if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v105, v110, v107, sel_handler_receivedNoStorageResponseForTopic_identifier_messageContext_, *(_QWORD *)(a1 + 40), 0, v238, v241))
                {
                  objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v105, v110, v107);
                  v111 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setObject_forKey_(v101, v112, (uint64_t)v111, v113, v110);

                }
              }
              v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v102, v105, (uint64_t)&v288, v107, v311, 16);
            }
            while (v106);
          }
        }
        else
        {
          OSLogHandleForIDSCategory();
          v189 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
          {
            NSStringFromSelector(sel_handler_receivedNoStorageResponseForTopic_identifier_messageContext_);
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            v191 = *(_QWORD *)(a1 + 40);
            v192 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138413058;
            *(_QWORD *)&buf[4] = v190;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v191;
            v315 = 2112;
            v316 = 0;
            v317 = 2112;
            v318 = v192;
            _os_log_impl(&dword_19B949000, v189, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);

          }
          if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
          {
            v101 = 0;
            goto LABEL_125;
          }
          NSStringFromSelector(sel_handler_receivedNoStorageResponseForTopic_identifier_messageContext_);
          v102 = (id)objc_claimAutoreleasedReturnValue();
          v244 = 0;
          v245 = *(_QWORD *)(a1 + 48);
          v238 = v102;
          v241 = *(void **)(a1 + 40);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("No incoming push handler for selector: %@    topic: %@   command: %@   context: %@"));
          v101 = 0;
        }

LABEL_125:
        objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v114, v115, v116, v238, v241, v244, v245);
        v286 = 0u;
        v287 = 0u;
        v284 = 0u;
        v285 = 0u;
        v197 = v101;
        v201 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v198, (uint64_t)&v284, v199, v310, 16);
        if (v201)
        {
          v203 = *(_QWORD *)v285;
          do
          {
            for (m = 0; m != v201; ++m)
            {
              if (*(_QWORD *)v285 != v203)
                objc_enumerationMutation(v197);
              v205 = *(_QWORD *)(*((_QWORD *)&v284 + 1) + 8 * m);
              objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v200, v205, v202);
              v206 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_queue(v206, v207, v208, v209);
              v210 = objc_claimAutoreleasedReturnValue();
              v279[0] = MEMORY[0x1E0C809B0];
              v279[1] = 3221225472;
              v279[2] = sub_19BA17D18;
              v279[3] = &unk_1E3C20580;
              v211 = *(_QWORD *)(a1 + 32);
              v212 = *(void **)(a1 + 40);
              v279[4] = v205;
              v279[5] = v211;
              v280 = v212;
              v281 = v248;
              v282 = v251;
              v283 = *(id *)(a1 + 48);
              dispatch_async(v210, v279);

            }
            v201 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v200, (uint64_t)&v284, v202, v310, 16);
          }
          while (v201);
        }

        objc_msgSend_count(v197, v213, v214, v215);
        os_activity_scope_leave(&state);
        cut_arc_os_release();

        goto LABEL_144;
      }
      v305 = _os_activity_create(&dword_19B949000, "Incoming message push", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
      state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
      os_activity_scope_enter(v305, &state);
      OSLogHandleForIDSCategory();
      v135 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
      {
        v136 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v136;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v247;
        _os_log_impl(&dword_19B949000, v135, OS_LOG_TYPE_DEFAULT, "Received message for topic %@ with command %@", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      {
        v238 = *(id *)(a1 + 40);
        v241 = v247;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Received message for topic %@ with command %@"));
      }
      if (_os_feature_enabled_impl())
      {
        objc_msgSend_topic(*(void **)(a1 + 48), v137, v138, v139);
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v140, v141, (uint64_t)CFSTR("com.apple.private.alloy.facetime.multi"), v142);

        if (isEqualToString)
        {
          objc_msgSend_identifier(*(void **)(a1 + 48), v137, v138, v139);
          kdebug_trace();
        }
      }
      objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v137, v138, v139, v238, v241);
      if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 32) + 16), v144, v145, v146))
      {
        objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E0CB3748], v147, v148, v149);
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        v277 = 0u;
        v278 = 0u;
        v275 = 0u;
        v276 = 0u;
        v151 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
        v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(v151, v152, (uint64_t)&v275, v153, v309, 16);
        if (v155)
        {
          v157 = *(_QWORD *)v276;
          do
          {
            for (n = 0; n != v155; ++n)
            {
              if (*(_QWORD *)v276 != v157)
                objc_enumerationMutation(v151);
              v159 = *(_QWORD *)(*((_QWORD *)&v275 + 1) + 8 * n);
              if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v154, v159, v156, sel_handler_didReceiveMessage_forTopic_fromID_messageContext_, *(_QWORD *)(a1 + 40), v247))
              {
                objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v154, v159, v156);
                v160 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setObject_forKey_(v150, v161, (uint64_t)v160, v162, v159);

              }
            }
            v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(v151, v154, (uint64_t)&v275, v156, v309, 16);
          }
          while (v155);
        }
      }
      else
      {
        OSLogHandleForIDSCategory();
        v193 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
        {
          NSStringFromSelector(sel_handler_didReceiveMessage_forTopic_fromID_messageContext_);
          v194 = (void *)objc_claimAutoreleasedReturnValue();
          v195 = *(_QWORD *)(a1 + 40);
          v196 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138413058;
          *(_QWORD *)&buf[4] = v194;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v195;
          v315 = 2112;
          v316 = v247;
          v317 = 2112;
          v318 = v196;
          _os_log_impl(&dword_19B949000, v193, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);

        }
        if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
        {
          v150 = 0;
          goto LABEL_134;
        }
        NSStringFromSelector(sel_handler_didReceiveMessage_forTopic_fromID_messageContext_);
        v151 = (id)objc_claimAutoreleasedReturnValue();
        v244 = v247;
        v245 = *(_QWORD *)(a1 + 48);
        v240 = v151;
        v243 = *(_QWORD *)(a1 + 40);
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("No incoming push handler for selector: %@    topic: %@   command: %@   context: %@"));
        v150 = 0;
      }

LABEL_134:
      objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v163, v164, v165, v240, v243, v244, v245);
      v273 = 0u;
      v274 = 0u;
      v271 = 0u;
      v272 = 0u;
      v216 = v150;
      v220 = objc_msgSend_countByEnumeratingWithState_objects_count_(v216, v217, (uint64_t)&v271, v218, v308, 16);
      if (v220)
      {
        v222 = *(_QWORD *)v272;
        do
        {
          for (ii = 0; ii != v220; ++ii)
          {
            if (*(_QWORD *)v272 != v222)
              objc_enumerationMutation(v216);
            v224 = v216;
            v225 = *(_QWORD *)(*((_QWORD *)&v271 + 1) + 8 * ii);
            objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v219, v225, v221);
            v226 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_queue(v226, v227, v228, v229);
            v230 = objc_claimAutoreleasedReturnValue();
            v265[0] = MEMORY[0x1E0C809B0];
            v265[1] = 3221225472;
            v265[2] = sub_19BA17EE4;
            v265[3] = &unk_1E3C205A8;
            v231 = *(_QWORD *)(a1 + 32);
            v265[4] = v225;
            v265[5] = v231;
            v266 = v250;
            v267 = *(id *)(a1 + 40);
            v268 = v249;
            v269 = v251;
            v270 = *(id *)(a1 + 48);
            dispatch_async(v230, v265);

            v216 = v224;
          }
          v220 = objc_msgSend_countByEnumeratingWithState_objects_count_(v224, v219, (uint64_t)&v271, v221, v308, 16);
        }
        while (v220);
      }

      v235 = objc_msgSend_count(v216, v232, v233, v234) == 0;
      if (!v235)
        objc_msgSend__powerLogIncomingMessage_command_topic_(*(void **)(a1 + 32), v236, (uint64_t)v250, v237, v247, *(_QWORD *)(a1 + 40));
      os_activity_scope_leave(&state);
      cut_arc_os_release();

      goto LABEL_144;
    }
    OSLogHandleForIDSCategory();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      v57 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v57;
      _os_log_impl(&dword_19B949000, v56, OS_LOG_TYPE_DEFAULT, "Recieved message for unknown topic: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    {
      v238 = *(id *)(a1 + 40);
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Recieved message for unknown topic: %@"));
    }
    v305 = _os_activity_create(&dword_19B949000, "Dropping push with unknown command", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v305, &state);
    objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v58, v59, v60);
    if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 32) + 16), v61, v62, v63))
    {
      objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E0CB3748], v64, v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v263 = 0u;
      v264 = 0u;
      v261 = 0u;
      v262 = 0u;
      v68 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
      v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v261, v70, v307, 16);
      if (v72)
      {
        v74 = *(_QWORD *)v262;
        do
        {
          for (jj = 0; jj != v72; ++jj)
          {
            if (*(_QWORD *)v262 != v74)
              objc_enumerationMutation(v68);
            v76 = *(_QWORD *)(*((_QWORD *)&v261 + 1) + 8 * jj);
            if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v71, v76, v73, sel_handler_didReceiveMessage_forUnknownTopic_messageContext_, *(_QWORD *)(a1 + 40), 0, v238))
            {
              objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v71, v76, v73);
              v77 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKey_(v67, v78, (uint64_t)v77, v79, v76);

            }
          }
          v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v71, (uint64_t)&v261, v73, v307, 16);
        }
        while (v72);
      }
    }
    else
    {
      OSLogHandleForIDSCategory();
      v85 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        NSStringFromSelector(sel_handler_didReceiveMessage_forUnknownTopic_messageContext_);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        v87 = *(_QWORD *)(a1 + 40);
        v88 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)&buf[4] = v86;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v87;
        v315 = 2112;
        v316 = 0;
        v317 = 2112;
        v318 = v88;
        _os_log_impl(&dword_19B949000, v85, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);

      }
      if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
      {
        v67 = 0;
        goto LABEL_73;
      }
      NSStringFromSelector(sel_handler_didReceiveMessage_forUnknownTopic_messageContext_);
      v68 = (id)objc_claimAutoreleasedReturnValue();
      v244 = 0;
      v245 = *(_QWORD *)(a1 + 48);
      v238 = v68;
      v241 = *(void **)(a1 + 40);
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("No incoming push handler for selector: %@    topic: %@   command: %@   context: %@"));
      v67 = 0;
    }

LABEL_73:
    objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 48), v80, v81, v82, v238, v241, v244, v245);
    v259 = 0u;
    v260 = 0u;
    v257 = 0u;
    v258 = 0u;
    v117 = v67;
    v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v117, v118, (uint64_t)&v257, v119, v306, 16);
    if (v121)
    {
      v123 = *(_QWORD *)v258;
      do
      {
        for (kk = 0; kk != v121; ++kk)
        {
          if (*(_QWORD *)v258 != v123)
            objc_enumerationMutation(v117);
          v125 = *(_QWORD *)(*((_QWORD *)&v257 + 1) + 8 * kk);
          objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v120, v125, v122);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_queue(v126, v127, v128, v129);
          v130 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = sub_19BA180B0;
          block[3] = &unk_1E3C20580;
          v131 = *(_QWORD *)(a1 + 32);
          block[4] = v125;
          block[5] = v131;
          v253 = v250;
          v254 = *(id *)(a1 + 40);
          v255 = v251;
          v256 = *(id *)(a1 + 48);
          dispatch_async(v130, block);

        }
        v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v117, v120, (uint64_t)&v257, v122, v306, 16);
      }
      while (v121);
    }

    objc_msgSend_count(v117, v132, v133, v134);
    os_activity_scope_leave(&state);
    cut_arc_os_release();

    goto LABEL_145;
  }
  objc_msgSend_daemon(MEMORY[0x1E0D36A40], v7, v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
  {
    sub_19BAF4574();
    v11 = v10;
  }
LABEL_146:

}

void sub_19BA177E8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BA173C4);
  }
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x3A8]);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

uint64_t sub_19BA17B50(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_receivedOfflineMessagePendingForTopic_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

uint64_t sub_19BA17D18(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_receivedNoStorageResponseForTopic_identifier_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], a1[8], v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

uint64_t sub_19BA17EE4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_didReceiveMessage_forTopic_fromID_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], a1[8], a1[9], v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

uint64_t sub_19BA180B0(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = a1[4];
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_didReceiveMessage_forUnknownTopic_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], a1[8], v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[4];
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

uint64_t sub_19BA1881C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    v9 = *(_QWORD *)(a1 + 32);
    _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Making handler call to %@"));
  }
  objc_msgSend_handler_isConnectedChanged_(*(void **)(a1 + 32), v4, *(_QWORD *)(a1 + 40), v5, *(unsigned __int8 *)(a1 + 48), v9);
  OSLogHandleForIDSCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
      return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("IDSPushHandler"), CFSTR("Call to %@ completed"));
  }
  return result;
}

void sub_19BA18A84(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

id sub_19BA18E18()
{
  if (qword_1EE40B040 != -1)
    dispatch_once(&qword_1EE40B040, &unk_1E3C1B730);
  return (id)qword_1EE40B038;
}

void sub_19BA18E58()
{
  id *v0;

  v0 = (id *)MEMORY[0x1A1AC7380]("CKRecordZoneDefaultName", CFSTR("CloudKit"));
  if (v0)
    objc_storeStrong((id *)&qword_1EE40B038, *v0);
}

id sub_19BA18E94()
{
  if (qword_1EE40B050 != -1)
    dispatch_once(&qword_1EE40B050, &unk_1E3C1BF30);
  return (id)qword_1EE40B048;
}

void sub_19BA18ED4()
{
  id *v0;

  v0 = (id *)MEMORY[0x1A1AC7380]("CKOwnerDefaultName", CFSTR("CloudKit"));
  if (v0)
    objc_storeStrong((id *)&qword_1EE40B048, *v0);
}

id sub_19BA18F10()
{
  if (qword_1EE40B060 != -1)
    dispatch_once(&qword_1EE40B060, &unk_1E3C1BFF0);
  return (id)qword_1EE40B058;
}

void sub_19BA18F50()
{
  id *v0;

  v0 = (id *)MEMORY[0x1A1AC7380]("CKErrorDomain", CFSTR("CloudKit"));
  if (v0)
    objc_storeStrong((id *)&qword_1EE40B058, *v0);
}

uint64_t sub_19BA18FCC()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B068 = result;
  return result;
}

uint64_t sub_19BA190DC()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B078 = result;
  return result;
}

uint64_t sub_19BA1915C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B088 = result;
  return result;
}

uint64_t sub_19BA1921C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B098 = result;
  return result;
}

uint64_t sub_19BA1929C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B0A8 = result;
  return result;
}

uint64_t sub_19BA1931C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B0B8 = result;
  return result;
}

uint64_t sub_19BA1939C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B0C8 = result;
  return result;
}

uint64_t sub_19BA1946C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B0D8 = result;
  return result;
}

uint64_t sub_19BA19564()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B0E8 = result;
  return result;
}

uint64_t sub_19BA19624()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B0F8 = result;
  return result;
}

uint64_t sub_19BA196B8()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B108 = result;
  return result;
}

uint64_t sub_19BA19738()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B118 = result;
  return result;
}

uint64_t sub_19BA19818()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B128 = result;
  return result;
}

uint64_t sub_19BA199C0()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B138 = result;
  return result;
}

uint64_t sub_19BA19B48()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B148 = result;
  return result;
}

uint64_t sub_19BA19C90()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B158 = result;
  return result;
}

uint64_t sub_19BA19D40()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B168 = result;
  return result;
}

uint64_t sub_19BA19E14()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B178 = result;
  return result;
}

uint64_t sub_19BA19EB8()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B188 = result;
  return result;
}

uint64_t sub_19BA19F64()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B198 = result;
  return result;
}

uint64_t sub_19BA1A014()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B1A8 = result;
  return result;
}

uint64_t sub_19BA1A0C4()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B1B8 = result;
  return result;
}

uint64_t sub_19BA1A174()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B1C8 = result;
  return result;
}

uint64_t sub_19BA1A1F4()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B1D8 = result;
  return result;
}

void *sub_19BA1B020()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMWCreateSessionSeed", CFSTR("MessageProtection"));
  off_1EE40B1E8 = result;
  return result;
}

void *sub_19BA1B04C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMWCreateSessionSalt", CFSTR("MessageProtection"));
  off_1EE40B1F8 = result;
  return result;
}

void sub_19BA1B8A8(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_UUID(MEMORY[0x1E0CB3A28], a3, a4, a1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1EE40B218;
  qword_1EE40B218 = v4;

}

void sub_19BA1D2D4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BA1D120);
  }
  _Unwind_Resume(a1);
}

id IDSLinkHBHDeriveHKDFSha256Keys(void *a1, void *a2, unint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  double v16;
  int v17;
  id v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  double v24;
  id v25;
  const char *v26;
  double v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  const char *v43;
  uint64_t v44;
  double v45;
  id v46;
  const char *v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  double v52;
  int v53;
  const char *v54;
  uint64_t v55;
  double v56;
  id v57;
  __int128 v59;
  _BYTE v60[18];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  *(_WORD *)&v60[16] = -21846;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59 = v10;
  *(_OWORD *)v60 = v10;
  v13 = objc_msgSend_length(v7, v11, v12, -3.72066208e-103);
  v17 = objc_msgSend_length(v9, v14, v15, v16);
  v18 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v23 = (void *)objc_msgSend_initWithLength_(v18, v19, 64, v20);
  if (v13 != 20 || v17 != 12)
  {
    objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v21, v22, v24);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      sub_19BAF45D8();
    goto LABEL_16;
  }
  qmemcpy(&v59, "QR-HBH-KDF", 10);
  v25 = objc_alloc(MEMORY[0x1E0CB3A28]);
  v28 = objc_msgSend_initWithUUIDString_(v25, v26, (uint64_t)v8, v27);
  v32 = v28;
  if (v28)
  {
    objc_msgSend_getUUIDBytes_(v28, v29, (unint64_t)&v59 | 0xA, v31);
    *(_QWORD *)&v60[10] = bswap64(a3);
    v33 = objc_retainAutorelease(v9);
    objc_msgSend_bytes(v33, v34, v35, v36);
    if (CCKDFParametersCreateHkdf())
    {
      objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v37, v38, v39);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        sub_19BAF4690();

      goto LABEL_16;
    }
    v42 = objc_retainAutorelease(v7);
    objc_msgSend_bytes(v42, v43, v44, v45);
    v46 = objc_retainAutorelease(v23);
    objc_msgSend_mutableBytes(v46, v47, v48, v49);
    objc_msgSend_length(v46, v50, v51, v52);
    v53 = CCDeriveKey();
    CCKDFParametersDestroy();
    if (!v53)
    {
      v57 = v46;
      goto LABEL_17;
    }
    objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v54, v55, v56);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      sub_19BAF4630();
  }
  else
  {
    objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v29, v30, v31);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      sub_19BAF4604();
  }

LABEL_16:
  v57 = 0;
LABEL_17:

  return v57;
}

id IDSHBHEncryptDataWithKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  PSIDSLinkHBHEncryptedPayload *v10;
  id v11;
  const char *v12;
  double v13;
  void *v14;
  const __SecRandom *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  void *v25;
  id v26;
  const char *v27;
  double v28;
  void *v29;
  id v30;
  const char *v31;
  double v32;
  void *v33;
  id v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  id v41;
  const char *v42;
  uint64_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  id v49;
  const char *v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  NSObject *v56;
  const char *v57;
  double v58;
  const char *v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  uint64_t v65;

  v5 = a3;
  v9 = v5;
  if (a1 && v5)
  {
    v10 = objc_alloc_init(PSIDSLinkHBHEncryptedPayload);
    v11 = objc_alloc(MEMORY[0x1E0C99DF0]);
    v14 = (void *)objc_msgSend_initWithLength_(v11, v12, 12, v13);
    v15 = (const __SecRandom *)*MEMORY[0x1E0CD7000];
    v16 = objc_retainAutorelease(v14);
    v20 = (void *)objc_msgSend_mutableBytes(v16, v17, v18, v19);
    if (SecRandomCopyBytes(v15, 0xCuLL, v20))
    {
      objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v21, v22, v23);
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_19BAF4750();
      v25 = 0;
    }
    else
    {
      v26 = objc_alloc(MEMORY[0x1E0C99DF0]);
      v29 = (void *)objc_msgSend_initWithLength_(v26, v27, a2, v28);
      v30 = objc_alloc(MEMORY[0x1E0C99DF0]);
      v33 = (void *)objc_msgSend_initWithLength_(v30, v31, 16, v32);
      v34 = objc_retainAutorelease(v9);
      objc_msgSend_bytes(v34, v35, v36, v37);
      objc_msgSend_length(v34, v38, v39, v40);
      v41 = objc_retainAutorelease(v16);
      objc_msgSend_bytes(v41, v42, v43, v44);
      v24 = objc_retainAutorelease(v29);
      v48 = objc_msgSend_mutableBytes(v24, v45, v46, v47);
      v49 = objc_retainAutorelease(v33);
      v65 = objc_msgSend_mutableBytes(v49, v50, v51, v52);
      if (CCCryptorGCMOneshotEncrypt())
      {
        objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v53, v54, v55, a2, v48, v65, 16);
        v56 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          sub_19BAF46F0();

        v25 = 0;
      }
      else
      {
        objc_msgSend_setInitializationVector_(v10, v53, (uint64_t)v41, v55, a2, v48, v65, 16);
        objc_msgSend_setCipherText_(v10, v57, (uint64_t)v24, v58);
        objc_msgSend_setAuthenticationTag_(v10, v59, (uint64_t)v49, v60);
        objc_msgSend_data(v10, v61, v62, v63);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
      }

    }
  }
  else
  {
    objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v6, v7, v8);
    v10 = (PSIDSLinkHBHEncryptedPayload *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v10->super.super, OS_LOG_TYPE_ERROR))
      sub_19BAF47B0((uint64_t)v9, a1, &v10->super.super);
    v25 = 0;
  }

  return v25;
}

NSObject *IDSHBHDecryptDataWithKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  id v10;
  const char *v11;
  double v12;
  NSObject *v13;
  PSIDSLinkHBHEncryptedPayload *v14;
  const char *v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  id v43;
  const char *v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  id v50;
  const char *v51;
  uint64_t v52;
  double v53;
  const char *v54;
  uint64_t v55;
  double v56;
  id v57;
  const char *v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  double v63;
  id v64;
  const char *v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  id v69;
  const char *v70;
  uint64_t v71;
  double v72;
  const char *v73;
  uint64_t v74;
  double v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  const char *v80;
  uint64_t v81;
  double v82;
  NSObject *v83;
  NSObject *v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  uint64_t v90;

  v5 = a3;
  v9 = v5;
  if (a1 && v5)
  {
    v10 = objc_alloc(MEMORY[0x1E0C99D50]);
    v13 = objc_msgSend_initWithBytes_length_(v10, v11, a1, v12, a2);
    v14 = [PSIDSLinkHBHEncryptedPayload alloc];
    v17 = (void *)objc_msgSend_initWithData_(v14, v15, (uint64_t)v13, v16);
    v21 = v17;
    if (v17)
    {
      objc_msgSend_initializationVector(v17, v18, v19, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_length(v22, v23, v24, v25);

      if (v26 == 12)
      {
        objc_msgSend_authenticationTag(v21, v27, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend_length(v30, v31, v32, v33);

        if (v34 == 16)
        {
          objc_msgSend_cipherText(v21, v35, v36, v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend_length(v38, v39, v40, v41);

          v43 = objc_alloc(MEMORY[0x1E0C99DF0]);
          v46 = (void *)objc_msgSend_initWithLength_(v43, v44, v42, v45);
          objc_msgSend_initializationVector(v21, v47, v48, v49);
          v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          objc_msgSend_bytes(v50, v51, v52, v53);

          objc_msgSend_cipherText(v21, v54, v55, v56);
          v57 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          objc_msgSend_bytes(v57, v58, v59, v60);

          objc_msgSend_authenticationTag(v21, v61, v62, v63);
          v64 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v68 = objc_msgSend_bytes(v64, v65, v66, v67);

          v69 = objc_retainAutorelease(v9);
          objc_msgSend_bytes(v69, v70, v71, v72);
          objc_msgSend_length(v69, v73, v74, v75);
          v76 = objc_retainAutorelease(v46);
          v90 = objc_msgSend_mutableBytes(v76, v77, v78, v79);
          if (!CCCryptorGCMOneshotDecrypt())
          {
            v76 = v76;
            v84 = v76;
            goto LABEL_20;
          }
          objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v80, v81, v82, v42, v90, v68, 16);
          v83 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            sub_19BAF4860();

        }
        else
        {
          objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v35, v36, v37);
          v76 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
            sub_19BAF48C0(v21, (const char *)v76, v87, v88);
        }
      }
      else
      {
        objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v27, v28, v29);
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          sub_19BAF4944(v21, (const char *)v76, v85, v86);
      }
    }
    else
    {
      objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v18, v19, v20);
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        sub_19BAF4834();
    }
    v84 = 0;
LABEL_20:

    goto LABEL_21;
  }
  objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v6, v7, v8);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    sub_19BAF49C8();
  v84 = 0;
LABEL_21:

  return v84;
}

void sub_19BA1EB48(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

_QWORD *IDSOSChannelManagerCreate(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  uint64_t extended;

  v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v2)
  {
    if (!os_channel_attr_create())
    {
LABEL_15:
      IDSOSChannelManagerDestroy(v2);
      return 0;
    }
    if (*(_DWORD *)(a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      v5 = "os_channel_attr_set";
      while (!os_channel_attr_set())
      {
        ++v4;
        v3 += 16;
        if (v4 >= *(unsigned int *)(a1 + 8))
          goto LABEL_7;
      }
      goto LABEL_14;
    }
LABEL_7:
    if (*(_QWORD *)(a1 + 16) && *(_DWORD *)(a1 + 24) && os_channel_attr_set_key())
    {
      v5 = "os_channel_attr_set_key";
    }
    else
    {
      extended = os_channel_create_extended();
      *v2 = extended;
      if (extended)
      {
        os_channel_attr_destroy();
        return v2;
      }
      v5 = "os_channel_create_extended";
    }
LABEL_14:
    perror(v5);
    os_channel_attr_destroy();
    goto LABEL_15;
  }
  return v2;
}

void IDSOSChannelManagerDestroy(_QWORD *a1)
{
  if (a1)
  {
    if (*a1)
      os_channel_destroy();
    free(a1);
  }
}

uint64_t sub_19BA22508()
{
  id v0;
  const char *v1;
  double v2;
  void *v3;
  const char *v4;
  double v5;
  uint64_t v6;

  v0 = objc_alloc(MEMORY[0x1E0C99EA0]);
  v3 = (void *)objc_msgSend_initWithSuiteName_(v0, v1, (uint64_t)CFSTR("com.apple.ids"), v2);
  v6 = objc_msgSend_BOOLForKey_(v3, v4, (uint64_t)CFSTR("IDSClearStateOnLaunch"), v5);

  return v6;
}

void sub_19BA22554(uint64_t a1, uint64_t a2, int a3)
{
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  id v10;

  v4 = objc_alloc(MEMORY[0x1E0C99EA0]);
  v7 = (void *)objc_msgSend_initWithSuiteName_(v4, v5, (uint64_t)CFSTR("com.apple.ids"), v6);
  v10 = v7;
  if (a3)
    objc_msgSend_setBool_forKey_(v7, v8, 1, v9, CFSTR("IDSClearStateOnLaunch"));
  else
    objc_msgSend_removeObjectForKey_(v7, v8, (uint64_t)CFSTR("IDSClearStateOnLaunch"), v9);

}

id sub_19BA225BC()
{
  id v0;
  const char *v1;
  double v2;
  void *v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  const char *v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  double v27;
  const char *v28;

  v0 = objc_alloc(MEMORY[0x1E0C99EA0]);
  v3 = (void *)objc_msgSend_initWithSuiteName_(v0, v1, (uint64_t)CFSTR("com.apple.ids"), v2);
  objc_msgSend_stringForKey_(v3, v4, (uint64_t)CFSTR("IDSKTAccountKeyFetchMetricDeviceIDDefault"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sharedInstance(IDSCurrentServerTime, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_currentServerTimeInterval(v10, v11, v12, v13);
  v15 = v14;

  objc_msgSend_doubleForKey_(v3, v16, (uint64_t)CFSTR("IDSKTAccountKeyFetchMetricDeviceIDExpirationDefault"), v17);
  if (v20 == 0.0 || (v21 = v15 - v20, v21 >= 2592000.0))
  {

LABEL_6:
    objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v18, v19, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UUIDString(v22, v23, v24, v25);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setObject_forKey_(v3, v26, (uint64_t)v6, v27, CFSTR("IDSKTAccountKeyFetchMetricDeviceIDDefault"));
    objc_msgSend_setDouble_forKey_(v3, v28, (uint64_t)CFSTR("IDSKTAccountKeyFetchMetricDeviceIDExpirationDefault"), v15);
    goto LABEL_7;
  }
  if (!v6)
    goto LABEL_6;
LABEL_7:

  return v6;
}

id sub_19BA226C0()
{
  id v0;
  const char *v1;
  double v2;
  void *v3;
  const char *v4;
  double v5;
  void *v6;
  id v7;

  if (_IDSRunningInDaemon())
  {
    v0 = objc_alloc(MEMORY[0x1E0C99EA0]);
    v3 = (void *)objc_msgSend_initWithSuiteName_(v0, v1, (uint64_t)CFSTR("com.apple.ids"), v2);
    objc_msgSend_objectForKey_(v3, v4, (uint64_t)CFSTR("FTMessageDeliveryServerTimestamp"), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_19BA22758(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  id v9;

  v9 = a3;
  if (_IDSRunningInDaemon())
  {
    v3 = objc_alloc(MEMORY[0x1E0C99EA0]);
    v6 = (void *)objc_msgSend_initWithSuiteName_(v3, v4, (uint64_t)CFSTR("com.apple.ids"), v5);
    objc_msgSend_setObject_forKey_(v6, v7, (uint64_t)v9, v8, CFSTR("FTMessageDeliveryServerTimestamp"));

  }
}

id sub_19BA227BC()
{
  id v0;
  const char *v1;
  double v2;
  void *v3;
  const char *v4;
  double v5;
  void *v6;
  id v7;

  if (_IDSRunningInDaemon())
  {
    v0 = objc_alloc(MEMORY[0x1E0C99EA0]);
    v3 = (void *)objc_msgSend_initWithSuiteName_(v0, v1, (uint64_t)CFSTR("com.apple.ids"), v2);
    objc_msgSend_objectForKey_(v3, v4, (uint64_t)CFSTR("FTMessageDeliveryServerTimestampReceivedDate"), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_19BA22854(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  id v9;

  v9 = a3;
  if (_IDSRunningInDaemon())
  {
    v3 = objc_alloc(MEMORY[0x1E0C99EA0]);
    v6 = (void *)objc_msgSend_initWithSuiteName_(v3, v4, (uint64_t)CFSTR("com.apple.ids"), v5);
    objc_msgSend_setObject_forKey_(v6, v7, (uint64_t)v9, v8, CFSTR("FTMessageDeliveryServerTimestampReceivedDate"));

  }
}

BOOL IDSQRProtoTestTestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id sub_19BA239D4(id a1)
{
  return a1;
}

uint64_t sub_19BA239E8()
{
  return objc_opt_class();
}

void sub_19BA23DF8(uint64_t a1, dispatch_queue_t *a2)
{
  sub_19BA23E00(a2);
}

void sub_19BA23E00(dispatch_queue_t *a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  double v23;
  const __CFString *v24;
  const __CFString *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  const char *v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  void (**v36)(_QWORD, _QWORD);
  int v37;
  uint64_t v38;
  __int16 v39;
  dispatch_queue_t *v40;
  __int16 v41;
  const __CFString *v42;
  __int16 v43;
  const __CFString *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    dispatch_assert_queue_V2(a1[4]);
    objc_msgSend_cacheDidReloadBlock(a1, v2, v3, v4);
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5 && (v9 = (void *)v5, v10 = objc_msgSend_postingNotification(a1, v6, v7, v8), v9, !v10))
    {
      objc_msgSend_config(a1, v6, v7, v8);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_logCategory(v26, v27, v28, v29);
      v30 = objc_claimAutoreleasedReturnValue();

      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 138412546;
        v38 = objc_opt_class();
        v39 = 2048;
        v40 = a1;
        _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "<%@:%p> processing external reload", (uint8_t *)&v37, 0x16u);
      }

      objc_msgSend_loadFromCacheWithError_(a1, v31, 0, v32);
      v15 = objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        objc_msgSend_cacheDidReloadBlock(a1, v33, v34, v35);
        v36 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, NSObject *))v36)[2](v36, v15);

      }
    }
    else
    {
      objc_msgSend_config(a1, v6, v7, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_logCategory(v11, v12, v13, v14);
      v15 = objc_claimAutoreleasedReturnValue();

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_opt_class();
        objc_msgSend_cacheDidReloadBlock(a1, v17, v18, v19);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (v22)
          v24 = CFSTR("YES");
        else
          v24 = CFSTR("NO");
        v37 = 138413058;
        if (objc_msgSend_postingNotification(a1, v20, v21, v23))
          v25 = CFSTR("YES");
        else
          v25 = CFSTR("NO");
        v38 = v16;
        v39 = 2048;
        v40 = a1;
        v41 = 2112;
        v42 = v24;
        v43 = 2112;
        v44 = v25;
        _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "<%@:%p> asked to reload externally, not not in a state to do so {hasCacheDidReloadBlock: %@, postingNotification: %@}", (uint8_t *)&v37, 0x2Au);

      }
    }

  }
}

void sub_19BA24024(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_19BA2461C(a2);
}

void sub_19BA240F8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  double v26;
  const void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const void *v35;

  objc_msgSend_serverSignature(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v7 = (const __CFString *)*MEMORY[0x1E0C9B230];
  CFPreferencesSetValue(CFSTR("CachedSignature"), v5, *(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);

  objc_msgSend_serverCerts(*(void **)(a1 + 32), v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetValue(CFSTR("CacheCertificate"), v11, *(CFStringRef *)(a1 + 48), v6, v7);

  objc_msgSend_signedBag(*(void **)(a1 + 32), v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetValue(CFSTR("CachedBag"), v15, *(CFStringRef *)(a1 + 48), v6, v7);

  v16 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_loadDate(*(void **)(a1 + 32), v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceReferenceDate(v20, v21, v22, v23);
  v27 = (const void *)objc_msgSend_numberWithDouble_(v16, v24, v25, v26);
  CFPreferencesSetValue(CFSTR("Date"), v27, *(CFStringRef *)(a1 + 48), v6, v7);

  v28 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_timeToLive(*(void **)(a1 + 32), v29, v30, v31);
  v35 = (const void *)objc_msgSend_numberWithDouble_(v28, v32, v33, v34);
  CFPreferencesSetValue(CFSTR("CacheTime"), v35, *(CFStringRef *)(a1 + 48), v6, v7);
  CFPreferencesSynchronize(*(CFStringRef *)(a1 + 48), v6, v7);
  sub_19BA24254(*(dispatch_queue_t **)(a1 + 40));
}

void sub_19BA24254(dispatch_queue_t *a1)
{
  const char *v2;
  double v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  __CFNotificationCenter *DarwinNotifyCenter;
  dispatch_time_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  dispatch_queue_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    dispatch_assert_queue_V2(a1[4]);
    objc_msgSend_setPostingNotification_(a1, v2, 1, v3);
    objc_msgSend_config(a1, v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v7, v8, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v20 = objc_opt_class();
      v21 = 2048;
      v22 = a1;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "<%@:%p> posting external reload notification", buf, 0x16u);
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, CFSTR("__k_IDSServerBagFinishedLoadingDistributedNotification"), 0, 0, 0);
    v13 = dispatch_time(0, 1000000000);
    objc_msgSend_queue(a1, v14, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19BA246C0;
    block[3] = &unk_1E3C1F898;
    block[4] = a1;
    dispatch_after(v13, v17, block);

  }
}

void sub_19BA2452C(uint64_t a1)
{
  sub_19BA24254(*(dispatch_queue_t **)(a1 + 32));
}

void sub_19BA24614(uint64_t a1)
{
  sub_19BA24254(*(dispatch_queue_t **)(a1 + 32));
}

void sub_19BA2461C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19BA24678;
    block[3] = &unk_1E3C1F898;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_19BA24678(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  id v6;

  objc_msgSend_handleExternalLoadTaskQueue(*(void **)(a1 + 32), a2, a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_enqueueExecutionWithTarget_afterDelay_(v6, v5, *(_QWORD *)(a1 + 32), 0.2);

}

uint64_t sub_19BA246C0(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_setPostingNotification_(*(void **)(a1 + 32), a2, 0, a3);
}

uint64_t IDSQRProtoPeerPublishedStreamReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 3)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
                break;
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_39;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
              break;
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_55;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedUInt32Add();
        }
      }
      else if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_43;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v20;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BA251AC()
{
  IDSNWPathUtils *v0;
  void *v1;

  v0 = objc_alloc_init(IDSNWPathUtils);
  v1 = (void *)qword_1EE40AED0;
  qword_1EE40AED0 = (uint64_t)v0;

}

void sub_19BA255E8(uint64_t a1, const char *a2, double a3)
{
  void *v4;
  uint64_t v5;
  void *v6;

  objc_msgSend__updateSlicedInterfaceName_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = v4;
    (*(void (**)(void))(v5 + 16))();
    v4 = v6;
  }

}

void sub_19BA25900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BA25938(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19BA25948(uint64_t a1)
{

}

uint64_t sub_19BA25950(uint64_t a1, nw_interface_t interface)
{
  const char *name;
  id v4;
  const char *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  name = nw_interface_get_name(interface);
  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  v7 = objc_msgSend_initWithCString_encoding_(v4, v5, (uint64_t)name, v6, 4);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  objc_msgSend_NWPathUtils(IDSFoundationLog, v10, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v16 = 138412290;
    v17 = v14;
    _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface Name: %@", (uint8_t *)&v16, 0xCu);
  }

  return 1;
}

uint64_t IDSQRProtoH3EndToEndChannelUnRegisterIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void *sub_19BA297AC()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPVerifyAndExposeMessage", CFSTR("MessageProtection"));
  off_1EE40AE80 = result;
  return result;
}

void *sub_19BA297D8()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPCopyProtectedMsgHash", CFSTR("MessageProtection"));
  off_1EE40AD50 = result;
  return result;
}

void *sub_19BA29804()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFICopyProtClass", CFSTR("MessageProtection"));
  off_1EE40AA20 = result;
  return result;
}

void *sub_19BA29830()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFIUpdateProtClass", CFSTR("MessageProtection"));
  off_1EE40AA30 = result;
  return result;
}

void *sub_19BA2985C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFIPurgeFromKeychain", CFSTR("MessageProtection"));
  off_1EE40B220 = result;
  return result;
}

void *sub_19BA29888()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFullIdentityCreateFromData", CFSTR("MessageProtection"));
  off_1EE40AA40 = result;
  return result;
}

void *sub_19BA298B4()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFullIdentityCreate", CFSTR("MessageProtection"));
  off_1EE40B230 = result;
  return result;
}

void *sub_19BA298E0()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFullIdentityCreateWithProtClass", CFSTR("MessageProtection"));
  off_1EE40B240 = result;
  return result;
}

void *sub_19BA2990C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPPublicIdentityCopyFromPrivate", CFSTR("MessageProtection"));
  off_1EE40AA60 = result;
  return result;
}

void *sub_19BA29938()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPFIAppendSerialization", CFSTR("MessageProtection"));
  off_1EE40AA10 = result;
  return result;
}

void *sub_19BA29964()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPSignAndProtectMessage", CFSTR("MessageProtection"));
  off_1EE40AE70 = result;
  return result;
}

void *sub_19BA29990()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPPublicIdentityCreateFromData", CFSTR("MessageProtection"));
  off_1EE40AA70 = result;
  return result;
}

void *sub_19BA299BC()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("SecMPPIAppendSerialization", CFSTR("MessageProtection"));
  off_1EE40AA50 = result;
  return result;
}

void sub_19BA29CA0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  os_unfair_lock_s *WeakRetained;
  os_unfair_lock_s *v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  const char *v22;
  double v23;
  NSObject *v24;
  _QWORD block[4];
  os_unfair_lock_s *v26;

  v5 = a2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 2);
    objc_msgSend_setLoadedContents_(v7, v8, (uint64_t)v5, v9);
    objc_msgSend_contentProvider(v7, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_loadOverrideValuesIfPresent(v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend_mutableCopy(v17, v18, v19, v20);
    objc_msgSend_setOverrideValues_(v7, v22, (uint64_t)v21, v23);

    os_unfair_lock_unlock(v7 + 2);
    if (!a3)
    {
      im_primary_queue();
      v24 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19BA29DB8;
      block[3] = &unk_1E3C1F898;
      v26 = v7;
      dispatch_async(v24, block);

    }
  }

}

void sub_19BA29DB8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  double v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend_config(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_logCategory(v5, v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(void **)(a1 + 32);
    objc_msgSend_config(v13, v10, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v13;
    v23 = 2112;
    v24 = v14;
    _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ posted finished loading note {config: %@}", (uint8_t *)&v21, 0x16u);

  }
  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotificationName_object_(v18, v19, (uint64_t)CFSTR("_kIDSServerBagFinishedLoadingNotification"), v20, *(_QWORD *)(a1 + 32));

}

void sub_19BA2AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_19BA2B2D4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  Class result;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!qword_1EE40AF58)
  {
    v10 = xmmword_1E3C20A00;
    v11 = 0;
    qword_1EE40AF58 = _sl_dlopen();
  }
  if (!qword_1EE40AF58)
    sub_19BAF6178(&v9, a2, a3, a4);
  result = objc_getClass("KTVerifierResult");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_19BAF61F4(v8, (uint64_t)result, v6, v7);
  qword_1EE40AF68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t IDSQRProtoSessionInfoIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  IDSQRProtoPeerPublishedStream *v18;
  const char *v19;
  double v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  const char *v34;
  double v35;
  const char *v36;
  double v37;
  const char *v38;
  double v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(IDSQRProtoPeerPublishedStream);
        objc_msgSend_addPeerPublishedStreams_((void *)a1, v19, (uint64_t)v18, v20);
        if (PBReaderPlaceMark() && (IDSQRProtoPeerPublishedStreamReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_56;
        goto LABEL_103;
      case 2u:
        if (v16 != 2)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          while (1)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
              break;
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_97;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_97:
          PBRepeatedUInt32Add();
          goto LABEL_100;
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
              break;
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_34;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          PBRepeatedUInt32Add();
        }
        goto LABEL_73;
      case 3u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            while (1)
            {
              v31 = *v3;
              v32 = *(_QWORD *)(a2 + v31);
              if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                break;
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v30 |= (unint64_t)(v33 & 0x7F) << v28;
              if (v33 < 0)
              {
                v28 += 7;
                v14 = v29++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_47;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedUInt64Add();
          }
LABEL_73:
          PBReaderRecallMark();
        }
        else
        {
          v58 = 0;
          v59 = 0;
          v60 = 0;
          while (1)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
              break;
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v14 = v59++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_99;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_99:
          PBRepeatedUInt64Add();
        }
        goto LABEL_100;
      case 4u:
        v18 = objc_alloc_init(IDSQRProtoAllocBindJoinInfo);
        objc_msgSend_addJoinedParticipants_((void *)a1, v34, (uint64_t)v18, v35);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindJoinInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_103;
        goto LABEL_56;
      case 5u:
        v18 = objc_alloc_init(IDSQRProtoUnAllocBindLeaveInfo);
        objc_msgSend_addLeftParticipants_((void *)a1, v36, (uint64_t)v18, v37);
        if (!PBReaderPlaceMark() || (IDSQRProtoUnAllocBindLeaveInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_103;
        goto LABEL_56;
      case 6u:
        v18 = objc_alloc_init(IDSQRProtoParticipantUpdateParticipantModeInfo);
        objc_msgSend_addUpdatedParticipants_((void *)a1, v38, (uint64_t)v18, v39);
        if (PBReaderPlaceMark()
          && (IDSQRProtoParticipantUpdateParticipantModeInfoReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_56:
          PBReaderRecallMark();

LABEL_100:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_103:

        return 0;
      case 0xFu:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 104) |= 1u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v42 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v42 = 0;
LABEL_77:
        *(_QWORD *)(a1 + 56) = v42;
        goto LABEL_100;
      case 0x10u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + 104) |= 2u;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                LODWORD(v48) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v48) = 0;
LABEL_81:
        *(_DWORD *)(a1 + 64) = v48;
        goto LABEL_100;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_100;
    }
  }
}

uint64_t IDSQRProtoPluginControlRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_41:
          v32 = 24;
          goto LABEL_46;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_37;
        case 3u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          break;
        case 4u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
LABEL_37:
          v31 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v19 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_43;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_45:
      v32 = 28;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void IDSAWDSubmitBlockAsync(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  int shouldSubmit;
  _QWORD block[4];
  id v15;

  v3 = a1;
  v4 = a2;
  v8 = v4;
  if (v3)
  {
    if (v4)
    {
      objc_msgSend_sharedInstance(IDSAWDLogging, v5, v6, v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      shouldSubmit = objc_msgSend__shouldSubmit(v9, v10, v11, v12);

      if (shouldSubmit)
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_19BA2E90C;
        block[3] = &unk_1E3C1FC70;
        v15 = v8;
        dispatch_async(v3, block);

      }
    }
  }

}

void sub_19BA2E90C(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A1AC8274]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

double IDSAWDLogFuzzTimeTo10sSecondsForHotShip(double a1)
{
  return ceil(a1 / 10.0) * 10.0;
}

double IDSAWDLogGenerateDataRate(int a1)
{
  return (double)(7 * a1 + 931);
}

BOOL IDSAWDLogShouldSubmitHotShipQuickRelayMetricWithDate(int a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  double v7;
  void *v8;
  id v9;
  const char *v10;
  double v11;
  void *v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  _BOOL8 v30;
  _BOOL4 v31;
  BOOL v32;

  v3 = (objc_class *)MEMORY[0x1E0C99D48];
  v4 = a2;
  v5 = [v3 alloc];
  v8 = (void *)objc_msgSend_initWithCalendarIdentifier_(v5, v6, *MEMORY[0x1E0C996C8], v7);
  v9 = objc_alloc(MEMORY[0x1E0C99E80]);
  v12 = (void *)objc_msgSend_initWithName_(v9, v10, (uint64_t)CFSTR("GMT"), v11);
  objc_msgSend_setTimeZone_(v8, v13, (uint64_t)v12, v14);
  objc_msgSend_components_fromDate_(v8, v15, 112, v16, v4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend_day(v17, v18, v19, v20);
  v25 = objc_msgSend_hour(v17, v22, v23, v24);
  v29 = objc_msgSend_minute(v17, v26, v27, v28);
  if (v25 == 23 && v29 > 54)
  {
    v30 = 0;
  }
  else
  {
    v31 = (v21 & 0x8000000000000001) == 1;
    if (a1)
      v31 = (v21 & 1) == 0;
    if (v25)
      v32 = 0;
    else
      v32 = v29 < 6;
    v30 = !v32 && v31;
  }

  return v30;
}

BOOL IDSAWDLogShouldSubmitHotShipQuickRelayMetric(int a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  _BOOL8 ShouldSubmitHotShipQuickRelayMetricWithDate;

  objc_msgSend_date(MEMORY[0x1E0C99D68], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  ShouldSubmitHotShipQuickRelayMetricWithDate = IDSAWDLogShouldSubmitHotShipQuickRelayMetricWithDate(a1, v5);

  return ShouldSubmitHotShipQuickRelayMetricWithDate;
}

void sub_19BA2ECB4()
{
  IDSAWDLogging *v0;
  void *v1;

  v0 = objc_alloc_init(IDSAWDLogging);
  v1 = (void *)qword_1ECDD4810;
  qword_1ECDD4810 = (uint64_t)v0;

}

uint64_t sub_19BA2EE5C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__submitAWDMetric_withContainer_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

void sub_19BA30A4C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendQUICRegisterRequest_withOptions_(v5, v6, (uint64_t)v8, v7, *(_QWORD *)(a1 + 48));

}

void sub_19BA30A94(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendQUICRegisterRequest_withOptions_(v5, v6, (uint64_t)v8, v7, *(_QWORD *)(a1 + 48));

}

void sub_19BA31748(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  double v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8 = (id)objc_msgSend_copy(*(void **)(a1 + 48), a2, a3, a4);
  objc_msgSend__sendQUICRegisterAckRequest_withOptions_(v4, v6, v5, v7, v8);

}

void sub_19BA32F7C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BA32E98);
  }
  _Unwind_Resume(a1);
}

void sub_19BA34FA4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  id WeakRetained;
  const char *v7;
  double v8;
  uint8_t v9[16];

  objc_msgSend_GFTGL(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "[U+1] now that remote device version is received, processing incoming RelayInterfaceInfo", v9, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__processCommandRelayInterfaceInfo_candidatePairToken_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40));

}

void sub_19BA35D14(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  const char *v5;
  double v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_sessionID(*(void **)(a1 + 40), a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setupNewQRLinkIfNecessary_(v4, v5, (uint64_t)v7, v6);

}

_QWORD *sub_19BA36448(_QWORD *result, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result[4] + 592);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = result;
    objc_msgSend_GFTGL(IDSFoundationLog, a2, a3, a4);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(v5[4] + 672);
      *(_DWORD *)buf = 138412290;
      v9 = v7;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "request new QR session for group %@.", buf, 0xCu);
    }

    return (id)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v5[4] + 592) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v5[4] + 592) + 8), *(_QWORD *)(v5[4] + 672), 0, 0);
  }
  return result;
}

void sub_19BA39EF0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  const char *v5;
  double v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_sessionID(*(void **)(a1 + 40), a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setupNewQRLinkIfNecessary_(v4, v5, (uint64_t)v7, v6);

}

BOOL IDSQRProtoTestResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19BA3AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BA3AE2C()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40B250 = result;
  return result;
}

uint64_t sub_19BA3AE58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19BA3AE68(uint64_t a1)
{

}

void sub_19BA3AE70(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  double v13;
  id v14;

  if (!objc_msgSend_response(a2, (const char *)a2, a3, a4))
  {
    objc_msgSend_getTapToRadarURL(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v5, v6, v7);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_defaultWorkspace((void *)qword_1EE40B250, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_openURL_configuration_completionHandler_(v11, v12, (uint64_t)v14, v13, 0, &unk_1E3C20A80);

  }
}

void sub_19BA3F474(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  double v5;
  void **v6;
  void *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  int v22;
  uint64_t v23;
  const char *v24;
  double v25;
  uint64_t v26;
  const char *v27;
  double v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (!qword_1EE40AD08)
  {
    v6 = (void **)MEMORY[0x1A1AC7380]("kSymptomDiagnosticReplySuccess", CFSTR("SymptomDiagnosticReporter"));
    if (v6)
      v7 = *v6;
    else
      v7 = 0;
    objc_storeStrong((id *)&qword_1EE40AD08, v7);
  }
  v8 = qword_1EE40AD00;
  if (!qword_1EE40AD00)
  {
    v9 = (void **)MEMORY[0x1A1AC7380]("kSymptomDiagnosticReplySessionID", CFSTR("SymptomDiagnosticReporter"));
    if (v9)
      v10 = *v9;
    else
      v10 = 0;
    objc_storeStrong((id *)&qword_1EE40AD00, v10);
    v8 = qword_1EE40AD00;
  }
  if (qword_1EE40AD08)
    v11 = v8 == 0;
  else
    v11 = 1;
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v31 = *MEMORY[0x1E0CB2938];
    v32[0] = CFSTR("Failed to weak link SymptomDiagnosticReporter symbol");
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)v32, v5, &v31, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(v13, v15, (uint64_t)CFSTR("IDSAutoBugCaptureErrorDomain"), v16, -100, v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v12 + 16))(v12, 0, v17);

  }
  else
  {
    objc_msgSend_objectForKeyedSubscript_(v4, v3, qword_1EE40AD08, v5);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_BOOLValue(v18, v19, v20, v21);

    v23 = *(_QWORD *)(a1 + 32);
    objc_msgSend_objectForKeyedSubscript_(v4, v24, qword_1EE40AD00, v25);
    v26 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)v26;
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v23 + 16))(v23, v26, 0);
    }
    else
    {
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v27, (uint64_t)CFSTR("IDSAutoBugCaptureErrorDomain"), v28, -300, v4);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v29, v30);

    }
  }

}

void sub_19BA3F694(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4;
  void *v5;

  if (objc_msgSend_isSupported(IDSAutoBugCapture, a3, a4, a1))
  {
    v4 = objc_alloc_init((Class)CUTWeakLinkClass());
    v5 = (void *)qword_1EE40AD78;
    qword_1EE40AD78 = (uint64_t)v4;

  }
}

id sub_19BA3F7F8(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  id v12;
  const char *v13;
  double v14;
  uint64_t v15;
  const char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  double v24;
  uint64_t v25;
  const char *v26;
  double v27;
  const char *v28;
  double v29;
  void *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _QWORD v38[5];

  v38[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v38[0] = CFSTR("t");
  v38[1] = CFSTR("sP");
  v38[2] = CFSTR("tP");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v5, (uint64_t)v38, v6, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend_mutableCopy(v3, v8, v9, v10);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v12 = v3;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v33, v14, v37, 16);
  if (v15)
  {
    v18 = v15;
    v19 = *(_QWORD *)v34;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v34 != v19)
          objc_enumerationMutation(v12);
        v21 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v20);
        objc_msgSend_objectForKeyedSubscript_(v12, v16, v21, v17, (_QWORD)v33);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend_containsObject_(v7, v23, v21, v24))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            sub_19BA3F7F8(v22, v4);
            v25 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_16;
            sub_19BA41104(v22, v4);
            v25 = objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_15;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          IDSLoggableDescriptionForHandleOnService(v22, v4);
          v25 = objc_claimAutoreleasedReturnValue();
LABEL_15:
          v30 = (void *)v25;
          objc_msgSend_setObject_forKeyedSubscript_(v11, v26, v25, v27, v21);

          goto LABEL_16;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          IDSLoggableDescriptionForTokenOnService(v22, v4);
          v25 = objc_claimAutoreleasedReturnValue();
          goto LABEL_15;
        }
        objc_msgSend_setObject_forKeyedSubscript_(v11, v28, (uint64_t)CFSTR("<redacted>"), v29, v21);
LABEL_16:

        ++v20;
      }
      while (v18 != v20);
      v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v16, (uint64_t)&v33, v17, v37, 16);
      v18 = v31;
    }
    while (v31);
  }

  return v11;
}

id sub_19BA3FC44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  id v12;
  NSObject *v13;

  v5 = a3;
  objc_msgSend_objectForKey_(a2, v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = v8;
  }
  else
  {
    if (v8)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v9, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        sub_19BAF6874((uint64_t)v5, a1, v13);

    }
    v12 = 0;
  }

  return v12;
}

id sub_19BA41104(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  double v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  double v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;

  v3 = a2;
  v7 = (void *)objc_msgSend_mutableCopy(a1, v4, v5, v6);
  if (objc_msgSend_count(v7, v8, v9, v10))
  {
    v13 = 0;
    while (1)
    {
      objc_msgSend_objectAtIndexedSubscript_(v7, v11, v13, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        sub_19BA41104(v14, v3);
        v15 = objc_claimAutoreleasedReturnValue();
        goto LABEL_7;
      }
LABEL_8:

      if (objc_msgSend_count(v7, v19, v20, v21) <= (unint64_t)++v13)
        goto LABEL_9;
    }
    sub_19BA3F7F8(v14, v3);
    v15 = objc_claimAutoreleasedReturnValue();
LABEL_7:
    v18 = (void *)v15;
    objc_msgSend_setObject_atIndexedSubscript_(v7, v16, v15, v17, v13);

    goto LABEL_8;
  }
LABEL_9:

  return v7;
}

BOOL IDSQRProtoH3EndToEndChannelUnRegisterE2EChannelUnRegisterReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL IDSQRProtoH3EndToEndChannelRegisterResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark()
      || (IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoDiagnosticIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if ((_DWORD)v17 == 3)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
              goto LABEL_47;
            v27 += 7;
            v14 = v28++ >= 9;
            if (v14)
            {
              LODWORD(v29) = 0;
              goto LABEL_49;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v29) = 0;
LABEL_49:
          *(_DWORD *)(a1 + 32) = v29;
        }
        else
        {
          if ((_DWORD)v17 != 15)
          {
LABEL_40:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0)
              goto LABEL_43;
            v20 += 7;
            v14 = v21++ >= 9;
            if (v14)
            {
              v22 = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_45:
          *(_QWORD *)(a1 + 8) = v22;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 2)
            goto LABEL_40;
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
        }
        v26 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id IDSIDAliasHashUUIDString(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  void *v9;
  __int128 v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  CC_LONG v19;
  __int128 v20;
  const char *v21;
  double v22;
  CC_SHA256_CTX v24;
  uuid_string_t out;
  unsigned __int8 md[16];
  __int128 v27;
  uuid_t uu;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  memset(uu, 170, sizeof(uu));
  v4 = objc_retainAutorelease(a1);
  v8 = (const char *)objc_msgSend_UTF8String(v4, v5, v6, v7);
  if (uuid_parse(v8, uu))
  {
    v9 = 0;
  }
  else
  {
    *(_QWORD *)&v24.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v24.wbuf[6] = v10;
    *(_OWORD *)&v24.wbuf[10] = v10;
    *(_OWORD *)&v24.hash[6] = v10;
    *(_OWORD *)&v24.wbuf[2] = v10;
    *(_OWORD *)v24.count = v10;
    *(_OWORD *)&v24.hash[2] = v10;
    *(_OWORD *)md = v10;
    v27 = v10;
    CC_SHA256_Init(&v24);
    CC_SHA256_Update(&v24, uu, 0x10u);
    v11 = objc_retainAutorelease(v3);
    v15 = (const void *)objc_msgSend_bytes(v11, v12, v13, v14);
    v19 = objc_msgSend_length(v11, v16, v17, v18);
    CC_SHA256_Update(&v24, v15, v19);
    CC_SHA256_Final(md, &v24);
    *(_QWORD *)&out[29] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)out = v20;
    *(_OWORD *)&out[16] = v20;
    uuid_unparse_upper(md, out);
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v21, (uint64_t)out, v22);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v9;
}

unint64_t IDSIDAliasHashUInt64(unint64_t a1, void *a2)
{
  __int128 v2;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  CC_LONG v12;
  CC_SHA256_CTX v14;
  unsigned __int8 md[16];
  __int128 v16;
  _QWORD data[2];

  data[1] = *MEMORY[0x1E0C80C00];
  data[0] = bswap64(a1);
  *(_QWORD *)&v14.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v14.wbuf[6] = v2;
  *(_OWORD *)&v14.wbuf[10] = v2;
  *(_OWORD *)&v14.hash[6] = v2;
  *(_OWORD *)&v14.wbuf[2] = v2;
  *(_OWORD *)v14.count = v2;
  *(_OWORD *)&v14.hash[2] = v2;
  *(_OWORD *)md = v2;
  v16 = v2;
  v3 = a2;
  CC_SHA256_Init(&v14);
  CC_SHA256_Update(&v14, data, 8u);
  v4 = objc_retainAutorelease(v3);
  v8 = (const void *)objc_msgSend_bytes(v4, v5, v6, v7, *(_OWORD *)v14.count, *(_OWORD *)&v14.hash[2], *(_OWORD *)&v14.hash[6], *(_OWORD *)&v14.wbuf[2], *(_OWORD *)&v14.wbuf[6], *(_OWORD *)&v14.wbuf[10], *(_QWORD *)&v14.wbuf[14]);
  v12 = objc_msgSend_length(v4, v9, v10, v11);

  CC_SHA256_Update(&v14, v8, v12);
  CC_SHA256_Final(md, &v14);
  return bswap64(*(unint64_t *)md);
}

id IDSIDAliasFixedSalt()
{
  if (qword_1EE40B260 != -1)
    dispatch_once(&qword_1EE40B260, &unk_1E3C1B870);
  return (id)qword_1EE40B268;
}

void sub_19BA42E00(double a1, uint64_t a2, const char *a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v5[0] = 0x807060504030201;
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], a3, (uint64_t)v5, a1, 8);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1EE40B268;
  qword_1EE40B268 = v3;

}

void sub_19BA43848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_19BA43938(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BA43988(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BA43B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t sub_19BA43BC8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4, double a5)
{
  uint64_t result;

  result = objc_msgSend_isEqual_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a5);
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_19BA43CF8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BA43DD0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BA43E80(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BA43E94(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  id v14;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  objc_msgSend_first(v5, v7, v8, v9);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_second(v5, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(uint64_t, id, void *, id))(v4 + 16))(v4, v14, v13, v6);
}

BOOL IDSQRProtoGetMaterialGetMaterialReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19BA4440C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend_queue(*(void **)(a1 + 32), v7, v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_19BA444D8;
  v15[3] = &unk_1E3C20B58;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v16 = v6;
  v17 = v11;
  v18 = v5;
  v19 = v12;
  v13 = v5;
  v14 = v6;
  dispatch_async(v10, v15);

}

void sub_19BA444D8(uint64_t *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  double v8;
  int isItemNotFoundError;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  double v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  double v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  id v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t)(a1 + 4);
  if (a1[4])
  {
    v6 = (void *)objc_opt_class();
    isItemNotFoundError = objc_msgSend_isItemNotFoundError_(v6, v7, a1[4], v8);
    objc_msgSend_accountIdentity(IDSFoundationLog, v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (isItemNotFoundError)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "Record not found -- Done", buf, 2u);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      sub_19BAF69D8(v5, v14, v30, v31, v32, v33, v34, v35);
    }

    v36 = *(void (**)(void))(a1[7] + 16);
LABEL_15:
    v36();
    return;
  }
  v15 = a1[6];
  objc_msgSend_accountIdentity(IDSFoundationLog, a2, a3, a4);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (!v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      sub_19BAF6998(v17);

    v36 = *(void (**)(void))(a1[7] + 16);
    goto LABEL_15;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v18 = a1[6];
    *(_DWORD *)buf = 138543362;
    v40 = v18;
    _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_INFO, "Found record {record: %{public}@}", buf, 0xCu);
  }

  v19 = (void *)a1[5];
  v20 = a1[6];
  v38 = 0;
  objc_msgSend__itemFromRecord_error_(v19, v21, v20, v22, &v38);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v38;
  objc_msgSend_accountIdentity(IDSFoundationLog, v25, v26, v27);
  v28 = objc_claimAutoreleasedReturnValue();
  v29 = v28;
  if (v23)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      v40 = (uint64_t)v23;
      _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_INFO, "Constructed item -- Done {item: %{public}@}", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v37 = a1[6];
    *(_DWORD *)buf = 138543618;
    v40 = v37;
    v41 = 2114;
    v42 = v24;
    _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "Failed to construct item -- Fail {record: %{public}@, itemError: %{public}@}", buf, 0x16u);
  }

  (*(void (**)(void))(a1[7] + 16))();
}

void sub_19BA44880(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v4 = a3;
  objc_msgSend_queue(*(void **)(a1 + 32), v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19BA44928;
  v11[3] = &unk_1E3C1C7E8;
  v9 = *(id *)(a1 + 40);
  v12 = v4;
  v13 = v9;
  v10 = v4;
  dispatch_async(v8, v11);

}

uint64_t sub_19BA44928(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BA44C18(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a4;
  objc_msgSend_queue(a1[4], v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19BA44CEC;
  v11[3] = &unk_1E3C20B58;
  v12 = v5;
  v13 = a1[5];
  v15 = a1[7];
  v14 = a1[6];
  v10 = v5;
  dispatch_async(v9, v11);

}

uint64_t sub_19BA44CEC(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 4;
  v6 = a1[4];
  objc_msgSend_accountIdentity(IDSFoundationLog, a2, a3, a4);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      sub_19BAF6A40((uint64_t)a1, v5, v8);

    v9 = *(uint64_t (**)(void))(a1[7] + 16);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v10 = a1[6];
      v12 = 138543362;
      v13 = v10;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_INFO, "Stored account identity item {item: %{public}@}", (uint8_t *)&v12, 0xCu);
    }

    v9 = *(uint64_t (**)(void))(a1[7] + 16);
  }
  return v9();
}

void sub_19BA45240(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t IDSQRProtoH3EndToEndChannelUnRegisterRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoParticipantStatusMapEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
                break;
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_39;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedUInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
              break;
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_55;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedUInt64Add();
        }
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_43;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_45:
        *(_DWORD *)(a1 + 32) = v20;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoH3EndToEndChannelRegisterIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo *v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_26;
      case 2u:
        v20 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo);
        objc_storeStrong((id *)(a1 + 16), v20);
        if (PBReaderPlaceMark()
          && (IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom((uint64_t)v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
LABEL_26:
        v21 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_38;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_37:
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_38;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_38;
    }
  }
}

BOOL sub_19BA47478(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == *(unsigned __int8 *)(a2 + 1))
  {
    if (v2 == 2)
    {
      if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
        return *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2);
    }
    else if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    {
      return *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2);
    }
  }
  return 0;
}

uint64_t sub_19BA476D0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30)
  {
    v10 = *(_DWORD *)(a1 + 12);
    v11 = *(_DWORD *)(a1 + 16);
    v12 = (*(_DWORD *)(a1 + 8) - v11) ^ __ROR4__(v11, 28);
    v13 = v11 + v10;
    v14 = (v10 - v12) ^ __ROR4__(v12, 26);
    v15 = v12 + v13;
    v16 = (v13 - v14) ^ __ROR4__(v14, 24);
    v17 = v14 + v15;
    v18 = (v15 - v16) ^ __ROR4__(v16, 16);
    v19 = v16 + v17;
    v20 = (v17 - v18) ^ __ROR4__(v18, 13);
    v21 = v18 + v19;
    v22 = v21 + *(_DWORD *)(a1 + 20);
    v23 = v21 + *(unsigned __int16 *)(a1 + 2) + v20;
    HIDWORD(v24) = v23;
    LODWORD(v24) = v23;
    v25 = ((v19 - v20) ^ __ROR4__(v20, 28) ^ v23) - (v24 >> 18);
    HIDWORD(v24) = v25;
    LODWORD(v24) = v25;
    v26 = (v25 ^ v22) - (v24 >> 21);
    HIDWORD(v24) = v26;
    LODWORD(v24) = v26;
    v27 = (v26 ^ v23) - (v24 >> 7);
    HIDWORD(v24) = v27;
    LODWORD(v24) = v27;
    v28 = (v27 ^ v25) - (v24 >> 16);
    HIDWORD(v24) = v28;
    LODWORD(v24) = v28;
    HIDWORD(v24) = (v28 ^ v26) - (v24 >> 28);
    LODWORD(v24) = HIDWORD(v24);
    v8 = (HIDWORD(v24) ^ v27) - (v24 >> 18);
    v9 = v8 ^ v28;
    goto LABEL_5;
  }
  if (v1 == 2)
  {
    v2 = *(unsigned __int16 *)(a1 + 2);
    v3 = -16383 * v2;
    v4 = 33552384 * v2 - ((-16383 * v2) >> 21) + ((-16383 * v2) ^ *(_DWORD *)(a1 + 4));
    HIDWORD(v5) = v4;
    LODWORD(v5) = v4;
    v6 = (v4 ^ v2) - (v5 >> 7);
    HIDWORD(v5) = v6;
    LODWORD(v5) = v6;
    v7 = (v6 ^ v3) - (v5 >> 16);
    HIDWORD(v5) = v7;
    LODWORD(v5) = v7;
    HIDWORD(v5) = (v7 ^ v4) - (v5 >> 28);
    LODWORD(v5) = HIDWORD(v5);
    v8 = (HIDWORD(v5) ^ v6) - (v5 >> 18);
    v9 = v8 ^ v7;
LABEL_5:
    HIDWORD(v29) = v8;
    LODWORD(v29) = v8;
    return v9 - (v29 >> 8);
  }
  return 0xFFFFFFFFLL;
}

uint64_t IDSAssignPushIdentityToMessage(void *a1)
{
  id v1;
  uint64_t v2;
  const char *v3;
  double v4;
  Class v5;
  const char *v6;
  uint64_t v7;
  double v8;
  __SecIdentity *v9;

  v1 = a1;
  v2 = 1;
  objc_msgSend_setWantsPushSignatures_(v1, v3, 1, v4);
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    v5 = NSClassFromString(CFSTR("APSConnection"));
    v9 = (__SecIdentity *)objc_msgSend_copyIdentity(v5, v6, v7, v8);
    v2 = IDSAssignIdentityValuesToMessage(v1, v9);
    if (v9)
      CFRelease(v9);
  }

  return v2;
}

uint64_t IDSAssignIdentityValuesToMessage(void *a1, __SecIdentity *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  SecKeyRef v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  void *v12;
  double v13;
  BOOL v14;
  uint64_t v15;

  v3 = a1;
  v7 = IDSCopyPrivateKeyFromIdentity(a2, v4, v5, v6);
  IDSCopyCertificateKeyFromIdentity(a2, v8, v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    objc_msgSend_setPushPrivateKey_(v3, v11, (uint64_t)v7, v13);
  if (v12)
    objc_msgSend_setPushCertificate_(v3, v11, (uint64_t)v12, v13);
  if (v7)
  {
    CFRelease(v7);
    v14 = v12 == 0;
  }
  else
  {
    v14 = 1;
  }
  v15 = !v14;

  return v15;
}

SecKeyRef IDSCopyPrivateKeyFromIdentity(__SecIdentity *a1, const char *a2, uint64_t a3, double a4)
{
  OSStatus v4;
  const char *v5;
  uint64_t v6;
  double v7;
  OSStatus v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  SecKeyRef privateKeyRef;
  uint8_t buf[4];
  OSStatus v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  privateKeyRef = 0;
  if (!a1)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], a2, a3, a4);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v10 = "  Missing push identity";
      v11 = v9;
      v12 = 2;
      goto LABEL_7;
    }
LABEL_8:

    return privateKeyRef;
  }
  v4 = SecIdentityCopyPrivateKey(a1, &privateKeyRef);
  if (v4)
  {
    v8 = v4;
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v5, v6, v7);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v8;
      v10 = "Failed to copy private key: %d";
      v11 = v9;
      v12 = 8;
LABEL_7:
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  return privateKeyRef;
}

CFDataRef IDSCopyCertificateKeyFromIdentity(__SecIdentity *a1, const char *a2, uint64_t a3, double a4)
{
  const char *v4;
  uint64_t v5;
  OSStatus v6;
  double v7;
  CFDataRef v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  SecCertificateRef certificateRef;
  uint8_t buf[4];
  OSStatus v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  certificateRef = 0;
  if (a1)
  {
    v6 = SecIdentityCopyCertificate(a1, &certificateRef);
    if (!v6 && certificateRef)
    {
      v8 = SecCertificateCopyData(certificateRef);
      goto LABEL_11;
    }
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v4, v5, v7);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v6;
      v10 = "Failed to copy certificate: %d";
      v11 = v9;
      v12 = 8;
      goto LABEL_9;
    }
  }
  else
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], a2, a3, a4);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v10 = "  Missing push identity";
      v11 = v9;
      v12 = 2;
LABEL_9:
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
  }

  v8 = 0;
LABEL_11:
  if (certificateRef)
  {
    CFRelease(certificateRef);
    certificateRef = 0;
  }
  return v8;
}

id sub_19BA47D04(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  const char *v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  double v17;

  v1 = a1;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_length(v1, v6, v7, v8);
  if (v9)
  {
    v12 = v9;
    v13 = 0;
    do
    {
      if (v12 - v13 >= 0x40)
      {
        v14 = 64;
        objc_msgSend_substringWithRange_(v1, v10, v13, v11, 64);
      }
      else
      {
        v14 = v12 - v13;
        objc_msgSend_substringWithRange_(v1, v10, v13, v11, v12 - v13);
      }
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v5, v16, (uint64_t)v15, v17);
      v13 += v14;

    }
    while (v13 < v12);
  }

  return v5;
}

uint8_t *sub_19BA47DB0(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  size_t v6;
  uint8_t *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const uint8_t *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  size_t v16;
  size_t v17;
  const char *v18;
  double v19;

  v1 = a1;
  v5 = objc_msgSend_length(v1, v2, v3, v4);
  if (v5 < 0)
    goto LABEL_6;
  v6 = 2 * v5;
  v7 = (uint8_t *)malloc_type_malloc(2 * v5, 0x5C404C1FuLL);
  if (v7)
  {
    v8 = objc_retainAutorelease(v1);
    v12 = (const uint8_t *)objc_msgSend_bytes(v8, v9, v10, v11);
    v16 = objc_msgSend_length(v8, v13, v14, v15);
    v17 = compression_encode_buffer(v7, v6, v12, v16, 0, COMPRESSION_ZLIB);
    if (v17)
    {
      objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v18, (uint64_t)v7, v19, v17, 1);
      v7 = (uint8_t *)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
    free(v7);
LABEL_6:
    v7 = 0;
  }
LABEL_7:

  return v7;
}

id IDSPEMFormatCertificates(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  double v9;
  id v10;
  const char *v11;
  double v12;
  void *v13;
  id v14;
  const char *v15;
  double v16;
  uint64_t v17;
  const char *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  double v25;
  void *v26;
  void *v27;
  const char *v28;
  double v29;
  const char *v30;
  double v31;
  const char *v32;
  double v33;
  void *v34;
  const char *v35;
  double v36;
  void *v37;
  void *v38;
  const char *v39;
  double v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    if (objc_msgSend_count(v1, v5, v6, v7) == 1)
    {
      objc_msgSend_objectAtIndexedSubscript_(v1, v8, 0, v9);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_base64EncodedStringWithOptions_(v10, v11, 0, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v14 = v1;
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v42, v16, v46, 16);
      if (v17)
      {
        v20 = v17;
        v21 = *(_QWORD *)v43;
        do
        {
          v22 = 0;
          do
          {
            if (*(_QWORD *)v43 != v21)
              objc_enumerationMutation(v14);
            v23 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v22);
            objc_msgSend_addObject_(v10, v18, (uint64_t)CFSTR("-----BEGIN CERTIFICATE-----"), v19, (_QWORD)v42);
            objc_msgSend_base64EncodedStringWithOptions_(v23, v24, 0, v25);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            sub_19BA47D04(v26);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObjectsFromArray_(v10, v28, (uint64_t)v27, v29);
            objc_msgSend_addObject_(v10, v30, (uint64_t)CFSTR("-----END CERTIFICATE-----"), v31);

            ++v22;
          }
          while (v20 != v22);
          v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v42, v19, v46, 16);
        }
        while (v20);
      }

      objc_msgSend_componentsJoinedByString_(v10, v32, (uint64_t)CFSTR("\n"), v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataUsingEncoding_(v34, v35, 4, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      sub_19BA47DB0(v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_base64EncodedStringWithOptions_(v38, v39, 0, v40);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id IDSPEMFormatCertificatesForPushHeader(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  double v6;
  unint64_t v7;
  __CFString *v8;
  void *v9;
  void *v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  __CFString *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  double v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;

  v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    v7 = 0;
    v8 = &stru_1E3C2E4E8;
    do
    {
      v9 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend_objectAtIndexedSubscript_(v1, v5, v7, v6);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_base64EncodedStringWithOptions_(v10, v11, 0, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v9, v14, (uint64_t)CFSTR("-----BEGIN CERTIFICATE-----\n%@\n-----END CERTIFICATE-----"), v15, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_stringByAppendingString_(v8, v17, (uint64_t)v16, v18);
      v19 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_count(v1, v20, v21, v22) - 1 > v7)
      {
        objc_msgSend_stringByAppendingString_(v19, v23, (uint64_t)CFSTR("\n\n"), v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v19 = (__CFString *)v25;
      }

      ++v7;
      v8 = v19;
    }
    while (objc_msgSend_count(v1, v26, v27, v28) > v7);
  }
  else
  {
    v19 = &stru_1E3C2E4E8;
  }
  objc_msgSend_dataUsingEncoding_(v19, v5, 4, v6);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  return v29;
}

id IDSParseDERCertificatesFromChain(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  const __CFData *v17;
  SecCertificateRef v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  double v26;
  id v27;
  void *v28;

  v1 = a1;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_length(v1, v6, v7, v8))
  {
    if (objc_msgSend_length(v1, v9, v10, v11))
    {
      v15 = 0;
      v16 = 0;
      do
      {
        objc_msgSend_subdataWithRange_(v1, v12, v16, v14, v15 - v16 + 1);
        v17 = (const __CFData *)objc_claimAutoreleasedReturnValue();
        v18 = SecCertificateCreateWithData(0, v17);
        if (v18)
        {
          CFRelease(v18);
          objc_msgSend_addObject_(v5, v19, (uint64_t)v17, v20);
          v16 = v15 + 1;
        }
        ++v15;

      }
      while (v15 < objc_msgSend_length(v1, v21, v22, v23));
    }
    if (objc_msgSend_length(v1, v12, v13, v14) && !objc_msgSend_count(v5, v24, v25, v26))
    {
      v28 = 0;
      goto LABEL_12;
    }
    v27 = (id)objc_msgSend_copy(v5, v24, v25, v26);
  }
  else
  {
    v27 = v5;
  }
  v28 = v27;
LABEL_12:

  return v28;
}

BOOL IDSQRProtoH3EndToEndChannelRegisterAckResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id _IDSIDProtocolVersionNumber()
{
  uint64_t v0;
  const char *v1;
  double v2;
  void *v3;

  if (os_variant_allows_internal_security_policies() && (v0 = IMGetDomainIntForKey(), v0 >= 1))
  {
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v1, v0, v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = &unk_1E3C86A00;
  }
  return v3;
}

void *_IDSInvitationProtocolVersionNumber()
{
  return &unk_1E3C86A18;
}

void *_IDSiMessageProtocolVersionNumber()
{
  return &unk_1E3C86A30;
}

void *_IDSAlloyProtocolVersionNumber()
{
  return &unk_1E3C86A30;
}

uint64_t _IDSSessionProtocolVersionNumber(double a1, uint64_t a2, const char *a3)
{
  return objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a3, _IDSSessionProtocolVersionNumber_firstVersionSupporting_guestModeCancel, a1);
}

void *_IDSAllocateProtocolVersionNumber()
{
  return &unk_1E3C86A48;
}

void *_IDSQuickRelayProtocolVersionNumber()
{
  return &unk_1E3C86A30;
}

void *_IDSPrivateDeviceDataVersionNumber()
{
  return &unk_1E3C86A30;
}

void *_IDSKeyTransparencyVersionNumber()
{
  return &unk_1E3C86A60;
}

void *_IDSKeyTransparencyOptInOutVersionNumber()
{
  return &unk_1E3C86A30;
}

void *_IDSECVersion()
{
  return &unk_1E3C86A30;
}

void *_IDSIdentityVersionNumber()
{
  return &unk_1E3C86A78;
}

void *_IDSEngramKeyElectorVersion()
{
  return &unk_1E3C86A90;
}

void *_IDSActivityMonitorVersionVersionNumber()
{
  return &unk_1E3C86A30;
}

void *_IDSGroupPhotoRefreshVersionNumber()
{
  return &unk_1E3C86A30;
}

void *_IDSIdentityGroupCryptoVersionNumber()
{
  return &unk_1E3C86A78;
}

void *_IDSSenderKeyMessageVersionNumber()
{
  return &unk_1E3C86A30;
}

void sub_19BA4BAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19BA4BAF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  double v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  double v22;
  void *v23;
  id v24;
  const char *v25;
  double v26;
  uint64_t v27;
  const char *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  const char *v35;
  double v36;
  const char *v37;
  void *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  id v48;
  _QWORD v49[4];
  id v50;
  id v51;
  _QWORD block[4];
  id v53;
  id v54;
  uint8_t buf[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    objc_msgSend_cloudKit(IDSFoundationLog, v6, v7, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_19BAF6E24();

    objc_msgSend_queue(*(void **)(a1 + 32), v11, v12, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = sub_19BA4BDF4;
    v49[3] = &unk_1E3C1C7E8;
    v51 = *(id *)(a1 + 40);
    v50 = v8;
    dispatch_async(v14, v49);

    v15 = v51;
  }
  else
  {
    v16 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v20 = objc_msgSend_count(v5, v17, v18, v19);
    v23 = (void *)objc_msgSend_initWithCapacity_(v16, v21, v20, v22);
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v24 = v5;
    v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v56, v26, v60, 16);
    if (v27)
    {
      v30 = v27;
      v31 = *(_QWORD *)v57;
      do
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v57 != v31)
            objc_enumerationMutation(v24);
          objc_msgSend_objectForKeyedSubscript_(v24, v28, *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i), v29);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = (void *)objc_opt_class();
          objc_msgSend__messageFromRecord_(v34, v35, (uint64_t)v33, v36);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (v38)
            objc_msgSend_addObject_(v23, v37, (uint64_t)v38, v39);

        }
        v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v28, (uint64_t)&v56, v29, v60, 16);
      }
      while (v30);
    }

    objc_msgSend_cloudKit(IDSFoundationLog, v40, v41, v42);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_INFO, "Fetched hard-coded messages", buf, 2u);
    }

    objc_msgSend_queue(*(void **)(a1 + 32), v44, v45, v46);
    v47 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19BA4BDD8;
    block[3] = &unk_1E3C1C7E8;
    v48 = *(id *)(a1 + 40);
    v53 = v23;
    v54 = v48;
    v15 = v23;
    dispatch_async(v47, block);

  }
}

uint64_t sub_19BA4BDD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0, 0, 0);
}

uint64_t sub_19BA4BDF4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_19BA4BFB4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  NSObject *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a4;
  objc_msgSend_cloudKit(IDSFoundationLog, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v7)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      sub_19BAF6E88();
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138477827;
    v23 = v6;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_INFO, "TransportRecordZone - Create - Done {createdZones: %{private}@}", buf, 0xCu);
  }

  objc_msgSend_queue(*(void **)(a1 + 32), v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_19BA4C110;
  v19[3] = &unk_1E3C1C7E8;
  v17 = *(id *)(a1 + 40);
  v20 = v7;
  v21 = v17;
  v18 = v7;
  dispatch_async(v16, v19);

}

uint64_t sub_19BA4C110(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BA4C2A0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  NSObject *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend_cloudKit(IDSFoundationLog, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v7)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      sub_19BAF6EE8();
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138477827;
    v23 = v6;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_INFO, "TransportRecordZone - Create - Done {deletedZones: %{private}@}", buf, 0xCu);
  }

  objc_msgSend_queue(*(void **)(a1 + 32), v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_19BA4C3FC;
  v19[3] = &unk_1E3C1C7E8;
  v17 = *(id *)(a1 + 40);
  v20 = v7;
  v21 = v17;
  v18 = v7;
  dispatch_async(v16, v19);

}

uint64_t sub_19BA4C3FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BA4C764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state,char a24)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19BA4C7A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_opt_class();
  objc_msgSend__messageFromRecord_(v4, v5, (uint64_t)v3, v6);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  v9 = v10;
  if (v10)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v7, (uint64_t)v10, v8);
    v9 = v10;
  }

}

void sub_19BA4C80C(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  double v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  const char *v33;
  double v34;
  void *v35;
  IDSCloudKitTransportLogChangeToken *v36;
  const char *v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  NSObject *v43;
  id v44;
  _QWORD v45[4];
  id v46;
  id v47;
  id v48;
  char v49;
  _QWORD block[4];
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a6;
  objc_msgSend_cloudKit(IDSFoundationLog, v11, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v10)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      sub_19BAF6F48();

    objc_msgSend_queue(a1[4], v16, v17, v18);
    v19 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19BA4CABC;
    block[3] = &unk_1E3C1C7E8;
    v52 = a1[6];
    v51 = v10;
    dispatch_async(v19, block);

    v20 = v52;
  }
  else
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (void *)MEMORY[0x1E0CB37E8];
      v25 = objc_msgSend_count(a1[5], v21, v22, v23);
      objc_msgSend_numberWithUnsignedInteger_(v24, v26, v25, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v54 = v28;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "!setState messages.count=%@", buf, 0xCu);

    }
    objc_msgSend_cloudKit(IDSFoundationLog, v29, v30, v31);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v33, a5, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v54 = v35;
      _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "!setState moreComing=%@", buf, 0xCu);

    }
    v36 = [IDSCloudKitTransportLogChangeToken alloc];
    v39 = (void *)objc_msgSend_initWithCKToken_(v36, v37, (uint64_t)v9, v38);
    objc_msgSend_queue(a1[4], v40, v41, v42);
    v43 = objc_claimAutoreleasedReturnValue();
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = sub_19BA4CAD8;
    v45[3] = &unk_1E3C20C98;
    v48 = a1[6];
    v44 = a1[5];
    v49 = a5;
    v46 = v44;
    v47 = v39;
    v20 = v39;
    dispatch_async(v43, v45);

  }
}

uint64_t sub_19BA4CABC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_19BA4CAD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), 0);
}

void sub_19BA4D258(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id sub_19BA4E278(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  id v13;
  const char *v14;
  double v15;
  void *v16;
  _QWORD v18[4];
  id v19;

  v6 = a1;
  v7 = objc_alloc(MEMORY[0x1E0C99D50]);
  v8 = objc_retainAutorelease(v6);
  v12 = objc_msgSend_bytes(v8, v9, v10, v11) + a3;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_19BA4E334;
  v18[3] = &unk_1E3C20CE8;
  v19 = v8;
  v13 = v8;
  v16 = (void *)objc_msgSend_initWithBytesNoCopy_length_deallocator_(v7, v14, v12, v15, a4, v18);

  return v16;
}

id sub_19BA4E334()
{
  return (id)objc_opt_self();
}

id sub_19BA528A8(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;

  sub_19BA57E80(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = (void *)MEMORY[0x1E0C99D20];
  NSHomeDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_arrayWithObjects_(v3, v5, (uint64_t)v4, v6, CFSTR("/Library/IdentityServices/incomingfiles/"), v1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathWithComponents_(v2, v8, (uint64_t)v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id sub_19BA53E38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  id v12;
  NSObject *v13;

  v5 = a3;
  objc_msgSend_objectForKey_(a2, v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = v8;
  }
  else
  {
    if (v8)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v9, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        sub_19BAF71EC((uint64_t)v5, a1, v13);

    }
    v12 = 0;
  }

  return v12;
}

void sub_19BA55474(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BA5536CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19BA57E28(uint64_t a1, double a2)
{
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSSocketPairMessage.m", (const char *)0xA9B, *(_QWORD *)(a1 + 32), a2);
}

id sub_19BA57E80(void *a1)
{
  id v1;
  id v2;
  const char *v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  double v12;
  void *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  void *v23;
  const char *v24;
  double v25;

  v1 = a1;
  v2 = objc_alloc(MEMORY[0x1E0CB3A28]);
  v5 = (void *)objc_msgSend_initWithUUIDString_(v2, v3, (uint64_t)v1, v4);
  objc_msgSend_UUIDString(v5, v6, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    objc_msgSend_lastPathComponent(v1, v9, v10, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v14, (uint64_t)CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_invertedSet(v16, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_componentsSeparatedByCharactersInSet_(v13, v21, (uint64_t)v20, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_componentsJoinedByString_(v23, v24, (uint64_t)&stru_1E3C2E4E8, v25);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v11;
}

id formattedBytes(unint64_t a1, const char *a2, double a3)
{
  if (a1 >> 5 > 0xC34)
  {
    if (a1 > 0x9C3DFF)
    {
      if (a1 >> 22 > 0x18)
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%4llu M"), a3, (a1 + 0x80000) >> 20);
      else
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%4.1f M"), (double)a1 * 0.000000953674316, (double)a1 * 0.000000953674316);
    }
    else
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%4llu K"), a3, (a1 + 512) >> 10);
    }
  }
  else
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%5llu "), a3, a1);
  }
  return (id)objc_claimAutoreleasedReturnValue();
}

id formattedSpeed(unint64_t a1, const char *a2, double a3)
{
  if (a1 >> 5 > 0xC34)
  {
    if (a1 > 0x98948B)
    {
      if (a1 > 0x5F5E0FF)
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%4llu M"), a3, (a1 + 500000) / 0xF4240);
      else
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%4.1f M"), (double)a1 / 1000000.0, (double)a1 / 1000000.0);
    }
    else
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%4llu k"), a3, (a1 + 500) / 0x3E8uLL);
    }
  }
  else
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%5llu "), a3, a1);
  }
  return (id)objc_claimAutoreleasedReturnValue();
}

_QWORD *sub_19BA580FC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = malloc_type_malloc(a1 + a2 + 40, 0xE977E99BuLL);
  if (result)
  {
    v5 = (uint64_t)result + a2 + 40;
    *result = v5;
    result[1] = v5 + a1;
    result[2] = v5;
    result[3] = v5;
    result[4] = a2;
  }
  return result;
}

void sub_19BA5814C(void *a1)
{
  if (a1)
    free(a1);
}

void *sub_19BA58158(uint64_t a1)
{
  void *result;
  const void *v3;
  size_t v4;
  size_t v5;

  result = *(void **)a1;
  v3 = *(const void **)(a1 + 16);
  if (result < v3)
  {
    v4 = *(_QWORD *)(a1 + 24) - (_QWORD)v3;
    result = memmove(result, v3, v4);
    v5 = *(_QWORD *)a1 + v4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
    *(_QWORD *)(a1 + 24) = v5;
  }
  return result;
}

uint64_t IDSQRProtoH3MessageReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  IDSQRProtoAllocBindRequest *v26;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      if (v13 == -1 || v13 >= *(_QWORD *)(a2 + *v5))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v13 + 1;
      v11 |= (unint64_t)(v14 & 0x7F) << v9;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      if (v10++ >= 9)
      {
        v11 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v6);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v6);
    if (*(_BYTE *)(a2 + *v6))
      v11 = 0;
LABEL_14:
    v17 = v11 & 7;
    if (v16 || (_DWORD)v17 == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    v19 = (const char *)(v11 >> 3);
    switch((v11 >> 3))
    {
      case 0u:
        v20 = 0;
        do
        {
          v21 = *v4;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
            goto LABEL_136;
          }
          v23 = v22 + 1;
          v24 = *(char *)(*(_QWORD *)(a2 + *v8) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          if ((v24 & 0x80000000) == 0)
            break;
        }
        while (v20++ <= 8);
        goto LABEL_136;
      case 1u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 1;
        v26 = objc_alloc_init(IDSQRProtoAllocBindRequest);
        objc_storeStrong((id *)(a1 + 8), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 2u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 2;
        v26 = objc_alloc_init(IDSQRProtoAllocBindResponse);
        objc_storeStrong((id *)(a1 + 16), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindResponseReadFrom(v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 3u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 3;
        v26 = objc_alloc_init(IDSQRProtoDiagnosticIndication);
        objc_storeStrong((id *)(a1 + 24), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoDiagnosticIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 4u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 4;
        v26 = objc_alloc_init(IDSQRProtoGoAwayIndication);
        objc_storeStrong((id *)(a1 + 56), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoGoAwayIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 5u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 5;
        v26 = objc_alloc_init(IDSQRProtoInfoRequest);
        objc_storeStrong((id *)(a1 + 64), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoInfoRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 6u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 6;
        v26 = objc_alloc_init(IDSQRProtoInfoResponse);
        objc_storeStrong((id *)(a1 + 72), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoInfoResponseReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 7u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 7;
        v26 = objc_alloc_init(IDSQRProtoParticipantUpdateRequest);
        objc_storeStrong((id *)(a1 + 96), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoParticipantUpdateRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 8u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 8;
        v26 = objc_alloc_init(IDSQRProtoParticipantUpdateResponse);
        objc_storeStrong((id *)(a1 + 104), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoParticipantUpdateResponseReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 9u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 9;
        v26 = objc_alloc_init(IDSQRProtoParticipantUpdateIndication);
        objc_storeStrong((id *)(a1 + 88), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoParticipantUpdateIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xAu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 10;
        v26 = objc_alloc_init(IDSQRProtoPluginControlRequest);
        objc_storeStrong((id *)(a1 + 120), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPluginControlRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0xBu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 11;
        v26 = objc_alloc_init(IDSQRProtoPluginControlResponse);
        objc_storeStrong((id *)(a1 + 128), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPluginControlResponseReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0xCu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 12;
        v26 = objc_alloc_init(IDSQRProtoPluginControlIndication);
        objc_storeStrong((id *)(a1 + 112), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoPluginControlIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xDu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 13;
        v26 = objc_alloc_init(IDSQRProtoErrorIndication);
        objc_storeStrong((id *)(a1 + 32), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoErrorIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0xEu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 14;
        v26 = objc_alloc_init(IDSQRProtoReallocateIndication);
        objc_storeStrong((id *)(a1 + 160), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoReallocateIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0xFu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 15;
        v26 = objc_alloc_init(IDSQRProtoSessionInfoRequest);
        objc_storeStrong((id *)(a1 + 216), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoSessionInfoRequestReadFrom((char *)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x10u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 16;
        v26 = objc_alloc_init(IDSQRProtoSessionInfoResponse);
        objc_storeStrong((id *)(a1 + 224), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoSessionInfoResponseReadFrom((char *)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x11u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 17;
        v26 = objc_alloc_init(IDSQRProtoSessionInfoIndication);
        objc_storeStrong((id *)(a1 + 208), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoSessionInfoIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x12u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 18;
        v26 = objc_alloc_init(IDSQRProtoStatsRequest);
        objc_storeStrong((id *)(a1 + 232), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoStatsRequestReadFrom((uint64_t)v26, a2))
          goto LABEL_140;
        goto LABEL_135;
      case 0x13u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 19;
        v26 = objc_alloc_init(IDSQRProtoStatsResponse);
        objc_storeStrong((id *)(a1 + 240), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoStatsResponseReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x14u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 20;
        v26 = objc_alloc_init(IDSQRProtoTestRequest);
        objc_storeStrong((id *)(a1 + 248), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoTestRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x15u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 21;
        v26 = objc_alloc_init(IDSQRProtoTestResponse);
        objc_storeStrong((id *)(a1 + 256), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoTestResponseReadFrom((uint64_t)v26, a2))
          goto LABEL_140;
        goto LABEL_135;
      case 0x16u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 22;
        v26 = objc_alloc_init(IDSQRProtoUnAllocBindRequest);
        objc_storeStrong((id *)(a1 + 264), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoUnAllocBindRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x17u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 23;
        v26 = objc_alloc_init(IDSQRProtoUnAllocBindResponse);
        objc_storeStrong((id *)(a1 + 272), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoUnAllocBindResponseReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x18u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 24;
        v26 = objc_alloc_init(IDSQRProtoPutMaterialRequest);
        objc_storeStrong((id *)(a1 + 144), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPutMaterialRequestReadFrom(v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x19u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 25;
        v26 = objc_alloc_init(IDSQRProtoPutMaterialResponse);
        objc_storeStrong((id *)(a1 + 152), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoPutMaterialResponseReadFrom((uint64_t)v26, a2))
          goto LABEL_140;
        goto LABEL_135;
      case 0x1Au:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 26;
        v26 = objc_alloc_init(IDSQRProtoPutMaterialIndication);
        objc_storeStrong((id *)(a1 + 136), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPutMaterialIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x1Bu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 27;
        v26 = objc_alloc_init(IDSQRProtoGetMaterialRequest);
        objc_storeStrong((id *)(a1 + 40), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoGetMaterialRequestReadFrom(v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x1Cu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 28;
        v26 = objc_alloc_init(IDSQRProtoGetMaterialResponse);
        objc_storeStrong((id *)(a1 + 48), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoGetMaterialResponseReadFrom(v26, a2) & 1) == 0)
          goto LABEL_140;
        goto LABEL_135;
      case 0x1Fu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 29;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterRequest);
        objc_storeStrong((id *)(a1 + 192), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoH3EndToEndChannelRegisterRequestReadFrom((uint64_t)v26, a2))
          goto LABEL_140;
        goto LABEL_135;
      case 0x20u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 30;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterResponse);
        objc_storeStrong((id *)(a1 + 200), v26);
        if (!PBReaderPlaceMark()
          || !IDSQRProtoH3EndToEndChannelRegisterResponseReadFrom((uint64_t)v26, a2))
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x21u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 31;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterIndication);
        objc_storeStrong((id *)(a1 + 184), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoH3EndToEndChannelRegisterIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x22u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 32;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterAckRequest);
        objc_storeStrong((id *)(a1 + 168), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoH3EndToEndChannelRegisterAckRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x23u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 33;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterAckResponse);
        objc_storeStrong((id *)(a1 + 176), v26);
        if (!PBReaderPlaceMark()
          || !IDSQRProtoH3EndToEndChannelRegisterAckResponseReadFrom((uint64_t)v26, a2))
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x24u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 34;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelUnRegisterRequest);
        objc_storeStrong((id *)(a1 + 288), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoH3EndToEndChannelUnRegisterRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x25u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 35;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelUnRegisterResponse);
        objc_storeStrong((id *)(a1 + 296), v26);
        if (!PBReaderPlaceMark()
          || !IDSQRProtoH3EndToEndChannelUnRegisterResponseReadFrom((uint64_t)v26, a2))
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x26u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(_BYTE *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 36;
        v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelUnRegisterIndication);
        objc_storeStrong((id *)(a1 + 280), v26);
        if (PBReaderPlaceMark()
          && (IDSQRProtoH3EndToEndChannelUnRegisterIndicationReadFrom((uint64_t)v26, a2) & 1) != 0)
        {
LABEL_135:
          PBReaderRecallMark();

LABEL_136:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_140:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_136;
    }
  }
}

void sub_19BA5E8E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  int v21;
  id v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend_serverBag(MEMORY[0x1E0D36AA8], v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v21 = 138412546;
    v22 = v6;
    v23 = 2112;
    v24 = v7;
    _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "Finished posting SOS {response: %@, postError: %@}", (uint8_t *)&v21, 0x16u);
  }

  objc_msgSend_rateLimiter(*(void **)(a1 + 32), v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_noteItem_(v15, v16, (uint64_t)CFSTR("SOSRateLimitItem"), v17);

  objc_msgSend_finishTasksAndInvalidate(*(void **)(a1 + 40), v18, v19, v20);
}

void sub_19BA5F4E0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

BOOL IDSQRProtoUnAllocBindUnAllocBindReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t IDSQRCHDataList_Create(uint64_t result, int a2)
{
  int **v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  int *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  int *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (int **)result;
    v4 = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    if (v4)
    {
      v5 = v4;
      v6 = malloc_type_malloc(112 * a2, 0x1010040F86BD4C7uLL);
      v5[1] = v6;
      if (v6)
      {
        *(_DWORD *)v5 = a2;
        *((_DWORD *)v5 + 1) = 0;
        *v3 = (int *)v5;
        OSLogHandleForTransportCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *v3;
          v9 = **v3;
          *(_DWORD *)buf = 134218240;
          v13 = v8;
          v14 = 1024;
          v15 = v9;
          _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList: created new list %p, size %d.", buf, 0x12u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLogTransport();
          if ((_DWORD)result)
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSQRCHDataList: created new list %p, size %d."));
            result = _IDSShouldLog();
            if ((_DWORD)result)
              return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRCHDataList: created new list %p, size %d."));
          }
        }
      }
      else
      {
        OSLogHandleForIDSCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList: failed to initialize.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRCHDataList: failed to initialize."));
        }
      }
    }
    else
    {
      OSLogHandleForTransportCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList_Init failed.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSQRCHDataList_Init failed."));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRCHDataList_Init failed."));
        }
      }
    }
  }
  return result;
}

void IDSQRCHDataList_Destroy(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint8_t buf[4];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *a1 = 0;
    v2 = (void *)a1[1];
    if (v2)
      free(v2);
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v5 = a1;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList: list %p destroyed.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSQRCHDataList: list %p destroyed."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRCHDataList: list %p destroyed."));
    }
    free(a1);
  }
}

uint64_t IDSQRCHDataList_Count(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 4);
  return result;
}

uint64_t IDSQRCHDataList_ItemAtIndex(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)(result + 4) <= a2)
      return 0;
    else
      return *(_QWORD *)(result + 8) + 112 * a2;
  }
  return result;
}

void *sub_19BA5FFF4(uint64_t a1, char a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  size_t v12;
  uint64_t v13;
  double v14;
  uint8_t *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  NSObject *v20;
  int v21;
  void *result;
  unint64_t v23;
  unsigned int v24;
  int v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  unsigned int v32;
  unsigned __int16 v33;
  uint8_t buf[4];
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 536);
  v5 = v4 >> 10;
  v6 = (v4 << 6) & 0x10000;
  if (*(_BYTE *)(a1 + 535))
    v6 = ((v5 & 1) << 16) | 0x200000;
  if (*(_BYTE *)(a1 + 533))
    v6 |= 0x40000u;
  if (*(_BYTE *)(a1 + 534))
    v7 = v6 | 0x80000;
  else
    v7 = v6;
  if (v7 <= 0x8000)
    v8 = v7;
  else
    v8 = v7 | 0x8000;
  if (v7 <= 0x8000)
    v9 = 2;
  else
    v9 = 4;
  MEMORY[0x1E0C80A78](a1);
  v11 = &buf[-v10];
  memset(&buf[-v10], 170, v12);
  v15 = &v11[v9];
  v16 = *(unsigned int *)(a1 + 460);
  if ((v16 - 1) > 0xB)
  {
    if ((_DWORD)v16)
    {
      OSLogHandleForTransportCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_DWORD *)(a1 + 460);
        *(_DWORD *)buf = 67109120;
        v35 = v21;
        _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "_prependExtendedChannelHeader failed due to invalid streamID count (%d).", buf, 8u);
      }

      result = (void *)os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = (void *)_IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_prependExtendedChannelHeader failed due to invalid streamID count (%d)."));
          result = (void *)_IDSShouldLog();
          if ((_DWORD)result)
            return (void *)_IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_prependExtendedChannelHeader failed due to invalid streamID count (%d)."));
        }
      }
      return result;
    }
  }
  else
  {
    *(_WORD *)v15 = bswap32(*(unsigned __int16 *)(a1 + 464)) >> 16;
    if (v16 < 2)
    {
      v8 |= 1u;
      v15 += 2;
    }
    else
    {
      v15[2] = v16 - 1;
      v15 += 3;
      v17 = (unsigned __int16 *)(a1 + 466);
      v18 = v16 - 1;
      do
      {
        v19 = *v17++;
        *(_WORD *)v15 = bswap32(v19) >> 16;
        v15 += 2;
        --v18;
      }
      while (v18);
      v8 |= 3u;
    }
  }
  v23 = *(_QWORD *)(a1 + 488);
  if (v23)
  {
    v8 |= 4u;
    *(_QWORD *)v15 = bswap64(v23);
    v15 += 8;
  }
  if (*(_BYTE *)(a1 + 496))
  {
    v8 |= 8u;
    *v15++ = *(_BYTE *)(a1 + 496);
  }
  if (*(_WORD *)(a1 + 498))
  {
    v8 |= 0x10u;
    *(_WORD *)v15 = __rev16(*(unsigned __int16 *)(a1 + 498));
    v15 += 2;
  }
  if (*(_BYTE *)(a1 + 500))
  {
    v8 |= 0x20u;
    *v15++ = *(_BYTE *)(a1 + 500);
  }
  if (*(_BYTE *)(a1 + 501))
    v24 = v8 | 0x40;
  else
    v24 = v8;
  if ((a2 & 1) == 0)
  {
    v24 |= 0x80u;
    *(_WORD *)v15 = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
    v15 += 2;
  }
  if (*(_BYTE *)(a1 + 502))
    v24 |= 0x100u;
  if ((*(_BYTE *)(a1 + 536) & 0x40) != 0)
  {
    v24 |= 0x200u;
    *(_WORD *)v15 = bswap32(*(unsigned __int16 *)(a1 + 504)) >> 16;
    v15 += 2;
  }
  if (*(_BYTE *)(a1 + 516))
    v24 |= 0x800u;
  v25 = *(_DWORD *)(a1 + 520);
  if ((v25 - 1) <= 3)
  {
    *(_WORD *)v15 = bswap32(*(unsigned __int16 *)(a1 + 524)) >> 16;
    LOWORD(v26) = (_WORD)v15 + 2;
    v27 = *(_DWORD *)(a1 + 520);
    if (v27 < 2)
    {
      v24 |= 0x2000u;
    }
    else
    {
      v26 = v15 + 3;
      v15[2] = v27 - 1;
      v24 |= 0x6000u;
      if (*(int *)(a1 + 520) >= 2)
      {
        v28 = 263;
        do
        {
          *v26++ = bswap32(*(unsigned __int16 *)(a1 + 2 * v28)) >> 16;
          v29 = v28 - 261;
          ++v28;
        }
        while (v29 < *(int *)(a1 + 520));
      }
    }
    LOWORD(v15) = (_WORD)v26;
    goto LABEL_61;
  }
  if (!v25)
  {
LABEL_61:
    v32 = bswap32(v24);
    *(_WORD *)v11 = HIWORD(v32);
    if (v7 > 0x8000)
      *((_WORD *)v11 + 1) = v32;
    v33 = (_WORD)v15 - (_WORD)v11;
    IDSLinkPacketBufferAddBufferStart((_QWORD *)a1, (const char *)-(unsigned __int16)((_WORD)v15 - (_WORD)v11), v13, v14);
    return memcpy(*(void **)a1, v11, v33);
  }
  OSLogHandleForTransportCategory();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_DWORD *)(a1 + 520);
    *(_DWORD *)buf = 67109120;
    v35 = v31;
    _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "_prependExtendedChannelHeader failed due to invalid relay linkID count (%d).", buf, 8u);
  }

  result = (void *)os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = (void *)_IDSShouldLogTransport();
    if ((_DWORD)result)
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_prependExtendedChannelHeader failed due to invalid relay linkID count (%d)."));
      result = (void *)_IDSShouldLog();
      if ((_DWORD)result)
        return (void *)_IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("_prependExtendedChannelHeader failed due to invalid relay linkID count (%d)."));
    }
  }
  return result;
}

void StunUtilGetMappedParticipantID(uint64_t a1, int a2, void *a3, int a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  double v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  double v20;
  const __CFDictionary *v21;
  const char *v22;
  double v23;
  void *v24;
  void *Value;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  __CFString *v32;
  NSObject *v33;
  int v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a1 + 96 * a2;
  v9 = *(_QWORD *)(v8 + 488);
  objc_msgSend_participantIDMap(v7, v10, v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v13, v9, v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      objc_msgSend_participantIDMap(v7, v17, v18, v20);
      v21 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v22, v9, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      Value = (void *)CFDictionaryGetValue(v21, v24);
      v29 = objc_msgSend_unsignedLongLongValue(Value, v26, v27, v28);

    }
    else
    {
      v29 = objc_msgSend_unsignedLongLongValue(0, v17, v18, v20);
    }

  }
  else
  {
    v29 = objc_msgSend_unsignedLongLongValue(0, v13, v14, v16);
  }

  if (v29)
    goto LABEL_8;
  if (a4)
  {
    OSLogHandleForTransportCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(char *)(a1 + 1216);
      *(_DWORD *)buf = 134218496;
      v36 = v9;
      v37 = 2048;
      v38 = 0;
      v39 = 1024;
      v40 = v31;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "Incoming: pid -> epid (%llu->%llu) on link %d.", buf, 0x1Cu);
    }

    if (!os_log_shim_legacy_logging_enabled())
      goto LABEL_8;
    if (!_IDSShouldLogTransport())
      goto LABEL_8;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Incoming: pid -> epid (%llu->%llu) on link %d."));
    if ((_IDSShouldLog() & 1) == 0)
      goto LABEL_8;
    v32 = CFSTR("Incoming: pid -> epid (%llu->%llu) on link %d.");
LABEL_22:
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v32);
    goto LABEL_8;
  }
  OSLogHandleForTransportCategory();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v34 = *(char *)(a1 + 1216);
    *(_DWORD *)buf = 134218496;
    v36 = v9;
    v37 = 2048;
    v38 = 0;
    v39 = 1024;
    v40 = v34;
    _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "Outgoing: pid -> epid (%llu->%llu) on link %d.", buf, 0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Outgoing: pid -> epid (%llu->%llu) on link %d."));
      if ((_IDSShouldLog() & 1) != 0)
      {
        v32 = CFSTR("Outgoing: pid -> epid (%llu->%llu) on link %d.");
        goto LABEL_22;
      }
    }
  }
LABEL_8:
  *(_QWORD *)(v8 + 488) = v29;

}

BOOL StunUtilPrepareOutgoingChannelData(__int16 a1, _QWORD **a2, uint64_t a3, uint64_t a4, double a5)
{
  int v5;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  NSObject *v18;
  uint8_t v20[16];

  v5 = a3;
  if ((int)a3 <= 0)
  {
    OSLogHandleForTransportCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "StunUtilPrepareOutgoingChannelData failed due to invalid parameter.", v20, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilPrepareOutgoingChannelData failed due to invalid parameter."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilPrepareOutgoingChannelData failed due to invalid parameter."));
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = a1 & 0xF0;
    v12 = 8 * (a3 - 1);
    v13 = 8 * a3;
    do
    {
      v14 = (uint64_t)a2[v9 / 8];
      *(_BYTE *)(v14 + 45) = 0;
      if (v11 == 96)
      {
        sub_19BA5FFF4(v14, v12 == v9);
        v14 = (uint64_t)a2[v9 / 8];
      }
      v10 += *(unsigned __int16 *)(v14 + 16);
      v9 += 8;
    }
    while (v13 != v9);
    v15 = (uint64_t)*a2;
    IDSLinkPacketBufferAddBufferStart(*a2, (const char *)0xFFFFFFFCLL, a3, a5);
    **(_WORD **)v15 = a1;
    *(_WORD *)(*(_QWORD *)v15 + 2) = bswap32(v10) >> 16;
    if ((unint64_t)(a4 - 3) < 2 && (v10 & 3) != 0)
    {
      v16 = a2[v5 - 1];
      v17 = 4 - (v10 & 3);
      memset((void *)(*v16 + v16[2]), 20, v17);
      v16[2] += v17;
    }
  }
  return v5 > 0;
}

uint64_t sub_19BA609AC(unsigned __int16 *a1, uint64_t a2, __int16 a3, _WORD *a4)
{
  NSObject *v4;
  __CFString *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t buf[16];

  if (a2 - (uint64_t)a1 <= 1)
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "_StunUtilProcessIncomingStats: packet is too short for stats-id.", buf, 2u);
    }

    if (!os_log_shim_legacy_logging_enabled())
      return 0xFFFFFFFFLL;
    if (!_IDSShouldLogTransport())
      return 0xFFFFFFFFLL;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_StunUtilProcessIncomingStats: packet is too short for stats-id."));
    if (!_IDSShouldLog())
      return 0xFFFFFFFFLL;
    v5 = CFSTR("_StunUtilProcessIncomingStats: packet is too short for stats-id.");
    goto LABEL_22;
  }
  a4[28] = bswap32(*a1) >> 16;
  if ((a3 & 0x400) == 0)
  {
    OSLogHandleForTransportCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "_StunUtilProcessIncomingStats: missing stats-payload.", v9, 2u);
    }

    if (!os_log_shim_legacy_logging_enabled())
      return 0xFFFFFFFFLL;
    if (!_IDSShouldLogTransport())
      return 0xFFFFFFFFLL;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_StunUtilProcessIncomingStats: missing stats-payload."));
    if (!_IDSShouldLog())
      return 0xFFFFFFFFLL;
    v5 = CFSTR("_StunUtilProcessIncomingStats: missing stats-payload.");
    goto LABEL_22;
  }
  if ((unint64_t)(a2 - (_QWORD)(a1 + 1)) > 9)
  {
    a4[29] = bswap32(a1[1]) >> 16;
    a4[30] = bswap32(a1[2]) >> 16;
    a4[31] = bswap32(a1[3]) >> 16;
    a4[32] = bswap32(a1[4]) >> 16;
    a4[33] = bswap32(a1[5]) >> 16;
    return 12;
  }
  OSLogHandleForTransportCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "_StunUtilProcessIncomingStats: packet is too short for stats-payload.", v10, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("_StunUtilProcessIncomingStats: packet is too short for stats-payload."));
      if (_IDSShouldLog())
      {
        v5 = CFSTR("_StunUtilProcessIncomingStats: packet is too short for stats-payload.");
LABEL_22:
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v5);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t StunUtilProcessIncomingChannelData(unsigned __int16 **a1, char a2, uint64_t a3, double a4)
{
  unsigned int v6;

  v6 = bswap32((*a1)[1]) >> 16;
  IDSLinkPacketBufferAddBufferStart(a1, (const char *)4, a3, a4);
  return StunUtilProcessIncomingChannelDataWithoutChannelHeader(a1, a2, v6);
}

uint64_t StunUtilProcessIncomingChannelDataWithoutChannelHeader(unsigned __int16 **a1, char a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v9;
  unsigned __int16 *v10;
  uint64_t result;
  NSObject *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  unsigned __int16 **v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  NSObject *v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned __int16 **v29;
  uint64_t v30;
  unsigned __int16 **v31;
  int v32;
  _WORD *v33;
  unsigned int v34;
  unint64_t v35;
  NSObject *v36;
  char v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  int64_t v41;
  unsigned __int16 **v42;
  unsigned __int16 **v43;
  int v44;
  unsigned int v45;
  unsigned __int16 **v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _WORD *v50;
  unsigned int v51;
  char v52;
  const char *v53;
  NSObject *v54;
  unsigned __int16 *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  unsigned __int16 *v68;
  NSObject *v69;
  int v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  unsigned int v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  _WORD *v78;
  uint8_t buf[4];
  _BYTE v80[14];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t)a1[2];
  v6 = v5;
  if (v5 != a3)
  {
    v6 = a3;
    if (v5 <= a3 || ((a3 + 4) & 0x1FFFC) != v5)
    {
      OSLogHandleForTransportCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = a1[2];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v80 = a3;
        *(_WORD *)&v80[4] = 2048;
        *(_QWORD *)&v80[6] = v10;
        _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: length mismatch (%u != %zd).", buf, 0x12u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: length mismatch (%u != %zd)."));
          result = _IDSShouldLog();
          if ((_DWORD)result)
          {
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: length mismatch (%u != %zd)."));
            return 0;
          }
        }
      }
      return result;
    }
    OSLogHandleForIDSCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = a1[2];
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v80 = v13;
      *(_WORD *)&v80[8] = 1024;
      *(_DWORD *)&v80[10] = a3;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEBUG, "remove padding, length (%zd->%u).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remove padding, length (%zd->%u)."));
    a1[2] = (unsigned __int16 *)v6;
  }
  if ((a2 & 1) == 0)
  {
    OSLogHandleForIDSCategory();
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      v55 = a1[2];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v80 = v55;
      _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEBUG, "processed regular channel data %zdB.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("processed regular channel data %zdB."));
    return 1;
  }
  bzero(a1 + 56, 0x300uLL);
  if (v6 < 1)
    return 1;
  v15 = 0;
  v16 = *a1;
  v17 = (unint64_t)*a1 + v6;
  v18 = (_WORD *)a1 + 233;
  v78 = (_WORD *)a1 + 263;
  v19 = 67109120;
  while (1)
  {
    if ((uint64_t)(v17 - (_QWORD)v16) <= 1)
    {
      OSLogHandleForTransportCategory();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v56, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if (!(_DWORD)result)
        return result;
      result = _IDSShouldLogTransport();
      if (!(_DWORD)result)
        return result;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag."));
      result = _IDSShouldLog();
      if (!(_DWORD)result)
        return result;
      goto LABEL_115;
    }
    if (v15 == 8)
    {
      OSLogHandleForTransportCategory();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v80 = 8;
        *(_WORD *)&v80[4] = 1024;
        *(_DWORD *)&v80[6] = 8;
        _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packetCounter = %d is greater than kLinkPacketBufferMaxCompoundSize: %d", buf, 0xEu);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packetCounter = %d is greater than kLinkPacketBufferMaxCompoundSize: %d"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
          {
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packetCounter = %d is greater than kLinkPacketBufferMaxCompoundSize: %d"));
            return 0;
          }
        }
      }
      return result;
    }
    v20 = &a1[12 * v15];
    *((_DWORD *)v20 + 134) = 0;
    v21 = v16 + 1;
    v22 = bswap32(*v16);
    v23 = HIWORD(v22);
    if ((v22 & 0x80000000) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 1)
      {
        OSLogHandleForTransportCategory();
        v77 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v77, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for additional flags.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for additional flags."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for additional flags."));
        return 0;
      }
      v24 = bswap32(v16[1]);
      v23 |= HIWORD(v24) << 16;
      v21 = v16 + 2;
      if (HIWORD(v24) >= 0x40u)
      {
        v25 = v24 >> 22;
        OSLogHandleForTransportCategory();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v80 = v25;
          _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: has unknown attribute: %d", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: has unknown attribute: %d"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: has unknown attribute: %d"));
          }
        }
      }
    }
    v27 = v20 + 67;
    if ((v23 & 1) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) > 1)
      {
        v28 = *v21++;
        *v27 |= 2u;
        v29 = &a1[12 * v15];
        *((_WORD *)v29 + 232) = bswap32(v28) >> 16;
        *((_DWORD *)v29 + 115) = 1;
        goto LABEL_36;
      }
      OSLogHandleForTransportCategory();
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v58, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if (!(_DWORD)result)
        return result;
      result = _IDSShouldLogTransport();
      if (!(_DWORD)result)
        return result;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag."));
      result = _IDSShouldLog();
      if (!(_DWORD)result)
        return result;
LABEL_115:
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag."));
      return 0;
    }
LABEL_36:
    if ((v23 & 2) == 0)
      goto LABEL_44;
    if ((uint64_t)(v17 - (_QWORD)v21) <= 0)
    {
      OSLogHandleForTransportCategory();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v59, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for secondary-stream-id count.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for secondary-stream-id count."));
          result = _IDSShouldLog();
          if ((_DWORD)result)
          {
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for secondary-stream-id count."));
            return 0;
          }
        }
      }
      return result;
    }
    v30 = *(char *)v21;
    v31 = &a1[12 * v15];
    v32 = *((_DWORD *)v31 + 115) + v30;
    *((_DWORD *)v31 + 115) = v32;
    if ((v30 & 0x80000000) != 0 || v32 >= 13)
      break;
    v21 = (unsigned __int16 *)((char *)v21 + 1);
    if ((uint64_t)(v17 - (_QWORD)v21) < (2 * v30))
    {
      OSLogHandleForTransportCategory();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v80 = v30;
        _os_log_impl(&dword_19B949000, v63, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for %d stream-id.", buf, 8u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if (!(_DWORD)result)
        return result;
      result = _IDSShouldLogTransport();
      if (!(_DWORD)result)
        return result;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for %d stream-id."));
      result = _IDSShouldLog();
      if (!(_DWORD)result)
        return result;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for %d stream-id."));
      return 0;
    }
    if ((_DWORD)v30)
    {
      v33 = v18;
      do
      {
        v34 = *v21++;
        *v33++ = bswap32(v34) >> 16;
        --v30;
      }
      while (v30);
    }
LABEL_44:
    if ((v23 & 4) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 7)
      {
        OSLogHandleForTransportCategory();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v61, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for participant-id.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for participant-id."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for participant-id."));
        return 0;
      }
      v35 = *(_QWORD *)v21;
      v21 += 4;
      *v27 |= 1u;
      a1[12 * v15 + 61] = (unsigned __int16 *)bswap64(v35);
      if (!v35)
      {
        OSLogHandleForTransportCategory();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: we received participant ID 0!!", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: we received participant ID 0!!"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: we received participant ID 0!!"));
          }
        }
      }
    }
    if ((v23 & 8) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 0)
      {
        OSLogHandleForTransportCategory();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for channel-priority.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for channel-priority."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for channel-priority."));
        return 0;
      }
      *v27 |= 8u;
      v37 = *(_BYTE *)v21;
      v21 = (unsigned __int16 *)((char *)v21 + 1);
      LOBYTE(a1[12 * v15 + 62]) = v37;
    }
    if ((v23 & 0x10) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 1)
      {
        OSLogHandleForTransportCategory();
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v64, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for probe-groupid.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for probe-groupid."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for probe-groupid."));
        return 0;
      }
      v38 = *v21++;
      *v27 |= 0x10u;
      WORD1(a1[12 * v15 + 62]) = bswap32(v38) >> 16;
    }
    if ((v23 & 0x20) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 0)
      {
        OSLogHandleForTransportCategory();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v65, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for lsb-version-counter.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for lsb-version-counter."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for lsb-version-counter."));
        return 0;
      }
      *v27 |= 0x20u;
      v39 = *(_BYTE *)v21;
      v21 = (unsigned __int16 *)((char *)v21 + 1);
      BYTE4(a1[12 * v15 + 62]) = v39;
    }
    if ((v23 & 0x40) != 0)
    {
      *v27 |= 4u;
      BYTE5(a1[12 * v15 + 62]) = 1;
    }
    if ((v23 & 0x80) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 1)
      {
        OSLogHandleForTransportCategory();
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v66, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for data length.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for data length."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for data length."));
        return 0;
      }
      v40 = *v21++;
      v41 = bswap32(v40) >> 16;
      v42 = &a1[12 * v15];
      *((_WORD *)v42 + 228) = v41;
      if ((uint64_t)(v17 - (_QWORD)v21) < v41)
      {
        v68 = (unsigned __int16 *)(v42 + 57);
        OSLogHandleForTransportCategory();
        v69 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          v70 = *v68;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v80 = v70;
          _os_log_impl(&dword_19B949000, v69, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for data (%dB).", buf, 8u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for data (%dB)."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for data (%dB)."));
        return 0;
      }
    }
    if ((v23 & 0x100) != 0)
    {
      *v27 |= 0x80u;
      BYTE6(a1[12 * v15 + 62]) = 1;
    }
    v43 = v20 + 56;
    if ((v23 & 0x200) != 0)
    {
      v44 = sub_19BA609AC(v21, v17, v23, (_WORD *)v20 + 224);
      if (v44 <= 0)
      {
        OSLogHandleForTransportCategory();
        v67 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v67, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: invalid incoming stats.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: invalid incoming stats."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: invalid incoming stats."));
        return 0;
      }
      *v27 |= 0x40u;
      v21 = (unsigned __int16 *)((char *)v21 + v44);
    }
    if ((v23 & 0x800) != 0)
    {
      *v27 |= 0x100u;
      BYTE4(a1[12 * v15 + 64]) = 1;
    }
    if ((v23 & 0x2000) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 1)
      {
        OSLogHandleForTransportCategory();
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for primary-relaylinkID-flag.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for primary-relaylinkID-flag."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for primary-relaylinkID-flag."));
        return 0;
      }
      v45 = *v21++;
      *v27 |= 0x800u;
      v46 = &a1[12 * v15];
      *((_WORD *)v46 + 262) = bswap32(v45) >> 16;
      *((_DWORD *)v46 + 130) = 1;
    }
    if ((v23 & 0x4000) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) <= 0)
      {
        OSLogHandleForTransportCategory();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for secondary-relaylinkID-flag.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for secondary-relaylinkID-flag."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for secondary-relaylinkID-flag."));
        return 0;
      }
      v47 = *(char *)v21;
      v48 = (unsigned int *)&a1[12 * v15 + 65];
      v49 = *v48 + v47;
      if (v49 >= 5)
      {
        OSLogHandleForTransportCategory();
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          v74 = *v48;
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v80 = v74;
          *(_WORD *)&v80[4] = 1024;
          *(_DWORD *)&v80[6] = v47;
          _os_log_impl(&dword_19B949000, v73, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: invalid secondary relayLinkid count (%d:%d)", buf, 0xEu);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: invalid secondary relayLinkid count (%d:%d)"));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: invalid secondary relayLinkid count (%d:%d)"));
        return 0;
      }
      v21 = (unsigned __int16 *)((char *)v21 + 1);
      if ((uint64_t)(v17 - (_QWORD)v21) < 2 * (int)v47)
      {
        OSLogHandleForTransportCategory();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v80 = v47;
          _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for %d secondary relayLinkID.", buf, 8u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if (!(_DWORD)result)
          return result;
        result = _IDSShouldLogTransport();
        if (!(_DWORD)result)
          return result;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for %d secondary relayLinkID."));
        result = _IDSShouldLog();
        if (!(_DWORD)result)
          return result;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for %d secondary relayLinkID."));
        return 0;
      }
      if ((int)v47 >= 1)
      {
        v50 = v78;
        do
        {
          v51 = *v21++;
          *v50++ = bswap32(v51) >> 16;
          --v47;
        }
        while (v47);
      }
      *v48 = v49;
      *v27 |= 0x1000u;
    }
    if ((v23 & 0x10000) != 0)
      *v27 |= 0x400u;
    if ((v23 & 0x20000) != 0)
    {
      if ((uint64_t)(v17 - (_QWORD)v21) > 0)
      {
        *v27 |= 0x2000u;
        v52 = *(_BYTE *)v21;
        v21 = (unsigned __int16 *)((char *)v21 + 1);
        BYTE4(a1[12 * v15 + 66]) = v52;
        goto LABEL_90;
      }
      OSLogHandleForTransportCategory();
      v75 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v75, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for session state counter LSB.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if (!(_DWORD)result)
        return result;
      result = _IDSShouldLogTransport();
      if (!(_DWORD)result)
        return result;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for session state counter LSB."));
      result = _IDSShouldLog();
      if (!(_DWORD)result)
        return result;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: packet is too short for session state counter LSB."));
      return 0;
    }
LABEL_90:
    if ((v23 & 0x40000) != 0)
    {
      *v27 |= 0x10000u;
      if ((v23 & 0x80000) != 0)
      {
LABEL_101:
        *v27 |= 0x20000u;
        if ((v23 & 0x200000) == 0)
          goto LABEL_94;
LABEL_93:
        HIBYTE(a1[12 * v15 + 66]) = 1;
        goto LABEL_94;
      }
    }
    else if ((v23 & 0x80000) != 0)
    {
      goto LABEL_101;
    }
    if ((v23 & 0x200000) != 0)
      goto LABEL_93;
LABEL_94:
    *v43 = v21;
    if (!v15)
    {
      v53 = (const char *)((_DWORD)v21 - *(_DWORD *)a1);
      if ((int)v53 >= 1)
        IDSLinkPacketBufferAddBufferStart(a1, v53, v14, *(double *)&v19);
    }
    if ((v23 & 0x80) == 0)
    {
      LOWORD(a1[12 * v15 + 57]) = v17 - (_WORD)v21;
      *((_DWORD *)a1 + 111) = v15 + 1;
      return 1;
    }
    v16 = (unsigned __int16 *)((char *)v21 + LOWORD(a1[12 * v15 + 57]));
    v18 += 48;
    v78 += 48;
    result = 1;
    ++v15;
    if ((unint64_t)v16 >= v17)
      return result;
  }
  OSLogHandleForTransportCategory();
  v60 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v80 = v30;
    _os_log_impl(&dword_19B949000, v60, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: invalid streamID count (%d).", buf, 8u);
  }

  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLogTransport();
    if ((_DWORD)result)
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessIncomingChannelData: invalid streamID count (%d)."));
      result = _IDSShouldLog();
      if ((_DWORD)result)
      {
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessIncomingChannelData: invalid streamID count (%d)."));
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_19BA62524(void *a1, _WORD *a2, int a3)
{
  id v5;
  void *v6;
  id v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unsigned int v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[8];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2 && a3 > 0)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v7 = v5;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v24, v9, v29, 16);
    LODWORD(v14) = (_DWORD)a2;
    if (v12)
    {
      v15 = (unint64_t)a2 + a3;
      v16 = *(_QWORD *)v25;
      v14 = a2;
      while (2)
      {
        v17 = 0;
        v18 = v14;
        do
        {
          if (*(_QWORD *)v25 != v16)
            objc_enumerationMutation(v7);
          v19 = objc_msgSend_unsignedShortValue(*(void **)(*((_QWORD *)&v24 + 1) + 8 * v17), v10, v11, v13, (_QWORD)v24);
          v14 = v18 + 1;
          if ((unint64_t)(v18 + 1) > v15)
          {
            OSLogHandleForTransportCategory();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "StunUtilWritePublishedStreams failed due to short buffer.", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilWritePublishedStreams failed due to short buffer."));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilWritePublishedStreams failed due to short buffer."));
              }
            }

            goto LABEL_25;
          }
          *v18 = __rev16(v19);
          ++v17;
          ++v18;
        }
        while (v12 != v17);
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v24, v13, v29, 16);
        if (v12)
          continue;
        break;
      }
    }

    v20 = ((_DWORD)v14 - (_DWORD)a2);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "StunUtilWritePublishedStreams failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilWritePublishedStreams failed due to invalid parameter."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilWritePublishedStreams failed due to invalid parameter."));
      }
    }
LABEL_25:
    v20 = 0xFFFFFFFFLL;
  }

  return v20;
}

uint64_t sub_19BA627FC(void *a1, _BYTE *a2, int a3)
{
  id v5;
  void *v6;
  const char *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  char v31;
  const char *v32;
  uint64_t v33;
  double v34;
  int v35;
  const char *v36;
  uint64_t v37;
  double v38;
  char v39;
  const char *v40;
  uint64_t v41;
  double v42;
  int v43;
  _QWORD *v44;
  char v45;
  void *v46;
  const char *v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  unsigned int v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v61;
  NSObject *v62;
  uint64_t i;
  id v64;
  id obj;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint8_t buf[16];
  _BYTE v75[128];
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!a2 || a3 <= 0)
  {
    OSLogHandleForTransportCategory();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("writeSubscribedStreams failed due to invalid parameter."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("writeSubscribedStreams failed due to invalid parameter."));
      }
    }
    v58 = 0xFFFFFFFFLL;
    goto LABEL_47;
  }
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v64 = v5;
  obj = v5;
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v70, v8, v76, 16);
  LODWORD(v13) = (_DWORD)a2;
  if (!v11)
  {
LABEL_45:

    v58 = ((_DWORD)v13 - (_DWORD)a2);
    goto LABEL_46;
  }
  v14 = 0;
  v15 = (unint64_t)&a2[a3];
  v16 = *(_QWORD *)v71;
  v17 = *(_QWORD *)v71;
  v13 = a2;
  for (i = *(_QWORD *)v71; ; v16 = i)
  {
    if (v17 != v16)
      objc_enumerationMutation(obj);
    v18 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v14);
    objc_msgSend_participantID(v18, v9, v10, v12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_unsignedLongLongValue(v19, v20, v21, v22);

    objc_msgSend_streamArray(v18, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_count(v27, v28, v29, v30);

    v35 = objc_msgSend_anyParticipant(v18, v32, v33, v34);
    v39 = objc_msgSend_anyStream(v18, v36, v37, v38);
    v43 = objc_msgSend_anyStream(v18, v40, v41, v42);
    v44 = v13 + 1;
    if ((unint64_t)(v13 + 1) > v15)
      break;
    v45 = v31 | 0x80;
    if (!v35)
      v45 = v31;
    if (v43)
      v45 |= 0x40u;
    *v13 = v45;
    if ((v35 & 1) != 0)
    {
      ++v13;
      if ((v39 & 1) != 0)
        goto LABEL_26;
LABEL_17:
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      objc_msgSend_streamArray(v18, v9, v10, 0.0);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v66, v48, v75, 16);
      if (v51)
      {
        v53 = *(_QWORD *)v67;
        while (2)
        {
          v54 = 0;
          v55 = v13;
          do
          {
            if (*(_QWORD *)v67 != v53)
              objc_enumerationMutation(v46);
            v56 = objc_msgSend_unsignedShortValue(*(void **)(*((_QWORD *)&v66 + 1) + 8 * v54), v49, v50, v52);
            v13 = v55 + 1;
            if ((unint64_t)(v55 + 1) > v15)
            {
              OSLogHandleForTransportCategory();
              v59 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_19B949000, v59, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed to write stream-id due to short buffer.", buf, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("writeSubscribedStreams failed to write stream-id due to short buffer."));
                  if (_IDSShouldLog())
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("writeSubscribedStreams failed to write stream-id due to short buffer."));
                }
              }

              goto LABEL_44;
            }
            *v55 = __rev16(v56);
            ++v54;
            ++v55;
          }
          while (v51 != v54);
          v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v49, (uint64_t)&v66, v52, v75, 16);
          if (v51)
            continue;
          break;
        }
      }

      goto LABEL_26;
    }
    v13 += 9;
    if ((unint64_t)v13 > v15)
    {
      OSLogHandleForTransportCategory();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed to write participant-id due to short buffer.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("writeSubscribedStreams failed to write participant-id due to short buffer."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("writeSubscribedStreams failed to write participant-id due to short buffer."));
        }
      }
      goto LABEL_44;
    }
    *v44 = bswap64(v23);
    if ((v39 & 1) == 0)
      goto LABEL_17;
LABEL_26:
    if (++v14 >= v11)
    {
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v70, v12, v76, 16);
      if (!v11)
        goto LABEL_45;
      v14 = 0;
    }
    v17 = *(_QWORD *)v71;
  }
  OSLogHandleForTransportCategory();
  v61 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v61, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed to write stream-count due to short buffer.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("writeSubscribedStreams failed to write stream-count due to short buffer."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("writeSubscribedStreams failed to write stream-count due to short buffer."));
    }
  }
LABEL_44:

  v58 = 0xFFFFFFFFLL;
LABEL_46:
  v6 = v64;
LABEL_47:

  return v58;
}

__CFArray *sub_19BA62DBC(unsigned __int8 *a1, const char *a2, double a3)
{
  int v3;
  unint64_t v4;
  __CFArray *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  __CFArray *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  double v17;
  void *v18;
  NSObject *v19;
  NSObject *v21;
  NSObject *v22;
  __CFArray *v23;
  NSObject *v24;
  uint8_t buf[4];
  __CFArray *v26;
  uint64_t v27;

  v3 = (int)a2;
  v27 = *MEMORY[0x1E0C80C00];
  if (!a1 || (a2 & 0x80000000) != 0)
  {
    OSLogHandleForTransportCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v26) = v3;
      _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "invalid peer published stream data length (%d).", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invalid peer published stream data length (%d)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invalid peer published stream data length (%d)."));
      }
    }
    return (__CFArray *)0;
  }
  else
  {
    if ((_DWORD)a2)
    {
      v4 = (unint64_t)a1;
      v5 = 0;
      v6 = (unint64_t)&a1[a2];
      while (~v4 + v6 > 7)
      {
        v7 = *(unsigned __int8 *)v4;
        if ((uint64_t)(v6 - (v4 + 9)) < 2 * *(unsigned __int8 *)v4)
        {
          OSLogHandleForTransportCategory();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "incomplete packet for stream-ids.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("incomplete packet for stream-ids."));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("incomplete packet for stream-ids."));
            }
          }
          goto LABEL_47;
        }
        v8 = *(_QWORD *)(v4 + 1);
        v9 = 0;
        for (v4 += 9; v7; --v7)
        {
          v11 = *(unsigned __int16 *)v4;
          v4 += 2;
          v10 = v11;
          if (!v9)
          {
            v9 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (!v9)
              continue;
          }
          v12 = bswap32(v10) >> 16;
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], a2, v12, a3);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
          {
            objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], a2, v12, a3);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            CFArrayAppendValue(v9, v14);

          }
        }
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, bswap64(v8), a3);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_streamWithParticipantID_streamArray_anyParticipant_anyStream_(IDSQRParticipantStreams, v16, (uint64_t)v15, v17, v9, 0, 0);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v5)
          v5 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        if (v5 && v18)
          CFArrayAppendValue(v5, v18);

        if (v4 >= v6)
          goto LABEL_28;
      }
      OSLogHandleForTransportCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "incomplete packet for participant-id.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("incomplete packet for participant-id."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("incomplete packet for participant-id."));
        }
      }
      v23 = 0;
    }
    else
    {
      v5 = 0;
LABEL_28:
      OSLogHandleForTransportCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v26 = v5;
        _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "processed peer-pub-stream: %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("processed peer-pub-stream: %@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("processed peer-pub-stream: %@."));
      }
LABEL_47:
      v5 = v5;
      v23 = v5;
    }

    return v23;
  }
}

__CFArray *sub_19BA632B8(unsigned __int16 *a1, const char *a2, double a3)
{
  int v3;
  int v4;
  unsigned __int16 *v5;
  __CFArray *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v14;
  uint8_t buf[4];
  __CFArray *v16;
  uint64_t v17;

  v3 = (int)a2;
  v17 = *MEMORY[0x1E0C80C00];
  if (!a1 || (a2 & 0x80000001) != 0)
  {
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v16) = v3;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "invalid peer subscribed stream data length (%d).", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invalid peer subscribed stream data length (%d)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invalid peer subscribed stream data length (%d)."));
      }
    }
    return (__CFArray *)0;
  }
  else
  {
    v4 = (unsigned __int16)(a2 >> 1);
    if ((unsigned __int16)(a2 >> 1))
    {
      v5 = a1;
      v6 = 0;
      do
      {
        v8 = *v5++;
        v7 = v8;
        if (v6 || (v6 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
        {
          v9 = bswap32(v7) >> 16;
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], a2, v9, a3);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          if (v10)
          {
            objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], a2, v9, a3);
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            CFArrayAppendValue(v6, v11);

          }
        }
        --v4;
      }
      while (v4);
    }
    else
    {
      v6 = 0;
    }
    OSLogHandleForTransportCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v6;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "processed peer-sub-stream: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("processed peer-sub-stream: %@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("processed peer-sub-stream: %@."));
    }
    return v6;
  }
}

__CFArray *StunUtilProcessParticipants(void *a1, uint64_t a2, char a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  id v9;
  const char *v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __CFArray *v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  double v27;
  void *v28;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!objc_msgSend_count(v5, v6, v7, v8))
  {
    if ((a3 & 1) == 0)
      goto LABEL_19;
    goto LABEL_17;
  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v9 = v5;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v31, v11, v35, 16);
  if (!v12)
  {

    if ((a3 & 1) == 0)
      goto LABEL_19;
LABEL_17:
    v17 = 0;
    goto LABEL_22;
  }
  v16 = v12;
  v30 = a2;
  v17 = 0;
  v18 = *(_QWORD *)v32;
  do
  {
    for (i = 0; i != v16; ++i)
    {
      if (*(_QWORD *)v32 != v18)
        objc_enumerationMutation(v9);
      v20 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
      if (!v17)
      {
        v17 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        if (!v17)
          continue;
      }
      objc_msgSend_participantID(v20, v13, v14, v15);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        objc_msgSend_participantID(v20, v13, v14, v15);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        CFArrayAppendValue(v17, v22);

      }
    }
    v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v13, (uint64_t)&v31, v15, v35, 16);
  }
  while (v16);

  a2 = v30;
  if ((a3 & 1) == 0)
  {
    if (v17)
    {
LABEL_20:
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v23, a2, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (v25)
      {
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v26, a2, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        CFArrayAppendValue(v17, v28);

      }
      goto LABEL_22;
    }
LABEL_19:
    v17 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (!v17)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_22:

  return v17;
}

__CFDictionary *StunUtilProcessStreamInfo(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  const char *v6;
  double v7;
  uint64_t v8;
  double v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  __CFDictionary *v13;
  double v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  double v18;
  void *v19;
  const char *v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  uint64_t v27;
  unsigned int v28;
  unsigned __int16 __b[736];
  uint8_t buf[4];
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  memset(__b, 170, sizeof(__b));
  v28 = -1431655766;
  if (v5 && (bzero(buf, 0x5D0uLL), (objc_msgSend_getAttribute_attribute_(v5, v6, 65531, v7, buf) & 1) != 0))
  {
    v8 = v32;
    if (StunUtilHasValidBinaryDataAttr(v5, 60933, __b, (int *)&v28))
    {
      sub_19BA632B8(__b, (const char *)v28, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      OSLogHandleForTransportCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v31 = v28;
        _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "receive peer-sub-stream, length: %dB.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v27 = v28;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive peer-sub-stream, length: %dB."));
          if (_IDSShouldLog())
          {
            v27 = v28;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive peer-sub-stream, length: %dB."));
          }
        }
      }
    }
    else
    {
      v10 = 0;
    }
    if (StunUtilHasValidBinaryDataAttr(v5, 60932, __b, (int *)&v28))
    {
      sub_19BA62DBC((unsigned __int8 *)__b, (const char *)v28, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      OSLogHandleForTransportCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v31 = v28;
        _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "receive peer-pub-stream, length: %dB.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v27 = v28;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive peer-pub-stream, length: %dB."));
          if (_IDSShouldLog())
          {
            v27 = v28;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive peer-pub-stream, length: %dB."));
          }
        }
      }
    }
    else
    {
      v15 = 0;
    }
    v13 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v17, v8, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
      CFDictionarySetValue(v13, CFSTR("stream-info-generation-counter"), v19);

    if (v10)
      CFDictionarySetValue(v13, CFSTR("stream-info-peer-subscribed-streams"), v10);
    if (v15)
      CFDictionarySetValue(v13, CFSTR("stream-info-peer-published-streams"), v15);
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v20, a2, v21, v27);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
      CFDictionarySetValue(v13, CFSTR("gl-option-linkid"), v22);

    if ((int)a3 >= 1)
    {
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v23, a3, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25)
        CFDictionarySetValue(v13, CFSTR("gl-option-sessioninfo-link-id-to-query"), v25);

    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "process streamInfo failed due to invalid generation-counter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process streamInfo failed due to invalid generation-counter."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process streamInfo failed due to invalid generation-counter."));
      }
    }
    v13 = 0;
  }

  return v13;
}

uint64_t StunUtilHasValidUInt32Attr(uint64_t result, uint64_t a2, _DWORD *a3)
{
  void *v5;
  const char *v6;
  double v7;
  _BYTE v8[8];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if ((_DWORD)result)
        *a3 = v9;
    }
  }
  return result;
}

uint64_t StunUtilHasValidBinaryDataAttr(void *a1, uint64_t a2, void *a3, int *a4)
{
  const char *v8;
  double v9;
  uint64_t Attribute_attribute;
  int v11;
  char v13[8];
  int v14;
  _BYTE v15[1484];

  *(_QWORD *)&v15[1476] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  bzero(v13, 0x5D0uLL);
  Attribute_attribute = objc_msgSend_getAttribute_attribute_(a1, v8, a2, v9, v13);
  if ((_DWORD)Attribute_attribute)
  {
    if (a3)
    {
      if (a4)
      {
        v11 = v14;
        if (v14 <= 1472)
        {
          memcpy(a3, v15, v14);
          *a4 = v11;
        }
      }
    }
  }
  return Attribute_attribute;
}

__CFArray *sub_19BA63D5C(unint64_t *a1, const char *a2, double a3)
{
  int v3;
  unint64_t v4;
  NSObject *v5;
  __CFArray *v6;
  unint64_t *v8;
  __CFArray *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  __CFArray *v31;
  uint64_t v32;

  v3 = (int)a2;
  v32 = *MEMORY[0x1E0C80C00];
  if (!a1 || (a2 & 0x80000000) != 0 || (v4 = a2, (a2 & 7) != 0))
  {
    OSLogHandleForTransportCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v29) = v3;
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "invalid participantID data length (%d).", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invalid participantID data length (%d)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invalid participantID data length (%d)."));
      }
    }
    v6 = 0;
  }
  else
  {
    if ((_DWORD)a2)
    {
      v8 = a1;
      v9 = 0;
      v10 = (unint64_t)a1 + a2;
      while (v4 > 7)
      {
        v12 = *v8++;
        v11 = v12;
        if (v9 || (v9 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
        {
          v13 = bswap64(v11);
          objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, v13, a3);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          if (v14)
          {
            objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, v13, a3);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            CFArrayAppendValue(v9, v15);

          }
        }
        v4 -= 8;
        if ((unint64_t)v8 >= v10)
          goto LABEL_22;
      }
      OSLogHandleForTransportCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantIDs: incomplete packet for participantID.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessParticipantIDs: incomplete packet for participantID."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessParticipantIDs: incomplete packet for participantID."));
        }
      }
      v6 = 0;
    }
    else
    {
      v9 = 0;
LABEL_22:
      OSLogHandleForTransportCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218242;
        v29 = objc_msgSend_count(v9, v17, v18, v19);
        v30 = 2112;
        v31 = v9;
        _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantIDs: received %lu participants: %@.", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v27 = objc_msgSend_count(v9, v20, v21, v22);
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessParticipantIDs: received %lu participants: %@."));
          if (_IDSShouldLog())
          {
            objc_msgSend_count(v9, v23, v24, v25, v27, v9);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessParticipantIDs: received %lu participants: %@."));
          }
        }
      }
      v9 = v9;
      v6 = v9;
    }

  }
  return v6;
}

id sub_19BA64124(void *a1, uint64_t a2)
{
  id v3;
  double v4;
  void *v5;
  NSObject *v6;
  unsigned int v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  void *v12;
  unint64_t __b[185];

  __b[184] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  memset(__b, 170, 0x5C0uLL);
  v8 = -1431655766;
  if (StunUtilHasValidBinaryDataAttr(v3, a2, __b, (int *)&v8))
  {
    sub_19BA63D5C(__b, (const char *)v8, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      v10 = a2;
      v11 = 2112;
      v12 = v5;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "StunUtilProcessActiveOrLightweightParticipants: type: 0x%lx, %@", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessActiveOrLightweightParticipants: type: 0x%lx, %@"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessActiveOrLightweightParticipants: type: 0x%lx, %@"));
      }
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id StunUtilProcessActiveParticipants(void *a1)
{
  return sub_19BA64124(a1, 60928);
}

id StunUtilProcessLightweightParticipants(void *a1)
{
  return sub_19BA64124(a1, 60936);
}

__CFDictionary *StunUtilProcessParticipantUpdate(void *a1, int a2, uint64_t a3)
{
  id v5;
  const char *v6;
  __CFDictionary *v7;
  double v8;
  const char *v9;
  double v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  int Attribute_attribute;
  unsigned __int16 v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  NSObject *v25;
  id v26;
  NSObject *v27;
  __CFDictionary *v28;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  double v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t __b[184];
  uint8_t buf[4];
  unsigned int v41;
  _DWORD v42[372];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  memset(__b, 170, sizeof(__b));
  v38 = -1431655766;
  v7 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (v5 && (bzero(buf, 0x5D0uLL), objc_msgSend_getAttribute_attribute_(v5, v9, 65489, v10, buf)))
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v6, v42[0], v8);
  }
  else
  {
    if (a2 == 401 || !a2)
    {
      OSLogHandleForTransportCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "process participantUpdate failed due to invalid session state counter.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process participantUpdate failed due to invalid session state counter."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process participantUpdate failed due to invalid session state counter."));
        }
      }
      goto LABEL_50;
    }
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v6, 0, v8);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    CFDictionarySetValue(v7, CFSTR("ids-stun-attribute-session-state-counter"), v12);

  if (v5)
  {
    bzero(buf, 0x5D0uLL);
    Attribute_attribute = objc_msgSend_getAttribute_attribute_(v5, v15, 65518, v16, buf);
    if (Attribute_attribute)
      v18 = v42[0];
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
    LOBYTE(Attribute_attribute) = 0;
  }
  if ((a3 & 0xFFFFFFFFFFFFFFEFLL) == 0xFE7 && (Attribute_attribute & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "process participantUpdate failed due to invalid operation flags.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process participantUpdate failed due to invalid operation flags."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process participantUpdate failed due to invalid operation flags."));
      }
    }
LABEL_50:
    v28 = 0;
    goto LABEL_51;
  }
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v13, v18, v14);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
    CFDictionarySetValue(v7, CFSTR("ids-stun-attribute-session-state-type"), v20);

  if ((StunUtilHasValidBinaryDataAttr(v5, 60928, __b, (int *)&v38) & 1) != 0)
  {
    sub_19BA63D5C(__b, (const char *)v38, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForTransportCategory();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v41 = v38;
      _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, "receive participantIDs, length: %dB.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v36 = v38;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive participantIDs, length: %dB."));
        if (_IDSShouldLog())
        {
          v36 = v38;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive participantIDs, length: %dB."));
        }
      }
    }
    v26 = v24;
    if (v26)
    {
      CFDictionarySetValue(v7, CFSTR("ids-stun-attribute-enc-ParticipantIDs"), v26);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_19BAF7528();
    }

  }
  else if (a3 == 3831 || a2 != 401 && a3 == 4087 || (v26 = 0, a3 == 4071) && v18 <= 2u)
  {
    OSLogHandleForTransportCategory();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "process participantUpdate failed due to invalid participantIDs.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("process participantUpdate failed due to invalid participantIDs."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("process participantUpdate failed due to invalid participantIDs."));
      }
    }
    goto LABEL_50;
  }
  if (v5 && objc_msgSend_hasAttribute_(v5, v21, 65490, v23))
  {
    OSLogHandleForTransportCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantUpdate: packetTruncated", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessParticipantUpdate: packetTruncated"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessParticipantUpdate: packetTruncated"));
      }
    }
    CFDictionarySetValue(v7, CFSTR("ids-stun-attribute-stun-truncated"), MEMORY[0x1E0C9AAB0]);
  }
  if (a3 > 4070)
  {
    if (a3 == 4087)
    {
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v21, 4, v23, v36);
      goto LABEL_76;
    }
    if (a3 == 4071)
    {
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v21, 3, v23, v36);
      goto LABEL_76;
    }
LABEL_73:
    objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23, v36);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      sub_19BAF74B8(a3, v31);

    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v32, 0, v33, v37);
    goto LABEL_76;
  }
  if (a3 == 3815)
  {
    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v21, 1, v23, v36);
    goto LABEL_76;
  }
  if (a3 != 3831)
    goto LABEL_73;
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v21, 5, v23, v36);
LABEL_76:
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (v34)
  {
    CFDictionarySetValue(v7, CFSTR("ids-stun-message-type"), v34);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF6528();
  }

  OSLogHandleForTransportCategory();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v41 = v18;
    LOWORD(v42[0]) = 2048;
    *(_QWORD *)((char *)v42 + 2) = a3;
    _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantUpdate: operationFlags: %u, messageSTUNType: 0X%lx", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilProcessParticipantUpdate: operationFlags: %u, messageSTUNType: 0X%lx"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilProcessParticipantUpdate: operationFlags: %u, messageSTUNType: 0X%lx"));
    }
  }
  v28 = v7;

LABEL_51:
  return v28;
}

uint64_t StunUtilHasValidUInt16Attr(uint64_t result, uint64_t a2, _WORD *a3)
{
  void *v5;
  const char *v6;
  double v7;
  _BYTE v8[8];
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if ((_DWORD)result)
        *a3 = v9;
    }
  }
  return result;
}

void *StunUtilHasValidBooleanAttr(void *result, const char *a2, double a3)
{
  if (result)
    return (void *)objc_msgSend_hasAttribute_(result, a2, (uint64_t)a2, a3);
  return result;
}

uint64_t sub_19BA64B98(void *a1, _QWORD *a2, int a3)
{
  id v5;
  void *v6;
  id v7;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[8];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2 && a3 > 0)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v7 = v5;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v23, v9, v28, 16);
    LODWORD(v14) = (_DWORD)a2;
    if (v12)
    {
      v15 = (unint64_t)a2 + a3;
      v16 = *(_QWORD *)v24;
      v14 = a2;
      while (2)
      {
        v17 = 0;
        v18 = v14;
        do
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v7);
          v14 = v18 + 1;
          if ((unint64_t)(v18 + 1) > v15)
          {
            OSLogHandleForTransportCategory();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "StunUtilWriteParticipantIDs failed to write participant-id due to short buffer.", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilWriteParticipantIDs failed to write participant-id due to short buffer."));
                if (_IDSShouldLog())
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilWriteParticipantIDs failed to write participant-id due to short buffer."));
              }
            }

            goto LABEL_25;
          }
          *v18++ = bswap64(objc_msgSend_unsignedLongLongValue(*(void **)(*((_QWORD *)&v23 + 1) + 8 * v17++), v10, v11, v13, (_QWORD)v23));
        }
        while (v12 != v17);
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v23, v13, v28, 16);
        if (v12)
          continue;
        break;
      }
    }

    v19 = ((_DWORD)v14 - (_DWORD)a2);
  }
  else
  {
    OSLogHandleForTransportCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "StunUtilWriteParticipantIDs failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilWriteParticipantIDs failed due to invalid parameter."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilWriteParticipantIDs failed due to invalid parameter."));
      }
    }
LABEL_25:
    v19 = 0xFFFFFFFFLL;
  }

  return v19;
}

void sub_19BA64E70(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  __CFDictionary *v8;
  const char *v9;
  int v10;
  double v11;
  void *v12;
  int v13;
  const char *v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  _WORD __b[736];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  memset(__b, 170, sizeof(__b));
  v10 = sub_19BA62524(a1, __b, 1472);
  if (v10 >= 1)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v9, (uint64_t)__b, v11, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
      CFDictionarySetValue(v8, CFSTR("ids-stun-attribute-enc-pub-streams"), v12);

  }
  v13 = sub_19BA627FC(v7, __b, 1472);
  if (v13 < 1)
  {
    if ((int)a3 <= 0)
    {
      if (v10 < 1)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v14, (uint64_t)__b, v15, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
      CFDictionarySetValue(v8, CFSTR("ids-stun-attribute-enc-sub-streams"), v16);

    if ((int)a3 < 1)
      goto LABEL_14;
  }
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v14, a3, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    CFDictionarySetValue(v8, CFSTR("ids-stun-attribute-max-concurrent-streams"), v17);

LABEL_14:
  v19 = 1414938954;
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v14, (uint64_t)&v19, v15, 4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18)
    CFDictionarySetValue(v8, CFSTR("ids-stun-attribvute-enc-marker"), v18);

LABEL_17:
}

void sub_19BA65050(void *a1, void *a2)
{
  __CFDictionary *v3;
  int v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  int v11;
  _QWORD __b[185];

  __b[184] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  memset(__b, 170, 0x5C0uLL);
  v4 = sub_19BA64B98(a1, __b, 1472);
  if (v4 >= 1)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v5, (uint64_t)__b, v6, v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
      CFDictionarySetValue(v3, CFSTR("ids-stun-attribute-enc-ParticipantIDs"), v7);

    v11 = 1414938954;
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v8, (uint64_t)&v11, v9, 4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      CFDictionarySetValue(v3, CFSTR("ids-stun-attribvute-enc-marker"), v10);

  }
}

id StunUtilCreateMessage(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const __CFDictionary *v9;
  IDSStunMessage *v10;
  const char *v11;
  double v12;
  void *v13;
  __CFDictionary *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  int isRelayStunCandidatePair;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  uint64_t v23;
  int isSharedQRSession;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  id v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  NSObject *v38;
  unsigned int v39;
  const char *v40;
  double v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  id v46;
  unsigned int v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  const char *v54;
  void *v55;
  void *v56;
  const char *v57;
  double v58;
  const char *v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  double v64;
  unsigned int v65;
  const char *v66;
  double v67;
  void *v68;
  unsigned int v69;
  const char *v70;
  double v71;
  void *v72;
  unsigned int v73;
  const char *v74;
  double v75;
  void *v76;
  unsigned int v77;
  const char *v78;
  double v79;
  void *v80;
  unsigned int v81;
  const char *v82;
  double v83;
  void *v84;
  unsigned int v85;
  const char *v86;
  double v87;
  void *v88;
  unsigned int v89;
  const char *v90;
  double v91;
  void *v92;
  void *Value;
  char v94;
  const char *v95;
  uint64_t v96;
  double v97;
  const char *v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  const char *v104;
  _BOOL4 v105;
  void *v106;
  const char *v107;
  double v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  double v112;
  void *v113;
  uint64_t v114;
  const char *v115;
  double v116;
  void *v117;
  void *v118;
  void *v119;
  const char *v120;
  double v121;
  void *v122;
  const char *v123;
  double v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  double v130;
  void *v131;
  void *v132;
  uint64_t v133;
  const char *v134;
  double v135;
  _BOOL4 v136;
  void *v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  double v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  const char *v146;
  _BOOL4 v147;
  void *v148;
  uint64_t v149;
  double v150;
  const char *v151;
  _BOOL4 v152;
  void *v153;
  unsigned __int16 v154;
  double v155;
  const char *v156;
  _BOOL4 v157;
  void *v158;
  const char *v159;
  double v160;
  void *v161;
  void *v162;
  void *v163;
  const char *v164;
  double v165;
  void *v166;
  const char *v167;
  double v168;
  void *v169;
  void *v170;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  void *v177;
  uint64_t v178;
  const char *v179;
  double v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  double v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  double v188;
  void *v189;
  void *v190;
  void *v191;
  id v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  id v196;
  double v197;
  void *v198;
  char v199;
  uint64_t v200;
  double v201;
  const char *v202;
  _BOOL4 v203;
  void *v204;
  NSObject *v205;
  const char *v206;
  double v207;
  __CFString *v208;
  NSObject *v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  double v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  double v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  double v221;
  unsigned int isCellularStunCandidate;
  const char *v223;
  double v224;
  void *v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  double v229;
  uint64_t v230;
  const char *v231;
  double v232;
  void *v233;
  const char *v234;
  double v235;
  void *v236;
  NSObject *v237;
  id v238;
  unsigned __int16 v239;
  const char *v240;
  double v241;
  void *v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  double v246;
  void *v247;
  void *v248;
  void *v249;
  const char *v250;
  double v251;
  const char *v252;
  uint64_t v253;
  double v254;
  void *v255;
  const char *v256;
  uint64_t v257;
  double v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  double v262;
  void *v263;
  const char *v264;
  uint64_t v265;
  double v266;
  void *v267;
  const char *v268;
  uint64_t v269;
  double v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  double v274;
  char v275;
  const char *v276;
  double v277;
  void *v278;
  __CFString **v279;
  const char *v280;
  uint64_t v281;
  double v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291;
  double v292;
  id v293;
  NSObject *v294;
  const char *v295;
  uint64_t v296;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unsigned __int16 v301;
  void *v302;
  void *v303;
  uint8_t buf[4];
  int v305;
  __int16 v306;
  _WORD v307[11];

  *(_QWORD *)&v307[7] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = [IDSStunMessage alloc];
  v13 = (void *)objc_msgSend_initWithType_(v10, v11, a1, v12);
  v14 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v15 = ids_monotonic_time();
  isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v8, v16, v17, v15);
  isSharedQRSession = objc_msgSend_isSharedQRSession(v8, v19, v20, v21);
  v303 = v7;
  if (isRelayStunCandidatePair && (objc_msgSend_isValidRelayStunCandidatePair(v8, v22, v23, v25) & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v38, OS_LOG_TYPE_DEFAULT, "StunUtilCreateMessage failed due to invalid relay candidate pair.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("StunUtilCreateMessage failed due to invalid relay candidate pair."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("StunUtilCreateMessage failed due to invalid relay candidate pair."));
      }
    }
    v29 = 0;
  }
  else
  {
    objc_msgSend_setTransactionID_(v13, v22, (uint64_t)v7, v25);
    v29 = 0;
    switch(a1)
    {
      case 3808:
      case 3809:
        CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-requestedtransport"), &unk_1E3C86AC0);
        objc_msgSend_softwareData(v8, v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        if (v33)
        {
          objc_msgSend_softwareData(v8, v34, v35, v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          if (v37)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-software"), v37);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF77A8();
          }

        }
        Value = 0;
        if (v9)
        {
          v34 = CFSTR("gl-option-additional-binding");
          if (CFSTR("gl-option-additional-binding"))
            Value = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-additional-binding"));
        }
        v94 = objc_msgSend_unsignedIntValue(Value, v34, v35, v36);
        if ((objc_msgSend_isSelfQRSession(v8, v95, v96, v97) & 1) == 0
          && objc_msgSend_hasValidCapabilityFlags(v8, v98, v99, v100))
        {
          v102 = objc_msgSend_capabilityFlags(v8, v98, v99, v100);
          v104 = CFSTR("gl-option-is-lightweight-participant-key");
          if (CFSTR("gl-option-is-lightweight-participant-key"))
            v105 = v9 != 0;
          else
            v105 = 0;
          if (v105)
            v106 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-is-lightweight-participant-key"));
          else
            v106 = 0;
          if (objc_msgSend_BOOLValue(v106, v104, v101, v103))
            objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v167, v102 & 0xFFFFFFFFFFDF7FFFLL | 0x8000, v168);
          else
            objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v167, v102, v168);
          v169 = (void *)objc_claimAutoreleasedReturnValue();
          if (v169)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-capabilityflags"), v169);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7728();
          }

          if (objc_msgSend_relayProviderType(v8, v215, v216, v217) != 1)
          {
            objc_msgSend_local(v8, v98, v99, v100);
            v218 = (void *)objc_claimAutoreleasedReturnValue();
            isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v218, v219, v220, v221);

            objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v223, v94 & 0x30 | isCellularStunCandidate, v224);
            v225 = (void *)objc_claimAutoreleasedReturnValue();
            if (v225)
            {
              CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channel-binding-info"), v225);
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              sub_19BAF76A8();
            }

          }
        }
        if (isSharedQRSession)
        {
          objc_msgSend_transactionID(v13, v98, v99, v100);
          v249 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_deriveAES128CTRKeys_(v8, v250, (uint64_t)v249, v251);

          objc_msgSend_relaySessionInfo(v8, v252, v253, v254);
          v255 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_publishedStreams(v255, v256, v257, v258);
          v259 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_relaySessionInfo(v8, v260, v261, v262);
          v263 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_subscribedStreams(v263, v264, v265, v266);
          v267 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_relaySessionInfo(v8, v268, v269, v270);
          v271 = (void *)objc_claimAutoreleasedReturnValue();
          v275 = objc_msgSend_maxConcurrentStreams(v271, v272, v273, v274);

          sub_19BA64E70(v259, v267, v275, v14);
          objc_msgSend_objectForKeyedSubscript_(v9, v276, (uint64_t)CFSTR("gl-option-materials-key"), v277);
          v278 = (void *)objc_claimAutoreleasedReturnValue();
          if (v278)
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-materials"), v278);

        }
        v279 = IDSStunAttributeQRReallocTokenKey;
        if (a1 != 3809)
          v279 = IDSStunAttributeQRSessionTokenKey;
        v171 = *v279;
        objc_msgSend_relaySessionToken(v8, v280, v281, v282);
        v283 = (void *)objc_claimAutoreleasedReturnValue();
        if (v283)
        {
          CFDictionarySetValue(v14, (const void *)v171, v283);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF7628(v171, v284, v285, v286, v287, v288, v289, v290);
        }

        objc_msgSend_objectForKeyedSubscript_(v9, v291, (uint64_t)CFSTR("gl-option-qr-server-data-blob"), v292);
        v175 = objc_claimAutoreleasedReturnValue();
        if (v175)
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-server-blob"), (const void *)v175);
        goto LABEL_294;
      case 3810:
        if (objc_msgSend_relayProviderType(v8, v26, v27, v28) == 1)
        {
          objc_msgSend_sessionID(v8, v43, v44, v45);
          v46 = (id)objc_claimAutoreleasedReturnValue();
          if (v46)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-sessionid"), v46);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7828();
          }
        }
        else
        {
          v89 = objc_msgSend_channelNumber(v8, v43, v44, v45);
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v90, __rev16(v89), v91);
          v46 = (id)objc_claimAutoreleasedReturnValue();
          if (v46)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v46);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF78A8();
          }
        }
        goto LABEL_278;
      case 3811:
        v47 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        v48 = ntpTime32(v15);
        objc_msgSend_serverLatency(v8, v49, v50, v51);
        v53 = v52;
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v54, __rev16(v47), v52);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        if (v55)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v55);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF78A8();
        }

        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v107, v48, v108);
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        if (v109)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-clienttime"), v109);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF7CA8();
        }

        v126 = (v53 * 1000.0);
        if ((_DWORD)v126)
        {
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v125, v126, v53 * 1000.0);
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          if (v127)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-clientlatency"), v127);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7C28();
          }

        }
        v170 = 0;
        if (v9 && CFSTR("gl-option-stats-sent-packets"))
          v170 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-stats-sent-packets"));
        v171 = v170;
        v172 = 0;
        if (v9 && CFSTR("gl-option-stats-received-packets"))
          v172 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-stats-received-packets"));
        v175 = v172;
        if (v171 | v175)
        {
          if (v171)
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-sent-packets"), (const void *)v171);
          if (v175)
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-received-packets"), (const void *)v175);
        }
        else
        {
          v177 = (void *)MEMORY[0x1E0CB37E8];
          v178 = objc_msgSend_totalPacketsSentOnLink(v8, v173, v174, v176);
          objc_msgSend_numberWithUnsignedInt_(v177, v179, v178, v180);
          v181 = (void *)objc_claimAutoreleasedReturnValue();
          if (v181)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-sent-packets"), v181);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7BA8();
          }

          v226 = (void *)MEMORY[0x1E0CB37E8];
          v230 = objc_msgSend_totalPacketsReceivedOnLink(v8, v227, v228, v229);
          objc_msgSend_numberWithUnsignedInt_(v226, v231, v230, v232);
          v233 = (void *)objc_claimAutoreleasedReturnValue();
          if (v233)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-received-packets"), v233);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7B28();
          }

        }
LABEL_294:

        goto LABEL_295;
      case 3812:
        objc_msgSend_transactionID(v13, v26, v27, v28);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deriveAES128CTRKeys_(v8, v57, (uint64_t)v56, v58);

        if ((unint64_t)objc_msgSend_state(v8, v59, v60, v61) < 3)
        {
          objc_msgSend_relaySessionToken(v8, v62, v63, v64);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          if (v92)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-sessiontokenkey"), v92);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF79A8();
          }

          OSLogHandleForTransportCategory();
          v209 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v209, OS_LOG_TYPE_DEFAULT, "use relay-access-token for info request.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("use relay-access-token for info request."));
              if ((_IDSShouldLog() & 1) != 0)
              {
                v208 = CFSTR("use relay-access-token for info request.");
                goto LABEL_219;
              }
            }
          }
        }
        else
        {
          v65 = objc_msgSend_channelNumber(v8, v62, v63, v64);
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v66, __rev16(v65), v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          if (v68)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v68);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF78A8();
          }

          OSLogHandleForTransportCategory();
          v205 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v205, OS_LOG_TYPE_DEFAULT, "use channel-number for info request.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("use channel-number for info request."));
              if ((_IDSShouldLog() & 1) != 0)
              {
                v208 = CFSTR("use channel-number for info request.");
LABEL_219:
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), v208);
              }
            }
          }
        }
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v206, 7, v207);
        v210 = (void *)objc_claimAutoreleasedReturnValue();
        if (v210)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-infoflags"), v210);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF7928();
        }

        objc_msgSend_relaySessionKey(v8, v211, v212, v213);
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        if (v214)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-messageintegrity"), v214);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF75A8();
        }

LABEL_295:
        if (isRelayStunCandidatePair)
        {
          objc_msgSend_relaySessionKey(v8, v26, v27, v28);
          v293 = (id)objc_claimAutoreleasedReturnValue();
          if (v293)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-messageintegrity"), v293);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF75A8();
          }

          OSLogHandleForTransportCategory();
          v294 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            v305 = a1;
            v306 = 2112;
            *(_QWORD *)v307 = v293;
            _os_log_impl(&dword_19B949000, v294, OS_LOG_TYPE_DEFAULT, "Msg %04X has relay session key %@", buf, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v298 = a1;
              v299 = (unint64_t)v293;
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Msg %04X has relay session key %@"));
              if (_IDSShouldLog())
              {
                v298 = a1;
                v299 = (unint64_t)v293;
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Msg %04X has relay session key %@"));
              }
            }
          }

        }
        objc_msgSend_setAttributes_(v13, v26, (uint64_t)v14, v28, v298, v299, v300);
        objc_msgSend_setStartTime_(v13, v295, v296, v15);
        v29 = v13;
        break;
      case 3813:
        if (!isSharedQRSession)
          goto LABEL_295;
        v69 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v70, __rev16(v69), v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        if (v72)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v72);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF78A8();
        }

        v185 = 0;
        if (v9)
        {
          v182 = CFSTR("gl-option-sessioninfo-request-type");
          if (CFSTR("gl-option-sessioninfo-request-type"))
            v185 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-request-type"));
        }
        if (objc_msgSend_intValue(v185, v182, v183, v184) == 2)
        {
          if (v9)
          {
            if (CFSTR("gl-option-sessioninfo-generation-counter"))
            {
              v189 = (id)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-generation-counter"));
              if (v189)
              {
                v190 = v189;
                CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-generation-counter"), v189);

              }
            }
          }
          v191 = 0;
          if (v9 && CFSTR("gl-option-sessioninfo-published-streams"))
            v191 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-published-streams"));
          v192 = v191;
          v193 = 0;
          if (v9 && CFSTR("gl-option-sessioninfo-subscribed-streams"))
            v193 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-subscribed-streams"));
          v196 = v193;
          v198 = 0;
          if (v9)
          {
            v194 = CFSTR("gl-option-sessioninfo-max-concurrent-streams");
            if (CFSTR("gl-option-sessioninfo-max-concurrent-streams"))
              v198 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-max-concurrent-streams"));
          }
          v199 = objc_msgSend_intValue(v198, v194, v195, v197);
          sub_19BA64E70(v192, v196, v199, v14);
          v202 = CFSTR("gl-option-sessioninfo-relay-link-id");
          if (CFSTR("gl-option-sessioninfo-relay-link-id"))
            v203 = v9 != 0;
          else
            v203 = 0;
          if (v203)
            v204 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-relay-link-id"));
          else
            v204 = 0;
          v239 = objc_msgSend_unsignedIntValue(v204, v202, v200, v201);
          if (v239)
          {
            objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v240, v239, v241);
            v242 = (void *)objc_claimAutoreleasedReturnValue();
            if (v242)
              CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-relay-link-id"), v242);

          }
        }
        v243 = 0;
        if (v9)
        {
          v186 = CFSTR("gl-option-sessioninfo-request-id");
          if (CFSTR("gl-option-sessioninfo-request-id"))
            v243 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-request-id"));
        }
        v245 = objc_msgSend_unsignedIntValue(v243, v186, v187, v188);
        if ((_DWORD)v245)
        {
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v244, v245, v246);
          v247 = (void *)objc_claimAutoreleasedReturnValue();
          if (v247)
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-request-id"), v247);

        }
        v248 = 0;
        if (v9)
        {
          v244 = CFSTR("gl-option-sessioninfo-cookie");
          if (CFSTR("gl-option-sessioninfo-cookie"))
            v248 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-sessioninfo-cookie"));
        }
        v27 = objc_msgSend_unsignedIntValue(v248, v244, v245, v246);
        if (!(_DWORD)v27)
          goto LABEL_295;
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v26, v27, v28);
        v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46)
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-cookie"), v46);
LABEL_278:

        goto LABEL_295;
      case 3814:
        break;
      case 3815:
        v73 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v74, __rev16(v73), v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        if (v76)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v76);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF78A8();
        }

        v113 = 0;
        if (v9)
        {
          v110 = CFSTR("gl-option-participant-update-request-type");
          if (CFSTR("gl-option-participant-update-request-type"))
            v113 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-participant-update-request-type"));
        }
        v114 = objc_msgSend_unsignedShortValue(v113, v110, v111, v112);
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v115, v114, v116);
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        if (v117)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-session-state-type"), v117);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF7AA8();
        }

        if (v114 > 8 || ((1 << v114) & 0x181) == 0)
        {
          v131 = 0;
          if (v9 && CFSTR("gl-option-participant-update-blocked-participantIDs"))
            v131 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-participant-update-blocked-participantIDs"));
          sub_19BA65050(v131, v14);
        }
        v132 = 0;
        if (v9)
        {
          v128 = CFSTR("gl-option-participant-update-request-counter");
          if (CFSTR("gl-option-participant-update-request-counter"))
            v132 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-participant-update-request-counter"));
        }
        v133 = objc_msgSend_unsignedIntValue(v132, v128, v129, v130);
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v134, v133, v135);
        v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-session-state-counter"), v46);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF7A28();
        }
        goto LABEL_278;
      case 3816:
        v77 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v78, __rev16(v77), v79);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        if (v80)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v80);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF78A8();
        }

        if (v9
          && CFSTR("gl-option-plugin-operation")
          && (v118 = (id)CFDictionaryGetValue(v9, CFSTR("gl-option-plugin-operation"))) != 0)
        {
          v119 = v118;
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-plugin-operation"), v118);

        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF8028();
        }
        v122 = 0;
        if (v9)
        {
          v120 = CFSTR("gl-option-plugin-name");
          if (CFSTR("gl-option-plugin-name"))
            v122 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-plugin-name"));
        }
        objc_msgSend_dataUsingEncoding_(v122, v120, 4, v121);
        v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-plugin-name"), v46);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF7FA8();
        }

        if (CFSTR("gl-option-plugin-raw-public-key"))
          v136 = v9 != 0;
        else
          v136 = 0;
        if (v136)
        {
          v137 = (id)(id)CFDictionaryGetValue(v9, CFSTR("gl-option-plugin-raw-public-key"));
          if (v137)
          {
            v138 = v137;
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-raw-public-key"), v137);

          }
        }
        goto LABEL_278;
      case 3817:
        v81 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v82, __rev16(v81), v83);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        if (v84)
        {
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v84);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19BAF78A8();
        }

        objc_msgSend_objectForKeyedSubscript_(v9, v123, (uint64_t)CFSTR("gl-option-materials-key"), v124);
        v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46)
          CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-materials"), v46);
        goto LABEL_278;
      default:
        if (a1 == 23)
        {
          v85 = objc_msgSend_channelNumber(v8, v26, v27, v28);
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v86, __rev16(v85), v87);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          if (v88)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v88);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF78A8();
          }

          if (v9
            && CFSTR("gl-option-generic-data")
            && (v162 = (id)CFDictionaryGetValue(v9, CFSTR("gl-option-generic-data"))) != 0)
          {
            v163 = v162;
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-data"), v162);

          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7D28();
          }
        }
        else
        {
          if (a1 != 2049)
            break;
          v39 = objc_msgSend_channelNumber(v8, v26, v27, v28);
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v40, __rev16(v39), v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          if (v42)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-channelnumber"), v42);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF78A8();
          }

          v142 = 0;
          if (v9)
          {
            v139 = CFSTR("gl-option-test-options-flags");
            if (CFSTR("gl-option-test-options-flags"))
              v142 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-test-options-flags"));
          }
          v144 = objc_msgSend_unsignedIntValue(v142, v139, v140, v141);
          v146 = CFSTR("gl-option-test-requested-message-type");
          if (CFSTR("gl-option-test-requested-message-type"))
            v147 = v9 != 0;
          else
            v147 = 0;
          if (v147)
            v148 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-test-requested-message-type"));
          else
            v148 = 0;
          v301 = objc_msgSend_unsignedIntValue(v148, v146, v143, v145);
          v151 = CFSTR("gl-option-test-requested-error-code-type");
          if (CFSTR("gl-option-test-requested-error-code-type"))
            v152 = v9 != 0;
          else
            v152 = 0;
          if (v152)
            v153 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-test-requested-error-code-type"));
          else
            v153 = 0;
          v154 = objc_msgSend_unsignedIntValue(v153, v151, v149, v150);
          v156 = CFSTR("gl-option-test-sub-operation");
          if (CFSTR("gl-option-test-sub-operation"))
            v157 = v9 != 0;
          else
            v157 = 0;
          if (v157)
            v158 = (void *)CFDictionaryGetValue(v9, CFSTR("gl-option-test-sub-operation"));
          else
            v158 = 0;
          objc_msgSend_dataUsingEncoding_(v158, v156, 4, v155);
          v302 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v159, v144, v160);
          v161 = (void *)objc_claimAutoreleasedReturnValue();
          if (v161)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-testoptions"), v161);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7F28();
          }

          if ((_DWORD)v144 == 8)
          {
            objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v164, v301, v165);
            v166 = (void *)objc_claimAutoreleasedReturnValue();
            if (v166)
            {
              CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-test-requested-message"), v166);
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              sub_19BAF7EA8();
            }

            objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v234, v154, v235);
            v236 = (void *)objc_claimAutoreleasedReturnValue();
            if (v236)
            {
              CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-test-requested-error-code"), v236);
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              sub_19BAF7E28();
            }

            OSLogHandleForTransportCategory();
            v237 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109632;
              v305 = 8;
              v306 = 1024;
              *(_DWORD *)v307 = v301;
              v307[2] = 1024;
              *(_DWORD *)&v307[3] = v154;
              _os_log_impl(&dword_19B949000, v237, OS_LOG_TYPE_DEFAULT, "testOptions: %u, requestedMessageType: %u, requestedErrorCode: %u", buf, 0x14u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v299 = v301;
                v300 = v154;
                v298 = 8;
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("testOptions: %u, requestedMessageType: %u, requestedErrorCode: %u"));
                if (_IDSShouldLog())
                {
                  v299 = v301;
                  v300 = v154;
                  v298 = 8;
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("testOptions: %u, requestedMessageType: %u, requestedErrorCode: %u"));
                }
              }
            }
          }
          v238 = v302;
          if (v238)
          {
            CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-qr-testsuboperation"), v238);
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            sub_19BAF7DA8();
          }

        }
        goto LABEL_295;
    }
  }

  return v29;
}

uint64_t StunUtilHasValidChannelNumber(void *a1, unsigned int a2, _WORD *a3)
{
  id v5;
  const char *v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[4];
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  _BYTE v17[8];
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5 || (bzero(v17, 0x5D0uLL), !objc_msgSend_getAttribute_attribute_(v5, v6, 12, v7, v17)))
  {
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  v8 = HIWORD(v18);
  if (a2)
  {
    v9 = __rev16(a2);
    if (v8 != v9)
    {
      OSLogHandleForTransportCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v14 = v8;
        v15 = 1024;
        v16 = v9;
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "channel-number mismatch (%04x != %04x).", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("channel-number mismatch (%04x != %04x)."));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("channel-number mismatch (%04x != %04x)."));
        }
      }
      goto LABEL_11;
    }
  }
  if (a3)
    *a3 = HIWORD(v18);
  v11 = 1;
LABEL_12:

  return v11;
}

uint64_t StunUtilHasValidXorMappedAddress(uint64_t result, void *a2)
{
  void *v3;
  const char *v4;
  double v5;
  _BYTE v6[8];
  size_t __n[186];

  __n[185] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (void *)result;
    bzero(v6, 0x5D0uLL);
    result = objc_msgSend_getAttribute_attribute_(v3, v4, 32, v5, v6);
    if ((_DWORD)result)
    {
      result = IsValidSA((_BOOL8)__n);
      if ((_DWORD)result)
      {
        if (a2)
          memcpy(a2, __n, LOBYTE(__n[0]));
        return 1;
      }
    }
  }
  return result;
}

uint64_t StunUtilHasValidUInt64Attr(uint64_t result, uint64_t a2, _QWORD *a3)
{
  void *v5;
  const char *v6;
  double v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if ((_DWORD)result)
        *a3 = v9;
    }
  }
  return result;
}

uint64_t StunUtilHasValidUInt8Attr(uint64_t result, uint64_t a2, _BYTE *a3)
{
  void *v5;
  const char *v6;
  double v7;
  _BYTE v8[1488];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if ((_DWORD)result)
        *a3 = v8[8];
    }
  }
  return result;
}

void *StunUtilHasValidErrorCodeAttr(void *a1, _WORD *a2, char *a3, int *a4)
{
  void *Attribute_attribute;
  const char *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  double v12;
  int v13;
  NSObject *v14;
  _DWORD v16[2];
  _BYTE v17[8];
  int v18;
  int v19;
  char v20[128];
  int v21;
  uint64_t v22;

  Attribute_attribute = a1;
  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    bzero(v17, 0x5D0uLL);
    Attribute_attribute = (void *)objc_msgSend_getAttribute_attribute_(Attribute_attribute, v8, 9, v9, v17);
    if ((_DWORD)Attribute_attribute)
    {
      if (a2)
        *a2 = v19 + 100 * v18;
      if (a3 && a4)
      {
        v13 = v21;
        if (v21 > 127)
        {
          objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            v16[0] = 67109120;
            v16[1] = v21;
            _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "StunUtilHasValidErrorCodeAttr potential overflow, error code length: %d", (uint8_t *)v16, 8u);
          }

        }
        else
        {
          *a4 = v21;
          strlcpy(a3, v20, v13 + 1);
        }
      }
    }
  }
  return Attribute_attribute;
}

uint64_t StunUtilDeriveHKDFSha256Keys(void *a1, void *a2, unint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  int v15;
  const char *v16;
  uint64_t v17;
  double v18;
  int v19;
  const char *v20;
  uint64_t v21;
  double v22;
  id v23;
  const char *v24;
  double v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  double v31;
  id v32;
  const char *v33;
  uint64_t v34;
  double v35;
  int Hkdf;
  const char *v37;
  uint64_t v38;
  double v39;
  int v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  uint64_t v44;
  id v45;
  const char *v46;
  uint64_t v47;
  double v48;
  int v49;
  const char *v50;
  uint64_t v51;
  double v52;
  double v54;
  const char *v55;
  uint64_t v56;
  uint8_t buf[4];
  double v58;
  _BYTE v59[14];
  _WORD v60[17];

  *(_QWORD *)&v60[13] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a4;
  memset(v60, 170, 24);
  v15 = objc_msgSend_length(v9, v12, v13, v14);
  v19 = objc_msgSend_length(v11, v16, v17, v18);
  if (a5 && v15 == 20 && v19 == 12)
  {
    qmemcpy(v59, "QuickRelay KDF", sizeof(v59));
    v23 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v26 = objc_msgSend_initWithUUIDString_(v23, v24, (uint64_t)v10, v25);
    v30 = v26;
    if (v10)
    {
      objc_msgSend_getUUIDBytes_(v26, v27, (uint64_t)v60, v29);
      *(_QWORD *)&v60[8] = bswap64(a3);
      v31 = ids_monotonic_time();
      v32 = objc_retainAutorelease(v11);
      objc_msgSend_bytes(v32, v33, v34, v35);
      Hkdf = CCKDFParametersCreateHkdf();
      if (Hkdf)
      {
        v40 = Hkdf;
        objc_msgSend_Stun(IDSFoundationLog, v37, v38, v39);
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v58) = v40;
          v42 = "CCKDFParametersCreateHkdf failed with error %d.";
LABEL_17:
          _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, 8u);
        }
      }
      else
      {
        v45 = objc_retainAutorelease(v9);
        objc_msgSend_bytes(v45, v46, v47, v48);
        v49 = CCDeriveKey();
        CCKDFParametersDestroy();
        if (!v49)
        {
          v54 = ids_monotonic_time();
          objc_msgSend_Stun(IDSFoundationLog, v55, v56, v54);
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v58 = v54 - v31;
            _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "HKDF+SHA256 key derivation time: %.6f.", buf, 0xCu);
          }
          v44 = 1;
          goto LABEL_19;
        }
        objc_msgSend_Stun(IDSFoundationLog, v50, v51, v52);
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v58) = v49;
          v42 = "CCDeriveKey failed with error %d.";
          goto LABEL_17;
        }
      }
      v44 = 0;
LABEL_19:

      goto LABEL_20;
    }
    objc_msgSend_Stun(IDSFoundationLog, v27, v28, v29);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "StunUtilDeriveHKDFSha256Keys failed due to invalid session-id.", buf, 2u);
    }

  }
  else
  {
    objc_msgSend_Stun(IDSFoundationLog, v20, v21, v22);
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "StunUtilDeriveHKDFSha256Keys failed due to invalid parameter.", buf, 2u);
    }
  }
  v44 = 0;
LABEL_20:

  return v44;
}

BOOL StunUtilInitAES128CTR(void *a1, CCOperation a2, const void *a3, CCCryptorRef *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  double v13;
  const char *v14;
  uint64_t v15;
  CCCryptorStatus v16;
  double v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  CCCryptorRef v25;
  uint8_t buf[4];
  CCCryptorRef v28;
  __int16 v29;
  double v30;
  uint64_t iv;
  int v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v7 = objc_retainAutorelease(a1);
  v11 = objc_msgSend_bytes(v7, v8, v9, v10);
  v12 = *(_DWORD *)(v11 + 8);
  iv = *(_QWORD *)v11;
  v32 = v12;
  v13 = ids_monotonic_time();
  v16 = CCCryptorCreateWithMode(a2, 4u, 0, 0, &iv, a3, 0x10uLL, 0, 0, 0, 2u, a4);
  if (v16)
  {
    objc_msgSend_Stun(IDSFoundationLog, v14, v15, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v28) = v16;
      v19 = "CCCryptorCreateWithMode failed for encryption with (%d).";
      v20 = v18;
      v21 = 8;
LABEL_6:
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
    }
  }
  else
  {
    v22 = ids_monotonic_time();
    objc_msgSend_Stun(IDSFoundationLog, v23, v24, v22);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *a4;
      *(_DWORD *)buf = 134218240;
      v28 = v25;
      v29 = 2048;
      v30 = v22 - v13;
      v19 = "AES128-CTR (%p) init time: %.6f.";
      v20 = v18;
      v21 = 22;
      goto LABEL_6;
    }
  }

  return v16 == 0;
}

BOOL StunUtilDoAES128CTR(_CCCryptor *a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  double v10;
  const char *v11;
  uint64_t v12;
  CCCryptorStatus v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  double v19;
  const char *v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  size_t dataOutMoved;
  uint8_t buf[4];
  _CCCryptor *v29;
  __int16 v30;
  double v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  dataOutMoved = 0;
  v10 = ids_monotonic_time();
  v13 = CCCryptorUpdate(a1, a2, a3, a4, a3, &dataOutMoved);
  if (v13)
  {
    objc_msgSend_Stun(IDSFoundationLog, v11, v12, v14);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v29) = v13;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "CCCryptorUpdate failed to enc/dec with (%d).", buf, 8u);
    }
  }
  else
  {
    v18 = ids_monotonic_time();
    v19 = v18;
    if (a5)
      *a5 = dataOutMoved;
    objc_msgSend_Stun(IDSFoundationLog, v16, v17, v18);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v20, (uint64_t)a2, v21, a3);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v23, (uint64_t)a4, v24, *a5);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218754;
      v29 = a1;
      v30 = 2048;
      v31 = v19 - v10;
      v32 = 2112;
      v33 = v22;
      v34 = 2112;
      v35 = v25;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "AES128-CTR (%p) time: %.6f (in:%@, out:%@).", buf, 0x2Au);

    }
  }

  return v13 == 0;
}

uint64_t sub_19BA67500(CCCryptorRef *a1, CCOperation a2)
{
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  double v10;
  NSObject *v11;
  const char *v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  char v19;
  const char *v20;
  uint64_t v21;
  double v22;
  __int128 *v23;
  NSObject *v24;
  const char *v25;
  double v26;
  _CCCryptor *v27;
  const char *v28;
  double v29;
  void *v30;
  const char *v31;
  double v32;
  CCCryptorRef *v33;
  void *v34;
  const char *v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  BOOL v41;
  BOOL v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  BOOL inited;
  const char *v48;
  uint64_t v49;
  double v50;
  _BOOL4 v51;
  CCCryptorRef v52;
  __int128 *v53;
  uint8_t buf[4];
  CCCryptorRef v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v69 = 0u;
  v70 = 0u;
  v68 = xmmword_19BB12C30;
  v66 = *(_OWORD *)"";
  v67 = 857870592;
  v64 = 0x8877665544332211;
  v65 = -860116327;
  v62 = xmmword_19BB12C50;
  v63 = xmmword_19BB12C40;
  v4 = objc_alloc(MEMORY[0x1E0CB3A28]);
  v9 = (void *)objc_msgSend_initWithUUIDBytes_(v4, v5, (uint64_t)&v68, v6);
  if (v9)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v7, (uint64_t)&v64, v10, 12);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v12, (uint64_t)&v66, v13, 20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UUIDString(v9, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = StunUtilDeriveHKDFSha256Keys(v14, v18, 0x123456789ABCDEFuLL, v11, (uint64_t)&v69);

    if ((v19 & 1) != 0)
    {
      if (a2)
        v23 = &v70;
      else
        v23 = &v69;
      objc_msgSend_Stun(IDSFoundationLog, v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v25, (uint64_t)&v63, v26, 16);
        v53 = v23;
        v27 = (_CCCryptor *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v28, (uint64_t)&v69, v29, 16);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v31, (uint64_t)&v62, v32, 16);
        v33 = a1;
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v35, (uint64_t)&v70, v36, 16);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138413058;
        v55 = v27;
        v56 = 2112;
        v57 = v30;
        v58 = 2112;
        v59 = v34;
        v60 = 2112;
        v61 = v37;
        _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "encKeyOut:(%@, %@), encKeyIn:(%@, %@).", buf, 0x2Au);

        a1 = v33;
        v23 = v53;
      }

      v41 = (_QWORD)v63 == (_QWORD)v69 && *((_QWORD *)&v63 + 1) == *((_QWORD *)&v69 + 1);
      if (v41 && ((_QWORD)v62 == (_QWORD)v70 ? (v42 = *((_QWORD *)&v62 + 1) == *((_QWORD *)&v70 + 1)) : (v42 = 0), v42))
      {
        inited = StunUtilInitAES128CTR(v11, a2, v23, a1);
        objc_msgSend_Stun(IDSFoundationLog, v48, v49, v50);
        v43 = objc_claimAutoreleasedReturnValue();
        v51 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        if (inited)
        {
          if (v51)
          {
            v52 = *a1;
            *(_DWORD *)buf = 134217984;
            v55 = v52;
            _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "AES128-CTR cryptor instance is created successfully: %p.", buf, 0xCu);
          }
          v45 = 1;
          goto LABEL_26;
        }
        if (v51)
        {
          *(_WORD *)buf = 0;
          v44 = "failed to create AES128-CTR encoder.";
          goto LABEL_24;
        }
      }
      else
      {
        objc_msgSend_Stun(IDSFoundationLog, v38, v39, v40);
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v44 = "key derivation failed with mismatch.";
LABEL_24:
          _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, v44, buf, 2u);
        }
      }
    }
    else
    {
      objc_msgSend_Stun(IDSFoundationLog, v20, v21, v22);
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v44 = "StunUtilDeriveHKDFSha256Keys failed.";
        goto LABEL_24;
      }
    }
    v45 = 0;
LABEL_26:

    goto LABEL_27;
  }
  objc_msgSend_Stun(IDSFoundationLog, v7, v8, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "_StunUtilTestHKDFSha256KeysDerivationAndInit failed due to invalid sessionUUID.", buf, 2u);
  }
  v45 = 0;
LABEL_27:

  return v45;
}

uint64_t StunUtilTestAES128CTREnc(CCCryptorRef *a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  BOOL v8;
  BOOL v9;
  NSObject *v10;
  const char *v11;
  double v12;
  _BYTE *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  const char *v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  BOOL v26;
  const char *v27;
  double v28;
  const char *v29;
  double v30;
  size_t v31;
  size_t v32;
  uint8_t buf[4];
  _BYTE *v34;
  __int16 v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[24];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  qmemcpy(v58, "Client Attribute Value 1", sizeof(v58));
  v57 = 0x402DE734DE3646B1;
  v55 = 0u;
  v56 = xmmword_19BB12B7E;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v32 = 0;
  qmemcpy(v47, "Client Attribute Value 2", 24);
  v44 = 0u;
  v45 = xmmword_19BB12BAE;
  v46 = 0xE7B60E32A2F3586;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v31 = 0;
  if ((sub_19BA67500(a1, 0) & 1) == 0)
  {
    objc_msgSend_Stun(IDSFoundationLog, v2, v3, v4);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    *(_WORD *)buf = 0;
    v17 = "_StunUtilTestHKDFSha256KeysDerivationAndInit failed.";
    v18 = v10;
    v19 = 2;
LABEL_19:
    _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_20;
  }
  if (!StunUtilDoAES128CTR(*a1, v58, 0x18uLL, &v48, &v32))
  {
    objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    *(_DWORD *)buf = 136315138;
    v34 = v58;
    v17 = "StunUtilDoAES128CTR failed for %s.";
    goto LABEL_18;
  }
  if (v32 != 24
    || ((_QWORD)v56 == (_QWORD)v48 ? (v8 = *((_QWORD *)&v56 + 1) == *((_QWORD *)&v48 + 1)) : (v8 = 0),
        v8 ? (v9 = v57 == (_QWORD)v49) : (v9 = 0),
        !v9))
  {
    objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7, v31);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      v20 = 0;
      goto LABEL_21;
    }
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v11, (uint64_t)&v48, v12, v32);
    v13 = (_BYTE *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v14, (uint64_t)&v56, v15, 24);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v34 = v13;
    v35 = 2112;
    v36 = v16;
LABEL_13:
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilDoAES128CTR result mismatch. (output:%@, expected:%@).", buf, 0x16u);

    goto LABEL_20;
  }
  if (!StunUtilDoAES128CTR(*a1, v47, 0x18uLL, &v37, &v31))
  {
    objc_msgSend_Stun(IDSFoundationLog, v22, v23, v24);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    *(_DWORD *)buf = 136315138;
    v34 = v47;
    v17 = "StunUtilDoAES128CTR failed for %s.";
LABEL_18:
    v18 = v10;
    v19 = 12;
    goto LABEL_19;
  }
  if (v31 != 24
    || ((_QWORD)v45 == (_QWORD)v37 ? (v25 = *((_QWORD *)&v45 + 1) == *((_QWORD *)&v37 + 1)) : (v25 = 0),
        v25 ? (v26 = v46 == (_QWORD)v38) : (v26 = 0),
        !v26))
  {
    objc_msgSend_Stun(IDSFoundationLog, v22, v23, v24, v31);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v27, (uint64_t)&v37, v28, v31);
    v13 = (_BYTE *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v29, (uint64_t)&v45, v30, 24);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v34 = v13;
    v35 = 2112;
    v36 = v16;
    goto LABEL_13;
  }
  objc_msgSend_Stun(IDSFoundationLog, v22, v23, v24);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilTestAES128CTREnc Success!", buf, 2u);
  }
  v20 = 1;
LABEL_21:

  return v20;
}

uint64_t StunUtilTestAES128CTRDec(CCCryptorRef *a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  BOOL v8;
  BOOL v9;
  NSObject *v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  uint64_t v19;
  const char *v21;
  uint64_t v22;
  double v23;
  BOOL v24;
  BOOL v25;
  const char *v26;
  double v27;
  const char *v28;
  double v29;
  const char *v30;
  double v31;
  size_t v32;
  size_t v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  __int128 v58;
  unint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v59 = 0xA2B056FE88BACF07;
  v58 = xmmword_19BB12BC6;
  v56 = 0u;
  qmemcpy(v57, "Server Attribute Value 1", 24);
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  v33 = 0;
  v47 = xmmword_19BB12BF6;
  v48 = 0x4CF3FC3300AF00CBLL;
  v45 = 0u;
  qmemcpy(v46, "Server Attribute Value 2", 24);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  v32 = 0;
  if ((sub_19BA67500(a1, 1u) & 1) == 0)
  {
    objc_msgSend_Stun(IDSFoundationLog, v2, v3, v4);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "_StunUtilTestHKDFSha256KeysDerivationAndInit failed.", buf, 2u);
    }
    goto LABEL_20;
  }
  if (!StunUtilDoAES128CTR(*a1, &v58, 0x18uLL, &v49, &v33))
  {
    objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v17, (uint64_t)&v58, v18, 24);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v35 = v13;
LABEL_18:
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilDoAES128CTR failed for %@.", buf, 0xCu);
    goto LABEL_19;
  }
  if (v33 != 24
    || (*(_QWORD *)&v57[0] == (_QWORD)v49 ? (v8 = *((_QWORD *)&v57[0] + 1) == *((_QWORD *)&v49 + 1)) : (v8 = 0),
        v8 ? (v9 = *(_QWORD *)&v57[1] == (_QWORD)v50) : (v9 = 0),
        !v9))
  {
    objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7, v32);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v11, (uint64_t)&v49, v12, v33);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v14, (uint64_t)v57, v15, 24);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v35 = v13;
      v36 = 2112;
      v37 = v16;
LABEL_13:
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilDoAES128CTR result mismatch. (output:%@, expected:%@).", buf, 0x16u);

LABEL_19:
    }
LABEL_20:
    v19 = 0;
    goto LABEL_21;
  }
  if (!StunUtilDoAES128CTR(*a1, &v47, 0x18uLL, &v38, &v32))
  {
    objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v30, (uint64_t)&v47, v31, 24);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v35 = v13;
    goto LABEL_18;
  }
  if (v32 != 24
    || (*(_QWORD *)&v46[0] == (_QWORD)v38 ? (v24 = *((_QWORD *)&v46[0] + 1) == *((_QWORD *)&v38 + 1)) : (v24 = 0),
        v24 ? (v25 = *(_QWORD *)&v46[1] == (_QWORD)v39) : (v25 = 0),
        !v25))
  {
    objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23, v32);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v26, (uint64_t)&v38, v27, v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v28, (uint64_t)v46, v29, 24);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v35 = v13;
    v36 = 2112;
    v37 = v16;
    goto LABEL_13;
  }
  objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilTestAES128CTRDec Success!", buf, 2u);
  }
  v19 = 1;
LABEL_21:

  return v19;
}

uint64_t StunUtilHasValidAttrLength(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = (uint64_t)a2 >> 63;
  if (__CFADD__(a1, a2))
    ++v3;
  v4 = ((v3 & 1) == 0) & ~(v3 << 63 >> 63 != v3);
  if (a1 + a2 <= a3)
    return v4;
  else
    return 0;
}

uint64_t sub_19BA68B74(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_setWithObject_(MEMORY[0x1E0C99E60], a2, a1, a3);
}

id sub_19BA68B84(uint64_t a1, const char *a2, double a3)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5[0] = MEMORY[0x1E0C9AAA0];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v5, a3, &v4, 1);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t IDSQRProtoParticipantUpdateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  IDSQRProtoMaterial *v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2)
        break;
      if ((_DWORD)v18 != 3)
      {
        if ((_DWORD)v18 == 16)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (1)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if ((v31 & 0x80) == 0)
              goto LABEL_56;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v28) = 0;
              goto LABEL_58;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_58:
          v38 = 44;
          goto LABEL_63;
        }
        goto LABEL_53;
      }
      v37 = objc_alloc_init(IDSQRProtoMaterial);
      objc_storeStrong((id *)(a1 + 32), v37);
      if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v37, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_64:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v18 == 1)
    {
      v32 = 0;
      v33 = 0;
      v28 = 0;
      while (1)
      {
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          break;
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
        *(_QWORD *)(a2 + v34) = v35 + 1;
        v28 |= (unint64_t)(v36 & 0x7F) << v32;
        if ((v36 & 0x80) == 0)
          goto LABEL_60;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v28) = 0;
          goto LABEL_62;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v28) = 0;
LABEL_62:
      v38 = 40;
LABEL_63:
      *(_DWORD *)(a1 + v38) = v28;
      goto LABEL_64;
    }
    if ((_DWORD)v18 == 2)
    {
      if (v16 == 2)
      {
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_33;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          PBRepeatedUInt64Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (1)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            break;
          v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 1;
          v41 |= (unint64_t)(v44 & 0x7F) << v39;
          if (v44 < 0)
          {
            v39 += 7;
            v14 = v40++ >= 9;
            if (!v14)
              continue;
          }
          goto LABEL_75;
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_75:
        PBRepeatedUInt64Add();
      }
      goto LABEL_64;
    }
LABEL_53:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
    goto LABEL_64;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoPropertyOverrideReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t result;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        if (v13 == -1 || v13 >= *(_QWORD *)(a2 + *v5))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          v11 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(_BYTE *)(a2 + *v6))
        v11 = 0;
LABEL_14:
      v17 = v11 & 7;
      if (v16 || (_DWORD)v17 == 4)
        break;
      v19 = (const char *)(v11 >> 3);
      switch((v11 >> 3))
      {
        case 0u:
          v20 = 0;
          do
          {
            v21 = *v4;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
              goto LABEL_64;
            }
            v23 = v22 + 1;
            v24 = *(char *)(*(_QWORD *)(a2 + *v8) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0)
              break;
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (2)
          {
            v30 = *v4;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
              *(_QWORD *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v15 = v28++ >= 9;
                if (v15)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_54:
          v46 = 8;
          goto LABEL_63;
        case 2u:
          objc_msgSend_clearOneofValuesForPropertyValue((void *)a1, v19, v17, a3);
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 12) = 1;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (2)
          {
            v36 = *v4;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v15 = v34++ >= 9;
                if (v15)
                {
                  v35 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v35 = 0;
LABEL_58:
          *(_BYTE *)(a1 + 28) = v35 != 0;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForPropertyValue((void *)a1, v19, v17, a3);
          *(_BYTE *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 12) = 2;
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v39;

          continue;
        case 4u:
          objc_msgSend_clearOneofValuesForPropertyValue((void *)a1, v19, v17, a3);
          v41 = 0;
          v42 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 12) = 3;
          *(_BYTE *)(a1 + 32) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v43 = *v4;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v5))
          break;
        v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v44);
        *(_QWORD *)(a2 + v43) = v44 + 1;
        v29 |= (unint64_t)(v45 & 0x7F) << v41;
        if ((v45 & 0x80) == 0)
          goto LABEL_60;
        v41 += 7;
        v15 = v42++ >= 9;
        if (v15)
        {
          LODWORD(v29) = 0;
          goto LABEL_62;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_60:
      if (*(_BYTE *)(a2 + *v6))
        LODWORD(v29) = 0;
LABEL_62:
      v46 = 24;
LABEL_63:
      *(_DWORD *)(a1 + v46) = v29;
LABEL_64:
      ;
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

void sub_19BA6D110(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BA6CE5CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19BA6D158(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "created %@ proto message %@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_19BA6E2EC(void *a1, void *a2, void *a3, unsigned int a4)
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  const char *v18;
  double v19;
  const char *v20;
  double v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  int v38;
  const char *v39;
  uint64_t v40;
  double v41;
  int v42;
  const char *v43;
  double v44;
  int v45;
  IDSQRProtoSubscribedStream *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  IDSQRProtoSubscribedStream *v50;
  void *v51;
  const char *v52;
  double v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t k;
  uint64_t v61;
  const char *v62;
  double v63;
  const char *v64;
  double v65;
  id obj;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  _BYTE v81[128];
  _BYTE v82[128];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v8 = a3;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v9, (uint64_t)&v76, 0.0, v82, 16);
  if (v10)
  {
    v14 = v10;
    v15 = *(_QWORD *)v77;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v77 != v15)
          objc_enumerationMutation(v7);
        v17 = objc_msgSend_unsignedShortValue(*(void **)(*((_QWORD *)&v76 + 1) + 8 * i), v11, v12, v13);
        objc_msgSend_addPublishedStreamIds_(v6, v18, v17, v19);
      }
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v11, (uint64_t)&v76, v13, v82, 16);
    }
    while (v14);
  }
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = v8;
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v72, v21, v81, 16);
  if (!v22)
    goto LABEL_33;
  v26 = v22;
  v27 = *(_QWORD *)v73;
  while (2)
  {
    for (j = 0; j != v26; ++j)
    {
      if (*(_QWORD *)v73 != v27)
        objc_enumerationMutation(obj);
      v29 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * j);
      objc_msgSend_participantID(v29, v23, v24, v25);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend_unsignedLongLongValue(v30, v31, v32, v33);

      v38 = objc_msgSend_anyParticipant(v29, v35, v36, v37);
      v42 = objc_msgSend_anyStream(v29, v39, v40, v41);
      v45 = v42;
      if (v38 && (v42 & 1) != 0)
      {
        objc_msgSend_setAllWildcardSubscription_(v6, v43, 1, v44);
        goto LABEL_33;
      }
      v46 = objc_alloc_init(IDSQRProtoSubscribedStream);
      v50 = v46;
      if ((v38 | v45) == 1)
      {
        objc_msgSend_setWildcardSubscription_(v46, v47, 1, v49);
        if ((v38 & 1) != 0)
        {
LABEL_17:
          if ((v45 & 1) != 0)
            goto LABEL_29;
          goto LABEL_21;
        }
      }
      else if ((v38 & 1) != 0)
      {
        goto LABEL_17;
      }
      objc_msgSend_setPeerParticipantId_(v50, v47, v34, v49);
      if ((v45 & 1) != 0)
        goto LABEL_29;
LABEL_21:
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      objc_msgSend_streamArray(v29, v47, v48, 0.0);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v68, v53, v80, 16);
      if (v54)
      {
        v58 = v54;
        v59 = *(_QWORD *)v69;
        do
        {
          for (k = 0; k != v58; ++k)
          {
            if (*(_QWORD *)v69 != v59)
              objc_enumerationMutation(v51);
            v61 = objc_msgSend_unsignedShortValue(*(void **)(*((_QWORD *)&v68 + 1) + 8 * k), v55, v56, v57);
            objc_msgSend_addPeerStreamIds_(v50, v62, v61, v63);
          }
          v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v55, (uint64_t)&v68, v57, v80, 16);
        }
        while (v58);
      }

LABEL_29:
      objc_msgSend_addSubscribedStreams_(v6, v47, (uint64_t)v50, v49);

    }
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v72, v25, v81, 16);
    if (v26)
      continue;
    break;
  }
LABEL_33:

  objc_msgSend_setMaxConcurrentStreams_(v6, v64, a4, v65);
}

void sub_19BA6E5E8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "_setupAllocbindRequest: materials: %@", (uint8_t *)&v7, 0xCu);
  }

}

void sub_19BA6F668(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "_setupPutmaterialRequest: materials: %@", (uint8_t *)&v7, 0xCu);
  }

}

void sub_19BA6FE14(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "created proto message %@ with %@", (uint8_t *)&v8, 0x16u);
  }

}

__CFDictionary *ProtoUtilProcessStreamInfo(void *a1, unsigned int a2, int a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  int v11;
  uint64_t v12;
  const char *v13;
  double v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  int *v20;
  NSObject *v21;
  const char *v22;
  double v23;
  uint64_t v24;
  unsigned __int16 v25;
  int v26;
  void *v27;
  BOOL v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  double v42;
  __CFArray *v43;
  uint64_t i;
  void *v45;
  int v46;
  const char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  double v53;
  int *v54;
  __CFArray *v55;
  uint64_t v56;
  unsigned __int16 v57;
  int v58;
  void *v59;
  BOOL v60;
  void *v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  double v65;
  void *v66;
  const char *v67;
  double v68;
  void *v69;
  NSObject *v70;
  const char *v71;
  double v72;
  void *v73;
  const char *v74;
  double v75;
  void *v76;
  uint64_t v78;
  uint64_t v79;
  __CFArray *v80;
  int v81;
  __CFDictionary *theDict;
  __CFArray *theArray;
  id obj;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint8_t v92[128];
  uint8_t buf[4];
  __CFArray *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  theDict = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (objc_msgSend_hasGenerationCounter(v4, v5, v6, v7))
  {
    v11 = a3;
    v12 = objc_msgSend_generationCounter(v4, v8, v9, v10);
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
      CFDictionarySetValue(theDict, CFSTR("stream-info-generation-counter"), v15);

    a3 = v11;
  }
  v16 = objc_msgSend_peerSubscribedStreamIdsCount(v4, v8, v9, v10);
  v20 = (int *)objc_msgSend_peerSubscribedStreamIds(v4, v17, v18, v19);
  v81 = a3;
  OSLogHandleForTransportCategory();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v94) = v16;
    _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "receive %d peer-sub-streams", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v78 = v16;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive %d peer-sub-streams"));
      if (_IDSShouldLog())
      {
        v78 = v16;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive %d peer-sub-streams"));
      }
    }
  }
  if ((int)v16 < 1)
  {
    theArray = 0;
  }
  else
  {
    theArray = 0;
    v24 = v16;
    do
    {
      v26 = *v20++;
      v25 = v26;
      if (theArray || (theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
      {
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v22, v25, v23, v78);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v27 == 0;

        if (!v28)
        {
          objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v22, v25, v23);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          CFArrayAppendValue(theArray, v29);

        }
      }
      else
      {
        theArray = 0;
      }
      --v24;
    }
    while (v24);
  }
  OSLogHandleForTransportCategory();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v94 = theArray;
    _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "processed peer-sub-stream: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v78 = (uint64_t)theArray;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("processed peer-sub-stream: %@."));
      if (_IDSShouldLog())
      {
        v78 = (uint64_t)theArray;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("processed peer-sub-stream: %@."));
      }
    }
  }
  v34 = objc_msgSend_peerPublishedStreamsCount(v4, v31, v32, v33, v78);
  OSLogHandleForTransportCategory();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v94) = v34;
    _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "receive %d peer-pub-streams", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v79 = v34;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive %d peer-pub-streams"));
      if (_IDSShouldLog())
      {
        v79 = v34;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive %d peer-pub-streams"));
      }
    }
  }
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  objc_msgSend_peerPublishedStreams(v4, v36, v37, 0.0, v79);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v88, v39, v92, 16);
  if (v87)
  {
    v43 = 0;
    v86 = *(_QWORD *)v89;
    do
    {
      for (i = 0; i != v87; ++i)
      {
        if (*(_QWORD *)v89 != v86)
          objc_enumerationMutation(obj);
        v45 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * i);
        v46 = objc_msgSend_peerStreamIdsCount(v45, v40, v41, v42);
        v50 = objc_msgSend_peerStreamIds(v45, v47, v48, v49);
        if (v46 < 1)
        {
          v55 = 0;
        }
        else
        {
          v54 = (int *)v50;
          v55 = 0;
          v56 = v46;
          do
          {
            v58 = *v54++;
            v57 = v58;
            if (v55 || (v55 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
            {
              objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v51, v57, v53);
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              v60 = v59 == 0;

              if (!v60)
              {
                objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v51, v57, v53);
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                CFArrayAppendValue(v55, v61);

              }
            }
            --v56;
          }
          while (v56);
        }
        v62 = (void *)MEMORY[0x1E0CB37E8];
        v63 = objc_msgSend_peerParticipantId(v45, v51, v52, v53);
        objc_msgSend_numberWithUnsignedLongLong_(v62, v64, v63, v65);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_streamWithParticipantID_streamArray_anyParticipant_anyStream_(IDSQRParticipantStreams, v67, (uint64_t)v66, v68, v55, 0, 0);
        v69 = (void *)objc_claimAutoreleasedReturnValue();

        if (v43 || (v43 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
        {
          if (v69)
            CFArrayAppendValue(v43, v69);
        }

      }
      v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v88, v42, v92, 16);
    }
    while (v87);
  }
  else
  {
    v43 = 0;
  }

  OSLogHandleForTransportCategory();
  v70 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v94 = v43;
    _os_log_impl(&dword_19B949000, v70, OS_LOG_TYPE_DEFAULT, "processed peer-pub-stream: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v80 = v43;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("processed peer-pub-stream: %@."));
      if (_IDSShouldLog())
      {
        v80 = v43;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("processed peer-pub-stream: %@."));
      }
    }
  }
  if (theArray)
    CFDictionarySetValue(theDict, CFSTR("stream-info-peer-subscribed-streams"), theArray);
  if (v43)
    CFDictionarySetValue(theDict, CFSTR("stream-info-peer-published-streams"), v43);
  objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v71, a2, v72, v80);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  if (v73)
    CFDictionarySetValue(theDict, CFSTR("gl-option-linkid"), v73);

  if (v81 >= 1)
  {
    objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v74, v81, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    if (v76)
      CFDictionarySetValue(theDict, CFSTR("gl-option-sessioninfo-link-id-to-query"), v76);

  }
  return theDict;
}

__CFArray *sub_19BA70B3C(int a1, const char *a2, double a3)
{
  uint64_t *v3;
  __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  if (a1 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = (uint64_t *)a2;
    v4 = 0;
    v5 = a1;
    do
    {
      v7 = *v3++;
      v6 = v7;
      if (v4 || (v4 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8])) != 0)
      {
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, v6, a3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (v8)
        {
          objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, v6, a3);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          CFArrayAppendValue(v4, v9);

        }
      }
      --v5;
    }
    while (v5);
  }
  return v4;
}

id ProtoUtilProcessLightweightParticipants(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  int v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  double v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v5 = objc_msgSend_lightweightParticipantIdListsCount(v1, v2, v3, v4);
  v9 = (const char *)objc_msgSend_lightweightParticipantIdLists(v1, v6, v7, v8);
  sub_19BA70B3C(v5, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForTransportCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v15 = v5;
    v16 = 2112;
    v17 = v11;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "received %d lightweight participants: %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("received %d lightweight participants: %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("received %d lightweight participants: %@"));
    }
  }

  return v11;
}

__CFArray *sub_19BA70D60(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  const char *v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  double v32;
  unint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  double v41;
  BOOL v42;
  const char *v43;
  uint64_t v44;
  double v45;
  id obj;
  uint64_t v48;
  id v49;
  __CFArray *theArray;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v49 = a2;
  v6 = a3;
  theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  obj = v5;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v55, v8, v60, 16);
  if (v9)
  {
    v10 = v9;
    v48 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v56 != v48)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v13 = v49;
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v51, v15, v59, 16);
        if (v16)
        {
          v20 = v16;
          v21 = 0;
          v22 = *(_QWORD *)v52;
          do
          {
            for (j = 0; j != v20; ++j)
            {
              if (*(_QWORD *)v52 != v22)
                objc_enumerationMutation(v13);
              v24 = objc_msgSend_unsignedLongLongValue(*(void **)(*((_QWORD *)&v51 + 1) + 8 * j), v17, v18, v19);
              v21 |= v24 == objc_msgSend_participantId(v12, v25, v26, v27);
            }
            v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v51, v19, v59, 16);
          }
          while (v20);
        }
        else
        {
          v21 = 0;
        }

        if (objc_msgSend_count(v6, v28, v29, v30))
        {
          v33 = 0;
          do
          {
            objc_msgSend_objectAtIndexedSubscript_(v6, v31, v33, v32);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend_unsignedLongLongValue(v34, v35, v36, v37);
            v42 = v38 == objc_msgSend_participantId(v12, v39, v40, v41);

            v21 |= v42;
            ++v33;
          }
          while (objc_msgSend_count(v6, v43, v44, v45) > v33);
        }
        if ((v21 & 1) == 0 && theArray && v12)
          CFArrayAppendValue(theArray, v12);
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v55, v32, v60, 16);
    }
    while (v10);
  }

  return theArray;
}

CFMutableDictionaryRef ProtoUtilProcessLeftParticipants(void *a1, void *a2, void *a3)
{
  void *v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  __CFArray *v22;
  id v23;
  const char *v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  void *v34;
  const char *v35;
  double v36;
  void *v37;
  const char *v38;
  double v39;
  id obj;
  uint64_t v42;
  CFMutableDictionaryRef Mutable;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  sub_19BA70D60(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = v3;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v48, v5, v53, 16);
  if (v6)
  {
    v10 = v6;
    v42 = *(_QWORD *)v49;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v49 != v42)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
        v13 = objc_msgSend_participantId(v12, v7, v8, v9);
        objc_msgSend_clientContextBlob(v12, v14, v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_materialInfos(v17, v18, v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v23 = v21;
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v44, v25, v52, 16);
        if (v26)
        {
          v30 = v26;
          v31 = *(_QWORD *)v45;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(_QWORD *)v45 != v31)
                objc_enumerationMutation(v23);
              objc_msgSend_materialContent(*(void **)(*((_QWORD *)&v44 + 1) + 8 * j), v27, v28, v29);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = v33;
              if (v22 && v33)
                CFArrayAppendValue(v22, v33);

            }
            v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v44, v29, v52, 16);
          }
          while (v30);
        }

        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v35, v13, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(Mutable, v38, (uint64_t)v22, v39, v37);

      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v48, v9, v53, 16);
    }
    while (v10);
  }

  return Mutable;
}

__CFArray *sub_19BA7120C(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  const char *v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  double v32;
  unint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  double v41;
  BOOL v42;
  const char *v43;
  uint64_t v44;
  double v45;
  id obj;
  uint64_t v48;
  id v49;
  __CFArray *theArray;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v49 = a2;
  v6 = a3;
  theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  obj = v5;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v55, v8, v60, 16);
  if (v9)
  {
    v10 = v9;
    v48 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v56 != v48)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v13 = v49;
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v51, v15, v59, 16);
        if (v16)
        {
          v20 = v16;
          v21 = 0;
          v22 = *(_QWORD *)v52;
          do
          {
            for (j = 0; j != v20; ++j)
            {
              if (*(_QWORD *)v52 != v22)
                objc_enumerationMutation(v13);
              v24 = objc_msgSend_unsignedLongLongValue(*(void **)(*((_QWORD *)&v51 + 1) + 8 * j), v17, v18, v19);
              v21 |= v24 == objc_msgSend_participantId(v12, v25, v26, v27);
            }
            v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v51, v19, v59, 16);
          }
          while (v20);
        }
        else
        {
          v21 = 0;
        }

        if (objc_msgSend_count(v6, v28, v29, v30))
        {
          v33 = 0;
          do
          {
            objc_msgSend_objectAtIndexedSubscript_(v6, v31, v33, v32);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend_unsignedLongLongValue(v34, v35, v36, v37);
            v42 = v38 == objc_msgSend_participantId(v12, v39, v40, v41);

            v21 |= v42;
            ++v33;
          }
          while (objc_msgSend_count(v6, v43, v44, v45) > v33);
        }
        if ((v21 & 1) != 0 && theArray && v12)
          CFArrayAppendValue(theArray, v12);
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v55, v32, v60, 16);
    }
    while (v10);
  }

  return theArray;
}

CFMutableDictionaryRef ProtoUtilProcessjoinedParticipants(void *a1, void *a2, void *a3)
{
  void *v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  void *v21;
  __CFArray *v22;
  id v23;
  const char *v24;
  double v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  void *v34;
  const char *v35;
  double v36;
  void *v37;
  const char *v38;
  double v39;
  id obj;
  uint64_t v42;
  CFMutableDictionaryRef Mutable;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  sub_19BA7120C(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = v3;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v48, v5, v53, 16);
  if (v6)
  {
    v10 = v6;
    v42 = *(_QWORD *)v49;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v49 != v42)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
        v13 = objc_msgSend_participantId(v12, v7, v8, v9);
        objc_msgSend_clientContextBlob(v12, v14, v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_materialInfos(v17, v18, v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v23 = v21;
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v44, v25, v52, 16);
        if (v26)
        {
          v30 = v26;
          v31 = *(_QWORD *)v45;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(_QWORD *)v45 != v31)
                objc_enumerationMutation(v23);
              objc_msgSend_materialContent(*(void **)(*((_QWORD *)&v44 + 1) + 8 * j), v27, v28, v29);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = v33;
              if (v22 && v33)
                CFArrayAppendValue(v22, v33);

            }
            v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v44, v29, v52, 16);
          }
          while (v30);
        }

        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v35, v13, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(Mutable, v38, (uint64_t)v22, v39, v37);

      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v48, v9, v53, 16);
    }
    while (v10);
  }

  return Mutable;
}

id ProtoUtilProcessActiveParticipantsFromInfo(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  int active;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  double v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  active = objc_msgSend_activeParticipantsCount(v1, v2, v3, v4);
  v9 = (const char *)objc_msgSend_activeParticipants(v1, v6, v7, v8);
  sub_19BA70B3C(active, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForTransportCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v15 = active;
    v16 = 2112;
    v17 = v11;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "received %d active participants: %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("received %d active participants: %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("received %d active participants: %@"));
    }
  }

  return v11;
}

id ProtoUtilProcessActiveLightweightParticipantsFromInfo(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  int active;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  double v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  active = objc_msgSend_activeLightweightParticipantsCount(v1, v2, v3, v4);
  v9 = (const char *)objc_msgSend_activeLightweightParticipants(v1, v6, v7, v8);
  sub_19BA70B3C(active, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForTransportCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v15 = active;
    v16 = 2112;
    v17 = v11;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "received %d active lightweight participants: %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("received %d active lightweight participants: %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("received %d active lightweight participants: %@"));
    }
  }

  return v11;
}

__CFDictionary *ProtoUtilProcessParticipantUpdate(void *a1, int a2, int a3)
{
  id v5;
  __CFDictionary *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  unsigned __int16 v17;
  const char *v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  uint64_t *v28;
  const char *v29;
  __CFArray *i;
  double v31;
  void *v32;
  void *v33;
  NSObject *v34;
  __CFArray *v35;
  const char *v36;
  double v37;
  unsigned __int16 v38;
  NSObject *v39;
  void *v40;
  __CFArray *v42;
  uint8_t buf[4];
  __CFArray *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v10 = objc_msgSend_sessionStateCounter(v5, v7, v8, v9);
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v11, v10, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    CFDictionarySetValue(v6, CFSTR("ids-stun-attribute-session-state-counter"), v13);

  v17 = objc_msgSend_operationFlags(v5, v14, v15, v16);
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v18, v17, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
    CFDictionarySetValue(v6, CFSTR("ids-stun-attribute-session-state-type"), v20);

  v24 = objc_msgSend_participantIdListsCount(v5, v21, v22, v23);
  v28 = (uint64_t *)objc_msgSend_participantIdLists(v5, v25, v26, v27);
  for (i = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]); v24; --v24)
  {
    if (i)
    {
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v29, *v28, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (v32)
      {
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v29, *v28, v31);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        CFArrayAppendValue(i, v33);

      }
    }
    ++v28;
  }
  OSLogHandleForTransportCategory();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v44 = i;
    _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "receive participantIDs: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v42 = i;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive participantIDs: %@"));
      if (_IDSShouldLog())
      {
        v42 = i;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive participantIDs: %@"));
      }
    }
  }
  v35 = i;
  if (v35)
  {
    CFDictionarySetValue(v6, CFSTR("ids-stun-attribute-enc-ParticipantIDs"), v35);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF812C();
  }

  if (a2)
  {
    v38 = 4;
  }
  else if ((a3 - 7) >= 3)
  {
    OSLogHandleForTransportCategory();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v44 = (__CFArray *)a3;
      _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "ProtoUtilProcessParticipantUpdate: unknown messageType: %ld", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v42 = (__CFArray *)a3;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("ProtoUtilProcessParticipantUpdate: unknown messageType: %ld"));
        if (_IDSShouldLog())
        {
          v42 = (__CFArray *)a3;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("ProtoUtilProcessParticipantUpdate: unknown messageType: %ld"));
        }
      }
    }
    v38 = 0;
  }
  else
  {
    v38 = (2 * (a3 - 7)) | 1;
  }
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v36, v38, v37, v42);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  if (v40)
  {
    CFDictionarySetValue(v6, CFSTR("ids-stun-message-type"), v40);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_19BAF80A8();
  }

  return v6;
}

void sub_19BA71E64()
{
  IDSStunRelayInterfaceInfoController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSStunRelayInterfaceInfoController);
  v1 = (void *)qword_1ECDD4818;
  qword_1ECDD4818 = (uint64_t)v0;

}

uint64_t IDSQRProtoGoAwayIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
LABEL_39:
        v32 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_50;
      }
      if ((_DWORD)v17 != 15)
      {
LABEL_40:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
      }
      v20 = 0;
      v21 = 0;
      v22 = 0;
      *(_BYTE *)(a1 + 40) |= 1u;
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_43;
        v20 += 7;
        v14 = v21++ >= 9;
        if (v14)
        {
          v22 = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        v22 = 0;
LABEL_45:
      *(_QWORD *)(a1 + 8) = v22;
LABEL_50:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 1)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_47;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v28) = 0;
          goto LABEL_49;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v28) = 0;
LABEL_49:
      *(_DWORD *)(a1 + 16) = v28;
      goto LABEL_50;
    }
    if ((_DWORD)v17 != 2)
      goto LABEL_40;
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 24;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoInfoInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19BA75480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_19BA7561C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  Class result;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!qword_1EE40AF60)
  {
    v10 = xmmword_1E3C212A8;
    v11 = 0;
    qword_1EE40AF60 = _sl_dlopen();
  }
  if (!qword_1EE40AF60)
    sub_19BAF8540(&v9, a2, a3, a4);
  result = objc_getClass("KTVerifierResult");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_19BAF85BC(v8, (uint64_t)result, v6, v7);
  qword_1EE40AF70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t IDSQRProtoAllocBindResponseReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  IDSQRProtoPeerPublishedStream *v26;
  const char *v27;
  double v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  void *v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  const char *v53;
  double v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  const char *v60;
  double v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  const char *v72;
  double v73;
  double v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_61;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_109:
        v75 = 64;
        goto LABEL_130;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 136;
        goto LABEL_61;
      case 4u:
        v26 = objc_alloc_init(IDSQRProtoPeerPublishedStream);
        objc_msgSend_addPeerPublishedStreams_(a1, v27, (uint64_t)v26, v28);
        if (!PBReaderPlaceMark() || (IDSQRProtoPeerPublishedStreamReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_153;
        goto LABEL_104;
      case 5u:
        if (v16 != 2)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          while (1)
          {
            v79 = *v3;
            v80 = *(_QWORD *)(a2 + v79);
            if (v80 == -1 || v80 >= *(_QWORD *)(a2 + *v4))
              break;
            v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v80);
            *(_QWORD *)(a2 + v79) = v80 + 1;
            v78 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              v14 = v77++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_148;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_148:
          PBRepeatedUInt32Add();
          goto LABEL_131;
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_43;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          PBRepeatedUInt32Add();
        }
        goto LABEL_105;
      case 6u:
        v36 = 0;
        v37 = 0;
        v22 = 0;
        a1[144] |= 4u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 1;
            v22 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_113:
        v75 = 84;
        goto LABEL_130;
      case 7u:
        v41 = 0;
        v42 = 0;
        v22 = 0;
        a1[144] |= 1u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v22 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              v14 = v42++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_117:
        v75 = 68;
        goto LABEL_130;
      case 9u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 120;
LABEL_61:
        v46 = *(void **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;

        goto LABEL_131;
      case 0xAu:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            while (1)
            {
              v50 = *v3;
              v51 = *(_QWORD *)(a2 + v50);
              if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
                break;
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v49 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                v14 = v48++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_74;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
            PBRepeatedUInt64Add();
          }
LABEL_105:
          PBReaderRecallMark();
        }
        else
        {
          v82 = 0;
          v83 = 0;
          v84 = 0;
          while (1)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
              break;
            v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v86);
            *(_QWORD *)(a2 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              v14 = v83++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_150;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_150:
          PBRepeatedUInt64Add();
        }
        goto LABEL_131;
      case 0xBu:
        v26 = objc_alloc_init(IDSQRProtoQuicConnectionInfo);
        objc_msgSend_addQuicConnectionInfo_(a1, v53, (uint64_t)v26, v54);
        if (!PBReaderPlaceMark() || (IDSQRProtoQuicConnectionInfoReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_153;
        goto LABEL_104;
      case 0xCu:
        v55 = 0;
        v56 = 0;
        v22 = 0;
        a1[144] |= 8u;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v22 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              v14 = v56++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_121:
        v75 = 96;
        goto LABEL_130;
      case 0xFu:
        v26 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v60, (uint64_t)v26, v61);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v26, a2) & 1) == 0)
          goto LABEL_153;
        goto LABEL_104;
      case 0x10u:
        v62 = 0;
        v63 = 0;
        v22 = 0;
        a1[144] |= 2u;
        while (2)
        {
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 1;
            v22 |= (unint64_t)(v66 & 0x7F) << v62;
            if (v66 < 0)
            {
              v62 += 7;
              v14 = v63++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_125:
        v75 = 80;
        goto LABEL_130;
      case 0x11u:
        v67 = 0;
        v68 = 0;
        v22 = 0;
        a1[144] |= 0x10u;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v22 |= (unint64_t)(v71 & 0x7F) << v67;
            if (v71 < 0)
            {
              v67 += 7;
              v14 = v68++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_129:
        v75 = 128;
LABEL_130:
        *(_DWORD *)&a1[v75] = v22;
        goto LABEL_131;
      case 0x19u:
        v26 = objc_alloc_init(IDSQRProtoChannelExperiment);
        objc_msgSend_addActiveExperiments_(a1, v72, (uint64_t)v26, v73);
        if (PBReaderPlaceMark() && (IDSQRProtoChannelExperimentReadFrom((uint64_t)v26, a2, v74) & 1) != 0)
        {
LABEL_104:
          PBReaderRecallMark();

LABEL_131:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_153:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_131;
    }
  }
}

uint64_t sub_19BA7A8D0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_event_time_, *(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

id sub_19BA7D1F0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  double v13;
  void *v14;

  v5 = (void *)MEMORY[0x1E0D36AF0];
  objc_msgSend_ephemeralSessionConfiguration(MEMORY[0x1E0CB39F8], a2, a3, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 32);
  v11 = objc_msgSend_requiresIDSHost(*(void **)(a1 + 40), v8, v9, v10);
  objc_msgSend_sessionWithConfiguration_queue_requiresIDSHost_(v5, v12, (uint64_t)v6, v13, v7, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

id sub_19BA7D25C(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  const char *v5;
  double v6;
  void *v7;

  v2 = (objc_class *)MEMORY[0x1E0D36A08];
  v3 = a2;
  v4 = [v2 alloc];
  v7 = (void *)objc_msgSend_initWithRemoteHost_delegate_(v4, v5, 0, v6, v3);

  return v7;
}

void sub_19BA7D2A4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  os_unfair_lock_s *WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained(v2);
  sub_19BA7D2F4(WeakRetained, v3, 1, 1);

}

void sub_19BA7D2F4(os_unfair_lock_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  id v9;
  double v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  const char *v33;
  double v34;
  id v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  id v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  os_unfair_lock_s *v55;
  __int16 v56;
  NSObject *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if (a1)
  {
    objc_msgSend_queue(a1, v7, v8, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v11);

    if (v9)
    {
      if ((_DWORD)a3)
        a3 = _IDSRunningInDaemon();
      objc_msgSend_validator(a1, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = 0;
      objc_msgSend_trustedContentsFromRawContents_shouldReport_withError_(v15, v16, (uint64_t)v9, v17, a3, &v51);
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = v51;

      if (!v18 || v19)
      {
        objc_msgSend_config(a1, v20, v21, v22);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logCategory(v46, v47, v48, v49);
        v28 = objc_claimAutoreleasedReturnValue();

        if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
        {
          v50 = objc_opt_class();
          *(_DWORD *)buf = 138412802;
          v53 = v50;
          v54 = 2048;
          v55 = a1;
          v56 = 2112;
          v57 = v19;
          _os_log_impl(&dword_19B949000, (os_log_t)v28, OS_LOG_TYPE_DEFAULT, "<%@:%p> content update not validated {cacheValidationError: %@}", buf, 0x20u);
        }
      }
      else
      {
        os_unfair_lock_lock(a1 + 2);
        objc_msgSend_setLoadedRawContents_(a1, v23, (uint64_t)v9, v24);
        objc_msgSend_contentsUpdatedBlock(a1, v25, v26, v27);
        v28 = objc_claimAutoreleasedReturnValue();
        os_unfair_lock_unlock(a1 + 2);
        if (!a4)
        {
          objc_msgSend_cacheLoader(a1, v29, v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = (id)objc_msgSend_writeRawContents_(v32, v33, (uint64_t)v9, v34);

        }
        if (v28)
          (*(void (**)(uint64_t, NSObject *, uint64_t))(v28 + 16))(v28, v18, a4);
        objc_msgSend_config(a1, v29, v30, v31);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_logCategory(v36, v37, v38, v39);
        v40 = objc_claimAutoreleasedReturnValue();

        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = objc_opt_class();
          *(_DWORD *)buf = 138412802;
          v53 = v41;
          v54 = 2048;
          v55 = a1;
          v56 = 2112;
          v57 = v18;
          _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "<%@:%p> content update loaded {loadedContents: %@}", buf, 0x20u);
        }

      }
    }
    else
    {
      objc_msgSend_config(a1, v12, v13, v14);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_logCategory(v42, v43, v44, v45);
      v19 = objc_claimAutoreleasedReturnValue();

      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        sub_19BAF8BCC((uint64_t)a1, v19);
    }

  }
}

void sub_19BA7D5AC(uint64_t a1)
{
  const char *v1;
  double v2;
  id v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (id)objc_msgSend_updateContentsIfPossibleShouldForce_(WeakRetained, v1, 0, v2);

}

void sub_19BA7D86C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  double v7;
  _QWORD v8[5];
  id v9;
  id location;

  location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend_networkLoader(*(void **)(a1 + 32), v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19BA7D940;
  v8[3] = &unk_1E3C21388;
  v8[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v9, &location);
  objc_msgSend_loadBagIfPossibleWithCompletion_(v5, v6, (uint64_t)v8, v7);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void sub_19BA7D91C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19BA7D940(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  double v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  NSObject *v16;
  os_unfair_lock_s *WeakRetained;

  v5 = a2;
  v8 = a3;
  if (v8)
  {
    v11 = *(void **)(a1 + 32);
    v10 = (uint64_t *)(a1 + 32);
    objc_msgSend_config(v11, v6, v7, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logCategory(v12, v13, v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_19BAF8C64(v10, (uint64_t)v8, v16);

  }
  else
  {
    WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 40));
    sub_19BA7D2F4(WeakRetained, v5, 1, 0);

  }
}

uint64_t IDSQRProtoSessionInfoResponseReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  int *v21;
  int *v22;
  int *v23;
  IDSQRProtoPeerPublishedStream *v24;
  const char *v25;
  double v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___IDSStunMessage__transactionID;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    v9 = &OBJC_IVAR___IDSStunMessage__transactionID;
    v10 = &OBJC_IVAR___IDSStunMessage__transactionID;
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *v3;
        v15 = *(_QWORD *)(a2 + v14);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v4))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v15);
        *(_QWORD *)(a2 + v14) = v15 + 1;
        v13 |= (unint64_t)(v16 & 0x7F) << v11;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v11 += 7;
        v17 = v12++ >= 9;
        if (v17)
        {
          v13 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v13 = 0;
LABEL_14:
      v19 = v13 & 7;
      if (v18 || v19 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v13 >> 3))
      {
        case 1u:
          v21 = v10;
          v22 = v9;
          v23 = v7;
          v24 = objc_alloc_init(IDSQRProtoPeerPublishedStream);
          objc_msgSend_addPeerPublishedStreams_(a1, v25, (uint64_t)v24, v26);
          if (PBReaderPlaceMark() && (IDSQRProtoPeerPublishedStreamReadFrom((uint64_t)v24, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            v7 = v23;
            v9 = v22;
            v10 = v21;
            goto LABEL_75;
          }

          return 0;
        case 2u:
          if (v19 != 2)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            while (1)
            {
              v55 = *v3;
              v56 = *(_QWORD *)(a2 + v55);
              if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
                break;
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v17 = v53++ >= 9;
                if (!v17)
                  continue;
              }
              goto LABEL_92;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_92:
            PBRepeatedUInt32Add();
            goto LABEL_75;
          }
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            while (1)
            {
              v37 = *v3;
              v38 = *(_QWORD *)(a2 + v37);
              if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                break;
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                v17 = v35++ >= 9;
                if (!v17)
                  continue;
              }
              goto LABEL_42;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
            PBRepeatedUInt32Add();
          }
          goto LABEL_65;
        case 3u:
          if (v19 == 2)
          {
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v40 = 0;
              v41 = 0;
              v42 = 0;
              while (1)
              {
                v43 = *v3;
                v44 = *(_QWORD *)(a2 + v43);
                if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
                  break;
                v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v44);
                *(_QWORD *)(a2 + v43) = v44 + 1;
                v42 |= (unint64_t)(v45 & 0x7F) << v40;
                if (v45 < 0)
                {
                  v40 += 7;
                  v17 = v41++ >= 9;
                  if (!v17)
                    continue;
                }
                goto LABEL_55;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
              PBRepeatedUInt64Add();
            }
LABEL_65:
            PBReaderRecallMark();
          }
          else
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            while (1)
            {
              v61 = *v3;
              v62 = *(_QWORD *)(a2 + v61);
              if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
                break;
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v62);
              *(_QWORD *)(a2 + v61) = v62 + 1;
              v60 |= (unint64_t)(v63 & 0x7F) << v58;
              if (v63 < 0)
              {
                v58 += 7;
                v17 = v59++ >= 9;
                if (!v17)
                  continue;
              }
              goto LABEL_94;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_94:
            PBRepeatedUInt64Add();
          }
          goto LABEL_75;
        case 4u:
          v46 = 0;
          v47 = 0;
          v29 = 0;
          a1[v7[620]] |= 1u;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v29 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                v17 = v47++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_73;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v29) = 0;
LABEL_73:
          v51 = 56;
          goto LABEL_74;
        default:
          if ((v13 >> 3) == 16)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            a1[v7[620]] |= 2u;
            while (1)
            {
              v30 = *v3;
              v31 = *(_QWORD *)(a2 + v30);
              if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
                break;
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
              *(_QWORD *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if ((v32 & 0x80) == 0)
                goto LABEL_67;
              v27 += 7;
              v17 = v28++ >= 9;
              if (v17)
              {
                LODWORD(v29) = 0;
                goto LABEL_69;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v29) = 0;
LABEL_69:
            v51 = 60;
LABEL_74:
            *(_DWORD *)&a1[v51] = v29;
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            return 0;
          }
LABEL_75:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoExperimentOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 5)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v24;

      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_43;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v28 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_45:
        *(_BYTE *)(a1 + 24) = v28 != 0;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_41:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoErrorIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t result;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 48) |= 2u;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)(a2 + v20);
                if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0)
                  goto LABEL_47;
                v17 += 7;
                v14 = v18++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_49;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v19) = 0;
LABEL_49:
              v38 = 16;
              goto LABEL_58;
            case 2u:
              v29 = 0;
              v30 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 48) |= 4u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v19 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v19) = 0;
                      goto LABEL_57;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v19) = 0;
LABEL_57:
              v38 = 32;
LABEL_58:
              *(_DWORD *)(a1 + v38) = v19;
              goto LABEL_59;
            case 3u:
              PBReaderReadString();
              v34 = objc_claimAutoreleasedReturnValue();
              v35 = 40;
              goto LABEL_43;
            case 4u:
              PBReaderReadString();
              v34 = objc_claimAutoreleasedReturnValue();
              v35 = 24;
LABEL_43:
              v36 = *(void **)(a1 + v35);
              *(_QWORD *)(a1 + v35) = v34;

              goto LABEL_59;
            default:
              if ((v10 >> 3) == 15)
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                *(_BYTE *)(a1 + 48) |= 1u;
                while (1)
                {
                  v26 = *v3;
                  v27 = *(_QWORD *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0)
                    goto LABEL_51;
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    v25 = 0;
                    goto LABEL_53;
                  }
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
                if (*(_BYTE *)(a2 + *v5))
                  v25 = 0;
LABEL_53:
                *(_QWORD *)(a1 + 8) = v25;
              }
              else
              {
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
              }
LABEL_59:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoPutMaterialErrorIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  IDSQRProtoMaterialOwner *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(IDSQRProtoMaterialOwner);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialOwnerReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoMaterialOwnerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
                break;
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_39;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
              break;
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_55;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedInt32Add();
        }
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_43;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v20;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BA85D58(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  const char *v6;
  double v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v6, *(_QWORD *)(a1 + 40), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138412546;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "self participant-id: %@, all participant-ids:%@.", (uint8_t *)&v10, 0x16u);

  }
}

uint64_t IDSQRProtoAllocBindRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  IDSQRProtoSubscribedStream *v39;
  const char *v40;
  double v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  const char *v63;
  double v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  const char *v75;
  double v76;
  void *v77;
  const char *v78;
  double v79;
  double v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 172) |= 0x20u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_114;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_116;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_114:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_116:
        v81 = 128;
        goto LABEL_145;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 72;
        goto LABEL_104;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 64;
        goto LABEL_104;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 172) |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_120:
        *(_QWORD *)(a1 + 32) = v28;
        goto LABEL_146;
      case 5u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            while (1)
            {
              v36 = *v3;
              v37 = *(_QWORD *)(a2 + v36);
              if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                break;
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_47;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v82 = 0;
          v83 = 0;
          v84 = 0;
          while (1)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
              break;
            v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v86);
            *(_QWORD *)(a2 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              v14 = v83++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_157;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_157:
          PBRepeatedUInt32Add();
        }
        goto LABEL_146;
      case 6u:
        v39 = objc_alloc_init(IDSQRProtoSubscribedStream);
        objc_msgSend_addSubscribedStreams_((void *)a1, v40, (uint64_t)v39, v41);
        if (!PBReaderPlaceMark() || (IDSQRProtoSubscribedStreamReadFrom((uint64_t)v39, a2) & 1) == 0)
          goto LABEL_160;
        goto LABEL_112;
      case 7u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 172) |= 0x80u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_124:
        *(_BYTE *)(a1 + 168) = v44 != 0;
        goto LABEL_146;
      case 8u:
        v48 = 0;
        v49 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 172) |= 4u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v20 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_128:
        v81 = 88;
        goto LABEL_145;
      case 9u:
        v53 = 0;
        v54 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 172) |= 2u;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v20 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_132:
        v81 = 48;
        goto LABEL_145;
      case 0xAu:
        v58 = 0;
        v59 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 172) |= 8u;
        while (2)
        {
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v61 + 1;
            v20 |= (unint64_t)(v62 & 0x7F) << v58;
            if (v62 < 0)
            {
              v58 += 7;
              v14 = v59++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_136:
        v81 = 92;
        goto LABEL_145;
      case 0xBu:
        v39 = objc_alloc_init(IDSQRProtoQuicConnectionInfo);
        objc_msgSend_addQuicConnectionInfo_((void *)a1, v63, (uint64_t)v39, v64);
        if (!PBReaderPlaceMark() || (IDSQRProtoQuicConnectionInfoReadFrom((uint64_t)v39, a2) & 1) == 0)
          goto LABEL_160;
        goto LABEL_112;
      case 0xCu:
        v65 = 0;
        v66 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 172) |= 0x40u;
        while (2)
        {
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
            *(_QWORD *)(a2 + v67) = v68 + 1;
            v20 |= (unint64_t)(v69 & 0x7F) << v65;
            if (v69 < 0)
            {
              v65 += 7;
              v14 = v66++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_140:
        v81 = 144;
        goto LABEL_145;
      case 0xDu:
        v39 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 56), v39);
        goto LABEL_98;
      case 0xEu:
        v70 = 0;
        v71 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 172) |= 0x10u;
        while (2)
        {
          v72 = *v3;
          v73 = *(_QWORD *)(a2 + v72);
          if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
            *(_QWORD *)(a2 + v72) = v73 + 1;
            v20 |= (unint64_t)(v74 & 0x7F) << v70;
            if (v74 < 0)
            {
              v70 += 7;
              v14 = v71++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_144:
        v81 = 112;
LABEL_145:
        *(_DWORD *)(a1 + v81) = v20;
        goto LABEL_146;
      case 0xFu:
        v39 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_((void *)a1, v75, (uint64_t)v39, v76);
LABEL_98:
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v39, a2) & 1) == 0)
          goto LABEL_160;
        goto LABEL_112;
      case 0x10u:
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 104;
        goto LABEL_104;
      case 0x11u:
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 40;
        goto LABEL_104;
      case 0x12u:
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 120;
LABEL_104:
        v77 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_146;
      case 0x19u:
        v39 = objc_alloc_init(IDSQRProtoAllocBindTestOption);
        objc_storeStrong((id *)(a1 + 160), v39);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindTestOptionReadFrom(v39, a2) & 1) == 0)
          goto LABEL_160;
        goto LABEL_112;
      case 0x1Au:
        v39 = objc_alloc_init(IDSQRProtoSessionExperiment);
        objc_msgSend_addSessionExperiments_((void *)a1, v78, (uint64_t)v39, v79);
        if (PBReaderPlaceMark() && (IDSQRProtoSessionExperimentReadFrom((uint64_t)v39, a2, v80) & 1) != 0)
        {
LABEL_112:
          PBReaderRecallMark();

LABEL_146:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_160:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_146;
    }
  }
}

uint64_t IDSQRProtoPutMaterialMaterialsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IDSQRProtoMaterial *v17;
  const char *v18;
  double v19;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19BA8A254(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  _IMLogString_V();
  v8 = _IMLogEventString_V();

  return v8;
}

uint64_t _IDSLog(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  if (IMShouldLog())
    v9 = _IMLogString_V();
  else
    v9 = 0;
  if (_IMWillLog())
    _IMAlwaysLogV();

  return v9;
}

uint64_t _IDSShouldLog()
{
  return IMShouldLog();
}

uint64_t _IDSWarn()
{
  _IMAlwaysLogV();
  return 1;
}

uint64_t _IDSLogEvent(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;

  v5 = a2;
  v6 = a3;
  v7 = sub_19BA8A254(a1, v5, v6);
  if (_IMWillLog())
    _IMAlwaysLogV();

  return v7;
}

uint64_t _IDSLogV(uint64_t a1, void *a2, void *a3, void *a4)
{
  return _IDSLog(a1, a2, a3, a4);
}

uint64_t _IDSWarnV()
{
  _IMAlwaysLogV();
  return 1;
}

uint64_t _IDSLogEventV(void *a1, void *a2, void *a3)
{
  return _IDSLogEvent(a1, a2, a3);
}

uint64_t _IDSLogTransport_V(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (IMShouldLog())
    v8 = _IMLogString_V();
  else
    v8 = 0;

  return v8;
}

uint64_t _IDSShouldLogTransport()
{
  return IMShouldLog();
}

uint64_t _IDSLogTransport(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (IMShouldLog())
    v8 = _IMLogString_V();
  else
    v8 = 0;

  return v8;
}

uint64_t _IDSIsLoggingProfileInstalled()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;

  IMCopyAppValueForKey();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0)
    v4 = objc_msgSend_BOOLValue(v0, v1, v2, v3);
  else
    v4 = 0;

  return v4;
}

void sub_19BA8A758()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "CloudKit");
  v1 = (void *)qword_1EE40B270;
  qword_1EE40B270 = (uint64_t)v0;

}

void sub_19BA8A7C8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "accountIdentity");
  v1 = (void *)qword_1EE40AA88;
  qword_1EE40AA88 = (uint64_t)v0;

}

void sub_19BA8A838()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "groupCrypto");
  v1 = (void *)qword_1EE40B280;
  qword_1EE40B280 = (uint64_t)v0;

}

void sub_19BA8A868()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Delivery");
  v1 = (void *)qword_1EE40AA98;
  qword_1EE40AA98 = (uint64_t)v0;

}

void sub_19BA8A8D8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Delivery-oversized");
  v1 = (void *)qword_1EE40AAA8;
  qword_1EE40AAA8 = (uint64_t)v0;

}

void sub_19BA8A948()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Delivery-KeyTransparency");
  v1 = (void *)qword_1EE40ADC0;
  qword_1EE40ADC0 = (uint64_t)v0;

}

void sub_19BA8A9B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDQuery");
  v1 = (void *)qword_1EE40B290;
  qword_1EE40B290 = (uint64_t)v0;

}

void sub_19BA8AA28()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "UTunPeer");
  v1 = (void *)qword_1EE40AE60;
  qword_1EE40AE60 = (uint64_t)v0;

}

void sub_19BA8AA98()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "UTunConnection");
  v1 = (void *)qword_1EE40AA00;
  qword_1EE40AA00 = (uint64_t)v0;

}

void sub_19BA8AB08()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "LocalDeliveryQueue");
  v1 = (void *)qword_1EE40B2A0;
  qword_1EE40B2A0 = (uint64_t)v0;

}

void sub_19BA8AB78()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "SPConnection");
  v1 = (void *)qword_1EE40AED8;
  qword_1EE40AED8 = (uint64_t)v0;

}

void sub_19BA8ABE8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "OTRController");
  v1 = (void *)qword_1EE40B2B0;
  qword_1EE40B2B0 = (uint64_t)v0;

}

void sub_19BA8AC58()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Encryption");
  v1 = (void *)qword_1EE40B2C0;
  qword_1EE40B2C0 = (uint64_t)v0;

}

void sub_19BA8ACC8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "BTLink");
  v1 = (void *)qword_1EE40B2D0;
  qword_1EE40B2D0 = (uint64_t)v0;

}

void sub_19BA8AD38()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "UTun");
  v1 = (void *)qword_1EE40AC68;
  qword_1EE40AC68 = (uint64_t)v0;

}

void sub_19BA8ADA8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "DeliveryController");
  v1 = (void *)qword_1EE40B2E0;
  qword_1EE40B2E0 = (uint64_t)v0;

}

void sub_19BA8AE18()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Registration", "StewieProvisioning");
  v1 = (void *)qword_1EE40AD90;
  qword_1EE40AD90 = (uint64_t)v0;

}

void sub_19BA8AE88()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "StewieMessaging");
  v1 = (void *)qword_1EE40AD80;
  qword_1EE40AD80 = (uint64_t)v0;

}

void sub_19BA8AEF8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSOffGridMessenger");
  v1 = (void *)qword_1EE40AF00;
  qword_1EE40AF00 = (uint64_t)v0;

}

void sub_19BA8AF68()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSOffGridStateManager");
  v1 = (void *)qword_1EE40AF78;
  qword_1EE40AF78 = (uint64_t)v0;

}

void sub_19BA8AFD8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSOffGridStateManager-oversize");
  v1 = (void *)qword_1EE40ADA0;
  qword_1EE40ADA0 = (uint64_t)v0;

}

void sub_19BA8B048()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSSKStatusClient");
  v1 = (void *)qword_1EE40AD40;
  qword_1EE40AD40 = (uint64_t)v0;

}

void sub_19BA8B0B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Opportunistic");
  v1 = (void *)qword_1EE40ACB0;
  qword_1EE40ACB0 = (uint64_t)v0;

}

void sub_19BA8B128()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "BonjourDeliveryController");
  v1 = (void *)qword_1EE40B2F0;
  qword_1EE40B2F0 = (uint64_t)v0;

}

void sub_19BA8B198()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "utilities");
  v1 = (void *)qword_1ECDD47E8;
  qword_1ECDD47E8 = (uint64_t)v0;

}

void sub_19BA8B208()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IPsecLink");
  v1 = (void *)qword_1EE40B300;
  qword_1EE40B300 = (uint64_t)v0;

}

void sub_19BA8B278()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "xpc");
  v1 = (void *)qword_1ECDD4878;
  qword_1ECDD4878 = (uint64_t)v0;

}

void sub_19BA8B2E8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSSession");
  v1 = (void *)qword_1EE40B310;
  qword_1EE40B310 = (uint64_t)v0;

}

void sub_19BA8B358()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSDSession");
  v1 = (void *)qword_1EE40B320;
  qword_1EE40B320 = (uint64_t)v0;

}

void sub_19BA8B3C8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "GroupStatusNotification-oversize");
  v1 = (void *)qword_1EE40B330;
  qword_1EE40B330 = (uint64_t)v0;

}

void sub_19BA8B438()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "QRAllocator");
  v1 = (void *)qword_1EE40A9F0;
  qword_1EE40A9F0 = (uint64_t)v0;

}

void sub_19BA8B4A8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "QRAllocator-oversized");
  v1 = (void *)qword_1EE40AE30;
  qword_1EE40AE30 = (uint64_t)v0;

}

void sub_19BA8B518()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "Stun");
  v1 = (void *)qword_1EE40AE50;
  qword_1EE40AE50 = (uint64_t)v0;

}

void sub_19BA8B588()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "SME");
  v1 = (void *)qword_1EE40B340;
  qword_1EE40B340 = (uint64_t)v0;

}

void sub_19BA8B5F8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "SME-oversize");
  v1 = (void *)qword_1EE40B350;
  qword_1EE40B350 = (uint64_t)v0;

}

void sub_19BA8B668()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "Metrics");
  v1 = (void *)qword_1EE40B360;
  qword_1EE40B360 = (uint64_t)v0;

}

void sub_19BA8B6D8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "GL");
  v1 = (void *)qword_1EE40ADE0;
  qword_1EE40ADE0 = (uint64_t)v0;

}

void sub_19BA8B748()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "GL-oversize");
  v1 = (void *)qword_1EE40ADF0;
  qword_1EE40ADF0 = (uint64_t)v0;

}

void sub_19BA8B7B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "FTGL");
  v1 = (void *)qword_1EE40B370;
  qword_1EE40B370 = (uint64_t)v0;

}

void sub_19BA8B828()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "GFTGL");
  v1 = (void *)qword_1EE40B380;
  qword_1EE40B380 = (uint64_t)v0;

}

void sub_19BA8B898()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "NonFTGL");
  v1 = (void *)qword_1EE40AE20;
  qword_1EE40AE20 = (uint64_t)v0;

}

void sub_19BA8B908()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "SessionController");
  v1 = (void *)qword_1EE40B390;
  qword_1EE40B390 = (uint64_t)v0;

}

void sub_19BA8B978()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "RealTimeEncryption");
  v1 = (void *)qword_1EE40B3A0;
  qword_1EE40B3A0 = (uint64_t)v0;

}

void sub_19BA8B9E8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "RealTimeEncryption-oversize");
  v1 = (void *)qword_1EE40B3B0;
  qword_1EE40B3B0 = (uint64_t)v0;

}

void sub_19BA8BA58()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "StableEncryption");
  v1 = (void *)qword_1EE40B3C0;
  qword_1EE40B3C0 = (uint64_t)v0;

}

void sub_19BA8BAC8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "GroupSessionDataCryptor");
  v1 = (void *)qword_1EE40B3D0;
  qword_1EE40B3D0 = (uint64_t)v0;

}

void sub_19BA8BB38()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSDMessageStore");
  v1 = (void *)qword_1EE40A9D0;
  qword_1EE40A9D0 = (uint64_t)v0;

}

void sub_19BA8BBA8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Registration", "KeyTransparency");
  v1 = (void *)qword_1EE40AEE8;
  qword_1EE40AEE8 = (uint64_t)v0;

}

void sub_19BA8BC18()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Registration", "FeatureToggler");
  v1 = (void *)qword_1EE40B3E0;
  qword_1EE40B3E0 = (uint64_t)v0;

}

void sub_19BA8BC88()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.magnetpacketlog", "IDS");
  v1 = (void *)qword_1ECDD4860;
  qword_1ECDD4860 = (uint64_t)v0;

}

void sub_19BA8BCF8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSUDPLink");
  v1 = (void *)qword_1EE40B3F0;
  qword_1EE40B3F0 = (uint64_t)v0;

}

void sub_19BA8BD68()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSNWLink");
  v1 = (void *)qword_1EE40AE00;
  qword_1EE40AE00 = (uint64_t)v0;

}

void sub_19BA8BDD8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "QRProto");
  v1 = (void *)qword_1EE40B400;
  qword_1EE40B400 = (uint64_t)v0;

}

void sub_19BA8BE48()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "QRProto-oversize");
  v1 = (void *)qword_1EE40AE40;
  qword_1EE40AE40 = (uint64_t)v0;

}

void sub_19BA8BEB8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSInterface");
  v1 = (void *)qword_1EE40B410;
  qword_1EE40B410 = (uint64_t)v0;

}

void sub_19BA8BF28()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "ConnectivityMonitor");
  v1 = (void *)qword_1EE40B420;
  qword_1EE40B420 = (uint64_t)v0;

}

void sub_19BA8BF98()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "TransportLevelAgent");
  v1 = (void *)qword_1EE40ACE8;
  qword_1EE40ACE8 = (uint64_t)v0;

}

void sub_19BA8BFC8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Multiplexer");
  v1 = (void *)qword_1EE40A9E0;
  qword_1EE40A9E0 = (uint64_t)v0;

}

void sub_19BA8C038()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSServerMessaging");
  v1 = (void *)qword_1EE40B430;
  qword_1EE40B430 = (uint64_t)v0;

}

void sub_19BA8C0A8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "ClientChannel");
  v1 = (void *)qword_1EE40B440;
  qword_1EE40B440 = (uint64_t)v0;

}

void sub_19BA8C118()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSNexusAgent");
  v1 = (void *)qword_1EE40B450;
  qword_1EE40B450 = (uint64_t)v0;

}

void sub_19BA8C188()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSNexusManager");
  v1 = (void *)qword_1EE40ACB8;
  qword_1EE40ACB8 = (uint64_t)v0;

}

void sub_19BA8C1F8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSFirewall");
  v1 = (void *)qword_1EE40AD10;
  qword_1EE40AD10 = (uint64_t)v0;

}

void sub_19BA8C268()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "NWPathUtils");
  v1 = (void *)qword_1EE40B460;
  qword_1EE40B460 = (uint64_t)v0;

}

void sub_19BA8C2D8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "GroupSessionKV");
  v1 = (void *)qword_1EE40B470;
  qword_1EE40B470 = (uint64_t)v0;

}

void sub_19BA8C348()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "System");
  v1 = (void *)qword_1EE40B480;
  qword_1EE40B480 = (uint64_t)v0;

}

void sub_19BA8C3B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "SimulatorProxy");
  v1 = (void *)qword_1EE40B490;
  qword_1EE40B490 = (uint64_t)v0;

}

void sub_19BA8C428()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "ContactsUtilities");
  v1 = (void *)qword_1EE40ADD0;
  qword_1EE40ADD0 = (uint64_t)v0;

}

void sub_19BA8C498()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSPinnedIdentity");
  v1 = (void *)qword_1EE40AF10;
  qword_1EE40AF10 = (uint64_t)v0;

}

void sub_19BA8C508()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x1E0D37000], "PeerLookup_DBCache");
  v1 = (void *)qword_1EE40ADB0;
  qword_1EE40ADB0 = (uint64_t)v0;

}

uint64_t IDSQRProtoUnAllocBindRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  IDSQRProtoMaterial *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSShouldPowerLog(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (!v1)
    goto LABEL_6;
  if (qword_1EE40ACE0 != -1)
    dispatch_once(&qword_1EE40ACE0, &unk_1E3C1B8F0);
  if (off_1EE40ACD8)
    v2 = off_1EE40ACD8(13, v1);
  else
LABEL_6:
    v2 = 0;

  return v2;
}

void *sub_19BA8CE64()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("PLShouldLogRegisteredEvent", CFSTR("PowerLog"));
  off_1EE40ACD8 = result;
  return result;
}

void IDSPowerLogDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a1;
  v4 = a2;
  v8 = v4;
  if (!v3 || !v4)
  {
    objc_msgSend_utilities(IDSFoundationLog, v5, v6, v7);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_19BAF8DA4(v12, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_14;
  }
  if (!IDSShouldPowerLog(v3))
  {
    objc_msgSend_utilities(IDSFoundationLog, v9, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_19BAF8D74(v12, v20, v21, v22, v23, v24, v25, v26);
    goto LABEL_14;
  }
  if (qword_1EE40ACD0 != -1)
    dispatch_once(&qword_1EE40ACD0, &unk_1E3C1BDB0);
  if (!off_1EE40ACC8)
  {
    objc_msgSend_utilities(IDSFoundationLog, v9, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_19BAF8D44(v12, v27, v28, v29, v30, v31, v32, v33);
LABEL_14:

    goto LABEL_15;
  }
  off_1EE40ACC8(13, v3, v8, 0);
LABEL_15:

}

void *sub_19BA8CFB4()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("PLLogTimeSensitiveRegisteredEvent", CFSTR("PowerLog"));
  off_1EE40ACC8 = result;
  return result;
}

uint64_t IDSQRProtoInfoRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoPutMaterialPutMaterialReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19BA8F98C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v9 = a4;
  objc_msgSend_pnrReqList(v5, v6, v7, v8);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

BOOL IDSQRProtoSessionInfoSessionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t IDSDebuggingShouldFakeBadSIM(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking bad SIM, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldFakeSMSCharge(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking SMS charge, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldFakePhoneNumberChallenge(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking phone number challenge, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldFakeEmailChallenge(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking email challenge, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingFakeIdentityRegeneration(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking identity regeneration, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldForcePhoneRepairTimer(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Override phone repair timer, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

double IDSDebuggingPhoneRepairTimerOverride(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  double v13;

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  v13 = 0.0;
  if (isInternalInstall && IDSDebuggingShouldForcePhoneRepairTimer(v12, v9, v10, v11))
    return (double)IMGetDomainIntForKey();
  return v13;
}

uint64_t IDSDebuggingShouldOverrideGDRResponseCode(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking GDR response code, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingGDRReponseCodeOverride(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  v11 = IMGetDomainIntForKey();
  if (v11 >= 1)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v9, v10, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 134217984;
      v16 = v11;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Override GDR response code to %ld !! ***********", (uint8_t *)&v15, 0xCu);
    }

  }
  return v11;
}

uint64_t IDSDebuggingShouldPrintBagData(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint8_t v14[16];

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall)
    return 0;
  result = IMGetDomainBoolForKey();
  if ((_DWORD)result)
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "*********** Printing bag data, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

BOOL IDSQRProtoStatsStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _IDSIsValidPushPriority(uint64_t a1)
{
  return a1 == 5 || a1 == 10;
}

BOOL _IDSIsValidSendMode(unint64_t a1)
{
  return a1 < 4;
}

BOOL _IDSIsValidWakingPushPriority(unint64_t a1)
{
  return a1 < 3;
}

id IDSGetUUIDData(void *a1)
{
  id v1;
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  id v8;
  uuid_t uu;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = objc_retainAutorelease(v1), (v7 = (const char *)objc_msgSend_UTF8String(v3, v4, v5, v6)) != 0))
  {
    memset(uu, 170, sizeof(uu));
    uuid_parse(v7, uu);
    jw_uuid_to_data();
    v8 = 0;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id IDSGetUUIDDataFromNSUUID(void *a1, const char *a2, double a3)
{
  id v3;
  const char *v4;
  double v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7[0] = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = 0xAAAAAAAAAAAAAAAALL;
    objc_msgSend_getUUIDBytes_(a1, a2, (uint64_t)v7, a3);
    v3 = objc_alloc(MEMORY[0x1E0C99D50]);
    a1 = (void *)objc_msgSend_initWithBytes_length_(v3, v4, (uint64_t)v7, v5, 16);
  }
  return a1;
}

const __CFString *_IDSStringFromIDSRegistrationStatus(int a1)
{
  if ((a1 + 1) > 6)
    return CFSTR("Unknown");
  else
    return off_1E3C21BD8[a1 + 1];
}

__CFString *IDSEncryptionTypeStringFromEncryptionType(uint64_t a1)
{
  __CFString *result;
  __CFString **v2;

  switch(a1)
  {
    case 0:
      return CFSTR("otr");
    case 1:
      v2 = &IDSMPLegacyIdentityIdentifier;
      goto LABEL_10;
    case 2:
      return CFSTR("none");
    case 3:
      return CFSTR("engram");
    case 4:
      v2 = IDSNGMDeviceIdentityIdentifier;
      goto LABEL_10;
    case 5:
      v2 = IDSSecondaryIdentityIdentifier;
      goto LABEL_10;
    case 6:
      v2 = &IDSPaddyIdentityIdentifier;
LABEL_10:
      result = *v2;
      break;
    default:
      result = (__CFString *)0;
      break;
  }
  return result;
}

uint64_t IDSEncryptionTypeFromEncryptionTypeString(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  NSObject *v18;
  uint8_t buf[4];
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("otr"), v3) & 1) != 0)
  {
    v6 = 0;
  }
  else if ((objc_msgSend_isEqualToString_(v1, v4, (uint64_t)CFSTR("pair"), v5) & 1) != 0)
  {
    v6 = 1;
  }
  else if ((objc_msgSend_isEqualToString_(v1, v7, (uint64_t)CFSTR("pair-ec"), v8) & 1) != 0)
  {
    v6 = 4;
  }
  else if ((objc_msgSend_isEqualToString_(v1, v9, (uint64_t)CFSTR("pair-tetra"), v10) & 1) != 0)
  {
    v6 = 5;
  }
  else
  {
    if ((objc_msgSend_isEqualToString_(v1, v11, (uint64_t)CFSTR("none"), v12) & 1) == 0)
    {
      if ((objc_msgSend_isEqualToString_(v1, v13, (uint64_t)CFSTR("engram"), v14) & 1) != 0)
      {
        v6 = 3;
        goto LABEL_15;
      }
      if ((objc_msgSend_isEqualToString_(v1, v15, (uint64_t)CFSTR("paddy"), v16) & 1) != 0)
      {
        v6 = 6;
        goto LABEL_15;
      }
      if (v1)
      {
        OSLogHandleForIDSCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v20 = v1;
          _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_ERROR, "Invalid encryption type found -- ignoring {encryptionType: %@}", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          _IDSWarnV();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("Invalid encryption type found -- ignoring {encryptionType: %@}"));
          _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("Invalid encryption type found -- ignoring {encryptionType: %@}"));
        }
      }
    }
    v6 = 2;
  }
LABEL_15:

  return v6;
}

uint64_t _IDSDaemonIsRunning()
{
  if (qword_1EE40B4A0 != -1)
    dispatch_once(&qword_1EE40B4A0, &unk_1E3C21928);
  return byte_1EE40B4AC;
}

void sub_19BA913A8()
{
  void *v0;

  IMUserScopedNotification();
  im_primary_queue();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  im_notify_register_dispatch();

  byte_1EE40B4AC = 0;
}

void sub_19BA91424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  byte_1EE40B4AC = a3 != 0;
}

uint64_t IDSIsScreenSharingRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (CFSTR("com.apple.private.alloy.invitation.screensharing") == a1)
    return 1;
  else
    return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("com.apple.private.alloy.invitation.screensharing"), a3);
}

uint64_t IDSIsCallingRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (CFSTR("Calling") == a1)
    return 1;
  else
    return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("Calling"), a3);
}

uint64_t IDSIsFaceTimeRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (CFSTR("FaceTime") == a1)
    return 1;
  else
    return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("FaceTime"), a3);
}

uint64_t IDSIsMultiwayRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (CFSTR("Multiway") == a1)
    return 1;
  else
    return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("Multiway"), a3);
}

uint64_t IDSIsAnyFaceTimeRelatedRegistrationServiceType(void *a1)
{
  __CFString *v1;
  const char *v2;
  double v3;
  __CFString *v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  uint64_t isEqualToString;

  v1 = a1;
  v4 = v1;
  if (CFSTR("Multiway") == v1
    || (objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("Multiway"), v3) & 1) != 0
    || CFSTR("FaceTime") == v4
    || (objc_msgSend_isEqualToString_(v4, v5, (uint64_t)CFSTR("FaceTime"), v6) & 1) != 0
    || CFSTR("Calling") == v4)
  {
    isEqualToString = 1;
  }
  else
  {
    isEqualToString = objc_msgSend_isEqualToString_(v4, v7, (uint64_t)CFSTR("Calling"), v8);
  }

  return isEqualToString;
}

uint64_t IDSIsiMessageRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (CFSTR("iMessage") == a1)
    return 1;
  else
    return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("iMessage"), a3);
}

uint64_t IDSIsFaceTimeOriMessageRegistration(void *a1)
{
  __CFString *v1;
  const char *v2;
  double v3;
  __CFString *v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  uint64_t isEqualToString;

  v1 = a1;
  v4 = v1;
  if (CFSTR("FaceTime") == v1
    || (objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("FaceTime"), v3) & 1) != 0
    || CFSTR("iMessage") == v4
    || (objc_msgSend_isEqualToString_(v4, v5, (uint64_t)CFSTR("iMessage"), v6) & 1) != 0
    || CFSTR("Calling") == v4)
  {
    isEqualToString = 1;
  }
  else
  {
    isEqualToString = objc_msgSend_isEqualToString_(v4, v7, (uint64_t)CFSTR("Calling"), v8);
  }

  return isEqualToString;
}

uint64_t IDSIsAlloyRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, (uint64_t)CFSTR("com.apple.private.alloy"), a3);
}

uint64_t IDSIsMultiplex1RegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, (uint64_t)CFSTR("com.apple.private.alloy.multiplex1"), a3);
}

uint64_t IDSIsiTunesRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, (uint64_t)CFSTR("com.apple.private.alloy.itunes"), a3);
}

uint64_t IDSIsGameCenterRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, (uint64_t)CFSTR("com.apple.private.alloy.arcade"), a3);
}

uint64_t IDSIsStewieRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("Stewie"), a3);
}

__CFString *_StringForIDSAccountType(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E3C21C10[a1];
}

__CFString *_StringForIDSRegistrationType(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E3C21C28[a1];
}

const __CFString *_StringForIDSDRegistrationStatus(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("Failed");
  else
    return off_1E3C21C40[a1];
}

__CFString *_StringForIDSRegistrationServiceType(void *a1)
{
  __CFString *v1;
  const char *v2;
  double v3;
  __CFString *v4;
  const char *v5;
  double v6;
  __CFString *v7;
  const char *v8;
  double v9;

  v1 = a1;
  v4 = v1;
  if (CFSTR("iMessage") == v1 || (objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("iMessage"), v3) & 1) != 0)
  {
    v7 = CFSTR("iMessage");
LABEL_10:

    goto LABEL_11;
  }
  if (CFSTR("Calling") == v4 || (objc_msgSend_isEqualToString_(v4, v5, (uint64_t)CFSTR("Calling"), v6) & 1) != 0)
  {
    v7 = CFSTR("Calling");
    goto LABEL_10;
  }
  if (CFSTR("FaceTime") == v4
    || (v7 = v4, objc_msgSend_isEqualToString_(v4, v8, (uint64_t)CFSTR("FaceTime"), v9)))
  {
    v7 = CFSTR("FaceTime");
    goto LABEL_10;
  }
LABEL_11:

  return v7;
}

const __CFString *_UIStringForIDSRegistrationServiceType(void *a1)
{
  __CFString *v1;
  const char *v2;
  double v3;
  __CFString *v4;
  const char *v5;
  double v6;
  const __CFString *v7;
  const char *v8;
  double v9;
  const char *v10;
  double v11;
  const char *v12;
  double v13;
  int hasPrefix;

  v1 = a1;
  v4 = v1;
  if (CFSTR("iMessage") == v1 || objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("iMessage"), v3))
  {

    v7 = CFSTR("iMessage");
  }
  else if (CFSTR("Calling") == v4
         || (objc_msgSend_isEqualToString_(v4, v5, (uint64_t)CFSTR("Calling"), v6) & 1) != 0
         || CFSTR("FaceTime") == v4
         || (objc_msgSend_isEqualToString_(v4, v8, (uint64_t)CFSTR("FaceTime"), v9) & 1) != 0
         || CFSTR("Multiway") == v4
         || objc_msgSend_isEqualToString_(v4, v10, (uint64_t)CFSTR("Multiway"), v11))
  {

    v7 = CFSTR("FaceTime");
  }
  else
  {
    hasPrefix = objc_msgSend_hasPrefix_(v4, v12, (uint64_t)CFSTR("com.apple.private.alloy.itunes"), v13);

    if (hasPrefix)
      v7 = CFSTR("iTunes");
    else
      v7 = CFSTR("iCloud");
  }

  return v7;
}

__CFString *_IDSRegistrationServiceTypeForString(void *a1)
{
  __CFString *v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  __CFString **v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  __CFString *v15;
  __CFString *v16;
  const char *v18;
  double v19;
  const char *v20;
  double v21;
  const char *v22;
  double v23;
  const char *v24;
  double v25;
  const char *v26;
  double v27;
  const char *v28;
  double v29;
  const char *v30;
  double v31;
  const char *v32;
  double v33;
  const char *v34;
  double v35;
  const char *v36;
  double v37;
  const char *v38;
  char isEqualToIgnoringCase;
  double v40;

  v1 = a1;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v2, (uint64_t)CFSTR("com.apple.iMessage"), v3))
    goto LABEL_2;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v4, (uint64_t)CFSTR("com.apple.FaceTime"), v5))
    goto LABEL_4;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v7, (uint64_t)CFSTR("com.apple.Calling"), v8)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v9, (uint64_t)CFSTR("com.apple.private.ac"), v10)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v11, (uint64_t)CFSTR("com.apple.private.ac"), v12))
  {
    goto LABEL_8;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v13, (uint64_t)CFSTR("com.apple.ess"), v14))
    goto LABEL_4;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v18, (uint64_t)CFSTR("com.apple.private.alloy.facetime.multi"), v19)|| objc_msgSend_isEqualToIgnoringCase_(v1, v20, (uint64_t)CFSTR("Multiway"), v21))
  {
    v6 = IDSRegistrationServiceTypeMultiway;
    goto LABEL_9;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v22, (uint64_t)CFSTR("com.apple.madrid"), v23))
    goto LABEL_2;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v24, (uint64_t)CFSTR("Calling"), v25))
  {
LABEL_8:
    v6 = IDSRegistrationServiceTypeCalling;
    goto LABEL_9;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v26, (uint64_t)CFSTR("iMessage"), v27)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v28, (uint64_t)CFSTR("Messenger"), v29)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v30, (uint64_t)CFSTR("Madrid"), v31))
  {
LABEL_2:
    v6 = IDSRegistrationServiceTypeiMessage;
LABEL_9:
    v15 = *v6;
    goto LABEL_10;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v32, (uint64_t)CFSTR("FaceTime"), v33)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v34, (uint64_t)CFSTR("Venice"), v35))
  {
LABEL_4:
    v6 = IDSRegistrationServiceTypeFaceTime;
    goto LABEL_9;
  }
  isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v1, v36, (uint64_t)CFSTR("com.apple.private.alloy.invitation.screensharing"), v37);
  v15 = CFSTR("com.apple.private.alloy.invitation.screensharing");
  if ((isEqualToIgnoringCase & 1) == 0)
  {
    if (objc_msgSend_isEqualToIgnoringCase_(v1, v38, (uint64_t)CFSTR("com.apple.private.alloy.multiplex1"), v40))v15 = CFSTR("com.apple.private.alloy.multiplex1");
    else
      v15 = v1;
  }
LABEL_10:
  v16 = v15;

  return v16;
}

__CFString *_IDSServiceFromRegistrationServiceType(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  __CFString *v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;

  v1 = a1;
  if ((objc_msgSend_isEqualToIgnoringCase_(v1, v2, (uint64_t)CFSTR("iMessage"), v3) & 1) != 0)
  {
    v6 = CFSTR("com.apple.madrid");
  }
  else if ((objc_msgSend_isEqualToIgnoringCase_(v1, v4, (uint64_t)CFSTR("FaceTime"), v5) & 1) != 0)
  {
    v6 = CFSTR("com.apple.ess");
  }
  else if ((objc_msgSend_isEqualToIgnoringCase_(v1, v7, (uint64_t)CFSTR("Calling"), v8) & 1) != 0)
  {
    v6 = CFSTR("com.apple.private.ac");
  }
  else if ((objc_msgSend_isEqualToIgnoringCase_(v1, v9, (uint64_t)CFSTR("Multiway"), v10) & 1) != 0)
  {
    v6 = CFSTR("com.apple.private.alloy.facetime.multi");
  }
  else
  {
    v6 = (__CFString *)v1;
  }

  return v6;
}

__CFString *_KeychainRegistrationServiceTypeForString(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  __CFString *v6;

  v1 = a1;
  if ((objc_msgSend_isEqualToIgnoringCase_(v1, v2, (uint64_t)CFSTR("com.apple.Calling"), v3) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v4, (uint64_t)CFSTR("Calling"), v5) & 1) != 0)
  {
    v6 = CFSTR("com.apple.private.ac");
  }
  else
  {
    _IDSRegistrationServiceTypeForString(v1);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

__CFString *_IDSRegistrationServiceIdentifierFromServiceType(void *a1)
{
  __CFString *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  __CFString *v9;
  const char *v10;
  double v11;
  const char *v12;
  double v13;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    if (CFSTR("iMessage") == v1 || (objc_msgSend_isEqualToString_(v1, v5, (uint64_t)CFSTR("iMessage"), v6) & 1) != 0)
    {
      v9 = CFSTR("com.apple.madrid");
    }
    else if (CFSTR("Calling") == v1 || (objc_msgSend_isEqualToString_(v1, v7, (uint64_t)CFSTR("Calling"), v8) & 1) != 0)
    {
      v9 = CFSTR("com.apple.private.ac");
    }
    else if (CFSTR("FaceTime") == v1
           || (objc_msgSend_isEqualToString_(v1, v10, (uint64_t)CFSTR("FaceTime"), v11) & 1) != 0)
    {
      v9 = CFSTR("com.apple.ess");
    }
    else if (CFSTR("Multiway") == v1
           || (objc_msgSend_isEqualToString_(v1, v12, (uint64_t)CFSTR("Multiway"), v13) & 1) != 0)
    {
      v9 = CFSTR("com.apple.private.alloy.facetime.multi");
    }
    else
    {
      v9 = v1;
    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

BOOL IDSIsValidAccountType(unsigned int a1)
{
  return a1 < 3;
}

BOOL IDSIsValidSigningAlgorithm(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

BOOL IDSIsValidSigningKeyType(unsigned int a1)
{
  return a1 < 2;
}

id _IDSRegistrationKeychainItemNameForIdentifierAndName(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  double v9;
  id v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7))
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v8, (uint64_t)CFSTR("%@-%@"), v9, v3, v4);
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = v4;
  }
  v11 = v10;

  return v11;
}

void _IDSAppleRegistrationCopyKeyPair(void *a1, CFTypeRef *a2, CFTypeRef *a3, void **a4, _BYTE *a5, _BYTE *a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  const char *v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  void *v21;
  char v22;
  id v23;
  const char *v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t RSAPrivateKey;
  const char *v37;
  uint64_t v38;
  int v39;
  double v40;
  NSObject *v41;
  id v42;
  const char *v43;
  double v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  unint64_t Size;
  const char *v51;
  uint64_t v52;
  double v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  NSObject *v58;
  NSObject *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  double v63;
  NSObject *v64;
  _BOOL4 v65;
  void *v66;
  const char *v67;
  NSObject *v68;
  uint32_t v69;
  const char *v70;
  uint64_t v71;
  double v72;
  unint64_t v73;
  const char *v74;
  uint64_t v75;
  double v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  CFTypeRef v81;
  id v82;
  const __CFString *v83;
  const __CFData *Signature;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  double v91;
  void *v92;
  void *v93;
  char v94;
  const char *v95;
  uint64_t v96;
  double v97;
  NSObject *v98;
  NSObject *v99;
  void *v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  double v109;
  OSStatus Pair;
  const char *v111;
  uint64_t v112;
  double v113;
  NSObject *v114;
  CFTypeRef v115;
  CFTypeRef v116;
  const __CFDictionary *v117;
  void *v118;
  char v119;
  const char *v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  double v126;
  void *v127;
  void *v128;
  char v129;
  void *v130;
  uint64_t v131;
  void **v132;
  id v133;
  id v134;
  _BYTE buf[22];
  __int16 v136;
  void *v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = v11;
  if (a2 && a3 && a4 && a5 && a6)
  {
    _IDSRegistrationKeychainItemNameForIdentifierAndName(v11, CFSTR("identity-rsa-public-key"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    IMGetKeychainData();
    v134 = 0;

    _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, CFSTR("identity-rsa-private-key"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = IMGetKeychainData();
    v16 = 0;

    if ((v15 & 1) == 0)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v17, v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, " ** No private key found, generating one", buf, 2u);
      }

    }
    _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, CFSTR("identity-rsa-key-pair-signature-v1"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = IMGetKeychainData();
    v23 = 0;

    if ((v22 & 1) == 0)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v24, v25, v26);
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, " ** No signature found, generating one [Identifier: %@]", buf, 0xCu);
      }

    }
    if (*a6)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v24, v25, v26);
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "Waiting for keychain upgrade to be complete before loading key pair", buf, 2u);
      }
      goto LABEL_96;
    }
    *a6 = 0;
    v133 = v16;
    if (!v16)
      goto LABEL_52;
    v29 = objc_retainAutorelease(v16);
    objc_msgSend_bytes(v29, v30, v31, v32);
    objc_msgSend_length(v29, v33, v34, v35);
    RSAPrivateKey = SecKeyCreateRSAPrivateKey();
    *a3 = (CFTypeRef)RSAPrivateKey;
    if (RSAPrivateKey)
    {
      v39 = SecKeyCopyPublicBytes();
      if (v39)
      {
        objc_msgSend_registration(MEMORY[0x1E0D36AA8], v37, v38, v40);
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v39;
          *(_WORD *)&buf[8] = 2112;
          *(_QWORD *)&buf[10] = v12;
          _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, " => Error loading publicKey: %d [Identifier: %@]", buf, 0x12u);
        }

      }
    }
    v42 = objc_alloc(MEMORY[0x1E0CB3940]);
    v45 = objc_msgSend_initWithData_encoding_(v42, v43, (uint64_t)v23, v44, 4);
    v46 = *a4;
    *a4 = (void *)v45;

    if (*a2)
    {
      Size = SecKeyGetSize();
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v51, v52, v53);
      v54 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = Size;
        _os_log_impl(&dword_19B949000, v54, OS_LOG_TYPE_DEFAULT, " => Loaded Identity public key [Identifier: %@] (Key Size: %lu)", buf, 0x16u);
      }

      if (Size <= 0x7FF)
      {
        objc_msgSend_warning(MEMORY[0x1E0D36AA8], v55, v56, v57);
        v58 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT))
          sub_19BAF9224();

        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
      }
    }
    else
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v47, v48, v49);
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl(&dword_19B949000, v59, OS_LOG_TYPE_DEFAULT, " ** No Identity public key found [Identifier: %@]", buf, 0xCu);
      }

    }
    v60 = objc_msgSend_length(*a4, v55, v56, v57);
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v61, v62, v63);
    v64 = objc_claimAutoreleasedReturnValue();
    v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
    if (v60)
    {
      if (!v65)
        goto LABEL_40;
      v66 = *a4;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v66;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v12;
      v67 = " => Loaded Identity key pair signature: %@ [Identifier: %@]";
      v68 = v64;
      v69 = 22;
    }
    else
    {
      if (!v65)
        goto LABEL_40;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v12;
      v67 = " ** No Identity key pair signature found [Identifier: %@]";
      v68 = v64;
      v69 = 12;
    }
    _os_log_impl(&dword_19B949000, v68, OS_LOG_TYPE_DEFAULT, v67, buf, v69);
LABEL_40:

    if (*a3)
    {
      v73 = SecKeyGetSize();
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v74, v75, v76);
      v77 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v73;
        _os_log_impl(&dword_19B949000, v77, OS_LOG_TYPE_DEFAULT, " => Loaded Identity private key  [Identifier: %@](Key Size: %lu)", buf, 0x16u);
      }

      if (v73 <= 0x7FF)
      {
        objc_msgSend_warning(MEMORY[0x1E0D36AA8], v24, v78, v26);
        v79 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_FAULT))
          sub_19BAF9224();

        if (*a2)
        {
          CFRelease(*a2);
          *a2 = 0;
        }
        *a5 = 0;
LABEL_79:
        if (*a2)
        {
          if (*a3 && *a4)
            goto LABEL_97;
          CFRelease(*a2);
          *a2 = 0;
        }
        v132 = a4;
        v101 = v23;
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
        v102 = (void *)MEMORY[0x1E0C99D80];
        v103 = *MEMORY[0x1E0CD6A70];
        v104 = *MEMORY[0x1E0CD6A38];
        v105 = *MEMORY[0x1E0C9AE40];
        v106 = *MEMORY[0x1E0CD69D8];
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, 2048, v26);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dictionaryWithObjectsAndKeys_(v102, v108, v103, v109, v104, v105, v106, v107, *MEMORY[0x1E0CD6A20], 0);
        v28 = objc_claimAutoreleasedReturnValue();

        Pair = SecKeyGeneratePair((CFDictionaryRef)v28, (SecKeyRef *)a2, (SecKeyRef *)a3);
        objc_msgSend_registration(MEMORY[0x1E0D36AA8], v111, v112, v113);
        v114 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        {
          v115 = *a2;
          v116 = *a3;
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v115;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v116;
          v136 = 2112;
          v137 = v12;
          v138 = 2048;
          v139 = Pair;
          _os_log_impl(&dword_19B949000, v114, OS_LOG_TYPE_DEFAULT, " Generated public key: %p   private key: %p  [Identifier: %@]  result: %ld", buf, 0x2Au);
        }

        v16 = v133;
        v23 = v101;
        if (*a2 && *a3)
        {
          v117 = (const __CFDictionary *)MEMORY[0x1A1AC765C]();
          if (CFDictionaryGetValue(v117, (const void *)*MEMORY[0x1E0CD70D8]))
          {
            _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, CFSTR("identity-rsa-private-key"));
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            v119 = IMSetKeychainData();

            if ((v119 & 1) == 0)
            {
              v130 = v12;
              v131 = 0;
              _IMWarn();
            }
            objc_msgSend_stringGUID(MEMORY[0x1E0CB3940], v120, v121, v122, v130, v131);
            v123 = objc_claimAutoreleasedReturnValue();
            v124 = *v132;
            *v132 = (void *)v123;

            objc_msgSend_dataUsingEncoding_(*v132, v125, 4, v126);
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, CFSTR("identity-rsa-key-pair-signature-v1"));
            v128 = (void *)objc_claimAutoreleasedReturnValue();
            v129 = IMSetKeychainData();

            if ((v129 & 1) == 0)
              _IMWarn();
          }
          if (v117)
            CFRelease(v117);
        }
LABEL_96:

LABEL_97:
        goto LABEL_98;
      }
    }
    else
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v70, v71, v72);
      v80 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl(&dword_19B949000, v80, OS_LOG_TYPE_DEFAULT, " ** No Identity private key found [Identifier: %@]", buf, 0xCu);
      }

    }
LABEL_52:
    v81 = *a2;
    *a5 = 0;
    if (v81 && *a3)
    {
      *(_QWORD *)buf = 0;
      objc_msgSend_dataUsingEncoding_(CFSTR("KeyVerificationData"), v24, 4, v26);
      v82 = (id)objc_claimAutoreleasedReturnValue();

      v83 = (const __CFString *)*MEMORY[0x1E0CD6E88];
      Signature = SecKeyCreateSignature((SecKeyRef)*a3, (SecKeyAlgorithm)*MEMORY[0x1E0CD6E88], (CFDataRef)v82, (CFErrorRef *)buf);
      if (*(_QWORD *)buf)
      {
        CFRelease(*(CFTypeRef *)buf);
      }
      else if (!SecKeyVerifySignature((SecKeyRef)*a2, v83, (CFDataRef)v82, Signature, (CFErrorRef *)buf)
             || *(_QWORD *)buf)
      {
        if (*a2)
        {
          CFRelease(*a2);
          *a2 = 0;
        }
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
        objc_msgSend_registration(MEMORY[0x1E0D36AA8], v24, v85, v26);
        v86 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_FAULT))
          sub_19BAF9190((id *)buf, v86);

      }
      if (v82)
        CFRelease(v82);
      if (Signature)
        CFRelease(Signature);
      if (*a2 && *a3 && !objc_msgSend_length(*a4, v24, v85, v26))
      {
        *a5 = 1;
        objc_msgSend_stringGUID(MEMORY[0x1E0CB3940], v24, v87, v26);
        v88 = objc_claimAutoreleasedReturnValue();
        v89 = *a4;
        *a4 = (void *)v88;

        objc_msgSend_dataUsingEncoding_(*a4, v90, 4, v91);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, CFSTR("identity-rsa-key-pair-signature-v1"));
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        v94 = IMSetKeychainData();

        if ((v94 & 1) == 0)
        {
          objc_msgSend_warning(MEMORY[0x1E0D36AA8], v95, v96, v97);
          v98 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
            sub_19BAF9110();

        }
        objc_msgSend_registration(MEMORY[0x1E0D36AA8], v95, v96, v97);
        v99 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
        {
          v100 = *a4;
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v100;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v12;
          _os_log_impl(&dword_19B949000, v99, OS_LOG_TYPE_DEFAULT, " => We have good public and private keys, generating and migrating identity key pair signature: %@ [Identifier: %@]", buf, 0x16u);
        }

      }
    }
    goto LABEL_79;
  }
LABEL_98:

}

void *_IDSTransportVersionNumber()
{
  return &unk_1E3C86AF0;
}

void *_IDSWebTunnelServiceVersionNumber()
{
  return &unk_1E3C86B08;
}

void *_IDSScheduledSendVersionNumber()
{
  return &unk_1E3C86B20;
}

uint64_t _IDSCopyIDForPushTokenAndIdentitiesWithService(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  int isEqualToString;
  int v20;
  id v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  double v27;
  void *v28;
  id v29;
  const char *v30;
  double v31;
  uint64_t v32;

  v5 = a3;
  v6 = a2;
  objc_msgSend___imHexString(a1, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v6, v11, v12, v13))
  {
    objc_msgSend___imArrayByApplyingBlock_(v6, v14, (uint64_t)&unk_1E3C219A8, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    isEqualToString = objc_msgSend_isEqualToString_(v5, v17, (uint64_t)CFSTR("com.apple.private.alloy.bulletinboard"), v18);
    v20 = _IDSPrefersPhoneNumbersForServiceIdentifier(v5);
    v21 = _IDSCopyCallerIDWithSelfMessagingHint(0, v16, 0, 0, isEqualToString, v20, 1);
    v25 = objc_msgSend__FZBestGuessFZIDType(v21, v22, v23, v24);
    objc_msgSend__URIFromFZIDType_(v21, v26, v25, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_alloc(MEMORY[0x1E0CB3940]);
    v32 = objc_msgSend_initWithFormat_(v29, v30, (uint64_t)CFSTR("self-token:%@/%@"), v31, v10, v28);

    v6 = v16;
  }
  else
  {
    _IMWarn();
    v32 = 0;
  }

  return v32;
}

id sub_19BA92D48(double a1, uint64_t a2, void *a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  id v10;
  void *v11;

  objc_msgSend__stringForKey_(a3, (const char *)a3, (uint64_t)CFSTR("uri"), a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend__appearsToBeDSID(v3, v4, v5, v6))
  {
    v10 = v3;
  }
  else
  {
    objc_msgSend__stripFZIDPrefix(v3, v7, v8, v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  v11 = v10;

  return v11;
}

uint64_t _IDSCopyIDForDeviceUniqueID(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  id v5;
  const char *v6;
  double v7;
  uint64_t v8;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    v8 = objc_msgSend_initWithFormat_(v5, v6, (uint64_t)CFSTR("device:%@"), v7, v1);
  }
  else
  {
    _IMWarn();
    v8 = 0;
  }

  return v8;
}

uint64_t _IDSDestinationHasValidPrefix(void *a1)
{
  id v1;
  id v2;
  const char *v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1ECDD4848 != -1)
    dispatch_once(&qword_1ECDD4848, &unk_1E3C1B530);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = (id)qword_1ECDD4840;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v11, v4, v15, 16);
  if (v6)
  {
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v2);
        if ((objc_msgSend_hasPrefix_(v1, v5, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i), v7, (_QWORD)v11) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v11, v7, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_13:

  return v6;
}

void sub_19BA92F40()
{
  id v0;
  const char *v1;
  double v2;
  uint64_t v3;
  void *v4;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v3 = objc_msgSend_initWithObjects_(v0, v1, (uint64_t)CFSTR("tel:"), v2, CFSTR("mailto:"), CFSTR("token:"), CFSTR("self-token:"), CFSTR("accessory:"), CFSTR("device:"), CFSTR("urn:ck:"), CFSTR("urn:biz:"), CFSTR("__IDS_DEFAULT_PAIRED_DEVICE__"), CFSTR("____--SENTINEL--SELF--ALIAS--V0--____"), CFSTR("pseud:"), CFSTR("temp:"), CFSTR("dev:"), 0);
  v4 = (void *)qword_1ECDD4840;
  qword_1ECDD4840 = v3;

}

id _IDSCopyIDForOptionalTokenWithURI(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  id v8;
  id v9;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7))
    v8 = (id)_IDSCopyIDForTokenWithURI(v3, v4);
  else
    v8 = v4;
  v9 = v8;

  return v9;
}

uint64_t _IDSCopyIDForTokenWithURI(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  uint64_t v18;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7) && objc_msgSend_length(v4, v8, v9, v10))
  {
    v11 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend___imHexString(v3, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_initWithFormat_(v11, v16, (uint64_t)CFSTR("token:%@/%@"), v17, v15, v4);

  }
  else
  {
    _IMWarn();
    v18 = 0;
  }

  return v18;
}

id _IDSCopyIDForAccessory(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  double v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  double v11;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    if (objc_msgSend_hasPrefix_(v1, v5, (uint64_t)CFSTR("accessory:"), v6))
    {
      v7 = v1;
    }
    else
    {
      v9 = objc_alloc(MEMORY[0x1E0CB3940]);
      v7 = (id)objc_msgSend_initWithFormat_(v9, v10, (uint64_t)CFSTR("accessory:%@"), v11, v1);
    }
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id _IDSCopyIDForBusinessID(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  id v13;
  int hasPrefix;
  id v15;
  const char *v16;
  double v17;
  uint64_t v18;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    objc_msgSend_lowercaseString(v1, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_hasPrefix_(v8, v9, (uint64_t)CFSTR("urn:biz:"), v10))
    {
      v13 = v8;
      v1 = v13;
    }
    else
    {
      hasPrefix = objc_msgSend_hasPrefix_(v8, v11, (uint64_t)CFSTR("biz:"), v12);
      v15 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (hasPrefix)
        v18 = objc_msgSend_initWithFormat_(v15, v16, (uint64_t)CFSTR("%@%@"), v17, CFSTR("urn:"), v8);
      else
        v18 = objc_msgSend_initWithFormat_(v15, v16, (uint64_t)CFSTR("%@%@"), v17, CFSTR("urn:biz:"), v8);
      v13 = (id)v18;
      v1 = v8;
    }
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

uint64_t IDSSetPhoneNumberChangeNotificationEnabled(uint64_t result)
{
  byte_1EE40AC90 = result;
  return result;
}

id _IDSCopyMyPhoneNumbers(int a1)
{
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  BOOL v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  id v11;
  const char *v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v22;
  uint64_t v23;
  id v24;
  double v25;
  NSObject *v26;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  double v35;
  id v36;
  id v38;
  uint8_t buf[4];
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock(&stru_1ECDD4874);
  v5 = (void *)qword_1ECDD4850;
  if (qword_1ECDD4850)
    v6 = a1 == 0;
  else
    v6 = 0;
  if (v6)
    goto LABEL_21;
  objc_msgSend_sharedInstance(IDSCTAdapter, v2, v3, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0;
  objc_msgSend_currentSIMsWithError_(v7, v8, (uint64_t)&v38, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v38;
  objc_msgSend___imArrayByApplyingBlock_(v10, v12, (uint64_t)&unk_1E3C21BB8, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v14, v15, v16, v17) || v11 == 0)
  {
    v24 = v14;
  }
  else
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v18, v19, v20);
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_19BAF93C8();

    v24 = 0;
  }
  objc_msgSend_registration(MEMORY[0x1E0D36AA8], v22, v23, v25);
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v40 = v24;
    _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "Returning phone number from _IDSFetchPhoneNumber { phoneNumbers: %@ }", buf, 0xCu);
  }

  v29 = (void *)MEMORY[0x1E0C9AA60];
  if (v24)
    v29 = v24;
  v30 = v29;

  v31 = (void *)qword_1ECDD4850;
  qword_1ECDD4850 = (uint64_t)v30;

  if (!byte_1EE40AC90)
    im_dispatch_after_primary_queue();
  v5 = (void *)qword_1ECDD4850;
  if (qword_1ECDD4850)
LABEL_21:
    v32 = v5;
  else
    v32 = 0;
  os_unfair_lock_unlock(&stru_1ECDD4874);
  if (objc_msgSend_count(v32, v33, v34, v35))
    v36 = v32;
  else
    v36 = 0;

  return v36;
}

void sub_19BA93484()
{
  void *v0;

  os_unfair_lock_lock(&stru_1ECDD4874);
  v0 = (void *)qword_1ECDD4850;
  qword_1ECDD4850 = 0;

  os_unfair_lock_unlock(&stru_1ECDD4874);
}

void IDSFetchPhoneNumber()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  double v3;
  NSObject *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  _IDSCopyMyPhoneNumbers(1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_registration(MEMORY[0x1E0D36AA8], v1, v2, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v0;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "Phone numbers: %@", (uint8_t *)&v5, 0xCu);
  }

}

id sub_19BA93578(uint64_t a1, void *a2)
{
  return _IDSCopyIDForPhoneNumberWithOptions(a2, 0);
}

uint64_t sub_19BA93598(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  double v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  double v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  double v19;
  void *v20;
  id v21;
  const char *v22;
  double v23;
  _QWORD v25[4];
  id v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  _QWORD v30[4];
  id v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a2;
  if (objc_msgSend_hasPrefix_(v3, v4, (uint64_t)CFSTR("tel:"), v5))
  {
    if (objc_msgSend_count(*(void **)(a1 + 32), v6, v7, v8)
      && objc_msgSend_containsObject_(*(void **)(a1 + 32), v9, (uint64_t)v3, v10))
    {
      v11 = *(_QWORD *)(a1 + 56) + 1;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 56) + 2;
    }
  }
  else if (objc_msgSend_hasPrefix_(v3, v6, (uint64_t)CFSTR("mailto:"), v8))
  {
    v38 = 0;
    v39 = &v38;
    v40 = 0x2020000000;
    v41 = 0xAAAAAAAAAAAAAAAALL;
    v41 = objc_msgSend_count(*(void **)(a1 + 40), v12, v13, v14);
    v34 = 0;
    v35 = &v34;
    v36 = 0x2020000000;
    v37 = 0;
    v15 = *(void **)(a1 + 40);
    v16 = MEMORY[0x1E0C809B0];
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = sub_19BA9377C;
    v30[3] = &unk_1E3C219D0;
    v17 = v3;
    v31 = v17;
    v32 = &v38;
    v33 = &v34;
    objc_msgSend_enumerateObjectsUsingBlock_(v15, v18, (uint64_t)v30, v19);
    if (!*((_BYTE *)v35 + 24))
    {
      v20 = *(void **)(a1 + 48);
      v25[0] = v16;
      v25[1] = 3221225472;
      v25[2] = sub_19BA937E4;
      v25[3] = &unk_1E3C219F8;
      v21 = v17;
      v29 = *(_BYTE *)(a1 + 72);
      v26 = v21;
      v27 = &v38;
      v28 = *(_QWORD *)(a1 + 64);
      objc_msgSend_enumerateObjectsUsingBlock_(v20, v22, (uint64_t)v25, v23);

    }
    v11 = v39[3] + 3;

    _Block_object_dispose(&v34, 8);
    _Block_object_dispose(&v38, 8);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_19BA93758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BA9377C(uint64_t a1, const char *a2, uint64_t a3, _BYTE *a4, double a5)
{
  uint64_t result;

  result = objc_msgSend_hasSuffix_(*(void **)(a1 + 32), a2, (uint64_t)a2, a5);
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += ~a3;
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_19BA937E4(uint64_t a1, const char *a2, uint64_t a3, _BYTE *a4, double a5)
{
  uint64_t result;

  result = objc_msgSend_hasSuffix_(*(void **)(a1 + 32), a2, (uint64_t)a2, a5);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(a1 + 48) + a3;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t sub_19BA93840(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  double v10;
  uint64_t v11;

  v5 = a2;
  v6 = a3;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v7 >= v8)
  {
    if (v7 > v8)
      v11 = 1;
    else
      v11 = objc_msgSend_compare_(v5, v9, (uint64_t)v6, v10);
  }
  else
  {
    v11 = -1;
  }

  return v11;
}

uint64_t _IDSCopyOrderedAliases(void *a1, uint64_t a2, int a3)
{
  _IDSCopyOrderedAliasesWithGetter(a1, a2, a3, 0, &unk_1E3C1B570);
  return objc_claimAutoreleasedReturnValue();
}

id sub_19BA938F8()
{
  return _IDSCopyMyPhoneNumbers(0);
}

id _IDSCopyCallerID(void *a1, void *a2, void *a3, int a4, int a5)
{
  return _IDSCopyCallerIDWithSelfMessagingHint(a1, a2, 0, a3, a4, a5, 0);
}

id _IDSCopyCallerIDWithPseudonyms(void *a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  return _IDSCopyCallerIDWithSelfMessagingHint(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t _IDSAreIDsEquivalent(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  double v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  double v27;
  const void *v28;
  const void *v29;
  const void *v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  const void *v34;

  v3 = a1;
  v4 = a2;
  v8 = objc_msgSend__FZIDType(v3, v5, v6, v7);
  if (v8 == objc_msgSend__FZIDType(v4, v9, v10, v11))
  {
    objc_msgSend__IDFromFZIDType_(v3, v12, v8, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__stripFZIDPrefix(v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend__IDFromFZIDType_(v4, v19, v8, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__stripFZIDPrefix(v21, v22, v23, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend_localizedCaseInsensitiveCompare_(v18, v26, v25, v27))
    {
LABEL_13:
      v32 = 1;
LABEL_17:
      v3 = v18;
      v4 = (id)v25;
      goto LABEL_18;
    }
    if (v8 == 1)
    {
LABEL_16:
      v32 = 0;
      goto LABEL_17;
    }
    v28 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
    v29 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
    v30 = v29;
    if (v28 && v29)
    {
      v31 = CFEqual(v28, v29) != 0;
    }
    else
    {
      v31 = 0;
      v33 = 0;
      if (!v28)
      {
LABEL_10:
        if (v30)
          CFRelease(v30);
        if (v33)
          goto LABEL_13;
        v34 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
        if (v34)
          CFRelease(v34);
        goto LABEL_16;
      }
    }
    CFRelease(v28);
    v33 = v31;
    goto LABEL_10;
  }
  v32 = 0;
LABEL_18:

  return v32;
}

uint64_t _IDSTypeForID(void *a1, const char *a2, double a3)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  objc_msgSend__stripPotentialTokenURIWithToken_(a1, a2, (uint64_t)&v12, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v12;
  switch(objc_msgSend__FZIDType(v3, v5, v6, v7))
  {
    case 0:
      v8 = 2 * (v4 != 0);
      break;
    case 1:
      if (v4)
        v8 = 3;
      else
        v8 = 1;
      break;
    case 2:
      v9 = v4 == 0;
      v10 = 10;
      goto LABEL_13;
    case 3:
      if (v4)
        v8 = 9;
      else
        v8 = 4;
      break;
    case 4:
      v9 = v4 == 0;
      v10 = 5;
      goto LABEL_13;
    case 5:
      v9 = v4 == 0;
      v10 = 7;
LABEL_13:
      if (v9)
        v8 = v10;
      else
        v8 = v10 + 1;
      break;
    default:
      v8 = -1;
      break;
  }

  return v8;
}

uint64_t _IDSFZIDTypeFromIDSIDType(unint64_t a1)
{
  if (a1 > 0xA)
    return -1;
  else
    return qword_19BB12D80[a1];
}

uint64_t _IDSIDSIDTypeFromFZIDType(unint64_t a1)
{
  if (a1 > 5)
    return -1;
  else
    return qword_19BB12DD8[a1];
}

uint64_t _IDSIDTypeHasToken(uint64_t a1)
{
  return ((unint64_t)(a1 + 1) < 0xD) & (0x1698u >> (a1 + 1));
}

uint64_t _IDSIsTrafficAllowed(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  uint64_t v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend_containsObject_(v3, v5, (uint64_t)CFSTR("com.apple.ids.trafficclass.all"), v6) & 1) != 0
    || (objc_msgSend_containsObject_(v4, v7, (uint64_t)CFSTR("com.apple.ids.trafficclass.control"), v8) & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v11 = objc_msgSend_intersectsSet_(v4, v9, (uint64_t)v3, v10);
  }

  return v11;
}

__CFString *IDSAccountKeyForServerKey(void *a1)
{
  __CFString *v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  __CFString **v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  const char *v19;
  double v20;
  __CFString *v21;
  __CFString *v22;
  const char *v24;
  double v25;
  const char *v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  NSObject *v31;

  v1 = a1;
  if (objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("handles"), v3))
  {
    v6 = IDSAuthenticationDictionaryKeyHandles;
LABEL_16:
    v21 = *v6;
    goto LABEL_17;
  }
  if (objc_msgSend_isEqualToString_(v1, v4, (uint64_t)CFSTR("email-address"), v5))
  {
    v6 = IDSAuthenticationDictionaryKeyEmailAddress;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v7, (uint64_t)CFSTR("auth-token"), v8))
  {
    v6 = IDSAuthenticationDictionaryKeyAuthToken;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v9, (uint64_t)CFSTR("self-handle"), v10))
  {
    v6 = IDSAuthenticationDictionaryKeySelfHandle;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v11, (uint64_t)CFSTR("invitation-context"), v12))
  {
    v6 = IDSAuthenticationDictionaryKeyInvitationContext;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v13, (uint64_t)CFSTR("apple-id"), v14))
  {
    v6 = IDSAuthenticationDictionaryKeyAppleID;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v15, (uint64_t)CFSTR("profile-id"), v16)
    || objc_msgSend_isEqualToString_(v1, v17, (uint64_t)CFSTR("realm-user-id"), v18))
  {
    v6 = IDSAuthenticationDictionaryKeyProfileID;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v19, (uint64_t)CFSTR("account-exists"), v20))
  {
    v6 = IDSAuthenticationDictionaryKeyAccountExists;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v24, (uint64_t)CFSTR("status"), v25))
  {
    v6 = IDSAuthenticationDictionaryKeyStatus;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v26, (uint64_t)CFSTR("alert"), v27))
  {
    v6 = IDSAuthenticationDictionaryKeyAlert;
    goto LABEL_16;
  }
  objc_msgSend_warning(MEMORY[0x1E0D36AA8], v28, v29, v30);
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
    sub_19BAF9498();

  v21 = v1;
LABEL_17:
  v22 = v21;

  return v22;
}

uint64_t IDSAuthenticationDelegateShouldStoreKey(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  id v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_arrayWithObjects_(MEMORY[0x1E0C99D20], v2, (uint64_t)CFSTR("auth-token"), v3, CFSTR("auth-token"), 0);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v15, v6, v19, 16);
  if (v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)v16;
    while (2)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v4);
        if (!objc_msgSend_caseInsensitiveCompare_(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), v8, (uint64_t)v1, v9))
        {
          v13 = 0;
          goto LABEL_11;
        }
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v15, v9, v19, 16);
      if (v10)
        continue;
      break;
    }
  }
  v13 = 1;
LABEL_11:

  return v13;
}

void IDSAuthenticationDelegateUpdateTimeOfLastRequestPost(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  double v14;
  BOOL v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  double v26;
  id v27;

  objc_msgSend_sharedDefaults(MEMORY[0x1E0D36AF8], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appValueForKey_(v4, v5, (uint64_t)CFSTR("AuthenticationDelegateResponseTime"), v6);
  v27 = (id)objc_claimAutoreleasedReturnValue();

  sub_19BA9402C(v10, v7, v8, v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (v15 || objc_msgSend_compare_(v13, v11, (uint64_t)v27, v14) == -1)
  {
    objc_msgSend_sharedDefaults(MEMORY[0x1E0D36AF8], v11, v12, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v18, v19, v20);
    objc_msgSend_numberWithDouble_(v17, v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAppValue_forKey_(v16, v25, (uint64_t)v24, v26, CFSTR("AuthenticationDelegateRequestPostedTime"));

  }
}

id sub_19BA9402C(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  double v6;
  void *v7;

  objc_msgSend_sharedDefaults(MEMORY[0x1E0D36AF8], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appValueForKey_(v4, v5, (uint64_t)CFSTR("AuthenticationDelegateRequestPostedTime"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id IDSAuthenticationDelegateUpdateTimeOfLastAuthenticationResponseAndGetDelta(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  double v4;
  double v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  double v29;
  const char *v30;
  uint64_t v31;
  void *v32;

  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], a3, a4, a1);
  v5 = v4;
  objc_msgSend_sharedDefaults(MEMORY[0x1E0D36AF8], v6, v7, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v9, v10, v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAppValue_forKey_(v8, v12, (uint64_t)v11, v13, CFSTR("AuthenticationDelegateResponseTime"));

  sub_19BA9402C(v17, v14, v15, v16);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    objc_msgSend_sharedDefaults(MEMORY[0x1E0D36AF8], v18, v19, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAppValueForKey_(v22, v23, (uint64_t)CFSTR("AuthenticationDelegateRequestPostedTime"), v24);

    v25 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_doubleValue(v20, v26, v27, v28);
    objc_msgSend_numberWithDouble_(v25, v30, v31, v5 - v29);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v32 = 0;
  }

  return v32;
}

uint64_t IDSAuthenticationDelegatePrintLoginDelegatesBag(void *a1, const char *a2, double a3)
{
  return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, a2, (uint64_t)&unk_1E3C21A88, a3);
}

void sub_19BA94160(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  int isEqual;
  const char *v16;
  uint64_t v17;
  double v18;
  _BOOL4 v19;
  const char *v20;
  double v21;
  void *v22;
  int v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (objc_msgSend_isEqual_(v4, v6, (uint64_t)CFSTR("password"), v7))
  {
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v8, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      v12 = "  => password : REDACTED";
      v13 = v11;
      v14 = 2;
LABEL_7:
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v23, v14);
    }
  }
  else
  {
    isEqual = objc_msgSend_isEqual_(v4, v8, (uint64_t)CFSTR("message"), v10);
    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v16, v17, v18);
    v11 = objc_claimAutoreleasedReturnValue();
    v19 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (isEqual)
    {
      if (v19)
      {
        v23 = 138543362;
        v24 = v5;
        v12 = "ServerErrorDetail: %{public}@";
        v13 = v11;
        v14 = 12;
        goto LABEL_7;
      }
    }
    else if (v19)
    {
      objc_msgSend_descriptionForObject_options_(IDSLogFormatter, v20, (uint64_t)v5, v21, 6);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412546;
      v24 = v4;
      v25 = 2112;
      v26 = v22;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "  => %@ : %@", (uint8_t *)&v23, 0x16u);

    }
  }

}

id IDSParseAuthDictionaryForServiceData(void *a1, const char *a2, double a3)
{
  void *v3;

  objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("service-data"), a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  IDSParseAuthDictionary(v3);
  objc_claimAutoreleasedReturnValue();

  return v3;
}

id IDSParseAuthDictionary(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_arrayWithObjects_(MEMORY[0x1E0C99D20], v2, (uint64_t)CFSTR("handles"), v3, CFSTR("email-address"), CFSTR("auth-token"), CFSTR("self-handle"), CFSTR("invitation-context"), CFSTR("apple-id"), CFSTR("realm-user-id"), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, 0.0, v23, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v18;
    v10 = 138412290;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v4);
        v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend_objectForKey_(v1, v7, v12, *(double *)&v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v13)
        {
          objc_msgSend_warning(MEMORY[0x1E0D36AA8], v7, v14, *(double *)&v10);
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v22 = v12;
            _os_log_error_impl(&dword_19B949000, v15, OS_LOG_TYPE_ERROR, "Missing keys in the authentication dictionary service keys.  Please file! [%@]", buf, 0xCu);
          }

        }
      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v17, *(double *)&v10, v23, 16);
    }
    while (v8);
  }

  return v1;
}

id IDSAccountPropertiesFromAuthenticationDictionary(void *a1)
{
  id v1;
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  void *v17;
  double v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    objc_msgSend_allKeys(v1, v3, v4, 0.0, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v20, v7, v24, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v21 != v10)
            objc_enumerationMutation(v5);
          v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          if (IDSAuthenticationDelegateShouldStoreKey(v12))
          {
            objc_msgSend_objectForKey_(v1, v13, (uint64_t)v12, v14);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            if (v15)
            {
              IDSAccountKeyForServerKey(v12);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              if (v17)
                objc_msgSend_setObject_forKey_(v2, v16, (uint64_t)v15, v18, v17);

            }
          }
        }
        v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v13, (uint64_t)&v20, v14, v24, 16);
      }
      while (v9);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFDictionary *IDSAccountInfoFromAuthenticationDictionary(void *a1)
{
  objc_class *v1;
  id v2;
  __CFDictionary *v3;
  const char *v4;
  double v5;
  void *v6;
  void *v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  void *v19;
  const char *v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  BOOL v32;

  v1 = (objc_class *)MEMORY[0x1E0C99E08];
  v2 = a1;
  v3 = (__CFDictionary *)objc_alloc_init(v1);
  IDSParseAuthDictionaryForServiceData(v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  IDSAccountPropertiesFromAuthenticationDictionary(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v7, v8, (uint64_t)CFSTR("self-handle"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v10, v11, (uint64_t)CFSTR("uri"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_objectForKey_(v7, v14, (uint64_t)CFSTR("handles"), v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend___imArrayByApplyingBlock_(v16, v17, (uint64_t)&unk_1E3C21AC8, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_objectForKey_(v7, v20, (uint64_t)CFSTR("profile-id"), v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v22)
    CFDictionarySetValue(v3, CFSTR("AuthID"), v22);

  objc_msgSend_objectForKey_(v7, v23, (uint64_t)CFSTR("apple-id"), v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (v25)
    CFDictionarySetValue(v3, CFSTR("AppleID"), v25);

  if (objc_msgSend_length(v13, v26, v27, v28))
    v32 = v13 == 0;
  else
    v32 = 1;
  if (!v32)
    CFDictionarySetValue(v3, CFSTR("SelfHandle"), v13);
  if (objc_msgSend_count(v19, v29, v30, v31) && v19)
    CFDictionarySetValue(v3, CFSTR("VettedAliases"), v19);

  return v3;
}

id sub_19BA94860(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  double v4;
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;

  v2 = a2;
  objc_msgSend_objectForKey_(v2, v3, (uint64_t)CFSTR("uri"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v2, v6, (uint64_t)CFSTR("status"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v2) = objc_msgSend_intValue(v8, v9, v10, v11);
  if ((_DWORD)v2 == 5051)
  {
    objc_msgSend__stripFZIDPrefix(v5, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

id IDSPrintedCapabilities(__int16 a1)
{
  id v2;
  const char *v3;
  double v4;
  void *v5;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v5 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend_appendString_(v2, v3, (uint64_t)CFSTR("    * kIDSListenerCapConsumesLaunchOnDemandIncomingMessages\n"), v4);
  if ((a1 & 2) != 0)
    objc_msgSend_appendString_(v5, v3, (uint64_t)CFSTR("    * kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates\n"), v4);
  if ((a1 & 4) != 0)
    objc_msgSend_appendString_(v5, v3, (uint64_t)CFSTR("    * kIDSListenerCapConsumesLaunchOnDemandSessionMessages\n"), v4);
  if ((a1 & 8) != 0)
    objc_msgSend_appendString_(v5, v3, (uint64_t)CFSTR("    * kIDSListenerCapConsumesLaunchOnDemandIncomingData\n"), v4);
  if ((a1 & 0x10) != 0)
    objc_msgSend_appendString_(v5, v3, (uint64_t)CFSTR("    * kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf\n"), v4);
  if ((a1 & 0x800) != 0)
    objc_msgSend_appendString_(v5, v3, (uint64_t)CFSTR("    * kIDSListenerCapConsumesLaunchOnDemandInvitationUpdates\n"), v4);
  return v5;
}

id IDSPrettyListOfEnabledCapabilities(__int16 a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  void *v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend_addObject_(v2, v3, (uint64_t)CFSTR("IncomingMessages"), v5);
  if ((a1 & 2) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("OutgoingMessageUpdates"), v5);
  if ((a1 & 4) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("SessionMessages"), v5);
  if ((a1 & 8) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("IncomingData"), v5);
  if ((a1 & 0x10) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("IncomingProtobuf"), v5);
  if ((a1 & 0x800) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("InvitationUpdates"), v5);
  if ((a1 & 0x20) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("IncomingResource"), v5);
  if ((a1 & 0x40) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("Engram"), v5);
  if ((a1 & 0x80) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("NetworkAvailableHint"), v5);
  if ((a1 & 0x100) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("AccessoryReportMessages"), v5);
  if ((a1 & 0x200) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("GroupSessionParticipantUpdates"), v5);
  if ((a1 & 0x400) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("PendingMessageUpdates"), v5);
  if ((a1 & 0x1000) != 0)
    objc_msgSend_addObject_(v6, v3, (uint64_t)CFSTR("PendingResource"), v5);
  v7 = (void *)objc_msgSend_copy(v6, v3, v4, v5);

  return v7;
}

uint64_t IDSDataProtectionClassFromDataProtectionClassString(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  double v8;

  v1 = a1;
  if ((objc_msgSend_isEqualToIgnoringCase_(v1, v2, (uint64_t)CFSTR("a"), v3) & 1) != 0)
  {
    v6 = 1;
  }
  else if ((objc_msgSend_isEqualToIgnoringCase_(v1, v4, (uint64_t)CFSTR("c"), v5) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend_isEqualToIgnoringCase_(v1, v7, (uint64_t)CFSTR("d"), v8);
    v6 = 2;
  }

  return v6;
}

void _IDSsetTestOverridesForProfile(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;

  v5 = a3;
  v4 = a2;
  IMSetDomainValueForKey();
  IMSetDomainValueForKey();

  IMSetDomainValueForKey();
}

id sub_19BA94D0C(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  id v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  const char *v19;
  double v20;
  void *v21;
  const char *v22;
  double v23;
  __int128 v24;
  id v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  size_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  size_t v42;
  id v43;
  const char *v44;
  double v45;
  void *v46;
  unint64_t v48;
  _OWORD macOut[2];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a1;
  v48 = bswap64(objc_msgSend_unsignedLongLongValue(a2, v7, v8, v9));
  v10 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  objc_msgSend_dataUsingEncoding_(v6, v11, 4, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v14, (uint64_t)&v48, v15, 8);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendData_(v10, v17, (uint64_t)v16, v18);

  objc_msgSend_dataUsingEncoding_(v5, v19, 4, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_appendData_(v10, v22, (uint64_t)v21, v23);
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  macOut[0] = v24;
  macOut[1] = v24;
  v25 = objc_retainAutorelease(v13);
  v29 = (const void *)objc_msgSend_bytes(v25, v26, v27, v28);
  v33 = objc_msgSend_length(v25, v30, v31, v32);
  v34 = objc_retainAutorelease(v10);
  v38 = (const void *)objc_msgSend_bytes(v34, v35, v36, v37);
  v42 = objc_msgSend_length(v34, v39, v40, v41);
  CCHmac(2u, v29, v33, v38, v42, macOut);
  v43 = objc_alloc(MEMORY[0x1E0C99D50]);
  v46 = (void *)objc_msgSend_initWithBytes_length_(v43, v44, (uint64_t)macOut, v45, 32);

  return v46;
}

id sub_19BA94E90()
{
  void *v0;
  const char *v1;
  double v2;
  void *v3;
  id v4;
  const char *v5;
  double v6;
  void *v7;

  MEMORY[0x1A1AC71DC](CFSTR("com.apple.ids"), CFSTR("kIDSTestOverridesKey"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dataWithJSONObject_options_error_(MEMORY[0x1E0CB36D8], v1, (uint64_t)v0, v2, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  v7 = (void *)objc_msgSend_initWithData_encoding_(v4, v5, (uint64_t)v3, v6, 4);

  return v7;
}

id _IDStestOverrideSignatureHeader(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  const char *v18;
  double v19;
  const char *v20;
  double v21;
  const char *v22;
  double v23;
  const char *v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  const char *v32;
  double v33;
  const char *v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  double v39;

  v9 = a4;
  v10 = a2;
  v11 = a1;
  sub_19BA94D0C(a3, v9, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend_stringValue(v11, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_appendString_(v13, v18, (uint64_t)v17, v19);
  objc_msgSend_appendString_(v13, v20, (uint64_t)CFSTR(":"), v21);
  objc_msgSend_appendString_(v13, v22, (uint64_t)v10, v23);

  objc_msgSend_appendString_(v13, v24, (uint64_t)CFSTR(":"), v25);
  objc_msgSend_stringValue(v9, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_appendString_(v13, v30, (uint64_t)v29, v31);
  objc_msgSend_appendString_(v13, v32, (uint64_t)CFSTR(":"), v33);
  objc_msgSend__CUTStringFromBaseData(v12, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v13, v38, (uint64_t)v37, v39);

  return v13;
}

__CFDictionary *IDSAdditionalRequestHeaders()
{
  __CFDictionary *v0;
  const char *v1;
  uint64_t v2;
  double v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  int isInternalInstall;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  int v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  double v33;
  const char *v34;
  void *v35;
  void *v36;

  v0 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v1, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (isInternalInstall && (IMGetDomainBoolForKey() & 1) == 0)
    CFDictionarySetValue(v0, CFSTR("x-internal"), CFSTR("true"));
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_isInternalInstall(v12, v13, v14, v15);

  if (v16)
  {
    if (IMGetDomainBoolForKey())
      CFDictionarySetValue(v0, CFSTR("X-Apple-Test-Application"), CFSTR("true"));
    MEMORY[0x1A1AC71DC](CFSTR("com.apple.ids"), CFSTR("testOptionsHeader"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      CFDictionarySetValue(v0, CFSTR("X-Apple-Test-Options"), v17);
    MEMORY[0x1A1AC71DC](CFSTR("com.apple.ids"), CFSTR("x-test-opts"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v18, v19, v20, v21) && v18)
      CFDictionarySetValue(v0, CFSTR("x-test-opts"), v18);
    MEMORY[0x1A1AC71DC](CFSTR("com.apple.ids"), CFSTR("kIDSTestOverridesProfileKey"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      MEMORY[0x1A1AC71DC](CFSTR("com.apple.ids"), CFSTR("kIDSTestOverridesSecretKey"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      sub_19BA94E90();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_alloc(MEMORY[0x1E0CB37E8]);
      objc_msgSend_now(MEMORY[0x1E0C99D68], v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_timeIntervalSince1970(v29, v30, v31, v32);
      v35 = (void *)objc_msgSend_initWithLongLong_(v25, v34, 1000 * (uint64_t)v33, v33);

      _IDStestOverrideSignatureHeader(&unk_1E3C86B08, v22, v23, v35, v24);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      if (v36)
        CFDictionarySetValue(v0, CFSTR("X-Apple-Test-Options-Signature"), v36);
      if (v24)
        CFDictionarySetValue(v0, CFSTR("X-Apple-Test-Options-JSON"), v24);

    }
  }
  if (((MarcoShouldLog() & 1) != 0 || IMShouldLog()) && (IMGetDomainBoolForKey() & 1) == 0)
    CFDictionarySetValue(v0, CFSTR("x-logging"), CFSTR("true"));
  return v0;
}

uint64_t IDSIsRunningOnN2xAWatch()
{
  if (qword_1EE40AF50 != -1)
    dispatch_once(&qword_1EE40AF50, &unk_1E3C21AE8);
  return byte_1EE40AC78;
}

uint64_t sub_19BA95320()
{
  uint64_t result;

  result = MGIsDeviceOneOfType();
  byte_1EE40AC78 = result;
  return result;
}

BOOL IDSCommandIsGroupSessionCommand(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  _BOOL8 v23;

  v1 = a1;
  v23 = objc_msgSend_integerValue(v1, v2, v3, v4) == 207
     || objc_msgSend_integerValue(v1, v5, v6, v7) == 208
     || objc_msgSend_integerValue(v1, v8, v9, v10) == 211
     || objc_msgSend_integerValue(v1, v11, v12, v13) == 210
     || objc_msgSend_integerValue(v1, v14, v15, v16) == 209
     || objc_msgSend_integerValue(v1, v17, v18, v19) == 239
     || objc_msgSend_integerValue(v1, v20, v21, v22) == 206;

  return v23;
}

BOOL IDSCommandIsUserInteractiveCommand(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  const char *v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  double v55;
  const char *v56;
  uint64_t v57;
  double v58;
  const char *v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  uint64_t v69;
  double v70;
  const char *v71;
  uint64_t v72;
  double v73;
  const char *v74;
  uint64_t v75;
  double v76;
  const char *v77;
  uint64_t v78;
  double v79;
  const char *v80;
  uint64_t v81;
  double v82;
  const char *v83;
  uint64_t v84;
  double v85;
  const char *v86;
  uint64_t v87;
  double v88;
  _BOOL8 v89;

  v1 = a1;
  v89 = objc_msgSend_integerValue(v1, v2, v3, v4) == 1
     || objc_msgSend_integerValue(v1, v5, v6, v7) == 2
     || objc_msgSend_integerValue(v1, v8, v9, v10) == 3
     || objc_msgSend_integerValue(v1, v11, v12, v13) == 4
     || objc_msgSend_integerValue(v1, v14, v15, v16) == 100
     || objc_msgSend_integerValue(v1, v17, v18, v19) == 104
     || objc_msgSend_integerValue(v1, v20, v21, v22) == 117
     || objc_msgSend_integerValue(v1, v23, v24, v25) == 118
     || objc_msgSend_integerValue(v1, v26, v27, v28) == 122
     || objc_msgSend_integerValue(v1, v29, v30, v31) == 195
     || objc_msgSend_integerValue(v1, v32, v33, v34) == 196
     || objc_msgSend_integerValue(v1, v35, v36, v37) == 207
     || objc_msgSend_integerValue(v1, v38, v39, v40) == 209
     || objc_msgSend_integerValue(v1, v41, v42, v43) == 227
     || objc_msgSend_integerValue(v1, v44, v45, v46) == 232
     || objc_msgSend_integerValue(v1, v47, v48, v49) == 233
     || objc_msgSend_integerValue(v1, v50, v51, v52) == 234
     || objc_msgSend_integerValue(v1, v53, v54, v55) == 235
     || objc_msgSend_integerValue(v1, v56, v57, v58) == 236
     || objc_msgSend_integerValue(v1, v59, v60, v61) == 237
     || objc_msgSend_integerValue(v1, v62, v63, v64) == 238
     || objc_msgSend_integerValue(v1, v65, v66, v67) == 239
     || objc_msgSend_integerValue(v1, v68, v69, v70) == 242
     || objc_msgSend_integerValue(v1, v71, v72, v73) == 243
     || objc_msgSend_integerValue(v1, v74, v75, v76) == 245
     || objc_msgSend_integerValue(v1, v77, v78, v79) == 246
     || objc_msgSend_integerValue(v1, v80, v81, v82) == 247
     || objc_msgSend_integerValue(v1, v83, v84, v85) == 248
     || objc_msgSend_integerValue(v1, v86, v87, v88) == 249;

  return v89;
}

uint64_t IDSIsVirtualMachine()
{
  if (qword_1EE40AEF8 != -1)
    dispatch_once(&qword_1EE40AEF8, &unk_1E3C21B08);
  return byte_1EE40B4B1;
}

uint64_t sub_19BA9568C()
{
  uint64_t result;
  NSObject *v1;
  uint8_t v2[16];
  size_t v3;
  int v4;

  v4 = 0;
  v3 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v4, &v3, 0, 0);
  if ((_DWORD)result)
  {
    OSLogHandleForIDSCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_19B949000, v1, OS_LOG_TYPE_ERROR, "Unable to tell if device is a VM", v2, 2u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      _IDSWarnV();
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("Unable to tell if device is a VM"));
      return _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("Unable to tell if device is a VM"));
    }
  }
  else
  {
    byte_1EE40B4B1 = v4 != 0;
  }
  return result;
}

uint64_t IDSAssertNonFatalErrnoWithSource(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, double a5)
{
  const char *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  const char *v20;
  double v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((result - 23) <= 1)
  {
    v5 = "-";
    if (a2)
      v5 = a2;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("fatal errno %d for [%s] at %s:%d"), a5, result, v5, a3, a4);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v10 = objc_msgSend_UTF8String(v6, v7, v8, v9);
    IDSNetworkingLogDump(v10, 0x14u);
    OSLogHandleForIDSCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v23 = v6;
      v24 = 1024;
      v25 = 5;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_ERROR, "Fatal error encountered %@, aborting in %d seconds", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("Warning"), CFSTR("Fatal error encountered %@, aborting in %d seconds"));
      _IDSLogTransport(CFSTR("Warning"), CFSTR("IDS"), CFSTR("Fatal error encountered %@, aborting in %d seconds"));
    }
    sleep(5u);
    v12 = objc_retainAutorelease(v6);
    qword_1EE40A998 = objc_msgSend_UTF8String(v12, v13, v14, v15);
    v19 = isRunningTests(v18, qword_1EE40A998, v16, v17);
    if ((_DWORD)v19)
      throwsIDSAbortException(v21, v19, v20);
    abort();
  }
  return result;
}

uint64_t isRunningTests(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;
  void *v11;
  uint64_t v12;

  objc_msgSend_processInfo(MEMORY[0x1E0CB3898], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_environment(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)CFSTR("XCTestConfigurationFilePath"), v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {

    v12 = 1;
  }
  else
  {
    v12 = os_parse_boot_arg_string();
  }

  return v12;
}

void throwsIDSAbortException(double a1, uint64_t a2, const char *a3)
{
  id v3;

  objc_msgSend_exceptionWithName_reason_userInfo_(MEMORY[0x1E0C99DA0], a3, (uint64_t)CFSTR("IDSAbort"), a1, CFSTR("IDSAbort called!"), 0);
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_exception_throw(v3);
}

void IDSCheckFileDescriptorUsageWithSource(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int *v7;
  const char *v8;
  double v9;
  uint32_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  int isSupported;
  int v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  void *v20;
  const char *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  double v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  double v33;
  void *v34;
  id v35;
  const char *v36;
  double v37;
  id v38;
  _QWORD v39[4];
  id v40;

  v6 = socket(2, 2, 0);
  v7 = __error();
  if (v6 <= 0)
  {
    v24 = *v7;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v8, (uint64_t)CFSTR("Too many file descriptors detected at %s:%d!"), v9, a1, a2);
    v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v28 = (const char *)objc_msgSend_UTF8String(v38, v25, v26, v27);
    IDSAssertNonFatalErrnoWithSource(v24, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSFoundationUtils.m", 1961, v29);

  }
  else
  {
    close(v6);
    if (v6 >= 0xB4)
    {
      v10 = arc4random_uniform(0x64u);
      isSupported = objc_msgSend_isSupported(IDSAutoBugCapture, v11, v12, v13);
      v15 = v10 < 5 ? 1 : a3;
      if (isSupported && v15)
      {
        if (qword_1EE40B4C8 != -1)
          dispatch_once(&qword_1EE40B4C8, &unk_1E3C21B28);
        os_unfair_lock_lock((os_unfair_lock_t)&dword_1EE40B4C0);
        v19 = (void *)qword_1EE40B4B8;
        if (qword_1EE40B4B8
          && (objc_msgSend_date(MEMORY[0x1E0C99D68], v16, v17, v18),
              v20 = (void *)objc_claimAutoreleasedReturnValue(),
              v23 = objc_msgSend_compare_(v19, v21, (uint64_t)v20, v22),
              v20,
              v23 == 1))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EE40B4C0);
        }
        else
        {
          objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E0C99D68], v16, v17, 259200.0);
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = (void *)qword_1EE40B4B8;
          qword_1EE40B4B8 = v30;

          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v32, (uint64_t)CFSTR("Number of file descriptors passed high watermark in %s!"), v33, a1);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v39[0] = MEMORY[0x1E0C809B0];
          v39[1] = 3221225472;
          v39[2] = sub_19BA95CF0;
          v39[3] = &unk_1E3C21B50;
          v35 = v34;
          v40 = v35;
          objc_msgSend_triggerCaptureWithEvent_context_completion_(IDSAutoBugCapture, v36, 207, v37, v35, v39);

          os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EE40B4C0);
        }
      }
    }
  }
}

void sub_19BA95CC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EE40B4C0);
  _Unwind_Resume(a1);
}

void sub_19BA95CE4()
{
  dword_1EE40B4C0 = 0;
}

void sub_19BA95CF0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_System(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "Finished capturing AutoBugCapture diagnostics for %@", (uint8_t *)&v7, 0xCu);
  }

}

void IDSInternalAlertSimple(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  OSLogHandleForTransportCategory();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v23 = v8;
    v24 = 2112;
    v25 = v9;
    v26 = 2112;
    v27 = v10;
    _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "Raising alert for [%@] [%@] [%@]", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("IDSFoundationUtils"), CFSTR("IDS"), CFSTR("Raising alert for [%@] [%@] [%@]"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSFoundationUtils"), CFSTR("Raising alert for [%@] [%@] [%@]"));
    }
  }
  im_primary_queue();
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19BA95FCC;
  block[3] = &unk_1E3C21B78;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v13 = v10;
  v14 = v9;
  v15 = v8;
  v16 = v7;
  dispatch_async(v12, block);

}

void sub_19BA95FCC(uint64_t *a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  int isInternalInstall;
  const char *v10;
  uint64_t v11;
  double v12;
  id v13;
  const char *v14;
  double v15;
  const char *v16;
  double v17;
  void *v18;
  const char *v19;
  double v20;
  const char *v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  double v29;
  id v30;

  objc_msgSend_sharedInstance(MEMORY[0x1E0D36A50], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isInternalInstall = objc_msgSend_isInternalInstall(v5, v6, v7, v8);

  if (isInternalInstall)
  {
    objc_msgSend_date(MEMORY[0x1E0C99D68], v10, v11, v12);
    v30 = (id)objc_claimAutoreleasedReturnValue();
    v13 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend_setDateFormat_(v13, v14, (uint64_t)CFSTR("YYYY-MM-dd"), v15);
    objc_msgSend_dateFromString_(v13, v16, a1[4], v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_timeIntervalSinceDate_(v30, v19, (uint64_t)v18, v20);
    if (v22 < 0.0)
    {
      objc_msgSend_userNotificationWithIdentifier_title_message_defaultButton_alternateButton_otherButton_(MEMORY[0x1E0D36B00], v21, a1[5], v22, a1[6], a1[7], CFSTR("OK"), 0, 0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sharedInstance(MEMORY[0x1E0D36B08], v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addUserNotification_listener_(v27, v28, (uint64_t)v23, v29, 0);

    }
  }
}

uint64_t IDSDeviceTypeFromProductName(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  double v5;
  const char *v6;
  double v7;
  const char *v8;
  double v9;
  const char *v10;
  double v11;
  const char *v12;
  double v13;
  const char *v14;
  double v15;
  const char *v16;
  double v17;
  const char *v18;
  double v19;
  uint64_t v20;

  v1 = a1;
  if (objc_msgSend_rangeOfString_(v1, v2, (uint64_t)CFSTR("iPod"), v3) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (objc_msgSend_rangeOfString_(v1, v4, (uint64_t)CFSTR("iPad"), v5) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend_rangeOfString_(v1, v6, (uint64_t)CFSTR("iPhone"), v7) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend_rangeOfString_(v1, v8, (uint64_t)CFSTR("Mac"), v9) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend_rangeOfString_(v1, v10, (uint64_t)CFSTR("AppleTV"), v11) == 0x7FFFFFFFFFFFFFFFLL)
          {
            if (objc_msgSend_rangeOfString_(v1, v12, (uint64_t)CFSTR("Watch"), v13) == 0x7FFFFFFFFFFFFFFFLL)
            {
              if (objc_msgSend_rangeOfString_(v1, v14, (uint64_t)CFSTR("AudioAccessory"), v15) == 0x7FFFFFFFFFFFFFFFLL)
              {
                if (objc_msgSend_rangeOfString_(v1, v16, (uint64_t)CFSTR("Browser"), v17) == 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (objc_msgSend_rangeOfString_(v1, v18, (uint64_t)CFSTR("xrOS"), v19) == 0x7FFFFFFFFFFFFFFFLL)
                    v20 = 0;
                  else
                    v20 = 9;
                }
                else
                {
                  v20 = 8;
                }
              }
              else
              {
                v20 = 7;
              }
            }
            else
            {
              v20 = 6;
            }
          }
          else
          {
            v20 = 5;
          }
        }
        else
        {
          v20 = 1;
        }
      }
      else
      {
        v20 = 2;
      }
    }
    else
    {
      v20 = 4;
    }
  }
  else
  {
    v20 = 3;
  }

  return v20;
}

id sub_19BA96230(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  objc_class *v5;
  id v6;
  id v7;
  const char *v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;

  v5 = (objc_class *)MEMORY[0x1E0CB3710];
  v6 = a4;
  v7 = [v5 alloc];
  v10 = (void *)objc_msgSend_initForReadingFromData_error_(v7, v8, (uint64_t)v6, v9, 0);

  objc_msgSend_setDecodingFailurePolicy_(v10, v11, 0, v12);
  objc_msgSend_decodeObjectOfClass_forKey_(v10, v13, a3, v14, *MEMORY[0x1E0CB2CD0]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishDecoding(v10, v16, v17, v18);

  return v15;
}

uint64_t sub_19BA962BC(void *a1, uint64_t a2, void *a3)
{
  void (**v4)(_QWORD);
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;

  v4 = a3;
  objc_msgSend_lockForReading(a1, v5, v6, v7);
  v4[2](v4);

  return objc_msgSend_unlock(a1, v8, v9, v10);
}

uint64_t sub_19BA962FC(void *a1, uint64_t a2, void *a3)
{
  void (**v4)(_QWORD);
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;

  v4 = a3;
  objc_msgSend_lockForWriting(a1, v5, v6, v7);
  v4[2](v4);

  return objc_msgSend_unlock(a1, v8, v9, v10);
}

id sub_19BA9633C(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  double v7;
  void *v8;

  v3 = (objc_class *)MEMORY[0x1E0C99D50];
  v4 = a3;
  v5 = [v3 alloc];
  v8 = (void *)objc_msgSend_initWithBase64EncodedString_options_(v5, v6, (uint64_t)v4, v7, 0);

  return v8;
}

uint64_t sub_19BA96384(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_phoneNumber(a3, (const char *)a3, a4, a1);
}

void sub_19BA9647C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  if (IMShouldLog())
    IMLogString_V();

}

void sub_19BA964EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  if (IMShouldLog())
    IMLogString_V();

}

uint64_t sub_19BA967C8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v10[16];

  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "URL Loading service disconnected", v10, 2u);
  }

  v3 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v3)
  {
    sub_19BA9647C(v3, (uint64_t)v4, CFSTR("URL Loading service disconnected"));
    sub_19BA964EC(v7, v8, CFSTR("URL Loading service disconnected"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  return objc_msgSend__disconnected(*(void **)(a1 + 32), v4, v5, v6);
}

uint64_t sub_19BA9693C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19BA96FE8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void (**v8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  void *v32;
  int64_t int64;
  void *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  int v50;
  const char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  double v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  double v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  int v97;
  uint64_t v98;
  int v99;
  dispatch_time_t v100;
  NSObject *v101;
  NSObject *v102;
  uint64_t v103;
  const char *v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD block[5];
  uint8_t buf[4];
  _BYTE v121[10];
  void *v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = MEMORY[0x1A1AC8B08]();
  v8 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 24), v5, v6, v7);
  if (v4 == MEMORY[0x1E0C81310])
  {
    OSLogHandleForIDSCategory();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      v73 = *(_QWORD **)(a1 + 32);
      v74 = v73[1];
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v121 = v74;
      *(_WORD *)&v121[8] = 2048;
      v122 = v73;
      _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "Loaded disconnected for request: %@  (%p)", buf, 0x16u);
    }

    v75 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v75)
    {
      sub_19BA9647C(v75, v76, CFSTR("Loaded disconnected for request: %@  (%p)"));
      v109 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v113 = *(_QWORD *)(a1 + 32);
      sub_19BA964EC(v77, v78, CFSTR("Loaded disconnected for request: %@  (%p)"));
      if ((_IMWillLog() & 1) != 0)
      {
        v109 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v113 = *(_QWORD *)(a1 + 32);
        _IMAlwaysLog();
      }
    }
    OSLogHandleForIDSCategory();
    v79 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      v80 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v121 = v80;
      _os_log_impl(&dword_19B949000, v79, OS_LOG_TYPE_ERROR, "Remote loader crashed for request: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      sub_19BA97CCC();
      sub_19BA97D14();
      v109 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      _IDSWarnV();
    }
    objc_msgSend__disconnected(*(void **)(a1 + 32), v81, v82, v83, v109, v113);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40))
    {
      OSLogHandleForIDSCategory();
      v84 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v84, OS_LOG_TYPE_DEFAULT, "           Cancelled, not retrying or notifying of failure!", buf, 2u);
      }

      v85 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v85)
      {
        sub_19BA9647C(v85, v86, CFSTR("           Cancelled, not retrying or notifying of failure!"));
        sub_19BA964EC(v87, v88, CFSTR("           Cancelled, not retrying or notifying of failure!"));
        if ((_IMWillLog() & 1) != 0)
          _IMAlwaysLog();
      }
    }
    else if (*(int *)(*(_QWORD *)(a1 + 32) + 44) > 4)
    {
      OSLogHandleForIDSCategory();
      v102 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v102, OS_LOG_TYPE_DEFAULT, "Not retrying, calling completion block", buf, 2u);
      }

      v103 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v103)
      {
        sub_19BA9647C(v103, (uint64_t)v104, CFSTR("Not retrying, calling completion block"));
        sub_19BA964EC(v106, v107, CFSTR("Not retrying, calling completion block"));
        if ((_IMWillLog() & 1) != 0)
          _IMAlwaysLog();
      }
      if (v8)
      {
        objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v104, *MEMORY[0x1E0D367A0], v105, -1, 0);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, void *, _QWORD))v8)[2](v8, 0, 0, 0, v108, 0);

      }
    }
    else
    {
      OSLogHandleForIDSCategory();
      v90 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        v91 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v121 = v91;
        *(_WORD *)&v121[4] = 1024;
        *(_DWORD *)&v121[6] = 5;
        _os_log_impl(&dword_19B949000, v90, OS_LOG_TYPE_DEFAULT, " => Retrying... (%d/%d) retries", buf, 0xEu);
      }

      v92 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v92)
      {
        sub_19BA9647C(v92, v93, CFSTR(" => Retrying... (%d/%d) retries"));
        sub_19BA964EC(v94, v95, CFSTR(" => Retrying... (%d/%d) retries"));
        if ((_IMWillLog() & 1) != 0)
          _IMAlwaysLog();
      }
      OSLogHandleForIDSCategory();
      v96 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        v97 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v121 = v97;
        *(_WORD *)&v121[4] = 1024;
        *(_DWORD *)&v121[6] = 5;
        _os_log_impl(&dword_19B949000, v96, OS_LOG_TYPE_ERROR, " => Retrying... (%d/%d) retries", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        sub_19BA97CCC();
        sub_19BA97D14();
        _IDSWarnV();
      }
      v98 = *(_QWORD *)(a1 + 32);
      v99 = *(_DWORD *)(v98 + 44);
      *(_DWORD *)(v98 + 44) = v99 + 1;
      v100 = dispatch_time(0, 2000000000 * v99);
      im_primary_queue();
      v101 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_19BA97D5C;
      block[3] = &unk_1E3C1F898;
      block[4] = *(_QWORD *)(a1 + 32);
      dispatch_after(v100, v101, block);

    }
  }
  else
  {
    OSLogHandleForIDSCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD **)(a1 + 32);
      v14 = v13[1];
      objc_msgSend_bundleIdentifierForDataUsage(v13, v10, v11, v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v121 = v14;
      *(_WORD *)&v121[8] = 2112;
      v122 = v15;
      v123 = 2048;
      v124 = v16;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "Loaded completed for request: %@  (Data usage identifier: %@) (%p)", buf, 0x20u);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      v20 = *(_QWORD **)(a1 + 32);
      v21 = v20[1];
      objc_msgSend_bundleIdentifierForDataUsage(v20, v17, v18, v19);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      v117 = *(_QWORD *)(a1 + 32);
      v110 = v21;
      sub_19BA9647C((uint64_t)v114, v22, CFSTR("Loaded completed for request: %@  (Data usage identifier: %@) (%p)"));

      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      objc_msgSend_bundleIdentifierForDataUsage(*(void **)(a1 + 32), v24, v25, v26, v110, v114, v117);
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      v118 = *(_QWORD *)(a1 + 32);
      sub_19BA964EC((uint64_t)v115, v27, CFSTR("Loaded completed for request: %@  (Data usage identifier: %@) (%p)"));

      if ((_IMWillLog() & 1) != 0)
      {
        objc_msgSend_bundleIdentifierForDataUsage(*(void **)(a1 + 32), v28, v29, v30, v23, v115, v118);
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        _IMAlwaysLog();

      }
    }
    objc_opt_class();
    IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    int64 = xpc_dictionary_get_int64(v3, (const char *)*MEMORY[0x1E0D370D0]);
    IMGetXPCDataFromDictionary();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    IMGetXPCDictionaryFromDictionary();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    OSLogHandleForIDSCategory();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v121 = v31;
      _os_log_impl(&dword_19B949000, v36, OS_LOG_TYPE_DEFAULT, "           Response: %@", buf, 0xCu);
    }

    v37 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v37)
    {
      sub_19BA9647C(v37, v38, CFSTR("           Response: %@"));
      sub_19BA964EC(v39, v40, CFSTR("           Response: %@"));
      if ((_IMWillLog() & 1) != 0)
        _IMAlwaysLog();
    }
    OSLogHandleForIDSCategory();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v121 = int64;
      _os_log_impl(&dword_19B949000, v41, OS_LOG_TYPE_DEFAULT, "        Status Code: %d", buf, 8u);
    }

    v42 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v42)
    {
      sub_19BA9647C(v42, v43, CFSTR("        Status Code: %d"));
      sub_19BA964EC(v44, v45, CFSTR("        Status Code: %d"));
      if ((_IMWillLog() & 1) != 0)
        _IMAlwaysLog();
    }
    OSLogHandleForIDSCategory();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      v50 = objc_msgSend_length(v34, v47, v48, v49);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v121 = v50;
      _os_log_impl(&dword_19B949000, v46, OS_LOG_TYPE_DEFAULT, " Result Data Length: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      v111 = objc_msgSend_length(v34, v51, v52, v53);
      sub_19BA9647C(v111, v54, CFSTR(" Result Data Length: %d"));
      v112 = objc_msgSend_length(v34, v55, v56, v57, v111);
      sub_19BA964EC(v112, v58, CFSTR(" Result Data Length: %d"));
      if ((_IMWillLog() & 1) != 0)
      {
        objc_msgSend_length(v34, v59, v60, v61, v112);
        _IMAlwaysLog();
      }
    }
    OSLogHandleForIDSCategory();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v121 = v32;
      _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "              Error: %@", buf, 0xCu);
    }

    v63 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v63)
    {
      sub_19BA9647C(v63, v64, CFSTR("              Error: %@"));
      sub_19BA964EC(v65, v66, CFSTR("              Error: %@"));
      if ((_IMWillLog() & 1) != 0)
        _IMAlwaysLog();
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40))
    {
      OSLogHandleForIDSCategory();
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v67, OS_LOG_TYPE_DEFAULT, "           Cancelled, not calling out!", buf, 2u);
      }

      v68 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v68)
      {
        sub_19BA9647C(v68, v69, CFSTR("           Cancelled, not calling out!"));
        sub_19BA964EC(v70, v71, CFSTR("           Cancelled, not calling out!"));
        if ((_IMWillLog() & 1) != 0)
          _IMAlwaysLog();
      }
    }
    else if (v8)
    {
      ((void (**)(_QWORD, void *, int64_t, void *, void *, void *))v8)[2](v8, v31, int64, v34, v32, v35);
    }

  }
  v89 = (id)objc_opt_self();

}

uint64_t sub_19BA97CCC()
{
  return IMWarnString_V();
}

uint64_t sub_19BA97D14()
{
  return IMWarnString_V();
}

uint64_t sub_19BA97D5C(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_load, a4, a2);
}

void sub_19BA982E8()
{
  IDSWRMExchange *v0;
  void *v1;

  v0 = objc_alloc_init(IDSWRMExchange);
  v1 = (void *)qword_1ECDD4820;
  qword_1ECDD4820 = (uint64_t)v0;

}

uint64_t sub_19BA984C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 96) = a3 != 0;
  return result;
}

void sub_19BA985A8(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A1AC8274]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_19BA9885C(uint64_t a1, uint64_t a2, double a3)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processXPCEvent_, a2, a3);
}

void sub_19BA98904(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  uint64_t v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  double v18;
  id updated;

  objc_msgSend__stopXPCConnection(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend__startXPCConnection(*(void **)(a1 + 32), v5, v6, v7);
  objc_msgSend__registerWithWRM(*(void **)(a1 + 32), v8, v9, v10);
  objc_msgSend__restartSubscriptionIfNeeded(*(void **)(a1 + 32), v11, v12, v13);
  updated = (id)objc_msgSend__newSubscribeStatusUpdateMessage(*(void **)(a1 + 32), v14, v15, v16);
  objc_msgSend__sendXPCMessage_(*(void **)(a1 + 32), v17, (uint64_t)updated, v18);

}

uint64_t sub_19BA990B8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t result;

  result = objc_msgSend__restartClient(*(void **)(a1 + 32), a2, a3, a4);
  ++*(_WORD *)(*(_QWORD *)(a1 + 32) + 80);
  return result;
}

void sub_19BA99178(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v5 + 16))
  {
    objc_msgSend__startXPCConnection((void *)v5, a2, a3, a4);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v5 + 48))
  {
    if (*(_QWORD *)(v5 + 16) && *(_QWORD *)(a1 + 40))
    {
      v6 = (void *)MEMORY[0x1A1AC8A78]();
      v7 = (void *)MEMORY[0x1A1AC8A78](*(_QWORD *)(a1 + 40));
      OSLogHandleForIDSCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v10 = v6;
        v11 = 2080;
        v12 = v7;
        _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "Send to con = %s, message = \n %s", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSWRMExchange"), CFSTR("Send to con = %s, message = \n %s"));
      }
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 32) + 16), *(xpc_object_t *)(a1 + 40));
      free(v6);
      free(v7);
    }
  }
  else
  {
    objc_msgSend__registerWithWRM((void *)v5, a2, a3, a4);
  }
}

void sub_19BA9982C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BA99840(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  double v12;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "Subscribe to WRM for link recommendations of type: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSWRMExchange"), CFSTR("Subscribe to WRM for link recommendations of type: %d"));
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 != 2)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = (void **)(a1 + 32);
    *(_QWORD *)(v9 + 40) = v7;
    v10 = (void *)objc_msgSend__newSubscribeMessage(*v8, v4, v5, v6);
    objc_msgSend__sendXPCMessage_(*v8, v11, (uint64_t)v10, v12);
    *((_BYTE *)*v8 + 49) = 1;

  }
}

void sub_19BA99B18(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  void *v8;
  void **v9;
  void *v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    *(_DWORD *)buf = 67109120;
    v18 = v3;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "Unsubscribe from WRM for link recommendations of type: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSWRMExchange"), CFSTR("Unsubscribe from WRM for link recommendations of type: %d"));
  v7 = *(_QWORD **)(a1 + 32);
  if (v7[5] != 2)
  {
    v8 = (void *)objc_msgSend__newUnsubscribeMessage(v7, v4, v5, v6);
    v10 = *(void **)(a1 + 32);
    v9 = (void **)(a1 + 32);
    objc_msgSend__sendXPCMessage_(v10, v11, (uint64_t)v8, v12);
    *((_BYTE *)*v9 + 49) = 0;
    objc_msgSend__setRecommendedLinkType_(*v9, v13, 2, v14);
    *((_QWORD *)*v9 + 5) = 2;
    v15 = (void *)*((_QWORD *)*v9 + 13);
    *((_QWORD *)*v9 + 13) = 0;

    v16 = (void *)*((_QWORD *)*v9 + 14);
    *((_QWORD *)*v9 + 14) = 0;

  }
}

uint64_t sub_19BA9A1C8(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__sendMetricReportPeriodically, a4, a2);
}

uint64_t sub_19BA9A648(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__sendMetricReportPeriodically, a4, a2);
}

uint64_t sub_19BA9A6D0(uint64_t a1, double a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__updateLocalMetric_, *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_19BA9AA9C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;

  objc_msgSend__sendMetricReport(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend__sendXPCMessage_(*(void **)(a1 + 32), v5, *(_QWORD *)(a1 + 40), v6);
  return objc_msgSend__restartSubscriptionIfNeeded(*(void **)(a1 + 32), v7, v8, v9);
}

unsigned int *IDSOSNexusManagerCreate(uint64_t a1)
{
  unsigned int *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  __int16 *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x40uLL, 0x10300403B4764B1uLL);
  if (!v2)
    return v2;
  v3 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 88), 0x100004052888210uLL);
  *((_QWORD *)v2 + 6) = v3;
  if (!v3)
  {
LABEL_20:
    IDSOSNexusManagerDestroy(v2);
    return 0;
  }
  v4 = os_nexus_attr_create();
  *(_QWORD *)v2 = v4;
  if (!v4)
  {
    v10 = "os_nexus_attr_create";
LABEL_19:
    perror(v10);
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      os_nexus_attr_set();
      ++v6;
      v5 += 16;
    }
    while (v6 < *(unsigned int *)(a1 + 8));
  }
  v7 = os_nexus_controller_create();
  *((_QWORD *)v2 + 1) = v7;
  if (!v7)
  {
    v10 = "os_nexus_controller_create";
    goto LABEL_19;
  }
  if (os_nexus_controller_register_provider())
  {
    v10 = "os_nexus_controller_register_provider";
    goto LABEL_19;
  }
  if (os_nexus_controller_alloc_provider_instance())
  {
    v10 = "os_nexus_controller_alloc_provider_instance";
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 88))
  {
    v8 = 0;
    v9 = 0;
    v10 = "os_nexus_controller_bind_provider_instance";
    while (1)
    {
      v11 = (__int16 *)(*(_QWORD *)(a1 + 80) + v8);
      if (os_nexus_controller_bind_provider_instance())
        break;
      v12 = *v11;
      v13 = *((_QWORD *)v2 + 6);
      v14 = v2[14];
      v2[14] = v14 + 1;
      *(_WORD *)(v13 + 2 * v14) = v12;
      ++v9;
      v8 += 48;
      if (v9 >= *(unsigned int *)(a1 + 88))
        return v2;
    }
    goto LABEL_19;
  }
  return v2;
}

void IDSOSNexusManagerDestroy(unsigned int *a1)
{
  unint64_t v2;
  void *v3;

  if (a1)
  {
    if (*(_QWORD *)a1)
      os_nexus_attr_destroy();
    if (*((_QWORD *)a1 + 1))
    {
      if (a1[14])
      {
        v2 = 0;
        do
        {
          if (os_nexus_controller_unbind_provider_instance())
            perror("os_nexus_controller_unbind_provider_instance");
          ++v2;
        }
        while (v2 < a1[14]);
      }
      v3 = (void *)*((_QWORD *)a1 + 6);
      if (v3)
        free(v3);
      if (os_nexus_controller_free_provider_instance())
        perror("os_nexus_controller_free_provider_instance");
      if (os_nexus_controller_deregister_provider())
        perror("os_nexus_controller_deregister_provider");
      os_nexus_controller_destroy();
    }
    free(a1);
  }
}

void sub_19BA9B428(uint64_t a1)
{
  id v1;
  id v2;
  const char *v3;
  double v4;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;
  uint64_t v11;
  void *v12;
  id v13;

  v1 = objc_alloc(*(Class *)(a1 + 32));
  v2 = objc_alloc(MEMORY[0x1E0CA6E38]);
  v13 = (id)objc_msgSend_initWithQueue_(v2, v3, 0, v4);
  objc_msgSend_sharedInstance(MEMORY[0x1E0D36AD0], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_initWithCoreTelephonyClient_systemMonitor_(v1, v9, (uint64_t)v13, v10, v8);
  v12 = (void *)qword_1ECDD48F8;
  qword_1ECDD48F8 = v11;

}

void sub_19BA9B694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BA9B6AC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  unint64_t DualSimCapability;
  __CFString *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  _BOOL4 v20;
  const char *v21;
  const __CFString *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v27;
  void *v28;
  const char *v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  id v35;
  uint8_t buf[4];
  const __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_dualSIMEnabled(v5, v6, v7, v8);

  if (v9)
    goto LABEL_18;
  v13 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v35 = 0;
  DualSimCapability = objc_msgSend_getDualSimCapability_(v13, v10, (uint64_t)&v35, v12);
  v15 = (__CFString *)v35;
  objc_msgSend_registration(MEMORY[0x1E0D36AA8], v16, v17, v18);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v20)
    {
      *(_DWORD *)buf = 138412290;
      v37 = v15;
      v21 = "Failed loading dual SIM cap { dualSIMError: %@ }";
LABEL_10:
      _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, v21, buf, 0xCu);
    }
  }
  else if (v20)
  {
    if (DualSimCapability > 4)
      v22 = CFSTR("Enabled");
    else
      v22 = off_1E3C21ED8[DualSimCapability];
    *(_DWORD *)buf = 138412290;
    v37 = v22;
    v21 = "Loaded dual SIM cap { cap: %@ }";
    goto LABEL_10;
  }

  if (DualSimCapability == 4 || DualSimCapability == 2)
    v27 = 1;
  else
    v27 = 2;
  objc_msgSend_cache(*(void **)(a1 + 32), v23, v24, v25);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDualSIMEnabled_(v28, v29, v27, v30);

LABEL_18:
  objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_dualSIMEnabled(v31, v32, v33, v34) == 1;

}

void sub_19BA9B8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BA9B8E8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t isAnySIMUsable;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  const char *v26;
  double v27;
  void *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  _BOOL4 v34;
  const char *v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  id v52;
  id v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t buf[4];
  id v60;
  __int16 v61;
  id v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isAnySIMUsable = objc_msgSend_isAnySIMUsable(v5, v6, v7, v8);

  if (!isAnySIMUsable)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v13 = *(void **)(a1 + 32);
    v54 = 0;
    objc_msgSend__unlocked_currentSIMsWithError_(v13, v10, (uint64_t)&v54, 0.0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v54;
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v55, v16, v63, 16);
    if (v17)
    {
      v20 = v17;
      v21 = *(_QWORD *)v56;
      v22 = 138412546;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v56 != v21)
            objc_enumerationMutation(v14);
          objc_msgSend_context(*(void **)(*((_QWORD *)&v55 + 1) + 8 * i), v18, v19, *(double *)&v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
          v53 = 0;
          objc_msgSend_getPNRContext_outError_(v25, v26, (uint64_t)v24, v27, &v53);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = v53;
          objc_msgSend_registration(MEMORY[0x1E0D36AA8], v30, v31, v32);
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
          if (v28)
          {
            if (v34)
            {
              *(_DWORD *)buf = 138412546;
              v60 = v28;
              v61 = 2112;
              v62 = v24;
              _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "Checking PNRContext isReady { PNRContext: %@, ctx: %@ }", buf, 0x16u);
            }

            if ((objc_msgSend_isReady(v28, v35, v36, v37) & 1) != 0)
            {
              objc_msgSend_cache(*(void **)(a1 + 32), v38, v39, v40);
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setIsAnySIMUsable_(v41, v42, 1, v43);

              goto LABEL_17;
            }
          }
          else
          {
            if (v34)
            {
              *(_DWORD *)buf = 138412546;
              v60 = v24;
              v61 = 2112;
              v62 = v29;
              _os_log_impl(&dword_19B949000, v33, OS_LOG_TYPE_DEFAULT, "Failed loading PNRContext { ctx: %@, PNRErr: %@ }", buf, 0x16u);
            }

          }
        }
        v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v55, *(double *)&v22, v63, 16);
      }
      while (v20);
    }
LABEL_17:

    if (v52)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v44, v45, v46);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v60 = v52;
        _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "Failed loading SIMs { ctxError: %@ }", buf, 0xCu);
      }

    }
  }
  objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_isAnySIMUsable(v48, v49, v50, v51) == 1;

}

void sub_19BA9BC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BA9BC7C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t isAnySIMInserted;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  double v28;
  void *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  double v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  id v52;
  id v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t buf[4];
  id v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isAnySIMInserted = objc_msgSend_isAnySIMInserted(v5, v6, v7, v8);

  if (!isAnySIMInserted)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v13 = *(void **)(a1 + 32);
    v54 = 0;
    objc_msgSend__unlocked_currentSIMsWithError_(v13, v10, (uint64_t)&v54, 0.0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v54;
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v55, v16, v61, 16);
    if (v17)
    {
      v20 = v17;
      v21 = *(_QWORD *)v56;
      v22 = *MEMORY[0x1E0CA77F8];
      v23 = 138412290;
      do
      {
        v24 = 0;
        do
        {
          if (*(_QWORD *)v56 != v21)
            objc_enumerationMutation(v14);
          objc_msgSend_context(*(void **)(*((_QWORD *)&v55 + 1) + 8 * v24), v18, v19, *(double *)&v23);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
          v53 = 0;
          objc_msgSend_getSIMStatus_error_(v26, v27, (uint64_t)v25, v28, &v53);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = v53;
          objc_msgSend_registration(MEMORY[0x1E0D36AA8], v31, v32, v33);
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = v34;
          if (v29)
          {
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v60 = v29;
              _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "Loaded initial SIM status { SIMStatus: %@ }", buf, 0xCu);
            }

            if ((objc_msgSend_isEqualToString_(v29, v36, v22, v37) & 1) == 0)
            {
              objc_msgSend_cache(*(void **)(a1 + 32), v38, v39, v40);
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setIsAnySIMInserted_(v41, v42, 1, v43);

              goto LABEL_17;
            }
          }
          else
          {
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v60 = v30;
              _os_log_error_impl(&dword_19B949000, v35, OS_LOG_TYPE_ERROR, "Unable to read SIM status { SIMStatusError: %@ }", buf, 0xCu);
            }

          }
          ++v24;
        }
        while (v20 != v24);
        v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v55, *(double *)&v23, v61, 16);
      }
      while (v20);
    }
LABEL_17:

    if (v52)
    {
      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v44, v45, v46);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v60 = v52;
        _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "Unable to locate subscriptions to check SIM status { error: %@ }", buf, 0xCu);
      }

    }
  }
  objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_isAnySIMInserted(v48, v49, v50, v51) == 1;

}

uint64_t sub_19BA9BFD8(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_SIMIdentifier(a3, (const char *)a3, a4, a1);
}

void sub_19BA9C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19BA9C0AC(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  void *v15;
  const char *v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  __CFString *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  NSObject *v29;
  void *v30;
  const char *v31;
  double v32;
  int isPNRSupported_outError;
  __CFString *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  NSObject *v39;
  const __CFString *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  void *v44;
  const char *v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  NSObject *v50;
  void *v51;
  const char *v52;
  double v53;
  const char *v54;
  uint64_t v55;
  double v56;
  NSObject *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  double v71;
  const char *v72;
  uint64_t v73;
  double v74;
  NSObject *v75;
  const __CFString *v76;
  NSObject *v77;
  id v78;
  id v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint8_t buf[4];
  const __CFString *v85;
  __int16 v86;
  __CFString *v87;
  _BYTE v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v2 = MGGetBoolAnswer();
  objc_msgSend_cache(*(void **)(a1 + 32), v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_supportsIdentification(v6, v7, v8, v9);

  if (!v10)
  {
    if (v2)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v14 = *(void **)(a1 + 32);
      v79 = 0;
      objc_msgSend__unlocked_currentSIMsWithError_(v14, v11, (uint64_t)&v79, 0.0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v77 = v79;
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v80, v17, v88, 16);
      if (v18)
      {
        v21 = v18;
        v22 = *(_QWORD *)v81;
        v23 = 138412546;
        while (2)
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v81 != v22)
              objc_enumerationMutation(v15);
            objc_msgSend_context(*(void **)(*((_QWORD *)&v80 + 1) + 8 * i), v19, v20, *(double *)&v23);
            v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_registration(MEMORY[0x1E0D36AA8], v26, v27, v28);
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v85 = v25;
              _os_log_debug_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEBUG, "Selected subscription to check isPNRSupported { selectedSubscription: %@ }", buf, 0xCu);
            }

            v30 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
            v78 = 0;
            isPNRSupported_outError = objc_msgSend_isPNRSupported_outError_(v30, v31, (uint64_t)v25, v32, &v78);
            v34 = (__CFString *)v78;
            objc_msgSend_registration(MEMORY[0x1E0D36AA8], v35, v36, v37);
            v38 = objc_claimAutoreleasedReturnValue();
            v39 = v38;
            if (v34)
            {
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v85 = v34;
                v86 = 2112;
                v87 = v25;
                _os_log_error_impl(&dword_19B949000, v39, OS_LOG_TYPE_ERROR, "Failure checking isPNRSupported{ error: %@, subscription: %@ }", buf, 0x16u);
              }

              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
            }
            else
            {
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                v40 = CFSTR("NO");
                if (isPNRSupported_outError)
                  v40 = CFSTR("YES");
                v85 = v40;
                v86 = 2112;
                v87 = v25;
                _os_log_impl(&dword_19B949000, v39, OS_LOG_TYPE_DEFAULT, "Determined value for isPNRSupported { isPNRSupported: %@, subscription: %@ }", buf, 0x16u);
              }

              if ((isPNRSupported_outError & 1) != 0)
              {
                objc_msgSend_cache(*(void **)(a1 + 32), v41, v42, v43);
                v51 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setSupportsIdentification_(v51, v52, 1, v53);

                goto LABEL_25;
              }
            }

          }
          v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v80, *(double *)&v23, v88, 16);
          if (v21)
            continue;
          break;
        }
      }
LABEL_25:

      v50 = v77;
      if (v77)
      {
        objc_msgSend_registration(MEMORY[0x1E0D36AA8], v54, v55, v56);
        v57 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v85 = (const __CFString *)v77;
          _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "Unable to locate subscriptions to check isPNRSupported { error: %@ }", buf, 0xCu);
        }

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      }
    }
    else
    {
      objc_msgSend_cache(*(void **)(a1 + 32), v11, v12, v13);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setSupportsIdentification_(v44, v45, 2, v46);

      objc_msgSend_registration(MEMORY[0x1E0D36AA8], v47, v48, v49);
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v50, OS_LOG_TYPE_DEFAULT, "Device does not support SMS -- returning NO", buf, 2u);
      }
    }

  }
  objc_msgSend_cache(*(void **)(a1 + 32), v11, v12, v13);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_supportsIdentification(v58, v59, v60, v61) == 1;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend__legacy_supportsSMSIdentification(*(void **)(a1 + 32), v62, v63, v64);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      v68 = 1;
    else
      v68 = 2;
    objc_msgSend_cache(*(void **)(a1 + 32), v65, v66, v67);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSupportsIdentification_(v69, v70, v68, v71);

    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v72, v73, v74);
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        v76 = CFSTR("YES");
      else
        v76 = CFSTR("NO");
      *(_DWORD *)buf = 138412290;
      v85 = v76;
      _os_log_impl(&dword_19B949000, v75, OS_LOG_TYPE_DEFAULT, "Falling back to legacy PNR supported check { legacyResult: %@ }", buf, 0xCu);
    }

  }
}

void sub_19BA9C61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BA9C634(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  uint64_t doesAnySIMSupportsSimultaneousVoiceAndDataRightNow;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  __CFString *v24;
  void *v25;
  const char *v26;
  double v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  id v31;
  double v32;
  NSObject *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  double v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  const char *v42;
  uint64_t v43;
  double v44;
  NSObject *v45;
  _BOOL4 v46;
  const __CFString *v47;
  const char *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  const char *v52;
  double v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  __CFString *v58;
  uint64_t v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint8_t buf[4];
  const __CFString *v67;
  __int16 v68;
  id v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  doesAnySIMSupportsSimultaneousVoiceAndDataRightNow = objc_msgSend_doesAnySIMSupportsSimultaneousVoiceAndDataRightNow(v5, v6, v7, v8);

  if (!doesAnySIMSupportsSimultaneousVoiceAndDataRightNow)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v13 = *(void **)(a1 + 32);
    v61 = 0;
    objc_msgSend__unlocked_currentSIMsWithError_(v13, v10, (uint64_t)&v61, 0.0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = (__CFString *)v61;
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v62, v16, v70, 16);
    if (v17)
    {
      v20 = v17;
      v21 = *(_QWORD *)v63;
      v59 = *MEMORY[0x1E0CA7918];
      v22 = 138412546;
      while (2)
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v63 != v21)
            objc_enumerationMutation(v14);
          objc_msgSend_context(*(void **)(*((_QWORD *)&v62 + 1) + 8 * i), v18, v19, *(double *)&v22);
          v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v25 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
          v60 = 0;
          objc_msgSend_context_getSystemCapabilities_(v25, v26, (uint64_t)v24, v27, &v60);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = v60;
          if (v31)
          {
            objc_msgSend_registration(MEMORY[0x1E0D36AA8], v29, v30, v32);
            v33 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v67 = v24;
              v68 = 2112;
              v69 = v31;
              _os_log_error_impl(&dword_19B949000, v33, OS_LOG_TYPE_ERROR, "Unable to read SIM system capabilities { ctx: %@, SIMCapsError: %@ }", buf, 0x16u);
            }

          }
          else
          {
            objc_msgSend_objectForKey_(v28, v29, v59, v32);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend_intValue(v34, v35, v36, v37);

            v39 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            if (*(_BYTE *)(v39 + 24))
              v40 = 1;
            else
              v40 = v38 == 1;
            v41 = v40;
            *(_BYTE *)(v39 + 24) = v41;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
            {

              goto LABEL_22;
            }
          }

        }
        v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v62, *(double *)&v22, v70, 16);
        if (v20)
          continue;
        break;
      }
    }
LABEL_22:

    objc_msgSend_registration(MEMORY[0x1E0D36AA8], v42, v43, v44);
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
    if (v58)
    {
      if (v46)
      {
        *(_DWORD *)buf = 138412290;
        v67 = v58;
        _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "Unable to locate subscriptions to check SIM voiceAndDateRightNow { error: %@ }", buf, 0xCu);
      }
    }
    else
    {
      if (v46)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
          v47 = CFSTR("YES");
        else
          v47 = CFSTR("NO");
        *(_DWORD *)buf = 138412290;
        v67 = v47;
        _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "Loaded any SIM supports simultaneous { doesAnySIMSupportsSimultaneousVoiceAndDataRightNow: %@ }", buf, 0xCu);
      }

      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
        v51 = 1;
      else
        v51 = 2;
      objc_msgSend_cache(*(void **)(a1 + 32), v48, v49, v50);
      v45 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_setDoesAnySIMSupportsSimultaneousVoiceAndDataRightNow_(v45, v52, v51, v53);
    }

  }
  objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_doesAnySIMSupportsSimultaneousVoiceAndDataRightNow(v54, v55, v56, v57) == 1;

}

void *sub_19BA9CBF4()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("_CTServerConnectionCreate", CFSTR("CoreTelephony"));
  off_1EE40B4D8 = result;
  return result;
}

void *sub_19BA9CC20()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("_CTServerConnectionIsPhoneNumberRegistrationSupported", CFSTR("CoreTelephony"));
  off_1EE40B4E8 = result;
  return result;
}

id sub_19BA9D314(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  double v18;
  int isEqualToString;
  const char *v20;
  uint64_t v21;
  double v22;
  NSObject *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  IDSCTSIM *v32;
  const char *v33;
  double v34;
  int v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  objc_msgSend_labelID(v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_label(v2, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("Provisioning"), v12) & 1) != 0)
    {
      objc_msgSend_labelID(v2, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v16, v17, (uint64_t)CFSTR("00000000-0000-0000-0000-000000000000"), v18);

      if (isEqualToString)
      {
        objc_msgSend_sms(MEMORY[0x1E0D36AA8], v20, v21, v22);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v35 = 138412290;
          v36 = v2;
          v24 = "Hiding provisioning SIM { subscription: %@ }";
LABEL_13:
          _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v35, 0xCu);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {

    }
    if (!objc_msgSend_isSimHidden(v2, v20, v21, v22))
    {
      if (!objc_msgSend_isSimDataOnly(v2, v25, v26, v27))
      {
        v32 = [IDSCTSIM alloc];
        v6 = (void *)objc_msgSend_initWithContext_(v32, v33, (uint64_t)v2, v34);
        goto LABEL_15;
      }
      objc_msgSend_sms(MEMORY[0x1E0D36AA8], v28, v29, v30);
      v23 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      v35 = 138412290;
      v36 = v2;
      v24 = "Ignoring data only SIM { subscription: %@ }";
      goto LABEL_13;
    }
    objc_msgSend_sms(MEMORY[0x1E0D36AA8], v25, v26, v27);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v35 = 138412290;
      v36 = v2;
      v24 = "Ignoring hidden SIM { subscription: %@ }";
      goto LABEL_13;
    }
LABEL_14:

    v6 = 0;
  }
LABEL_15:

  return v6;
}

void sub_19BA9D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BA9D60C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19BA9D61C(uint64_t a1)
{

}

void sub_19BA9D624(_QWORD *a1, const char *a2, double a3)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v4 = (void *)a1[4];
  v11 = 0;
  objc_msgSend__unlocked_currentSIMsWithError_(v4, a2, (uint64_t)&v11, a3);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v11;
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;

  v9 = *(_QWORD *)(a1[6] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;

}

uint64_t sub_19BA9DD38(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  double v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  double v22;
  uint64_t v23;
  int v25;
  id v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend_hasPrefix_(v3, v5, (uint64_t)CFSTR("+"), v6))
  {
    objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v7, (uint64_t)CFSTR("+"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByRemovingCharactersFromSet_(v3, v11, (uint64_t)v10, v12);
    v13 = objc_claimAutoreleasedReturnValue();

    v3 = (id)v13;
  }
  objc_msgSend_sms(MEMORY[0x1E0D36AA8], v7, v8, v9);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 138412546;
    v26 = v4;
    v27 = 2112;
    v28 = v3;
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "** Checking numbers for rereg { oldNumber: %@, currentNumber: %@}", (uint8_t *)&v25, 0x16u);
  }

  if (objc_msgSend_length(v4, v15, v16, v17) && objc_msgSend_length(v3, v18, v19, v20))
    v23 = objc_msgSend_isPhoneNumber_equivalentToExistingPhoneNumber_(IDSCTAdapter, v21, (uint64_t)v3, v22, v4) ^ 1;
  else
    v23 = 1;

  return v23;
}

void sub_19BA9E7E8(uint64_t a1, void *a2)
{
  id v3;
  IDSCTSIM *v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  id v9;

  v3 = a2;
  v4 = [IDSCTSIM alloc];
  v9 = (id)objc_msgSend_initWithContext_(v4, v5, *(_QWORD *)(a1 + 32), v6);
  objc_msgSend_SIM_didUpdateRegistrationState_(v3, v7, (uint64_t)v9, v8, *(_QWORD *)(a1 + 40) != 0);

}

void sub_19BA9E944(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v4;
  double v5;
  id v6;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDualSIMEnabled_(v6, v4, 0, v5);

}

void sub_19BA9EA24(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v4;
  double v5;
  id v6;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setIsAnySIMInserted_(v6, v4, 0, v5);

}

void sub_19BA9EB1C(uint64_t a1)
{
  const char *v2;
  double v3;
  IDSCTAdapterCache *v4;

  v4 = objc_alloc_init(IDSCTAdapterCache);
  objc_msgSend_setCache_(*(void **)(a1 + 32), v2, (uint64_t)v4, v3);

}

uint64_t sub_19BA9EB60(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19BA9EC50(uint64_t a1)
{
  const char *v2;
  double v3;
  IDSCTAdapterCache *v4;

  v4 = objc_alloc_init(IDSCTAdapterCache);
  objc_msgSend_setCache_(*(void **)(a1 + 32), v2, (uint64_t)v4, v3);

}

uint64_t sub_19BA9EC94(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19BA9ED60(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v4;
  double v5;
  id v6;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSupportsIdentification_(v6, v4, 0, v5);

}

uint64_t sub_19BA9ED94(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19BA9EE6C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  double v12;
  id v13;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSupportsIdentification_(v5, v6, 0, v7);

  objc_msgSend_cache(*(void **)(a1 + 32), v8, v9, v10);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setIsAnySIMUsable_(v13, v11, 0, v12);

}

uint64_t sub_19BA9EF68(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_carrierBundleInformationDidChange, a4, a1);
}

uint64_t sub_19BA9EF70(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_SIMInformationDidChange, a4, a1);
}

uint64_t sub_19BA9F018(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_carrierBundleInformationDidChange, a4, a1);
}

uint64_t sub_19BA9F020(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19BA9F124(uint64_t a1, void *a2)
{
  id v3;
  IDSCTSIM *v4;
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  id v9;

  v3 = a2;
  v4 = [IDSCTSIM alloc];
  v9 = (id)objc_msgSend_initWithContext_(v4, v5, *(_QWORD *)(a1 + 32), v6);
  objc_msgSend_SIM_didDeactivateWithInfo_(v3, v7, (uint64_t)v9, v8, *(_QWORD *)(a1 + 40));

}

void sub_19BA9F238(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  const char *v4;
  double v5;
  id v6;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDoesAnySIMSupportsSimultaneousVoiceAndDataRightNow_(v6, v4, 0, v5);

}

void sub_19BA9F378()
{
  IDSStunConnectionDataController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSStunConnectionDataController);
  v1 = (void *)qword_1ECDD4828;
  qword_1ECDD4828 = (uint64_t)v0;

}

id tokenForStunCandidatePair(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5;
  id v6;
  const char *v7;
  double v8;
  void *v9;
  char v11[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char __str[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25 = v5;
  v26 = v5;
  v23 = v5;
  v24 = v5;
  v21 = v5;
  v22 = v5;
  *(_OWORD *)__str = v5;
  v20 = v5;
  *(_OWORD *)v11 = v5;
  v12 = v5;
  v13 = v5;
  v14 = v5;
  v15 = v5;
  v16 = v5;
  v17 = v5;
  v18 = v5;
  v6 = a3;
  SAToIPPortString(__str, 0x80uLL, a1);
  SAToIPPortString(v11, 0x80uLL, a2);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("%s-%s-%@"), v8, __str, v11, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id channelForStunCandidatePair(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 v5;
  const char *v6;
  double v7;
  char v9[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char __str[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = v5;
  v24 = v5;
  v21 = v5;
  v22 = v5;
  v19 = v5;
  v20 = v5;
  *(_OWORD *)__str = v5;
  v18 = v5;
  v15 = v5;
  v16 = v5;
  v13 = v5;
  v14 = v5;
  v11 = v5;
  v12 = v5;
  *(_OWORD *)v9 = v5;
  v10 = v5;
  SAToIPPortString(__str, 0x80uLL, a1);
  SAToIPPortString(v9, 0x80uLL, a2);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v6, (uint64_t)CFSTR("%s-%s-%04x"), v7, __str, v9, __rev16(a3));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t localRemoteRelayLinkIDForVirtualStunCandidatePair(unsigned int a1, const char *a2, double a3)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%04x-%04x"), a3, a1, a2);
}

uint64_t sub_19BAA3C70(uint64_t result)
{
  if ((int)result <= 402)
  {
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)result != 400)
    {
      if ((_DWORD)result == 401)
        return 5;
      return 6;
    }
    return 3;
  }
  switch((_DWORD)result)
  {
    case 0x193:
      return 7;
    case 0x1FC:
      return 1;
    case 0x258:
      return 3;
  }
  return 6;
}

void sub_19BAA4394(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19BAA43E8;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19BAA43E8(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleNoSessionStateTimer, a4, a2);
}

uint64_t sub_19BAA46BC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__stopReallocTimer(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19BAA48B4(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19BAA4908;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19BAA4908(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleReallocTimer, a4, a2);
}

void sub_19BAA4E48(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19BAA4E9C;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19BAA4E9C(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleSessionConnectedTimer, a4, a2);
}

void sub_19BAA55E0(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19BAA5634;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19BAA5634(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleSessionConvergenceTimer, a4, a2);
}

void sub_19BAA5D78(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19BAA5DCC;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19BAA5DCC(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleSessionGoAwayTimer, a4, a2);
}

void sub_19BAA7934(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend_GlobalLink_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(char *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8[0] = 67109378;
    v8[1] = v6;
    v9 = 2112;
    v10 = v7;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "updated participantID map for link %d:%@", (uint8_t *)v8, 0x12u);
  }

}

uint64_t sub_19BAA97D8(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendStatsRequest_options_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

uint64_t sub_19BAA9E64(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendInfoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3);
}

uint64_t sub_19BAAA5EC(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendQRPluginRegistrationRequest_options_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

void sub_19BAAAEF8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAAADD8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19BAAAF70(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendSessionInfoRequest_options_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

uint64_t sub_19BAAB78C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendPutMaterialRequest_options_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

uint64_t sub_19BAAC0B4(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendParticipantUpdateRequest_options_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

void sub_19BAAC44C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAAC35CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19BAAC480(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      v13 = v5;
      v14 = 1024;
      v15 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "get material request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("get material request %llu timed out after %d seconds."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("get material request %llu timed out after %d seconds."));
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40));

    GLUCreateQRStunMessageEventWithEventSubType(242, 39, *(void **)(a1 + 32), 0, 10.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);

  }
}

void sub_19BAAC9C4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAAC8D4);
  }
  _Unwind_Resume(a1);
}

void sub_19BAAC9F8(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      v13 = v5;
      v14 = 1024;
      v15 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "put material request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("put material request %llu timed out after %d seconds."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("put material request %llu timed out after %d seconds."));
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40));

    GLUCreateQRStunMessageEventWithEventSubType(244, 40, *(void **)(a1 + 32), 0, 10.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);

  }
}

uint64_t sub_19BAAD2D0(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendTestRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3);
}

void sub_19BAAD730(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = sub_19BAAD784;
  v1[3] = &unk_1E3C1F258;
  v1[4] = *(_QWORD *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19BAAD784(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleLinkProbingTimer, a4, a2);
}

void sub_19BAADF50(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAADE44);
  }
  _Unwind_Resume(a1);
}

void sub_19BAAE754(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAAE524);
  }
  _Unwind_Resume(a1);
}

void sub_19BAB1A0C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAB15ECLL);
  }
  _Unwind_Resume(a1);
}

uint64_t stunMessageTypeFromProtoMessageType(int a1, int a2)
{
  int v2;
  uint64_t result;
  BOOL v4;
  uint64_t v5;

  v2 = a1 - 1;
  result = 2066;
  switch(v2)
  {
    case 0:
      v4 = a2 == 0;
      v5 = 3808;
      goto LABEL_5;
    case 1:
      v4 = a2 == 0;
      v5 = 4064;
LABEL_5:
      if (v4)
        result = v5;
      else
        result = v5 + 1;
      break;
    case 2:
      return result;
    case 3:
      result = 2064;
      break;
    case 4:
      result = 3812;
      break;
    case 5:
      result = 4068;
      break;
    case 6:
      result = 3815;
      break;
    case 7:
      result = 4071;
      break;
    case 8:
      result = 3831;
      break;
    case 9:
      result = 3816;
      break;
    case 10:
      result = 4072;
      break;
    case 12:
      result = 2067;
      break;
    case 13:
      result = 3825;
      break;
    case 14:
      result = 3813;
      break;
    case 15:
      result = 4069;
      break;
    case 16:
      result = 3829;
      break;
    case 17:
      result = 3811;
      break;
    case 18:
      result = 4067;
      break;
    case 19:
    case 20:
      result = 2049;
      break;
    case 21:
      result = 3810;
      break;
    case 22:
      result = 4066;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_19BAB2910(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  id v15;
  const char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134218240;
      v21 = v5;
      v22 = 1024;
      v23 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "info request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v18 = *(_QWORD *)(a1 + 48);
        v19 = 10;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("info request %llu timed out after %d seconds."));
        if (_IDSShouldLog())
        {
          v18 = *(_QWORD *)(a1 + 48);
          v19 = 10;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("info request %llu timed out after %d seconds."));
        }
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 48));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 26, *(void **)(a1 + 32), 0.0);
    GLUCreateQRStunMessageEventWithType(WeakRetained, 26, *(void **)(a1 + 32), 0, 10.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = (uint64_t *)(a1 + 32);
    objc_msgSend_processSessionInfoRequestTimeout_(v12, v9, v13, v11, v18, v19);
    v15 = objc_loadWeakRetained((id *)(*v14 + 48));
    objc_msgSend_disconnectIdleQUICConnectionForCandidatePair_(v15, v16, *v14, v17);

  }
}

void sub_19BAB2FD0(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  __CFDictionary *v14;
  double v15;
  void *Value;
  unsigned __int16 v17;
  const char *v18;
  double v19;
  void *v20;
  id v21;
  const char *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134218240;
      v27 = v5;
      v28 = 1024;
      v29 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "participant update request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v24 = *(_QWORD *)(a1 + 48);
        v25 = 10;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("participant update request %llu timed out after %d seconds."));
        if (_IDSShouldLog())
        {
          v24 = *(_QWORD *)(a1 + 48);
          v25 = 10;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("participant update request %llu timed out after %d seconds."));
        }
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 48));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 32, *(void **)(a1 + 32), 0.0);
    GLUCreateQRStunMessageEventWithType(WeakRetained, 32, *(void **)(a1 + 32), 0, 10.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    v14 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    Value = 0;
    if (*(_QWORD *)(a1 + 40))
    {
      v12 = CFSTR("gl-option-participant-update-request-type");
      if (CFSTR("gl-option-participant-update-request-type"))
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("gl-option-participant-update-request-type"));
    }
    v17 = objc_msgSend_intValue(Value, v12, v13, v15, v24, v25);
    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v18, v17, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
      CFDictionarySetValue(v14, CFSTR("ids-stun-attribute-session-state-type"), v20);

    CFDictionarySetValue(v14, CFSTR("ids-stun-message-type"), &unk_1E3C86B68);
    v21 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_didReceiveParticipantUpdate_status_(v21, v22, *(_QWORD *)(a1 + 32), v23, v14, 2);

  }
}

void sub_19BAB37A8(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      v15 = v5;
      v16 = 1024;
      v17 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "plugin registration request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v12 = *(_QWORD *)(a1 + 40);
        v13 = 10;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("plugin registration request %llu timed out after %d seconds."));
        if (_IDSShouldLog())
        {
          v12 = *(_QWORD *)(a1 + 40);
          v13 = 10;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("plugin registration request %llu timed out after %d seconds."));
        }
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 48), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 26, *(void **)(a1 + 32), 0.0);
    GLUCreateQRStunMessageEventWithType(WeakRetained, 33, *(void **)(a1 + 32), 0, 10.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    objc_msgSend__removeProtoPluginRegistrationRequest_(*(void **)(a1 + 32), v9, *(_QWORD *)(a1 + 40), v11, v12, v13);

  }
}

void sub_19BAB3F44(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  const char *v9;
  void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134218240;
      v15 = v5;
      v16 = 1024;
      v17 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "session-info request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = 10;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("session-info request %llu timed out after %d seconds."));
        if (_IDSShouldLog())
        {
          v12 = *(_QWORD *)(a1 + 48);
          v13 = 10;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("session-info request %llu timed out after %d seconds."));
        }
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 48));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 30, *(void **)(a1 + 32), 0.0);
    GLUCreateQRStunMessageEventWithType(WeakRetained, 30, *(void **)(a1 + 32), 0, 10.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    objc_msgSend_processSessionInfoRequestTimeout_(*(void **)(a1 + 32), v9, *(_QWORD *)(a1 + 40), v11, v12, v13);

  }
}

void sub_19BAB474C(uint64_t a1, const char *a2, double a3)
{
  const char *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  id WeakRetained;
  const char *v10;
  double v11;
  unsigned __int16 v12;
  unsigned int v13;
  const char *v14;
  void *v15;
  double v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), a3))
  {
    if (*(_QWORD *)(a1 + 56))
      objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 368), v4, *(_QWORD *)(a1 + 40), v5);
    OSLogHandleForTransportCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(unsigned __int8 *)(a1 + 68);
      *(_DWORD *)buf = 134218240;
      v18 = v7;
      v19 = 1024;
      v20 = v8;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "stats request %llu timed out after %u seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("stats request %llu timed out after %u seconds."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("stats request %llu timed out after %u seconds."));
      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v10, *(_QWORD *)(a1 + 32), v11, *(_QWORD *)(a1 + 48));

    v12 = stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 64), 0);
    LOBYTE(v13) = *(_BYTE *)(a1 + 68);
    GLUCreateQRStunMessageEventWithType(v12, 41, *(void **)(a1 + 32), 0, (float)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v14, (uint64_t)v15, v16);

  }
}

void sub_19BAB4F64(uint64_t a1, const char *a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  id WeakRetained;
  const char *v7;
  double v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3))
  {
    OSLogHandleForTransportCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      v10 = v5;
      v11 = 1024;
      v12 = 10;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "test request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("test request %llu timed out after %d seconds."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("test request %llu timed out after %d seconds."));
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40));

  }
}

BOOL IDSQRProtoDiagnosticDiagnosticReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19BABA1C0(uint64_t a1, const char *a2, double a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;
  double v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  double v19;
  void *v20;
  int v21;
  const char *v22;
  double v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  double v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  double v31;
  void *v32;
  uint64_t v33;
  const char *v34;
  double v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  double v39;
  void *v40;
  uint64_t v41;
  const char *v42;
  double v43;
  void *v44;
  uint64_t v45;
  const char *v46;
  double v47;
  void *v48;
  uint64_t v49;
  const char *v50;
  double v51;
  void *v52;
  uint64_t v53;
  const char *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  id v58;

  objc_msgSend__metricContainerForMetricType_(*(void **)(a1 + 32), a2, 5316621, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v58 = v4;
    v7 = objc_alloc_init((Class)CUTWeakLinkClass());
    v9 = *(void **)(a1 + 40);
    if (v9)
    {
      v10 = objc_msgSend_unsignedIntegerValue(v9, v5, v6, v8);
      objc_msgSend_setEventType_(v7, v11, v10, v12);
      v16 = *(void **)(a1 + 48);
      if (v16)
      {
        v17 = objc_msgSend_unsignedIntegerValue(v16, v13, v14, v15);
        objc_msgSend_setEventSubType_(v7, v18, v17, v19);
      }
      v20 = *(void **)(a1 + 56);
      if (v20)
      {
        v21 = *(unsigned __int8 *)(a1 + 144);
        objc_msgSend_doubleValue(v20, v13, v14, v15);
        if (!v21)
          v23 = IDSAWDLogFuzzTimeTo10sSecondsForHotShip(v23);
        objc_msgSend_setDuration_(v7, v22, (unint64_t)v23, v23);
      }
      v24 = *(void **)(a1 + 64);
      if (v24)
      {
        v25 = objc_msgSend_unsignedIntegerValue(v24, v13, v14, v15);
        objc_msgSend_setResultCode_(v7, v26, v25, v27);
      }
      v28 = *(void **)(a1 + 72);
      if (v28)
      {
        v29 = objc_msgSend_unsignedIntegerValue(v28, v13, v14, v15);
        objc_msgSend_setProviderType_(v7, v30, v29, v31);
      }
      v32 = *(void **)(a1 + 80);
      if (v32)
      {
        v33 = objc_msgSend_unsignedIntegerValue(v32, v13, v14, v15);
        objc_msgSend_setTransportType_(v7, v34, v33, v35);
      }
      v36 = *(void **)(a1 + 88);
      if (v36)
      {
        v37 = objc_msgSend_unsignedIntegerValue(v36, v13, v14, v15);
        objc_msgSend_setInterfaceType_(v7, v38, v37, v39);
      }
      v40 = *(void **)(a1 + 96);
      if (v40)
      {
        v41 = objc_msgSend_unsignedIntegerValue(v40, v13, v14, v15);
        objc_msgSend_setSkeEnabled_(v7, v42, v41, v43);
      }
      v44 = *(void **)(a1 + 104);
      if (v44)
      {
        v45 = objc_msgSend_unsignedIntegerValue(v44, v13, v14, v15);
        objc_msgSend_setIsInitiator_(v7, v46, v45, v47);
      }
      v48 = *(void **)(a1 + 112);
      if (v48)
      {
        v49 = objc_msgSend_unsignedIntegerValue(v48, v13, v14, v15);
        objc_msgSend_setProtocolVersion_(v7, v50, v49, v51);
      }
      v52 = *(void **)(a1 + 120);
      if (v52)
      {
        v53 = objc_msgSend_unsignedIntegerValue(v52, v13, v14, v15);
        objc_msgSend_setRetryCount_(v7, v54, v53, v55);
      }
      v56 = *(_QWORD *)(a1 + 128);
      if (v56)
        objc_msgSend_setServiceName_(v7, v13, v56, v15);
      v57 = *(_QWORD *)(a1 + 136);
      if (v57)
        objc_msgSend_setSubServiceName_(v7, v13, v57, v15);
      objc_msgSend__submitAWDMetric_withContainer_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15, v58);
    }

    v4 = v58;
  }

}

uint64_t IDSQRProtoSessionParametersReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 0xAu:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_23;
        case 0xBu:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_23:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 0xCu:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (v14)
                {
                  v23 = 0;
                  goto LABEL_48;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
LABEL_48:
          v38 = 8;
          goto LABEL_53;
        case 0xDu:
          v27 = 0;
          v28 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v23 |= (unint64_t)(v31 & 0x7F) << v27;
              if (v31 < 0)
              {
                v27 += 7;
                v14 = v28++ >= 9;
                if (v14)
                {
                  v23 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
LABEL_52:
          v38 = 16;
LABEL_53:
          *(_QWORD *)(a1 + v38) = v23;
          continue;
        case 0xEu:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_55;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v34) = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v34) = 0;
LABEL_57:
      *(_DWORD *)(a1 + 32) = v34;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BABBD08(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  IDSCKModifyRecordsOperation *v11;
  const char *v12;
  double v13;
  void *v14;
  const char *v15;
  double v16;
  const char *v17;
  double v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, void *);
  void *v30;
  uint64_t v31;
  id v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  id v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (v7)
  {
    objc_msgSend_groupContext(MEMORY[0x1E0D1F458], v5, v6, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138478083;
      v34 = v10;
      v35 = 2114;
      v36 = v7;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "No data representation - failed {group: %{private}@, error: %{public}@}", buf, 0x16u);
    }
  }
  else
  {
    objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), v5, a2, v8, CFSTR("payload"));
    v11 = [IDSCKModifyRecordsOperation alloc];
    v37[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v12, (uint64_t)v37, v13, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(v11, v15, (uint64_t)v14, v16, 0);

    objc_msgSend_setSavePolicy_(v9, v17, 2, v18);
    v27 = MEMORY[0x1E0C809B0];
    v28 = 3221225472;
    v29 = sub_19BABBEBC;
    v30 = &unk_1E3C1FAF0;
    v31 = *(_QWORD *)(a1 + 40);
    v32 = *(id *)(a1 + 56);
    objc_msgSend_setModifyRecordsCompletionBlock_(v9, v19, (uint64_t)&v27, v20);
    objc_msgSend_database(*(void **)(a1 + 40), v21, v22, v23, v27, v28, v29, v30, v31);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addOperation_(v24, v25, (uint64_t)v9, v26);

  }
}

void sub_19BABBEBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[16];

  v5 = a4;
  objc_msgSend_groupContext(MEMORY[0x1E0D1F458], v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_INFO, "Received result from CloudKit - Done", buf, 2u);
  }

  objc_msgSend_queue(*(void **)(a1 + 32), v10, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_19BABBFB0;
  v16[3] = &unk_1E3C1C7E8;
  v14 = *(id *)(a1 + 40);
  v17 = v5;
  v18 = v14;
  v15 = v5;
  dispatch_async(v13, v16);

}

uint64_t sub_19BABBFB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19BABC0D0(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD block[5];
  id v16;
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  objc_msgSend_queue(a1[4], v7, v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19BABC200;
    block[3] = &unk_1E3C22050;
    block[4] = a1[4];
    v16 = v5;
    v17 = a1[5];
    v18 = a1[6];
    dispatch_async(v10, block);

    v11 = v16;
  }
  else
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_19BABC28C;
    v12[3] = &unk_1E3C1C7E8;
    v14 = a1[6];
    v13 = v6;
    dispatch_async(v10, v12);

    v11 = v14;
  }

}

void sub_19BABC200(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  double v5;
  _QWORD v6[4];
  id v7;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19BABC280;
  v6[3] = &unk_1E3C22028;
  v3 = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  objc_msgSend_q_groupFromRecord_inContext_completion_(v1, v4, v2, v5, v3, v6);

}

uint64_t sub_19BABC280(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19BABC28C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_19BABC3D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t IDSQRProtoGetMaterialRequestReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IDSQRProtoMaterialOwner *v17;
  const char *v18;
  double v19;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IDSQRProtoMaterialOwner);
        objc_msgSend_addMaterialOwners_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialOwnerReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BABE3B8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  char *v23;
  uint64_t v24;
  double v25;

  v3 = a2;
  v7 = objc_msgSend_state(v3, v4, v5, v6);
  if (v7 == 1)
  {
    objc_msgSend_utilities(IDSFoundationLog, v8, v9, v10);
    v23 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEBUG))
      sub_19BAF9890(v3, v23, v24, v25);

  }
  else if (!v7)
  {
    objc_msgSend_value(v3, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = objc_msgSend_rtcType(*(void **)(a1 + 40), v13, v14, v15);
    objc_msgSend_dictionaryRepresentation(*(void **)(a1 + 40), v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sendMessageWithCategory_type_payload_error_(v11, v21, v12, v22, v16, v20, 0);

  }
}

uint64_t sub_19BABE604(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 != -1)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      IDSTransportThreadRemoveSocket(v2);
      v2 = *(_DWORD *)(a1 + 32);
    }
    close(v2);
  }
  result = *(unsigned int *)(a1 + 36);
  if ((_DWORD)result != -1)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      IDSTransportThreadRemoveSocket(result);
      LODWORD(result) = *(_DWORD *)(a1 + 36);
    }
    return close(result);
  }
  return result;
}

uint64_t sub_19BABF144()
{
  int v0;
  uint64_t result;

  v0 = *__error();
  result = 14;
  switch(v0)
  {
    case '\'':
    case '9':
      result = 6;
      break;
    case '(':
      result = 4;
      break;
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '4':
    case '5':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
      goto LABEL_5;
    case '1':
    case '2':
    case '3':
    case '@':
    case 'A':
      result = 3;
      break;
    case '6':
      result = 2;
      break;
    case '7':
      return result;
    case '8':
      result = 5;
      break;
    default:
      if (v0 != 35)
LABEL_5:
        result = 11;
      break;
  }
  return result;
}

uint64_t sub_19BAC0A84(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processIncomingPacket, a4, a2);
}

uint64_t sub_19BAC0A8C(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processIncomingCellularPacket, a4, a2);
}

void sub_19BAC156C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_19BAC157C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Eu);
}

void sub_19BAC15A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x18u);
}

uint64_t IDSQRProtoParticipantUpdateIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 14)
      {
        if ((_DWORD)v18 == 15)
        {
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (1)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
              break;
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if ((v42 & 0x80) == 0)
              goto LABEL_69;
            v37 += 7;
            v14 = v38++ >= 9;
            if (v14)
            {
              v39 = 0;
              goto LABEL_71;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_69:
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_71:
          *(_QWORD *)(a1 + 32) = v39;
          continue;
        }
        if ((_DWORD)v18 == 16)
        {
          v25 = 0;
          v26 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          while (1)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_64;
            v25 += 7;
            v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_66:
          v43 = 44;
          goto LABEL_67;
        }
      }
      else
      {
        if ((_DWORD)v18 == 3)
        {
          if (v16 == 2)
          {
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v31 = 0;
              v32 = 0;
              v33 = 0;
              while (1)
              {
                v34 = *v3;
                v35 = *(_QWORD *)(a2 + v34);
                if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
                  break;
                v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
                *(_QWORD *)(a2 + v34) = v35 + 1;
                v33 |= (unint64_t)(v36 & 0x7F) << v31;
                if (v36 < 0)
                {
                  v31 += 7;
                  v14 = v32++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_49;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
              PBRepeatedUInt64Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            while (1)
            {
              v47 = *v3;
              v48 = *(_QWORD *)(a2 + v47);
              if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
                break;
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v46 |= (unint64_t)(v49 & 0x7F) << v44;
              if (v49 < 0)
              {
                v44 += 7;
                v14 = v45++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_81;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_81:
            PBRepeatedUInt64Add();
          }
          continue;
        }
        if ((_DWORD)v18 == 4)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_60;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_62;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_62:
          v43 = 40;
LABEL_67:
          *(_DWORD *)(a1 + v43) = v21;
          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19BAC2D64(_DWORD **a1, _WORD *a2, unint64_t *a3, _BYTE *a4)
{
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v4 = 0;
  if (!a1)
    return v4;
  if (!a3)
    return v4;
  if (!a2)
    return v4;
  v5 = *a1;
  if (!*a1)
    return v4;
  v4 = (unsigned __int16)*a2;
  if (!*a2)
    return v4;
  v6 = *(unsigned __int8 *)v5;
  if (v6 > 0x3F)
  {
    v8 = v6 >> 6;
    if (v8 == 2)
    {
      if (v4 >= 4)
      {
        v6 = bswap32(*v5 & 0xFFFFFF7F);
        v7 = 4;
        goto LABEL_8;
      }
    }
    else if (v8 == 1)
    {
      if (v4 >= 2)
      {
        v6 = bswap32(*(_WORD *)v5 & 0xFFBF) >> 16;
        v7 = 2;
        goto LABEL_8;
      }
    }
    else if (v4 >= 8)
    {
      v6 = bswap64(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFF3FLL);
      v7 = 8;
      goto LABEL_8;
    }
    return 0;
  }
  v7 = 1;
LABEL_8:
  *a3 = v6;
  *a1 = (_DWORD *)((char *)v5 + v7);
  *a2 = v4 - v7;
  if (a4)
    *a4 = v7;
  return 1;
}

void sub_19BAC30EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL sub_19BAC3110(uint64_t a1, int a2, int a3, void *__src, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  uint64_t v10;
  double v11;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(v6 + 72);
  if (16 - v7 >= a5)
    v8 = a5;
  else
    v8 = 16 - v7;
  memcpy((void *)(v6 + v7 + 56), __src, v8);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) += v8;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend__parseHeader(*(void **)(a1 + 32), v9, v10, v11);
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;
}

void sub_19BAC3190(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  uint64_t error_with_inferred_domain;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  dispatch_data_t concat;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  double v34;
  int v35;
  uint64_t id;
  __int16 v37;
  NSObject *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  if (v11)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), a5);
    objc_msgSend_IDSNWLink(IDSFoundationLog, v12, v13, v14);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_connection(*(void **)(a1 + 32), v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = 134218498;
      id = nw_connection_get_id();
      v37 = 2112;
      v38 = v9;
      v39 = 2112;
      v40 = v11;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "[C%llu] _readHeaderWithCompletionHandler done, data %@ error %@", (uint8_t *)&v35, 0x20u);

    }
  }
  else if (a4)
  {
    error_with_inferred_domain = nw_error_create_error_with_inferred_domain();
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(void **)(v21 + 88);
    *(_QWORD *)(v21 + 88) = error_with_inferred_domain;

  }
  v23 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v24 = *(NSObject **)(v23 + 80);
    if (v24)
    {
      concat = dispatch_data_create_concat(v24, v9);
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(v26 + 80);
      *(_QWORD *)(v26 + 80) = concat;
    }
    else
    {
      v32 = v9;
      v27 = *(void **)(v23 + 80);
      *(_QWORD *)(v23 + 80) = v32;
    }

    objc_msgSend__readHeader_completionHandler_(*(void **)(a1 + 32), v33, (uint64_t)v9, v34, *(_QWORD *)(a1 + 40));
  }
  else
  {
    v28 = *(_QWORD *)(v23 + 88);
    if (!v28)
    {
      v29 = nw_error_create_error_with_inferred_domain();
      v30 = *(_QWORD *)(a1 + 32);
      v31 = *(void **)(v30 + 88);
      *(_QWORD *)(v30 + 88) = v29;

      v23 = *(_QWORD *)(a1 + 32);
      v28 = *(_QWORD *)(v23 + 88);
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, BOOL, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_BYTE *)(v23 + 72) == 0, v28);
  }

}

void sub_19BAC34A8(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t error_with_inferred_domain;
  uint64_t v21;
  size_t size;
  uint64_t v23;
  size_t v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  size_t v29;
  dispatch_data_t subrange;
  dispatch_data_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  int v37;
  uint64_t id;
  __int16 v39;
  NSObject *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a5;
  objc_msgSend_IDSNWLink(IDSFoundationLog, v10, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_connection(*(void **)(a1 + 32), v14, v15, v16);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = 134218498;
    id = nw_connection_get_id();
    v39 = 2112;
    v40 = v8;
    v41 = 2112;
    v42 = v9;
    _os_log_debug_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEBUG, "[C%llu] _readWithCompletionHandler done, data %@ error %@", (uint8_t *)&v37, 0x20u);

  }
  if (v9)
  {
    v17 = *(_QWORD *)(a1 + 32);
    v18 = v9;
    v19 = *(void **)(v17 + 88);
    *(_QWORD *)(v17 + 88) = v18;
  }
  else
  {
    if (!a4)
      goto LABEL_8;
    error_with_inferred_domain = nw_error_create_error_with_inferred_domain();
    v21 = *(_QWORD *)(a1 + 32);
    v19 = *(void **)(v21 + 88);
    *(_QWORD *)(v21 + 88) = error_with_inferred_domain;
  }

LABEL_8:
  if (!v8)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88))
    {
      v26 = nw_error_create_error_with_inferred_domain();
      v27 = *(_QWORD *)(a1 + 32);
      v28 = *(void **)(v27 + 88);
      *(_QWORD *)(v27 + 88) = v26;

    }
    v25 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    goto LABEL_14;
  }
  size = dispatch_data_get_size(v8);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(v23 + 48);
  if (v24 > size)
  {
    *(_QWORD *)(v23 + 48) = v24 - size;
    v25 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_14:
    v25();
    goto LABEL_21;
  }
  if (v24 == size)
  {
    subrange = v8;
  }
  else
  {
    v29 = size;
    subrange = dispatch_data_create_subrange(v8, 0, v24);
    v31 = dispatch_data_create_subrange(v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), v29 - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    v32 = *(_QWORD *)(a1 + 32);
    v33 = *(void **)(v32 + 80);
    *(_QWORD *)(v32 + 80) = v31;

  }
  v34 = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  v35 = *(_QWORD **)(a1 + 32);
  if (!v35[10])
    v34 = v35[11];
  (*(void (**)(_QWORD, _QWORD, dispatch_data_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v35[3], subrange, 1, v34);

LABEL_21:
}

void sub_19BAC3790(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5)
{
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *error_with_inferred_domain;
  const char *v14;
  dispatch_data_t concat;
  double v16;
  NSObject *v17;

  v8 = a3;
  v9 = a5;
  error_with_inferred_domain = v9;
  if (v8)
  {
    concat = dispatch_data_create_concat(*(dispatch_data_t *)(a1 + 32), v8);
    if (a4)
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    else
      objc_msgSend__readCapsuleWithExistingData_completionHandler_(*(void **)(a1 + 40), v14, (uint64_t)concat, v16, *(_QWORD *)(a1 + 48));

  }
  else
  {
    if (!v9)
      error_with_inferred_domain = (void *)nw_error_create_error_with_inferred_domain();
    objc_msgSend_IDSNWLink(IDSFoundationLog, v10, v11, v12);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      sub_19BAFA2E8(v17);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_19BAC3950(uint64_t a1)
{
  void *v1;
  const char *v2;
  double v3;
  _QWORD v4[4];
  void *v5;
  id v6;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_19BAC39C8;
  v4[3] = &unk_1E3C22160;
  v1 = *(void **)(a1 + 40);
  v5 = *(void **)(a1 + 32);
  v6 = v1;
  objc_msgSend__readCapsuleWithExistingData_completionHandler_(v5, v2, MEMORY[0x1E0C80D00], v3, v4);

}

uint64_t sub_19BAC39C8(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96) = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

_DWORD *IDSHC_CreateContext(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _DWORD *result;
  _DWORD *v15;
  NSObject *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = malloc_type_malloc(0x14uLL, 0x1000040A86A77D5uLL);
  v15 = result;
  if (result)
  {
    *result = a2;
    result[1] = a3;
    result[2] = bswap32(a5 | (a4 << 16));
    result[3] = a6;
    result[4] = a7;
    OSLogHandleForIDSCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110400;
      v18 = a2;
      v19 = 1024;
      v20 = a3;
      v21 = 1024;
      v22 = a4;
      v23 = 1024;
      v24 = a5;
      v25 = 1024;
      v26 = a6;
      v27 = 1024;
      v28 = a7;
      _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "CreateContext - p:%u c:%u s_port:%u d_port:%u seq:%u ack:%u", buf, 0x26u);
    }

    result = (_DWORD *)os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = (_DWORD *)_IDSShouldLog();
      if ((_DWORD)result)
        result = (_DWORD *)_IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSHC"), CFSTR("CreateContext - p:%u c:%u s_port:%u d_port:%u seq:%u ack:%u"));
    }
  }
  *a1 = v15;
  return result;
}

void IDSHC_RemoveContext(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t IDSHC_Compress(_DWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*a1 != 6)
  {
    if (*a1 != 17)
      return 2;
    result = 0;
    *a2 += 8;
    v4 = *a3 - 8;
    goto LABEL_18;
  }
  v5 = *a2;
  v6 = (*(unsigned __int8 *)(*a2 + 12) >> 2) & 0x3C;
  if (v6 > 0x13)
  {
    result = 0;
    v8 = 6;
    if ((*(_BYTE *)(v5 + 13) & 0x20) == 0)
      v8 = 8;
    v9 = v5 + v8;
    if ((*(_BYTE *)(v5 + 13) & 0x20) != 0)
      v10 = -6;
    else
      v10 = -8;
    v11 = *(_QWORD *)(v5 + 4);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(v5 + 12);
    *(_QWORD *)v9 = v11;
    v4 = v10 + *a3;
    *a2 = v9;
LABEL_18:
    *a3 = v4;
    return result;
  }
  OSLogHandleForIDSCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSCompressTCPPacket2 - invalid TCP header length %d.", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("IDSHC"), CFSTR("IDSCompressTCPPacket2 - invalid TCP header length %d."));
  }
  return 3;
}

uint64_t IDSHC_DecompressSimple(uint64_t **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  if (*a3 == 17)
  {
    v7 = *a1;
    *((_DWORD *)v7-- - 2) = a3[2];
    *((_WORD *)v7 + 2) = bswap32(*(unsigned __int16 *)a2 + 8) >> 16;
    *((_WORD *)v7 + 3) = 0;
    *a1 = v7;
    v8 = *a2 + 8;
  }
  else
  {
    if (*a3 != 6)
      return 2;
    v3 = *a1;
    v4 = a3[2];
    if ((*((_BYTE *)*a1 + 9) & 0x20) != 0)
    {
      *(_DWORD *)((char *)v3 - 6) = v4;
      v5 = (uint64_t *)((char *)v3 - 6);
      v10 = *v3;
      *(_DWORD *)((char *)v3 + 6) = *((_DWORD *)v3 + 2);
      *(uint64_t *)((char *)v3 - 2) = v10;
      *((_WORD *)v3 + 5) = 0;
      v6 = 6;
    }
    else
    {
      *((_DWORD *)v3 - 2) = v4;
      v5 = v3 - 1;
      *(uint64_t *)((char *)v3 - 4) = *v3;
      *(uint64_t *)((char *)v3 + 4) = *((unsigned int *)v3 + 2);
      v6 = 8;
    }
    v8 = *a2 + v6;
    *a1 = v5;
  }
  result = 0;
  *a2 = v8;
  return result;
}

uint64_t sub_19BAC4A34(uint64_t a1, int a2)
{
  _opaque_pthread_t *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  double v13;
  int v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  int v17;
  uint64_t result;
  NSObject *v19;
  _opaque_pthread_t *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  double v27;
  NSObject *v28;
  _opaque_pthread_t *v29;
  int v30;
  int v31;
  NSObject *v32;
  _opaque_pthread_t *v33;
  NSObject *v34;
  _opaque_pthread_t *v35;
  int v36;
  uint8_t buf[4];
  _opaque_pthread_t *v38;
  __int16 v39;
  _WORD v40[9];

  *(_QWORD *)&v40[5] = *MEMORY[0x1E0C80C00];
  v4 = *(_opaque_pthread_t **)a1;
  if (v4 != pthread_self())
  {
    v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_opaque_pthread_t **)a1;
      *(_DWORD *)buf = 134218240;
      v38 = v6;
      v39 = 2048;
      *(_QWORD *)v40 = pthread_self();
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "should assert real time mode on thread %p, not %p", buf, 0x16u);
    }
    v7 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v7)
    {
      v7 = _IDSShouldLogTransport();
      if ((_DWORD)v7)
      {
        pthread_self();
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("should assert real time mode on thread %p, not %p"));
        v7 = _IDSShouldLog();
        if ((_DWORD)v7)
        {
          pthread_self();
          v7 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("should assert real time mode on thread %p, not %p"));
        }
      }
    }
    v11 = isRunningTests(v10, v7, v8, v9);
    if ((_DWORD)v11)
      throwsIDSAbortException(v13, v11, v12);
    abort();
  }
  v14 = *(_DWORD *)(a1 + 80);
  if (a2)
  {
    *(_DWORD *)(a1 + 80) = v14 + 1;
    if (v14 < 1)
    {
      v36 = -1431655766;
      sub_19BAC5100(56, &v36);
      *(_DWORD *)(a1 + 84) = v36;
      sub_19BAC5290();
      v34 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)buf = 134218496;
        v38 = v35;
        v39 = 1024;
        *(_DWORD *)v40 = v36;
        v40[2] = 1024;
        *(_DWORD *)&v40[3] = 56;
        _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "asserting real time mode on thread %p (%d => %d)", buf, 0x18u);
      }
      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("asserting real time mode on thread %p (%d => %d)"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("asserting real time mode on thread %p (%d => %d)"));
        }
      }
    }
    else
    {
      v15 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_opaque_pthread_t **)a1;
        v17 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 134218240;
        v38 = v16;
        v39 = 1024;
        *(_DWORD *)v40 = v17;
        _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "asserting real time mode on thread %p but already in real time mode (%d assertions)", buf, 0x12u);
      }
      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("asserting real time mode on thread %p but already in real time mode (%d assertions)"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("asserting real time mode on thread %p but already in real time mode (%d assertions)"));
        }
      }
    }
  }
  else
  {
    if (!v14)
    {
      v19 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)buf = 134217984;
        v38 = v20;
        _os_log_impl(&dword_19B949000, v19, OS_LOG_TYPE_DEFAULT, "unasserting real time mode on thread %p but not in real time mode", buf, 0xCu);
      }
      v21 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v21)
      {
        v21 = _IDSShouldLogTransport();
        if ((_DWORD)v21)
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("unasserting real time mode on thread %p but not in real time mode"));
          v21 = _IDSShouldLog();
          if ((_DWORD)v21)
            v21 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("unasserting real time mode on thread %p but not in real time mode"));
        }
      }
      v25 = isRunningTests(v24, v21, v22, v23);
      if ((_DWORD)v25)
        throwsIDSAbortException(v27, v25, v26);
      abort();
    }
    *(_DWORD *)(a1 + 80) = v14 - 1;
    if (v14 < 2)
    {
      v31 = *(_DWORD *)(a1 + 84);
      v36 = -1431655766;
      sub_19BAC5100(v31, &v36);
      sub_19BAC5290();
      v32 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)buf = 134218496;
        v38 = v33;
        v39 = 1024;
        *(_DWORD *)v40 = v36;
        v40[2] = 1024;
        *(_DWORD *)&v40[3] = v31;
        _os_log_impl(&dword_19B949000, v32, OS_LOG_TYPE_DEFAULT, "unasserting real time mode on thread %p (%d => %d)", buf, 0x18u);
      }
      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("unasserting real time mode on thread %p (%d => %d)"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("unasserting real time mode on thread %p (%d => %d)"));
        }
      }
    }
    else
    {
      v28 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *(_opaque_pthread_t **)a1;
        v30 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 134218240;
        v38 = v29;
        v39 = 1024;
        *(_DWORD *)v40 = v30;
        _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "unasserting real time mode on thread %p but still in real time mode (%d assertions)", buf, 0x12u);
      }
      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLogTransport();
        if ((_DWORD)result)
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("unasserting real time mode on thread %p but still in real time mode (%d assertions)"));
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("unasserting real time mode on thread %p but still in real time mode (%d assertions)"));
        }
      }
    }
  }
  return result;
}

uint64_t sub_19BAC5100(int a1, int *a2)
{
  int v4;
  int v5;
  _opaque_pthread_t *v6;
  NSObject *v7;
  uint64_t result;
  int v9;
  sched_param v10;
  uint8_t buf[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = (sched_param)0xAAAAAAAAAAAAAAAALL;
  v9 = -1431655766;
  v4 = IMGetDomainIntForKey();
  if ((v4 - 1) >= 0x63)
    v5 = a1;
  else
    v5 = v4;
  v6 = pthread_self();
  pthread_getschedparam(v6, &v9, &v10);
  if (a2)
    *a2 = v10.sched_priority;
  v10.sched_priority = v5;
  pthread_setschedparam(v6, v9, &v10);
  v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "Set IDSTransportThread priority at %d.", buf, 8u);
  }
  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLogTransport();
    if ((_DWORD)result)
    {
      _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("Set IDSTransportThread priority at %d."));
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Set IDSTransportThread priority at %d."));
    }
  }
  return result;
}

uint64_t sub_19BAC5290()
{
  void *v0;
  const char *v1;
  double v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  double v8;
  int v9;
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  int v15;
  const char *v16;
  double v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  NSObject *v25;
  uint64_t v26;
  thread_act_t v27;
  uint64_t result;
  int v29;
  NSObject *v30;
  integer_t policy_info;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1A1AC71DC](CFSTR("com.apple.ids"), CFSTR("IDSTransportCPUConfig"));
  if (v0)
  {
    v3 = (void *)objc_msgSend_componentsSeparatedByString_(v0, v1, (uint64_t)CFSTR(":"), v2);
    v9 = 90;
    v10 = 50;
    if (objc_msgSend_count(v3, v4, v5, v6) == 2)
    {
      v11 = (void *)objc_msgSend_objectAtIndex_(v3, v7, 0, v8);
      v15 = objc_msgSend_intValue(v11, v12, v13, v14);
      v18 = (void *)objc_msgSend_objectAtIndex_(v3, v16, 1, v17);
      v22 = objc_msgSend_intValue(v18, v19, v20, v21);
      v23 = (v15 - 1) < 0x63;
      v24 = v22 > 0;
      if (v23 && v24)
        v10 = v22;
      else
        v10 = 50;
      if (v23 && v24)
        v9 = v15;
      else
        v9 = 90;
    }
  }
  else
  {
    v9 = 90;
    v10 = 50;
  }
  v25 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v33 = v9;
    v34 = 1024;
    v35 = v10;
    _os_log_impl(&dword_19B949000, v25, OS_LOG_TYPE_DEFAULT, "Fix IDSTransportThread CPU limit (%d, %d).", buf, 0xEu);
  }
  v26 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v26)
  {
    v26 = _IDSShouldLogTransport();
    if ((_DWORD)v26)
    {
      _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("Fix IDSTransportThread CPU limit (%d, %d)."));
      v26 = _IDSShouldLog();
      if ((_DWORD)v26)
        v26 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Fix IDSTransportThread CPU limit (%d, %d)."));
    }
  }
  v27 = MEMORY[0x1A1AC7B90](v26);
  policy_info = 0;
  thread_policy_set(v27, 1u, &policy_info, 1u);
  result = proc_setthread_cpupercent();
  v29 = result;
  if ((_DWORD)result)
  {
    policy_info = 1;
    thread_policy_set(v27, 1u, &policy_info, 1u);
    v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v33 = v9;
      v34 = 1024;
      v35 = v10;
      v36 = 1024;
      v37 = v29;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare.", buf, 0x14u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare."));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare."));
      }
    }
  }
  return result;
}

uint64_t IDSTransportThreadInit()
{
  BOOL v0;
  BOOL v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  if (qword_1EE40AA80 != -1)
    dispatch_once(&qword_1EE40AA80, &unk_1E3C1B990);
  if (dword_1EE40AB70)
    v0 = dword_1EE40ABC8 == 0;
  else
    v0 = 1;
  v2 = v0 || dword_1EE40AAC0 == 0 || dword_1EE40AB18 == 0;
  v3 = !v2;
  if (v2)
  {
    v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadInit: transport thread not initialized", v6, 2u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadInit: transport thread not initialized"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadInit: transport thread not initialized"));
      }
    }
  }
  return v3;
}

void IDSTransportThreadAddBlockWithPriority(uint64_t a1, const void *a2)
{
  _opaque_pthread_t **v2;
  _opaque_pthread_t **v3;
  _opaque_pthread_t **v4;

  v2 = (_opaque_pthread_t **)&unk_1EE40ABC0;
  v3 = &qword_1EE40AB68;
  if (a1 == 200)
    v3 = (_opaque_pthread_t **)&unk_1EE40AAB8;
  if (a1 != 300)
    v2 = v3;
  if (a1 == 100)
    v4 = (_opaque_pthread_t **)&unk_1EE40AB10;
  else
    v4 = v2;
  sub_19B94F9A8((uint64_t)v4, a2);
}

void IDSTransportThreadAddSyncBlockWithPriority(uint64_t a1, const void *a2)
{
  _opaque_pthread_t **v2;
  _opaque_pthread_t **v3;
  _opaque_pthread_t **v4;

  v2 = (_opaque_pthread_t **)&unk_1EE40ABC0;
  v3 = &qword_1EE40AB68;
  if (a1 == 200)
    v3 = (_opaque_pthread_t **)&unk_1EE40AAB8;
  if (a1 != 300)
    v2 = v3;
  if (a1 == 100)
    v4 = (_opaque_pthread_t **)&unk_1EE40AB10;
  else
    v4 = v2;
  sub_19B94F640(v4, a2);
}

uint64_t IDSTransportThreadAddSocket(unsigned int a1, const void *a2, const void *a3)
{
  return sub_19BAC5760((uint64_t)&qword_1EE40AB68, a1, a2, a3);
}

uint64_t sub_19BAC5760(uint64_t a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _opaque_pthread_t *v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  double v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t result;
  int v26;
  NSObject *v27;
  int v28;
  NSObject *v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  kevent changelist;
  uint8_t buf[4];
  _BYTE v36[10];
  pthread_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a1 + 44);
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v9;
  *(_OWORD *)&changelist.data = v9;
  if ((a2 & 0x80000000) != 0)
  {
    v24 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v36 = a2;
      _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadAddSocket called with bad socket %d", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadAddSocket called with bad socket %d"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadAddSocket called with bad socket %d"));
      }
    }
  }
  else
  {
    v13 = *(_opaque_pthread_t **)a1;
    if (v13 != pthread_self())
    {
      v14 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v36 = v15;
        *(_WORD *)&v36[8] = 2048;
        v37 = pthread_self();
        _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "should add socket on thread %p, not %p", buf, 0x16u);
      }
      v16 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v16)
      {
        v16 = _IDSShouldLogTransport();
        if ((_DWORD)v16)
        {
          pthread_self();
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("should add socket on thread %p, not %p"));
          v16 = _IDSShouldLog();
          if ((_DWORD)v16)
          {
            pthread_self();
            v16 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("should add socket on thread %p, not %p"));
          }
        }
      }
      v20 = isRunningTests(v19, v16, v17, v18);
      if ((_DWORD)v20)
        throwsIDSAbortException(v22, v20, v21);
      abort();
    }
    sub_19BAC6964(a1, a2);
    if ((int)v5 < 1)
    {
      LODWORD(v23) = 0;
    }
    else
    {
      v23 = 0;
      while (*(_DWORD *)(v7 + 4 * v23) != -1)
      {
        if (v5 == ++v23)
        {
          LODWORD(v23) = v5;
          break;
        }
      }
    }
    ++*(_DWORD *)(a1 + 24);
    if ((int)v23 >= *(_DWORD *)(a1 + 40))
    {
      result = sub_19BAC77B8(a1);
      if (!(_DWORD)result)
        return result;
      v7 = *(_QWORD *)(a1 + 48);
      v6 = *(_QWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 64);
    }
    *(_DWORD *)(v7 + 4 * v23) = a2;
    if (a3)
    {
      *(_QWORD *)(v6 + 8 * v23) = _Block_copy(a3);
      changelist.ident = a2;
      *(_QWORD *)&changelist.filter = 393215;
      changelist.data = 0;
      changelist.udata = (void *)v23;
      if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
      {
        v26 = *__error();
        v27 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v36 = v23;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = a2;
          LOWORD(v37) = 1024;
          *(_DWORD *)((char *)&v37 + 2) = v26;
          _os_log_impl(&dword_19B949000, v27, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, ADD|ENABLE) failed with error(%d)", buf, 0x14u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, READ, ADD|ENABLE) failed with error(%d)"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, READ, ADD|ENABLE) failed with error(%d)"));
          }
        }
      }
    }
    else
    {
      *(_QWORD *)(v6 + 8 * v23) = 0;
    }
    if (a4)
    {
      *(_QWORD *)(v8 + 8 * v23) = _Block_copy(a4);
      changelist.ident = a2;
      *(_QWORD *)&changelist.filter = 393214;
      changelist.data = 0;
      changelist.udata = (void *)v23;
      if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
      {
        v28 = *__error();
        v29 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v36 = v23;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = a2;
          LOWORD(v37) = 1024;
          *(_DWORD *)((char *)&v37 + 2) = v28;
          _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, ADD|ENABLE) failed with error(%d)", buf, 0x14u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, WRITE, ADD|ENABLE) failed with error(%d)"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, WRITE, ADD|ENABLE) failed with error(%d)"));
          }
        }
      }
    }
    else
    {
      *(_QWORD *)(v8 + 8 * v23) = 0;
    }
    if (*(_DWORD *)(a1 + 36) < (signed int)a2)
      *(_DWORD *)(a1 + 36) = a2;
    if ((_DWORD)v23 == (_DWORD)v5)
      ++*(_DWORD *)(a1 + 44);
    v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_DWORD *)(a1 + 44);
      v32 = *(_QWORD *)(v6 + 8 * v23);
      v33 = *(_QWORD *)(v8 + 8 * v23);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)v36 = a2;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v23;
      LOWORD(v37) = 1024;
      *(_DWORD *)((char *)&v37 + 2) = v31;
      HIWORD(v37) = 2048;
      v38 = v32;
      v39 = 2048;
      v40 = v33;
      _os_log_impl(&dword_19B949000, v30, OS_LOG_TYPE_DEFAULT, "added socket %d at %d (count:%d) with readBlock %p writeBlock %p", buf, 0x28u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("added socket %d at %d (count:%d) with readBlock %p writeBlock %p"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("added socket %d at %d (count:%d) with readBlock %p writeBlock %p"));
      }
    }
  }
  return result;
}

uint64_t IDSTransportThreadAddSocketWithPriority(unsigned int a1, const void *a2, const void *a3, uint64_t a4)
{
  _opaque_pthread_t **v7;
  _opaque_pthread_t **v8;
  _opaque_pthread_t **v9;

  v7 = (_opaque_pthread_t **)&unk_1EE40ABC0;
  v8 = &qword_1EE40AB68;
  if (a4 == 200)
    v8 = (_opaque_pthread_t **)&unk_1EE40AAB8;
  if (a4 != 300)
    v7 = v8;
  if (a4 == 100)
    v9 = (_opaque_pthread_t **)&unk_1EE40AB10;
  else
    v9 = v7;
  return sub_19BAC5760((uint64_t)v9, a1, a2, a3);
}

uint64_t IDSTransportThreadSuspendSocket(unsigned int a1, char a2)
{
  return sub_19BAC5E9C((uint64_t)&qword_1EE40AB68, a1, a2);
}

uint64_t sub_19BAC5E9C(uint64_t result, unsigned int a2, char a3)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  const __CFString *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  kevent changelist;
  uint8_t buf[4];
  unsigned int v19;
  __int16 v20;
  _BYTE v21[10];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (void *)*(unsigned int *)(result + 44);
  v5 = *(_QWORD *)(result + 48);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v6;
  *(_OWORD *)&changelist.data = v6;
  if ((a2 & 0x80000000) != 0)
  {
    v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v19 = a2;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadSuspendSocket called with bad socket %d", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadSuspendSocket called with bad socket %d"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadSuspendSocket called with bad socket %d"));
      }
    }
  }
  else if ((int)v4 < 1)
  {
LABEL_6:
    v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = CFSTR("YES");
      *(_DWORD *)buf = 67109634;
      v19 = a2;
      if ((a3 & 1) == 0)
        v11 = CFSTR("NO");
      v20 = 2112;
      *(_QWORD *)v21 = v11;
      *(_WORD *)&v21[8] = 1024;
      v22 = (int)v4;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "suspendSocket(%d, forRead:%@) cannot find socket (count:%d)", buf, 0x18u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("suspendSocket(%d, forRead:%@) cannot find socket (count:%d)"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("suspendSocket(%d, forRead:%@) cannot find socket (count:%d)"));
      }
    }
  }
  else
  {
    v8 = result;
    v9 = 0;
    while (*(_DWORD *)(v5 + 4 * (_QWORD)v9) != a2)
    {
      v9 = (char *)v9 + 1;
      if (v4 == v9)
        goto LABEL_6;
    }
    if ((a3 & 1) != 0)
    {
      changelist.ident = a2;
      *(_QWORD *)&changelist.filter = 589823;
      changelist.data = 0;
      changelist.udata = v9;
      result = kevent(*(_DWORD *)(result + 32), &changelist, 1, 0, 0, 0);
      if ((result & 0x80000000) != 0)
      {
        v13 = *__error();
        v14 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          v19 = v9;
          v20 = 1024;
          *(_DWORD *)v21 = a2;
          *(_WORD *)&v21[4] = 1024;
          *(_DWORD *)&v21[6] = v13;
          _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, DISABLE) failed with error(%d)", buf, 0x14u);
        }
        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLogTransport();
          if ((_DWORD)result)
          {
            _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, READ, DISABLE) failed with error(%d)"));
            result = _IDSShouldLog();
            if ((_DWORD)result)
              result = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, READ, DISABLE) failed with error(%d)"));
          }
        }
      }
    }
    if ((a3 & 2) != 0)
    {
      changelist.ident = a2;
      *(_QWORD *)&changelist.filter = 589822;
      changelist.data = 0;
      changelist.udata = v9;
      result = kevent(*(_DWORD *)(v8 + 32), &changelist, 1, 0, 0, 0);
      if ((result & 0x80000000) != 0)
      {
        v15 = *__error();
        v16 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          v19 = v9;
          v20 = 1024;
          *(_DWORD *)v21 = a2;
          *(_WORD *)&v21[4] = 1024;
          *(_DWORD *)&v21[6] = v15;
          _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, DISABLE) failed with error(%d)", buf, 0x14u);
        }
        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLogTransport();
          if ((_DWORD)result)
          {
            _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, WRITE, DISABLE) failed with error(%d)"));
            result = _IDSShouldLog();
            if ((_DWORD)result)
              result = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, WRITE, DISABLE) failed with error(%d)"));
          }
        }
      }
    }
    ++*(_DWORD *)(v8 + 24);
  }
  return result;
}

uint64_t IDSTransportThreadSuspendSocketWithPriority(unsigned int a1, char a2, uint64_t a3)
{
  _opaque_pthread_t **v5;
  _opaque_pthread_t **v6;
  _opaque_pthread_t **v7;

  v5 = (_opaque_pthread_t **)&unk_1EE40ABC0;
  v6 = &qword_1EE40AB68;
  if (a3 == 200)
    v6 = (_opaque_pthread_t **)&unk_1EE40AAB8;
  if (a3 != 300)
    v5 = v6;
  if (a3 == 100)
    v7 = (_opaque_pthread_t **)&unk_1EE40AB10;
  else
    v7 = v5;
  return sub_19BAC5E9C((uint64_t)v7, a1, a2);
}

uint64_t IDSTransportThreadResumeSocket(unsigned int a1, char a2)
{
  return sub_19BAC63F4((uint64_t)&qword_1EE40AB68, a1, a2);
}

uint64_t sub_19BAC63F4(uint64_t result, unsigned int a2, char a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const __CFString *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  kevent changelist;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  _BYTE v23[10];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (void *)*(unsigned int *)(result + 44);
  v6 = *(_QWORD *)(result + 48);
  v5 = *(_QWORD *)(result + 56);
  v7 = *(_QWORD *)(result + 64);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v8;
  *(_OWORD *)&changelist.data = v8;
  if ((a2 & 0x80000000) != 0)
  {
    v14 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v21 = a2;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadResumeSocket called with bad socket %d", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadResumeSocket called with bad socket %d"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadResumeSocket called with bad socket %d"));
      }
    }
  }
  else if ((int)v4 < 1)
  {
LABEL_6:
    v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = CFSTR("YES");
      *(_DWORD *)buf = 67109634;
      v21 = a2;
      if ((a3 & 1) == 0)
        v13 = CFSTR("NO");
      v22 = 2112;
      *(_QWORD *)v23 = v13;
      *(_WORD *)&v23[8] = 1024;
      v24 = (int)v4;
      _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "resumeSocket(%d, forRead:%@) cannot find socket (count:%d)", buf, 0x18u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("resumeSocket(%d, forRead:%@) cannot find socket (count:%d)"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("resumeSocket(%d, forRead:%@) cannot find socket (count:%d)"));
      }
    }
  }
  else
  {
    v10 = result;
    v11 = 0;
    while (*(_DWORD *)(v6 + 4 * (_QWORD)v11) != a2)
    {
      v11 = (char *)v11 + 1;
      if (v4 == v11)
        goto LABEL_6;
    }
    if ((a3 & 1) != 0)
    {
      if (*(_QWORD *)(v5 + 8 * (_QWORD)v11))
      {
        changelist.ident = a2;
        *(_QWORD *)&changelist.filter = 327679;
        changelist.data = 0;
        changelist.udata = v11;
        result = kevent(*(_DWORD *)(result + 32), &changelist, 1, 0, 0, 0);
        if ((result & 0x80000000) != 0)
        {
          v15 = *__error();
          v16 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            v21 = v11;
            v22 = 1024;
            *(_DWORD *)v23 = a2;
            *(_WORD *)&v23[4] = 1024;
            *(_DWORD *)&v23[6] = v15;
            _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, ENABLE) failed with error(%d)", buf, 0x14u);
          }
          result = os_log_shim_legacy_logging_enabled();
          if ((_DWORD)result)
          {
            result = _IDSShouldLogTransport();
            if ((_DWORD)result)
            {
              _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, READ, ENABLE) failed with error(%d)"));
              result = _IDSShouldLog();
              if ((_DWORD)result)
                result = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, READ, ENABLE) failed with error(%d)"));
            }
          }
        }
      }
    }
    if ((a3 & 2) != 0)
    {
      if (*(_QWORD *)(v7 + 8 * (_QWORD)v11))
      {
        changelist.ident = a2;
        *(_QWORD *)&changelist.filter = 327678;
        changelist.data = 0;
        changelist.udata = v11;
        result = kevent(*(_DWORD *)(v10 + 32), &changelist, 1, 0, 0, 0);
        if ((result & 0x80000000) != 0)
        {
          v17 = *__error();
          v18 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            v21 = v11;
            v22 = 1024;
            *(_DWORD *)v23 = a2;
            *(_WORD *)&v23[4] = 1024;
            *(_DWORD *)&v23[6] = v17;
            _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, ENABLE) failed with error(%d)", buf, 0x14u);
          }
          result = os_log_shim_legacy_logging_enabled();
          if ((_DWORD)result)
          {
            result = _IDSShouldLogTransport();
            if ((_DWORD)result)
            {
              _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, WRITE, ENABLE) failed with error(%d)"));
              result = _IDSShouldLog();
              if ((_DWORD)result)
                result = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, WRITE, ENABLE) failed with error(%d)"));
            }
          }
        }
      }
    }
    ++*(_DWORD *)(v10 + 24);
  }
  return result;
}

uint64_t IDSTransportThreadResumeSocketWithPriority(unsigned int a1, char a2, uint64_t a3)
{
  _opaque_pthread_t **v5;
  _opaque_pthread_t **v6;
  _opaque_pthread_t **v7;

  v5 = (_opaque_pthread_t **)&unk_1EE40ABC0;
  v6 = &qword_1EE40AB68;
  if (a3 == 200)
    v6 = (_opaque_pthread_t **)&unk_1EE40AAB8;
  if (a3 != 300)
    v5 = v6;
  if (a3 == 100)
    v7 = (_opaque_pthread_t **)&unk_1EE40AB10;
  else
    v7 = v5;
  return sub_19BAC63F4((uint64_t)v7, a1, a2);
}

void IDSTransportThreadRemoveSocket(unsigned int a1)
{
  sub_19BAC6964((uint64_t)&qword_1EE40AB68, a1);
}

void sub_19BAC6964(uint64_t a1, unsigned int a2)
{
  void *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _opaque_pthread_t *v9;
  NSObject *v10;
  _opaque_pthread_t *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const char *v17;
  double v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  const void **v27;
  int v28;
  NSObject *v29;
  const void **v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  kevent changelist;
  uint8_t buf[4];
  _BYTE v37[10];
  pthread_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = (void *)*(unsigned int *)(a1 + 44);
  v4 = *(int **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v7;
  *(_OWORD *)&changelist.data = v7;
  if ((a2 & 0x80000000) != 0)
  {
    v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v37 = a2;
      _os_log_impl(&dword_19B949000, v21, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadRemoveSocket called with bad socket %d", buf, 8u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadRemoveSocket called with bad socket %d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadRemoveSocket called with bad socket %d"));
      }
    }
  }
  else
  {
    v9 = *(_opaque_pthread_t **)a1;
    if (v9 != pthread_self())
    {
      v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v37 = v11;
        *(_WORD *)&v37[8] = 2048;
        v38 = pthread_self();
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "should remove socket on thread %p, not %p", buf, 0x16u);
      }
      v12 = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)v12)
      {
        v12 = _IDSShouldLogTransport();
        if ((_DWORD)v12)
        {
          pthread_self();
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("should remove socket on thread %p, not %p"));
          v12 = _IDSShouldLog();
          if ((_DWORD)v12)
          {
            pthread_self();
            v12 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("should remove socket on thread %p, not %p"));
          }
        }
      }
      v16 = isRunningTests(v15, v12, v13, v14);
      if ((_DWORD)v16)
        throwsIDSAbortException(v18, v16, v17);
      abort();
    }
    if ((int)v3 < 1)
    {
LABEL_15:
      v20 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v37 = a2;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = (_DWORD)v3;
        _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "removeSocket(%d) cannot find socket (count:%d)", buf, 0xEu);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("removeSocket(%d) cannot find socket (count:%d)"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("removeSocket(%d) cannot find socket (count:%d)"));
        }
      }
    }
    else
    {
      v19 = 0;
      while (v4[(_QWORD)v19] != a2)
      {
        v19 = (char *)v19 + 1;
        if (v3 == v19)
          goto LABEL_15;
      }
      v22 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD *)(v5 + 8 * (_QWORD)v19);
        v24 = *(_QWORD *)(v6 + 8 * (_QWORD)v19);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v37 = a2;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = (_DWORD)v19;
        LOWORD(v38) = 1024;
        *(_DWORD *)((char *)&v38 + 2) = (_DWORD)v3 - 1;
        HIWORD(v38) = 2048;
        v39 = v23;
        v40 = 2048;
        v41 = v24;
        _os_log_impl(&dword_19B949000, v22, OS_LOG_TYPE_DEFAULT, "removing socket %d at %d (count:%d) with readBlock %p writeBlock %p", buf, 0x28u);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("removing socket %d at %d (count:%d) with readBlock %p writeBlock %p"));
          if (_IDSShouldLog())
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("removing socket %d at %d (count:%d) with readBlock %p writeBlock %p"));
        }
      }
      v4[(_QWORD)v19] = -1;
      if (*(_QWORD *)(v5 + 8 * (_QWORD)v19))
      {
        changelist.ident = a2;
        *(_QWORD *)&changelist.filter = 196607;
        changelist.data = 0;
        changelist.udata = v19;
        if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
        {
          v25 = *__error();
          v26 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)v37 = (_DWORD)v19;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = a2;
            LOWORD(v38) = 1024;
            *(_DWORD *)((char *)&v38 + 2) = v25;
            _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, DELETE) failed with error(%d)", buf, 0x14u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, READ, DELETE) failed with error(%d)"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, READ, DELETE) failed with error(%d)"));
            }
          }
        }
        v27 = (const void **)(v5 + 8 * (_QWORD)v19);
        _Block_release(*v27);
        *v27 = 0;
      }
      if (*(_QWORD *)(v6 + 8 * (_QWORD)v19))
      {
        changelist.ident = a2;
        *(_QWORD *)&changelist.filter = 196606;
        changelist.data = 0;
        changelist.udata = v19;
        if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
        {
          v28 = *__error();
          v29 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)v37 = (_DWORD)v19;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = a2;
            LOWORD(v38) = 1024;
            *(_DWORD *)((char *)&v38 + 2) = v28;
            _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, DELETE) failed with error(%d)", buf, 0x14u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("kevent(fd[%d]=%d, WRITE, DELETE) failed with error(%d)"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("kevent(fd[%d]=%d, WRITE, DELETE) failed with error(%d)"));
            }
          }
        }
        v30 = (const void **)(v6 + 8 * (_QWORD)v19);
        _Block_release(*v30);
        *v30 = 0;
      }
      ++*(_DWORD *)(a1 + 24);
      if (*(_DWORD *)(a1 + 36) == a2)
      {
        v31 = *(unsigned int *)(a1 + 44);
        v32 = -1;
        if ((int)v31 >= 1)
        {
          do
          {
            v34 = *v4++;
            v33 = v34;
            if (v34 > v32)
              v32 = v33;
            --v31;
          }
          while (v31);
        }
        *(_DWORD *)(a1 + 36) = v32;
      }
    }
  }
}

void IDSTransportThreadRemoveSocketWithPriority(unsigned int a1, uint64_t a2)
{
  _opaque_pthread_t **v3;
  _opaque_pthread_t **v4;
  _opaque_pthread_t **v5;

  v3 = (_opaque_pthread_t **)&unk_1EE40ABC0;
  v4 = &qword_1EE40AB68;
  if (a2 == 200)
    v4 = (_opaque_pthread_t **)&unk_1EE40AAB8;
  if (a2 != 300)
    v3 = v4;
  if (a2 == 100)
    v5 = (_opaque_pthread_t **)&unk_1EE40AB10;
  else
    v5 = v3;
  sub_19BAC6964((uint64_t)v5, a1);
}

uint64_t IDSTransportThreadAssertRealTimeMode(int a1)
{
  return sub_19BAC4A34((uint64_t)&qword_1EE40AB68, a1);
}

uint64_t IDSTransportThreadAddBlockAfter(const void *a1, double a2)
{
  __int128 v3;
  void *v4;
  NSObject *v5;
  uint32_t v6;
  intptr_t v7;
  uint64_t result;
  int v9;
  NSObject *v10;
  kevent changelist;
  uint8_t buf[4];
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v3;
  *(_OWORD *)&changelist.data = v3;
  v4 = _Block_copy(a1);
  if (a2 <= 9223372040.0)
  {
    v7 = (uint64_t)(a2 * 1000000000.0);
    v6 = 132;
  }
  else if (a2 <= 9.22337204e12)
  {
    v7 = (uint64_t)(a2 * 1000000.0);
    v6 = 130;
  }
  else if (a2 <= 9.22337204e18)
  {
    v7 = (uint64_t)a2;
    v6 = 129;
  }
  else
  {
    v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v13 = a2;
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadAddBlockAfter - the interval value %f is too big! Please check your value!", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadAddBlockAfter - the interval value %f is too big! Please check your value!"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadAddBlockAfter - the interval value %f is too big! Please check your value!"));
      }
    }
    v6 = 129;
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  changelist.ident = (uintptr_t)v4;
  *(_DWORD *)&changelist.filter = 1179641;
  changelist.fflags = v6;
  changelist.data = v7;
  changelist.udata = v4;
  result = kevent(dword_1EE40AB88, &changelist, 1, 0, 0, 0);
  if ((result & 0x80000000) != 0)
  {
    v9 = *__error();
    v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v13) = v9;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadAddBlockAfter kevent errno %d", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadAddBlockAfter kevent errno %d"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadAddBlockAfter kevent errno %d"));
      }
    }
  }
  return result;
}

uint64_t IDSTransportThreadKeventTestInitializer(uint64_t result)
{
  dword_1EE40AB88 = result;
  return result;
}

void sub_19BAC73EC()
{
  sub_19BAC7438((uint64_t)&qword_1EE40AB68, 0);
  sub_19BAC7438((uint64_t)&unk_1EE40ABC0, 300);
  sub_19BAC7438((uint64_t)&unk_1EE40AAB8, 200);
  sub_19BAC7438((uint64_t)&unk_1EE40AB10, 100);
}

void sub_19BAC7438(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  pthread_t v11;
  uint8_t buf[4];
  pthread_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = kqueue();
  *(_DWORD *)(a1 + 32) = v4;
  if (v4 == -1)
  {
    v8 = *__error();
    v9 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v13) = v8;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadInit kqueue failed (%d)", buf, 8u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("IDSTransportThreadInit kqueue failed (%d)"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("IDSTransportThreadInit kqueue failed (%d)"));
      }
    }
    goto LABEL_10;
  }
  *(_DWORD *)(a1 + 40) = 32;
  if ((sub_19BAC77B8(a1) & 1) != 0)
  {
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 36) = **(_DWORD **)(a1 + 48);
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 72) = a2;
    v5 = pthread_create((pthread_t *)a1, 0, (void *(__cdecl *)(void *))sub_19B94E900, (void *)a1);
    if (v5)
    {
      v6 = v5;
      v7 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v13) = v6;
        _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "failed to create transport thread (%d)", buf, 8u);
      }
      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("failed to create transport thread (%d)"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("failed to create transport thread (%d)"));
      }
LABEL_10:
      sub_19BAC777C();
      return;
    }
    v10 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(pthread_t *)a1;
      *(_DWORD *)buf = 134217984;
      v13 = v11;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "Created transport thread with tid(%p).", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Created transport thread with tid(%p)."));
    *(_DWORD *)(a1 + 8) = 1;
  }
  else
  {
    sub_19BAC777C();
  }
}

double sub_19BAC777C()
{
  sub_19BAC7A94((uint64_t)&qword_1EE40AB68);
  sub_19BAC7A94((uint64_t)&unk_1EE40ABC0);
  sub_19BAC7A94((uint64_t)&unk_1EE40AAB8);
  return sub_19BAC7A94((uint64_t)&unk_1EE40AB10);
}

uint64_t sub_19BAC77B8(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t result;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = 2 * *(_DWORD *)(a1 + 40);
  v3 = malloc_type_realloc(*(void **)(a1 + 48), 4 * v2, 0x100004052888210uLL);
  if (!v3)
  {
    v7 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v11 = v2;
      _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "realloc(%d) for fds failed", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if (!(_DWORD)result)
      return result;
    result = _IDSShouldLog();
    if (!(_DWORD)result)
      return result;
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("realloc(%d) for fds failed"));
    return 0;
  }
  *(_QWORD *)(a1 + 48) = v3;
  v4 = malloc_type_realloc(*(void **)(a1 + 56), 8 * v2, 0x80040B8603338uLL);
  if (!v4)
  {
    v8 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v11 = v2;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "realloc(%d) for readBlocks failed", buf, 8u);
    }
    result = os_log_shim_legacy_logging_enabled();
    if (!(_DWORD)result)
      return result;
    result = _IDSShouldLog();
    if (!(_DWORD)result)
      return result;
    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("realloc(%d) for readBlocks failed"));
    return 0;
  }
  *(_QWORD *)(a1 + 56) = v4;
  v5 = malloc_type_realloc(*(void **)(a1 + 64), 8 * v2, 0x80040B8603338uLL);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 40) = v2;
    return 1;
  }
  v9 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = v2;
    _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "realloc(%d) for writeBlocks failed", buf, 8u);
  }
  result = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)result)
  {
    result = _IDSShouldLog();
    if ((_DWORD)result)
    {
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("realloc(%d) for writeBlocks failed"));
      return 0;
    }
  }
  return result;
}

double sub_19BAC7A94(uint64_t a1)
{
  _opaque_pthread_t *v2;
  NSObject *v3;
  _opaque_pthread_t *v4;
  int v5;
  double result;
  _BYTE buf[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_19B94FA34(a1, (void *)3);
  v2 = *(_opaque_pthread_t **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
    pthread_join(v2, (void **)buf);
  }
  v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_opaque_pthread_t **)a1;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "Transport thread with tid(%p) stopped.", buf, 0xCu);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("TPThread"), CFSTR("IDS"), CFSTR("Transport thread with tid(%p) stopped."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("TPThread"), CFSTR("Transport thread with tid(%p) stopped."));
    }
  }

  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 != -1)
    close(v5);
  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t IDSQRProtoAllocBindJoinInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  IDSQRProtoMaterial *v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_45;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if ((_DWORD)v17 == 2)
      {
        v30 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 16), v30);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v30, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoQuicConnectionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoAllocBindAllocBindReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_19BAC94D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BAC94F0(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v5;
  double v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  id v15;

  v15 = a3;
  objc_msgSend__writeStringToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v5, a2, v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend__writeNumberToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v7, (uint64_t)v15, v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend__writeStringToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v9, (uint64_t)v15, v10, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend__writeDictionaryToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v11, (uint64_t)v15, v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend__writeArrayToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v13, (uint64_t)v15, v14, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
      }
    }
  }

}

void sub_19BAC9830(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  char isKindOfClass;
  double v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  char v12;
  double v13;
  void *v14;
  uint64_t v15;
  id v16;

  v16 = a3;
  v5 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v9 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if ((isKindOfClass & 1) != 0)
    objc_msgSend__writeStringToByteBuffer_buffer_(v9, v6, (uint64_t)v5, v8, v10);
  else
    objc_msgSend__writeNumberToByteBuffer_buffer_(v9, v6, (uint64_t)v5, v8, v10);

  objc_opt_class();
  v12 = objc_opt_isKindOfClass();
  v14 = *(void **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  if ((v12 & 1) != 0)
    objc_msgSend__writeStringToByteBuffer_buffer_(v14, v11, (uint64_t)v16, v13, v15);
  else
    objc_msgSend__writeArrayToByteBuffer_buffer_(v14, v11, (uint64_t)v16, v13, v15);

}

BOOL IDSQRProtoReallocateReallocateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void *sub_19BACA7C0()
{
  void *result;

  result = (void *)MEMORY[0x1A1AC7380]("AnalyticsSendEvent", CFSTR("CoreAnalytics"));
  off_1EE40ACA8 = result;
  return result;
}

uint64_t IDSSimpleUInt16List_Init(uint64_t result, int a2)
{
  uint64_t *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (uint64_t *)result;
    v4 = malloc_type_malloc(2 * a2, 0x1000040BDFB0063uLL);
    v3[2] = (uint64_t)v4;
    if (v4)
    {
      *v3 = a2;
      v3[1] = 0;
      OSLogHandleForIDSCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v6 = *v3;
        *(_DWORD *)buf = 134217984;
        v9 = v6;
        _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEBUG, "IDSSimpleUInt16List: initialized to size %lu.", buf, 0xCu);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: initialized to size %lu."));
      }
    }
    else
    {
      OSLogHandleForIDSCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: failed to initialize.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: failed to initialize."));
      }
    }
  }
  return result;
}

_QWORD *IDSSimpleUInt16List_Destroy(_QWORD *result)
{
  void *v1;
  NSObject *v2;
  uint8_t v3[16];

  if (result)
  {
    *result = 0;
    result[1] = 0;
    v1 = (void *)result[2];
    if (v1)
      free(v1);
    OSLogHandleForIDSCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: list destroyed.", v3, 2u);
    }

    result = (_QWORD *)os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = (_QWORD *)_IDSShouldLog();
      if ((_DWORD)result)
        return (_QWORD *)_IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: list destroyed."));
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_AddItem(uint64_t result, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  size_t v7;
  NSObject *v8;
  _WORD *v9;
  _WORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t buf[4];
  _BYTE v21[18];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    if (*(_QWORD *)result)
    {
LABEL_23:
      v10 = *(_WORD **)(result + 16);
      v13 = *(_QWORD *)(result + 8);
    }
    else
    {
      v7 = 0;
      v4 = 0;
      v6 = 0;
LABEL_16:
      v9 = malloc_type_realloc(*(void **)(result + 16), v7, 0x121291F8uLL);
      if (!v9)
      {
        OSLogHandleForIDSCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: failed to realloc list.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: failed to realloc list."));
        }
        return result;
      }
      v10 = v9;
      OSLogHandleForIDSCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *v3;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v21 = v12;
        *(_WORD *)&v21[8] = 2048;
        *(_QWORD *)&v21[10] = v6;
        _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: list size changed from %lu to %lu.", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: list size changed from %lu to %lu."));
      v3[2] = (uint64_t)v10;
      *v3 = v6;
      v13 = v3[1];
    }
    v10[v4] = a2;
    v3[1] = v13 + 1;
    OSLogHandleForIDSCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v15 = v3[1];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v21 = __rev16(a2);
      *(_WORD *)&v21[4] = 2048;
      *(_QWORD *)&v21[6] = v15;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEBUG, "IDSSimpleUInt16List: added item %04x, count %lu.", buf, 0x12u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: added item %04x, count %lu."));
    }
    return result;
  }
  for (i = 0; i != v4; ++i)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(result + 16) + 2 * i) == a2)
    {
      OSLogHandleForIDSCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v21 = __rev16(a2);
        _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEBUG, "Error: IDSSimpleUInt16List: item %04x is already in the list, ignore.", buf, 8u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Error: IDSSimpleUInt16List: item %04x is already in the list, ignore."));
      }
      return result;
    }
  }
  if (v4 != *(_QWORD *)result)
    goto LABEL_23;
  if (v4 < 0)
  {
    OSLogHandleForIDSCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = *v3;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v21 = v19;
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEBUG, "Error: IDSSimpleUInt16List: 2 * list->listSize overflow, list->listSize = %lu", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Error: IDSSimpleUInt16List: 2 * list->listSize overflow, list->listSize = %lu"));
    }
  }
  else
  {
    v6 = 2 * v4;
    v7 = 4 * v4;
    if (((2 * v4) & 0x8000000000000000) == 0)
      goto LABEL_16;
    OSLogHandleForIDSCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v21 = 4 * v4;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEBUG, "Error: IDSSimpleUInt16List: sizeof(uint16_t) * newListSize overflow, sizeOfNewListSize = %lu", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Error: IDSSimpleUInt16List: sizeof(uint16_t) * newListSize overflow, sizeOfNewListSize = %lu"));
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_RemoveItem(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      v5 = 0;
      while (*(unsigned __int16 *)(*(_QWORD *)(result + 16) + 2 * v5) != a2)
      {
        if (v4 == ++v5)
          goto LABEL_9;
      }
    }
    else
    {
      v5 = 0;
    }
    if (v5 == v4)
    {
LABEL_9:
      OSLogHandleForIDSCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v10 = __rev16(a2);
        _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: cannot find item %04x.", buf, 8u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: cannot find item %04x."));
      }
    }
    else
    {
      memmove((void *)(*(_QWORD *)(result + 16) + 2 * v5), (const void *)(*(_QWORD *)(result + 16) + 2 * v5 + 2), 2 * (v4 + ~v5));
      --*(_QWORD *)(v3 + 8);
      OSLogHandleForIDSCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(v3 + 8);
        *(_DWORD *)buf = 67109376;
        v10 = __rev16(a2);
        v11 = 2048;
        v12 = v8;
        _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEBUG, "IDSSimpleUInt16List: removed item %04x, count %lu.", buf, 0x12u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSSimpleUInt16List: removed item %04x, count %lu."));
      }
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_HasItem(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;

  if (result)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      v3 = *(unsigned __int16 **)(result + 16);
      v4 = v2 - 1;
      do
      {
        v5 = *v3++;
        result = v5 == a2;
      }
      while (v5 != a2 && v4-- != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_Count(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t IDSSimpleUInt16List_ElementAtIndex(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_QWORD *)(result + 8) <= (unint64_t)a2)
      return 0;
    else
      return *(unsigned __int16 *)(*(_QWORD *)(result + 16) + 2 * a2);
  }
  return result;
}

uint64_t IDSQRSendInfoList_Init(uint64_t result, int a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  uint64_t *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (uint64_t **)result;
    v4 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    if (v4)
    {
      v5 = v4;
      v6 = malloc_type_calloc(1uLL, 312 * a2, 0x100004007B2CB06uLL);
      v5[1] = (uint64_t)v6;
      if (v6)
      {
        *v5 = a2;
        *v3 = v5;
        OSLogHandleForTransportCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *v3;
          v9 = **v3;
          *(_DWORD *)buf = 134218240;
          v13 = v8;
          v14 = 2048;
          v15 = v9;
          _os_log_impl(&dword_19B949000, v7, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Init: initialized list %p to size %lu.", buf, 0x16u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLogTransport();
          if ((_DWORD)result)
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSQRSendInfoList_Init: initialized list %p to size %lu."));
            result = _IDSShouldLog();
            if ((_DWORD)result)
              return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_Init: initialized list %p to size %lu."));
          }
        }
      }
      else
      {
        OSLogHandleForIDSCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Init: failed to initialize items.", buf, 2u);
        }

        result = os_log_shim_legacy_logging_enabled();
        if ((_DWORD)result)
        {
          result = _IDSShouldLog();
          if ((_DWORD)result)
            return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_Init: failed to initialize items."));
        }
      }
    }
    else
    {
      OSLogHandleForIDSCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Init: failed to initialize list.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_Init: failed to initialize list."));
      }
    }
  }
  return result;
}

void IDSQRSendInfoList_Destroy(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint8_t buf[4];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *a1 = 0;
    v2 = (void *)a1[1];
    if (v2)
      free(v2);
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v5 = a1;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Destroy: list %p destroyed.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSQRSendInfoList_Destroy: list %p destroyed."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_Destroy: list %p destroyed."));
    }
    free(a1);
  }
}

uint64_t IDSQRSendInfoList_AddItemAtIndex(uint64_t result, void *__src, int a3)
{
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v5 = (unint64_t *)result;
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result > (unint64_t)a3)
  {
    v7 = *(char **)(result + 8);
LABEL_4:
    memcpy(&v7[312 * a3], __src, 0x138uLL);
    OSLogHandleForTransportCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v20 = (uint64_t)__src;
      v21 = 1024;
      LODWORD(v22) = a3;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_AddItemAtIndex: added item %p at index %d.", buf, 0x12u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("IDSQRSendInfoList_AddItemAtIndex: added item %p at index %d."));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_AddItemAtIndex: added item %p at index %d."));
      }
    }
    return result;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    OSLogHandleForIDSCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = *v5;
      *(_DWORD *)buf = 134217984;
      v20 = v11;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEBUG, "Error: IDSQRSendInfoList_AddItemAtIndex: list->listSize * 2 overflow, list->listSize = %lu", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Error: IDSQRSendInfoList_AddItemAtIndex: list->listSize * 2 overflow, list->listSize = %lu"));
    }
  }
  else if (a3 == 0x7FFFFFFF)
  {
    OSLogHandleForIDSCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEBUG, "Error: IDSQRSendInfoList_AddItemAtIndex: itemIndex = INT_MAX", buf, 2u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLog();
      if ((_DWORD)result)
        return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Error: IDSQRSendInfoList_AddItemAtIndex: itemIndex = INT_MAX"));
    }
  }
  else
  {
    v12 = 2 * v6;
    if (v12 <= a3 + 1)
      v13 = a3 + 1;
    else
      v13 = v12;
    if (is_mul_ok(v13, 0x138uLL))
    {
      v15 = (char *)malloc_type_realloc(*(void **)(result + 8), 312 * v13, 0xA967F352uLL);
      if (v15)
      {
        v7 = v15;
        OSLogHandleForIDSCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *v5;
          *(_DWORD *)buf = 134218240;
          v20 = v17;
          v21 = 2048;
          v22 = v13;
          _os_log_impl(&dword_19B949000, v16, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_AddItemAtIndex: list size changed from %lu to %lu.", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_AddItemAtIndex: list size changed from %lu to %lu."));
        *v5 = v13;
        v5[1] = (unint64_t)v7;
        goto LABEL_4;
      }
      OSLogHandleForIDSCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_AddItemAtIndex: failed to realloc list.", buf, 2u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("IDSQRSendInfoList_AddItemAtIndex: failed to realloc list."));
      }
    }
    else
    {
      OSLogHandleForIDSCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v20 = 312;
        v21 = 2048;
        v22 = v13;
        _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEBUG, "Error: IDSQRSendInfoList_AddItemAtIndex: sizeof(IDSQRSendInfo) * newListSize overflow, sizeof(IDSQRSendInfo) = %lu, newListSize = %lu", buf, 0x16u);
      }

      result = os_log_shim_legacy_logging_enabled();
      if ((_DWORD)result)
      {
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(1, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Error: IDSQRSendInfoList_AddItemAtIndex: sizeof(IDSQRSendInfo) * newListSize overflow, sizeof(IDSQRSendInfo) = %lu, newListSize = %lu"));
      }
    }
  }
  return result;
}

_QWORD *IDSQRSendInfoList_ItemAtIndex(_QWORD *result, int a2)
{
  if (result)
  {
    if (*result <= (unint64_t)a2)
      return 0;
    else
      return (_QWORD *)(result[1] + 312 * a2);
  }
  return result;
}

uint64_t IDSQRSendInfoList_AddItemAtIndexFromCandidatePair(uint64_t a1, void *a2, int a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  LODWORD(v41) = objc_msgSend_linkID(v5, v6, v7, v8);
  objc_msgSend_local(v5, v9, v10, v11, v41, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0,
    (unsigned __int128)0,
    (unsigned __int128)0,
    0,
    0,
    0,
    0,
    0,
    0,
    v44);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  HIDWORD(v41) = objc_msgSend_index(v12, v13, v14, v15);

  objc_msgSend_local(v5, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_transport(v19, v20, v21, v22);

  v42 = objc_msgSend_channelNumber(v5, v23, v24, v25);
  objc_msgSend_local(v5, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_address(v29, v30, v31, v32);

  objc_msgSend_remote(v5, v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_external(v36, v37, v38, v39);
  __memcpy_chk();
  __memcpy_chk();
  return IDSQRSendInfoList_AddItemAtIndex(a1, &v41, a3);
}

id GLUtilConnectionDictionaryForNWConnectionInfo(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  void *v8;
  double v9;
  id v10;
  const char *v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  void *v32;
  const char *v33;
  double v34;
  void *v35;
  _QWORD v37[5];
  _QWORD v38[5];
  uuid_t uu;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = a1;
  objc_msgSend_childConnectionID(v3, v4, v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    memset(uu, 170, sizeof(uu));
    uuid_clear(uu);
    v10 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v8 = (void *)objc_msgSend_initWithUUIDBytes_(v10, v11, (uint64_t)uu, v12);
  }
  v37[0] = CFSTR("id");
  IDSGetUUIDDataFromNSUUID(v8, v7, v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v38[0] = v13;
  v37[1] = CFSTR("protocol-stack");
  objc_msgSend_protocolStackDescription(v3, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v38[1] = v17;
  v37[2] = CFSTR("nw-connection-id");
  v18 = (void *)MEMORY[0x1E0CB37E8];
  v22 = objc_msgSend_connectionID(v3, v19, v20, v21);
  objc_msgSend_numberWithUnsignedLongLong_(v18, v23, v22, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v38[2] = v25;
  v37[3] = CFSTR("nw-connection-token");
  objc_msgSend_token(v3, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  v38[3] = v29;
  v37[4] = CFSTR("allow-outgoing");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v30, a2, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v38[4] = v32;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v33, (uint64_t)v38, v34, v37, 5);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  return v35;
}

id GLUtilConnectionDictionaryForTCPCandidatePair(double a1, uint64_t a2, const char *a3)
{
  void *v3;
  const char *v4;
  double v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v8[0] = CFSTR("protocol-stack");
  v8[1] = CFSTR("allow-outgoing");
  v9[0] = CFSTR("tcp");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a3, (uint64_t)a3, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v9, v5, v8, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id GLUtilConnectionDictionaryForUDPCandidatePair(double a1, uint64_t a2, const char *a3)
{
  void *v3;
  const char *v4;
  double v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v8[0] = CFSTR("protocol-stack");
  v8[1] = CFSTR("allow-outgoing");
  v9[0] = CFSTR("udp");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a3, (uint64_t)a3, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v9, v5, v8, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

unint64_t ntpTime32(double a1)
{
  if (qword_1EE40AEA0 != -1)
    dispatch_once(&qword_1EE40AEA0, &unk_1E3C1B9D0);
  return (unint64_t)((double)(unint64_t)qword_1EE40AEA8 + a1 * 4294967300.0) >> 16;
}

void sub_19BACC17C()
{
  double v0;
  double v1;
  timeval v2[2];

  if (!qword_1EE40AEA8)
  {
    memset(v2, 170, sizeof(v2));
    v0 = ids_monotonic_time();
    gettimeofday(&v2[1], 0);
    v1 = ids_monotonic_time();
    gettimeofday(v2, 0);
    if (ids_monotonic_time() - v1 < v1 - v0)
    {
      v2[1] = v2[0];
      v0 = v1;
    }
    qword_1EE40AEA8 = vcvtd_n_u64_f64((double)v2[1].tv_sec + (double)v2[1].tv_usec * 0.000001 + 2208988800.0 - v0, 0x20uLL);
  }
}

uint64_t GLUtilStunErrorToGlobalLinkError(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = 255;
  v2 = 34;
  v3 = 35;
  v4 = 42;
  if (a1 != 613)
    v4 = 255;
  if (a1 != 602)
    v3 = v4;
  if (a1 != 601)
    v2 = v3;
  v5 = 17;
  v6 = 19;
  if (a1 != 442)
    v6 = 255;
  if (a1 != 441)
    v5 = v6;
  if (a1 <= 600)
    v2 = v5;
  v7 = 16;
  v8 = 18;
  if (a1 != 437)
    v8 = 255;
  if (a1 != 420)
    v7 = v8;
  if (a1 == 401)
    v1 = 17;
  if (a1 == 400)
    v1 = 15;
  if (a1 > 419)
    v1 = v7;
  if (a1 <= 440)
    return v1;
  else
    return v2;
}

double GLUtilNATCheckTimeout(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  float v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t buf[4];
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend_sharedInstance(IDSServerBag, a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, (uint64_t)CFSTR("gk-p2p-nat-type-timeout"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_floatValue(v7, v8, v9, v10);
    v12 = v11;
    OSLogHandleForTransportCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v17 = *(const __CFString **)&v12;
      _os_log_impl(&dword_19B949000, v13, OS_LOG_TYPE_DEFAULT, "got commnat timeout: %f(s)", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("got commnat timeout: %f(s)"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("got commnat timeout: %f(s)"));
      }
    }
  }
  else
  {
    OSLogHandleForTransportCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v17 = CFSTR("gk-p2p-nat-type-timeout");
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "failed to get bag entry with %@ key", buf, 0xCu);
    }

    v12 = 0.0;
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get bag entry with %@ key"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get bag entry with %@ key"));
      }
    }
  }

  return v12;
}

uint64_t GLUtilGetDefaultInterface(_DWORD *a1, char *a2, _BYTE *a3, double a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  double v33;
  char v34;
  char v35;
  id v36;
  const char *v37;
  uint64_t v38;
  double v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  NSObject *v47;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  double v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  void *v61;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  objc_msgSend_sharedInstance(IDSNWPathUtils, a2, (uint64_t)a3, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getDefaultPath(v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_msgSend_status(v11, v12, v13, v14);
  if (v15 != 1)
  {
    v46 = v15;
    OSLogHandleForTransportCategory();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v63 = v11;
      v64 = 1024;
      v65 = v46;
      _os_log_impl(&dword_19B949000, v47, OS_LOG_TYPE_DEFAULT, "no default path is available (path:%@, status:%d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no default path is available (path:%@, status:%d)."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no default path is available (path:%@, status:%d)."));
      }
    }
    v31 = 0;
    goto LABEL_18;
  }
  objc_msgSend_interface(v11, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_interfaceIndex(v19, v20, v21, v22);

  objc_msgSend_interface(v11, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_interfaceName(v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = objc_msgSend_usesInterfaceType_(v11, v32, 2, v33);
  if ((v23 & 0x80000000) != 0 || !v31)
  {
    OSLogHandleForTransportCategory();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_privateDescription(v11, v50, v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v63 = v31;
      v64 = 1024;
      v65 = v23;
      v66 = 2112;
      v67 = v53;
      _os_log_impl(&dword_19B949000, v49, OS_LOG_TYPE_DEFAULT, "invalid default interface [%@:%d], %@.", buf, 0x1Cu);

    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_privateDescription(v11, v54, v55, v56);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("invalid default interface [%@:%d], %@."));

        if (_IDSShouldLog())
        {
          objc_msgSend_privateDescription(v11, v57, v58, v59, v31, v23, v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("invalid default interface [%@:%d], %@."));

        }
      }
    }
LABEL_18:
    v45 = 0;
    goto LABEL_19;
  }
  v35 = v34;
  if (a1)
    *a1 = v23;
  if (a2)
  {
    v36 = objc_retainAutorelease(v31);
    v40 = (const char *)objc_msgSend_UTF8String(v36, v37, v38, v39);
    v44 = objc_msgSend_length(v36, v41, v42, v43);
    strlcpy(a2, v40, v44 + 1);
  }
  if (a3)
    *a3 = v35;
  v45 = 1;
LABEL_19:

  return v45;
}

uint64_t GLUtilGetLinkOverhead(unsigned int a1)
{
  int v1;
  int v2;

  v1 = ((int)(a1 << 31) >> 31) & 0x14;
  if ((a1 & 2) != 0)
    v1 |= 0x28u;
  if ((a1 & 4) != 0)
    v1 += 8;
  v2 = v1 | (a1 >> 3) & 2;
  if ((a1 & 0x20) != 0)
    LOWORD(v2) = v2 + 6;
  if ((a1 & 8) != 0)
    LOWORD(v2) = v2 + 16;
  if ((a1 & 0x40) != 0)
    LOWORD(v2) = v2 + 2;
  if ((a1 & 0x80) != 0)
    LOWORD(v2) = v2 + 30;
  if ((a1 & 0x100) != 0)
    LOWORD(v2) = v2 + 16;
  if ((a1 & 0x200) != 0)
    LOWORD(v2) = v2 + 5;
  return (unsigned __int16)v2;
}

uint64_t GLUtilGetLocalMTU(unsigned int a1, const char *a2, uint64_t a3, double a4)
{
  int v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  int v11;

  v5 = 1450;
  if ((_DWORD)a2)
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, a3, a4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend_cellularMTU(v6, v7, v8, v9);

    if (v10 >= 0x5AA)
      v11 = 1450;
    else
      v11 = v10;
    if (v10)
      v5 = v11;
    else
      v5 = 1450;
  }
  return v5 - GLUtilGetLinkOverhead(a1);
}

uint64_t GLUtilGetRATForIPv4Address(int a1, void *a2)
{
  id v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v3 = a2;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v25, v5, v29, 16);
  if (v6)
  {
    v10 = v6;
    v11 = *(_QWORD *)v26;
    while (2)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v3);
        objc_msgSend_local(*(void **)(*((_QWORD *)&v25 + 1) + 8 * v12), v7, v8, v9, (_QWORD)v25);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(_BYTE *)(objc_msgSend_address(v13, v14, v15, v16) + 1) != 30
          && *(_DWORD *)(objc_msgSend_external(v13, v17, v18, v19) + 4) == a1)
        {
          v23 = objc_msgSend_radioAccessTechnology(v13, v20, v21, v22);

          goto LABEL_12;
        }

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v25, v9, v29, 16);
      if (v10)
        continue;
      break;
    }
  }
  v23 = 10;
LABEL_12:

  return v23;
}

uint64_t GLUtilGetRATForIPv6Address(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v3 = a2;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v27, v5, v31, 16);
  if (v6)
  {
    v10 = v6;
    v11 = *(_QWORD *)v28;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v28 != v11)
          objc_enumerationMutation(v3);
        objc_msgSend_local(*(void **)(*((_QWORD *)&v27 + 1) + 8 * i), v7, v8, v9, (_QWORD)v27);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(_BYTE *)(objc_msgSend_address(v13, v14, v15, v16) + 1) != 2)
        {
          v20 = objc_msgSend_external(v13, v17, v18, v19);
          if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(v20 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v20 + 16))
          {
            v25 = objc_msgSend_radioAccessTechnology(v13, v21, v22, v23);

            goto LABEL_15;
          }
        }

      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v27, v9, v31, 16);
      if (v10)
        continue;
      break;
    }
  }
  v25 = 10;
LABEL_15:

  return v25;
}

uint64_t GLUtilHasV4AddressForInterface(int a1, void *a2)
{
  id v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = a2;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v21, v5, v25, 16);
  if (v6)
  {
    v10 = v6;
    v11 = *(_QWORD *)v22;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v22 != v11)
          objc_enumerationMutation(v3);
        v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        objc_msgSend_address(v13, v7, v8, v9, (_QWORD)v21);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend_sa(v14, v15, v16, v17);

        if (v18 && *(_BYTE *)(v18 + 1) == 2 && objc_msgSend_index(v13, v7, v8, v9) == a1)
        {
          v19 = 1;
          goto LABEL_13;
        }
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v21, v9, v25, 16);
      if (v10)
        continue;
      break;
    }
  }
  v19 = 0;
LABEL_13:

  return v19;
}

uint64_t GLUtilHasV6Address(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v1 = a1;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v11, v3, v15, 16);
  if (v6)
  {
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v1);
        if (objc_msgSend_IPVersion(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i), v4, v5, v7, (_QWORD)v11) == 1)
        {
          v6 = 1;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v11, v7, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

uint64_t GLUtilHasV4Address(void *a1)
{
  id v1;
  const char *v2;
  double v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v1 = a1;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v11, v3, v15, 16);
  if (v6)
  {
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v1);
        if (!objc_msgSend_IPVersion(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i), v4, v5, v7, (_QWORD)v11))
        {
          v6 = 1;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v11, v7, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

uint64_t GLUtilGetFirstUnusedInterface(void *a1, void *a2, void *a3, _DWORD *a4, char *a5, char a6)
{
  const char *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  id v18;
  const char *v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  int v37;
  BOOL v38;
  void *v40;
  const char *v41;
  double v42;
  char isEqualToString;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  double v47;
  id v48;
  const char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  double v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  _DWORD *v62;
  char *v63;
  id obj;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[128];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v70 = a1;
  v68 = a2;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  obj = a3;
  v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v75, v12, v80, 16);
  if (v66)
  {
    v62 = a4;
    v63 = a5;
    v67 = *(_QWORD *)v76;
    while (1)
    {
      v16 = 0;
LABEL_4:
      if (*(_QWORD *)v76 != v67)
        objc_enumerationMutation(obj);
      v69 = v16;
      v65 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * v16);
      v17 = objc_msgSend_index(v65, v13, v14, v15);
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v18 = v68;
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v71, v20, v79, 16);
      if (!v21)
        break;
      v25 = v21;
      v26 = *(_QWORD *)v72;
LABEL_8:
      v27 = 0;
      while (1)
      {
        if (*(_QWORD *)v72 != v26)
          objc_enumerationMutation(v18);
        v28 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * v27);
        v29 = objc_msgSend_state(v28, v22, v23, v24);
        objc_msgSend_local(v28, v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend_index(v33, v34, v35, v36);

        if ((a6 & 1) != 0
          || objc_msgSend_isRelayStunCandidatePair(v28, v22, v23, v24)
          && (objc_msgSend_isSelfQRSession(v28, v22, v23, v24) & 1) == 0)
        {
          v38 = v37 != v17 || v29 == 0;
          if (!v38 && v29 <= 4)
          {
            if (!v70)
              break;
            objc_msgSend_sessionID(v28, v22, v23, v24);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v40, v41, (uint64_t)v70, v42);

            if ((isEqualToString & 1) != 0)
              break;
          }
        }
        if (v25 == ++v27)
        {
          v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v22, (uint64_t)&v71, v24, v79, 16);
          if (v25)
            goto LABEL_8;
          goto LABEL_30;
        }
      }

      v16 = v69 + 1;
      if (v69 + 1 != v66)
        goto LABEL_4;
      v44 = 0;
      v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v75, v15, v80, 16);
      if (!v66)
        goto LABEL_36;
    }
LABEL_30:

    if (v62)
      *v62 = v17;
    if (v63)
    {
      objc_msgSend_name(v65, v45, v46, v47);
      v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v52 = (const char *)objc_msgSend_UTF8String(v48, v49, v50, v51);
      objc_msgSend_name(v65, v53, v54, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = objc_msgSend_length(v56, v57, v58, v59);
      strlcpy(v63, v52, v60 + 1);

    }
    v44 = 1;
  }
  else
  {
    v44 = 0;
  }
LABEL_36:

  return v44;
}

uint64_t GLUtilHasDefaultInterface(void *a1)
{
  id v1;
  double v2;
  uint64_t v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _BYTE v19[128];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v18 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v3 = 0;
  if (GLUtilGetDefaultInterface(&v18, (char *)v20, 0, v2))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v1;
    v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v14, v6, v19, 16);
    if (v3)
    {
      v10 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v4);
          v12 = objc_msgSend_index(*(void **)(*((_QWORD *)&v14 + 1) + 8 * i), v7, v8, v9, (_QWORD)v14);
          if (v12 == v18)
          {
            v3 = 1;
            goto LABEL_12;
          }
        }
        v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v14, v9, v19, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_12:

  }
  return v3;
}

id GLUtilCreateRelayCandidatePair(void *a1, void *a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, void *a9)
{
  id v13;
  id v14;
  int v15;
  int v16;
  int LinkOverhead;
  const char *v18;
  double v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  const char *isCellular;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  void *v45;
  uint64_t v46;
  double v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  int v55;
  uint64_t LocalMTU;
  const char *v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  const char *v61;
  double v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  double v66;
  void *v67;
  const char *v68;
  double v69;
  void *v70;
  NSObject *v71;
  const char *v72;
  double v73;
  const char *v74;
  double v75;
  id v77;
  void *v78;
  id v81;
  id v82;
  void *v83;
  uint8_t buf[4];
  const char *v85;
  __int16 v86;
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v81 = a2;
  v14 = a3;
  v82 = a9;
  if (a8 == 3)
    v15 = 896;
  else
    v15 = 0;
  if (a8 == 2)
    v16 = 4;
  else
    v16 = v15;
  LinkOverhead = GLUtilGetLinkOverhead(v16 | 0x1Au);
  objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v18, 3, v19, a8, 0, (1280 - LinkOverhead), 0xFFFFFFFFLL, 0, a4);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_address(v14, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend_sa(v23, v24, v25, v26);

  isCellular = (const char *)objc_msgSend_isCellular(v14, v28, v29, v30);
  if ((_DWORD)isCellular)
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v31, v32, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v39) = objc_msgSend_radioAccessTechnology(v35, v36, v37, v38);

    if (v39 >= 0xA)
      v39 = 10;
    else
      v39 = v39;
  }
  else if (objc_msgSend_isWired(v14, v31, v32, v34))
  {
    v39 = 9;
  }
  else
  {
    v39 = 0;
  }
  OSLogHandleForTransportCategory();
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = IDSRadioAccessTechnologyToString(v39);
    objc_msgSend_name(v14, v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315394;
    v85 = v41;
    v86 = 2112;
    v87 = v45;
    _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "setting RAT %s for interface [%@].", buf, 0x16u);

  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v48 = IDSRadioAccessTechnologyToString(v39);
      objc_msgSend_name(v14, v49, v50, v51);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("setting RAT %s for interface [%@]."));

      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v39);
        objc_msgSend_name(v14, v52, v53, v54, v48, v78);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("setting RAT %s for interface [%@]."));

      }
    }
  }
  if (*(_BYTE *)(v27 + 1) == 30)
    v55 = 2;
  else
    v55 = 1;
  LocalMTU = GLUtilGetLocalMTU(v16 | v55 | 0x20u, isCellular, v46, v47);
  v60 = objc_msgSend_index(v14, v57, v58, v59);
  objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v61, 3, v62, a8, v39, LocalMTU, v60, v27, v27);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_relaySessionID(v13, v64, v65, v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v68, (uint64_t)v63, v69, v83, v67, v82);
  v70 = (void *)objc_claimAutoreleasedReturnValue();

  OSLogHandleForTransportCategory();
  v71 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v85 = (const char *)v13;
    _os_log_impl(&dword_19B949000, v71, OS_LOG_TYPE_DEFAULT, "GLUtilCreateRelayCandidatePair: setPropertiesWithRelaySessionInfo, qrSessionInfo = %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v77 = v13;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilCreateRelayCandidatePair: setPropertiesWithRelaySessionInfo, qrSessionInfo = %@"));
      if (_IDSShouldLog())
      {
        v77 = v13;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilCreateRelayCandidatePair: setPropertiesWithRelaySessionInfo, qrSessionInfo = %@"));
      }
    }
  }
  objc_msgSend_setPropertiesWithRelaySessionInfo_sessionInfoDict_enableSKE_(v70, v72, (uint64_t)v13, v73, v81, a7, v77, v78);
  objc_msgSend_setIsAcceptedRelaySession_(v70, v74, a5, v75);

  return v70;
}

unsigned __int16 *GLUtilGetCandidatePairByLinkID(uint64_t a1, _QWORD *a2, void *a3, void *a4)
{
  const __CFDictionary *v7;
  const char *v8;
  const __CFDictionary *v9;
  double v10;
  const char *v11;
  void *v12;
  double v13;
  void *v14;
  void *Value;
  unsigned __int16 *v16;
  uint64_t v17;
  const char *v18;
  double v19;
  void *v21;

  v7 = a3;
  v9 = a4;
  if ((_DWORD)a1)
  {
    if (v7)
    {
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v8, a1, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], v11, a1, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        Value = (void *)CFDictionaryGetValue(v7, v14);
LABEL_5:
        v16 = Value;

LABEL_15:
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (!a2 || !*a2)
  {
LABEL_13:
    v16 = 0;
    goto LABEL_16;
  }
  v16 = (unsigned __int16 *)a2[1];
  if (v16)
  {
    v17 = *(unsigned int *)v16;
    if ((int)v17 < 1)
    {
      channelForStunCandidatePair((uint64_t)(v16 + 4), (uint64_t)(v16 + 68), v16[132]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 0;
      if (v9 && v12)
        v21 = (void *)CFDictionaryGetValue(v9, v12);
      v16 = v21;
      goto LABEL_15;
    }
    if (v7)
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v8, v17, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v18, *(unsigned int *)v16, v19);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        Value = (void *)CFDictionaryGetValue(v7, v14);
        goto LABEL_5;
      }
LABEL_14:
      v16 = 0;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_16:

  return v16;
}

void GLUtilGetLinkInformation(void *a1, uint64_t a2, _DWORD *a3, _BYTE *a4, void *a5)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  const char *v20;
  double v21;
  const char *v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  double v27;
  char isSelfQRSession;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a5;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v38, 0.0, v42, 16);
  if (!v10)
  {
    v15 = 0;
    v37 = 0;
    goto LABEL_21;
  }
  v14 = v10;
  v15 = 0;
  v37 = 0;
  v16 = *(_QWORD *)v39;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v39 != v16)
        objc_enumerationMutation(v8);
      v18 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
      if (!v7)
      {
        if ((objc_msgSend_isRelayStunCandidatePair(v18, v11, v12, v13) & 1) == 0
          || (objc_msgSend_isSelfQRSession(v18, v11, v12, v13) & 1) != 0)
        {
          continue;
        }
LABEL_14:
        objc_msgSend_local(v18, v11, v12, v13);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend_transport(v29, v30, v31, v32);

        if (v33 == a2)
        {
          v34 = objc_msgSend_state(v18, v11, v12, v13);
          if (v34)
          {
            ++v15;
            v37 |= v34 > 2;
          }
        }
        continue;
      }
      objc_msgSend_sessionID(v18, v11, v12, v13);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isEqualToString_(v7, v20, (uint64_t)v19, v21) & 1) == 0
        || (objc_msgSend_isRelayStunCandidatePair(v18, v22, v23, v24) & 1) == 0)
      {

        continue;
      }
      isSelfQRSession = objc_msgSend_isSelfQRSession(v18, v25, v26, v27);

      if ((isSelfQRSession & 1) == 0)
        goto LABEL_14;
    }
    v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v38, v13, v42, 16);
  }
  while (v14);
LABEL_21:
  if (a3)
    *a3 = v15;
  if (a4)
    *a4 = v37 & 1;

}

id GLUtilGetSharedSessionIDs(void *a1)
{
  id v1;
  id v2;
  id v3;
  const char *v4;
  double v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  const char *v18;
  double v19;
  BOOL v20;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = v1;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v23, v5, v27, 16);
  if (v6)
  {
    v10 = v6;
    v11 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(v3);
        v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend_sessionID(v13, v7, v8, v9, (_QWORD)v23);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isSharedQRSession(v13, v15, v16, v17))
        {
          if (objc_msgSend_containsObject_(v2, v18, (uint64_t)v14, v19))
            v20 = 1;
          else
            v20 = v2 == 0;
          if (!v20 && v14 != 0)
            CFArrayAppendValue((CFMutableArrayRef)v2, v14);
        }

      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v23, v9, v27, 16);
    }
    while (v10);
  }

  return v2;
}

uint64_t GLUtilHasRelayCandidatePairConnected(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  char isEqualToString;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = a2;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10, (_QWORD)v19))
        {
          if (objc_msgSend_state(v13, v7, v8, v10) == 4)
          {
            if (!v3
              || (objc_msgSend_sessionID(v13, v7, v8, v10),
                  v14 = (void *)objc_claimAutoreleasedReturnValue(),
                  isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16),
                  v14,
                  (isEqualToString & 1) != 0))
            {
              v9 = 1;
              goto LABEL_14;
            }
          }
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_14:

  return v9;
}

uint64_t GLUtilHasRelayCandidatePairSucceededOrConnected(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  const char *v7;
  double v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  int v21;
  void *v22;
  const char *v23;
  double v24;
  char isEqualToString;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v6 = a2;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v28, v8, v32, 16);
  if (v9)
  {
    v13 = v9;
    v14 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v29 != v14)
          objc_enumerationMutation(v6);
        v16 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v16, v10, v11, v12, (_QWORD)v28)
          && (objc_msgSend_state(v16, v10, v11, v12) == 3 || objc_msgSend_state(v16, v10, v11, v12) == 4))
        {
          objc_msgSend_local(v16, v10, v11, v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend_radioAccessTechnology(v17, v18, v19, v20);

          if (v21 == a3)
          {
            if (!v5
              || (objc_msgSend_sessionID(v16, v10, v11, v12),
                  v22 = (void *)objc_claimAutoreleasedReturnValue(),
                  isEqualToString = objc_msgSend_isEqualToString_(v22, v23, (uint64_t)v5, v24),
                  v22,
                  (isEqualToString & 1) != 0))
            {
              v26 = 1;
              goto LABEL_16;
            }
          }
        }
      }
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v10, (uint64_t)&v28, v12, v32, 16);
      if (v13)
        continue;
      break;
    }
  }
  v26 = 0;
LABEL_16:

  return v26;
}

uint64_t GLUtilHasSharedRelayCandidatePairSucceededOrConnected(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  int isEqualToString;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = a2;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (objc_msgSend_allocateType(v13, v7, v8, v10, (_QWORD)v19) != 2)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10))
          {
            objc_msgSend_sessionID(v13, v7, v8, v10);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16);

            if (isEqualToString)
            {
              if ((unint64_t)(objc_msgSend_state(v13, v7, v8, v10) - 5) > 0xFFFFFFFFFFFFFFFDLL)
              {
                v9 = 1;
                goto LABEL_14;
              }
            }
          }
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_14:

  return v9;
}

uint64_t GLUtilHasNonSharedRelayCandidatePair(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  char isEqualToString;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = a2;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if ((objc_msgSend_isSharedQRSession(v13, v7, v8, v10, (_QWORD)v19) & 1) == 0)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10))
          {
            if (objc_msgSend_state(v13, v7, v8, v10))
            {
              if (!v3
                || (objc_msgSend_sessionID(v13, v7, v8, v10),
                    v14 = (void *)objc_claimAutoreleasedReturnValue(),
                    isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16),
                    v14,
                    (isEqualToString & 1) != 0))
              {
                v9 = 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_15:

  return v9;
}

uint64_t GLUtilHasCandidatePairForSameSharedSession(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  char isEqualToString;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = a2;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (objc_msgSend_isSharedQRSession(v13, v7, v8, v10, (_QWORD)v19))
        {
          if (objc_msgSend_state(v13, v7, v8, v10))
          {
            objc_msgSend_sessionID(v13, v7, v8, v10);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16);

            if ((isEqualToString & 1) != 0)
            {
              v9 = 1;
              goto LABEL_13;
            }
          }
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_13:

  return v9;
}

uint64_t GLUtilHasDifferentSharedRelayCandidatePair(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  double v16;
  int isEqualToString;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = a2;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (objc_msgSend_isSharedQRSession(v13, v7, v8, v10, (_QWORD)v19))
        {
          if (objc_msgSend_state(v13, v7, v8, v10) == 4)
          {
            objc_msgSend_sessionID(v13, v7, v8, v10);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16);

            if (!isEqualToString)
            {
              v9 = 1;
              goto LABEL_13;
            }
          }
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_13:

  return v9;
}

id GLUtilGetDifferentRelayCandidatePairSucceeded(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  id v9;
  double v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  BOOL v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  double v25;
  const char *v26;
  double v27;
  const char *v28;
  uint64_t v29;
  double v30;
  id v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  int v43;
  id v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v4 = a2;
  v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v47, v6, v51, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v48;
    v45 = v4;
    while (2)
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v48 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
        v14 = objc_msgSend_state(v13, v7, v8, v10, v45);
        if (objc_msgSend_isRelayStunCandidatePair(v13, v15, v16, v17))
          v18 = (unint64_t)(v14 - 3) > 1;
        else
          v18 = 1;
        if (!v18)
        {
          objc_msgSend_sessionID(v3, v7, v8, v10);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_sessionID(v13, v20, v21, v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isEqualToString_(v19, v24, (uint64_t)v23, v25)
            && !objc_msgSend_isEqual_(v3, v26, (uint64_t)v13, v27))
          {
            objc_msgSend_local(v3, v28, v29, v30);
            v31 = v3;
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = objc_msgSend_radioAccessTechnology(v32, v33, v34, v35);
            objc_msgSend_local(v13, v36, v37, v38);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v43 = objc_msgSend_radioAccessTechnology(v39, v40, v41, v42);

            v3 = v31;
            v4 = v45;

            if (v46 == v43)
            {
              v9 = v13;
              goto LABEL_18;
            }
          }
          else
          {

          }
        }
      }
      v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v47, v10, v51, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_18:

  return v9;
}

id GLUtilGetRelayCandidatePairNotSucceededForOppositeIPVersion(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  double v6;
  const char *v7;
  uint64_t v8;
  id v9;
  double v10;
  uint64_t v11;
  void *i;
  void *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  BOOL v18;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  double v26;
  const char *v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  int v36;
  const char *v37;
  uint64_t v38;
  double v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  double v49;
  int v50;
  const char *v51;
  uint64_t v52;
  double v53;
  const char *v54;
  uint64_t v55;
  double v56;
  const char *v57;
  uint64_t v58;
  double v59;
  const char *v60;
  uint64_t v61;
  double v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v4 = a2;
  v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v77, v6, v81, 16);
  if (v9)
  {
    v11 = *(_QWORD *)v78;
    v76 = v4;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v78 != v11)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)i);
        v14 = objc_msgSend_state(v13, v7, v8, v10);
        if (objc_msgSend_isRelayStunCandidatePair(v13, v15, v16, v17))
          v18 = v14 > 2;
        else
          v18 = 1;
        if (!v18 && v14 != 0)
        {
          objc_msgSend_sessionID(v3, v7, v8, v10);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_sessionID(v13, v21, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend_isEqualToString_(v20, v25, (uint64_t)v24, v26)
            || (objc_msgSend_isEqual_(v3, v27, (uint64_t)v13, v28) & 1) != 0)
          {
            goto LABEL_21;
          }
          objc_msgSend_local(v13, v29, v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = *(unsigned __int8 *)(objc_msgSend_address(v32, v33, v34, v35) + 1);
          objc_msgSend_local(v3, v37, v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          if (v36 == *(unsigned __int8 *)(objc_msgSend_address(v40, v41, v42, v43) + 1))
            goto LABEL_20;
          objc_msgSend_local(v13, v44, v45, v46);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = objc_msgSend_radioAccessTechnology(v75, v47, v48, v49);
          objc_msgSend_local(v3, v51, v52, v53);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          if (v50 != objc_msgSend_radioAccessTechnology(v74, v54, v55, v56))
          {

LABEL_20:
            v4 = v76;
LABEL_21:

            continue;
          }
          objc_msgSend_local(v13, v57, v58, v59);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = objc_msgSend_transport(v71, v60, v61, v62);
          objc_msgSend_local(v3, v63, v64, v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = objc_msgSend_transport(v66, v67, v68, v69);

          v4 = v76;
          if (v73 == v72)
          {
            v9 = v13;
            goto LABEL_24;
          }
        }
      }
      v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v77, v10, v81, 16);
    }
    while (v9);
  }
LABEL_24:

  return v9;
}

uint64_t GLUtilSelectStunTransport(void *a1, uint64_t a2, int a3, int a4, int a5, int a6, void *a7, unint64_t a8)
{
  id v15;
  const char *v16;
  uint64_t v17;
  id v18;
  double v19;
  NSObject *v20;
  char *v21;
  void *v22;
  const char *v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  int v29;
  uint64_t v30;
  char HasRelayCandidatePairConnected;
  uint64_t v32;
  int v33;
  NSObject *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v43;
  char v44;
  int v45;
  uint8_t buf[4];
  _BYTE v47[14];
  __int16 v48;
  const __CFString *v49;
  __int16 v50;
  const __CFString *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v18 = a7;
  if ((unint64_t)(a2 - 3) > 1)
  {
    v45 = 0;
    v44 = -86;
    objc_msgSend_sharedInstance(IDSServerBag, v16, v17, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v22, v23, (uint64_t)CFSTR("ids-fallback-to-tcp-first"), v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = objc_msgSend_BOOLValue(v25, v26, v27, v28);
    v30 = 3;
    if (!v29)
      v30 = 4;
    v43 = v30;
    if (a3)
    {
      HasRelayCandidatePairConnected = GLUtilHasRelayCandidatePairConnected(v15, v18);
      a2 = 2;
      if (a8 <= 3 && (HasRelayCandidatePairConnected & 1) == 0)
      {
        GLUtilGetLinkInformation(v15, 2, &v45, 0, v18);
        a2 = 2;
        if (v45)
        {
          if ((a6 & 1) == 0)
          {
            GLUtilGetLinkInformation(v15, v43, &v45, 0, v18);
            v32 = 3;
            if (v29)
              v32 = 4;
            if (v45)
              a2 = v32;
            else
              a2 = v43;
          }
        }
      }
    }
    else
    {
      v33 = GLUtilHasRelayCandidatePairConnected(0, v18);
      if (!a4 || a5)
      {
        GLUtilGetLinkInformation(0, 2, &v45, &v44, v18);
        OSLogHandleForTransportCategory();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = CFSTR("YES");
          if (v44)
            v36 = CFSTR("YES");
          else
            v36 = CFSTR("NO");
          *(_DWORD *)buf = 67109890;
          if (v33)
            v37 = CFSTR("YES");
          else
            v37 = CFSTR("NO");
          *(_DWORD *)v47 = v45;
          *(_WORD *)&v47[4] = 2112;
          if (!a6)
            v35 = CFSTR("NO");
          *(_QWORD *)&v47[6] = v36;
          v48 = 2112;
          v49 = v37;
          v50 = 2112;
          v51 = v35;
          _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "linkAttempted: %d, linkConnected: %@, isQRConnected: %@, retryAllocbind: %@", buf, 0x26u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("linkAttempted: %d, linkConnected: %@, isQRConnected: %@, retryAllocbind: %@"));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("linkAttempted: %d, linkConnected: %@, isQRConnected: %@, retryAllocbind: %@"));
          }
        }
        if (v45)
          v38 = v44 == 0;
        else
          v38 = 0;
        if (v38)
          v39 = v33;
        else
          v39 = 1;
        a2 = 2;
        if ((v39 & 1) == 0 && (a6 & 1) == 0)
        {
          GLUtilGetLinkInformation(0, v43, &v45, &v44, v18);
          v40 = 3;
          if (v29)
            v40 = 4;
          if (v44)
            v41 = 1;
          else
            v41 = v45 == 0;
          if (v41)
            a2 = v43;
          else
            a2 = v40;
        }
      }
      else
      {
        a2 = 2;
      }
    }

  }
  else
  {
    OSLogHandleForTransportCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (&_IDSStunTransportStrings)[a2];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v47 = v21;
      _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "found override tranpsort [%s].", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found override tranpsort [%s]."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found override tranpsort [%s]."));
      }
    }
  }

  return a2;
}

__CFArray *GLUtilGetExcludedInterfaceAddressList(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  double v5;
  const char *v6;
  uint64_t v7;
  __CFArray *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  id v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  id v37;
  const char *v38;
  uint64_t v39;
  double v40;
  id v41;
  const char *v42;
  uint64_t v43;
  double v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  double v48;
  id v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  id v54;
  const char *v55;
  uint64_t v56;
  double v57;
  id v58;
  const char *v59;
  uint64_t v60;
  double v61;
  id v62;
  const char *v63;
  double v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  id v76;
  const char *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  double v83;
  id v84;
  const char *v85;
  uint64_t v86;
  double v87;
  const char *v88;
  uint64_t v89;
  double v90;
  id v91;
  const char *v92;
  uint64_t v93;
  double v94;
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  double v98;
  id v99;
  const char *v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  id v104;
  const char *v105;
  uint64_t v106;
  double v107;
  id v108;
  const char *v109;
  uint64_t v110;
  double v111;
  NSObject *v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id obj;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint8_t v132[128];
  uint8_t buf[4];
  uint64_t v134;
  __int16 v135;
  int v136;
  __int16 v137;
  _BYTE v138[14];
  __int16 v139;
  int v140;
  _BYTE v141[128];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  obj = a3;
  v123 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v128, v5, v141, 16);
  if (!v123)
  {
    v8 = 0;
    goto LABEL_75;
  }
  v8 = 0;
  v122 = *(_QWORD *)v129;
  v9 = 136315906;
  do
  {
    for (i = 0; i != v123; ++i)
    {
      if (*(_QWORD *)v129 != v122)
        objc_enumerationMutation(obj);
      v11 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * i);
      v12 = objc_msgSend_index(v11, v6, v7, *(double *)&v9, v114, v116, v117, v118, v119);
      v16 = objc_msgSend_delegatedIndex(v11, v13, v14, v15);
      objc_msgSend_address(v11, v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend_sa(v20, v21, v22, v23);

      if (!v24 || IsLinkLocalSA(v24))
      {
        OSLogHandleForTransportCategory();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v11, v29, v30, v31);
          v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v36 = objc_msgSend_UTF8String(v32, v33, v34, v35);
          *(_DWORD *)buf = 136315394;
          v134 = v36;
          v135 = 1024;
          v136 = v12;
          _os_log_impl(&dword_19B949000, v28, OS_LOG_TYPE_DEFAULT, "skip if:[%s:%d].", buf, 0x12u);

        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v11, v25, v26, v27);
            v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v115 = objc_msgSend_UTF8String(v37, v38, v39, v40);
            v116 = v12;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip if:[%s:%d]."));

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v11, v25, v26, v27, v115, v12);
              v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v115 = objc_msgSend_UTF8String(v41, v42, v43, v44);
              v116 = v12;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip if:[%s:%d]."));

            }
          }
        }
        if (v8)
        {
          if (!v11)
            goto LABEL_20;
        }
        else
        {
          v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (!v11)
            goto LABEL_20;
        }
        if (v8)
          CFArrayAppendValue(v8, v11);
      }
LABEL_20:
      if (!objc_msgSend_isCompanionLink(v11, v25, v26, v27, v115))
        goto LABEL_33;
      OSLogHandleForTransportCategory();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_name(v11, v46, v47, v48);
        v49 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v53 = objc_msgSend_UTF8String(v49, v50, v51, v52);
        *(_DWORD *)buf = 136315394;
        v134 = v53;
        v135 = 1024;
        v136 = v12;
        _os_log_impl(&dword_19B949000, v45, OS_LOG_TYPE_DEFAULT, "skip companion link if:[%s:%d].", buf, 0x12u);

      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          objc_msgSend_name(v11, v6, v7, *(double *)&v9);
          v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v114 = objc_msgSend_UTF8String(v54, v55, v56, v57);
          v116 = v12;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip companion link if:[%s:%d]."));

          if (_IDSShouldLog())
          {
            objc_msgSend_name(v11, v6, v7, *(double *)&v9, v114, v12);
            v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v114 = objc_msgSend_UTF8String(v58, v59, v60, v61);
            v116 = v12;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip companion link if:[%s:%d]."));

          }
        }
      }
      if (v8)
      {
        if (!v11)
          goto LABEL_33;
      }
      else
      {
        v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        if (!v11)
          goto LABEL_33;
      }
      if (v8)
        CFArrayAppendValue(v8, v11);
LABEL_33:
      if ((int)v16 >= 1)
      {
        if ((_DWORD)a1 != -1 && (_DWORD)v12 == (_DWORD)a1)
          continue;
        if (v8)
        {
          if (!v11)
            goto LABEL_62;
        }
        else
        {
          v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (!v11)
          {
LABEL_62:
            OSLogHandleForTransportCategory();
            v95 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_name(v11, v96, v97, v98);
              v99 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v103 = objc_msgSend_UTF8String(v99, v100, v101, v102);
              *(_DWORD *)buf = 136316162;
              v134 = v103;
              v135 = 1024;
              v136 = v12;
              v137 = 1024;
              *(_DWORD *)v138 = v16;
              *(_WORD *)&v138[4] = 2080;
              *(_QWORD *)&v138[6] = a2;
              v139 = 1024;
              v140 = a1;
              _os_log_impl(&dword_19B949000, v95, OS_LOG_TYPE_DEFAULT, "skip if:[%s:%d] with delegate-if-idx:%d, default-if:[%s:%d].", buf, 0x28u);

            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_name(v11, v6, v7, *(double *)&v9);
                v104 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v118 = a2;
                v119 = a1;
                v116 = v12;
                v117 = v16;
                v114 = objc_msgSend_UTF8String(v104, v105, v106, v107);
                _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip if:[%s:%d] with delegate-if-idx:%d, default-if:[%s:%d]."));

                if (_IDSShouldLog())
                {
                  objc_msgSend_name(v11, v6, v7, *(double *)&v9, v114, v12, v16, a2, a1);
                  v108 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  v118 = a2;
                  v119 = a1;
                  v116 = v12;
                  v117 = v16;
                  v114 = objc_msgSend_UTF8String(v108, v109, v110, v111);
                  _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip if:[%s:%d] with delegate-if-idx:%d, default-if:[%s:%d]."));

                }
              }
            }
            continue;
          }
        }
        if (v8)
          CFArrayAppendValue(v8, v11);
        goto LABEL_62;
      }
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v62 = obj;
      v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v63, (uint64_t)&v124, v64, v132, 16);
      if (v67)
      {
        v69 = *(_QWORD *)v125;
LABEL_41:
        v70 = 0;
        while (1)
        {
          if (*(_QWORD *)v125 != v69)
            objc_enumerationMutation(v62);
          if ((a1 & 0x80000000) == 0)
          {
            v71 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * v70);
            if (objc_msgSend_index(v71, v65, v66, v68) == (_DWORD)a1
              && objc_msgSend_delegatedIndex(v71, v65, v66, v68) == (_DWORD)v12)
            {
              break;
            }
          }
          if (v67 == ++v70)
          {
            v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v65, (uint64_t)&v124, v68, v132, 16);
            if (v67)
              goto LABEL_41;
            goto LABEL_49;
          }
        }
        OSLogHandleForTransportCategory();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v11, v73, v74, v75);
          v76 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v80 = objc_msgSend_UTF8String(v76, v77, v78, v79);
          *(_DWORD *)buf = 136315906;
          v134 = v80;
          v135 = 1024;
          v136 = v12;
          v137 = 2080;
          *(_QWORD *)v138 = a2;
          *(_WORD *)&v138[8] = 1024;
          *(_DWORD *)&v138[10] = a1;
          _os_log_impl(&dword_19B949000, v72, OS_LOG_TYPE_DEFAULT, "skip if:[%s:%d], default-if:[%s:%d].", buf, 0x22u);

        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v11, v81, v82, v83);
            v84 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v117 = a2;
            v118 = a1;
            v114 = objc_msgSend_UTF8String(v84, v85, v86, v87);
            v116 = v12;
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip if:[%s:%d], default-if:[%s:%d]."));

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v11, v88, v89, v90, v114, v12, a2, a1);
              v91 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v117 = a2;
              v118 = a1;
              v114 = objc_msgSend_UTF8String(v91, v92, v93, v94);
              v116 = v12;
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip if:[%s:%d], default-if:[%s:%d]."));

            }
          }
        }

        if (v8)
        {
          if (!v11)
            continue;
        }
        else
        {
          v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (!v11)
            continue;
        }
        if (v8)
          CFArrayAppendValue(v8, v11);
      }
      else
      {
LABEL_49:

      }
    }
    v123 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v128, *(double *)&v9, v141, 16);
  }
  while (v123);
LABEL_75:

  OSLogHandleForTransportCategory();
  v112 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v134 = (uint64_t)v8;
    _os_log_impl(&dword_19B949000, v112, OS_LOG_TYPE_DEFAULT, "excluded interfaces:%@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("excluded interfaces:%@."));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("excluded interfaces:%@."));
    }
  }

  return v8;
}

id GLUtilSelectInterface(uint64_t a1, int a2, void *a3, void *a4, void *a5, int a6, uint64_t a7, int a8)
{
  int HasRelayCandidatePairConnected;
  double v14;
  int v15;
  int v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  __CFString *v21;
  const char *v22;
  double v23;
  NSObject *v24;
  const char *v25;
  double v26;
  void *v27;
  const char *v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  double v33;
  char v34;
  NSObject *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  __CFString *v41;
  __CFString *v42;
  __CFString *v43;
  __CFString *v44;
  __CFString *v45;
  const __CFString *v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  double v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  int isCellular;
  const char *v59;
  uint64_t v60;
  double v61;
  int v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  int v71;
  int v72;
  char v73;
  id v74;
  id v75;
  NSObject *v76;
  const char *v78;
  uint64_t v79;
  double v80;
  __CFString *v81;
  const char *v82;
  uint64_t v83;
  double v84;
  const char *v85;
  uint64_t v86;
  double v87;
  NSObject *v88;
  const char *v90;
  uint64_t v91;
  double v92;
  __CFString *v93;
  const char *v94;
  uint64_t v95;
  double v96;
  const char *v97;
  uint64_t v98;
  double v99;
  id v100;
  NSObject *v101;
  const char *v103;
  uint64_t v104;
  double v105;
  __CFString *v106;
  const char *v107;
  uint64_t v108;
  double v109;
  const char *v110;
  uint64_t v111;
  double v112;
  NSObject *v113;
  const char *v115;
  uint64_t v116;
  double v117;
  __CFString *v118;
  const char *v119;
  uint64_t v120;
  double v121;
  const char *v122;
  uint64_t v123;
  double v124;
  id v125;
  __CFString *v127;
  uint64_t v128;
  __CFString *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  __CFString *v134;
  __CFString *v135;
  __CFString *v136;
  _QWORD *v137;
  uint64_t v138;
  __CFString *v139;
  _QWORD *v140;
  uint64_t v141;
  int v142;
  id v143;
  id v144;
  void *v145;
  int v146;
  void *v147;
  int v148;
  id v149;
  __CFString *obj;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  char v156;
  unsigned int v157;
  unsigned int v158;
  uint8_t v159[128];
  uint8_t buf[4];
  const __CFString *v161;
  __int16 v162;
  const __CFString *v163;
  __int16 v164;
  const __CFString *v165;
  __int16 v166;
  const __CFString *v167;
  __int16 v168;
  const __CFString *v169;
  __int16 v170;
  _QWORD *v171;
  __int16 v172;
  unsigned int v173;
  __int16 v174;
  const __CFString *v175;
  __int16 v176;
  _QWORD *v177;
  __int16 v178;
  unsigned int v179;
  _QWORD v180[2];
  _QWORD v181[5];

  v181[2] = *MEMORY[0x1E0C80C00];
  v149 = a3;
  v143 = a4;
  v144 = a5;
  HasRelayCandidatePairConnected = GLUtilHasRelayCandidatePairConnected(v144, v143);
  v15 = HasRelayCandidatePairConnected;
  v157 = -1;
  v158 = -1;
  if ((unint64_t)(a1 - 3) < 2)
    v16 = HasRelayCandidatePairConnected;
  else
    v16 = 0;
  v146 = v16;
  v156 = 0;
  v181[0] = 0;
  v181[1] = 0;
  v180[0] = 0;
  v180[1] = 0;
  if ((GLUtilGetDefaultInterface(&v158, (char *)v181, &v156, v14) & 1) != 0)
  {
    v148 = (v15 | a2) ^ 1;
  }
  else
  {
    OSLogHandleForTransportCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "failed to get default interface, use non-default interface.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("failed to get default interface, use non-default interface."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("failed to get default interface, use non-default interface."));
      }
    }
    v148 = 0;
  }
  GLUtilGetExcludedInterfaceAddressList(v158, (uint64_t)v181, v149);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (__CFString *)objc_msgSend_mutableCopy(v149, v18, v19, v20);
  objc_msgSend_removeObjectsInArray_(v21, v22, (uint64_t)v145, v23);
  OSLogHandleForTransportCategory();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v161 = v21;
    _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "remaining interfaces:%@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v127 = v21;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("remaining interfaces:%@."));
      if (_IDSShouldLog())
      {
        v127 = v21;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("remaining interfaces:%@."));
      }
    }
  }
  objc_msgSend_sharedInstanceForBagType_(IDSServerBag, v25, 0, v26, v127);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v27, v28, (uint64_t)CFSTR("reduce-cellular-usage"), v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_BOOLValue(v30, v31, v32, v33);

  GLUtilGetFirstUnusedInterface(v144, v143, v21, &v157, (char *)v180, v34);
  v142 = a2 & ~v15;
  OSLogHandleForTransportCategory();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v36 = CFSTR("NO");
    if (v15)
      v37 = CFSTR("YES");
    else
      v37 = CFSTR("NO");
    if (v146)
      v38 = CFSTR("YES");
    else
      v38 = CFSTR("NO");
    if (v142)
      v39 = CFSTR("YES");
    else
      v39 = CFSTR("NO");
    v161 = (const __CFString *)(&_IDSStunTransportStrings)[a1];
    if (v148)
      v40 = CFSTR("YES");
    else
      v40 = CFSTR("NO");
    *(_DWORD *)buf = 136317442;
    v162 = 2112;
    if (v156)
      v36 = CFSTR("YES");
    v163 = v37;
    v164 = 2112;
    v165 = v38;
    v166 = 2112;
    v167 = v39;
    v168 = 2112;
    v169 = v40;
    v170 = 2080;
    v171 = v181;
    v172 = 1024;
    v173 = v158;
    v174 = 2112;
    v175 = v36;
    v176 = 2080;
    v177 = v180;
    v178 = 1024;
    v179 = v157;
    _os_log_impl(&dword_19B949000, v35, OS_LOG_TYPE_DEFAULT, "interface preference for %s: (connected:%@, non-cell:%@, cell:%@, use-default:%@, default-if:[%s:%d, Cell:%@], first-unused-if:[%s:%d]).", buf, 0x5Eu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v41 = v15 ? CFSTR("YES") : CFSTR("NO");
    v42 = v146 ? CFSTR("YES") : CFSTR("NO");
    v43 = v142 ? CFSTR("YES") : CFSTR("NO");
    v44 = v148 ? CFSTR("YES") : CFSTR("NO");
    v45 = v156 ? CFSTR("YES") : CFSTR("NO");
    v140 = v180;
    v141 = v157;
    v138 = v158;
    v139 = v45;
    v136 = v44;
    v137 = v181;
    v134 = v42;
    v135 = v43;
    v128 = (uint64_t)(&_IDSStunTransportStrings)[a1];
    v129 = v41;
    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("interface preference for %s: (connected:%@, non-cell:%@, cell:%@, use-default:%@, default-if:[%s:%d, Cell:%@], first-unused-if:[%s:%d])."));
    if (_IDSShouldLog())
    {
      if (v156)
        v46 = CFSTR("YES");
      else
        v46 = CFSTR("NO");
      v140 = v180;
      v141 = v157;
      v138 = v158;
      v139 = (__CFString *)v46;
      v136 = v44;
      v137 = v181;
      v134 = v42;
      v135 = v43;
      v128 = (uint64_t)(&_IDSStunTransportStrings)[a1];
      v129 = v41;
      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("interface preference for %s: (connected:%@, non-cell:%@, cell:%@, use-default:%@, default-if:[%s:%d, Cell:%@], first-unused-if:[%s:%d])."));
    }
  }
  v47 = IMGetDomainBoolForKey();
  OSLogHandleForTransportCategory();
  v48 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v161) = v47;
    _os_log_impl(&dword_19B949000, v48, OS_LOG_TYPE_DEFAULT, "forceToUseIPv6 = %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v128 = v47;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("forceToUseIPv6 = %d"));
      if (_IDSShouldLog())
      {
        v128 = v47;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("forceToUseIPv6 = %d"));
      }
    }
  }
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  obj = v21;
  v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v49, (uint64_t)&v152, v50, v159, 16);
  if (!v53)
  {
    v147 = 0;
    goto LABEL_133;
  }
  v147 = 0;
  v55 = *(_QWORD *)v153;
  while (2)
  {
    for (i = 0; i != v53; ++i)
    {
      if (*(_QWORD *)v153 != v55)
        objc_enumerationMutation(obj);
      v57 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * i);
      isCellular = objc_msgSend_isCellular(v57, v51, v52, v54, v128, v129, v134, v135, v136, v137, v138, v139, v140, v141);
      v62 = objc_msgSend_index(v57, v59, v60, v61);
      objc_msgSend_address(v57, v63, v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = objc_msgSend_sa(v66, v67, v68, v69);

      v71 = *(unsigned __int8 *)(v70 + 1);
      if ((v47 & 1) != 0)
      {
        if (v71 == 2)
          continue;
      }
      else if (v71 == 30 && (GLUtilHasV4AddressForInterface(v62, v149) & 1) != 0)
      {
        continue;
      }
      if (a8 == 1)
      {
        if (!isCellular)
          continue;
        v75 = v57;

        OSLogHandleForTransportCategory();
        v88 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v90, v91, v92);
          v93 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v161 = CFSTR("IDSGLInterfaceTypeMask_Cellular");
          v162 = 2112;
          v163 = v93;
          _os_log_impl(&dword_19B949000, v88, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@", buf, 0x16u);

        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v75, v94, v95, v96);
            v131 = (void *)objc_claimAutoreleasedReturnValue();
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@"));

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v75, v97, v98, v99, CFSTR("IDSGLInterfaceTypeMask_Cellular"), v131);
              v147 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@"));
              goto LABEL_119;
            }
          }
        }
LABEL_132:
        v147 = v75;
        goto LABEL_133;
      }
      if (a8 == 2)
      {
        if ((isCellular & 1) != 0)
          continue;
        v75 = v57;

        OSLogHandleForTransportCategory();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v78, v79, v80);
          v81 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v161 = CFSTR("IDSGLInterfaceTypeMask_NonCellular");
          v162 = 2112;
          v163 = v81;
          _os_log_impl(&dword_19B949000, v76, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@", buf, 0x16u);

        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v75, v82, v83, v84);
            v130 = (void *)objc_claimAutoreleasedReturnValue();
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@"));

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v75, v85, v86, v87, CFSTR("IDSGLInterfaceTypeMask_NonCellular"), v130);
              v147 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@"));
LABEL_119:

              v147 = v57;
              goto LABEL_133;
            }
          }
        }
        goto LABEL_132;
      }
      if (a6 == 1)
      {
        if (!isCellular)
          continue;
        v75 = v57;

        OSLogHandleForTransportCategory();
        v113 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v115, v116, v117);
          v118 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v161 = CFSTR("IDSGLInterfaceTypeMask_Cellular");
          v162 = 2112;
          v163 = v118;
          _os_log_impl(&dword_19B949000, v113, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@", buf, 0x16u);

        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v75, v119, v120, v121);
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@"));

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v75, v122, v123, v124, CFSTR("IDSGLInterfaceTypeMask_Cellular"), v133);
              v147 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@"));
              goto LABEL_119;
            }
          }
        }
        goto LABEL_132;
      }
      if (a6 == 2)
      {
        if ((isCellular & 1) != 0)
          continue;
        v75 = v57;

        OSLogHandleForTransportCategory();
        v101 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v103, v104, v105);
          v106 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v161 = CFSTR("IDSGLInterfaceTypeMask_NonCellular");
          v162 = 2112;
          v163 = v106;
          _os_log_impl(&dword_19B949000, v101, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@", buf, 0x16u);

        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v75, v107, v108, v109);
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@"));

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v75, v110, v111, v112, CFSTR("IDSGLInterfaceTypeMask_NonCellular"), v132);
              v147 = (void *)objc_claimAutoreleasedReturnValue();
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@"));
              goto LABEL_119;
            }
          }
        }
        goto LABEL_132;
      }
      v72 = v148;
      if ((v158 & 0x80000000) != 0)
        v72 = 0;
      if (v72 == 1 && v62 == v158)
      {
LABEL_118:
        v100 = v57;
        goto LABEL_119;
      }
      if (v146)
      {
        if ((isCellular & 1) == 0)
          goto LABEL_118;
      }
      else if (v142)
      {
        if (isCellular)
          goto LABEL_118;
      }
      else if (v157 == -1)
      {
        v74 = v57;

        v147 = v74;
      }
      else
      {
        if (v62 == v157)
          v73 = v148;
        else
          v73 = 1;
        if ((v73 & 1) == 0)
          goto LABEL_118;
      }
    }
    v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v152, v54, v159, 16);
    if (v53)
      continue;
    break;
  }
LABEL_133:

  v125 = v147;
  return v125;
}

void sub_19BAD03B4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19BAD0294);
  }
  _Unwind_Resume(a1);
}

const __CFString *GLUtilPreferredInterfaceToString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("IDSGLInterfaceTypeMask_Invalid");
  if (a1 == 1)
    v1 = CFSTR("IDSGLInterfaceTypeMask_Cellular");
  if (a1 == 2)
    return CFSTR("IDSGLInterfaceTypeMask_NonCellular");
  else
    return v1;
}

uint64_t GLUtilHasValidUInt16Attr(void *a1, uint64_t a2, _WORD *a3)
{
  const char *v6;
  double v7;
  uint64_t result;
  _BYTE v9[8];
  __int16 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  bzero(v9, 0x410uLL);
  result = objc_msgSend_getAttribute_attribute_(a1, v6, a2, v7, v9);
  if (a3)
  {
    if ((_DWORD)result)
      *a3 = v10;
  }
  return result;
}

uint64_t GLUtilHasValidUInt32Attr(void *a1, uint64_t a2, _DWORD *a3)
{
  const char *v6;
  double v7;
  uint64_t result;
  _BYTE v9[8];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  bzero(v9, 0x410uLL);
  result = objc_msgSend_getAttribute_attribute_(a1, v6, a2, v7, v9);
  if (a3)
  {
    if ((_DWORD)result)
      *a3 = v10;
  }
  return result;
}

double GLUtilHasValidUUIDAttr(void *a1, uint64_t a2, _OWORD *a3)
{
  const char *v6;
  double v7;
  double result;
  _BYTE v9[12];
  double v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  bzero(v9, 0x410uLL);
  if (objc_msgSend_getAttribute_attribute_(a1, v6, a2, v7, v9))
  {
    result = v10[0];
    *a3 = *(_OWORD *)v10;
  }
  return result;
}

uint64_t GLUtilHasValidBinaryDataAttr(void *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  const char *v8;
  double v9;
  unsigned int Attribute_attribute;
  int v11;
  uint64_t v12;
  _BYTE v14[8];
  int __n;
  _BYTE __n_4[1036];

  *(_QWORD *)&__n_4[1028] = *MEMORY[0x1E0C80C00];
  bzero(v14, 0x410uLL);
  Attribute_attribute = objc_msgSend_getAttribute_attribute_(a1, v8, a2, v9, v14);
  v11 = __n;
  if (__n < 1025)
    v12 = Attribute_attribute;
  else
    v12 = 0;
  if ((_DWORD)v12 == 1)
  {
    memcpy(a3, __n_4, __n);
    *a4 = v11;
  }
  return v12;
}

__CFString *GLUtilLinkTypeMaskToString(char a1)
{
  if ((a1 - 1) > 7u)
    return 0;
  else
    return off_1E3C221F8[(char)(a1 - 1)];
}

id GLUtilInterfaceTypeListToString(char a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v6 = v2;
  if ((a1 & 2) != 0)
    objc_msgSend_appendString_(v2, v3, (uint64_t)CFSTR("[W"), v5);
  if ((a1 & 1) != 0)
  {
    if (objc_msgSend_length(v6, v3, v4, v5))
      objc_msgSend_appendString_(v6, v7, (uint64_t)CFSTR(", C"), v8);
    else
      objc_msgSend_appendString_(v6, v7, (uint64_t)CFSTR("[C"), v8);
  }
  if (objc_msgSend_length(v6, v3, v4, v5))
    objc_msgSend_appendString_(v6, v9, (uint64_t)CFSTR("]"), v10);
  else
    objc_msgSend_appendString_(v6, v9, (uint64_t)CFSTR("[]"), v10);
  return v6;
}

id GLUtilLinkTypeListToString(char a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  const char *v9;
  double v10;
  const char *v12;
  double v13;
  const char *v14;
  double v15;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v6 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend_appendString_(v2, v3, (uint64_t)CFSTR("[W-W"), v5);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
LABEL_17:
      if (objc_msgSend_length(v6, v3, v4, v5))
        objc_msgSend_appendString_(v6, v14, (uint64_t)CFSTR(", C-W"), v15);
      else
        objc_msgSend_appendString_(v6, v14, (uint64_t)CFSTR("[C-W"), v15);
      if ((a1 & 8) != 0)
        goto LABEL_5;
      goto LABEL_8;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (objc_msgSend_length(v6, v3, v4, v5))
    objc_msgSend_appendString_(v6, v12, (uint64_t)CFSTR(", W-C"), v13);
  else
    objc_msgSend_appendString_(v6, v12, (uint64_t)CFSTR("[W-C"), v13);
  if ((a1 & 4) != 0)
    goto LABEL_17;
LABEL_4:
  if ((a1 & 8) != 0)
  {
LABEL_5:
    if (objc_msgSend_length(v6, v3, v4, v5))
      objc_msgSend_appendString_(v6, v7, (uint64_t)CFSTR(", C-C"), v8);
    else
      objc_msgSend_appendString_(v6, v7, (uint64_t)CFSTR("[C-C"), v8);
  }
LABEL_8:
  if (objc_msgSend_length(v6, v3, v4, v5))
    objc_msgSend_appendString_(v6, v9, (uint64_t)CFSTR("]"), v10);
  else
    objc_msgSend_appendString_(v6, v9, (uint64_t)CFSTR("[]"), v10);
  return v6;
}

uint64_t GLUtilNewQRLinkType(int a1, int a2, int a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v7 = a4;
  if (!a2)
    goto LABEL_36;
  if (!a3)
  {
    if (a2 != 3)
      goto LABEL_36;
    v8 = 0;
    switch(a1)
    {
      case 1:
        goto LABEL_32;
      case 2:
        goto LABEL_26;
      case 4:
        v8 = !GLUtilRelayLinkHasReachedMaxRetryLimit(1, v7);
        break;
      case 8:
        goto LABEL_19;
      default:
        goto LABEL_37;
    }
    goto LABEL_37;
  }
  if ((a1 & 1) != 0)
  {
    if ((a1 & 8) == 0)
    {
      if ((a2 & 1) == 0)
      {
        v8 = 0;
        if ((a1 & 2) != 0 || (a3 & 1) == 0)
          goto LABEL_37;
LABEL_19:
        LODWORD(v8) = 2;
        v9 = 2;
LABEL_33:
        if (GLUtilRelayLinkHasReachedMaxRetryLimit(v9, v7))
          v8 = 0;
        else
          v8 = v8;
        goto LABEL_37;
      }
      if ((a3 & 1) == 0)
        goto LABEL_31;
      v8 = 8;
      if (!GLUtilRelayLinkHasReachedMaxRetryLimit(8, v7))
        goto LABEL_37;
    }
    if ((a1 & 2) == 0)
    {
      v8 = 2;
      if (!GLUtilRelayLinkHasReachedMaxRetryLimit(2, v7))
        goto LABEL_37;
    }
LABEL_31:
    if ((a1 & 4) != 0)
      goto LABEL_36;
LABEL_32:
    LODWORD(v8) = 4;
    v9 = 4;
    goto LABEL_33;
  }
  if ((a2 & 2) == 0)
  {
    if ((a2 & 1) != 0)
    {
      if ((a3 & 2) != 0 && (a1 & 4) == 0)
      {
        v8 = 4;
        if (!GLUtilRelayLinkHasReachedMaxRetryLimit(4, v7))
          goto LABEL_37;
      }
      v8 = 0;
      if ((a1 & 8) != 0 || (a3 & 1) == 0)
        goto LABEL_37;
      goto LABEL_26;
    }
LABEL_36:
    v8 = 0;
    goto LABEL_37;
  }
  if ((a3 & 2) == 0)
  {
    if ((a1 & 2) == 0)
    {
      if ((a3 & 1) == 0)
        goto LABEL_36;
      v8 = 2;
      if (!GLUtilRelayLinkHasReachedMaxRetryLimit(2, v7))
        goto LABEL_37;
    }
    v8 = 0;
    if ((a1 & 8) != 0 || (a2 & 1) == 0)
      goto LABEL_37;
LABEL_26:
    LODWORD(v8) = 8;
    v9 = 8;
    goto LABEL_33;
  }
  v8 = 1;
  if (GLUtilRelayLinkHasReachedMaxRetryLimit(1, v7))
  {
    v11 = a3 & 1;
    if ((a1 & 8) != 0 || (v11 & a2) == 0 || (v8 = 8, GLUtilRelayLinkHasReachedMaxRetryLimit(8, v7)))
    {
      if ((a1 & 2) != 0 || !v11 || (v8 = 2, GLUtilRelayLinkHasReachedMaxRetryLimit(2, v7)))
      {
        v8 = 0;
        if ((a1 & 4) == 0 && (a2 & 1) != 0)
          goto LABEL_32;
      }
    }
  }
LABEL_37:

  return v8;
}

BOOL GLUtilRelayLinkHasReachedMaxRetryLimit(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  double v5;
  void *v6;
  const char *v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  int v13;
  NSObject *v14;
  __CFString *v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  __CFString *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v4, a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v3, v7, (uint64_t)v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_intValue(v9, v10, v11, v12);

  if (v13 >= 8)
  {
    OSLogHandleForTransportCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if ((a1 - 1) > 7u)
        v15 = 0;
      else
        v15 = off_1E3C221F8[(char)(a1 - 1)];
      *(_DWORD *)buf = 136315650;
      v18 = "GLUtilRelayLinkHasReachedMaxRetryLimit";
      v19 = 2112;
      v20 = v15;
      v21 = 1024;
      v22 = v13;
      _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "%s: retry count for linkType: %@ has exceeded, with %d retries!", buf, 0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s: retry count for linkType: %@ has exceeded, with %d retries!"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s: retry count for linkType: %@ has exceeded, with %d retries!"));
      }
    }
  }

  return v13 > 7;
}

uint64_t GLUtilLinkTypeMaskForCandidatePair(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  int isCellularStunCandidate;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  int v20;
  unsigned int v21;

  v1 = a1;
  objc_msgSend_local(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v5, v6, v7, v8);

  objc_msgSend_remote(v1, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = objc_msgSend_isCellularStunCandidate(v13, v14, v15, v16);
  v18 = v17 ^ 1;
  if (((isCellularStunCandidate ^ 1) & 1) == 0 && !v18)
    return 8;
  v20 = isCellularStunCandidate | v18;
  if (isCellularStunCandidate ^ 1 | v17)
    v21 = 1;
  else
    v21 = 4;
  if (v20 == 1)
    return v21;
  else
    return 2;
}

void GLUtilReportAWDStunMessageEvent(void *a1, uint64_t a2, void *a3, float a4)
{
  const char *v7;
  uint64_t v8;
  double v9;
  unsigned __int16 v10;
  id v11;

  v11 = a3;
  v10 = objc_msgSend_type(a1, v7, v8, v9);
  GLUtilReportAWDStunMessageEventWithType(v10, a2, v11, a4);

}

void GLUtilReportAWDStunMessageEventWithType(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  double v9;
  int isSharedQRSession;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  const char *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  const char *v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  const char *v41;
  double v42;
  const char *v43;
  void *v44;
  double v45;
  uint64_t v46;
  void *v47;
  _BOOL4 v48;
  void *v49;
  uint64_t v50;
  const char *v51;
  double v52;
  void *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  uint64_t isInitiator;
  const char *v59;
  double v60;
  void *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  const char *v67;
  double v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  double v72;
  void *v73;
  const char *v74;
  double v75;
  const char *v76;
  uint64_t v77;
  double v78;
  void *v79;
  const char *v80;
  double v81;
  const char *v82;
  uint64_t v83;
  double v84;
  const char *v85;
  double v86;
  const char *v87;
  uint64_t v88;
  double v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  const char *v95;
  double v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  double v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  const char *v106;
  double v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  double v111;
  void *v112;
  void *v113;
  uint64_t v114;
  const char *v115;
  double v116;
  void *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  const char *v123;
  double v124;
  void *v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  const char *v131;
  double v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  double v136;
  void *v137;
  const char *v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  IDSQuickRelayMetric *v144;
  void *isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v153;
  uint64_t v154;
  void *v155;
  unsigned int v156;
  uint8_t buf[4];
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  isSharedQRSession = objc_msgSend_isSharedQRSession(v6, v7, v8, v9);
  v154 = sub_19BAD142C(a1, isSharedQRSession);
  if ((_DWORD)v154)
  {
    objc_msgSend_local(v6, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v156 = objc_msgSend_radioAccessTechnology(v14, v15, v16, v17);

    OSLogHandleForTransportCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v158 = a1;
      v159 = 1024;
      v160 = v154;
      v161 = 1024;
      v162 = a2;
      _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "report AWD stun message event (messageType:%04x, eventSubType:%u, resultCode:%d).", buf, 0x14u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v141 = v154;
        v142 = a2;
        v140 = a1;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report AWD stun message event (messageType:%04x, eventSubType:%u, resultCode:%d)."));
        if (_IDSShouldLog())
        {
          v142 = a2;
          v140 = a1;
          v141 = v154;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report AWD stun message event (messageType:%04x, eventSubType:%u, resultCode:%d)."));
        }
      }
    }
    v144 = [IDSQuickRelayMetric alloc];
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, v154, v20);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    if (a4 <= 0.0)
    {
      v143 = 0;
    }
    else
    {
      *(float *)&v23 = a4;
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v21, v22, v23);
      v143 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v21, a2, v23, v140, v141, v142);
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1E0CB37E8];
    v29 = objc_msgSend_relayProviderType(v6, v26, v27, v28);
    objc_msgSend_numberWithInteger_(v25, v30, v29, v31);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_local(v6, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend_transport(v36, v37, v38, v39);
    objc_msgSend_numberWithInteger_(v32, v41, v40, v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v156;
    if (v156 > 0xA)
    {
      v47 = 0;
    }
    else
    {
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, v156, v45);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = v156;
    }
    v48 = v46 < 0xB;
    v49 = (void *)MEMORY[0x1E0CB37E8];
    v50 = objc_msgSend_enableSKE(v6, v43, v46, v45);
    objc_msgSend_numberWithBool_(v49, v51, v50, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = (void *)MEMORY[0x1E0CB37E8];
    isInitiator = objc_msgSend_isInitiator(v6, v55, v56, v57);
    objc_msgSend_numberWithBool_(v54, v59, isInitiator, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = (void *)MEMORY[0x1E0CB37E8];
    v66 = objc_msgSend_protocolVersion(v6, v63, v64, v65);
    objc_msgSend_numberWithUnsignedChar_(v62, v67, v66, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appName(v6, v70, v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount = (void *)objc_msgSend_initWithType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v144, v74, (uint64_t)&unk_1E3C86BE0, v75, v150, v143, v148, v146, v44, v47, v53, v61, v69, 0, v73, 0, 0);

    if (v48)
    if (a4 > 0.0)

    objc_msgSend_defaultLogger(IDSCoreAnalyticsLogger, v76, v77, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logMetric_(v79, v80, (uint64_t)isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount, v81);

    objc_msgSend_sharedInstance(IDSAWDLogging, v82, v83, v84);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v85, v154, v86);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    if (a4 <= 0.0)
    {
      v147 = 0;
    }
    else
    {
      *(float *)&v89 = a4;
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v87, v88, v89);
      v147 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v87, a2, v89);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = (void *)MEMORY[0x1E0CB37E8];
    v94 = objc_msgSend_relayProviderType(v6, v91, v92, v93);
    objc_msgSend_numberWithInteger_(v90, v95, v94, v96);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_local(v6, v98, v99, v100);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = objc_msgSend_transport(v101, v102, v103, v104);
    objc_msgSend_numberWithInteger_(v97, v106, v105, v107);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    if (v156 >= 0xB)
    {
      v112 = 0;
    }
    else
    {
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v108, v156, v111);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v113 = (void *)MEMORY[0x1E0CB37E8];
    v114 = objc_msgSend_enableSKE(v6, v108, v109, v111);
    objc_msgSend_numberWithBool_(v113, v115, v114, v116);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = (void *)MEMORY[0x1E0CB37E8];
    v122 = objc_msgSend_isInitiator(v6, v119, v120, v121);
    objc_msgSend_numberWithBool_(v118, v123, v122, v124);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    v126 = (void *)MEMORY[0x1E0CB37E8];
    v130 = objc_msgSend_protocolVersion(v6, v127, v128, v129);
    objc_msgSend_numberWithUnsignedChar_(v126, v131, v130, v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appName(v6, v134, v135, v136);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_IDSQuickRelayEventType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v151, v138, (uint64_t)&unk_1E3C86BE0, v139, v155, v147, v153, v149, v110, v112, v117, v125, v133, 0, v137, 0, 0);

    if (v156 < 0xB)
    if (a4 > 0.0)

  }
  else
  {
    OSLogHandleForTransportCategory();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v158 = a1;
      _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "receive unknown stun message type (%04x) for AWD, ignore", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive unknown stun message type (%04x) for AWD, ignore"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive unknown stun message type (%04x) for AWD, ignore"));
      }
    }
  }

}

uint64_t sub_19BAD142C(uint64_t a1, int a2)
{
  uint64_t result;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  result = 0;
  switch(a1)
  {
    case 4064:
      v4 = a2 == 0;
      v5 = 202;
      v6 = 214;
      goto LABEL_29;
    case 4065:
      v4 = a2 == 0;
      v5 = 206;
      v6 = 219;
      goto LABEL_29;
    case 4066:
      v4 = a2 == 0;
      v5 = 209;
      goto LABEL_19;
    case 4067:
      return 227;
    case 4068:
      return 230;
    case 4069:
      return 234;
    case 4070:
    case 4073:
    case 4074:
    case 4075:
    case 4076:
    case 4077:
    case 4078:
    case 4079:
      return result;
    case 4071:
      return 247;
    case 4072:
      return 249;
    case 4080:
      v4 = a2 == 0;
      v5 = 203;
      v6 = 216;
      goto LABEL_29;
    case 4081:
      v4 = a2 == 0;
      v5 = 207;
      v6 = 220;
      goto LABEL_29;
    case 4082:
      v4 = a2 == 0;
      v5 = 210;
LABEL_19:
      v6 = 222;
LABEL_29:
      if (v4)
        result = v5;
      else
        result = v6;
      break;
    case 4083:
      result = 228;
      break;
    case 4084:
LABEL_5:
      result = 231;
      break;
    default:
      switch(a1)
      {
        case 3808:
          v4 = a2 == 0;
          v5 = 201;
          v6 = 213;
          goto LABEL_29;
        case 3809:
          v4 = a2 == 0;
          v5 = 205;
          v6 = 218;
          goto LABEL_29;
        case 3810:
          v4 = a2 == 0;
          v5 = 208;
          v6 = 221;
          goto LABEL_29;
        case 3811:
          result = 226;
          break;
        case 3812:
          result = 229;
          break;
        case 3813:
          result = 233;
          break;
        case 3814:
        case 3817:
        case 3818:
        case 3819:
        case 3820:
        case 3821:
        case 3822:
        case 3823:
        case 3824:
        case 3826:
        case 3827:
          return result;
        case 3815:
          result = 246;
          break;
        case 3816:
          result = 248;
          break;
        case 3825:
          v4 = a2 == 0;
          v5 = 204;
          v6 = 217;
          goto LABEL_29;
        case 3828:
          goto LABEL_5;
        case 3829:
          result = 236;
          break;
        default:
          if (a1 == 2321)
            result = 704;
          else
            result = 0;
          break;
      }
      break;
  }
  return result;
}

void GLUtilReportAWDActiveLinkRTT(void *a1, unsigned int a2, unsigned int a3, float a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  double v28;
  void *v29;
  const char *v30;
  double v31;
  const char *v32;
  void *v33;
  double v34;
  unsigned int v35;
  void *v36;
  _BOOL4 v37;
  void *v38;
  const char *v39;
  double v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  const char *v47;
  double v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  const char *v54;
  double v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  const char *v60;
  double v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  double v68;
  void *v69;
  uint64_t v70;
  const char *v71;
  double v72;
  void *v73;
  const char *v74;
  double v75;
  const char *v76;
  void *v77;
  double v78;
  void *v79;
  void *v80;
  const char *v81;
  double v82;
  void *v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  const char *v89;
  double v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  double v94;
  void *v95;
  const char *v96;
  double v97;
  uint64_t v98;
  char *v99;
  const char *v100;
  void *v101;
  void *v102;
  IDSQuickRelayMetric *v103;
  void *isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount;
  uint64_t v107;
  unsigned int v108;
  uint8_t buf[4];
  int v110;
  __int16 v111;
  char *v112;
  __int16 v113;
  const char *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  objc_msgSend_local(v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v108 = objc_msgSend_radioAccessTechnology(v9, v10, v11, v12);

  objc_msgSend_local(v5, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v107 = objc_msgSend_transport(v16, v17, v18, v19);

  OSLogHandleForTransportCategory();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = (&_IDSStunTransportStrings)[v107];
    *(_DWORD *)buf = 67109634;
    v110 = (int)a4;
    v111 = 2080;
    v112 = v21;
    v113 = 2080;
    v114 = IDSRadioAccessTechnologyToString(v108);
    _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "report AWD active link rtt: %d ms for %s on RAT [%s].", buf, 0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v99 = (&_IDSStunTransportStrings)[v107];
      v100 = IDSRadioAccessTechnologyToString(v108);
      v98 = (int)a4;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report AWD active link rtt: %d ms for %s on RAT [%s]."));
      if (_IDSShouldLog())
      {
        v99 = (&_IDSStunTransportStrings)[v107];
        v100 = IDSRadioAccessTechnologyToString(v108);
        v98 = (int)a4;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report AWD active link rtt: %d ms for %s on RAT [%s]."));
      }
    }
  }
  v103 = [IDSQuickRelayMetric alloc];
  if (a4 <= 0.0)
  {
    v101 = 0;
  }
  else
  {
    *(float *)&v24 = a4;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v22, v23, v24);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v25 = (void *)MEMORY[0x1E0CB37E8];
  v26 = objc_msgSend_relayProviderType(v5, v22, v23, v24, v98, v99, v100);
  objc_msgSend_numberWithInteger_(v25, v27, v26, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v30, v107, v31);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v108;
  if (v108 > 0xA)
  {
    v36 = 0;
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v32, v108, v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v108;
  }
  v37 = v35 < 0xB;
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v32, a2, v34);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v39, a3, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = (void *)MEMORY[0x1E0CB37E8];
  v46 = objc_msgSend_protocolVersion(v5, v43, v44, v45);
  objc_msgSend_numberWithUnsignedChar_(v42, v47, v46, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appName(v5, v50, v51, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount = (void *)objc_msgSend_initWithType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v103, v54, (uint64_t)&unk_1E3C86BE0, v55, &unk_1E3C86BF8, v101, 0, v29, v33, v36, v38, v41, v49, 0, v53, 0, 0);

  if (v37)
  if (a4 > 0.0)

  objc_msgSend_defaultLogger(IDSCoreAnalyticsLogger, v56, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_logMetric_(v59, v60, (uint64_t)isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount, v61);

  objc_msgSend_sharedInstance(IDSAWDLogging, v62, v63, v64);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  if (a4 <= 0.0)
  {
    v102 = 0;
  }
  else
  {
    *(float *)&v68 = a4;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v65, v66, v68);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v69 = (void *)MEMORY[0x1E0CB37E8];
  v70 = objc_msgSend_relayProviderType(v5, v65, v66, v68);
  objc_msgSend_numberWithInteger_(v69, v71, v70, v72);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v74, v107, v75);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  if (v108 >= 0xB)
  {
    v79 = 0;
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v76, v108, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v76, a2, v78);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v81, a3, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = (void *)MEMORY[0x1E0CB37E8];
  v88 = objc_msgSend_protocolVersion(v5, v85, v86, v87);
  objc_msgSend_numberWithUnsignedChar_(v84, v89, v88, v90);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appName(v5, v92, v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_IDSQuickRelayEventType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v67, v96, (uint64_t)&unk_1E3C86BE0, v97, &unk_1E3C86BF8, v102, 0, v73, v77, v79, v80, v83, v91, 0, v95, 0, 0);

  if (v108 < 0xB)
  if (a4 > 0.0)

}

void GLUtilReportAWDClientTimerEvent(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, float a6)
{
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  const char *v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  const char *v25;
  double v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  const char *v37;
  double v38;
  const char *v39;
  void *v40;
  double v41;
  unsigned int v42;
  void *v43;
  _BOOL4 v44;
  void *v45;
  const char *v46;
  double v47;
  void *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  const char *v54;
  double v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  double v62;
  const char *v63;
  uint64_t v64;
  double v65;
  void *v66;
  const char *v67;
  double v68;
  const char *v69;
  uint64_t v70;
  double v71;
  const char *v72;
  double v73;
  const char *v74;
  uint64_t v75;
  double v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  const char *v82;
  double v83;
  void *v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  double v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  const char *v94;
  double v95;
  const char *v96;
  void *v97;
  double v98;
  void *v99;
  void *v100;
  const char *v101;
  double v102;
  void *v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  const char *v109;
  double v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  double v114;
  void *v115;
  const char *v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  IDSQuickRelayMetric *v122;
  void *isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v131;
  void *v133;
  unsigned int v134;
  id v135;
  uint8_t buf[4];
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v135 = a3;
  objc_msgSend_local(v135, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v134 = objc_msgSend_radioAccessTechnology(v10, v11, v12, v13);

  OSLogHandleForTransportCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v137 = a1;
    v138 = 1024;
    v139 = (int)a6;
    v140 = 1024;
    v141 = a2;
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, "report AWD client timer event (eventSubType: %u, duration: %d ms, resultCode: %d).", buf, 0x14u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v119 = (int)a6;
      v120 = a2;
      v118 = a1;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("report AWD client timer event (eventSubType: %u, duration: %d ms, resultCode: %d)."));
      if (_IDSShouldLog())
      {
        v119 = (int)a6;
        v120 = a2;
        v118 = a1;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("report AWD client timer event (eventSubType: %u, duration: %d ms, resultCode: %d)."));
      }
    }
  }
  v122 = [IDSQuickRelayMetric alloc];
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v15, a1, v16);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  if (a6 <= 0.0)
  {
    v121 = 0;
  }
  else
  {
    *(float *)&v19 = a6;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v17, v18, v19);
    v121 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, a2, v19, v118, v119, v120);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)MEMORY[0x1E0CB37E8];
  v24 = objc_msgSend_relayProviderType(v135, v21, v22, v23);
  objc_msgSend_numberWithInteger_(v20, v25, v24, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v135, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend_transport(v32, v33, v34, v35);
  objc_msgSend_numberWithInteger_(v28, v37, v36, v38);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v134;
  if (v134 > 0xA)
  {
    v43 = 0;
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v39, v134, v41);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v134;
  }
  v44 = v42 < 0xB;
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v39, a4, v41);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v46, a5, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = (void *)MEMORY[0x1E0CB37E8];
  v53 = objc_msgSend_protocolVersion(v135, v50, v51, v52);
  objc_msgSend_numberWithUnsignedChar_(v49, v54, v53, v55);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appName(v135, v57, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount = (void *)objc_msgSend_initWithType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v122, v61, (uint64_t)&unk_1E3C86C10, v62, v128, v121, v126, v27, v40, v43, v45, v48, v56, 0, v60, 0, 0);

  if (v44)
  if (a6 > 0.0)

  objc_msgSend_defaultLogger(IDSCoreAnalyticsLogger, v63, v64, v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_logMetric_(v66, v67, (uint64_t)isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount, v68);

  objc_msgSend_sharedInstance(IDSAWDLogging, v69, v70, v71);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v72, a1, v73);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  if (a6 <= 0.0)
  {
    v127 = 0;
  }
  else
  {
    *(float *)&v76 = a6;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v74, v75, v76);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v74, a2, v76);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = (void *)MEMORY[0x1E0CB37E8];
  v81 = objc_msgSend_relayProviderType(v135, v78, v79, v80);
  objc_msgSend_numberWithInteger_(v77, v82, v81, v83);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v135, v86, v87, v88);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = objc_msgSend_transport(v89, v90, v91, v92);
  objc_msgSend_numberWithInteger_(v85, v94, v93, v95);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  if (v134 >= 0xB)
  {
    v99 = 0;
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v96, v134, v98);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v96, a4, v98);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v101, a5, v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v104 = (void *)MEMORY[0x1E0CB37E8];
  v108 = objc_msgSend_protocolVersion(v135, v105, v106, v107);
  objc_msgSend_numberWithUnsignedChar_(v104, v109, v108, v110);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appName(v135, v112, v113, v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_IDSQuickRelayEventType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v129, v116, (uint64_t)&unk_1E3C86C10, v117, v133, v127, v131, v84, v97, v99, v100, v103, v111, 0, v115, 0, 0);

  if (v134 < 0xB)
  if (a6 > 0.0)

}

id GLUCreateQRStunMessageEvent(void *a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  double v13;
  unsigned __int16 v14;
  void *v15;

  v9 = a4;
  v10 = a3;
  v14 = objc_msgSend_type(a1, v11, v12, v13);
  GLUCreateQRStunMessageEventWithType(v14, a2, v10, v9, a5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id GLUCreateQRStunMessageEventWithType(unsigned int a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  double v13;
  int isSharedQRSession;
  unsigned int v15;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  char v26;
  const char *v27;
  double v28;
  NSObject *v29;
  uint8_t buf[4];
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  isSharedQRSession = objc_msgSend_isSharedQRSession(v9, v11, v12, v13);
  v15 = sub_19BAD142C(a1, isSharedQRSession);
  if ((a2 & 0xFFFFFFFE) == 0x22)
    v16 = 801;
  else
    v16 = v15;
  if ((_DWORD)v16)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    GLUCreateQRStunMessageEventWithEventSubType(v16, a2, v9, v10, a5);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend_mutableCopy(v18, v19, v20, v21);

    if (a1 == 4064)
      v26 = isSharedQRSession;
    else
      v26 = 1;
    if ((v26 & 1) == 0 && (objc_msgSend_pendingNoSessionStateAllocbind(v9, v23, v24, v25) & 1) == 0)
      objc_msgSend_setObject_forKeyedSubscript_(v22, v27, 0, v28, CFSTR("RINF"));
  }
  else
  {
    OSLogHandleForTransportCategory();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v32 = a1;
      _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "receive unknown stun message type (%04x) for QREvent, ignore", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("receive unknown stun message type (%04x) for QREvent, ignore"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("receive unknown stun message type (%04x) for QREvent, ignore"));
      }
    }
    v22 = 0;
  }

  return v22;
}

CFMutableDictionaryRef GLUCreateQRStunMessageEventWithEventSubType(uint64_t a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  CFMutableDictionaryRef Mutable;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  double v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  const char *v51;
  double v52;
  void *v53;
  const char *v54;
  double v55;
  const char *v56;
  double v57;
  void *v58;
  const char *v59;
  double v60;
  double v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  double v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  double v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  const char *v76;
  double v77;
  void *v78;
  const char *v79;
  double v80;
  const char *v81;
  double v82;
  void *v83;
  const char *v84;
  double v85;
  const char *v86;
  double v87;
  void *v88;
  const char *v89;
  double v90;
  const char *v91;
  double v92;
  void *v93;
  const char *v94;
  double v95;
  const char *v96;
  double v97;
  const char *v98;
  uint64_t v99;
  double v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  double v104;
  const char *v105;
  double v106;
  void *v108;
  uint8_t buf[4];
  void *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend_local(v9, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allocbindDataBlob(v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  OSLogHandleForTransportCategory();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v110 = v19;
    _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "GLUCreateQRStunMessageEvent: reportingDataBlob: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v108 = v19;
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUCreateQRStunMessageEvent: reportingDataBlob: %@"));
      if (_IDSShouldLog())
      {
        v108 = v19;
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUCreateQRStunMessageEvent: reportingDataBlob: %@"));
      }
    }
  }
  if (v10)
  {
    objc_msgSend_date(MEMORY[0x1E0C99D68], v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceDate_(v24, v25, (uint64_t)v10, v26);
    if ((a1 & 0xFFFFFFF7) == 0xD6)
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v27, v28, v29 * 1000.0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(Mutable, v31, (uint64_t)v30, v32, CFSTR("DELTAT"));

    }
  }
  objc_msgSend_local(v9, v21, v22, v23, v108);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend_radioAccessTechnology(v33, v34, v35, v36);

  objc_msgSend_remote(v9, v38, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend_radioAccessTechnology(v41, v42, v43, v44);

  v46 = (void *)MEMORY[0x1E0CB37E8];
  v50 = objc_msgSend_protocolVersion(v9, v47, v48, v49);
  objc_msgSend_numberWithUnsignedChar_(v46, v51, v50, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v54, (uint64_t)v53, v55, CFSTR("QVER"));

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v56, a1, v57);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v59, (uint64_t)v58, v60, CFSTR("TYPE"));

  *(float *)&v61 = a5;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v62, v63, v61);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v65, (uint64_t)v64, v66, CFSTR("DUR"));

  v67 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v9, v68, v69, v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend_transport(v71, v72, v73, v74);
  objc_msgSend_numberWithInteger_(v67, v76, v75, v77);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v79, (uint64_t)v78, v80, CFSTR("TRAN"));

  if (v37 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v81, 0, v82, CFSTR("LINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v81, v37, v82);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v84, (uint64_t)v83, v85, CFSTR("LINF"));

  }
  if (v45 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v86, 0, v87, CFSTR("RINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v86, v45, v87);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v89, (uint64_t)v88, v90, CFSTR("RINF"));

  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v91, a2, v92);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v94, (uint64_t)v93, v95, CFSTR("SCODE"));

  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v96, (uint64_t)v19, v97, CFSTR("QBLOB"));
  objc_msgSend_local(v9, v98, v99, v100);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(objc_msgSend_address(v101, v102, v103, v104) + 1) == 2)
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v105, (uint64_t)CFSTR("IPv4"), v106, CFSTR("LIPV"));
  else
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v105, (uint64_t)CFSTR("IPv6"), v106, CFSTR("LIPV"));

  return Mutable;
}

CFMutableDictionaryRef GLUCreateQRActiveLinkRTTEvent(void *a1, float a2)
{
  id v3;
  CFMutableDictionaryRef Mutable;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  const char *v26;
  double v27;
  void *v28;
  const char *v29;
  double v30;
  const char *v31;
  double v32;
  double v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  const char *v48;
  double v49;
  void *v50;
  const char *v51;
  double v52;
  const char *v53;
  double v54;
  void *v55;
  const char *v56;
  double v57;
  const char *v58;
  double v59;
  void *v60;
  const char *v61;
  double v62;
  const char *v63;
  double v64;

  v3 = a1;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend_local(v3, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_radioAccessTechnology(v8, v9, v10, v11);

  objc_msgSend_remote(v3, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_radioAccessTechnology(v16, v17, v18, v19);

  v21 = (void *)MEMORY[0x1E0CB37E8];
  v25 = objc_msgSend_protocolVersion(v3, v22, v23, v24);
  objc_msgSend_numberWithUnsignedChar_(v21, v26, v25, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v29, (uint64_t)v28, v30, CFSTR("QVER"));

  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v31, (uint64_t)&unk_1E3C86BF8, v32, CFSTR("TYPE"));
  *(float *)&v33 = a2;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v34, v35, v33);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v37, (uint64_t)v36, v38, CFSTR("DUR"));

  v39 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v3, v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  v47 = objc_msgSend_transport(v43, v44, v45, v46);
  objc_msgSend_numberWithInteger_(v39, v48, v47, v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v51, (uint64_t)v50, v52, CFSTR("TRAN"));

  if (v12 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v53, 0, v54, CFSTR("LINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v53, v12, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v56, (uint64_t)v55, v57, CFSTR("LINF"));

  }
  if (v20 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v58, 0, v59, CFSTR("RINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v58, v20, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v61, (uint64_t)v60, v62, CFSTR("RINF"));

  }
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v63, 0, v64, CFSTR("SCODE"));
  return Mutable;
}

CFMutableDictionaryRef GLUCreateLinkConnectedEvent(void *a1, int a2)
{
  id v3;
  CFMutableDictionaryRef Mutable;
  const char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  const char *v29;
  double v30;
  BOOL v31;
  unsigned int v32;
  void *v33;
  const char *v34;
  double v35;
  const char *v36;
  double v37;
  const char *v38;
  double v39;
  void *v40;
  const char *v41;
  double v42;
  const char *v43;
  double v44;
  void *v45;
  const char *v46;
  double v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  double v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  double v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  const char *v67;
  double v68;
  void *v69;
  const char *v70;
  double v71;

  v3 = a1;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend_local(v3, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_radioAccessTechnology(v8, v9, v10, v11);

  objc_msgSend_remote(v3, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_radioAccessTechnology(v16, v17, v18, v19);

  objc_msgSend_local(v3, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_transport(v24, v25, v26, v27);

  switch(v28)
  {
    case 2:
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v29, 313, v30);
LABEL_10:
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(Mutable, v34, (uint64_t)v33, v35, CFSTR("TYPE"));

      goto LABEL_12;
    case 3:
      v31 = a2 == 0;
      v32 = 331;
LABEL_7:
      if (v31)
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v29, v32 + 1, v30);
      else
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v29, v32, v30);
      goto LABEL_10;
    case 4:
      v31 = a2 == 0;
      v32 = 332;
      goto LABEL_7;
  }
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v29, 0, v30, CFSTR("TYPE"));
LABEL_12:
  if (a2)
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)&unk_1E3C86C28, v37, CFSTR("QFS"));
  else
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)&unk_1E3C86C40, v37, CFSTR("QFS"));
  if (v12 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v38, 0, v39, CFSTR("LINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v38, v12, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v41, (uint64_t)v40, v42, CFSTR("LINF"));

  }
  if (v20 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v43, 0, v44, CFSTR("RINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, v20, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v46, (uint64_t)v45, v47, CFSTR("RINF"));

  }
  objc_msgSend_local(v3, v48, v49, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allocbindDataBlob(v51, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v56, (uint64_t)v55, v57, CFSTR("QBLOB"));

  v58 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v3, v59, v60, v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend_transport(v62, v63, v64, v65);
  objc_msgSend_numberWithInteger_(v58, v67, v66, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v70, (uint64_t)v69, v71, CFSTR("TRAN"));

  return Mutable;
}

uint64_t GLUtilStunTransportToLinkType(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (a2)
    v2 = 331;
  else
    v2 = 332;
  if (a2)
    v3 = 332;
  else
    v3 = 333;
  if (a1 != 4)
    v3 = 0;
  if (a1 != 3)
    v2 = v3;
  if (a1 == 2)
    return 313;
  else
    return v2;
}

CFMutableDictionaryRef GLUCreateSetUPlusOneEvent(int a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  CFMutableDictionaryRef Mutable;
  double v7;
  void *v8;
  const char *v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  double v16;

  v3 = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v3)
  {
    objc_msgSend_date(MEMORY[0x1E0C99D68], v4, v5, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceDate_(v8, v9, (uint64_t)v3, v10);
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v12, v13, v11 * 1000.0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v15, (uint64_t)v14, v16, CFSTR("DELTAT"));

  }
  if (a1)
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v4, (uint64_t)&unk_1E3C86C58, v7, CFSTR("UPO"));
  else
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v4, (uint64_t)&unk_1E3C86C70, v7, CFSTR("UPO"));

  return Mutable;
}

CFMutableDictionaryRef GLUCreateIPVersionFailureEvent(void *a1)
{
  id v1;
  CFMutableDictionaryRef Mutable;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  const char *v26;
  double v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  const char *v37;
  double v38;
  void *v39;
  const char *v40;
  double v41;
  const char *v42;
  double v43;
  void *v44;
  const char *v45;
  double v46;
  const char *v47;
  double v48;
  void *v49;
  const char *v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  double v58;
  void *v59;
  const char *v60;
  double v61;

  v1 = a1;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend_local(v1, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_radioAccessTechnology(v6, v7, v8, v9);

  objc_msgSend_remote(v1, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_radioAccessTechnology(v14, v15, v16, v17);

  objc_msgSend_local(v1, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(objc_msgSend_address(v22, v23, v24, v25) + 1) == 2)
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v26, (uint64_t)&unk_1E3C86C88, v27, CFSTR("TYPE"));
  else
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v26, (uint64_t)&unk_1E3C86CA0, v27, CFSTR("TYPE"));

  v28 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v1, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend_transport(v32, v33, v34, v35);
  objc_msgSend_numberWithInteger_(v28, v37, v36, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v40, (uint64_t)v39, v41, CFSTR("TRAN"));

  if (v10 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v42, 0, v43, CFSTR("LINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v42, v10, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v45, (uint64_t)v44, v46, CFSTR("LINF"));

  }
  if (v18 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v47, 0, v48, CFSTR("RINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v47, v18, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v50, (uint64_t)v49, v51, CFSTR("RINF"));

  }
  objc_msgSend_local(v1, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allocbindDataBlob(v55, v56, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v60, (uint64_t)v59, v61, CFSTR("QBLOB"));

  return Mutable;
}

CFMutableDictionaryRef GLUCreateQRClientTimeEvent(uint64_t a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  CFMutableDictionaryRef Mutable;
  const char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  const char *v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  const char *v38;
  double v39;
  void *v40;
  const char *v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  void *v46;
  const char *v47;
  double v48;
  const char *v49;
  uint64_t v50;
  double v51;
  void *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  const char *v58;
  double v59;
  void *v60;
  const char *v61;
  double v62;
  const char *v63;
  double v64;
  void *v65;
  const char *v66;
  double v67;
  const char *v68;
  double v69;
  void *v70;
  const char *v71;
  double v72;
  const char *v73;
  double v74;
  void *v75;
  const char *v76;
  double v77;
  const char *v78;
  uint64_t v79;
  double v80;
  void *v81;
  const char *v82;
  double v83;
  double v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  double v89;

  v9 = a3;
  v10 = a4;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend_local(v9, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_radioAccessTechnology(v15, v16, v17, v18);

  objc_msgSend_remote(v9, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend_radioAccessTechnology(v23, v24, v25, v26);

  v28 = (void *)MEMORY[0x1E0CB37E8];
  v32 = objc_msgSend_protocolVersion(v9, v29, v30, v31);
  objc_msgSend_numberWithUnsignedChar_(v28, v33, v32, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)v35, v37, CFSTR("QVER"));

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v38, a1, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v41, (uint64_t)v40, v42, CFSTR("TYPE"));

  if (a5 <= 0.0)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v43, 0, v45, CFSTR("DUR"));
  }
  else
  {
    *(float *)&v45 = a5;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v47, (uint64_t)v46, v48, CFSTR("DUR"));

  }
  v52 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v9, v49, v50, v51);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend_transport(v53, v54, v55, v56);
  objc_msgSend_numberWithInteger_(v52, v58, v57, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v61, (uint64_t)v60, v62, CFSTR("TRAN"));

  if (v19 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v63, 0, v64, CFSTR("LINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v63, v19, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v66, (uint64_t)v65, v67, CFSTR("LINF"));

  }
  if (v27 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v68, 0, v69, CFSTR("RINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v68, v27, v69);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v71, (uint64_t)v70, v72, CFSTR("RINF"));

  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v73, a2, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v76, (uint64_t)v75, v77, CFSTR("SCODE"));

  if ((_DWORD)a1 == 305 && v10)
  {
    objc_msgSend_date(MEMORY[0x1E0C99D68], v78, v79, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceDate_(v81, v82, (uint64_t)v10, v83);
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v85, v86, v84 * 1000.0);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v88, (uint64_t)v87, v89, CFSTR("DELTAT"));

  }
  return Mutable;
}

CFMutableDictionaryRef GLUCreateQRNoSessionStateEvent(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  CFMutableDictionaryRef Mutable;
  const char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  double v29;
  void *v30;
  const char *v31;
  double v32;
  const char *v33;
  double v34;
  void *v35;
  const char *v36;
  double v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  double v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  const char *v47;
  double v48;
  void *v49;
  const char *v50;
  double v51;
  const char *v52;
  double v53;
  void *v54;
  const char *v55;
  double v56;
  const char *v57;
  double v58;
  void *v59;
  const char *v60;
  double v61;
  const char *v62;
  double v63;
  void *v64;
  const char *v65;
  double v66;

  v5 = a1;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend_local(v5, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_radioAccessTechnology(v10, v11, v12, v13);

  objc_msgSend_remote(v5, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_radioAccessTechnology(v18, v19, v20, v21);

  v23 = (void *)MEMORY[0x1E0CB37E8];
  v27 = objc_msgSend_protocolVersion(v5, v24, v25, v26);
  objc_msgSend_numberWithUnsignedChar_(v23, v28, v27, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v31, (uint64_t)v30, v32, CFSTR("QVER"));

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v33, a2, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)v35, v37, CFSTR("TYPE"));

  v38 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_local(v5, v39, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  v46 = objc_msgSend_transport(v42, v43, v44, v45);
  objc_msgSend_numberWithInteger_(v38, v47, v46, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v50, (uint64_t)v49, v51, CFSTR("TRAN"));

  if (v14 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v52, 0, v53, CFSTR("LINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v52, v14, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v55, (uint64_t)v54, v56, CFSTR("LINF"));

  }
  if (v22 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v57, 0, v58, CFSTR("RINF"));
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v57, v22, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v60, (uint64_t)v59, v61, CFSTR("RINF"));

  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v62, a3, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v65, (uint64_t)v64, v66, CFSTR("SCODE"));

  return Mutable;
}

id GLUCreateNetworkInterfaceArrayWithOptions(uint64_t a1, int a2, char a3, int a4, int a5, int a6, char a7, unsigned int a8, void *a9)
{
  const char *v13;
  uint64_t v14;
  double v15;
  int v16;
  NSObject *v17;
  id v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  NSObject *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  ifaddrs *v41;
  int v42;
  sockaddr *ifa_addr;
  _BOOL4 valid;
  const char *v45;
  uint64_t v46;
  double v47;
  void *v48;
  const char *v49;
  double v50;
  int isVoWiFiInterface;
  double v52;
  NSObject *v53;
  char *ifa_name;
  const char *v55;
  uint64_t v56;
  double v57;
  void *v58;
  const char *v59;
  double v60;
  int v61;
  NSObject *v62;
  char *v63;
  const char *v64;
  int sa_family;
  id v66;
  const char *v67;
  uint64_t v68;
  double v69;
  char *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  int v78;
  id v79;
  const char *v80;
  uint64_t v81;
  double v82;
  char *v83;
  int *v84;
  double v85;
  NSObject *v86;
  char *v87;
  NSObject *v88;
  char *v89;
  id v90;
  const char *v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  char *v95;
  id v96;
  const char *v97;
  uint64_t v98;
  double v99;
  char *v100;
  id v101;
  const char *v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  double v106;
  sockaddr *v107;
  id v108;
  const char *v109;
  double v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t j;
  void *v117;
  const char *v118;
  id v119;
  const char *v120;
  uint64_t v121;
  double v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  double v126;
  int v127;
  uint64_t v128;
  NSObject *v129;
  char *v130;
  id v131;
  const char *v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t i;
  void *v140;
  const char *v141;
  id v142;
  const char *v143;
  uint64_t v144;
  double v145;
  const char *v146;
  const char *v147;
  uint64_t v148;
  double v149;
  char isTemporaryIPv6;
  NSObject *v151;
  const char *v152;
  uint64_t v153;
  double v154;
  sockaddr *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  const char *v159;
  double v160;
  NSObject *v161;
  NSObject *v162;
  NSObject *v164;
  uint8_t *v165;
  uint64_t v166;
  const __CFString *v167;
  unsigned int v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  id v172;
  int v173;
  int v174;
  id v178;
  id v179;
  id v180;
  id v181;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int v191;
  ifaddrs *v192;
  _BYTE v193[128];
  char v194[128];
  char __s2[8];
  uint64_t v196;
  uint8_t buf[40];
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v180 = a9;
  v192 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  if (getifaddrs(&v192) < 0)
  {
    v16 = *__error();
    OSLogHandleForTransportCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "GLUCreateNetworkInterfaceArrayWithOptions";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v16;
      _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "%s getifaddrs failed errno=%d", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s getifaddrs failed errno=%d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s getifaddrs failed errno=%d"));
      }
    }
    v18 = 0;
    goto LABEL_166;
  }
  if (a4)
  {
    if (v180)
    {
      v178 = v180;
    }
    else
    {
      objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v13, v14, v15);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_cellularDataInterfaceName(v19, v20, v21, v22);
      v178 = (id)objc_claimAutoreleasedReturnValue();

      if (!v178)
      {
        OSLogHandleForTransportCategory();
        v164 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B949000, v164, OS_LOG_TYPE_DEFAULT, "found no interface for cellular data, skip.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found no interface for cellular data, skip."));
            if (_IDSShouldLog())
              _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found no interface for cellular data, skip."));
          }
        }
        v178 = 0;
        v173 = 0;
        goto LABEL_15;
      }
    }
    v173 = 1;
LABEL_15:
    OSLogHandleForTransportCategory();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v178;
      _os_log_impl(&dword_19B949000, v23, OS_LOG_TYPE_DEFAULT, "found %@ interface for cellular data.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v165 = (uint8_t *)v178;
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("found %@ interface for cellular data."));
        if (_IDSShouldLog())
        {
          v165 = (uint8_t *)v178;
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("found %@ interface for cellular data."));
        }
      }
    }
    goto LABEL_21;
  }
  v178 = 0;
  v173 = 0;
LABEL_21:
  if (a6)
  {
    objc_msgSend_sharedInstance(IDSNWPathUtils, v13, v14, v15);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_getDefaultPath(v24, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = objc_msgSend_status(v28, v29, v30, v31);
    if (v34 == 1)
    {
      objc_msgSend_interface(v28, v32, v33, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_interfaceName(v36, v37, v38, v39);
      v179 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      OSLogHandleForTransportCategory();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v34;
        _os_log_impl(&dword_19B949000, v40, OS_LOG_TYPE_DEFAULT, "no default path is available (path:%@, status:%d).", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v165 = (uint8_t *)v28;
          v166 = v34;
          _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("no default path is available (path:%@, status:%d)."));
          if (_IDSShouldLog())
          {
            v165 = (uint8_t *)v28;
            v166 = v34;
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("no default path is available (path:%@, status:%d)."));
          }
        }
      }
      v179 = 0;
    }

  }
  else
  {
    v179 = 0;
  }
  v41 = v192;
  if (!v192)
  {
    MEMORY[0x1A1AC7AAC](0);
    goto LABEL_158;
  }
  v181 = 0;
  if (v179)
    v42 = a6;
  else
    v42 = 0;
  v174 = v42;
  v170 = __rev16(a8);
  do
  {
    if (a1 == 1)
    {
      if (v41->ifa_addr->sa_family != 30)
        goto LABEL_50;
    }
    else if (!a1 && v41->ifa_addr->sa_family != 2)
    {
      goto LABEL_50;
    }
    if ((v41->ifa_flags & 9) == 1)
    {
      ifa_addr = v41->ifa_addr;
      if (ifa_addr)
      {
        if (!v41->ifa_netmask
          || (valid = IsValidSA((_BOOL8)v41->ifa_netmask), ifa_addr = v41->ifa_addr, !valid)
          || ifa_addr->sa_family == v41->ifa_netmask->sa_family)
        {
          if (!IsLinkLocalSA((_BOOL8)ifa_addr) || a5)
          {
            objc_msgSend_sharedInstance(IDSNWPathUtils, v45, v46, v47, v165, v166, v167);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            isVoWiFiInterface = objc_msgSend_isVoWiFiInterface_(v48, v49, (uint64_t)v41->ifa_name, v50);

            if (isVoWiFiInterface)
            {
              OSLogHandleForTransportCategory();
              v53 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                ifa_name = v41->ifa_name;
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = ifa_name;
                _os_log_impl(&dword_19B949000, v53, OS_LOG_TYPE_DEFAULT, "filter out VoWiFi interface [if:%s]", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v165 = (uint8_t *)v41->ifa_name;
                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("filter out VoWiFi interface [if:%s]"));
                  if (_IDSShouldLog())
                  {
                    v165 = (uint8_t *)v41->ifa_name;
                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("filter out VoWiFi interface [if:%s]"));
                  }
                }
              }
              goto LABEL_50;
            }
            *(_QWORD *)__s2 = 0;
            v196 = 0;
            v191 = -1;
            if (!GLUtilGetDefaultInterface(&v191, __s2, 0, v52)
              || (sub_19BAD4748(v41->ifa_name, v41->ifa_addr->sa_family, __s2) & 1) == 0)
            {
              objc_msgSend_sharedInstance(IDSNWPathUtils, v55, v56, v57);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              v61 = objc_msgSend_filterVirtualInterfaces_(v58, v59, (uint64_t)v41->ifa_name, v60);

              if (v61)
              {
                OSLogHandleForTransportCategory();
                v62 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                {
                  v63 = v41->ifa_name;
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v63;
                  _os_log_impl(&dword_19B949000, v62, OS_LOG_TYPE_DEFAULT, "filter out virtual interface [if:%s]", buf, 0xCu);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v165 = (uint8_t *)v41->ifa_name;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("filter out virtual interface [if:%s]"));
                    if (_IDSShouldLog())
                    {
                      v165 = (uint8_t *)v41->ifa_name;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("filter out virtual interface [if:%s]"));
                    }
                  }
                }
                goto LABEL_50;
              }
            }
            if (v174)
            {
              v64 = v41->ifa_name;
              sa_family = v41->ifa_addr->sa_family;
              v66 = objc_retainAutorelease(v179);
              v70 = (char *)objc_msgSend_UTF8String(v66, v67, v68, v69);
              if ((sub_19BAD4748(v64, sa_family, v70) & 1) == 0)
              {
                OSLogHandleForTransportCategory();
                v88 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                {
                  v89 = v41->ifa_name;
                  v90 = objc_retainAutorelease(v66);
                  v94 = objc_msgSend_UTF8String(v90, v91, v92, v93);
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = v89;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = v94;
                  _os_log_impl(&dword_19B949000, v88, OS_LOG_TYPE_DEFAULT, "filter out non-default interface [if:%s] for %@, defaultIfName: %s", buf, 0x20u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v95 = v41->ifa_name;
                    v96 = objc_retainAutorelease(v66);
                    v166 = (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                    v167 = (const __CFString *)objc_msgSend_UTF8String(v96, v97, v98, v99);
                    v165 = (uint8_t *)v95;
                    _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("filter out non-default interface [if:%s] for %@, defaultIfName: %s"));
                    if (_IDSShouldLog())
                    {
                      v100 = v41->ifa_name;
                      v101 = objc_retainAutorelease(v96);
                      v105 = objc_msgSend_UTF8String(v101, v102, v103, v104, v165, CFSTR("12345678-7654-DADA-DADA-DADADADADADA"), v167);
                      v166 = (uint64_t)CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                      v167 = (const __CFString *)v105;
                      v165 = (uint8_t *)v100;
                      _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("filter out non-default interface [if:%s] for %@, defaultIfName: %s"));
                    }
                  }
                }
                goto LABEL_50;
              }
            }
            v171 = sub_19BAD4804((int)v41->ifa_name, v41->ifa_addr->sa_family);
            v71 = v41->ifa_addr->sa_family;
            memset(buf, 0, 32);
            __strlcpy_chk();
            v72 = socket(v71, 2, 0);
            v73 = v72;
            if (v72 < 0)
            {
              v84 = __error();
              IDSAssertNonFatalErrnoWithSource(*v84, "GL getInterfaceType", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLinkUtil.m", 1817, v85);
            }
            else
            {
              v165 = buf;
              v74 = ioctl(v72, 0xC02069ADuLL);
              v75 = *(unsigned int *)&buf[16];
              close(v73);
              if (v74 >= 0)
              {
                IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1820, 0);
                v76 = v75;
                if ((_DWORD)v75 == 5)
                {
                  if (!v173)
                    goto LABEL_50;
                  v77 = v41->ifa_name;
                  v78 = v41->ifa_addr->sa_family;
                  v79 = objc_retainAutorelease(v178);
                  v83 = (char *)objc_msgSend_UTF8String(v79, v80, v81, v82);
                  if ((sub_19BAD4748(v77, v78, v83) & 1) == 0)
                    goto LABEL_50;
                  v76 = 5;
                }
                else if ((a7 & 1) != 0)
                {
                  if ((_DWORD)v75 != 3)
                  {
LABEL_78:
                    OSLogHandleForTransportCategory();
                    v86 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                    {
                      v87 = v41->ifa_name;
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = v87;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v76;
                      *(_WORD *)&buf[18] = 2112;
                      *(_QWORD *)&buf[20] = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                      _os_log_impl(&dword_19B949000, v86, OS_LOG_TYPE_DEFAULT, "filter out interface [if:%s type:%d] for %@.", buf, 0x1Cu);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        v166 = v76;
                        v167 = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                        v165 = (uint8_t *)v41->ifa_name;
                        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("filter out interface [if:%s type:%d] for %@."));
                        if (_IDSShouldLog())
                        {
                          v166 = v76;
                          v167 = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                          v165 = (uint8_t *)v41->ifa_name;
                          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("filter out interface [if:%s type:%d] for %@."));
                        }
                      }
                    }
                    goto LABEL_50;
                  }
                  if ((a3 & 1) == 0)
                  {
                    OSLogHandleForTransportCategory();
                    v129 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                    {
                      v130 = v41->ifa_name;
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = v130;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 3;
                      *(_WORD *)&buf[18] = 2112;
                      *(_QWORD *)&buf[20] = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                      _os_log_impl(&dword_19B949000, v129, OS_LOG_TYPE_DEFAULT, "filter out WiFi interface [if:%s type:%d] for %@.", buf, 0x1Cu);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        v166 = 3;
                        v167 = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                        v165 = (uint8_t *)v41->ifa_name;
                        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("filter out WiFi interface [if:%s type:%d] for %@."));
                        if (_IDSShouldLog())
                        {
                          v166 = 3;
                          v167 = CFSTR("12345678-7654-DADA-DADA-DADADADADADA");
                          v165 = (uint8_t *)v41->ifa_name;
                          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("filter out WiFi interface [if:%s type:%d] for %@."));
                        }
                      }
                    }
                    goto LABEL_50;
                  }
                  v76 = 3;
                }
                goto LABEL_94;
              }
            }
            IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1820, 0);
            v76 = 0;
            if ((a7 & 1) != 0)
              goto LABEL_78;
LABEL_94:
            if (((a2 & 1) != 0 || (v171 & 0x100000) == 0) && (!a2 || (v171 & 0x20000) != 0))
            {
              v169 = v76;
              v172 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v107 = v41->ifa_addr;
              if (v107->sa_family == 30)
              {
                v168 = sub_19BAD4AF4((uint64_t)v41->ifa_name, v107);
                if ((v168 & 0x101E) == 0)
                {
                  if ((v168 & 0x80) != 0)
                  {
                    v189 = 0uLL;
                    v190 = 0uLL;
                    v187 = 0uLL;
                    v188 = 0uLL;
                    v131 = v181;
                    v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v131, v132, (uint64_t)&v187, v133, v194, 16);
                    if (v136)
                    {
                      v138 = *(_QWORD *)v188;
                      do
                      {
                        for (i = 0; i != v136; ++i)
                        {
                          if (*(_QWORD *)v188 != v138)
                            objc_enumerationMutation(v131);
                          v140 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * i);
                          v141 = v41->ifa_name;
                          objc_msgSend_name(v140, v134, v135, v137, v165);
                          v142 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                          v146 = (const char *)objc_msgSend_UTF8String(v142, v143, v144, v145);
                          if (!strcmp(v141, v146))
                          {
                            isTemporaryIPv6 = objc_msgSend_isTemporaryIPv6(v140, v147, v148, v149);

                            if ((isTemporaryIPv6 & 1) == 0)
                            {
                              objc_msgSend_addObject_(v172, v134, (uint64_t)v140, v137);
                              OSLogHandleForTransportCategory();
                              v151 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)buf = 138412290;
                                *(_QWORD *)&buf[4] = v140;
                                _os_log_impl(&dword_19B949000, v151, OS_LOG_TYPE_DEFAULT, "prune IPv6 interface %@.", buf, 0xCu);
                              }

                              if (os_log_shim_legacy_logging_enabled())
                              {
                                if (_IDSShouldLogTransport())
                                {
                                  v165 = (uint8_t *)v140;
                                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("prune IPv6 interface %@."));
                                  if (_IDSShouldLog())
                                  {
                                    v165 = (uint8_t *)v140;
                                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("prune IPv6 interface %@."));
                                  }
                                }
                              }
                            }
                          }
                          else
                          {

                          }
                        }
                        v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v131, v134, (uint64_t)&v187, v137, v194, 16);
                      }
                      while (v136);
                    }
                  }
                  else
                  {
                    v185 = 0uLL;
                    v186 = 0uLL;
                    v183 = 0uLL;
                    v184 = 0uLL;
                    v108 = v181;
                    v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v109, (uint64_t)&v183, v110, v193, 16);
                    if (v113)
                    {
                      v115 = *(_QWORD *)v184;
                      while (2)
                      {
                        for (j = 0; j != v113; ++j)
                        {
                          if (*(_QWORD *)v184 != v115)
                            objc_enumerationMutation(v108);
                          v117 = *(void **)(*((_QWORD *)&v183 + 1) + 8 * j);
                          v118 = v41->ifa_name;
                          objc_msgSend_name(v117, v111, v112, v114);
                          v119 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                          v123 = (const char *)objc_msgSend_UTF8String(v119, v120, v121, v122);
                          if (!strcmp(v118, v123))
                          {
                            v127 = objc_msgSend_isTemporaryIPv6(v117, v124, v125, v126);

                            if (v127)
                            {
                              OSLogHandleForTransportCategory();
                              v161 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)buf = 138412290;
                                *(_QWORD *)&buf[4] = v117;
                                _os_log_impl(&dword_19B949000, v161, OS_LOG_TYPE_DEFAULT, "skip IPv6 interface %@.", buf, 0xCu);
                              }

                              if (os_log_shim_legacy_logging_enabled())
                              {
                                if (_IDSShouldLogTransport())
                                {
                                  v165 = (uint8_t *)v117;
                                  _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("skip IPv6 interface %@."));
                                  if (_IDSShouldLog())
                                  {
                                    v165 = (uint8_t *)v117;
                                    _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("skip IPv6 interface %@."));
                                  }
                                }
                              }
                              v181 = v108;
                              goto LABEL_153;
                            }
                          }
                          else
                          {

                          }
                        }
                        v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v111, (uint64_t)&v183, v114, v193, 16);
                        if (v113)
                          continue;
                        break;
                      }
                    }
                  }

                  if (objc_msgSend_count(v172, v152, v153, v154))
                    objc_msgSend_removeObjectsInArray_(v181, (const char *)v107, (uint64_t)v172, v106);
                  v128 = v168;
LABEL_138:
                  v155 = v41->ifa_addr;
                  v156 = v169;
                  if (v155->sa_data[2] != 209)
                  {
                    if (!v181)
                    {
                      v157 = v128;
                      v181 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v155 = v41->ifa_addr;
                      v156 = v169;
                      v128 = v157;
                    }
                    v158 = v155->sa_family;
                    if (v158 == 30 || v158 == 2)
                      *(_WORD *)v155->sa_data = v170;
                    objc_msgSend_interfaceAddress_eflags_v6flags_iftype_(IDSInterfaceAddress, (const char *)v107, (uint64_t)v41, v106, v171, v128, v156, v165);
                    v108 = (id)objc_claimAutoreleasedReturnValue();
                    if (v108)
                      objc_msgSend_addObject_(v181, v159, (uint64_t)v108, v160);
LABEL_153:

                  }
                }

                goto LABEL_50;
              }
              v128 = 0;
              goto LABEL_138;
            }
          }
        }
      }
    }
LABEL_50:
    v41 = v41->ifa_next;
  }
  while (v41);
  MEMORY[0x1A1AC7AAC](v192);
  if (!v181)
LABEL_158:
    v181 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  OSLogHandleForTransportCategory();
  v162 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "GLUCreateNetworkInterfaceArrayWithOptions";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v181;
    _os_log_impl(&dword_19B949000, v162, OS_LOG_TYPE_DEFAULT, "%s Available network interfaces: %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s Available network interfaces: %@"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s Available network interfaces: %@"));
    }
  }
  v18 = v181;

LABEL_166:
  return v18;
}

uint64_t sub_19BAD4748(const char *a1, int a2, char *__s2)
{
  uint64_t result;
  char __s1[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!__s2)
    return 0;
  if (!strncmp(a1, __s2, 0x10uLL))
    return 1;
  memset(__s1, 170, sizeof(__s1));
  result = getEffectiveInterface((uint64_t)a1, a2, __s1, 0);
  if ((_DWORD)result)
    return strncmp(__s1, __s2, 0x10uLL) == 0;
  return result;
}

uint64_t sub_19BAD4804(int a1, int a2)
{
  char v2;
  int v3;
  int v4;
  int v5;
  uint64_t v7;
  double v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  v3 = socket(a2, 2, 0);
  if (v3 < 0)
  {
    v7 = *__error();
    IDSAssertNonFatalErrnoWithSource(v7, "GL getExtendedFlags", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLinkUtil.m", 1780, v8);
    OSLogHandleForTransportCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "getExtendedFlags";
      v14 = 1024;
      v15 = v7;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "%s socket failed errno=%d", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s socket failed errno=%d"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s socket failed errno=%d"));
      }
    }
  }
  else
  {
    v4 = v3;
    IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1785, 0);
    v16 = 0u;
    v17 = 0u;
    BYTE1(v17) = v2;
    __strlcpy_chk();
    v5 = ioctl(v4, 0xC020698EuLL, &v16);
    close(v4);
    if ((v5 & 0x80000000) == 0)
      return v17;
    v10 = *__error();
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "getExtendedFlags";
      v14 = 1024;
      v15 = v10;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "%s ioctl(SIOCGIFEFLAGS) failed errno=%d", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s ioctl(SIOCGIFEFLAGS) failed errno=%d"));
      if (_IDSShouldLog())
        _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s ioctl(SIOCGIFEFLAGS) failed errno=%d"));
    }
  }
  return 0;
}

uint64_t sub_19BAD4AF4(uint64_t a1, _OWORD *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  double v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  _OWORD v16[18];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = socket(30, 2, 0);
  if (v3 < 0)
  {
    v7 = *__error();
    IDSAssertNonFatalErrnoWithSource(v7, "GL getIPv6Flags", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLinkUtil.m", 1733, v8);
    OSLogHandleForTransportCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "getIPv6Flags";
      v14 = 1024;
      v15 = v7;
      _os_log_impl(&dword_19B949000, v9, OS_LOG_TYPE_DEFAULT, "%s socket failed errno=%d", buf, 0x12u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s socket failed errno=%d"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
        {
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s socket failed errno=%d"));
          return 0;
        }
      }
    }
  }
  else
  {
    v4 = v3;
    IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1738, 0);
    memset(v16, 0, sizeof(v16));
    __strlcpy_chk();
    v16[1] = *a2;
    *(_OWORD *)((char *)&v16[1] + 12) = *(_OWORD *)((char *)a2 + 12);
    v5 = ioctl(v4, 0xC1206949uLL, v16);
    close(v4);
    if ((v5 & 0x80000000) == 0)
      return LODWORD(v16[1]);
    v10 = *__error();
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "getIPv6Flags";
      v14 = 1024;
      v15 = v10;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "%s ioctl(SIOCGIFAFLAG_IN6) failed errno=%d", buf, 0x12u);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("%s ioctl(SIOCGIFAFLAG_IN6) failed errno=%d"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
        {
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("%s ioctl(SIOCGIFAFLAG_IN6) failed errno=%d"));
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t GLUGetExtendedFlagsForInterface(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  double v4;
  id v5;
  const char *v6;
  uint64_t v7;
  double v8;
  int v9;
  const char *v10;
  uint64_t v11;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;

  v1 = a1;
  objc_msgSend_name(v1, v2, v3, v4);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = objc_msgSend_UTF8String(v5, v6, v7, v8);

  objc_msgSend_address(v1, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = objc_msgSend_sa(v13, v14, v15, v16);
  v18 = sub_19BAD4804(v9, *(unsigned __int8 *)(v17 + 1));

  return v18;
}

id GLUtilGetRemainingInterfaces(void *a1)
{
  id v1;
  double v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  char v13;
  unsigned int v14;
  uint8_t buf[4];
  void *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v14 = -1;
  v17[0] = 0;
  v17[1] = 0;
  v13 = 0;
  if ((GLUtilGetDefaultInterface(&v14, (char *)v17, &v13, v2) & 1) != 0)
  {
    GLUtilGetExcludedInterfaceAddressList(v14, (uint64_t)v17, v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend_mutableCopy(v1, v4, v5, v6);
    objc_msgSend_removeObjectsInArray_(v7, v8, (uint64_t)v3, v9);
    OSLogHandleForTransportCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "GLUtilGetRemainingInterfaces: remaining interfaces:%@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilGetRemainingInterfaces: remaining interfaces:%@."));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilGetRemainingInterfaces: remaining interfaces:%@."));
      }
    }

  }
  else
  {
    OSLogHandleForTransportCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v11, OS_LOG_TYPE_DEFAULT, "GLUtilGetRemainingInterfaces: Failed to get default interface, can not get remaining interfaces after exclusion!", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("GLUtilGetRemainingInterfaces: Failed to get default interface, can not get remaining interfaces after exclusion!"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("GLUtilGetRemainingInterfaces: Failed to get default interface, can not get remaining interfaces after exclusion!"));
      }
    }
    v7 = 0;
  }

  return v7;
}

uint64_t GLUtilGetPreferredRemoteInterface(char a1)
{
  if ((a1 - 1) > 7u)
    return 0;
  else
    return dword_19BB12F14[(char)(a1 - 1)];
}

uint64_t GLUtilGetPreferredLocalInterface(int a1)
{
  unsigned int v1;

  v1 = 2 * ((a1 - 1) < 2);
  if (a1 == 8)
    v1 = 1;
  if (a1 == 4)
    return 1;
  else
    return v1;
}

uint64_t GLUtilShouldSetRemoteInterfacePreference(int a1, int a2)
{
  if (a1)
    return a2 ^ 1u;
  else
    return 0;
}

unint64_t GLUtilStunTransportChar(unint64_t a1)
{
  unint64_t v1;

  v1 = 0x535452503FuLL >> (8 * a1);
  if (a1 >= 5)
    LOBYTE(v1) = 63;
  return v1 & 0x7F;
}

uint64_t GLUtilIDSStunTransportToBearer(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 4)
    return (unsigned __int16)-1;
  else
    return (unsigned __int16)(0x6000600110011uLL >> (16 * (a1 - 1)));
}

BOOL GLUtilUnderPerformanceTesting(void *a1, int a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint64_t v12;
  double v13;
  _BOOL8 v14;
  void *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  int v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  double v26;
  _BOOL4 v27;
  const char *v28;
  uint64_t v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  __int128 v46;
  __int16 v47;
  __int16 v48;
  char v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  NSObject *v55;
  int v56;
  NSObject *v57;
  _OWORD v58[3];
  uint8_t buf[4];
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend_local(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_radioAccessTechnology(v7, v8, v9, v10))
  {

    v14 = 0;
  }
  else
  {
    objc_msgSend_remote(v3, v11, v12, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend_radioAccessTechnology(v16, v17, v18, v19);

    v14 = 0;
    if (!v20 && a2)
    {
      memset(v58, 0, sizeof(v58));
      objc_msgSend_local(v3, v21, v22, 0.0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = *(unsigned __int8 *)(objc_msgSend_address(v23, v24, v25, v26) + 1) == 30;

      objc_msgSend_local(v3, v28, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend_address(v31, v32, v33, v34);

      objc_msgSend_remote(v3, v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend_external(v39, v40, v41, v42);

      if (v27)
      {
        *(_OWORD *)((char *)v58 + 8) = *(_OWORD *)(v35 + 8);
        v46 = *(_OWORD *)(v43 + 8);
        *(_OWORD *)((char *)&v58[1] + 8) = v46;
        v47 = *(_WORD *)(v35 + 2);
        v48 = *(_WORD *)(v43 + 2);
        v49 = 96;
      }
      else
      {
        v47 = *(_WORD *)(v35 + 2);
        v48 = *(_WORD *)(v43 + 2);
        DWORD2(v58[0]) = *(_DWORD *)(v35 + 4);
        DWORD2(v58[1]) = *(_DWORD *)(v43 + 4);
        v49 = 4;
      }
      BYTE2(v58[0]) = v49;
      WORD2(v58[0]) = v47;
      WORD3(v58[0]) = v48;
      objc_msgSend_local(v3, v44, v45, *(double *)&v46);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend_transport(v50, v51, v52, v53);

      v14 = v54 == 2;
      if (v54 == 2)
      {
        BYTE3(v58[0]) = 17;
        if (sysctlbyname("net.link.generic.system.flow_key_trace", 0, 0, v58, 0x30uLL))
        {
          OSLogHandleForTransportCategory();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            v56 = *__error();
            *(_DWORD *)buf = 67109120;
            v60 = v56;
            _os_log_impl(&dword_19B949000, v55, OS_LOG_TYPE_DEFAULT, "Failed to send flow_key, sysctl returned %d", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              __error();
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Failed to send flow_key, sysctl returned %d"));
              if (_IDSShouldLog())
              {
                __error();
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Failed to send flow_key, sysctl returned %d"));
              }
            }
          }
        }
        else
        {
          OSLogHandleForTransportCategory();
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B949000, v57, OS_LOG_TYPE_DEFAULT, "Succeeded in sending flow_key", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(CFSTR("GL"), CFSTR("IDS"), CFSTR("Succeeded in sending flow_key"));
              if (_IDSShouldLog())
                _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("GL"), CFSTR("Succeeded in sending flow_key"));
            }
          }
        }
      }
    }
  }

  return v14;
}

uint64_t GLUtilHasVPNInterfaceForSelectedAddress(void *a1, void *a2)
{
  void *v2;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  const char *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  double v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  double v25;
  void *v26;
  BOOL v27;
  const char *v28;
  uint64_t v29;
  double v30;
  int isCellular;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  double v38;
  void *v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  GLUtilGetRemainingInterfaces(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    v13 = 0;
    goto LABEL_28;
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v8 = v6;
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v43, v10, v47, 16);
  if (!v13)
    goto LABEL_27;
  v41 = v7;
  v42 = v5;
  v15 = *(_QWORD *)v44;
  while (2)
  {
    for (i = 0; i != v13; ++i)
    {
      if (*(_QWORD *)v44 != v15)
        objc_enumerationMutation(v8);
      v17 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
      objc_msgSend_delegatedName(v4, v11, v12, v14, v41, v42, (_QWORD)v43);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        objc_msgSend_delegatedName(v17, v18, v19, v21);
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v2)
        {
          v27 = 1;
LABEL_15:

          goto LABEL_16;
        }
      }
      objc_msgSend_delegatedName(v17, v18, v19, v21);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
        objc_msgSend_delegatedName(v4, v22, v23, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = v26 == 0;

      }
      else
      {
        v27 = 0;
      }

      if (v20)
        goto LABEL_15;
LABEL_16:

      isCellular = objc_msgSend_isCellular(v4, v28, v29, v30);
      if (isCellular == objc_msgSend_isCellular(v17, v32, v33, v34))
      {
        v35 = objc_msgSend_IPVersion(v4, v11, v12, v14);
        if (v35 == objc_msgSend_IPVersion(v17, v36, v37, v38) && v27)
        {
          v13 = 1;
          goto LABEL_26;
        }
      }
    }
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v43, v14, v47, 16);
    if (v13)
      continue;
    break;
  }
LABEL_26:
  v7 = v41;
  v5 = v42;
LABEL_27:

LABEL_28:
  return v13;
}

const __CFString *GLUtilStunTransportToProtocol(uint64_t a1, int a2)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = CFSTR("TCP");
  v3 = CFSTR("H2");
  if (!a2)
  {
    v3 = CFSTR("TCP");
    v2 = CFSTR("TLS");
  }
  if (a1 != 4)
    v2 = CFSTR("UNKNOWN");
  if (a1 == 3)
    v2 = v3;
  if (a1 == 2)
    return CFSTR("QUIC");
  else
    return v2;
}

uint64_t IDSQRProtoH3EndToEndChannelRegisterAckRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BAD68E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD69AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6A38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6AEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6BD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6C30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BAD6D2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BAD6E28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6E88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD6F80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BAD702C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t IDSMPServiceIdentityTypeForName(void *a1, const char *a2, double a3)
{
  return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("A"), a3);
}

const __CFString *IDSMPServiceIdentityTypeNameForType(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("A");
  else
    return 0;
}

uint64_t _IDSServiceDictionaries()
{
  return sub_19B94FBB0(0, 0);
}

id _IDSServiceDictionaryRepresentableHash()
{
  id v0;
  const char *v1;
  double v2;
  const char *v3;
  double v4;
  uint64_t v5;
  void *v6;
  id v7;
  const char *v8;
  double v9;
  uint64_t v10;
  const char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  const char *v23;
  double v24;
  const char *v25;
  double v26;
  const char *v27;
  double v28;
  const char *v29;
  uint64_t v30;
  double v31;
  void *v32;
  void *context;
  id obj;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  _QWORD v50[3];

  v50[1] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v50[0] = CFSTR("Identifier");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v1, (uint64_t)v50, v2, 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  context = (void *)MEMORY[0x1A1AC8274]();
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  sub_19B94FBB0(0, 0);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v44, v4, v49, 16);
  if (v38)
  {
    v36 = *(_QWORD *)v45;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v45 != v36)
          objc_enumerationMutation(obj);
        v39 = v5;
        v6 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v5);
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v7 = v37;
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v40, v9, v48, 16, context);
        if (v10)
        {
          v13 = v10;
          v14 = *(_QWORD *)v41;
          do
          {
            v15 = 0;
            do
            {
              if (*(_QWORD *)v41 != v14)
                objc_enumerationMutation(v7);
              objc_msgSend_objectForKey_(v6, v11, *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * v15), v12);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              if (v16)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  objc_msgSend_addObject_(v0, v17, (uint64_t)v16, v18);
                }
                else
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    objc_msgSend_stringValue(v16, v19, v20, v21);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_addObject_(v0, v23, (uint64_t)v22, v24);

                  }
                }
              }

              ++v15;
            }
            while (v13 != v15);
            v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v11, (uint64_t)&v40, v12, v48, 16);
          }
          while (v13);
        }

        v5 = v39 + 1;
      }
      while (v39 + 1 != v38);
      v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v44, v26, v49, 16);
    }
    while (v38);
  }

  objc_autoreleasePoolPop(context);
  objc_msgSend_sortUsingSelector_(v0, v27, (uint64_t)sel_caseInsensitiveCompare_, v28);
  objc_msgSend_SHA256HexString(v0, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

BOOL IDSQRProtoParticipantUpdateParticipantUpdateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t IDSQRProtoGetMaterialResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IDSQRProtoMaterial *v17;
  const char *v18;
  double v19;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoPluginControlPluginControlReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t writeIDSGLAttrAddress(unsigned __int16 *a1, uint64_t a2, int *a3)
{
  BOOL v4;
  BOOL v5;
  uint64_t result;
  int v7;
  int v8;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = v4 || a3 == 0;
  result = !v5;
  if (!v5)
  {
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    *(_BYTE *)(a2 + 4) = 0;
    if (*((_BYTE *)a1 + 9) == 30)
    {
      if (*((_DWORD *)a1 + 4) || *((_DWORD *)a1 + 5) || *((_DWORD *)a1 + 6) != -65536)
      {
        *(_BYTE *)(a2 + 5) = 2;
        *(_WORD *)(a2 + 6) = a1[5];
        *(_OWORD *)(a2 + 8) = *((_OWORD *)a1 + 1);
        v8 = 24;
        goto LABEL_19;
      }
      *(_BYTE *)(a2 + 5) = 1;
      *(_WORD *)(a2 + 6) = a1[5];
      v7 = *((_DWORD *)a1 + 7);
    }
    else
    {
      *(_BYTE *)(a2 + 5) = 1;
      *(_WORD *)(a2 + 6) = a1[5];
      v7 = *((_DWORD *)a1 + 3);
    }
    *(_DWORD *)(a2 + 8) = v7;
    v8 = 12;
LABEL_19:
    *(_WORD *)(a2 + 2) = ((_WORD)v8 << 8) - 1024;
    *a3 = v8;
  }
  return result;
}

uint64_t writeIDSGLAttrU16(unsigned __int16 *a1, _WORD *a2, _DWORD *a3)
{
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = v4 || a3 == 0;
  result = !v5;
  if (!v5)
  {
    *a2 = bswap32(*a1) >> 16;
    a2[1] = 512;
    a2[2] = bswap32(a1[4]) >> 16;
    *a3 = 6;
  }
  return result;
}

uint64_t writeIDSGLAttrU32(unsigned __int16 *a1, uint64_t a2, _DWORD *a3)
{
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = v4 || a3 == 0;
  result = !v5;
  if (!v5)
  {
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    *(_WORD *)(a2 + 2) = 1024;
    *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)a1 + 2));
    *a3 = 8;
  }
  return result;
}

uint64_t writeIDSGLAttrU64(unsigned __int16 *a1, uint64_t a2, _DWORD *a3)
{
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = v4 || a3 == 0;
  result = !v5;
  if (!v5)
  {
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    *(_WORD *)(a2 + 2) = 2048;
    *(_QWORD *)(a2 + 4) = *((_QWORD *)a1 + 1);
    *a3 = 12;
  }
  return result;
}

uint64_t writeIDSGLAttrBinaryData(unsigned __int16 *a1, _WORD *a2, int *a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  int v9;
  int v10;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 1;
  v4 = v3 || a3 == 0;
  v5 = !v4;
  if (!v4)
  {
    *a2 = bswap32(*a1) >> 16;
    v9 = (_DWORD)a2 + 4;
    memcpy(a2 + 2, a1 + 6, *((int *)a1 + 2));
    v10 = v9 + *((_DWORD *)a1 + 2) - (_DWORD)a2;
    a2[1] = bswap32(v10 - 4) >> 16;
    *a3 = v10;
  }
  return v5;
}

uint64_t readIDSGLAttrAddress(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, double a5)
{
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  __int16 v11;
  int v12;
  NSObject *v14;
  const char *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((int)a4 <= 1)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 67109120;
      v17 = a4;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrAddress: inputBufferLength: %d < 2, return", (uint8_t *)&v16, 8u);
    }

    return 0;
  }
  v7 = a4 - 2;
  if (*(_BYTE *)(a3 + 1) != 2)
  {
    v10 = a4 - 4;
    if (a4 >= 4)
    {
      if (a4 > 7)
      {
        v11 = *(_WORD *)(a3 + 2);
        v12 = *(_DWORD *)(a3 + 4);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_WORD *)(a1 + 8) = 528;
        *(_DWORD *)(a1 + 12) = v12;
        *(_WORD *)(a1 + 10) = v11;
        return 1;
      }
      objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 67109120;
        v17 = v10;
        v15 = "ERROR: readIDSGLAttrAddress: IPv4: inputBufferLength = %d < 4, return";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    v16 = 67109120;
    v17 = v7;
    v15 = "ERROR: readIDSGLAttrAddress: IPv4: inputBufferLength = %d < 2, return";
LABEL_21:
    _os_log_impl(&dword_19B949000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v16, 8u);
    goto LABEL_22;
  }
  v8 = a4 - 4;
  if (a4 < 4)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    v16 = 67109120;
    v17 = v7;
    v15 = "ERROR: readIDSGLAttrAddress: IPv6: inputBufferLength = %d < 2, return";
    goto LABEL_21;
  }
  v9 = *(_WORD *)(a3 + 2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 8) = 7708;
  *(_WORD *)(a1 + 10) = v9;
  if (a4 > 0x13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 4);
    return 1;
  }
  objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 67109120;
    v17 = v8;
    v15 = "ERROR: readIDSGLAttrAddress: IPv6: inputBufferLength = %d < 16, return";
    goto LABEL_21;
  }
LABEL_22:

  return 0;
}

BOOL readIDSGLAttrU16(uint64_t a1, char *a2, unsigned __int16 *a3, int a4, double a5)
{
  NSObject *v6;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a4 <= 1)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a4;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrU16 inputBufferLength = %d < 2, return", (uint8_t *)v8, 8u);
    }

  }
  else
  {
    *(_WORD *)(a1 + 8) = bswap32(*a3) >> 16;
    *(_DWORD *)a2 = 2;
  }
  return a4 > 1;
}

BOOL readIDSGLAttrU32(uint64_t a1, char *a2, unsigned int *a3, int a4, double a5)
{
  NSObject *v6;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a4 <= 3)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a4;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrU32 inputBufferLength = %d < 4, return", (uint8_t *)v8, 8u);
    }

  }
  else
  {
    *(_DWORD *)(a1 + 8) = bswap32(*a3);
    *(_DWORD *)a2 = 4;
  }
  return a4 > 3;
}

BOOL readIDSGLAttrU64(uint64_t a1, char *a2, _QWORD *a3, unsigned int a4, double a5)
{
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a4 <= 7)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, a5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109376;
      v8[1] = a4;
      v9 = 2048;
      v10 = 8;
      _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrU64 inputBufferLength = %d < sizeof(uint64_t):%lu , return", (uint8_t *)v8, 0x12u);
    }

  }
  else
  {
    *(_QWORD *)(a1 + 8) = *a3;
    *(_DWORD *)a2 = 8;
  }
  return a4 > 7;
}

BOOL readIDSGLAttrBinaryData(uint64_t a1, const char *a2, void *__src, int a4, double a5)
{
  size_t v6;
  NSObject *v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v6 = *(int *)a2;
  if ((int)v6 > a4)
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)__src, a5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)a2;
      v11[0] = 67109376;
      v11[1] = a4;
      v12 = 1024;
      v13 = v9;
      _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrBinaryData inputBufferLength = %d < *attrLength: %d, return", (uint8_t *)v11, 0xEu);
    }

  }
  else
  {
    memcpy((void *)(a1 + 12), __src, v6);
  }
  return (int)v6 <= a4;
}

uint64_t IDSQRProtoUnAllocBindResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19BADA0C4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), a2, a3, a4, a2);
}

uint64_t IDSQRProtoPutMaterialIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  IDSQRProtoPutMaterialErrorIndication *v18;
  const char *v19;
  double v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v21 += 7;
          v14 = v22++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 8) = v23;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(IDSQRProtoPutMaterialErrorIndication);
          objc_storeStrong((id *)(a1 + 24), v18);
          if (!PBReaderPlaceMark()
            || (IDSQRProtoPutMaterialErrorIndicationReadFrom((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = objc_alloc_init(IDSQRProtoMaterial);
          objc_msgSend_addMaterials_((void *)a1, v19, (uint64_t)v18, v20);
          if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v18, a2) & 1) == 0)
            goto LABEL_42;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BADDD24()
{
  IDSSysdiagnoseLogCollector *v0;
  void *v1;

  v0 = objc_alloc_init(IDSSysdiagnoseLogCollector);
  v1 = (void *)qword_1ECDD4830;
  qword_1ECDD4830 = (uint64_t)v0;

}

void sub_19BADE008(uint64_t a1, void *a2)
{
  const char *v3;
  double v4;
  const char *v5;
  double v6;
  uint64_t v7;
  void *v8;
  xpc_object_t xdict;

  xdict = a2;
  IMPrintf();
  if (MEMORY[0x1A1AC8B08](xdict) == MEMORY[0x1E0C812F8])
  {
    if (xpc_dictionary_get_BOOL(xdict, "success"))
    {
      xpc_dictionary_get_string(xdict, "path");
      IMPrintf();
      v8 = 0;
      goto LABEL_7;
    }
    IMPrintf();
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v5, *MEMORY[0x1E0CB2FE0], v6, 5, &unk_1E3C8A678);
  }
  else
  {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v3, *MEMORY[0x1E0CB2FE0], v4, 45, &unk_1E3C8A6A0);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

}

uint64_t IDSQRProtoStatsResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_59:
          v45 = 16;
          goto LABEL_76;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_63:
          *(_QWORD *)(a1 + 8) = v26;
          continue;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_67:
          v45 = 24;
          goto LABEL_76;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v19 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_71:
          v45 = 20;
          goto LABEL_76;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
          goto LABEL_73;
        v40 += 7;
        v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_75;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_73:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_75:
      v45 = 28;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoGoAwayGoAwayReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id *_IDSLinkPacketBufferCreate()
{
  return sub_19BADF294(0, 0x717uLL);
}

id *sub_19BADF294(id *a1, unint64_t a2)
{
  NSObject *v3;
  id *v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  const __CFString *v11;
  OSQueueHead *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  double v22;
  uint8_t buf[4];
  unint64_t v25;
  __int16 v26;
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0xFFFFFFFFFFFFFA30)
  {
    OSLogHandleForTransportCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v25 = a2;
      _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "Cannot create acket buffer, requestedSize too large: %zu", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(CFSTR("PacketBuffer"), CFSTR("IDS"), CFSTR("Cannot create acket buffer, requestedSize too large: %zu"));
        if (_IDSShouldLog())
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("PacketBuffer"), CFSTR("Cannot create acket buffer, requestedSize too large: %zu"));
      }
    }
    return 0;
  }
  if (a2 < 0xFA31)
    v6 = 2;
  else
    v6 = 3;
  v7 = a2 + 200;
  if (a2 < 0xFA31)
    v7 = 64248;
  if (a2 < 0x718)
    v8 = 1;
  else
    v8 = v6;
  if (a2 >= 0x718)
    v9 = v7;
  else
    v9 = 2015;
  if (v8 == 2)
  {
    v10 = (unsigned int *)&unk_1EE40B514;
    v11 = CFSTR("large");
    v12 = (OSQueueHead *)&unk_1EE40B500;
    goto LABEL_25;
  }
  if (v8 != 3)
  {
    v10 = (unsigned int *)&unk_1EE40AEB8;
    v11 = CFSTR("regular");
    v12 = (OSQueueHead *)&unk_1EE40AEC0;
LABEL_25:
    if (qword_1EE40AE90 != -1)
      dispatch_once(&qword_1EE40AE90, &unk_1E3C1BA30);
    if (byte_1EE40AE9C)
    {
      v13 = (uint64_t)OSAtomicDequeue(v12, 0);
      v4 = (id *)v13;
      if (v13)
        goto LABEL_37;
    }
    goto LABEL_29;
  }
  v10 = (unsigned int *)&unk_1EE40B510;
  v11 = CFSTR("custom");
LABEL_29:
  v4 = (id *)malloc_type_calloc(1uLL, v9 + 1288, 0x7E5EA95DuLL);
  do
    v17 = __ldaxr(v10);
  while (__stlxr(v17 + 1, v10));
  OSLogHandleForTransportCategory();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = atomic_load(v10);
    *(_DWORD *)buf = 138412546;
    v25 = (unint64_t)v11;
    v26 = 1024;
    v27 = v19;
    _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "%@ packet buffer count: %u", buf, 0x12u);
  }

  v13 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v13)
  {
    v13 = _IDSShouldLogTransport();
    if ((_DWORD)v13)
    {
      atomic_load(v10);
      _IDSLogTransport(CFSTR("PacketBuffer"), CFSTR("IDS"), CFSTR("%@ packet buffer count: %u"));
      v13 = _IDSShouldLog();
      if ((_DWORD)v13)
      {
        atomic_load(v10);
        v13 = _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("PacketBuffer"), CFSTR("%@ packet buffer count: %u"));
      }
    }
  }
LABEL_37:
  if (a1)
  {
    memcpy(v4, a1, 0x508uLL);
    v4[158] = 0;
    objc_storeStrong(v4 + 158, a1[158]);
  }
  v4[1] = (id)(v9 - 200);
  if (v9 - 200 < a2)
  {
    v20 = isRunningTests(v16, v13, v14, v15);
    if ((_DWORD)v20)
      throwsIDSAbortException(v22, v20, v21);
    abort();
  }
  *v4 = (char *)v4 + 1482;
  *((_DWORD *)v4 + 8) = 1;
  *((_BYTE *)v4 + 36) = v8;
  return v4;
}

id *_IDSLinkPacketBufferCreateWithSize(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_19BADF294(0, a3);
}

id *_IDSLinkPacketBufferCreateWithUserBuffer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id *result;

  result = sub_19BADF294(0, 0x717uLL);
  result[1] = a4;
  result[2] = a4;
  *result = a3;
  return result;
}

void _IDSLinkPacketBufferRetain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;

  if (a3)
  {
    v3 = (unsigned int *)(a3 + 32);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
}

void _IDSLinkPacketBufferRelease(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  unsigned int *v5;
  uint64_t v6;
  const char *v7;
  double v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  int v12;
  unsigned int *v13;
  const __CFString *v14;
  OSQueueHead *v15;
  BOOL v16;
  unsigned int v17;
  NSObject *v18;
  unsigned int v19;
  uint8_t buf[4];
  const __CFString *v21;
  __int16 v22;
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = (unsigned int *)(a3 + 32);
    if (!*(_DWORD *)(a3 + 32))
    {
      v6 = isRunningTests(a4, a1, a2, a3);
      if ((_DWORD)v6)
        throwsIDSAbortException(v8, v6, v7);
      abort();
    }
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      v11 = *(void **)(a3 + 1264);
      *(_QWORD *)(a3 + 1264) = 0;

      v12 = *(unsigned __int8 *)(a3 + 36);
      bzero((void *)a3, 0x508uLL);
      if (v12 == 3)
      {
        v13 = (unsigned int *)&unk_1EE40B510;
        v14 = CFSTR("custom");
      }
      else
      {
        if (qword_1EE40AE90 != -1)
          dispatch_once(&qword_1EE40AE90, &unk_1E3C1BA30);
        if (byte_1EE40AE9C)
        {
          if (v12 == 2)
            v15 = (OSQueueHead *)&unk_1EE40B500;
          else
            v15 = (OSQueueHead *)&unk_1EE40AEC0;
          OSAtomicEnqueue(v15, (void *)a3, 0);
          return;
        }
        v16 = v12 == 2;
        if (v12 == 2)
          v14 = CFSTR("large");
        else
          v14 = CFSTR("regular");
        if (v16)
          v13 = (unsigned int *)&unk_1EE40B514;
        else
          v13 = (unsigned int *)&unk_1EE40AEB8;
      }
      free((void *)a3);
      do
        v17 = __ldaxr(v13);
      while (__stlxr(v17 - 1, v13));
      OSLogHandleForTransportCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = atomic_load(v13);
        *(_DWORD *)buf = 138412546;
        v21 = v14;
        v22 = 1024;
        v23 = v19;
        _os_log_impl(&dword_19B949000, v18, OS_LOG_TYPE_DEFAULT, "release %@ packet buffer. count: %u", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          atomic_load(v13);
          _IDSLogTransport(CFSTR("PacketBuffer"), CFSTR("IDS"), CFSTR("release %@ packet buffer. count: %u"));
          if (_IDSShouldLog())
          {
            atomic_load(v13);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("PacketBuffer"), CFSTR("release %@ packet buffer. count: %u"));
          }
        }
      }
    }
  }
}

void IDSLinkPacketBufferCleanup()
{
  void *v0;
  int v1;
  unsigned int v2;
  NSObject *v3;
  unsigned int v4;
  void *v5;
  int v6;
  unsigned int v7;
  NSObject *v8;
  unsigned int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (qword_1EE40AE90 != -1)
    dispatch_once(&qword_1EE40AE90, &unk_1E3C1BA30);
  if (byte_1EE40AE9C)
  {
    v0 = OSAtomicDequeue(&stru_1EE40AEC0, 0);
    if (v0)
    {
      v1 = 0;
      do
      {
        free(v0);
        ++v1;
        v0 = OSAtomicDequeue(&stru_1EE40AEC0, 0);
      }
      while (v0);
      do
        v2 = __ldaxr((unsigned int *)&unk_1EE40AEB8);
      while (__stlxr(v2 - v1, (unsigned int *)&unk_1EE40AEB8));
      OSLogHandleForTransportCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = atomic_load((unsigned int *)&unk_1EE40AEB8);
        *(_DWORD *)buf = 67109376;
        v11 = v1;
        v12 = 1024;
        v13 = v4;
        _os_log_impl(&dword_19B949000, v3, OS_LOG_TYPE_DEFAULT, "packet buffer freed: %u remaining count: %u", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          atomic_load((unsigned int *)&unk_1EE40AEB8);
          _IDSLogTransport(CFSTR("PacketBuffer"), CFSTR("IDS"), CFSTR("packet buffer freed: %u remaining count: %u"));
          if (_IDSShouldLog())
          {
            atomic_load((unsigned int *)&unk_1EE40AEB8);
            _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("PacketBuffer"), CFSTR("packet buffer freed: %u remaining count: %u"));
          }
        }
      }
    }
    v5 = OSAtomicDequeue(&stru_1EE40B500, 0);
    if (v5)
    {
      v6 = 0;
      do
      {
        free(v5);
        v5 = OSAtomicDequeue(&stru_1EE40B500, 0);
        ++v6;
      }
      while (v5);
      do
        v7 = __ldaxr(&dword_1EE40B514);
      while (__stlxr(v7 - v6, &dword_1EE40B514));
      OSLogHandleForTransportCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = atomic_load(&dword_1EE40B514);
        *(_DWORD *)buf = 67109376;
        v11 = v6;
        v12 = 1024;
        v13 = v9;
        _os_log_impl(&dword_19B949000, v8, OS_LOG_TYPE_DEFAULT, "large packet buffer freed: %u remaining count: %u", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        atomic_load(&dword_1EE40B514);
        _IDSLogTransport(CFSTR("PacketBuffer"), CFSTR("IDS"), CFSTR("large packet buffer freed: %u remaining count: %u"));
        if (_IDSShouldLog())
        {
          atomic_load(&dword_1EE40B514);
          _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("PacketBuffer"), CFSTR("large packet buffer freed: %u remaining count: %u"));
        }
      }
    }
  }
}

id *_IDSLinkPacketBufferClone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  id *v8;
  uint64_t v9;
  char *v10;

  v4 = sub_19BADF294((id *)a3, *(_QWORD *)(a3 + 8));
  v8 = v4;
  if (v4)
  {
    v9 = (uint64_t)v4 + *(_DWORD *)a3 - (int)a3;
    v10 = (char *)*v4 + (_QWORD)v4[1] - v9;
    *v4 = (id)v9;
    v4[1] = v10;
    v4[2] = 0;
    sub_19BADFCA4(v4, v5, v6, v7);
    memcpy(*v8, *(const void **)a3, *(_QWORD *)(a3 + 16));
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
  }
  return v8;
}

_QWORD *IDSLinkPacketBufferResetBufferStart(_QWORD *result, const char *a2, uint64_t a3, double a4)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)result + (int)a2 + 1282;
  v5 = *result - (_QWORD)v4 + result[1];
  *result = v4;
  result[1] = v5;
  result[2] = 0;
  return sub_19BADFCA4(result, a2, a3, a4);
}

_QWORD *sub_19BADFCA4(_QWORD *result, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  const char *v5;
  double v6;

  if (*result - (_QWORD)result <= 0x507uLL)
  {
    v4 = isRunningTests(a4, (uint64_t)result, a2, a3);
    if ((_DWORD)v4)
      throwsIDSAbortException(v6, v4, v5);
    abort();
  }
  return result;
}

_QWORD *IDSLinkPacketBufferAddBufferStart(_QWORD *result, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  if ((_DWORD)a2)
  {
    v4 = *result;
    v5 = (result[2] - (int)a2) & ~((result[2] - (int)a2) >> 63);
    result[1] -= (int)a2;
    result[2] = v5;
    *result = v4 + (int)a2;
    return sub_19BADFCA4(result, a2, a3, a4);
  }
  return result;
}

uint64_t bufferChecksum(int8x16_t *a1, uint64_t a2, int a3)
{
  int v6;
  size_t v7;
  size_t v8;
  int v9;
  int8x16_t *v10;
  uint32x4_t v11;
  uint64_t v12;
  int8x16_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v6 = WORD1(a2);
  v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](a1);
  if (v7)
    memset((char *)v21 - 2 * v7, 170, v8);
  v9 = v6 + (unsigned __int16)a2;
  v10 = a1;
  if ((a1 & 1) != 0)
  {
    memcpy((char *)v21 - 2 * v7, a1, v7);
    v10 = (int8x16_t *)((char *)v21 - 2 * v7);
  }
  v11 = 0uLL;
  if (a2 >= 16)
  {
    v12 = (a2 >> 4) + 1;
    do
    {
      v13 = *v10++;
      v11 = vpadalq_u16(v11, (uint16x8_t)vrev16q_s8(v13));
      --v12;
    }
    while (v12 > 1);
  }
  v14 = v9 + a3 + vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v11), 1), v11).u32[0];
  v15 = &a1->i8[a2];
  if ((a2 & 1) != 0)
  {
    v16 = *--v15;
    v14 += v16 << 8;
  }
  v17 = (a2 >> 1) & 7;
  if (v17)
  {
    v18 = v15 - 1;
    v19 = v17 + 1;
    do
    {
      v14 += bswap32(*(unsigned __int16 *)(v18 - 1)) >> 16;
      v18 -= 2;
      --v19;
    }
    while (v19 > 1);
  }
  if (v14 >= 0x10000)
  {
    do
      v14 = HIWORD(v14) + (unsigned __int16)v14;
    while (HIWORD(v14));
  }
  return (unsigned __int16)~(_WORD)v14;
}

uint64_t sub_19BADFE60()
{
  const char *zone_name;
  int v1;
  _BOOL4 v2;
  BOOL v3;
  uint64_t result;
  NSObject *v5;
  const __CFString *v6;
  uint8_t buf[4];
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  zone_name = malloc_get_zone_name(*(malloc_zone_t **)*MEMORY[0x1E0C83FC0]);
  if (zone_name)
  {
    v1 = strcmp(zone_name, "ProbGuardMallocZone");
    v2 = v1 == 0;
    v3 = v1 != 0;
  }
  else
  {
    v2 = 0;
    v3 = 1;
  }
  byte_1EE40AE9C = v3;
  result = IMGetDomainBoolForKeyWithDefaultValue();
  byte_1EE40AE9C = result;
  if ((result & 1) == 0)
  {
    OSLogHandleForTransportCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = CFSTR("NO");
      if (v2)
        v6 = CFSTR("YES");
      *(_DWORD *)buf = 138412290;
      v8 = v6;
      _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "Memory pool disabled! (PGM enabled: %@)", buf, 0xCu);
    }

    result = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)result)
    {
      result = _IDSShouldLogTransport();
      if ((_DWORD)result)
      {
        _IDSLogTransport(CFSTR("PacketBuffer"), CFSTR("IDS"), CFSTR("Memory pool disabled! (PGM enabled: %@)"));
        result = _IDSShouldLog();
        if ((_DWORD)result)
          return _IDSLogV(0, CFSTR("IDSFoundation"), CFSTR("PacketBuffer"), CFSTR("Memory pool disabled! (PGM enabled: %@)"));
      }
    }
  }
  return result;
}

id sub_19BAE0240(void *a1, const char *a2, double a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  double v14;
  void *v15;
  const char *v16;
  double v17;
  void *v18;

  objc_msgSend_subdataWithRange_(a1, a2, 0, a3, 20);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_debugDescription(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x1E0CB3940];
  v12 = objc_msgSend_length(v7, v9, v10, v11);
  objc_msgSend_substringToIndex_(v7, v13, v12 - 1, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v8, v16, (uint64_t)CFSTR("%@ ...>"), v17, v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

void sub_19BAE0588(uint64_t a1, void *a2, unint64_t a3)
{
  const char *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  double v19;
  void *v20;
  const char *v21;
  double v22;
  id v23;

  v23 = a2;
  if (!a3 && (*(_BYTE *)(a1 + 48) & 0x10) != 0)
    objc_msgSend_appendString_(*(void **)(a1 + 32), v5, (uint64_t)CFSTR("\n"), v6);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if ((v7 & 0x10) != 0 && (v8 & 0x8000000000000000) == 0)
  {
    v9 = -1;
    do
    {
      objc_msgSend_appendString_(*(void **)(a1 + 32), v5, (uint64_t)CFSTR("  "), v6);
      v8 = *(_QWORD *)(a1 + 56);
      ++v9;
    }
    while (v9 < v8);
    v7 = *(_QWORD *)(a1 + 48);
  }
  v10 = *(void **)(a1 + 32);
  objc_msgSend_descriptionForObject_options_level_(*(void **)(a1 + 64), v5, (uint64_t)v23, v6, v7, v8 + 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v10, v12, (uint64_t)v11, v13);

  if (objc_msgSend_count(*(void **)(a1 + 40), v14, v15, v16) - 1 <= a3)
  {
    if (objc_msgSend_count(*(void **)(a1 + 40), v17, v18, v19) - 1 == a3 && (*(_BYTE *)(a1 + 48) & 0x10) != 0)
      objc_msgSend_appendString_(*(void **)(a1 + 32), v21, (uint64_t)CFSTR("\n"), v22);
  }
  else
  {
    v20 = *(void **)(a1 + 32);
    if ((*(_QWORD *)(a1 + 48) & 0x10) != 0)
      objc_msgSend_appendString_(v20, v17, (uint64_t)CFSTR(",\n"), v19);
    else
      objc_msgSend_appendString_(v20, v17, (uint64_t)CFSTR(", "), v19);
  }

}

uint64_t IDSQRProtoParticipantUpdateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 16)
        break;
      if ((_DWORD)v18 == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            while (1)
            {
              v34 = *v3;
              v35 = *(_QWORD *)(a2 + v34);
              if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
                break;
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_47;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedUInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (1)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
              break;
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_68;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_68:
          PBRepeatedUInt64Add();
        }
        goto LABEL_69;
      }
      if ((_DWORD)v18 == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_51;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_53:
        v37 = 32;
LABEL_58:
        *(_DWORD *)(a1 + v37) = v21;
        goto LABEL_69;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_69:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v21 = 0;
    *(_BYTE *)(a1 + 40) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v21 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
        goto LABEL_55;
      v25 += 7;
      v14 = v26++ >= 9;
      if (v14)
      {
        LODWORD(v21) = 0;
        goto LABEL_57;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v21) = 0;
LABEL_57:
    v37 = 36;
    goto LABEL_58;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19BAE2B3C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a3, sel__refreshServerTime, a4, a1);
}

id sub_19BAE3344()
{
  if (qword_1EE40AF20 != -1)
    dispatch_once(&qword_1EE40AF20, &unk_1E3C1C070);
  return (id)qword_1EE40AF28;
}

uint64_t sub_19BAE3424()
{
  uint64_t result;

  result = CUTWeakLinkClass();
  qword_1EE40AF28 = result;
  return result;
}

void sub_19BAE3450()
{
  id *v0;

  v0 = (id *)MEMORY[0x1A1AC7380]("APSEnvironmentProduction", CFSTR("ApplePushService"));
  objc_storeStrong((id *)&qword_1EE40AF30, *v0);
}

void sub_19BAE3480()
{
  id *v0;

  v0 = (id *)MEMORY[0x1A1AC7380]("APSConnectionOverrideNamedDelegatePort", CFSTR("ApplePushService"));
  objc_storeStrong((id *)&qword_1EE40AF40, *v0);
}

void sub_19BAE3870(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[5];
    v6 = a1[6];
    v8 = a1[4];
    v9 = 138412802;
    v10 = v8;
    v11 = 2048;
    v12 = v6;
    v13 = 2112;
    v14 = v7;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "setDesiredMaterialsForSession: sessionID: %@ %lu items, scheduling update, material types: %@", (uint8_t *)&v9, 0x20u);
  }

}

uint64_t sub_19BAE3A40(uint64_t result, char a2, uint64_t a3, double a4)
{
  if ((a2 & 1) == 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(result + 32), sel_update, a3, a4);
  return result;
}

void sub_19BAE4194(uint64_t a1, void *a2)
{
  IDSQRProtoMaterial *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  void *v11;
  const char *v12;
  double v13;
  id v14;
  id v15;
  const char *v16;
  double v17;
  const char *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  const char *v27;
  double v28;
  const char *v29;
  double v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;

  v31 = a2;
  v3 = objc_alloc_init(IDSQRProtoMaterial);
  objc_msgSend_materialDataByID(v31, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v9 = *(void **)(a1 + 32);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)v31, (uint64_t)CFSTR("desiredMaterialToSend: %@, materialDataByID: %@"), v10, v31, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v9, v12, (uint64_t)v11, v13);

  if (v7)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_19BAE4304;
    v32[3] = &unk_1E3C222F0;
    v32[4] = *(_QWORD *)(a1 + 40);
    v14 = v31;
    v33 = v14;
    v15 = v8;
    v34 = v15;
    v35 = *(id *)(a1 + 48);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v7, v16, (uint64_t)v32, v17);
    if (objc_msgSend_count(v15, v18, v19, v20))
    {
      objc_msgSend_setMaterialInfos_(v3, v21, (uint64_t)v15, v22);
      v26 = objc_msgSend_forParticipantID(v14, v23, v24, v25);
      objc_msgSend_setReceiverParticipantId_(v3, v27, v26, v28);
      objc_msgSend_addObject_(*(void **)(a1 + 56), v29, (uint64_t)v3, v30);
    }

  }
}

void sub_19BAE4304(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  const char *v18;
  double v19;
  double v20;
  char *v21;

  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = a3;
  v8 = a2;
  v12 = objc_msgSend_type(v6, v9, v10, v11);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v17 = objc_msgSend_requireSignature(*(void **)(a1 + 40), v14, v15, v16);
  objc_msgSend_buildMaterialInfoForDesiredMaterialData_materialType_materialID_sessionID_requireSign_(v5, v18, (uint64_t)v7, v19, v12, v8, v13, v17);
  v21 = (char *)objc_claimAutoreleasedReturnValue();

  if (v21)
    objc_msgSend_addObject_(*(void **)(a1 + 48), v21, (uint64_t)v21, v20);
  else
    objc_msgSend_addObject_(*(void **)(a1 + 56), 0, *(_QWORD *)(a1 + 40), v20);

}

void sub_19BAE43B8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "materialProtosForDesiredMaterials: %@", (uint8_t *)&v7, 0xCu);
  }

}

void sub_19BAE4820(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    v7 = a1[5];
    v8 = a1[6];
    v9 = 138412802;
    v10 = v6;
    v11 = 2112;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "update: desired: %@, server: %@, delta: %@", (uint8_t *)&v9, 0x20u);
  }

}

void sub_19BAE48E4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "update: materialsToSend: %@", (uint8_t *)&v7, 0xCu);
  }

}

uint64_t IDSQRProtoUnAllocBindLeaveInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  IDSQRProtoMaterial *v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_45;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if ((_DWORD)v17 == 2)
      {
        v30 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 16), v30);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v30, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_23;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
LABEL_23:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 3u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_48;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_48:
          v38 = 16;
          goto LABEL_53;
        case 4u:
          v27 = 0;
          v28 = 0;
          v23 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v23 |= (unint64_t)(v31 & 0x7F) << v27;
              if (v31 < 0)
              {
                v27 += 7;
                v14 = v28++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_52:
          v38 = 32;
LABEL_53:
          *(_DWORD *)(a1 + v38) = v23;
          continue;
        case 5u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_55;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          v34 = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        v34 = 0;
LABEL_57:
      *(_BYTE *)(a1 + 36) = v34 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *IDSEndpointTransparencyVerificationStateString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 2)
    return CFSTR("Unknown");
  else
    return off_1E3C22350[a1 + 1];
}

void sub_19BAE7798(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  if (IMShouldLog())
    IMLogString_V();

}

void sub_19BAE7808(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  if (IMShouldLog())
    IMLogString_V();

}

uint64_t sub_19BAE7AE0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v10[16];

  OSLogHandleForIDSCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_19B949000, v2, OS_LOG_TYPE_DEBUG, "URL Loading service disconnected", v10, 2u);
  }

  v3 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v3)
  {
    sub_19BAE7798(v3, (uint64_t)v4, CFSTR("URL Loading service disconnected"));
    sub_19BAE7808(v7, v8, CFSTR("URL Loading service disconnected"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  return objc_msgSend__disconnected(*(void **)(a1 + 32), v4, v5, v6);
}

void sub_19BAE7D5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  IMGetXPCArrayFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForIDSCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "** RECEIVING remote fetch iMessage account info request response:", buf, 2u);
  }

  v6 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v6)
  {
    sub_19BAE7798(v6, v7, CFSTR("** RECEIVING remote fetch iMessage account info request response:"));
    sub_19BAE7808(v8, v9, CFSTR("** RECEIVING remote fetch iMessage account info request response:"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  OSLogHandleForIDSCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v16 = v4;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "                      iMessageAccountInfo: %@", buf, 0xCu);
  }

  v11 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v11)
  {
    sub_19BAE7798(v11, v12, CFSTR("                      iMessageAccountInfo: %@"));
    sub_19BAE7808(v13, v14, CFSTR("                      iMessageAccountInfo: %@"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));

}

void sub_19BAE80DC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  IMGetXPCDictionaryFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForIDSCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v5, OS_LOG_TYPE_DEFAULT, "** RECEIVING remote fetch remote accounts info request response:", buf, 2u);
  }

  v6 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v6)
  {
    sub_19BAE7798(v6, v7, CFSTR("** RECEIVING remote fetch remote accounts info request response:"));
    sub_19BAE7808(v8, v9, CFSTR("** RECEIVING remote fetch remote accounts info request response:"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  OSLogHandleForIDSCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v16 = v4;
    _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "                      Account Info Map: %@", buf, 0xCu);
  }

  v11 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v11)
  {
    sub_19BAE7798(v11, v12, CFSTR("                      Account Info Map: %@"));
    sub_19BAE7808(v13, v14, CFSTR("                      Account Info Map: %@"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));

}

uint64_t sub_19BAE83D8(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  double v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t result;
  int v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = IMGetXPCBoolFromDictionary();
  objc_msgSend_registration(MEMORY[0x1E0D36AA8], v3, v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    if (v2)
      v7 = CFSTR("YES");
    v9 = 138412290;
    v10 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "Sent IDSRemoteCredentialCommandRequestDeviceInfo command to other side: %@", (uint8_t *)&v9, 0xCu);
  }

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_19BAE86E4(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_prefixedURI(a3, (const char *)a3, a4, a1);
}

void sub_19BAE86EC(uint64_t a1, void *a2)
{
  __CFString *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  const char *v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  __CFString *v41;
  const char *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  const char *v50;
  void *v51;
  double v52;
  void *v53;
  const char *v54;
  double v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  double v59;
  void *v60;
  __CFString *v61;
  void *v62;
  unsigned int v63;
  __CFString *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t v69[128];
  uint8_t buf[4];
  const __CFString *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  OSLogHandleForIDSCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v71 = v3;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "IDS Remote Credential Completion block for remote ID Status Query received response %@", buf, 0xCu);
  }

  v5 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v5)
  {
    sub_19BAE7798(v5, v6, CFSTR("IDS Remote Credential Completion block for remote ID Status Query received response %@"));
    v61 = v3;
    sub_19BAE7808(v7, v8, CFSTR("IDS Remote Credential Completion block for remote ID Status Query received response %@"));
    if ((_IMWillLog() & 1) != 0)
    {
      v61 = v3;
      _IMAlwaysLog();
    }
  }
  v63 = IMGetXPCBoolFromDictionary();
  IMGetXPCDictionaryFromDictionary();
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URIWithPrefixedURI_withServiceLoggingHint_(IDSURI, v10, (uint64_t)v62, v11, *(_QWORD *)(a1 + 32));
  v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
  OSLogHandleForIDSCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B949000, v12, OS_LOG_TYPE_DEFAULT, "** RECEIVING remote ID Status V2 Query response:", buf, 2u);
  }

  v13 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v13)
  {
    sub_19BAE7798(v13, v14, CFSTR("** RECEIVING remote ID Status V2 Query response:"));
    sub_19BAE7808(v15, v16, CFSTR("** RECEIVING remote ID Status V2 Query response:"));
    if ((_IMWillLog() & 1) != 0)
      _IMAlwaysLog();
  }
  OSLogHandleForIDSCategory();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = CFSTR("NO");
    if (v63)
      v18 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v71 = v18;
    _os_log_impl(&dword_19B949000, v17, OS_LOG_TYPE_DEFAULT, "                      Query Result: %@", buf, 0xCu);
  }

  v19 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v19)
  {
    v21 = v63 ? CFSTR("YES") : CFSTR("NO");
    sub_19BAE7798(v19, v20, CFSTR("                      Query Result: %@"));
    v61 = v21;
    sub_19BAE7808(v22, v23, CFSTR("                      Query Result: %@"));
    if ((_IMWillLog() & 1) != 0)
    {
      v61 = v21;
      _IMAlwaysLog();
    }
  }
  OSLogHandleForIDSCategory();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v71 = v64;
    _os_log_impl(&dword_19B949000, v24, OS_LOG_TYPE_DEFAULT, "                      FromURI: %@", buf, 0xCu);
  }

  v25 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v25)
  {
    sub_19BAE7798(v25, v26, CFSTR("                      FromURI: %@"));
    v61 = v64;
    sub_19BAE7808(v27, v28, CFSTR("                      FromURI: %@"));
    if ((_IMWillLog() & 1) != 0)
    {
      v61 = v64;
      _IMAlwaysLog();
    }
  }
  OSLogHandleForIDSCategory();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v71 = v9;
    _os_log_impl(&dword_19B949000, v29, OS_LOG_TYPE_DEFAULT, "                      ID Status Updates: %@", buf, 0xCu);
  }

  v30 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v30)
  {
    sub_19BAE7798(v30, v31, CFSTR("                      ID Status Updates: %@"));
    v61 = v9;
    sub_19BAE7808(v32, v33, CFSTR("                      ID Status Updates: %@"));
    if ((_IMWillLog() & 1) != 0)
    {
      v61 = v9;
      _IMAlwaysLog();
    }
  }
  OSLogHandleForIDSCategory();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *(const __CFString **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v71 = v35;
    _os_log_impl(&dword_19B949000, v34, OS_LOG_TYPE_DEFAULT, "                      Service: %@", buf, 0xCu);
  }

  v36 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v36)
  {
    sub_19BAE7798(v36, v37, CFSTR("                      Service: %@"));
    v61 = *(__CFString **)(a1 + 32);
    sub_19BAE7808(v38, v39, CFSTR("                      Service: %@"));
    if ((_IMWillLog() & 1) != 0)
    {
      v61 = *(__CFString **)(a1 + 32);
      _IMAlwaysLog();
    }
  }
  v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v41 = v9;
  v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v65, v43, v69, 16);
  if (v45)
  {
    v47 = *(_QWORD *)v66;
    do
    {
      for (i = 0; i != v45; ++i)
      {
        if (*(_QWORD *)v66 != v47)
          objc_enumerationMutation(v41);
        v49 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_msgSend_URIWithPrefixedURI_withServiceLoggingHint_(IDSURI, v44, v49, v46, *(_QWORD *)(a1 + 32), v61);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        if (v51)
        {
          objc_msgSend_objectForKeyedSubscript_(v41, v50, v49, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v40, v54, (uint64_t)v53, v55, v51);

        }
      }
      v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v44, (uint64_t)&v65, v46, v69, 16);
    }
    while (v45);
  }

  v56 = *(_QWORD *)(a1 + 40);
  v60 = (void *)objc_msgSend_copy(v40, v57, v58, v59);
  (*(void (**)(uint64_t, void *, __CFString *, _QWORD, _QWORD, _QWORD))(v56 + 16))(v56, v60, v64, *(_QWORD *)(a1 + 32), v63, 0);

}

uint64_t sub_19BAE8F58(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  double v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t result;
  int v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = IMGetXPCBoolFromDictionary();
  objc_msgSend_accountSync(MEMORY[0x1E0D36AA8], v3, v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    if ((_DWORD)v2)
      v7 = CFSTR("YES");
    v9 = 138412290;
    v10 = v7;
    _os_log_impl(&dword_19B949000, v6, OS_LOG_TYPE_DEFAULT, "Sent IDSRemoteCredentialCommandAccountSyncMessage to paired device (success: %@)", (uint8_t *)&v9, 0xCu);
  }

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, v2, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_19BAE9234(void **a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  _DWORD *v39;
  int v40;
  dispatch_time_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (**v48)(void *, _QWORD);
  id v49;
  void *v50;
  _QWORD block[5];
  id v52;
  id v53;
  uint8_t buf[4];
  _DWORD v55[7];

  *(_QWORD *)&v55[5] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = MEMORY[0x1A1AC8B08]();
  v8 = objc_msgSend_copy(a1[6], v5, v6, v7);
  v9 = (void *)v8;
  if (v4 != MEMORY[0x1E0C81310])
  {
    if (v8)
      (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);
    goto LABEL_44;
  }
  if (v3 == (id)MEMORY[0x1E0C81260])
  {
    OSLogHandleForIDSCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v15, OS_LOG_TYPE_DEFAULT, "received XPC_ERROR_CONNECTION_INVALID", buf, 2u);
    }

    v16 = os_log_shim_legacy_logging_enabled();
    if (!(_DWORD)v16)
      goto LABEL_16;
    sub_19BAE7798(v16, v17, CFSTR("received XPC_ERROR_CONNECTION_INVALID"));
    sub_19BAE7808(v18, v19, CFSTR("received XPC_ERROR_CONNECTION_INVALID"));
    if ((_IMWillLog() & 1) == 0)
      goto LABEL_16;
  }
  else
  {
    if (v3 != (id)MEMORY[0x1E0C81258])
      goto LABEL_16;
    OSLogHandleForIDSCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v10, OS_LOG_TYPE_DEFAULT, "received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 2u);
    }

    v11 = os_log_shim_legacy_logging_enabled();
    if (!(_DWORD)v11)
      goto LABEL_16;
    sub_19BAE7798(v11, v12, CFSTR("received XPC_ERROR_CONNECTION_INTERRUPTED"));
    sub_19BAE7808(v13, v14, CFSTR("received XPC_ERROR_CONNECTION_INTERRUPTED"));
    if ((_IMWillLog() & 1) == 0)
      goto LABEL_16;
  }
  _IMAlwaysLog();
LABEL_16:
  OSLogHandleForIDSCategory();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = a1[4];
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v55 = v21;
    _os_log_impl(&dword_19B949000, v20, OS_LOG_TYPE_DEFAULT, "Loaded disconnected for request: (%p)", buf, 0xCu);
  }

  v22 = os_log_shim_legacy_logging_enabled();
  if ((_DWORD)v22)
  {
    sub_19BAE7798(v22, v23, CFSTR("Loaded disconnected for request: (%p)"));
    v50 = a1[4];
    sub_19BAE7808(v24, v25, CFSTR("Loaded disconnected for request: (%p)"));
    if ((_IMWillLog() & 1) != 0)
    {
      v50 = a1[4];
      _IMAlwaysLog();
    }
  }
  OSLogHandleForIDSCategory();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    v27 = a1[4];
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v55 = v27;
    _os_log_impl(&dword_19B949000, v26, OS_LOG_TYPE_ERROR, "Remote loader crashed for credential request: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    sub_19BAE9978();
    sub_19BAE99C0();
    v50 = a1[4];
    _IDSWarnV();
  }
  objc_msgSend__disconnected(a1[4], v28, v29, v30, v50);
  if (*((_BYTE *)a1[4] + 20) && *((int *)a1[4] + 4) <= 4)
  {
    OSLogHandleForIDSCategory();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v32 = *((_DWORD *)a1[4] + 4);
      *(_DWORD *)buf = 67109376;
      v55[0] = v32;
      LOWORD(v55[1]) = 1024;
      *(_DWORD *)((char *)&v55[1] + 2) = 5;
      _os_log_impl(&dword_19B949000, v31, OS_LOG_TYPE_DEFAULT, " => Retrying... (%d/%d) retries", buf, 0xEu);
    }

    v33 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v33)
    {
      sub_19BAE7798(v33, v34, CFSTR(" => Retrying... (%d/%d) retries"));
      sub_19BAE7808(v35, v36, CFSTR(" => Retrying... (%d/%d) retries"));
      if ((_IMWillLog() & 1) != 0)
        _IMAlwaysLog();
    }
    OSLogHandleForIDSCategory();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = *((_DWORD *)a1[4] + 4);
      *(_DWORD *)buf = 67109376;
      v55[0] = v38;
      LOWORD(v55[1]) = 1024;
      *(_DWORD *)((char *)&v55[1] + 2) = 5;
      _os_log_impl(&dword_19B949000, v37, OS_LOG_TYPE_ERROR, " => Retrying... (%d/%d) retries", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      sub_19BAE9978();
      sub_19BAE99C0();
      _IDSWarnV();
    }
    v39 = a1[4];
    v40 = v39[4];
    v39[4] = v40 + 1;
    v41 = dispatch_time(0, 2000000000 * v40);
    im_primary_queue();
    v42 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19BAE9A08;
    block[3] = &unk_1E3C223C0;
    block[4] = a1[4];
    v52 = a1[5];
    v53 = a1[6];
    dispatch_after(v41, v42, block);

  }
  else
  {
    OSLogHandleForIDSCategory();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B949000, v43, OS_LOG_TYPE_DEFAULT, "Not retrying, calling completion block", buf, 2u);
    }

    v44 = os_log_shim_legacy_logging_enabled();
    if ((_DWORD)v44)
    {
      sub_19BAE7798(v44, v45, CFSTR("Not retrying, calling completion block"));
      sub_19BAE7808(v46, v47, CFSTR("Not retrying, calling completion block"));
      if ((_IMWillLog() & 1) != 0)
        _IMAlwaysLog();
    }
    v48 = (void (**)(void *, _QWORD))a1[6];
    if (v48)
      v48[2](v48, 0);
  }
LABEL_44:
  v49 = (id)objc_opt_self();

}

uint64_t sub_19BAE9978()
{
  return IMWarnString_V();
}

uint64_t sub_19BAE99C0()
{
  return IMWarnString_V();
}

uint64_t sub_19BAE9A08(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendMessage_withCompletionBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a3, *(_QWORD *)(a1 + 48));
}

uint64_t IDSQRProtoChannelExperimentReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t result;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  void *v46;
  uint64_t v47;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        if (v13 == -1 || v13 >= *(_QWORD *)(a2 + *v5))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          v11 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(_BYTE *)(a2 + *v6))
        v11 = 0;
LABEL_14:
      v17 = v11 & 7;
      if (v16 || (_DWORD)v17 == 4)
        break;
      v19 = (const char *)(v11 >> 3);
      switch((v11 >> 3))
      {
        case 0u:
          v20 = 0;
          do
          {
            v21 = *v4;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
              goto LABEL_66;
            }
            v23 = v22 + 1;
            v24 = *(char *)(*(_QWORD *)(a2 + *v8) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0)
              break;
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (2)
          {
            v30 = *v4;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
              *(_QWORD *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v15 = v28++ >= 9;
                if (v15)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_56:
          v47 = 8;
          goto LABEL_65;
        case 2u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 1;
          *(_BYTE *)(a1 + 48) |= 8u;
          while (2)
          {
            v36 = *v4;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v15 = v34++ >= 9;
                if (v15)
                {
                  v35 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v35 = 0;
LABEL_60:
          *(_BYTE *)(a1 + 44) = v35 != 0;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 2;
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 32;
          goto LABEL_51;
        case 4u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          v41 = 0;
          v42 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 3;
          *(_BYTE *)(a1 + 48) |= 2u;
          break;
        case 5u:
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 16;
LABEL_51:
          v46 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v43 = *v4;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v5))
          break;
        v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v44);
        *(_QWORD *)(a2 + v43) = v44 + 1;
        v29 |= (unint64_t)(v45 & 0x7F) << v41;
        if ((v45 & 0x80) == 0)
          goto LABEL_62;
        v41 += 7;
        v15 = v42++ >= 9;
        if (v15)
        {
          LODWORD(v29) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v6))
        LODWORD(v29) = 0;
LABEL_64:
      v47 = 24;
LABEL_65:
      *(_DWORD *)(a1 + v47) = v29;
LABEL_66:
      ;
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

void sub_19BAEC9E4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BAECA84(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BAECB24(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BAECBB8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BAECC3C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BAECCC0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BAECD54(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id IDSRealTimeContext()
{
  if (qword_1EE40AD30 != -1)
    dispatch_once(&qword_1EE40AD30, &unk_1E3C1BA90);
  return (id)qword_1EE40AD38;
}

uint64_t sub_19BAECE78()
{
  uint64_t v0;
  void *v1;

  v0 = nw_context_create();
  v1 = (void *)qword_1EE40AD38;
  qword_1EE40AD38 = v0;

  nw_context_set_isolate_protocol_stack();
  nw_context_set_scheduling_mode();
  return nw_context_activate();
}

BOOL IDSQRProtoH3EndToEndChannelRegisterRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark()
      || (IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19BAEDD18()
{
  const char *v0;
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE40AFA0)
    v0 = "had salt from daemon, value changed";
  else
    v0 = "just recevied salt from daemon";
  v1 = 136315138;
  v2 = v0;
  _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "IDSLoggableDescriptionSalt changed - %s", (uint8_t *)&v1, 0xCu);
}

void sub_19BAEDDB4(char a1, char a2, os_log_t log)
{
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;
  __int16 v8;
  const __CFString *v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("YES");
  if (byte_1ECDD48B0)
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  if ((a1 & 1) != 0)
    v5 = CFSTR("YES");
  else
    v5 = CFSTR("NO");
  v6 = 138412802;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  if ((a2 & 1) == 0)
    v3 = CFSTR("NO");
  v10 = 2112;
  v11 = v3;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "Checked bag access permission -- allowed? %@ {hasMachAccess: %@, hasEntitlements: %@}", (uint8_t *)&v6, 0x20u);
}

void sub_19BAEDE70(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "_processAllowedToLoadBag - Unable to get audit token!", v1, 2u);
}

void sub_19BAEDEB0()
{
  __assert_rtn("IDSByteBufferInitForWriteWithAllocatedSpace", "IDSFieldReaderWriter.m", 17, "buffer != NULL");
}

void sub_19BAEDED8()
{
  __assert_rtn("IDSByteBufferInitForWrite", "IDSFieldReaderWriter.m", 28, "buffer != NULL");
}

void sub_19BAEDF00()
{
  __assert_rtn("IDSByteBufferInitForRead", "IDSFieldReaderWriter.m", 42, "buffer != NULL");
}

void sub_19BAEDF28()
{
  __assert_rtn("IDSByteBufferReallocateBuffer", "IDSFieldReaderWriter.m", 53, "buffer != NULL");
}

void sub_19BAEDF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B976168(&dword_19B949000, MEMORY[0x1E0C81028], a3, "Could not allocate for too large byte buffer!", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEDF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B976168(&dword_19B949000, MEMORY[0x1E0C81028], a3, "Could not allocate new memory for byte buffer!", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEDFB8()
{
  __assert_rtn("IDSByteBufferWriteField", "IDSFieldReaderWriter.m", 78, "buffer != NULL");
}

void sub_19BAEDFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B976168(&dword_19B949000, MEMORY[0x1E0C81028], a3, "Was told not to allocate new memory for byte buffer, but the buffer ran out of space!", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEE014()
{
  __assert_rtn("IDSByteBufferReadField", "IDSFieldReaderWriter.m", 102, "buffer != NULL");
}

void sub_19BAEE03C()
{
  __assert_rtn("IDSByteBufferRelease", "IDSFieldReaderWriter.m", 127, "buffer != NULL");
}

void sub_19BAEE064(uint64_t a1)
{
  NSObject *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138478083;
  v3 = a1;
  sub_19B97D7D8();
  sub_19B97D788(&dword_19B949000, v1, (uint64_t)v1, "Missing kLegacyFullIdentityKey - failed to create IDSMPFullDeviceIdentityContainer from data {dict: %{private}@, dataRepresentation: %{private}@}", (uint8_t *)&v2);
  sub_19B97D7E8();
}

void sub_19BAEE0D4(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = *a1;
  else
    v1 = 0;
  v3 = 138543619;
  v4 = v1;
  sub_19B97D7D8();
  sub_19B97D788(&dword_19B949000, v2, (uint64_t)v2, "Failed to create IDSMPFullDeviceIdentityContainer from parameters -- Failed to deserialize IDSMPFullDeviceIdentityContainer {error: %{public}@, dict: %{private}@}", (uint8_t *)&v3);
  sub_19B97D7E8();
}

void sub_19BAEE154()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19B97D8CC();
  sub_19B97D788(&dword_19B949000, v0, v1, "Missing legacyFullIdentity - Fail to create IDSMPFullDeviceIdentityContainer {legacyFullIdentity: %{private}@, ngmFullDeviceIdentity: %{private}@}", v2);
  sub_19B97D7E8();
}

void sub_19BAEE1B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint8_t v9[24];

  sub_19B97D868();
  v3 = (void *)sub_19B97D82C(v1, v2);
  objc_msgSend_debugDescription(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D788(&dword_19B949000, v0, v8, "Failed to get publicLegacyIdentity - Failed {error: %{public}@, deviceIdentityContainer: %{private}@}", v9);

  sub_19B97D778();
}

void sub_19BAEE23C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint8_t v9[24];

  sub_19B97D868();
  v3 = (void *)sub_19B97D82C(v1, v2);
  objc_msgSend_debugDescription(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D788(&dword_19B949000, v0, v8, "Failed to get publicNGMIdentity - Failed to create publicDeviceIdentityContainer {error: %{public}@, deviceIdentityContainer: %{private}@}", v9);

  sub_19B97D778();
}

void sub_19BAEE2C0(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = *a1;
  else
    v1 = 0;
  v3 = 138543619;
  v4 = v1;
  sub_19B97D7D8();
  sub_19B97D788(&dword_19B949000, v2, (uint64_t)v2, "Failed to serialize legacyFullIdentity - failed to serialize IDSMPFullDeviceIdentityContainer {error: %{public}@, container: %{private}@}", (uint8_t *)&v3);
  sub_19B97D7E8();
}

void sub_19BAEE340(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = *a1;
  else
    v1 = 0;
  v3 = 138543619;
  v4 = v1;
  sub_19B97D7D8();
  sub_19B97D788(&dword_19B949000, v2, (uint64_t)v2, "Failed to serialize - failed to serialize IDSMPFullDeviceIdentityContainer {error: %{public}@, container: %{private}@}", (uint8_t *)&v3);
  sub_19B97D7E8();
}

void sub_19BAEE3C0(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_msgSend_debugDescription(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D8A8(&dword_19B949000, v5, v6, "Called unseal message without identifier -- This should never happen {container: %{private}@}", v7, v8, v9, v10, 3u);

  sub_19B97D8F0();
}

void sub_19BAEE440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint8_t v9[24];

  sub_19B97D868();
  v3 = (void *)sub_19B97D82C(v1, v2);
  objc_msgSend_debugDescription(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D788(&dword_19B949000, v0, v8, "Missing ngm signing identity - fail to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9);

  sub_19B97D778();
}

void sub_19BAEE4C4()
{
  NSObject *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];
  uint64_t v8;

  sub_19B97D8E4();
  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_debugDescription(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7AC();
  sub_19B97D788(&dword_19B949000, v0, v6, "Missing ngm encrypting identity - fail to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7);

  sub_19B97D778();
}

void sub_19BAEE548()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  sub_19B97D858();
  objc_msgSend_ngmVersion(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ngmVersion(v0, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7F0();
  sub_19B97D894(&dword_19B949000, v10, v11, "Failed  to ngm unseal message due to mismatching versions {encryptingIdentity.ngmVersion: %{public}@, signingIdentity.ngmVersion: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v12, v13, v14, v15, v16);

  sub_19B97D874();
}

void sub_19BAEE5DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint8_t v11[40];
  uint64_t v12;

  sub_19B97D858();
  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend_debugDescription(*(void **)(v2 + 40), (const char *)v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_debugDescription(*(void **)(v1 + 48), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D838();
  sub_19B97D888(&dword_19B949000, v0, v10, "MessageProtection failed to decrypt with ngm identities - fail to unseal message {error: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v11);

  sub_19B97D8BC();
}

void sub_19BAEE678()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_19B97D868();
  v2 = (void *)sub_19B97D82C(v0, v1);
  objc_msgSend_debugDescription(v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D7C4(&dword_19B949000, v7, v8, "Missing legacy signing identity - failed to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9, v10, v11, v12, v13);

  sub_19B97D778();
}

void sub_19BAEE6F4()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_19B97D8E4();
  objc_msgSend_debugDescription(v0, v1, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7AC();
  sub_19B97D7C4(&dword_19B949000, v5, v6, "Missing legacy encrypting identity - failed to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7, v8, v9, v10, v11);

  sub_19B97D778();
}

void sub_19BAEE770()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint8_t v11[40];
  uint64_t v12;

  sub_19B97D858();
  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend_debugDescription(*(void **)(v2 + 32), (const char *)v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_debugDescription(*(void **)(v1 + 40), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D838();
  sub_19B97D888(&dword_19B949000, v0, v10, "MessageProtection failed to decrypt with ngm identities - fail to unseal paddy message {error: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v11);

  sub_19B97D8BC();
}

void sub_19BAEE80C()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[22];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_19B97D8CC();
  v3 = 2114;
  v4 = v0;
  sub_19B97D888(&dword_19B949000, v1, (uint64_t)v1, "Missing legacyPublicIdentity - Failed to create IDSMPPublicDeviceIdentityContainer {legacyPublicIdentity: %{private}@, ngmPublicDeviceIdentity: %{private}@, ngmVersion: %{public}@}", v2);
  sub_19B97D8F0();
}

void sub_19BAEE880(uint64_t a1)
{
  NSObject *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138478083;
  v3 = a1;
  sub_19B97D7D8();
  sub_19B97D788(&dword_19B949000, v1, (uint64_t)v1, "Missing kLegacyFullIdentityKey - failed to create IDSMPPublicDeviceIdentityContainer from data {dict: %{private}@, dataRepresentation: %{private}@}", (uint8_t *)&v2);
  sub_19B97D7E8();
}

void sub_19BAEE8F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint8_t v9[24];

  sub_19B97D868();
  v3 = (void *)sub_19B97D82C(v1, v2);
  objc_msgSend_debugDescription(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D788(&dword_19B949000, v0, v8, "Missing ngm signing identity - fail to seal paddy message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9);

  sub_19B97D778();
}

void sub_19BAEE974()
{
  NSObject *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];
  uint64_t v8;

  sub_19B97D8E4();
  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_debugDescription(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7AC();
  sub_19B97D788(&dword_19B949000, v0, v6, "Missing ngm encrypting identity - fail to seal paddy message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7);

  sub_19B97D778();
}

void sub_19BAEE9F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_19B97D868();
  v2 = (void *)sub_19B97D82C(v0, v1);
  objc_msgSend_debugDescription(v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D7C4(&dword_19B949000, v7, v8, "Missing legacy signing identity - fail to seal message {publicContainer: %{private}@, signingContainer: %{private}@}", v9, v10, v11, v12, v13);

  sub_19B97D778();
}

void sub_19BAEEA74()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_19B97D8E4();
  objc_msgSend_debugDescription(v0, v1, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7AC();
  sub_19B97D7C4(&dword_19B949000, v5, v6, "Missing legacy encrypting identity - fail to seal message {publicContaienr: %{private}@, signingContainer: %{private}@}", v7, v8, v9, v10, v11);

  sub_19B97D778();
}

void sub_19BAEEAF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint8_t v9[24];

  sub_19B97D868();
  v3 = (void *)sub_19B97D82C(v1, v2);
  objc_msgSend_debugDescription(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D794();
  sub_19B97D788(&dword_19B949000, v0, v8, "Missing ngm signing identity - fail to seal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9);

  sub_19B97D778();
}

void sub_19BAEEB74()
{
  NSObject *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];
  uint64_t v8;

  sub_19B97D8E4();
  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_debugDescription(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7AC();
  sub_19B97D788(&dword_19B949000, v0, v6, "Missing ngm encrypting identity - fail to seal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7);

  sub_19B97D778();
}

void sub_19BAEEBF8()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  sub_19B97D858();
  objc_msgSend_ngmVersion(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ngmVersion(v0, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D7F0();
  sub_19B97D894(&dword_19B949000, v10, v11, "Failed  to ngm seal message due to mismatching versions {encryptingIdentity.ngmVersion: %{public}@, signingIdentity.ngmVersion: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v12, v13, v14, v15, v16);

  sub_19B97D874();
}

void sub_19BAEEC8C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138477827;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "Failed to serialize - failed to serialize IDSMPFullDeviceIdentityContainer {container: %{private}@}", (uint8_t *)&v2, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAEECFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B97D81C(&dword_19B949000, a1, a3, "Cannot markForStateReset - ourSigningIdentity is nil", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEED2C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B97D81C(&dword_19B949000, a1, a3, "Cannot markForStateReset - ngmPublicDeviceIdentity is nil", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEED5C(uint64_t a1)
{
  NSObject *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138478083;
  v3 = a1;
  sub_19B97D7D8();
  sub_19B97D788(&dword_19B949000, v1, (uint64_t)v1, "Failed to markForStateReset {container: %{private}@, signingIdentity: %{private}@}", (uint8_t *)&v2);
  sub_19B97D7E8();
}

void sub_19BAEEDCC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B97D81C(&dword_19B949000, a1, a3, "Cannot markForStateReset - missing one or more required fields", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEEDFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAEEE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAEEEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAEEF7C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "BlastDoor: Disabled for framing messages", (uint8_t *)&v3, 0x16u);
}

void sub_19BAEF000(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl(&dword_19B949000, a2, OS_LOG_TYPE_FAULT, "IDSBlastDoorConnectionHelper: Missing keys in payload received from blastdoor {%@}", (uint8_t *)&v2, 0xCu);
}

void sub_19BAEF074()
{
  __assert_rtn("IDSOSDataChannelSync", "IDSOSDataChannel.m", 353, "numPending == NULL || *numPending == 0");
}

void sub_19BAEF09C()
{
  __assert_rtn("IDSOSDataChannelWrite", "IDSOSDataChannel.m", 281, "pendingTx != NULL");
}

void sub_19BAEF0C4()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 144, "nil != self->_reallocateToken");
}

void sub_19BAEF0EC()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 149, "nil != self->_sessionId");
}

void sub_19BAEF114()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 154, "nil != self->_clientAddress");
}

void sub_19BAEF13C()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 159, "nil != self->_serverAddress");
}

void sub_19BAEF164()
{
  __assert_rtn("-[IDSQRProtoMaterialInfo writeTo:]", "IDSQRProtoMaterialInfo.m", 122, "nil != self->_materialId");
}

void sub_19BAEF18C()
{
  __assert_rtn("-[IDSQRProtoMaterialInfo writeTo:]", "IDSQRProtoMaterialInfo.m", 131, "nil != self->_materialContent");
}

void sub_19BAEF1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAEF234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAEF2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAEF338(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a2, a3, "Unknown messageType(%d) for path", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEF39C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAEF40C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl(&dword_19B949000, a2, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&v2, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAEF47C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "failed to create default listener", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF4A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "failed to create cellular listener", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF4D4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a2, a3, "QUIC CCDeriveKey failed with error %d.", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEF538(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a2, a3, "QUIC CCKDFParametersCreateHkdf failed with error %d.", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEF59C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Invalid PSK salt size", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF5C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Invalid session key size", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF5F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "randomSalt generation failed", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF620()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "QUIC PSK is nil", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF64C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "TCP PSK is nil", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid localAddress!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF6A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid remoteAddress!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF6D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid sessionID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF6FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid localQUICConnectionID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF728()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid localEndpoint!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF754()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid remoteEndpoint!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF780()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Can not peel Off Reliable Unicast Connection, can not find the base NW Connection!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAEF7AC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
    v4 = "QR";
  else
    v4 = "UDP";
  v5 = 136315394;
  v6 = v4;
  v7 = 2112;
  v8 = v3;
  sub_19B97D788(&dword_19B949000, a2, a3, "%s connection not found for %@", (uint8_t *)&v5);
  sub_19B97D7E8();
}

void sub_19BAEF840(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a2, a3, "listener failed to create on port %u", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAEF8A8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  v4 = 134218242;
  v5 = a1;
  v6 = 2112;
  v7 = v3;
  sub_19B97D788(&dword_19B949000, a3, (uint64_t)a3, "listener %p failed to start (%@)", (uint8_t *)&v4);
  sub_19B97D7E8();
}

void sub_19BAEF928(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 134218498;
  v5 = v3;
  v6 = 1024;
  v7 = a2;
  v8 = 2112;
  v9 = v3;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "listener %p got unexpected state: %u, %@", (uint8_t *)&v4, 0x1Cu);
}

void sub_19BAEF9BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for header: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFA1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10BC();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for payload: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFA80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10BC();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for STUN_ADDRESS_FAMILY_IPv4: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFAE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for sin6_port: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFB44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for sin6_addr.s6_addr: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFBA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10BC();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for STUN_ADDRESS_FAMILY_IPv6: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFC08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for sa_in6->sin6_port: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFC68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for sin6_addr.s6_addr: remainingLength: %zd < 16", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFCC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for sockaddr_in: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFD28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunAddressAttribute: for sin_addr.s_addr: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFD88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunXORAddressAttribute: for IPv6_v4Mapped cookieWithTransactionID: remainingLength: %zd < 16", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFDE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10BC();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunXORAddressAttribute: for IPv4 remainingLength: %zd < 1", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFE4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunXORAddressAttribute: for IPv4 STUN_MAGIC_COOKIE: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFEAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunXORAddressAttribute: for IPv4 STUN_MAGIC_COOKIE: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFF0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10A0();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT8Attribute, for type: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFF70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT8Attribute, for length: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAEFFD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10BC();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT8Attribute, for payload: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF0034()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT8Attribute, for padding: remainingLength: %zd < 3", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF0094()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10A0();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT16Attribute: for type: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF00F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT16Attribute: for length: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF0158()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT16Attribute: for payload: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF01B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT16Attribute: for padding: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF0218()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10A0();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT32Attribute: for header, remainingLength = %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF027C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT32Attribute: remainingLength = %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF02DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT32Attribute: remainingLength = %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF033C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10A0();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT64Attribute: for header, remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF03A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUINT64Attribute:  remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF0400()
{
  os_log_t v0;
  uint8_t v1[12];
  __int16 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  v2 = 2048;
  v3 = 8;
  _os_log_error_impl(&dword_19B949000, v0, OS_LOG_TYPE_ERROR, "writeStunUINT64Attribute:  remainingLength: %zd < %lu", v1, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF047C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunBinaryDataAttribute: for header: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF04DC()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19B9A1088();
  sub_19B9A1068(&dword_19B949000, v0, (uint64_t)v0, "writeStunBinaryDataAttribute: for payload: remainingLength: %zd < payloadLen: %d", v1);
  sub_19B97D7E8();
}

void sub_19BAF0544()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19B9A1088();
  sub_19B9A1068(&dword_19B949000, v0, (uint64_t)v0, "writeStunBinaryDataAttribute: for padding: remainingLength: %zd < padLen: %d", v1);
  sub_19B97D7E8();
}

void sub_19BAF05AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunErrorCodeAttribute: for header, remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF060C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunErrorCodeAttribute: for header, remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF066C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunErrorCodeAttribute: for errorCode, remainingLength: %zd < 2", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF06CC(int *a1, uint64_t a2, NSObject *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = 134218240;
  v5 = a2;
  v6 = 1024;
  v7 = v3;
  sub_19B9A1068(&dword_19B949000, a3, (uint64_t)a3, "writeStunErrorCodeAttribute: for errorCode length, remainingLength: %zd < %d", (uint8_t *)&v4);
  sub_19B97D7E8();
}

void sub_19BAF0748()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunErrorCodeAttribute: for padLen, remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF07A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "writeStunUnknownAttribute: for header: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF0808(int a1, uint64_t a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109376;
  v3[1] = a1;
  v4 = 2048;
  v5 = a2;
  sub_19B9A1068(&dword_19B949000, a3, (uint64_t)a3, "writeStunUnknownAttribute: for payload, i = %d: remainingLength: %zd < 4", (uint8_t *)v3);
  sub_19B97D7E8();
}

void sub_19BAF0880()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19B9A1088();
  sub_19B9A1068(&dword_19B949000, v0, (uint64_t)v0, "writeStunUnknownAttribute: for padding: remainingLength: %zd < padLen: %d", v1);
  sub_19B97D7E8();
}

void sub_19BAF08E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "readStunXORAddressAttribute: bufferLen = %d < 2, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0948()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[10];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  sub_19B9A1074();
  v3 = 12;
  sub_19B9A1068(&dword_19B949000, v0, v1, "readStunXORAddressAttribute: [nsTransactionID length]: %d < STUN_TRANSACTIONID_LEN = %ld, return NO", v2);
  sub_19B97D7E8();
}

void sub_19BAF09B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "readStunXORAddressAttribute: IPv6: bufferLen: %d < 16, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0A14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "readStunXORAddressAttribute: IPv6: bufferLen: %d < 2, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "readStunXORAddressAttribute: IPv4: bufferLen: %d < 2, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0AD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "readStunXORAddressAttribute: IPv4: bufferLen: %d < 4, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0B34(NSObject *a1, uint64_t a2, uint64_t a3)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109376;
  v3[1] = 0;
  v4 = 2048;
  v5 = 1;
  sub_19B9A1068(&dword_19B949000, a1, a3, "bufferLen = %d < sizeof(uint16_t)=%lu, return NO", (uint8_t *)v3);
  sub_19B97D7E8();
}

void sub_19BAF0BB0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[10];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  sub_19B9A1074();
  v3 = 2;
  sub_19B9A1068(&dword_19B949000, v0, v1, "bufferLen = %d < sizeof(uint16_t)=%lu, return NO", v2);
  sub_19B97D7E8();
}

void sub_19BAF0C1C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[10];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  sub_19B9A1074();
  v3 = 4;
  sub_19B9A1068(&dword_19B949000, v0, v1, "bufferLen = %d < sizeof(uint32_t)=%lu, return NO", v2);
  sub_19B97D7E8();
}

void sub_19BAF0C88()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[10];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  sub_19B9A1074();
  v3 = 8;
  sub_19B9A1068(&dword_19B949000, v0, v1, "bufferLen = %d, < sizeof(uint64_t): %lu, return NO", v2);
  sub_19B97D7E8();
}

void sub_19BAF0CF4(int *a1, int a2, os_log_t log)
{
  int v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4[0] = 67109376;
  v4[1] = a2;
  v5 = 1024;
  v6 = v3;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "bufferLen = %d < *attrLen = %d, return NO", (uint8_t *)v4, 0xEu);
  sub_19B97D7E8();
}

void sub_19BAF0D78(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a1, a3, "bufferLen = %d < 1, couldn't read errorClass, return NO", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAF0DE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "reasonLen = %d, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0E40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a1, a3, "bufferLen = %d < 1, couldn't read errorNumber, return NO", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAF0EA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "bufferLen = %d < 2, return NO", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF0F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF0F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1188()
{
  __assert_rtn("-[PSIDSLinkHBHEncryptedPayload writeTo:]", "PSIDSLinkHBHEncryptedPayload.m", 94, "nil != self->_initializationVector");
}

void sub_19BAF11B0()
{
  __assert_rtn("-[PSIDSLinkHBHEncryptedPayload writeTo:]", "PSIDSLinkHBHEncryptedPayload.m", 99, "nil != self->_cipherText");
}

void sub_19BAF11D8()
{
  __assert_rtn("-[PSIDSLinkHBHEncryptedPayload writeTo:]", "PSIDSLinkHBHEncryptedPayload.m", 104, "nil != self->_authenticationTag");
}

void sub_19BAF1200(void *a1)
{

  objc_end_catch();
}

void sub_19BAF1220(void *a1)
{

  objc_end_catch();
}

void sub_19BAF123C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B998BE0(&dword_19B949000, a2, a3, "QUIC PSK SecRandomCopyBytes failed with result %d.", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAF12A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF131C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF150C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1784(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_requestID(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v5, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v6, v7, v8, v9, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF1818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF1994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF1F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF2610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF280C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "_prepareOutgoingChannelData: couldn't find actual candidate pair for %@", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF286C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "_prepareOutgoingChannelData: IDSHBHEncryptDataWithKey failed!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF2898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "_prepareOutgoingChannelData: encryptedData length is greater than maxBufferLength!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF28C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "_prepareOutgoingChannelData: useExtChHdr is not supported for virtual candidate pair %@", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF2924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF29A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF2FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF30A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF31A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF32A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF33A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF34A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF35A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF36A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF37A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF38A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3924()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "startLinkProbing: invalid probing interval, return", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF3950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF39CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "sendStatsRequestForClient: couldn't find candidatePair for linkID: %@", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF3A2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "linkID %@ is not relay link, return", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF3A8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "sendStatsRequestForClient: invalid request", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF3AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF3B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF3DB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "didReceivePacket: IDSHBHDecryptDataWithKey failed!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF3DE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "invalid proto message received", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF3E0C(void *a1, char *a2, double a3)
{
  void *v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend_base64EncodedStringWithOptions_(a1, a2, 33, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B9A105C();
  _os_log_error_impl(&dword_19B949000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "failed to parse incoming proto message %@", v5, 0xCu);

  sub_19BA0E9E4();
}

void sub_19BAF3E9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "invalid message %@ received", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF3EFC(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_candidatePairToken(0, a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19BA0E9D8();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v5, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v6, v7, v8, v9, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF3F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF4510()
{
  uint64_t v0;
  os_log_t v1;

  sub_19BA18A98();
  sub_19BA18A84(&dword_19B949000, v0, v1, "Cached push token: %@   Environment: %@");
}

void sub_19BAF4574()
{
  uint64_t v0;
  os_log_t v1;

  sub_19BA18A98();
  sub_19BA18A84(&dword_19B949000, v0, v1, "IDSPushHandler: Error: Diffusing payload {%@} failed with: %@");
}

void sub_19BAF45D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys failed due to invalid parameters.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF4604()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys failed due to invalid session-id.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF4630()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys CCDeriveKey failed with error %d.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF4690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys CCKDFParametersCreateHkdf failed with error %d.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF46F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "IDSHBHEncryptDataWithKey CCCryptorGCMOneshotEncrypt failed with status %d.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF4750()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "IDSHBHEncryptDataWithKey SecRandomCopyBytes failed with result %d.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF47B0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 134218240;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "IDSHBHEncryptDataWithKey failed due to invalid parameters. derivedKey = %p, plaintext = %p", (uint8_t *)&v3, 0x16u);
}

void sub_19BAF4834()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "IDSHBHDecryptDataWithKey failed to parse protobuf with encryptedData.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF4860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A10B0();
  sub_19B998BE0(&dword_19B949000, v0, v1, "IDSHBHDecryptDataWithKey CCCryptorGCMOneshotDecrypt failed with status %d.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF48C0(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend_authenticationTag(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_length(v4, v5, v6, v7);
  sub_19BA1EB5C();
  sub_19BA1EB48(&dword_19B949000, v8, v9, "IDSHBHDecryptDataWithKey Authentication Tag length should be %u bytes, not %lu bytes.", v10, v11, v12, v13, 0);

  sub_19BA0E9E4();
}

void sub_19BAF4944(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend_initializationVector(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_length(v4, v5, v6, v7);
  sub_19BA1EB5C();
  sub_19BA1EB48(&dword_19B949000, v8, v9, "IDSHBHDecryptDataWithKey Initialization Vector length should be %u bytes, not %lu bytes.", v10, v11, v12, v13, 0);

  sub_19BA0E9E4();
}

void sub_19BAF49C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "IDSHBHDecryptDataWithKey failed due to invalid parameters.", v2, v3, v4, v5, v6);
  sub_19B976178();
}

float sub_19BAF49F4(unsigned __int16 *a1, NSObject *a2)
{
  int v2;
  int v3;
  int v4;
  float result;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v6[0] = 67109888;
  v6[1] = v2;
  v7 = 1024;
  v8 = v3;
  v9 = 1024;
  v10 = v4;
  v11 = 2048;
  v12 = 20;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "Failed to add attribute type %d len %d valueType %d, already has max number of attributes %ld", (uint8_t *)v6, 0x1Eu);
  return result;
}

void sub_19BAF4A94(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B9A104C(&dword_19B949000, a1, a3, "write: invalid remainingLength: %zd", a5, a6, a7, a8, 0);
  sub_19B97D7E8();
}

void sub_19BAF4AFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "write: for type: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF4B5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "write: for STUN_MAGIC_COOKIE: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF4BBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "write: for STUN_TRANSACTIONID_LEN: remainingLength: %zd < STUN_TRANSACTIONID_LEN", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF4C1C(int *a1, uint64_t a2, NSObject *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = 134218240;
  v5 = a2;
  v6 = 1024;
  v7 = v3;
  sub_19B9A1068(&dword_19B949000, a3, (uint64_t)a3, "remainingLength: %zd < attributeLen: %d", (uint8_t *)&v4);
  sub_19B97D7E8();
}

void sub_19BAF4C98(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109376;
  v3[1] = a1;
  v4 = 2048;
  v5 = 20;
  sub_19B9A1068(&dword_19B949000, a2, a3, "write: ptr - outputBuffer: %d < STUN_HEADER_LEN: %ld", (uint8_t *)v3);
  sub_19B97D7E8();
}

void sub_19BAF4D10(unsigned __int16 *a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "write: len: %d < 1", (uint8_t *)v3, 8u);
}

void sub_19BAF4D88()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  v3 = 2048;
  v4 = v0;
  _os_log_error_impl(&dword_19B949000, v1, OS_LOG_TYPE_ERROR, "write: invalid outBuf %p %p", v2, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF4E04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B976168(&dword_19B949000, v0, v1, "Process is trying to use NGMFullDeviceIdentity but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF4E30()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF4EAC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF4F28()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF4FA4()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5020()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF509C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5118()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5194()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5210()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF528C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5308()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5384()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5400()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF547C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF54F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B976168(&dword_19B949000, v0, v1, "Process is trying to use NGMPublicDeviceIdentity but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF5524()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF55A0()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF561C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5698()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5714()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5790()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF580C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5888()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5904()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5980()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF59FC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5A78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B976168(&dword_19B949000, v0, v1, "Process is trying to use NGMProtocolVersionClassRef but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF5AA4()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5B20()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (void *)sub_19BA239E8();
  v1 = sub_19BA239D4(v0);
  sub_19B97D7C4(&dword_19B949000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF5B9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B976168(&dword_19B949000, v0, v1, "Process is trying to use NGMMessageHasher but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF5BC8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "Deprecated -objectForKey called on IDSMessageContext! {key : %@}", (uint8_t *)&v2, 0xCu);
}

void sub_19BAF5C3C()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelUnRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelUnRegisterIndication.m", 79, "nil != self->_e2eChannelUuid");
}

void sub_19BAF5C64()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19B97D8CC();
  sub_19B97D788(&dword_19B949000, v0, v1, "Failed to get data protection class from fullLegacyIdentity {error: %{public}@, fullIdentity: %{private}@}", v2);
  sub_19B97D7E8();
}

void sub_19BAF5CC8()
{
  int v0;
  os_log_t v1;
  uint8_t v2[22];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_19B97D8CC();
  v3 = 1024;
  v4 = v0;
  _os_log_error_impl(&dword_19B949000, v1, OS_LOG_TYPE_ERROR, "Failed to update identity data protection class {error: %{public}@, identity: %{private}@, dataProtectionClass: %d}", v2, 0x1Cu);
}

void sub_19BAF5D48()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA299E8();
  sub_19B97D788(&dword_19B949000, v0, (uint64_t)v0, "Failed to purge identity from keychain {identity: %{private}@, error: %{public}@}}", v1);
  sub_19B97D7E8();
}

void sub_19BAF5DB0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19BA29A00();
  sub_19B97D788(&dword_19B949000, v0, v1, "Failed to create full identity from data {data: %{private}@, error: %{public}@}", v2);
  sub_19B97D7E8();
}

void sub_19BAF5E14(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "Failed to create full identity {error: %{public}@}", (uint8_t *)&v2, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAF5E84(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138543618;
  v4 = a1;
  v5 = 1024;
  v6 = a2;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "Failed to create full identity with data protection class {error: %{public}@, dataProtectionClass: %d}", (uint8_t *)&v3, 0x12u);
  sub_19B97D7E8();
}

void sub_19BAF5F04()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19BA29A00();
  sub_19B97D788(&dword_19B949000, v0, v1, "Failed to create public identity from full identity {fullIdentity: %{private}@, error: %{public}@}", v2);
  sub_19B97D7E8();
}

void sub_19BAF5F68()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA299E8();
  sub_19B97D788(&dword_19B949000, v0, (uint64_t)v0, "Failed to create data from full identity {identity: %{private}@, error: %{public}@}}", v1);
  sub_19B97D7E8();
}

void sub_19BAF5FD0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19BA29A00();
  sub_19B97D788(&dword_19B949000, v0, v1, "Failed to create public identity from data {data: %{private}@, error: %{public}@}", v2);
  sub_19B97D7E8();
}

void sub_19BAF6034()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA299E8();
  sub_19B97D788(&dword_19B949000, v0, (uint64_t)v0, "Failed to create data from public identity {identity: %{private}@, error: %{public}@}}", v1);
  sub_19B97D7E8();
}

void sub_19BAF609C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "IDSServerBag should not be created with init/new, the resulting object will not return any results", v1, 2u);
}

void sub_19BAF60DC(char a1, uint64_t a2, os_log_t log)
{
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("YES");
  if ((a1 & 1) == 0)
    v3 = CFSTR("NO");
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "Failure computing hash of message for replay key { isEC: %@, error: %@ }", (uint8_t *)&v4, 0x16u);
}

void sub_19BAF6178(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"void *TransparencyLibrary(void)", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, v10, CFSTR("IDSIDInfoResult.m"), 11, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_19BAF61F4(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, (uint64_t)"Class getKTVerifierResultClass(void)_block_invoke", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v8, (uint64_t)v7, v9, CFSTR("IDSIDInfoResult.m"), 12, CFSTR("Unable to find class %s"), "KTVerifierResult");

  __break(1u);
}

void sub_19BAF626C()
{
  __assert_rtn("-[IDSQRProtoPluginControlRequest writeTo:]", "IDSQRProtoPluginControlRequest.m", 122, "nil != self->_pluginName");
}

void sub_19BAF6294(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  NSObject *v4;
  uint8_t v5[16];

  objc_msgSend_GlobalLink(IDSFoundationLog, a3, a4, a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_19B949000, v4, OS_LOG_TYPE_DEFAULT, "failed to generate connection ID", v5, 2u);
  }

  abort();
}

void sub_19BAF62F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], a3, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF6374()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Will not send register request, invalid local relay link ID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF63A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "Will not send register request, invalid remote relay link ID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF63CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "processRegisterResponse failed, invalid local relay link ID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF63F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "processRegisterResponse failed, invalid remote relay link ID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF6424()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "processRegisterResponse failed, do not have local connection ID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF6450()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "processRegisterResponse failed, do not have remote connection ID!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF647C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF64FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "_postProcessAllocbindResponse IDSLinkHBHDeriveHKDFSha256Keys failed!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF6528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF65A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF6628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF66A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF6728()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19BA3A25C();
  sub_19B998BE0(&dword_19B949000, v0, v1, "reportLinkMetricsForLinkID: no candidate pair found for linkID %u", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF6788()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19BA3A25C();
  sub_19B998BE0(&dword_19B949000, v0, v1, "didReceiveProtobufPacketForLinkID: no candidate pair found for linkID %u", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF67E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19BA3A25C();
  sub_19B998BE0(&dword_19B949000, v0, v1, "didReceiveProtobufPacketForLinkID: received proto packet for non-relay-control link with linkID %u", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF6848()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B998BD4();
  sub_19B97D81C(&dword_19B949000, v0, v1, "_postProcessQUICAllocbindResponse IDSLinkHBHDeriveHKDFSha256Keys failed!", v2, v3, v4, v5, v6);
  sub_19B976178();
}

void sub_19BAF6874(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "Failed type check! {key: %@, class: %@}", (uint8_t *)&v3, 0x16u);
}

void sub_19BAF68F8()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterResponse writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterResponse.m", 97, "nil != self->_virtualQuicServerConnectionId");
}

void sub_19BAF6920()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterResponse writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterResponse.m", 102, "self->_channelInfo != nil");
}

void sub_19BAF6948()
{
  __assert_rtn("-[IDSQRProtoDiagnosticIndication writeTo:]", "IDSQRProtoDiagnosticIndication.m", 131, "nil != self->_failureSubtype");
}

void sub_19BAF6970()
{
  __assert_rtn("-[IDSQRProtoDiagnosticIndication writeTo:]", "IDSQRProtoDiagnosticIndication.m", 136, "nil != self->_failureSubtypeContext");
}

void sub_19BAF6998(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "No error and no record -- Fail", v1, 2u);
}

void sub_19BAF69D8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19BA45240(&dword_19B949000, a2, a3, "Could not get record -- Fail {error: %{public}@}", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF6A40(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  v5 = 138543618;
  v6 = v3;
  v7 = 2114;
  v8 = v4;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "Failed to save account identity item {record: %{public}@, error: %{public}@}", (uint8_t *)&v5, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF6AC8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19BA45240(&dword_19B949000, a2, a3, "Failed to create groupID from data {groupIDData: %{public}@}", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF6B2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19BA45240(&dword_19B949000, a2, a3, "Unexpected class for groupName or groupIDData {record: %{public}@}", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF6B90(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19BA45240(&dword_19B949000, a2, a3, "Record missing gropuName or groupID {record: %{public}@}", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF6BF4()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelUnRegisterRequest writeTo:]", "IDSQRProtoH3EndToEndChannelUnRegisterRequest.m", 72, "nil != self->_e2eChannelUuid");
}

void sub_19BAF6C1C()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterIndication.m", 115, "nil != self->_e2eChannelUuid");
}

void sub_19BAF6C44()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterIndication.m", 120, "self->_channelInfo != nil");
}

void sub_19BAF6C6C()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterIndication.m", 125, "nil != self->_virtualQuicClientConnectionId");
}

void sub_19BAF6C94(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = 138543875;
  v6 = a1;
  v7 = 2113;
  v8 = v3;
  v9 = 2113;
  v10 = v4;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "Failed to create publicDeviceContainer - Creating corrupt endpoint {error: %{public}@, URI: %{private}@, pushToken: %{private}@}", (uint8_t *)&v5, 0x20u);
}

void sub_19BAF6D28(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138478083;
  v5 = v2;
  v6 = 2113;
  v7 = v3;
  _os_log_fault_impl(&dword_19B949000, a2, OS_LOG_TYPE_FAULT, "Endpoint has ngmPublicDeviceIdentity but no ngmVersion -- creating legacy endpiont {URI: %{private}@, pushToken: %{private}@}", (uint8_t *)&v4, 0x16u);
}

void sub_19BAF6DB0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl(&dword_19B949000, a2, OS_LOG_TYPE_FAULT, "Endpoint public identity is not valid {serializedPublicMessageProtectionIdentity : %@}", (uint8_t *)&v2, 0xCu);
}

void sub_19BAF6E24()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  sub_19BA4D258(&dword_19B949000, v0, v1, "Failed to fetch messages {error: %{public}@", v2);
  sub_19B97D7E8();
}

void sub_19BAF6E88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA45240(&dword_19B949000, v0, v1, "TransportRecordZone - Create - Failed {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF6EE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA45240(&dword_19B949000, v0, v1, "TransportRecordZone - Drop - Failed {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF6F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA45240(&dword_19B949000, v0, v1, "Failed to fetch records {error: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF6FA8()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  v3 = 2112;
  v4 = v0;
  _os_log_fault_impl(&dword_19B949000, v1, OS_LOG_TYPE_FAULT, "Failed to parse record {record: %@, error: %@}", v2, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF7024(void *a1, char *a2, uint64_t a3, double a4)
{
  void *v5;
  uint64_t v6;
  uint8_t v7[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_payload(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B9A105C();
  sub_19BA4D258(&dword_19B949000, a2, v6, "Message without recipient alias: %{private}@", v7);

  sub_19BA0E9E4();
}

void sub_19BAF70A4(void *a1, char *a2, uint64_t a3, double a4)
{
  void *v5;
  uint64_t v6;
  uint8_t v7[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_payload(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B9A105C();
  sub_19BA4D258(&dword_19B949000, a2, v6, "Message without sender alias: %{private}@", v7);

  sub_19BA0E9E4();
}

void sub_19BAF7124()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  sub_19BA4D258(&dword_19B949000, v0, v1, "TransportMessage missing token {message: %{private}@}", v2);
  sub_19B97D7E8();
}

void sub_19BAF7188()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  sub_19BA4D258(&dword_19B949000, v0, v1, "TransportMessage missing source paylaod {message: %{private}@", v2);
  sub_19B97D7E8();
}

void sub_19BAF71EC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "Got unhandled socket pair command %d", (uint8_t *)&v3, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF726C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF72EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF736C(void *a1, const char *a2, uint64_t a3, double a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_msgSend_accountKey(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19B97D8A8(&dword_19B949000, v5, v6, "Key class mismatch -- Fail {key: %{public}@}", v7, v8, v9, v10, 2u);

  sub_19BA0E9E4();
}

void sub_19BAF73E8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19BA5F4E0(&dword_19B949000, a2, a3, "LegacyMP cypher data - {data: %{private}@}", a5, a6, a7, a8, 3u);
}

void sub_19BAF7450(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19BA5F4E0(&dword_19B949000, a2, a3, "LegacyMP decypher data - {decrypted: %{private}@}", a5, a6, a7, a8, 3u);
}

void sub_19BAF74B8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "StunUtilProcessParticipantUpdate: unknown messageType: %ld", (uint8_t *)&v2, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAF7528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF75A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], a3, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF76A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF77A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF78A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF79A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF7FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF8028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF80A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19BAF812C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19BAF81B0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 138412546;
  v2 = a1;
  v3 = 2080;
  v4 = "_tokenToRelayInterfaceInfoDeliveryStatus";
  _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v1, 0x16u);
}

void sub_19BAF8240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF82C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF8340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF83C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF8440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF84C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF8540(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  void *v5;
  const char *v6;
  double v7;
  void *v8;
  const char *v9;
  double v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"void *TransparencyLibrary(void)", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, v10, CFSTR("IDSQueryKeyTransparencyContext.m"), 10, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_19BAF85BC(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  double v6;
  void *v7;
  const char *v8;
  double v9;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a3, a4, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, (uint64_t)"Class getKTVerifierResultClass(void)_block_invoke", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v8, (uint64_t)v7, v9, CFSTR("IDSQueryKeyTransparencyContext.m"), 11, CFSTR("Unable to find class %s"), "KTVerifierResult");

  __break(1u);
}

void sub_19BAF8634()
{
  __assert_rtn("-[IDSQRProtoAllocBindResponse writeTo:]", "IDSQRProtoAllocBindResponse.m", 552, "nil != self->_clientAddress");
}

void sub_19BAF865C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF86DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF875C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF87DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF885C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF88DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF895C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF89DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF8A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAF8ADC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "Failed to create certifiedDeliveryContext from dataRepresentation : %@, error : %@", (uint8_t *)&v3, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF8B5C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "Failed to create dataRepresentation from certifiedDeliveryContext, error : %@", (uint8_t *)&v2, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAF8BCC(uint64_t a1, NSObject *a2)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = 138412546;
  v5 = objc_opt_class();
  v6 = 2048;
  v7 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "<%@:%p> Told to process contents but none found", (uint8_t *)&v4, 0x16u);
}

void sub_19BAF8C64(uint64_t *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = objc_opt_class();
  v7 = *a1;
  v8 = 138412802;
  v9 = v6;
  v10 = 2048;
  v11 = v7;
  v12 = 2112;
  v13 = a2;
  _os_log_error_impl(&dword_19B949000, a3, OS_LOG_TYPE_ERROR, "<%@:%p> Loader failed with error {error: %@}", (uint8_t *)&v8, 0x20u);
}

void sub_19BAF8D1C()
{
  __assert_rtn("-[IDSQRProtoPutMaterialErrorIndication writeTo:]", "IDSQRProtoPutMaterialErrorIndication.m", 97, "self->_materialOwner != nil");
}

void sub_19BAF8D44(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B97D81C(&dword_19B949000, a1, a3, "Could not create weak link for PLLogTimeSensitiveRegisteredEvent", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAF8D74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B97D81C(&dword_19B949000, a1, a3, "IDSShouldPowerLog returned NO.", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAF8DA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B97D81C(&dword_19B949000, a1, a3, "IDSPowerLogDictionary: event and info cannot be empty.", a5, a6, a7, a8, 0);
  sub_19B976178();
}

void sub_19BAF8DD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "Failed to get subscription info! {error: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF8E34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "Failed to check if PNR is supported! {error: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF8E94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "Failed to check if SIM is ready! {error: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF8EF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "Failed to get PNR Info! {error: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF8F54()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  _os_log_fault_impl(&dword_19B949000, v0, OS_LOG_TYPE_FAULT, "Missing completion! {self: %@}", v1, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAF8FC0(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = 138412802;
  v5 = v3;
  v6 = 2112;
  v7 = 0;
  v8 = 2112;
  v9 = a2;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "Failed to issue phone number registration request due to insufficient context { coreTelephonyClient: %@, error: %@, context: %@ }", (uint8_t *)&v4, 0x20u);
}

void sub_19BAF9050()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA5F4E0(&dword_19B949000, v0, v1, "IDSCTPNR received carrier bundle change callback {self: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF90B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA5F4E0(&dword_19B949000, v0, v1, "IDSCTPNR received operator bundle change callback {self: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF9110()
{
  int v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  v3 = 1024;
  v4 = v0;
  _os_log_fault_impl(&dword_19B949000, v1, OS_LOG_TYPE_FAULT, "Failed storing keypair signature data [Identifier: %@] (error: %d)", v2, 0x12u);
  sub_19B97D7E8();
}

void sub_19BAF9190(id *a1, NSObject *a2)
{
  id v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  sub_19B9A105C();
  _os_log_fault_impl(&dword_19B949000, a2, OS_LOG_TYPE_FAULT, "CSR Key validation failed -- regenerating {error: %@ }", v4, 0xCu);

}

void sub_19BAF9224()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA45240(&dword_19B949000, v0, v1, " ** Key size is too small, not loading [Identifier: %@]", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF9284()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19B9A105C();
  _os_log_debug_impl(&dword_19B949000, v0, OS_LOG_TYPE_DEBUG, "CallerID - no fromID and this is a ds-based account, using %@", v1, 0xCu);
  sub_19B97D7E8();
}

void sub_19BAF92F0()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA18A98();
  _os_log_error_impl(&dword_19B949000, v0, OS_LOG_TYPE_ERROR, "Asked for callerID with fromID %@ for ds-based account. Forcing fromID = %@", v1, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF9360(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B9A104C(&dword_19B949000, a1, a3, "Asked for callerID with fromID %@ from a non-ds-based account.", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF93C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19B9A104C(&dword_19B949000, v0, v1, "_IDSFetchPhoneNumber failed due to telephony error { error: %@ }", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF9428()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA18A98();
  _os_log_debug_impl(&dword_19B949000, v0, OS_LOG_TYPE_DEBUG, "_IDSCopyOrderedAliases sorted aliases %@  (my phone numbers: %@)", v1, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF9498()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B9A105C();
  sub_19BA45240(&dword_19B949000, v0, v1, "Unknown mapping of server key to authentication dictionary key {serverKey: %@}", v2, v3, v4, v5, v6);
  sub_19B97D7E8();
}

void sub_19BAF94F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B9A104C(&dword_19B949000, a2, a3, "Failed to get mobileCountryCode {error: %@}", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF955C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B9A104C(&dword_19B949000, a2, a3, "Failed to get mobileNetworkCode {error: %@}", a5, a6, a7, a8, 2u);
  sub_19B97D7E8();
}

void sub_19BAF95C0()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA18A98();
  _os_log_debug_impl(&dword_19B949000, v0, OS_LOG_TYPE_DEBUG, "No value found in carrier bundle for provided key { key: %@, fallbackValue: %@ }", v1, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF9630()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19BA18A98();
  _os_log_error_impl(&dword_19B949000, v0, OS_LOG_TYPE_ERROR, "Failed to fetch SIMContext for SIM {error: %@, context: %@}", v1, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAF96A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BAA1B24();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19BAF9718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BAA1B24();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19BAF9790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF9810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_19BA0E9C4();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_19B97D7E8();
}

void sub_19BAF9890(void *a1, char *a2, uint64_t a3, double a4)
{
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_error(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138412290;
  v7 = v5;
  _os_log_debug_impl(&dword_19B949000, (os_log_t)a2, OS_LOG_TYPE_DEBUG, "Failed to create RTCReporting session. Error: %@", (uint8_t *)&v6, 0xCu);

}

void sub_19BAF9924()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_19BAC155C();
  sub_19BAC1590();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x18u);
  sub_19B97D7E8();
}

void sub_19BAF99A4(_DWORD *a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[20];
  int v4;

  *(_DWORD *)v3 = 136315906;
  *(_QWORD *)&v3[4] = "-[IDSUDPLink _processIncomingPacketOnSocket:]";
  *(_DWORD *)&v3[14] = *a1;
  *(_WORD *)&v3[18] = 1024;
  LOWORD(v4) = 1024;
  HIWORD(v4) = a2;
  sub_19BAC157C(&dword_19B949000, a2, a3, "%s no control message len=%d (< %u?) socket %d", *(const char **)v3, (unint64_t)"-[IDSUDPLink _processIncomingPacketOnSocket:]" >> 32, *(_DWORD *)&v3[16], v4);
  sub_19B97D8F0();
}

void sub_19BAF9A34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19BAC155C();
  sub_19BAC156C(&dword_19B949000, v0, v1, "%s:%d localInterfaceIndex should not be 0 with valid localAddress", v2, v3, v4, v5, 2u);
  sub_19B97D7E8();
}

void sub_19BAF9AAC()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  _WORD v3[10];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v3 = 136315906;
  sub_19BAC155C();
  *(_DWORD *)&v3[7] = 393;
  v3[9] = v0;
  v4 = v1;
  v5 = v0;
  v6 = 8;
  _os_log_error_impl(&dword_19B949000, v2, OS_LOG_TYPE_ERROR, "%s:%d failed due to invalid arraySize: (%d > %d).", (uint8_t *)v3, 0x1Eu);
  sub_19B97D8F0();
}

void sub_19BAF9B40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19BAC155C();
  sub_19BAC156C(&dword_19B949000, v0, v1, "%s:%d unsupported address family for local address", v2, v3, v4, v5, 2u);
  sub_19B97D7E8();
}

void sub_19BAF9BB8()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_19BAC155C();
  sub_19BAC1590();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x22u);
  sub_19B97D8F0();
}

void sub_19BAF9C48()
{
  uint64_t v0;
  os_log_t v1;
  _WORD v2[10];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v2 = 136315650;
  sub_19BAC155C();
  *(_DWORD *)&v2[7] = 506;
  v2[9] = 2048;
  v3 = v0;
  _os_log_error_impl(&dword_19B949000, v1, OS_LOG_TYPE_ERROR, "%s:%d unsupported IDSInterfaceAddressIPVersion %lu", (uint8_t *)v2, 0x1Cu);
  sub_19B97D8F0();
}

void sub_19BAF9CD4()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  _WORD v4[10];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v4 = 136315650;
  sub_19BAC155C();
  *(_DWORD *)&v4[7] = 514;
  v4[9] = v0;
  v5 = v1;
  sub_19BAC15A0(&dword_19B949000, v2, v3, "%s:%d socket creation failed errno=%d", (uint8_t *)v4);
  sub_19B97D7E8();
}

void sub_19BAF9D54()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  int v4;
  int v5;

  LODWORD(v2) = 136315906;
  sub_19BAC155C();
  sub_19BAC15AC();
  sub_19BAC157C(&dword_19B949000, v0, v1, "%s:%d bind failed on socket %d errno=%d", v2, v3, v4, v5);
  sub_19B97D8F0();
}

void sub_19BAF9DC8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  int v4;
  int v5;

  LODWORD(v2) = 136315906;
  sub_19BAC155C();
  sub_19BAC15AC();
  sub_19BAC157C(&dword_19B949000, v0, v1, "%s:%d getsockname on socket %d failed errno=%d", v2, v3, v4, v5);
  sub_19B97D8F0();
}

void sub_19BAF9E3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19BAC155C();
  sub_19BAC156C(&dword_19B949000, v0, v1, "%s:%d socket is not created", v2, v3, v4, v5, 2u);
  sub_19B97D7E8();
}

void sub_19BAF9EB4()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_19BAC155C();
  sub_19BAC1590();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x26u);
  sub_19B97D8F0();
}

void sub_19BAF9F44(NSObject *a1)
{
  int v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v4 = 136315650;
  v5 = "-[IDSUDPLink reconnectWithLocalAddress:]";
  v6 = 1024;
  v7 = 750;
  v8 = 1024;
  v9 = v2;
  sub_19BAC15A0(&dword_19B949000, a1, v3, "%s:%d getsockname failed: %d", (uint8_t *)&v4);
  sub_19B97D8F0();
}

void sub_19BAF9FE4()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_19BAC1590();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x16u);
  sub_19B97D7E8();
}

void sub_19BAFA05C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19BAC155C();
  sub_19BAC156C(&dword_19B949000, v0, v1, "%s:%d failed to create default socket", v2, v3, v4, v5, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA0D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19BAC155C();
  sub_19BAC156C(&dword_19B949000, v0, v1, "%s:%d failed to create cellular socket", v2, v3, v4, v5, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA14C(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *a2;
  v5 = 134218240;
  v6 = v3;
  v7 = 2048;
  v8 = v4;
  _os_log_debug_impl(&dword_19B949000, log, OS_LOG_TYPE_DEBUG, "_parseHeader: _currentCapsuleType: %llu, _currentCapsuleLength: %llu", (uint8_t *)&v5, 0x16u);
}

void sub_19BAFA1D8()
{
  __assert_rtn("-[IDSCapsuleParser _readWithCompletionHandler:]", "IDSCapsuleParser.m", 171, "_waitingBodySize == 0");
}

void sub_19BAFA200()
{
  __assert_rtn("-[IDSCapsuleParser _readWithCompletionHandler:]", "IDSCapsuleParser.m", 176, "_waitingBodySize > 0");
}

void sub_19BAFA228(void *a1, char *a2, uint64_t a3, double a4)
{
  void *v5;
  int v6;
  uint64_t id;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_connection(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 134217984;
  id = nw_connection_get_id();
  _os_log_debug_impl(&dword_19B949000, (os_log_t)a2, OS_LOG_TYPE_DEBUG, "[C%llu] _readWithCompletionHandler", (uint8_t *)&v6, 0xCu);

}

void sub_19BAFA2C0()
{
  __assert_rtn("-[IDSCapsuleParser _readWithCompletionHandler:]", "IDSCapsuleParser.m", 177, "_pendingData == nil");
}

void sub_19BAFA2E8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_19B949000, log, OS_LOG_TYPE_DEBUG, "_readCapsuleWithExistingData: data is nil", v1, 2u);
}

void sub_19BAFA328()
{
  __assert_rtn("-[IDSCapsuleParser readCapsuleWithCompletionHandler:]", "IDSCapsuleParser.m", 243, "!_processingReadCall");
}

void sub_19BAFA350()
{
  __assert_rtn("-[IDSCapsuleParser readCapsuleWithCompletionHandler:]", "IDSCapsuleParser.m", 242, "_state == IDSCapsuleParserStateReadingHeader");
}

void sub_19BAFA378()
{
  int v0;
  const __CFString *v1;
  __int16 v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = 138412546;
  v1 = CFSTR("qI");
  v2 = 2080;
  v3 = "dictionary";
  _os_log_error_impl(&dword_19B949000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v0, 0x16u);
}

void sub_19BAFA414()
{
  __assert_rtn("-[IDSQRProtoQuicConnectionInfo writeTo:]", "IDSQRProtoQuicConnectionInfo.m", 91, "nil != self->_quicConnectionId");
}

void sub_19BAFA43C()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterAckRequest writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterAckRequest.m", 79, "nil != self->_e2eChannelUuid");
}

void sub_19BAFA464(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl(&dword_19B949000, a2, OS_LOG_TYPE_FAULT, "FAULTING: %@ : Found archived data objects.", (uint8_t *)&v2, 0xCu);
}

void sub_19BAFA4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19B980A04();
  sub_19B9809F4(&dword_19B949000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_19B97D7E8();
}

void sub_19BAFA758(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_19B949000, log, OS_LOG_TYPE_FAULT, "We failed to instantiate the APSConnection Class ---- please file a radar", v1, 2u);
}

void sub_19BAFA798(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19B949000, log, OS_LOG_TYPE_ERROR, "_buildMaterialInfoForDesiredMaterialDataRequireSignature: no signing block", v1, 2u);
}

void sub_19BAFA7D8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "_buildMaterialInfoForDesiredMaterialDataRequireSignature: error signing:%@", (uint8_t *)&v2, 0xCu);
}

void sub_19BAFA84C(uint64_t a1, NSObject *a2)
{
  uint8_t v3[24];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  sub_19BAEA678();
  _os_log_fault_impl(&dword_19B949000, a2, OS_LOG_TYPE_FAULT, "<%@:%p> Could not extract public key from trust for server bag signature verification", v3, 0x16u);
  sub_19BA0E9E4();
}

void sub_19BAFA8CC(uint64_t a1, int a2, NSObject *a3)
{
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = 138412802;
  v7 = objc_opt_class();
  v8 = 2048;
  v9 = a1;
  v10 = 1024;
  v11 = a2;
  _os_log_fault_impl(&dword_19B949000, a3, OS_LOG_TYPE_FAULT, "<%@:%p> Unsupported server bag signature algorithm {hashAlgorithm: %d}", (uint8_t *)&v6, 0x1Cu);
}

void sub_19BAFA97C(uint64_t a1, NSObject *a2)
{
  uint8_t v3[24];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  sub_19BAEA678();
  _os_log_error_impl(&dword_19B949000, a2, OS_LOG_TYPE_ERROR, "<%@:%p> No input signature or trust provided for server bag verification", v3, 0x16u);
  sub_19BA0E9E4();
}

void sub_19BAFA9FC()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterRequest writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterRequest.m", 97, "nil != self->_e2eChannelUuid");
}

void sub_19BAFAA24()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterRequest writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterRequest.m", 102, "self->_channelInfo != nil");
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1E0C800A0](*(_QWORD *)&op, *(_QWORD *)&mode, *(_QWORD *)&alg, *(_QWORD *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1E0C800D8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1E0C800E0]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1E0C80108](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80118](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1E0C80120]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  MEMORY[0x1E0C801D8](*(_QWORD *)&algorithm, key, keyLength, data, dataLength, macOut);
}

uint64_t CCKDFParametersCreateHkdf()
{
  return MEMORY[0x1E0C80228]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1E0C80230]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1E0C802C0](bytes, count);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
  MEMORY[0x1E0C988E8](center, name, object, userInfo, options);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1E0C99128](string);
}

uint64_t CUTIsInternalInstall()
{
  return MEMORY[0x1E0D131D0]();
}

uint64_t CUTProcessNameForPid()
{
  return MEMORY[0x1E0D131D8]();
}

uint64_t CUTWeakLinkClass()
{
  return MEMORY[0x1E0D131E0]();
}

uint64_t FastRandomUInt()
{
  return MEMORY[0x1E0D362D0]();
}

uint64_t IMCopyAppValueForKey()
{
  return MEMORY[0x1E0D36368]();
}

uint64_t IMDAuditTokenTaskHasEntitlement()
{
  return MEMORY[0x1E0D363D8]();
}

uint64_t IMGetCachedDomainBoolForKey()
{
  return MEMORY[0x1E0D364B8]();
}

uint64_t IMGetCachedDomainIntForKeyWithDefaultValue()
{
  return MEMORY[0x1E0D364D0]();
}

uint64_t IMGetConferenceSettings()
{
  return MEMORY[0x1E0D364E0]();
}

uint64_t IMGetDomainBoolForKey()
{
  return MEMORY[0x1E0D364E8]();
}

uint64_t IMGetDomainBoolForKeyWithDefaultValue()
{
  return MEMORY[0x1E0D364F0]();
}

uint64_t IMGetDomainIntForKey()
{
  return MEMORY[0x1E0D364F8]();
}

uint64_t IMGetDomainValueForKey()
{
  return MEMORY[0x1E0D36500]();
}

uint64_t IMGetKeychainData()
{
  return MEMORY[0x1E0D36518]();
}

uint64_t IMGetKeychainDataProtectionClassFromSecAttrDataProtectionClass()
{
  return MEMORY[0x1E0D36520]();
}

uint64_t IMGetSecAttrDataProtectionClassFromKeychainDataProtectionClass()
{
  return MEMORY[0x1E0D36538]();
}

uint64_t IMGetXPCArrayFromDictionary()
{
  return MEMORY[0x1E0D36540]();
}

uint64_t IMGetXPCBoolFromDictionary()
{
  return MEMORY[0x1E0D36548]();
}

uint64_t IMGetXPCDataFromDictionary()
{
  return MEMORY[0x1E0D36558]();
}

uint64_t IMGetXPCDictionaryFromDictionary()
{
  return MEMORY[0x1E0D36560]();
}

uint64_t IMGetXPCKeyedCodableFromDictionaryWithSecureCoding()
{
  return MEMORY[0x1E0D36570]();
}

uint64_t IMGetXPCStringFromDictionary()
{
  return MEMORY[0x1E0D36578]();
}

uint64_t IMGetiMessageSettings()
{
  return MEMORY[0x1E0D36580]();
}

uint64_t IMInsertArraysToXPCDictionary()
{
  return MEMORY[0x1E0D36598]();
}

uint64_t IMInsertBoolsToXPCDictionary()
{
  return MEMORY[0x1E0D365A0]();
}

uint64_t IMInsertCodableObjectsToXPCDictionary()
{
  return MEMORY[0x1E0D365A8]();
}

uint64_t IMInsertIntsToXPCDictionary()
{
  return MEMORY[0x1E0D365C0]();
}

uint64_t IMInsertKeyedCodableObjectsToXPCDictionary()
{
  return MEMORY[0x1E0D365C8]();
}

uint64_t IMInsertNSStringsToXPCDictionary()
{
  return MEMORY[0x1E0D365D0]();
}

uint64_t IMInternationalForPhoneNumberWithOptions()
{
  return MEMORY[0x1E0D365E0]();
}

uint64_t IMLogSimulateCrashForProcess()
{
  return MEMORY[0x1E0D36630]();
}

uint64_t IMLogSimulateCrashForProcessAndPID()
{
  return MEMORY[0x1E0D36638]();
}

uint64_t IMLogString()
{
  return MEMORY[0x1E0D36640]();
}

uint64_t IMLogString_V()
{
  return MEMORY[0x1E0D36648]();
}

uint64_t IMPerformSystem()
{
  return MEMORY[0x1E0D36708]();
}

uint64_t IMPhoneNumberRefCopyForPhoneNumber()
{
  return MEMORY[0x1E0D36718]();
}

uint64_t IMPrintf()
{
  return MEMORY[0x1E0D36760]();
}

uint64_t IMRemoveKeychainData()
{
  return MEMORY[0x1E0D367B0]();
}

uint64_t IMSetDomainValueForKey()
{
  return MEMORY[0x1E0D36808]();
}

uint64_t IMSetKeychainData()
{
  return MEMORY[0x1E0D36818]();
}

uint64_t IMShouldLog()
{
  return MEMORY[0x1E0D36830]();
}

uint64_t IMStringIsInHardcodedEmergencyNumberSet()
{
  return MEMORY[0x1E0D36888]();
}

uint64_t IMStringIsPseudonymID()
{
  return MEMORY[0x1E0D36898]();
}

uint64_t IMTimeOfDay()
{
  return MEMORY[0x1E0D368D8]();
}

uint64_t IMUserScopedNotification()
{
  return MEMORY[0x1E0D36960]();
}

uint64_t IMWarnString_V()
{
  return MEMORY[0x1E0D36968]();
}

uint64_t IMWeakLinkClass()
{
  return MEMORY[0x1E0D36970]();
}

uint64_t IMWeakLinkSymbol()
{
  return MEMORY[0x1E0D36978]();
}

uint64_t IMXPCConfigureConnection()
{
  return MEMORY[0x1E0D36980]();
}

uint64_t IMXPCCreateConnectionForServiceWithQueue()
{
  return MEMORY[0x1E0D36988]();
}

uint64_t IMXPCCreateServerConnection()
{
  return MEMORY[0x1E0D36990]();
}

uint64_t IMXPCCreateSim2HostServerConnection()
{
  return MEMORY[0x1E0D36998]();
}

uint64_t JWDecodeDictionary()
{
  return MEMORY[0x1E0D369E0]();
}

uint64_t JWEncodeDictionary()
{
  return MEMORY[0x1E0D369F0]();
}

uint64_t JWUUIDPushObjectToString()
{
  return MEMORY[0x1E0D369F8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1E0DE2B90]();
}

uint64_t MarcoLog()
{
  return MEMORY[0x1E0D47410]();
}

uint64_t MarcoNoteCheckpoint()
{
  return MEMORY[0x1E0D47428]();
}

uint64_t MarcoShouldLog()
{
  return MEMORY[0x1E0D47430]();
}

uint64_t MarcoShouldLogCheckpoints()
{
  return MEMORY[0x1E0D47438]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1E0CB3218](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1E0C80658](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
  MEMORY[0x1E0C80660](__list, __new, a3);
}

uint64_t OSLogHandleForIDSCategory()
{
  return MEMORY[0x1E0D36B28]();
}

uint64_t OSLogHandleForTransportCategory()
{
  return MEMORY[0x1E0D36B40]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1E0D82DD8]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1E0D82DE0]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1E0D82DE8]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1E0D82DF0]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1E0D82DF8]();
}

uint64_t PBRepeatedInt32Set()
{
  return MEMORY[0x1E0D82E08]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1E0D82E48]();
}

uint64_t PBRepeatedUInt32Clear()
{
  return MEMORY[0x1E0D82E50]();
}

uint64_t PBRepeatedUInt32Copy()
{
  return MEMORY[0x1E0D82E58]();
}

uint64_t PBRepeatedUInt32Hash()
{
  return MEMORY[0x1E0D82E60]();
}

uint64_t PBRepeatedUInt32IsEqual()
{
  return MEMORY[0x1E0D82E68]();
}

uint64_t PBRepeatedUInt32NSArray()
{
  return MEMORY[0x1E0D82E70]();
}

uint64_t PBRepeatedUInt32Set()
{
  return MEMORY[0x1E0D82E78]();
}

uint64_t PBRepeatedUInt64Add()
{
  return MEMORY[0x1E0D82E80]();
}

uint64_t PBRepeatedUInt64Clear()
{
  return MEMORY[0x1E0D82E88]();
}

uint64_t PBRepeatedUInt64Copy()
{
  return MEMORY[0x1E0D82E90]();
}

uint64_t PBRepeatedUInt64Hash()
{
  return MEMORY[0x1E0D82E98]();
}

uint64_t PBRepeatedUInt64IsEqual()
{
  return MEMORY[0x1E0D82EA0]();
}

uint64_t PBRepeatedUInt64NSArray()
{
  return MEMORY[0x1E0D82EA8]();
}

uint64_t PBRepeatedUInt64Set()
{
  return MEMORY[0x1E0D82EB0]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1E0CD6270](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1E0CD6278](identityRef, privateKeyRef);
}

uint64_t SecKeyCopyAttributeDictionary()
{
  return MEMORY[0x1E0CD62E8]();
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x1E0CD6310]();
}

uint64_t SecKeyCreateRSAPrivateKey()
{
  return MEMORY[0x1E0CD6378]();
}

uint64_t SecKeyCreateRSAPublicKey()
{
  return MEMORY[0x1E0CD6380]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6390](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD63A0](keyData, attributes, error);
}

OSStatus SecKeyGeneratePair(CFDictionaryRef parameters, SecKeyRef *publicKey, SecKeyRef *privateKey)
{
  return MEMORY[0x1E0CD63C8](parameters, publicKey, privateKey);
}

uint64_t SecKeyGetSize()
{
  return MEMORY[0x1E0CD63E0]();
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1E0CD6418](key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateAppleIDSService()
{
  return MEMORY[0x1E0CD6488]();
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6520](server, hostname);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1E0CD6670](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1E0CD6698](certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1E0CD66C8](trust, error);
}

uint64_t SecTrustIsExpiredOnly()
{
  return MEMORY[0x1E0CD66F8]();
}

OSStatus SecTrustSetVerifyDate(SecTrustRef trust, CFDateRef verifyDate)
{
  return MEMORY[0x1E0CD6760](trust, verifyDate);
}

uint64_t ValidMobileMeDomains()
{
  return MEMORY[0x1E0D36B58]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CTServerConnectionCopyCurrentMTU()
{
  return MEMORY[0x1E0CA6E90]();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return MEMORY[0x1E0CA6F30]();
}

uint64_t _CTServerConnectionDropIPPackets()
{
  return MEMORY[0x1E0CA6F58]();
}

uint64_t _CTServerConnectionSetPacketNotificationFilter()
{
  return MEMORY[0x1E0CA7070]();
}

uint64_t _CTServerConnectionUpdateProtocolQualityOfService()
{
  return MEMORY[0x1E0CA70A0]();
}

uint64_t _IMAlwaysLog()
{
  return MEMORY[0x1E0D36B60]();
}

uint64_t _IMAlwaysLogV()
{
  return MEMORY[0x1E0D36B68]();
}

uint64_t _IMLogEventString_V()
{
  return MEMORY[0x1E0D36B88]();
}

uint64_t _IMLogString_V()
{
  return MEMORY[0x1E0D36B90]();
}

uint64_t _IMWarn()
{
  return MEMORY[0x1E0D36BA8]();
}

uint64_t _IMWillLog()
{
  return MEMORY[0x1E0D36BB0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x1E0C80C50]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C816F0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5280](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C826D8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t cut_arc_os_release()
{
  return MEMORY[0x1E0D13248]();
}

uint64_t cut_dispatch_log_queue()
{
  return MEMORY[0x1E0D13250]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1E0C82CA0](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CC0](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CD0](data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CD8](data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1E0C82CE8](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C83810](*(_QWORD *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1E0C83818](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1E0C83900](*(_QWORD *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1E0C83910](a1);
}

uint64_t im_dispatch_after_primary_queue()
{
  return MEMORY[0x1E0D36BC0]();
}

uint64_t im_notify_register_dispatch()
{
  return MEMORY[0x1E0D36BE0]();
}

uint64_t im_primary_queue()
{
  return MEMORY[0x1E0D36BF0]();
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1E0C83970](*(_QWORD *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1E0C83980](*(_QWORD *)&a1, a2);
}

uint64_t jw_uuid_to_data()
{
  return MEMORY[0x1E0D36BF8]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout)
{
  return MEMORY[0x1E0C83A38](*(_QWORD *)&kq, changelist, *(_QWORD *)&nchanges, eventlist, *(_QWORD *)&nevents, timeout);
}

int kqueue(void)
{
  return MEMORY[0x1E0C83A68]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1E0C83C70]();
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1E0C83DB0]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1E0C83EA8](zone);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

void nw_connection_cancel(nw_connection_t connection)
{
  MEMORY[0x1E0CCEFB8](connection);
}

uint64_t nw_connection_copy_connected_local_endpoint()
{
  return MEMORY[0x1E0CCEFD0]();
}

uint64_t nw_connection_copy_connected_path()
{
  return MEMORY[0x1E0CCEFD8]();
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1E0CCEFE8](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCEFF8](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF018](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF020](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1E0CCF030](endpoint, parameters);
}

uint64_t nw_connection_create_with_connection()
{
  return MEMORY[0x1E0CCF060]();
}

uint64_t nw_connection_get_id()
{
  return MEMORY[0x1E0CCF098]();
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
  MEMORY[0x1E0CCF128](connection, *(_QWORD *)&minimum_incomplete_length, *(_QWORD *)&maximum_length, completion);
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
  MEMORY[0x1E0CCF130](connection, completion);
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
  MEMORY[0x1E0CCF168](connection, content, context, is_complete, completion);
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF1B0](connection, queue);
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF1C0](connection, handler);
}

void nw_connection_start(nw_connection_t connection)
{
  MEMORY[0x1E0CCF1D8](connection);
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata(nw_content_context_t context, nw_protocol_definition_t protocol)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF218](context, protocol);
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x1E0CCF220](context_identifier);
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
  MEMORY[0x1E0CCF248](context, expiration_milliseconds);
}

void nw_content_context_set_metadata_for_protocol(nw_content_context_t context, nw_protocol_metadata_t protocol_metadata)
{
  MEMORY[0x1E0CCF258](context, protocol_metadata);
}

uint64_t nw_content_context_set_packet_id()
{
  return MEMORY[0x1E0CCF260]();
}

uint64_t nw_context_activate()
{
  return MEMORY[0x1E0CCF268]();
}

uint64_t nw_context_create()
{
  return MEMORY[0x1E0CCF290]();
}

uint64_t nw_context_set_isolate_protocol_stack()
{
  return MEMORY[0x1E0CCF2C8]();
}

uint64_t nw_context_set_scheduling_mode()
{
  return MEMORY[0x1E0CCF2D8]();
}

uint64_t nw_demux_create_options()
{
  return MEMORY[0x1E0CCF328]();
}

uint64_t nw_demux_options_add_pattern()
{
  return MEMORY[0x1E0CCF330]();
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x1E0CCF340](endpoint);
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF388](address);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF3B0](hostname, port);
}

nw_endpoint_t nw_endpoint_create_url(const char *url)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF3C8](url);
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1E0CCF3D8](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1E0CCF410](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1E0CCF428](endpoint);
}

uint64_t nw_error_create_error_with_inferred_domain()
{
  return MEMORY[0x1E0CCF460]();
}

uint64_t nw_http2_create_options()
{
  return MEMORY[0x1E0CCF688]();
}

uint64_t nw_http2_set_capsule_handling_disabled()
{
  return MEMORY[0x1E0CCF690]();
}

uint64_t nw_http3_create_options()
{
  return MEMORY[0x1E0CCF698]();
}

uint64_t nw_http3_set_0rtt_enabled()
{
  return MEMORY[0x1E0CCF6A0]();
}

uint64_t nw_http3_set_initial_remote_settings()
{
  return MEMORY[0x1E0CCF6A8]();
}

uint64_t nw_http_create_metadata()
{
  return MEMORY[0x1E0CCF6B0]();
}

uint64_t nw_http_metadata_add_header()
{
  return MEMORY[0x1E0CCF6B8]();
}

uint64_t nw_http_metadata_enumerate_headers()
{
  return MEMORY[0x1E0CCF6C0]();
}

uint64_t nw_http_metadata_get_status()
{
  return MEMORY[0x1E0CCF6C8]();
}

uint64_t nw_http_metadata_set_endpoint()
{
  return MEMORY[0x1E0CCF6D0]();
}

uint64_t nw_http_metadata_set_method()
{
  return MEMORY[0x1E0CCF6D8]();
}

uint64_t nw_http_metadata_set_path()
{
  return MEMORY[0x1E0CCF6E0]();
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1E0CCF6F0]();
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1E0CCF6F8]();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1E0CCF710](interface);
}

nw_protocol_metadata_t nw_ip_create_metadata(void)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF778]();
}

nw_ip_ecn_flag_t nw_ip_metadata_get_ecn_flag(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1E0CCF780](metadata);
}

void nw_ip_metadata_set_ecn_flag(nw_protocol_metadata_t metadata, nw_ip_ecn_flag_t ecn_flag)
{
  MEMORY[0x1E0CCF790](metadata, *(_QWORD *)&ecn_flag);
}

uint64_t nw_ip_metadata_set_enable_fragmentation()
{
  return MEMORY[0x1E0CCF798]();
}

void nw_ip_metadata_set_service_class(nw_protocol_metadata_t metadata, nw_service_class_t service_class)
{
  MEMORY[0x1E0CCF7A0](metadata, *(_QWORD *)&service_class);
}

void nw_listener_cancel(nw_listener_t listener)
{
  MEMORY[0x1E0CCF7C8](listener);
}

uint64_t nw_listener_copy_local_endpoint()
{
  return MEMORY[0x1E0CCF7D0]();
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1E0CCF7D8](parameters);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
  MEMORY[0x1E0CCF810](listener, handler);
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF820](listener, queue);
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF828](listener, handler);
}

void nw_listener_start(nw_listener_t listener)
{
  MEMORY[0x1E0CCF830](listener);
}

uint64_t nw_nat64_copy_prefixes()
{
  return MEMORY[0x1E0CCF848]();
}

uint64_t nw_nat64_copy_prefixes_async()
{
  return MEMORY[0x1E0CCF850]();
}

uint64_t nw_nat64_does_interface_index_support_nat64()
{
  return MEMORY[0x1E0CCF858]();
}

uint64_t nw_nat64_extract_v4()
{
  return MEMORY[0x1E0CCF860]();
}

uint64_t nw_nat64_synthesize_v6()
{
  return MEMORY[0x1E0CCF868]();
}

uint64_t nw_parameters_allow_sharing_port_with_listener()
{
  return MEMORY[0x1E0CCF8A8]();
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF8B8](parameters);
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1E0CCF8C8](parameters);
}

nw_endpoint_t nw_parameters_copy_local_endpoint(nw_parameters_t parameters)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF8E8](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF930]();
}

uint64_t nw_parameters_create_qpod()
{
  return MEMORY[0x1E0CCF960]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF980](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF990](configure_dtls, configure_udp);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  MEMORY[0x1E0CCFA48](parameters, interface);
}

uint64_t nw_parameters_set_channel_demux_options()
{
  return MEMORY[0x1E0CCFA88]();
}

uint64_t nw_parameters_set_context()
{
  return MEMORY[0x1E0CCFA90]();
}

uint64_t nw_parameters_set_delegated_unique_pid()
{
  return MEMORY[0x1E0CCFAA0]();
}

uint64_t nw_parameters_set_e_proc_uuid()
{
  return MEMORY[0x1E0CCFAB8]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
  MEMORY[0x1E0CCFB38](parameters, local_endpoint);
}

uint64_t nw_parameters_set_parent_id()
{
  return MEMORY[0x1E0CCFB68]();
}

uint64_t nw_parameters_set_prohibited_netagent_classes()
{
  return MEMORY[0x1E0CCFBC8]();
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
  MEMORY[0x1E0CCFBF8](parameters, *(_QWORD *)&interface_type);
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
  MEMORY[0x1E0CCFC18](parameters, reuse_local_address);
}

void nw_parameters_set_service_class(nw_parameters_t parameters, nw_service_class_t service_class)
{
  MEMORY[0x1E0CCFC28](parameters, *(_QWORD *)&service_class);
}

uint64_t nw_parameters_set_source_application_by_bundle_id()
{
  return MEMORY[0x1E0CCFC40]();
}

uint64_t nw_path_assert_agent()
{
  return MEMORY[0x1E0CCFCA0]();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCFCB0](path);
}

nw_endpoint_t nw_path_copy_effective_remote_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCFCB8](path);
}

uint64_t nw_path_copy_inactive_agent_uuids()
{
  return MEMORY[0x1E0CCFCC8]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1E0CCFD10]();
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
  MEMORY[0x1E0CCFD18](path, enumerate_block);
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x1E0CCFD20]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x1E0CCFD38]();
}

uint64_t nw_path_evaluator_get_client_id()
{
  return MEMORY[0x1E0CCFD40]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x1E0CCFD58]();
}

uint64_t nw_path_evaluator_start()
{
  return MEMORY[0x1E0CCFD68]();
}

uint64_t nw_path_get_client_id()
{
  return MEMORY[0x1E0CCFD70]();
}

uint64_t nw_path_get_flow_registration_id()
{
  return MEMORY[0x1E0CCFD88]();
}

uint64_t nw_path_get_interface_index()
{
  return MEMORY[0x1E0CCFD90]();
}

uint64_t nw_path_get_reason()
{
  return MEMORY[0x1E0CCFDD0]();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x1E0CCFDE0](path);
}

BOOL nw_path_is_constrained(nw_path_t path)
{
  return MEMORY[0x1E0CCFE10](path);
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  return MEMORY[0x1E0CCFE20](path);
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x1E0CCFE88](path, *(_QWORD *)&interface_type);
}

uint64_t nw_path_uses_nexus()
{
  return MEMORY[0x1E0CCFE90]();
}

uint64_t nw_protocol_copy_http_definition()
{
  return MEMORY[0x1E0CCFE98]();
}

nw_protocol_definition_t nw_protocol_copy_ip_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCFEA0]();
}

uint64_t nw_protocol_copy_quic_connection_definition()
{
  return MEMORY[0x1E0CCFEB0]();
}

uint64_t nw_protocol_definition_get_identifier()
{
  return MEMORY[0x1E0CCFF00]();
}

nw_protocol_definition_t nw_protocol_options_copy_definition(nw_protocol_options_t options)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCFF80](options);
}

uint64_t nw_protocol_stack_append_application_protocol()
{
  return MEMORY[0x1E0CCFFC0]();
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCFFD0](stack);
}

nw_protocol_options_t nw_protocol_stack_copy_transport_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCFFE0](stack);
}

void nw_protocol_stack_iterate_application_protocols(nw_protocol_stack_t stack, nw_protocol_stack_iterate_protocols_block_t iterate_block)
{
  MEMORY[0x1E0CCFFF0](stack, iterate_block);
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  MEMORY[0x1E0CCFFF8](stack, protocol);
}

uint64_t nw_qpod_set_dcid()
{
  return MEMORY[0x1E0CD00C8]();
}

uint64_t nw_qpod_set_scid()
{
  return MEMORY[0x1E0CD00D0]();
}

uint64_t nw_qpod_set_secrets()
{
  return MEMORY[0x1E0CD00D8]();
}

uint64_t nw_qpod_setup_secrets()
{
  return MEMORY[0x1E0CD00E0]();
}

uint64_t nw_queue_context_target_dispatch_queue()
{
  return MEMORY[0x1E0CD0110]();
}

uint64_t nw_quic_connection_add_h3_alpn()
{
  return MEMORY[0x1E0CD0138]();
}

uint64_t nw_quic_connection_copy_sec_protocol_options()
{
  return MEMORY[0x1E0CD0150]();
}

uint64_t nw_quic_connection_set_disable_spin_bit()
{
  return MEMORY[0x1E0CD0180]();
}

uint64_t nw_quic_connection_set_force_version_negotiation()
{
  return MEMORY[0x1E0CD0190]();
}

uint64_t nw_quic_connection_set_keepalive_count()
{
  return MEMORY[0x1E0CD01B8]();
}

uint64_t nw_quic_connection_set_pmtud_for_non_transport()
{
  return MEMORY[0x1E0CD01D8]();
}

nw_protocol_options_t nw_quic_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CD01F0]();
}

uint64_t nw_quic_set_remote_transport_parameters()
{
  return MEMORY[0x1E0CD0210]();
}

uint64_t nw_quic_set_source_connection_id()
{
  return MEMORY[0x1E0CD0218]();
}

uint64_t nw_quic_stream_copy_shared_connection_options()
{
  return MEMORY[0x1E0CD0220]();
}

sec_protocol_options_t nw_tls_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return (sec_protocol_options_t)MEMORY[0x1E0CD03C8](options);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1E0C84548]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1E0C84550]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1E0C84558]();
}

uint64_t os_channel_attr_get()
{
  return MEMORY[0x1E0C84560]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1E0C84568]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1E0C84570]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1E0C84578]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1E0C84588]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1E0C84590]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1E0C845C8]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1E0C845E0]();
}

uint64_t os_channel_read_attr()
{
  return MEMORY[0x1E0C84618]();
}

uint64_t os_channel_ring_id()
{
  return MEMORY[0x1E0C84620]();
}

uint64_t os_channel_ring_notify_time()
{
  return MEMORY[0x1E0C84628]();
}

uint64_t os_channel_ring_sync_time()
{
  return MEMORY[0x1E0C84630]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1E0C84638]();
}

uint64_t os_channel_set_slot_properties()
{
  return MEMORY[0x1E0C84640]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1E0C84660]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1E0C84668]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

uint64_t os_log_shim_legacy_logging_enabled()
{
  return MEMORY[0x1E0C84768]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_nexus_attr_create()
{
  return MEMORY[0x1E0C84798]();
}

uint64_t os_nexus_attr_destroy()
{
  return MEMORY[0x1E0C847A0]();
}

uint64_t os_nexus_attr_set()
{
  return MEMORY[0x1E0C847B0]();
}

uint64_t os_nexus_controller_alloc_provider_instance()
{
  return MEMORY[0x1E0C847B8]();
}

uint64_t os_nexus_controller_bind_provider_instance()
{
  return MEMORY[0x1E0C847C0]();
}

uint64_t os_nexus_controller_create()
{
  return MEMORY[0x1E0C847C8]();
}

uint64_t os_nexus_controller_deregister_provider()
{
  return MEMORY[0x1E0C847D0]();
}

uint64_t os_nexus_controller_destroy()
{
  return MEMORY[0x1E0C847D8]();
}

uint64_t os_nexus_controller_free_provider_instance()
{
  return MEMORY[0x1E0C847E0]();
}

uint64_t os_nexus_controller_register_provider()
{
  return MEMORY[0x1E0C847F0]();
}

uint64_t os_nexus_controller_unbind_provider_instance()
{
  return MEMORY[0x1E0C847F8]();
}

uint64_t os_parse_boot_arg_string()
{
  return MEMORY[0x1E0C84900]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1E0C84A00]();
}

void perror(const char *a1)
{
  MEMORY[0x1E0C84AF0](a1);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

uint64_t proc_setthread_cpupercent()
{
  return MEMORY[0x1E0C84C88]();
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

uint64_t pthread_dependency_fulfill_np()
{
  return MEMORY[0x1E0C84D60]();
}

uint64_t pthread_dependency_init_np()
{
  return MEMORY[0x1E0C84D68]();
}

uint64_t pthread_dependency_wait_np()
{
  return MEMORY[0x1E0C84D70]();
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1E0C84F10](a1, *(_QWORD *)&a2, a3);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1E0C85060](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

uint64_t recvmsg_x()
{
  return MEMORY[0x1E0C85078]();
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

void sec_protocol_options_add_pre_shared_key(sec_protocol_options_t options, dispatch_data_t psk, dispatch_data_t psk_identity)
{
  MEMORY[0x1E0CD7210](options, psk, psk_identity);
}

void sec_protocol_options_add_tls_application_protocol(sec_protocol_options_t options, const char *application_protocol)
{
  MEMORY[0x1E0CD7218](options, application_protocol);
}

void sec_protocol_options_set_min_tls_protocol_version(sec_protocol_options_t options, tls_protocol_version_t version)
{
  MEMORY[0x1E0CD72C8](options, version);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1E0C852F8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1E0C85300](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1E0C85310](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4, a5, *(_QWORD *)&a6);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1E0C85388](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856A8](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1E0C85908](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x1E0C85970](__b1, __b2, __len);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1E0C85A30](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1E0C85D48](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x1E0C85E80](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
  MEMORY[0x1E0C85ED0](xarray, index, string);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1E0C86270](xdict);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

