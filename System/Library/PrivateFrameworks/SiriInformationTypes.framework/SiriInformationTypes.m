unint64_t static AudioExperience.overrideFeatureFlagDomain.getter()
{
  return 0xD000000000000010;
}

unint64_t static AudioExperience.overrideFeatureFlagKey.getter()
{
  return 0xD000000000000017;
}

uint64_t static AudioExperience.userDefaultOverride.getter()
{
  return 0;
}

uint64_t key path getter for AudioExperience.serverAudioResults : AudioExperience@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1D0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioExperience.serverAudioResults : AudioExperience(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_serverAudioResults);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t AudioExperience.serverAudioResults.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for AudioExperience.isGlideEligible : AudioExperience@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1E8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for AudioExperience.isGlideEligible : AudioExperience(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1F0))(*a1);
}

uint64_t AudioExperience.isGlideEligible.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible);
  swift_beginAccess();
  return *v1;
}

uint64_t AudioExperience.isGlideEligible.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioExperience.isGlideEligible.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t key path getter for AudioExperience.networkAvailableAtRequest : AudioExperience@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x200))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for AudioExperience.networkAvailableAtRequest : AudioExperience(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t AudioExperience.networkAvailableAtRequest.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest);
  swift_beginAccess();
  return *v1;
}

uint64_t AudioExperience.audioUnderstanding.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioExperience.audioUnderstanding.getter(&OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioUnderstanding, (uint64_t (*)(_QWORD))MEMORY[0x24BE70B38], a1);
}

uint64_t AudioExperience.parse.getter()
{
  return swift_retain();
}

uint64_t AudioExperience.playbackSignals.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioExperience.audioUnderstanding.getter(&OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_playbackSignals, (uint64_t (*)(_QWORD))MEMORY[0x24BE709A0], a1);
}

uint64_t AudioExperience.internalSignals.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_originalSignals);
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v2);
  return v1;
}

uint64_t AudioExperience.originalSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for AudioExperience.internalSignalsFromSiriAudio : AudioExperience@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x220))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioExperience.internalSignalsFromSiriAudio : AudioExperience(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x228);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t AudioExperience.internalSignalsFromSiriAudio.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t AudioExperience.internalSignalsFromSiriAudio.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_internalSignalsFromSiriAudio);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AudioExperience.internalSignalsFromSiriAudio.modify())()
{
  swift_beginAccess();
  return AudioExperience.internalSignalsFromSiriAudio.modify;
}

uint64_t AudioExperience.pegasusAudioType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_pegasusAudioType);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.launchID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_launchID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.systemExtensionBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_systemExtensionBundleID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.boltProxiedBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_boltProxiedBundleID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.shouldPerformAppSelection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_shouldPerformAppSelection);
}

uint64_t AudioExperience.audioClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioExperience.audioUnderstanding.getter(&OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioClientComponent, (uint64_t (*)(_QWORD))MEMORY[0x24BE70D38], a1);
}

uint64_t AudioExperience.audioUnderstanding.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *a1;
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t AudioExperience.matchingSpans.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioExperience.multiUserContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext, a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
}

uint64_t static AudioExperience.supportsSecureCoding.getter()
{
  return 1;
}

void *AudioExperience.catIds.getter()
{
  return &outlined read-only object #0 of AudioExperience.catIds.getter;
}

uint64_t AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v31 = a6;
  v28 = a4;
  v29 = a1;
  v30 = a2;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v27 - v20;
  v22 = a4;
  v23 = a5;
  closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(v22, a5, (uint64_t)&v27 - v20);
  v24 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  v25 = AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:isGlideEligible:)(v29, v30, (uint64_t)v14, (uint64_t)v19, v31, a7);
  outlined consume of Data._Representation(v28, v23);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v24, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  return v25;
}

uint64_t closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v26 = a3;
  v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v23 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v22 = *(_QWORD *)(v7 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BinaryDecodingOptions();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BE9C2B8];
  v14 = *(_QWORD *)(v12 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, v13, MEMORY[0x24BE9C298]);
  Message.init(serializedData:extensions:partial:options:)();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v12);
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v11, v12);
  MEMORY[0x24BDAC7A8](v17);
  *(&v22 - 2) = (uint64_t)v16;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserStatedTask and conformance Siri_Nlu_External_UserStatedTask, (uint64_t (*)(uint64_t))MEMORY[0x24BE9CB28], MEMORY[0x24BE9CB00]);
  v18 = static Message.with(_:)();
  MEMORY[0x24BDAC7A8](v18);
  *(&v22 - 2) = (uint64_t)v9;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x24BE9C828], MEMORY[0x24BE9C7C0]);
  v19 = v23;
  v20 = v25;
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v26, v19, v20);
}

uint64_t closure #1 in closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t (*a4)(char *))
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  a3(0);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v10 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - v6, a2);
  return a4(v7);
}

uint64_t AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:isGlideEligible:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a2;
  v54 = a5;
  v56 = a4;
  v53 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v49 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v13 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  MEMORY[0x24BDAC7A8](v16);
  v47 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.audioSearchResults.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.understanding.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.playbackSignals.getter();
  v46 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.internalSignals.getter();
  v21 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.pegasusAudioType.getter();
  v44 = v22;
  v45 = v21;
  v23 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.launchID.getter();
  v42 = v24;
  v43 = v23;
  v25 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.systemExtensionBundleID.getter();
  v39 = v26;
  v40 = v25;
  v38 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.boltProxiedBundleID.getter();
  v28 = v27;
  v29 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.shouldPerformAppSelection.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v30 = v49;
  v31 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v11, v56, v55);
  v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v33 = v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v50, 1, 1, v32);
  HIBYTE(v37) = 1;
  LOBYTE(v37) = v54;
  v36 = v29 & 1;
  v34 = (*(uint64_t (**)(uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, char, char *, uint64_t, uint64_t, char *, __int16, _QWORD, char *))(v51 + 568))(v48, v20, v47, v46, v45, v44, v43, v42, a6, v40, v39, v38, v28, v36, v15, v53, v52, v31, v37,
          MEMORY[0x24BEE4AF8],
          v33);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v56, v55);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v41);
  return v34;
}

uint64_t AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:)(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, double a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36[16];
  char *v37;
  char *v38;
  id v39;
  uint64_t v40;

  v30 = a3;
  v34 = a4;
  v35 = a5;
  v32 = a1;
  v33 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v29 = *(_QWORD *)(v11 - 8);
  v12 = v29;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v28 - v16;
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, a3, v18);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v17, (uint64_t)v34, v11);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v35, (uint64_t)v10, &demangling cache variable for type metadata for ClientExperienceSignals?);
  v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v22(v15, (uint64_t)v17, v11);
  v37 = v21;
  v38 = v10;
  v39 = v23;
  v40 = v31;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t (*)(uint64_t *), char *, double))(v31 + 576))(v32, v33, v15, partial apply for closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:), v36, a6);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v17, v11);

  outlined destroy of ClientExperienceSignals?((uint64_t)v10, &demangling cache variable for type metadata for ClientExperienceSignals?);
  v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  v26(v21, v18);
  outlined destroy of ClientExperienceSignals?(v35, &demangling cache variable for type metadata for ClientExperienceSignals?);
  v25(v34, v11);
  v26(v30, v18);
  return v24;
}

uint64_t AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  v23 = a3;
  v24 = a5;
  v25 = a6;
  v26 = v7;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t (*)(), _BYTE *, double))(v7 + 576))(a1, a2, v18, closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)partial apply, v22, a7);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a4, v15);

  outlined destroy of ClientExperienceSignals?(a5, &demangling cache variable for type metadata for ClientExperienceSignals?);
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a3, v20);
  return v19;
}

uint64_t closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;

  v68 = a3;
  v69 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x24BDAC7A8](v6);
  v70 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v67 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v67 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v67 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.audioSearchResults.getter();
  swift_bridgeObjectRelease();
  *a1 = v26;
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.understanding.getter();
  v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 0, 1, v27);
  v28 = (int *)type metadata accessor for AudioExperience.Builder(0);
  outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?((uint64_t)v25, (uint64_t)a1 + v28[5], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.playbackSignals.getter();
  v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v22, 0, 1, v29);
  outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?((uint64_t)v22, (uint64_t)a1 + v28[6], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  v30 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.internalSignals.getter();
  v31 = v28[7];
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v31) = v30;
  v32 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.pegasusAudioType.getter();
  v34 = v33;
  v35 = (uint64_t *)((char *)a1 + v28[9]);
  swift_bridgeObjectRelease();
  *v35 = v32;
  v35[1] = v34;
  v36 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.launchID.getter();
  v38 = v37;
  v39 = (uint64_t *)((char *)a1 + v28[10]);
  swift_bridgeObjectRelease();
  *v39 = v36;
  v39[1] = v38;
  v40 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.systemExtensionBundleID.getter();
  v42 = v41;
  v43 = (uint64_t *)((char *)a1 + v28[11]);
  swift_bridgeObjectRelease();
  *v43 = v40;
  v43[1] = v42;
  v44 = Apple_Parsec_Siri_V2alpha_AudioClientComponent.boltProxiedBundleID.getter();
  v46 = v45;
  v47 = (uint64_t *)((char *)a1 + v28[12]);
  swift_bridgeObjectRelease();
  *v47 = v44;
  v47[1] = v46;
  *((_BYTE *)a1 + v28[13]) = Apple_Parsec_Siri_V2alpha_AudioClientComponent.shouldPerformAppSelection.getter() & 1;
  v48 = (uint64_t)a1 + v28[14];
  outlined destroy of ClientExperienceSignals?(v48, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
  v49 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v50 = *(_QWORD *)(v49 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v48, a2, v49);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v48, 0, 1, v49);
  v51 = v68;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v68, (uint64_t)v19, &demangling cache variable for type metadata for ClientExperienceSignals?);
  v52 = type metadata accessor for ClientExperienceSignals();
  v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48);
  if (v53(v19, 1, v52) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v19, &demangling cache variable for type metadata for ClientExperienceSignals?);
    v54 = 2;
  }
  else
  {
    v54 = *v19;
    outlined destroy of AudioExperience.Builder((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClientExperienceSignals);
  }
  *((_BYTE *)a1 + v28[15]) = v54;
  v55 = v51;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v51, (uint64_t)v17, &demangling cache variable for type metadata for ClientExperienceSignals?);
  if (v53(v17, 1, v52) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v17, &demangling cache variable for type metadata for ClientExperienceSignals?);
    v56 = 2;
  }
  else
  {
    v56 = v17[16];
    outlined destroy of AudioExperience.Builder((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ClientExperienceSignals);
  }
  *((_BYTE *)a1 + v28[16]) = v56;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v51, (uint64_t)v14, &demangling cache variable for type metadata for ClientExperienceSignals?);
  if (v53(v14, 1, v52) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v14, &demangling cache variable for type metadata for ClientExperienceSignals?);
    v57 = 0;
  }
  else
  {
    v57 = *((_QWORD *)v14 + 3);
    swift_bridgeObjectRetain();
    outlined destroy of AudioExperience.Builder((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ClientExperienceSignals);
  }
  v58 = v28[17];
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v58) = v57;
  v59 = v28[18];
  v60 = *(void **)((char *)a1 + v59);
  v61 = (uint64_t)v69;
  v62 = v69;

  *(uint64_t *)((char *)a1 + v59) = v61;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v55, (uint64_t)v11, &demangling cache variable for type metadata for ClientExperienceSignals?);
  if (v53(v11, 1, v52) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v11, &demangling cache variable for type metadata for ClientExperienceSignals?);
    v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
    v64 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v70, 1, 1, v63);
  }
  else
  {
    v65 = (uint64_t)&v11[*(int *)(v52 + 36)];
    v64 = v70;
    outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v65, v70, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    outlined destroy of AudioExperience.Builder((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClientExperienceSignals);
  }
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(v64, (uint64_t)a1 + v28[19], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
}

id AudioExperience.__allocating_init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, __int128 a10, uint64_t a11, uint64_t a12, char a13, __int128 a14, uint64_t a15, char *a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  objc_class *v20;
  id v22;

  v22 = objc_allocWithZone(v20);
  return AudioExperience.init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *((uint64_t *)&a10 + 1), a11, a12, a13, a14, *((uint64_t *)&a14 + 1), a15, a16, a17,
           a18,
           a19,
           a20);
}

id AudioExperience.init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, unsigned __int8 a19, unsigned __int8 a20,uint64_t a21,uint64_t a22)
{
  char *v22;
  char *v23;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  id v52;
  char *v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  objc_class *v58;
  id v59;
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  objc_super v87;

  v23 = v22;
  v72 = a8;
  v69 = a7;
  v67 = a6;
  v66 = a5;
  v63 = a4;
  v82 = a3;
  v85 = a2;
  v80 = a17;
  v77 = a22;
  v78 = a18;
  v76 = a21;
  v75 = a20;
  v70 = a19;
  v79 = a16;
  v71 = a15;
  v68 = a14;
  v65 = a13;
  v64 = a12;
  v62 = a11;
  v28 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v74 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v73 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible];
  *v30 = 0;
  v31 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest];
  *v31 = 1;
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_internalSignalsFromSiriAudio] = MEMORY[0x24BEE4AF8];
  v32 = OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_lock;
  *(_QWORD *)&v22[v32] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_serverAudioResults] = a1;
  v33 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioUnderstanding];
  v84 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v86 = *(_QWORD *)(v84 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v33, a2, v84);
  v34 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_playbackSignals];
  v81 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v83 = *(_QWORD *)(v81 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v34, a3, v81);
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_originalSignals] = v63;
  v35 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_pegasusAudioType];
  v36 = v67;
  *(_QWORD *)v35 = v66;
  *((_QWORD *)v35 + 1) = v36;
  v37 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_launchID];
  v38 = v72;
  *(_QWORD *)v37 = v69;
  *((_QWORD *)v37 + 1) = v38;
  v39 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_systemExtensionBundleID];
  v40 = v62;
  *(_QWORD *)v39 = a10;
  *((_QWORD *)v39 + 1) = v40;
  v41 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_boltProxiedBundleID];
  v42 = v65;
  *(_QWORD *)v41 = v64;
  *((_QWORD *)v41 + 1) = v42;
  v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_shouldPerformAppSelection] = v68;
  v43 = &v22[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioClientComponent];
  v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v72 = *(_QWORD *)(v44 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v43, a15, v44);
  type metadata accessor for Graph();
  swift_allocObject();
  *(_QWORD *)&v23[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_parse] = Graph.init()();
  swift_beginAccess();
  *v30 = v70;
  swift_beginAccess();
  *v31 = v75;
  v45 = v77;
  *(_QWORD *)&v23[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_matchingSpans] = v76;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v45, (uint64_t)&v23[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  v46 = v74;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v48 = v73;
  v49 = v78;
  v47(v73, (uint64_t)v78, v28);
  *(_QWORD *)&v23[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v50 = &v23[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v51 = v80;
  *(_QWORD *)v50 = v79;
  *((_QWORD *)v50 + 1) = v51;
  *(double *)&v23[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a9;
  v47(&v23[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v48, v28);
  v52 = objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0));
  v53 = v23;
  v54 = objc_msgSend(v52, sel_init);
  *(_QWORD *)&v53[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v54;
  v55 = &v53[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v56 = *MEMORY[0x24BE6FC50];
  v57 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v55, v56, v57);

  v58 = (objc_class *)type metadata accessor for Experience(0);
  v87.receiver = v53;
  v87.super_class = v58;
  v59 = objc_msgSendSuper2(&v87, sel_init);
  v60 = *(void (**)(char *, uint64_t))(v46 + 8);
  v60(v48, v28);
  outlined destroy of ClientExperienceSignals?(v45, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  v60(v49, v28);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v44);
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v81);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v84);
  return v59;
}

uint64_t AudioExperience.Builder.serverAudioResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioExperience.Builder.serverAudioResults.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.serverAudioResults.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.audioUnderstanding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
}

uint64_t AudioExperience.Builder.audioUnderstanding.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
}

uint64_t (*AudioExperience.Builder.audioUnderstanding.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.playbackSignals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
}

uint64_t AudioExperience.Builder.playbackSignals.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
}

uint64_t (*AudioExperience.Builder.playbackSignals.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.internalSignals.getter()
{
  type metadata accessor for AudioExperience.Builder(0);
  return swift_bridgeObjectRetain();
}

uint64_t AudioExperience.Builder.internalSignals.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AudioExperience.Builder(0) + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.internalSignals.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.internalSignalsFromSiriAudio.getter()
{
  type metadata accessor for AudioExperience.Builder(0);
  return swift_bridgeObjectRetain();
}

uint64_t AudioExperience.Builder.internalSignalsFromSiriAudio.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AudioExperience.Builder(0) + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.internalSignalsFromSiriAudio.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.pegasusAudioType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.Builder.pegasusAudioType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AudioExperience.Builder.pegasusAudioType.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.launchID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.Builder.launchID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AudioExperience.Builder.launchID.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.systemExtensionBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.Builder.systemExtensionBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AudioExperience.Builder.systemExtensionBundleID.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.boltProxiedBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioExperience.Builder.boltProxiedBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AudioExperience.Builder.boltProxiedBundleID.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.shouldPerformAppSelection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 52));
}

uint64_t AudioExperience.Builder.shouldPerformAppSelection.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AudioExperience.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.shouldPerformAppSelection.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.audioClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
}

uint64_t AudioExperience.Builder.audioClientComponent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a1, v1 + *(int *)(v3 + 56), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
}

uint64_t (*AudioExperience.Builder.audioClientComponent.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.isGlideEligible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 60));
}

uint64_t AudioExperience.Builder.isGlideEligible.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AudioExperience.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.isGlideEligible.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.networkAvailableAtRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 64));
}

uint64_t AudioExperience.Builder.networkAvailableAtRequest.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AudioExperience.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.networkAvailableAtRequest.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.matchingSpans.getter()
{
  type metadata accessor for AudioExperience.Builder(0);
  return swift_bridgeObjectRetain();
}

uint64_t AudioExperience.Builder.matchingSpans.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AudioExperience.Builder(0) + 68);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AudioExperience.Builder.matchingSpans.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

void *AudioExperience.Builder.renderOptions.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for AudioExperience.Builder(0) + 72));
  v2 = v1;
  return v1;
}

void AudioExperience.Builder.renderOptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for AudioExperience.Builder(0) + 72);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*AudioExperience.Builder.renderOptions.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t AudioExperience.Builder.multiUserContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + *(int *)(v3 + 76), a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
}

uint64_t AudioExperience.Builder.multiUserContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AudioExperience.Builder(0);
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a1, v1 + *(int *)(v3 + 76), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
}

uint64_t (*AudioExperience.Builder.multiUserContext.modify())()
{
  type metadata accessor for AudioExperience.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t specialized AudioExperience.Builder.require<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  Swift::String v16;
  _QWORD v17[4];

  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  v13 = a3(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v12, v13);
  outlined destroy of ClientExperienceSignals?((uint64_t)v12, a2);
  v17[2] = 0;
  v17[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v16._object = (void *)0x8000000246452D50;
  v16._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v16);
  v17[1] = a1;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized AudioExperience.Builder.require<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  Swift::String v4;
  uint64_t v5;

  swift_getAtKeyPath();
  result = v5;
  if (!v5)
  {
    _StringGuts.grow(_:)(56);
    v4._object = (void *)0x8000000246452D50;
    v4._countAndFlagsBits = 0xD000000000000036;
    String.append(_:)(v4);
    __swift_instantiateConcreteTypeFromMangledName(a2);
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized AudioExperience.Builder.require<A>(_:)()
{
  uint64_t result;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;

  swift_getAtKeyPath();
  if (v3)
    return v2;
  _StringGuts.grow(_:)(56);
  v1._object = (void *)0x8000000246452D50;
  v1._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, String?>);
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v1;
  char v2;

  swift_getAtKeyPath();
  if (v2 != 2)
    return v2 & 1;
  _StringGuts.grow(_:)(56);
  v1._object = (void *)0x8000000246452D50;
  v1._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, Bool?>);
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AudioExperience.Builder.require<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  Swift::String v11;
  _QWORD v12[4];

  v4 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a1 + 8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v12 - v6;
  swift_getAtKeyPath();
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12[2] = 0;
  v12[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v11._object = (void *)0x8000000246452D50;
  v11._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v11);
  v12[1] = a1;
  type metadata accessor for KeyPath();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AudioExperience.Builder.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  *a1 = 0;
  v2 = (int *)type metadata accessor for AudioExperience.Builder(0);
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + v2[6];
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)((char *)a1 + v2[7]) = 0;
  *(_QWORD *)((char *)a1 + v2[8]) = 0;
  v7 = (_QWORD *)((char *)a1 + v2[9]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)((char *)a1 + v2[10]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)((char *)a1 + v2[11]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)((char *)a1 + v2[12]);
  *v10 = 0;
  v10[1] = 0;
  *((_BYTE *)a1 + v2[13]) = 2;
  v11 = (char *)a1 + v2[14];
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *((_BYTE *)a1 + v2[15]) = 2;
  *((_BYTE *)a1 + v2[16]) = 2;
  *(_QWORD *)((char *)a1 + v2[17]) = 0;
  *(_QWORD *)((char *)a1 + v2[18]) = 0;
  v13 = (char *)a1 + v2[19];
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
}

uint64_t AudioExperience.Builder.init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:internalSignalsFromSiriAudio:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:isGlideEligible:networkAvailableAtRequest:matchingSpans:renderOptions:multiUserContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  *a9 = a1;
  v26 = (int *)type metadata accessor for AudioExperience.Builder(0);
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a2, (uint64_t)a9 + v26[5], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a3, (uint64_t)a9 + v26[6], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  *(_QWORD *)((char *)a9 + v26[7]) = a4;
  *(_QWORD *)((char *)a9 + v26[8]) = a5;
  v27 = (_QWORD *)((char *)a9 + v26[9]);
  *v27 = a6;
  v27[1] = a7;
  v28 = (_QWORD *)((char *)a9 + v26[10]);
  *v28 = a8;
  v28[1] = a10;
  v29 = (_QWORD *)((char *)a9 + v26[11]);
  *v29 = a11;
  v29[1] = a12;
  v30 = (_QWORD *)((char *)a9 + v26[12]);
  *v30 = a13;
  v30[1] = a14;
  *((_BYTE *)a9 + v26[13]) = a15;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a16, (uint64_t)a9 + v26[14], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
  *((_BYTE *)a9 + v26[15]) = a17;
  *((_BYTE *)a9 + v26[16]) = a18;
  *(_QWORD *)((char *)a9 + v26[17]) = a19;
  *(_QWORD *)((char *)a9 + v26[18]) = a20;
  return outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a21, (uint64_t)a9 + v26[19], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
}

id AudioExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:builder:)(uint64_t a1, uint64_t a2, char *a3, void (*a4)(char *), uint64_t a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)(a1, a2, a3, a4, a5, a6);
}

id AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)(uint64_t a1, uint64_t a2, char *a3, void (*a4)(char *), uint64_t a5, double a6)
{
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  objc_class *v78;
  id v79;
  id v80;
  void (*v81)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  objc_super v111;

  v87 = a5;
  v88 = a4;
  v109 = a3;
  v102 = a2;
  v101 = a1;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v104 = *(_QWORD *)(v8 - 8);
  v105 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v103 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v110 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v108 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v12 = *(_QWORD *)(v11 - 8);
  v106 = v11;
  v107 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v97 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v14 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v89 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v17 = *(_QWORD *)(v16 - 8);
  v85 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v86 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for AudioExperience.Builder(0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v83 - v23;
  v96 = &v6[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible];
  v6[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible] = 0;
  v98 = &v6[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest];
  v6[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest] = 1;
  v99 = &v6[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_internalSignalsFromSiriAudio];
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_internalSignalsFromSiriAudio] = MEMORY[0x24BEE4AF8];
  v25 = OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_lock;
  v26 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v27 = v6;
  *(_QWORD *)&v6[v25] = objc_msgSend(v26, sel_init);
  *(_QWORD *)v24 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(&v24[v19[5]], 1, 1, v16);
  v28 = v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(&v24[v19[6]], 1, 1, v84);
  *(_QWORD *)&v24[v19[7]] = 0;
  v94 = v19[8];
  *(_QWORD *)&v24[v94] = 0;
  v29 = &v24[v19[9]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v30 = &v24[v19[10]];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = &v24[v19[11]];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  v32 = &v24[v19[12]];
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  v24[v19[13]] = 2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(&v24[v19[14]], 1, 1, v106);
  v90 = v19[15];
  v24[v90] = 2;
  v91 = v19[16];
  v24[v91] = 2;
  v92 = v19[17];
  *(_QWORD *)&v24[v92] = 0;
  v95 = v19[18];
  *(_QWORD *)&v24[v95] = 0;
  v33 = (uint64_t)&v24[v19[19]];
  v93 = v33;
  v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v88(v24);
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  KeyPath = swift_getKeyPath();
  v36 = specialized AudioExperience.Builder.require<A>(_:)(KeyPath, &demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, [Apple_Parsec_Siri_V2alpha_AudioItem]?>);
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  *(_QWORD *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_serverAudioResults] = v36;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  v37 = swift_getKeyPath();
  v38 = v86;
  specialized AudioExperience.Builder.require<A>(_:)(v37, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?, (uint64_t (*)(_QWORD))MEMORY[0x24BE70B38], &demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, Apple_Parsec_Siri_V2alpha_AudioUnderstanding?>, v86);
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 32))(&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioUnderstanding], v38, v85);
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  v39 = swift_getKeyPath();
  v40 = v89;
  specialized AudioExperience.Builder.require<A>(_:)(v39, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?, (uint64_t (*)(_QWORD))MEMORY[0x24BE709A0], &demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, Apple_Parsec_Siri_V2alpha_PlaybackSignals?>, v89);
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 32))(&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_playbackSignals], v40, v28);
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  v41 = swift_getKeyPath();
  v42 = specialized AudioExperience.Builder.require<A>(_:)(v41, &demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, [String]?>);
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  *(_QWORD *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_originalSignals] = v42;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  swift_getKeyPath();
  v43 = specialized AudioExperience.Builder.require<A>(_:)();
  v45 = v44;
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  v46 = (uint64_t *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_pegasusAudioType];
  *v46 = v43;
  v46[1] = v45;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  swift_getKeyPath();
  v47 = specialized AudioExperience.Builder.require<A>(_:)();
  v49 = v48;
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  v50 = (uint64_t *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_launchID];
  *v50 = v47;
  v50[1] = v49;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  swift_getKeyPath();
  v51 = specialized AudioExperience.Builder.require<A>(_:)();
  v53 = v52;
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  v54 = (uint64_t *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_systemExtensionBundleID];
  *v54 = v51;
  v54[1] = v53;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  swift_getKeyPath();
  v55 = specialized AudioExperience.Builder.require<A>(_:)();
  v57 = v56;
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  v58 = (uint64_t *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_boltProxiedBundleID];
  *v58 = v55;
  v58[1] = v57;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  swift_getKeyPath();
  LOBYTE(v55) = specialized AudioExperience.Builder.require<A>(_:)();
  swift_release();
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_shouldPerformAppSelection] = v55 & 1;
  outlined init with copy of AudioExperience.Builder((uint64_t)v24, (uint64_t)v22);
  v59 = swift_getKeyPath();
  v60 = v97;
  specialized AudioExperience.Builder.require<A>(_:)(v59, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?, (uint64_t (*)(_QWORD))MEMORY[0x24BE70D38], &demangling cache variable for type metadata for KeyPath<AudioExperience.Builder, Apple_Parsec_Siri_V2alpha_AudioClientComponent?>, v97);
  swift_release();
  v61 = v100;
  outlined destroy of AudioExperience.Builder((uint64_t)v22, type metadata accessor for AudioExperience.Builder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v107 + 32))(&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioClientComponent], v60, v106);
  type metadata accessor for Graph();
  swift_allocObject();
  *(_QWORD *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_parse] = Graph.init()();
  LOBYTE(v33) = v24[v90] & 1;
  v62 = v96;
  swift_beginAccess();
  *v62 = v33;
  LOBYTE(v33) = (v24[v91] == 2) | v24[v91];
  v63 = v98;
  swift_beginAccess();
  *v63 = v33 & 1;
  v64 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)&v24[v92])
    v65 = *(_QWORD *)&v24[v92];
  else
    v65 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_matchingSpans] = v65;
  if (*(_QWORD *)&v24[v94])
    v66 = *(_QWORD *)&v24[v94];
  else
    v66 = v64;
  v67 = v99;
  swift_beginAccess();
  *v67 = v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v93, (uint64_t)&v27[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);

  v68 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
  v69 = v61;
  v68(v108, (uint64_t)v109, v61);
  v70 = *(void **)&v24[v95];
  if (v70)
    v71 = *(id *)&v24[v95];
  else
    v71 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v73 = v103;
  v72 = v104;
  v74 = v105;
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v103, *MEMORY[0x24BE6FC50], v105);
  *(_QWORD *)&v27[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v75 = &v27[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v76 = v102;
  *v75 = v101;
  v75[1] = v76;
  *(double *)&v27[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v77 = v108;
  v68(&v27[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v108, v69);
  *(_QWORD *)&v27[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v71;
  (*(void (**)(_BYTE *, char *, uint64_t))(v72 + 16))(&v27[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v73, v74);
  v78 = (objc_class *)type metadata accessor for Experience(0);
  v111.receiver = v27;
  v111.super_class = v78;
  v79 = v70;
  v80 = objc_msgSendSuper2(&v111, sel_init);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
  v81 = *(void (**)(char *, uint64_t))(v110 + 8);
  v81(v77, v69);
  v81(v109, v69);
  outlined destroy of AudioExperience.Builder((uint64_t)v24, type metadata accessor for AudioExperience.Builder);
  return v80;
}

uint64_t AudioExperience.__allocating_init(coder:)(NSObject *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AudioExperience.init(coder:)(a1);
}

uint64_t AudioExperience.init(coder:)(NSObject *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  void *v52;
  NSObject *p_isa;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  char **v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _BYTE *v62;
  uint64_t v63;
  id v64;
  uint64_t result;
  __int16 v66;
  char *v67;
  unsigned __int8 *v68;
  char *v69;
  NSObject *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  NSObject *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *v96;
  unsigned __int8 v97;
  void *v98;
  unsigned __int8 v99;
  unsigned __int8 *v100;
  void *v101;
  _BYTE *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  id v115;
  uint8_t *v116;
  NSObject *v117;
  NSObject *v118;
  NSObject *v119;
  NSObject *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t);
  char *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  id v131;
  id v132;
  id v133;
  id v134;
  NSObject *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  NSObject *v139;
  unint64_t v140;
  id v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  _BYTE *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  uint64_t v162;
  void (**isa)(unint64_t, char *, unint64_t);
  __int128 v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  _QWORD *v169;
  NSObject *v170;
  char v171;
  _QWORD *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  char v177;
  char v178;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x24BDAC7A8](v3);
  v143 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for Siri_Nlu_External_Span();
  v149 = *(_QWORD *)(v144 - 8);
  MEMORY[0x24BDAC7A8](v144);
  v153 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v154 = *(_QWORD *)(v156 - 8);
  MEMORY[0x24BDAC7A8](v156);
  v148 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v155 = *(_QWORD *)(v160 - 8);
  MEMORY[0x24BDAC7A8](v160);
  v152 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  isa = (void (**)(unint64_t, char *, unint64_t))v161[-1].isa;
  MEMORY[0x24BDAC7A8](v161);
  v9 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BinaryDecodingOptions();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v142 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v150 = (char *)&v130 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v147 = (char *)&v130 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v151 = (char *)&v130 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v19);
  v157 = (char *)&v130 - v20;
  v162 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v159 = *(_QWORD *)(v162 - 8);
  MEMORY[0x24BDAC7A8](v162);
  v158 = ((char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v145 = &v1[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible];
  v1[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_isGlideEligible] = 0;
  v146 = &v1[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest];
  v1[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_networkAvailableAtRequest] = 1;
  v169 = &v1[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_internalSignalsFromSiriAudio];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_internalSignalsFromSiriAudio] = MEMORY[0x24BEE4AF8];
  v22 = OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_lock;
  v23 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v24 = v1;
  v25 = objc_msgSend(v23, sel_init);
  v168 = v1;
  v167 = v22;
  *(_QWORD *)&v1[v22] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v26 = swift_allocObject();
  v164 = xmmword_246412940;
  *(_OWORD *)(v26 + 16) = xmmword_246412940;
  v27 = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v26 + 32) = v27;
  v166 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  *(_QWORD *)(v26 + 40) = v166;
  v170 = a1;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v175 + 1))
  {

LABEL_29:
    outlined destroy of ClientExperienceSignals?((uint64_t)&v174, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_31:
    v29 = v170;
LABEL_36:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v61 = 0;
      _os_log_impl(&dword_2463D2000, v59, v60, "AudioExperience cannot be decoded", v61, 2u);
      MEMORY[0x24955AE30](v61, -1, -1);
    }

    v62 = v168;
    v63 = v167;
LABEL_41:
    swift_bridgeObjectRelease();
LABEL_42:

    type metadata accessor for AudioExperience(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v165 = v24;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NSData]);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_31;
  }
  v28 = v172;
  v29 = v170;
  v30 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (!v30)
  {
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_35:

    goto LABEL_36;
  }
  v141 = v30;
  v31 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v31)
  {
    swift_bridgeObjectRelease();
    v57 = (char **)&v171;
LABEL_34:

    goto LABEL_35;
  }
  v32 = (_QWORD *)v31;
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = v164;
  *(_QWORD *)(v33 + 32) = v27;
  v34 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v33 + 40) = v34;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v175 + 1))
  {

    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  v139 = v35;
  v140 = (unint64_t)v28;
  v36 = v34;
  v37 = v172;
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v164;
  *(_QWORD *)(v38 + 32) = v27;
  *(_QWORD *)(v38 + 40) = v36;
  v29 = v170;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v175 + 1))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ClientExperienceSignals?((uint64_t)&v174, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_36;
  }
  *(_QWORD *)&v164 = v37;
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v39 = v172;
  v40 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v40)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v139 = v40;
  v41 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v41)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v57 = (char **)&v169;
    goto LABEL_34;
  }
  v42 = (void *)v41;
  v136 = v39;
  v43 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v43)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_35;
  }
  v44 = (void *)v43;
  v45 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v45)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_35;
  }
  v135 = v45;
  v46 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (!v46)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v57 = &v165;
    goto LABEL_34;
  }
  v131 = v46;
  v134 = v42;
  v133 = v44;
  v132 = v32;
  if (v140 >> 62)
    goto LABEL_110;
  v47 = *(_QWORD *)((v140 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v48 = (unint64_t)v161;
    v49 = (_QWORD *)&unk_257575000;
    if (!v47)
      break;
    v172 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 & ~(v47 >> 63), 0);
    if (v47 < 0)
    {
      __break(1u);
      goto LABEL_112;
    }
    v50 = 0;
    v161 = 0;
    v32 = v172;
    v138 = v140 & 0xC000000000000001;
    v137 = v47;
    while (v47 != v50)
    {
      if (v138)
        v51 = (id)MEMORY[0x24955A830](v50, v140);
      else
        v51 = *(id *)(v140 + 8 * v50 + 32);
      v52 = v51;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v176 = 0;
      v175 = 0u;
      v174 = 0u;
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem, (uint64_t (*)(uint64_t))MEMORY[0x24BE70490], MEMORY[0x24BE70488]);
      p_isa = &v161->isa;
      Message.init(serializedData:extensions:partial:options:)();
      v161 = p_isa;
      if (p_isa)
      {
        v66 = 128;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        v67 = v165;

        v32 = &v161->isa;
        goto LABEL_58;
      }

      v54 = v32;
      v172 = v32;
      v56 = v32[2];
      v55 = v32[3];
      if (v56 >= v55 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v54 = v172;
      }
      ++v50;
      v54[2] = v56 + 1;
      v32 = v54;
      isa[4]((unint64_t)v54+ ((*((unsigned __int8 *)isa + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)isa + 80))+ (_QWORD)isa[9] * v56, v9, v48);
      v47 = v137;
      v29 = v170;
      if (v137 == v50)
      {
        swift_bridgeObjectRelease();
        v47 = (uint64_t)v161;
        v49 = &unk_257575000;
        goto LABEL_55;
      }
    }
    __break(1u);
LABEL_110:
    swift_bridgeObjectRetain();
    v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_55:
  v67 = v165;
  *(_QWORD *)&v165[v49[486]] = v32;
  v68 = (unsigned __int8 *)v141;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v176 = 0;
  v175 = 0u;
  v174 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioUnderstanding and conformance Apple_Parsec_Siri_V2alpha_AudioUnderstanding, (uint64_t (*)(uint64_t))MEMORY[0x24BE70B38], MEMORY[0x24BE70B30]);
  v69 = (char *)v158;
  Message.init(serializedData:extensions:partial:options:)();
  v32 = (_QWORD *)v47;
  if (v47)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v66 = 129;
    goto LABEL_58;
  }
  isa = (void (**)(unint64_t, char *, unint64_t))v68;
  (*(void (**)(char *, char *, uint64_t))(v159 + 32))(&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioUnderstanding], v69, v162);
  v70 = v132;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v176 = 0;
  v175 = 0u;
  v174 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PlaybackSignals and conformance Apple_Parsec_Siri_V2alpha_PlaybackSignals, (uint64_t (*)(uint64_t))MEMORY[0x24BE709A0], MEMORY[0x24BE70998]);
  v71 = v152;
  Message.init(serializedData:extensions:partial:options:)();
  (*(void (**)(char *, char *, uint64_t))(v155 + 32))(&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_playbackSignals], v71, v160);
  *(_QWORD *)&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_originalSignals] = v164;
  v72 = v169;
  swift_beginAccess();
  *v72 = v136;
  swift_bridgeObjectRelease();
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v74 = (uint64_t *)&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_pegasusAudioType];
  *v74 = v73;
  v74[1] = v75;
  v76 = v131;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v161 = v76;

  v176 = 0;
  v175 = 0u;
  v174 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioClientComponent and conformance Apple_Parsec_Siri_V2alpha_AudioClientComponent, (uint64_t (*)(uint64_t))MEMORY[0x24BE70D38], MEMORY[0x24BE70D10]);
  v77 = v148;
  Message.init(serializedData:extensions:partial:options:)();
  v158 = v70;
  (*(void (**)(char *, char *, uint64_t))(v154 + 32))(&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioClientComponent], v77, v156);
  type metadata accessor for Graph();
  swift_allocObject();
  *(_QWORD *)&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_parse] = Graph.init()();
  v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v88 = (uint64_t *)&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_launchID];
  *v88 = v87;
  v88[1] = v89;
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v91 = (uint64_t *)&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_systemExtensionBundleID];
  *v91 = v90;
  v91[1] = v92;
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v94 = (uint64_t *)&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_boltProxiedBundleID];
  *v94 = v93;
  v94[1] = v95;
  v96 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x8000000246452A20);
  v97 = -[NSObject decodeBoolForKey:](v29, sel_decodeBoolForKey_, v96);

  v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_shouldPerformAppSelection] = v97;
  v98 = (void *)MEMORY[0x24955A5F0](0x456564696C477369, 0xEF656C626967696CLL);
  v99 = -[NSObject decodeBoolForKey:](v29, sel_decodeBoolForKey_, v98);

  v100 = v145;
  swift_beginAccess();
  *v100 = v99;
  v101 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x8000000246452A70);
  LOBYTE(v100) = -[NSObject decodeBoolForKey:](v29, sel_decodeBoolForKey_, v101);

  v102 = v146;
  swift_beginAccess();
  *v102 = (_BYTE)v100;
  v103 = NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)();
  if (!v103)
  {

LABEL_103:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v112 = type metadata accessor for Logger();
    __swift_project_value_buffer(v112, (uint64_t)static Logger.pommes);
    v113 = Logger.logObject.getter();
    v114 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v113, v114))
    {
      v115 = v133;
      v116 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v116 = 0;
      _os_log_impl(&dword_2463D2000, v113, v114, "Unable to decode matchingSpans", v116, 2u);
      MEMORY[0x24955AE30](v116, -1, -1);
      v117 = isa;
      v118 = v158;
      v119 = v139;
      v133 = v134;
      v134 = v115;
      v139 = v135;
      v158 = v113;
      v120 = v170;
      v121 = &v178;
    }
    else
    {
      v117 = v113;
      v118 = v170;
      v119 = v161;
      v120 = v135;
      v121 = &v177;
    }
    *((_QWORD *)v121 - 32) = v120;
    v66 = 12281;

    v62 = v168;
    v67 = v165;
    v63 = v167;
    goto LABEL_64;
  }
  v48 = v103;
  if (v103 >> 62)
    goto LABEL_113;
  v104 = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v104)
  {
LABEL_114:
    swift_bridgeObjectRelease();
    v106 = MEMORY[0x24BEE4AF8];
LABEL_115:
    *(_QWORD *)&v165[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_matchingSpans] = v106;
    v122 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v122)
    {
      v123 = (void *)v122;
      v124 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
      v125 = (uint64_t (*)(uint64_t))MEMORY[0x24BE70A58];
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v176 = 0;
      v175 = 0u;
      v174 = 0u;
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_MultiUserContext and conformance Apple_Parsec_Siri_V2alpha_MultiUserContext, v125, MEMORY[0x24BE70A50]);
      Message.init(serializedData:extensions:partial:options:)();
      if (v32)
      {

        v67 = v165;
        v66 = 28665;
        v29 = v170;
LABEL_58:
        if (one-time initialization token for pommes != -1)
          swift_once();
        v78 = type metadata accessor for Logger();
        __swift_project_value_buffer(v78, (uint64_t)static Logger.pommes);
        v79 = v32;
        v80 = v32;
        v81 = Logger.logObject.getter();
        v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc();
          v84 = swift_slowAlloc();
          *(_QWORD *)&v174 = v84;
          *(_DWORD *)v83 = 136315138;
          v170 = (v83 + 4);
          swift_getErrorValue();
          v85 = Error.localizedDescription.getter();
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_2463D2000, v81, v82, "Failed to decode AudioExperience %s", v83, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24955AE30](v84, -1, -1);
          MEMORY[0x24955AE30](v83, -1, -1);

        }
        else
        {

        }
        v62 = v168;
        v63 = v167;
        if ((v66 & 1) == 0)
        {
LABEL_65:
          if ((v66 & 8) != 0)
          {
            (*(void (**)(char *, uint64_t))(v159 + 8))(&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioUnderstanding], v162);
            if ((v66 & 0x10) == 0)
            {
LABEL_67:
              if ((v66 & 0x20) == 0)
                goto LABEL_68;
              goto LABEL_79;
            }
          }
          else if ((v66 & 0x10) == 0)
          {
            goto LABEL_67;
          }
          swift_release();
          if ((v66 & 0x20) == 0)
          {
LABEL_68:
            if ((v66 & 0x40) == 0)
              goto LABEL_70;
            goto LABEL_69;
          }
LABEL_79:
          (*(void (**)(char *, uint64_t))(v155 + 8))(&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_playbackSignals], v160);
          if ((v66 & 0x40) == 0)
          {
LABEL_70:
            swift_bridgeObjectRelease();
            if ((v66 & 0x100) != 0)
            {
              swift_bridgeObjectRelease();
              if ((v66 & 0x200) == 0)
              {
LABEL_72:
                if ((v66 & 0x400) == 0)
                  goto LABEL_73;
                goto LABEL_83;
              }
            }
            else if ((v66 & 0x200) == 0)
            {
              goto LABEL_72;
            }
            swift_bridgeObjectRelease();
            if ((v66 & 0x400) == 0)
            {
LABEL_73:
              if ((v66 & 0x800) == 0)
                goto LABEL_74;
              goto LABEL_84;
            }
LABEL_83:
            swift_bridgeObjectRelease();
            if ((v66 & 0x800) == 0)
            {
LABEL_74:
              if ((v66 & 0x2000) == 0)
                goto LABEL_75;
LABEL_85:
              (*(void (**)(char *, uint64_t))(v154 + 8))(&v67[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioClientComponent], v156);
              if ((v66 & 0x4000) == 0)
                goto LABEL_42;
              goto LABEL_41;
            }
LABEL_84:
            swift_bridgeObjectRelease();
            if ((v66 & 0x2000) == 0)
            {
LABEL_75:
              if ((v66 & 0x4000) == 0)
                goto LABEL_42;
              goto LABEL_41;
            }
            goto LABEL_85;
          }
LABEL_69:
          swift_bridgeObjectRelease();
          goto LABEL_70;
        }
LABEL_64:
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }

      v128 = (uint64_t)v143;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 56))(v143, 0, 1, v124);
      outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(v128, (uint64_t)&v165[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    }
    else
    {
      v126 = &v165[OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext];
      v127 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v126, 1, 1, v127);
    }

    v64 = Experience.init(coder:)(v170);
    v129 = v64;

    if (v64)
    return (uint64_t)v64;
  }
  while (1)
  {
    v173 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104 & ~(v104 >> 63), 0);
    if (v104 < 0)
      break;
    v105 = 0;
    v106 = v173;
    *(_QWORD *)&v164 = v48 & 0xC000000000000001;
    v107 = v144;
    while (v104 != v105)
    {
      if ((_QWORD)v164)
        v108 = (id)MEMORY[0x24955A830](v105, v48);
      else
        v108 = *(id *)(v48 + 8 * v105 + 32);
      v109 = v108;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v176 = 0;
      v175 = 0u;
      v174 = 0u;
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Span and conformance Siri_Nlu_External_Span, (uint64_t (*)(uint64_t))MEMORY[0x24BE9C120], MEMORY[0x24BE9C110]);
      Message.init(serializedData:extensions:partial:options:)();
      if (v32)
      {

        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_103;
      }

      v173 = v106;
      v111 = *(_QWORD *)(v106 + 16);
      v110 = *(_QWORD *)(v106 + 24);
      if (v111 >= v110 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
        v106 = v173;
      }
      ++v105;
      *(_QWORD *)(v106 + 16) = v111 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v149 + 32))(v106+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(_QWORD *)(v149 + 72) * v111, v153, v107);
      if (v104 == v105)
      {
        swift_bridgeObjectRelease();
        goto LABEL_115;
      }
    }
LABEL_112:
    __break(1u);
LABEL_113:
    v104 = _CocoaArrayWrapper.endIndex.getter();
    if (!v104)
      goto LABEL_114;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall AudioExperience.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Class v21;
  void *v22;
  Class v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Class v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Class v32;
  void *v33;
  Class v34;
  void *v35;
  _QWORD *v36;
  Class v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  Class v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint32_t *p_align;
  _QWORD *v70;
  Class v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  Class isa;
  void (*v88)(char *, uint64_t, uint64_t);
  _QWORD v89[2];

  v2 = v1;
  isa = with.super.isa;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_Span();
  v86 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v85 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1D0))(v10);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v81 = v6;
    v82 = v5;
    v84 = v1;
    v89[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v83 = v13;
    v16 = v13 + v15;
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v17(v12, v16, v8);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem, (uint64_t (*)(uint64_t))MEMORY[0x24BE70490], MEMORY[0x24BE70488]);
      v18 = Message.serializedData(partial:)();
      v20 = v19;
      Data._bridgeToObjectiveC()();
      outlined consume of Data._Representation(v18, v20);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v16 += (unint64_t)v88;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    v2 = v84;
    v6 = v81;
    v5 = v82;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v22 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246452940);
  v23 = isa;
  -[objc_class encodeObject:forKey:](isa, sel_encodeObject_forKey_, v21, v22);

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioUnderstanding and conformance Apple_Parsec_Siri_V2alpha_AudioUnderstanding, (uint64_t (*)(uint64_t))MEMORY[0x24BE70B38], MEMORY[0x24BE70B30]);
  v24 = Message.serializedData(partial:)();
  v26 = v25;
  v27 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v24, v26);
  v28 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246452960);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v27, v28);

  type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PlaybackSignals and conformance Apple_Parsec_Siri_V2alpha_PlaybackSignals, (uint64_t (*)(uint64_t))MEMORY[0x24BE709A0], MEMORY[0x24BE70998]);
  v29 = Message.serializedData(partial:)();
  v31 = v30;
  v82 = v5;
  v32 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v29, v31);
  v33 = (void *)MEMORY[0x24955A5F0](0x6B63616279616C70, 0xEF736C616E676953);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v32, v33);

  v34 = Array._bridgeToObjectiveC()().super.isa;
  v35 = (void *)MEMORY[0x24955A5F0](0x6C616E696769726FLL, 0xEF736C616E676953);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v34, v35);

  v36 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x220))();
  v37 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v38 = (void *)MEMORY[0x24955A5F0](0xD00000000000001CLL, 0x80000002464529A0);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v37, v38);

  v39 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_pegasusAudioType), *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_pegasusAudioType + 8));
  v40 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x80000002464529C0);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v39, v40);

  v41 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_launchID), *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_launchID + 8));
  v42 = (void *)MEMORY[0x24955A5F0](0x444968636E75616CLL, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v41, v42);

  v43 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2+ OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_systemExtensionBundleID), *(_QWORD *)((char *)v2+ OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_systemExtensionBundleID+ 8));
  v44 = (void *)MEMORY[0x24955A5F0](0xD000000000000017, 0x80000002464529E0);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v43, v44);

  v45 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_boltProxiedBundleID), *(_QWORD *)((char *)v2+ OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_boltProxiedBundleID+ 8));
  v46 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246452A00);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v45, v46);

  v47 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_shouldPerformAppSelection);
  v48 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x8000000246452A20);
  -[objc_class encodeBool:forKey:](v23, sel_encodeBool_forKey_, v47, v48);

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioClientComponent and conformance Apple_Parsec_Siri_V2alpha_AudioClientComponent, (uint64_t (*)(uint64_t))MEMORY[0x24BE70D38], MEMORY[0x24BE70D10]);
  v49 = Message.serializedData(partial:)();
  v51 = v50;
  v52 = v36;
  v53 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v49, v51);
  v54 = MEMORY[0x24955A5F0](0xD000000000000014, 0x8000000246452A40);
  -[objc_class encodeObject:forKey:](v23, sel_encodeObject_forKey_, v53, v54);

  LOBYTE(v54) = (*(uint64_t (**)(void))((*v52 & *v2) + 0x1E8))();
  v55 = (void *)MEMORY[0x24955A5F0](0x456564696C477369, 0xEF656C626967696CLL);
  -[objc_class encodeBool:forKey:](v23, sel_encodeBool_forKey_, v54 & 1, v55);

  LOBYTE(v54) = (*(uint64_t (**)(void))((*v52 & *v2) + 0x200))();
  v56 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x8000000246452A70);
  -[objc_class encodeBool:forKey:](v23, sel_encodeBool_forKey_, v54 & 1, v56);

  v84 = v2;
  v57 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_matchingSpans);
  v58 = *(_QWORD *)(v57 + 16);
  if (v58)
  {
    v89[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58, 0);
    v59 = *(unsigned __int8 *)(v86 + 80);
    v81 = v57;
    v60 = v57 + ((v59 + 32) & ~v59);
    v83 = *(_QWORD *)(v86 + 72);
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
    do
    {
      v61 = v85;
      v88(v85, v60, v6);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span and conformance Siri_Nlu_External_Span, (uint64_t (*)(uint64_t))MEMORY[0x24BE9C120], MEMORY[0x24BE9C110]);
      v62 = Message.serializedData(partial:)();
      v64 = v63;
      (*(void (**)(char *, uint64_t))(v86 + 8))(v61, v6);
      v65 = v89[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v65 + 16) + 1, 1);
        v65 = v89[0];
      }
      v67 = *(_QWORD *)(v65 + 16);
      v66 = *(_QWORD *)(v65 + 24);
      if (v67 >= v66 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
        v65 = v89[0];
      }
      *(_QWORD *)(v65 + 16) = v67 + 1;
      v68 = v65 + 16 * v67;
      *(_QWORD *)(v68 + 32) = v62;
      *(_QWORD *)(v68 + 40) = v64;
      v60 += v83;
      --v58;
      p_align = &stru_25179DFE8.align;
    }
    while (v58);
    swift_bridgeObjectRelease();
    v70 = v84;
    v23 = isa;
  }
  else
  {
    v70 = v84;
    p_align = (_DWORD *)(&stru_25179DFE8 + 24);
  }
  v71 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v72 = (void *)MEMORY[0x24955A5F0](0x676E69686374616DLL, 0xED0000736E617053);
  objc_msgSend(v23, *((SEL *)p_align + 403), v71, v72);

  v73 = (uint64_t)v82;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?((uint64_t)v70 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext, (uint64_t)v82, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  v74 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v75 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74) == 1)
  {
    outlined destroy of ClientExperienceSignals?(v73, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    v76 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_MultiUserContext and conformance Apple_Parsec_Siri_V2alpha_MultiUserContext, (uint64_t (*)(uint64_t))MEMORY[0x24BE70A58], MEMORY[0x24BE70A50]);
    v77 = Message.serializedData(partial:)();
    v79 = v78;
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v73, v74);
    v89[0] = v77;
    v89[1] = v79;
    v76 = _bridgeAnythingToObjectiveC<A>(_:)();
    outlined destroy of Data((uint64_t)v89);
  }
  v80 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x8000000246452AA0);
  objc_msgSend(v23, *((SEL *)p_align + 403), v76, v80);
  swift_unknownObjectRelease();

  Experience.encode(with:)((NSCoder)v23);
}

id AudioExperience.appendResult(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_lock);
  objc_msgSend(v7, sel_lock);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = (unint64_t *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_serverAudioResults);
  swift_beginAccess();
  v9 = *v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v8 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    *v8 = v9;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, v9);
    *v8 = v9;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v6, v3);
  swift_endAccess();
  return objc_msgSend(v7, sel_unlock);
}

void AudioExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AudioExperience.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioUnderstanding;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  v3 = v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_playbackSignals;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_audioClientComponent;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  outlined destroy of ClientExperienceSignals?(v0 + OBJC_IVAR____TtC21SiriInformationSearch15AudioExperience_multiUserContext, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);

}

id AudioExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioExperience(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24955AD94]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t type metadata accessor for AudioExperience.Builder(uint64_t a1)
{
  return type metadata accessor for AudioExperience.Builder(a1, (uint64_t *)&type metadata singleton initialization cache for AudioExperience.Builder);
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of AudioExperience.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioExperience.Builder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t type metadata accessor for AudioExperience(uint64_t a1)
{
  return type metadata accessor for AudioExperience.Builder(a1, (uint64_t *)&type metadata singleton initialization cache for AudioExperience);
}

uint64_t type metadata accessor for AudioExperience.Builder(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance KVItemType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance KVItemType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t type metadata accessor for NSArray(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Span>, (uint64_t (*)(_QWORD))MEMORY[0x24BE9C120]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItem>, (uint64_t (*)(_QWORD))MEMORY[0x24BE70490]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ExperienceComponent>, (uint64_t (*)(_QWORD))MEMORY[0x24BE70C90]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Responseframework_PatternComponent>, (uint64_t (*)(_QWORD))MEMORY[0x24BE70EC8]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Google_Protobuf_StringValue>, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BA38]);
  *v3 = result;
  return result;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t ObjC metadata update function for AudioExperience()
{
  return type metadata accessor for AudioExperience(0);
}

void type metadata completion function for AudioExperience()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?, (void (*)(uint64_t))MEMORY[0x24BE70A58]);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for AudioExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioExperience.serverAudioResults.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of AudioExperience.isGlideEligible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of AudioExperience.isGlideEligible.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of AudioExperience.isGlideEligible.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of AudioExperience.networkAvailableAtRequest.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of AudioExperience.internalSignals.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of AudioExperience.internalSignalsFromSiriAudio.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of AudioExperience.internalSignalsFromSiriAudio.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of AudioExperience.internalSignalsFromSiriAudio.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of AudioExperience.__allocating_init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 568))();
}

uint64_t dispatch thunk of AudioExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:builder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 576))();
}

uint64_t dispatch thunk of AudioExperience.appendResult(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioExperience.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  id v50;
  uint64_t v51;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *__dst;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[6];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = a3[8];
    *(_QWORD *)((char *)v7 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v7 + v21) = *(_QWORD *)((char *)a2 + v21);
    v22 = a3[9];
    v23 = a3[10];
    v24 = (_QWORD *)((char *)v7 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (_QWORD *)((char *)v7 + v23);
    v28 = (_QWORD *)((char *)a2 + v23);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = a3[11];
    v31 = a3[12];
    v32 = (_QWORD *)((char *)v7 + v30);
    v33 = (_QWORD *)((char *)a2 + v30);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = (_QWORD *)((char *)v7 + v31);
    v36 = (_QWORD *)((char *)a2 + v31);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = a3[14];
    *((_BYTE *)v7 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    __dst = (char *)v7 + v38;
    v55 = (char *)a2 + v38;
    v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
    v53 = *(_QWORD *)(v39 - 8);
    v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v54(v55, 1, v39))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
      memcpy(__dst, v55, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v55, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v39);
    }
    v41 = a3[16];
    *((_BYTE *)v7 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    *((_BYTE *)v7 + v41) = *((_BYTE *)a2 + v41);
    v42 = a3[18];
    *(_QWORD *)((char *)v7 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
    v43 = *(void **)((char *)a2 + v42);
    *(_QWORD *)((char *)v7 + v42) = v43;
    v44 = a3[19];
    v45 = (char *)v7 + v44;
    v46 = (char *)a2 + v44;
    v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    swift_bridgeObjectRetain();
    v50 = v43;
    if (v49(v46, 1, v47))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
  }
  return v7;
}

uint64_t destroy for AudioExperience.Builder(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + a2[14];
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();

  v13 = a1 + a2[19];
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  return result;
}

_QWORD *initializeWithCopy for AudioExperience.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  id v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  char *__dst;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[9];
  v21 = a3[10];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)((char *)a1 + v21);
  v26 = (_QWORD *)((char *)a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[11];
  v29 = a3[12];
  v30 = (_QWORD *)((char *)a1 + v28);
  v31 = (_QWORD *)((char *)a2 + v28);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = (_QWORD *)((char *)a1 + v29);
  v34 = (_QWORD *)((char *)a2 + v29);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  __dst = (char *)a1 + v36;
  v53 = (char *)a2 + v36;
  v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v51 = *(_QWORD *)(v37 - 8);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v52(v53, 1, v37))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
    memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(__dst, v53, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v37);
  }
  v39 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + v39) = *((_BYTE *)a2 + v39);
  v40 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  v41 = *(void **)((char *)a2 + v40);
  *(_QWORD *)((char *)a1 + v40) = v41;
  v42 = a3[19];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  swift_bridgeObjectRetain();
  v48 = v41;
  if (v47(v44, 1, v45))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  return a1;
}

_QWORD *assignWithCopy for AudioExperience.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a3[9];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[10];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[11];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = a3[12];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v36 = a3[14];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
LABEL_18:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
LABEL_19:
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = a3[18];
  v46 = *(void **)((char *)a1 + v45);
  v47 = *(void **)((char *)a2 + v45);
  *(_QWORD *)((char *)a1 + v45) = v47;
  v48 = v47;

  v49 = a3[19];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v50, v51, v52);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
    goto LABEL_24;
  }
  if (v56)
  {
LABEL_24:
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  return a1;
}

_QWORD *initializeWithTake for AudioExperience.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)((char *)a2 + v19);
  v20 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  v21 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + v27) = *((_BYTE *)a2 + v27);
  v28 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
  v29 = a3[19];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

_QWORD *assignWithTake for AudioExperience.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_13:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  v24 = a3[9];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  v29 = a3[10];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = a3[11];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  v39 = a3[12];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  *v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  v44 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_18:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 40))(v45, v46, v47);
LABEL_19:
  v53 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + v53) = *((_BYTE *)a2 + v53);
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  swift_bridgeObjectRelease();
  v54 = a3[18];
  v55 = *(void **)((char *)a1 + v54);
  *(_QWORD *)((char *)a1 + v54) = *(_QWORD *)((char *)a2 + v54);

  v56 = a3[19];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 40))(v57, v58, v59);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v57, v59);
    goto LABEL_24;
  }
  if (v63)
  {
LABEL_24:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioExperience.Builder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2463DD844(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = a3[5];
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
      v10 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v13;
        v12 = a3[6];
      }
      else
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
        v10 = *(_QWORD *)(v14 - 8);
        if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
        {
          v11 = v14;
          v12 = a3[14];
        }
        else
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
          v10 = *(_QWORD *)(v11 - 8);
          v12 = a3[19];
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for AudioExperience.Builder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2463DD954(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[14];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[19];
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AudioExperience.Builder()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?, (void (*)(uint64_t))MEMORY[0x24BE70B38]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?, (void (*)(uint64_t))MEMORY[0x24BE709A0]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?, (void (*)(uint64_t))MEMORY[0x24BE70D38]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?, (void (*)(uint64_t))MEMORY[0x24BE70A58]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for KVItemType(uint64_t a1)
{
  type metadata accessor for KVItemType(a1, &lazy cache variable for type metadata for KVItemType);
}

void type metadata accessor for KVFieldType(uint64_t a1)
{
  type metadata accessor for KVItemType(a1, &lazy cache variable for type metadata for KVFieldType);
}

void type metadata accessor for KVItemType(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<KVFieldType>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AudioExperience.Builder(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined destroy of ClientExperienceSignals?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(a1, *(_QWORD *)(v1 + 16), (void (*)(_QWORD))MEMORY[0x24BE9C2B8], MEMORY[0x24BE9CB18]);
}

uint64_t partial apply for closure #2 in closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in AudioExperience.init(pluginId:audioClientComponent:queryConfidenceScore:usoGraphData:isGlideEligible:)(a1, *(_QWORD *)(v1 + 16), (void (*)(_QWORD))MEMORY[0x24BE9CB28], MEMORY[0x24BE9C770]);
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24955ADAC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

double SearchContext.latitude.getter()
{
  double v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

double key path getter for SearchContext.latitude : SearchContext@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  double v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v9);
  result = v8;
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.latitude : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.latitude.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.latitude.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$latitude.getter()
{
  return EntityProperty.projectedValue.getter();
}

double SearchContext.longitude.getter()
{
  double v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

double key path getter for SearchContext.longitude : SearchContext@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  double v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v9);
  result = v8;
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.longitude : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.longitude.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.longitude.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$longitude.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.onScreenEntities.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.onScreenEntities : SearchContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.onScreenEntities : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.onScreenEntities.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.onScreenEntities.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$onScreenEntities.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.asrSpeechPackageData.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path getter for SearchContext.asrSpeechPackageData : SearchContext(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[8];
  uint64_t v7;

  v1 = *(_OWORD *)(a1 + 112);
  v6[6] = *(_OWORD *)(a1 + 96);
  v6[7] = v1;
  v7 = *(_QWORD *)(a1 + 128);
  v2 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v2;
  v3 = *(_OWORD *)(a1 + 80);
  v6[4] = *(_OWORD *)(a1 + 64);
  v6[5] = v3;
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  outlined retain of SearchContext((uint64_t)v6);
  EntityProperty.wrappedValue.getter();
  return outlined release of SearchContext((uint64_t)v6);
}

uint64_t key path setter for SearchContext.asrSpeechPackageData : SearchContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[8];
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v15 - v8;
  outlined init with copy of IntentFile?(a1, (uint64_t)v15 - v8);
  v10 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v10;
  v16 = *(_QWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v13;
  outlined init with copy of IntentFile?((uint64_t)v9, (uint64_t)v7);
  outlined retain of SearchContext((uint64_t)v15);
  EntityProperty.wrappedValue.setter();
  outlined destroy of IntentFile?((uint64_t)v9);
  return outlined release of SearchContext((uint64_t)v15);
}

uint64_t SearchContext.asrSpeechPackageData.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of IntentFile?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  EntityProperty.wrappedValue.setter();
  return outlined destroy of IntentFile?(a1);
}

uint64_t outlined init with copy of IntentFile?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IntentFile?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*SearchContext.asrSpeechPackageData.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$asrSpeechPackageData.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.assistantId.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.assistantId : SearchContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[8];
  uint64_t v11;

  v3 = *(_OWORD *)(a1 + 112);
  v10[6] = *(_OWORD *)(a1 + 96);
  v10[7] = v3;
  v11 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v10[4] = *(_OWORD *)(a1 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v6;
  outlined retain of SearchContext((uint64_t)v10);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v10);
  *a2 = v8;
  a2[1] = v9;
  return result;
}

uint64_t key path setter for SearchContext.assistantId : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.assistantId.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.assistantId.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$assistantId.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.responseMode.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

double key path getter for SearchContext.responseMode : SearchContext@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v9);
  result = *(double *)&v8;
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.responseMode : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.responseMode.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.responseMode.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$responseMode.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.deviceRestrictionsRawValue.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.deviceRestrictionsRawValue : SearchContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.deviceRestrictionsRawValue : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.deviceRestrictionsRawValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.deviceRestrictionsRawValue.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$deviceRestrictionsRawValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.isEyesFree.getter()
{
  unsigned __int8 v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.isEyesFree : SearchContext@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  char v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.isEyesFree : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.isEyesFree.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.isEyesFree.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$isEyesFree.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.isMultiUser.getter()
{
  unsigned __int8 v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.isMultiUser : SearchContext@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  char v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v4;
  v10 = *(_QWORD *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.isMultiUser : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.isMultiUser.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.isMultiUser.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$isMultiUser.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.isVoiceTriggerEnabled.getter()
{
  unsigned __int8 v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.isVoiceTriggerEnabled : SearchContext@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  char v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v4;
  v10 = *(_QWORD *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.isVoiceTriggerEnabled : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.isVoiceTriggerEnabled.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.isVoiceTriggerEnabled.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$isVoiceTriggerEnabled.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.isTextToSpeechEnabled.getter()
{
  unsigned __int8 v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.isTextToSpeechEnabled : SearchContext@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  char v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.isTextToSpeechEnabled : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.isTextToSpeechEnabled.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.isTextToSpeechEnabled.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$isTextToSpeechEnabled.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.isTriggerlessFollowup.getter()
{
  unsigned __int8 v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.isTriggerlessFollowup : SearchContext@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  char v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.isTriggerlessFollowup : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.isTriggerlessFollowup.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.isTriggerlessFollowup.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$isTriggerlessFollowup.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.inputOriginName.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

double key path getter for SearchContext.inputOriginName : SearchContext@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v9);
  result = *(double *)&v8;
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.inputOriginName : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.inputOriginName.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.inputOriginName.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$inputOriginName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.bargeInModes.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.bargeInModes : SearchContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.bargeInModes : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.bargeInModes.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.bargeInModes.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$bargeInModes.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.isOnlyUserInHome.getter()
{
  unsigned __int8 v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.isOnlyUserInHome : SearchContext@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  char v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.isOnlyUserInHome : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.isOnlyUserInHome.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.isOnlyUserInHome.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$isOnlyUserInHome.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.sharedUserId.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

double key path getter for SearchContext.sharedUserId : SearchContext@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v9);
  result = *(double *)&v8;
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.sharedUserId : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.sharedUserId.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.sharedUserId.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t SearchContext.$sharedUserId.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.userIdentityClassificationValue.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchContext.userIdentityClassificationValue : SearchContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v10 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  outlined retain of SearchContext((uint64_t)v9);
  EntityProperty.wrappedValue.getter();
  result = outlined release of SearchContext((uint64_t)v9);
  *a2 = v8;
  return result;
}

uint64_t key path setter for SearchContext.userIdentityClassificationValue : SearchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.setter();
  return outlined release of SearchContext((uint64_t)v7);
}

uint64_t SearchContext.userIdentityClassificationValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchContext.userIdentityClassificationValue.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

void SearchContext.latitude.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t SearchContext.$userIdentityClassificationValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchContext.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD v50[17];

  v32 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFile?);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v34 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v33 = (char *)&v28 - v4;
  v5 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Double>);
  LocalizedStringResource.init(stringLiteral:)();
  v47 = MEMORY[0x249559F30](v7);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v45 = MEMORY[0x249559F30](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[EntityMatch]>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v8 = lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  v38 = MEMORY[0x249559F00](v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v37 = MEMORY[0x249559F0C](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v44 = MEMORY[0x249559F18](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String?>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v43 = MEMORY[0x249559F18](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v42 = MEMORY[0x249559F3C](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Bool>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v41 = MEMORY[0x249559F24](v7);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v35 = MEMORY[0x249559F24](v7);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v40 = MEMORY[0x249559F24](v7);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v36 = MEMORY[0x249559F24](v7);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v39 = MEMORY[0x249559F24](v7);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v46 = MEMORY[0x249559F18](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v9 = MEMORY[0x249559F18](v7);
  v29 = v9;
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v10 = MEMORY[0x249559F24](v7);
  v28 = v10;
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v11 = MEMORY[0x249559F18](v7);
  v30 = v11;
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v31 = MEMORY[0x249559F3C](v7);
  v50[0] = v47;
  v50[1] = v45;
  v50[2] = v38;
  v50[3] = v37;
  v50[4] = v44;
  v50[5] = v43;
  v50[6] = v42;
  v50[7] = v41;
  v50[8] = v35;
  v50[9] = v40;
  v50[10] = v36;
  v50[11] = v39;
  v50[12] = v46;
  v50[13] = v9;
  v50[14] = v10;
  v50[15] = v11;
  v50[16] = v31;
  v48 = 0;
  swift_retain();
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = 0;
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = MEMORY[0x24BEE4AF8];
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v12 = type metadata accessor for IntentFile();
  v13 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v33, 1, 1, v12);
  outlined init with copy of IntentFile?(v13, v34);
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined destroy of IntentFile?(v13);
  outlined release of SearchContext((uint64_t)v50);
  v48 = 0;
  v49 = 0xE000000000000000;
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = 0;
  v49 = 0;
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = 1;
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  LOBYTE(v48) = 0;
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  LOBYTE(v48) = 0;
  outlined retain of SearchContext((uint64_t)v50);
  v14 = v35;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  LOBYTE(v48) = 0;
  outlined retain of SearchContext((uint64_t)v50);
  v15 = v40;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  LOBYTE(v48) = 0;
  outlined retain of SearchContext((uint64_t)v50);
  v16 = v36;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  LOBYTE(v48) = 0;
  outlined retain of SearchContext((uint64_t)v50);
  v17 = v39;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  LOBYTE(v48) = 0;
  outlined retain of SearchContext((uint64_t)v50);
  v18 = v28;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = 0;
  v49 = 0;
  outlined retain of SearchContext((uint64_t)v50);
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = MEMORY[0x24BEE4AF8];
  outlined retain of SearchContext((uint64_t)v50);
  v19 = v29;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  v48 = 0;
  v49 = 0;
  outlined retain of SearchContext((uint64_t)v50);
  v20 = v30;
  EntityProperty.wrappedValue.setter();
  outlined release of SearchContext((uint64_t)v50);
  outlined retain of SearchContext((uint64_t)v50);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v21 = v41;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v22 = v31;
  swift_release();
  v48 = 0;
  EntityProperty.wrappedValue.setter();
  result = outlined release of SearchContext((uint64_t)v50);
  v24 = v32;
  v25 = v45;
  *v32 = v47;
  v24[1] = v25;
  v26 = v37;
  v24[2] = v38;
  v24[3] = v26;
  v27 = v43;
  v24[4] = v44;
  v24[5] = v27;
  v24[6] = v42;
  v24[7] = v21;
  v24[8] = v14;
  v24[9] = v15;
  v24[10] = v16;
  v24[11] = v17;
  v24[12] = v46;
  v24[13] = v19;
  v24[14] = v18;
  v24[15] = v20;
  v24[16] = v22;
  return result;
}

unint64_t lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC]("ѹ4\vDa", &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for EntityMatch, &type metadata for EntityMatch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

uint64_t outlined retain of SearchContext(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of SearchContext(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return static TransientAppEntity.defaultQuery.getter();
}

void protocol witness for Identifiable.id.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  JUMPOUT(0x249559EACLL);
}

uint64_t protocol witness for static TypeDisplayRepresentable.typeDisplayRepresentation.getter in conformance SearchContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = type metadata accessor for TypeDisplayRepresentation();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchContext.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SearchContext.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = type metadata accessor for TypeDisplayRepresentation();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchContext.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return static AppEntity.defaultResolverSpecification.getter();
}

uint64_t SearchContext.displayRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v18;
  _OWORD v19[8];
  uint64_t v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_OWORD *)(v0 + 112);
  v19[6] = *(_OWORD *)(v0 + 96);
  v19[7] = v10;
  v20 = *(_QWORD *)(v0 + 128);
  v11 = *(_OWORD *)(v0 + 48);
  v19[2] = *(_OWORD *)(v0 + 32);
  v19[3] = v11;
  v12 = *(_OWORD *)(v0 + 80);
  v19[4] = *(_OWORD *)(v0 + 64);
  v19[5] = v12;
  v13 = *(_OWORD *)(v0 + 16);
  v19[0] = *(_OWORD *)v0;
  v19[1] = v13;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  outlined retain of SearchContext((uint64_t)v19);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v19);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v18);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  v16 = type metadata accessor for DisplayRepresentation.Image();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v3, 1, 1, v16);
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchContext()
{
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  return InstanceDisplayRepresentable.localizedStringResource.getter();
}

uint64_t one-time initialization function for typeDisplayRepresentation()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v5, static SearchContext.typeDisplayRepresentation);
  __swift_project_value_buffer(v5, (uint64_t)static SearchContext.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v5, static EntityMatch.typeDisplayRepresentation);
  __swift_project_value_buffer(v5, (uint64_t)static EntityMatch.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t static SearchContext.typeDisplayRepresentation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = type metadata accessor for TypeDisplayRepresentation();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchContext.typeDisplayRepresentation);
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static SearchContext.typeDisplayRepresentation.modify())()
{
  uint64_t v0;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static SearchContext.typeDisplayRepresentation);
  swift_beginAccess();
  return AudioExperience.internalSignalsFromSiriAudio.modify;
}

id SearchContext.location.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v6;
  _OWORD v7[8];
  uint64_t v8;

  v1 = *(_OWORD *)(v0 + 112);
  v7[6] = *(_OWORD *)(v0 + 96);
  v7[7] = v1;
  v8 = *(_QWORD *)(v0 + 128);
  v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(v0 + 80);
  v7[4] = *(_OWORD *)(v0 + 64);
  v7[5] = v4;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.getter();
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v7);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFA80]), sel_initWithLatitude_longitude_, v6, v6);
}

uint64_t SearchContext.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[8];
  uint64_t v11;

  v3 = *(_OWORD *)(v1 + 112);
  v10[6] = *(_OWORD *)(v1 + 96);
  v10[7] = v3;
  v11 = *(_QWORD *)(v1 + 128);
  v4 = *(_OWORD *)(v1 + 48);
  v10[2] = *(_OWORD *)(v1 + 32);
  v10[3] = v4;
  v5 = *(_OWORD *)(v1 + 80);
  v10[4] = *(_OWORD *)(v1 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v10[0] = *(_OWORD *)v1;
  v10[1] = v6;
  outlined retain of SearchContext((uint64_t)v10);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v10);
  if (v9)
    return InputOrigin.init(rawValue:)();
  v8 = type metadata accessor for InputOrigin();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
}

uint64_t SearchContext.deviceRestrictions.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[8];
  uint64_t v7;

  v1 = *(_OWORD *)(v0 + 112);
  v6[6] = *(_OWORD *)(v0 + 96);
  v6[7] = v1;
  v7 = *(_QWORD *)(v0 + 128);
  v2 = *(_OWORD *)(v0 + 48);
  v6[2] = *(_OWORD *)(v0 + 32);
  v6[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v6[4] = *(_OWORD *)(v0 + 64);
  v6[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v6[0] = *(_OWORD *)v0;
  v6[1] = v4;
  outlined retain of SearchContext((uint64_t)v6);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v6);
  return DeviceRestrictions.init(rawValue:)();
}

uint64_t SearchContext.userIdentityClassification.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  _OWORD v7[8];
  uint64_t v8;

  v1 = *(_OWORD *)(v0 + 112);
  v7[6] = *(_OWORD *)(v0 + 96);
  v7[7] = v1;
  v8 = *(_QWORD *)(v0 + 128);
  v2 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v7[4] = *(_OWORD *)(v0 + 64);
  v7[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v4;
  outlined retain of SearchContext((uint64_t)v7);
  EntityProperty.wrappedValue.getter();
  outlined release of SearchContext((uint64_t)v7);
  return v6;
}

uint64_t SearchContext.afSpeechPacakge.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type SearchContext and conformance SearchContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for SearchContext, &type metadata for SearchContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchContext()
{
  return lazy protocol witness table accessor for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>(&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchContext>, MEMORY[0x24BDB4B08]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24955ADA0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : EntityIdentifierConvertible in SearchContext()
{
  return MEMORY[0x24BDB65D8];
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BDCEA88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchContext()
{
  return lazy protocol witness table accessor for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>(&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchContext> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchContext>, MEMORY[0x24BDB6250]);
}

uint64_t lazy protocol witness table accessor for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24955ADAC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SearchContext()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for SearchContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  a1[16] = a2[16];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SearchContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  a1[13] = a2[13];
  swift_retain();
  swift_release();
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  a1[15] = a2[15];
  swift_retain();
  swift_release();
  a1[16] = a2[16];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SearchContext(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchContext()
{
  return &type metadata for SearchContext;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t ClientExperienceSignals.init(isGlideEligible:networkAvailableAtRequest:isPhoneCallActive:)@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a4 + 8) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = a4 + *(int *)(type metadata accessor for ClientExperienceSignals() + 36);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)a4 = a1;
  *(_BYTE *)(a4 + 16) = a2;
  *(_BYTE *)(a4 + 17) = a3;
  return result;
}

uint64_t ClientExperienceSignals.init(isGlideEligible:networkAvailableAtRequest:isPhoneCallActive:matchingSpans:multiUserContext:)@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(a6 + 8) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v12 = a6 + *(int *)(type metadata accessor for ClientExperienceSignals() + 36);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_BYTE *)a6 = a1;
  *(_BYTE *)(a6 + 16) = a2;
  *(_BYTE *)(a6 + 17) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a5, v12);
}

uint64_t ClientExperienceSignals.isGlideEligible.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ClientExperienceSignals.isGlideEligible.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ClientExperienceSignals.isGlideEligible.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ClientExperienceSignals()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ClientExperienceSignals;
  if (!type metadata singleton initialization cache for ClientExperienceSignals)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_MultiUserContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t ClientExperienceSignals.glideEligibilityPerSharedId.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ClientExperienceSignals.glideEligibilityPerSharedId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ClientExperienceSignals.glideEligibilityPerSharedId.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t ClientExperienceSignals.networkAvailableAtRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ClientExperienceSignals.networkAvailableAtRequest.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*ClientExperienceSignals.networkAvailableAtRequest.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t ClientExperienceSignals.isPhoneCallActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ClientExperienceSignals.isPhoneCallActive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*ClientExperienceSignals.isPhoneCallActive.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t ClientExperienceSignals.matchingSpans.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ClientExperienceSignals.matchingSpans.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ClientExperienceSignals.matchingSpans.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t ClientExperienceSignals.multiUserContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ClientExperienceSignals() + 36);
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v3, a1);
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ClientExperienceSignals.multiUserContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ClientExperienceSignals() + 36);
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a1, v3);
}

uint64_t (*ClientExperienceSignals.multiUserContext.modify())()
{
  type metadata accessor for ClientExperienceSignals();
  return AudioExperience.Builder.serverAudioResults.modify;
}

_QWORD *initializeBufferWithCopyOfBuffer for ClientExperienceSignals(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_QWORD *)(a1 + 24) = a2[3];
    v5 = *(int *)(a3 + 36);
    v6 = (void *)(a1 + v5);
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10(v7, 1, v8))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for ClientExperienceSignals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for ClientExperienceSignals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 36);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithCopy for ClientExperienceSignals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for ClientExperienceSignals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 36);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for ClientExperienceSignals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientExperienceSignals()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2463E2E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ClientExperienceSignals()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2463E2EA4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for ClientExperienceSignals()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  }
}

uint64_t EntityMatch.entityId.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.entityId : EntityMatch@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for EntityMatch.entityId : EntityMatch()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.entityId.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.entityId.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$entityId.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.entityType.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.entityType : EntityMatch@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for EntityMatch.entityType : EntityMatch()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.entityType.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.entityType.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$entityType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.entityName.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.entityName : EntityMatch@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for EntityMatch.entityName : EntityMatch()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.entityName.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.entityName.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$entityName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.matchedUserUtterance.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.matchedUserUtterance : EntityMatch@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for EntityMatch.matchedUserUtterance : EntityMatch()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.matchedUserUtterance.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.matchedUserUtterance.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$matchedUserUtterance.getter()
{
  return EntityProperty.projectedValue.getter();
}

double EntityMatch.matchScore.getter()
{
  double v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

double key path getter for EntityMatch.matchScore : EntityMatch@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for EntityMatch.matchScore : EntityMatch()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.matchScore.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.matchScore.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$matchScore.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.originAppBundleId.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.originAppBundleId : EntityMatch@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for EntityMatch.originAppBundleId : EntityMatch()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.originAppBundleId.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.originAppBundleId.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$originAppBundleId.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.startIndex.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.startIndex : EntityMatch@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for EntityMatch.startIndex : EntityMatch()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.startIndex.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.startIndex.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$startIndex.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.endIndex.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for EntityMatch.endIndex : EntityMatch@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for EntityMatch.endIndex : EntityMatch()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EntityMatch.endIndex.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*EntityMatch.endIndex.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return SearchContext.latitude.modify;
}

uint64_t EntityMatch.$endIndex.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityMatch.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t countAndFlagsBits;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (one-time initialization token for entityTypeMap != -1)
    swift_once();
  swift_beginAccess();
  v0 = static EntityMatchFormatter.entityTypeMap;
  if (!*(_QWORD *)(static EntityMatchFormatter.entityTypeMap + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v1 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
  if ((v2 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_endAccess();
    swift_bridgeObjectRetain();
    v4 = specialized Collection.dropFirst(_:)(1uLL, v25, v26);
    v6 = v5;
    v23 = v7;
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10 = specialized Collection.prefix(_:)(1);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x24955A638](v10, v12, v14, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    specialized Sequence.reduce<A>(_:_:)(v17, v19, v4, v6, v23, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16 * v1);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
LABEL_8:
  v20._countAndFlagsBits = 0x222064656D616E20;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 34;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return countAndFlagsBits;
}

uint64_t static EntityMatchFormatter.format(entityType:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t countAndFlagsBits;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (one-time initialization token for entityTypeMap != -1)
    swift_once();
  swift_beginAccess();
  v4 = static EntityMatchFormatter.entityTypeMap;
  if (!*(_QWORD *)(static EntityMatchFormatter.entityTypeMap + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_endAccess();
    swift_bridgeObjectRetain();
    v8 = specialized Collection.dropFirst(_:)(1uLL, a1, a2);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v15 = specialized Collection.prefix(_:)(1);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24955A638](v15, v17, v19, v21);
    v24 = v23;
    swift_bridgeObjectRelease();
    specialized Sequence.reduce<A>(_:_:)(v22, v24, v8, v10, v12, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    goto LABEL_8;
  }
  countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
  swift_endAccess();
  swift_bridgeObjectRetain();
LABEL_8:
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t EntityMatch.debugString.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v14;

  _StringGuts.grow(_:)(189);
  v0._countAndFlagsBits = 0xD00000000000001ELL;
  v0._object = (void *)0x8000000246453360;
  String.append(_:)(v0);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000246453380;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000002464533A0;
  v2._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000002464533C0;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  countAndFlagsBits = v14._countAndFlagsBits;
  if (LOBYTE(v14._object))
    countAndFlagsBits = -1;
  v14._countAndFlagsBits = countAndFlagsBits;
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0xD000000000000010;
  v6._object = (void *)0x80000002464533E0;
  String.append(_:)(v6);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = v14._countAndFlagsBits;
  if (LOBYTE(v14._object))
    v7 = -1;
  v14._countAndFlagsBits = v7;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD00000000000001CLL;
  v9._object = (void *)0x8000000246453400;
  String.append(_:)(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000246453420;
  v10._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v10);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  Double.write<A>(to:)();
  v11._countAndFlagsBits = 0xD000000000000019;
  v11._object = (void *)0x8000000246453440;
  String.append(_:)(v11);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32010;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t EntityMatch.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;

  v2 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  LocalizedStringResource.init(stringLiteral:)();
  v5 = MEMORY[0x249559F18](v4);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v6 = MEMORY[0x249559F18](v4);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v7 = MEMORY[0x249559F18](v4);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v8 = MEMORY[0x249559F18](v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Double>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v9 = MEMORY[0x249559F30](v4);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v10 = MEMORY[0x249559F18](v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int?>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v11 = MEMORY[0x249559F3C](v4);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v12 = MEMORY[0x249559F3C](v4);
  v14 = 0;
  LOBYTE(v15) = 1;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = 0;
  LOBYTE(v15) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = 0;
  v15 = 0xE000000000000000;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = 0;
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
  return result;
}

uint64_t static EntityMatch.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = type metadata accessor for TypeDisplayRepresentation();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static EntityMatch.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static EntityMatch.typeDisplayRepresentation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = type metadata accessor for TypeDisplayRepresentation();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static EntityMatch.typeDisplayRepresentation);
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static EntityMatch.typeDisplayRepresentation.modify())()
{
  uint64_t v0;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static EntityMatch.typeDisplayRepresentation);
  swift_beginAccess();
  return AudioExperience.internalSignalsFromSiriAudio.modify;
}

uint64_t EntityMatch.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  Swift::String v21;

  v20 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource();
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15[2] = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x24BDAC7A8](v8);
  v9 = *(_QWORD *)(v1 + 32);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15[1] = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v21);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v21);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, 1, 1, v17);
  v13 = type metadata accessor for DisplayRepresentation.Image();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v19, 1, 1, v13);
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance EntityMatch()
{
  lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  return static TransientAppEntity.defaultQuery.getter();
}

void protocol witness for Identifiable.id.getter in conformance EntityMatch()
{
  lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  JUMPOUT(0x249559EACLL);
}

uint64_t protocol witness for static TypeDisplayRepresentable.typeDisplayRepresentation.getter in conformance EntityMatch@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for typeDisplayRepresentation != -1)
    swift_once();
  v2 = type metadata accessor for TypeDisplayRepresentation();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static EntityMatch.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance EntityMatch()
{
  lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  return static AppEntity.defaultResolverSpecification.getter();
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance EntityMatch()
{
  lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  return InstanceDisplayRepresentable.localizedStringResource.getter();
}

unint64_t one-time initialization function for entityTypeMap()
{
  uint64_t inited;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_246450940;
  strcpy((char *)(inited + 32), "playlistTitle");
  *(_WORD *)(inited + 46) = -4864;
  strcpy((char *)(inited + 48), "music playlist");
  *(_BYTE *)(inited + 63) = -18;
  *(_QWORD *)(inited + 64) = 0x746954616964656DLL;
  *(_QWORD *)(inited + 72) = 0xEA0000000000656CLL;
  *(_QWORD *)(inited + 80) = 0x6F65646976;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = 0x746954636973756DLL;
  *(_QWORD *)(inited + 104) = 0xEA0000000000656CLL;
  *(_QWORD *)(inited + 112) = 1735290739;
  *(_QWORD *)(inited + 120) = 0xE400000000000000;
  strcpy((char *)(inited + 128), "appShowTitle");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(_QWORD *)(inited + 144) = 0x776F6873207674;
  *(_QWORD *)(inited + 152) = 0xE700000000000000;
  *(_QWORD *)(inited + 160) = 0xD000000000000011;
  *(_QWORD *)(inited + 168) = 0x80000002464534A0;
  *(_QWORD *)(inited + 176) = 0x6F62206F69647561;
  *(_QWORD *)(inited + 184) = 0xEA00000000006B6FLL;
  *(_QWORD *)(inited + 192) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 200) = 0x80000002464534C0;
  *(_QWORD *)(inited + 208) = 0xD000000000000019;
  *(_QWORD *)(inited + 216) = 0x80000002464534E0;
  strcpy((char *)(inited + 224), "personFullName");
  *(_BYTE *)(inited + 239) = -18;
  *(_QWORD *)(inited + 240) = 0x746361746E6F63;
  *(_QWORD *)(inited + 248) = 0xE700000000000000;
  *(_QWORD *)(inited + 256) = 0x69476E6F73726570;
  *(_QWORD *)(inited + 264) = 0xEF656D614E6E6576;
  *(_QWORD *)(inited + 272) = 0x746361746E6F63;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  *(_QWORD *)(inited + 288) = 0xD000000000000010;
  *(_QWORD *)(inited + 296) = 0x8000000246453500;
  *(_QWORD *)(inited + 304) = 0x74756374726F6873;
  *(_QWORD *)(inited + 312) = 0xE800000000000000;
  *(_QWORD *)(inited + 320) = 0x656D614E707061;
  *(_QWORD *)(inited + 328) = 0xE700000000000000;
  *(_QWORD *)(inited + 336) = 7368801;
  *(_QWORD *)(inited + 344) = 0xE300000000000000;
  *(_QWORD *)(inited + 352) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 360) = 0xE800000000000000;
  strcpy((char *)(inited + 368), "saved location");
  *(_BYTE *)(inited + 383) = -18;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static EntityMatchFormatter.entityTypeMap = result;
  return result;
}

uint64_t *EntityMatchFormatter.entityTypeMap.unsafeMutableAddressor()
{
  if (one-time initialization token for entityTypeMap != -1)
    swift_once();
  return &static EntityMatchFormatter.entityTypeMap;
}

uint64_t static EntityMatchFormatter.entityTypeMap.getter()
{
  if (one-time initialization token for entityTypeMap != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static EntityMatchFormatter.entityTypeMap.setter(uint64_t a1)
{
  if (one-time initialization token for entityTypeMap != -1)
    swift_once();
  swift_beginAccess();
  static EntityMatchFormatter.entityTypeMap = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static EntityMatchFormatter.entityTypeMap.modify())()
{
  if (one-time initialization token for entityTypeMap != -1)
    swift_once();
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

Swift::String __swiftcall String.splitByCapitalLetters()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String result;

  v2 = v1;
  v3 = v0;
  swift_bridgeObjectRetain();
  v4 = specialized Collection.dropFirst(_:)(1uLL, v3, v2);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11 = specialized Collection.prefix(_:)(1);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x24955A638](v11, v13, v15, v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  v21 = specialized Sequence.reduce<A>(_:_:)(v18, v20, v4, v6, v8, v10);
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v21;
  v25 = v23;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

uint64_t static EntityMatchFormatter.format(entities:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD v37[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    strcpy((char *)v37, "The user has ");
    HIWORD(v37[1]) = -4864;
    swift_bridgeObjectRetain();
    for (i = 48; ; i += 64)
    {
      if (v1 == 1)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v26 = 0x20646E61202CLL;
        v27 = 0xE600000000000000;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        if (i == 48)
          goto LABEL_11;
        v26 = 8236;
        v27 = 0xE200000000000000;
      }
      String.append(_:)(*(Swift::String *)&v26);
LABEL_11:
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      EntityProperty.wrappedValue.getter();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (one-time initialization token for entityTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v28 = static EntityMatchFormatter.entityTypeMap;
      v33 = v1;
      if (*(_QWORD *)(static EntityMatchFormatter.entityTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        if ((v30 & 1) != 0)
        {
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 16 * v29);
          countAndFlagsBits = *v31;
          object = (void *)v31[1];
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          goto LABEL_5;
        }
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_bridgeObjectRetain();
      v3 = specialized Collection.dropFirst(_:)(1uLL, v35, v36);
      v5 = v4;
      v7 = v6;
      v9 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v10 = specialized Collection.prefix(_:)(1);
      v12 = v11;
      v14 = v13;
      v16 = v15;
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x24955A638](v10, v12, v14, v16);
      v19 = v18;
      swift_bridgeObjectRelease();
      specialized Sequence.reduce<A>(_:_:)(v17, v19, v3, v5, v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = String.lowercased()();
      countAndFlagsBits = v20._countAndFlagsBits;
      object = v20._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v35 = countAndFlagsBits;
      v36 = (unint64_t)object;
      v23._countAndFlagsBits = 0x222064656D616E20;
      v23._object = (void *)0xE800000000000000;
      String.append(_:)(v23);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      EntityProperty.wrappedValue.getter();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 34;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v25._countAndFlagsBits = countAndFlagsBits;
      v25._object = object;
      String.append(_:)(v25);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v1 = v33 - 1;
      if (v33 == 1)
      {
        swift_bridgeObjectRelease();
        return v37[0];
      }
    }
  }
  return 0;
}

uint64_t closure #1 in String.splitByCapitalLetters()@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v10 = a1[1];
  v12 = *a2;
  static CharacterSet.uppercaseLetters.getter();
  LOBYTE(a2) = CharacterSet.contains(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((a2 & 1) != 0)
  {
    v34 = v11;
    v35 = v10;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 32;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = v34;
    v15 = v35;
    if (v12 > 0x7F)
    {
      v28 = (v12 & 0x3F) << 8;
      if (v12 >= 0x800)
      {
        v30 = (v28 | (v12 >> 6) & 0x3F) << 8;
        v31 = (((v30 | (v12 >> 12) & 0x3F) << 8) | (v12 >> 18)) - 2122219023;
        v16 = (v30 | (v12 >> 12)) + 8487393;
        if (HIWORD(v12))
          v16 = v31;
      }
      else
      {
        v16 = (v28 | (v12 >> 6)) + 33217;
      }
    }
    else
    {
      v16 = v12 + 1;
    }
    v34 = (v16 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v16) >> 3))));
    v17 = MEMORY[0x24955A668](&v34);
    v19 = v18;
    v34 = v14;
    v35 = v15;
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v12 > 0x7F)
    {
      v29 = (v12 & 0x3F) << 8;
      if (v12 >= 0x800)
      {
        v32 = (v29 | (v12 >> 6) & 0x3F) << 8;
        v33 = (((v32 | (v12 >> 12) & 0x3F) << 8) | (v12 >> 18)) - 2122219023;
        v21 = (v32 | (v12 >> 12)) + 8487393;
        if (HIWORD(v12))
          v21 = v33;
      }
      else
      {
        v21 = (v29 | (v12 >> 6)) + 33217;
      }
    }
    else
    {
      v21 = v12 + 1;
    }
    v34 = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v21) >> 3))));
    v22 = MEMORY[0x24955A668](&v34);
    v24 = v23;
    v34 = v11;
    v35 = v10;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
  }
  result = swift_bridgeObjectRelease();
  v27 = v35;
  *a3 = v34;
  a3[1] = v27;
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;

  v30 = a2;
  v29 = a1;
  v26 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
  {
    v7 = a1;
    swift_bridgeObjectRetain();
    return v7;
  }
  v23 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a6 & 0xFFFFFFFFFFFFFFLL;
  v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  if ((a6 & 0x2000000000000000) != 0)
    v14 = HIBYTE(a6) & 0xF;
  else
    v14 = a5 & 0xFFFFFFFFFFFFLL;
  v25 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = a3;
  while (1)
  {
    _StringGuts.validateScalarIndex(_:in:)(v15, a3, a4, a5, a6);
    if ((a6 & 0x1000000000000000) != 0)
    {
      result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a6 & 0x2000000000000000) != 0)
      {
        v27 = a5;
        v28 = v24;
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      result = _decodeScalar(_:startingAt:)();
    }
    v17 = result;
    if ((v15 & 0xC) != v13 && (v15 & 1) != 0)
      break;
    if ((v15 & 0xC) == v13)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      v15 = result;
    }
    if (v25 <= v15 >> 16)
      goto LABEL_40;
    if ((v15 & 1) != 0)
      goto LABEL_24;
    v15 = v15 & 0xC | _StringGuts.scalarAlignSlow(_:)(v15, a5, a6) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a6 & 0x1000000000000000) != 0)
    {
LABEL_34:
      v15 = String.UnicodeScalarView._foreignIndex(after:)();
      goto LABEL_35;
    }
LABEL_25:
    v18 = v15 >> 16;
    if ((a6 & 0x2000000000000000) != 0)
    {
      v27 = a5;
      v28 = v24;
      v20 = *((unsigned __int8 *)&v27 + v18);
    }
    else
    {
      v19 = v23;
      if ((a5 & 0x1000000000000000) == 0)
        v19 = _StringObject.sharedUTF8.getter();
      v20 = *(unsigned __int8 *)(v19 + v18);
    }
    v21 = (char)v20;
    v22 = __clz(v20 ^ 0xFF) - 24;
    if (v21 >= 0)
      LOBYTE(v22) = 1;
    v15 = ((v18 + v22) << 16) | 5;
LABEL_35:
    v31 = v17;
    closure #1 in String.splitByCapitalLetters()((uint64_t *)&v29, &v31, (uint64_t *)&v27);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
    v7 = v27;
    v29 = v27;
    v30 = v28;
    if (v26 == v15 >> 14)
    {
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  if (v25 > v15 >> 16)
  {
LABEL_24:
    if ((a6 & 0x1000000000000000) != 0)
      goto LABEL_34;
    goto LABEL_25;
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;
  unint64_t v10;
  uint64_t v11;

  v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v10 = result & 0xC;
  v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if ((result & 1) != 0)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;

  v7 = a3;
  v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((a3 & 0xC) == 4 << v10)
LABEL_55:
    v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a4, a5);
  v12 = a1;
  if ((a1 & 0xC) == v11)
    v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
  result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    v11 = 0;
    a1 = v12 >> 14;
    v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        v27 = v20;
        result = String.UnicodeScalarView._foreignIndex(before:)();
        v20 = v27;
      }
      else
      {
        v21 = result >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          v29 = a4;
          v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            v24 = 0;
            do
              v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            v26 = 1 - v24;
          }
          else
          {
            v26 = 1;
          }
          v21 -= v26;
        }
        else
        {
          v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
          {
            v28 = v20;
            v22 = _StringObject.sharedUTF8.getter();
            v20 = v28;
          }
          do
            v23 = *(_BYTE *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }
        result = (v21 << 16) | 5;
      }
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7)
          return result;
        return 0;
      }
    }
    return 0;
  }
  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000) != 0)
      v14 = HIBYTE(a5) & 0xF;
    else
      v14 = a4 & 0xFFFFFFFFFFFFLL;
    v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2)
          goto LABEL_26;
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v29 = a4;
          v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          v17 = *((unsigned __int8 *)&v29 + v15);
        }
        else
        {
          v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
            v16 = _StringObject.sharedUTF8.getter();
          v17 = *(unsigned __int8 *)(v16 + v15);
        }
        v18 = (char)v17;
        v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0)
          LOBYTE(v19) = 1;
        result = ((v15 + v19) << 16) | 5;
        if (!--a2)
          goto LABEL_26;
      }
    }
    return 0;
  }
LABEL_26:
  if (v7 >= a1 && v7 < result >> 14)
    return 0;
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(0xFuLL, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.UnicodeScalarView.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in EntityMatch()
{
  return lazy protocol witness table accessor for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>(&lazy protocol witness table cache variable for type _TransientAppEntityQuery<EntityMatch> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<EntityMatch>, MEMORY[0x24BDB4B08]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in EntityMatch()
{
  return lazy protocol witness table accessor for type _TransientAppEntityQuery<SearchContext> and conformance _TransientAppEntityQuery<A>(&lazy protocol witness table cache variable for type EmptyResolverSpecification<EntityMatch> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<EntityMatch>, MEMORY[0x24BDB6250]);
}

uint64_t destroy for EntityMatch()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for EntityMatch(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for EntityMatch(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for EntityMatch(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityMatch(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityMatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityMatch()
{
  return &type metadata for EntityMatch;
}

ValueMetadata *type metadata accessor for EntityMatchFormatter()
{
  return &type metadata for EntityMatchFormatter;
}

uint64_t PommesSearchReason.toInt.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SiriInformationTypes::PommesSearchReason_optional __swiftcall PommesSearchReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriInformationTypes::PommesSearchReason_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesSearchReason.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PommesSearchReason.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2463E7B34 + 4 * byte_246450BD0[*v0]))(0xD000000000000016, 0x8000000246452B00);
}

uint64_t sub_2463E7B34()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_2463E7B4C()
{
  return 0x616D6F446F666E69;
}

uint64_t sub_2463E7B70()
{
  return 0x4665737261506F6ELL;
}

unint64_t sub_2463E7B94()
{
  return 0xD000000000000010;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PommesSearchReason(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type PommesSearchReason and conformance PommesSearchReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason;
  if (!lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesSearchReason, &type metadata for PommesSearchReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance PommesSearchReason()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PommesSearchReason(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PommesSearchReason(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriInformationTypes::PommesSearchReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PommesSearchReason(Swift::String *a1)
{
  return PommesSearchReason.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PommesSearchReason@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PommesSearchReason.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PommesSearchReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesSearchReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2463E7D38 + 4 * byte_246450BDA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2463E7D6C + 4 * byte_246450BD5[v4]))();
}

uint64_t sub_2463E7D6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463E7D74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2463E7D7CLL);
  return result;
}

uint64_t sub_2463E7D88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2463E7D90);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2463E7D94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463E7D9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for PommesSearchReason(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for PommesSearchReason(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchReason()
{
  return &type metadata for PommesSearchReason;
}

id ClientAudioResult.vocabularyResult.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch17ClientAudioResult_vocabularyResult);
}

id ClientAudioResult.__allocating_init(domain:vocabularyResult:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return ClientAudioResult.init(domain:vocabularyResult:)(a1, a2, a3);
}

id ClientAudioResult.init(domain:vocabularyResult:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(void);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  objc_class *v28;
  _QWORD v30[3];
  unsigned __int8 v31;
  objc_super v32;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch17ClientAudioResult_vocabularyResult] = a3;
    if (*(_QWORD *)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType) == 5)
    {
      v11 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a3) + 0xA8);
      v12 = a3;
      v13 = v11();
      KVFieldType.audioType.getter(v13, (uint64_t)v10);
      v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 0, 1, v14);
      static ClientAudioResult.Scheme.from(_:)((uint64_t)v10, (char *)&v31);
      outlined destroy of ClientExperienceSignals?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
      v15 = v31;
      v16 = (char *)v12 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId;
      v17 = *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId);
      v18 = *((_QWORD *)v16 + 1);
      swift_bridgeObjectRetain_n();
      v19 = specialized Data.init<A>(_:)(v17, v18);
      v21 = v20;
      v30[0] = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
      outlined consume of Data._Representation(v19, v21);
      v30[1] = 0;
      v30[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      __asm { BR              X9 }
    }
    v24 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId);
    v23 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId + 8);
    v25 = a3;
    swift_bridgeObjectRetain();
    v26 = &v4[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId];
    *(_QWORD *)v26 = v24;
    *((_QWORD *)v26 + 1) = v23;
    v27 = &v4[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain];
    *(_QWORD *)v27 = a1;
    *((_QWORD *)v27 + 1) = a2;
    *(_OWORD *)&v4[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata] = xmmword_246450CE0;
    v28 = (objc_class *)type metadata accessor for PommesResult();
    v32.receiver = v4;
    v32.super_class = v28;
    v22 = objc_msgSendSuper2(&v32, sel_init);

  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ClientAudioResult();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v22;
}

uint64_t static ClientAudioResult.Scheme.from(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t result;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a1, (uint64_t)&v17 - v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
    v12 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v7, v10);
    if (v12 != *MEMORY[0x24BE70868])
    {
      if (v12 == *MEMORY[0x24BE70870])
      {
        v13 = 1;
        goto LABEL_4;
      }
      if (v12 == *MEMORY[0x24BE70888])
      {
        v13 = 7;
        goto LABEL_4;
      }
      if (v12 == *MEMORY[0x24BE70878])
      {
        v13 = 8;
        goto LABEL_4;
      }
      if (v12 == *MEMORY[0x24BE708A0])
      {
        *a2 = 0;
        return outlined destroy of ClientExperienceSignals?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
      }
      if (v12 == *MEMORY[0x24BE70840])
      {
        v13 = 6;
        goto LABEL_4;
      }
      if (v12 == *MEMORY[0x24BE70850])
      {
        v13 = 3;
        goto LABEL_4;
      }
      if (v12 == *MEMORY[0x24BE708A8])
      {
        v13 = 9;
        goto LABEL_4;
      }
      if (v12 == *MEMORY[0x24BE70880] || v12 == *MEMORY[0x24BE70890] || v12 == *MEMORY[0x24BE70848])
      {
        result = outlined destroy of ClientExperienceSignals?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
        *a2 = 2;
        return result;
      }
      if (v12 != *MEMORY[0x24BE70838])
      {
        if (v12 == *MEMORY[0x24BE70858])
        {
          v13 = 5;
          goto LABEL_4;
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
      }
    }
  }
  v13 = 2;
LABEL_4:
  *a2 = v13;
  return outlined destroy of ClientExperienceSignals?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - v8;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a1, (uint64_t)&v15 - v8, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v10 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    v13 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v7, v10);
    if (v13 == *MEMORY[0x24BEA16B0])
    {
      v12 = 7;
      goto LABEL_10;
    }
    if (v13 == *MEMORY[0x24BEA1700])
    {
      v12 = 0;
      goto LABEL_10;
    }
    if (v13 != *MEMORY[0x24BEA1680])
    {
      if (v13 == *MEMORY[0x24BEA1688])
      {
        v12 = 1;
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
    }
  }
  v12 = 2;
LABEL_10:
  *a2 = v12;
  return outlined destroy of ClientExperienceSignals?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
}

Swift::String __swiftcall ClientAudioResult.Scheme.buildSiriSyncURI(withId:)(Swift::String withId)
{
  unsigned __int8 *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String result;

  object = withId._object;
  countAndFlagsBits = withId._countAndFlagsBits;
  v4 = *v1;
  swift_bridgeObjectRetain();
  v5 = specialized Data.init<A>(_:)(countAndFlagsBits, (unint64_t)object);
  v7 = v6;
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v5, v7);
  _StringGuts.grow(_:)(16);
  __asm { BR              X9 }
  return result;
}

uint64_t sub_2463E84D8()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;

  v2._countAndFlagsBits = 0x6C70706D61732D78;
  v2._object = (void *)0xEE007473696C7961;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x73697269732F2F3ALL;
  v3._object = (void *)0xEC0000002F636E79;
  String.append(_:)(v3);
  v4._countAndFlagsBits = v1;
  v4._object = v0;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6;
}

id ClientAudioResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ClientAudioResult.init(coder:)(a1);
}

id ClientAudioResult.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  type metadata accessor for VocabularyResult();
  v3 = v1;
  v4 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch17ClientAudioResult_vocabularyResult] = v4;
    v5 = v4;

    v6 = PommesResult.init(coder:)(a1);
    v7 = v6;

    if (v6)
  }
  else
  {

    type metadata accessor for ClientAudioResult();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v6;
}

Swift::Void __swiftcall ClientAudioResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch17ClientAudioResult_vocabularyResult);
  v4 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x8000000246453520);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  PommesResult.encode(with:)(with);
}

uint64_t ClientAudioResult.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;

  v1 = v0;
  _StringGuts.grow(_:)(71);
  v2._object = (void *)0x8000000246453540;
  v2._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v2);
  v3 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch17ClientAudioResult_vocabularyResult), sel_description);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6E69616D6F64202CLL;
  v8._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v8);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain + 8);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x6C75736572202C22;
  v12._object = (void *)0xEE0022203A644974;
  String.append(_:)(v12);
  v13 = v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId);
  v15 = *(void **)(v13 + 8);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8200226;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of ClientExperienceSignals?((uint64_t)v14, &demangling cache variable for type metadata for ContiguousBytes?);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = _StringObject.sharedUTF8.getter();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = specialized Data._Representation.init(_:)(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = specialized Data._Representation.init(count:)(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }
  outlined init with take of ContiguousBytes(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t ClientAudioResult.Scheme.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2463E8F34 + 4 * byte_246450D14[*v0]))(0xD000000000000016, 0x8000000246452B40);
}

uint64_t sub_2463E8F34()
{
  return 0x6C70706D61732D78;
}

uint64_t sub_2463E8F58()
{
  return 0x656D706D61732D78;
}

uint64_t sub_2463E8F7C(uint64_t a1)
{
  return a1 - 2;
}

uint64_t type metadata accessor for ClientAudioResult()
{
  return objc_opt_self();
}

Swift::String __swiftcall ClientAudioResult.Scheme.buildDeviceID(withId:)(Swift::String withId)
{
  Swift::String result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_2463E9068()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;

  v2._countAndFlagsBits = 0x6C70706D61732D78;
  v2._object = (void *)0xEE007473696C7961;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x63697665642F2F3ALL;
  v3._object = (void *)0xEA00000000002F65;
  String.append(_:)(v3);
  v4._countAndFlagsBits = v1;
  v4._object = v0;
  String.append(_:)(v4);
  return v6;
}

SiriInformationSearch::ClientAudioResult::Scheme_optional __swiftcall ClientAudioResult.Scheme.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriInformationSearch::ClientAudioResult::Scheme_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ClientAudioResult.Scheme.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 10;
  if (v5 < 0xA)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static ClientAudioResult.Scheme.allCases.getter()
{
  return &outlined read-only object #0 of static ClientAudioResult.Scheme.allCases.getter;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ClientAudioResult.Scheme(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ClientAudioResult.Scheme()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ClientAudioResult.Scheme(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClientAudioResult.Scheme()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

SiriInformationSearch::ClientAudioResult::Scheme_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ClientAudioResult.Scheme(Swift::String *a1)
{
  return ClientAudioResult.Scheme.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ClientAudioResult.Scheme@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ClientAudioResult.Scheme.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ClientAudioResult.Scheme(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ClientAudioResult.Scheme.allCases.getter;
}

void ClientAudioResult.__allocating_init(resultId:domain:metadata:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ClientAudioResult.init(resultId:domain:metadata:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ClientAudioResult.__ivar_destroyer()
{
  uint64_t v0;

}

id ClientAudioResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientAudioResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ClientAudioResult.Scheme and conformance ClientAudioResult.Scheme()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientAudioResult.Scheme and conformance ClientAudioResult.Scheme;
  if (!lazy protocol witness table cache variable for type ClientAudioResult.Scheme and conformance ClientAudioResult.Scheme)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for ClientAudioResult.Scheme, &type metadata for ClientAudioResult.Scheme);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientAudioResult.Scheme and conformance ClientAudioResult.Scheme);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ClientAudioResult.Scheme] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ClientAudioResult.Scheme] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ClientAudioResult.Scheme] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ClientAudioResult.Scheme]);
    result = MEMORY[0x24955ADAC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ClientAudioResult.Scheme] and conformance [A]);
  }
  return result;
}

uint64_t method lookup function for ClientAudioResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClientAudioResult.__allocating_init(domain:vocabularyResult:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t getEnumTagSinglePayload for ClientAudioResult.Scheme(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientAudioResult.Scheme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_2463E9668 + 4 * byte_246450D2D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_2463E969C + 4 * byte_246450D28[v4]))();
}

uint64_t sub_2463E969C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463E96A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2463E96ACLL);
  return result;
}

uint64_t sub_2463E96B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2463E96C0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_2463E96C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463E96CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientAudioResult.Scheme()
{
  return &type metadata for ClientAudioResult.Scheme;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24955A6B0](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X11 }
}

_QWORD *sub_2463E97C0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t outlined consume of Data._Representation?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined init with take of ContiguousBytes(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t VideoExperience.videoClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch15VideoExperience_videoClientComponent;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t VideoExperience.__allocating_init(pluginId:videoClientComponent:queryConfidenceScore:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  Siri_Nlu_External_UserDialogAct.init()();
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, double))(v4 + 336))(a1, a2, v15, v11, a4);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  return v16;
}

id VideoExperience.__allocating_init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:)(a1, a2, a3, a4, a5);
}

id VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, double a5)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  id v19;
  char *v20;
  uint64_t v21;
  objc_class *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_super v32;

  v30 = a3;
  v27 = a1;
  v28 = a2;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v5[OBJC_IVAR____TtC21SiriInformationSearch15VideoExperience_videoClientComponent];
  v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v31 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v17, a3, v29);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v18(v16, (uint64_t)a4, v13);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BE6FC50], v9);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v20 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v21 = v28;
  *(_QWORD *)v20 = v27;
  *((_QWORD *)v20 + 1) = v21;
  *(double *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a5;
  v18(&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v16, v13);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v19;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v12, v9);
  v22 = (objc_class *)type metadata accessor for Experience(0);
  v32.receiver = v5;
  v32.super_class = v22;
  v23 = objc_msgSendSuper2(&v32, sel_init);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v16, v13);
  v24(a4, v13);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v29);
  return v23;
}

id VideoExperience.__allocating_init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(a1, a2, a3, a4, a5, a6);
}

id VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  objc_class *v23;
  id v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;

  v32 = a5;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v6[OBJC_IVAR____TtC21SiriInformationSearch15VideoExperience_videoClientComponent];
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v31 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v17, a3, v18);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20 = v27;
  v19(v16, (uint64_t)v27, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BE6FC50], v9);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v21 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v22 = v29;
  *(_QWORD *)v21 = v28;
  *((_QWORD *)v21 + 1) = v22;
  *(double *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v19(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v16, v13);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v32;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v12, v9);
  v23 = (objc_class *)type metadata accessor for Experience(0);
  v33.receiver = v6;
  v33.super_class = v23;
  v24 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v16, v13);
  v25(v20, v13);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v18);
  return v24;
}

void *VideoExperience.catIds.getter()
{
  return &outlined read-only object #0 of VideoExperience.catIds.getter;
}

id VideoExperience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VideoExperience.init(coder:)(a1);
}

id VideoExperience.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSData();
  v8 = v1;
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v9)
  {
    v10 = (void *)v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_VideoClientComponent and conformance Apple_Parsec_Siri_V2alpha_VideoClientComponent();
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC21SiriInformationSearch15VideoExperience_videoClientComponent, v7, v4);

    v15 = Experience.init(coder:)(a1);
    v16 = v15;

    if (v15)
  }
  else
  {

    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2463D2000, v12, v13, "VideoExperience cannot be decoded", v14, 2u);
      MEMORY[0x24955AE30](v14, -1, -1);
    }

    type metadata accessor for VideoExperience();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v15;
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

Swift::Void __swiftcall VideoExperience.encode(with:)(NSCoder with)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Class isa;
  void *v6;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_VideoClientComponent and conformance Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v2, v4);
  v6 = (void *)MEMORY[0x24955A5F0](0xD000000000000014, 0x8000000246453620);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  Experience.encode(with:)(with);
}

void VideoExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VideoExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t VideoExperience.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch15VideoExperience_videoClientComponent;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id VideoExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VideoExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for VideoExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for VideoExperience;
  if (!type metadata singleton initialization cache for VideoExperience)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_VideoClientComponent and conformance Apple_Parsec_Siri_V2alpha_VideoClientComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_VideoClientComponent and conformance Apple_Parsec_Siri_V2alpha_VideoClientComponent;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_VideoClientComponent and conformance Apple_Parsec_Siri_V2alpha_VideoClientComponent)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BE70E18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_VideoClientComponent and conformance Apple_Parsec_Siri_V2alpha_VideoClientComponent);
  }
  return result;
}

uint64_t ObjC metadata update function for VideoExperience()
{
  return type metadata accessor for VideoExperience();
}

uint64_t type metadata completion function for VideoExperience()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for VideoExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VideoExperience.__allocating_init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of VideoExperience.__allocating_init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000013;
    else
      v3 = 0xD00000000000001ALL;
    if (v2 == 1)
      v4 = 0x8000000246452CA0;
    else
      v4 = 0x8000000246452CC0;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000013;
      else
        v6 = 0xD00000000000001ALL;
      if (v5 == 1)
        v7 = 0x8000000246452CA0;
      else
        v7 = 0x8000000246452CC0;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = 0x656E696665646E75;
    v4 = 0xE900000000000064;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE900000000000064;
  if (v3 != 0x656E696665646E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X12 }
}

uint64_t sub_2463EB2C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2463EB398 + 4 * byte_246450EDA[a2]))(0x6C70706D61732D78);
}

uint64_t sub_2463EB398(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C70706D61732D78 && v1 == 0xEE007473696C7961)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2463EB4F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2463EB58C + 4 * byte_246450EE9[a2]))(0x6E776F6E6B6E75);
}

uint64_t sub_2463EB58C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E776F6E6B6E75 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id PommesResult.init(resultId:domain:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v7 = &v6[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a2;
  v8 = &v6[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain];
  *(_QWORD *)v8 = a3;
  *((_QWORD *)v8 + 1) = a4;
  v9 = &v6[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata];
  *(_QWORD *)v9 = a5;
  *((_QWORD *)v9 + 1) = a6;
  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for PommesResult();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t type metadata accessor for PommesResult()
{
  return objc_opt_self();
}

id PommesResult.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t *v21;
  objc_super v23;

  v2 = v1;
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v5)
    goto LABEL_6;
  v6 = (void *)v5;
  v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v7)
  {

LABEL_6:
    type metadata accessor for PommesResult();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v8 = (void *)v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = (uint64_t *)&v4[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId];
  *v10 = v9;
  v10[1] = v11;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = (uint64_t *)&v4[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain];
  *v13 = v12;
  v13[1] = v14;
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v15)
  {
    v16 = (void *)v15;
    v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    v6 = v8;
    v8 = v16;
  }
  else
  {
    v17 = 0;
    v19 = 0xF000000000000000;
  }

  v21 = (uint64_t *)&v4[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata];
  *v21 = v17;
  v21[1] = v19;

  v23.receiver = v4;
  v23.super_class = (Class)type metadata accessor for PommesResult();
  v20 = objc_msgSendSuper2(&v23, sel_init);

  return v20;
}

Swift::Void __swiftcall PommesResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;

  v3 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId), *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId + 8));
  v4 = (void *)MEMORY[0x24955A5F0](0x6449746C75736572, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain), *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain + 8));
  v6 = (void *)MEMORY[0x24955A5F0](0x6E69616D6F64, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *v7;
    outlined copy of Data._Representation(*v7, v8);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v11 = (void *)MEMORY[0x24955A5F0](0x617461646174656DLL, 0xE800000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v11);

    outlined consume of Data._Representation?(v9, v8);
  }
}

uint64_t PommesResult.resultId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResult.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResult.metadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata + 8));
  return v1;
}

id PommesResult.__allocating_init(resultId:domain:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_resultId];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_domain];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v13[OBJC_IVAR____TtC21SiriInformationSearch12PommesResult_metadata];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v13;
  v18.super_class = v6;
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

id PommesResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PommesResult.init(coder:)(a1);
}

id PommesResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PommesResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PommesResult.__deallocating_deinit()
{
  return PommesResult.__deallocating_deinit(type metadata accessor for PommesResult);
}

uint64_t PommesCandidateId.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;

  if (!*(_BYTE *)(v0 + 32))
  {
    v1 = 0;
LABEL_6:
    Hasher._combine(_:)(v1);
    return String.hash(into:)();
  }
  if (*(_BYTE *)(v0 + 32) != 1)
  {
    v1 = 2;
    goto LABEL_6;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
  return String.hash(into:)();
}

uint64_t PommesCandidateId.CodingKeys.stringValue.getter(char a1)
{
  return qword_246451548[a1];
}

uint64_t PommesCandidateId.MedocCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6449756374;
  else
    return 0x6449707274;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PommesCandidateId.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesCandidateId.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PommesCandidateId.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesCandidateId.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesCandidateId.CodingKeys()
{
  char *v0;

  return PommesCandidateId.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesCandidateId.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesCandidateId.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PommesCandidateId.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesCandidateId.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesCandidateId.CodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesCandidateId.CodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys();
  return CodingKey.debugDescription.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PommesCandidateId.MedocCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesCandidateId.MedocCodingKeys()
{
  char *v0;

  return PommesCandidateId.MedocCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesCandidateId.MedocCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesCandidateId.MedocCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesCandidateId.MedocCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesCandidateId.MedocCodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesCandidateId.MedocCodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesCandidateId.RcCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesCandidateId.RcCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesCandidateId.RcCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesCandidateId.RcCodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesCandidateId.RcCodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesCandidateId.RcCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PommesCandidateId.RunPommesCodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesCandidateId.RcCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesCandidateId.RunPommesCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesCandidateId.RunPommesCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesCandidateId.RunPommesCodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesCandidateId.RunPommesCodingKeys()
{
  lazy protocol witness table accessor for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PommesCandidateId.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesCandidateId.RunPommesCodingKeys>);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesCandidateId.MedocCodingKeys>);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v28 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesCandidateId.RcCodingKeys>);
  v25 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesCandidateId.CodingKeys>);
  v34 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1[1];
  v31 = *v1;
  v32 = v14;
  v15 = v1[2];
  v24[1] = v1[3];
  v24[2] = v15;
  v16 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v36 = 0;
    lazy protocol witness table accessor for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys();
    v22 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v13, v22);
  }
  if (v16 != 1)
  {
    v40 = 2;
    lazy protocol witness table accessor for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys();
    v22 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v27;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v13, v22);
  }
  v39 = 1;
  lazy protocol witness table accessor for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys();
  v17 = v28;
  v18 = v35;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v38 = 0;
  v19 = v30;
  v20 = v33;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v20)
  {
    v37 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v13, v18);
}

Swift::Int PommesCandidateId.hashValue.getter()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (!v1)
  {
    v2 = 0;
LABEL_6:
    Hasher._combine(_:)(v2);
    goto LABEL_7;
  }
  if (v1 != 1)
  {
    v2 = 2;
    goto LABEL_6;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
LABEL_7:
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PommesCandidateId.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;

  v51 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesCandidateId.RunPommesCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  v53 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesCandidateId.MedocCodingKeys>);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesCandidateId.RcCodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesCandidateId.CodingKeys>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys();
  v16 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v48 = v8;
    v49 = v7;
    v17 = v56;
    v18 = v57;
    v19 = v55;
    v50 = v12;
    v59 = v14;
    v20 = KeyedDecodingContainer.allKeys.getter();
    v21 = v11;
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      v22 = *(unsigned __int8 *)(v20 + 32);
      v47[1] = v20;
      if (v22)
      {
        if (v22 == 1)
        {
          v63 = 1;
          lazy protocol witness table accessor for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys();
          v23 = v19;
          v24 = v59;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v62 = 0;
          v47[0] = KeyedDecodingContainer.decode(_:forKey:)();
          v38 = v37;
          v61 = 1;
          v39 = v17;
          v43 = KeyedDecodingContainer.decode(_:forKey:)();
          v45 = v44;
          (*(void (**)(char *, uint64_t))(v54 + 8))(v23, v39);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v24, v21);
          v46 = v38;
LABEL_11:
          v42 = v51;
          *v51 = v47[0];
          v42[1] = v46;
          v42[2] = v43;
          v42[3] = v45;
          *((_BYTE *)v42 + 32) = v22;
          return __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
        }
        v64 = 2;
        lazy protocol witness table accessor for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys();
        v34 = v59;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v35 = v52;
        v36 = KeyedDecodingContainer.decode(_:forKey:)();
        v46 = v41;
        v47[0] = v36;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v35);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v11);
      }
      else
      {
        v60 = 0;
        lazy protocol witness table accessor for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys();
        v30 = v10;
        v31 = v59;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v32 = v49;
        v33 = KeyedDecodingContainer.decode(_:forKey:)();
        v46 = v40;
        v47[0] = v33;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v32);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v21);
      }
      v43 = 0;
      v45 = 0;
      goto LABEL_11;
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v27 = &type metadata for PommesCandidateId;
    v28 = v59;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v11);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesCandidateId()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (!v1)
  {
    v2 = 0;
LABEL_6:
    Hasher._combine(_:)(v2);
    goto LABEL_7;
  }
  if (v1 != 1)
  {
    v2 = 2;
    goto LABEL_6;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
LABEL_7:
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PommesCandidateId()
{
  uint64_t v0;
  Swift::UInt v1;

  if (!*(_BYTE *)(v0 + 32))
  {
    v1 = 0;
LABEL_6:
    Hasher._combine(_:)(v1);
    return String.hash(into:)();
  }
  if (*(_BYTE *)(v0 + 32) != 1)
  {
    v1 = 2;
    goto LABEL_6;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesCandidateId()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (!v1)
  {
    v2 = 0;
LABEL_6:
    Hasher._combine(_:)(v2);
    goto LABEL_7;
  }
  if (v1 != 1)
  {
    v2 = 2;
    goto LABEL_6;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
LABEL_7:
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PommesCandidateId@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PommesCandidateId.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesCandidateId(_QWORD *a1)
{
  return PommesCandidateId.encode(to:)(a1);
}

uint64_t static PommesResponse.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static PommesResponse.supportsSecureCoding;
}

uint64_t static PommesResponse.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static PommesResponse.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static PommesResponse.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.__allocating_init(pegasusResponse:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  char v10;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  memset(v9, 0, sizeof(v9));
  v10 = -1;
  PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)((uint64_t)v5, MEMORY[0x24BEE4AF8], 0, 0, v9, MEMORY[0x24BEE4AF8], 0);
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v7;
}

void PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  double v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int v101;
  __int128 v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD v117[2];
  char v118;

  v8 = v7;
  v111 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  v115 = *(_QWORD *)(v111 - 8);
  v16 = MEMORY[0x24BDAC7A8](v111);
  v110 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v109 = (char *)&v90 - v18;
  v113 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v106 = *(_QWORD *)(v113 - 8);
  v19 = MEMORY[0x24BDAC7A8](v113);
  v100 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v99 = (char *)&v90 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v108 = (char *)&v90 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v90 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v90 - v28;
  v103 = *a5;
  v102 = a5[1];
  v101 = *((unsigned __int8 *)a5 + 32);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v89 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v30 = v89;
  }
  else
  {
    v30 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v105 = a3;
  v104 = a7;
  v107 = (char *)v30;
  if (v30)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v31 = (_QWORD *)MEMORY[0x24955A830](0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_45:
        swift_bridgeObjectRetain();
        v60 = (_QWORD *)MEMORY[0x24955A830](0, a2);
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v31 = *(id *)(a2 + 32);
    }
    v32 = v31;
    v95 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v31) + 0x88))();
    v34 = v33;

    if ((a2 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v35 = (_QWORD *)MEMORY[0x24955A830](0, a2);
      v36 = (_QWORD *)swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_47:
        __break(1u);
        return;
      }
      v36 = *(id *)(a2 + 32);
      v35 = v36;
    }
    v37 = (*(double (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *v35) + 0xA0))(v36);

  }
  else
  {
    v34 = 0xE700000000000000;
    v95 = 0x6E776F6E6B6E55;
    v37 = 0.0;
  }
  v96 = a4;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.debug.getter();
  v41 = os_log_type_enabled(v39, v40);
  v114 = a2;
  v98 = v8;
  v97 = a6;
  if (v41)
  {
    v42 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    *(_QWORD *)&v117[0] = v43;
    *(_DWORD *)v42 = 136315394;
    swift_bridgeObjectRetain();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v34, (uint64_t *)v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v42 + 12) = 2048;
    v116 = *(_QWORD *)&v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2463D2000, v39, v40, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy();
    v44 = v43;
    a2 = v114;
    MEMORY[0x24955AE30](v44, -1, -1);
    MEMORY[0x24955AE30](v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v45 = v106;
  a4 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  v106 = v46;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v95 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v94 = v47;
  v48 = *(void (**)(char *, uint64_t))(v45 + 8);
  v8 = v113;
  v48(v29, v113);
  v93 = specialized Sequence.flatMap<A>(_:)(a2);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v49 = v109;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v50 = v27;
  v27 = (char *)v48;
  v48(v50, v8);
  v92 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  v91 = v51;
  v52 = *(void (**)(char *, uint64_t))(v115 + 8);
  v53 = v49;
  v54 = v111;
  v52(v53, v111);
  v55 = v108;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v56 = v110;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  ((void (*)(char *, uint64_t))v27)(v55, v8);
  v57 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v59 = v58;
  v52(v56, v54);
  v108 = v59;
  v109 = (char *)v57;
  if (!v107)
  {
    LODWORD(v110) = 0;
    goto LABEL_24;
  }
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_45;
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_47;
  }
  v60 = *(id *)(a2 + 32);
LABEL_22:
  LODWORD(v110) = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v60) + 0xF0))();

LABEL_24:
  v111 = a4;
  v61 = v99;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v62 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  ((void (*)(char *, uint64_t))v27)(v61, v8);
  v63 = *(_QWORD *)(v62 + 16);
  v64 = MEMORY[0x24BEE4AF8];
  v112 = a1;
  if (v63)
  {
    v107 = v27;
    *(_QWORD *)&v117[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
    v65 = *(_QWORD *)&v117[0];
    v66 = v62 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
    v67 = *(_QWORD *)(v115 + 72);
    do
    {
      v68 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      v70 = v69;
      *(_QWORD *)&v117[0] = v65;
      v72 = *(_QWORD *)(v65 + 16);
      v71 = *(_QWORD *)(v65 + 24);
      if (v72 >= v71 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
        v65 = *(_QWORD *)&v117[0];
      }
      *(_QWORD *)(v65 + 16) = v72 + 1;
      v73 = v65 + 16 * v72;
      *(_QWORD *)(v73 + 32) = v68;
      *(_QWORD *)(v73 + 40) = v70;
      v66 += v67;
      --v63;
    }
    while (v63);
    swift_bridgeObjectRelease();
    a1 = v112;
    v8 = v113;
    a2 = v114;
    v27 = v107;
    v64 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v65 = MEMORY[0x24BEE4AF8];
  }
  v74 = v100;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v75 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  ((void (*)(char *, uint64_t))v27)(v74, v8);
  v76 = *(_QWORD *)(v75 + 16);
  if (v76)
  {
    *(_QWORD *)&v117[0] = v64;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
    v77 = *(_QWORD *)&v117[0];
    v78 = *(unsigned __int8 *)(v115 + 80);
    v113 = v75;
    v79 = v75 + ((v78 + 32) & ~v78);
    v80 = *(_QWORD *)(v115 + 72);
    do
    {
      v81 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      v83 = v82;
      *(_QWORD *)&v117[0] = v77;
      v85 = *(_QWORD *)(v77 + 16);
      v84 = *(_QWORD *)(v77 + 24);
      if (v85 >= v84 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1);
        v77 = *(_QWORD *)&v117[0];
      }
      *(_QWORD *)(v77 + 16) = v85 + 1;
      v86 = v77 + 16 * v85;
      *(_QWORD *)(v86 + 32) = v81;
      *(_QWORD *)(v86 + 40) = v83;
      v79 += v80;
      --v76;
    }
    while (v76);
    swift_bridgeObjectRelease();
    a1 = v112;
    a2 = v114;
    v64 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v77 = MEMORY[0x24BEE4AF8];
  }
  v117[0] = v103;
  v117[1] = v102;
  v118 = v101;
  if ((v104 & 1) != 0)
    v87 = 3;
  else
    v87 = 0;
  LOBYTE(v116) = v87;
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, _BYTE, uint64_t, uint64_t, _OWORD *, _BYTE, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v98 + 304))(a2, v97, v111, v106, v95, v94, v93, v92, v91, v109, v108, v110 & 1, v105, v96, v117, 0, 0, 0, v65,
    v77,
    v64,
    &v116);
  v88 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(a1, v88);
}

uint64_t PommesResponse.__allocating_init(pegasusResponse:clientResults:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  char v12;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  memset(v11, 0, sizeof(v11));
  v12 = -1;
  PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)((uint64_t)v7, MEMORY[0x24BEE4AF8], 0, 0, v11, a2, 0);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v9;
}

uint64_t PommesResponse.__allocating_init(pegasusResponse:experiences:clientResults:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[2];
  char v14;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  memset(v13, 0, sizeof(v13));
  v14 = -1;
  PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)((uint64_t)v9, a2, 0, 0, v13, a3, 0);
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

uint64_t PommesResponse.__allocating_init(pegasusResponse:requestId:resultCandidateId:clientResults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    v16 = 0;
  }
  else
  {
    a4 = 0;
    v16 = -1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  *(_QWORD *)&v21 = a4;
  *((_QWORD *)&v21 + 1) = a5;
  v22 = 0;
  v23 = 0;
  v24 = v16;
  PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)((uint64_t)v15, MEMORY[0x24BEE4AF8], a2, a3, &v21, a6, 0);
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v18;
}

uint64_t PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:resultCandidateId:clientResults:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v22 = a7;
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a6)
  {
    v17 = 0;
  }
  else
  {
    a5 = 0;
    v17 = -1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  *(_QWORD *)&v23 = a5;
  *((_QWORD *)&v23 + 1) = a6;
  v24 = 0;
  v25 = 0;
  v26 = v17;
  PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)((uint64_t)v16, a2, a3, a4, &v23, v22, 0);
  v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v19;
}

uint64_t PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:resultCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  char v23;
  uint64_t v24;
  char v32;
  _QWORD v33[4];
  char v34;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a16)
  {
    v23 = 0;
  }
  else
  {
    a15 = 0;
    v23 = -1;
  }
  v24 = specialized Sequence.flatMap<A>(_:)(a1);
  v33[0] = a15;
  v33[1] = a16;
  v33[2] = 0;
  v33[3] = 0;
  v34 = v23;
  v32 = 0;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, _QWORD *, _BYTE, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, char *))(v20 + 304))(a1, a2, a3, a4, a5, a6, v24, a8, a9, a10, a11, a12, a13, a14, v33, 0, 0, 0, a20,
           MEMORY[0x24BEE4AF8],
           MEMORY[0x24BEE4AF8],
           &v32);
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;

  if (a1 >> 62)
    goto LABEL_35;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v4 = 4;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (_QWORD *)MEMORY[0x24955A830](v4 - 4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        swift_bridgeObjectRetain();
        v2 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_3;
      }
      v8 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v5) + 0xE0))();

      v9 = *(_QWORD *)(v8 + 16);
      v10 = v3[2];
      v11 = v10 + v9;
      if (__OFADD__(v10, v9))
        goto LABEL_31;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_20;
      }
      else
      {
        if (v10 <= v11)
          v13 = v10 + v9;
        else
          v13 = v10;
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v3);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_20:
          v14 = v3[2];
          if ((v3[3] >> 1) - v14 < v9)
            goto LABEL_33;
          v15 = (unint64_t)&v3[2 * v14 + 4];
          if (v8 + 32 < v15 + 16 * v9 && v15 < v8 + 32 + 16 * v9)
          {
            result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v9)
          {
            v17 = v3[2];
            v18 = __OFADD__(v17, v9);
            v19 = v17 + v9;
            if (v18)
              goto LABEL_34;
            v3[2] = v19;
          }
          goto LABEL_6;
        }
      }
      if (v9)
        goto LABEL_32;
LABEL_6:
      swift_bridgeObjectRelease();
      ++v4;
    }
    while (v7 != v2);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

uint64_t PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:resultCandidateId:clientResults:isPersonalDomainFallback:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v23 = a8;
  v22 = a7;
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a6)
  {
    v18 = 0;
  }
  else
  {
    a5 = 0;
    v18 = -1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  *(_QWORD *)&v24 = a5;
  *((_QWORD *)&v24 + 1) = a6;
  v25 = 0;
  v26 = 0;
  v27 = v18;
  PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:)((uint64_t)v17, a2, a3, a4, &v24, v22, v23);
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v20;
}

uint64_t PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:resultCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:isPersonalDomainFallback:taskStepLogs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(v14 + 304))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:isPersonalDomainFallback:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(v14 + 304))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void PommesResponse.__allocating_init(pegasusResponse:experiences:requestId:pommesCandidateId:clientResults:isPersonalDomainFallback:componentsWarmedUp:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t);
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[12];
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  _BYTE *v101;
  _BYTE *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[2];
  char v117;

  v9 = v8;
  v107 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  v114 = *(_QWORD *)(v107 - 8);
  v18 = MEMORY[0x24BDAC7A8](v107);
  v106 = &v89[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v111 = &v89[-v20];
  v113 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v105 = *(_QWORD *)(v113 - 8);
  v21 = MEMORY[0x24BDAC7A8](v113);
  v102 = &v89[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = MEMORY[0x24BDAC7A8](v21);
  v101 = &v89[-v24];
  v25 = MEMORY[0x24BDAC7A8](v23);
  v110 = &v89[-v26];
  v27 = MEMORY[0x24BDAC7A8](v25);
  v108 = &v89[-v28];
  MEMORY[0x24BDAC7A8](v27);
  v30 = &v89[-v29];
  v100 = *a5;
  v99 = a5[1];
  v98 = *((unsigned __int8 *)a5 + 32);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v31 = v88;
  }
  else
  {
    v31 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v104 = a8;
  v103 = a7;
  v109 = v31;
  if (v31)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v32 = (_QWORD *)MEMORY[0x24955A830](0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_45:
        swift_bridgeObjectRetain();
        v60 = (_QWORD *)MEMORY[0x24955A830](0, a2);
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v32 = *(id *)(a2 + 32);
    }
    v33 = v32;
    v93 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v32) + 0x88))();
    v35 = v34;

    if ((a2 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v36 = (_QWORD *)MEMORY[0x24955A830](0, a2);
      v37 = (_QWORD *)swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_47:
        __break(1u);
        return;
      }
      v37 = *(id *)(a2 + 32);
      v36 = v37;
    }
    v38 = (*(double (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *v36) + 0xA0))(v37);

  }
  else
  {
    v35 = 0xE700000000000000;
    v93 = 0x6E776F6E6B6E55;
    v38 = 0.0;
  }
  v94 = a3;
  v95 = a4;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  v42 = os_log_type_enabled(v40, v41);
  v97 = v9;
  v96 = a6;
  if (v42)
  {
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    *(_QWORD *)&v116[0] = v44;
    *(_DWORD *)v43 = 136315394;
    swift_bridgeObjectRetain();
    v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v35, (uint64_t *)v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v43 + 12) = 2048;
    v115 = *(_QWORD *)&v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2463D2000, v40, v41, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24955AE30](v44, -1, -1);
    MEMORY[0x24955AE30](v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a6 = v113;
  v9 = v114;
  v46 = v106;
  v45 = v107;
  v47 = v105;
  v48 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  v106 = v49;
  v107 = v48;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v105 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v93 = v50;
  v51 = *(_BYTE **)(v47 + 8);
  ((void (*)(_BYTE *, uint64_t))v51)(v30, a6);
  v92 = specialized Sequence.flatMap<A>(_:)(a2);
  v52 = v108;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v53 = v111;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  ((void (*)(_BYTE *, uint64_t))v51)(v52, a6);
  v108 = (_BYTE *)Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  v91 = v54;
  v55 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v55(v53, v45);
  v56 = v110;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v57 = v56;
  v30 = v51;
  ((void (*)(_BYTE *, uint64_t))v51)(v57, a6);
  v58 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v110 = v59;
  v55(v46, v45);
  v111 = (_BYTE *)v58;
  if (!v109)
  {
    v90 = 0;
    goto LABEL_24;
  }
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_45;
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_47;
  }
  v60 = *(id *)(a2 + 32);
LABEL_22:
  v90 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v60) + 0xF0))();

LABEL_24:
  v109 = a2;
  v116[0] = v100;
  v116[1] = v99;
  v117 = v98;
  v61 = v101;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v62 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  ((void (*)(_BYTE *, uint64_t))v30)(v61, a6);
  v63 = *(_QWORD *)(v62 + 16);
  v64 = MEMORY[0x24BEE4AF8];
  v112 = a1;
  if (v63)
  {
    v101 = v30;
    v115 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
    v65 = v115;
    v66 = v62 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v67 = *(_QWORD *)(v9 + 72);
    do
    {
      v68 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      v70 = v69;
      v115 = v65;
      v72 = *(_QWORD *)(v65 + 16);
      v71 = *(_QWORD *)(v65 + 24);
      if (v72 >= v71 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
        v65 = v115;
      }
      *(_QWORD *)(v65 + 16) = v72 + 1;
      v73 = v65 + 16 * v72;
      *(_QWORD *)(v73 + 32) = v68;
      *(_QWORD *)(v73 + 40) = v70;
      v66 += v67;
      --v63;
    }
    while (v63);
    swift_bridgeObjectRelease();
    a1 = v112;
    a6 = v113;
    v9 = v114;
    v30 = v101;
    v64 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v65 = MEMORY[0x24BEE4AF8];
  }
  v74 = v102;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v75 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  ((void (*)(_BYTE *, uint64_t))v30)(v74, a6);
  v76 = *(_QWORD *)(v75 + 16);
  if (v76)
  {
    v115 = v64;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
    v64 = v115;
    v77 = *(unsigned __int8 *)(v9 + 80);
    v114 = v75;
    v78 = v75 + ((v77 + 32) & ~v77);
    v79 = *(_QWORD *)(v9 + 72);
    do
    {
      v80 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      v82 = v81;
      v115 = v64;
      v84 = *(_QWORD *)(v64 + 16);
      v83 = *(_QWORD *)(v64 + 24);
      if (v84 >= v83 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
        v64 = v115;
      }
      *(_QWORD *)(v64 + 16) = v84 + 1;
      v85 = v64 + 16 * v84;
      *(_QWORD *)(v85 + 32) = v80;
      *(_QWORD *)(v85 + 40) = v82;
      v78 += v79;
      --v76;
    }
    while (v76);
    swift_bridgeObjectRelease();
    a1 = v112;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if ((v103 & 1) != 0)
    v86 = 3;
  else
    v86 = 0;
  LOBYTE(v115) = v86;
  (*(void (**)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _BYTE *, _BYTE, uint64_t, uint64_t, _OWORD *, _BYTE, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v97 + 304))(v109, v96, v107, v106, v105, v93, v92, v108, v91, v111, v110, v90 & 1, v94, v95, v116, 0, 0, 0, v65,
    v64,
    v104,
    &v115);
  v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(a1, v87);
}

uint64_t PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:isPersonalDomainFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(v14 + 304))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:resultCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(v14 + 304))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

id PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, char a12, __int128 a13, __int128 *a14, char a15, __int128 a16, __int128 a17, uint64_t a18, char *a19)
{
  objc_class *v19;
  id v21;
  id v22;

  v21 = objc_allocWithZone(v19);
  v22 = specialized PommesResponse.init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:searchReason:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *((uint64_t *)&a13 + 1), a14, a15, a16, *((uint64_t *)&a16 + 1), a17,
          *((uint64_t *)&a17 + 1),
          a18,
          a19);
  outlined consume of Data._Representation?(a10, a11);
  outlined consume of Data._Representation?(a8, a9);
  outlined consume of Data._Representation?(a3, a4);
  return v22;
}

id PommesResponse.init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, __int128 *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22)
{
  id v25;

  v25 = specialized PommesResponse.init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:searchReason:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22);
  outlined consume of Data._Representation?(a10, a11);
  outlined consume of Data._Representation?(a8, a9);
  outlined consume of Data._Representation?(a3, a4);
  return v25;
}

uint64_t PommesResponse.__allocating_init(_:)(void (*a1)(_BYTE *))
{
  uint64_t v1;
  _BYTE v3[328];
  _BYTE __src[321];

  memset(__src, 0, 24);
  *(_QWORD *)&__src[24] = 0xF000000000000000;
  memset(&__src[32], 0, 17);
  memset(&__src[56], 0, 24);
  *(_OWORD *)&__src[80] = xmmword_246451590;
  *(_QWORD *)&__src[96] = 0xF000000000000000;
  __src[104] = 0;
  memset(&__src[112], 0, 48);
  *(_WORD *)&__src[160] = 255;
  memset(&__src[168], 0, 32);
  *(_QWORD *)&__src[200] = MEMORY[0x24BEE4AF8];
  memset(&__src[208], 0, 18);
  memset(&__src[232], 0, 40);
  *(_OWORD *)&__src[272] = xmmword_246451590;
  *(_QWORD *)&__src[288] = 0xF000000000000000;
  memset(&__src[296], 0, 25);
  a1(__src);
  memcpy(v3, __src, 0x141uLL);
  return (*(uint64_t (**)(_BYTE *))(v1 + 312))(v3);
}

double PommesResponse.Builder.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xF000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  result = -3.10503618e231;
  *(_OWORD *)(a1 + 80) = xmmword_246451590;
  *(_QWORD *)(a1 + 96) = 0xF000000000000000;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_WORD *)(a1 + 160) = 255;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 200) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = xmmword_246451590;
  *(_QWORD *)(a1 + 288) = 0xF000000000000000;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

id PommesResponse.__allocating_init(builder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PommesResponse.init(builder:)(a1);
}

id PommesResponse.init(builder:)(void *__src)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  id v44;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint8_t *v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  os_log_type_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  objc_super v85;
  _QWORD __dst[42];

  v2 = v1;
  memcpy(__dst, __src, 0x141uLL);
  v3 = &v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainFlowStepLog];
  *(_OWORD *)&v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainFlowStepLog] = xmmword_246450CE0;
  v4 = &v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainUserSensitiveTier1Log];
  *(_OWORD *)&v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainUserSensitiveTier1Log] = xmmword_246450CE0;
  v5 = &v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestCountryCode];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse____lazy_storage____computedPrimaryQueryConfidence];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  if (!__dst[0])
  {
    v46 = v1;
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_2463D2000, v48, v49, "Attempting to create a PommesResponse without experiences", v50, 2u);
      MEMORY[0x24955AE30](v50, -1, -1);
    }

    goto LABEL_21;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_experiences] = __dst[0];
  if (!__dst[1])
  {
    v51 = v1;
    swift_bridgeObjectRetain();
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v55 = 0;
      _os_log_impl(&dword_2463D2000, v53, v54, "Attempting to create a PommesResponse without clientResults", v55, 2u);
      MEMORY[0x24955AE30](v55, -1, -1);
    }

    swift_bridgeObjectRelease();
LABEL_21:
    outlined consume of Data._Representation?(*(_QWORD *)v3, *((_QWORD *)v3 + 1));
    outlined consume of Data._Representation?(*(_QWORD *)v4, *((_QWORD *)v4 + 1));
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v83 = (uint64_t *)v4;
  v84 = v3;
  *(_QWORD *)&v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_clientResults] = __dst[1];
  v8 = __dst[2];
  v7 = __dst[3];
  v9 = &v1[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext];
  *(_QWORD *)v9 = __dst[2];
  *((_QWORD *)v9 + 1) = v7;
  v10 = __dst[5];
  v82 = __dst[5];
  if (!__dst[5])
  {
    v56 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v8, v7);
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.fault.getter();
    v60 = (uint64_t *)v4;
    v61 = &unk_257575000;
    if (os_log_type_enabled(v58, v59))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      v63 = "Attempting to create a PommesResponse without metadataDomainName";
LABEL_33:
      _os_log_impl(&dword_2463D2000, v58, v59, v63, v62, 2u);
      v66 = 0;
      v67 = 0;
      v68 = 0;
      goto LABEL_34;
    }
LABEL_35:
    v66 = 0;
    v67 = 0;
    v68 = 0;
    goto LABEL_36;
  }
  v11 = &v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName];
  *(_QWORD *)v11 = __dst[4];
  *((_QWORD *)v11 + 1) = v10;
  v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataFallbackTriggered] = __dst[6];
  if (!__dst[7])
  {
    v64 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v8, v7);
    swift_bridgeObjectRetain();
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.pommes);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.fault.getter();
    v60 = (uint64_t *)v4;
    v61 = (_QWORD *)&unk_257575000;
    if (os_log_type_enabled(v58, v59))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      v63 = "Attempting to create a PommesResponse without renderedTexts";
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  v81 = v5;
  *(_QWORD *)&v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_renderedTexts] = __dst[7];
  v12 = MEMORY[0x24BEE4AF8];
  v13 = __dst[9];
  if (__dst[8])
    v12 = __dst[8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_redactedRenderedTexts] = v12;
  v14 = __dst[10];
  swift_beginAccess();
  v79 = *((_QWORD *)v84 + 1);
  v80 = *(_QWORD *)v84;
  *(_QWORD *)v84 = v13;
  *((_QWORD *)v84 + 1) = v14;
  v15 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v8, v7);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v13, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of Data._Representation?(v80, v79);
  v16 = __dst[11];
  v17 = __dst[12];
  swift_beginAccess();
  v18 = *v83;
  v19 = v83[1];
  *v83 = v16;
  v83[1] = v17;
  outlined copy of Data?(v16, v17);
  outlined consume of Data._Representation?(v18, v19);
  v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_listenAfterSpeaking] = __dst[13];
  v20 = __dst[15];
  v21 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestId];
  *(_QWORD *)v21 = __dst[14];
  *((_QWORD *)v21 + 1) = v20;
  v22 = __dst[16];
  v23 = __dst[17];
  v25 = __dst[18];
  v24 = __dst[19];
  v26 = __dst[20];
  v27 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId];
  *(_QWORD *)v27 = __dst[16];
  *((_QWORD *)v27 + 1) = v23;
  *((_QWORD *)v27 + 2) = v25;
  *((_QWORD *)v27 + 3) = v24;
  v27[32] = v26;
  v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isHandledByPreflight] = BYTE1(__dst[20]);
  v28 = __dst[22];
  v29 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier];
  *(_QWORD *)v29 = __dst[21];
  *((_QWORD *)v29 + 1) = v28;
  if (!__dst[23])
  {
    swift_bridgeObjectRetain();
    outlined copy of PommesCandidateId?(v22, v23, v25, v24, v26);
    swift_bridgeObjectRetain();
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v71 = type metadata accessor for Logger();
    __swift_project_value_buffer(v71, (uint64_t)static Logger.pommes);
    v58 = Logger.logObject.getter();
    v72 = static os_log_type_t.fault.getter();
    v60 = v83;
    v61 = (_QWORD *)&unk_257575000;
    if (!os_log_type_enabled(v58, v72))
    {
      v66 = 0;
      v68 = 0;
      v67 = 1;
      goto LABEL_36;
    }
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_2463D2000, v58, v72, "Attempting to create a PommesResponse without taskStepLogs", v62, 2u);
    v66 = 0;
    v68 = 0;
    v67 = 1;
    goto LABEL_34;
  }
  *(_QWORD *)&v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_taskStepLogs] = __dst[23];
  if (!__dst[24])
  {
    swift_bridgeObjectRetain();
    outlined copy of PommesCandidateId?(v22, v23, v25, v24, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
    v58 = Logger.logObject.getter();
    v74 = static os_log_type_t.fault.getter();
    v60 = v83;
    v61 = (_QWORD *)&unk_257575000;
    if (!os_log_type_enabled(v58, v74))
    {
      v68 = 0;
      v66 = 1;
      v67 = 1;
      goto LABEL_36;
    }
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_2463D2000, v58, v74, "Attempting to create a PommesResponse without userSensitiveTier1Logs", v62, 2u);
    v68 = 0;
    v66 = 1;
    v67 = 1;
LABEL_34:
    MEMORY[0x24955AE30](v62, -1, -1);
    goto LABEL_36;
  }
  *(_QWORD *)&v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_userSensitiveTier1Logs] = __dst[24];
  *(_QWORD *)&v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_componentsWarmedUp] = __dst[25];
  v77 = __dst[26];
  v78 = v24;
  v30 = __dst[27];
  swift_beginAccess();
  *(_QWORD *)v81 = v77;
  *((_QWORD *)v81 + 1) = v30;
  swift_bridgeObjectRetain();
  outlined copy of PommesCandidateId?(v22, v23, v25, v78, v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchReason] = __dst[28];
  v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isCachedResponse] = BYTE1(__dst[28]);
  v31 = __dst[30];
  if (__dst[30])
  {
    v32 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance];
    *(_QWORD *)v32 = __dst[29];
    *((_QWORD *)v32 + 1) = v31;
    v33 = __dst[32];
    v34 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId];
    *(_QWORD *)v34 = __dst[31];
    *((_QWORD *)v34 + 1) = v33;
    v35 = __dst[33];
    v36 = __dst[34];
    v37 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses];
    *(_QWORD *)v37 = __dst[33];
    *((_QWORD *)v37 + 1) = v36;
    v38 = __dst[35];
    v39 = __dst[36];
    v40 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse];
    *(_QWORD *)v40 = __dst[35];
    *((_QWORD *)v40 + 1) = v39;
    v41 = (void *)__dst[37];
    *(_QWORD *)&v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_asrRecognition] = __dst[37];
    v42 = __dst[39];
    v43 = &v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult];
    *(_QWORD *)v43 = __dst[38];
    *((_QWORD *)v43 + 1) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v35, v36);
    outlined copy of Data?(v38, v39);
    swift_bridgeObjectRetain();
    v44 = v41;
    outlined release of PommesResponse.Builder((uint64_t)__dst);
    v15[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isLowConfidenceKnowledgeResult] = __dst[40];

    v85.receiver = v15;
    v85.super_class = (Class)type metadata accessor for PommesResponse();
    return objc_msgSendSuper2(&v85, sel_init);
  }
  outlined release of PommesResponse.Builder((uint64_t)__dst);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v75 = type metadata accessor for Logger();
  __swift_project_value_buffer(v75, (uint64_t)static Logger.pommes);
  v58 = Logger.logObject.getter();
  v76 = static os_log_type_t.fault.getter();
  v60 = v83;
  v61 = (_QWORD *)&unk_257575000;
  if (os_log_type_enabled(v58, v76))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_2463D2000, v58, v76, "Attempting to create a PommesResponse without searchRequestUtterance", v62, 2u);
    v66 = 1;
    v67 = 1;
    v68 = 1;
    goto LABEL_34;
  }
  v66 = 1;
  v67 = 1;
  v68 = 1;
LABEL_36:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation?(*(_QWORD *)&v2[v61[345]], *(_QWORD *)&v2[v61[345] + 8]);
  if (v82)
  {
    swift_bridgeObjectRelease();
    if ((v67 & 1) != 0)
      goto LABEL_38;
  }
  else if (v67)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation?(*(_QWORD *)v84, *((_QWORD *)v84 + 1));
    v69 = 1;
    if ((v66 & 1) == 0)
      goto LABEL_39;
LABEL_44:
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation?(*v60, v60[1]);
    if ((v68 & 1) != 0)
      goto LABEL_40;
    goto LABEL_45;
  }
  outlined consume of Data._Representation?(*(_QWORD *)v84, *((_QWORD *)v84 + 1));
  v69 = 0;
  if (v66)
    goto LABEL_44;
LABEL_39:
  outlined consume of Data._Representation?(*v60, v60[1]);
  if (v68)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    if ((v69 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_50:

      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v70 = 1;
    goto LABEL_47;
  }
LABEL_45:
  if ((v69 & 1) == 0)
    goto LABEL_22;
  v70 = 0;
LABEL_47:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PommesCandidateId?(*(_QWORD *)&v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId], *(_QWORD *)&v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 8], *(_QWORD *)&v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 16], *(_QWORD *)&v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 24], v2[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 32]);
  if (v70)
    goto LABEL_50;
LABEL_23:

LABEL_24:
  type metadata accessor for PommesResponse();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t PommesResponse.Builder.experiences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.experiences.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.experiences.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.clientResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.clientResults.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.clientResults.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.conversationContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t PommesResponse.Builder.conversationContext.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation?(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.conversationContext.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.metadataDomainName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.metadataDomainName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.metadataDomainName.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.metadataFallbackTriggered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t PommesResponse.Builder.metadataFallbackTriggered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*PommesResponse.Builder.metadataFallbackTriggered.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.renderedTexts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.renderedTexts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.renderedTexts.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.redactedRenderedTexts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.redactedRenderedTexts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.redactedRenderedTexts.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.pegasusDomainFlowStepLog.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t PommesResponse.Builder.pegasusDomainFlowStepLog.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation?(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.pegasusDomainFlowStepLog.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation?(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.listenAfterSpeaking.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t PommesResponse.Builder.listenAfterSpeaking.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

uint64_t (*PommesResponse.Builder.listenAfterSpeaking.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.requestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.requestId.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.pommesCandidateId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 144);
  v5 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_BYTE *)(v1 + 160);
  *(_BYTE *)(a1 + 32) = v6;
  return outlined copy of PommesCandidateId?(v2, v3, v4, v5, v6);
}

__n128 PommesResponse.Builder.pommesCandidateId.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  outlined consume of PommesCandidateId?(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_BYTE *)(v1 + 160));
  result = v6;
  *(__n128 *)(v1 + 128) = v6;
  *(_QWORD *)(v1 + 144) = v2;
  *(_QWORD *)(v1 + 152) = v3;
  *(_BYTE *)(v1 + 160) = v4;
  return result;
}

uint64_t (*PommesResponse.Builder.pommesCandidateId.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.isHandledByPreflight.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t PommesResponse.Builder.isHandledByPreflight.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 161) = result;
  return result;
}

uint64_t (*PommesResponse.Builder.isHandledByPreflight.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.preflightClientHandlerIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.preflightClientHandlerIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 168) = a1;
  *(_QWORD *)(v2 + 176) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.preflightClientHandlerIdentifier.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.taskStepLogs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.taskStepLogs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 184) = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.taskStepLogs.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.userSensitiveTier1Logs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.userSensitiveTier1Logs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 192) = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.userSensitiveTier1Logs.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.componentsWarmedUp.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.Builder.componentsWarmedUp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 200) = a1;
  return result;
}

uint64_t (*PommesResponse.Builder.componentsWarmedUp.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.requestCountryCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.requestCountryCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 216) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.requestCountryCode.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

void PommesResponse.Builder.searchReason.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 224);
}

_BYTE *PommesResponse.Builder.searchReason.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 224) = *result;
  return result;
}

uint64_t (*PommesResponse.Builder.searchReason.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.isCachedResponse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 225);
}

uint64_t PommesResponse.Builder.isCachedResponse.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 225) = result;
  return result;
}

uint64_t (*PommesResponse.Builder.isCachedResponse.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.searchRequestUtterance.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.searchRequestUtterance.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 232) = a1;
  *(_QWORD *)(v2 + 240) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.searchRequestUtterance.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.sharedUserId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.sharedUserId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 248) = a1;
  *(_QWORD *)(v2 + 256) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.sharedUserId.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.encodedNLUserParses.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 264);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 272));
  return v1;
}

uint64_t PommesResponse.Builder.encodedNLUserParses.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation?(*(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272));
  *(_QWORD *)(v2 + 264) = a1;
  *(_QWORD *)(v2 + 272) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.encodedNLUserParses.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.encodedNLFallbackParse.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 280);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 288));
  return v1;
}

uint64_t PommesResponse.Builder.encodedNLFallbackParse.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation?(*(_QWORD *)(v2 + 280), *(_QWORD *)(v2 + 288));
  *(_QWORD *)(v2 + 280) = a1;
  *(_QWORD *)(v2 + 288) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.encodedNLFallbackParse.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

void *PommesResponse.Builder.asrRecognition.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 296);
  v2 = v1;
  return v1;
}

void PommesResponse.Builder.asrRecognition.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 296) = a1;
}

uint64_t (*PommesResponse.Builder.asrRecognition.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.responseVariantResult.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.Builder.responseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 304) = a1;
  *(_QWORD *)(v2 + 312) = a2;
  return result;
}

uint64_t (*PommesResponse.Builder.responseVariantResult.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesResponse.Builder.isLowConfidenceKnowledgeResult.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 320);
}

uint64_t PommesResponse.Builder.isLowConfidenceKnowledgeResult.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 320) = result;
  return result;
}

uint64_t (*PommesResponse.Builder.isLowConfidenceKnowledgeResult.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t key path setter for PommesResponse.experiences : PommesResponse(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_experiences);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesResponse.experiences.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t PommesResponse.clientResults.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t PommesResponse.clientResults.setter(uint64_t a1)
{
  return PommesResponse.clientResults.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_clientResults);
}

uint64_t (*PommesResponse.clientResults.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.conversationContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext + 8));
  return v1;
}

uint64_t PommesResponse.metadataDomainName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.metadataFallbackTriggered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataFallbackTriggered);
}

uint64_t PommesResponse.renderedTexts.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t PommesResponse.renderedTexts.setter(uint64_t a1)
{
  return PommesResponse.clientResults.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_renderedTexts);
}

uint64_t (*PommesResponse.renderedTexts.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.redactedRenderedTexts.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t PommesResponse.redactedRenderedTexts.setter(uint64_t a1)
{
  return PommesResponse.clientResults.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_redactedRenderedTexts);
}

uint64_t (*PommesResponse.redactedRenderedTexts.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.pegasusDomainFlowStepLog.getter()
{
  return PommesResponse.pegasusDomainFlowStepLog.getter(&OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainFlowStepLog);
}

uint64_t PommesResponse.pegasusDomainFlowStepLog.setter(uint64_t a1, uint64_t a2)
{
  return PommesResponse.pegasusDomainFlowStepLog.setter(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainFlowStepLog);
}

uint64_t (*PommesResponse.pegasusDomainFlowStepLog.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.taskStepLogs.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t PommesResponse.taskStepLogs.setter(uint64_t a1)
{
  return PommesResponse.clientResults.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_taskStepLogs);
}

uint64_t (*PommesResponse.taskStepLogs.modify())()
{
  swift_beginAccess();
  return AudioExperience.internalSignalsFromSiriAudio.modify;
}

uint64_t PommesResponse.pegasusDomainUserSensitiveTier1Log.getter()
{
  return PommesResponse.pegasusDomainFlowStepLog.getter(&OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainUserSensitiveTier1Log);
}

uint64_t PommesResponse.pegasusDomainFlowStepLog.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  outlined copy of Data?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t PommesResponse.pegasusDomainUserSensitiveTier1Log.setter(uint64_t a1, uint64_t a2)
{
  return PommesResponse.pegasusDomainFlowStepLog.setter(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainUserSensitiveTier1Log);
}

uint64_t PommesResponse.pegasusDomainFlowStepLog.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;

  v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  v7 = *v6;
  v8 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  return outlined consume of Data._Representation?(v7, v8);
}

uint64_t (*PommesResponse.pegasusDomainUserSensitiveTier1Log.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.userSensitiveTier1Logs.getter()
{
  return AudioExperience.serverAudioResults.getter();
}

uint64_t PommesResponse.userSensitiveTier1Logs.setter(uint64_t a1)
{
  return PommesResponse.clientResults.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_userSensitiveTier1Logs);
}

uint64_t PommesResponse.clientResults.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PommesResponse.userSensitiveTier1Logs.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.listenAfterSpeaking.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_listenAfterSpeaking);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesResponse.listenAfterSpeaking.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_listenAfterSpeaking);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PommesResponse.listenAfterSpeaking.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.requestId.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestId);
}

uint64_t PommesResponse.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unsigned int v3;

  v1 = 0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId);
  v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 32);
  if (v3 <= 1)
  {
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 32))
      return v1;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
LABEL_5:
    v1 = *v2;
    outlined copy of PommesCandidateId(*v2, v2[1], v2[2], v2[3], v3);
  }
  return v1;
}

uint64_t PommesResponse.isHandledByPreflight.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isHandledByPreflight);
}

uint64_t PommesResponse.preflightClientHandlerIdentifier.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier);
}

void PommesResponse.isPersonalDomainFallback.getter()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))(&v1);
  __asm { BR              X12 }
}

uint64_t sub_2463F093C()
{
  char v0;

  v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t PommesResponse.requestCountryCode.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestCountryCode);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesResponse.requestCountryCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestCountryCode);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PommesResponse.requestCountryCode.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t PommesResponse.searchReason.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchReason);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t PommesResponse.pommesCandidateId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 16);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  return outlined copy of PommesCandidateId?(v3, v4, v5, v6, v7);
}

uint64_t PommesResponse.componentsWarmedUp.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesResponse.isCachedResponse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isCachedResponse);
}

uint64_t PommesResponse.searchRequestUtterance.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesResponse.sharedUserId.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId);
}

uint64_t PommesResponse.encodedNLUserParses.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses + 8));
  return v1;
}

uint64_t PommesResponse.encodedNLFallbackParse.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse + 8));
  return v1;
}

void *PommesResponse.asrRecognition.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_asrRecognition);
  v2 = v1;
  return v1;
}

uint64_t PommesResponse.responseVariantResult.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult);
}

uint64_t PommesResponse.requestId.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesResponse.isLowConfidenceKnowledgeResult.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isLowConfidenceKnowledgeResult);
}

Swift::Void __swiftcall PommesResponse.setSearchReason(_:)(SiriInformationTypes::PommesSearchReason a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;

  v2 = *(_BYTE *)a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchReason);
  swift_beginAccess();
  *v3 = v2;
}

uint64_t PommesResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  _BYTE v7[328];
  _BYTE __src[321];

  v3 = objc_allocWithZone(v1);
  ObjectType = swift_getObjectType();
  memset(__src, 0, 24);
  *(_QWORD *)&__src[24] = 0xF000000000000000;
  memset(&__src[32], 0, 17);
  memset(&__src[56], 0, 24);
  *(_OWORD *)&__src[80] = xmmword_246451590;
  *(_QWORD *)&__src[96] = 0xF000000000000000;
  __src[104] = 0;
  memset(&__src[112], 0, 48);
  *(_WORD *)&__src[160] = 255;
  memset(&__src[168], 0, 32);
  *(_QWORD *)&__src[200] = MEMORY[0x24BEE4AF8];
  memset(&__src[208], 0, 18);
  memset(&__src[232], 0, 40);
  *(_OWORD *)&__src[272] = xmmword_246451590;
  *(_QWORD *)&__src[288] = 0xF000000000000000;
  memset(&__src[296], 0, 25);
  closure #1 in PommesResponse.init(coder:)((uint64_t)__src, a1);
  memcpy(v7, __src, 0x141uLL);
  v5 = (*(uint64_t (**)(_BYTE *))(ObjectType + 312))(v7);

  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t PommesResponse.init(coder:)(void *a1)
{
  uint64_t ObjectType;
  uint64_t v3;
  _BYTE v5[328];
  _BYTE __src[321];

  ObjectType = swift_getObjectType();
  memset(__src, 0, 24);
  *(_QWORD *)&__src[24] = 0xF000000000000000;
  memset(&__src[32], 0, 17);
  memset(&__src[56], 0, 24);
  *(_OWORD *)&__src[80] = xmmword_246451590;
  *(_QWORD *)&__src[96] = 0xF000000000000000;
  __src[104] = 0;
  memset(&__src[112], 0, 48);
  *(_WORD *)&__src[160] = 255;
  memset(&__src[168], 0, 32);
  *(_QWORD *)&__src[200] = MEMORY[0x24BEE4AF8];
  memset(&__src[208], 0, 18);
  memset(&__src[232], 0, 40);
  *(_OWORD *)&__src[272] = xmmword_246451590;
  *(_QWORD *)&__src[288] = 0xF000000000000000;
  memset(&__src[296], 0, 25);
  closure #1 in PommesResponse.init(coder:)((uint64_t)__src, a1);
  memcpy(v5, __src, 0x141uLL);
  v3 = (*(uint64_t (**)(_BYTE *))(ObjectType + 312))(v5);

  swift_deallocPartialClassInstance();
  return v3;
}

void closure #1 in PommesResponse.init(coder:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unsigned __int8 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned __int8 v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unsigned __int8 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  id v95;
  void *v96;
  id v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  Swift::String v102;
  char v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::String v115;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_246412940;
  v4 = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = type metadata accessor for Experience(0);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
    if (swift_dynamicCast())
      v5 = v111;
    else
      v5 = 0;
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v5;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_246412940;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = type metadata accessor for PommesResult();
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PommesResult]);
    if (swift_dynamicCast())
      v7 = v111;
    else
      v7 = 0;
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v7 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v7;
  v8 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v13;
  v14 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v15)
  {
    v16 = (void *)v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

  }
  else
  {
    v19 = 0xE400000000000000;
    v17 = 1701736302;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v19;
  v20 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x80000002464537C0);
  v21 = objc_msgSend(a2, sel_decodeBoolForKey_, v20);

  *(_BYTE *)(a1 + 48) = v21;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_246412940;
  *(_QWORD *)(v22 + 32) = v4;
  *(_QWORD *)(v22 + 40) = v14;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  v109 = v14;
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v23 = v111;
      goto LABEL_22;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v23 = MEMORY[0x24BEE4AF8];
LABEL_22:
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = v23;
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_246412940;
  *(_QWORD *)(v24 + 32) = v4;
  *(_QWORD *)(v24 + 40) = v109;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v25 = v111;
      goto LABEL_27;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v25 = MEMORY[0x24BEE4AF8];
LABEL_27:
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = v25;
  v26 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v26)
  {
    v27 = (void *)v26;
    v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v30;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_246412940;
  *(_QWORD *)(v31 + 32) = v4;
  *(_QWORD *)(v31 + 40) = v8;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (swift_dynamicCast())
    {
      v32 = v111;
      goto LABEL_35;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v32 = MEMORY[0x24BEE4AF8];
LABEL_35:
  v33 = specialized _arrayForceCast<A, B>(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = v33;
  v34 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v34)
  {
    v35 = (void *)v34;
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  *(_QWORD *)(a1 + 88) = v36;
  *(_QWORD *)(a1 + 96) = v38;
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_246412940;
  *(_QWORD *)(v39 + 32) = v4;
  *(_QWORD *)(v39 + 40) = v8;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (swift_dynamicCast())
    {
      v40 = v111;
      goto LABEL_43;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v40 = MEMORY[0x24BEE4AF8];
LABEL_43:
  v41 = specialized _arrayForceCast<A, B>(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = v41;
  v42 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246453840);
  LOBYTE(v41) = objc_msgSend(a2, sel_decodeBoolForKey_, v42);

  *(_BYTE *)(a1 + 104) = v41;
  v43 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v43)
  {
    v44 = (void *)v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = v45;
  *(_QWORD *)(a1 + 120) = v47;
  v48 = (void *)MEMORY[0x24955A5F0](0xD000000000000014, 0x8000000246453860);
  v49 = objc_msgSend(a2, sel_decodeBoolForKey_, v48);

  *(_BYTE *)(a1 + 161) = v49;
  v50 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v50)
  {
    v51 = (void *)v50;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v53;

  }
  else
  {
    v52 = 0;
    v54 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = v52;
  *(_QWORD *)(a1 + 176) = v54;
  v55 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v55)
  {
    v56 = (void *)v55;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v59 = v58;

  }
  else
  {
    v57 = 0;
    v59 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = v57;
  *(_QWORD *)(a1 + 216) = v59;
  v60 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x80000002464538A0);
  v61 = objc_msgSend(a2, sel_decodeBoolForKey_, v60);

  *(_BYTE *)(a1 + 225) = v61;
  v62 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v62)
  {
    v63 = (void *)v62;
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v66 = v65;

  }
  else
  {
    v64 = 0;
    v66 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = v64;
  *(_QWORD *)(a1 + 240) = v66;
  v67 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v67)
  {
    v68 = (void *)v67;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v71 = v70;

  }
  else
  {
    v69 = 0;
    v71 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = v69;
  *(_QWORD *)(a1 + 256) = v71;
  v72 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v72)
  {
    v73 = (void *)v72;
    v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v76 = v75;

  }
  else
  {
    v74 = 0;
    v76 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 264) = v74;
  *(_QWORD *)(a1 + 272) = v76;
  v77 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v77)
  {
    v78 = (void *)v77;
    v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v81 = v80;

  }
  else
  {
    v79 = 0;
    v81 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 288));
  *(_QWORD *)(a1 + 280) = v79;
  *(_QWORD *)(a1 + 288) = v81;
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for SASRecognition);
  v82 = NSCoder.decodeObject<A>(of:forKey:)();

  *(_QWORD *)(a1 + 296) = v82;
  v83 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v83)
  {
    v84 = (void *)v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v87 = v86;

  }
  else
  {
    v85 = 0;
    v87 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = v85;
  *(_QWORD *)(a1 + 312) = v87;
  v88 = (void *)MEMORY[0x24955A5F0](0xD00000000000001ELL, 0x80000002464538E0);
  v89 = objc_msgSend(a2, sel_decodeBoolForKey_, v88);

  *(_BYTE *)(a1 + 320) = v89;
  v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_246412940;
  *(_QWORD *)(v90 + 32) = v4;
  *(_QWORD *)(v90 + 40) = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSNumber);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v114)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
    if (swift_dynamicCast())
    {
      v91 = v111;
      goto LABEL_72;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v91 = MEMORY[0x24BEE4AF8];
LABEL_72:
  if (v91 >> 62)
  {
    swift_bridgeObjectRetain();
    v92 = _CocoaArrayWrapper.endIndex.getter();
    if (v92)
      goto LABEL_74;
LABEL_87:
    v94 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_88;
  }
  v92 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v92)
    goto LABEL_87;
LABEL_74:
  if (v92 < 1)
  {
    __break(1u);
    JUMPOUT(0x2463F1DA4);
  }
  v93 = 0;
  v94 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v91 & 0xC000000000000001) != 0)
      v95 = (id)MEMORY[0x24955A830](v93, v91);
    else
      v95 = *(id *)(v91 + 8 * v93 + 32);
    v96 = v95;
    v97 = objc_msgSend(v95, sel_integerValue, v109);

    if ((unint64_t)v97 <= 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v94 + 2) + 1, 1, v94);
      v99 = *((_QWORD *)v94 + 2);
      v98 = *((_QWORD *)v94 + 3);
      if (v99 >= v98 >> 1)
        v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v98 > 1), v99 + 1, 1, v94);
      *((_QWORD *)v94 + 2) = v99 + 1;
      v94[v99 + 32] = (char)v97;
    }
    ++v93;
  }
  while (v92 != v93);
LABEL_88:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = v94;
  v100 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v100
    || (v101 = (void *)v100,
        v102._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        PommesSearchReason.init(rawValue:)(v102),
        v101,
        v103 = v112,
        v112 == 5))
  {
    v103 = 0;
  }
  *(_BYTE *)(a1 + 224) = v103;
  v104 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v104)
  {
    v105 = (void *)v104;
    v106 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v106)
    {
      v107 = (void *)v106;
      v112 = 0;
      v113 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v113)
      {
        v115._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v108 = (char *)&loc_2463F1C6C
             + dword_2463F1DA4[specialized PommesCandidateId.CandidateIdType.init(rawValue:)(v115)];
        __asm { BR              X10 }
      }
    }

  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      outlined copy of Data._Representation(*(v4 - 1), *v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      v4 += 2;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      *(_OWORD *)(v2 + 16 * v6 + 32) = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *PommesResponse.__allocating_init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v10;
  id v11;
  _BYTE __dst[328];
  _BYTE __src[321];
  _BYTE v15[40];

  outlined init with take of PommesCandidateId?(a4, (uint64_t)v15);
  memset(__src, 0, 24);
  *(_QWORD *)&__src[24] = 0xF000000000000000;
  memset(&__src[32], 0, 17);
  memset(&__src[56], 0, 24);
  *(_OWORD *)&__src[80] = xmmword_246451590;
  *(_QWORD *)&__src[96] = 0xF000000000000000;
  __src[104] = 0;
  memset(&__src[112], 0, 48);
  *(_WORD *)&__src[160] = 255;
  memset(&__src[168], 0, 32);
  *(_QWORD *)&__src[200] = MEMORY[0x24BEE4AF8];
  memset(&__src[208], 0, 18);
  memset(&__src[232], 0, 40);
  *(_OWORD *)&__src[272] = xmmword_246451590;
  *(_QWORD *)&__src[288] = 0xF000000000000000;
  memset(&__src[296], 0, 25);
  closure #1 in PommesResponse.init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)((uint64_t)__src, a1, a2, a3, (uint64_t)v15, a5);
  memcpy(__dst, __src, 0x141uLL);
  v10 = (void *)(*(uint64_t (**)(_BYTE *))(v5 + 312))(__dst);
  v11 = v10;

  swift_bridgeObjectRelease();
  outlined release of PommesCandidateId?((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PommesCandidateId?);

  swift_bridgeObjectRelease();
  return v10;
}

void closure #1 in PommesResponse.init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned __int8 v86;
  uint64_t v87;
  void *v88;
  Swift::String v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  unsigned int v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  char v123;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_246412940;
  v9 = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = type metadata accessor for Experience(0);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
    if (swift_dynamicCast())
      v10 = v128;
    else
      v10 = 0;
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v10 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v10;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_246412940;
  *(_QWORD *)(v11 + 32) = v9;
  *(_QWORD *)(v11 + 40) = type metadata accessor for PommesResult();
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PommesResult]);
    if (swift_dynamicCast())
      v12 = v128;
    else
      v12 = 0;
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v12 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v12;
  v13 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v14)
  {
    v15 = (void *)v14;
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v18;
  v19 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v20)
  {
    v21 = (void *)v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

  }
  else
  {
    v24 = 0xE400000000000000;
    v22 = 1701736302;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v24;
  v25 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x80000002464537C0);
  v26 = objc_msgSend(a2, sel_decodeBoolForKey_, v25);

  *(_BYTE *)(a1 + 48) = v26;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_246412940;
  *(_QWORD *)(v27 + 32) = v9;
  *(_QWORD *)(v27 + 40) = v19;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v28 = v128;
      goto LABEL_22;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v28 = MEMORY[0x24BEE4AF8];
LABEL_22:
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = v28;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_246412940;
  *(_QWORD *)(v29 + 32) = v9;
  *(_QWORD *)(v29 + 40) = v19;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      v30 = v128;
      goto LABEL_27;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v30 = MEMORY[0x24BEE4AF8];
LABEL_27:
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = v30;
  v31 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v31)
  {
    v32 = (void *)v31;
    v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 72) = v33;
  *(_QWORD *)(a1 + 80) = v35;
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_246412940;
  *(_QWORD *)(v36 + 32) = v9;
  *(_QWORD *)(v36 + 40) = v13;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (swift_dynamicCast())
    {
      v37 = v128;
      goto LABEL_35;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v37 = MEMORY[0x24BEE4AF8];
LABEL_35:
  v38 = specialized _arrayForceCast<A, B>(_:)(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = v38;
  v39 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v39)
  {
    v40 = (void *)v39;
    v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  *(_QWORD *)(a1 + 88) = v41;
  *(_QWORD *)(a1 + 96) = v43;
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_246412940;
  *(_QWORD *)(v44 + 32) = v9;
  *(_QWORD *)(v44 + 40) = v13;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (swift_dynamicCast())
    {
      v45 = v128;
      goto LABEL_43;
    }
  }
  else
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v45 = MEMORY[0x24BEE4AF8];
LABEL_43:
  v46 = specialized _arrayForceCast<A, B>(_:)(v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = v46;
  v47 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246453840);
  LOBYTE(v46) = objc_msgSend(a2, sel_decodeBoolForKey_, v47);

  *(_BYTE *)(a1 + 104) = v46;
  v48 = (void *)MEMORY[0x24955A5F0](0xD000000000000014, 0x8000000246453860);
  LOBYTE(v46) = objc_msgSend(a2, sel_decodeBoolForKey_, v48);

  *(_BYTE *)(a1 + 161) = v46;
  v49 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v49)
  {
    v50 = (void *)v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;

  }
  else
  {
    v51 = 0;
    v53 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = v51;
  *(_QWORD *)(a1 + 176) = v53;
  v54 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v54)
  {
    v55 = (void *)v54;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v57;

  }
  else
  {
    v56 = 0;
    v58 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = v56;
  *(_QWORD *)(a1 + 216) = v58;
  v59 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v59)
  {
    v60 = (void *)v59;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v62;

  }
  else
  {
    v61 = 0;
    v63 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = v61;
  *(_QWORD *)(a1 + 240) = v63;
  v64 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v64)
  {
    v65 = (void *)v64;
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v68 = v67;

  }
  else
  {
    v66 = 0;
    v68 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = v66;
  *(_QWORD *)(a1 + 256) = v68;
  v69 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v69)
  {
    v70 = (void *)v69;
    v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v73 = v72;

  }
  else
  {
    v71 = 0;
    v73 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 264) = v71;
  *(_QWORD *)(a1 + 272) = v73;
  v74 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v74)
  {
    v75 = (void *)v74;
    v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v78 = v77;

  }
  else
  {
    v76 = 0;
    v78 = 0xF000000000000000;
  }
  outlined consume of Data._Representation?(*(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 288));
  *(_QWORD *)(a1 + 280) = v76;
  *(_QWORD *)(a1 + 288) = v78;
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for SASRecognition);
  v79 = NSCoder.decodeObject<A>(of:forKey:)();

  *(_QWORD *)(a1 + 296) = v79;
  v80 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v80)
  {
    v81 = (void *)v80;
    v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v84 = v83;

  }
  else
  {
    v82 = 0;
    v84 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = v82;
  *(_QWORD *)(a1 + 312) = v84;
  v85 = (void *)MEMORY[0x24955A5F0](0xD00000000000001ELL, 0x80000002464538E0);
  v86 = objc_msgSend(a2, sel_decodeBoolForKey_, v85);

  *(_BYTE *)(a1 + 320) = v86;
  v87 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v87
    || (v88 = (void *)v87,
        v89._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        PommesSearchReason.init(rawValue:)(v89),
        v88,
        v90 = v129,
        v129 == 5))
  {
    v90 = 0;
  }
  *(_BYTE *)(a1 + 224) = v90;
  *(_QWORD *)(a1 + 112) = a3;
  *(_QWORD *)(a1 + 120) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91 = *(_QWORD *)(a1 + 128);
  v92 = *(_QWORD *)(a1 + 136);
  v93 = a1 + 128;
  v94 = *(_QWORD *)(v93 + 16);
  v95 = *(_QWORD *)(v93 + 24);
  v96 = *(_BYTE *)(v93 + 32);
  outlined init with take of PommesCandidateId?(a5, v93);
  outlined release of PommesCandidateId?(a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PommesCandidateId?);
  outlined consume of PommesCandidateId?(v91, v92, v94, v95, v96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v93 + 72) = a6;
  *(_BYTE *)(v93 + 97) = 1;
  v97 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v97)
  {
    v98 = (void *)v97;
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v101 = v100;

  }
  else
  {
    v99 = 0;
    v101 = 0;
  }
  closure #1 in closure #1 in PommesResponse.init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)((uint64_t)&v129);
  v103 = v129;
  v102 = v130;
  v105 = v131;
  v104 = v132;
  v106 = v133;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v107 = type metadata accessor for Logger();
  __swift_project_value_buffer(v107, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  outlined copy of PommesCandidateId?(v103, v102, v105, v104, v106);
  v108 = Logger.logObject.getter();
  v109 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v108, v109))
  {
    v123 = v106;
    v110 = a2;
    v111 = v99;
    v112 = swift_slowAlloc();
    v127 = swift_slowAlloc();
    v128 = v127;
    v129 = v111;
    *(_DWORD *)v112 = 136315394;
    a2 = v110;
    v130 = v101;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v113 = String.init<A>(describing:)();
    v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 12) = 2080;
    v129 = v103;
    v130 = v102;
    v131 = v105;
    v132 = v104;
    v133 = v123;
    outlined copy of PommesCandidateId?(v103, v102, v105, v104, v123);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    v115 = String.init<A>(describing:)();
    v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of PommesCandidateId?(v103, v102, v105, v104, v123);
    outlined consume of PommesCandidateId?(v103, v102, v105, v104, v123);
    _os_log_impl(&dword_2463D2000, v108, v109, "PommesResponse : Cached response constructed from:\n  requestId = %s\n  pommesCandidateId = %s", (uint8_t *)v112, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24955AE30](v127, -1, -1);
    MEMORY[0x24955AE30](v112, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined consume of PommesCandidateId?(v103, v102, v105, v104, v106);
    outlined consume of PommesCandidateId?(v103, v102, v105, v104, v106);
  }

  v117 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x80000002464538A0);
  v118 = objc_msgSend(a2, sel_decodeBoolForKey_, v117);

  if (v118)
  {
    v119 = Logger.logObject.getter();
    v120 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v119, v120))
    {
      v121 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v121 = 0;
      _os_log_impl(&dword_2463D2000, v119, v120, "PommesResponse : A cached response should not be cached", v121, 2u);
      MEMORY[0x24955AE30](v121, -1, -1);
    }

  }
}

void closure #1 in closure #1 in PommesResponse.init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v2 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v4)
    {
      v5 = (void *)v4;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

    }
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = -1;
}

Swift::Void __swiftcall PommesResponse.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  Class isa;
  void *v6;
  Class v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  Class v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  Class v20;
  void *v21;
  Class v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  Class v29;
  id v30;
  void *v31;
  _QWORD *v32;
  Class v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  Class v40;
  id v41;
  void *v42;
  Class v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Class v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  char v62;
  uint64_t v63;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x140))();
  type metadata accessor for Experience(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = (void *)MEMORY[0x24955A5F0](0x6E65697265707865, 0xEB00000000736563);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  (*(void (**)(void))((*v4 & *v2) + 0x158))();
  type metadata accessor for PommesResult();
  v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = (void *)MEMORY[0x24955A5F0](0x6552746E65696C63, 0xED000073746C7573);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  v9 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext + 8);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext);
    v11 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    outlined copy of Data._Representation(v10, v9);
    v12 = Data._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v11, sel_initWithData_, v12);

    v14 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246453A20);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);

    outlined consume of Data._Representation?(v10, v9);
  }
  v15 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName), *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName+ 8));
  v16 = (void *)MEMORY[0x24955A5F0]();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);

  v17 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataFallbackTriggered);
  v18 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x80000002464537C0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v17, v18);

  v19 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x170))();
  v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = (void *)MEMORY[0x24955A5F0](0x64657265646E6572, 0xED00007374786554);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v20, v21);

  (*(void (**)(void))((*v19 & *v2) + 0x188))();
  v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23 = (void *)MEMORY[0x24955A5F0]();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v22, v23);

  v24 = (*(uint64_t (**)(void))((*v19 & *v2) + 0x1A0))();
  if (v25 >> 60 != 15)
  {
    v26 = v24;
    v27 = v25;
    v28 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    v29 = Data._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v28, sel_initWithData_, v29);

    v31 = (void *)MEMORY[0x24955A5F0](0xD000000000000018, 0x8000000246453A00);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v30, v31);

    v24 = outlined consume of Data._Representation?(v26, v27);
  }
  v32 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x1B8))(v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v34 = (void *)MEMORY[0x24955A5F0](0x706574536B736174, 0xEC00000073676F4CLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v33, v34);

  v35 = (*(uint64_t (**)(void))((*v32 & *v2) + 0x1D0))();
  if (v36 >> 60 != 15)
  {
    v37 = v35;
    v38 = v36;
    v39 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    v40 = Data._bridgeToObjectiveC()().super.isa;
    v41 = objc_msgSend(v39, sel_initWithData_, v40);

    v42 = (void *)MEMORY[0x24955A5F0](0xD000000000000022, 0x80000002464539D0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v41, v42);

    v35 = outlined consume of Data._Representation?(v37, v38);
  }
  (*(void (**)(uint64_t))((*v32 & *v2) + 0x1E8))(v35);
  v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v44 = MEMORY[0x24955A5F0](0xD000000000000016, 0x8000000246453820);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v43, v44);

  LOBYTE(v44) = (*(uint64_t (**)(void))((*v32 & *v2) + 0x200))();
  v45 = (void *)MEMORY[0x24955A5F0]();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v44 & 1, v45);

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestId + 8))
  {
    v46 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestId));
    v47 = (void *)MEMORY[0x24955A5F0](0x4974736575716572, 0xE900000000000064);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v46, v47);

  }
  v48 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isHandledByPreflight);
  v49 = (void *)MEMORY[0x24955A5F0](0xD000000000000014, 0x8000000246453860);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v48, v49);

  if (*(_QWORD *)((char *)v2
                 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier
                 + 8))
  {
    v50 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v2
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier));
    v51 = (void *)MEMORY[0x24955A5F0](0xD000000000000020, 0x80000002464539A0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v50, v51);

  }
  v52 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_componentsWarmedUp);
  v53 = *(_QWORD *)(v52 + 16);
  if (v53)
  {
    v63 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v54 = 0;
    do
    {
      v55 = v54 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(unsigned __int8 *)(v52 + v54 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v54 = v55;
    }
    while (v53 != v55);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSNumber);
  v56 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v57 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246453880);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v56, v57);

  v58 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x228))();
  if (v59)
  {
    v60 = (void *)MEMORY[0x24955A5F0](v58);
    swift_bridgeObjectRelease();
    v61 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246453980);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v60, v61);

  }
  (*(void (**)(char *__return_ptr, uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x240))(&v62, v58);
  __asm { BR              X10 }
}

void sub_2463F3ABC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint32_t *p_align;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  Class isa;
  void *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  Class v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;

  v30 = (void *)MEMORY[0x24955A5F0](0x6E776F6E6B6E75, 0xE700000000000000);
  swift_bridgeObjectRelease();
  v31 = (void *)MEMORY[0x24955A5F0](0x6552686372616573, 0xEC0000006E6F7361);
  objc_msgSend(v26, *(SEL *)(v28 + 3224), v30, v31);

  v33 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId);
  v32 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 8);
  v34 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 16);
  v35 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 24);
  v36 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 32);
  if (v36 > 1)
  {
    if (v36 != 2)
      goto LABEL_11;
    v37 = 0xE900000000000073;
    v38 = 0x656D6D6F506E7572;
  }
  else if (*(_BYTE *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId + 32))
  {
    v37 = 0xE500000000000000;
    v38 = 0x636F64656DLL;
  }
  else
  {
    v37 = 0xE200000000000000;
    v38 = 25458;
  }
  v39 = (void *)MEMORY[0x24955A5F0](v38, v37);
  swift_bridgeObjectRelease();
  v40 = (void *)MEMORY[0x24955A5F0](0x74616469646E6163, 0xEF65707954644965);
  objc_msgSend(v26, sel_encodeObject_forKey_, v39, v40);

  if (v36 == 1)
  {
    v41 = (void *)MEMORY[0x24955A5F0](v33, v32);
    v42 = (void *)MEMORY[0x24955A5F0](0x74616469646E6163, 0xEB00000000644965);
    objc_msgSend(v26, sel_encodeObject_forKey_, v41, v42);

    v43 = (void *)MEMORY[0x24955A5F0](v34, v35);
    v44 = (void *)MEMORY[0x24955A5F0](0x6449756374, 0xE500000000000000);
  }
  else
  {
    v43 = (void *)MEMORY[0x24955A5F0](v33, v32);
    v44 = (void *)MEMORY[0x24955A5F0](0x74616469646E6163, 0xEB00000000644965);
  }
  objc_msgSend(v26, sel_encodeObject_forKey_, v43, v44);
  p_align = &stru_25179DFE8.align;

LABEL_11:
  v45 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isCachedResponse);
  v46 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x80000002464538A0);
  objc_msgSend(v26, *((SEL *)p_align + 404), v45, v46);

  v47 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance), *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance + 8));
  v48 = (void *)MEMORY[0x24955A5F0](0xD000000000000016, 0x80000002464538C0);
  objc_msgSend(v26, sel_encodeObject_forKey_, v47, v48);

  if (*(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId + 8))
  {
    v49 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v27
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId));
    v50 = (void *)MEMORY[0x24955A5F0](0x7355646572616873, 0xEC00000064497265);
    objc_msgSend(v26, sel_encodeObject_forKey_, v49, v50);

  }
  v51 = (uint64_t *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses);
  v52 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses + 8);
  if (v52 >> 60 != 15)
  {
    v53 = *v51;
    outlined copy of Data._Representation(*v51, *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses + 8));
    isa = Data._bridgeToObjectiveC()().super.isa;
    v55 = (void *)MEMORY[0x24955A5F0](v67, 0x8000000246453950);
    objc_msgSend(v26, sel_encodeObject_forKey_, isa, v55);

    outlined consume of Data._Representation?(v53, v52);
  }
  v56 = (uint64_t *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse);
  v57 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse + 8);
  if (v57 >> 60 != 15)
  {
    v58 = *v56;
    outlined copy of Data._Representation(*v56, *(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse + 8));
    v59 = Data._bridgeToObjectiveC()().super.isa;
    v60 = (void *)MEMORY[0x24955A5F0](0xD000000000000016, 0x8000000246453930);
    objc_msgSend(v26, sel_encodeObject_forKey_, v59, v60);

    outlined consume of Data._Representation?(v58, v57);
  }
  v61 = *(void **)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_asrRecognition);
  if (v61)
  {
    v62 = v61;
    v63 = (void *)MEMORY[0x24955A5F0](0x676F636552727361, 0xEE006E6F6974696ELL);
    objc_msgSend(v26, sel_encodeObject_forKey_, v62, v63);

  }
  if (*(_QWORD *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult + 8))
  {
    v64 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v27
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult));
    v65 = (void *)MEMORY[0x24955A5F0](v68, 0x8000000246453900);
    objc_msgSend(v26, sel_encodeObject_forKey_, v64, v65);

  }
  v66 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isLowConfidenceKnowledgeResult);
  v69 = (void *)MEMORY[0x24955A5F0](0xD00000000000001ELL, 0x80000002464538E0);
  objc_msgSend(v26, *((SEL *)p_align + 404), v66, v69);

}

Swift::Void __swiftcall PommesResponse.encode(cachingCoder:)(NSCoder cachingCoder)
{
  _QWORD *v1;
  _QWORD *v3;
  Class isa;
  void *v5;
  Class v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  Class v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  Class v18;
  void *v19;
  Class v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  Class v27;
  id v28;
  void *v29;
  Class v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  Class v37;
  id v38;
  void *v39;
  Class v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  Class v58;
  void *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  Class v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  id v71;

  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x140))();
  type metadata accessor for Experience(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = (void *)MEMORY[0x24955A5F0](0x6E65697265707865, 0xEB00000000736563);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, isa, v5);

  (*(void (**)(void))((*v3 & *v1) + 0x158))();
  type metadata accessor for PommesResult();
  v6 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = (void *)MEMORY[0x24955A5F0](0x6552746E65696C63, 0xED000073746C7573);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v6, v7);

  v8 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext);
    v10 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    outlined copy of Data._Representation(v9, v8);
    v11 = Data._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v10, sel_initWithData_, v11);

    v13 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246453A20);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v12, v13);

    outlined consume of Data._Representation?(v9, v8);
  }
  v14 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName), *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName+ 8));
  v15 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x80000002464537A0);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v14, v15);

  v16 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataFallbackTriggered);
  v17 = (void *)MEMORY[0x24955A5F0](0xD000000000000019, 0x80000002464537C0);
  -[objc_class encodeBool:forKey:](cachingCoder.super.isa, sel_encodeBool_forKey_, v16, v17);

  (*(void (**)(void))((*v3 & *v1) + 0x170))();
  v18 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19 = (void *)MEMORY[0x24955A5F0](0x64657265646E6572, 0xED00007374786554);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v18, v19);

  (*(void (**)(void))((*v3 & *v1) + 0x188))();
  v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = (void *)MEMORY[0x24955A5F0](0xD000000000000015, 0x80000002464537F0);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v20, v21);

  v22 = (*(uint64_t (**)(void))((*v3 & *v1) + 0x1A0))();
  if (v23 >> 60 != 15)
  {
    v24 = v22;
    v25 = v23;
    v26 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    v27 = Data._bridgeToObjectiveC()().super.isa;
    v28 = objc_msgSend(v26, sel_initWithData_, v27);

    v29 = (void *)MEMORY[0x24955A5F0](0xD000000000000018, 0x8000000246453A00);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v28, v29);

    v22 = outlined consume of Data._Representation?(v24, v25);
  }
  (*(void (**)(uint64_t))((*v3 & *v1) + 0x1B8))(v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  v30 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v31 = (void *)MEMORY[0x24955A5F0](0x706574536B736174, 0xEC00000073676F4CLL);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v30, v31);

  v32 = (*(uint64_t (**)(void))((*v3 & *v1) + 0x1D0))();
  if (v33 >> 60 != 15)
  {
    v34 = v32;
    v35 = v33;
    v36 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    v37 = Data._bridgeToObjectiveC()().super.isa;
    v38 = objc_msgSend(v36, sel_initWithData_, v37);

    v39 = (void *)MEMORY[0x24955A5F0](0xD000000000000022, 0x80000002464539D0);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v38, v39);

    v32 = outlined consume of Data._Representation?(v34, v35);
  }
  (*(void (**)(uint64_t))((*v3 & *v1) + 0x1E8))(v32);
  v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v41 = (void *)MEMORY[0x24955A5F0](0xD000000000000016, 0x8000000246453820);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v40, v41);

  LOBYTE(v40) = (*(uint64_t (**)(void))((*v3 & *v1) + 0x200))();
  v42 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246453840);
  -[objc_class encodeBool:forKey:](cachingCoder.super.isa, sel_encodeBool_forKey_, v40 & 1, v42);

  v43 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isHandledByPreflight);
  v44 = (void *)MEMORY[0x24955A5F0](0xD000000000000014, 0x8000000246453860);
  -[objc_class encodeBool:forKey:](cachingCoder.super.isa, sel_encodeBool_forKey_, v43, v44);

  if (*(_QWORD *)((char *)v1
                 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier
                 + 8))
  {
    v45 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v1
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier));
    v46 = (void *)MEMORY[0x24955A5F0](0xD000000000000020, 0x80000002464539A0);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v45, v46);

  }
  v47 = (*(uint64_t (**)(void))((*v3 & *v1) + 0x228))();
  if (v48)
  {
    v49 = (void *)MEMORY[0x24955A5F0](v47);
    swift_bridgeObjectRelease();
    v50 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246453980);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v49, v50);

  }
  v51 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance), *(_QWORD *)((char *)v1+ OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance+ 8));
  v52 = (void *)MEMORY[0x24955A5F0](0xD000000000000016, 0x80000002464538C0);
  -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v51, v52);

  if (*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId + 8))
  {
    v53 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v1
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId));
    v54 = (void *)MEMORY[0x24955A5F0](0x7355646572616873, 0xEC00000064497265);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v53, v54);

  }
  v55 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses);
  v56 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses + 8);
  if (v56 >> 60 != 15)
  {
    v57 = *v55;
    outlined copy of Data._Representation(*v55, *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses + 8));
    v58 = Data._bridgeToObjectiveC()().super.isa;
    v59 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x8000000246453950);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v58, v59);

    outlined consume of Data._Representation?(v57, v56);
  }
  v60 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse);
  v61 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse + 8);
  if (v61 >> 60 != 15)
  {
    v62 = *v60;
    outlined copy of Data._Representation(*v60, *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse + 8));
    v63 = Data._bridgeToObjectiveC()().super.isa;
    v64 = (void *)MEMORY[0x24955A5F0](0xD000000000000016, 0x8000000246453930);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v63, v64);

    outlined consume of Data._Representation?(v62, v61);
  }
  v65 = *(void **)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_asrRecognition);
  if (v65)
  {
    v66 = v65;
    v67 = (void *)MEMORY[0x24955A5F0](0x676F636552727361, 0xEE006E6F6974696ELL);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v66, v67);

  }
  if (*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult + 8))
  {
    v68 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)((char *)v1
                                                + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult));
    v69 = (void *)MEMORY[0x24955A5F0](0xD000000000000015, 0x8000000246453900);
    -[objc_class encodeObject:forKey:](cachingCoder.super.isa, sel_encodeObject_forKey_, v68, v69);

  }
  v70 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isLowConfidenceKnowledgeResult);
  v71 = (id)MEMORY[0x24955A5F0](0xD00000000000001ELL, 0x80000002464538E0);
  -[objc_class encodeBool:forKey:](cachingCoder.super.isa, sel_encodeBool_forKey_, v70, v71);

}

Swift::String_optional __swiftcall PommesResponse.primaryPluginIdentifier()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String_optional result;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
  if (v3 >> 62)
  {
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v8 = 0;
    v10 = 0;
    goto LABEL_9;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_8;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v5 = (_QWORD *)MEMORY[0x24955A830](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_12;
    }
    v5 = *(id *)(v3 + 32);
  }
  v6 = v5;
  v7 = swift_bridgeObjectRelease();
  v8 = (*(uint64_t (**)(uint64_t))((*v1 & *v6) + 0x88))(v7);
  v10 = v9;

LABEL_9:
  v4 = v8;
  v2 = v10;
LABEL_12:
  result.value._object = v2;
  result.value._countAndFlagsBits = v4;
  return result;
}

void *PommesResponse.overridePrimaryQueryConfidenceDomain.unsafeMutableAddressor()
{
  return &static PommesResponse.overridePrimaryQueryConfidenceDomain;
}

unint64_t static PommesResponse.overridePrimaryQueryConfidenceDomain.getter()
{
  return 0xD000000000000011;
}

void *PommesResponse.overridePrimaryQueryConfidenceKey.unsafeMutableAddressor()
{
  return &static PommesResponse.overridePrimaryQueryConfidenceKey;
}

unint64_t static PommesResponse.overridePrimaryQueryConfidenceKey.getter()
{
  return 0xD000000000000024;
}

double PommesResponse._computedPrimaryQueryConfidence.getter()
{
  _BYTE *v0;
  _BYTE *v1;
  double result;

  v1 = &v0[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse____lazy_storage____computedPrimaryQueryConfidence];
  if ((v0[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse____lazy_storage____computedPrimaryQueryConfidence + 8] & 1) == 0)
    return *(double *)v1;
  specialized closure #1 in PommesResponse._computedPrimaryQueryConfidence.getter(v0);
  *(double *)v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t PommesResponse.primaryCatIds()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
  if (v2 >> 62)
  {
    result = _CocoaArrayWrapper.endIndex.getter();
    if (result)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  result = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!result)
    goto LABEL_8;
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v4 = (_QWORD *)MEMORY[0x24955A830](0, v2);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(id *)(v2 + 32);
LABEL_6:
    v5 = v4;
    v6 = swift_bridgeObjectRelease();
    v7 = (*(uint64_t (**)(uint64_t))((*v1 & *v5) + 0xD0))(v6);

    return v7;
  }
  __break(1u);
  return result;
}

uint64_t PommesResponse.primaryInstructionIntent()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t result;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x140))(v4);
  if (v7 >> 62)
  {
    result = _CocoaArrayWrapper.endIndex.getter();
    if (result)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v6, 1, 1, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(a1, *MEMORY[0x24BE6FC50], v13);
    return outlined destroy of ClientExperienceSignals?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent?);
  }
  result = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!result)
    goto LABEL_8;
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v15 = MEMORY[0x24955A830](0, v7);
    swift_bridgeObjectRelease();
    v16 = v15 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent;
    v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, v16, v11);
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = (char *)*(id *)(v7 + 32);
    swift_bridgeObjectRelease();
    v10 = &v9[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
    v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v6, v10, v11);

LABEL_6:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v6, v11);
  }
  __break(1u);
  return result;
}

uint64_t PommesResponse.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double (*v7)(void);
  _QWORD *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2464515A0;
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesResponse.Type);
  v2 = String.init<A>(describing:)();
  v4 = v3;
  v5 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v1 + 56) = MEMORY[0x24BEE0D00];
  v6 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 96) = type metadata accessor for PommesResponse();
  *(_QWORD *)(v1 + 104) = lazy protocol witness table accessor for type PommesResponse and conformance NSObject();
  *(_QWORD *)(v1 + 72) = v0;
  v7 = *(double (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x288);
  v8 = v0;
  v9 = v7();
  v10 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v1 + 136) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v1 + 144) = v10;
  *(double *)(v1 + 112) = v9;
  v12 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName);
  v11 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName + 8);
  *(_QWORD *)(v1 + 176) = v5;
  *(_QWORD *)(v1 + 184) = v6;
  *(_QWORD *)(v1 + 152) = v12;
  *(_QWORD *)(v1 + 160) = v11;
  swift_bridgeObjectRetain();
  return String.init(format:_:)();
}

uint64_t PommesResponse.setPegasusDomainLogs(flowStep:userSensitiveTier1:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v9;
  void (*v10)(uint64_t, unint64_t);
  uint64_t (*v12)(uint64_t, unint64_t);

  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = *(void (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v4) + 0x1A8);
  outlined copy of Data?(a1, a2);
  v10(a1, a2);
  v12 = *(uint64_t (**)(uint64_t, unint64_t))((*v9 & *v4) + 0x1D8);
  outlined copy of Data?(a3, a4);
  return v12(a3, a4);
}

Swift::Void __swiftcall PommesResponse.setPegasusDomainLogs(flowStep:userSensitiveTier1:)(Swift::OpaquePointer flowStep, Swift::OpaquePointer userSensitiveTier1)
{
  _QWORD *v2;
  _QWORD *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;

  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x1C0);
  v7 = swift_bridgeObjectRetain();
  v6(v7);
  v8 = *(void (**)(uint64_t))((*v5 & *v2) + 0x1F0);
  v9 = swift_bridgeObjectRetain();
  v8(v9);
  v10 = *((_QWORD *)flowStep._rawValue + 2);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v13 = *((_QWORD *)flowStep._rawValue + 2 * v11 + 5);
      if (v13 >> 60 != 15)
      {
        v30 = *((_OWORD *)flowStep._rawValue + v11 + 2);
        outlined copy of Data._Representation(*((_QWORD *)flowStep._rawValue + 2 * v11 + 4), v13);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v15 = v12[2];
        v14 = v12[3];
        v16 = v30;
        if (v15 >= v14 >> 1)
        {
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          v16 = v30;
          v12 = v17;
        }
        v12[2] = v15 + 1;
        *(_OWORD *)&v12[2 * v15 + 4] = v16;
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    if (v12[2])
      goto LABEL_11;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_11:
      v18 = v12[4];
      v19 = v12[5];
      outlined copy of Data._Representation(v18, v19);
      goto LABEL_14;
    }
  }
  v18 = 0;
  v19 = 0xF000000000000000;
LABEL_14:
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, unint64_t))((*v5 & *v2) + 0x1A8))(v18, v19);
  v20 = *((_QWORD *)userSensitiveTier1._rawValue + 2);
  if (v20)
  {
    swift_bridgeObjectRetain();
    v21 = 0;
    v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v23 = *((_QWORD *)userSensitiveTier1._rawValue + 2 * v21 + 5);
      if (v23 >> 60 != 15)
      {
        v31 = *((_OWORD *)userSensitiveTier1._rawValue + v21 + 2);
        outlined copy of Data._Representation(*((_QWORD *)userSensitiveTier1._rawValue + 2 * v21 + 4), v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v25 = v22[2];
        v24 = v22[3];
        v26 = v31;
        if (v25 >= v24 >> 1)
        {
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
          v26 = v31;
          v22 = v27;
        }
        v22[2] = v25 + 1;
        *(_OWORD *)&v22[2 * v25 + 4] = v26;
      }
      ++v21;
    }
    while (v20 != v21);
    swift_bridgeObjectRelease();
    if (v22[2])
      goto LABEL_24;
LABEL_26:
    v28 = 0;
    v29 = 0xF000000000000000;
    goto LABEL_27;
  }
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_26;
LABEL_24:
  v28 = v22[4];
  v29 = v22[5];
  outlined copy of Data._Representation(v28, v29);
LABEL_27:
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, unint64_t))((*v5 & *v2) + 0x1D8))(v28, v29);
}

void PommesResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PommesResponse.__deallocating_deinit()
{
  return PommesResult.__deallocating_deinit(type metadata accessor for PommesResponse);
}

id PommesResult.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t specialized static PommesCandidateId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v6 == 1)
    {
      if (v11 == 1)
      {
        v12 = v2 == v7 && v3 == v8;
        if (v12
          || (v13 = *(_QWORD *)a2,
              v14 = *(_QWORD *)a1,
              v15 = *(_QWORD *)(a1 + 8),
              v16 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              v7 = v13,
              v3 = v15,
              v2 = v14,
              (v16 & 1) != 0))
        {
          if (v4 == v9 && v5 == v10)
          {
            v15 = v3;
            v14 = v2;
            v17 = v4;
            v18 = v5;
            LOBYTE(v11) = 1;
            LOBYTE(v6) = 1;
LABEL_29:
            v32 = 1;
            goto LABEL_32;
          }
          v15 = v3;
          v14 = v2;
          v17 = v4;
          v18 = v5;
          v25 = v9;
          v26 = v7;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v7 = v26;
          v9 = v25;
          v32 = v27;
        }
        else
        {
          v17 = v4;
          v18 = v5;
          v32 = 0;
        }
        LOBYTE(v11) = 1;
        LOBYTE(v6) = 1;
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v11 == 2)
    {
      if (v2 == v7 && v3 == v8)
      {
        v15 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)a1;
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 24);
        v32 = 1;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 24);
        v14 = *(_QWORD *)a1;
        v15 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)a2;
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v7 = v23;
        v32 = v24;
      }
      LOBYTE(v11) = 2;
      LOBYTE(v6) = 2;
      goto LABEL_32;
    }
LABEL_24:
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)a1;
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    v32 = 0;
    goto LABEL_32;
  }
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_24;
  if (v2 == v7 && v3 == v8)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)a1;
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    LOBYTE(v11) = 0;
    LOBYTE(v6) = 0;
    goto LABEL_29;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)a2;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v7 = v20;
  v32 = v21;
  LOBYTE(v11) = 0;
  LOBYTE(v6) = 0;
LABEL_32:
  v28 = v8;
  v29 = v8;
  v30 = v7;
  outlined copy of PommesCandidateId(v7, v28, v9, v10, v11);
  outlined copy of PommesCandidateId(v14, v15, v17, v18, v6);
  outlined consume of PommesCandidateId(v14, v15, v17, v18, v6);
  outlined consume of PommesCandidateId(v30, v29, v9, v10, v11);
  return v32 & 1;
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.CodingKeys, &unk_25179CAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.CodingKeys, &unk_25179CAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.CodingKeys, &unk_25179CAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.CodingKeys, &unk_25179CAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.CodingKeys and conformance PommesCandidateId.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RunPommesCodingKeys, &unk_25179CC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RunPommesCodingKeys, &unk_25179CC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RunPommesCodingKeys, &unk_25179CC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys)
  {
    result = MEMORY[0x24955ADAC]("ݻ4\v4_", &unk_25179CC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RunPommesCodingKeys and conformance PommesCandidateId.RunPommesCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.MedocCodingKeys, &unk_25179CBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.MedocCodingKeys, &unk_25179CBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.MedocCodingKeys, &unk_25179CBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.MedocCodingKeys, &unk_25179CBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.MedocCodingKeys and conformance PommesCandidateId.MedocCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RcCodingKeys, &unk_25179CB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RcCodingKeys, &unk_25179CB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RcCodingKeys, &unk_25179CB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId.RcCodingKeys, &unk_25179CB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId.RcCodingKeys and conformance PommesCandidateId.RcCodingKeys);
  }
  return result;
}

uint64_t specialized PommesCandidateId.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 25458 && a2 == 0xE200000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636F64656DLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D6D6F506E7572 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized PommesCandidateId.MedocCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6449707274 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449756374 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized PommesCandidateId.RcCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized PommesCandidateId.RcCodingKeys.stringValue.getter()
{
  return 25705;
}

uint64_t specialized PommesCandidateId.RunPommesCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6449666572 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized PommesCandidateId.RunPommesCodingKeys.stringValue.getter()
{
  return 0x6449666572;
}

unint64_t specialized PommesCandidateId.CandidateIdType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesCandidateId.CandidateIdType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

id specialized PommesResponse.init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, __int128 *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22)
{
  _BYTE *v22;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  char *v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  objc_super v49;

  v47 = *a15;
  v45 = *((_QWORD *)a15 + 3);
  v46 = *((_QWORD *)a15 + 2);
  v44 = *((_BYTE *)a15 + 32);
  v48 = *a22;
  v26 = (uint64_t *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainFlowStepLog];
  *(_OWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainFlowStepLog] = xmmword_246450CE0;
  v27 = (uint64_t *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainUserSensitiveTier1Log];
  *(_OWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pegasusDomainUserSensitiveTier1Log] = xmmword_246450CE0;
  v28 = &v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestCountryCode];
  *v28 = 0;
  v28[1] = 0;
  v29 = &v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse____lazy_storage____computedPrimaryQueryConfidence];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_experiences] = a1;
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_clientResults] = a2;
  v30 = (uint64_t *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_conversationContext];
  *v30 = a3;
  v30[1] = a4;
  v31 = &v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName];
  *v31 = a5;
  v31[1] = a6;
  v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataFallbackTriggered] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_renderedTexts] = a7;
  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_redactedRenderedTexts] = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v33 = *v26;
  v32 = v26[1];
  *v26 = a8;
  v26[1] = a9;
  v34 = v22;
  outlined copy of Data?(a3, a4);
  outlined copy of Data?(a8, a9);
  outlined consume of Data._Representation?(v33, v32);
  swift_beginAccess();
  v35 = *v27;
  v36 = v27[1];
  *v27 = a10;
  v27[1] = a11;
  outlined copy of Data?(a10, a11);
  outlined consume of Data._Representation?(v35, v36);
  v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_listenAfterSpeaking] = a12;
  v37 = &v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_requestId];
  *v37 = a13;
  v37[1] = a14;
  v38 = &v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_pommesCandidateId];
  *(_OWORD *)v38 = v47;
  *((_QWORD *)v38 + 2) = v46;
  *((_QWORD *)v38 + 3) = v45;
  v38[32] = v44;
  v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isHandledByPreflight] = a16;
  v39 = &v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_preflightClientHandlerIdentifier];
  *v39 = a17;
  v39[1] = a18;
  *(_QWORD *)&v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_taskStepLogs] = a19;
  *(_QWORD *)&v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_userSensitiveTier1Logs] = a20;
  v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchReason] = v48;
  *(_QWORD *)&v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_componentsWarmedUp] = a21;
  v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isCachedResponse] = 0;
  v40 = &v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchRequestUtterance];
  *v40 = 0;
  v40[1] = 0xE000000000000000;
  v41 = &v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_sharedUserId];
  *v41 = 0;
  v41[1] = 0;
  *(_OWORD *)&v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLUserParses] = xmmword_246450CE0;
  *(_OWORD *)&v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_encodedNLFallbackParse] = xmmword_246450CE0;
  *(_QWORD *)&v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_asrRecognition] = 0;
  v42 = &v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_responseVariantResult];
  *v42 = 0;
  v42[1] = 0;
  v34[OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_isLowConfidenceKnowledgeResult] = 0;

  v49.receiver = v34;
  v49.super_class = (Class)type metadata accessor for PommesResponse();
  return objc_msgSendSuper2(&v49, sel_init);
}

uint64_t outlined release of PommesResponse.Builder(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 272);
  v15 = *(_QWORD *)(a1 + 264);
  v16 = *(_QWORD *)(a1 + 288);
  v17 = *(_QWORD *)(a1 + 280);
  v18 = *(void **)(a1 + 296);
  v6 = *(_BYTE *)(a1 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation?(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation?(v4, v5);
  outlined consume of Data._Representation?(v9, v8);
  swift_bridgeObjectRelease();
  outlined consume of PommesCandidateId?(v13, v12, v11, v10, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation?(v15, v14);
  outlined consume of Data._Representation?(v17, v16);

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of PommesCandidateId?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
    return outlined consume of PommesCandidateId(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t outlined consume of PommesCandidateId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 && a5 != 2)
  {
    if (a5 != 1)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PommesResponse()
{
  return objc_opt_self();
}

uint64_t outlined copy of PommesCandidateId?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
    return outlined copy of PommesCandidateId(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t outlined copy of PommesCandidateId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 && a5 != 2)
  {
    if (a5 != 1)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with take of PommesCandidateId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24955ADAC](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24955ADAC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesResponse and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PommesResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type PommesResponse and conformance NSObject)
  {
    v1 = type metadata accessor for PommesResponse();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BEE5BE8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId and conformance PommesCandidateId()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId;
  if (!lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesCandidateId, &type metadata for PommesCandidateId);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId);
  }
  return result;
}

uint64_t sub_2463F639C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t sub_2463F63E0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x158))();
  *a2 = result;
  return result;
}

uint64_t sub_2463F6420(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x160);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2463F6460@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x170))();
  *a2 = result;
  return result;
}

uint64_t sub_2463F64A0(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x178);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2463F64E0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x188))();
  *a2 = result;
  return result;
}

uint64_t sub_2463F6520(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x190);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2463F6560@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1A0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2463F65A0(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1A8);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t sub_2463F65F8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t sub_2463F6638(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1C0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2463F6678@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1D0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2463F66B8(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1D8);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t sub_2463F6710@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1E8))();
  *a2 = result;
  return result;
}

uint64_t sub_2463F6750(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1F0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2463F6790@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x200))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2463F67D4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x208))(*a1);
}

uint64_t sub_2463F6810@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x228))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2463F6850(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x230);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

_QWORD *sub_2463F68A4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x24BEE4EA0] & **a1) + 0x240))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_2463F68F4(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_searchReason);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t method lookup function for PommesResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static PommesResult.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PommesResult.__allocating_init(resultId:domain:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PommesResult.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesResult.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t destroy for PommesCandidateId(uint64_t a1)
{
  return outlined consume of PommesCandidateId(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for PommesCandidateId(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PommesCandidateId(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PommesCandidateId(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PommesCandidateId(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of PommesCandidateId(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PommesCandidateId(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of PommesCandidateId(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesCandidateId(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesCandidateId(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PommesCandidateId(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for PommesCandidateId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PommesCandidateId()
{
  return &type metadata for PommesCandidateId;
}

uint64_t method lookup function for PommesResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesResponse.__allocating_init(experiences:clientResults:conversationContext:metadataDomainName:renderedTexts:pegasusDomainFlowStepLog:pegasusDomainUserSensitiveTier1Log:listenAfterSpeaking:requestId:pommesCandidateId:isHandledByPreflight:preflightClientHandlerIdentifier:taskStepLogs:userSensitiveTier1Logs:componentsWarmedUp:searchReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of PommesResponse.__allocating_init(builder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of PommesResponse.experiences.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of PommesResponse.clientResults.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of PommesResponse.clientResults.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of PommesResponse.clientResults.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of PommesResponse.renderedTexts.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of PommesResponse.renderedTexts.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of PommesResponse.renderedTexts.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of PommesResponse.redactedRenderedTexts.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of PommesResponse.redactedRenderedTexts.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of PommesResponse.redactedRenderedTexts.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PommesResponse.taskStepLogs.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PommesResponse.taskStepLogs.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PommesResponse.taskStepLogs.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PommesResponse.userSensitiveTier1Logs.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PommesResponse.userSensitiveTier1Logs.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PommesResponse.userSensitiveTier1Logs.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of PommesResponse.listenAfterSpeaking.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of PommesResponse.listenAfterSpeaking.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of PommesResponse.listenAfterSpeaking.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of PommesResponse.resultCandidateId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of PommesResponse.isPersonalDomainFallback.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of PommesResponse.requestCountryCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of PommesResponse.requestCountryCode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of PommesResponse.requestCountryCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of PommesResponse.searchReason.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of PommesResponse.setSearchReason(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of PommesResponse.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 608))();
}

uint64_t dispatch thunk of PommesResponse.__allocating_init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 616))();
}

uint64_t dispatch thunk of PommesResponse.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of PommesResponse.encode(cachingCoder:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of PommesResponse.primaryPluginIdentifier()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of PommesResponse.primaryQueryConfidence()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of PommesResponse.primaryCatIds()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of PommesResponse.primaryInstructionIntent()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of PommesResponse.setPegasusDomainLogs(flowStep:userSensitiveTier1:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C0))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C8))();
}

uint64_t destroy for PommesResponse.Builder(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 72), v3);
  v4 = *(_QWORD *)(a1 + 96);
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 88), v4);
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 160);
  if (v5 != 255)
    outlined consume of PommesCandidateId(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a1 + 272);
  if (v6 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 264), v6);
  v7 = *(_QWORD *)(a1 + 288);
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 280), v7);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PommesResponse.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (uint64_t *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    outlined copy of Data._Representation(*v5, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = (uint64_t *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    outlined copy of Data._Representation(*v10, v11);
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v11;
  }
  v13 = (uint64_t *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    outlined copy of Data._Representation(*v13, *(_QWORD *)(a2 + 96));
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v14;
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  v17 = *(unsigned __int8 *)(a2 + 160);
  swift_bridgeObjectRetain();
  if (v17 == 255)
  {
    v22 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v22;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 128);
    v19 = *(_QWORD *)(a2 + 136);
    v20 = *(_QWORD *)(a2 + 144);
    v21 = *(_QWORD *)(a2 + 152);
    outlined copy of PommesCandidateId(v18, v19, v20, v21, v17);
    *(_QWORD *)(a1 + 128) = v18;
    *(_QWORD *)(a1 + 136) = v19;
    *(_QWORD *)(a1 + 144) = v20;
    *(_QWORD *)(a1 + 152) = v21;
    *(_BYTE *)(a1 + 160) = v17;
  }
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v23 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v23;
  v24 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v24;
  v25 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v25;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  v26 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v26;
  v27 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v27;
  v28 = (uint64_t *)(a2 + 264);
  v29 = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 264) = *(_OWORD *)v28;
  }
  else
  {
    v30 = *v28;
    outlined copy of Data._Representation(*v28, v29);
    *(_QWORD *)(a1 + 264) = v30;
    *(_QWORD *)(a1 + 272) = v29;
  }
  v31 = (uint64_t *)(a2 + 280);
  v32 = *(_QWORD *)(a2 + 288);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 280) = *(_OWORD *)v31;
  }
  else
  {
    v33 = *v31;
    outlined copy of Data._Representation(*v31, *(_QWORD *)(a2 + 288));
    *(_QWORD *)(a1 + 280) = v33;
    *(_QWORD *)(a1 + 288) = v32;
  }
  v34 = *(void **)(a2 + 296);
  v35 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v34;
  *(_QWORD *)(a1 + 304) = v35;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v36 = v34;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PommesResponse.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  id v56;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      v6 = *v4;
      outlined copy of Data._Representation(*v4, *(_QWORD *)(a2 + 24));
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 16);
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v7 = *v4;
  outlined copy of Data._Representation(*v4, *(_QWORD *)(a2 + 24));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v5;
  outlined consume of Data._Representation(v8, v9);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) >> 60 == 15)
  {
    if (v11 >> 60 != 15)
    {
      v12 = *v10;
      outlined copy of Data._Representation(*v10, *(_QWORD *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v12;
      *(_QWORD *)(a1 + 80) = v11;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 72);
LABEL_13:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v10;
    goto LABEL_15;
  }
  v13 = *v10;
  outlined copy of Data._Representation(*v10, *(_QWORD *)(a2 + 80));
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v11;
  outlined consume of Data._Representation(v14, v15);
LABEL_15:
  v16 = (uint64_t *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      v18 = *v16;
      outlined copy of Data._Representation(*v16, *(_QWORD *)(a2 + 96));
      *(_QWORD *)(a1 + 88) = v18;
      *(_QWORD *)(a1 + 96) = v17;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v17 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 88);
LABEL_20:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v16;
    goto LABEL_22;
  }
  v19 = *v16;
  outlined copy of Data._Representation(*v16, *(_QWORD *)(a2 + 96));
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v19;
  *(_QWORD *)(a1 + 96) = v17;
  outlined consume of Data._Representation(v20, v21);
LABEL_22:
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (__int128 *)(a1 + 128);
  v23 = (__int128 *)(a2 + 128);
  v24 = *(unsigned __int8 *)(a2 + 160);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (v24 == 255)
    {
      v40 = *v23;
      v41 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *v22 = v40;
      *(_OWORD *)(a1 + 144) = v41;
    }
    else
    {
      v34 = *(_QWORD *)(a2 + 128);
      v35 = *(_QWORD *)(a2 + 136);
      v36 = *(_QWORD *)(a2 + 144);
      v37 = *(_QWORD *)(a2 + 152);
      outlined copy of PommesCandidateId(v34, v35, v36, v37, *(_BYTE *)(a2 + 160));
      *(_QWORD *)(a1 + 128) = v34;
      *(_QWORD *)(a1 + 136) = v35;
      *(_QWORD *)(a1 + 144) = v36;
      *(_QWORD *)(a1 + 152) = v37;
      *(_BYTE *)(a1 + 160) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of PommesCandidateId(a1 + 128);
    v38 = *(_BYTE *)(a2 + 160);
    v39 = *(_OWORD *)(a2 + 144);
    *v22 = *v23;
    *(_OWORD *)(a1 + 144) = v39;
    *(_BYTE *)(a1 + 160) = v38;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 128);
    v26 = *(_QWORD *)(a2 + 136);
    v27 = *(_QWORD *)(a2 + 144);
    v28 = *(_QWORD *)(a2 + 152);
    outlined copy of PommesCandidateId(v25, v26, v27, v28, *(_BYTE *)(a2 + 160));
    v29 = *(_QWORD *)(a1 + 128);
    v30 = *(_QWORD *)(a1 + 136);
    v31 = *(_QWORD *)(a1 + 144);
    v32 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 136) = v26;
    *(_QWORD *)(a1 + 144) = v27;
    *(_QWORD *)(a1 + 152) = v28;
    v33 = *(_BYTE *)(a1 + 160);
    *(_BYTE *)(a1 + 160) = v24;
    outlined consume of PommesCandidateId(v29, v30, v31, v32, v33);
  }
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = (uint64_t *)(a2 + 264);
  v43 = *(_QWORD *)(a2 + 272);
  if (*(_QWORD *)(a1 + 272) >> 60 == 15)
  {
    if (v43 >> 60 != 15)
    {
      v44 = *v42;
      outlined copy of Data._Representation(*v42, *(_QWORD *)(a2 + 272));
      *(_QWORD *)(a1 + 264) = v44;
      *(_QWORD *)(a1 + 272) = v43;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v43 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 264);
LABEL_34:
    *(_OWORD *)(a1 + 264) = *(_OWORD *)v42;
    goto LABEL_36;
  }
  v45 = *v42;
  outlined copy of Data._Representation(*v42, *(_QWORD *)(a2 + 272));
  v46 = *(_QWORD *)(a1 + 264);
  v47 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 264) = v45;
  *(_QWORD *)(a1 + 272) = v43;
  outlined consume of Data._Representation(v46, v47);
LABEL_36:
  v48 = (uint64_t *)(a2 + 280);
  v49 = *(_QWORD *)(a2 + 288);
  if (*(_QWORD *)(a1 + 288) >> 60 != 15)
  {
    if (v49 >> 60 != 15)
    {
      v51 = *v48;
      outlined copy of Data._Representation(*v48, *(_QWORD *)(a2 + 288));
      v52 = *(_QWORD *)(a1 + 280);
      v53 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 280) = v51;
      *(_QWORD *)(a1 + 288) = v49;
      outlined consume of Data._Representation(v52, v53);
      goto LABEL_43;
    }
    outlined destroy of Data(a1 + 280);
    goto LABEL_41;
  }
  if (v49 >> 60 == 15)
  {
LABEL_41:
    *(_OWORD *)(a1 + 280) = *(_OWORD *)v48;
    goto LABEL_43;
  }
  v50 = *v48;
  outlined copy of Data._Representation(*v48, *(_QWORD *)(a2 + 288));
  *(_QWORD *)(a1 + 280) = v50;
  *(_QWORD *)(a1 + 288) = v49;
LABEL_43:
  v54 = *(void **)(a1 + 296);
  v55 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v55;
  v56 = v55;

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

uint64_t outlined destroy of PommesCandidateId(uint64_t a1)
{
  outlined consume of PommesCandidateId(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

void *__swift_memcpy321_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t assignWithTake for PommesResponse.Builder(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >> 60 == 15)
    goto LABEL_4;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v4;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v4;
  *(_QWORD *)(a1 + 24) = v6;
  outlined consume of Data._Representation(v7, v5);
LABEL_6:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v9 = (_OWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 72) = *v9;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 80);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 72);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 80) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_11:
  v13 = (_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  if (v14 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 88) = *v13;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)(a2 + 96);
  if (v15 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 88);
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)v13;
  *(_QWORD *)(a1 + 96) = v15;
  outlined consume of Data._Representation(v16, v14);
LABEL_16:
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v17;
  swift_bridgeObjectRelease();
  v18 = *(unsigned __int8 *)(a1 + 160);
  if (v18 != 255)
  {
    v19 = *(unsigned __int8 *)(a2 + 160);
    if (v19 != 255)
    {
      v20 = *(_QWORD *)(a1 + 128);
      v21 = *(_QWORD *)(a1 + 136);
      v22 = *(_QWORD *)(a1 + 144);
      v23 = *(_QWORD *)(a1 + 152);
      v24 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v24;
      *(_BYTE *)(a1 + 160) = v19;
      outlined consume of PommesCandidateId(v20, v21, v22, v23, v18);
      goto LABEL_21;
    }
    outlined destroy of PommesCandidateId(a1 + 128);
  }
  v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
LABEL_21:
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v26 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v26;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v27;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  v28 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  v30 = (_OWORD *)(a2 + 264);
  v31 = *(_QWORD *)(a1 + 272);
  if (v31 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)(a1 + 264) = *v30;
    goto LABEL_26;
  }
  v32 = *(_QWORD *)(a2 + 272);
  if (v32 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 264);
    goto LABEL_24;
  }
  v33 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)v30;
  *(_QWORD *)(a1 + 272) = v32;
  outlined consume of Data._Representation(v33, v31);
LABEL_26:
  v34 = (_QWORD *)(a2 + 280);
  v35 = *(_QWORD *)(a1 + 288);
  if (v35 >> 60 != 15)
  {
    v36 = *(_QWORD *)(a2 + 288);
    if (v36 >> 60 != 15)
    {
      v37 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 280) = *v34;
      *(_QWORD *)(a1 + 288) = v36;
      outlined consume of Data._Representation(v37, v35);
      goto LABEL_31;
    }
    outlined destroy of Data(a1 + 280);
  }
  *(_OWORD *)(a1 + 280) = *(_OWORD *)v34;
LABEL_31:
  v38 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  v39 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v39;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesResponse.Builder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 321))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 200);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesResponse.Builder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_BYTE *)(result + 320) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 321) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 200) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 321) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesResponse.Builder()
{
  return &type metadata for PommesResponse.Builder;
}

uint64_t getEnumTagSinglePayload for PommesCandidateId.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesCandidateId.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2463F7E54 + 4 * byte_246450EFD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2463F7E88 + 4 * byte_246450EF8[v4]))();
}

uint64_t sub_2463F7E88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463F7E90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2463F7E98);
  return result;
}

uint64_t sub_2463F7EA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2463F7EACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2463F7EB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463F7EB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PommesCandidateId.CodingKeys()
{
  return &unk_25179CAD8;
}

uint64_t getEnumTag for PommesCandidateId.RcCodingKeys()
{
  return 0;
}

void *type metadata accessor for PommesCandidateId.RcCodingKeys()
{
  return &unk_25179CB68;
}

uint64_t getEnumTagSinglePayload for PommesCandidateId.MedocCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesCandidateId.MedocCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2463F7FD4 + 4 * byte_246450F07[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2463F8008 + 4 * byte_246450F02[v4]))();
}

uint64_t sub_2463F8008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463F8010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2463F8018);
  return result;
}

uint64_t sub_2463F8024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2463F802CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2463F8030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463F8038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for PommesCandidateId.MedocCodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for PommesCandidateId.MedocCodingKeys()
{
  return &unk_25179CBF8;
}

uint64_t getEnumTagSinglePayload for PommesCandidateId.RcCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for PommesCandidateId.RcCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2463F80F0 + 4 * byte_246450F0C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2463F8110 + 4 * byte_246450F11[v4]))();
}

_BYTE *sub_2463F80F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2463F8110(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2463F8118(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2463F8120(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2463F8128(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2463F8130(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PommesCandidateId.RunPommesCodingKeys()
{
  return &unk_25179CC88;
}

void specialized closure #1 in PommesResponse._computedPrimaryQueryConfidence.getter(void *a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  const char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  id v67;
  void *v68;
  NSObject *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v3 = objc_msgSend(v2, sel_languageCode);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    *(_QWORD *)&v96 = v5;
    *((_QWORD *)&v96 + 1) = v7;
    lazy protocol witness table accessor for type String and conformance String();
    v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v10 = v9;

    swift_bridgeObjectRelease();
  }
  else
  {

    v8 = 0;
    v10 = (void *)0xE000000000000000;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  v15 = &unk_257575000;
  if (os_log_type_enabled(v13, v14))
  {
    v16 = swift_slowAlloc();
    v95 = swift_slowAlloc();
    *(_QWORD *)&v96 = v95;
    *(_DWORD *)v16 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v10, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    v17 = v8;
    v19 = *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName);
    v18 = *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC21SiriInformationSearch14PommesResponse_metadataDomainName + 8);
    swift_bridgeObjectRetain();
    v20 = v19;
    v8 = v17;
    v15 = (_QWORD *)&unk_257575000;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v18, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2463D2000, v13, v14, "locale: %s, metadataDomainName: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24955AE30](v95, -1, -1);
    MEMORY[0x24955AE30](v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v21 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v22 = (void *)MEMORY[0x24955A5F0](0xD000000000000011, 0x80000002464536A0);
  v23 = objc_msgSend(v21, sel_initWithSuiteName_, v22);

  if (v23)
  {
    v24 = (void *)MEMORY[0x24955A5F0](0xD000000000000024, 0x80000002464536C0);
    v25 = objc_msgSend(v23, sel_objectForKey_, v24);

    if (v25)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of ClientExperienceSignals?((uint64_t)&v96, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v26 = (void *)MEMORY[0x24955A5F0](0xD000000000000024, 0x80000002464536C0);
      objc_msgSend(v23, sel_doubleForKey_, v26);
      v28 = v27;

      if (v28 >= 0.0)
      {
        swift_bridgeObjectRelease();
        v49 = Logger.logObject.getter();
        v50 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v51 = 134217984;
          *(double *)&v96 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_2463D2000, v49, v50, "Developer override for Pommes query confidence: %f", v51, 0xCu);
          MEMORY[0x24955AE30](v51, -1, -1);
        }

        return;
      }

    }
    else
    {
      v96 = 0u;
      v97 = 0u;

      outlined destroy of ClientExperienceSignals?((uint64_t)&v96, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
  }
  v29 = (_QWORD *)((char *)v12 + v15[344]);
  v31 = *v29;
  v30 = v29[1];
  v32 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v32 = v31 & 0xFFFFFFFFFFFFLL;
  if (!v32)
  {
    swift_bridgeObjectRelease();
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      v48 = "Domain name is empty. Query confidence: 0";
LABEL_69:
      _os_log_impl(&dword_2463D2000, v45, v46, v48, v47, 2u);
      v94 = (uint64_t)v47;
      goto LABEL_70;
    }
LABEL_71:

    return;
  }
  swift_bridgeObjectRetain_n();
  v33 = v8;
  specialized FeatureFlag.domainLocaleFeature(_:_:)(v31, v30, v8, v10);
  v34 = StaticString.description.getter();
  v36 = v35;
  v37 = swift_bridgeObjectRelease();
  if ((v36 & 0x2000000000000000) != 0)
    v41 = HIBYTE(v36) & 0xF;
  else
    v41 = v34 & 0xFFFFFFFFFFFFLL;
  v42 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if ((v31 != 7300455 || v30 != 0xE300000000000000)
    && (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v37 & 1) == 0)
    && (v31 != 1936744813 || v30 != 0xE400000000000000)
    && (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v37 & 1) == 0)
    || (v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*v42 & *v12) + 0x228))(v37, v38, v39, v40), !v44))
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  if (v43 != 20035 || v44 != 0xE200000000000000)
  {
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
LABEL_41:
    if (v41)
    {
      *((_QWORD *)&v97 + 1) = &type metadata for FeatureFlag;
      v98 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
      v57 = swift_allocObject();
      *(_QWORD *)&v96 = v57;
      *(_QWORD *)(v57 + 16) = v31;
      *(_QWORD *)(v57 + 24) = v30;
      v58 = v33;
      *(_QWORD *)(v57 + 32) = v33;
      *(_QWORD *)(v57 + 40) = v10;
      *(_BYTE *)(v57 + 48) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v96);
      if ((v59 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_48:
        v56 = swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v45 = Logger.logObject.getter();
      v80 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v80))
      {
        v81 = swift_slowAlloc();
        v82 = swift_slowAlloc();
        *(_QWORD *)&v96 = v82;
        *(_DWORD *)v81 = 136315394;
        v83 = StaticString.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v81 + 12) = 2080;
        specialized FeatureFlag.domainLocaleFeature(_:_:)(v31, v30, v58, v10);
        v85 = StaticString.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2463D2000, v45, v80, "%s\\%s featureflag is disabled. Query confidence: 0", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy();
        v87 = v82;
LABEL_63:
        MEMORY[0x24955AE30](v87, -1, -1);
        v94 = v81;
LABEL_70:
        MEMORY[0x24955AE30](v94, -1, -1);
        goto LABEL_71;
      }

      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      specialized FeatureFlag.domainFeature(for:)(v31, v30);
      v60 = StaticString.description.getter();
      v62 = v61;
      swift_bridgeObjectRelease();
      v63 = HIBYTE(v62) & 0xF;
      if ((v62 & 0x2000000000000000) == 0)
        v63 = v60 & 0xFFFFFFFFFFFFLL;
      if (!v63)
        goto LABEL_48;
      *((_QWORD *)&v97 + 1) = &type metadata for FeatureFlag;
      v98 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
      v64 = swift_allocObject();
      *(_QWORD *)&v96 = v64;
      *(_QWORD *)(v64 + 16) = v31;
      *(_QWORD *)(v64 + 24) = v30;
      *(_QWORD *)(v64 + 32) = 0;
      *(_QWORD *)(v64 + 40) = 0;
      *(_BYTE *)(v64 + 48) = 0;
      swift_bridgeObjectRetain();
      v65 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v96);
      if ((v65 & 1) != 0)
        goto LABEL_48;
      swift_bridgeObjectRetain_n();
      v45 = Logger.logObject.getter();
      v88 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v88))
      {
        v81 = swift_slowAlloc();
        v89 = swift_slowAlloc();
        *(_QWORD *)&v96 = v89;
        *(_DWORD *)v81 = 136315394;
        v90 = StaticString.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v81 + 12) = 2080;
        specialized FeatureFlag.domainFeature(for:)(v31, v30);
        v92 = StaticString.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2463D2000, v45, v88, "%s\\%s featureflag is disabled. Query confidence: 0", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy();
        v87 = v89;
        goto LABEL_63;
      }

    }
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_38:
  swift_bridgeObjectRelease();
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_2463D2000, v53, v54, "CN-specific override for Geo traffic. Falling through without FF check", v55, 2u);
    MEMORY[0x24955AE30](v55, -1, -1);
  }

LABEL_49:
  v66 = (*(uint64_t (**)(uint64_t))((*v42 & *v12) + 0x140))(v56);
  if (v66 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_51;
LABEL_67:
    swift_bridgeObjectRelease();
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      v48 = "Pommes result has no experiences. Query confidence: 0";
      goto LABEL_69;
    }
    goto LABEL_71;
  }
  if (!*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_67;
LABEL_51:
  if ((v66 & 0xC000000000000001) != 0)
  {
    v67 = (id)MEMORY[0x24955A830](0, v66);
  }
  else
  {
    if (!*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v67 = *(id *)(v66 + 32);
  }
  v68 = v67;
  swift_bridgeObjectRelease();
  v69 = v68;
  v70 = Logger.logObject.getter();
  v71 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v72 = 134217984;
    *(_QWORD *)&v96 = (*(double (**)(uint8_t *, uint64_t, uint64_t, uint64_t))((*v42 & (uint64_t)v69->isa) + 0xA0))(v72, v73, v74, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_2463D2000, v70, v71, "Pommes result primary experience query confidence: %f", v72, 0xCu);
    MEMORY[0x24955AE30](v72, -1, -1);
  }
  else
  {

    v70 = v69;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*v42 & (uint64_t)v69->isa) + 0xA0))(v76, v77, v78, v79);
}

unint64_t lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag;
  if (!lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for FeatureFlag, &type metadata for FeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag);
  }
  return result;
}

uint64_t sub_2463F920C()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t outlined consume of FeatureFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined release of PommesCandidateId?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_2463F9354()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_2463F9564()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2463F967C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_2463F9760()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

id Experience.init(pluginId:queryConfidence:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  objc_super v18;

  *(_QWORD *)&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v6 = &v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  *(double *)&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a4;
  v7 = &v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a3, v8);
  v10 = objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0));
  v11 = v4;
  v12 = objc_msgSend(v10, sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v12;
  v13 = &v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v14 = *MEMORY[0x24BE6FC50];
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);

  v18.receiver = v11;
  v18.super_class = (Class)type metadata accessor for Experience(0);
  v16 = objc_msgSendSuper2(&v18, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  return v16;
}

uint64_t type metadata accessor for PommesRenderOptions(uint64_t a1)
{
  return type metadata accessor for AudioExperience.Builder(a1, type metadata singleton initialization cache for PommesRenderOptions);
}

uint64_t type metadata accessor for Experience(uint64_t a1)
{
  return type metadata accessor for AudioExperience.Builder(a1, (uint64_t *)&type metadata singleton initialization cache for Experience);
}

id Experience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  char *v6;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  objc_super v19;

  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v10 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  *(double *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v11 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a3, v12);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = a4;
  v14 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, a5, v15);
  v19.receiver = v6;
  v19.super_class = (Class)type metadata accessor for Experience(0);
  v17 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, v15);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  return v17;
}

id Experience.init(coder:)(void *a1)
{
  char *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  unint64_t *v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  id v63;
  uint64_t v65;
  char *v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint8_t *v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  objc_class *v84;
  char *v85;
  void *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t *v99;
  char *v100;
  void *v101;
  char *v102;
  unint64_t v103;
  objc_super v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v4 = 0xD000000000000010;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent?);
  MEMORY[0x24BDAC7A8](v5);
  v92 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v98 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v90 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v8);
  v94 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x24BDAC7A8](v10);
  v97 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v12 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v93 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v102 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v100 = (char *)&v85 - v21;
  v99 = (unint64_t *)&v1[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v22 = v1;
  v23 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v23
    || (v24 = (void *)v23,
        v105 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v24,
        (v25 = *((_QWORD *)&v105 + 1)) == 0))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_2463D2000, v48, v49, "Experience missing pluginID in coder", v50, 2u);
      MEMORY[0x24955AE30](v50, -1, -1);
    }

    goto LABEL_42;
  }
  v26 = &v22[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v26 = v105;
  *((_QWORD *)v26 + 1) = v25;
  v88 = v26;
  v27 = (void *)MEMORY[0x24955A5F0](0x6E6F437972657571, 0xEF65636E65646966);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v27);
  v29 = v28;

  *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_246412940;
  *(_QWORD *)(v30 + 32) = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  v89 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  *(_QWORD *)(v30 + 40) = v89;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  v87 = v12;
  if (!*((_QWORD *)&v106 + 1))
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v105, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NSData]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    v51 = v98;
    v52 = (uint64_t)v97;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_2463D2000, v54, v55, "Experience missing entities in coder", v56, 2u);
      MEMORY[0x24955AE30](v56, -1, -1);
    }

    v34 = 0;
    goto LABEL_34;
  }
  v31 = v103;
  if (v103 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v32 = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v86 = a1;
  v85 = v22;
  if (v32)
  {
    if (v32 < 1)
    {
      __break(1u);
      goto LABEL_60;
    }
    v33 = 0;
    v34 = 0;
    v35 = v31 & 0xC000000000000001;
    v36 = MEMORY[0x24BEE4AF8];
    v95 = v31 & 0xC000000000000001;
    do
    {
      if (v35)
        v37 = (id)MEMORY[0x24955A830](v33, v31);
      else
        v37 = *(id *)(v31 + 8 * v33 + 32);
      v38 = v37;
      *(_QWORD *)&v105 = v37;
      closure #1 in Experience.init(coder:)((uint64_t)v16);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
      {
        outlined destroy of ClientExperienceSignals?((uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      }
      else
      {
        v101 = v34;
        v39 = v32;
        v40 = v31;
        v41 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
        v42 = v100;
        v43 = v16;
        v41(v100, v16, v17);
        v44 = v17;
        v41(v102, v42, v17);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>, (uint64_t (*)(_QWORD))MEMORY[0x24BE70758]);
        v46 = *(_QWORD *)(v36 + 16);
        v45 = *(_QWORD *)(v36 + 24);
        if (v46 >= v45 >> 1)
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1, v36, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>, (uint64_t (*)(_QWORD))MEMORY[0x24BE70758]);
        *(_QWORD *)(v36 + 16) = v46 + 1;
        v41((char *)(v36+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v46), v102, v44);
        v31 = v40;
        v32 = v39;
        v17 = v44;
        v16 = v43;
        v34 = v101;
        v35 = v95;
      }
      ++v33;
    }
    while (v32 != v33);
  }
  else
  {
    v34 = 0;
    v36 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease_n();
  v57 = v99;
  swift_beginAccess();
  *v57 = v36;
  swift_bridgeObjectRelease();
  a1 = v86;
  v22 = v85;
  v52 = (uint64_t)v97;
  v51 = v98;
LABEL_34:
  v58 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (v58)
  {
    v32 = v58;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    v107 = 0;
    v105 = 0u;
    v106 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x24BE9C828], MEMORY[0x24BE9C7C0]);
    v4 = v96;
    Message.init(serializedData:extensions:partial:options:)();
    if (v34)
    {

      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v87 + 56))(v52, 1, 1, v4);
      outlined destroy of ClientExperienceSignals?(v52, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      goto LABEL_37;
    }
    v65 = v87;
    (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v87 + 56))(v52, 0, 1, v4);
    v66 = v93;
    (*(void (**)(char *, uint64_t, unint64_t))(v65 + 32))(v93, v52, v4);
    v2 = &unk_254422000;
    (*(void (**)(char *, char *, unint64_t))(v65 + 16))(&v22[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], v66, v4);
    type metadata accessor for PommesRenderOptions(0);
    v67 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    if (v67)
    {
      *(_QWORD *)&v22[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v67;
      v68 = v67;
      v69 = (void *)MEMORY[0x24955A5F0](0x746E65746E69, 0xE600000000000000);
      objc_msgSend(a1, sel_decodeIntegerForKey_, v69);

      v70 = (uint64_t)v92;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent.init(rawValue:)();
      v71 = v91;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v70, 1, v91) != 1)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v93, v96);

        v82 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
        v83 = v90;
        v82(v90, v70, v71);
        v82(&v22[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], (uint64_t)v83, v71);

        v84 = (objc_class *)type metadata accessor for Experience(0);
        v104.receiver = v22;
        v104.super_class = v84;
        v63 = objc_msgSendSuper2(&v104, sel_init);

        return v63;
      }
      outlined destroy of ClientExperienceSignals?(v70, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent?);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v72 = type metadata accessor for Logger();
      __swift_project_value_buffer(v72, (uint64_t)static Logger.pommes);
      v73 = Logger.logObject.getter();
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v75 = 0;
        _os_log_impl(&dword_2463D2000, v73, v74, "Unable to decode intent", v75, 2u);
        MEMORY[0x24955AE30](v75, -1, -1);
      }

      v76 = *(void (**)(char *, uint64_t))(v87 + 8);
      v4 = v96;
      v76(v93, v96);
      swift_bridgeObjectRelease();

      goto LABEL_56;
    }
    if (one-time initialization token for pommes == -1)
    {
LABEL_53:
      v77 = type metadata accessor for Logger();
      __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
      v78 = Logger.logObject.getter();
      v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v80 = 0;
        _os_log_impl(&dword_2463D2000, v78, v79, "Experience failed to extract renderOptions", v80, 2u);
        v81 = v80;
        v4 = v96;
        MEMORY[0x24955AE30](v81, -1, -1);
      }

      v76 = *(void (**)(char *, uint64_t))(v87 + 8);
      v76(v93, v4);
      swift_bridgeObjectRelease();
LABEL_56:
      swift_bridgeObjectRelease();
      v76(&v22[v2[137]], v4);
      goto LABEL_43;
    }
LABEL_60:
    swift_once();
    goto LABEL_53;
  }
LABEL_37:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_2463D2000, v60, v61, "Unable to decode userDialogActData", v62, 2u);
    MEMORY[0x24955AE30](v62, -1, -1);
  }

  swift_bridgeObjectRelease();
LABEL_42:
  swift_bridgeObjectRelease();
LABEL_43:

  type metadata accessor for Experience(0);
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall Experience.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  Class v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Class v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[2];
  objc_class *isa;
  uint64_t v41;
  __int128 v42;
  char *v43;
  void (*v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;

  v2 = v1;
  v4 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x88))(v6);
  v11 = (void *)MEMORY[0x24955A5F0](v10);
  swift_bridgeObjectRelease();
  v12 = (void *)MEMORY[0x24955A5F0](0xD000000000000010, 0x8000000246453B80);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

  v13 = (*(double (**)(void))((*v9 & *v2) + 0xA0))();
  v14 = (void *)MEMORY[0x24955A5F0](0x6E6F437972657571, 0xEF65636E65646966);
  -[objc_class encodeDouble:forKey:](with.super.isa, sel_encodeDouble_forKey_, v14, v13);

  v15 = (void *)(*(uint64_t (**)(void))((*v9 & *v2) + 0xB8))();
  v16 = (void *)MEMORY[0x24955A5F0](0x704F7265646E6572, 0xED0000736E6F6974);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);

  v17 = (*(uint64_t (**)(void))((*v9 & *v2) + 0xF8))();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v39[1] = v2;
    isa = with.super.isa;
    v19 = v17 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v20 = *(_QWORD *)(v5 + 72);
    v44 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v45 = v20;
    v39[0] = v17;
    swift_bridgeObjectRetain();
    v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v21 = 136315138;
    v42 = v21;
    v41 = MEMORY[0x24BEE4AD8] + 8;
    v43 = v8;
    do
    {
      v44(v8, v19, v4);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ResultEntity and conformance Apple_Parsec_Siri_Context_ResultEntity, (uint64_t (*)(uint64_t))MEMORY[0x24BE70758], MEMORY[0x24BE70740]);
      v22 = Message.serializedData(partial:)();
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v25 = v46;
      else
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
      v25[2] = v27 + 1;
      v46 = v25;
      v28 = &v25[2 * v27];
      v28[4] = v22;
      v28[5] = v24;
      v19 += v45;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease_n();
    with.super.isa = isa;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v30 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246453BB0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v29, v30);

  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x24BE9C828], MEMORY[0x24BE9C7C0]);
  v31 = Message.serializedData(partial:)();
  v33 = v32;
  v34 = Data._bridgeToObjectiveC()().super.isa;
  v35 = (void *)MEMORY[0x24955A5F0](0x6C61694472657375, 0xED0000746341676FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v34, v35);

  v36 = outlined consume of Data._Representation(v31, v33);
  v37 = MEMORY[0x24955A134](v36);
  v38 = (void *)MEMORY[0x24955A5F0](0x746E65746E69, 0xE600000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v37, v38);

}

uint64_t Experience.pluginIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

double Experience.queryConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence;
  swift_beginAccess();
  return *(double *)v1;
}

id Experience.renderOptions.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions);
  swift_beginAccess();
  return *v1;
}

uint64_t Experience.catCategories.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t Experience.associatedEntities.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t Experience.associatedEntities.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Experience.associatedEntities.modify())()
{
  swift_beginAccess();
  return AudioExperience.internalSignalsFromSiriAudio.modify;
}

uint64_t key path setter for Experience.pluginIdentifier : Experience(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier);
  swift_beginAccess();
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void key path setter for Experience.renderOptions : Experience(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

uint64_t Experience.userDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioExperience.audioUnderstanding.getter(&OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct, (uint64_t (*)(_QWORD))MEMORY[0x24BE9C828], a1);
}

uint64_t Experience.intent.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioExperience.audioUnderstanding.getter(&OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent, (uint64_t (*)(_QWORD))MEMORY[0x24BE6FC70], a1);
}

id Experience.__allocating_init(pluginId:queryConfidence:)(uint64_t a1, uint64_t a2, double a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return Experience.init(pluginId:queryConfidence:)(a1, a2, a3);
}

id Experience.init(pluginId:queryConfidence:)(uint64_t a1, uint64_t a2, double a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  objc_super v18;

  v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v11 = &v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  *(double *)&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a3;
  v12 = v3;
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v12[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], v10, v7);
  *(_QWORD *)&v12[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v13 = &v12[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v14 = *MEMORY[0x24BE6FC50];
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);

  v16 = (objc_class *)type metadata accessor for Experience(0);
  v18.receiver = v12;
  v18.super_class = v16;
  return objc_msgSendSuper2(&v18, sel_init);
}

id Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  objc_super v22;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v10 = &v9[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  *(double *)&v9[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a4;
  v11 = &v9[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a3, v12);
  v14 = objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0));
  v15 = v9;
  v16 = objc_msgSend(v14, sel_init);
  *(_QWORD *)&v15[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v16;
  v17 = &v15[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v18 = *MEMORY[0x24BE6FC50];
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);

  v22.receiver = v15;
  v22.super_class = v4;
  v20 = objc_msgSendSuper2(&v22, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  return v20;
}

id Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  objc_super v21;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v12 = &v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  *(double *)&v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a5;
  v13 = &v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a3, v14);
  *(_QWORD *)&v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = a4;
  v16 = &v11[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v17 = *MEMORY[0x24BE6FC50];
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  v21.receiver = v11;
  v21.super_class = v5;
  v19 = objc_msgSendSuper2(&v21, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
  return v19;
}

id Experience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  char *v5;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v8 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(double *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a5;
  v9 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a3, v10);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = a4;
  v12 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v13 = *MEMORY[0x24BE6FC50];
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  v17.receiver = v5;
  v17.super_class = (Class)type metadata accessor for Experience(0);
  v15 = objc_msgSendSuper2(&v17, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v10);
  return v15;
}

id Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return Experience.init(pluginId:queryConfidence:userDialogAct:intent:)(a1, a2, a3, a4, a5);
}

id Experience.init(pluginId:queryConfidence:userDialogAct:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  char *v5;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  objc_super v20;

  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v8 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(double *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a5;
  v9 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a3, v10);
  v12 = objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0));
  v13 = v5;
  v14 = objc_msgSend(v12, sel_init);
  *(_QWORD *)&v13[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v14;
  v15 = &v13[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a4, v16);

  v20.receiver = v13;
  v20.super_class = (Class)type metadata accessor for Experience(0);
  v18 = objc_msgSendSuper2(&v20, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a4, v16);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v10);
  return v18;
}

id Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_class *v6;
  objc_class *v7;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  objc_super v24;

  v7 = v6;
  v14 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v15 = &v14[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  *(double *)&v14[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v16 = &v14[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct];
  v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a3, v17);
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = a4;
  v19 = &v14[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent];
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a5, v20);
  v24.receiver = v14;
  v24.super_class = v7;
  v22 = objc_msgSendSuper2(&v24, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a5, v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
  return v22;
}

id Experience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Experience.init(coder:)(a1);
}

uint64_t closure #1 in Experience.init(coder:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE70758];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ResultEntity and conformance Apple_Parsec_Siri_Context_ResultEntity, v5, MEMORY[0x24BE70740]);
  Message.init(serializedData:extensions:partial:options:)();
  if (v1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    v10 = v1;
    v11 = v1;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_QWORD *)&v23[0] = v15;
      v21 = a1;
      *(_DWORD *)v14 = 136315138;
      v20 = v14 + 4;
      swift_getErrorValue();
      v16 = Error.localizedDescription.getter();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v23);
      a1 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2463D2000, v12, v13, "Experience ResultEntity failed %s", v14, 0xCu);
      v18 = 1;
      swift_arrayDestroy();
      MEMORY[0x24955AE30](v15, -1, -1);
      MEMORY[0x24955AE30](v14, -1, -1);

    }
    else
    {

      v18 = 1;
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v8, v4);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v18, 1, v4);
}

id Experience.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void Experience.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id Experience.__deallocating_deinit()
{
  return Experience.__deallocating_deinit(type metadata accessor for Experience);
}

SiriInformationSearch::PommesRenderOptions::PromptType_optional __swiftcall PommesRenderOptions.PromptType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriInformationSearch::PommesRenderOptions::PromptType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesRenderOptions.PromptType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PommesRenderOptions.PromptType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000013;
  if (*v0 != 1)
    v1 = 0xD00000000000001ALL;
  if (*v0)
    return v1;
  else
    return 0x656E696665646E75;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesRenderOptions.PromptType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesRenderOptions.PromptType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PommesRenderOptions.PromptType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesRenderOptions.PromptType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriInformationSearch::PommesRenderOptions::PromptType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PommesRenderOptions.PromptType(Swift::String *a1)
{
  return PommesRenderOptions.PromptType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PommesRenderOptions.PromptType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PommesRenderOptions.PromptType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t PommesRenderOptions.isImmersiveExperience.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isImmersiveExperience);
}

uint64_t PommesRenderOptions.isSquawkResponse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isSquawkResponse);
}

uint64_t PommesRenderOptions.isPhoneCallActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isPhoneCallActive);
}

uint64_t PommesRenderOptions.switchProfile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(v1 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_switchProfile, a1);
}

uint64_t PommesRenderOptions.preserveResultSpaceIfPossible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_preserveResultSpaceIfPossible);
}

uint64_t PommesRenderOptions.promptTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesRenderOptions.Builder.isImmersiveExperience.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PommesRenderOptions.Builder.isImmersiveExperience.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PommesRenderOptions.Builder.isImmersiveExperience.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesRenderOptions.Builder.isSquawkResponse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t PommesRenderOptions.Builder.isSquawkResponse.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*PommesRenderOptions.Builder.isSquawkResponse.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesRenderOptions.Builder.isPhoneCallActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t PommesRenderOptions.Builder.isPhoneCallActive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*PommesRenderOptions.Builder.isPhoneCallActive.modify())()
{
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesRenderOptions.Builder.switchProfile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PommesRenderOptions.Builder(0) + 28);
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(v3, a1);
}

uint64_t PommesRenderOptions.Builder.switchProfile.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PommesRenderOptions.Builder(0) + 28);
  return outlined assign with take of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(a1, v3);
}

uint64_t (*PommesRenderOptions.Builder.switchProfile.modify())()
{
  type metadata accessor for PommesRenderOptions.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesRenderOptions.Builder.preserveResultSpaceIfPossible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesRenderOptions.Builder(0) + 32));
}

uint64_t PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesRenderOptions.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*PommesRenderOptions.Builder.preserveResultSpaceIfPossible.modify())()
{
  type metadata accessor for PommesRenderOptions.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesRenderOptions.Builder.promptTypes.getter()
{
  type metadata accessor for PommesRenderOptions.Builder(0);
  return swift_bridgeObjectRetain();
}

uint64_t PommesRenderOptions.Builder.promptTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PommesRenderOptions.Builder(0) + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesRenderOptions.Builder.promptTypes.modify())()
{
  type metadata accessor for PommesRenderOptions.Builder(0);
  return AudioExperience.Builder.serverAudioResults.modify;
}

uint64_t PommesRenderOptions.Builder.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  v2 = (int *)type metadata accessor for PommesRenderOptions.Builder(0);
  v3 = a1 + v2[7];
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[8]) = 0;
  *(_QWORD *)(a1 + v2[9]) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t default argument 0 of PommesRenderOptions.Builder.init(isImmersiveExperience:isSquawkResponse:isPhoneCallActive:switchProfile:preserveResultSpaceIfPossible:promptTypes:)()
{
  return 0;
}

uint64_t default argument 1 of PommesRenderOptions.Builder.init(isImmersiveExperience:isSquawkResponse:isPhoneCallActive:switchProfile:preserveResultSpaceIfPossible:promptTypes:)()
{
  return 0;
}

uint64_t default argument 2 of PommesRenderOptions.Builder.init(isImmersiveExperience:isSquawkResponse:isPhoneCallActive:switchProfile:preserveResultSpaceIfPossible:promptTypes:)()
{
  return 0;
}

uint64_t default argument 4 of PommesRenderOptions.Builder.init(isImmersiveExperience:isSquawkResponse:isPhoneCallActive:switchProfile:preserveResultSpaceIfPossible:promptTypes:)()
{
  return 0;
}

uint64_t default argument 5 of PommesRenderOptions.Builder.init(isImmersiveExperience:isSquawkResponse:isPhoneCallActive:switchProfile:preserveResultSpaceIfPossible:promptTypes:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t PommesRenderOptions.Builder.init(isImmersiveExperience:isSquawkResponse:isPhoneCallActive:switchProfile:preserveResultSpaceIfPossible:promptTypes:)@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  int *v11;
  uint64_t result;

  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  v11 = (int *)type metadata accessor for PommesRenderOptions.Builder(0);
  result = outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a4, (uint64_t)&a7[v11[7]], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  a7[v11[8]] = a5;
  *(_QWORD *)&a7[v11[9]] = a6;
  return result;
}

uint64_t PommesRenderOptions.__allocating_init(isImmersiveExperience:)(char a1)
{
  uint64_t v1;
  _BYTE v3[32];

  v3[16] = a1;
  return (*(uint64_t (**)(_BYTE *(*)(_BYTE *), _BYTE *))(v1 + 128))(partial apply for closure #1 in PommesRenderOptions.init(isImmersiveExperience:), v3);
}

uint64_t PommesRenderOptions.__allocating_init(isImmersiveExperience:isSquawkResponse:)(char a1, char a2)
{
  uint64_t v2;
  _BYTE v4[32];

  v4[16] = a1;
  v4[17] = a2;
  return (*(uint64_t (**)(_BYTE *(*)(_BYTE *), _BYTE *))(v2 + 128))(partial apply for closure #1 in PommesRenderOptions.init(isImmersiveExperience:isSquawkResponse:), v4);
}

uint64_t PommesRenderOptions.init()()
{
  uint64_t ObjectType;
  uint64_t v1;

  ObjectType = swift_getObjectType();
  v1 = (*(uint64_t (**)(uint64_t (*)(), _QWORD))(ObjectType + 128))(AudioExperience.Builder.serverAudioResults.modify, 0);
  swift_deallocPartialClassInstance();
  return v1;
}

id PommesRenderOptions.__allocating_init(_:)(void (*a1)(char *))
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PommesRenderOptions.init(_:)(a1);
}

id PommesRenderOptions.init(_:)(void (*a1)(char *))
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  objc_class *v13;
  objc_super v15;

  v3 = type metadata accessor for PommesRenderOptions.Builder(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)v6 = 0;
  v6[2] = 0;
  v7 = (uint64_t)&v6[*(int *)(v4 + 28)];
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = *(int *)(v3 + 32);
  v6[v9] = 0;
  v10 = *(int *)(v3 + 36);
  *(_QWORD *)&v6[v10] = MEMORY[0x24BEE4AF8];
  v11 = v1;
  a1(v6);
  v11[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isImmersiveExperience] = *v6;
  v11[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isSquawkResponse] = v6[1];
  v11[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isPhoneCallActive] = v6[2];
  outlined init with copy of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(v7, (uint64_t)&v11[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_switchProfile]);
  v11[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_preserveResultSpaceIfPossible] = v6[v9];
  v12 = *(_QWORD *)&v6[v10];
  swift_bridgeObjectRetain();
  outlined destroy of PommesRenderOptions.Builder((uint64_t)v6);
  *(_QWORD *)&v11[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_promptTypes] = v12;

  v13 = (objc_class *)type metadata accessor for PommesRenderOptions(0);
  v15.receiver = v11;
  v15.super_class = v13;
  return objc_msgSendSuper2(&v15, sel_init);
}

id PommesRenderOptions.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized PommesRenderOptions.init(coder:)(a1);

  return v4;
}

id PommesRenderOptions.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized PommesRenderOptions.init(coder:)(a1);

  return v2;
}

Swift::Void __swiftcall PommesRenderOptions.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Class isa;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Class v29;
  void *v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isImmersiveExperience);
  v8 = (void *)MEMORY[0x24955A5F0](0x76697372656D6D69, 0xE900000000000065);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v7, v8);

  v9 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isSquawkResponse);
  v10 = (void *)MEMORY[0x24955A5F0](0x6B7761757173, 0xE600000000000000);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v9, v10);

  v11 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isPhoneCallActive);
  v12 = (void *)MEMORY[0x24955A5F0](0x6C6143656E6F6870, 0xEF6576697463416CLL);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v11, v12);

  outlined init with copy of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_switchProfile, (uint64_t)v6);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v6, 1, v13) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  }
  else
  {
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams and conformance Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams, (uint64_t (*)(uint64_t))MEMORY[0x24BE71248], MEMORY[0x24BE71240]);
    v15 = Message.serializedData(partial:)();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v19 = (void *)MEMORY[0x24955A5F0](0x7250686374697773, 0xED0000656C69666FLL);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v19);

    outlined consume of Data._Representation(v15, v17);
  }
  v20 = *(unsigned __int8 *)(v2
                           + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_preserveResultSpaceIfPossible);
  v21 = (void *)MEMORY[0x24955A5F0](0xD00000000000001DLL, 0x8000000246453C20);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v20, v21);

  v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_promptTypes);
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v32 = with.super.isa;
    v33 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v24 = 0;
    do
    {
      v25 = 0xD00000000000001ALL;
      if (*(_BYTE *)(v22 + v24 + 32) == 1)
      {
        v25 = 0xD000000000000013;
        v26 = 0x8000000246452CA0;
      }
      else
      {
        v26 = 0x8000000246452CC0;
      }
      if (*(_BYTE *)(v22 + v24 + 32))
        v27 = v25;
      else
        v27 = 0x656E696665646E75;
      if (*(_BYTE *)(v22 + v24 + 32))
        v28 = v26;
      else
        v28 = 0xE900000000000064;
      ++v24;
      MEMORY[0x24955A5F0](v27, v28);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v23 != v24);
    swift_bridgeObjectRelease();
    with.super.isa = v32;
  }
  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v30 = (void *)MEMORY[0x24955A5F0](0x795474706D6F7270, 0xEB00000000736570);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v29, v30);

}

id PommesRenderOptions.__deallocating_deinit()
{
  return Experience.__deallocating_deinit(type metadata accessor for PommesRenderOptions);
}

id Experience.__deallocating_deinit(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItem>, (uint64_t (*)(_QWORD))MEMORY[0x24BE70490]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WarmupComponent>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesRenderOptions.PromptType>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PommesRenderOptions.Builder(uint64_t a1)
{
  return type metadata accessor for AudioExperience.Builder(a1, (uint64_t *)&type metadata singleton initialization cache for PommesRenderOptions.Builder);
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_BYTE *partial apply for closure #1 in PommesRenderOptions.init(isImmersiveExperience:)(_BYTE *result)
{
  uint64_t v1;

  *result = *(_BYTE *)(v1 + 16);
  return result;
}

_BYTE *partial apply for closure #1 in PommesRenderOptions.init(isImmersiveExperience:isSquawkResponse:)(_BYTE *result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 17);
  *result = *(_BYTE *)(v1 + 16);
  result[1] = v2;
  return result;
}

uint64_t outlined destroy of PommesRenderOptions.Builder(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PommesRenderOptions.Builder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id specialized PommesRenderOptions.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  char *v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id result;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  objc_class *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  objc_super v43;
  _OWORD v44[2];

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1;
  v8 = (void *)MEMORY[0x24955A5F0](0x76697372656D6D69, 0xE900000000000065);
  v9 = objc_msgSend(a1, sel_decodeBoolForKey_, v8);

  v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isImmersiveExperience] = v9;
  v10 = (void *)MEMORY[0x24955A5F0](0x6B7761757173, 0xE600000000000000);
  v11 = objc_msgSend(a1, sel_decodeBoolForKey_, v10);

  v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isSquawkResponse] = v11;
  v12 = (void *)MEMORY[0x24955A5F0](0x6C6143656E6F6870, 0xEF6576697463416CLL);
  v13 = objc_msgSend(a1, sel_decodeBoolForKey_, v12);

  v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_isPhoneCallActive] = v13;
  v14 = (void *)MEMORY[0x24955A5F0](0x7250686374697773, 0xED0000656C69666FLL);
  v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v44, 0, sizeof(v44));
  }
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?((uint64_t)v44, (uint64_t)&v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v41 + 1))
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)&v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    v18 = &v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_switchProfile];
    v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    goto LABEL_9;
  }
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BE71248];
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams and conformance Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams, v17, MEMORY[0x24BE71240]);
  Message.init(serializedData:extensions:partial:options:)();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 0, 1, v16);
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?((uint64_t)v6, (uint64_t)&v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_switchProfile], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
LABEL_9:
  v20 = (void *)MEMORY[0x24955A5F0](0xD00000000000001DLL, 0x8000000246453C20);
  v21 = objc_msgSend(a1, sel_decodeBoolForKey_, v20);

  v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_preserveResultSpaceIfPossible] = v21;
  type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  v22 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v22
    || (v23 = (void *)v22,
        *(_QWORD *)&v40 = 0,
        type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
        v23,
        (v24 = v40) == 0))
  {
    v28 = (char *)MEMORY[0x24BEE4AF8];
LABEL_29:
    *(_QWORD *)&v7[OBJC_IVAR____TtC21SiriInformationSearch19PommesRenderOptions_promptTypes] = v28;

    v38 = (objc_class *)type metadata accessor for PommesRenderOptions(0);
    v43.receiver = v7;
    v43.super_class = v38;
    return objc_msgSendSuper2(&v43, sel_init);
  }
  if (!((unint64_t)v40 >> 62))
  {
    v25 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_13;
LABEL_27:
    v28 = (char *)MEMORY[0x24BEE4AF8];
LABEL_28:
    swift_bridgeObjectRelease_n();
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  result = (id)_CocoaArrayWrapper.endIndex.getter();
  v25 = (uint64_t)result;
  if (!result)
    goto LABEL_27;
LABEL_13:
  if (v25 >= 1)
  {
    v27 = 0;
    v28 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v24 & 0xC000000000000001) != 0)
        v29 = (id)MEMORY[0x24955A830](v27, v24);
      else
        v29 = *(id *)(v24 + 8 * v27 + 32);
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v33 = v32;
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      v35 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesRenderOptions.init(coder:), v34);

      swift_bridgeObjectRelease();
      if (v35 <= 2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
        v37 = *((_QWORD *)v28 + 2);
        v36 = *((_QWORD *)v28 + 3);
        if (v37 >= v36 >> 1)
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v28);
        *((_QWORD *)v28 + 2) = v37 + 1;
        v28[v37 + 32] = v35;
      }
      ++v27;
    }
    while (v25 != v27);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType;
  if (!lazy protocol witness table cache variable for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesRenderOptions.PromptType, &type metadata for PommesRenderOptions.PromptType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType);
  }
  return result;
}

uint64_t sub_2463FDC38@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

void sub_2463FDC7C(_QWORD **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA0))();
}

uint64_t sub_2463FDCBC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_2463FDD10@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_2463FDD54@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_2463FDD94(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x100);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for Experience()
{
  return type metadata accessor for Experience(0);
}

uint64_t type metadata completion function for Experience()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Experience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static Experience.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of Experience.pluginIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of Experience.queryConfidence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of Experience.renderOptions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of Experience.catIds.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of Experience.catCategories.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of Experience.renderedTexts.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of Experience.redactedRenderedTexts.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of Experience.listenAfterSpeaking.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of Experience.associatedEntities.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of Experience.associatedEntities.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of Experience.associatedEntities.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of Experience.__allocating_init(pluginId:queryConfidence:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of Experience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of Experience.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of Experience.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t ObjC metadata update function for PommesRenderOptions()
{
  return type metadata accessor for PommesRenderOptions(0);
}

void type metadata completion function for PommesRenderOptions()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for PommesRenderOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesRenderOptions.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static PommesRenderOptions.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of PommesRenderOptions.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of PommesRenderOptions.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  }
}

uint64_t storeEnumTagSinglePayload for PommesRenderOptions.PromptType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2463FE1A0 + 4 * byte_2464515CE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2463FE1D4 + 4 * byte_2464515C9[v4]))();
}

uint64_t sub_2463FE1D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463FE1DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2463FE1E4);
  return result;
}

uint64_t sub_2463FE1F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2463FE1F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2463FE1FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2463FE204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PommesRenderOptions.PromptType()
{
  return &type metadata for PommesRenderOptions.PromptType;
}

_QWORD *initializeBufferWithCopyOfBuffer for PommesRenderOptions.Builder(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v7 = a3[7];
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PommesRenderOptions.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PommesRenderOptions.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for PommesRenderOptions.Builder(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a3[7];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PommesRenderOptions.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

_BYTE *assignWithTake for PommesRenderOptions.Builder(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a3[7];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesRenderOptions.Builder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2463FE824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesRenderOptions.Builder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2463FE8B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

void type metadata completion function for PommesRenderOptions.Builder()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t GeoExperience.geoClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch13GeoExperience_geoClientComponent;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GeoExperience.__allocating_init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  v18 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, id, double))(v5 + 336))(a1, v22, v17, v13, v18, a5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
  return v19;
}

id GeoExperience.__allocating_init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(a1, a2, a3, a4, a5, a6);
}

id GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  objc_class *v23;
  id v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;

  v32 = a5;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v6[OBJC_IVAR____TtC21SiriInformationSearch13GeoExperience_geoClientComponent];
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v31 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v17, a3, v18);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20 = v27;
  v19(v16, (uint64_t)v27, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BE6FC50], v9);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v21 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v22 = v29;
  *(_QWORD *)v21 = v28;
  *((_QWORD *)v21 + 1) = v22;
  *(double *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v19(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v16, v13);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v32;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v12, v9);
  v23 = (objc_class *)type metadata accessor for Experience(0);
  v33.receiver = v6;
  v33.super_class = v23;
  v24 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v16, v13);
  v25(v20, v13);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v18);
  return v24;
}

void *GeoExperience.catIds.getter()
{
  return &outlined read-only object #0 of GeoExperience.catIds.getter;
}

id GeoExperience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return GeoExperience.init(coder:)(a1);
}

id GeoExperience.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSData();
  v8 = v1;
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v9)
  {
    v10 = (void *)v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_GeoClientComponent and conformance Apple_Parsec_Siri_V2alpha_GeoClientComponent();
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC21SiriInformationSearch13GeoExperience_geoClientComponent, v7, v4);

    v15 = Experience.init(coder:)(a1);
    v16 = v15;

    if (v15)
  }
  else
  {

    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2463D2000, v12, v13, "GeoExperience cannot be decoded", v14, 2u);
      MEMORY[0x24955AE30](v14, -1, -1);
    }

    type metadata accessor for GeoExperience();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v15;
}

Swift::Void __swiftcall GeoExperience.encode(with:)(NSCoder with)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Class isa;
  void *v6;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_GeoClientComponent and conformance Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v2, v4);
  v6 = (void *)MEMORY[0x24955A5F0](0xD000000000000012, 0x8000000246453DD0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  Experience.encode(with:)(with);
}

void GeoExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GeoExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t GeoExperience.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch13GeoExperience_geoClientComponent;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id GeoExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GeoExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GeoExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GeoExperience;
  if (!type metadata singleton initialization cache for GeoExperience)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_GeoClientComponent and conformance Apple_Parsec_Siri_V2alpha_GeoClientComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_GeoClientComponent and conformance Apple_Parsec_Siri_V2alpha_GeoClientComponent;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_GeoClientComponent and conformance Apple_Parsec_Siri_V2alpha_GeoClientComponent)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BE70B58], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_GeoClientComponent and conformance Apple_Parsec_Siri_V2alpha_GeoClientComponent);
  }
  return result;
}

uint64_t ObjC metadata update function for GeoExperience()
{
  return type metadata accessor for GeoExperience();
}

uint64_t type metadata completion function for GeoExperience()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for GeoExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GeoExperience.__allocating_init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t GenericExperience.components.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for GenericExperience.serverSuggestions : GenericExperience(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0x168))(v6);
}

uint64_t GenericExperience.serverSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return GenericExperience.serverSuggestions.getter(&OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_serverSuggestions, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?, a1);
}

uint64_t GenericExperience.serverSuggestions.setter(uint64_t a1)
{
  return GenericExperience.serverSuggestions.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_serverSuggestions, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
}

uint64_t (*GenericExperience.serverSuggestions.modify())()
{
  swift_beginAccess();
  return AudioExperience.isGlideEligible.modify;
}

uint64_t key path setter for GenericExperience.sageExperience : GenericExperience(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0x180))(v6);
}

uint64_t GenericExperience.sageExperience.getter@<X0>(uint64_t a1@<X8>)
{
  return GenericExperience.serverSuggestions.getter(&OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_sageExperience, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?, a1);
}

uint64_t GenericExperience.serverSuggestions.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v6, a3, a2);
}

uint64_t GenericExperience.sageExperience.setter(uint64_t a1)
{
  return GenericExperience.serverSuggestions.setter(a1, &OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_sageExperience, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
}

uint64_t GenericExperience.serverSuggestions.setter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*GenericExperience.sageExperience.modify())()
{
  swift_beginAccess();
  return AudioExperience.internalSignalsFromSiriAudio.modify;
}

uint64_t GenericExperience.__allocating_init(components:queryConfidenceScore:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v14;

  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE6FC50], v5);
  v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  return (*(uint64_t (**)(uint64_t, char *, char *, id, double))(v2 + 408))(a1, v11, v8, v12, a2);
}

uint64_t GenericExperience.__allocating_init(components:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BE6FC50], v7);
  v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v16 = (*(uint64_t (**)(uint64_t, char *, char *, id, double))(v3 + 408))(a1, v14, v10, v15, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, v11);
  return v16;
}

id GenericExperience.__allocating_init(components:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return GenericExperience.init(components:queryConfidenceScore:userDialogAct:renderOptions:)(a1, a2, a3, a4);
}

id GenericExperience.init(components:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  objc_class *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  objc_super v28;

  v27 = a3;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v4[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_serverSuggestions];
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = &v4[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_sageExperience];
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components] = a1;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v20(v15, (uint64_t)a2, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE6FC50], v8);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v21 = &v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v21 = 0x73757361676570;
  *((_QWORD *)v21 + 1) = 0xE700000000000000;
  *(double *)&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a4;
  v20(&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v15, v12);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v27;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v4[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v11, v8);
  v22 = (objc_class *)type metadata accessor for Experience(0);
  v28.receiver = v4;
  v28.super_class = v22;
  v23 = objc_msgSendSuper2(&v28, sel_init);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v24(v15, v12);
  v24(a2, v12);
  return v23;
}

id GenericExperience.__allocating_init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)(uint64_t a1, char *a2, char *a3, uint64_t a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)(a1, a2, a3, a4, a5);
}

id GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)(uint64_t a1, char *a2, char *a3, uint64_t a4, double a5)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  char *v24;
  objc_class *v25;
  id v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  objc_super v34;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v5[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_serverSuggestions];
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = &v5[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_sageExperience];
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components] = a1;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21(v16, (uint64_t)a2, v13);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v23 = v32;
  v22(v12, (uint64_t)v32, v9);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v24 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v24 = 0x73757361676570;
  *((_QWORD *)v24 + 1) = 0xE700000000000000;
  *(double *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a5;
  v21(&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v16, v13);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v33;
  v22(&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], (uint64_t)v12, v9);
  v25 = (objc_class *)type metadata accessor for Experience(0);
  v34.receiver = v5;
  v34.super_class = v25;
  v26 = objc_msgSendSuper2(&v34, sel_init);
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v12, v9);
  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v16, v13);
  v27(v23, v9);
  v28(v31, v13);
  return v26;
}

_QWORD *GenericExperience.catIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v8 = *(_QWORD *)(v2 + 72);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v19 = v8;
  v16[1] = v5;
  swift_bridgeObjectRetain_n();
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = v2;
  do
  {
    v18(v4, v7, v1);
    closure #1 in GenericExperience.catIds.getter(&v20);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v11 = v21;
    if (v21)
    {
      v12 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v14 = v9[2];
      v13 = v9[3];
      if (v14 >= v13 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
      v9[2] = v14 + 1;
      v10 = &v9[2 * v14];
      v10[4] = v12;
      v10[5] = v11;
      v2 = v17;
    }
    v7 += v19;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t closure #1 in GenericExperience.catIds.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(char *, unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;

  v111 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x24BDAC7A8](v1);
  v103 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v97 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v110 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v109 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v106 = *(_QWORD *)(v6 - 8);
  v107 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v105 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent();
  v100 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v101 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent();
  v9 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v11 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v96 - v20;
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
  v25 = v111;
  if (v24 == 1)
    goto LABEL_2;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v19, v22);
  if (v26 == *MEMORY[0x24BE70C58])
  {
    v27 = v21;
    (*(void (**)(char *, uint64_t))(v23 + 96))(v19, v22);
    v28 = v12;
    v29 = v15;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v12);
    v30 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
    v32 = v31;
    swift_bridgeObjectRelease();
    v33 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0)
      v33 = v30 & 0xFFFFFFFFFFFFLL;
    if (v33)
    {
      v34 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
      v36 = v35;
    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v64 = v111;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v29, v28);
    *v64 = v34;
    v64[1] = v36;
    v21 = v27;
    return outlined destroy of ClientExperienceSignals?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  }
  if (v26 == *MEMORY[0x24BE70C60])
  {
    (*(void (**)(char *, uint64_t))(v23 + 96))(v19, v22);
    v37 = v9;
    v38 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 32);
    v39 = v108;
    v40 = v38(v11, v19, v108);
    v41 = MEMORY[0x24955A1E8](v40);
    v43 = v42;
    v44 = swift_bridgeObjectRelease();
    v45 = HIBYTE(v43) & 0xF;
    if ((v43 & 0x2000000000000000) == 0)
      v45 = v41 & 0xFFFFFFFFFFFFLL;
    if (v45)
    {
      v46 = MEMORY[0x24955A1E8](v44);
      v48 = v47;
    }
    else
    {
      v46 = 0;
      v48 = 0;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v39);
    v78 = v111;
    *v111 = v46;
    v78[1] = v48;
    return outlined destroy of ClientExperienceSignals?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  }
  if (v26 == *MEMORY[0x24BE70C40])
  {
    v102 = (uint64_t)v21;
    (*(void (**)(char *, uint64_t))(v23 + 96))(v19, v22);
    v49 = v105;
    v50 = v106;
    v51 = v107;
    (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v19, v107);
    v52 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    v53 = *(_QWORD *)(v52 + 16);
    if (v53)
    {
      v54 = v109;
      v55 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
      v101 = (char *)v52;
      v56 = v52 + v55;
      LODWORD(v108) = *MEMORY[0x24BE6FBC0];
      v57 = *(_QWORD *)(v110 + 72);
      v58 = *(void (**)(char *, unint64_t, uint64_t))(v110 + 16);
      v60 = (uint64_t)v103;
      v59 = v104;
      v58(v109, v52 + v55, v104);
      while (1)
      {
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
        v61 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
        v62 = *(_QWORD *)(v61 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61) == 1)
        {
          (*(void (**)(char *, uint64_t))(v110 + 8))(v54, v59);
          outlined destroy of ClientExperienceSignals?(v60, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
        }
        else
        {
          v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 88))(v60, v61);
          if (v63 == (_DWORD)v108)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v62 + 96))(v60, v61);
            v81 = v97;
            v80 = v98;
            v82 = v99;
            v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 32))(v97, v60, v99);
            v84 = MEMORY[0x24955A20C](v83);
            v86 = v85;
            v87 = swift_bridgeObjectRelease();
            v88 = HIBYTE(v86) & 0xF;
            if ((v86 & 0x2000000000000000) == 0)
              v88 = v84 & 0xFFFFFFFFFFFFLL;
            if (v88)
            {
              v89 = MEMORY[0x24955A20C](v87);
              v91 = v90;
            }
            else
            {
              v89 = 0;
              v91 = 0;
            }
            v94 = v111;
            v21 = (char *)v102;
            v95 = v110;
            (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
            (*(void (**)(char *, uint64_t))(v95 + 8))(v109, v104);
            (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
            *v94 = v89;
            v94[1] = v91;
            return outlined destroy of ClientExperienceSignals?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
          }
          v54 = v109;
          (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v59);
          (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
        }
        v56 += v57;
        if (!--v53)
        {
          swift_bridgeObjectRelease();
          v50 = v106;
          v51 = v107;
          v49 = v105;
          goto LABEL_34;
        }
        v58(v54, v56, v59);
      }
    }
    swift_bridgeObjectRelease();
LABEL_34:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
    v79 = v111;
    *v111 = 0;
    v79[1] = 0;
    v21 = (char *)v102;
  }
  else
  {
    if (v26 != *MEMORY[0x24BE70C48])
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
      v25 = v111;
LABEL_2:
      *v25 = 0;
      v25[1] = 0;
      return outlined destroy of ClientExperienceSignals?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
    }
    v65 = v21;
    (*(void (**)(char *, uint64_t))(v23 + 96))(v19, v22);
    v66 = v100;
    v67 = v101;
    v68 = v102;
    v69 = (*(uint64_t (**)(void))(v100 + 32))();
    v70 = MEMORY[0x24955A194](v69);
    v72 = v71;
    v73 = swift_bridgeObjectRelease();
    v74 = HIBYTE(v72) & 0xF;
    if ((v72 & 0x2000000000000000) == 0)
      v74 = v70 & 0xFFFFFFFFFFFFLL;
    if (v74)
    {
      v75 = MEMORY[0x24955A194](v73);
      v77 = v76;
    }
    else
    {
      v75 = 0;
      v77 = 0;
    }
    v92 = v111;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
    *v92 = v75;
    v92[1] = v77;
    v21 = v65;
  }
  return outlined destroy of ClientExperienceSignals?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
}

_QWORD *GenericExperience.catCategories.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD, _QWORD, _QWORD);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v38 = v7;
    v39 = v5;
    v14 = v12 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v15 = *(_QWORD *)(v9 + 72);
    v40 = v4;
    v16 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 16);
    v43 = *MEMORY[0x24BE70C58];
    v35 = v12;
    swift_bridgeObjectRetain_n();
    v44 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v42 = v9;
    v36 = v15;
    v37 = v16;
    while (1)
    {
      v16(v11, v14, v8);
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v3, 1, v17) == 1)
      {
        outlined destroy of ClientExperienceSignals?((uint64_t)v3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else
      {
        v19 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v3, v17);
        if (v19 == v43)
        {
          (*(void (**)(char *, uint64_t))(v18 + 96))(v3, v17);
          v20 = v38;
          v21 = v39;
          v22 = v40;
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v3, v40);
          v23 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter();
          v25 = v24;
          swift_bridgeObjectRelease();
          v26 = HIBYTE(v25) & 0xF;
          if ((v25 & 0x2000000000000000) == 0)
            v26 = v23 & 0xFFFFFFFFFFFFLL;
          if (v26)
          {
            v41 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter();
            v28 = v27;
            (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
            (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v8);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v15 = v36;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v16 = v37;
              v30 = v44;
            }
            else
            {
              v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
              v16 = v37;
            }
            v32 = v30[2];
            v31 = v30[3];
            if (v32 >= v31 >> 1)
              v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
            v30[2] = v32 + 1;
            v44 = v30;
            v33 = &v30[2 * v32];
            v9 = v42;
            v33[4] = v41;
            v33[5] = v28;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
            v9 = v42;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v8);
            v15 = v36;
            v16 = v37;
          }
          goto LABEL_5;
        }
        (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v17);
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
      v14 += v15;
      if (!--v13)
      {
        swift_bridgeObjectRelease_n();
        return v44;
      }
    }
  }
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

_QWORD *GenericExperience.renderedTexts.getter()
{
  return GenericExperience.renderedTexts.getter(MEMORY[0x24BE710B8], MEMORY[0x24BE710B0]);
}

_QWORD *GenericExperience.redactedRenderedTexts.getter()
{
  return GenericExperience.renderedTexts.getter(MEMORY[0x24BE71098], MEMORY[0x24BE71090]);
}

_QWORD *GenericExperience.renderedTexts.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t (*v51)(uint64_t);
  int v52;
  _QWORD *v53;

  v50 = a1;
  v51 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = v12 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 16);
    v52 = *MEMORY[0x24BE70C58];
    v42 = v12;
    swift_bridgeObjectRetain_n();
    v53 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v45 = v9;
    v46 = v8;
    v43 = v16;
    v44 = v15;
    while (1)
    {
      v16(v11, v14, v8);
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v17) == 1)
      {
        outlined destroy of ClientExperienceSignals?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else
      {
        v19 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v5, v17);
        if (v19 == v52)
        {
          (*(void (**)(char *, uint64_t))(v18 + 96))(v5, v17);
          v20 = v47;
          v21 = v48;
          v22 = v49;
          v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(v47, v5, v49);
          v24 = v50;
          v25 = v50(v23);
          v27 = v26;
          v28 = swift_bridgeObjectRelease();
          v29 = HIBYTE(v27) & 0xF;
          if ((v27 & 0x2000000000000000) == 0)
            v29 = v25 & 0xFFFFFFFFFFFFLL;
          v30 = v29 == 0;
          v31 = v51;
          if (!v30)
            v31 = v24;
          v32 = v31(v28);
          v34 = v33;
          v35 = *(void (**)(char *, uint64_t))(v21 + 8);
          v36 = v20;
          v9 = v45;
          v8 = v46;
          v35(v36, v22);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v37 = v53;
          else
            v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
          v39 = v37[2];
          v38 = v37[3];
          if (v39 >= v38 >> 1)
            v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
          v37[2] = v39 + 1;
          v53 = v37;
          v40 = &v37[2 * v39];
          v40[4] = v32;
          v40[5] = v34;
          v16 = v43;
          v15 = v44;
          goto LABEL_5;
        }
        (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v17);
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
      v14 += v15;
      if (!--v13)
      {
        swift_bridgeObjectRelease_n();
        return v53;
      }
    }
  }
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t GenericExperience.listenAfterSpeaking.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v13;

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v8 = *(_QWORD *)(v2 + 72);
    v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain_n();
    v10 = v6 - 1;
    do
    {
      v9(v4, v7, v1);
      LODWORD(v6) = closure #1 in GenericExperience.listenAfterSpeaking.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v11 = v10-- == 0;
      v7 += v8;
    }
    while (((v6 | v11) & 1) == 0);
    swift_bridgeObjectRelease_n();
  }
  return v6 & 1;
}

uint64_t closure #1 in GenericExperience.listenAfterSpeaking.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (**v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (**v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  v61 = *(_QWORD *)(v0 - 8);
  v62 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v58 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v63 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v59 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v57 = *(void (***)(char *, char *, uint64_t))(v54 - 8);
  v3 = MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)&v48 - v5;
  v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent();
  v6 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v48 - v17;
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    goto LABEL_2;
  v48 = v8;
  v49 = v6;
  v50 = v12;
  v51 = v10;
  v52 = v9;
  v23 = v56;
  v22 = v57;
  v24 = v55;
  v25 = v58;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v16, v19);
  if (v26 == *MEMORY[0x24BE70C58])
  {
    (*(void (**)(char *, uint64_t))(v20 + 96))(v16, v19);
    v28 = v50;
    v27 = v51;
    v29 = v52;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v16, v52);
    v30 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter();
    goto LABEL_11;
  }
  if (v26 != *MEMORY[0x24BE70C40])
  {
    if (v26 != *MEMORY[0x24BE70C48])
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
LABEL_2:
      v21 = 0;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v20 + 96))(v16, v19);
    v28 = v48;
    v27 = v49;
    v29 = v53;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v16, v53);
    v30 = Apple_Parsec_Siri_V2alpha_SayItComponent.hasListenAfterSpeaking_p.getter();
LABEL_11:
    v21 = v30;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t))(v20 + 96))(v16, v19);
  v31 = v54;
  v22[4](v24, v16, v54);
  v32 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.hasRenderedDialog.getter();
  v33 = v23;
  v22[2](v23, v24, v31);
  if ((v32 & 1) != 0)
  {
    v34 = v50;
    Apple_Parsec_Siri_V2alpha_DelayedActionComponent.renderedDialog.getter();
    v35 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
    v36 = v22[1];
    ((void (*)(char *, uint64_t))v36)(v33, v31);
    if ((v35 & 1) != 0)
    {
      ((void (*)(char *, uint64_t))v36)(v24, v31);
      v21 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    v36 = v22[1];
    ((void (*)(char *, uint64_t))v36)(v33, v31);
  }
  v38 = v63;
  v39 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
  v40 = *(_QWORD *)(v39 + 16);
  if (v40)
  {
    v57 = (void (**)(char *, char *, uint64_t))v36;
    v58 = v18;
    v41 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    v56 = (char *)v39;
    v42 = v39 + v41;
    v43 = *(_QWORD *)(v38 + 72);
    v44 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
    v45 = v59;
    v46 = v60;
    while (1)
    {
      v44(v45, v42, v46);
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.sayIt.getter();
      v47 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.getter();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v25, v62);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v46);
      if ((v47 & 1) != 0)
        break;
      v42 += v43;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        v21 = 0;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    v21 = 1;
LABEL_22:
    v31 = v54;
    v36 = (void (*)(char *, char *, uint64_t))v57;
    v18 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = 0;
  }
  ((void (*)(char *, uint64_t))v36)(v24, v31);
LABEL_12:
  outlined destroy of ClientExperienceSignals?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  return v21 & 1;
}

id GenericExperience.__allocating_init(coder:)(char *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return GenericExperience.init(coder:)(a1);
}

id GenericExperience.init(coder:)(char *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  uint64_t v20;
  unint64_t *v21;
  objc_class *v22;
  objc_class *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  void (*v44)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  NSObject *v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  NSObject *v57;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x24BDAC7A8](v3);
  v48 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BinaryDecodingOptions();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v41 - v8;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v53 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t)&v1[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_serverSuggestions];
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v49 = v12;
  v45 = v13;
  v44 = v14;
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1);
  v15 = &v1[OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_sageExperience];
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_246412940;
  *(_QWORD *)(v17 + 32) = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  v47 = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  *(_QWORD *)(v17 + 40) = v47;
  v18 = v1;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v55 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NSData]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v43 = v18;
      v19 = v57;
      if ((unint64_t)v57 >> 62)
      {
        swift_bridgeObjectRetain();
        v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v20)
          goto LABEL_5;
      }
      else
      {
        v20 = *(_QWORD *)(((unint64_t)v57 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v20)
        {
LABEL_5:
          v42 = a1;
          v57 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
          if ((v20 & 0x8000000000000000) == 0)
          {
            a1 = 0;
            v15 = 0;
            v21 = (unint64_t *)v57;
            v50 = (unint64_t)v19 & 0xC000000000000001;
            v51 = v19;
            while ((char *)v20 != a1)
            {
              if (v50)
                v22 = (objc_class *)MEMORY[0x24955A830](a1, v19);
              else
                v22 = v19[(_QWORD)a1 + 4].isa;
              v23 = v22;
              static Data._unconditionallyBridgeFromObjectiveC(_:)();
              v56 = 0;
              v54 = 0u;
              v55 = 0u;
              BinaryDecodingOptions.init()();
              lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ExperienceComponent and conformance Apple_Parsec_Siri_V2alpha_ExperienceComponent, (uint64_t (*)(uint64_t))MEMORY[0x24BE70C90], MEMORY[0x24BE70C78]);
              Message.init(serializedData:extensions:partial:options:)();

              v57 = v21;
              v25 = v21[2];
              v24 = v21[3];
              v19 = v51;
              if (v25 >= v24 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
                v21 = (unint64_t *)v57;
              }
              ++a1;
              v21[2] = v25 + 1;
              (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))((unint64_t)v21+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v25, v53, v9);
              if ((char *)v20 == a1)
              {
                swift_bridgeObjectRelease();
                a1 = v42;
                goto LABEL_25;
              }
            }
            __break(1u);
            goto LABEL_22;
          }
          __break(1u);
          swift_once();
          v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
          v34 = Logger.logObject.getter();
          v38 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v34, v38))
          {
            v39 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v39 = 0;
            _os_log_impl(&dword_2463D2000, v34, v38, "GenericExperience failed to extract server suggestions", v39, 2u);
            MEMORY[0x24955AE30](v39, -1, -1);

            v34 = v19;
          }
          else
          {

          }
LABEL_30:

          return Experience.init(coder:)(a1);
        }
      }
      swift_bridgeObjectRelease();
      v21 = (unint64_t *)MEMORY[0x24BEE4AF8];
LABEL_25:
      v31 = v43;
      *(Class *)((char *)&v43->isa + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components) = (Class)v21;
      v32 = (uint64_t)v48;
      v33 = NSCoder.decodeObject<A>(of:forKey:)();
      v34 = v31;
      if (v33)
      {
        v35 = (void *)v33;
        static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v56 = 0;
        v54 = 0u;
        v55 = 0u;
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerSuggestion and conformance Apple_Parsec_Siri_V2alpha_ServerSuggestion, (uint64_t (*)(uint64_t))MEMORY[0x24BE70A70], MEMORY[0x24BE70A68]);
        v36 = v45;
        Message.init(serializedData:extensions:partial:options:)();

        v44(v32, 0, 1, v36);
        v40 = v49;
        swift_beginAccess();
        outlined assign with take of Apple_Parsec_Siri_V2alpha_AudioUnderstanding?(v32, v40, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
        swift_endAccess();
        v34 = v31;
      }
      goto LABEL_30;
    }

  }
  else
  {

    outlined destroy of ClientExperienceSignals?((uint64_t)&v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for pommes != -1)
LABEL_22:
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_2463D2000, v27, v28, "GenericExperience failed to extract componentsArray", v29, 2u);
    MEMORY[0x24955AE30](v29, -1, -1);
  }

  outlined destroy of ClientExperienceSignals?(v49, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  outlined destroy of ClientExperienceSignals?((uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  type metadata accessor for GenericExperience();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall GenericExperience.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  Class v23;
  void *v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Class v33;
  char *v34;
  void *v35;
  _QWORD v36[2];
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  Class isa;
  uint64_t v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  _QWORD *v48;

  v2 = v1;
  isa = with.super.isa;
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v39 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_components);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v37 = v1;
    v13 = v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v14 = *(_QWORD *)(v4 + 72);
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v47 = v14;
    v36[1] = v11;
    swift_bridgeObjectRetain_n();
    v48 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v15 = 136315138;
    v43 = v15;
    v42 = MEMORY[0x24BEE4AD8] + 8;
    v44 = v9;
    v45 = v4;
    do
    {
      v46(v6, v13, v3);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ExperienceComponent and conformance Apple_Parsec_Siri_V2alpha_ExperienceComponent, (uint64_t (*)(uint64_t))MEMORY[0x24BE70C90], MEMORY[0x24BE70C78]);
      v16 = Message.serializedData(partial:)();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v19 = v48;
      else
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
      v21 = v19[2];
      v20 = v19[3];
      if (v21 >= v20 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
      v19[2] = v21 + 1;
      v48 = v19;
      v22 = &v19[2 * v21];
      v22[4] = v16;
      v22[5] = v18;
      v4 = v45;
      v13 += v47;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease_n();
    v2 = v37;
  }
  v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24 = (void *)MEMORY[0x24955A5F0](0x6E656E6F706D6F63, 0xEA00000000007374);
  v25 = isa;
  -[objc_class encodeObject:forKey:](isa, sel_encodeObject_forKey_, v23, v24);

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x160))();
  v26 = v38;
  v27 = v40;
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v9, 1, v40);
  v29 = v39;
  if (v28 == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v39, v9, v27);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerSuggestion and conformance Apple_Parsec_Siri_V2alpha_ServerSuggestion, (uint64_t (*)(uint64_t))MEMORY[0x24BE70A70], MEMORY[0x24BE70A68]);
    v30 = Message.serializedData(partial:)();
    v32 = v31;
    v33 = Data._bridgeToObjectiveC()().super.isa;
    v34 = v29;
    v35 = (void *)MEMORY[0x24955A5F0](0xD000000000000011, 0x8000000246453E60);
    -[objc_class encodeObject:forKey:](v25, sel_encodeObject_forKey_, v33, v35);
    outlined consume of Data._Representation(v30, v32);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v27);
  }
  Experience.encode(with:)((NSCoder)v25);
}

void GenericExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GenericExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t GenericExperience.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of ClientExperienceSignals?(v0 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_serverSuggestions, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  return outlined destroy of ClientExperienceSignals?(v0 + OBJC_IVAR____TtC21SiriInformationSearch17GenericExperience_sageExperience, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
}

id GenericExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenericExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GenericExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenericExperience;
  if (!type metadata singleton initialization cache for GenericExperience)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_246402C8C(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x160))();
}

uint64_t sub_246402CC8(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x178))();
}

uint64_t ObjC metadata update function for GenericExperience()
{
  return type metadata accessor for GenericExperience();
}

void type metadata completion function for GenericExperience()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?, (void (*)(uint64_t))MEMORY[0x24BE70A70]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?, (void (*)(uint64_t))MEMORY[0x24BE70918]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for GenericExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GenericExperience.serverSuggestions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of GenericExperience.serverSuggestions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of GenericExperience.serverSuggestions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of GenericExperience.sageExperience.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of GenericExperience.sageExperience.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of GenericExperience.sageExperience.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of GenericExperience.__allocating_init(components:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 400))();
}

uint64_t dispatch thunk of GenericExperience.__allocating_init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 408))();
}

uint64_t KVFieldType.audioType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 > 599)
  {
    if (a1 > 699)
    {
      switch(a1)
      {
        case 700:
          v3 = (unsigned int *)MEMORY[0x24BE70840];
          break;
        case 701:
LABEL_11:
          v3 = (unsigned int *)MEMORY[0x24BE70888];
          break;
        case 702:
          v3 = (unsigned int *)MEMORY[0x24BE70860];
          break;
        default:
LABEL_20:
          v3 = (unsigned int *)MEMORY[0x24BE70898];
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
LABEL_6:
          v3 = (unsigned int *)MEMORY[0x24BE708A0];
          break;
        case 601:
        case 603:
          goto LABEL_11;
        case 602:
LABEL_12:
          v3 = (unsigned int *)MEMORY[0x24BE708A8];
          break;
        default:
          goto LABEL_20;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 202:
      case 206:
      case 226:
        goto LABEL_11;
      case 204:
        v3 = (unsigned int *)MEMORY[0x24BE70870];
        break;
      case 208:
        goto LABEL_12;
      case 210:
        v3 = (unsigned int *)MEMORY[0x24BE70878];
        break;
      case 212:
        v3 = (unsigned int *)MEMORY[0x24BE70880];
        break;
      case 214:
        v3 = (unsigned int *)MEMORY[0x24BE70838];
        break;
      case 216:
        goto LABEL_6;
      case 228:
        v3 = (unsigned int *)MEMORY[0x24BE70868];
        break;
      case 230:
        v3 = (unsigned int *)MEMORY[0x24BE70848];
        break;
      case 232:
        v3 = (unsigned int *)MEMORY[0x24BE70890];
        break;
      default:
        goto LABEL_20;
    }
  }
  v4 = *v3;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t KVItemType.description.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = 0xD000000000000012;
  switch(a1)
  {
    case 0:
      return 0x656E696665646E75;
    case 1:
      v3 = 0x6D6F74737563;
      goto LABEL_17;
    case 2:
      return 0x746361746E6F63;
    case 3:
      return 0x6F666E49707061;
    case 4:
      return 0x69746E45656D6F68;
    case 5:
      v4 = 0x45616964656DLL;
      goto LABEL_12;
    case 6:
      return 0x746174536B6E696CLL;
    case 7:
      return 0x616E79446B6E696CLL;
    case 8:
      return 0x726F68536F747561;
    case 9:
      v4 = 0x456F69646172;
LABEL_12:
      result = v4 & 0xFFFFFFFFFFFFLL | 0x746E000000000000;
      break;
    case 10:
      result = 0x6472616F6279656BLL;
      break;
    case 11:
      result = 0x54564F4F6B6E696CLL;
      break;
    case 12:
      return result;
    case 13:
      result = 0x7469617274726F70;
      break;
    case 14:
      v3 = 0x6C61626F6C67;
LABEL_17:
      result = v3 & 0xFFFFFFFFFFFFLL | 0x6554000000000000;
      break;
    case 16:
      result = 0x74736163646F70;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

unint64_t KVFieldType.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      result = 0xD00000000000001BLL;
      break;
    case 3:
    case 57:
    case 150:
    case 151:
    case 152:
    case 203:
    case 209:
    case 211:
    case 300:
    case 354:
    case 650:
      result = 0xD000000000000013;
      break;
    case 4:
      result = 0xD000000000000019;
      break;
    case 5:
      result = 0xD00000000000001ELL;
      break;
    case 6:
      result = 0xD000000000000019;
      break;
    case 7:
      result = 0xD000000000000012;
      break;
    case 8:
      result = 0xD000000000000023;
      break;
    case 9:
      result = 0xD000000000000022;
      break;
    case 10:
      result = 0xD00000000000001CLL;
      break;
    case 11:
      result = 0xD000000000000020;
      break;
    case 12:
      result = 0xD00000000000001DLL;
      break;
    case 13:
      result = 0xD00000000000001FLL;
      break;
    case 14:
      result = 0xD00000000000001ELL;
      break;
    case 15:
      result = 0xD000000000000023;
      break;
    case 16:
      result = 0xD000000000000019;
      break;
    case 17:
      result = 0xD00000000000001BLL;
      break;
    case 18:
      result = 0xD00000000000001ALL;
      break;
    case 19:
      result = 0xD00000000000001BLL;
      break;
    case 20:
      result = 0xD000000000000017;
      break;
    case 50:
      result = 0xD000000000000011;
      break;
    case 51:
      result = 0xD000000000000012;
      break;
    case 52:
      result = 0xD000000000000012;
      break;
    case 53:
      result = 0xD00000000000001ALL;
      break;
    case 54:
      result = 0xD000000000000010;
      break;
    case 55:
      result = 0xD000000000000012;
      break;
    case 56:
      result = 0xD000000000000012;
      break;
    case 58:
      result = 0xD000000000000014;
      break;
    case 59:
      result = 0xD000000000000015;
      break;
    case 60:
      result = 0xD000000000000012;
      break;
    case 61:
      result = 0xD000000000000015;
      break;
    case 62:
      result = 0xD00000000000001DLL;
      break;
    case 63:
      result = 0xD000000000000010;
      break;
    case 64:
      result = 0xD000000000000018;
      break;
    case 65:
      result = 0xD000000000000016;
      break;
    case 66:
      result = 0xD000000000000010;
      break;
    case 67:
      result = 0xD000000000000019;
      break;
    case 68:
      result = 0xD00000000000001ALL;
      break;
    case 69:
      result = 0xD00000000000001ALL;
      break;
    case 70:
      result = 0xD000000000000020;
      break;
    case 71:
      result = 0xD000000000000014;
      break;
    case 100:
      result = 0xD000000000000010;
      break;
    case 101:
      result = 0x5F6F666E49707061;
      break;
    case 102:
      result = 0xD000000000000016;
      break;
    case 153:
      result = 0xD000000000000016;
      break;
    case 154:
      result = 0xD00000000000001BLL;
      break;
    case 155:
      result = 0xD000000000000014;
      break;
    case 156:
      result = 0xD000000000000016;
      break;
    case 157:
      result = 0xD000000000000018;
      break;
    case 158:
      result = 0xD00000000000001DLL;
      break;
    case 201:
      result = 0xD000000000000019;
      break;
    case 202:
      result = 0xD00000000000001BLL;
      break;
    case 204:
      result = 0xD000000000000015;
      break;
    case 205:
      result = 0xD00000000000001DLL;
      break;
    case 206:
      result = 0xD00000000000001FLL;
      break;
    case 207:
      result = 0xD000000000000017;
      break;
    case 208:
      result = 0xD000000000000019;
      break;
    case 210:
      result = 0xD000000000000015;
      break;
    case 212:
      result = 0xD000000000000015;
      break;
    case 213:
      result = 0xD000000000000018;
      break;
    case 214:
      result = 0xD00000000000001ALL;
      break;
    case 215:
      result = 0xD000000000000016;
      break;
    case 216:
      result = 0xD000000000000018;
      break;
    case 217:
      result = 0xD00000000000001BLL;
      break;
    case 218:
      result = 0xD00000000000001DLL;
      break;
    case 219:
      result = 0xD00000000000001CLL;
      break;
    case 220:
      result = 0xD00000000000001ELL;
      break;
    case 221:
      result = 0xD000000000000015;
      break;
    case 222:
      result = 0xD000000000000017;
      break;
    case 223:
      result = 0xD00000000000001CLL;
      break;
    case 224:
      result = 0xD00000000000001ELL;
      break;
    case 225:
      result = 0xD000000000000018;
      break;
    case 226:
      result = 0xD00000000000001ALL;
      break;
    case 227:
      result = 0xD000000000000012;
      break;
    case 228:
      result = 0xD000000000000014;
      break;
    case 229:
      result = 0xD000000000000017;
      break;
    case 230:
      result = 0xD000000000000019;
      break;
    case 231:
      result = 0xD000000000000014;
      break;
    case 232:
      result = 0xD000000000000016;
      break;
    case 250:
      result = 0xD000000000000020;
      break;
    case 251:
      result = 0xD000000000000025;
      break;
    case 252:
      result = 0xD00000000000001CLL;
      break;
    case 253:
      result = 0xD00000000000001ALL;
      break;
    case 254:
      result = 0xD00000000000001DLL;
      break;
    case 255:
      result = 0xD000000000000026;
      break;
    case 275:
      result = 0xD00000000000001DLL;
      break;
    case 276:
      result = 0xD000000000000026;
      break;
    case 277:
      result = 0xD00000000000001BLL;
      break;
    case 301:
      result = 0xD000000000000019;
      break;
    case 302:
      result = 0xD000000000000023;
      break;
    case 351:
      result = 0xD000000000000010;
      break;
    case 352:
      result = 0xD000000000000014;
      break;
    case 353:
      result = 0xD000000000000015;
      break;
    case 355:
      result = 0xD000000000000016;
      break;
    case 400:
      result = 0xD000000000000019;
      break;
    case 500:
      result = 0xD000000000000012;
      break;
    case 501:
      result = 0xD00000000000001FLL;
      break;
    case 551:
      result = 0xD00000000000001FLL;
      break;
    case 552:
      result = 0xD000000000000026;
      break;
    case 553:
      result = 0xD00000000000001ELL;
      break;
    case 600:
      result = 0xD00000000000001DLL;
      break;
    case 601:
      result = 0xD00000000000001FLL;
      break;
    case 602:
      result = 0xD00000000000001ELL;
      break;
    case 603:
      result = 0xD00000000000001FLL;
      break;
    case 604:
      result = 0xD000000000000019;
      break;
    case 651:
      result = 0xD00000000000001ALL;
      break;
    case 700:
      result = 0x5F74736163646F70;
      break;
    case 701:
      result = 0xD000000000000012;
      break;
    case 702:
      result = 0xD000000000000014;
      break;
    default:
      result = 0x656E696665646E75;
      break;
  }
  return result;
}

uint64_t VocabularyField.label.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label);
}

uint64_t VocabularyField.value.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value);
}

uint64_t VocabularyField.fieldType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType);
}

id VocabularyField.__allocating_init(label:value:fieldType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  v13 = &v11[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  *(_QWORD *)&v11[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType] = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, sel_init);
}

id VocabularyField.init(label:value:fieldType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v7;
  objc_super v9;

  v6 = &v5[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v7 = &v5[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value];
  *(_QWORD *)v7 = a3;
  *((_QWORD *)v7 + 1) = a4;
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType] = a5;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for VocabularyField();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t type metadata accessor for VocabularyField()
{
  return objc_opt_self();
}

id VocabularyField.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized VocabularyField.init(coder:)(a1);

  return v4;
}

id VocabularyField.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized VocabularyField.init(coder:)(a1);

  return v2;
}

Swift::Void __swiftcall VocabularyField.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label + 8))
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label);
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label + 8);
  }
  else
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v5 = (void *)MEMORY[0x24955A5F0](v3, v4);
  swift_bridgeObjectRelease();
  v6 = (void *)MEMORY[0x24955A5F0](0x6C6562616CLL, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value + 8))
  {
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value + 8);
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v9 = (void *)MEMORY[0x24955A5F0](v7, v8);
  swift_bridgeObjectRelease();
  v10 = (void *)MEMORY[0x24955A5F0](0x65756C6176, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType);
  v12 = (id)MEMORY[0x24955A5F0](0x707954646C656966, 0xE900000000000065);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v11, v12);

}

unint64_t VocabularyField.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v1 = 7104878;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label + 8))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label);
    v3 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label + 8);
  }
  else
  {
    v3 = (void *)0xE300000000000000;
    v2 = 7104878;
  }
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3D65756C6176202CLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value + 8))
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value);
    v6 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value + 8);
  }
  else
  {
    v6 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v1;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x54646C656966202CLL;
  v8._object = (void *)0xEC0000003D657079;
  String.append(_:)(v8);
  v9._countAndFlagsBits = KVFieldType.description.getter(*(_QWORD *)(v0
                                                                   + OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32032;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return 0xD000000000000013;
}

id VocabularyField.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VocabularyField.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VocabularyField.__deallocating_deinit()
{
  return PommesResult.__deallocating_deinit(type metadata accessor for VocabularyField);
}

uint64_t VocabularyResult.appId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VocabularyResult.itemId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VocabularyResult.itemType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType);
}

uint64_t VocabularyResult.fieldTypes.getter()
{
  return swift_bridgeObjectRetain();
}

float VocabularyResult.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_score);
}

uint64_t VocabularyResult.spanBegin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanBegin);
}

uint64_t VocabularyResult.spanEnd.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanEnd);
}

uint64_t VocabularyResult.semanticValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VocabularyResult.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VocabularyResult.userId.getter()
{
  return PommesResponse.requestId.getter(&OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId);
}

uint64_t VocabularyResult.fieldType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fieldTypes);
  if (*(_QWORD *)(v1 + 16))
    return *(_QWORD *)(v1 + 32);
  else
    return 0;
}

id VocabularyResult.__allocating_init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, __int128 a10, __int128 a11, uint64_t a12)
{
  objc_class *v12;
  id v22;

  v22 = objc_allocWithZone(v12);
  return VocabularyResult.init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12);
}

id VocabularyResult.init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  objc_super v20;

  v15 = &v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  v16 = &v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType] = a5;
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fieldTypes] = a6;
  *(float *)&v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_score] = a9;
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanBegin] = a7;
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanEnd] = a8;
  v17 = &v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue];
  *(_QWORD *)v17 = a10;
  *((_QWORD *)v17 + 1) = a11;
  *(_QWORD *)&v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fields] = a12;
  v18 = &v14[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId];
  *(_QWORD *)v18 = a13;
  *((_QWORD *)v18 + 1) = a14;
  v20.receiver = v14;
  v20.super_class = (Class)type metadata accessor for VocabularyResult();
  return objc_msgSendSuper2(&v20, sel_init);
}

void VocabularyResult.__allocating_init(_:userId:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  VocabularyResult.init(_:userId:)(a1, a2, a3);
}

void VocabularyResult.init(_:userId:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t *p_align;
  uint32_t *v12;
  uint8_t *v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint32_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  char *v68;
  objc_super v71;
  uint64_t aBlock[6];
  uint64_t v73;

  v5 = one-time initialization token for music;
  v6 = v3;
  if (v5 != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.music);
  v8 = a1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  p_align = &stru_25179DFE8.align;
  v12 = &stru_25179DFE8.align;
  if (os_log_type_enabled(v9, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = v6;
    v15 = swift_slowAlloc();
    aBlock[0] = v15;
    *(_DWORD *)v13 = 136315138;
    v16 = objc_msgSend(v8, sel_itemInfo);
    v17 = objc_msgSend(v16, sel_item);

    v18 = objc_msgSend(v17, sel_itemId);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    p_align = (_DWORD *)(&stru_25179DFE8 + 24);
    v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2463D2000, v9, v10, "CKVMatchingSpan  itemId=%s", v13, 0xCu);
    swift_arrayDestroy();
    v22 = v15;
    v6 = v14;
    MEMORY[0x24955AE30](v22, -1, -1);
    v12 = (_DWORD *)(&stru_25179DFE8 + 24);
    MEMORY[0x24955AE30](v13, -1, -1);

  }
  else
  {

  }
  v23 = objc_msgSend(v8, *((SEL *)p_align + 423));
  v24 = p_align;
  v25 = objc_msgSend(v23, sel_originAppId);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  v29 = (uint64_t *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId];
  *v29 = v26;
  v29[1] = v28;
  v30 = objc_msgSend(v8, (SEL)v24 + 1341);
  v31 = objc_msgSend(v30, *((SEL *)v12 + 425));

  v32 = objc_msgSend(v31, sel_itemId);
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;

  v36 = (uint64_t *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId];
  *v36 = v33;
  v36[1] = v35;
  v37 = objc_msgSend(v8, (SEL)v24 + 1341);
  v38 = objc_msgSend(v37, *((SEL *)v12 + 425));

  v39 = objc_msgSend(v38, sel_itemType);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType] = v39;
  v40 = objc_msgSend(v8, sel_fieldMatches);
  type metadata accessor for NSArray(0, &lazy cache variable for type metadata for KVFieldMatch);
  v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v41 >> 62)
  {
    swift_bridgeObjectRetain();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v42)
  {
    aBlock[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42 & ~(v42 >> 63), 0);
    if (v42 < 0)
      goto LABEL_25;
    v68 = v6;
    v43 = 0;
    v44 = aBlock[0];
    do
    {
      if ((v41 & 0xC000000000000001) != 0)
        v45 = (id)MEMORY[0x24955A830](v43, v41);
      else
        v45 = *(id *)(v41 + 8 * v43 + 32);
      v46 = v45;
      v47 = objc_msgSend(v45, sel_fieldType);

      aBlock[0] = v44;
      v49 = *(_QWORD *)(v44 + 16);
      v48 = *(_QWORD *)(v44 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        v44 = aBlock[0];
      }
      ++v43;
      *(_QWORD *)(v44 + 16) = v49 + 1;
      *(_QWORD *)(v44 + 8 * v49 + 32) = v47;
    }
    while (v42 != v43);
    swift_bridgeObjectRelease();
    v6 = v68;
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fieldTypes] = v44;
  objc_msgSend(v8, sel_score);
  *(_DWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_score] = v50;
  v51 = objc_msgSend(v8, sel_spanInfo);
  v52 = objc_msgSend(v51, sel_spanRange);

  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanBegin] = v52;
  v53 = objc_msgSend(v8, sel_spanInfo);
  v54 = (char *)objc_msgSend(v53, sel_spanRange);
  v56 = v55;

  if (__OFADD__(v54, v56))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanEnd] = &v54[v56];
    v57 = objc_msgSend(v8, sel_spanValue);
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v60 = v59;

    v61 = (uint64_t *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue];
    *v61 = v58;
    v61[1] = v60;
    v73 = MEMORY[0x24BEE4AF8];
    v62 = objc_msgSend(v8, sel_itemInfo);
    v63 = objc_msgSend(v62, sel_item);

    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = &v73;
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = partial apply for closure #2 in VocabularyResult.init(_:userId:);
    *(_QWORD *)(v65 + 24) = v64;
    aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[5] = v65;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = (uint64_t)&block_descriptor;
    v66 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v63, sel_enumerateFieldsUsingBlock_, v66);

    _Block_release(v66);
    LOBYTE(v66) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v66 & 1) == 0)
    {
      *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fields] = v73;
      v67 = &v6[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId];
      *(_QWORD *)v67 = a2;
      *((_QWORD *)v67 + 1) = a3;
      swift_bridgeObjectRetain();

      v71.receiver = v6;
      v71.super_class = (Class)type metadata accessor for VocabularyResult();
      objc_msgSendSuper2(&v71, sel_init);

      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t closure #2 in VocabularyResult.init(_:userId:)(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  objc_class *v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  objc_super v22;

  v6 = objc_msgSend(a1, sel_label);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = objc_msgSend(a1, sel_value);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = objc_msgSend(a1, sel_fieldType);
  v17 = (objc_class *)type metadata accessor for VocabularyField();
  v18 = (char *)objc_allocWithZone(v17);
  v19 = (uint64_t *)&v18[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label];
  *v19 = v8;
  v19[1] = v10;
  v20 = (uint64_t *)&v18[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value];
  *v20 = v13;
  v20[1] = v15;
  *(_QWORD *)&v18[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType] = v16;
  v22.receiver = v18;
  v22.super_class = v17;
  objc_msgSendSuper2(&v22, sel_init);
  MEMORY[0x24955A6EC]();
  if (*(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

void thunk for @escaping @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t VocabularyResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VocabularyResult.init(coder:)(a1);
}

uint64_t VocabularyResult.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint32_t *p_align;
  id v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  int v34;
  int v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  void *v52;
  void *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  objc_super v57;
  _QWORD v58[4];
  _BYTE v59[24];
  uint64_t v60;

  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v4)
    goto LABEL_21;
  v5 = (void *)v4;
  v6 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v6)
  {

LABEL_21:
    goto LABEL_22;
  }
  v55 = (void *)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_246412940;
  v8 = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSNumber);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v60)
  {

    outlined destroy of Any?((uint64_t)v59);
LABEL_22:
    type metadata accessor for VocabularyResult();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_21;
  }
  v9 = v58[0];
  v53 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (!v53)
  {

    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_246412940;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = type metadata accessor for VocabularyField();
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = (uint64_t *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId];
  *v12 = v11;
  v12[1] = v13;
  v14 = v55;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = (uint64_t *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId];
  *v16 = v15;
  v16[1] = v17;
  v18 = (void *)MEMORY[0x24955A5F0](0x657079546D657469, 0xE800000000000000);
  p_align = &stru_25179DFE8.align;
  v20 = objc_msgSend(a1, sel_decodeIntegerForKey_, v18);

  *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType] = v20;
  if (!(v9 >> 62))
  {
    v21 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v52 = v5;
    if (v21)
      goto LABEL_8;
LABEL_25:
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
LABEL_26:
    *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fieldTypes] = v24;
    v33 = (void *)MEMORY[0x24955A5F0](0x65726F6373, 0xE500000000000000);
    objc_msgSend(a1, sel_decodeFloatForKey_, v33);
    v35 = v34;

    *(_DWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_score] = v35;
    v36 = (void *)MEMORY[0x24955A5F0](0x696765426E617073, 0xE90000000000006ELL);
    v37 = objc_msgSend(a1, *((SEL *)p_align + 419), v36);

    *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanBegin] = v37;
    v38 = (void *)MEMORY[0x24955A5F0](0x646E456E617073, 0xE700000000000000);
    v39 = objc_msgSend(a1, *((SEL *)p_align + 419), v38);

    *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanEnd] = v39;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v41 = (uint64_t *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue];
    *v41 = v40;
    v41[1] = v42;
    outlined init with copy of Any?((uint64_t)v59, (uint64_t)v58);
    if (v58[3])
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [VocabularyField]);
      v43 = swift_dynamicCast();
      v44 = v56;
      if (!v43)
        v44 = 0;
    }
    else
    {
      outlined destroy of Any?((uint64_t)v58);
      v44 = 0;
    }
    *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fields] = v44;
    v45 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v45)
    {
      v46 = (void *)v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v49 = v48;

    }
    else
    {

      v47 = 0;
      v49 = 0;
    }

    outlined destroy of Any?((uint64_t)v59);
    v50 = (uint64_t *)&v3[OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId];
    *v50 = v47;
    v50[1] = v49;

    v57.receiver = v3;
    v57.super_class = (Class)type metadata accessor for VocabularyResult();
    v32 = objc_msgSendSuper2(&v57, sel_init);

    return (uint64_t)v32;
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v52 = v5;
  if (!v21)
    goto LABEL_25;
LABEL_8:
  v51 = a1;
  v54 = v3;
  v58[0] = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = 0;
    v24 = v58[0];
    v25 = v9 & 0xC000000000000001;
    v26 = v9;
    do
    {
      if (v25)
        v27 = (id)MEMORY[0x24955A830](v23, v9);
      else
        v27 = *(id *)(v9 + 8 * v23 + 32);
      v28 = v27;
      v29 = objc_msgSend(v27, sel_integerValue);

      v58[0] = v24;
      v31 = *(_QWORD *)(v24 + 16);
      v30 = *(_QWORD *)(v24 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v24 = v58[0];
      }
      ++v23;
      *(_QWORD *)(v24 + 16) = v31 + 1;
      *(_QWORD *)(v24 + 8 * v31 + 32) = v29;
      v9 = v26;
    }
    while (v21 != v23);
    swift_bridgeObjectRelease();
    v3 = v54;
    a1 = v51;
    v14 = v55;
    p_align = (_DWORD *)(&stru_25179DFE8 + 24);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall VocabularyResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  void *v15;
  int v16;
  void *v17;
  double v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  Class v25;
  void *v26;
  void *v27;
  id v28;

  v2 = v1;
  v4 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId), *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId + 8));
  v5 = (void *)MEMORY[0x24955A5F0](0x6449707061, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId), *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId + 8));
  v7 = (void *)MEMORY[0x24955A5F0](0x64496D657469, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType);
  v9 = (void *)MEMORY[0x24955A5F0](0x657079546D657469, 0xE800000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v8, v9);

  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fieldTypes);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v12 = 0;
    do
    {
      v13 = v12 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v10 + 8 * v12 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v12 = v13;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = (void *)MEMORY[0x24955A5F0](0x707954646C656966, 0xEA00000000007365);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v15);

  v16 = *(_DWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_score);
  v17 = (void *)MEMORY[0x24955A5F0](0x65726F6373, 0xE500000000000000);
  LODWORD(v18) = v16;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v17, v18);

  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanBegin);
  v20 = (void *)MEMORY[0x24955A5F0](0x696765426E617073, 0xE90000000000006ELL);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v19, v20);

  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_spanEnd);
  v22 = (void *)MEMORY[0x24955A5F0](0x646E456E617073, 0xE700000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v21, v22);

  v23 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue), *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue + 8));
  v24 = (void *)MEMORY[0x24955A5F0](0x6369746E616D6573, 0xED000065756C6156);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);

  v25 = *(Class *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fields);
  if (v25)
  {
    type metadata accessor for VocabularyField();
    v25 = Array._bridgeToObjectiveC()().super.isa;
  }
  v26 = (void *)MEMORY[0x24955A5F0](0x73646C656966, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v25, v26);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId + 8))
  {
    v27 = (void *)MEMORY[0x24955A5F0](*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId));
    v28 = (id)MEMORY[0x24955A5F0](0x644972657375, 0xE600000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v27, v28);

  }
}

id @objc VocabularyField.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  v8 = (void *)MEMORY[0x24955A5F0](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t VocabularyResult.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  void *v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = v0;
  _StringGuts.grow(_:)(138);
  v2._countAndFlagsBits = 0xD000000000000017;
  v2._object = (void *)0x8000000246454F40;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_appId + 8);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x64496D657469202CLL;
  v6._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId);
  v8 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemId + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x79546D657469202CLL;
  v10._object = (void *)0xEB000000003D6570;
  String.append(_:)(v10);
  v11._countAndFlagsBits = KVItemType.description.getter(*(_QWORD *)(v0
                                                                   + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_itemType));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x54646C656966202CLL;
  v12._object = (void *)0xEE005B3D73657079;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fieldTypes);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  v65 = v0;
  if (v14)
  {
    v66 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v16 = 0;
    v17 = v13 + 32;
    v18 = *(_QWORD *)(v66 + 16);
    v19 = 16 * v18;
    do
    {
      v20 = KVFieldType.description.getter(*(_QWORD *)(v17 + 8 * v16));
      v22 = v21;
      v23 = *(_QWORD *)(v66 + 24);
      v24 = v18 + v16 + 1;
      if (v18 + v16 >= v23 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24, 1);
      ++v16;
      *(_QWORD *)(v66 + 16) = v24;
      v25 = v66 + v19;
      *(_QWORD *)(v25 + 32) = v20;
      *(_QWORD *)(v25 + 40) = v22;
      v19 += 16;
    }
    while (v14 != v16);
    swift_bridgeObjectRelease();
    v1 = v0;
    v15 = MEMORY[0x24BEE4AF8];
  }
  v26 = 7104878;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v27 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v28 = BidirectionalCollection<>.joined(separator:)();
  v30 = v29;
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0x65726F6373202C5DLL;
  v32._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v32);
  Float.write<A>(to:)();
  v33._countAndFlagsBits = 0x7B3D6E617073202CLL;
  v33._object = (void *)0xE800000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._object = (void *)0x8000000246454F60;
  v37._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v37);
  v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue);
  v39 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_semanticValue + 8);
  swift_bridgeObjectRetain();
  v40._countAndFlagsBits = v38;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x646C656966202C22;
  v41._object = (void *)0xEB000000005B3D73;
  String.append(_:)(v41);
  v42 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_fields);
  if (v42)
  {
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      v64 = v27;
      if (v43)
        goto LABEL_10;
    }
    else
    {
      v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v64 = v27;
      if (v43)
      {
LABEL_10:
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43 & ~(v43 >> 63), 0);
        if (v43 < 0)
        {
          __break(1u);
          return result;
        }
        v45 = 0;
        v46 = v15;
        do
        {
          if ((v42 & 0xC000000000000001) != 0)
            v47 = (id)MEMORY[0x24955A830](v45, v42);
          else
            v47 = *(id *)(v42 + 8 * v45 + 32);
          v48 = v47;
          v49 = objc_msgSend(v47, sel_description, v64);
          v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v52 = v51;

          v54 = *(_QWORD *)(v46 + 16);
          v53 = *(_QWORD *)(v46 + 24);
          if (v54 >= v53 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
          ++v45;
          *(_QWORD *)(v46 + 16) = v54 + 1;
          v55 = v46 + 16 * v54;
          *(_QWORD *)(v55 + 32) = v50;
          *(_QWORD *)(v55 + 40) = v52;
        }
        while (v43 != v45);
        swift_bridgeObjectRelease();
        v1 = v65;
        v26 = 7104878;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    v57 = BidirectionalCollection<>.joined(separator:)();
    v56 = v58;
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v56 = (void *)0xE300000000000000;
  v57 = 7104878;
LABEL_23:
  v59._countAndFlagsBits = v57;
  v59._object = v56;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 0x4972657375202C5DLL;
  v60._object = (void *)0xEB00000000223D64;
  String.append(_:)(v60);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId + 8))
  {
    v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId);
    v61 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch16VocabularyResult_userId + 8);
  }
  else
  {
    v61 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v62._countAndFlagsBits = v26;
  v62._object = v61;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  v63._countAndFlagsBits = 32034;
  v63._object = (void *)0xE200000000000000;
  String.append(_:)(v63);
  return 0;
}

void VocabularyResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VocabularyResult.__deallocating_deinit()
{
  return PommesResult.__deallocating_deinit(type metadata accessor for VocabularyResult);
}

id specialized VocabularyField.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  void *v10;
  id v11;
  objc_super v13;

  type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    v5 = (void *)v4;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  v6 = &v3[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_label];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v7)
  {
    v8 = (void *)v7;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  v9 = &v3[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_value];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = (void *)MEMORY[0x24955A5F0](0x707954646C656966, 0xE900000000000065);
  v11 = objc_msgSend(a1, sel_decodeIntegerForKey_, v10);

  *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch15VocabularyField_fieldType] = v11;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for VocabularyField();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for VocabularyResult()
{
  return objc_opt_self();
}

uint64_t sub_246405FF4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in VocabularyResult.init(_:userId:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in VocabularyResult.init(_:userId:)(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

uint64_t sub_24640600C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x24955ADAC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t method lookup function for VocabularyField()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static VocabularyField.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of VocabularyField.__allocating_init(label:value:fieldType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VocabularyField.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of VocabularyField.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t method lookup function for VocabularyResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static VocabularyResult.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of VocabularyResult.fieldType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of VocabularyResult.__allocating_init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of VocabularyResult.__allocating_init(_:userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of VocabularyResult.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of VocabularyResult.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t DeviceExpertExperience.deviceExpertClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC20SiriInformationTypes22DeviceExpertExperience_deviceExpertClientComponent;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id DeviceExpertExperience.__allocating_init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)(a1, a2, a3, a4, a5);
}

id DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, double a5)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  id v19;
  char *v20;
  uint64_t v21;
  objc_class *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_super v32;

  v30 = a3;
  v27 = a1;
  v28 = a2;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v5[OBJC_IVAR____TtC20SiriInformationTypes22DeviceExpertExperience_deviceExpertClientComponent];
  v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v31 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v17, a3, v29);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v18(v16, (uint64_t)a4, v13);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BE6FC50], v9);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v20 = &v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v21 = v28;
  *(_QWORD *)v20 = v27;
  *((_QWORD *)v20 + 1) = v21;
  *(double *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a5;
  v18(&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v16, v13);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v19;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v5[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v12, v9);
  v22 = (objc_class *)type metadata accessor for Experience(0);
  v32.receiver = v5;
  v32.super_class = v22;
  v23 = objc_msgSendSuper2(&v32, sel_init);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v16, v13);
  v24(a4, v13);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v29);
  return v23;
}

id DeviceExpertExperience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DeviceExpertExperience.init(coder:)(a1);
}

id DeviceExpertExperience.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSData();
  v8 = v1;
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v9)
  {
    v10 = (void *)v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent and conformance Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC20SiriInformationTypes22DeviceExpertExperience_deviceExpertClientComponent, v7, v4);

    v15 = Experience.init(coder:)(a1);
    v16 = v15;

    if (v15)
  }
  else
  {

    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2463D2000, v12, v13, "DeviceExpertClientComponent cannot be decoded", v14, 2u);
      MEMORY[0x24955AE30](v14, -1, -1);
    }

    type metadata accessor for DeviceExpertExperience();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v15;
}

Swift::Void __swiftcall DeviceExpertExperience.encode(with:)(NSCoder with)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Class isa;
  void *v6;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent and conformance Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v2, v4);
  v6 = (void *)MEMORY[0x24955A5F0](0xD00000000000001BLL, 0x8000000246455010);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  Experience.encode(with:)(with);
}

void DeviceExpertExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DeviceExpertExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DeviceExpertExperience.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC20SiriInformationTypes22DeviceExpertExperience_deviceExpertClientComponent;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id DeviceExpertExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceExpertExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DeviceExpertExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DeviceExpertExperience;
  if (!type metadata singleton initialization cache for DeviceExpertExperience)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent and conformance Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent and conformance Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent and conformance Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BE71270], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent and conformance Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent);
  }
  return result;
}

uint64_t ObjC metadata update function for DeviceExpertExperience()
{
  return type metadata accessor for DeviceExpertExperience();
}

uint64_t type metadata completion function for DeviceExpertExperience()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for DeviceExpertExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeviceExpertExperience.__allocating_init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t PatternDrivenExperience.components.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PatternDrivenExperience.__allocating_init(_:queryConfidence:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24955A380](v7);
  v12 = v11;
  v13 = Apple_Parsec_Responseframework_PatternDrivenExperience.patternComponents.getter();
  Siri_Nlu_External_UserDialogAct.init()();
  v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, id, double))(v3 + 336))(v10, v12, v13, v9, v14, a2);
  v16 = type metadata accessor for Apple_Parsec_Responseframework_PatternDrivenExperience();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
  return v15;
}

uint64_t PatternDrivenExperience.__allocating_init(pluginIdentifier:components:queryConfidence:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v14;

  v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserDialogAct.init()();
  v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, id, double))(v4 + 336))(a1, a2, a3, v11, v12, a4);
}

uint64_t PatternDrivenExperience.__allocating_init(pluginIdentifier:components:queryConfidence:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, id, double))(v5 + 336))(a1, a2, a3, v14, v15, a5);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a4, v11);
  return v16;
}

id PatternDrivenExperience.__allocating_init(pluginIdentifier:components:queryConfidence:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return PatternDrivenExperience.init(pluginIdentifier:components:queryConfidence:userDialogAct:renderOptions:)(a1, a2, a3, a4, a5, a6);
}

id PatternDrivenExperience.init(pluginIdentifier:components:queryConfidence:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  char *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  objc_class *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  objc_super v28;

  v26 = a2;
  v27 = a5;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch23PatternDrivenExperience_components] = a3;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v19(v18, (uint64_t)a4, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE6FC50], v11);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v20 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v21 = v26;
  *(_QWORD *)v20 = a1;
  *((_QWORD *)v20 + 1) = v21;
  *(double *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v19(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v18, v15);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v27;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v14, v11);
  v22 = (objc_class *)type metadata accessor for Experience(0);
  v28.receiver = v6;
  v28.super_class = v22;
  v23 = objc_msgSendSuper2(&v28, sel_init);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24(v18, v15);
  v24(a4, v15);
  return v23;
}

id PatternDrivenExperience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PatternDrivenExperience.init(coder:)(a1);
}

id PatternDrivenExperience.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;

  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Responseframework_PatternComponent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_246412940;
  *(_QWORD *)(v9 + 32) = type metadata accessor for NSArray(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v9 + 40) = type metadata accessor for NSArray(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v10 = v1;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v44 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NSData]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v11 = v46;
      if (v46 >> 62)
      {
        swift_bridgeObjectRetain();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v37 = v10;
        v38 = a1;
        if (v12)
          goto LABEL_5;
      }
      else
      {
        v12 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
        v37 = v10;
        v38 = a1;
        if (v12)
        {
LABEL_5:
          v46 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
          if ((v12 & 0x8000000000000000) == 0)
          {
            v13 = 0;
            v14 = v46;
            v39 = v11 & 0xC000000000000001;
            v40 = v11;
            while (v12 != v13)
            {
              if (v39)
                v15 = (id)MEMORY[0x24955A830](v13, v11);
              else
                v15 = *(id *)(v11 + 8 * v13 + 32);
              v16 = v15;
              static Data._unconditionallyBridgeFromObjectiveC(_:)();
              v45 = 0;
              v43 = 0u;
              v44 = 0u;
              BinaryDecodingOptions.init()();
              lazy protocol witness table accessor for type Apple_Parsec_Responseframework_PatternComponent and conformance Apple_Parsec_Responseframework_PatternComponent();
              Message.init(serializedData:extensions:partial:options:)();

              v46 = v14;
              v18 = *(_QWORD *)(v14 + 16);
              v17 = *(_QWORD *)(v14 + 24);
              a1 = (void *)(v18 + 1);
              v11 = v40;
              if (v18 >= v17 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
                v14 = v46;
              }
              ++v13;
              *(_QWORD *)(v14 + 16) = a1;
              (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, v42, v6);
              if (v12 == v13)
              {
                swift_bridgeObjectRelease();
                goto LABEL_28;
              }
            }
            __break(1u);
            goto LABEL_25;
          }
          __break(1u);
          swift_once();
          v24 = type metadata accessor for Logger();
          __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
          v25 = v2;
          v26 = v2;
          v27 = Logger.logObject.getter();
          v28 = static os_log_type_t.error.getter();
          v29 = os_log_type_enabled(v27, v28);
          v30 = v38;
          if (v29)
          {
            v31 = (uint8_t *)swift_slowAlloc();
            v32 = swift_slowAlloc();
            *(_QWORD *)&v43 = v32;
            *(_DWORD *)v31 = 136315138;
            swift_getErrorValue();
            v33 = Error.localizedDescription.getter();
            v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v43);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_2463D2000, v27, v28, "PatternExperience.Component failed %s", v31, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24955AE30](v32, -1, -1);
            MEMORY[0x24955AE30](v31, -1, -1);

          }
          else
          {

          }
          return Experience.init(coder:)(v30);
        }
      }
      swift_bridgeObjectRelease();
      v14 = MEMORY[0x24BEE4AF8];
LABEL_28:
      v35 = v37;
      *(_QWORD *)&v37[OBJC_IVAR____TtC21SiriInformationSearch23PatternDrivenExperience_components] = v14;

      v30 = v38;
      return Experience.init(coder:)(v30);
    }

  }
  else
  {

    outlined destroy of Any?((uint64_t)&v43);
  }
  if (one-time initialization token for pommes != -1)
LABEL_25:
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_2463D2000, v20, v21, "PatternExperience failed to extract components array", v22, 2u);
    MEMORY[0x24955AE30](v22, -1, -1);
  }

  type metadata accessor for PatternDrivenExperience();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall PatternDrivenExperience.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Class v20;
  void *v21;
  uint64_t v22;
  objc_class *isa;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;

  v3 = type metadata accessor for Apple_Parsec_Responseframework_PatternComponent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch23PatternDrivenExperience_components);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    isa = with.super.isa;
    v24 = v1;
    v9 = v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v10 = *(_QWORD *)(v4 + 72);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v29 = v10;
    v22 = v7;
    swift_bridgeObjectRetain_n();
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v12 = 136315138;
    v26 = v12;
    v25 = MEMORY[0x24BEE4AD8] + 8;
    v27 = v4;
    do
    {
      v28(v6, v9, v3);
      lazy protocol witness table accessor for type Apple_Parsec_Responseframework_PatternComponent and conformance Apple_Parsec_Responseframework_PatternComponent();
      v13 = Message.serializedData(partial:)();
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v17 = v11[2];
      v16 = v11[3];
      v18 = v11;
      if (v17 >= v16 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v11);
      v18[2] = v17 + 1;
      v11 = v18;
      v19 = &v18[2 * v17];
      v19[4] = v13;
      v19[5] = v15;
      v9 += v29;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease_n();
    with.super.isa = isa;
  }
  v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = (void *)MEMORY[0x24955A5F0](0x6E656E6F706D6F63, 0xEA00000000007374);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v20, v21);

  Experience.encode(with:)(with);
}

void PatternDrivenExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PatternDrivenExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PatternDrivenExperience.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id PatternDrivenExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PatternDrivenExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PatternDrivenExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PatternDrivenExperience;
  if (!type metadata singleton initialization cache for PatternDrivenExperience)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Responseframework_PatternComponent and conformance Apple_Parsec_Responseframework_PatternComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_PatternComponent and conformance Apple_Parsec_Responseframework_PatternComponent;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_PatternComponent and conformance Apple_Parsec_Responseframework_PatternComponent)
  {
    v1 = type metadata accessor for Apple_Parsec_Responseframework_PatternComponent();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BE70EC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_PatternComponent and conformance Apple_Parsec_Responseframework_PatternComponent);
  }
  return result;
}

uint64_t ObjC metadata update function for PatternDrivenExperience()
{
  return type metadata accessor for PatternDrivenExperience();
}

uint64_t type metadata completion function for PatternDrivenExperience()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for PatternDrivenExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PatternDrivenExperience.__allocating_init(pluginIdentifier:components:queryConfidence:userDialogAct:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t Logger.pommes.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for pommes, (uint64_t)static Logger.pommes);
}

uint64_t Logger.music.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for music, (uint64_t)static Logger.music);
}

uint64_t Logger.pommes.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t one-time initialization function for pommes()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.pommes);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  if (one-time initialization token for pommes != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

void *LogConstants.subsystem.unsafeMutableAddressor()
{
  return &static LogConstants.subsystem;
}

uint64_t *LogConstants.Category.pommes.unsafeMutableAddressor()
{
  if (one-time initialization token for pommes != -1)
    swift_once();
  return &static LogConstants.Category.pommes;
}

uint64_t static Logger.pommes.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for pommes, (uint64_t)static Logger.pommes, a1);
}

uint64_t one-time initialization function for music()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.music);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.music);
  if (one-time initialization token for music != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t *LogConstants.Category.music.unsafeMutableAddressor()
{
  if (one-time initialization token for music != -1)
    swift_once();
  return &static LogConstants.Category.music;
}

uint64_t static Logger.music.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for music, (uint64_t)static Logger.music, a1);
}

uint64_t static Logger.pommes.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

unint64_t static LogConstants.subsystem.getter()
{
  return 0xD000000000000010;
}

void one-time initialization function for pommes()
{
  static LogConstants.Category.pommes = 0x73656D6D6F70;
  *(_QWORD *)algn_254422458 = 0xE600000000000000;
}

uint64_t static LogConstants.Category.pommes.getter()
{
  return static LogConstants.Category.pommes.getter(&one-time initialization token for pommes, &static LogConstants.Category.pommes);
}

void one-time initialization function for music()
{
  static LogConstants.Category.music = 0x636973756DLL;
  *(_QWORD *)algn_257575FF8 = 0xE500000000000000;
}

uint64_t static LogConstants.Category.music.getter()
{
  return static LogConstants.Category.pommes.getter(&one-time initialization token for music, &static LogConstants.Category.music);
}

uint64_t static LogConstants.Category.pommes.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for LogConstants()
{
  return &type metadata for LogConstants;
}

ValueMetadata *type metadata accessor for LogConstants.Category()
{
  return &type metadata for LogConstants.Category;
}

uint64_t PommesContext.Source.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_246408650 + 4 * byte_246451EF0[a1]))(0xD000000000000012, 0x8000000246455190);
}

uint64_t sub_246408650()
{
  return 0x5273757361676570;
}

uint64_t sub_246408674()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_24640868C()
{
  return 0x65446E6967756C70;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesContext.Source.CodingKeys()
{
  unsigned __int8 *v0;

  return PommesContext.Source.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesContext.Source.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesContext.Source.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesContext.Source.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesContext.Source.CodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesContext.Source.CodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesContext.Source.ModalityTranslatedCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesContext.Source.ModalityTranslatedCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesContext.Source.ModalityTranslatedCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys();
  return CodingKey.debugDescription.getter();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesContext.Source.PegasusResponseCodingKeys()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesContext.Source.PegasusResponseCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesContext.Source.PegasusResponseCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesContext.Source.PegasusResponseCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesContext.Source.PegasusResponseCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesContext.Source.PluginDefinedCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesContext.Source.PluginDefinedCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesContext.Source.UnknownCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesContext.Source.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesContext.Source.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PommesContext.Source.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesContext.Source.UnknownCodingKeys>);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesContext.Source.ModalityTranslatedCodingKeys>);
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesContext.Source.PluginDefinedCodingKeys>);
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesContext.Source.PegasusResponseCodingKeys>);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesContext.Source.CodingKeys>);
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1[1];
  v24 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v15 >> 60;
  if (v15 >> 60 == 3)
  {
    LOBYTE(v36) = v15 >> 60;
    lazy protocol witness table accessor for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys();
    v19 = v31;
    v20 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v20);
  }
  if ((_DWORD)v16 == 7)
  {
    LOBYTE(v36) = 2;
    lazy protocol witness table accessor for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys();
    v20 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v20);
  }
  if ((_DWORD)v16 == 11)
  {
    LOBYTE(v36) = 1;
    lazy protocol witness table accessor for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys();
    v17 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v17);
  }
  else
  {
    LOBYTE(v36) = 0;
    v21 = v24;
    outlined copy of Data?(v24, v15);
    lazy protocol witness table accessor for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys();
    v22 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v36 = v21;
    v37 = v15;
    lazy protocol witness table accessor for type Data and conformance Data();
    v23 = v29;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v23);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v22);
    return outlined consume of PommesContext.Source(v21, v15);
  }
}

uint64_t PommesContext.Source.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;

  v27 = a2;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesContext.Source.UnknownCodingKeys>);
  v22[1] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v29 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesContext.Source.ModalityTranslatedCodingKeys>);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v28 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesContext.Source.PluginDefinedCodingKeys>);
  v22[2] = *(_QWORD *)(v6 - 8);
  v22[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesContext.Source.PegasusResponseCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesContext.Source.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys();
  v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v22[0] = v9;
    v31 = v8;
    v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X10 }
    v17 = v13;
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v20 = &type metadata for PommesContext.Source;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PommesContext.Source@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PommesContext.Source.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesContext.Source(_QWORD *a1)
{
  return PommesContext.Source.encode(to:)(a1);
}

uint64_t PommesContext.init(source:domain:listenAfterSpeaking:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v9 = *a1;
  v10 = a1[1];
  v11 = (int *)type metadata accessor for PommesContext();
  v12 = a5 + v11[7];
  v13 = *MEMORY[0x24BE6FC50];
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a5 + v11[8]) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a5 + v11[9]) = v15;
  v16 = a5 + v11[10];
  v17 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v10;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_BYTE *)(a5 + 32) = a4;
  return result;
}

uint64_t PommesContext.init(pegasusConversationContext:domain:listenAfterSpeaking:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  if (a2 >> 60 == 15)
    v10 = 0;
  else
    v10 = a1;
  if (a2 >> 60 == 15)
    v11 = 0x3000000000000000;
  else
    v11 = a2;
  v12 = (int *)type metadata accessor for PommesContext();
  v13 = a6 + v12[7];
  v14 = *MEMORY[0x24BE6FC50];
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a6 + v12[8]) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a6 + v12[9]) = v16;
  v17 = a6 + v12[10];
  v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)a6 = v10;
  *(_QWORD *)(a6 + 8) = v11;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5;
  return result;
}

uint64_t PommesContext.init(pegasusConversationContext:legacyNLContext:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v30 - v11;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a3, (uint64_t)&v30 - v11, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  v13 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v16 = Siri_Nlu_External_LegacyNLContext.previousDomainName.getter();
    v17 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  }
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a3, (uint64_t)v10, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  if (v15(v10, 1, v13) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v10, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v19 = 0;
  }
  else
  {
    v19 = Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
  }
  if (a2 >> 60 == 15)
    v20 = 0;
  else
    v20 = v31;
  if (a2 >> 60 == 15)
    v21 = 0x3000000000000000;
  else
    v21 = a2;
  v22 = (int *)type metadata accessor for PommesContext();
  v23 = a4 + v22[7];
  v24 = *MEMORY[0x24BE6FC50];
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  v26 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a4 + v22[8]) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a4 + v22[9]) = v26;
  v27 = a4 + v22[10];
  v28 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v21;
  *(_QWORD *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 24) = v17;
  *(_BYTE *)(a4 + 32) = v19 & 1;
  PommesContext.addRenderedTexts(from:)(a3);
  return outlined destroy of ClientExperienceSignals?(a3, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
}

uint64_t PommesContext.addRenderedTexts(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for Google_Protobuf_StringValue();
  v28 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(a1, (uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  v10 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
LABEL_12:
    v20 = MEMORY[0x24BEE4AF8];
    goto LABEL_13;
  }
  v12 = MEMORY[0x24955A3F8]();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v25[1] = v2;
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  v14 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v25[0] = v12;
  v15 = v12 + v14;
  v16 = *(_QWORD *)(v28 + 72);
  v26 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
  v27 = v16;
  do
  {
    v26(v6, v15, v4);
    v17 = Google_Protobuf_StringValue.value.getter();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
    v20 = v29;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
      v20 = v29;
    }
    v22 = *(_QWORD *)(v20 + 16);
    v21 = *(_QWORD *)(v20 + 24);
    if (v22 >= v21 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v20 = v29;
    }
    *(_QWORD *)(v20 + 16) = v22 + 1;
    v23 = v20 + 16 * v22;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v19;
    v15 += v27;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
LABEL_13:
  type metadata accessor for PommesContext();
  return specialized Array.append<A>(contentsOf:)(v20);
}

uint64_t PommesContext.source.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return outlined copy of PommesContext.Source(v2, v3);
}

uint64_t PommesContext.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesContext.listenAfterSpeaking.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t PommesContext.pegasusConversationContext.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v3;

  v1 = v0[1];
  if ((v1 >> 60) <= 0xB && ((1 << (v1 >> 60)) & 0x888) != 0)
    return 0;
  v3 = *v0;
  outlined copy of Data?(v3, v1);
  return v3;
}

uint64_t PommesContext.instructionIntent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PommesContext() + 28);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PommesContext.instructionIntent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PommesContext() + 28);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PommesContext.instructionIntent.modify())()
{
  type metadata accessor for PommesContext();
  return AudioExperience.Builder.serverAudioResults.modify;
}

BOOL PommesContext.isConfirmation.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE6FC70];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PommesContext();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BE6FC58], v0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent, v1, MEMORY[0x24BE6FC80]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v5 = v7[1] == v7[0];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  return v5;
}

uint64_t PommesContext.renderedTexts.getter()
{
  type metadata accessor for PommesContext();
  return swift_bridgeObjectRetain();
}

uint64_t PommesContext.redactedRenderedTexts.getter()
{
  type metadata accessor for PommesContext();
  return swift_bridgeObjectRetain();
}

Swift::Int __swiftcall PommesContext.contextSize()()
{
  uint64_t v0;
  unint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = (v1 >> 60) > 0xB || ((1 << (v1 >> 60)) & 0x888) == 0;
  if (v2 && v1 >> 60 != 15)
    __asm { BR              X10 }
  return 0;
}

void sub_246409B10(uint64_t a1)
{
  unint64_t v1;

  outlined consume of PommesContext.Source(a1, v1);
  JUMPOUT(0x246409ADCLL);
}

Swift::Void __swiftcall PommesContext.addRenderedTexts(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  type metadata accessor for PommesContext();
  v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
}

Swift::Void __swiftcall PommesContext.addRedactedRenderedTexts(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  type metadata accessor for PommesContext();
  v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
}

Swift::Bool __swiftcall PommesContext.isWithinMaxSize()()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (((v1 >> 60) > 0xB || ((1 << (v1 >> 60)) & 0x888) == 0) && v1 >> 60 != 15)
    __asm { BR              X10 }
  return 1;
}

void sub_246409C30(uint64_t a1, unint64_t a2)
{
  outlined consume of PommesContext.Source(a1, a2);
  JUMPOUT(0x246409C04);
}

uint64_t PommesContext.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;

  _StringGuts.grow(_:)(125);
  v1._countAndFlagsBits = 0x203A656372756F73;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  outlined copy of PommesContext.Source(*(_QWORD *)v0, v3);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6E69616D6F640A2CLL;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD00000000000001ELL;
  v7._object = (void *)0x8000000246455110;
  String.append(_:)(v7);
  if ((v3 >> 60) > 0xB || ((1 << (v3 >> 60)) & 0x888) == 0)
    outlined copy of Data?(v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000017;
  v9._object = (void *)0x8000000246455130;
  String.append(_:)(v9);
  if (*(_BYTE *)(v0 + 32))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 32))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000246455150;
  v13._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v13);
  type metadata accessor for PommesContext();
  v14 = swift_bridgeObjectRetain();
  v15 = MEMORY[0x24BEE0D00];
  v16 = MEMORY[0x24955A71C](v14, MEMORY[0x24BEE0D00]);
  v18 = v17;
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000019;
  v20._object = (void *)0x8000000246455170;
  String.append(_:)(v20);
  v21 = swift_bridgeObjectRetain();
  v22 = MEMORY[0x24955A71C](v21, v15);
  v24 = v23;
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PommesContext.exportLegacyNLContext()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = v1;
  v4 = type metadata accessor for Google_Protobuf_StringValue();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_LegacyNLContext.LegacyContextSource();
  v57 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v1 + 24);
  if (!v19)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 56))(a1, 1, 1);
  v54 = v16;
  v55 = v15;
  v51 = v11;
  v52 = v9;
  v53 = v8;
  v20 = *(_QWORD *)(v2 + 16);
  Siri_Nlu_External_LegacyNLContext.init()();
  PommesContext.convertPegasusDomainToLegacyNLDomain(pegasusDomain:)(v20, v19);
  Siri_Nlu_External_LegacyNLContext.previousDomainName.setter();
  Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.setter();
  Siri_Nlu_External_LegacyNLContext.strictPrompt.setter();
  Siri_Nlu_External_LegacyNLContext.dictationPrompt.setter();
  v50 = type metadata accessor for PommesContext();
  v21 = *(_QWORD *)(v2 + *(int *)(v50 + 32));
  v22 = *(_QWORD *)(v21 + 16);
  v23 = MEMORY[0x24BEE4AF8];
  if (v22)
  {
    v48[1] = v2;
    v49 = a1;
    v59 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v23 = v59;
    v24 = v21 + 40;
    do
    {
      swift_bridgeObjectRetain();
      Google_Protobuf_StringValue.init(_:)();
      v59 = v23;
      v26 = *(_QWORD *)(v23 + 16);
      v25 = *(_QWORD *)(v23 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v23 = v59;
      }
      v24 += 16;
      *(_QWORD *)(v23 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v26, v7, v4);
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    v27 = v49;
  }
  else
  {
    v27 = a1;
  }
  v29 = v55;
  MEMORY[0x24955A404](v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x24BE9CBF0], v58);
  Siri_Nlu_External_LegacyNLContext.legacyContextSource.setter();
  v30 = v51;
  v32 = v52;
  v31 = v53;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, *MEMORY[0x24BE6FC58], v53);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent, (uint64_t (*)(uint64_t))MEMORY[0x24BE6FC70], MEMORY[0x24BE6FC80]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v33 = v59;
  v34 = v60;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
  if (v33 == v34)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_246412940;
    *(_QWORD *)(v35 + 32) = 5457241;
    *(_QWORD *)(v35 + 40) = 0xE300000000000000;
    *(_QWORD *)(v35 + 48) = 20302;
    *(_QWORD *)(v35 + 56) = 0xE200000000000000;
    MEMORY[0x24955A464]();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v49 = v27;
      v41 = v40;
      v60 = v40;
      *(_DWORD *)v39 = 136315138;
      v42 = swift_beginAccess();
      v43 = MEMORY[0x24955A458](v42);
      swift_endAccess();
      v44 = MEMORY[0x24955A71C](v43, MEMORY[0x24BEE0D00]);
      v46 = v45;
      swift_bridgeObjectRelease();
      v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v60);
      v29 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2463D2000, v37, v38, "Confirmation prompt accepts semantics values %s", v39, 0xCu);
      swift_arrayDestroy();
      v27 = v49;
      MEMORY[0x24955AE30](v41, -1, -1);
      MEMORY[0x24955AE30](v39, -1, -1);
    }

  }
  else
  {
    MEMORY[0x24955A464](MEMORY[0x24BEE4AF8]);
  }
  swift_beginAccess();
  v47 = v54;
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v27, v18, v29);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v27, 0, 1, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v18, v29);
}

uint64_t PommesContext.convertPegasusDomainToLegacyNLDomain(pegasusDomain:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = 0x4572656874616577;
  if ((a1 != 0x72656874616577 || a2 != 0xE700000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v4 = 0x6B636F7473;
    if ((a1 != 0x736B636F7473 || a2 != 0xE600000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v4 = 0x706F6C6379636E65;
      if ((a1 != 26475 || a2 != 0xE200000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && (a1 != 1852008299 || a2 != 0xE400000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v4 = 0x74656D6874697261;
        if ((a1 != 1752457581 || a2 != 0xE400000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v4 = 0x6372616553626577;
          if ((a1 != 0x67616D695F626577 || a2 != 0xEA00000000007365)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (a1 != 0x65646E695F626577 || a2 != 0xE900000000000078)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (a1 != 0x77736E615F626577 || a2 != 0xEA00000000007265)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (a1 != 0x695F6265775F3276 || a2 != 0xEC0000007865646ELL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (a1 == 0x6F65646976 && a2 == 0xE500000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              return 0x616964656DLL;
            }
            else
            {
              v4 = 0xD000000000000014;
              if ((a1 != 0x616E6F6974636964 || a2 != 0xEA00000000007972)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                v4 = 0x6165536C61636F6CLL;
                if ((a1 != 1936744813 || a2 != 0xE400000000000000)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                  && (a1 != 7300455 || a2 != 0xE300000000000000)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  v4 = 0x616C50616964656DLL;
                  if ((a1 != 0x616964656DLL || a2 != 0xE500000000000000)
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    v4 = 0x636E75614C707061;
                    if ((a1 != 1936748641 || a2 != 0xE400000000000000)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      swift_bridgeObjectRetain();
                      return a1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t PommesContext.exportPegasusConversationContext()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v3;

  v1 = v0[1];
  if ((v1 >> 60) <= 0xB && ((1 << (v1 >> 60)) & 0x888) != 0)
    return 0;
  v3 = *v0;
  outlined copy of Data?(v3, v1);
  return v3;
}

uint64_t PommesContext.promptContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesContext();
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
}

uint64_t PommesContext.update(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1 + *(int *)(type metadata accessor for PommesContext() + 40);
  outlined destroy of ClientExperienceSignals?(v3, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
}

uint64_t PommesContext.exportPromptContext()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesContext();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v2 + *(int *)(v11 + 40), (uint64_t)v6, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v6, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    v12 = *(_QWORD *)(v2 + 24);
    if (!v12)
    {
      v15 = 1;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v15, 1, v7);
    }
    v13 = *(_QWORD *)(v2 + 16);
    Com_Apple_Siri_Product_Proto_PromptContext.init()();
    PommesContext.convertPegasusDomainToLegacyNLDomain(pegasusDomain:)(v13, v12);
    Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.setter();
    Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.setter();
  }
  else
  {
    v14 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v14(v10, v6, v7);
    v14(a1, v10, v7);
  }
  v15 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v15, 1, v7);
}

uint64_t PommesContext.exportPromptContextData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v21;
  _BYTE v22[16];

  v1 = v0;
  v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v22[-v7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v22[-v13];
  v15 = type metadata accessor for PommesContext();
  outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?(v1 + *(int *)(v15 + 40), (uint64_t)v12, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  v16 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48);
  if (v16(v12, 1, v2) == 1)
  {
    outlined destroy of ClientExperienceSignals?((uint64_t)v12, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    v17 = *(_QWORD *)(v1 + 24);
    if (!v17)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v14, 1, 1, v2);
      goto LABEL_8;
    }
    v18 = *(_QWORD *)(v1 + 16);
    Com_Apple_Siri_Product_Proto_PromptContext.init()();
    PommesContext.convertPegasusDomainToLegacyNLDomain(pegasusDomain:)(v18, v17);
    Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.setter();
    Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.setter();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v14, v6, v2);
  }
  else
  {
    v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32);
    v19(v8, v12, v2);
    v19(v14, v8, v2);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  if (v16(v14, 1, v2) == 1)
  {
LABEL_8:
    outlined destroy of ClientExperienceSignals?((uint64_t)v14, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    return 0;
  }
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x24BE9EAE0], MEMORY[0x24BE9EAC0]);
  v21 = Message.serializedData(partial:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v14, v2);
  return v21;
}

uint64_t PommesContext.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24640B018 + 4 * byte_246451EF8[a1]))(0xD000000000000013, 0x8000000246453840);
}

uint64_t sub_24640B018()
{
  return 0x656372756F73;
}

uint64_t sub_24640B02C()
{
  return 0x6E69616D6F64;
}

uint64_t sub_24640B040()
{
  return 0x64657265646E6572;
}

uint64_t sub_24640B064()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t sub_24640B07C()
{
  return 0x6F4374706D6F7270;
}

unint64_t sub_24640B0A0()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesContext.CodingKeys()
{
  unsigned __int8 *v0;

  return PommesContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesContext.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesContext.CodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesContext.CodingKeys()
{
  lazy protocol witness table accessor for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PommesContext.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;

  v52 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent?);
  MEMORY[0x24BDAC7A8](v3);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesContext.CodingKeys>);
  v12 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for PommesContext();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = &v18[*(int *)(v16 + 28)];
  v59 = v6;
  v19 = *(void (**)(void))(v6 + 104);
  v60 = v5;
  v19();
  v20 = MEMORY[0x24BEE4AF8];
  v64 = v15[8];
  *(_QWORD *)&v18[v64] = MEMORY[0x24BEE4AF8];
  v21 = v15[9];
  v61 = v18;
  v62 = v21;
  *(_QWORD *)&v18[v21] = v20;
  v22 = (uint64_t)&v18[v15[10]];
  v23 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v57 = v22;
  v24(v22, 1, 1, v23);
  v25 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys();
  v26 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    v29 = v57;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of ClientExperienceSignals?(v29, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  }
  else
  {
    v50 = v24;
    v63 = v23;
    v27 = v12;
    v68 = 0;
    lazy protocol witness table accessor for type PommesContext.Source and conformance PommesContext.Source();
    v28 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = (uint64_t)v61;
    *v61 = v65;
    LOBYTE(v65) = 1;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v33 = v62;
    *(_QWORD *)(v31 + 16) = v32;
    *(_QWORD *)(v31 + 24) = v34;
    LOBYTE(v65) = 2;
    v49 = 0;
    v35 = KeyedDecodingContainer.decode(_:forKey:)();
    v36 = v64;
    *(_BYTE *)(v31 + 32) = v35 & 1;
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v68 = 3;
    v38 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    v48 = v37;
    v47 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)(v31 + v36) = v65;
    v68 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)(v31 + v33) = v65;
    v68 = 5;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (*((_QWORD *)&v65 + 1) >> 60 == 15)
    {
      v39 = v55;
    }
    else
    {
      v48 = v65;
      v67 = 0;
      v65 = 0u;
      v66 = 0u;
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x24BE9EAE0], MEMORY[0x24BE9EAC0]);
      v40 = v63;
      Message.init(serializedData:extensions:partial:options:)();
      v41 = (uint64_t)v53;
      v39 = v55;
      v50((uint64_t)v53, 0, 1, v40);
      outlined assign with take of Com_Apple_Siri_Product_Proto_PromptContext?(v41, v57);
    }
    LOBYTE(v65) = 6;
    v42 = v14;
    KeyedDecodingContainer.decode(_:forKey:)();
    v43 = v52;
    v44 = (uint64_t)v51;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent.init(rawValue:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v28);
    v46 = v59;
    v45 = v60;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v44, 1, v60) == 1)
    {
      outlined destroy of ClientExperienceSignals?(v44, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v39, v44, v45);
      (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v58, v39, v45);
    }
    outlined init with copy of PommesContext(v31, v43);
    __swift_destroy_boxed_opaque_existential_0(v25);
    return outlined destroy of PommesContext(v31);
  }
}

uint64_t PommesContext.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesContext.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27 = *v3;
  v28 = 0;
  lazy protocol witness table accessor for type PommesContext.Source and conformance PommesContext.Source();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v27) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = type metadata accessor for PommesContext();
    v13 = *(_QWORD *)((char *)v3 + *(int *)(v12 + 32));
    v26 = v12;
    *(_QWORD *)&v27 = v13;
    v28 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v27 = *(_QWORD *)((char *)v3 + *(int *)(v26 + 36));
    v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined init with copy of Apple_Parsec_Siri_V2alpha_MultiUserContext?((uint64_t)v3 + *(int *)(v26 + 40), (uint64_t)v7, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1)
    {
      outlined destroy of ClientExperienceSignals?((uint64_t)v7, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
      v16 = 0;
      v17 = 0xF000000000000000;
    }
    else
    {
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem(&lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x24BE9EAE0], MEMORY[0x24BE9EAC0]);
      v18 = Message.serializedData(partial:)();
      v20 = v19;
      v21 = *(void (**)(char *, uint64_t))(v15 + 8);
      v22 = v18;
      v21(v7, v14);
      v16 = v22;
      v17 = v20;
    }
    *(_QWORD *)&v27 = v16;
    *((_QWORD *)&v27 + 1) = v17;
    v28 = 5;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v23 = outlined consume of Data._Representation?(v16, v17);
    MEMORY[0x24955A134](v23);
    LOBYTE(v27) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PommesContext@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PommesContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesContext(_QWORD *a1)
{
  return PommesContext.encode(to:)(a1);
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_24640BBEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x24640BDD0);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_24640BFC8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_24640BFFC + dword_24640C1D4[v0 >> 62]))();
}

uint64_t sub_24640C00C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL specialized static PommesContext.Source.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v9;
  char v10;

  v3 = *a1;
  v2 = a1[1];
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v2 >> 60;
  if (v2 >> 60 == 3)
  {
    if (v4 >> 60 != 3)
      goto LABEL_14;
    goto LABEL_9;
  }
  if ((_DWORD)v6 == 7)
  {
    if (v4 >> 60 != 7)
    {
LABEL_14:
      outlined copy of PommesContext.Source(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      outlined copy of PommesContext.Source(v3, v2);
      outlined consume of PommesContext.Source(v3, v2);
      outlined consume of PommesContext.Source(v5, v4);
      return 0;
    }
LABEL_9:
    outlined consume of PommesContext.Source(*a1, v2);
    outlined consume of PommesContext.Source(v5, v4);
    return 1;
  }
  if ((_DWORD)v6 == 11)
  {
    if (v4 >> 60 != 11)
      goto LABEL_14;
    goto LABEL_9;
  }
  if ((v4 >> 60) <= 0xB && ((1 << (v4 >> 60)) & 0x888) != 0)
    goto LABEL_14;
  if (v2 >> 60 == 15)
  {
    outlined copy of Data?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    outlined copy of PommesContext.Source(v5, v4);
    outlined copy of PommesContext.Source(v3, v2);
    outlined consume of PommesContext.Source(v3, v2);
    outlined consume of PommesContext.Source(v5, v4);
    if (v4 >> 60 == 15)
      return 1;
LABEL_21:
    outlined consume of Data._Representation?(v3, v2);
    outlined consume of Data._Representation?(v5, v4);
    return 0;
  }
  if (v4 >> 60 == 15)
  {
    outlined copy of PommesContext.Source(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    outlined copy of PommesContext.Source(v5, v4);
    outlined copy of PommesContext.Source(v3, v2);
    outlined copy of PommesContext.Source(v5, v4);
    outlined copy of PommesContext.Source(v3, v2);
    outlined consume of PommesContext.Source(v3, v2);
    outlined consume of PommesContext.Source(v5, v4);
    goto LABEL_21;
  }
  outlined copy of PommesContext.Source(*a1, v2);
  outlined copy of PommesContext.Source(v5, v4);
  outlined copy of PommesContext.Source(v3, v2);
  outlined copy of PommesContext.Source(v5, v4);
  outlined copy of PommesContext.Source(v3, v2);
  specialized static Data.== infix(_:_:)(v3, v2);
  v10 = v9;
  outlined consume of PommesContext.Source(v3, v2);
  outlined consume of PommesContext.Source(v5, v4);
  outlined consume of PommesContext.Source(v5, v4);
  outlined consume of PommesContext.Source(v3, v2);
  outlined consume of PommesContext.Source(v3, v2);
  return (v10 & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.CodingKeys, &unk_25179D358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.CodingKeys, &unk_25179D358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.CodingKeys, &unk_25179D358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.CodingKeys, &unk_25179D358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.CodingKeys and conformance PommesContext.Source.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.UnknownCodingKeys, &unk_25179D448);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.UnknownCodingKeys, &unk_25179D448);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.UnknownCodingKeys, &unk_25179D448);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.UnknownCodingKeys and conformance PommesContext.Source.UnknownCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.ModalityTranslatedCodingKeys, &unk_25179D428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.ModalityTranslatedCodingKeys, &unk_25179D428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.ModalityTranslatedCodingKeys, &unk_25179D428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.ModalityTranslatedCodingKeys and conformance PommesContext.Source.ModalityTranslatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PluginDefinedCodingKeys, &unk_25179D408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PluginDefinedCodingKeys, &unk_25179D408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PluginDefinedCodingKeys, &unk_25179D408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PluginDefinedCodingKeys and conformance PommesContext.Source.PluginDefinedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PegasusResponseCodingKeys, &unk_25179D3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PegasusResponseCodingKeys, &unk_25179D3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PegasusResponseCodingKeys, &unk_25179D3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source.PegasusResponseCodingKeys, &unk_25179D3E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source.PegasusResponseCodingKeys and conformance PommesContext.Source.PegasusResponseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x24955ADAC](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x24955ADAC](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t outlined consume of PommesContext.Source(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 60) > 0xB || ((1 << (a2 >> 60)) & 0x888) == 0)
    return outlined consume of Data._Representation?(a1, a2);
  return a1;
}

uint64_t type metadata accessor for PommesContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PommesContext;
  if (!type metadata singleton initialization cache for PommesContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined copy of PommesContext.Source(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 60) > 0xB || ((1 << (a2 >> 60)) & 0x888) == 0)
    return outlined copy of Data?(a1, a2);
  return a1;
}

uint64_t specialized static PommesContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  char v26;
  char v28;
  char v29;
  _BYTE v30[12];
  int v31;

  v4 = type metadata accessor for PommesContext();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = &v30[-v9];
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = &v30[-v12];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v30[-v14];
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 >> 60) > 0xB || ((1 << (v16 >> 60)) & 0x888) == 0)
  {
    v18 = *(_QWORD *)a1;
    outlined copy of Data?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v18 = 0;
    v16 = 0xF000000000000000;
  }
  v19 = *(_QWORD *)(a2 + 8);
  if ((v19 >> 60) <= 0xB && ((1 << (v19 >> 60)) & 0x888) != 0)
  {
    v20 = 0;
    v19 = 0xF000000000000000;
  }
  else
  {
    v20 = *(_QWORD *)a2;
    outlined copy of Data?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  }
  if (v16 >> 60 == 15)
  {
    if (v19 >> 60 == 15)
    {
      outlined init with copy of PommesContext(a1, (uint64_t)v15);
      outlined init with copy of PommesContext(a2, (uint64_t)v13);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (v19 >> 60 == 15)
  {
LABEL_15:
    outlined consume of Data._Representation?(v18, v16);
    outlined consume of Data._Representation?(v20, v19);
    outlined init with copy of PommesContext(a1, (uint64_t)v15);
    outlined init with copy of PommesContext(a2, (uint64_t)v13);
LABEL_25:
    outlined destroy of PommesContext((uint64_t)v13);
    outlined destroy of PommesContext((uint64_t)v15);
LABEL_30:
    outlined init with copy of PommesContext(a1, (uint64_t)v10);
    outlined init with copy of PommesContext(a2, (uint64_t)v7);
    goto LABEL_31;
  }
  outlined copy of Data._Representation(v18, v16);
  specialized static Data.== infix(_:_:)(v18, v16);
  v31 = v21;
  outlined consume of Data._Representation?(v20, v19);
  outlined consume of Data._Representation?(v18, v16);
  outlined consume of Data._Representation?(v18, v16);
  outlined init with copy of PommesContext(a1, (uint64_t)v15);
  outlined init with copy of PommesContext(a2, (uint64_t)v13);
  if ((v31 & 1) == 0)
    goto LABEL_25;
LABEL_17:
  v22 = *((_QWORD *)v15 + 3);
  v23 = *((_QWORD *)v13 + 3);
  if (!v22)
  {
    swift_bridgeObjectRetain();
    outlined destroy of PommesContext((uint64_t)v13);
    outlined destroy of PommesContext((uint64_t)v15);
    if (!v23)
    {
LABEL_34:
      outlined init with copy of PommesContext(a1, (uint64_t)v10);
      outlined init with copy of PommesContext(a2, (uint64_t)v7);
LABEL_35:
      v28 = v10[32];
      outlined destroy of PommesContext((uint64_t)v10);
      v29 = v7[32];
      outlined destroy of PommesContext((uint64_t)v7);
      v26 = v28 ^ v29 ^ 1;
      return v26 & 1;
    }
    goto LABEL_29;
  }
  if (!v23)
  {
    swift_bridgeObjectRetain();
    outlined destroy of PommesContext((uint64_t)v13);
    outlined destroy of PommesContext((uint64_t)v15);
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (*((_QWORD *)v15 + 2) == *((_QWORD *)v13 + 2) && v22 == v23)
  {
    swift_bridgeObjectRetain();
    outlined destroy of PommesContext((uint64_t)v13);
    outlined destroy of PommesContext((uint64_t)v15);
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  outlined destroy of PommesContext((uint64_t)v13);
  outlined destroy of PommesContext((uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined init with copy of PommesContext(a1, (uint64_t)v10);
  outlined init with copy of PommesContext(a2, (uint64_t)v7);
  if ((v25 & 1) != 0)
    goto LABEL_35;
LABEL_31:
  outlined destroy of PommesContext((uint64_t)v7);
  outlined destroy of PommesContext((uint64_t)v10);
  v26 = 0;
  return v26 & 1;
}

unint64_t lazy protocol witness table accessor for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.CodingKeys, &unk_25179D2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.CodingKeys, &unk_25179D2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.CodingKeys, &unk_25179D2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.CodingKeys, &unk_25179D2C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.CodingKeys and conformance PommesContext.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext.Source and conformance PommesContext.Source()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source and conformance PommesContext.Source;
  if (!lazy protocol witness table cache variable for type PommesContext.Source and conformance PommesContext.Source)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source, &type metadata for PommesContext.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source and conformance PommesContext.Source);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesContext.Source and conformance PommesContext.Source;
  if (!lazy protocol witness table cache variable for type PommesContext.Source and conformance PommesContext.Source)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PommesContext.Source, &type metadata for PommesContext.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext.Source and conformance PommesContext.Source);
  }
  return result;
}

uint64_t outlined init with copy of PommesContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PommesContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PommesContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Com_Apple_Siri_Product_Proto_PromptContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v8 = a2;
    result = MEMORY[0x24955ADAC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for PommesContext(_OWORD *a1, uint64_t a2, int *a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = (v7 >> 60) > 0xB || ((1 << (v7 >> 60)) & 0x888) == 0;
    if (!v8 || v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v25 = *(_QWORD *)a2;
      outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)v4 = v25;
      *((_QWORD *)v4 + 1) = v7;
    }
    v9 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v4 + 3) = v9;
    *((_BYTE *)v4 + 32) = *(_BYTE *)(a2 + 32);
    v10 = a3[7];
    v11 = (char *)v4 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v15 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v15) = *(_QWORD *)(a2 + v15);
    v16 = a3[10];
    v17 = (char *)v4 + v16;
    v18 = (const void *)(a2 + v16);
    v19 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return v4;
}

uint64_t destroy for PommesContext(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = a1[1];
  if (((v4 >> 60) > 0xB || ((1 << (v4 >> 60)) & 0x888) == 0) && v4 >> 60 != 15)
    outlined consume of Data._Representation(*a1, v4);
  swift_bridgeObjectRelease();
  v7 = (char *)a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (char *)a1 + *(int *)(a2 + 40);
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

uint64_t initializeWithCopy for PommesContext(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;

  v6 = a2[1];
  v7 = (v6 >> 60) > 0xB || ((1 << (v6 >> 60)) & 0x888) == 0;
  if (!v7 || v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v23 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(_QWORD *)(a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  v15 = a3[10];
  v16 = (void *)(a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithCopy for PommesContext(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *(_QWORD *)(a1 + 8) >> 60;
  if (v6 <= 0xB && ((1 << v6) & 0x888) != 0)
  {
    v8 = a2[1];
    v9 = (v8 >> 60) > 0xB || ((1 << (v8 >> 60)) & 0x888) == 0;
    if (v9 && v8 >> 60 != 15)
      goto LABEL_11;
    goto LABEL_17;
  }
  v8 = a2[1];
  if ((v8 >> 60) <= 0xB && ((1 << (v8 >> 60)) & 0x888) != 0)
  {
    outlined destroy of ClientExperienceSignals?(a1, (uint64_t *)&demangling cache variable for type metadata for (conversationContext: Data?));
LABEL_17:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
LABEL_11:
      v10 = *a2;
      outlined copy of Data._Representation(*a2, v8);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v8;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v8 >> 60 == 15)
  {
    outlined destroy of Data(a1);
    goto LABEL_17;
  }
  v25 = *a2;
  outlined copy of Data._Representation(*a2, a2[1]);
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v8;
  outlined consume of Data._Representation(v26, v27);
LABEL_18:
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[10];
  v17 = (void *)(a1 + v16);
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v14) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v14)
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_23;
  }
  if (v22)
  {
LABEL_23:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t initializeWithTake for PommesContext(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[10];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for PommesContext(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v24;

  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 >> 60) <= 0xB && ((1 << (v6 >> 60)) & 0x888) != 0)
    goto LABEL_5;
  v22 = *(_QWORD *)(a2 + 8);
  if ((v22 >> 60) <= 0xB && ((1 << (v22 >> 60)) & 0x888) != 0)
  {
    outlined destroy of ClientExperienceSignals?(a1, (uint64_t *)&demangling cache variable for type metadata for (conversationContext: Data?));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
    goto LABEL_5;
  if (v22 >> 60 == 15)
  {
    outlined destroy of Data(a1);
    goto LABEL_5;
  }
  v24 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v22;
  outlined consume of Data._Representation(v24, v6);
LABEL_6:
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  v13 = a3[10];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v11) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v11)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_11;
  }
  if (v19)
  {
LABEL_11:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24640D5D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[8]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24640D68C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[10];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for PommesContext()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  }
}

uint64_t *destroy for PommesContext.Source(uint64_t *result)
{
  unint64_t v1;
  BOOL v2;

  v1 = result[1];
  v2 = ((4 * (v1 >> 60)) & 0xC | ((v1 >> 60) >> 2)) != 0xF && ((4 * (v1 >> 60)) & 0xC) != 0;
  if (v1 >> 60 != 15 && !v2)
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PommesContext.Source(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (4 * ((v3 >> 60) & 3))
    v4 = (((v3 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v3 >> 60) & 3))) == 15;
  else
    v4 = 1;
  if (v4 && v3 >> 60 != 15)
  {
    v5 = *(_QWORD *)a2;
    outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    *a1 = v5;
    a1[1] = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

uint64_t *assignWithCopy for PommesContext.Source(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a1[1];
  v5 = a2[1];
  v6 = ((4 * (v5 >> 60)) & 0xC | ((v5 >> 60) >> 2)) == 0xF || ((4 * (v5 >> 60)) & 0xC) == 0;
  if (4 * ((v4 >> 60) & 3))
    v7 = (((v4 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v4 >> 60) & 3))) == 15;
  else
    v7 = 1;
  if (v7)
  {
    if (!v6)
    {
      if (v4 >> 60 != 15)
        outlined consume of Data._Representation(*a1, v4);
      goto LABEL_18;
    }
    if (v4 >> 60 != 15)
    {
      if (v5 >> 60 != 15)
      {
        v10 = *a2;
        outlined copy of Data._Representation(v10, v5);
        v11 = *a1;
        v12 = a1[1];
        *a1 = v10;
        a1[1] = v5;
        outlined consume of Data._Representation(v11, v12);
        return a1;
      }
      outlined destroy of Data((uint64_t)a1);
      goto LABEL_18;
    }
  }
  else if (!v6)
  {
LABEL_18:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 >> 60 == 15)
    goto LABEL_18;
  v8 = *a2;
  outlined copy of Data._Representation(v8, v5);
  *a1 = v8;
  a1[1] = v5;
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for PommesContext.Source(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v9;

  v4 = a1[1];
  if (4 * ((v4 >> 60) & 3))
    v5 = (((v4 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v4 >> 60) & 3))) == 15;
  else
    v5 = 1;
  if (v5)
  {
    v6 = a2[1];
    if (4 * ((v6 >> 60) & 3))
      v7 = (((v6 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v6 >> 60) & 3))) == 15;
    else
      v7 = 1;
    if (v7)
    {
      if (v4 >> 60 != 15)
      {
        if (v6 >> 60 != 15)
        {
          v9 = *a1;
          *a1 = *a2;
          a1[1] = v6;
          outlined consume of Data._Representation(v9, v4);
          return a1;
        }
        outlined destroy of Data((uint64_t)a1);
      }
    }
    else if (v4 >> 60 != 15)
    {
      outlined consume of Data._Representation(*a1, v4);
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesContext.Source(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 9 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 9);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  v4 = ((4 * (_DWORD)v3) & 0xC) == 0;
  v5 = ((4 * v3) & 0xC | (v3 >> 2)) ^ 0xF;
  if (v4)
    v5 = 0;
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PommesContext.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 8)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 9;
    if (a3 >= 9)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 9)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (12 - a2)) | ((12 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for PommesContext.Source(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  v2 = ((4 * (_DWORD)v1) & 0xC) == 0;
  v3 = ((4 * v1) & 0xC | (v1 >> 2)) ^ 0xF;
  if (v2)
    return 0;
  else
    return v3;
}

_QWORD *destructiveInjectEnumTag for PommesContext.Source(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xB)
  {
    *result = a2 - 12;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesContext.Source()
{
  return &type metadata for PommesContext.Source;
}

uint64_t getEnumTagSinglePayload for PommesContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24640DC64 + 4 * byte_246451F04[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24640DC98 + 4 * byte_246451EFF[v4]))();
}

uint64_t sub_24640DC98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24640DCA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24640DCA8);
  return result;
}

uint64_t sub_24640DCB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24640DCBCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24640DCC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24640DCC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PommesContext.CodingKeys()
{
  return &unk_25179D2C8;
}

uint64_t getEnumTagSinglePayload for PommesContext.Source.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesContext.Source.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24640DDC0 + 4 * byte_246451F0E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24640DDF4 + 4 * byte_246451F09[v4]))();
}

uint64_t sub_24640DDF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24640DDFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24640DE04);
  return result;
}

uint64_t sub_24640DE10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24640DE18);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24640DE1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24640DE24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PommesContext.Source.CodingKeys()
{
  return &unk_25179D358;
}

uint64_t storeEnumTagSinglePayload for PommesContext.Source.PegasusResponseCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24640DE80 + 4 * byte_246451F13[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24640DEA0 + 4 * byte_246451F18[v4]))();
}

_BYTE *sub_24640DE80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24640DEA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24640DEA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24640DEB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24640DEB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24640DEC0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PommesContext.Source.PegasusResponseCodingKeys()
{
  return &unk_25179D3E8;
}

void *type metadata accessor for PommesContext.Source.PluginDefinedCodingKeys()
{
  return &unk_25179D408;
}

void *type metadata accessor for PommesContext.Source.ModalityTranslatedCodingKeys()
{
  return &unk_25179D428;
}

void *type metadata accessor for PommesContext.Source.UnknownCodingKeys()
{
  return &unk_25179D448;
}

uint64_t specialized PommesContext.Source.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x5273757361676570 && a2 == 0xEF65736E6F707365;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65446E6967756C70 && a2 == 0xED000064656E6966
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000246455190
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized PommesContext.Source.PegasusResponseCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x8000000246453A20)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized PommesContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000246453840
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64657265646E6572 && a2 == 0xED00007374786554
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002464537F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F4374706D6F7270 && a2 == 0xED0000747865746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002464551B0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

const char *FeatureFlag.feature.getter()
{
  __int128 *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;

  outlined init with take of FeatureFlag(v0, (uint64_t)&v2);
  if ((v6 & 1) != 0)
    return specialized FeatureFlag.domainLocaleFeature(_:_:)(v2, v3, v4, v5);
  else
    return specialized FeatureFlag.domainFeature(for:)(v2, v3);
}

uint64_t outlined init with take of FeatureFlag(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t FeatureFlag.isOn.getter()
{
  __int128 *v0;
  char v1;
  _QWORD v3[5];

  v3[3] = &type metadata for FeatureFlag;
  v3[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v3[0] = swift_allocObject();
  outlined init with take of FeatureFlag(v0, v3[0] + 16);
  outlined retain of FeatureFlag((uint64_t)v0);
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v3);
  return v1 & 1;
}

const char *FeatureFlag.domain.getter()
{
  return "Pommes";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance FeatureFlag()
{
  return "Pommes";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance FeatureFlag()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    return specialized FeatureFlag.domainLocaleFeature(_:_:)(v1, v2, *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
  else
    return specialized FeatureFlag.domainFeature(for:)(v1, v2);
}

const char *specialized FeatureFlag.domainLocaleFeature(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  char v10;
  const char *v11;
  char v13;

  if (a4)
    v6 = a3;
  else
    v6 = 0;
  if (a4)
    v7 = a4;
  else
    v7 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 95;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  if (a1 == 7300455 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 1936744813 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (v6 == 0x524B5F6F6BLL && v7 == (void *)0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      return "geo_search_ko_KR";
    }
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      goto LABEL_17;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (a1 == 0x7A5F7374726F7073 && a2 == 0xEC0000004E435F68
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "sports_zh_CN";
  }
  else
  {
    v11 = "edutainment_zh_CN";
    if (a1 == 0xD000000000000011 && a2 == 0x80000002464552A0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else if (a1 == 0x687A5F636973756DLL && a2 == 0xEB000000004E435FLL)
    {
      swift_bridgeObjectRelease();
      return "music_zh_CN";
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        return "music_zh_CN";
      else
        return "";
    }
  }
  return v11;
}

const char *specialized FeatureFlag.domainFeature(for:)(uint64_t a1, uint64_t a2)
{
  const char *result;
  char v5;
  BOOL v7;

  if (a1 == 0x73676E6974697277 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "writings_search";
  }
  if (a1 == 7300455 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 1936744813 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "geo_search";
  }
  if (a1 == 0x6D6E696174756465 && a2 == 0xEB00000000746E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "edutainment_search";
  }
  if (a1 == 0x74616C736E617274 && a2 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "translation_search";
  }
  if (a1 == 0x636E75616C707061 && a2 == 0xE900000000000068)
    return "applaunch_search";
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v7 = a1 == 1936748641 && a2 == 0xE400000000000000;
  result = "applaunch_search";
  if ((v5 & 1) == 0 && !v7)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return "applaunch_search";
    result = "emergency_search";
    if (a1 != 0x636E656772656D65 || a2 != 0xE900000000000079)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return "emergency_search";
      else
        return "";
    }
  }
  return result;
}

uint64_t sub_24640EF9C()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t outlined retain of FeatureFlag(uint64_t a1)
{
  outlined copy of FeatureFlag(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined copy of FeatureFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for FeatureFlag(uint64_t a1)
{
  return outlined consume of FeatureFlag(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for FeatureFlag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of FeatureFlag(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for FeatureFlag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of FeatureFlag(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of FeatureFlag(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for FeatureFlag(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of FeatureFlag(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureFlag(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureFlag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for FeatureFlag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlag()
{
  return &type metadata for FeatureFlag;
}

uint64_t AppLaunchExperience.appsClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC20SiriInformationTypes19AppLaunchExperience_appsClientComponent;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppLaunchExperience.__allocating_init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  v18 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, id, double))(v5 + 336))(a1, v22, v17, v13, v18, a5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
  return v19;
}

id AppLaunchExperience.__allocating_init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(a1, a2, a3, a4, a5, a6);
}

id AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6)
{
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  objc_class *v23;
  id v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;

  v32 = a5;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v6[OBJC_IVAR____TtC20SiriInformationTypes19AppLaunchExperience_appsClientComponent];
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v31 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v17, a3, v18);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20 = v27;
  v19(v16, (uint64_t)v27, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BE6FC50], v9);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v21 = &v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  v22 = v29;
  *(_QWORD *)v21 = v28;
  *((_QWORD *)v21 + 1) = v22;
  *(double *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a6;
  v19(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], (uint64_t)v16, v13);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v32;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v6[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v12, v9);
  v23 = (objc_class *)type metadata accessor for Experience(0);
  v33.receiver = v6;
  v33.super_class = v23;
  v24 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v16, v13);
  v25(v20, v13);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v18);
  return v24;
}

id AppLaunchExperience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AppLaunchExperience.init(coder:)(a1);
}

id AppLaunchExperience.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSData();
  v8 = v1;
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v9)
  {
    v10 = (void *)v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppsClientComponent and conformance Apple_Parsec_Siri_V2alpha_AppsClientComponent();
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC20SiriInformationTypes19AppLaunchExperience_appsClientComponent, v7, v4);

    v15 = Experience.init(coder:)(a1);
    v16 = v15;

    if (v15)
  }
  else
  {

    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2463D2000, v12, v13, "AppLaunchExperience cannot be decoded", v14, 2u);
      MEMORY[0x24955AE30](v14, -1, -1);
    }

    type metadata accessor for AppLaunchExperience();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v15;
}

uint64_t type metadata accessor for AppLaunchExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AppLaunchExperience;
  if (!type metadata singleton initialization cache for AppLaunchExperience)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall AppLaunchExperience.encode(with:)(NSCoder with)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Class isa;
  void *v6;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppsClientComponent and conformance Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v2, v4);
  v6 = (void *)MEMORY[0x24955A5F0](0xD000000000000013, 0x80000002464552E0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  Experience.encode(with:)(with);
}

void AppLaunchExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AppLaunchExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t AppLaunchExperience.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC20SiriInformationTypes19AppLaunchExperience_appsClientComponent;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id AppLaunchExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppLaunchExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppsClientComponent and conformance Apple_Parsec_Siri_V2alpha_AppsClientComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppsClientComponent and conformance Apple_Parsec_Siri_V2alpha_AppsClientComponent;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppsClientComponent and conformance Apple_Parsec_Siri_V2alpha_AppsClientComponent)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BE70C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppsClientComponent and conformance Apple_Parsec_Siri_V2alpha_AppsClientComponent);
  }
  return result;
}

uint64_t ObjC metadata update function for AppLaunchExperience()
{
  return type metadata accessor for AppLaunchExperience();
}

uint64_t type metadata completion function for AppLaunchExperience()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AppLaunchExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppLaunchExperience.__allocating_init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

id AFPreferences.siriLanguageCode.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_languageCode);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    v1 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
  }
  return v1;
}

SiriInformationTypes::WarmupComponent_optional __swiftcall WarmupComponent.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SiriInformationTypes::WarmupComponent_optional)rawValue;
}

uint64_t WarmupComponent.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t lazy protocol witness table accessor for type WarmupComponent and conformance WarmupComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WarmupComponent and conformance WarmupComponent;
  if (!lazy protocol witness table cache variable for type WarmupComponent and conformance WarmupComponent)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for WarmupComponent, &type metadata for WarmupComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WarmupComponent and conformance WarmupComponent);
  }
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance WarmupComponent@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WarmupComponent(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t storeEnumTagSinglePayload for WarmupComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_246410294 + 4 * byte_246452775[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2464102C8 + 4 * byte_246452770[v4]))();
}

uint64_t sub_2464102C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2464102D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2464102D8);
  return result;
}

uint64_t sub_2464102E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2464102ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2464102F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2464102F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WarmupComponent()
{
  return &type metadata for WarmupComponent;
}

uint64_t PhoneCallExperience.phoneCall.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch19PhoneCallExperience_phoneCall;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions(0)), sel_init);
  v10 = (*(uint64_t (**)(char *, id, double))(v2 + 336))(v8, v9, a2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v10;
}

id PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:renderOptions:)(uint64_t a1, uint64_t a2, double a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return PhoneCallExperience.init(phoneCall:queryConfidenceScore:renderOptions:)(a1, a2, a3);
}

id PhoneCallExperience.init(phoneCall:queryConfidenceScore:renderOptions:)(uint64_t a1, uint64_t a2, double a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;

  v21 = a2;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v3[OBJC_IVAR____TtC21SiriInformationSearch19PhoneCallExperience_phoneCall];
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  v20 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v14, a1, v15);
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE6FC50], v6);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_associatedEntities] = MEMORY[0x24BEE4AF8];
  v16 = &v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_pluginIdentifier];
  *(_QWORD *)v16 = 0x73757361676570;
  *((_QWORD *)v16 + 1) = 0xE700000000000000;
  *(double *)&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_queryConfidence] = a3;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_userDialogAct], v13, v10);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_renderOptions] = v21;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v3[OBJC_IVAR____TtC21SiriInformationSearch10Experience_intent], v9, v6);
  v17 = (objc_class *)type metadata accessor for Experience(0);
  v22.receiver = v3;
  v22.super_class = v17;
  v18 = objc_msgSendSuper2(&v22, sel_init);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v15);
  return v18;
}

BOOL PhoneCallExperience.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallExperience.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallExperience.CodingKeys()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = specialized PhoneCallExperience.CodingKeys.rawValue.getter();
  v2 = v1;
  if (v0 == specialized PhoneCallExperience.CodingKeys.rawValue.getter() && v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallExperience.CodingKeys()
{
  Hasher.init(_seed:)();
  specialized PhoneCallExperience.CodingKeys.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallExperience.CodingKeys()
{
  specialized PhoneCallExperience.CodingKeys.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallExperience.CodingKeys()
{
  Hasher.init(_seed:)();
  specialized PhoneCallExperience.CodingKeys.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallExperience.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallExperience.CodingKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallExperience.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized PhoneCallExperience.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id PhoneCallExperience.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PhoneCallExperience.init(coder:)(a1);
}

id PhoneCallExperience.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  _BYTE v18[64];
  uint64_t v19;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NSData();
  v8 = v1;
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v9)
  {
    v10 = (void *)v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = 0;
    memset(&v18[32], 0, 32);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC21SiriInformationSearch19PhoneCallExperience_phoneCall, v7, v4);

    v15 = Experience.init(coder:)(a1);
    v16 = v15;

    if (v15)
  }
  else
  {

    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2463D2000, v12, v13, "Failed to extract phoneCall data", v14, 2u);
      MEMORY[0x24955AE30](v14, -1, -1);
    }

    type metadata accessor for PhoneCallExperience();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v15;
}

Swift::Void __swiftcall PhoneCallExperience.encode(with:)(NSCoder with)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Class isa;
  void *v6;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = (void *)MEMORY[0x24955A5F0](0x6C6143656E6F6870, 0xE90000000000006CLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  outlined consume of Data._Representation(v2, v4);
  Experience.encode(with:)(with);
}

void PhoneCallExperience.__allocating_init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.init(pluginId:queryConfidence:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.init(pluginId:queryConfidence:userDialogAct:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.init(pluginId:queryConfidence:userDialogAct:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.__allocating_init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PhoneCallExperience.init(pluginId:queryConfidence:userDialogAct:renderOptions:intent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PhoneCallExperience.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19PhoneCallExperience_phoneCall;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id PhoneCallExperience.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PhoneCallExperience();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized PhoneCallExperience.CodingKeys.rawValue.getter()
{
  return 0x6C6143656E6F6870;
}

uint64_t type metadata accessor for PhoneCallExperience()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PhoneCallExperience;
  if (!type metadata singleton initialization cache for PhoneCallExperience)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
    result = MEMORY[0x24955ADAC](MEMORY[0x24BE71040], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallExperience.CodingKeys and conformance PhoneCallExperience.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneCallExperience.CodingKeys and conformance PhoneCallExperience.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallExperience.CodingKeys and conformance PhoneCallExperience.CodingKeys)
  {
    result = MEMORY[0x24955ADAC](&protocol conformance descriptor for PhoneCallExperience.CodingKeys, &type metadata for PhoneCallExperience.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallExperience.CodingKeys and conformance PhoneCallExperience.CodingKeys);
  }
  return result;
}

uint64_t ObjC metadata update function for PhoneCallExperience()
{
  return type metadata accessor for PhoneCallExperience();
}

uint64_t type metadata completion function for PhoneCallExperience()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PhoneCallExperience()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:renderOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t storeEnumTagSinglePayload for PhoneCallExperience.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_246411414 + 4 * byte_246452850[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_246411434 + 4 * byte_246452855[v4]))();
}

_BYTE *sub_246411414(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_246411434(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24641143C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_246411444(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24641144C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_246411454(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallExperience.CodingKeys()
{
  return &type metadata for PhoneCallExperience.CodingKeys;
}

uint64_t static TransientAppEntity.defaultQuery.getter()
{
  return MEMORY[0x24BDB4B68]();
}

uint64_t TransientAppEntity.id.getter()
{
  return MEMORY[0x24BDB4B70]();
}

uint64_t static AppEntity.defaultResolverSpecification.getter()
{
  return MEMORY[0x24BDB4DB8]();
}

uint64_t type metadata accessor for IntentFile()
{
  return MEMORY[0x24BDB4F20]();
}

uint64_t EntityProperty.wrappedValue.modify()
{
  return MEMORY[0x24BDB52C8]();
}

uint64_t EntityProperty.wrappedValue.getter()
{
  return MEMORY[0x24BDB52D0]();
}

uint64_t EntityProperty.wrappedValue.setter()
{
  return MEMORY[0x24BDB52D8]();
}

uint64_t EntityProperty.projectedValue.getter()
{
  return MEMORY[0x24BDB52E0]();
}

uint64_t EntityProperty<>.init(title:)()
{
  return MEMORY[0x24BDB52F8]();
}

{
  return MEMORY[0x24BDB5300]();
}

{
  return MEMORY[0x24BDB5328]();
}

{
  return MEMORY[0x24BDB5330]();
}

{
  return MEMORY[0x24BDB5338]();
}

{
  return MEMORY[0x24BDB5340]();
}

uint64_t type metadata accessor for DisplayRepresentation.Image()
{
  return MEMORY[0x24BDB5DB0]();
}

uint64_t DisplayRepresentation.init(title:subtitle:image:)()
{
  return MEMORY[0x24BDB5DD8]();
}

uint64_t static PersistentlyIdentifiable.persistentIdentifier.getter()
{
  return MEMORY[0x24BDB6168]();
}

uint64_t TypeDisplayRepresentation.init(name:numericFormat:)()
{
  return MEMORY[0x24BDB61F8]();
}

uint64_t type metadata accessor for TypeDisplayRepresentation()
{
  return MEMORY[0x24BDB6200]();
}

uint64_t InstanceDisplayRepresentable.localizedStringResource.getter()
{
  return MEMORY[0x24BDB63B0]();
}

uint64_t static CharacterSet.uppercaseLetters.getter()
{
  return MEMORY[0x24BDCB678]();
}

uint64_t CharacterSet.contains(_:)()
{
  return MEMORY[0x24BDCB710]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return MEMORY[0x24BDCD320]();
}

uint64_t LocalizedStringResource.init(stringInterpolation:)()
{
  return MEMORY[0x24BDCD348]();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return MEMORY[0x24BDCD380]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDB60]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x24BDCDC40]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter()
{
  return MEMORY[0x24BE6FB80]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter()
{
  return MEMORY[0x24BE6FB88]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog()
{
  return MEMORY[0x24BE6FB90]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter()
{
  return MEMORY[0x24BE6FB98]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams()
{
  return MEMORY[0x24BE6FBC8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.sayIt.getter()
{
  return MEMORY[0x24BE6FBD8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder()
{
  return MEMORY[0x24BE6FBE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter()
{
  return MEMORY[0x24BE6FC20]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter()
{
  return MEMORY[0x24BE6FC28]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter()
{
  return MEMORY[0x24BE6FC30]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata()
{
  return MEMORY[0x24BE6FC38]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter()
{
  return MEMORY[0x24BE6FC48]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent.init(rawValue:)()
{
  return MEMORY[0x24BE6FC60]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent.rawValue.getter()
{
  return MEMORY[0x24BE6FC68]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent()
{
  return MEMORY[0x24BE6FC70]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter()
{
  return MEMORY[0x24BE6FC88]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse()
{
  return MEMORY[0x24BE6FC90]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem()
{
  return MEMORY[0x24BE70490]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity()
{
  return MEMORY[0x24BE70758]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType()
{
  return MEMORY[0x24BE708B0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience()
{
  return MEMORY[0x24BE70918]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItComponent.dialogIdentifier.getter()
{
  return MEMORY[0x24BE70928]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItComponent.hasListenAfterSpeaking_p.getter()
{
  return MEMORY[0x24BE70930]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent()
{
  return MEMORY[0x24BE70938]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals()
{
  return MEMORY[0x24BE709A0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext()
{
  return MEMORY[0x24BE70A58]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion()
{
  return MEMORY[0x24BE70A70]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding()
{
  return MEMORY[0x24BE70B38]();
}

uint64_t Apple_Parsec_Siri_V2alpha_CatDialogComponent.catID.getter()
{
  return MEMORY[0x24BE70B48]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent()
{
  return MEMORY[0x24BE70B50]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent()
{
  return MEMORY[0x24BE70B60]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.getter()
{
  return MEMORY[0x24BE70B88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.getter()
{
  return MEMORY[0x24BE70B90]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams()
{
  return MEMORY[0x24BE70B98]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent()
{
  return MEMORY[0x24BE70C28]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component()
{
  return MEMORY[0x24BE70C68]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter()
{
  return MEMORY[0x24BE70C80]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent()
{
  return MEMORY[0x24BE70C90]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.pegasusAudioType.getter()
{
  return MEMORY[0x24BE70CE0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.understanding.getter()
{
  return MEMORY[0x24BE70CE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.internalSignals.getter()
{
  return MEMORY[0x24BE70CF0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.playbackSignals.getter()
{
  return MEMORY[0x24BE70CF8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.audioSearchResults.getter()
{
  return MEMORY[0x24BE70D00]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.boltProxiedBundleID.getter()
{
  return MEMORY[0x24BE70D08]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.systemExtensionBundleID.getter()
{
  return MEMORY[0x24BE70D18]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.shouldPerformAppSelection.getter()
{
  return MEMORY[0x24BE70D20]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.launchID.getter()
{
  return MEMORY[0x24BE70D28]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent()
{
  return MEMORY[0x24BE70D38]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent()
{
  return MEMORY[0x24BE70E30]();
}

uint64_t type metadata accessor for Apple_Parsec_Responseframework_PatternComponent()
{
  return MEMORY[0x24BE70EC8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.renderedDialog.getter()
{
  return MEMORY[0x24BE70FB8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.hasRenderedDialog.getter()
{
  return MEMORY[0x24BE70FC0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter()
{
  return MEMORY[0x24BE70FC8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent()
{
  return MEMORY[0x24BE70FD0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams()
{
  return MEMORY[0x24BE71048]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter()
{
  return MEMORY[0x24BE71088]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter()
{
  return MEMORY[0x24BE710A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter()
{
  return MEMORY[0x24BE710A8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent()
{
  return MEMORY[0x24BE710C0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams()
{
  return MEMORY[0x24BE71248]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent()
{
  return MEMORY[0x24BE71278]();
}

uint64_t Apple_Parsec_Responseframework_PatternDrivenExperience.patternComponents.getter()
{
  return MEMORY[0x24BE71288]();
}

uint64_t Apple_Parsec_Responseframework_PatternDrivenExperience.patternSiriPluginIdentifier.getter()
{
  return MEMORY[0x24BE71290]();
}

uint64_t type metadata accessor for Apple_Parsec_Responseframework_PatternDrivenExperience()
{
  return MEMORY[0x24BE71298]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Span()
{
  return MEMORY[0x24BE9C120]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x24BE9C2B8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x24BE9C820]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x24BE9C828]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x24BE9CB28]();
}

uint64_t type metadata accessor for Siri_Nlu_External_LegacyNLContext.LegacyContextSource()
{
  return MEMORY[0x24BE9CBF8]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.strictPrompt.setter()
{
  return MEMORY[0x24BE9CC10]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.renderedTexts.getter()
{
  return MEMORY[0x24BE9CC18]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.renderedTexts.setter()
{
  return MEMORY[0x24BE9CC20]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.dictationPrompt.setter()
{
  return MEMORY[0x24BE9CC30]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.previousDomainName.getter()
{
  return MEMORY[0x24BE9CC48]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.previousDomainName.setter()
{
  return MEMORY[0x24BE9CC50]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.legacyContextSource.setter()
{
  return MEMORY[0x24BE9CC60]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.getter()
{
  return MEMORY[0x24BE9CC68]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.setter()
{
  return MEMORY[0x24BE9CC70]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.responseSemanticValues.getter()
{
  return MEMORY[0x24BE9CC90]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.responseSemanticValues.setter()
{
  return MEMORY[0x24BE9CC98]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.init()()
{
  return MEMORY[0x24BE9CCA0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_LegacyNLContext()
{
  return MEMORY[0x24BE9CCA8]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.setter()
{
  return MEMORY[0x24BE9EAC8]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.setter()
{
  return MEMORY[0x24BE9EAD0]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.init()()
{
  return MEMORY[0x24BE9EAD8]();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext()
{
  return MEMORY[0x24BE9EAE0]();
}

uint64_t type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues()
{
  return MEMORY[0x24BEA1720]();
}

uint64_t Graph.init()()
{
  return MEMORY[0x24BEA3530]();
}

uint64_t type metadata accessor for Graph()
{
  return MEMORY[0x24BEA3538]();
}

uint64_t InputOrigin.init(rawValue:)()
{
  return MEMORY[0x24BEA8A38]();
}

uint64_t type metadata accessor for InputOrigin()
{
  return MEMORY[0x24BEA8A48]();
}

uint64_t DeviceRestrictions.init(rawValue:)()
{
  return MEMORY[0x24BEA8D38]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x24BEA3FC8]();
}

{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x24BEA3FD0]();
}

{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x24BEA3FE8]();
}

{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x24BEA3FF0]();
}

{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return MEMORY[0x24BE5BA20]();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return MEMORY[0x24BE5BA38]();
}

uint64_t Google_Protobuf_StringValue.init(_:)()
{
  return MEMORY[0x24BE5BA48]();
}

uint64_t static Message.with(_:)()
{
  return MEMORY[0x24BE5C1F0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  MEMORY[0x24BDCF910](a1._countAndFlagsBits, a1._object);
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x24BDCF930](a1._countAndFlagsBits, a1._object);
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x24BDCF938]();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return MEMORY[0x24BDCF948]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0A80]();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return MEMORY[0x24BEE0A88]();
}

uint64_t String.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x24BEE0AC0]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE0B80]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFBC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x24BEE14C8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x24BDD0170]();
}

uint64_t NSCoder.decodeObject(of:forKey:)()
{
  return MEMORY[0x24BDD0178]();
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)()
{
  return MEMORY[0x24BDD0190]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x24BEE2508]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x24BEE25B8]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34C0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3930]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t type metadata accessor for KeyPath()
{
  return MEMORY[0x24BEE4698]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

