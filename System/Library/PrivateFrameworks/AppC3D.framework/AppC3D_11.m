void sub_2080C8C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080C8C80(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v28 = &off_24C08D790;
          v29 = v10;
          v30 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080C0CAC(&v26, (uint64_t)&v23);
          *(_QWORD *)a1 = v26;
          *(_OWORD *)(a1 + 8) = v27;
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v28 = &off_24C08D790;
          v20 = v30;
          if (v30)
          {
            v21 = (unint64_t *)&v30->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C8E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C8EAC()
{
  return 3;
}

_UNKNOWN **sub_2080C8EB4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080C8F08(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45[8];
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v14;
    v51 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v49 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v50);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v23;
    v51 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v49 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v50 = v5;
  v51 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v49 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080C8C80((uint64_t)v45, a1);
  sub_2080C8C80((uint64_t)&v43, a1);
  v32 = operator new(0x40uLL);
  v33 = v32;
  *v32 = &off_24C085808;
  if (v48 <= 0x10)
    v34 = 16;
  else
    v34 = v48;
  v52[0] = v46;
  v52[1] = v47 | (unint64_t)(v34 << 32);
  sub_2080C10E0((uint64_t)v32, (unsigned int *)v52);
  v53 = v43;
  v54 = v44;
  sub_2080C12F8((uint64_t)v33, (uint64_t)&v53);
  *v33 = &off_24C085808;
  *a2 = v33;
  if (!v50)
    goto LABEL_48;
  v36 = *v50;
  v35 = (std::__shared_weak_count *)v50[1];
  if (!v35)
    goto LABEL_46;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (v39)
  {
LABEL_46:
    if (!v36)
      goto LABEL_48;
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (v36)
LABEL_47:
    sub_2081E30F8((uint64_t)v50);
LABEL_48:
  v49 = &off_24C08D790;
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_2080C92E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)v16 = off_24C085388;
  v19 = v16[10];
  if ((_DWORD)v19 != -1)
    ((void (*)(uint64_t, unsigned int *))off_24C0863C0[v19])(v17 - 33, v16 + 4);
  v16[10] = -1;
  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080C9340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080C935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C9370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080C9384@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080C93C4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[3];
  unsigned int v46;
  double v47[3];
  __int128 v48;
  uint64_t v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086258, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v51, lpsrc, 3);
    v16 = (void *)v51;
    v17 = *(_QWORD *)(v51 + 16);
    v44 = *(_OWORD *)v51;
    v45[0] = v17;
    *(_QWORD *)&v51 = 0;
    operator delete(v16);
    sub_2080C8A64((uint64_t *)&v51, a1);
    *(_QWORD *)&v48 = &v44;
    *((_QWORD *)&v48 + 1) = &v51;
    *(_QWORD *)&result = sub_2080F5DDC((uint64_t *)&v48);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (v8)
    {
      v22 = *v8;
      v21 = (std::__shared_weak_count *)v8[1];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v22)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v26 = (unint64_t *)&v7->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (v8)
    {
      v29 = *v8;
      v28 = (std::__shared_weak_count *)v8[1];
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v29)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080C8C80((uint64_t)&v48, v5);
  *(_QWORD *)&v44 = &off_24C085808;
  if (HIDWORD(v49) <= 0x10)
    v33 = 16;
  else
    v33 = HIDWORD(v49);
  v50[0] = *((_QWORD *)&v48 + 1);
  v50[1] = v49 | (unint64_t)(v33 << 32);
  sub_2080C10E0((uint64_t)&v44, (unsigned int *)v50);
  v51 = v48;
  v52 = v49;
  sub_2080C12F8((uint64_t)&v44, (uint64_t)&v51);
  *(_QWORD *)&v44 = &off_24C085808;
  if (!v8)
    goto LABEL_53;
  v35 = *v8;
  v34 = (std::__shared_weak_count *)v8[1];
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (!v35)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (v35)
LABEL_52:
    sub_2081E30F8((uint64_t)v8);
LABEL_53:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = v46;
  *(_DWORD *)(a1 + 8) = DWORD2(v44);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = v47[0];
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v51, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_63;
  }
  *(_QWORD *)&v51 = a1 + 16;
  ((void (*)(__int128 *))off_24C0863F0[v41])(&v51);
LABEL_63:
  v43 = v46;
  result = v47[0];
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
  *(_QWORD *)&v44 = off_24C085388;
  if ((_DWORD)v43 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C0863C0[v43])(&v51, v45);
  return result;
}

uint64_t sub_2080C9954(uint64_t a1)
{
  uint64_t v2[3];

  sub_2080C8A64(v2, a1);
  return v2[0];
}

double sub_2080C997C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080C8A64((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_2080C9A0C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080C8C80((uint64_t)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2080C9A9C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E514E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E514E8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E514F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E514F0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E514F8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E514F8))
    {
LABEL_13:
      if (byte_253E5191F < 0)
      {
        sub_207CA40D8(&xmmword_253E518F0, (void *)qword_253E51908, unk_253E51910);
      }
      else
      {
        xmmword_253E518F0 = *(_OWORD *)&qword_253E51908;
        unk_253E51900 = unk_253E51918;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E518F0, &dword_207C77000);
      __cxa_guard_release(&qword_253E514F0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51500);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51500))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray16f>]", &qword_253E51920);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51920, &dword_207C77000);
      __cxa_guard_release(&qword_253E51500);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51508);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51508))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51510);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51510))
      {
        if (byte_253E51938[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51938, *(unint64_t *)&byte_253E51938[8]);
        else
          __p = *(std::string *)byte_253E51938;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51950);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51950, &dword_207C77000);
        __cxa_guard_release(&qword_253E51510);
      }
      if (byte_253E51967 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51950, *((unint64_t *)&xmmword_253E51950 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51950;
        v18 = unk_253E51960;
      }
      sub_208062F8C((char *)v17, (std::string *)&qword_253E51908);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51908, &dword_207C77000);
      __cxa_guard_release(&qword_253E514F8);
      goto LABEL_13;
    }
    if (byte_253E51937 >= 0)
      v6 = byte_253E51937;
    else
      v6 = unk_253E51928;
    if (byte_253E51937 >= 0)
      v7 = &qword_253E51920;
    else
      v7 = (uint64_t *)qword_253E51920;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51938[8] = v6;
      *(_QWORD *)&byte_253E51938[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51938 = v13;
    }
    else
    {
      v13 = byte_253E51938;
      byte_253E51938[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51938, &dword_207C77000);
    __cxa_guard_release(&qword_253E51508);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51907 < 0)
  {
    sub_207CA40D8(&xmmword_253E518D8, (void *)xmmword_253E518F0, *((unint64_t *)&xmmword_253E518F0 + 1));
  }
  else
  {
    xmmword_253E518D8 = xmmword_253E518F0;
    unk_253E518E8 = unk_253E51900;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E518D8, &dword_207C77000);
  __cxa_guard_release(&qword_253E514E8);
LABEL_2:
  if (byte_253E518EF >= 0)
    return &xmmword_253E518D8;
  else
    return (__int128 *)xmmword_253E518D8;
}

void sub_2080C9EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E514F8);
  __cxa_guard_abort(&qword_253E514F0);
  __cxa_guard_abort(&qword_253E514E8);
  _Unwind_Resume(a1);
}

void sub_2080C9F8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E514E8);
  _Unwind_Resume(a1);
}

void sub_2080C9FA4()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080C9FE0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080CA7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CA7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CA7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CA810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080CA824()
{
  return 65792;
}

_QWORD *sub_2080CA830@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080CA870(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085538;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080CA8D4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080C2CEC(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080CAAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080CAAF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v28 = &off_24C08D790;
          v29 = v10;
          v30 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080C2CEC(&v26, (uint64_t)&v23);
          *(_QWORD *)a1 = v26;
          *(_OWORD *)(a1 + 8) = v27;
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v28 = &off_24C08D790;
          v20 = v30;
          if (v30)
          {
            v21 = (unint64_t *)&v30->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080CAD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080CAD1C()
{
  return 4;
}

_UNKNOWN **sub_2080CAD24()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080CAD78(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45[8];
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v14;
    v51 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v49 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v50);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v23;
    v51 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v49 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v50 = v5;
  v51 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v49 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080CAAF0((uint64_t)v45, a1);
  sub_2080CAAF0((uint64_t)&v43, a1);
  v32 = operator new(0x40uLL);
  v33 = v32;
  *v32 = &off_24C085898;
  if (v48 <= 8)
    v34 = 8;
  else
    v34 = v48;
  v52[0] = v46;
  v52[1] = v47 | (unint64_t)(v34 << 32);
  sub_2080C3120((uint64_t)v32, (unsigned int *)v52);
  v53 = v43;
  v54 = v44;
  sub_2080C3338((uint64_t)v33, (uint64_t)&v53);
  *v33 = &off_24C085898;
  *a2 = v33;
  if (!v50)
    goto LABEL_48;
  v36 = *v50;
  v35 = (std::__shared_weak_count *)v50[1];
  if (!v35)
    goto LABEL_46;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (v39)
  {
LABEL_46:
    if (!v36)
      goto LABEL_48;
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (v36)
LABEL_47:
    sub_2081E30F8((uint64_t)v50);
LABEL_48:
  v49 = &off_24C08D790;
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_2080CB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)v16 = off_24C085538;
  v19 = v16[10];
  if ((_DWORD)v19 != -1)
    ((void (*)(uint64_t, unsigned int *))off_24C0863C0[v19])(v17 - 33, v16 + 4);
  v16[10] = -1;
  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080CB1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080CB1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080CB1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080CB1F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080CB234(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[3];
  unsigned int v46;
  double v47[3];
  __int128 v48;
  uint64_t v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086270, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v51, lpsrc, 4);
    v16 = (void *)v51;
    v17 = *(_QWORD *)(v51 + 16);
    v44 = *(_OWORD *)v51;
    v45[0] = v17;
    *(_QWORD *)&v51 = 0;
    operator delete(v16);
    sub_2080CA8D4((uint64_t *)&v51, a1);
    *(float *)&result = sub_207D5A1F4((uint64_t)&v44, (uint64_t)&v51);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (v8)
    {
      v22 = *v8;
      v21 = (std::__shared_weak_count *)v8[1];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v22)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v26 = (unint64_t *)&v7->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (v8)
    {
      v29 = *v8;
      v28 = (std::__shared_weak_count *)v8[1];
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v29)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080CAAF0((uint64_t)&v48, v5);
  *(_QWORD *)&v44 = &off_24C085898;
  if (HIDWORD(v49) <= 8)
    v33 = 8;
  else
    v33 = HIDWORD(v49);
  v50[0] = *((_QWORD *)&v48 + 1);
  v50[1] = v49 | (unint64_t)(v33 << 32);
  sub_2080C3120((uint64_t)&v44, (unsigned int *)v50);
  v51 = v48;
  v52 = v49;
  sub_2080C3338((uint64_t)&v44, (uint64_t)&v51);
  *(_QWORD *)&v44 = &off_24C085898;
  if (!v8)
    goto LABEL_53;
  v35 = *v8;
  v34 = (std::__shared_weak_count *)v8[1];
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (!v35)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (v35)
LABEL_52:
    sub_2081E30F8((uint64_t)v8);
LABEL_53:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = v46;
  *(_DWORD *)(a1 + 8) = DWORD2(v44);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = v47[0];
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v51, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_63;
  }
  *(_QWORD *)&v51 = a1 + 16;
  ((void (*)(__int128 *))off_24C0863F0[v41])(&v51);
LABEL_63:
  v43 = v46;
  result = v47[0];
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
  *(_QWORD *)&v44 = off_24C085538;
  if ((_DWORD)v43 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C0863C0[v43])(&v51, v45);
  return result;
}

uint64_t sub_2080CB7BC(uint64_t a1)
{
  uint64_t v2[3];

  sub_2080CA8D4(v2, a1);
  return v2[0];
}

double sub_2080CB7E4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080CA8D4((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_2080CB874@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080CAAF0((uint64_t)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2080CB904()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51518);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51518))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51520);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51520))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51528);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51528))
    {
LABEL_13:
      if (byte_253E519AF < 0)
      {
        sub_207CA40D8(&xmmword_253E51980, (void *)qword_253E51998, unk_253E519A0);
      }
      else
      {
        xmmword_253E51980 = *(_OWORD *)&qword_253E51998;
        unk_253E51990 = unk_253E519A8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51980, &dword_207C77000);
      __cxa_guard_release(&qword_253E51520);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51530);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51530))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray32f>]", &qword_253E519B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E519B0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51530);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51538);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51538))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51540);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51540))
      {
        if (byte_253E519C8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E519C8, *(unint64_t *)&byte_253E519C8[8]);
        else
          __p = *(std::string *)byte_253E519C8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E519E0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E519E0, &dword_207C77000);
        __cxa_guard_release(&qword_253E51540);
      }
      if (byte_253E519F7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E519E0, *((unint64_t *)&xmmword_253E519E0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E519E0;
        v18 = unk_253E519F0;
      }
      sub_207D59D2C((char *)v17, (std::string *)&qword_253E51998);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51998, &dword_207C77000);
      __cxa_guard_release(&qword_253E51528);
      goto LABEL_13;
    }
    if (byte_253E519C7 >= 0)
      v6 = byte_253E519C7;
    else
      v6 = unk_253E519B8;
    if (byte_253E519C7 >= 0)
      v7 = &qword_253E519B0;
    else
      v7 = (uint64_t *)qword_253E519B0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E519C8[8] = v6;
      *(_QWORD *)&byte_253E519C8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E519C8 = v13;
    }
    else
    {
      v13 = byte_253E519C8;
      byte_253E519C8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E519C8, &dword_207C77000);
    __cxa_guard_release(&qword_253E51538);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51997 < 0)
  {
    sub_207CA40D8(&xmmword_253E51968, (void *)xmmword_253E51980, *((unint64_t *)&xmmword_253E51980 + 1));
  }
  else
  {
    xmmword_253E51968 = xmmword_253E51980;
    unk_253E51978 = unk_253E51990;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51968, &dword_207C77000);
  __cxa_guard_release(&qword_253E51518);
LABEL_2:
  if (byte_253E5197F >= 0)
    return &xmmword_253E51968;
  else
    return (__int128 *)xmmword_253E51968;
}

void sub_2080CBD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51528);
  __cxa_guard_abort(&qword_253E51520);
  __cxa_guard_abort(&qword_253E51518);
  _Unwind_Resume(a1);
}

void sub_2080CBDF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51518);
  _Unwind_Resume(a1);
}

void sub_2080CBE0C()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080CBE48(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080CC61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CC640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CC654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CC678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080CC68C()
{
  return 65792;
}

_QWORD *sub_2080CC698@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080CC6D8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[3];
  uint64_t (**v60)();
  uint64_t *v61;
  std::__shared_weak_count *v62;
  size_t v63[2];
  _BYTE v64[48];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C085928;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  *(_DWORD *)v64 = 2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v64[4] = v6;
  v53 = *(_QWORD *)v64;
  v54 = HIDWORD(v6);
  *(_DWORD *)v64 = 1;
  *(_QWORD *)&v64[4] = v4 | (v5 << 32);
  v55 = *(_QWORD *)v64;
  v56 = v5;
  v57 = v6;
  v58 = *(_QWORD *)&v64[4];
  v51 = a3[1];
  v52 = a3[2];
  v50 = *a3;
  sub_2080BBAA4(a1, (__int128 *)&v53);
  v59[0] = v50;
  v59[1] = v51;
  v59[2] = v52;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_69;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_66;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_66;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_66;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v61 = v32;
    v62 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v60 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v61 = v23;
    v62 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v60 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_69:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v61 = v14;
  v62 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v60 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v61);
  }
LABEL_53:
  sub_2080BBD5C((uint64_t)v64, a1);
  v63[0] = (size_t)v59;
  v63[1] = (size_t)v64;
  sub_2080F33F8(v63);
  if (v61)
  {
    v42 = *v61;
    v41 = (std::__shared_weak_count *)v61[1];
    if (v41)
    {
      v43 = (unint64_t *)&v41->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      do
        v45 = __ldaxr(v43);
      while (__stlxr(v45 - 1, v43));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        if (!v42)
          goto LABEL_61;
        goto LABEL_60;
      }
    }
    if (v42)
LABEL_60:
      sub_2081E31E4((uint64_t)v61);
  }
LABEL_61:
  v60 = &off_24C08D790;
  v46 = v62;
  if (v62)
  {
    v47 = (unint64_t *)&v62->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
LABEL_66:
  *(_QWORD *)a1 = &off_24C085928;
  return a1;
}

void sub_2080CCAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C085028;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080CCBCC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085028;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080CCC30(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BB6E4(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 2;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(DWORD1(v30), 2);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080CCE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080CCE74(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BB6E4((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 2;
  *(_QWORD *)&v33[4] = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 2);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080CD0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080CD0D8()
{
  return 5;
}

_UNKNOWN **sub_2080CD0E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080CD134(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080CCE74((uint64_t)v42, a1);
  sub_2080CCE74((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080CC6D8((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080CD4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080CD504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080CD518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080CD52C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080CD56C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[3];
  _OWORD v53[3];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086288, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v53, lpsrc, 5);
    v16 = *(void **)&v53[0];
    v18 = *(_OWORD *)(*(_QWORD *)&v53[0] + 16);
    v17 = *(_OWORD *)(*(_QWORD *)&v53[0] + 32);
    v46 = **(_OWORD **)&v53[0];
    v47 = v18;
    v48 = v17;
    *(_QWORD *)&v53[0] = 0;
    operator delete(v16);
    sub_2080CCC30((uint64_t)v53, a1);
    *(_QWORD *)&v52[0] = &v46;
    *((_QWORD *)&v52[0] + 1) = v53;
    sub_2080F33F8((size_t *)v52);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    if (v8)
    {
      v23 = *v8;
      v22 = (std::__shared_weak_count *)v8[1];
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v23)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v27 = (unint64_t *)&v7->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (v8)
    {
      v30 = *v8;
      v29 = (std::__shared_weak_count *)v8[1];
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080CCE74((uint64_t)v53, v5);
  v52[0] = v53[0];
  v52[1] = v53[1];
  v52[2] = v53[2];
  sub_2080CC6D8((uint64_t)&v46, (uint64_t)v53 + 8, v52);
  if (v8)
  {
    v35 = *v8;
    v34 = (std::__shared_weak_count *)v8[1];
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (!v35)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    if (v35)
LABEL_49:
      sub_2081E30F8((uint64_t)v8);
  }
LABEL_50:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = DWORD2(v48);
  *(_DWORD *)(a1 + 8) = DWORD2(v46);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = *(double *)&v49;
      v45 = v50;
      *(_OWORD *)(a1 + 48) = v49;
      *(_OWORD *)(a1 + 64) = v45;
      *(_QWORD *)(a1 + 80) = v51;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C0863C0[v42])(v53, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_60;
  }
  *(_QWORD *)&v53[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0863F0[v41])(v53);
LABEL_60:
  v43 = DWORD2(v48);
  result = *(double *)&v49;
  v44 = v50;
  *(_OWORD *)(a1 + 48) = v49;
  *(_OWORD *)(a1 + 64) = v44;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)&v46 = off_24C085028;
  if ((_DWORD)v43 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C0863C0[v43])(v53, &v47);
  return result;
}

uint64_t sub_2080CDA74(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080CCC30((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080CDA9C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080CCC30((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080CDB2C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080CCE74((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080CDBBC()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51548);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51548))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51550);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51550))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51558);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51558))
    {
LABEL_13:
      if (byte_253E51A3F < 0)
      {
        sub_207CA40D8(&xmmword_253E51A10, (void *)qword_253E51A28, unk_253E51A30);
      }
      else
      {
        xmmword_253E51A10 = *(_OWORD *)&qword_253E51A28;
        unk_253E51A20 = unk_253E51A38;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51A10, &dword_207C77000);
      __cxa_guard_release(&qword_253E51550);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51560);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51560))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two8u>]", &qword_253E51A40);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51A40, &dword_207C77000);
      __cxa_guard_release(&qword_253E51560);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51568);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51568))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51570);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51570))
      {
        if (byte_253E51A58[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51A58, *(unint64_t *)&byte_253E51A58[8]);
        else
          __p = *(std::string *)byte_253E51A58;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51A70);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51A70, &dword_207C77000);
        __cxa_guard_release(&qword_253E51570);
      }
      if (byte_253E51A87 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51A70, *((unint64_t *)&xmmword_253E51A70 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51A70;
        v18 = unk_253E51A80;
      }
      sub_2080FE9C4((char *)v17, (std::string *)&qword_253E51A28);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51A28, &dword_207C77000);
      __cxa_guard_release(&qword_253E51558);
      goto LABEL_13;
    }
    if (byte_253E51A57 >= 0)
      v6 = byte_253E51A57;
    else
      v6 = unk_253E51A48;
    if (byte_253E51A57 >= 0)
      v7 = &qword_253E51A40;
    else
      v7 = (uint64_t *)qword_253E51A40;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51A58[8] = v6;
      *(_QWORD *)&byte_253E51A58[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51A58 = v13;
    }
    else
    {
      v13 = byte_253E51A58;
      byte_253E51A58[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51A58, &dword_207C77000);
    __cxa_guard_release(&qword_253E51568);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51A27 < 0)
  {
    sub_207CA40D8(&xmmword_253E519F8, (void *)xmmword_253E51A10, *((unint64_t *)&xmmword_253E51A10 + 1));
  }
  else
  {
    xmmword_253E519F8 = xmmword_253E51A10;
    unk_253E51A08 = unk_253E51A20;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E519F8, &dword_207C77000);
  __cxa_guard_release(&qword_253E51548);
LABEL_2:
  if (byte_253E51A0F >= 0)
    return &xmmword_253E519F8;
  else
    return (__int128 *)xmmword_253E519F8;
}

void sub_2080CE010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51558);
  __cxa_guard_abort(&qword_253E51550);
  __cxa_guard_abort(&qword_253E51548);
  _Unwind_Resume(a1);
}

void sub_2080CE0AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51548);
  _Unwind_Resume(a1);
}

void sub_2080CE0C4()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080CE100(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080CE8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CE8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CE90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080CE930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080CE944()
{
  return 65792;
}

_QWORD *sub_2080CE950@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080CE990(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];
  uint64_t (**v61)();
  uint64_t *v62;
  std::__shared_weak_count *v63;
  uint64_t v64[2];
  _BYTE v65[48];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0859B8;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10)
    v5 = 16;
  else
    v5 = v5;
  *(_DWORD *)v65 = 2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v65[4] = v6;
  v54 = *(_QWORD *)v65;
  v55 = HIDWORD(v6);
  *(_DWORD *)v65 = 1;
  *(_QWORD *)&v65[4] = v4 | (v5 << 32);
  v56 = *(_QWORD *)v65;
  v57 = v5;
  v58 = v6;
  v59 = *(_QWORD *)&v65[4];
  v52 = a3[1];
  v53 = a3[2];
  v51 = *a3;
  sub_2080C1E40(a1, (__int128 *)&v54);
  v60[0] = v51;
  v60[1] = v52;
  v60[2] = v53;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_69;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_66;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_66;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_66;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v62 = v32;
    v63 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v61 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v62 = v23;
    v63 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v61 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_69:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v62 = v14;
  v63 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v61 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v62);
  }
LABEL_53:
  sub_2080C20F8((uint64_t)v65, a1);
  v64[0] = (uint64_t)v60;
  v64[1] = (uint64_t)v65;
  v41.n128_u64[0] = sub_2080F680C(v64);
  if (v62)
  {
    v43 = *v62;
    v42 = (std::__shared_weak_count *)v62[1];
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
        if (!v43)
          goto LABEL_61;
        goto LABEL_60;
      }
    }
    if (v43)
LABEL_60:
      sub_2081E31E4((uint64_t)v62);
  }
LABEL_61:
  v61 = &off_24C08D790;
  v47 = v63;
  if (v63)
  {
    v48 = (unint64_t *)&v63->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v41);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_66:
  *(_QWORD *)a1 = &off_24C0859B8;
  return a1;
}

void sub_2080CED64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C085418;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080CEE84(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085418;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080CEEE8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C198C(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 2;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(DWORD1(v30), 2);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080CF110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080CF12C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C198C((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 2;
  *(_QWORD *)&v33[4] = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 2);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080CF374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080CF390()
{
  return 7;
}

_UNKNOWN **sub_2080CF398()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080CF3EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080CF12C((uint64_t)v42, a1);
  sub_2080CF12C((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080CE990((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080CF7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080CF7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080CF7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080CF7E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080CF824(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[3];
  _OWORD v53[3];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0862A0, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v53, lpsrc, 7);
    v16 = *(void **)&v53[0];
    v18 = *(_OWORD *)(*(_QWORD *)&v53[0] + 16);
    v17 = *(_OWORD *)(*(_QWORD *)&v53[0] + 32);
    v46 = **(_OWORD **)&v53[0];
    v47 = v18;
    v48 = v17;
    *(_QWORD *)&v53[0] = 0;
    operator delete(v16);
    sub_2080CEEE8((uint64_t)v53, a1);
    *(_QWORD *)&v52[0] = &v46;
    *((_QWORD *)&v52[0] + 1) = v53;
    *(_QWORD *)&result = sub_2080F680C((uint64_t *)v52);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    if (v8)
    {
      v23 = *v8;
      v22 = (std::__shared_weak_count *)v8[1];
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v23)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v27 = (unint64_t *)&v7->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (v8)
    {
      v30 = *v8;
      v29 = (std::__shared_weak_count *)v8[1];
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080CF12C((uint64_t)v53, v5);
  v52[0] = v53[0];
  v52[1] = v53[1];
  v52[2] = v53[2];
  sub_2080CE990((uint64_t)&v46, (uint64_t)v53 + 8, v52);
  if (v8)
  {
    v35 = *v8;
    v34 = (std::__shared_weak_count *)v8[1];
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (!v35)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    if (v35)
LABEL_49:
      sub_2081E30F8((uint64_t)v8);
  }
LABEL_50:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = DWORD2(v48);
  *(_DWORD *)(a1 + 8) = DWORD2(v46);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = *(double *)&v49;
      v45 = v50;
      *(_OWORD *)(a1 + 48) = v49;
      *(_OWORD *)(a1 + 64) = v45;
      *(_QWORD *)(a1 + 80) = v51;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C0863C0[v42])(v53, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_60;
  }
  *(_QWORD *)&v53[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0863F0[v41])(v53);
LABEL_60:
  v43 = DWORD2(v48);
  result = *(double *)&v49;
  v44 = v50;
  *(_OWORD *)(a1 + 48) = v49;
  *(_OWORD *)(a1 + 64) = v44;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)&v46 = off_24C085418;
  if ((_DWORD)v43 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C0863C0[v43])(v53, &v47);
  return result;
}

uint64_t sub_2080CFD2C(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080CEEE8((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080CFD54@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080CEEE8((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080CFDE4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080CF12C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080CFE74()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51578);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51578))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51580);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51580))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51588);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51588))
    {
LABEL_13:
      if (byte_253E51ACF < 0)
      {
        sub_207CA40D8(&xmmword_253E51AA0, (void *)qword_253E51AB8, unk_253E51AC0);
      }
      else
      {
        xmmword_253E51AA0 = *(_OWORD *)&qword_253E51AB8;
        unk_253E51AB0 = unk_253E51AC8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51AA0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51580);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51590);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51590))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two16f>]", &qword_253E51AD0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51AD0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51590);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51598);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51598))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E515A0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E515A0))
      {
        if (byte_253E51AE8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51AE8, *(unint64_t *)&byte_253E51AE8[8]);
        else
          __p = *(std::string *)byte_253E51AE8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51B00);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51B00, &dword_207C77000);
        __cxa_guard_release(&qword_253E515A0);
      }
      if (byte_253E51B17 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51B00, *((unint64_t *)&xmmword_253E51B00 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51B00;
        v18 = unk_253E51B10;
      }
      sub_2080FEAEC((char *)v17, (std::string *)&qword_253E51AB8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51AB8, &dword_207C77000);
      __cxa_guard_release(&qword_253E51588);
      goto LABEL_13;
    }
    if (byte_253E51AE7 >= 0)
      v6 = byte_253E51AE7;
    else
      v6 = unk_253E51AD8;
    if (byte_253E51AE7 >= 0)
      v7 = &qword_253E51AD0;
    else
      v7 = (uint64_t *)qword_253E51AD0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51AE8[8] = v6;
      *(_QWORD *)&byte_253E51AE8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51AE8 = v13;
    }
    else
    {
      v13 = byte_253E51AE8;
      byte_253E51AE8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51AE8, &dword_207C77000);
    __cxa_guard_release(&qword_253E51598);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51AB7 < 0)
  {
    sub_207CA40D8(&xmmword_253E51A88, (void *)xmmword_253E51AA0, *((unint64_t *)&xmmword_253E51AA0 + 1));
  }
  else
  {
    xmmword_253E51A88 = xmmword_253E51AA0;
    unk_253E51A98 = unk_253E51AB0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51A88, &dword_207C77000);
  __cxa_guard_release(&qword_253E51578);
LABEL_2:
  if (byte_253E51A9F >= 0)
    return &xmmword_253E51A88;
  else
    return (__int128 *)xmmword_253E51A88;
}

void sub_2080D02C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51588);
  __cxa_guard_abort(&qword_253E51580);
  __cxa_guard_abort(&qword_253E51578);
  _Unwind_Resume(a1);
}

void sub_2080D0364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51578);
  _Unwind_Resume(a1);
}

void sub_2080D037C()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080D03B8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080D0B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D0BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D0BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D0BFC()
{
  return 65792;
}

_QWORD *sub_2080D0C08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080D0C48(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];
  uint64_t (**v61)();
  uint64_t *v62;
  std::__shared_weak_count *v63;
  uint64_t v64[2];
  _BYTE v65[48];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C085A48;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 8)
    v5 = 8;
  else
    v5 = v5;
  *(_DWORD *)v65 = 2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v65[4] = v6;
  v54 = *(_QWORD *)v65;
  v55 = HIDWORD(v6);
  *(_DWORD *)v65 = 1;
  *(_QWORD *)&v65[4] = v4 | (v5 << 32);
  v56 = *(_QWORD *)v65;
  v57 = v5;
  v58 = v6;
  v59 = *(_QWORD *)&v65[4];
  v52 = a3[1];
  v53 = a3[2];
  v51 = *a3;
  sub_2080C3E7C(a1, (__int128 *)&v54);
  v60[0] = v51;
  v60[1] = v52;
  v60[2] = v53;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_69;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_66;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_66;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_66;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v62 = v32;
    v63 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v61 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v62 = v23;
    v63 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v61 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_69:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v62 = v14;
  v63 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v61 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v62);
  }
LABEL_53:
  sub_2080C4134((uint64_t)v65, a1);
  v64[0] = (uint64_t)v60;
  v64[1] = (uint64_t)v65;
  v41.n128_f32[0] = sub_2080F800C(v64);
  if (v62)
  {
    v43 = *v62;
    v42 = (std::__shared_weak_count *)v62[1];
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
        if (!v43)
          goto LABEL_61;
        goto LABEL_60;
      }
    }
    if (v43)
LABEL_60:
      sub_2081E31E4((uint64_t)v62);
  }
LABEL_61:
  v61 = &off_24C08D790;
  v47 = v63;
  if (v63)
  {
    v48 = (unint64_t *)&v63->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v41);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_66:
  *(_QWORD *)a1 = &off_24C085A48;
  return a1;
}

void sub_2080D101C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C0855C8;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080D113C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0855C8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080D11A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C39C8(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 2;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(DWORD1(v30), 2);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080D13C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080D13E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C39C8((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 2;
  *(_QWORD *)&v33[4] = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 2);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080D162C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D1648()
{
  return 8;
}

_UNKNOWN **sub_2080D1650()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080D16A4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080D13E4((uint64_t)v42, a1);
  sub_2080D13E4((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080D0C48((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080D1A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080D1A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080D1A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080D1A9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080D1ADC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[3];
  _OWORD v53[3];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0862B8, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v53, lpsrc, 8);
    v16 = *(void **)&v53[0];
    v18 = *(_OWORD *)(*(_QWORD *)&v53[0] + 16);
    v17 = *(_OWORD *)(*(_QWORD *)&v53[0] + 32);
    v46 = **(_OWORD **)&v53[0];
    v47 = v18;
    v48 = v17;
    *(_QWORD *)&v53[0] = 0;
    operator delete(v16);
    sub_2080D11A0((uint64_t)v53, a1);
    *(_QWORD *)&v52[0] = &v46;
    *((_QWORD *)&v52[0] + 1) = v53;
    *(float *)&result = sub_2080F800C((uint64_t *)v52);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    if (v8)
    {
      v23 = *v8;
      v22 = (std::__shared_weak_count *)v8[1];
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v23)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v27 = (unint64_t *)&v7->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (v8)
    {
      v30 = *v8;
      v29 = (std::__shared_weak_count *)v8[1];
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080D13E4((uint64_t)v53, v5);
  v52[0] = v53[0];
  v52[1] = v53[1];
  v52[2] = v53[2];
  sub_2080D0C48((uint64_t)&v46, (uint64_t)v53 + 8, v52);
  if (v8)
  {
    v35 = *v8;
    v34 = (std::__shared_weak_count *)v8[1];
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (!v35)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    if (v35)
LABEL_49:
      sub_2081E30F8((uint64_t)v8);
  }
LABEL_50:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = DWORD2(v48);
  *(_DWORD *)(a1 + 8) = DWORD2(v46);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = *(double *)&v49;
      v45 = v50;
      *(_OWORD *)(a1 + 48) = v49;
      *(_OWORD *)(a1 + 64) = v45;
      *(_QWORD *)(a1 + 80) = v51;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C0863C0[v42])(v53, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_60;
  }
  *(_QWORD *)&v53[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0863F0[v41])(v53);
LABEL_60:
  v43 = DWORD2(v48);
  result = *(double *)&v49;
  v44 = v50;
  *(_OWORD *)(a1 + 48) = v49;
  *(_OWORD *)(a1 + 64) = v44;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)&v46 = off_24C0855C8;
  if ((_DWORD)v43 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C0863C0[v43])(v53, &v47);
  return result;
}

uint64_t sub_2080D1FE4(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080D11A0((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080D200C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D11A0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080D209C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D13E4((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080D212C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E515A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E515A8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E515B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E515B0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E515B8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E515B8))
    {
LABEL_13:
      if (byte_253E51B5F < 0)
      {
        sub_207CA40D8(&xmmword_253E51B30, (void *)qword_253E51B48, unk_253E51B50);
      }
      else
      {
        xmmword_253E51B30 = *(_OWORD *)&qword_253E51B48;
        unk_253E51B40 = unk_253E51B58;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51B30, &dword_207C77000);
      __cxa_guard_release(&qword_253E515B0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E515C0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E515C0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two32f>]", &qword_253E51B60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51B60, &dword_207C77000);
      __cxa_guard_release(&qword_253E515C0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E515C8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E515C8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E515D0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E515D0))
      {
        if (byte_253E51B78[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51B78, *(unint64_t *)&byte_253E51B78[8]);
        else
          __p = *(std::string *)byte_253E51B78;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51B90);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51B90, &dword_207C77000);
        __cxa_guard_release(&qword_253E515D0);
      }
      if (byte_253E51BA7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51B90, *((unint64_t *)&xmmword_253E51B90 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51B90;
        v18 = unk_253E51BA0;
      }
      sub_2080FEC14((char *)v17, (std::string *)&qword_253E51B48);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51B48, &dword_207C77000);
      __cxa_guard_release(&qword_253E515B8);
      goto LABEL_13;
    }
    if (byte_253E51B77 >= 0)
      v6 = byte_253E51B77;
    else
      v6 = unk_253E51B68;
    if (byte_253E51B77 >= 0)
      v7 = &qword_253E51B60;
    else
      v7 = (uint64_t *)qword_253E51B60;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51B78[8] = v6;
      *(_QWORD *)&byte_253E51B78[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51B78 = v13;
    }
    else
    {
      v13 = byte_253E51B78;
      byte_253E51B78[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51B78, &dword_207C77000);
    __cxa_guard_release(&qword_253E515C8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51B47 < 0)
  {
    sub_207CA40D8(&xmmword_253E51B18, (void *)xmmword_253E51B30, *((unint64_t *)&xmmword_253E51B30 + 1));
  }
  else
  {
    xmmword_253E51B18 = xmmword_253E51B30;
    unk_253E51B28 = unk_253E51B40;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51B18, &dword_207C77000);
  __cxa_guard_release(&qword_253E515A8);
LABEL_2:
  if (byte_253E51B2F >= 0)
    return &xmmword_253E51B18;
  else
    return (__int128 *)xmmword_253E51B18;
}

void sub_2080D2580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E515B8);
  __cxa_guard_abort(&qword_253E515B0);
  __cxa_guard_abort(&qword_253E515A8);
  _Unwind_Resume(a1);
}

void sub_2080D261C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E515A8);
  _Unwind_Resume(a1);
}

void sub_2080D2634()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080D2670(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080D2E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D2E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D2E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D2EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D2EB4()
{
  return 65792;
}

_QWORD *sub_2080D2EC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080D2F00(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C085AD8;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  LODWORD(v17[0]) = 3;
  v6 = *(_QWORD *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  v11 = *(_QWORD *)&v17[0];
  v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(_QWORD *)((char *)v17 + 4) = v4 | (v5 << 32);
  v13 = *(_QWORD *)&v17[0];
  v14 = v5;
  v15 = v6;
  v16 = *(_QWORD *)((char *)v17 + 4);
  v9 = a3[1];
  v10 = a3[2];
  v8 = *a3;
  sub_2080BC360((uint64_t)a1, 17, (__int128 *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_2080BCAA4((uint64_t)a1, v17);
  *a1 = &off_24C085AD8;
  return a1;
}

void sub_2080D2FEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)v1 = off_24C0850B8;
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v4])(v2 - 81, v1 + 16);
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_2080D3030(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080D304C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0850B8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080D30B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v23 = &off_24C08D790;
  v24 = v10;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BBFA0(a1, (uint64_t)&v20);
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_23:
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080D3260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080D327C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v27 = &off_24C08D790;
  v28 = v10;
  v29 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BBFA0((uint64_t)&v23, (uint64_t)&v20);
  *(_QWORD *)a1 = v23;
  *(_OWORD *)(a1 + 8) = v24;
  *(_OWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v27 = &off_24C08D790;
    v17 = v29;
    if (!v29)
      return;
  }
  else
  {
LABEL_23:
    v27 = &off_24C08D790;
    v17 = v29;
    if (!v29)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080D344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2081DE77C(&a9);
  sub_2081DE77C((_QWORD *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_2080D3468()
{
  return 17;
}

_UNKNOWN **sub_2080D3470()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080D34C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080D327C((uint64_t)v42, a1);
  sub_2080D327C((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080D2F00(v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080D387C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080D3898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080D38AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080D38C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080D3900(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66[3];
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0862D0, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080D327C((uint64_t)&v67, v5);
    v66[0] = v67;
    v66[1] = v68;
    v66[2] = v69;
    sub_2080D2F00(&v60, (uint64_t)&v67 + 8, v66);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v62);
    *(_DWORD *)(a1 + 8) = DWORD2(v60);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v63;
        v59 = v64;
        *(_OWORD *)(a1 + 48) = v63;
        *(_OWORD *)(a1 + 64) = v59;
        *(_QWORD *)(a1 + 80) = v65;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v67, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v67 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v67);
LABEL_62:
    v43 = DWORD2(v62);
    result = *(double *)&v63;
    v44 = v64;
    *(_OWORD *)(a1 + 48) = v63;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v65;
    *(_QWORD *)&v60 = off_24C0850B8;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v67, &v61);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v67, lpsrc, 17);
  v16 = (void *)v67;
  v18 = *(_OWORD *)(v67 + 16);
  v17 = *(_OWORD *)(v67 + 32);
  v60 = *(_OWORD *)v67;
  v61 = v18;
  v62 = v17;
  *(_QWORD *)&v67 = 0;
  operator delete(v16);
  sub_2080D30B0((uint64_t)&v67, a1);
  *(_QWORD *)&v66[0] = &v60;
  *((_QWORD *)&v66[0] + 1) = &v67;
  if (DWORD1(v61) == 1 && DWORD1(v68) == 1)
  {
    sub_2080F3514((size_t *)v66);
  }
  else if (DWORD2(v60) && HIDWORD(v60) && (_DWORD)v61)
  {
    v45 = HIDWORD(v60) - 1;
    v46 = DWORD2(v61);
    v47 = DWORD2(v68);
    v48 = (_BYTE *)v60;
    v49 = (_BYTE *)v67;
    v50 = v61 - 1;
    if ((_DWORD)v61 != 1)
    {
      v51 = HIDWORD(v68);
      v52 = HIDWORD(v61);
      if (HIDWORD(v60) == 1)
      {
        do
        {
          *v49 = *v48;
          v49[1] = v48[1];
          v49[2] = v48[2];
          v48 += v52;
          v49 += v51;
          --v50;
        }
        while (v50);
      }
      else
      {
        v53 = 0;
        v54 = (_BYTE *)(v67 + 2);
        v55 = (_BYTE *)(v60 + 2);
        do
        {
          v56 = v55;
          v57 = v54;
          v58 = v45;
          do
          {
            *(v57 - 2) = *(v56 - 2);
            *(v57 - 1) = *(v56 - 1);
            *v57 = *v56;
            v57 += v47;
            v56 += v46;
            --v58;
          }
          while (v58);
          *(v57 - 2) = *(v56 - 2);
          *(v57 - 1) = *(v56 - 1);
          *v57 = *v56;
          v48 += v52;
          v49 += v51;
          ++v53;
          v54 += v51;
          v55 += v52;
        }
        while (v53 != v50);
      }
    }
    for (; v45; --v45)
    {
      *v49 = *v48;
      v49[1] = v48[1];
      v49[2] = v48[2];
      v48 += v46;
      v49 += v47;
    }
    *v49 = *v48;
    v49[1] = v48[1];
    v49[2] = v48[2];
  }
  return result;
}

uint64_t sub_2080D3F48(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080D30B0((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080D3F70@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 17
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D30B0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080D4000@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 17
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D327C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080D4090()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E515D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E515D8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E515E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E515E0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E515E8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E515E8))
    {
LABEL_13:
      if (byte_253E51BEF < 0)
      {
        sub_207CA40D8(&xmmword_253E51BC0, (void *)qword_253E51BD8, unk_253E51BE0);
      }
      else
      {
        xmmword_253E51BC0 = *(_OWORD *)&qword_253E51BD8;
        unk_253E51BD0 = unk_253E51BE8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51BC0, &dword_207C77000);
      __cxa_guard_release(&qword_253E515E0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E515F0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E515F0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Bgr8u>]", &qword_253E51BF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51BF0, &dword_207C77000);
      __cxa_guard_release(&qword_253E515F0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E515F8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E515F8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51600);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51600))
      {
        if (byte_253E51C08[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51C08, *(unint64_t *)&byte_253E51C08[8]);
        else
          __p = *(std::string *)byte_253E51C08;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51C20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51C20, &dword_207C77000);
        __cxa_guard_release(&qword_253E51600);
      }
      if (byte_253E51C37 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51C20, *((unint64_t *)&xmmword_253E51C20 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51C20;
        v18 = unk_253E51C30;
      }
      sub_2080FED3C((char *)v17, (std::string *)&qword_253E51BD8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51BD8, &dword_207C77000);
      __cxa_guard_release(&qword_253E515E8);
      goto LABEL_13;
    }
    if (byte_253E51C07 >= 0)
      v6 = byte_253E51C07;
    else
      v6 = unk_253E51BF8;
    if (byte_253E51C07 >= 0)
      v7 = &qword_253E51BF0;
    else
      v7 = (uint64_t *)qword_253E51BF0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51C08[8] = v6;
      *(_QWORD *)&byte_253E51C08[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51C08 = v13;
    }
    else
    {
      v13 = byte_253E51C08;
      byte_253E51C08[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51C08, &dword_207C77000);
    __cxa_guard_release(&qword_253E515F8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51BD7 < 0)
  {
    sub_207CA40D8(&xmmword_253E51BA8, (void *)xmmword_253E51BC0, *((unint64_t *)&xmmword_253E51BC0 + 1));
  }
  else
  {
    xmmword_253E51BA8 = xmmword_253E51BC0;
    unk_253E51BB8 = unk_253E51BD0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51BA8, &dword_207C77000);
  __cxa_guard_release(&qword_253E515D8);
LABEL_2:
  if (byte_253E51BBF >= 0)
    return &xmmword_253E51BA8;
  else
    return (__int128 *)xmmword_253E51BA8;
}

void sub_2080D44E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E515E8);
  __cxa_guard_abort(&qword_253E515E0);
  __cxa_guard_abort(&qword_253E515D8);
  _Unwind_Resume(a1);
}

void sub_2080D4580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E515D8);
  _Unwind_Resume(a1);
}

void sub_2080D4598()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080D45D4(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080D4DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D4DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D4DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D4E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D4E18()
{
  return 65792;
}

_QWORD *sub_2080D4E24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080D4E64(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C085B68;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  LODWORD(v17[0]) = 3;
  v6 = *(_QWORD *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  v11 = *(_QWORD *)&v17[0];
  v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(_QWORD *)((char *)v17 + 4) = v4 | (v5 << 32);
  v13 = *(_QWORD *)&v17[0];
  v14 = v5;
  v15 = v6;
  v16 = *(_QWORD *)((char *)v17 + 4);
  v9 = a3[1];
  v10 = a3[2];
  v8 = *a3;
  sub_2080BC360((uint64_t)a1, 21, (__int128 *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_2080BCAA4((uint64_t)a1, v17);
  *a1 = &off_24C085B68;
  return a1;
}

void sub_2080D4F50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)v1 = off_24C0850B8;
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v4])(v2 - 81, v1 + 16);
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_2080D4F94(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080D4FB0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0850B8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080D5014(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v23 = &off_24C08D790;
  v24 = v10;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BBFA0(a1, (uint64_t)&v20);
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_23:
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080D51C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080D51E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v27 = &off_24C08D790;
  v28 = v10;
  v29 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BBFA0((uint64_t)&v23, (uint64_t)&v20);
  *(_QWORD *)a1 = v23;
  *(_OWORD *)(a1 + 8) = v24;
  *(_OWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v27 = &off_24C08D790;
    v17 = v29;
    if (!v29)
      return;
  }
  else
  {
LABEL_23:
    v27 = &off_24C08D790;
    v17 = v29;
    if (!v29)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080D53B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2081DE77C(&a9);
  sub_2081DE77C((_QWORD *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_2080D53CC()
{
  return 21;
}

_UNKNOWN **sub_2080D53D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080D5428(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080D51E0((uint64_t)v42, a1);
  sub_2080D51E0((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080D4E64(v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080D57E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080D57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080D5810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080D5824@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080D5864(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66[3];
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0862E8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080D51E0((uint64_t)&v67, v5);
    v66[0] = v67;
    v66[1] = v68;
    v66[2] = v69;
    sub_2080D4E64(&v60, (uint64_t)&v67 + 8, v66);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v62);
    *(_DWORD *)(a1 + 8) = DWORD2(v60);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v63;
        v59 = v64;
        *(_OWORD *)(a1 + 48) = v63;
        *(_OWORD *)(a1 + 64) = v59;
        *(_QWORD *)(a1 + 80) = v65;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v67, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v67 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v67);
LABEL_62:
    v43 = DWORD2(v62);
    result = *(double *)&v63;
    v44 = v64;
    *(_OWORD *)(a1 + 48) = v63;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v65;
    *(_QWORD *)&v60 = off_24C0850B8;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v67, &v61);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v67, lpsrc, 21);
  v16 = (void *)v67;
  v18 = *(_OWORD *)(v67 + 16);
  v17 = *(_OWORD *)(v67 + 32);
  v60 = *(_OWORD *)v67;
  v61 = v18;
  v62 = v17;
  *(_QWORD *)&v67 = 0;
  operator delete(v16);
  sub_2080D5014((uint64_t)&v67, a1);
  *(_QWORD *)&v66[0] = &v60;
  *((_QWORD *)&v66[0] + 1) = &v67;
  if (DWORD1(v61) == 1 && DWORD1(v68) == 1)
  {
    sub_2080F3514((size_t *)v66);
  }
  else if (DWORD2(v60) && HIDWORD(v60) && (_DWORD)v61)
  {
    v45 = HIDWORD(v60) - 1;
    v46 = DWORD2(v61);
    v47 = DWORD2(v68);
    v48 = (_BYTE *)v60;
    v49 = (_BYTE *)v67;
    v50 = v61 - 1;
    if ((_DWORD)v61 != 1)
    {
      v51 = HIDWORD(v68);
      v52 = HIDWORD(v61);
      if (HIDWORD(v60) == 1)
      {
        do
        {
          *v49 = *v48;
          v49[1] = v48[1];
          v49[2] = v48[2];
          v48 += v52;
          v49 += v51;
          --v50;
        }
        while (v50);
      }
      else
      {
        v53 = 0;
        v54 = (_BYTE *)(v67 + 2);
        v55 = (_BYTE *)(v60 + 2);
        do
        {
          v56 = v55;
          v57 = v54;
          v58 = v45;
          do
          {
            *(v57 - 2) = *(v56 - 2);
            *(v57 - 1) = *(v56 - 1);
            *v57 = *v56;
            v57 += v47;
            v56 += v46;
            --v58;
          }
          while (v58);
          *(v57 - 2) = *(v56 - 2);
          *(v57 - 1) = *(v56 - 1);
          *v57 = *v56;
          v48 += v52;
          v49 += v51;
          ++v53;
          v54 += v51;
          v55 += v52;
        }
        while (v53 != v50);
      }
    }
    for (; v45; --v45)
    {
      *v49 = *v48;
      v49[1] = v48[1];
      v49[2] = v48[2];
      v48 += v46;
      v49 += v47;
    }
    *v49 = *v48;
    v49[1] = v48[1];
    v49[2] = v48[2];
  }
  return result;
}

uint64_t sub_2080D5EAC(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080D5014((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080D5ED4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D5014((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080D5F64@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D51E0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080D5FF4()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51608);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51608))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51610);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51610))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51618);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51618))
    {
LABEL_13:
      if (byte_253E51C7F < 0)
      {
        sub_207CA40D8(&xmmword_253E51C50, (void *)qword_253E51C68, unk_253E51C70);
      }
      else
      {
        xmmword_253E51C50 = *(_OWORD *)&qword_253E51C68;
        unk_253E51C60 = unk_253E51C78;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51C50, &dword_207C77000);
      __cxa_guard_release(&qword_253E51610);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51620);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51620))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgb8u>]", &qword_253E51C80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51C80, &dword_207C77000);
      __cxa_guard_release(&qword_253E51620);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51628);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51628))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51630);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51630))
      {
        if (byte_253E51C98[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51C98, *(unint64_t *)&byte_253E51C98[8]);
        else
          __p = *(std::string *)byte_253E51C98;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51CB0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51CB0, &dword_207C77000);
        __cxa_guard_release(&qword_253E51630);
      }
      if (byte_253E51CC7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51CB0, *((unint64_t *)&xmmword_253E51CB0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51CB0;
        v18 = unk_253E51CC0;
      }
      sub_207F17334((char *)v17, (std::string *)&qword_253E51C68);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51C68, &dword_207C77000);
      __cxa_guard_release(&qword_253E51618);
      goto LABEL_13;
    }
    if (byte_253E51C97 >= 0)
      v6 = byte_253E51C97;
    else
      v6 = unk_253E51C88;
    if (byte_253E51C97 >= 0)
      v7 = &qword_253E51C80;
    else
      v7 = (uint64_t *)qword_253E51C80;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51C98[8] = v6;
      *(_QWORD *)&byte_253E51C98[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51C98 = v13;
    }
    else
    {
      v13 = byte_253E51C98;
      byte_253E51C98[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51C98, &dword_207C77000);
    __cxa_guard_release(&qword_253E51628);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51C67 < 0)
  {
    sub_207CA40D8(&xmmword_253E51C38, (void *)xmmword_253E51C50, *((unint64_t *)&xmmword_253E51C50 + 1));
  }
  else
  {
    xmmword_253E51C38 = xmmword_253E51C50;
    unk_253E51C48 = unk_253E51C60;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51C38, &dword_207C77000);
  __cxa_guard_release(&qword_253E51608);
LABEL_2:
  if (byte_253E51C4F >= 0)
    return &xmmword_253E51C38;
  else
    return (__int128 *)xmmword_253E51C38;
}

void sub_2080D6448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51618);
  __cxa_guard_abort(&qword_253E51610);
  __cxa_guard_abort(&qword_253E51608);
  _Unwind_Resume(a1);
}

void sub_2080D64E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51608);
  _Unwind_Resume(a1);
}

void sub_2080D64FC()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080D6538(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080D6D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D6D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D6D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D6D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D6D7C()
{
  return 65792;
}

_QWORD *sub_2080D6D88@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080D6DC8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  _WORD *v56;
  int v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t (**v80)();
  uint64_t *v81;
  std::__shared_weak_count *v82;
  uint64_t v83[2];
  _BYTE v84[12];
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C085BF8;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10)
    v5 = 16;
  else
    v5 = v5;
  *(_DWORD *)v84 = 3;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v84[4] = v6;
  v71 = *(_QWORD *)v84;
  v72 = HIDWORD(v6);
  *(_DWORD *)v84 = 1;
  *(_QWORD *)&v84[4] = v4 | (v5 << 32);
  v73 = *(_QWORD *)v84;
  v74 = v5;
  v75 = v6;
  v76 = *(_QWORD *)&v84[4];
  v69 = a3[1];
  v70 = a3[2];
  v68 = *a3;
  sub_2080BFE90(a1, (__int128 *)&v71);
  v77 = v68;
  v78 = v69;
  v79 = v70;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_89;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_86;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_86;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_86;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v81 = v32;
    v82 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v80 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v81 = v23;
    v82 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v80 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_89:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v81 = v14;
  v82 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v80 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v81);
  }
LABEL_53:
  sub_2080C0148((uint64_t)v84, a1);
  v83[0] = (uint64_t)&v77;
  v83[1] = (uint64_t)v84;
  if (DWORD1(v78) == 1 && v85 == 1)
  {
    sub_2080F4F10(v83);
  }
  else if (DWORD2(v77) && HIDWORD(v77) && (_DWORD)v78)
  {
    v42 = HIDWORD(v77) - 1;
    v43 = DWORD2(v78);
    v44 = v86;
    v45 = (_WORD *)v77;
    v46 = *(_WORD **)v84;
    v47 = v78 - 1;
    if ((_DWORD)v78 != 1)
    {
      v48 = v87;
      v49 = HIDWORD(v78);
      if (HIDWORD(v77) == 1)
      {
        do
        {
          *v46 = *v45;
          v46[1] = v45[1];
          v46[2] = v45[2];
          v45 += v49;
          v46 += v48;
          --v47;
        }
        while (v47);
        goto LABEL_73;
      }
      v50 = 0;
      v51 = *(_QWORD *)v84 + 4;
      v52 = (_WORD *)(v77 + 4);
      v53 = 2 * HIDWORD(v78);
      v54 = 2 * DWORD2(v78);
      do
      {
        v55 = v52;
        v56 = (_WORD *)v51;
        v57 = v42;
        do
        {
          *(v56 - 2) = *(v55 - 2);
          *(v56 - 1) = *(v55 - 1);
          *v56 = *v55;
          v56 += v44;
          v55 = (_WORD *)((char *)v55 + v54);
          --v57;
        }
        while (v57);
        *(v56 - 2) = *(v55 - 2);
        *(v56 - 1) = *(v55 - 1);
        *v56 = *v55;
        v45 += v49;
        v46 += v48;
        ++v50;
        v51 += 2 * v48;
        v52 = (_WORD *)((char *)v52 + v53);
      }
      while (v50 != v47);
    }
    for (; v42; --v42)
    {
      *v46 = *v45;
      v46[1] = v45[1];
      v46[2] = v45[2];
      v45 += v43;
      v46 += v44;
    }
LABEL_73:
    *v46 = *v45;
    v46[1] = v45[1];
    v46[2] = v45[2];
    v58 = v81;
    if (!v81)
      goto LABEL_81;
    goto LABEL_74;
  }
  v58 = v81;
  if (!v81)
    goto LABEL_81;
LABEL_74:
  v60 = *v58;
  v59 = (std::__shared_weak_count *)v58[1];
  if (v59)
  {
    v61 = (unint64_t *)&v59->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      if (!v60)
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  if (v60)
LABEL_80:
    sub_2081E31E4((uint64_t)v81);
LABEL_81:
  v80 = &off_24C08D790;
  v64 = v82;
  if (v82)
  {
    v65 = (unint64_t *)&v82->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_86:
  *(_QWORD *)a1 = &off_24C085BF8;
  return a1;
}

void sub_2080D7300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C085268;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080D7420(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085268;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080D7484(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v23 = &off_24C08D790;
  v24 = v10;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BF9F4(a1, (uint64_t)&v20);
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_23:
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080D7634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080D7650(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v27 = &off_24C08D790;
  v28 = v10;
  v29 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BF9F4((uint64_t)&v23, (uint64_t)&v20);
  *(_QWORD *)a1 = v23;
  *(_OWORD *)(a1 + 8) = v24;
  *(_OWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v27 = &off_24C08D790;
    v17 = v29;
    if (!v29)
      return;
  }
  else
  {
LABEL_23:
    v27 = &off_24C08D790;
    v17 = v29;
    if (!v29)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080D7820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2081DE77C(&a9);
  sub_2081DE77C((_QWORD *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_2080D783C()
{
  return 22;
}

_UNKNOWN **sub_2080D7844()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080D7898(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080D7650((uint64_t)v42, a1);
  sub_2080D7650((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080D6DC8((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080D7C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080D7C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080D7C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080D7C94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

void sub_2080D7CD4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _WORD *v54;
  _WORD *v55;
  _WORD *v56;
  _WORD *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66[3];
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086300, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      if (v8)
      {
        v22 = *v8;
        v21 = (std::__shared_weak_count *)v8[1];
        if (v21)
        {
          v23 = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          do
            v25 = __ldaxr(v23);
          while (__stlxr(v25 - 1, v23));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (v22)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v26 = (unint64_t *)&v7->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (v8)
      {
        v29 = *v8;
        v28 = (std::__shared_weak_count *)v8[1];
        if (v28)
        {
          v30 = (unint64_t *)&v28->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (v29)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080D7650((uint64_t)&v67, v5);
    v66[0] = v67;
    v66[1] = v68;
    v66[2] = v69;
    sub_2080D6DC8((uint64_t)&v60, (uint64_t)&v67 + 8, v66);
    if (v8)
    {
      v34 = *v8;
      v33 = (std::__shared_weak_count *)v8[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          if (!v34)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v34)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v38 = (unint64_t *)&v7->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v40 = DWORD2(v62);
    *(_DWORD *)(a1 + 8) = DWORD2(v60);
    v41 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v41 == -1)
    {
      if ((_DWORD)v40 == -1)
      {
        v59 = v64;
        *(_OWORD *)(a1 + 48) = v63;
        *(_OWORD *)(a1 + 64) = v59;
        *(_QWORD *)(a1 + 80) = v65;
        return;
      }
    }
    else if ((_DWORD)v40 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v41])(&v67, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v67 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v40])(&v67);
LABEL_62:
    v42 = DWORD2(v62);
    v43 = v64;
    *(_OWORD *)(a1 + 48) = v63;
    *(_OWORD *)(a1 + 64) = v43;
    *(_QWORD *)(a1 + 80) = v65;
    *(_QWORD *)&v60 = off_24C085268;
    if ((_DWORD)v42 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v42])(&v67, &v61);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v67, lpsrc, 22);
  v16 = (void *)v67;
  v18 = *(_OWORD *)(v67 + 16);
  v17 = *(_OWORD *)(v67 + 32);
  v60 = *(_OWORD *)v67;
  v61 = v18;
  v62 = v17;
  *(_QWORD *)&v67 = 0;
  operator delete(v16);
  sub_2080D7484((uint64_t)&v67, a1);
  *(_QWORD *)&v66[0] = &v60;
  *((_QWORD *)&v66[0] + 1) = &v67;
  if (DWORD1(v61) == 1 && DWORD1(v68) == 1)
  {
    sub_2080F4F10((uint64_t *)v66);
    return;
  }
  if (DWORD2(v60) && HIDWORD(v60) && (_DWORD)v61)
  {
    v44 = HIDWORD(v60) - 1;
    v45 = DWORD2(v61);
    v46 = DWORD2(v68);
    v47 = (_WORD *)v60;
    v48 = (_WORD *)v67;
    v49 = v61 - 1;
    if ((_DWORD)v61 != 1)
    {
      v50 = HIDWORD(v68);
      v51 = HIDWORD(v61);
      if (HIDWORD(v60) == 1)
      {
        do
        {
          *v48 = *v47;
          v48[1] = v47[1];
          v48[2] = v47[2];
          v47 += v51;
          v48 += v50;
          --v49;
        }
        while (v49);
LABEL_80:
        *v48 = *v47;
        v48[1] = v47[1];
        v48[2] = v47[2];
        return;
      }
      v52 = 0;
      v53 = 2 * DWORD2(v68);
      v54 = (_WORD *)(v67 + 4);
      v55 = (_WORD *)(v60 + 4);
      do
      {
        v56 = v55;
        v57 = v54;
        v58 = v44;
        do
        {
          *(v57 - 2) = *(v56 - 2);
          *(v57 - 1) = *(v56 - 1);
          *v57 = *v56;
          v57 = (_WORD *)((char *)v57 + v53);
          v56 += v45;
          --v58;
        }
        while (v58);
        *(v57 - 2) = *(v56 - 2);
        *(v57 - 1) = *(v56 - 1);
        *v57 = *v56;
        v47 += v51;
        v48 += v50;
        ++v52;
        v54 += v50;
        v55 += v51;
      }
      while (v52 != v49);
    }
    for (; v44; --v44)
    {
      *v48 = *v47;
      v48[1] = v47[1];
      v48[2] = v47[2];
      v47 += v45;
      v48 += v46;
    }
    goto LABEL_80;
  }
}

uint64_t sub_2080D833C(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080D7484((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080D8364@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D7484((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080D83F4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D7650((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080D8484()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51638);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51638))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51640);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51640))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51648);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51648))
    {
LABEL_13:
      if (byte_253E51D0F < 0)
      {
        sub_207CA40D8(&xmmword_253E51CE0, (void *)qword_253E51CF8, unk_253E51D00);
      }
      else
      {
        xmmword_253E51CE0 = *(_OWORD *)&qword_253E51CF8;
        unk_253E51CF0 = unk_253E51D08;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51CE0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51640);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51650);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51650))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgb16u>]", &qword_253E51D10);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51D10, &dword_207C77000);
      __cxa_guard_release(&qword_253E51650);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51658);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51658))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51660);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51660))
      {
        if (byte_253E51D28[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51D28, *(unint64_t *)&byte_253E51D28[8]);
        else
          __p = *(std::string *)byte_253E51D28;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51D40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51D40, &dword_207C77000);
        __cxa_guard_release(&qword_253E51660);
      }
      if (byte_253E51D57 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51D40, *((unint64_t *)&xmmword_253E51D40 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51D40;
        v18 = unk_253E51D50;
      }
      sub_208063A18((char *)v17, (std::string *)&qword_253E51CF8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51CF8, &dword_207C77000);
      __cxa_guard_release(&qword_253E51648);
      goto LABEL_13;
    }
    if (byte_253E51D27 >= 0)
      v6 = byte_253E51D27;
    else
      v6 = unk_253E51D18;
    if (byte_253E51D27 >= 0)
      v7 = &qword_253E51D10;
    else
      v7 = (uint64_t *)qword_253E51D10;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51D28[8] = v6;
      *(_QWORD *)&byte_253E51D28[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51D28 = v13;
    }
    else
    {
      v13 = byte_253E51D28;
      byte_253E51D28[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51D28, &dword_207C77000);
    __cxa_guard_release(&qword_253E51658);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51CF7 < 0)
  {
    sub_207CA40D8(&xmmword_253E51CC8, (void *)xmmword_253E51CE0, *((unint64_t *)&xmmword_253E51CE0 + 1));
  }
  else
  {
    xmmword_253E51CC8 = xmmword_253E51CE0;
    unk_253E51CD8 = unk_253E51CF0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51CC8, &dword_207C77000);
  __cxa_guard_release(&qword_253E51638);
LABEL_2:
  if (byte_253E51CDF >= 0)
    return &xmmword_253E51CC8;
  else
    return (__int128 *)xmmword_253E51CC8;
}

void sub_2080D88D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51648);
  __cxa_guard_abort(&qword_253E51640);
  __cxa_guard_abort(&qword_253E51638);
  _Unwind_Resume(a1);
}

void sub_2080D8974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51638);
  _Unwind_Resume(a1);
}

void sub_2080D898C()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080D89C8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080D919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D91C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D91D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080D91F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D920C()
{
  return 65792;
}

_QWORD *sub_2080D9218@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080D9258(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C085C88;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  LODWORD(v17[0]) = 4;
  v6 = *(_QWORD *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  v11 = *(_QWORD *)&v17[0];
  v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(_QWORD *)((char *)v17 + 4) = v4 | (v5 << 32);
  v13 = *(_QWORD *)&v17[0];
  v14 = v5;
  v15 = v6;
  v16 = *(_QWORD *)((char *)v17 + 4);
  v9 = a3[1];
  v10 = a3[2];
  v8 = *a3;
  sub_2080BDA38((uint64_t)a1, 25, (__int128 *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_2080BE0E4((uint64_t)a1, v17);
  *a1 = &off_24C085C88;
  return a1;
}

void sub_2080D9344(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)v1 = off_24C085148;
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v4])(v2 - 81, v1 + 16);
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_2080D9388(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080D93A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085148;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080D9408(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080D9630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080D964C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080D9894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080D98B0()
{
  return 25;
}

_UNKNOWN **sub_2080D98B8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080D990C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080D964C((uint64_t)v42, a1);
  sub_2080D964C((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080D9258(v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080D9CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080D9CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080D9CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080D9D04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080D9D44(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086318, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080D964C((uint64_t)&v55, v5);
    v54[0] = v55;
    v54[1] = v56;
    v54[2] = v57;
    sub_2080D9258(&v48, (uint64_t)&v55 + 8, v54);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v50);
    *(_DWORD *)(a1 + 8) = DWORD2(v48);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v51;
        v45 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        *(_OWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 80) = v53;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v55, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v55 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v55);
LABEL_62:
    v43 = DWORD2(v50);
    result = *(double *)&v51;
    v44 = v52;
    *(_OWORD *)(a1 + 48) = v51;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)&v48 = off_24C085148;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v55, &v49);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v55, lpsrc, 25);
  v16 = (void *)v55;
  v18 = *(_OWORD *)(v55 + 16);
  v17 = *(_OWORD *)(v55 + 32);
  v48 = *(_OWORD *)v55;
  v49 = v18;
  v50 = v17;
  *(_QWORD *)&v55 = 0;
  operator delete(v16);
  sub_2080D9408((uint64_t)&v55, a1);
  *(_QWORD *)&v54[0] = &v48;
  *((_QWORD *)&v54[0] + 1) = &v55;
  if (DWORD1(v49) == 1 && DWORD1(v56) == 1)
  {
    sub_2080F3514((size_t *)v54);
  }
  else
  {
    v46 = 0;
    if (DWORD2(v48) && HIDWORD(v48) && (_DWORD)v49)
    {
      v47 = &v46;
      sub_2080F3FF4((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v55);
    }
  }
  return result;
}

uint64_t sub_2080DA2A0(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080D9408((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080DA2C8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D9408((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080DA358@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080D964C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080DA3E8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51668);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51668))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51670);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51670))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51678);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51678))
    {
LABEL_13:
      if (byte_253E51D9F < 0)
      {
        sub_207CA40D8(&xmmword_253E51D70, (void *)qword_253E51D88, unk_253E51D90);
      }
      else
      {
        xmmword_253E51D70 = *(_OWORD *)&qword_253E51D88;
        unk_253E51D80 = unk_253E51D98;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51D70, &dword_207C77000);
      __cxa_guard_release(&qword_253E51670);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51680);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51680))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Bgra8u>]", &qword_253E51DA0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51DA0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51680);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51688);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51688))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51690);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51690))
      {
        if (byte_253E51DB8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51DB8, *(unint64_t *)&byte_253E51DB8[8]);
        else
          __p = *(std::string *)byte_253E51DB8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51DD0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51DD0, &dword_207C77000);
        __cxa_guard_release(&qword_253E51690);
      }
      if (byte_253E51DE7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51DD0, *((unint64_t *)&xmmword_253E51DD0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51DD0;
        v18 = unk_253E51DE0;
      }
      sub_208065A00((char *)v17, (std::string *)&qword_253E51D88);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51D88, &dword_207C77000);
      __cxa_guard_release(&qword_253E51678);
      goto LABEL_13;
    }
    if (byte_253E51DB7 >= 0)
      v6 = byte_253E51DB7;
    else
      v6 = unk_253E51DA8;
    if (byte_253E51DB7 >= 0)
      v7 = &qword_253E51DA0;
    else
      v7 = (uint64_t *)qword_253E51DA0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51DB8[8] = v6;
      *(_QWORD *)&byte_253E51DB8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51DB8 = v13;
    }
    else
    {
      v13 = byte_253E51DB8;
      byte_253E51DB8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51DB8, &dword_207C77000);
    __cxa_guard_release(&qword_253E51688);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51D87 < 0)
  {
    sub_207CA40D8(&xmmword_253E51D58, (void *)xmmword_253E51D70, *((unint64_t *)&xmmword_253E51D70 + 1));
  }
  else
  {
    xmmword_253E51D58 = xmmword_253E51D70;
    unk_253E51D68 = unk_253E51D80;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51D58, &dword_207C77000);
  __cxa_guard_release(&qword_253E51668);
LABEL_2:
  if (byte_253E51D6F >= 0)
    return &xmmword_253E51D58;
  else
    return (__int128 *)xmmword_253E51D58;
}

void sub_2080DA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51678);
  __cxa_guard_abort(&qword_253E51670);
  __cxa_guard_abort(&qword_253E51668);
  _Unwind_Resume(a1);
}

void sub_2080DA8D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51668);
  _Unwind_Resume(a1);
}

void sub_2080DA8F0()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080DA92C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080DB100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DB124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DB138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DB15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080DB170()
{
  return 65792;
}

_QWORD *sub_2080DB17C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080DB1BC(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C085D18;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  LODWORD(v17[0]) = 4;
  v6 = *(_QWORD *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  v11 = *(_QWORD *)&v17[0];
  v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(_QWORD *)((char *)v17 + 4) = v4 | (v5 << 32);
  v13 = *(_QWORD *)&v17[0];
  v14 = v5;
  v15 = v6;
  v16 = *(_QWORD *)((char *)v17 + 4);
  v9 = a3[1];
  v10 = a3[2];
  v8 = *a3;
  sub_2080BDA38((uint64_t)a1, 29, (__int128 *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_2080BE0E4((uint64_t)a1, v17);
  *a1 = &off_24C085D18;
  return a1;
}

void sub_2080DB2A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)v1 = off_24C085148;
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v4])(v2 - 81, v1 + 16);
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_2080DB2EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080DB308(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085148;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080DB36C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080DB594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080DB5B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080DB7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080DB814()
{
  return 29;
}

_UNKNOWN **sub_2080DB81C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080DB870(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080DB5B0((uint64_t)v42, a1);
  sub_2080DB5B0((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080DB1BC(v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080DBC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080DBC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080DBC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080DBC68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080DBCA8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086330, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080DB5B0((uint64_t)&v55, v5);
    v54[0] = v55;
    v54[1] = v56;
    v54[2] = v57;
    sub_2080DB1BC(&v48, (uint64_t)&v55 + 8, v54);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v50);
    *(_DWORD *)(a1 + 8) = DWORD2(v48);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v51;
        v45 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        *(_OWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 80) = v53;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v55, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v55 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v55);
LABEL_62:
    v43 = DWORD2(v50);
    result = *(double *)&v51;
    v44 = v52;
    *(_OWORD *)(a1 + 48) = v51;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)&v48 = off_24C085148;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v55, &v49);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v55, lpsrc, 29);
  v16 = (void *)v55;
  v18 = *(_OWORD *)(v55 + 16);
  v17 = *(_OWORD *)(v55 + 32);
  v48 = *(_OWORD *)v55;
  v49 = v18;
  v50 = v17;
  *(_QWORD *)&v55 = 0;
  operator delete(v16);
  sub_2080DB36C((uint64_t)&v55, a1);
  *(_QWORD *)&v54[0] = &v48;
  *((_QWORD *)&v54[0] + 1) = &v55;
  if (DWORD1(v49) == 1 && DWORD1(v56) == 1)
  {
    sub_2080F3514((size_t *)v54);
  }
  else
  {
    v46 = 0;
    if (DWORD2(v48) && HIDWORD(v48) && (_DWORD)v49)
    {
      v47 = &v46;
      sub_2080F3FF4((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v55);
    }
  }
  return result;
}

uint64_t sub_2080DC204(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080DB36C((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080DC22C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 29
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080DB36C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080DC2BC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 29
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080DB5B0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080DC34C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51698))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E516A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E516A0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E516A8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E516A8))
    {
LABEL_13:
      if (byte_253E51E2F < 0)
      {
        sub_207CA40D8(&xmmword_253E51E00, (void *)qword_253E51E18, unk_253E51E20);
      }
      else
      {
        xmmword_253E51E00 = *(_OWORD *)&qword_253E51E18;
        unk_253E51E10 = unk_253E51E28;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51E00, &dword_207C77000);
      __cxa_guard_release(&qword_253E516A0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E516B0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E516B0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba8u>]", &qword_253E51E30);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51E30, &dword_207C77000);
      __cxa_guard_release(&qword_253E516B0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E516B8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E516B8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E516C0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E516C0))
      {
        if (byte_253E51E48[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51E48, *(unint64_t *)&byte_253E51E48[8]);
        else
          __p = *(std::string *)byte_253E51E48;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51E60);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51E60, &dword_207C77000);
        __cxa_guard_release(&qword_253E516C0);
      }
      if (byte_253E51E77 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51E60, *((unint64_t *)&xmmword_253E51E60 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51E60;
        v18 = unk_253E51E70;
      }
      sub_208066404((char *)v17, (std::string *)&qword_253E51E18);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51E18, &dword_207C77000);
      __cxa_guard_release(&qword_253E516A8);
      goto LABEL_13;
    }
    if (byte_253E51E47 >= 0)
      v6 = byte_253E51E47;
    else
      v6 = unk_253E51E38;
    if (byte_253E51E47 >= 0)
      v7 = &qword_253E51E30;
    else
      v7 = (uint64_t *)qword_253E51E30;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51E48[8] = v6;
      *(_QWORD *)&byte_253E51E48[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51E48 = v13;
    }
    else
    {
      v13 = byte_253E51E48;
      byte_253E51E48[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51E48, &dword_207C77000);
    __cxa_guard_release(&qword_253E516B8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51E17 < 0)
  {
    sub_207CA40D8(&xmmword_253E51DE8, (void *)xmmword_253E51E00, *((unint64_t *)&xmmword_253E51E00 + 1));
  }
  else
  {
    xmmword_253E51DE8 = xmmword_253E51E00;
    unk_253E51DF8 = unk_253E51E10;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51DE8, &dword_207C77000);
  __cxa_guard_release(&qword_253E51698);
LABEL_2:
  if (byte_253E51DFF >= 0)
    return &xmmword_253E51DE8;
  else
    return (__int128 *)xmmword_253E51DE8;
}

void sub_2080DC7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E516A8);
  __cxa_guard_abort(&qword_253E516A0);
  __cxa_guard_abort(&qword_253E51698);
  _Unwind_Resume(a1);
}

void sub_2080DC83C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51698);
  _Unwind_Resume(a1);
}

void sub_2080DC854()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080DC890(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080DD064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DD088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DD09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DD0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080DD0D4()
{
  return 65792;
}

_QWORD *sub_2080DD0E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080DD120(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];
  uint64_t (**v61)();
  uint64_t *v62;
  std::__shared_weak_count *v63;
  _QWORD v64[2];
  _BYTE v65[48];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C085DA8;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10)
    v5 = 16;
  else
    v5 = v5;
  *(_DWORD *)v65 = 4;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v65[4] = v6;
  v54 = *(_QWORD *)v65;
  v55 = HIDWORD(v6);
  *(_DWORD *)v65 = 1;
  *(_QWORD *)&v65[4] = v4 | (v5 << 32);
  v56 = *(_QWORD *)v65;
  v57 = v5;
  v58 = v6;
  v59 = *(_QWORD *)&v65[4];
  v52 = a3[1];
  v53 = a3[2];
  v51 = *a3;
  sub_2080C27F0(a1, (__int128 *)&v54);
  v60[0] = v51;
  v60[1] = v52;
  v60[2] = v53;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_69;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_66;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_66;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_66;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v62 = v32;
    v63 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v61 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v62 = v23;
    v63 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v61 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_69:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v62 = v14;
  v63 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v61 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v62);
  }
LABEL_53:
  sub_2080C2AA8((uint64_t)v65, a1);
  v64[0] = v60;
  v64[1] = v65;
  v41.n128_f64[0] = sub_2080F7420(v64);
  if (v62)
  {
    v43 = *v62;
    v42 = (std::__shared_weak_count *)v62[1];
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
        if (!v43)
          goto LABEL_61;
        goto LABEL_60;
      }
    }
    if (v43)
LABEL_60:
      sub_2081E31E4((uint64_t)v62);
  }
LABEL_61:
  v61 = &off_24C08D790;
  v47 = v63;
  if (v63)
  {
    v48 = (unint64_t *)&v63->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v41);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_66:
  *(_QWORD *)a1 = &off_24C085DA8;
  return a1;
}

void sub_2080DD4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C0854A8;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080DD614(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0854A8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080DD678(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C233C(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080DD8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080DD8BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C233C((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080DDB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080DDB20()
{
  return 31;
}

_UNKNOWN **sub_2080DDB28()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080DDB7C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080DD8BC((uint64_t)v42, a1);
  sub_2080DD8BC((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080DD120((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080DDF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080DDF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080DDF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080DDF74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080DDFB4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[3];
  _OWORD v53[3];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086348, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v53, lpsrc, 31);
    v16 = *(void **)&v53[0];
    v18 = *(_OWORD *)(*(_QWORD *)&v53[0] + 16);
    v17 = *(_OWORD *)(*(_QWORD *)&v53[0] + 32);
    v46 = **(_OWORD **)&v53[0];
    v47 = v18;
    v48 = v17;
    *(_QWORD *)&v53[0] = 0;
    operator delete(v16);
    sub_2080DD678((uint64_t)v53, a1);
    *(_QWORD *)&v52[0] = &v46;
    *((_QWORD *)&v52[0] + 1) = v53;
    return sub_2080F7420(v52);
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    if (v8)
    {
      v23 = *v8;
      v22 = (std::__shared_weak_count *)v8[1];
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v23)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v27 = (unint64_t *)&v7->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (v8)
    {
      v30 = *v8;
      v29 = (std::__shared_weak_count *)v8[1];
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080DD8BC((uint64_t)v53, v5);
  v52[0] = v53[0];
  v52[1] = v53[1];
  v52[2] = v53[2];
  sub_2080DD120((uint64_t)&v46, (uint64_t)v53 + 8, v52);
  if (v8)
  {
    v35 = *v8;
    v34 = (std::__shared_weak_count *)v8[1];
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (!v35)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    if (v35)
LABEL_49:
      sub_2081E30F8((uint64_t)v8);
  }
LABEL_50:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = DWORD2(v48);
  *(_DWORD *)(a1 + 8) = DWORD2(v46);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = *(double *)&v49;
      v45 = v50;
      *(_OWORD *)(a1 + 48) = v49;
      *(_OWORD *)(a1 + 64) = v45;
      *(_QWORD *)(a1 + 80) = v51;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C0863C0[v42])(v53, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_60;
  }
  *(_QWORD *)&v53[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0863F0[v41])(v53);
LABEL_60:
  v43 = DWORD2(v48);
  result = *(double *)&v49;
  v44 = v50;
  *(_OWORD *)(a1 + 48) = v49;
  *(_OWORD *)(a1 + 64) = v44;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)&v46 = off_24C0854A8;
  if ((_DWORD)v43 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C0863C0[v43])(v53, &v47);
  return result;
}

uint64_t sub_2080DE4BC(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080DD678((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080DE4E4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080DD678((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080DE574@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080DD8BC((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080DE604()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E516C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E516C8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E516D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E516D0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E516D8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E516D8))
    {
LABEL_13:
      if (byte_253E51EBF < 0)
      {
        sub_207CA40D8(&xmmword_253E51E90, (void *)qword_253E51EA8, unk_253E51EB0);
      }
      else
      {
        xmmword_253E51E90 = *(_OWORD *)&qword_253E51EA8;
        unk_253E51EA0 = unk_253E51EB8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51E90, &dword_207C77000);
      __cxa_guard_release(&qword_253E516D0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E516E0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E516E0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba16f>]", &qword_253E51EC0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51EC0, &dword_207C77000);
      __cxa_guard_release(&qword_253E516E0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E516E8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E516E8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E516F0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E516F0))
      {
        if (byte_253E51ED8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51ED8, *(unint64_t *)&byte_253E51ED8[8]);
        else
          __p = *(std::string *)byte_253E51ED8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51EF0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51EF0, &dword_207C77000);
        __cxa_guard_release(&qword_253E516F0);
      }
      if (byte_253E51F07 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51EF0, *((unint64_t *)&xmmword_253E51EF0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51EF0;
        v18 = unk_253E51F00;
      }
      sub_208067974((char *)v17, (std::string *)&qword_253E51EA8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51EA8, &dword_207C77000);
      __cxa_guard_release(&qword_253E516D8);
      goto LABEL_13;
    }
    if (byte_253E51ED7 >= 0)
      v6 = byte_253E51ED7;
    else
      v6 = unk_253E51EC8;
    if (byte_253E51ED7 >= 0)
      v7 = &qword_253E51EC0;
    else
      v7 = (uint64_t *)qword_253E51EC0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51ED8[8] = v6;
      *(_QWORD *)&byte_253E51ED8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51ED8 = v13;
    }
    else
    {
      v13 = byte_253E51ED8;
      byte_253E51ED8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51ED8, &dword_207C77000);
    __cxa_guard_release(&qword_253E516E8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51EA7 < 0)
  {
    sub_207CA40D8(&xmmword_253E51E78, (void *)xmmword_253E51E90, *((unint64_t *)&xmmword_253E51E90 + 1));
  }
  else
  {
    xmmword_253E51E78 = xmmword_253E51E90;
    unk_253E51E88 = unk_253E51EA0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51E78, &dword_207C77000);
  __cxa_guard_release(&qword_253E516C8);
LABEL_2:
  if (byte_253E51E8F >= 0)
    return &xmmword_253E51E78;
  else
    return (__int128 *)xmmword_253E51E78;
}

void sub_2080DEA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E516D8);
  __cxa_guard_abort(&qword_253E516D0);
  __cxa_guard_abort(&qword_253E516C8);
  _Unwind_Resume(a1);
}

void sub_2080DEAF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E516C8);
  _Unwind_Resume(a1);
}

void sub_2080DEB0C()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080DEB48(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080DF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DF340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DF354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080DF378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080DF38C()
{
  return 65792;
}

_QWORD *sub_2080DF398@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080DF3D8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t (**v63)();
  uint64_t *v64;
  std::__shared_weak_count *v65;
  uint64_t v66[2];
  char v67;
  char *v68;
  _BYTE v69[12];
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C085E38;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 8)
    v5 = 8;
  else
    v5 = v5;
  *(_DWORD *)v69 = 4;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v69[4] = v6;
  v54 = *(_QWORD *)v69;
  v55 = HIDWORD(v6);
  *(_DWORD *)v69 = 1;
  *(_QWORD *)&v69[4] = v4 | (v5 << 32);
  v56 = *(_QWORD *)v69;
  v57 = v5;
  v58 = v6;
  v59 = *(_QWORD *)&v69[4];
  v52 = a3[1];
  v53 = a3[2];
  v51 = *a3;
  sub_2080C482C(a1, (__int128 *)&v54);
  v60 = v51;
  v61 = v52;
  v62 = v53;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_78;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_75;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_75;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_75;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v64 = v32;
    v65 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v63 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v64 = v23;
    v65 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v63 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_78:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v64 = v14;
  v65 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v63 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v64);
  }
LABEL_53:
  sub_2080C4AE4((uint64_t)v69, a1);
  v66[0] = (uint64_t)&v60;
  v66[1] = (uint64_t)v69;
  if (DWORD1(v61) == 1 && v70 == 1)
  {
    sub_2080F8148(v66);
  }
  else
  {
    v67 = 0;
    if (DWORD2(v60) && HIDWORD(v60) && (_DWORD)v61)
    {
      v68 = &v67;
      sub_2080F88E8((uint64_t)&v68, (uint64_t)&v60, (uint64_t)v69);
    }
  }
  if (!v64)
    goto LABEL_70;
  v43 = *v64;
  v42 = (std::__shared_weak_count *)v64[1];
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (!v43)
        goto LABEL_70;
      goto LABEL_69;
    }
  }
  if (v43)
LABEL_69:
    sub_2081E31E4((uint64_t)v64);
LABEL_70:
  v63 = &off_24C08D790;
  v47 = v65;
  if (v65)
  {
    v48 = (unint64_t *)&v65->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_75:
  *(_QWORD *)a1 = &off_24C085E38;
  return a1;
}

void sub_2080DF7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C085658;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080DF918(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085658;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080DF97C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C4378(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080DFBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080DFBC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C4378((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080DFE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080DFE24()
{
  return 32;
}

_UNKNOWN **sub_2080DFE2C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080DFE80(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080DFBC0((uint64_t)v42, a1);
  sub_2080DFBC0((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080DF3D8((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080E0234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080E0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080E0264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080E0278@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080E02B8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086360, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080DFBC0((uint64_t)&v55, v5);
    v54[0] = v55;
    v54[1] = v56;
    v54[2] = v57;
    sub_2080DF3D8((uint64_t)&v48, (uint64_t)&v55 + 8, v54);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v50);
    *(_DWORD *)(a1 + 8) = DWORD2(v48);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v51;
        v45 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        *(_OWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 80) = v53;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v55, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v55 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v55);
LABEL_62:
    v43 = DWORD2(v50);
    result = *(double *)&v51;
    v44 = v52;
    *(_OWORD *)(a1 + 48) = v51;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)&v48 = off_24C085658;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v55, &v49);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v55, lpsrc, 32);
  v16 = (void *)v55;
  v18 = *(_OWORD *)(v55 + 16);
  v17 = *(_OWORD *)(v55 + 32);
  v48 = *(_OWORD *)v55;
  v49 = v18;
  v50 = v17;
  *(_QWORD *)&v55 = 0;
  operator delete(v16);
  sub_2080DF97C((uint64_t)&v55, a1);
  *(_QWORD *)&v54[0] = &v48;
  *((_QWORD *)&v54[0] + 1) = &v55;
  if (DWORD1(v49) == 1 && DWORD1(v56) == 1)
  {
    sub_2080F8148((uint64_t *)v54);
  }
  else
  {
    v46 = 0;
    if (DWORD2(v48) && HIDWORD(v48) && (_DWORD)v49)
    {
      v47 = &v46;
      *(float *)&result = sub_2080F88E8((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v55);
    }
  }
  return result;
}

uint64_t sub_2080E0814(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080DF97C((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080E083C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080DF97C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080E08CC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080DFBC0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080E095C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E516F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E516F8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51700);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51700))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51708);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51708))
    {
LABEL_13:
      if (byte_253E51F4F < 0)
      {
        sub_207CA40D8(&xmmword_253E51F20, (void *)qword_253E51F38, unk_253E51F40);
      }
      else
      {
        xmmword_253E51F20 = *(_OWORD *)&qword_253E51F38;
        unk_253E51F30 = unk_253E51F48;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51F20, &dword_207C77000);
      __cxa_guard_release(&qword_253E51700);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51710);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51710))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba32f>]", &qword_253E51F50);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51F50, &dword_207C77000);
      __cxa_guard_release(&qword_253E51710);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51718);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51718))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51720);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51720))
      {
        if (byte_253E51F68[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51F68, *(unint64_t *)&byte_253E51F68[8]);
        else
          __p = *(std::string *)byte_253E51F68;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51F80);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51F80, &dword_207C77000);
        __cxa_guard_release(&qword_253E51720);
      }
      if (byte_253E51F97 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51F80, *((unint64_t *)&xmmword_253E51F80 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51F80;
        v18 = unk_253E51F90;
      }
      sub_208068408((char *)v17, (std::string *)&qword_253E51F38);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51F38, &dword_207C77000);
      __cxa_guard_release(&qword_253E51708);
      goto LABEL_13;
    }
    if (byte_253E51F67 >= 0)
      v6 = byte_253E51F67;
    else
      v6 = unk_253E51F58;
    if (byte_253E51F67 >= 0)
      v7 = &qword_253E51F50;
    else
      v7 = (uint64_t *)qword_253E51F50;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51F68[8] = v6;
      *(_QWORD *)&byte_253E51F68[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51F68 = v13;
    }
    else
    {
      v13 = byte_253E51F68;
      byte_253E51F68[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51F68, &dword_207C77000);
    __cxa_guard_release(&qword_253E51718);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51F37 < 0)
  {
    sub_207CA40D8(&xmmword_253E51F08, (void *)xmmword_253E51F20, *((unint64_t *)&xmmword_253E51F20 + 1));
  }
  else
  {
    xmmword_253E51F08 = xmmword_253E51F20;
    unk_253E51F18 = unk_253E51F30;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51F08, &dword_207C77000);
  __cxa_guard_release(&qword_253E516F8);
LABEL_2:
  if (byte_253E51F1F >= 0)
    return &xmmword_253E51F08;
  else
    return (__int128 *)xmmword_253E51F08;
}

void sub_2080E0DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51708);
  __cxa_guard_abort(&qword_253E51700);
  __cxa_guard_abort(&qword_253E516F8);
  _Unwind_Resume(a1);
}

void sub_2080E0E4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E516F8);
  _Unwind_Resume(a1);
}

void sub_2080E0E64()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080E0EA0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080E1674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E1698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E16AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E16D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E16E4()
{
  return 65792;
}

_QWORD *sub_2080E16F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080E1730(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C085EC8;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  LODWORD(v17[0]) = 4;
  v6 = *(_QWORD *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  v11 = *(_QWORD *)&v17[0];
  v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(_QWORD *)((char *)v17 + 4) = v4 | (v5 << 32);
  v13 = *(_QWORD *)&v17[0];
  v14 = v5;
  v15 = v6;
  v16 = *(_QWORD *)((char *)v17 + 4);
  v9 = a3[1];
  v10 = a3[2];
  v8 = *a3;
  sub_2080BDA38((uint64_t)a1, 33, (__int128 *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_2080BE0E4((uint64_t)a1, v17);
  *a1 = &off_24C085EC8;
  return a1;
}

void sub_2080E181C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)v1 = off_24C085148;
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v4])(v2 - 81, v1 + 16);
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_2080E1860(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080E187C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085148;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080E18E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080E1B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080E1B24(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080E1D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E1D88()
{
  return 33;
}

_UNKNOWN **sub_2080E1D90()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080E1DE4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080E1B24((uint64_t)v42, a1);
  sub_2080E1B24((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080E1730(v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080E2198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080E21B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080E21C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080E21DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080E221C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086378, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080E1B24((uint64_t)&v55, v5);
    v54[0] = v55;
    v54[1] = v56;
    v54[2] = v57;
    sub_2080E1730(&v48, (uint64_t)&v55 + 8, v54);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v50);
    *(_DWORD *)(a1 + 8) = DWORD2(v48);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v51;
        v45 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        *(_OWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 80) = v53;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v55, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v55 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v55);
LABEL_62:
    v43 = DWORD2(v50);
    result = *(double *)&v51;
    v44 = v52;
    *(_OWORD *)(a1 + 48) = v51;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)&v48 = off_24C085148;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v55, &v49);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v55, lpsrc, 33);
  v16 = (void *)v55;
  v18 = *(_OWORD *)(v55 + 16);
  v17 = *(_OWORD *)(v55 + 32);
  v48 = *(_OWORD *)v55;
  v49 = v18;
  v50 = v17;
  *(_QWORD *)&v55 = 0;
  operator delete(v16);
  sub_2080E18E0((uint64_t)&v55, a1);
  *(_QWORD *)&v54[0] = &v48;
  *((_QWORD *)&v54[0] + 1) = &v55;
  if (DWORD1(v49) == 1 && DWORD1(v56) == 1)
  {
    sub_2080F3514((size_t *)v54);
  }
  else
  {
    v46 = 0;
    if (DWORD2(v48) && HIDWORD(v48) && (_DWORD)v49)
    {
      v47 = &v46;
      sub_2080F3FF4((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v55);
    }
  }
  return result;
}

uint64_t sub_2080E2778(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080E18E0((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080E27A0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 33
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080E18E0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080E2830@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 33
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080E1B24((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080E28C0()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51728);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51728))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51730);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51730))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51738);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51738))
    {
LABEL_13:
      if (byte_253E51FDF < 0)
      {
        sub_207CA40D8(&xmmword_253E51FB0, (void *)qword_253E51FC8, unk_253E51FD0);
      }
      else
      {
        xmmword_253E51FB0 = *(_OWORD *)&qword_253E51FC8;
        unk_253E51FC0 = unk_253E51FD8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51FB0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51730);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51740);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51740))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Abgr8u>]", &qword_253E51FE0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51FE0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51740);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51748);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51748))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51750);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51750))
      {
        if (byte_253E51FF8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51FF8, *(unint64_t *)&byte_253E51FF8[8]);
        else
          __p = *(std::string *)byte_253E51FF8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52010);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52010, &dword_207C77000);
        __cxa_guard_release(&qword_253E51750);
      }
      if (byte_253E52027 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52010, *((unint64_t *)&xmmword_253E52010 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52010;
        v18 = unk_253E52020;
      }
      sub_208068E0C((char *)v17, (std::string *)&qword_253E51FC8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51FC8, &dword_207C77000);
      __cxa_guard_release(&qword_253E51738);
      goto LABEL_13;
    }
    if (byte_253E51FF7 >= 0)
      v6 = byte_253E51FF7;
    else
      v6 = unk_253E51FE8;
    if (byte_253E51FF7 >= 0)
      v7 = &qword_253E51FE0;
    else
      v7 = (uint64_t *)qword_253E51FE0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51FF8[8] = v6;
      *(_QWORD *)&byte_253E51FF8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51FF8 = v13;
    }
    else
    {
      v13 = byte_253E51FF8;
      byte_253E51FF8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51FF8, &dword_207C77000);
    __cxa_guard_release(&qword_253E51748);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51FC7 < 0)
  {
    sub_207CA40D8(&xmmword_253E51F98, (void *)xmmword_253E51FB0, *((unint64_t *)&xmmword_253E51FB0 + 1));
  }
  else
  {
    xmmword_253E51F98 = xmmword_253E51FB0;
    unk_253E51FA8 = unk_253E51FC0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51F98, &dword_207C77000);
  __cxa_guard_release(&qword_253E51728);
LABEL_2:
  if (byte_253E51FAF >= 0)
    return &xmmword_253E51F98;
  else
    return (__int128 *)xmmword_253E51F98;
}

void sub_2080E2D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51738);
  __cxa_guard_abort(&qword_253E51730);
  __cxa_guard_abort(&qword_253E51728);
  _Unwind_Resume(a1);
}

void sub_2080E2DB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51728);
  _Unwind_Resume(a1);
}

void sub_2080E2DC8()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080E2E04(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080E35D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E35FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E3610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E3648()
{
  return 65792;
}

_QWORD *sub_2080E3654@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080E3694(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C085F58;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20)
    v5 = 32;
  else
    v5 = v5;
  LODWORD(v17[0]) = 4;
  v6 = *(_QWORD *)(a2 + 24);
  DWORD1(v17[0]) = v6;
  v11 = *(_QWORD *)&v17[0];
  v12 = HIDWORD(v6);
  LODWORD(v17[0]) = 1;
  *(_QWORD *)((char *)v17 + 4) = v4 | (v5 << 32);
  v13 = *(_QWORD *)&v17[0];
  v14 = v5;
  v15 = v6;
  v16 = *(_QWORD *)((char *)v17 + 4);
  v9 = a3[1];
  v10 = a3[2];
  v8 = *a3;
  sub_2080BDA38((uint64_t)a1, 37, (__int128 *)&v11);
  v17[0] = v8;
  v17[1] = v9;
  v17[2] = v10;
  sub_2080BE0E4((uint64_t)a1, v17);
  *a1 = &off_24C085F58;
  return a1;
}

void sub_2080E3780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)v1 = off_24C085148;
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v4])(v2 - 81, v1 + 16);
  *(_DWORD *)(v1 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_2080E37C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080E37E0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085148;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080E3844(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080E3A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080E3A88(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080E3CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E3CEC()
{
  return 37;
}

_UNKNOWN **sub_2080E3CF4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080E3D48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080E3A88((uint64_t)v42, a1);
  sub_2080E3A88((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080E3694(v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080E40FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080E4118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080E412C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080E4140@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080E4180(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086390, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080E3A88((uint64_t)&v55, v5);
    v54[0] = v55;
    v54[1] = v56;
    v54[2] = v57;
    sub_2080E3694(&v48, (uint64_t)&v55 + 8, v54);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v50);
    *(_DWORD *)(a1 + 8) = DWORD2(v48);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v51;
        v45 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        *(_OWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 80) = v53;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v55, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v55 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v55);
LABEL_62:
    v43 = DWORD2(v50);
    result = *(double *)&v51;
    v44 = v52;
    *(_OWORD *)(a1 + 48) = v51;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)&v48 = off_24C085148;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v55, &v49);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v55, lpsrc, 37);
  v16 = (void *)v55;
  v18 = *(_OWORD *)(v55 + 16);
  v17 = *(_OWORD *)(v55 + 32);
  v48 = *(_OWORD *)v55;
  v49 = v18;
  v50 = v17;
  *(_QWORD *)&v55 = 0;
  operator delete(v16);
  sub_2080E3844((uint64_t)&v55, a1);
  *(_QWORD *)&v54[0] = &v48;
  *((_QWORD *)&v54[0] + 1) = &v55;
  if (DWORD1(v49) == 1 && DWORD1(v56) == 1)
  {
    sub_2080F3514((size_t *)v54);
  }
  else
  {
    v46 = 0;
    if (DWORD2(v48) && HIDWORD(v48) && (_DWORD)v49)
    {
      v47 = &v46;
      sub_2080F3FF4((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v55);
    }
  }
  return result;
}

uint64_t sub_2080E46DC(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080E3844((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080E4704@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080E3844((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080E4794@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080E3A88((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080E4824()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51758))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51760);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51760))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51768);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51768))
    {
LABEL_13:
      if (byte_253E5206F < 0)
      {
        sub_207CA40D8(&xmmword_253E52040, (void *)qword_253E52058, unk_253E52060);
      }
      else
      {
        xmmword_253E52040 = *(_OWORD *)&qword_253E52058;
        unk_253E52050 = unk_253E52068;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52040, &dword_207C77000);
      __cxa_guard_release(&qword_253E51760);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E51770);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51770))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Argb8u>]", &qword_253E52070);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52070, &dword_207C77000);
      __cxa_guard_release(&qword_253E51770);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E51778);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51778))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E51780);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E51780))
      {
        if (byte_253E52088[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52088, *(unint64_t *)&byte_253E52088[8]);
        else
          __p = *(std::string *)byte_253E52088;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E520A0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E520A0, &dword_207C77000);
        __cxa_guard_release(&qword_253E51780);
      }
      if (byte_253E520B7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E520A0, *((unint64_t *)&xmmword_253E520A0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E520A0;
        v18 = unk_253E520B0;
      }
      sub_208069810((char *)v17, (std::string *)&qword_253E52058);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52058, &dword_207C77000);
      __cxa_guard_release(&qword_253E51768);
      goto LABEL_13;
    }
    if (byte_253E52087 >= 0)
      v6 = byte_253E52087;
    else
      v6 = unk_253E52078;
    if (byte_253E52087 >= 0)
      v7 = &qword_253E52070;
    else
      v7 = (uint64_t *)qword_253E52070;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52088[8] = v6;
      *(_QWORD *)&byte_253E52088[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52088 = v13;
    }
    else
    {
      v13 = byte_253E52088;
      byte_253E52088[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52088, &dword_207C77000);
    __cxa_guard_release(&qword_253E51778);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52057 < 0)
  {
    sub_207CA40D8(&xmmword_253E52028, (void *)xmmword_253E52040, *((unint64_t *)&xmmword_253E52040 + 1));
  }
  else
  {
    xmmword_253E52028 = xmmword_253E52040;
    unk_253E52038 = unk_253E52050;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52028, &dword_207C77000);
  __cxa_guard_release(&qword_253E51758);
LABEL_2:
  if (byte_253E5203F >= 0)
    return &xmmword_253E52028;
  else
    return (__int128 *)xmmword_253E52028;
}

void sub_2080E4C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51768);
  __cxa_guard_abort(&qword_253E51760);
  __cxa_guard_abort(&qword_253E51758);
  _Unwind_Resume(a1);
}

void sub_2080E4D14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51758);
  _Unwind_Resume(a1);
}

void sub_2080E4D2C()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080E4D68(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080E553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E5560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E5574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E5598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E55AC()
{
  return 65792;
}

_QWORD *sub_2080E55B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080E55F8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t (**v63)();
  uint64_t *v64;
  std::__shared_weak_count *v65;
  uint64_t v66[2];
  char v67;
  char *v68;
  _BYTE v69[12];
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C085FE8;
  v4 = *(unsigned int *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x10)
    v5 = 16;
  else
    v5 = v5;
  *(_DWORD *)v69 = 4;
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v69[4] = v6;
  v54 = *(_QWORD *)v69;
  v55 = HIDWORD(v6);
  *(_DWORD *)v69 = 1;
  *(_QWORD *)&v69[4] = v4 | (v5 << 32);
  v56 = *(_QWORD *)v69;
  v57 = v5;
  v58 = v6;
  v59 = *(_QWORD *)&v69[4];
  v52 = a3[1];
  v53 = a3[2];
  v51 = *a3;
  sub_2080C07B0(a1, (__int128 *)&v54);
  v60 = v51;
  v61 = v52;
  v62 = v53;
  if (*(_DWORD *)(a1 + 40) > 2u)
    goto LABEL_78;
  v7 = *(uint64_t **)(a1 + 24);
  if (!v7)
    goto LABEL_75;
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_75;
  }
  else
  {
LABEL_11:
    if (!v9)
      goto LABEL_75;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == 2)
  {
    v32 = *(uint64_t **)(a1 + 24);
    v33 = *(std::__shared_weak_count **)(a1 + 32);
    v64 = v32;
    v65 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v63 = off_24C08D770;
    if (v32)
    {
      v37 = *v32;
      v36 = (std::__shared_weak_count *)v32[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v37)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v64 = v23;
    v65 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v63 = off_24C08D770;
    if (v23)
    {
      v28 = *v23;
      v27 = (std::__shared_weak_count *)v23[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v28)
        goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (v13)
LABEL_78:
    sub_207CA9F48();
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v64 = v14;
  v65 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v63 = off_24C08D770;
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v19)
LABEL_52:
      sub_2081E3010((uint64_t)v64);
  }
LABEL_53:
  sub_2080C0A68((uint64_t)v69, a1);
  v66[0] = (uint64_t)&v60;
  v66[1] = (uint64_t)v69;
  if (DWORD1(v61) == 1 && v70 == 1)
  {
    sub_2080F4F10(v66);
  }
  else
  {
    v67 = 0;
    if (DWORD2(v60) && HIDWORD(v60) && (_DWORD)v61)
    {
      v68 = &v67;
      sub_2080F58C4((uint64_t)&v68, (uint64_t)&v60, (uint64_t)v69);
    }
  }
  if (!v64)
    goto LABEL_70;
  v43 = *v64;
  v42 = (std::__shared_weak_count *)v64[1];
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (!v43)
        goto LABEL_70;
      goto LABEL_69;
    }
  }
  if (v43)
LABEL_69:
    sub_2081E31E4((uint64_t)v64);
LABEL_70:
  v63 = &off_24C08D790;
  v47 = v65;
  if (v65)
  {
    v48 = (unint64_t *)&v65->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_75:
  *(_QWORD *)a1 = &off_24C085FE8;
  return a1;
}

void sub_2080E5A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  *(_QWORD *)v29 = off_24C0852F8;
  v34 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C0863C0[v34])(v30 - 104, v29 + 16);
  *(_DWORD *)(v29 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080E5B38(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0852F8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080E5B9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C0314(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080E5DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080E5DE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v30 = &off_24C08D790;
          v31 = v10;
          v32 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C0314((uint64_t)v33, (uint64_t)&v27);
          *(_QWORD *)a1 = *(_QWORD *)v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33[8];
          *(_OWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 40) = v35;
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v30 = &off_24C08D790;
          v24 = v32;
          if (v32)
          {
            v25 = (unint64_t *)&v32->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  *(_DWORD *)v33 = 4;
  *(_QWORD *)&v33[4] = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(*(unsigned int *)&v33[4], 4);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v19;
  v21 = *(_QWORD *)v33;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080E6028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E6044()
{
  return 38;
}

_UNKNOWN **sub_2080E604C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080E60A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[3];
  char v42[8];
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  __int128 v47[3];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v14;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v44 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v45);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v45 = v23;
    v46 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v44 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = v5;
  v46 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v44 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080E5DE0((uint64_t)v42, a1);
  sub_2080E5DE0((uint64_t)v41, a1);
  v32 = operator new(0x58uLL);
  v47[0] = v41[0];
  v47[1] = v41[1];
  v47[2] = v41[2];
  sub_2080E55F8((uint64_t)v32, (uint64_t)&v43, v47);
  *a2 = v32;
  if (!v45)
    goto LABEL_45;
  v34 = *v45;
  v33 = (std::__shared_weak_count *)v45[1];
  if (!v33)
    goto LABEL_43;
  v35 = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (v37)
  {
LABEL_43:
    if (!v34)
      goto LABEL_45;
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v34)
LABEL_44:
    sub_2081E30F8((uint64_t)v45);
LABEL_45:
  v44 = &off_24C08D790;
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_2080E6454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_2081DD418(&a22);
  _Unwind_Resume(a1);
}

void sub_2080E6470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080E6484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080E6498@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080E64D8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0863A8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((_DWORD *)v4 + 10);
    if (v6 == 2)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (v8)
      {
        v23 = *v8;
        v22 = (std::__shared_weak_count *)v8[1];
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v23)
          goto LABEL_43;
      }
    }
    else if (v6 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      if (v8)
      {
        v30 = *v8;
        v29 = (std::__shared_weak_count *)v8[1];
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v30)
          goto LABEL_43;
      }
    }
    else
    {
      if (v6)
        sub_207CA9F48();
      v8 = (uint64_t *)*((_QWORD *)v4 + 3);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
      if (v7)
      {
        v9 = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v8)
      {
        v12 = *v8;
        v11 = (std::__shared_weak_count *)v8[1];
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v12)
LABEL_43:
          sub_2081E2F24((uint64_t)v8);
      }
    }
    sub_2080E5DE0((uint64_t)&v55, v5);
    v54[0] = v55;
    v54[1] = v56;
    v54[2] = v57;
    sub_2080E55F8((uint64_t)&v48, (uint64_t)&v55 + 8, v54);
    if (v8)
    {
      v35 = *v8;
      v34 = (std::__shared_weak_count *)v8[1];
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v35)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      if (v35)
LABEL_51:
        sub_2081E30F8((uint64_t)v8);
    }
LABEL_52:
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v41 = DWORD2(v50);
    *(_DWORD *)(a1 + 8) = DWORD2(v48);
    v42 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v42 == -1)
    {
      if ((_DWORD)v41 == -1)
      {
        result = *(double *)&v51;
        v45 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        *(_OWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 80) = v53;
        return result;
      }
    }
    else if ((_DWORD)v41 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v55, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_62;
    }
    *(_QWORD *)&v55 = a1 + 16;
    ((void (*)(__int128 *))off_24C0863F0[v41])(&v55);
LABEL_62:
    v43 = DWORD2(v50);
    result = *(double *)&v51;
    v44 = v52;
    *(_OWORD *)(a1 + 48) = v51;
    *(_OWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)&v48 = off_24C0852F8;
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, __int128 *))off_24C0863C0[v43])(&v55, &v49);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v55, lpsrc, 38);
  v16 = (void *)v55;
  v18 = *(_OWORD *)(v55 + 16);
  v17 = *(_OWORD *)(v55 + 32);
  v48 = *(_OWORD *)v55;
  v49 = v18;
  v50 = v17;
  *(_QWORD *)&v55 = 0;
  operator delete(v16);
  sub_2080E5B9C((uint64_t)&v55, a1);
  *(_QWORD *)&v54[0] = &v48;
  *((_QWORD *)&v54[0] + 1) = &v55;
  if (DWORD1(v49) == 1 && DWORD1(v56) == 1)
  {
    sub_2080F4F10((uint64_t *)v54);
  }
  else
  {
    v46 = 0;
    if (DWORD2(v48) && HIDWORD(v48) && (_DWORD)v49)
    {
      v47 = &v46;
      sub_2080F58C4((uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v55);
    }
  }
  return result;
}

uint64_t sub_2080E6A34(uint64_t a1)
{
  _QWORD v2[6];

  sub_2080E5B9C((uint64_t)v2, a1);
  return v2[0];
}

double sub_2080E6A5C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080E5B9C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2080E6AEC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080E5DE0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2080E6B7C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51788);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51788))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51790);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51790))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51798);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51798))
    {
LABEL_13:
      if (byte_253E520FF < 0)
      {
        sub_207CA40D8(&xmmword_253E520D0, (void *)qword_253E520E8, unk_253E520F0);
      }
      else
      {
        xmmword_253E520D0 = *(_OWORD *)&qword_253E520E8;
        unk_253E520E0 = unk_253E520F8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E520D0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51790);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E517A0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E517A0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Argb16u>]", &qword_253E52100);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52100, &dword_207C77000);
      __cxa_guard_release(&qword_253E517A0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E517A8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E517A8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E517B0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E517B0))
      {
        if (byte_253E52118[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52118, *(unint64_t *)&byte_253E52118[8]);
        else
          __p = *(std::string *)byte_253E52118;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52130);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52130, &dword_207C77000);
        __cxa_guard_release(&qword_253E517B0);
      }
      if (byte_253E52147 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52130, *((unint64_t *)&xmmword_253E52130 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52130;
        v18 = unk_253E52140;
      }
      sub_20806A230((char *)v17, (std::string *)&qword_253E520E8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E520E8, &dword_207C77000);
      __cxa_guard_release(&qword_253E51798);
      goto LABEL_13;
    }
    if (byte_253E52117 >= 0)
      v6 = byte_253E52117;
    else
      v6 = unk_253E52108;
    if (byte_253E52117 >= 0)
      v7 = &qword_253E52100;
    else
      v7 = (uint64_t *)qword_253E52100;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52118[8] = v6;
      *(_QWORD *)&byte_253E52118[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52118 = v13;
    }
    else
    {
      v13 = byte_253E52118;
      byte_253E52118[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52118, &dword_207C77000);
    __cxa_guard_release(&qword_253E517A8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E520E7 < 0)
  {
    sub_207CA40D8(&xmmword_253E520B8, (void *)xmmword_253E520D0, *((unint64_t *)&xmmword_253E520D0 + 1));
  }
  else
  {
    xmmword_253E520B8 = xmmword_253E520D0;
    unk_253E520C8 = unk_253E520E0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E520B8, &dword_207C77000);
  __cxa_guard_release(&qword_253E51788);
LABEL_2:
  if (byte_253E520CF >= 0)
    return &xmmword_253E520B8;
  else
    return (__int128 *)xmmword_253E520B8;
}

void sub_2080E6FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51798);
  __cxa_guard_abort(&qword_253E51790);
  __cxa_guard_abort(&qword_253E51788);
  _Unwind_Resume(a1);
}

void sub_2080E706C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51788);
  _Unwind_Resume(a1);
}

void sub_2080E7084()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080E70C0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080E7894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E78B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E78CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080E78F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080E7904()
{
  return 65792;
}

_QWORD *sub_2080E7910@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

_QWORD *sub_2080E7950(_QWORD *a1)
{
  *a1 = off_24C086078;
  sub_2081DD418(a1 + 1);
  return a1;
}

void sub_2080E7980(_QWORD *a1)
{
  *a1 = off_24C086078;
  sub_2081DD418(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_2080E79B0(_QWORD *a1)
{
  *a1 = off_24C086098;
  sub_2081DD834(a1 + 1);
  return a1;
}

void sub_2080E79E0(_QWORD *a1)
{
  *a1 = off_24C086098;
  sub_2081DD834(a1 + 1);
  operator delete(a1);
}

void sub_2080E7A10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  std::logic_error *exception;
  unsigned int v7;
  std::string v8;

  v4 = sub_2081DF39C(a1);
  v5 = sub_207DB2844(v4);
  if ((v5 & 0xFF00000000) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v7 = sub_2081DF39C(a1);
    sub_2080E7B08("Attempting to map iosurface of format ", &v7, (uint64_t)" into a SharedIOSurfaceImage. The format is not (yet) supported by Kit_IOSurfaceImage.");
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  sub_2080E86E8(a2, v5);
}

void sub_2080E7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_2080E7B08(char *__s, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_2080F2350(v7, __s);
  sub_207DDDF2C((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_207CA9F48();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24C087A00[v8])(&v10, v7);
  if (v8 == -1)
    sub_207CA9F48();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C087A18[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C0879D0[v8])(v9, v7);
  return result;
}

void sub_2080E7C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080E7C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080E7C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080E7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_2080E7C50()
{
  return "{unknown buffer type}";
}

void sub_2080E7C60(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C084F98;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7CC0(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0851D8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7D20(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085388;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7D80(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085538;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7DE0(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085028;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7E40(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085418;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7EA0(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0855C8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7F00(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0850B8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7F60(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0850B8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E7FC0(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085268;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E8020(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085148;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E8080(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085148;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E80E0(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0854A8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E8140(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085658;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E81A0(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085148;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E8200(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C085148;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E8260(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0852F8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_2080E82C0(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a2 = &off_24C08D790;
  v2 = (std::__shared_weak_count *)a2[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_2080E8324(uint64_t a1, _QWORD *a2)
{
  return sub_2081DD418(a2);
}

_QWORD *sub_2080E832C(uint64_t a1, _QWORD *a2)
{
  return sub_2081DD834(a2);
}

__n128 sub_2080E8334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C08D790;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_2080E8350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = off_24C08D750;
  return result;
}

__n128 sub_2080E836C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = off_24C08D770;
  return result;
}

void sub_2080E8388(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24C0863C0[v5])(&v10, v4);
LABEL_9:
    *(_QWORD *)v4 = &off_24C08D790;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2080E8458(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C0863C0[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = off_24C08D750;
    *(_DWORD *)(v4 + 24) = 1;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_2081E30F8(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2080E85A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_24C0863C0[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = off_24C08D770;
    *(_DWORD *)(v4 + 24) = 2;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_2081E31E4(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2080E86E8(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_2080E873C(int a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t (**v112)();
  uint64_t (*v113)();
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t (**v136)();
  _QWORD *v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  uint64_t (*v140)();
  uint64_t (**v141)();
  _QWORD *v142;
  std::__shared_weak_count *v143;
  uint64_t (**v144)();
  _QWORD *v145;
  std::__shared_weak_count *v146;
  uint64_t (**v147)();
  _QWORD *v148;
  std::__shared_weak_count *v149;

  v44 = *(_QWORD **)(a3 + 8);
  v45 = *(std::__shared_weak_count **)(a3 + 16);
  v46 = operator new(0x40uLL);
  v47 = v46;
  v141 = &off_24C08D790;
  v142 = v44;
  v143 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldxr(p_shared_owners);
    while (__stxr(v49 + 1, p_shared_owners));
    do
      v50 = __ldxr(p_shared_owners);
    while (__stxr(v50 + 1, p_shared_owners));
  }
  v144 = &off_24C08D790;
  v145 = v44;
  v146 = v45;
  *v46 = off_24C084F98;
  if (v44)
  {
    v52 = *v44;
    v51 = (std::__shared_weak_count *)v44[1];
    if (v51)
    {
      v53 = (unint64_t *)&v51->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v56 = v145;
    if (v52)
    {
      v57 = *((_DWORD *)v145 + 4);
      goto LABEL_16;
    }
  }
  else
  {
    v56 = 0;
  }
  v57 = 0;
LABEL_16:
  v47[2] = &off_24C08D790;
  *((_DWORD *)v47 + 2) = v57;
  v58 = v146;
  v47[3] = v56;
  v47[4] = v58;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    *((_DWORD *)v47 + 10) = 0;
    v147 = &off_24C08D790;
    v148 = v56;
    v149 = v58;
    do
      v61 = __ldxr(v59);
    while (__stxr(v61 + 1, v59));
    if (!v56)
    {
LABEL_31:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      goto LABEL_32;
    }
  }
  else
  {
    *((_DWORD *)v47 + 10) = 0;
    v147 = &off_24C08D790;
    v148 = v56;
    v149 = 0;
    if (!v56)
      goto LABEL_31;
  }
  v63 = *v56;
  v62 = (std::__shared_weak_count *)v56[1];
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (!v63)
    goto LABEL_31;
LABEL_32:
  v67 = v149;
  v136 = &off_24C08D790;
  v137 = v148;
  v138 = v149;
  if (v149)
  {
    v68 = (unint64_t *)&v149->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  sub_2080F2C14((uint64_t)&v136);
  v136 = &off_24C08D790;
  if (v67)
  {
    v70 = (unint64_t *)&v67->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v72 = v149;
  if (v149)
  {
    v73 = (unint64_t *)&v149->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    do
      v75 = __ldaxr(v73);
    while (__stlxr(v75 - 1, v73));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
    v77 = v148;
    v76 = v149;
    *(_QWORD *)(v43 - 136) = &off_24C08D790;
    *(_QWORD *)(v43 - 128) = v77;
    *(_QWORD *)(v43 - 120) = v76;
    if (v76)
    {
      v78 = (unint64_t *)&v76->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
  }
  else
  {
    v80 = v148;
    *(_QWORD *)(v43 - 136) = &off_24C08D790;
    *(_QWORD *)(v43 - 128) = v80;
    *(_QWORD *)(v43 - 120) = 0;
  }
  v81 = sub_2081DE99C(v43 - 136);
  v82 = sub_2081DEC1C(v43 - 136);
  v83 = sub_2081DEE9C(v43 - 136);
  v84 = sub_2081DF11C(v43 - 136);
  *(_QWORD *)(v43 - 136) = &off_24C08D790;
  v85 = *(std::__shared_weak_count **)(v43 - 120);
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v47[6] = v81 | ((unint64_t)v82 << 32);
  v47[7] = v83 | ((unint64_t)v84 << 32);
  v147 = &off_24C08D790;
  v88 = v149;
  if (v149)
  {
    v89 = (unint64_t *)&v149->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (!v145)
    goto LABEL_75;
  v91 = (std::__shared_weak_count *)v145[1];
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    do
      v94 = __ldaxr(v92);
    while (__stlxr(v94 - 1, v92));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v145)
  {
    v96 = *v145;
    v95 = (std::__shared_weak_count *)v145[1];
    if (v95)
    {
      v97 = (unint64_t *)&v95->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      do
        v99 = __ldaxr(v97);
      while (__stlxr(v99 - 1, v97));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  else
  {
LABEL_75:
    v96 = 0;
  }
  if (*((_DWORD *)v47 + 12))
  {
    if ((v96 == 0) == (*((_DWORD *)v47 + 13) == 0))
      goto LABEL_81;
  }
  else if (!v96)
  {
    goto LABEL_81;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_81:
  v144 = &off_24C08D790;
  v100 = v146;
  if (v146)
  {
    v101 = (unint64_t *)&v146->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  *v47 = &off_24C0856E8;
  v141 = &off_24C08D790;
  v103 = v143;
  if (v143)
  {
    v104 = (unint64_t *)&v143->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v136 = &off_24C086418;
  *(_QWORD *)(v43 - 136) = v47;
  v106 = (std::__shared_weak_count *)operator new(0x20uLL);
  v107 = v106;
  v106->__shared_owners_ = 0;
  v108 = (unint64_t *)&v106->__shared_owners_;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&off_24C086510;
  v106->__shared_weak_owners_ = 0;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)v47;
  *(_QWORD *)(v43 - 128) = v106;
  do
    v109 = __ldxr(v108);
  while (__stxr(v109 + 1, v108));
  v137 = v47;
  v138 = v106;
  do
    v110 = __ldxr(v108);
  while (__stxr(v110 + 1, v108));
  do
    v111 = __ldaxr(v108);
  while (__stlxr(v111 - 1, v108));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v107);
  }
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v47 + 64))(&v147, v47, 1);
  v112 = v147;
  v113 = v147[2];
  v139 = *(_OWORD *)v147;
  v140 = v113;
  v147 = 0;
  operator delete(v112);
  v114 = v138;
  if (v138)
  {
    v115 = (unint64_t *)&v138->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
    do
      v117 = __ldaxr(v115);
    while (__stlxr(v117 - 1, v115));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v118 = *(std::__shared_weak_count **)(v43 - 128);
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  *(_QWORD *)v42 = &off_24C074C28;
  v121 = v137;
  v122 = v138;
  if (v138)
  {
    v123 = (unint64_t *)&v138->__shared_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
    v125 = HIDWORD(v140);
    v126 = *((_QWORD *)&v139 + 1);
    v127 = v139;
    do
      v128 = __ldxr(v123);
    while (__stxr(v128 + 1, v123));
    do
      v129 = __ldxr(v123);
    while (__stxr(v129 + 1, v123));
  }
  else
  {
    v125 = HIDWORD(v140);
    v126 = *((_QWORD *)&v139 + 1);
    v127 = v139;
  }
  *(_QWORD *)(v42 + 8) = v121;
  *(_QWORD *)(v42 + 16) = v122;
  *(_QWORD *)(v42 + 24) = v126;
  *(_DWORD *)(v42 + 32) = v125;
  *(_QWORD *)(v42 + 40) = v127;
  *(_DWORD *)(v42 + 48) = 1;
  *(_WORD *)(v42 + 52) = 256;
  if (v122)
  {
    v130 = (unint64_t *)&v122->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
    do
      v132 = __ldaxr(v130);
    while (__stlxr(v132 - 1, v130));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v136 = &off_24C086418;
  v133 = v138;
  if (v138)
  {
    v134 = (unint64_t *)&v138->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_2080EF244(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF27C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF2B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF2D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF2EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF308(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF324(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_207C99D78(v1);
  sub_207C99D78(v2 - 136);
  _Unwind_Resume(a1);
}

void sub_2080EF340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  unsigned int *v25;
  uint64_t v26;
  uint64_t v28;

  *(_QWORD *)v25 = off_24C085658;
  v28 = v25[10];
  if ((_DWORD)v28 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v28])(&a25, v26);
  operator delete(v25);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080EF978(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086418;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080EF9EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086418;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080EFA60()
{
  return 1;
}

uint64_t sub_2080EFA68(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2080EFA70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2080EFA84(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080EFB04(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080EFB18(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C084F98;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080EFB7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080EFBEC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086560;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080EFC60(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086560;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080EFCD4()
{
  return 2;
}

uint64_t sub_2080EFCDC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2080EFCE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2080EFCFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080EFD7C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080EFD90(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C0851D8;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080EFDF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080EFE64(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0866A8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080EFED8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0866A8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080EFF4C()
{
  return 3;
}

uint64_t sub_2080EFF54(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2080EFF5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2080EFF74(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080EFFF4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F0008(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085388;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F006C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F00DC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0867F0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F0150(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0867F0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F01C4()
{
  return 4;
}

uint64_t sub_2080F01CC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2080F01D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2080F01EC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F026C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F0280(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085538;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F02E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F0354(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086938;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F03C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086938;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F043C()
{
  return 5;
}

uint64_t sub_2080F0444(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F044C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F0460(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F04E0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F04F4(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085028;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F0558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F05C8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086A80;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F063C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086A80;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F06B0()
{
  return 7;
}

uint64_t sub_2080F06B8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F06C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F06D8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F0758(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F076C(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085418;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F07D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F0840(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086BC8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F08B4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086BC8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F0928()
{
  return 8;
}

uint64_t sub_2080F0930(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F0938@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F0950(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F09D0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F09E4(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C0855C8;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F0A48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F0AB8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086D10;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F0B2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086D10;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F0BA0()
{
  return 17;
}

uint64_t sub_2080F0BA8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F0BB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F0BC4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F0C44(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F0C58(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C0850B8;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F0CBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F0D2C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086E58;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F0DA0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086E58;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F0E14()
{
  return 21;
}

uint64_t sub_2080F0E1C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F0E24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F0E38(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F0EB8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F0ECC(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C0850B8;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F0F30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F0FA0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C086FA0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F1014(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C086FA0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F1088()
{
  return 22;
}

uint64_t sub_2080F1090(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F1098@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F10B0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F1130(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F1144(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085268;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F11A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F1218(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0870E8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F128C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0870E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F1300()
{
  return 25;
}

uint64_t sub_2080F1308(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F1310@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F1324(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F13A4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F13B8(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085148;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F141C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F148C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C087230;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F1500(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C087230;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F1574()
{
  return 29;
}

uint64_t sub_2080F157C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F1584@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F1598(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F1618(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F162C(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085148;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F1690(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F1700(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C087378;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F1774(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C087378;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F17E8()
{
  return 31;
}

uint64_t sub_2080F17F0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F17F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F1810(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F1890(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F18A4(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C0854A8;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F1908(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F1978(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0874C0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F19EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0874C0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F1A60()
{
  return 32;
}

uint64_t sub_2080F1A68(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F1A70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F1A88(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F1B08(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F1B1C(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085658;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F1B80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F1BF0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C087608;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F1C64(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C087608;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F1CD8()
{
  return 33;
}

uint64_t sub_2080F1CE0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F1CE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F1CFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F1D7C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F1D90(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085148;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F1DF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F1E64(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C087750;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F1ED8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C087750;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F1F4C()
{
  return 37;
}

uint64_t sub_2080F1F54(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F1F5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F1F70(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F1FF0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F2004(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C085148;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F2068(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2080F20D8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C087898;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080F214C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C087898;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080F21C0()
{
  return 38;
}

uint64_t sub_2080F21C8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080F21D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080F21E8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2080F2268(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080F227C(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C0852F8;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C0863C0[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_2080F22E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_DWORD *sub_2080F2350(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C0879D0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

size_t sub_2080F2440(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C0879D0[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_2080F252C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C0879D0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_2080F26E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2080F2728(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_2080F29B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2080F29D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2080F29D8(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;

  result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          if (a1 == 1094862674)
            return result;
          v3 = 1111970369;
          goto LABEL_37;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        goto LABEL_39;
      }
      return 2;
    }
    if (a1 > 843264055)
    {
      v4 = -843264056;
LABEL_23:
      v5 = a1 + v4;
      if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0)
        goto LABEL_39;
      return result;
    }
    if (a1 != 24 && a1 != 32)
    {
      v3 = 842285639;
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 <= 1647392358)
    {
      if (a1 > 1278226741)
      {
        if (a1 > 1380410944)
        {
          if (a1 == 1380410945)
            return result;
          v3 = 1380411457;
        }
        else
        {
          if (a1 == 1278226742)
            return result;
          v3 = 1380401729;
        }
        goto LABEL_37;
      }
      v4 = -1278226488;
      goto LABEL_23;
    }
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return result;
        v3 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600)
          return result;
        v3 = 1717856627;
      }
LABEL_37:
      if (a1 == v3)
        return result;
LABEL_39:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 396, (uint64_t)"", 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_208216974);
      abort();
    }
    if (a1 != 1647392359 && a1 != 1647589490)
    {
      v3 = 1647719521;
      goto LABEL_37;
    }
  }
  return result;
}

uint64_t sub_2080F2C14(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;
  _DWORD v4[12];
  uint64_t vars0;

  result = sub_2081DF39C(a1);
  v2 = (char *)&vars0;
  if ((int)result > 875836517)
  {
    if ((int)result > 1111970368)
    {
      switch((_DWORD)result)
      {
        case 0x42475241:
          v3 = 4;
          break;
        case 0x4C303038:
          v3 = 0;
          break;
        case 0x52474241:
          v3 = 6;
          break;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0x34343466:
          v3 = 10;
          break;
        case 0x34343476:
          v3 = 9;
          break;
        case 0x41424752:
          v3 = 5;
          break;
        default:
          goto LABEL_29;
      }
    }
  }
  else if ((int)result > 843264055)
  {
    switch((_DWORD)result)
    {
      case 0x32433038:
        v3 = 11;
        break;
      case 0x34323066:
        v3 = 8;
        break;
      case 0x34323076:
        v3 = 7;
        break;
      default:
        goto LABEL_29;
    }
  }
  else
  {
    switch((_DWORD)result)
    {
      case 0x18:
        v3 = 1;
        break;
      case 0x20:
        v3 = 3;
        break;
      case 0x32344247:
        v3 = 2;
        break;
      default:
        goto LABEL_29;
    }
  }
  v2 = (char *)&v4[v3];
LABEL_29:
  if (v2 - (char *)v4 == 48)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 111, (uint64_t)"Contains(pf::formats::U8(), ref.Format())", 41, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

void ***sub_2080F2DC4(void ***result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  int v6;
  int v7;
  BOOL v8;
  void **v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = *result;
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2 == 1)
  {
    v3 = *((unsigned int *)v1 + 5);
    v4 = *((unsigned int *)v1 + 2);
    v5 = result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      return (void ***)memset(*v1, *(unsigned __int8 *)v5, (*((_DWORD *)v1 + 3) * v3));
    }
    else
    {
      v17 = *((_DWORD *)v1 + 3);
      if ((_DWORD)v4)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = (char *)*v1;
        v20 = v17 - 1;
        if (v17 != 1)
        {
          do
          {
            memset(v19, *(unsigned __int8 *)v5, v4);
            v19 += v3;
            --v20;
          }
          while (v20);
        }
        return (void ***)memset(v19, *(unsigned __int8 *)v5, v4);
      }
    }
  }
  else
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      v10 = v6 - 1;
      v11 = *v1;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *((unsigned int *)v1 + 5);
        if (v10)
        {
          for (i = 0; i != v12; ++i)
          {
            v15 = v10;
            v16 = v11;
            do
            {
              *v16 = *(_BYTE *)v9;
              v16 += v2;
              --v15;
            }
            while (v15);
            *v16 = *(_BYTE *)v9;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *(_BYTE *)v9;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v10; --v10)
      {
        *v11 = *(_BYTE *)v9;
        v11 += v2;
      }
      *v11 = *(_BYTE *)v9;
    }
  }
  return result;
}

size_t *sub_2080F2F3C(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_2080F3100(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_2080F3100(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

_QWORD *sub_2080F324C(_QWORD *result)
{
  char **v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  size_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  BOOL v21;
  char *v23;
  int v24;

  v1 = (char **)*result;
  v2 = *(unsigned int *)(*result + 8);
  v3 = *(unsigned int *)(*result + 24);
  if ((_DWORD)v3 == *(_DWORD *)(*result + 20) * (_DWORD)v2)
  {
    v4 = *((unsigned int *)v1 + 7);
    v5 = *((_DWORD *)v1 + 3);
    v6 = (unsigned __int8 *)result[1];
    v7 = (v5 * v2);
    if ((_DWORD)v4 == v5 * (_DWORD)v3)
    {
      return memset(*v1, *v6, (*((_DWORD *)v1 + 4) * v7));
    }
    else
    {
      v20 = *((_DWORD *)v1 + 4);
      if ((_DWORD)v2)
        v21 = v5 == 0;
      else
        v21 = 1;
      if (!v21 && v20 != 0)
      {
        v23 = *v1;
        v24 = v20 - 1;
        if (v20 != 1)
        {
          do
          {
            memset(v23, *v6, v7);
            v23 += v4;
            --v24;
          }
          while (v24);
        }
        return memset(v23, *v6, v7);
      }
    }
  }
  else
  {
    v9 = *((_DWORD *)v1 + 3);
    v8 = *((_DWORD *)v1 + 4);
    if ((_DWORD)v2)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10 && v8 != 0)
    {
      v12 = (unsigned __int8 *)result[1];
      v13 = v9 - 1;
      v14 = *v1;
      v15 = v8 - 1;
      if (v8 != 1)
      {
        v16 = *((unsigned int *)v1 + 7);
        if (v9 == 1)
        {
          do
          {
            memset(v14, *v12, v2);
            v14 += v16;
            --v15;
          }
          while (v15);
        }
        else
        {
          v17 = 0;
          do
          {
            v18 = v13;
            v19 = v14;
            do
            {
              memset(v19, *v12, v2);
              v19 += v3;
              --v18;
            }
            while (v18);
            memset(v19, *v12, v2);
            v14 += v16;
            ++v17;
          }
          while (v17 != v15);
        }
      }
      for (; v13; --v13)
      {
        memset(v14, *v12, v2);
        v14 += v3;
      }
      return memset(v14, *v12, v2);
    }
  }
  return result;
}

size_t *sub_2080F33F8(size_t *result)
{
  size_t v1;
  size_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  size_t *v18;
  _BYTE *v19;
  int v20;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
    return sub_2080F3514(result);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(_BYTE **)v2;
    v12 = *(_BYTE **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (v8)
      {
        v16 = 0;
        v17 = v11 + 1;
        result = (size_t *)(v12 + 1);
        do
        {
          v18 = result;
          v19 = v17;
          v20 = v8;
          do
          {
            *((_BYTE *)v18 - 1) = *(v19 - 1);
            *(_BYTE *)v18 = *v19;
            v19 += v9;
            v18 = (size_t *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *((_BYTE *)v18 - 1) = *(v19 - 1);
          *(_BYTE *)v18 = *v19;
          v11 += v15;
          v12 += v14;
          ++v16;
          v17 += v15;
          result = (size_t *)((char *)result + v14);
        }
        while (v16 != v13);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
      }
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    *v12 = *v11;
    v12[1] = v11[1];
  }
  return result;
}

size_t *sub_2080F3514(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  size_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 24);
  v4 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = *(_DWORD *)(v1 + 8);
    if ((_DWORD)v3 == *(_DWORD *)(v1 + 20) * v5)
      return sub_2080F35E8(result);
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 8);
  }
  v10 = v5;
  v7 = *(_DWORD *)(v1 + 12);
  v6 = *(_DWORD *)(v1 + 16);
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8 && v6 != 0)
  {
    v13 = 0;
    v14 = v5 - 1;
    v15 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
    v16 = v7 - 1;
    v17 = v3 | (v4 << 32);
    v18 = v6 - 1;
    v19 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
    v12 = *(const void **)v1;
    v11 = *(void **)v2;
    return (size_t *)sub_2080F3848(&v13, &v10, &v12, &v11);
  }
  return result;
}

size_t *sub_2080F35E8(size_t *result)
{
  size_t v1;
  size_t v2;
  int v3;
  int v4;
  size_t v5;
  char *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  size_t v11;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 28);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 28) && v3 == *(_DWORD *)(v1 + 24) * v4)
  {
    v5 = (*(_DWORD *)(v1 + 8) * v4 * *(_DWORD *)(v1 + 16));
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v11 = (v8 * v4);
  if (v8)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(v1 + 16) != 0)
    return sub_2080F36F4(&v11, (char **)v1, (char **)v2);
  return result;
}

size_t *sub_2080F36F4(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;

  v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v4 = *((_DWORD *)a2 + 3) == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = result;
    v7 = *a2;
    v8 = *a3;
    v9 = v3 - 1;
    if (v3 != 1)
    {
      v10 = *((unsigned int *)a3 + 7);
      v11 = *((unsigned int *)a2 + 7);
      do
      {
        v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    v13 = *v6;
    if (!v7 && v13)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_22:
        abort();
      }
      return (size_t *)memmove(v8, v7, v13);
    }
    if (v13)
      return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

_DWORD *sub_2080F3848(_DWORD *result, size_t *a2, const void **a3, void **a4)
{
  size_t *v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  int v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  size_t v23;
  unsigned int v24;
  unsigned int i;
  char *v26;
  _BOOL4 v27;
  size_t v28;
  char *v29;
  size_t v30;
  size_t v31;
  BOOL v32;
  char *v33;
  _BOOL4 v34;
  int v35;
  char *v36;
  char *v37;

  v4 = a2;
  v5 = result;
  v6 = (char *)*a3;
  v7 = (char *)*a4;
  if (result[8])
  {
    v8 = 0;
    v9 = (unsigned __int8 *)&qword_254530A20;
    do
    {
      v35 = v8;
      v11 = v5[5];
      v36 = v7;
      v37 = v6;
      v12 = v7;
      v13 = v6;
      if (v11)
      {
        v14 = 0;
        v12 = v7;
        v13 = v37;
        while (1)
        {
          v15 = *v4;
          if (!v13)
          {
            if (v15)
              break;
          }
          if (v15)
            goto LABEL_9;
LABEL_10:
          v13 += v5[6];
          v12 += v5[7];
          if (++v14 >= v11)
            goto LABEL_26;
        }
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v16 = atomic_load(v9);
        if ((v16 & 1) == 0 && __cxa_guard_acquire((__guard *)v9))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release((__guard *)v9);
        }
        v17 = v9;
        if (!byte_254530A10 || byte_254530A18)
        {
          v19 = qword_2545309E8;
          v20 = qword_2545309F0;
          while (v19 != v20)
          {
            v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v19;
            v21 = *(_QWORD *)(v19 + 8);
            v19 += 16;
            v22(v21, "ptr != nullptr || size == 0", 27, "", 0);
          }
        }
        v9 = v17;
        v18 = atomic_load(v17);
        if ((v18 & 1) == 0 && __cxa_guard_acquire((__guard *)v17))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release((__guard *)v17);
        }
        v4 = a2;
        if (!byte_254530A10)
          goto LABEL_48;
        qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
LABEL_9:
        result = memmove(v12, v13, v15);
        v11 = v5[5];
        goto LABEL_10;
      }
LABEL_26:
      v23 = *v4;
      if (!v13 && v23)
      {
        v10 = v37;
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_48;
        }
      }
      else
      {
        v10 = v37;
        if (!v23)
          goto LABEL_5;
      }
      result = memmove(v12, v13, v23);
LABEL_5:
      v6 = &v10[v5[9]];
      v7 = &v36[v5[10]];
      v8 = v35 + 1;
    }
    while ((v35 + 1) < v5[8]);
  }
  v24 = v5[5];
  if (v24)
  {
    for (i = 0; i < v24; ++i)
    {
      v30 = *v4;
      if (!v6 && v30)
      {
        v26 = v7;
        v27 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v7 = v26;
        if (v27)
          goto LABEL_48;
      }
      else if (!v30)
      {
        goto LABEL_34;
      }
      v28 = v30;
      v29 = v7;
      result = memmove(v7, v6, v28);
      v7 = v29;
      v24 = v5[5];
LABEL_34:
      v6 += v5[6];
      v7 += v5[7];
    }
  }
  v31 = *v4;
  if (v6)
    v32 = 1;
  else
    v32 = v31 == 0;
  if (!v32)
  {
    v33 = v7;
    v34 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    v7 = v33;
    if (v34)
LABEL_48:
      abort();
    return memmove(v7, v6, v31);
  }
  if (v31)
    return memmove(v7, v6, v31);
  return result;
}

void sub_2080F3BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_BYTE **)a2;
    v11 = *(_BYTE **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 2;
        v17 = v10 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
  }
}

uint64_t sub_2080F3D20(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  if (a3[1])
    v4 = *a3 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a3;
  if (v4)
    v5 = 0;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  LODWORD(v9) = 1;
  *(_QWORD *)((char *)&v9 + 4) = v6 | (v7 << 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = __PAIR64__(v5, 3);
  *(_DWORD *)(a1 + 16) = HIDWORD(v5);
  *(_QWORD *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)&v9 + 4);
  if ((_DWORD)v7 * HIDWORD(v5) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return a1;
}

_DWORD *sub_2080F3E38(_DWORD *result, uint64_t a2, _BYTE ***a3, _BYTE *a4)
{
  unsigned int v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;

  if (result[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (result[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
          v5 += result[4];
          ++v6;
        }
        while (v6 < result[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
      a4 += result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *(_QWORD *)a2 = a4;
  if (result[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
      a4 += result[4];
      ++v7;
    }
    while (v7 < result[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
  return result;
}

void sub_2080F3FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_BYTE **)a2;
    v11 = *(_BYTE **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 3;
        v17 = v10 + 1;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 3) = *(v18 - 1);
            *(v19 - 2) = *v18;
            *(v19 - 1) = v18[1];
            *v19 = v18[2];
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 3) = *(v18 - 1);
          *(v19 - 2) = *v18;
          *(v19 - 1) = v18[1];
          *v19 = v18[2];
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
  }
}

uint64_t sub_2080F4144(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 2 * v6;
    if (!(_DWORD)v6)
      v13 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (__int16 *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    v16 = vld1q_dup_s16(v2);
    v17 = (int16x8_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_2080F42D4((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_2080F42D4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t *sub_2080F44E4(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;

  v3 = *((unsigned int *)result + 4);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *((_DWORD *)result + 5);
    v24 = *((_DWORD *)result + 2);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v27 = (*((_DWORD *)result + 3) * v23);
      v28 = (char *)*result;
      if ((_DWORD)v27)
        v29 = v28 == 0;
      else
        v29 = 0;
      if (v29)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
      }
      else if (!(_DWORD)v27)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)a2, v28, 2 * v27);
    }
    v30 = *((unsigned int *)result + 2);
    if (v24)
      v26 = *((_DWORD *)result + 3) == 0;
    else
      v26 = 1;
    if (!v26)
      return sub_2080F46C0(&v30, (char **)result, (char **)a2);
  }
  else
  {
    v6 = *((_DWORD *)result + 2);
    v7 = *((_DWORD *)result + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = (char *)*result;
      v11 = *(_WORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *((unsigned int *)result + 5);
        if (!v9)
        {
          do
          {
            *v11 = *(_WORD *)v10;
            v10 += 2 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          *v11 = *(_WORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 2 * v14;
        v17 = 2 * v13;
        result = (uint64_t *)(2 * v4);
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_WORD *)v19;
            v19 += 2 * v3;
            v18 = (_WORD *)((char *)result + (_QWORD)v18);
            --v20;
          }
          while (v20);
          *v18 = *(_WORD *)v19;
          v10 += v16;
          v11 = (_WORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 2 * v3;
        v22 = 2 * v4;
        do
        {
          *v11 = *(_WORD *)v10;
          v10 += v21;
          v11 = (_WORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_2080F46C0(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 2 * *((unsigned int *)a2 + 5);
      v10 = 2 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 2 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 2 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 2 * v12);
  }
  return result;
}

uint64_t sub_2080F4814(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 *v16;
  unint64_t v17;
  int16x8_t v18;
  int16x8_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  _QWORD v25[3];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 2 * v6;
    if (!(_DWORD)v6)
      v15 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (__int16 *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (__int16 *)(v7 + 2 * (v14 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF0;
    v18 = vld1q_dup_s16(v2);
    v19 = (int16x8_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_2080F49C8((_BOOL8)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_2080F49C8(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  int16x8_t v15;
  int16x8_t *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t *v27;
  unint64_t v28;
  unint64_t v29;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if (result)
            goto LABEL_39;
        }
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v4 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v4 + 2 * v12;
          v13 = (__int16 *)v4;
          if (v14)
          {
            v13 = (__int16 *)(v4 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            v15 = vld1q_dup_s16(v11);
            v16 = (int16x8_t *)(v4 + 16);
            v17 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = v15;
              *v16 = v15;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v4;
        }
        v19 = v12 + 1;
        do
        {
          *v13++ = *v11;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 2 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if (result)
LABEL_39:
        abort();
    }
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v4 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v4 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v4;
      v25 = v22;
LABEL_36:
      v29 = v25 + 1;
      do
      {
        *v24++ = *v21;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v24 = (__int16 *)(v4 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    v26 = vld1q_dup_s16(v21);
    v27 = (int16x8_t *)(v4 + 16);
    v28 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_2080F4BE0(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const __int16 *v9;
  uint64_t v10;
  __int16 *v11;
  BOOL v12;
  int16x8_t v13;
  int16x8_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  int16x8_t v24;
  int16x8_t *v25;
  unint64_t v26;
  unint64_t v27;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const __int16 **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v10 >= 1)
      {
        if ((unint64_t)v10 >= 0x10)
        {
          v12 = v4 >= (unint64_t)(v9 + 1) || (unint64_t)v9 >= v4 + 2 * v10;
          v11 = (__int16 *)v4;
          if (v12)
          {
            v11 = (__int16 *)(v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
            v13 = vld1q_dup_s16(v9);
            v14 = (int16x8_t *)(v4 + 16);
            v15 = v10 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = v13;
              *v14 = v13;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
            v10 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v11 = (__int16 *)v4;
        }
        v17 = v10 + 1;
        do
        {
          *v11++ = *v9;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v4)
  {
    if (v20)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v4 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v4 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v4;
      v23 = v20;
LABEL_36:
      v27 = v23 + 1;
      do
      {
        *v22++ = *v19;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v22 = (__int16 *)(v4 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    v24 = vld1q_dup_s16(v19);
    v25 = (int16x8_t *)(v4 + 16);
    v26 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *v25 = v24;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

_QWORD **sub_2080F4DE8(_QWORD **result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  _QWORD **v13;
  int v14;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = v2 - 1;
    v7 = *(unsigned int *)(a2 + 24);
    v8 = *(_WORD **)a2;
    v9 = v3 - 1;
    if (v3 == 1)
    {
      v11 = (_WORD *)**result;
      if (!v6)
      {
LABEL_19:
        *v8 = *v11;
        v8[1] = *v11;
        v8[2] = *v11;
        return result;
      }
    }
    else
    {
      v10 = *(unsigned int *)(a2 + 28);
      v11 = (_WORD *)**result;
      if (!v6)
      {
        do
        {
          *v8 = *v11;
          v8[1] = *v11;
          v8[2] = *v11;
          v8 += v10;
          --v9;
        }
        while (v9);
        goto LABEL_19;
      }
      v12 = 0;
      v13 = (_QWORD **)(v8 + 2);
      do
      {
        result = v13;
        v14 = v6;
        do
        {
          *((_WORD *)result - 2) = *v11;
          *((_WORD *)result - 1) = *v11;
          *(_WORD *)result = *v11;
          result = (_QWORD **)((char *)result + 2 * v7);
          --v14;
        }
        while (v14);
        *((_WORD *)result - 2) = *v11;
        *((_WORD *)result - 1) = *v11;
        *(_WORD *)result = *v11;
        v8 += v10;
        ++v12;
        v13 = (_QWORD **)((char *)v13 + 2 * v10);
      }
      while (v12 != v9);
    }
    do
    {
      *v8 = *v11;
      v8[1] = *v11;
      v8[2] = *v11;
      v8 += v7;
      --v6;
    }
    while (v6);
    goto LABEL_19;
  }
  return result;
}

uint64_t *sub_2080F4F10(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_2080F5044((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_2080F5044((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 2 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_2080F5198(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_2080F5044(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 2 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 2 * result[7];
      v12 = 2 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        result = memmove(v9, v8, 2 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_2080F5198(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_254530A20;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_254530A10 || byte_254530A18)
              {
                v22 = qword_2545309E8;
                v23 = qword_2545309F0;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_254530A10)
                goto LABEL_52;
              v8 = v18;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 2 * v17);
LABEL_19:
            v15 = &v16[2 * v43];
            v13 += 2 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 2 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[2 * v36];
          v13 = &v39[2 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 2 * *((unsigned int *)a2 + 7);
      v33 = 2 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 2 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 2 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 2 * v30);
LABEL_44:
        v28 += 2 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 2 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 2 * v31);
  }
  return result;
}

_DWORD *sub_2080F5608(uint64_t a1)
{
  _DWORD *result;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _WORD *v12;
  _DWORD v13[7];

  result = *(_DWORD **)a1;
  v3 = result[5];
  if (v3 == 1)
  {
    if (result[6] == result[2])
      return (_DWORD *)sub_2080F4814(a1);
    else
      return (_DWORD *)sub_2080F56C4((uint64_t)result, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v5 = result[2];
    v4 = result[3];
    v6 = result[4];
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v11 = &v10;
      v13[0] = 0;
      v13[1] = v5 - 1;
      v13[2] = v3;
      v13[3] = v4 - 1;
      v9 = result[7];
      v13[4] = result[6];
      v13[5] = v6 - 1;
      v13[6] = v9;
      v12 = *(_WORD **)result;
      return sub_2080F5784(v13, &v11, &v12);
    }
  }
  return result;
}

uint64_t sub_2080F56C4(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_2080F4BE0((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 2 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_2080F4BE0((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

_DWORD *sub_2080F5784(_DWORD *result, _QWORD **a2, _WORD **a3)
{
  _WORD *v3;
  int v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;

  v3 = *a3;
  v4 = result[5];
  if (!v4)
  {
    v5 = result[3];
    v6 = (_WORD *)**a2;
    if (!v5)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = result[3];
  v6 = (_WORD *)**a2;
  v7 = result[6];
  if (v5)
  {
    v8 = 0;
    v9 = v3 + 2;
    v10 = 2 * result[4];
    do
    {
      v11 = v9;
      v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *v11 = *v6;
        v11[1] = *v6;
        v11 = (_WORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    v13 = 2 * result[4];
    do
    {
      *v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      v3 = (_WORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  v3[3] = *v6;
  return result;
}

void sub_2080F58C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_WORD **)a2;
    v11 = *(_WORD **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        v11[3] = v10[3];
        return;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

void sub_2080F5A3C(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  const __int16 *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unint64_t v16;
  int16x8_t v17;
  int16x8_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  _DWORD v23[5];
  _QWORD v24[2];

  v2 = *a1;
  v3 = (const __int16 *)a1[1];
  v4 = *(unsigned int *)(*a1 + 8);
  v6 = *(_DWORD *)(*a1 + 16);
  v5 = *(_DWORD *)(*a1 + 20);
  if (v5 == v6 * (_DWORD)v4)
  {
    v7 = (*(_DWORD *)(v2 + 12) * v4);
    v8 = *(_QWORD *)v2;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v13 = v7 - ((_DWORD)v7 != 0) + 1;
    if (v13 < 0x10)
      goto LABEL_19;
    v14 = 2 * v7;
    if (!(_DWORD)v7)
      v14 = 2;
    if (v8 < (unint64_t)(v3 + 1) && v8 + v14 > (unint64_t)v3)
    {
LABEL_19:
      v15 = (__int16 *)v8;
LABEL_20:
      v16 = v7 + 1;
      do
      {
        *v15++ = *v3;
        --v16;
      }
      while (v16 > 1);
      return;
    }
    v15 = (__int16 *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v13 & 0xFFFFFFFFFFFFFFF0;
    v17 = vld1q_dup_s16(v3);
    v18 = (int16x8_t *)(v8 + 16);
    v19 = v13 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v21 = 0;
    v20 = v4;
    v22[0] = &v21;
    v22[1] = &v20;
    v22[2] = v3;
    v10 = *(_DWORD *)(v2 + 12);
    if ((_DWORD)v4)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v23[0] = 0;
      v23[1] = v4 - 1;
      v23[2] = v6;
      v23[3] = v10 - 1;
      v23[4] = v5;
      v12 = *(_QWORD *)v2;
      v24[0] = 0;
      v24[1] = 0;
      sub_2080F5BCC(v23, (uint64_t)v24, (uint64_t)v22, v12, a2);
    }
  }
}

unsigned __int16 sub_2080F5BCC@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  int v8;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  __n128 *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;

  v5 = a4;
  v8 = a1[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (a1[3])
  {
    for (i = 0; i < a1[3]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v12
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_39;
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v5 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v5 + 2 * v12;
          v13 = (__int16 *)v5;
          if (v14)
          {
            v13 = (__int16 *)(v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v11);
            v15 = (__n128 *)(v5 + 16);
            v16 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = a5;
              *v15 = a5;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v5;
        }
        v18 = v12 + 1;
        do
        {
          a5.n128_u16[0] = *v11;
          *v13++ = *v11;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v5 += 2 * a1[4];
    }
  }
  *(_QWORD *)a2 = v5;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v5
    && v21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_39:
    abort();
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v5 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v5 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v5;
      v24 = v21;
LABEL_36:
      v27 = v24 + 1;
      do
      {
        a5.n128_u16[0] = *v20;
        *v23++ = *v20;
        --v27;
      }
      while (v27 > 1);
      return a5.n128_u16[0];
    }
    v23 = (__int16 *)(v5 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v20);
    v25 = (__n128 *)(v5 + 16);
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = a5;
      *v25 = a5;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

__int16 sub_2080F5DDC@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  _WORD *v29;
  unint64_t v30;
  __int16 *v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v2 + 16);
  v5 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v4 == 1 && (_DWORD)v5 == 1)
  {
    v24 = *(_DWORD *)(v2 + 20);
    if (v24 != *(_DWORD *)(v3 + 20) || v24 != *(_DWORD *)(v2 + 8))
    {
      LOWORD(v28) = sub_2080F6004((uint64_t *)v2, (uint64_t *)v3);
      return v28;
    }
    v25 = (*(_DWORD *)(v2 + 12) * v24);
    v26 = *(_QWORD *)v2;
    if ((_DWORD)v25)
      v27 = v26 == 0;
    else
      v27 = 0;
    if (v27)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v25)
    {
      return v28;
    }
    v29 = *(_WORD **)v3;
    v30 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v30 < 0xF)
    {
      v31 = (__int16 *)v26;
    }
    else
    {
      v31 = (__int16 *)v26;
      if ((unint64_t)v29 - v26 >= 0x20)
      {
        v32 = v30 + 1;
        v33 = v32 & 0xFFFFFFFFFFFFFFF0;
        v34 = &v29[v33];
        v31 = (__int16 *)(v26 + v33 * 2);
        v35 = (__int128 *)(v26 + 16);
        v36 = v29 + 8;
        v37 = v32 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v28 = *(v35 - 1);
          v38 = *v35;
          *(v36 - 1) = v28;
          *v36 = v38;
          v35 += 2;
          v36 += 2;
          v37 -= 16;
        }
        while (v37);
        v29 = v34;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF0))
          return v28;
      }
    }
    do
    {
      v39 = *v31++;
      LOWORD(v28) = v39;
      *v29++ = v39;
    }
    while (v31 != (__int16 *)(v26 + 2 * v25));
    return v28;
  }
  v7 = *(_DWORD *)(v2 + 8);
  v8 = *(_DWORD *)(v2 + 12);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = v7 - 1;
    v11 = *(_WORD **)v2;
    v12 = *(_WORD **)v3;
    v13 = 2 * v4;
    v14 = 2 * v5;
    v15 = v8 - 1;
    if (v15)
    {
      v16 = *(unsigned int *)(v3 + 20);
      v17 = *(unsigned int *)(v2 + 20);
      if (v10)
      {
        v18 = 0;
        v19 = 2 * v17;
        v20 = 2 * v16;
        do
        {
          v21 = v12;
          v22 = v11;
          v23 = v10;
          do
          {
            *v21 = *v22;
            v22 = (_WORD *)((char *)v22 + v13);
            v21 = (_WORD *)((char *)v21 + v14);
            --v23;
          }
          while (v23);
          *v21 = *v22;
          v11 = (_WORD *)((char *)v11 + v19);
          v12 = (_WORD *)((char *)v12 + v20);
          ++v18;
        }
        while (v18 != v15);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v11 += v17;
          v12 += v16;
          --v15;
        }
        while (v15);
      }
    }
    for (; v10; --v10)
    {
      *v12 = *v11;
      v11 = (_WORD *)((char *)v11 + v13);
      v12 = (_WORD *)((char *)v12 + v14);
    }
    LOWORD(v28) = *v11;
    *v12 = *v11;
  }
  return v28;
}

__int16 sub_2080F6004@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _WORD *v16;
  __int16 *v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int16 v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _WORD *v27;
  __int16 *v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  uint64_t v36;
  uint64_t v37;

  v3 = *((unsigned int *)a1 + 2);
  v2 = *((_DWORD *)a1 + 3);
  if ((_DWORD)v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *a1;
    v6 = *a2;
    v7 = v2 - 1;
    v36 = *((unsigned int *)a1 + 2);
    if (v2 != 1)
    {
      v8 = 0;
      v9 = 2 * *((unsigned int *)a2 + 5);
      v10 = 2 * *((unsigned int *)a1 + 5);
      v11 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v12 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
      v37 = 2 * v12;
      v13 = *a2;
      v14 = *a1;
      while (1)
      {
        if (!v14)
        {
          v15 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v3 = v36;
          if (v15)
            goto LABEL_29;
        }
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if (v11 < 0xF)
          goto LABEL_33;
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if ((unint64_t)(v6 + v9 * v8 - (v5 + v10 * v8)) < 0x20)
          goto LABEL_33;
        v18 = 0;
        v16 = (_WORD *)(v13 + v37);
        v17 = (__int16 *)(v14 + v37);
        v19 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v20 = (_OWORD *)(v13 + v18);
          v21 = *(_OWORD *)(v14 + v18 + 16);
          *v20 = *(_OWORD *)(v14 + v18);
          v20[1] = v21;
          v18 += 32;
          v19 -= 16;
        }
        while (v19);
        if (v11 + 1 != v12)
        {
LABEL_33:
          do
          {
            v22 = *v17++;
            *v16++ = v22;
          }
          while (v17 != (__int16 *)(v14 + 2 * v3));
        }
        v14 += v10;
        v13 += v9;
        if ((_DWORD)++v8 == v7)
          goto LABEL_18;
      }
    }
    v13 = *a2;
    v14 = *a1;
LABEL_18:
    if (!v14)
    {
      v23 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      v3 = v36;
      if (v23)
LABEL_29:
        abort();
    }
    v24 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v24 < 0xF || (unint64_t)(v13 - v14) < 0x20)
    {
      v27 = (_WORD *)v13;
      v28 = (__int16 *)v14;
    }
    else
    {
      v25 = v24 + 1;
      v26 = (v24 + 1) & 0xFFFFFFFFFFFFFFF0;
      v27 = (_WORD *)(v13 + 2 * v26);
      v28 = (__int16 *)(v14 + 2 * v26);
      v29 = (__int128 *)(v14 + 16);
      v30 = (_OWORD *)(v13 + 16);
      v31 = v26;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        *(v30 - 1) = v32;
        *v30 = v33;
        v29 += 2;
        v30 += 2;
        v31 -= 16;
      }
      while (v31);
      if (v25 == v26)
        return v32;
    }
    do
    {
      v34 = *v28++;
      LOWORD(v32) = v34;
      *v27++ = v34;
    }
    while (v28 != (__int16 *)(v14 + 2 * v3));
  }
  return v32;
}

void sub_2080F6238(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  const __int16 *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unint64_t v18;
  int16x8_t v19;
  int16x8_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];
  unsigned int v25[7];
  _QWORD v26[3];

  v2 = *a1;
  v3 = (const __int16 *)a1[1];
  v4 = *(_DWORD *)(*a1 + 12);
  v6 = *(_DWORD *)(*a1 + 24);
  v5 = *(_DWORD *)(*a1 + 28);
  if (v5 == v6 * v4)
  {
    v7 = (*(_DWORD *)(v2 + 8) * v4 * *(_DWORD *)(v2 + 16));
    v8 = *(_QWORD *)v2;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v15 = v7 - ((_DWORD)v7 != 0) + 1;
    if (v15 < 0x10)
      goto LABEL_22;
    v16 = 2 * v7;
    if (!(_DWORD)v7)
      v16 = 2;
    if (v8 < (unint64_t)(v3 + 1) && v8 + v16 > (unint64_t)v3)
    {
LABEL_22:
      v17 = (__int16 *)v8;
LABEL_23:
      v18 = v7 + 1;
      do
      {
        *v17++ = *v3;
        --v18;
      }
      while (v18 > 1);
      return;
    }
    v17 = (__int16 *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v15 & 0xFFFFFFFFFFFFFFF0;
    v19 = vld1q_dup_s16(v3);
    v20 = (int16x8_t *)(v8 + 16);
    v21 = v15 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v20[-1] = v19;
      *v20 = v19;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_23;
  }
  else
  {
    v23 = 0;
    v10 = *(_DWORD *)(v2 + 8);
    v22 = (v10 * v4);
    v24[0] = &v23;
    v24[1] = &v22;
    v24[2] = v3;
    v11 = *(_DWORD *)(v2 + 16);
    if (v4)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12 && v11 != 0)
    {
      v25[0] = 0;
      v25[1] = v10 - 1;
      v25[2] = *(_DWORD *)(v2 + 20);
      v25[3] = v4 - 1;
      v25[4] = v6;
      v25[5] = v11 - 1;
      v25[6] = v5;
      v14 = *(_QWORD *)v2;
      memset(v26, 0, sizeof(v26));
      sub_2080F63EC(v25, (uint64_t)v26, (uint64_t)v24, v14, a2);
    }
  }
}

unsigned __int16 sub_2080F63EC@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int i;
  const __int16 *v12;
  uint64_t v13;
  __int16 *v14;
  BOOL v15;
  __n128 *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;

  v5 = a4;
  v8 = a1[4];
  v9 = a1[2] | (unint64_t)(v8 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v8;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v12 = *(const __int16 **)(a3 + 16);
      v13 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v13
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_39;
      }
      if (v13 >= 1)
      {
        if ((unint64_t)v13 >= 0x10)
        {
          v15 = v5 >= (unint64_t)(v12 + 1) || (unint64_t)v12 >= v5 + 2 * v13;
          v14 = (__int16 *)v5;
          if (v15)
          {
            v14 = (__int16 *)(v5 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v12);
            v16 = (__n128 *)(v5 + 16);
            v17 = v13 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = a5;
              *v16 = a5;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v13 == (v13 & 0x7FFFFFFFFFFFFFF0);
            v13 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (__int16 *)v5;
        }
        v19 = v13 + 1;
        do
        {
          a5.n128_u16[0] = *v12;
          *v14++ = *v12;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v5 += 2 * a1[6];
    }
  }
  *(_QWORD *)a2 = v5;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v5
    && v22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_39:
    abort();
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v5 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v5 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v5;
      v25 = v22;
LABEL_36:
      v28 = v25 + 1;
      do
      {
        a5.n128_u16[0] = *v21;
        *v24++ = *v21;
        --v28;
      }
      while (v28 > 1);
      return a5.n128_u16[0];
    }
    v24 = (__int16 *)(v5 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v21);
    v26 = (__n128 *)(v5 + 16);
    v27 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = a5;
      *v26 = a5;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_2080F6604@<H0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  __n128 *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a4;
  *a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    for (i = 0; i < *(_DWORD *)(a1 + 12); ++i)
    {
      *a2 = v5;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v11
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_39;
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v5 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v5 + 2 * v11;
          v12 = (__int16 *)v5;
          if (v13)
          {
            v12 = (__int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v10);
            v14 = (__n128 *)(v5 + 16);
            v15 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = a5;
              *v14 = a5;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v5;
        }
        v17 = v11 + 1;
        do
        {
          a5.n128_u16[0] = *v10;
          *v12++ = *v10;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v5 += 2 * *(unsigned int *)(a1 + 16);
    }
  }
  *a2 = v5;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v5
    && v20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_39:
    abort();
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v5 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v5 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v5;
      v23 = v20;
LABEL_36:
      v26 = v23 + 1;
      do
      {
        a5.n128_u16[0] = *v19;
        *v22++ = *v19;
        --v26;
      }
      while (v26 > 1);
      return a5.n128_u16[0];
    }
    v22 = (__int16 *)(v5 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v19);
    v24 = (__n128 *)(v5 + 16);
    v25 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24[-1] = a5;
      *v24 = a5;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

__int16 sub_2080F680C@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  int v22;
  unsigned int v23;
  double v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v22 = *(_DWORD *)(v1 + 24);
    if (v22 == *(_DWORD *)(v2 + 24))
    {
      v23 = *(_DWORD *)(v1 + 8);
      if (v22 == v23)
      {
        v24 = sub_2080F69AC(a1);
        return LOWORD(v24);
      }
    }
    else
    {
      v23 = *(_DWORD *)(v1 + 8);
    }
    v30 = v23;
    if (v23)
      v25 = *(_DWORD *)(v1 + 12) == 0;
    else
      v25 = 1;
    if (!v25 && *(_DWORD *)(v1 + 16) != 0)
      v24 = sub_2080F6DC4(&v30, v1, v2);
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 12);
    v5 = *(_DWORD *)(v1 + 16);
    if (*(_DWORD *)(v1 + 8))
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)v1;
      v10 = *(_WORD **)v2;
      v11 = 2 * *(unsigned int *)(v1 + 24);
      v12 = 2 * *(unsigned int *)(v2 + 24);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(v2 + 28);
        v15 = *(unsigned int *)(v1 + 28);
        if (v8)
        {
          v16 = 0;
          v17 = v9 + 1;
          v18 = v10 + 1;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v19 - 1) = *(v20 - 1);
              *v19 = *v20;
              v20 = (_WORD *)((char *)v20 + v11);
              v19 = (_WORD *)((char *)v19 + v12);
              --v21;
            }
            while (v21);
            *(v19 - 1) = *(v20 - 1);
            *v19 = *v20;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v15;
            v18 += v14;
          }
          while (v16 != v13);
        }
        else
        {
          v27 = 2 * v15;
          v28 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v9 = (_WORD *)((char *)v9 + v27);
            v10 = (_WORD *)((char *)v10 + v28);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      LOWORD(v24) = v9[1];
      v10[1] = LOWORD(v24);
    }
  }
  return LOWORD(v24);
}

double sub_2080F69AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _WORD *v18;
  unint64_t v19;
  __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  _WORD *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int16 v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _OWORD v38[3];

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 28);
  v4 = *(unsigned int *)(v2 + 28);
  v5 = *(_DWORD *)(*a1 + 12);
  if ((_DWORD)v3 == (_DWORD)v4 && (_DWORD)v3 == *(_DWORD *)(v1 + 24) * v5)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v5 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
    else if (!(_DWORD)v6)
    {
      return *(double *)&v17;
    }
    v18 = *(_WORD **)v2;
    v19 = (v6 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v19 < 0xF)
    {
      v20 = (__int16 *)v7;
      do
      {
LABEL_25:
        v28 = *v20++;
        LOWORD(v17) = v28;
        *v18++ = v28;
      }
      while (v20 != (__int16 *)(v7 + 2 * v6));
      return *(double *)&v17;
    }
    v20 = (__int16 *)v7;
    if ((unint64_t)v18 - v7 < 0x20)
      goto LABEL_25;
    v21 = v19 + 1;
    v22 = v21 & 0xFFFFFFFFFFFFFFF0;
    v23 = &v18[v22];
    v20 = (__int16 *)(v7 + v22 * 2);
    v24 = (__int128 *)(v7 + 16);
    v25 = v18 + 8;
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = *(v24 - 1);
      v27 = *v24;
      *(v25 - 1) = v17;
      *v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_25;
  }
  else
  {
    v9 = *(_DWORD *)(v1 + 8);
    v30 = (v9 * v5);
    v10 = *(_DWORD *)(v1 + 16);
    if (v9)
      v11 = v5 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v32 = v9 - 1;
      v13 = *(unsigned int *)(v1 + 24);
      v14 = *(unsigned int *)(v2 + 24);
      v33 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
      v31 = 0;
      v34 = v5 - 1;
      v35 = v13 | (v14 << 32);
      v36 = v10 - 1;
      v37 = v3 | (v4 << 32);
      v15 = *(_QWORD *)v1;
      v16 = *(_QWORD *)v2;
      memset(v38, 0, sizeof(v38));
      *(_QWORD *)&v17 = sub_2080F6B74((unsigned int *)&v31, (uint64_t)v38, &v30, v15, v16);
    }
  }
  return *(double *)&v17;
}

__int16 sub_2080F6B74@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int16 *v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  __int16 *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v5 = a5;
  v6 = a4;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[3] | (unint64_t)(v9 << 32);
  v12 = a1[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = a5;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v13 = a1[8];
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v16 = *a3;
      if (v6 || !v16)
      {
        v17 = v5;
        if (!v16)
          goto LABEL_4;
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_33;
        }
        v17 = *(_QWORD *)(a2 + 24);
      }
      v18 = (v16 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v18 < 0xF || (unint64_t)(v17 - v6) < 0x20)
      {
        v21 = (_WORD *)v17;
        v22 = (__int16 *)v6;
      }
      else
      {
        v19 = v18 + 1;
        v20 = (v18 + 1) & 0xFFFFFFFFFFFFFFF0;
        v21 = (_WORD *)(v17 + 2 * v20);
        v22 = (__int16 *)(v6 + 2 * v20);
        v23 = (__int128 *)(v6 + 16);
        v24 = (_OWORD *)(v17 + 16);
        v25 = v20;
        do
        {
          v26 = *(v23 - 1);
          v27 = *v23;
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v19 == v20)
          goto LABEL_3;
      }
      do
      {
        v28 = *v22++;
        LOWORD(v26) = v28;
        *v21++ = v28;
      }
      while (v22 != (__int16 *)(v6 + 2 * v16));
LABEL_3:
      v13 = a1[8];
LABEL_4:
      v6 += 2 * a1[9];
      v5 += 2 * a1[10];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v29 = *a3;
  if (v6 || !v29)
  {
    if (!v29)
      return v26;
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_33:
      abort();
    }
    v5 = *(_QWORD *)(a2 + 24);
  }
  v30 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v30 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v33 = (_WORD *)v5;
    v34 = (__int16 *)v6;
    do
    {
LABEL_31:
      v39 = *v34++;
      LOWORD(v26) = v39;
      *v33++ = v39;
    }
    while (v34 != (__int16 *)(v6 + 2 * v29));
    return v26;
  }
  v31 = v30 + 1;
  v32 = (v30 + 1) & 0xFFFFFFFFFFFFFFF0;
  v33 = (_WORD *)(v5 + 2 * v32);
  v34 = (__int16 *)(v6 + 2 * v32);
  v35 = (__int128 *)(v6 + 16);
  v36 = (_OWORD *)(v5 + 16);
  v37 = v32;
  do
  {
    v26 = *(v35 - 1);
    v38 = *v35;
    *(v36 - 1) = v26;
    *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 16;
  }
  while (v37);
  if (v31 != v32)
    goto LABEL_31;
  return v26;
}

double sub_2080F6DC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  double result;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  _OWORD v22[2];

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 24);
    v10 = *(unsigned int *)(a3 + 24);
    v17 = *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned int *)(a3 + 20) << 32);
    v15 = 0;
    v18 = v3 - 1;
    v19 = v9 | (v10 << 32);
    v21 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)a3;
    memset(v22, 0, sizeof(v22));
    v20 = v5 - 1;
    if (v5 != 1)
    {
      v13 = 0;
      do
      {
        sub_2080F6EB0(&v15, v22, a1, v11, v12);
        v11 += 2 * v21;
        v12 += 2 * HIDWORD(v21);
        ++v13;
      }
      while (v13 < v20);
    }
    *(_QWORD *)&result = sub_2080F6EB0(&v15, v22, a1, v11, v12);
  }
  return result;
}

__int16 sub_2080F6EB0@<H0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  __int16 *v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  __int16 v35;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  v9 = a1[5];
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      v12 = *a3;
      if (v6 || !v12)
      {
        v13 = v5;
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_33;
        }
        v13 = a2[2];
      }
      v14 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < 0xF || (unint64_t)(v13 - v6) < 0x20)
      {
        v17 = (_WORD *)v13;
        v18 = (__int16 *)v6;
      }
      else
      {
        v15 = v14 + 1;
        v16 = (v14 + 1) & 0xFFFFFFFFFFFFFFF0;
        v17 = (_WORD *)(v13 + 2 * v16);
        v18 = (__int16 *)(v6 + 2 * v16);
        v19 = (__int128 *)(v6 + 16);
        v20 = (_OWORD *)(v13 + 16);
        v21 = v16;
        do
        {
          v22 = *(v19 - 1);
          v23 = *v19;
          *(v20 - 1) = v22;
          *v20 = v23;
          v19 += 2;
          v20 += 2;
          v21 -= 16;
        }
        while (v21);
        if (v15 == v16)
          goto LABEL_3;
      }
      do
      {
        v24 = *v18++;
        LOWORD(v22) = v24;
        *v17++ = v24;
      }
      while (v18 != (__int16 *)(v6 + 2 * v12));
LABEL_3:
      v9 = a1[5];
LABEL_4:
      v6 += 2 * a1[6];
      v5 += 2 * a1[7];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  v25 = *a3;
  if (v6 || !v25)
  {
    if (!v25)
      return v22;
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_33:
      abort();
    }
    v5 = a2[2];
  }
  v26 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v26 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v29 = (_WORD *)v5;
    v30 = (__int16 *)v6;
    do
    {
LABEL_31:
      v35 = *v30++;
      LOWORD(v22) = v35;
      *v29++ = v35;
    }
    while (v30 != (__int16 *)(v6 + 2 * v25));
    return v22;
  }
  v27 = v26 + 1;
  v28 = (v26 + 1) & 0xFFFFFFFFFFFFFFF0;
  v29 = (_WORD *)(v5 + 2 * v28);
  v30 = (__int16 *)(v6 + 2 * v28);
  v31 = (__int128 *)(v6 + 16);
  v32 = (_OWORD *)(v5 + 16);
  v33 = v28;
  do
  {
    v22 = *(v31 - 1);
    v34 = *v31;
    *(v32 - 1) = v22;
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v27 != v28)
    goto LABEL_31;
  return v22;
}

unsigned __int16 sub_2080F70E8@<H0>(uint64_t *a1@<X0>, __n128 a2@<Q0>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  __int16 *v11;
  uint64_t v13;
  __int16 **v14;
  _DWORD v15[7];
  _QWORD v16[2];

  v3 = *a1;
  v4 = *(_DWORD *)(v3 + 20);
  if (v4 == 1)
  {
    if (*(_DWORD *)(v3 + 24) == *(_DWORD *)(v3 + 8))
      sub_2080F6238(a1, a2);
    else
      a2.n128_u16[0] = sub_2080F71A4(v3, a1[1], a2);
  }
  else
  {
    v13 = a1[1];
    v6 = *(_DWORD *)(v3 + 8);
    v5 = *(_DWORD *)(v3 + 12);
    v7 = *(_DWORD *)(v3 + 16);
    if (v6)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8 && v7 != 0)
    {
      v14 = (__int16 **)&v13;
      v15[0] = 0;
      v15[1] = v6 - 1;
      v15[2] = v4;
      v15[3] = v5 - 1;
      v10 = *(_DWORD *)(v3 + 28);
      v15[4] = *(_DWORD *)(v3 + 24);
      v15[5] = v7 - 1;
      v15[6] = v10;
      v11 = *(__int16 **)v3;
      v16[0] = 0;
      v16[1] = 0;
      a2.n128_u16[0] = sub_2080F7264(v15, (uint64_t)v16, &v14, v11);
    }
  }
  return a2.n128_u16[0];
}

unsigned __int16 sub_2080F71A4@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  _DWORD v16[5];
  unsigned int v17;
  unsigned int v18;
  unint64_t v19[2];

  v14 = 0;
  v15[0] = &v14;
  v15[1] = &v13;
  v4 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v13 = v4;
  v15[2] = a2;
  v5 = *(_DWORD *)(a1 + 16);
  if ((_DWORD)v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16[0] = 0;
    v16[1] = v4 - 1;
    v8 = *(_DWORD *)(a1 + 24);
    v16[2] = *(_DWORD *)(a1 + 20);
    v16[3] = v3 - 1;
    v9 = *(_DWORD *)(a1 + 28);
    v10 = *(_QWORD *)a1;
    v19[0] = 0;
    v19[1] = 0;
    v16[4] = v8;
    v17 = v5 - 1;
    v18 = v9;
    if (v5 != 1)
    {
      v11 = 0;
      do
      {
        a3.n128_u64[0] = sub_2080F6604((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
        v10 += 2 * v18;
        ++v11;
      }
      while (v11 < v17);
    }
    a3.n128_u16[0] = sub_2080F6604((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
  }
  return a3.n128_u16[0];
}

__int16 sub_2080F7264@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, __int16 ***a3@<X2>, __int16 *a4@<X3>)
{
  unsigned int v4;
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  __int16 *v8;
  __int16 result;

  if (a1[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (a1[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
          v5 += a1[4];
          ++v6;
        }
        while (v6 < a1[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[6];
      ++v4;
    }
    while (v4 < a1[5]);
  }
  *(_QWORD *)a2 = a4;
  if (a1[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[4];
      ++v7;
    }
    while (v7 < a1[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
  v8 = **a3;
  result = *v8;
  *(_WORD *)(*(_QWORD *)a2 + 6) = *v8;
  return result;
}

double sub_2080F7420(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = (_DWORD *)*a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v7 = v1[6];
    if (v7 == *(_DWORD *)(v2 + 24))
    {
      v8 = v1[2];
      if (v7 == v8)
        return sub_2080F69AC(a1);
    }
    else
    {
      v8 = v1[2];
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[3] == 0;
    else
      v9 = 1;
    if (!v9 && v1[4] != 0)
      return sub_2080F6DC4((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (v1[2])
      v4 = v1[3] == 0;
    else
      v4 = 1;
    if (!v4 && v1[4] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_2080F74D8((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

__int16 sub_2080F74D8@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)a2;
    v9 = *(_WORD **)a3;
    v10 = 2 * *(unsigned int *)(a2 + 24);
    v11 = 2 * *(unsigned int *)(a3 + 24);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19[1] = v18[1];
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v14;
        v22 = 2 * v13;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v9[3] = v8[3];
          v8 = (_WORD *)((char *)v8 + v21);
          v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9[3] = v8[3];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    result = v8[3];
    v9[3] = result;
  }
  return result;
}

uint64_t sub_2080F7640(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_207D0E984((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

float sub_2080F77D0(uint64_t *a1)
{
  uint64_t v2;
  float result;
  int v4;
  int v5;
  BOOL v6;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;

  v2 = *a1;
  if (*(_DWORD *)(v2 + 20) == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_2080F78F0((uint64_t)a1);
    else
      sub_2080F7D00(v2, a1[1]);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = (_DWORD *)a1[1];
    v9 = v4 - 1;
    v10 = *(unsigned int *)(v2 + 24);
    v11 = *(_DWORD **)v2;
    v12 = v5 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(v2 + 28);
      if (!v9)
      {
        do
        {
          *v11 = *v8;
          v11[1] = *v8;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_22:
        *v11 = *v8;
        result = *(float *)v8;
        v11[1] = *v8;
        return result;
      }
      v14 = 0;
      v15 = v11 + 1;
      do
      {
        v16 = v15;
        v17 = v9;
        do
        {
          *(v16 - 1) = *v8;
          *v16 = *v8;
          v16 += v10;
          --v17;
        }
        while (v17);
        *(v16 - 1) = *v8;
        *v16 = *v8;
        v11 += v13;
        ++v14;
        v15 += v13;
      }
      while (v14 != v12);
    }
    for (; v9; --v9)
    {
      *v11 = *v8;
      v11[1] = *v8;
      v11 += v10;
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_2080F78F0(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  _QWORD v25[3];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 4 * v6;
    if (!(_DWORD)v6)
      v15 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (_DWORD *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v18 = vld1q_dup_f32(v2);
    v19 = (float32x4_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_2080F7AA4((_BOOL8)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_2080F7AA4(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  unint64_t v32;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const float **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if (result)
            goto LABEL_37;
        }
      }
      if (v12 >= 1)
      {
        v13 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        v14 = (v12 & 0x3FFFFFFFFFFFFFFFLL) - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v14 >= 0x10)
        {
          v16 = -4;
          if (!v13)
            v16 = 0;
          if (v4 >= (unint64_t)(v11 + 1)
            || (v17 = v4 + v16 + 4 * v12 + 4, v15 = (_DWORD *)v4, (unint64_t)v11 >= v17))
          {
            v15 = (_DWORD *)(v4 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
            v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
            v18 = vld1q_dup_f32(v11);
            v19 = (float32x4_t *)(v4 + 16);
            v20 = v14 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v19[-1] = v18;
              *v19 = v18;
              v19 += 2;
              v20 -= 8;
            }
            while (v20);
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v15 = (_DWORD *)v4;
        }
        v21 = v13 + 1;
        do
        {
          *v15++ = *(_DWORD *)v11;
          --v21;
        }
        while (v21 > 1);
      }
LABEL_3:
      v4 += 4 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v22 = *(uint64_t **)(a3 + 8);
  v23 = *(const float **)(a3 + 16);
  v24 = *v22;
  if (!v4)
  {
    if (v24)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if (result)
LABEL_37:
        abort();
    }
  }
  if (v24 >= 1)
  {
    v25 = v24 & 0x3FFFFFFFFFFFFFFFLL;
    v26 = (v24 & 0x3FFFFFFFFFFFFFFFLL) - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v26 < 0x10)
      goto LABEL_29;
    v27 = 4 * v24;
    if (!v25)
      v27 = 4;
    if (v4 < (unint64_t)(v23 + 1) && (unint64_t)v23 < v4 + v27)
    {
LABEL_29:
      v28 = (_DWORD *)v4;
LABEL_30:
      v29 = v25 + 1;
      do
      {
        *v28++ = *(_DWORD *)v23;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v28 = (_DWORD *)(v4 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
    v30 = vld1q_dup_f32(v23);
    v31 = (float32x4_t *)(v4 + 16);
    v32 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v31[-1] = v30;
      *v31 = v30;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_2080F7D00(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_2080F7DC0((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_2080F7DC0((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_2080F7DC0(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  const float *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const float **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v10 >= 1)
      {
        v11 = v10 & 0x3FFFFFFFFFFFFFFFLL;
        v12 = (v10 & 0x3FFFFFFFFFFFFFFFLL) - ((v10 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v12 >= 0x10)
        {
          v14 = -4;
          if (!v11)
            v14 = 0;
          if (v4 >= (unint64_t)(v9 + 1)
            || (v15 = v4 + v14 + 4 * v10 + 4, v13 = (_DWORD *)v4, (unint64_t)v9 >= v15))
          {
            v13 = (_DWORD *)(v4 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
            v11 -= v12 & 0xFFFFFFFFFFFFFFF8;
            v16 = vld1q_dup_f32(v9);
            v17 = (float32x4_t *)(v4 + 16);
            v18 = v12 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v17[-1] = v16;
              *v17 = v16;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (_DWORD *)v4;
        }
        v19 = v11 + 1;
        do
        {
          *v13++ = *(_DWORD *)v9;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const float **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v22 >= 1)
  {
    v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (v22 & 0x3FFFFFFFFFFFFFFFLL) - ((v22 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 0x10)
      goto LABEL_29;
    v25 = 4 * v22;
    if (!v23)
      v25 = 4;
    if (v4 < (unint64_t)(v21 + 1) && (unint64_t)v21 < v4 + v25)
    {
LABEL_29:
      v26 = (_DWORD *)v4;
LABEL_30:
      v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v21;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v26 = (_DWORD *)(v4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = vld1q_dup_f32(v21);
    v29 = (float32x4_t *)(v4 + 16);
    v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

float sub_2080F800C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  float result;

  v2 = *a1;
  v1 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
  {
    sub_2080F8148(a1);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(float **)v2;
    v12 = *(float **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        result = v11[1];
        v12[1] = result;
        return result;
      }
      v16 = 0;
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 += v9;
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t *sub_2080F8148(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_207D5C9EC((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_207D5C9EC((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 4 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_2080F827C(&v12, (char **)v1, (char **)v2);
  return result;
}

uint64_t *sub_2080F827C(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_254530A20;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_254530A10 || byte_254530A18)
              {
                v22 = qword_2545309E8;
                v23 = qword_2545309F0;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_254530A10)
                goto LABEL_52;
              v8 = v18;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 4 * v17);
LABEL_19:
            v15 = &v16[4 * v43];
            v13 += 4 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 4 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[4 * v36];
          v13 = &v39[4 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 4 * *((unsigned int *)a2 + 7);
      v33 = 4 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 4 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 4 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 4 * v30);
LABEL_44:
        v28 += 4 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 4 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 4 * v31);
  }
  return result;
}

void sub_2080F86EC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _DWORD *v12;
  _DWORD v13[7];

  v2 = *a1;
  v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_2080F78F0((uint64_t)a1);
    else
      sub_2080F7D00(v2, a1[1]);
  }
  else
  {
    v10 = a1[1];
    v5 = *(_DWORD *)(v2 + 8);
    v4 = *(_DWORD *)(v2 + 12);
    v6 = *(_DWORD *)(v2 + 16);
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v11 = &v10;
      v13[0] = 0;
      v13[1] = v5 - 1;
      v13[2] = v3;
      v13[3] = v4 - 1;
      v9 = *(_DWORD *)(v2 + 28);
      v13[4] = *(_DWORD *)(v2 + 24);
      v13[5] = v6 - 1;
      v13[6] = v9;
      v12 = *(_DWORD **)v2;
      sub_2080F87A8(v13, &v11, &v12);
    }
  }
}

float sub_2080F87A8(_DWORD *a1, _QWORD **a2, _DWORD **a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  float result;

  v3 = *a3;
  v4 = a1[5];
  if (!v4)
  {
    v5 = a1[3];
    v6 = (_DWORD *)**a2;
    if (!v5)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = a1[3];
  v6 = (_DWORD *)**a2;
  v7 = a1[6];
  if (v5)
  {
    v8 = 0;
    v9 = v3 + 2;
    v10 = 4 * a1[4];
    do
    {
      v11 = v9;
      v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *v11 = *v6;
        v11[1] = *v6;
        v11 = (_DWORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    v13 = 4 * a1[4];
    do
    {
      *v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      v3 = (_DWORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  result = *(float *)v6;
  v3[3] = *v6;
  return result;
}

float sub_2080F88E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(float **)a2;
    v11 = *(float **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        result = v10[3];
        v11[3] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_2080F8A60(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_2080FA27C(a2, a1);
}

void sub_2080F8A88(uint64_t a1, int a2)
{
  __asm { BR              X12 }
}

_DWORD *sub_2080F8AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)();
  int v12;
  _BYTE v13[24];
  unsigned int v14;
  __int128 v15;
  _QWORD v16[16];

  if (a3 <= 0x20)
    v5 = 32;
  else
    v5 = a3;
  v11 = (void (**)())&off_24C0856E8;
  if (v3)
    v6 = v5;
  else
    v6 = 32;
  v16[0] = a3;
  v16[1] = ((_DWORD)a3 != 0) | (unint64_t)(v6 << 32);
  sub_2080BADE0((uint64_t)&v11, (unsigned int *)v16);
  v11 = (void (**)())&off_24C0856E8;
  result = operator new(0x40uLL);
  v8 = result;
  *(_QWORD *)result = off_24C084F98;
  v9 = v14;
  result[2] = v12;
  *((_BYTE *)result + 16) = 0;
  result[10] = -1;
  if ((_DWORD)v9 == -1)
  {
    *((_OWORD *)result + 3) = v15;
    *(_QWORD *)result = &off_24C0856E8;
  }
  else
  {
    result = (_DWORD *)((uint64_t (*)(_QWORD *, _DWORD *, _BYTE *))off_24C0863D8[v9])(v16, result + 4, v13);
    v8[10] = v9;
    v10 = v14;
    *((_OWORD *)v8 + 3) = v15;
    *(_QWORD *)v8 = &off_24C0856E8;
    v11 = off_24C084F98;
    if ((_DWORD)v10 != -1)
      result = (_DWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_24C0863C0[v10])(v16, v13);
  }
  *v4 = v8;
  return result;
}

void sub_2080F9D68()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080F9D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2080FA27C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

_DWORD *sub_2080FA2CC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _DWORD *result;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD v58[3];
  void **v59[6];
  _BYTE v60[16];
  _BYTE v61[248];

  LODWORD(v6) = *a3;
  v7 = a3[1];
  v8 = *a3 != 0;
  if (*a3 <= 0x20u)
    LODWORD(v6) = 32;
  v9 = *(_QWORD *)a3;
  *(_QWORD *)v4 = &off_24C0856E8;
  if (v7)
    v6 = v6;
  else
    v6 = 32;
  v58[0] = v9;
  v58[1] = v8 | (v6 << 32);
  v57 = 0;
  sub_2080BADE0((uint64_t)v60, (unsigned int *)v58);
  if (*(_DWORD *)(v4 + 40) > 2u)
    goto LABEL_73;
  v10 = *(uint64_t **)(v4 + 24);
  if (v10)
  {
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v12)
    {
      v16 = *(_DWORD *)(v4 + 40);
      switch(v16)
      {
        case 2:
          v35 = *(uint64_t **)(v4 + 24);
          v36 = *(_QWORD *)(v4 + 32);
          *(_QWORD *)(v4 + 136) = v35;
          *(_QWORD *)(v4 + 144) = v36;
          if (v36)
          {
            v37 = (unint64_t *)(v36 + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          *(_QWORD *)(v4 + 128) = off_24C08D770;
          if (!v35)
            goto LABEL_54;
          v40 = *v35;
          v39 = (std::__shared_weak_count *)v35[1];
          if (v39)
          {
            v41 = (unint64_t *)&v39->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            do
              v43 = __ldaxr(v41);
            while (__stlxr(v43 - 1, v41));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if (!v40)
            goto LABEL_54;
          break;
        case 1:
          v26 = *(uint64_t **)(v4 + 24);
          v27 = *(_QWORD *)(v4 + 32);
          *(_QWORD *)(v4 + 136) = v26;
          *(_QWORD *)(v4 + 144) = v27;
          if (v27)
          {
            v28 = (unint64_t *)(v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          *(_QWORD *)(v4 + 128) = off_24C08D770;
          if (!v26)
            goto LABEL_54;
          v31 = *v26;
          v30 = (std::__shared_weak_count *)v26[1];
          if (v30)
          {
            v32 = (unint64_t *)&v30->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
            do
              v34 = __ldaxr(v32);
            while (__stlxr(v34 - 1, v32));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          if (!v31)
            goto LABEL_54;
          break;
        case 0:
          v17 = *(uint64_t **)(v4 + 24);
          v18 = *(_QWORD *)(v4 + 32);
          *(_QWORD *)(v4 + 136) = v17;
          *(_QWORD *)(v4 + 144) = v18;
          if (v18)
          {
            v19 = (unint64_t *)(v18 + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          *(_QWORD *)(v4 + 128) = off_24C08D770;
          if (!v17)
            goto LABEL_54;
          v22 = *v17;
          v21 = (std::__shared_weak_count *)v17[1];
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (!v22)
            goto LABEL_54;
          break;
        default:
LABEL_73:
          sub_207CA9F48();
      }
      sub_2081E3010(*(_QWORD *)(v4 + 136));
LABEL_54:
      sub_2080BB4C8((uint64_t *)(v5 - 160), (uint64_t)v60);
      v59[0] = (void **)(v5 - 160);
      v59[1] = (void **)&v57;
      sub_2080F2DC4(v59);
      v44 = *(uint64_t **)(v4 + 136);
      if (v44)
      {
        v46 = *v44;
        v45 = (std::__shared_weak_count *)v44[1];
        if (v45)
        {
          v47 = (unint64_t *)&v45->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          do
            v49 = __ldaxr(v47);
          while (__stlxr(v49 - 1, v47));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (v46)
          sub_2081E31E4(*(_QWORD *)(v4 + 136));
      }
      *(_QWORD *)(v4 + 128) = &off_24C08D790;
      v50 = *(std::__shared_weak_count **)(v4 + 144);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
  }
  *(_QWORD *)v4 = &off_24C0856E8;
  result = operator new(0x40uLL);
  v54 = result;
  *(_QWORD *)result = off_24C084F98;
  result[2] = *(_DWORD *)(v4 + 8);
  *((_BYTE *)result + 16) = 0;
  result[10] = -1;
  v55 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v55 == -1)
  {
    *((_OWORD *)result + 3) = *(_OWORD *)(v4 + 48);
    *(_QWORD *)result = &off_24C0856E8;
  }
  else
  {
    result = (_DWORD *)((uint64_t (*)(uint64_t, _DWORD *, _BYTE *))off_24C0863D8[v55])(v5 - 120, result + 4, v61);
    v54[10] = v55;
    v56 = *(unsigned int *)(v4 + 40);
    *((_OWORD *)v54 + 3) = *(_OWORD *)(v4 + 48);
    *(_QWORD *)v54 = &off_24C0856E8;
    *(_QWORD *)v4 = off_24C084F98;
    if ((_DWORD)v56 != -1)
      result = (_DWORD *)((uint64_t (*)(uint64_t, _BYTE *))off_24C0863C0[v56])(v5 - 120, v61);
  }
  *v3 = v54;
  return result;
}

void sub_2080FDB14()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080FDB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  *(_QWORD *)v28 = off_24C085658;
  v33 = *(unsigned int *)(v28 + 40);
  if ((_DWORD)v33 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C0863C0[v33])(v29 - 120, &a28);
  _Unwind_Resume(exception_object);
}

void sub_2080FE9C4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207CAD95C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2080FEAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2080FEAEC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F36FF0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2080FEBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2080FEC14(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3784C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2080FED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2080FED3C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3C37C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2080FEE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2080FEE64(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_20808BCE0((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0879E8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2080FF094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_2080FF0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2080FF0D0(_DWORD ***a1)
{
  return sub_20805A390(**a1, (char *)(*a1)[1]);
}

void sub_2080FF0DC(uint64_t a1, uint64_t a2)
{
  sub_2080FF0EC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2080FF0EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C0879D0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2080FF2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2080FF2E4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2080FF3DC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2080FF3D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2080FF3DC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2080FF5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2080FF5EC(unsigned __int8 **a1)
{
  int v2;
  int v3;
  char v4;
  unsigned int v6;
  char *v7;
  void *v8;
  unsigned int v9;
  void *v11[3];
  void *__p[3];

  v2 = **a1;
  v3 = 9;
  if (v2 == 64)
    v3 = 11;
  v4 = v2 - 8;
  if (v2 == 8 || v2 == 16)
    v6 = 19;
  else
    v6 = v3;
  sub_208105C80(a1, __p);
  if (__p[1])
  {
    sub_208105C80(a1, v11);
    v7 = (char *)v11[1] - 1;
    if (v11[0])
      operator delete(v11[0]);
    v8 = __p[0];
    if (__p[0])
      goto LABEL_13;
  }
  else
  {
    v7 = 0;
    v8 = __p[0];
    if (__p[0])
LABEL_13:
      operator delete(v8);
  }
  v9 = 8;
  if ((v4 & 0xF7) == 0)
    v9 = 5;
  return v6 * (unint64_t)v9 - (_QWORD)v7;
}

void sub_2080FF6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2080FF6BC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *((unsigned int *)a2 + 2);
  v5 = *a3;
  v6 = *((unsigned int *)a3 + 2);
  v7 = v6 - v4 + 8 * (*a3 - *a2);
  v11 = *a2;
  v12 = v4;
  v9 = v5;
  v10 = v6;
  sub_2081053E8(a1, (uint64_t)&v11, (uint64_t)&v9, v7);
  return a1;
}

void sub_2080FF724(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  void *__p;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 v36;
  char v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[4];

  v40[2] = *MEMORY[0x24BDAC8D0];
  sub_207CCB3BC(__dst, a3);
  v9 = atomic_load((unsigned __int8 *)&qword_254530998);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254530998))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C70, &dword_207C77000);
    __cxa_guard_release(&qword_254530998);
  }
  sub_207CCB3BC(&__p, (__int128 *)__dst);
  v10 = a2;
  if (!v37)
  {
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = &off_253E50C70;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    goto LABEL_19;
  }
  v11 = v30;
  if (v30)
  {
    v12 = __p;
    v40[0] = v29;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v29 + 7);
    LOBYTE(a2) = HIBYTE(v29);
    v29 = 0uLL;
    __p = 0;
    v13 = v36;
    if (v36)
      goto LABEL_5;
  }
  else
  {
    v12 = 0;
    v13 = v36;
    if (v36)
    {
LABEL_5:
      v14 = v31;
      v39[0] = v32;
      *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)&v32 + 7);
      v6 = HIBYTE(v32);
      v31 = 0;
      v32 = 0uLL;
      v5 = v33;
      v3 = v34;
      v38[0] = v35;
      *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)((char *)&v35 + 7);
      v4 = HIBYTE(v35);
      v34 = 0;
      v35 = 0uLL;
      if (!v30)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  v14 = 0;
  if (!v30)
    goto LABEL_12;
LABEL_10:
  if (SHIBYTE(v29) < 0)
  {
    v18 = v10;
    operator delete(__p);
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = &off_253E50C70;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    v15 = (_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 40) = 0;
LABEL_13:
    v16 = v40[0];
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a1 + 39) = a2;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    LOBYTE(a2) = 0;
    v12 = 0;
    goto LABEL_14;
  }
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = &off_253E50C70;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v15 = (_BYTE *)(a1 + 112);
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_13;
LABEL_14:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    v17 = v39[0];
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v39 + 7);
    *(_BYTE *)(a1 + 71) = v6;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = v38[0];
    *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v38 + 7);
    *(_BYTE *)(a1 + 103) = v4;
    v38[0] = 0;
    *(_QWORD *)((char *)v38 + 7) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *v15 = 1;
  if (v11 && (a2 & 0x80) != 0)
    operator delete(v12);
LABEL_19:
  if (!v27)
    return;
  if (v26)
  {
    if ((v25 & 0x80000000) == 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
LABEL_28:
      operator delete(v22);
      if (!v21)
        return;
      goto LABEL_24;
    }
    operator delete(v24);
    if (v23 < 0)
      goto LABEL_28;
  }
LABEL_23:
  if (!v21)
    return;
LABEL_24:
  if (v20 < 0)
    operator delete(__dst[0]);
}

void sub_2080FF9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CCB148((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080FFA0C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(_QWORD *)(a1 + 80) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 40);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t sub_2080FFA54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 32);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_2080FFAD8(uint64_t a1)
{
  void *v2;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_8;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_8:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_9;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_9:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    v2 = *(void **)(a1 + 16);
    goto LABEL_11;
  }
  v2 = *(void **)a1;
  if (!*(_QWORD *)a1)
    return a1;
LABEL_11:
  operator delete(v2);
  return a1;
}

BOOL sub_2080FFB74(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a2 / a3;
  if (a2 >= a3)
  {
    v5 = 0;
    v7 = 0;
    do
    {
      v8 = v7 * a3;
      ++v7;
      v9 = a3;
      if (v8 != v7 * a3)
      {
        while (((*(_QWORD *)(a1 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
        {
          ++v8;
          if (!--v9)
            goto LABEL_6;
        }
        ++v5;
      }
LABEL_6:
      ;
    }
    while (v7 != v4);
  }
  else
  {
    v5 = 0;
  }
  return v5 > (v4 - a4 / a3) >> 1;
}

void sub_2080FFBEC(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, unint64_t a5, unint64_t a6)
{
  unint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *__p;
  char *v38;
  char *v39;

  __p = 0;
  v38 = 0;
  v39 = 0;
  if (a3 >= a5)
  {
    v10 = a3 / a5;
    if ((a3 / a5) >> 62)
      sub_207CA420C();
    v12 = (char *)operator new(4 * v10);
    __p = v12;
    v39 = &v12[4 * v10];
    bzero(v12, 4 * v10);
    v38 = v39;
    if (a5)
    {
      v13 = 0;
      v14 = 0;
      v15 = a5 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v16 = *(_DWORD *)&v12[4 * v14];
        if (a5 >= 2)
        {
          v18 = 0;
          v19 = 0;
          v20 = a5 - 1;
          do
          {
            v16 |= ((*(_QWORD *)(a2 + (((unint64_t)(v13 + v18) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + v18)) & 1) << v20;
            v19 |= ((*(_QWORD *)(a2 + (((unint64_t)(v13 + v18 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + v18 + 1)) & 1) << ((v18 ^ 0xFEu) + a5);
            v18 += 2;
            v20 -= 2;
          }
          while (v15 != v18);
          v16 |= v19;
          v17 = a5 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 == a5)
            goto LABEL_5;
        }
        else
        {
          v17 = 0;
        }
        v21 = (-2 - v17) + 1;
        do
        {
          v16 |= ((*(_QWORD *)(a2 + (((v13 + v17) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13
                                                                                   + v17)) & 1) << (a5 + v21);
          ++v17;
          --v21;
        }
        while (a5 != v17);
LABEL_5:
        *(_DWORD *)&v12[4 * v14++] = v16;
        v13 += a5;
      }
      while (v14 != v10);
    }
  }
  if (!sub_20810D2E8(a4, (uint64_t *)&__p, a6 / a5))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v22 = (char *)__p;
    if (!__p)
      return;
    goto LABEL_27;
  }
  v22 = (char *)__p;
  v23 = v38;
  v24 = (v38 - (_BYTE *)__p) >> 2;
  v25 = v24 * a5;
  if (v24 * a5)
  {
    if ((v25 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v26 = ((v25 - 1) >> 6) + 1;
    v27 = operator new(8 * v26);
    v28 = v27;
    if (v25 >= 0x41)
      v29 = (v25 - 1) >> 6;
    else
      v29 = 0;
    v27[v29] = 0;
    if (v25 >= 0x40)
      bzero(v27, 8 * (v25 >> 6));
    if ((v25 & 0x3F) != 0)
      v28[v25 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v25 & 0x3F));
    if (!a5)
      goto LABEL_38;
  }
  else
  {
    v26 = 0;
    v28 = 0;
    if (!a5)
      goto LABEL_38;
  }
  if (v23 != v22)
  {
    v30 = 0;
    v31 = -1;
    do
    {
      v32 = 0;
      v33 = *(_DWORD *)&v22[4 * v30++];
      v34 = a5;
      do
      {
        while (1)
        {
          v35 = (v31 + v34) >> 6;
          v36 = 1 << (v31 + v34);
          if (((v33 >> v32) & 1) != 0)
            break;
          v28[v35] &= ~v36;
          ++v32;
          if (!--v34)
            goto LABEL_32;
        }
        v28[v35] |= v36;
        ++v32;
        --v34;
      }
      while (v34);
LABEL_32:
      v31 += a5;
    }
    while (v30 != v24);
  }
LABEL_38:
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v25;
  *(_QWORD *)(a1 + 16) = v26;
  *(_BYTE *)(a1 + 24) = 1;
  if (v22)
  {
LABEL_27:
    v38 = v22;
    operator delete(v22);
  }
}

void sub_2080FFEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080FFF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = 0;
  do
  {
    v5 = (v4 >> 3) & 0x1FFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a4 + v5) & (1 << v4)) != 0)
      v6 = (((1 << v4) & *(_QWORD *)(a1 + v5)) != 0) ^ ((*(_QWORD *)(a3 + v5) & (1 << v4)) != 0);
    else
      v6 = 0;
  }
  while ((_DWORD)v6 == 1 && a2 - 1 != v4++);
  return v6;
}

void sub_2080FFF78(_QWORD *a1, uint64_t a2, int a3)
{
  const void *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  unint64_t v28;
  unint64_t v29;
  void *v30[3];
  _OWORD __dst[57];

  memset(__dst, 0, 512);
  if (a3 <= 0xFu)
  {
    if (!(_BYTE)a3)
    {
LABEL_9:
      v6 = &unk_20826C270;
      goto LABEL_10;
    }
    if (a3 != 8)
      goto LABEL_11;
LABEL_8:
    v6 = &unk_20826C5F0;
LABEL_10:
    memcpy(__dst, v6, 0x380uLL);
    goto LABEL_11;
  }
  switch(a3)
  {
    case 0x10u:
      goto LABEL_8;
    case 0x6Eu:
      memcpy(__dst, &unk_20826C970, 0x380uLL);
      v9 = 4;
      v7 = 8;
      v8 = 72;
      goto LABEL_23;
    case 0x40u:
      goto LABEL_9;
  }
LABEL_11:
  if (((a3 - 8) & 0xF7) != 0)
    v7 = 8;
  else
    v7 = 5;
  if (a3 != 8 && a3 != 16)
  {
    if (a3 == 64)
    {
      v8 = 11 * v7;
LABEL_22:
      v9 = 2;
      goto LABEL_23;
    }
    v8 = 9 * v7;
    v9 = 4;
    v10 = a3 - 8;
    if (v10 > 0x38)
      goto LABEL_23;
LABEL_21:
    if (((1 << v10) & 0x100000000000101) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v8 = 19 * v7;
  v9 = 4;
  v10 = a3 - 8;
  if (v10 <= 0x38)
    goto LABEL_21;
LABEL_23:
  v11 = v8 + v9 * (unint64_t)v7;
  v12 = (v11 - 1) >> 6;
  v13 = (uint64_t *)operator new(8 * (v12 + 1));
  v14 = v13;
  v30[1] = (void *)v11;
  v30[2] = (void *)(v12 + 1);
  v30[0] = v13;
  if (v11 >= 0x41)
    v15 = (v11 - 1) >> 6;
  else
    v15 = 0;
  v13[v15] = 0;
  if (v11 >= 0x40)
    bzero(v13, 8 * (v11 >> 6));
  if ((v11 & 0x3F) != 0)
    v14[v11 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v11 & 0x3F));
  v16 = 0;
  v17 = 112 - v11;
  __p = 0;
  v28 = 0;
  v29 = 0;
  if (v11 != 112)
  {
    if (v11 >= 0x71)
      sub_207D159B0();
    v16 = operator new(8 * (((111 - v11) >> 6) + 1));
    v28 = 112 - v11;
    v29 = ((111 - v11) >> 6) + 1;
    __p = v16;
    *v16 = 0;
    *(_QWORD *)((char *)v16 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(0xFFFFFFFFFFFFFFFFLL >> (v11 - 48));
  }
  v18 = 0;
  v19 = 0;
  do
  {
    v21 = 1 << v19;
    if (((*(_QWORD *)(a2 + ((*(_QWORD *)((char *)__dst + v18) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_QWORD *)((char *)__dst + v18)) & 1) != 0)
      v20 = *v14 | v21;
    else
      v20 = *v14 & ~v21;
    *v14 = v20;
    v14 += v19 == 63;
    if (v19 == 63)
      v19 = 0;
    else
      ++v19;
    v18 += 8;
  }
  while (8 * v7 * (unint64_t)v9 + 8 * v8 != v18);
  v22 = 112;
  if (v17 < 112)
    v22 = 112 - v11;
  if (v22)
  {
    v23 = 0;
    v24 = 8 * v11;
    do
    {
      v26 = 1 << v23;
      if (((*(_QWORD *)(a2 + ((*(_QWORD *)((char *)__dst + v24) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_QWORD *)((char *)__dst + v24)) & 1) != 0)
        v25 = *v16 | v26;
      else
        v25 = *v16 & ~v26;
      *v16 = v25;
      v16 += v23 == 63;
      if (v23 == 63)
        v23 = 0;
      else
        ++v23;
      v24 += 8;
    }
    while (v24 != 896);
  }
  sub_207DDDB70(a1, (uint64_t)v30);
  sub_207DDDB70(a1 + 3, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  if (v30[0])
    operator delete(v30[0]);
}

void sub_20810030C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  void **v12;
  void *v14;
  void *v15;

  if (*v12)
  {
    operator delete(*v12);
    v14 = __p;
    if (!__p)
    {
LABEL_3:
      v15 = a12;
      if (!a12)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v14 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v14);
  v15 = a12;
  if (!a12)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_208100374(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v3 = a1 + 8 * (a2 >> 6);
  v9 = a1;
  v10 = 0;
  v4 = a2 & 0x3F;
  v7 = v3;
  v8 = v4;
  sub_2081054F0((uint64_t)&v9, (uint64_t)&v7, a3, (uint64_t)&v11);
  return v11 != v3 || v12 != v4;
}

void sub_2081003D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _QWORD *a6, __int16 a7)
{
  unsigned __int8 v7;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  const void *v17;
  int v18;
  _QWORD *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  int v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  std::string::pointer data;
  char **v45;
  char **v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  BOOL v76;
  unint64_t v77;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  std::string::pointer v84;
  unsigned int v85;
  uint64_t v86;
  void *v87;
  int8x16_t *v88;
  unsigned int v89;
  unint64_t v90;
  int8x16_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  _DWORD *v124;
  unint64_t size;
  int v126;
  uint64_t *v127;
  uint64_t *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  _QWORD *v143;
  float v144;
  uint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int8x16_t *v149;
  uint64_t v150;
  int8x16_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  std::string::pointer v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  int v167;
  std::string::pointer v168;
  std::string *v169;
  void *v170;
  unint64_t v171;
  int v172;
  void *v173;
  int v174;
  std::string::pointer v175;
  void *v176;
  void *v177;
  void *v178;
  char *v179;
  char **v180;
  void *v181;
  char *v182;
  char *v183;
  char *v184;
  unsigned __int8 v185;
  int v186;
  std::string::size_type v187;
  int v188;
  int v189;
  std::string::size_type v190;
  char v191;
  void *v192;
  void *v193;
  void *v194;
  char v195;
  char v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  std::string::size_type v201;
  unsigned int v202;
  unsigned int v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  __int128 v208;
  char v209;
  char v210;
  void *v211;
  char v212;
  void *v213;
  char v214;
  char v215;
  char v216;
  __int128 v217;
  _BYTE v218[7];
  char v219;
  char v220;
  void *v221;
  char v222;
  void *v223;
  char v224;
  char v225;
  char v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  __int128 v241;
  _BYTE v242[7];
  char v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  char v248;
  char v249;
  char v250;
  void *v251;
  unint64_t v252;
  unint64_t v253;
  __int128 v254;
  char v255;
  char v256;
  void *v257;
  char v258;
  void *v259;
  char v260;
  char v261;
  char v262;
  void *v263[2];
  char v264;
  char v265;
  void *v266;
  char v267;
  void *v268;
  char v269;
  char v270;
  char v271;
  void *v272[3];
  void *v273;
  char **v274;
  __int128 v275;
  __int16 v276;
  _BYTE v277[1024];
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  char v283;
  __int128 v284;
  uint64_t v285;
  char v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  char v292;
  _QWORD v293[2];
  _QWORD v294[2];
  _QWORD v295[2];
  _QWORD v296[2];
  _QWORD v297[2];
  _QWORD v298[2];
  _QWORD __dst[112];
  std::string __src[43];
  uint64_t v301;

  v7 = a7;
  v301 = *MEMORY[0x24BDAC8D0];
  v276 = a7;
  v13 = (_QWORD *)*a6;
  v12 = a6[1];
  v206 = a6;
  if (a7 <= 0xFu)
  {
    if (!(_BYTE)a7)
      goto LABEL_5;
  }
  else if (a7 != 16)
  {
LABEL_5:
    v14 = 8;
    v15 = operator new(8uLL);
    *v15 = 42;
    v16 = v7;
    if (v7 > 0xFu)
      goto LABEL_6;
LABEL_11:
    if (!v16)
    {
LABEL_14:
      v17 = &unk_20826C270;
      goto LABEL_16;
    }
    if (v16 != 8)
      goto LABEL_17;
LABEL_13:
    v17 = &unk_20826C5F0;
LABEL_16:
    memcpy(__dst, v17, sizeof(__dst));
    goto LABEL_17;
  }
  v15 = operator new(8uLL);
  *v15 = 17;
  v14 = 7;
  v16 = v7;
  if (v7 <= 0xFu)
    goto LABEL_11;
LABEL_6:
  switch(v16)
  {
    case 16:
      goto LABEL_13;
    case 110:
      v17 = &unk_20826C970;
      goto LABEL_16;
    case 64:
      goto LABEL_14;
  }
LABEL_17:
  *(_OWORD *)&__src[2].__r_.__value_.__r.__words[2] = xmmword_20826C1E0;
  *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1] = unk_20826C1F0;
  *(_OWORD *)&__src[4].__r_.__value_.__l.__data_ = xmmword_20826C200;
  *(_OWORD *)&__src[4].__r_.__value_.__r.__words[2] = unk_20826C210;
  *(_OWORD *)&__src[0].__r_.__value_.__l.__data_ = xmmword_20826C1A0;
  *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2] = unk_20826C1B0;
  *(_OWORD *)&__src[1].__r_.__value_.__r.__words[1] = xmmword_20826C1C0;
  *(_OWORD *)&__src[2].__r_.__value_.__l.__data_ = unk_20826C1D0;
  memcpy(&__src[5].__r_.__value_.__r.__words[1], __dst, 0x380uLL);
  memcpy(v277, __src, sizeof(v277));
  *(_OWORD *)&__src[0].__r_.__value_.__l.__data_ = 0uLL;
  if (a5 > 0x3F || (a5 & 0x3F) != 0)
  {
    v18 = 0;
    v19 = &a4[a5 >> 6];
    v20 = v277;
    do
    {
      v21 = *(_QWORD *)v20;
      v20 += 8;
      v22 = v21 >> 6;
      v23 = 1 << v21;
      if (((*a4 >> v18) & 1) != 0)
        v24 = __src[0].__r_.__value_.__r.__words[v22] | v23;
      else
        v24 = __src[0].__r_.__value_.__r.__words[v22] & ~v23;
      __src[0].__r_.__value_.__r.__words[v22] = v24;
      a4 += v18 == 63;
      if (v18 == 63)
        v18 = 0;
      else
        ++v18;
    }
    while (v18 != (a5 & 0x3F) || a4 != v19);
  }
  if (v12 > 0x3F || (v12 & 0x3F) != 0)
  {
    v25 = 0;
    v26 = &v13[v12 >> 6];
    v27 = (unint64_t *)&v277[128];
    do
    {
      v28 = *v27++;
      v29 = v28 >> 6;
      v30 = 1 << v28;
      if (((*v13 >> v25) & 1) != 0)
        v31 = __src[0].__r_.__value_.__r.__words[v29] | v30;
      else
        v31 = __src[0].__r_.__value_.__r.__words[v29] & ~v30;
      __src[0].__r_.__value_.__r.__words[v29] = v31;
      v13 += v25 == 63;
      if (v25 == 63)
        v25 = 0;
      else
        ++v25;
    }
    while (v25 != (v12 & 0x3F) || v13 != v26);
  }
  v32 = 0;
  v33 = 8 * v12 + 128;
  v34 = v15;
  v35 = a1;
  do
  {
    v36 = *(_QWORD *)&v277[v33];
    v37 = v36 >> 6;
    v38 = 1 << v36;
    if (((*v34 >> v32) & 1) != 0)
      v39 = __src[0].__r_.__value_.__r.__words[v37] | v38;
    else
      v39 = __src[0].__r_.__value_.__r.__words[v37] & ~v38;
    __src[0].__r_.__value_.__r.__words[v37] = v39;
    v34 += v32 == 63;
    if (v32 == 63)
      v32 = 0;
    else
      ++v32;
    v33 += 8;
  }
  while (v32 != v14 || v34 != v15);
  operator delete(v15);
  v275 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
  sub_208105D90((uint64_t)&v275, v272);
  if (v276 == 8)
    goto LABEL_51;
  if (v276 == 110)
  {
LABEL_58:
    v41 = 0;
    v42 = 0;
    goto LABEL_62;
  }
  if (v276 == 16)
  {
LABEL_51:
    v40 = 6;
    if (v276 == 8)
      goto LABEL_56;
  }
  else
  {
    v40 = 8;
    if (v276 == 8)
      goto LABEL_56;
  }
  if (v276 == 110)
    goto LABEL_58;
  if (v276 != 16)
  {
    v41 = 5 * v40;
    goto LABEL_60;
  }
LABEL_56:
  v41 = 9 * v40;
  if (v276 == 8)
    goto LABEL_61;
LABEL_60:
  if (v276 == 16)
  {
LABEL_61:
    v42 = 6;
    goto LABEL_62;
  }
  v42 = 8;
LABEL_62:
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v274 - (_BYTE *)v273) >> 3) < v41
                                                                    + 2
                                                                    * v42
                                                                    * (unint64_t)(v276 != 110)
                                                                    + 1)
  {
    sub_207CCB5A4((uint64_t)v263, "Couldn't find enough arc components!");
    v271 = 1;
    sub_2080FF724((uint64_t)__src, 7u, (__int128 *)v263);
    *(_OWORD *)a1 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (__src[4].__r_.__value_.__s.__data_[16])
    {
      *(_BYTE *)(a1 + 40) = 0;
      v43 = __src[1].__r_.__value_.__s.__data_[16];
      if (__src[1].__r_.__value_.__s.__data_[16])
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2];
        *(_QWORD *)(a1 + 32) = __src[1].__r_.__value_.__l.__size_;
        *(_OWORD *)&__src[1].__r_.__value_.__l.__data_ = 0uLL;
        __src[0].__r_.__value_.__r.__words[2] = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (__src[4].__r_.__value_.__s.__data_[8])
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)&__src[2].__r_.__value_.__l.__data_;
        data = __src[3].__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 64) = *((_QWORD *)&__src[2].__r_.__value_.__l + 2);
        *(_QWORD *)(a1 + 72) = data;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1];
        *(_QWORD *)(a1 + 96) = __src[4].__r_.__value_.__l.__data_;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v43 && __src[1].__r_.__value_.__s.__data_[15] < 0)
        operator delete((void *)__src[0].__r_.__value_.__r.__words[2]);
      if (!v271)
        goto LABEL_400;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (!v271)
        goto LABEL_400;
    }
    if (!v270)
      goto LABEL_123;
    if (v269 < 0)
    {
      operator delete(v268);
      if ((v267 & 0x80000000) == 0)
      {
LABEL_123:
        if (!v265)
          goto LABEL_400;
LABEL_124:
        if (v264 < 0)
          operator delete(v263[0]);
        goto LABEL_400;
      }
    }
    else if ((v267 & 0x80000000) == 0)
    {
      goto LABEL_123;
    }
    operator delete(v266);
    if (!v265)
      goto LABEL_400;
    goto LABEL_124;
  }
  if (!HIBYTE(v276))
    sub_207CA2A4C();
  sub_208106C04(v272, &v273, (unsigned __int8 *)&v276, (uint64_t)__dst);
  if (LOBYTE(__dst[12]))
  {
    v45 = v274;
    v46 = (char **)v273;
    v253 = 0;
    v251 = 0;
    v252 = 0;
    v47 = (char *)v274 - (_BYTE *)v273;
    if (v274 == v273)
    {
      v56 = 0;
      v52 = 0;
      v82 = v276;
      if (v276 == 8)
        goto LABEL_138;
      goto LABEL_136;
    }
    if (v47 < 0)
      sub_207D159B0();
    v48 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 3);
    v49 = (v48 - 1) >> 6;
    v50 = 8 * (v49 + 1);
    v51 = (char *)operator new(v50);
    v52 = v51;
    v253 = v49 + 1;
    v251 = v51;
    v252 = v48;
    if (v48 < 0x41)
      v49 = 0;
    *(_QWORD *)&v51[8 * v49] = 0;
    v53 = 8 * (v48 >> 6);
    if (v48 >= 0x40)
      bzero(v51, 8 * (v48 >> 6));
    v54 = v48 & 0x3F;
    if ((v48 & 0x3F) != 0)
      *(_QWORD *)&v52[v53] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v54);
    v55 = (char *)operator new(v50);
    v56 = v55;
    *(_QWORD *)&v55[8 * v49] = 0;
    if (v48 >= 0x40)
      bzero(v55, 8 * (v48 >> 6));
    if ((v48 & 0x3F) != 0)
      *(_QWORD *)&v56[v53] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v54);
    v57 = 0;
    v35 = a1;
    while (1)
    {
      while (1)
      {
        v59 = *v46;
        v58 = v46[1];
        if (*v46 != v58)
          break;
        v63 = (v57 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v64 = ~(1 << v57);
        *(_QWORD *)&v52[v63] &= v64;
        v65 = &v56[v63];
LABEL_116:
        *(_QWORD *)v65 &= v64;
        v46 += 3;
        ++v57;
        if (v46 == v45)
        {
LABEL_117:
          v82 = v276;
          if (v276 == 8)
          {
LABEL_138:
            v85 = 6;
            if (v82 == 8)
              goto LABEL_143;
LABEL_141:
            if (v82 != 110)
            {
              if (v82 == 16)
                goto LABEL_143;
              v86 = 5 * v85;
              goto LABEL_160;
            }
LABEL_145:
            v89 = 2 * (v82 != 110);
            v203 = 0;
            v204 = 0;
            v90 = 0;
LABEL_162:
            v88 = 0;
            v205 = (void *)v90;
            if (v82 == 8)
            {
LABEL_174:
              v93 = 6;
              if (v82 == 8)
              {
LABEL_178:
                v94 = 9 * v93;
                if (v82 == 8)
                {
LABEL_184:
                  v95 = v94 + 6 * v89;
                  if (v95)
                    goto LABEL_185;
LABEL_181:
                  v96 = 0;
                  goto LABEL_192;
                }
LABEL_183:
                if (v82 == 16)
                  goto LABEL_184;
                v95 = v94 + 8 * v89;
                if (!v95)
                  goto LABEL_181;
LABEL_185:
                v97 = operator new(8 * ((v95 - 1) >> 6) + 8);
                v96 = v97;
                if (v95 >= 0x41)
                  v98 = (v95 - 1) >> 6;
                else
                  v98 = 0;
                v97[v98] = 0;
                if (v95 >= 0x40)
                  bzero(v97, 8 * (v95 >> 6));
                if ((v95 & 0x3F) != 0)
                  v96[v95 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v95 & 0x3F));
LABEL_192:
                v99 = __dst[0];
                if (HIDWORD(__dst[1]) * HIDWORD(__dst[0]))
                {
                  v100 = 0;
                  v101 = 0;
                  v102 = (_QWORD *)__dst[5];
                  v103 = __dst[5] + 8 * (HIDWORD(__dst[1]) * HIDWORD(__dst[0]));
                  v104 = LODWORD(__dst[1]);
                  v105 = HIDWORD(__dst[1]) + LODWORD(__dst[1]) - LODWORD(__dst[1]) * LODWORD(__dst[0]);
                  do
                  {
                    v109 = v100 >> 6;
                    v110 = 1 << v100;
                    if (((*(_QWORD *)&v52[(*v102 >> 3) & 0x1FFFFFFFFFFFFFF8] >> *v102) & 1) != 0)
                      v111 = v88->i64[v109] | v110;
                    else
                      v111 = v88->i64[v109] & ~v110;
                    v88->i64[v109] = v111;
                    if (((*(_QWORD *)&v56[(*v102 >> 3) & 0x1FFFFFFFFFFFFFF8] >> *v102) & 1) != 0)
                      v106 = v96[v109] | v110;
                    else
                      v106 = v96[v109] & ~v110;
                    v96[v109] = v106;
                    v107 = v101 + 1;
                    if (v101 + 1 == v99)
                      v101 = 0;
                    else
                      ++v101;
                    if (v107 == v99)
                      v108 = v105;
                    else
                      v108 = v104;
                    v102 += v108;
                    ++v100;
                  }
                  while (v102 != (_QWORD *)v103);
                }
                switch(v82)
                {
                  case 8:
LABEL_210:
                    v112 = 6;
                    if (v82 != 8)
                      goto LABEL_214;
                    goto LABEL_215;
                  case 110:
                    v113 = 0;
                    v112 = 0;
                    v114 = 0;
                    goto LABEL_226;
                  case 16:
                    goto LABEL_210;
                }
                v112 = 8;
LABEL_214:
                if (v82 == 16)
                {
LABEL_215:
                  v113 = 6;
                  if (v82 == 8)
                  {
LABEL_219:
                    v114 = 9;
                    if (v95 < v112)
                      goto LABEL_238;
LABEL_226:
                    v115 = 0;
                    v116 = 0;
                    v117 = v114 * (unint64_t)v113;
                    v118 = v95 / v112;
                    do
                    {
                      v119 = v116 * v112;
                      ++v116;
                      v120 = v112;
                      if (v119 != v116 * v112)
                      {
                        while (((*(_QWORD *)((char *)v96 + ((v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v119) & 1) != 0)
                        {
                          ++v119;
                          if (!--v120)
                            goto LABEL_228;
                        }
                        ++v115;
                      }
LABEL_228:
                      ;
                    }
                    while (v116 != v118);
                    if (v115 > (v118 - v117 / v112) >> 1)
                    {
                      LOWORD(v278) = v82;
                      sub_207DD5C1C((unsigned __int16 *)&v278);
                      v121 = std::string::insert((std::string *)v277, 0, "The arcs payload block with version ", 0x24uLL);
                      v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                      __src[0].__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__src[0].__r_.__value_.__l.__data_ = v122;
                      v121->__r_.__value_.__l.__size_ = 0;
                      v121->__r_.__value_.__r.__words[2] = 0;
                      v121->__r_.__value_.__r.__words[0] = 0;
                      v123 = std::string::append(__src, " has low confidence", 0x13uLL);
                      v124 = (_DWORD *)v123->__r_.__value_.__r.__words[0];
                      size = v123->__r_.__value_.__l.__size_;
                      LODWORD(v284) = v123->__r_.__value_.__r.__words[2];
                      *(_DWORD *)((char *)&v284 + 3) = *(_DWORD *)((char *)&v123->__r_.__value_.__r.__words[2] + 3);
                      v126 = SHIBYTE(v123->__r_.__value_.__r.__words[2]);
                      v123->__r_.__value_.__l.__size_ = 0;
                      v123->__r_.__value_.__r.__words[2] = 0;
                      v123->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__src[0].__r_.__value_.__l.__data_);
                        if ((v277[23] & 0x80000000) != 0)
                          goto LABEL_302;
LABEL_236:
                        if ((v126 & 0x80000000) == 0)
                          goto LABEL_237;
LABEL_303:
                        sub_207CA40D8(&v241, v124, size);
                      }
                      else
                      {
                        if ((v277[23] & 0x80000000) == 0)
                          goto LABEL_236;
LABEL_302:
                        operator delete(*(void **)v277);
                        if (v126 < 0)
                          goto LABEL_303;
LABEL_237:
                        *(_QWORD *)&v241 = v124;
                        *((_QWORD *)&v241 + 1) = size;
                        *(_DWORD *)v242 = v284;
                        *(_DWORD *)&v242[3] = *(_DWORD *)((char *)&v284 + 3);
                        v243 = v126;
                      }
                      v244 = 1;
                      LOBYTE(v245) = 0;
                      v249 = 0;
                      v250 = 1;
                      sub_2080FF724((uint64_t)__src, 6u, &v241);
                      *(_OWORD *)v35 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
                      *(_BYTE *)(v35 + 16) = 0;
                      *(_BYTE *)(v35 + 112) = 0;
                      if (__src[4].__r_.__value_.__s.__data_[16])
                      {
                        *(_BYTE *)(v35 + 40) = 0;
                        v159 = __src[1].__r_.__value_.__s.__data_[16];
                        if (__src[1].__r_.__value_.__s.__data_[16])
                        {
                          *(_OWORD *)(v35 + 16) = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2];
                          *(_QWORD *)(v35 + 32) = __src[1].__r_.__value_.__l.__size_;
                          *(_OWORD *)&__src[1].__r_.__value_.__l.__data_ = 0uLL;
                          __src[0].__r_.__value_.__r.__words[2] = 0;
                          *(_BYTE *)(v35 + 40) = 1;
                        }
                        *(_BYTE *)(v35 + 48) = 0;
                        *(_BYTE *)(v35 + 104) = 0;
                        if (__src[4].__r_.__value_.__s.__data_[8])
                        {
                          *(_OWORD *)(v35 + 48) = *(_OWORD *)&__src[2].__r_.__value_.__l.__data_;
                          v160 = __src[3].__r_.__value_.__l.__data_;
                          *(_QWORD *)(v35 + 64) = *((_QWORD *)&__src[2].__r_.__value_.__l + 2);
                          *(_QWORD *)(v35 + 72) = v160;
                          *(_OWORD *)(v35 + 80) = *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1];
                          *(_QWORD *)(v35 + 96) = __src[4].__r_.__value_.__l.__data_;
                          *(_BYTE *)(v35 + 104) = 1;
                        }
                        *(_BYTE *)(v35 + 112) = 1;
                        *(_BYTE *)(v35 + 120) = 0;
                        if (v159 && __src[1].__r_.__value_.__s.__data_[15] < 0)
                          operator delete((void *)__src[0].__r_.__value_.__r.__words[2]);
                      }
                      else
                      {
                        *(_BYTE *)(v35 + 120) = 0;
                      }
                      if (v250)
                      {
                        if (v249)
                        {
                          if (v248 < 0)
                            operator delete(v247);
                          if (v246 < 0)
                            operator delete(v245);
                        }
                        if (v244 && v243 < 0)
                          operator delete((void *)v241);
                      }
                      if (v126 < 0)
                      {
LABEL_385:
                        v178 = v124;
                        goto LABEL_386;
                      }
LABEL_387:
                      if (v96)
                        operator delete(v96);
                      if (v88)
                        operator delete(v88);
                      if (v56)
                        operator delete(v56);
                      v87 = v251;
                      if (v251)
LABEL_394:
                        operator delete(v87);
                      goto LABEL_395;
                    }
LABEL_238:
                    v127 = (uint64_t *)__dst[10];
                    if (__dst[10] - __dst[9] < 9uLL)
                      goto LABEL_277;
                    v202 = v89;
                    v238 = 0;
                    v239 = 0;
                    v240 = 0;
                    v128 = (uint64_t *)(__dst[9] + 8);
                    if (__dst[9] + 8 == __dst[10])
                    {
                      v137 = 0;
                      v129 = 0;
                      v139 = 0;
                      v138 = v202;
                    }
                    else
                    {
                      v201 = (std::string::size_type)v56;
                      v129 = 0;
                      do
                      {
                        while (1)
                        {
                          v130 = *v128;
                          v131 = *(_QWORD *)&v52[((unint64_t)*v128 >> 3) & 0x1FFFFFFFFFFFFFF8];
                          v132 = v239;
                          if (v239 == v240 << 6)
                          {
                            if ((uint64_t)(v239 + 1) < 0)
                              sub_207D159B0();
                            v133 = v240 << 7;
                            if (v240 << 7 <= (v239 & 0xFFFFFFFFFFFFFFC0) + 64)
                              v133 = (v239 & 0xFFFFFFFFFFFFFFC0) + 64;
                            if (v239 <= 0x3FFFFFFFFFFFFFFELL)
                              v134 = v133;
                            else
                              v134 = 0x7FFFFFFFFFFFFFFFLL;
                            sub_207D1C104((uint64_t)&v238, v134);
                            v129 = v238;
                            v132 = v239;
                          }
                          v239 = v132 + 1;
                          v135 = v132 >> 6;
                          v136 = 1 << v132;
                          if (((1 << v130) & v131) != 0)
                            break;
                          v129[v135] &= ~v136;
                          if (++v128 == v127)
                            goto LABEL_252;
                        }
                        v129[v135] |= v136;
                        ++v128;
                      }
                      while (v128 != v127);
LABEL_252:
                      v137 = v239;
                      v35 = a1;
                      v56 = (char *)v201;
                      v138 = v202;
                      v139 = v239 & 0x3F;
                      if (v239 > 0x3F)
                      {
LABEL_257:
                        v141 = 0;
                        v142 = 0;
                        v140 = 0;
                        v143 = v129;
                        do
                        {
                          v140 += ((*v143 >> v142) ^ (*(_QWORD *)(*v206
                                                                                                  + ((v141 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v141)) & 1;
                          v143 += v142 == 63;
                          if (v142 == 63)
                            v142 = 0;
                          else
                            ++v142;
                          ++v141;
                        }
                        while (v142 != v139 || v143 != &v129[v137 >> 6]);
                        goto LABEL_263;
                      }
                    }
                    if (v139)
                      goto LABEL_257;
                    v140 = 0;
LABEL_263:
                    v144 = (float)v137 * 0.1;
                    if (v144 > (float)(v137 - v140))
                    {
                      v145 = (uint64_t *)v88;
                      v146 = (unint64_t)v205;
                      if ((unint64_t)v205 >= 0x40)
                      {
                        v147 = (unint64_t)v204 + v203 * (unint64_t)v138 - 64;
                        v146 = (unint64_t)v205;
                        v145 = (uint64_t *)v88;
                        if (v147 < 0xC0)
                          goto LABEL_502;
                        v148 = (v147 >> 6) + 1;
                        v146 = (unint64_t)v205 - 64 * (v148 & 0x7FFFFFFFFFFFFFCLL);
                        v145 = &v88->i64[v148 & 0x7FFFFFFFFFFFFFCLL];
                        v149 = v88 + 1;
                        v150 = v148 & 0x7FFFFFFFFFFFFFCLL;
                        do
                        {
                          v151 = vmvnq_s8(*v149);
                          v149[-1] = vmvnq_s8(v149[-1]);
                          *v149 = v151;
                          v149 += 2;
                          v150 -= 4;
                        }
                        while (v150);
                        if (v148 != (v148 & 0x7FFFFFFFFFFFFFCLL))
                        {
LABEL_502:
                          do
                          {
                            *v145 = ~*v145;
                            ++v145;
                            v146 -= 64;
                          }
                          while (v146 > 0x3F);
                        }
                      }
                      if (v146)
                        *v145 ^= 0xFFFFFFFFFFFFFFFFLL >> -(char)v146;
LABEL_274:
                      if (v129)
                        operator delete(v129);
                      v82 = v276;
LABEL_277:
                      v152 = 67;
                      if (v82 != 8 && v82 != 16)
                      {
                        if (v82 == 110)
                        {
                          v153 = 0;
                          v152 = 0;
                          v154 = 0;
                          goto LABEL_286;
                        }
                        v152 = 285;
                      }
                      if (v82 == 8 || (v153 = 1, v82 == 16))
                      {
                        v154 = 6;
                        v153 = 1;
                      }
                      else
                      {
                        v154 = 8;
                      }
LABEL_286:
                      v124 = operator new(0x48uLL);
                      v155 = (1 << v154);
                      *v124 = v152;
                      v124[1] = v155;
                      v124[2] = v153;
                      sub_207CB8548(v124 + 4, v152, v155, v153);
                      *(_QWORD *)&v284 = v124;
                      switch(v276)
                      {
                        case 8u:
LABEL_289:
                          v156 = 6;
                          if (v276 != 8)
                            goto LABEL_293;
                          break;
                        case 0x6Eu:
                          v157 = 0;
                          v156 = 0;
                          v158 = 0;
                          goto LABEL_325;
                        case 0x10u:
                          goto LABEL_289;
                        default:
                          v156 = 8;
                          if (v276 != 8)
                          {
LABEL_293:
                            if (v276 == 110)
                            {
                              v157 = 0;
                              v158 = 0;
                            }
                            else
                            {
                              if (v276 == 16)
                                break;
                              v157 = 8;
LABEL_299:
                              if (v276 == 16)
LABEL_300:
                                v158 = 9;
                              else
                                v158 = 5;
                            }
LABEL_325:
                            sub_2080FFBEC((uint64_t)v277, (uint64_t)v88, (unint64_t)v205, &v284, v156, v158 * (unint64_t)v157);
                            if (v277[24])
                            {
                              if (*(_QWORD *)&v277[8])
                              {
                                v161 = 0;
                                while (1)
                                {
                                  v162 = (v161 >> 3) & 0x1FFFFFFFFFFFFFF8;
                                  v163 = ((1 << v161) & *(_QWORD *)(*(_QWORD *)v277 + v162)) != 0;
                                  v164 = (*(uint64_t *)((_BYTE *)v88->i64 + v162) & (1 << v161)) != 0;
                                  v165 = *(_QWORD *)((char *)v96 + v162) & (1 << v161);
                                  if (v163 == v164 || v165 == 0)
                                    break;
                                  if (*(_QWORD *)&v277[8] == ++v161)
                                    goto LABEL_333;
                                }
                                sub_207DDDB70((_QWORD *)v35, (uint64_t)v277);
                                *(_BYTE *)(v35 + 120) = 1;
                                goto LABEL_378;
                              }
LABEL_333:
                              sub_207CCB5A4((uint64_t)&v208, "Corrected arcs payload bits are not trustful!");
                              v216 = 1;
                              sub_2080FF724((uint64_t)__src, 6u, &v208);
                              *(_OWORD *)v35 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
                              *(_BYTE *)(v35 + 16) = 0;
                              *(_BYTE *)(v35 + 112) = 0;
                              if (__src[4].__r_.__value_.__s.__data_[16])
                              {
                                *(_BYTE *)(v35 + 40) = 0;
                                v167 = __src[1].__r_.__value_.__s.__data_[16];
                                if (__src[1].__r_.__value_.__s.__data_[16])
                                {
                                  *(_OWORD *)(v35 + 16) = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2];
                                  *(_QWORD *)(v35 + 32) = __src[1].__r_.__value_.__l.__size_;
                                  *(_OWORD *)&__src[1].__r_.__value_.__l.__data_ = 0uLL;
                                  __src[0].__r_.__value_.__r.__words[2] = 0;
                                  *(_BYTE *)(v35 + 40) = 1;
                                }
                                *(_BYTE *)(v35 + 48) = 0;
                                *(_BYTE *)(v35 + 104) = 0;
                                if (__src[4].__r_.__value_.__s.__data_[8])
                                {
                                  *(_OWORD *)(v35 + 48) = *(_OWORD *)&__src[2].__r_.__value_.__l.__data_;
                                  v168 = __src[3].__r_.__value_.__l.__data_;
                                  *(_QWORD *)(v35 + 64) = *((_QWORD *)&__src[2].__r_.__value_.__l + 2);
                                  *(_QWORD *)(v35 + 72) = v168;
                                  *(_OWORD *)(v35 + 80) = *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1];
                                  *(_QWORD *)(v35 + 96) = __src[4].__r_.__value_.__l.__data_;
                                  *(_BYTE *)(v35 + 104) = 1;
                                }
                                *(_BYTE *)(v35 + 112) = 1;
                                *(_BYTE *)(v35 + 120) = 0;
                                if (v167 && __src[1].__r_.__value_.__s.__data_[15] < 0)
                                  operator delete((void *)__src[0].__r_.__value_.__r.__words[2]);
                              }
                              else
                              {
                                *(_BYTE *)(v35 + 120) = 0;
                              }
                              if (v216)
                              {
                                if (v215)
                                {
                                  if (v214 < 0)
                                    operator delete(v213);
                                  if (v212 < 0)
                                    operator delete(v211);
                                }
                                if (v210 && v209 < 0)
                                {
                                  v173 = (void *)v208;
                                  goto LABEL_377;
                                }
                              }
                            }
                            else
                            {
                              LOWORD(v227) = v276;
                              sub_207DD5C1C((unsigned __int16 *)&v227);
                              v169 = std::string::insert(__src, 0, "Too many errors when decoding the arcs payload block with version ", 0x42uLL);
                              v170 = (void *)v169->__r_.__value_.__r.__words[0];
                              v171 = v169->__r_.__value_.__l.__size_;
                              LODWORD(v278) = v169->__r_.__value_.__r.__words[2];
                              *(_DWORD *)((char *)&v278 + 3) = *(_DWORD *)((char *)&v169->__r_.__value_.__r.__words[2]
                                                                         + 3);
                              v172 = SHIBYTE(v169->__r_.__value_.__r.__words[2]);
                              v169->__r_.__value_.__l.__size_ = 0;
                              v169->__r_.__value_.__r.__words[2] = 0;
                              v169->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__src[0].__r_.__value_.__l.__data_);
                              if (v172 < 0)
                              {
                                sub_207CA40D8(&v217, v170, v171);
                              }
                              else
                              {
                                *(_QWORD *)&v217 = v170;
                                *((_QWORD *)&v217 + 1) = v171;
                                *(_DWORD *)v218 = v278;
                                *(_DWORD *)&v218[3] = *(_DWORD *)((char *)&v278 + 3);
                                v219 = v172;
                              }
                              v220 = 1;
                              LOBYTE(v221) = 0;
                              v225 = 0;
                              v226 = 1;
                              sub_2080FF724((uint64_t)__src, 5u, &v217);
                              *(_OWORD *)v35 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
                              *(_BYTE *)(v35 + 16) = 0;
                              *(_BYTE *)(v35 + 112) = 0;
                              if (__src[4].__r_.__value_.__s.__data_[16])
                              {
                                *(_BYTE *)(v35 + 40) = 0;
                                v174 = __src[1].__r_.__value_.__s.__data_[16];
                                if (__src[1].__r_.__value_.__s.__data_[16])
                                {
                                  *(_OWORD *)(v35 + 16) = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2];
                                  *(_QWORD *)(v35 + 32) = __src[1].__r_.__value_.__l.__size_;
                                  *(_OWORD *)&__src[1].__r_.__value_.__l.__data_ = 0uLL;
                                  __src[0].__r_.__value_.__r.__words[2] = 0;
                                  *(_BYTE *)(v35 + 40) = 1;
                                }
                                *(_BYTE *)(v35 + 48) = 0;
                                *(_BYTE *)(v35 + 104) = 0;
                                if (__src[4].__r_.__value_.__s.__data_[8])
                                {
                                  *(_OWORD *)(v35 + 48) = *(_OWORD *)&__src[2].__r_.__value_.__l.__data_;
                                  v175 = __src[3].__r_.__value_.__l.__data_;
                                  *(_QWORD *)(v35 + 64) = *((_QWORD *)&__src[2].__r_.__value_.__l + 2);
                                  *(_QWORD *)(v35 + 72) = v175;
                                  *(_OWORD *)(v35 + 80) = *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1];
                                  *(_QWORD *)(v35 + 96) = __src[4].__r_.__value_.__l.__data_;
                                  *(_BYTE *)(v35 + 104) = 1;
                                }
                                *(_BYTE *)(v35 + 112) = 1;
                                *(_BYTE *)(v35 + 120) = 0;
                                if (v174 && __src[1].__r_.__value_.__s.__data_[15] < 0)
                                  operator delete((void *)__src[0].__r_.__value_.__r.__words[2]);
                              }
                              else
                              {
                                *(_BYTE *)(v35 + 120) = 0;
                              }
                              if (v226)
                              {
                                if (v225)
                                {
                                  if (v224 < 0)
                                    operator delete(v223);
                                  if (v222 < 0)
                                    operator delete(v221);
                                }
                                if (v220 && v219 < 0)
                                  operator delete((void *)v217);
                              }
                              if (v172 < 0)
                              {
                                v173 = v170;
LABEL_377:
                                operator delete(v173);
                              }
                            }
LABEL_378:
                            if (v277[24] && *(_QWORD *)v277)
                              operator delete(*(void **)v277);
                            v176 = (void *)*((_QWORD *)v124 + 6);
                            if (v176)
                            {
                              *((_QWORD *)v124 + 7) = v176;
                              operator delete(v176);
                            }
                            v177 = (void *)*((_QWORD *)v124 + 3);
                            if (v177)
                            {
                              *((_QWORD *)v124 + 4) = v177;
                              operator delete(v177);
                            }
                            goto LABEL_385;
                          }
                          break;
                      }
                      v157 = 6;
                      if (v276 != 8)
                        goto LABEL_299;
                      goto LABEL_300;
                    }
                    if (v144 >= (float)v140)
                      goto LABEL_274;
                    *((_QWORD *)&v227 + 1) = 80;
                    *(_QWORD *)&v227 = operator new(0x58uLL);
                    strcpy((char *)v227, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/Codec/src/Codec.cpp");
                    HIBYTE(v231) = 13;
                    v229 = 195;
                    strcpy((char *)&v230, "DecodeArcBits");
                    v232 = v227;
                    v227 = 0uLL;
                    v228 = 0;
                    v233 = 0x8000000000000058;
                    v234 = 195;
                    v236 = v231;
                    v235 = v230;
                    v231 = 0;
                    v230 = 0uLL;
                    v237 = 1;
                    LOBYTE(v278) = 0;
                    v283 = 0;
                    sub_207CA40D8(&v278, (void *)v232, *((unint64_t *)&v232 + 1));
                    v280 = 195;
                    if (SHIBYTE(v236) < 0)
                    {
                      sub_207CA40D8(&v281, (void *)v235, *((unint64_t *)&v235 + 1));
                    }
                    else
                    {
                      v281 = v235;
                      v282 = v236;
                    }
                    v283 = 1;
                    sub_207CCB5A4((uint64_t)__src, "Too many redundant arcs bits are corrupted");
                    sub_208213800((__int128 *)__src, &v278, (uint64_t)&v284);
                    if (__src[3].__r_.__value_.__s.__data_[16])
                    {
                      if (__src[3].__r_.__value_.__s.__data_[15] < 0)
                        operator delete((void *)__src[2].__r_.__value_.__r.__words[2]);
                      if (__src[2].__r_.__value_.__s.__data_[7] < 0)
                        operator delete((void *)__src[1].__r_.__value_.__l.__size_);
                    }
                    if (__src[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__src[0].__r_.__value_.__l.__data_);
                    v277[0] = 0;
                    v277[24] = 0;
                    if (v286)
                    {
                      *(_OWORD *)v277 = v284;
                      *(_QWORD *)&v277[16] = v285;
                      v285 = 0;
                      v284 = 0uLL;
                      v277[24] = 1;
                    }
                    v277[32] = 0;
                    v277[88] = 0;
                    if (v292)
                    {
                      *(_QWORD *)&v277[48] = v288;
                      *(_OWORD *)&v277[32] = v287;
                      v287 = 0uLL;
                      *(_OWORD *)&v277[64] = v290;
                      *(_QWORD *)&v277[56] = v289;
                      *(_QWORD *)&v277[80] = v291;
                      v288 = 0;
                      v290 = 0uLL;
                      v291 = 0;
                      v277[88] = 1;
                    }
                    v277[96] = 1;
                    v185 = atomic_load((unsigned __int8 *)&qword_254530998);
                    if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_254530998))
                    {
                      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C70, &dword_207C77000);
                      __cxa_guard_release(&qword_254530998);
                    }
                    sub_207CCB3BC(__src, (__int128 *)v277);
                    v186 = __src[4].__r_.__value_.__s.__data_[0];
                    if (__src[4].__r_.__value_.__s.__data_[0])
                    {
                      if (__src[1].__r_.__value_.__s.__data_[0])
                      {
                        v295[0] = __src[0].__r_.__value_.__l.__size_;
                        v187 = __src[0].__r_.__value_.__r.__words[0];
                        *(_QWORD *)((char *)v295 + 7) = *(std::string::size_type *)((char *)&__src[0].__r_.__value_.__r.__words[1]
                                                                                  + 7);
                        LOBYTE(v206) = *((_BYTE *)&__src[0].__r_.__value_.__s + 23);
                        memset(__src, 0, 24);
                        v188 = 1;
                      }
                      else
                      {
                        v187 = 0;
                        v188 = 0;
                      }
                      if (__src[3].__r_.__value_.__s.__data_[16])
                      {
                        v294[0] = *((_QWORD *)&__src[1].__r_.__value_.__l + 2);
                        v190 = __src[1].__r_.__value_.__l.__size_;
                        *(_QWORD *)((char *)v294 + 7) = *(std::string::size_type *)((char *)&__src[1].__r_.__value_.__r.__words[2]
                                                                                  + 7);
                        LOBYTE(v202) = __src[2].__r_.__value_.__s.__data_[7];
                        *(_OWORD *)&__src[1].__r_.__value_.__r.__words[1] = 0uLL;
                        v204 = (void *)__src[2].__r_.__value_.__r.__words[2];
                        v201 = __src[2].__r_.__value_.__l.__size_;
                        v205 = (void *)v190;
                        v293[0] = __src[3].__r_.__value_.__l.__data_;
                        *(_QWORD *)((char *)v293 + 7) = *(std::string::size_type *)((char *)__src[3].__r_.__value_.__r.__words
                                                                                  + 7);
                        LOBYTE(v203) = __src[3].__r_.__value_.__s.__data_[15];
                        __src[2].__r_.__value_.__r.__words[0] = 0;
                        __src[2].__r_.__value_.__r.__words[2] = 0;
                        v189 = 1;
                        *(_OWORD *)&__src[3].__r_.__value_.__l.__data_ = 0uLL;
                      }
                      else
                      {
                        v205 = 0;
                        v189 = 0;
                      }
                      if (__src[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__src[0].__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v187 = 0;
                      v189 = 0;
                      v188 = 0;
                    }
                    if (v277[96])
                    {
                      if (v277[88])
                      {
                        if ((v277[87] & 0x80000000) != 0)
                          operator delete(*(void **)&v277[64]);
                        if ((v277[55] & 0x80000000) != 0)
                          operator delete(*(void **)&v277[32]);
                      }
                      if (v277[24] && (v277[23] & 0x80000000) != 0)
                        operator delete(*(void **)v277);
                    }
                    if (v292)
                    {
                      if (SHIBYTE(v291) < 0)
                        operator delete((void *)v290);
                      if (SHIBYTE(v288) < 0)
                        operator delete((void *)v287);
                    }
                    if (v286 && SHIBYTE(v285) < 0)
                      operator delete((void *)v284);
                    if (v283)
                    {
                      if (SHIBYTE(v282) < 0)
                        operator delete((void *)v281);
                      if (SHIBYTE(v279) < 0)
                        operator delete((void *)v278);
                    }
                    if (v186)
                    {
                      if (v188)
                      {
                        v191 = 0;
                        v298[0] = v295[0];
                        *(_QWORD *)((char *)v298 + 7) = *(_QWORD *)((char *)v295 + 7);
                        v295[0] = 0;
                        *(_QWORD *)((char *)v295 + 7) = 0;
                        v192 = (void *)v187;
                        v187 = 0;
                      }
                      else
                      {
                        v192 = 0;
                        v191 = (char)v206;
                      }
                      v193 = (void *)v187;
                      if (v189)
                      {
                        v194 = 0;
                        v195 = 0;
                        v196 = 0;
                        v297[0] = v294[0];
                        *(_QWORD *)((char *)v297 + 7) = *(_QWORD *)((char *)v294 + 7);
                        v294[0] = 0;
                        *(_QWORD *)((char *)v294 + 7) = 0;
                        v296[0] = v293[0];
                        *(_QWORD *)((char *)v296 + 7) = *(_QWORD *)((char *)v293 + 7);
                        v293[0] = 0;
                        v197 = v205;
                        *(_QWORD *)((char *)v293 + 7) = 0;
                        v205 = 0;
                      }
                      else
                      {
                        v197 = 0;
                        v194 = v204;
                        v195 = v203;
                        v196 = v202;
                      }
                      *(_QWORD *)a1 = 8;
                      *(_QWORD *)(a1 + 8) = &off_253E50C70;
                      *(_BYTE *)(a1 + 16) = 0;
                      *(_BYTE *)(a1 + 112) = 0;
                      *(_BYTE *)(a1 + 40) = 0;
                      if (v188)
                      {
                        v198 = v298[0];
                        *(_QWORD *)(a1 + 16) = v192;
                        *(_QWORD *)(a1 + 24) = v198;
                        *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v298 + 7);
                        *(_BYTE *)(a1 + 39) = (_BYTE)v206;
                        v298[0] = 0;
                        *(_QWORD *)((char *)v298 + 7) = 0;
                        *(_BYTE *)(a1 + 40) = 1;
                        LOBYTE(v206) = 0;
                        v192 = 0;
                      }
                      *(_BYTE *)(a1 + 48) = 0;
                      *(_BYTE *)(a1 + 104) = 0;
                      if (v189)
                      {
                        v199 = v297[0];
                        *(_QWORD *)(a1 + 48) = v197;
                        *(_QWORD *)(a1 + 56) = v199;
                        *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v297 + 7);
                        *(_BYTE *)(a1 + 71) = v202;
                        v297[0] = 0;
                        *(_QWORD *)((char *)v297 + 7) = 0;
                        *(_QWORD *)(a1 + 72) = v201;
                        *(_QWORD *)(a1 + 80) = v204;
                        *(_QWORD *)(a1 + 88) = v296[0];
                        *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v296 + 7);
                        *(_BYTE *)(a1 + 103) = v203;
                        v296[0] = 0;
                        *(_QWORD *)((char *)v296 + 7) = 0;
                        *(_BYTE *)(a1 + 104) = 1;
                      }
                      *(_BYTE *)(a1 + 112) = 1;
                      *(_BYTE *)(a1 + 120) = 0;
                      if (v188 && (v206 & 0x80) != 0)
                      {
                        v200 = v194;
                        operator delete(v192);
                        v194 = v200;
                      }
                      if (v189)
                      {
                        if (v195 < 0)
                          operator delete(v194);
                        if (v196 < 0)
                          operator delete(v205);
                      }
                      if (v188 && v191 < 0)
                        operator delete(v193);
                    }
                    else
                    {
                      *(_QWORD *)v35 = 8;
                      *(_QWORD *)(v35 + 8) = &off_253E50C70;
                      *(_BYTE *)(v35 + 16) = 0;
                      *(_BYTE *)(v35 + 112) = 0;
                      *(_BYTE *)(v35 + 120) = 0;
                    }
                    if (v237)
                    {
                      if (SHIBYTE(v236) < 0)
                        operator delete((void *)v235);
                      if (SHIBYTE(v233) < 0)
                        operator delete((void *)v232);
                    }
                    if (SHIBYTE(v231) < 0)
                    {
                      operator delete((void *)v230);
                      if ((SHIBYTE(v228) & 0x80000000) == 0)
                        goto LABEL_490;
                    }
                    else if ((SHIBYTE(v228) & 0x80000000) == 0)
                    {
LABEL_490:
                      v178 = v238;
                      if (!v238)
                        goto LABEL_387;
                      goto LABEL_386;
                    }
                    operator delete((void *)v227);
                    v178 = v238;
                    if (!v238)
                      goto LABEL_387;
LABEL_386:
                    operator delete(v178);
                    goto LABEL_387;
                  }
                }
                else
                {
                  v113 = 8;
                }
                if (v82 == 16)
                  goto LABEL_219;
                v114 = 5;
                if (v95 >= v112)
                  goto LABEL_226;
                goto LABEL_238;
              }
LABEL_177:
              if (v82 == 16)
                goto LABEL_178;
              v94 = 5 * v93;
              goto LABEL_183;
            }
LABEL_172:
            if (v82 == 110)
            {
              v95 = 0;
              goto LABEL_181;
            }
            if (v82 == 16)
              goto LABEL_174;
            v93 = 8;
            goto LABEL_177;
          }
LABEL_136:
          if (v82 == 110)
            goto LABEL_145;
          if (v82 == 16)
            goto LABEL_138;
          v85 = 8;
          if (v82 != 8)
            goto LABEL_141;
LABEL_143:
          v86 = 9 * v85;
          if (v82 == 8)
          {
LABEL_161:
            v89 = 2 * (v82 != 110);
            v203 = 6;
            v204 = (void *)v86;
            v90 = v86 + 6 * v89;
            if (!v90)
              goto LABEL_162;
          }
          else
          {
LABEL_160:
            if (v82 == 16)
              goto LABEL_161;
            v89 = 2 * (v82 != 110);
            v203 = 8;
            v204 = (void *)v86;
            v90 = v86 + 8 * v89;
            if (!v90)
              goto LABEL_162;
          }
          v91 = (int8x16_t *)operator new(8 * ((v90 - 1) >> 6) + 8);
          v88 = v91;
          if (v90 >= 0x41)
            v92 = (v90 - 1) >> 6;
          else
            v92 = 0;
          v91->i64[v92] = 0;
          if (v90 >= 0x40)
            bzero(v91, 8 * (v90 >> 6));
          if ((v90 & 0x3F) != 0)
            v88->i64[v90 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v90 & 0x3F));
          v205 = (void *)v90;
          if (v82 == 8)
            goto LABEL_174;
          goto LABEL_172;
        }
      }
      v60 = v58 - v59 - 8;
      if (v60 >= 8)
      {
        v66 = 0;
        v67 = 0;
        v68 = (v60 >> 3) + 1;
        v62 = &v59[8 * (v68 & 0x3FFFFFFFFFFFFFFELL)];
        v69 = v59 + 8;
        v70 = v68 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v66 += (*(_QWORD *)(a2 + ((*(v69 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(v69 - 1)) & 1;
          v67 += (*(_QWORD *)(a2 + ((*v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v69) & 1;
          v69 += 2;
          v70 -= 2;
        }
        while (v70);
        v61 = v67 + v66;
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_97;
      }
      else
      {
        v61 = 0;
        v62 = *v46;
      }
      do
      {
        v71 = *(_QWORD *)v62;
        v62 += 8;
        v61 += (*(_QWORD *)(a2 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v71) & 1;
      }
      while (v62 != v58);
LABEL_97:
      v72 = 2 * v61;
      v73 = (v58 - v59) >> 3;
      v74 = v59 + 8;
      do
      {
        v75 = (1 << *((_QWORD *)v74 - 1)) & *(_QWORD *)(a3 + ((*((_QWORD *)v74 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (v75)
          v76 = v74 == v58;
        else
          v76 = 1;
        v74 += 8;
      }
      while (!v76);
      v77 = v73 - v61;
      if (v72 > v73)
        v77 = v61;
      v79 = (float)((float)v77 / (float)v73) >= 0.9 && v75 != 0;
      v80 = 1 << v57;
      v81 = 8 * (v57 >> 6);
      if (v72 <= v73)
      {
        *(_QWORD *)&v52[v81] &= ~v80;
        v65 = &v56[v81];
        if (!v79)
        {
LABEL_115:
          v64 = ~v80;
          goto LABEL_116;
        }
      }
      else
      {
        *(_QWORD *)&v52[v81] |= v80;
        v65 = &v56[v81];
        if (!v79)
          goto LABEL_115;
      }
      *(_QWORD *)v65 |= v80;
      v46 += 3;
      ++v57;
      if (v46 == v45)
        goto LABEL_117;
    }
  }
  sub_207CCB5A4((uint64_t)&v254, "Failed to find enough clustered arcs!");
  v262 = 1;
  sub_2080FF724((uint64_t)__src, 7u, &v254);
  *(_OWORD *)a1 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (__src[4].__r_.__value_.__s.__data_[16])
  {
    *(_BYTE *)(a1 + 40) = 0;
    v83 = __src[1].__r_.__value_.__s.__data_[16];
    if (__src[1].__r_.__value_.__s.__data_[16])
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2];
      *(_QWORD *)(a1 + 32) = __src[1].__r_.__value_.__l.__size_;
      *(_OWORD *)&__src[1].__r_.__value_.__l.__data_ = 0uLL;
      __src[0].__r_.__value_.__r.__words[2] = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (__src[4].__r_.__value_.__s.__data_[8])
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)&__src[2].__r_.__value_.__l.__data_;
      v84 = __src[3].__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)&__src[2].__r_.__value_.__l + 2);
      *(_QWORD *)(a1 + 72) = v84;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1];
      *(_QWORD *)(a1 + 96) = __src[4].__r_.__value_.__l.__data_;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v83 && __src[1].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)__src[0].__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v262)
  {
    if (v261)
    {
      if (v260 < 0)
        operator delete(v259);
      if (v258 < 0)
        operator delete(v257);
    }
    if (v256 && v255 < 0)
    {
      v87 = (void *)v254;
      goto LABEL_394;
    }
  }
LABEL_395:
  if (LOBYTE(__dst[12]))
  {
    if (__dst[9])
    {
      __dst[10] = __dst[9];
      operator delete((void *)__dst[9]);
    }
    if (__dst[5])
      free((void *)__dst[5]);
  }
LABEL_400:
  v179 = (char *)v273;
  if (v273)
  {
    v180 = v274;
    v181 = v273;
    if (v274 != v273)
    {
      v182 = (char *)v274;
      do
      {
        v184 = (char *)*((_QWORD *)v182 - 3);
        v182 -= 24;
        v183 = v184;
        if (v184)
        {
          *(v180 - 2) = v183;
          operator delete(v183);
        }
        v180 = (char **)v182;
      }
      while (v182 != v179);
      v181 = v273;
    }
    v274 = (char **)v179;
    operator delete(v181);
  }
  if (v272[0])
  {
    v272[1] = v272[0];
    operator delete(v272[0]);
  }
}

void sub_208102248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  void *v58;
  void *v59;
  void *v60;
  void *v62;

  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  sub_207CCB544((uint64_t)&STACK[0x740]);
  sub_207CCB544((uint64_t)&a49);
  sub_20810530C((uint64_t)&a42);
  if (a58)
    operator delete(a58);
  if (v60)
  {
    operator delete(v60);
    if (!v59)
    {
LABEL_7:
      if (!v58)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if (!v59)
  {
    goto LABEL_7;
  }
  operator delete(v59);
  if (!v58)
  {
LABEL_8:
    v62 = (void *)STACK[0x208];
    if (!STACK[0x208])
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_13:
  operator delete(v58);
  v62 = (void *)STACK[0x208];
  if (!STACK[0x208])
  {
LABEL_10:
    sub_2080FFA0C((uint64_t)&STACK[0x840]);
    sub_2080FFA54((uint64_t)&STACK[0x2F0]);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v62);
  goto LABEL_10;
}

uint64_t *sub_208102510(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  _BYTE v6[32];
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v16 = *(_BYTE *)(a2 + 120);
  if (v16)
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
    *(_OWORD *)&v6[8] = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v6[16] = 0;
    v15 = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v8 = 0;
      if (*(_BYTE *)(a2 + 40))
      {
        *(_OWORD *)&v6[16] = *(_OWORD *)(a2 + 16);
        v7 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v8 = 1;
      }
      LOBYTE(v9) = 0;
      v14 = 0;
      if (*(_BYTE *)(a2 + 104))
      {
        v3 = *(_QWORD *)(a2 + 72);
        v10 = *(_QWORD *)(a2 + 64);
        v9 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        v11 = v3;
        *(_OWORD *)v12 = *(_OWORD *)(a2 + 80);
        v13 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        v14 = 1;
      }
      v15 = 1;
    }
  }
  sub_208105680((uint64_t *)v6, a1);
  if (!v16)
  {
    if (!v15)
      return a1;
    if (!v14)
      goto LABEL_16;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(v12[0]);
      if ((SHIBYTE(v10) & 0x80000000) == 0)
      {
LABEL_16:
        if (!v8)
          return a1;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete((void *)v9);
    if (!v8)
      return a1;
LABEL_17:
    if ((SHIBYTE(v7) & 0x80000000) == 0)
      return a1;
    v4 = *(void **)&v6[16];
    goto LABEL_19;
  }
  v4 = *(void **)v6;
  if (!*(_QWORD *)v6)
    return a1;
LABEL_19:
  operator delete(v4);
  return a1;
}

uint64_t *sub_208102694(uint64_t *a1, uint64_t a2)
{
  void *v3;
  void *v5;
  void *__p[2];
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v5 = *(void **)a2;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v15 = 1;
  sub_208105680((uint64_t *)&v5, a1);
  if (!v15)
  {
    if (!v14)
      return a1;
    if (!v13)
      goto LABEL_8;
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v8)
          return a1;
        goto LABEL_9;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v9);
    if (!v8)
      return a1;
LABEL_9:
    if ((v7 & 0x80000000) == 0)
      return a1;
    v3 = __p[1];
    goto LABEL_11;
  }
  v3 = v5;
  if (!v5)
    return a1;
LABEL_11:
  operator delete(v3);
  return a1;
}

double sub_208102768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  __int128 v31;

  v6 = *(unsigned int *)(a3 + 24)
     - (*(unsigned int *)(a2 + 8)
      + (unint64_t)*(unsigned int *)(a3 + 8))
     + *(unsigned int *)(a2 + 24)
     + 8 * (*(_QWORD *)(a2 + 16) - (*(_QWORD *)a2 + *(_QWORD *)a3) + *(_QWORD *)(a3 + 16));
  v31 = 0uLL;
  v30 = 0;
  sub_207D1C104((uint64_t)&v30, v6);
  v7 = *(uint64_t **)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(uint64_t **)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  while (v7 != v9 || v8 != v10)
  {
    v11 = *v7;
    v12 = v31;
    if ((_QWORD)v31 == *((_QWORD *)&v31 + 1) << 6)
    {
      if ((uint64_t)v31 + 1 < 0)
LABEL_38:
        sub_207D159B0();
      v13 = *((_QWORD *)&v31 + 1) << 7;
      if (*((_QWORD *)&v31 + 1) << 7 <= ((unint64_t)v31 & 0xFFFFFFFFFFFFFFC0) + 64)
        v13 = (v31 & 0xFFFFFFFFFFFFFFC0) + 64;
      if ((unint64_t)v31 <= 0x3FFFFFFFFFFFFFFELL)
        v14 = v13;
      else
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      sub_207D1C104((uint64_t)&v30, v14);
      v12 = v31;
    }
    *(_QWORD *)&v31 = v12 + 1;
    v15 = v12 >> 6;
    v16 = 1 << v12;
    if (((1 << v8) & v11) != 0)
      v17 = *(_QWORD *)(v30 + 8 * v15) | v16;
    else
      v17 = *(_QWORD *)(v30 + 8 * v15) & ~v16;
    *(_QWORD *)(v30 + 8 * v15) = v17;
    v7 += v8 == 63;
    if (v8 == 63)
      v8 = 0;
    else
      ++v8;
  }
  v18 = *(uint64_t **)a3;
  v19 = *(_DWORD *)(a3 + 8);
  v20 = *(uint64_t **)(a3 + 16);
  v21 = *(_DWORD *)(a3 + 24);
  while (v18 != v20 || v19 != v21)
  {
    v22 = *v18;
    v23 = v31;
    if ((_QWORD)v31 == *((_QWORD *)&v31 + 1) << 6)
    {
      if ((uint64_t)v31 + 1 < 0)
        goto LABEL_38;
      v24 = *((_QWORD *)&v31 + 1) << 7;
      if (*((_QWORD *)&v31 + 1) << 7 <= ((unint64_t)v31 & 0xFFFFFFFFFFFFFFC0) + 64)
        v24 = (v31 & 0xFFFFFFFFFFFFFFC0) + 64;
      if ((unint64_t)v31 <= 0x3FFFFFFFFFFFFFFELL)
        v25 = v24;
      else
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      sub_207D1C104((uint64_t)&v30, v25);
      v23 = v31;
    }
    *(_QWORD *)&v31 = v23 + 1;
    v26 = v23 >> 6;
    v27 = 1 << v23;
    if (((1 << v19) & v22) != 0)
      v28 = *(_QWORD *)(v30 + 8 * v26) | v27;
    else
      v28 = *(_QWORD *)(v30 + 8 * v26) & ~v27;
    *(_QWORD *)(v30 + 8 * v26) = v28;
    v18 += v19 == 63;
    if (v19 == 63)
      v19 = 0;
    else
      ++v19;
  }
  *(_QWORD *)a1 = v30;
  result = *(double *)&v31;
  *(_OWORD *)(a1 + 8) = v31;
  return result;
}

void sub_2081029A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081029C8(unsigned __int8 **a1)
{
  int v1;
  unsigned int v2;

  v1 = **a1;
  if (v1 == 8)
    goto LABEL_4;
  if (v1 == 110)
    return 0;
  if (v1 == 16)
  {
LABEL_4:
    v2 = 6;
    if (v1 == 8)
      return 48;
  }
  else
  {
    v2 = 8;
  }
  if (v1 == 16)
    return 9 * v2;
  else
    return 5 * v2;
}

_QWORD *sub_208102A4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_208102ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD **sub_208102AD8(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)*v2;
    *v2 = 0;
    if (v3)
    {
      v4 = (void *)v3[6];
      if (v4)
      {
        v3[7] = v4;
        operator delete(v4);
      }
      v5 = (void *)v3[3];
      if (v5)
      {
        v3[4] = v5;
        operator delete(v5);
      }
      operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_208102B48(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type size;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _DWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  int8x16_t *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  unint64_t v96;
  void *v97;
  int v98;
  int v99;
  uint64_t v100;
  void *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  size_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int8x16_t *v127;
  uint64_t v128;
  int8x16_t v129;
  unsigned int v130;
  int8x16_t *v131;
  unint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  int8x16_t *v137;
  uint64_t v138;
  int8x16_t v139;
  unsigned int v140;
  unsigned int v141;
  _BYTE *v142;
  unint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  char v147;
  char v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  int8x16_t *v161;
  uint64_t v162;
  void *v163;
  _QWORD *v164;
  __int128 __dst;
  _BYTE v166[7];
  char v167;
  char v168;
  void *v169;
  char v170;
  void *v171;
  char v172;
  char v173;
  char v174;
  _BYTE v175[32];
  void *v176;
  char v177;
  __int128 v178;
  void *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  char v183;
  char v184;
  unsigned __int8 v185;
  void *v186[3];
  std::string v187;
  int v188;
  char v189;
  unsigned __int8 *v190;
  void *v191;
  void *v192[2];
  unint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  void *v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  void *v202[3];
  _BYTE v203[32];
  void *v204;
  char v205;
  __int128 v206;
  void *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  char v211;
  char v212;
  __int128 v213;
  __int128 __p;
  void *v215;
  unsigned __int8 v216;
  __int128 v217;
  void *v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  char v222;
  char v223;
  char v224;
  void *v225;
  unint64_t v226;
  uint64_t v227;
  int64_t v228;
  char v229;
  _QWORD *v230;
  __int16 v231;
  std::string v232;
  char v233;
  _QWORD v234[2];
  _QWORD v235[2];
  _QWORD v236[2];
  _QWORD v237[4];

  if (a2[1] == 256 && a3[1] == 256)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a2;
    v8 = *a3;
    v237[0] = 0;
    v237[1] = 0;
    v236[0] = 0;
    v236[1] = 0;
    v235[0] = 0;
    v235[1] = 0;
    v234[0] = 0;
    v234[1] = 0;
    while (1)
    {
      v9 = v5 >> 6;
      v10 = 1 << v5;
      if (((1 << v5) & *(_QWORD *)(v7 + 8 * (v5 >> 6))) != 0)
      {
        v237[v9] |= v10;
        if ((*(_QWORD *)(v8 + 8 * v9) & v10) == 0)
          goto LABEL_8;
LABEL_5:
        v236[v9] |= v10;
        if (++v5 == 128)
          goto LABEL_9;
      }
      else
      {
        v237[v9] &= ~v10;
        if ((*(_QWORD *)(v8 + 8 * v9) & v10) != 0)
          goto LABEL_5;
LABEL_8:
        v236[v9] &= ~v10;
        if (++v5 == 128)
        {
LABEL_9:
          v11 = 0;
          while (1)
          {
            v12 = (v11 + 128) >> 6;
            v13 = 1 << v11;
            v14 = v11 >> 6;
            if (((1 << v11) & *(_QWORD *)(v7 + 8 * v12)) != 0)
            {
              v235[v14] |= v13;
              if ((*(_QWORD *)(v8 + 8 * v12) & v13) == 0)
                goto LABEL_14;
LABEL_11:
              v234[v14] |= v13;
              if (++v11 == 128)
                goto LABEL_15;
            }
            else
            {
              v235[v14] &= ~v13;
              if ((*(_QWORD *)(v8 + 8 * v12) & v13) != 0)
                goto LABEL_11;
LABEL_14:
              v234[v14] &= ~v13;
              if (++v11 == 128)
              {
LABEL_15:
                v15 = operator new(8uLL);
                *v15 = 0;
                v16 = operator new(8uLL);
                v17 = 0;
                *v16 = 0;
                v18 = 128;
                while (1)
                {
                  v19 = *((_QWORD *)&xmmword_20826C1A0 + v17);
                  v20 = v19 >> 6;
                  v21 = 1 << v19;
                  v22 = v237[v19 >> 6];
                  v23 = v17 >> 6;
                  v24 = 1 << v17;
                  if ((v21 & v22) != 0)
                  {
                    v15[v23] |= v24;
                    if ((v236[v20] & v21) == 0)
                      goto LABEL_20;
LABEL_17:
                    v16[v23] |= v24;
                    ++v17;
                    v18 -= 8;
                    if (!v18)
                      goto LABEL_21;
                  }
                  else
                  {
                    v15[v23] &= ~v24;
                    if ((v236[v20] & v21) != 0)
                      goto LABEL_17;
LABEL_20:
                    v16[v23] &= ~v24;
                    ++v17;
                    v18 -= 8;
                    if (!v18)
                    {
LABEL_21:
                      v25 = ~*(_DWORD *)v16;
                      v26 = *v16 & 0xFLL;
                      v37 = v26 == 15;
                      v27 = v26 != 15;
                      v28 = 1;
                      if (!v37)
                        v28 = 2;
                      if ((v25 & 0xF0) != 0)
                        v27 = v28;
                      if ((v25 & 0xF00) != 0)
                        v29 = ((v25 & 0xF000) != 0) + 1;
                      else
                        v29 = (v25 & 0xF000) != 0;
                      if ((unint64_t)(v29 + v27) > 1)
                      {
                        sub_207CCB5A4((uint64_t)v203, "The metadata block has low confidence!");
                        LOBYTE(v210) = 1;
                        sub_2080FF724((uint64_t)&v213, 2u, (__int128 *)v203);
                        goto LABEL_64;
                      }
                      sub_2080FFBEC((uint64_t)&v232, (uint64_t)v15, 0x10uLL, v6, 4uLL, 8uLL);
                      if (v233)
                      {
                        size = v232.__r_.__value_.__l.__size_;
                        if (v232.__r_.__value_.__l.__size_)
                        {
                          v31 = 0;
                          v32 = (uint64_t *)v232.__r_.__value_.__r.__words[0];
                          while (1)
                          {
                            v33 = (v31 >> 3) & 0x1FFFFFFFFFFFFFF8;
                            v34 = ((1 << v31) & *(_QWORD *)(v232.__r_.__value_.__r.__words[0] + v33)) != 0;
                            v35 = (*(_QWORD *)((char *)v15 + v33) & (1 << v31)) != 0;
                            v36 = *(_QWORD *)((char *)v16 + v33) & (1 << v31);
                            v37 = v34 == v35 || v36 == 0;
                            if (v37)
                              break;
                            if (v232.__r_.__value_.__l.__size_ == ++v31)
                              goto LABEL_48;
                          }
                          if (v232.__r_.__value_.__l.__size_ < 7)
                            sub_207CBA8AC();
                          v40 = *(_QWORD *)v232.__r_.__value_.__l.__data_ & 0x7FLL;
                          if ((v40 > 0x10 || ((1 << v40) & 0x10101) == 0)
                            && (_DWORD)v40 != 110
                            && (_DWORD)v40 != 64)
                          {
                            v231 = 0;
LABEL_92:
                            *(_OWORD *)v175 = (unint64_t)v40;
                            *(_QWORD *)&v175[16] = 0;
                            *(_QWORD *)&v175[24] = 0;
                            v185 = 1;
                            goto LABEL_162;
                          }
                          v231 = v40 | 0x100;
                          if ((v40 | 0x100) < 0x100)
                            goto LABEL_92;
                          v42 = operator new(0x48uLL);
                          v43 = v42;
                          if ((((_DWORD)v40 - 8) & 0xF7) != 0)
                            v44 = 256;
                          else
                            v44 = 32;
                          if ((((_DWORD)v40 - 8) & 0xF7) != 0)
                            v45 = 285;
                          else
                            v45 = 37;
                          *v42 = v45;
                          v42[1] = v44;
                          v42[2] = 1;
                          sub_207CB8548(v42 + 4, v45, v44, 1);
                          v230 = v43;
                          sub_2080FFF78(&v213, (uint64_t)v237, v231);
                          v160 = v43;
                          v161 = (int8x16_t *)v213;
                          v157 = v40;
                          v158 = *((_QWORD *)&v213 + 1);
                          v164 = (_QWORD *)*((_QWORD *)&__p + 1);
                          v46 = v215;
                          sub_2080FFF78(&v213, (uint64_t)v236, v231);
                          v159 = *((_QWORD *)&v213 + 1);
                          v162 = v213;
                          v163 = (void *)*((_QWORD *)&__p + 1);
                          v47 = (unint64_t)v215;
                          if (v231 <= 0xFu)
                          {
                            if (!(_BYTE)v231)
                              goto LABEL_114;
                          }
                          else if (v231 != 16)
                          {
LABEL_114:
                            v48 = operator new(8uLL);
                            v49 = 42;
                            *v48 = 42;
                            v50 = 8;
LABEL_116:
                            if (v46 != (void *)v50 || (*v164 ^ v49) << -(char)v46)
                            {
                              operator delete(v48);
                              goto LABEL_119;
                            }
                            LOBYTE(v213) = 0;
                            v52 = sub_208100374((uint64_t)v163, v47, &v213);
                            operator delete(v48);
                            if (!v52)
                            {
                              v53 = v231;
                              if (((v231 - 8) & 0xF7) != 0)
                                v54 = 8;
                              else
                                v54 = 5;
                              if (v231 == 8 || v231 == 16)
                              {
                                v55 = 19;
                              }
                              else if (v231 == 64)
                              {
                                v55 = 11;
                              }
                              else
                              {
                                v55 = 9;
                              }
                              if (sub_2080FFB74(v162, v159, v54, v55 * (unint64_t)v54))
                              {
                                LOWORD(v227) = v53;
                                sub_207DD5C1C((unsigned __int16 *)&v227);
                                v51 = (void *)v162;
                                sub_207C96E8C("The gaps payload block with version ", (std::string *)v203, (std::string *)&v213);
                                sub_207C96E30(" has low confidence", (std::string *)&v213, &v187);
                                if (SBYTE7(__p) < 0)
                                {
                                  operator delete((void *)v213);
                                  if ((v203[23] & 0x80000000) != 0)
                                    goto LABEL_332;
LABEL_300:
                                  if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_301;
LABEL_333:
                                  sub_207CA40D8(v203, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
                                }
                                else
                                {
                                  if ((v203[23] & 0x80000000) == 0)
                                    goto LABEL_300;
LABEL_332:
                                  operator delete(*(void **)v203);
                                  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_333;
LABEL_301:
                                  *(std::string *)v203 = v187;
                                }
                                v203[24] = 1;
                                LOBYTE(v204) = 0;
                                BYTE8(v209) = 0;
                                LOBYTE(v210) = 1;
                                sub_2080FF724((uint64_t)&v213, 4u, (__int128 *)v203);
                                *(_OWORD *)v175 = v213;
                                v175[16] = 0;
                                v184 = 0;
                                if (v223)
                                {
                                  v177 = 0;
                                  if (v216)
                                  {
                                    *(_OWORD *)&v175[16] = __p;
                                    v176 = v215;
                                    v215 = 0;
                                    __p = 0uLL;
                                    v177 = 1;
                                  }
                                  LOBYTE(v178) = 0;
                                  v183 = 0;
                                  if (v222)
                                  {
                                    v179 = v218;
                                    v178 = v217;
                                    v217 = 0uLL;
                                    v181 = v220;
                                    v180 = v219;
                                    v182 = v221;
                                    v218 = 0;
                                    v220 = 0uLL;
                                    v221 = 0;
                                    v183 = 1;
                                  }
                                  v184 = 1;
                                }
                                v185 = 0;
                                sub_207CCB330((uint64_t)&v213);
                                sub_207CCB148((uint64_t)v203);
                                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v187.__r_.__value_.__l.__data_);
                                v56 = v161;
LABEL_148:
                                if (v163)
                                  operator delete(v163);
                                if (v164)
                                  operator delete(v164);
                                if (v51)
                                  operator delete(v51);
                                if (v56)
                                  operator delete(v56);
                                v58 = (void *)v160[6];
                                if (v58)
                                {
                                  v160[7] = v58;
                                  operator delete(v58);
                                }
                                v59 = (void *)v160[3];
                                if (v59)
                                {
                                  v160[4] = v59;
                                  operator delete(v59);
                                }
                                v41 = v160;
LABEL_161:
                                operator delete(v41);
                                goto LABEL_162;
                              }
                              if (size <= 7)
                                sub_207CBA8AC();
                              v122 = *v32;
                              if ((*v32 & 0x80) != 0)
                              {
                                v123 = (uint64_t *)v161;
                                v124 = v158;
                                v125 = v158 - 64;
                                if (v158 >= 0x40)
                                {
                                  v124 = v158;
                                  v123 = (uint64_t *)v161;
                                  if (v125 < 0xC0)
                                    goto LABEL_466;
                                  v126 = (v125 >> 6) + 1;
                                  v124 = v158 - ((v126 & 0x7FFFFFFFFFFFFFCLL) << 6);
                                  v123 = &v161->i64[v126 & 0x7FFFFFFFFFFFFFCLL];
                                  v127 = v161 + 1;
                                  v128 = v126 & 0x7FFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v129 = vmvnq_s8(*v127);
                                    v127[-1] = vmvnq_s8(v127[-1]);
                                    *v127 = v129;
                                    v127 += 2;
                                    v128 -= 4;
                                  }
                                  while (v128);
                                  if (v126 != (v126 & 0x7FFFFFFFFFFFFFCLL))
                                  {
LABEL_466:
                                    do
                                    {
                                      *v123 = ~*v123;
                                      ++v123;
                                      v124 -= 64;
                                    }
                                    while (v124 > 0x3F);
                                  }
                                }
                                if (v124)
                                  *v123 ^= 0xFFFFFFFFFFFFFFFFLL >> -(char)v124;
                              }
                              if (v53 == 8 || v53 == 16)
                              {
                                v130 = 19;
                              }
                              else
                              {
                                v130 = 9;
                                if (v53 == 64)
                                  v130 = 11;
                              }
                              sub_2080FFBEC((uint64_t)&v227, (uint64_t)v161, v158, &v230, v54, v130 * (unint64_t)v54);
                              v51 = (void *)v162;
                              if (!v229)
                              {
                                *(_WORD *)v203 = v231;
                                sub_207DD5C1C((unsigned __int16 *)v203);
                                sub_207C96E8C("Too many errors when decoding the gaps payload block with version ", (std::string *)&v213, &v187);
                                if (SBYTE7(__p) < 0)
                                  operator delete((void *)v213);
                                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                                  sub_207CA40D8(v203, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
                                else
                                  *(std::string *)v203 = v187;
                                v203[24] = 1;
                                LOBYTE(v204) = 0;
                                BYTE8(v209) = 0;
                                LOBYTE(v210) = 1;
                                sub_2080FF724((uint64_t)&v213, 3u, (__int128 *)v203);
                                *(_OWORD *)v175 = v213;
                                v175[16] = 0;
                                v184 = 0;
                                if (v223)
                                {
                                  v177 = 0;
                                  if (v216)
                                  {
                                    *(_OWORD *)&v175[16] = __p;
                                    v176 = v215;
                                    v215 = 0;
                                    __p = 0uLL;
                                    v177 = 1;
                                  }
                                  LOBYTE(v178) = 0;
                                  v183 = 0;
                                  if (v222)
                                  {
                                    v179 = v218;
                                    v178 = v217;
                                    v217 = 0uLL;
                                    v181 = v220;
                                    v180 = v219;
                                    v182 = v221;
                                    v218 = 0;
                                    v220 = 0uLL;
                                    v221 = 0;
                                    v183 = 1;
                                  }
                                  v184 = 1;
                                }
                                v185 = 0;
                                sub_207CCB330((uint64_t)&v213);
                                sub_207CCB148((uint64_t)v203);
                                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v187.__r_.__value_.__l.__data_);
                                v56 = v161;
                                goto LABEL_455;
                              }
                              sub_207DDDB70(&v225, (uint64_t)&v227);
                              v131 = (int8x16_t *)v225;
                              v132 = v226;
                              if (sub_2080FFF14((uint64_t)v225, v226, (uint64_t)v161, v162))
                              {
                                sub_207CCB5A4((uint64_t)v203, "Corrected gaps payload bits are not trustful!");
                                LOBYTE(v210) = 1;
                                v51 = (void *)v162;
                                sub_2080FF724((uint64_t)&v213, 4u, (__int128 *)v203);
                                *(_OWORD *)v175 = v213;
                                v175[16] = 0;
                                v184 = 0;
                                if (v223)
                                {
                                  v177 = 0;
                                  if (v216)
                                  {
                                    *(_OWORD *)&v175[16] = __p;
                                    v176 = v215;
                                    v215 = 0;
                                    __p = 0uLL;
                                    v177 = 1;
                                  }
                                  LOBYTE(v178) = 0;
                                  v183 = 0;
                                  if (v222)
                                  {
                                    v179 = v218;
                                    v178 = v217;
                                    v217 = 0uLL;
                                    v181 = v220;
                                    v180 = v219;
                                    v182 = v221;
                                    v218 = 0;
                                    v220 = 0uLL;
                                    v221 = 0;
                                    v183 = 1;
                                  }
                                  v184 = 1;
                                }
                                v185 = 0;
                                sub_207CCB330((uint64_t)&v213);
                                sub_207CCB148((uint64_t)v203);
                                v56 = v161;
LABEL_453:
                                if (v225)
                                  operator delete(v225);
LABEL_455:
                                if (!v229)
                                  goto LABEL_148;
                                v57 = (void *)v227;
                                if (!v227)
                                  goto LABEL_148;
LABEL_147:
                                operator delete(v57);
                                goto LABEL_148;
                              }
                              v213 = 0uLL;
                              *(_QWORD *)&__p = 0;
                              v224 = 1;
                              v133 = v231;
                              if (v231 <= 0x10u && ((1 << v231) & 0x10101) != 0)
                              {
LABEL_347:
                                if ((v122 & 0x80) != 0)
                                {
                                  v134 = v132 - 64;
                                  if (v132 < 0x40)
                                  {
                                    v136 = (uint64_t *)v131;
                                  }
                                  else
                                  {
                                    if (v134 < 0xC0)
                                      goto LABEL_353;
                                    v135 = (v134 >> 6) + 1;
                                    v132 -= (v135 & 0x7FFFFFFFFFFFFFCLL) << 6;
                                    v136 = &v131->i64[v135 & 0x7FFFFFFFFFFFFFCLL];
                                    v137 = v131 + 1;
                                    v138 = v135 & 0x7FFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v139 = vmvnq_s8(*v137);
                                      v137[-1] = vmvnq_s8(v137[-1]);
                                      *v137 = v139;
                                      v137 += 2;
                                      v138 -= 4;
                                    }
                                    while (v138);
                                    v131 = (int8x16_t *)((char *)v131 + 8 * (v135 & 0x7FFFFFFFFFFFFFCLL));
                                    if (v135 != (v135 & 0x7FFFFFFFFFFFFFCLL))
                                    {
LABEL_353:
                                      v136 = (uint64_t *)v131;
                                      do
                                      {
                                        *v136 = ~*v136;
                                        ++v136;
                                        v132 -= 64;
                                      }
                                      while (v132 > 0x3F);
                                    }
                                  }
                                  if (v132)
                                    *v136 ^= 0xFFFFFFFFFFFFFFFFLL >> -(char)v132;
                                }
                                sub_2081003D8((uint64_t)v203, (uint64_t)v235, (uint64_t)v234, v32, size, &v225, v231);
                                sub_208102510((uint64_t *)&v213, (uint64_t)v203);
                                sub_2080FFAD8((uint64_t)v203);
                              }
                              else
                              {
                                if (v231 != 110)
                                {
                                  if (v231 == 64)
                                    goto LABEL_347;
LABEL_374:
                                  v140 = 8;
                                  if (((v133 - 8) & 0xF7) == 0)
                                    v140 = 5;
                                  v200 = v227;
                                  v201 = 0;
                                  if (v133 == 8 || v133 == 16)
                                  {
                                    v141 = 19;
                                    v51 = (void *)v162;
                                  }
                                  else
                                  {
                                    v51 = (void *)v162;
                                    if (v133 == 64)
                                      v141 = 11;
                                    else
                                      v141 = 9;
                                  }
                                  v143 = v141 * (unint64_t)v140;
                                  v198 = v227 + ((v143 >> 3) & 0x38);
                                  v199 = v143 & 0x3F;
                                  sub_2080FF6BC(v202, &v200, (uint64_t *)&v198);
                                  v195 = v213;
                                  v196 = 0;
                                  switch(v231)
                                  {
                                    case 8u:
LABEL_392:
                                      v144 = 6;
                                      goto LABEL_395;
                                    case 0x6Eu:
                                      v144 = 0;
                                      break;
                                    case 0x10u:
                                      goto LABEL_392;
                                    default:
                                      v144 = 8;
LABEL_395:
                                      if (v231 == 8)
                                      {
LABEL_398:
                                        v145 = 9;
                                        goto LABEL_401;
                                      }
                                      if (v231 != 110)
                                      {
                                        if (v231 == 16)
                                          goto LABEL_398;
                                        v145 = 5;
LABEL_401:
                                        v146 = v145 * (unint64_t)v144;
                                        v193 = v213 + ((v146 >> 3) & 0x18);
                                        v194 = v146 & 0x3F;
                                        sub_2080FF6BC(&v197, &v195, (uint64_t *)&v193);
                                        sub_20810ABC0((_QWORD **)v202, 8 * (v231 == 110), v192);
                                        if (!HIBYTE(v231))
                                          sub_207CA2A4C();
                                        v190 = (unsigned __int8 *)&v231;
                                        sub_207DDDB70(&v191, (uint64_t)v192);
                                        sub_208105C80(&v190, v203);
                                        v147 = sub_20810D1DC((uint64_t)v202, (uint64_t *)v203);
                                        if (*(_QWORD *)v203)
                                          operator delete(*(void **)v203);
                                        if ((v147 & 1) != 0)
                                        {
                                          if (*v190 == 8)
                                          {
                                            *(_QWORD *)v203 = operator new(8uLL);
                                            *(_OWORD *)&v203[8] = xmmword_20826C190;
                                            **(_QWORD **)v203 = 109;
                                          }
                                          else
                                          {
                                            memset(v203, 0, 24);
                                          }
                                          v148 = sub_20810D1DC((uint64_t)&v197, (uint64_t *)v203);
                                          if (*(_QWORD *)v203)
                                            operator delete(*(void **)v203);
                                          if ((v148 & 1) != 0)
                                          {
                                            v149 = sub_2080FF5EC(&v190);
                                            v150 = v228;
                                            if (v228 >= v149)
                                              v150 = v149;
                                            if ((v150 & 0x8000000000000000) != 0)
                                            {
                                              v152 = v150 - 63;
                                              if ((uint64_t)(v150 - 63) < 0)
                                                v152 = v150;
                                              v151 = v152 >> 6;
                                            }
                                            else
                                            {
                                              v151 = v150 >> 6;
                                            }
                                            *(_QWORD *)v203 = v227;
                                            *(_DWORD *)&v203[8] = 0;
                                            *(_QWORD *)&v203[16] = v227 + 8 * v151;
                                            *(_DWORD *)&v203[24] = v150 & 0x3F;
                                            v153 = sub_2081029C8(&v190);
                                            v154 = *((_QWORD *)&v213 + 1);
                                            if (*((uint64_t *)&v213 + 1) >= v153)
                                              v154 = v153;
                                            if ((v154 & 0x8000000000000000) != 0)
                                            {
                                              v156 = v154 - 63;
                                              if ((uint64_t)(v154 - 63) < 0)
                                                v156 = v154;
                                              v155 = v156 >> 6;
                                            }
                                            else
                                            {
                                              v155 = v154 >> 6;
                                            }
                                            v187.__r_.__value_.__r.__words[0] = v213;
                                            LODWORD(v187.__r_.__value_.__r.__words[1]) = 0;
                                            v187.__r_.__value_.__r.__words[2] = v213 + 8 * v155;
                                            v188 = v154 & 0x3F;
                                            sub_208102768((uint64_t)v186, (uint64_t)v203, (uint64_t)&v187);
                                            sub_208109C78((uint64_t)v186, &v231, &v187);
                                            *(_QWORD *)v203 = v157;
                                            sub_208102A4C(&v203[8], (uint64_t)&v187);
                                            *(_QWORD *)v175 = *(_QWORD *)v203;
                                            *(_OWORD *)&v175[8] = *(_OWORD *)&v203[8];
                                            *(_QWORD *)&v175[24] = *(_QWORD *)&v203[24];
                                            v185 = 1;
                                            if (v187.__r_.__value_.__r.__words[0])
                                            {
                                              v187.__r_.__value_.__l.__size_ = v187.__r_.__value_.__r.__words[0];
                                              operator delete(v187.__r_.__value_.__l.__data_);
                                            }
                                            if (v186[0])
                                              operator delete(v186[0]);
                                          }
                                          else
                                          {
                                            sub_207CCB5A4((uint64_t)&v187, "Arc message CRC failed");
                                            v189 = 1;
                                            sub_207CCAFD0(0x5Eu, (__int128 *)&v187, (uint64_t)v203);
                                            *(_OWORD *)v175 = *(_OWORD *)v203;
                                            v175[16] = 0;
                                            v184 = 0;
                                            if (v212)
                                            {
                                              v177 = 0;
                                              if (v205)
                                              {
                                                *(_OWORD *)&v175[16] = *(_OWORD *)&v203[16];
                                                v176 = v204;
                                                *(_QWORD *)&v203[24] = 0;
                                                v204 = 0;
                                                *(_QWORD *)&v203[16] = 0;
                                                v177 = 1;
                                              }
                                              LOBYTE(v178) = 0;
                                              v183 = 0;
                                              if (v211)
                                              {
                                                v179 = v207;
                                                v178 = v206;
                                                v206 = 0uLL;
                                                v181 = v209;
                                                v180 = v208;
                                                v182 = v210;
                                                v207 = 0;
                                                v209 = 0uLL;
                                                v210 = 0;
                                                v183 = 1;
                                              }
                                              v184 = 1;
                                            }
                                            v185 = 0;
                                            sub_207CCB330((uint64_t)v203);
                                            sub_207CCB148((uint64_t)&v187);
                                          }
                                          v56 = v161;
                                          v51 = (void *)v162;
                                        }
                                        else
                                        {
                                          sub_207CCB5A4((uint64_t)&v187, "Gap message CRC failed");
                                          v189 = 1;
                                          sub_207CCAFD0(0x5Eu, (__int128 *)&v187, (uint64_t)v203);
                                          *(_OWORD *)v175 = *(_OWORD *)v203;
                                          v175[16] = 0;
                                          v184 = 0;
                                          if (v212)
                                          {
                                            v177 = 0;
                                            if (v205)
                                            {
                                              *(_OWORD *)&v175[16] = *(_OWORD *)&v203[16];
                                              v176 = v204;
                                              *(_QWORD *)&v203[24] = 0;
                                              v204 = 0;
                                              *(_QWORD *)&v203[16] = 0;
                                              v177 = 1;
                                            }
                                            LOBYTE(v178) = 0;
                                            v183 = 0;
                                            if (v211)
                                            {
                                              v179 = v207;
                                              v178 = v206;
                                              v206 = 0uLL;
                                              v181 = v209;
                                              v180 = v208;
                                              v182 = v210;
                                              v207 = 0;
                                              v209 = 0uLL;
                                              v210 = 0;
                                              v183 = 1;
                                            }
                                            v184 = 1;
                                            v51 = (void *)v162;
                                          }
                                          v185 = 0;
                                          sub_207CCB330((uint64_t)v203);
                                          sub_207CCB148((uint64_t)&v187);
                                          v56 = v161;
                                        }
                                        if (v191)
                                          operator delete(v191);
                                        if (v192[0])
                                          operator delete(v192[0]);
                                        if (v197)
                                          operator delete(v197);
                                        if (v202[0])
                                          operator delete(v202[0]);
LABEL_452:
                                        sub_2080FFAD8((uint64_t)&v213);
                                        goto LABEL_453;
                                      }
                                      break;
                                  }
                                  v145 = 0;
                                  goto LABEL_401;
                                }
                                memset(v203, 0, 24);
                                sub_208102694((uint64_t *)&v213, (uint64_t)v203);
                                if (*(_QWORD *)v203)
                                  operator delete(*(void **)v203);
                              }
                              if (v224)
                              {
                                v133 = v231;
                                goto LABEL_374;
                              }
                              sub_207E0E368((uint64_t)&v213);
                              *(_OWORD *)v203 = v213;
                              v142 = sub_207CCB3BC(&v203[16], &__p);
                              *(_OWORD *)v175 = *(_OWORD *)v203;
                              v175[16] = 0;
                              v184 = 0;
                              if (v212)
                              {
                                v177 = 0;
                                if (v205)
                                {
                                  *(_OWORD *)&v175[16] = *(_OWORD *)v142;
                                  v176 = (void *)*((_QWORD *)v142 + 2);
                                  *((_QWORD *)v142 + 1) = 0;
                                  *((_QWORD *)v142 + 2) = 0;
                                  *(_QWORD *)v142 = 0;
                                  v177 = 1;
                                }
                                LOBYTE(v178) = 0;
                                v183 = 0;
                                if (v211)
                                {
                                  v179 = v207;
                                  v178 = v206;
                                  v206 = 0uLL;
                                  v181 = v209;
                                  v180 = v208;
                                  v182 = v210;
                                  v207 = 0;
                                  v209 = 0uLL;
                                  v210 = 0;
                                  v183 = 1;
                                }
                                v184 = 1;
                              }
                              v185 = 0;
                              sub_207CCB330((uint64_t)v203);
                              v56 = v161;
                              v51 = (void *)v162;
                              goto LABEL_452;
                            }
LABEL_119:
                            sub_207CCB5A4((uint64_t)v203, "Error in magic bits!");
                            LOBYTE(v210) = 1;
                            v51 = (void *)v162;
                            sub_2080FF724((uint64_t)&v213, 9u, (__int128 *)v203);
                            *(_OWORD *)v175 = v213;
                            v175[16] = 0;
                            v184 = 0;
                            if (!v223)
                            {
                              v185 = 0;
                              goto LABEL_138;
                            }
                            v177 = 0;
                            if (v216)
                            {
                              *(_OWORD *)&v175[16] = __p;
                              v176 = v215;
                              v215 = 0;
                              __p = 0uLL;
                              v177 = 1;
                            }
                            LOBYTE(v178) = 0;
                            v183 = 0;
                            if (v222)
                            {
                              v179 = v218;
                              v178 = v217;
                              v217 = 0uLL;
                              v181 = v220;
                              v180 = v219;
                              v182 = v221;
                              v221 = 0;
                              v218 = 0;
                              v220 = 0uLL;
                              v183 = 1;
                              v184 = 1;
                              v185 = 0;
                              if (!v216)
                                goto LABEL_138;
                            }
                            else
                            {
                              v184 = 1;
                              v185 = 0;
                              if (!v216)
                              {
LABEL_138:
                                v56 = v161;
                                if (!(_BYTE)v210)
                                  goto LABEL_148;
                                if (BYTE8(v209))
                                {
                                  if (SBYTE7(v209) < 0)
                                    operator delete(v207);
                                  if (SBYTE7(v206) < 0)
                                    operator delete(v204);
                                }
                                if (!v203[24] || (v203[23] & 0x80000000) == 0)
                                  goto LABEL_148;
                                v57 = *(void **)v203;
                                goto LABEL_147;
                              }
                            }
                            if (SHIBYTE(v215) < 0)
                              operator delete((void *)__p);
                            goto LABEL_138;
                          }
                          v48 = operator new(8uLL);
                          v49 = 17;
                          *v48 = 17;
                          v50 = 7;
                          goto LABEL_116;
                        }
LABEL_48:
                        sub_207CCB5A4((uint64_t)v203, "Corrected metadata bits are not trustful!");
                        LOBYTE(v210) = 1;
                        sub_2080FF724((uint64_t)&v213, 2u, (__int128 *)v203);
                        *(_OWORD *)v175 = v213;
                        v175[16] = 0;
                        v184 = 0;
                        if (v223)
                        {
                          v177 = 0;
                          if (v216)
                          {
                            *(_OWORD *)&v175[16] = __p;
                            v176 = v215;
                            v215 = 0;
                            __p = 0uLL;
                            v177 = 1;
                          }
                          LOBYTE(v178) = 0;
                          v183 = 0;
                          if (v222)
                          {
                            v178 = v217;
                            v179 = v218;
                            v181 = v220;
                            v180 = v219;
                            v182 = v221;
                            v183 = 1;
                          }
                          v184 = 1;
                          v185 = 0;
                          if (v216 && SHIBYTE(v215) < 0)
                            operator delete((void *)__p);
                        }
                        else
                        {
                          v185 = 0;
                        }
                        if ((_BYTE)v210)
                        {
                          if (BYTE8(v209))
                          {
                            if (SBYTE7(v209) < 0)
                              operator delete(v207);
                            if (SBYTE7(v206) < 0)
                              operator delete(v204);
                          }
                          if (v203[24] && (v203[23] & 0x80000000) != 0)
                          {
                            v41 = *(void **)v203;
                            goto LABEL_161;
                          }
                        }
LABEL_162:
                        v39 = (void *)v232.__r_.__value_.__r.__words[0];
                        if (v232.__r_.__value_.__r.__words[0])
LABEL_163:
                          operator delete(v39);
                      }
                      else
                      {
                        sub_207CCB5A4((uint64_t)v203, "Too many errors when decoding the metadata block!");
                        LOBYTE(v210) = 1;
                        sub_2080FF724((uint64_t)&v213, 1u, (__int128 *)v203);
LABEL_64:
                        *(_OWORD *)v175 = v213;
                        v175[16] = 0;
                        v184 = 0;
                        if (v223)
                        {
                          v177 = 0;
                          if (v216)
                          {
                            *(_OWORD *)&v175[16] = __p;
                            v176 = v215;
                            v215 = 0;
                            __p = 0uLL;
                            v177 = 1;
                          }
                          LOBYTE(v178) = 0;
                          v183 = 0;
                          if (v222)
                          {
                            v178 = v217;
                            v179 = v218;
                            v181 = v220;
                            v180 = v219;
                            v182 = v221;
                            v183 = 1;
                          }
                          v184 = 1;
                          v185 = 0;
                          if (v216 && SHIBYTE(v215) < 0)
                            operator delete((void *)__p);
                          if (!(_BYTE)v210)
                            goto LABEL_164;
                        }
                        else
                        {
                          v185 = 0;
                          if (!(_BYTE)v210)
                            goto LABEL_164;
                        }
                        if (BYTE8(v209))
                        {
                          if (SBYTE7(v209) < 0)
                            operator delete(v207);
                          if (SBYTE7(v206) < 0)
                            operator delete(v204);
                        }
                        if (v203[24] && (v203[23] & 0x80000000) != 0)
                        {
                          v39 = *(void **)v203;
                          goto LABEL_163;
                        }
                      }
LABEL_164:
                      operator delete(v16);
                      v38 = v15;
LABEL_165:
                      operator delete(v38);
                      goto LABEL_166;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_207CCB5A4((uint64_t)v203, "Invalid number of bits received in decoding");
  LOBYTE(v210) = 1;
  sub_207CCAFD0(0x28u, (__int128 *)v203, (uint64_t)&v213);
  *(_OWORD *)v175 = v213;
  v175[16] = 0;
  v184 = 0;
  if (v223)
  {
    v177 = 0;
    if (v216)
    {
      *(_OWORD *)&v175[16] = __p;
      v176 = v215;
      v215 = 0;
      __p = 0uLL;
      v177 = 1;
    }
    LOBYTE(v178) = 0;
    v183 = 0;
    if (v222)
    {
      v179 = v218;
      v178 = v217;
      v217 = 0uLL;
      v181 = v220;
      v180 = v219;
      v182 = v221;
      v218 = 0;
      v220 = 0uLL;
      v221 = 0;
      v183 = 1;
    }
    v184 = 1;
    v185 = 0;
    if (v216 && SHIBYTE(v215) < 0)
      operator delete((void *)__p);
    if (!(_BYTE)v210)
      goto LABEL_166;
  }
  else
  {
    v185 = 0;
    if (!(_BYTE)v210)
      goto LABEL_166;
  }
  if (!BYTE8(v209))
    goto LABEL_60;
  if ((SBYTE7(v209) & 0x80000000) == 0)
  {
    if ((SBYTE7(v206) & 0x80000000) == 0)
      goto LABEL_60;
LABEL_84:
    operator delete(v204);
    if (!v203[24])
      goto LABEL_166;
    goto LABEL_61;
  }
  operator delete(v207);
  if (SBYTE7(v206) < 0)
    goto LABEL_84;
LABEL_60:
  if (!v203[24])
    goto LABEL_166;
LABEL_61:
  if ((v203[23] & 0x80000000) != 0)
  {
    v38 = *(void **)v203;
    goto LABEL_165;
  }
LABEL_166:
  if (!v185)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 120) = 0;
LABEL_180:
    *(_OWORD *)a4 = *(_OWORD *)v175;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (!v184)
      return;
    *(_BYTE *)(a4 + 40) = 0;
    if (v177)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)&v175[16];
      *(_QWORD *)(a4 + 32) = v176;
      *(_QWORD *)&v175[24] = 0;
      v176 = 0;
      *(_QWORD *)&v175[16] = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v183)
    {
      v69 = v180;
      *(_QWORD *)(a4 + 64) = v179;
      *(_OWORD *)(a4 + 48) = v178;
      v178 = 0uLL;
      *(_QWORD *)(a4 + 72) = v69;
      *(_OWORD *)(a4 + 80) = v181;
      *(_QWORD *)(a4 + 96) = v182;
      v179 = 0;
      v181 = 0uLL;
      v182 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    goto LABEL_252;
  }
  v60 = *(_QWORD *)v175;
  if (*(_QWORD *)v175 != 16)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 120) = 1;
LABEL_187:
    *(_QWORD *)a4 = v60;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&v175[8];
    *(_QWORD *)(a4 + 24) = *(_QWORD *)&v175[24];
    return;
  }
  v61 = *(char **)&v175[8];
  v62 = *(char **)&v175[16];
  v63 = *(_QWORD *)&v175[16] - *(_QWORD *)&v175[8];
  v64 = 8 * (*(_QWORD *)&v175[16] - *(_QWORD *)&v175[8]);
  memset(v203, 0, 24);
  if (!v64)
  {
    v67 = 0;
    if (*(_QWORD *)&v175[16] == *(_QWORD *)&v175[8])
      goto LABEL_208;
    goto LABEL_189;
  }
  if ((v64 & 0x8000000000000000) != 0)
    sub_207D159B0();
  v65 = (v64 - 1) >> 6;
  v66 = (uint64_t *)operator new(8 * (v65 + 1));
  v67 = v66;
  *(_QWORD *)&v203[16] = v65 + 1;
  *(_QWORD *)v203 = v66;
  *(_QWORD *)&v203[8] = 8 * (*(_QWORD *)&v175[16] - *(_QWORD *)&v175[8]);
  if (v64 >= 0x41)
    v68 = (v64 - 1) >> 6;
  else
    v68 = 0;
  v66[v68] = 0;
  if (v64 >= 0x40)
    bzero(v66, 8 * (v64 >> 6));
  if ((v64 & 0x38) != 0)
    v67[v64 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v64 & 0x38));
  if (v62 != v61)
  {
LABEL_189:
    v70 = 0;
    while (1)
    {
      v74 = *v61++;
      v73 = v74;
      v75 = (v70 + 7) >> 6;
      v76 = 1 << (v70 + 7);
      if ((v74 & 1) != 0)
      {
        v67[v75] |= v76;
        v77 = (v70 + 6) >> 6;
        v78 = 1 << ((v70 + 6) & 0x3E);
        if ((v73 & 2) == 0)
          goto LABEL_201;
LABEL_194:
        v67[v77] |= v78;
        v79 = (v70 + 5) >> 6;
        v80 = 1 << ((v70 + 5) & 0x3D);
        if ((v73 & 4) != 0)
          goto LABEL_195;
LABEL_202:
        v67[v79] &= ~v80;
        v81 = (v70 + 4) >> 6;
        v82 = 1 << ((v70 + 4) & 0x3C);
        if ((v73 & 8) == 0)
          goto LABEL_203;
LABEL_196:
        v67[v81] |= v82;
        v83 = (v70 + 3) >> 6;
        v84 = 1 << ((v70 + 3) & 0x3B);
        if ((v73 & 0x10) != 0)
          goto LABEL_197;
LABEL_204:
        v67[v83] &= ~v84;
        v85 = (v70 + 2) >> 6;
        v86 = 1 << ((v70 + 2) & 0x3A);
        if ((v73 & 0x20) == 0)
          goto LABEL_205;
LABEL_198:
        v67[v85] |= v86;
        v87 = (v70 + 1) >> 6;
        v88 = 1 << ((v70 + 1) & 0x39);
        if ((v73 & 0x40) == 0)
          goto LABEL_190;
LABEL_206:
        v67[v87] |= v88;
        v71 = v70 >> 6;
        v72 = 1 << (v70 & 0x38);
        if (v73 < 0)
          goto LABEL_207;
LABEL_191:
        v67[v71] &= ~v72;
        v70 += 8;
        if (!--v63)
          break;
      }
      else
      {
        v67[v75] &= ~v76;
        v77 = (v70 + 6) >> 6;
        v78 = 1 << ((v70 + 6) & 0x3E);
        if ((v73 & 2) != 0)
          goto LABEL_194;
LABEL_201:
        v67[v77] &= ~v78;
        v79 = (v70 + 5) >> 6;
        v80 = 1 << ((v70 + 5) & 0x3D);
        if ((v73 & 4) == 0)
          goto LABEL_202;
LABEL_195:
        v67[v79] |= v80;
        v81 = (v70 + 4) >> 6;
        v82 = 1 << ((v70 + 4) & 0x3C);
        if ((v73 & 8) != 0)
          goto LABEL_196;
LABEL_203:
        v67[v81] &= ~v82;
        v83 = (v70 + 3) >> 6;
        v84 = 1 << ((v70 + 3) & 0x3B);
        if ((v73 & 0x10) == 0)
          goto LABEL_204;
LABEL_197:
        v67[v83] |= v84;
        v85 = (v70 + 2) >> 6;
        v86 = 1 << ((v70 + 2) & 0x3A);
        if ((v73 & 0x20) != 0)
          goto LABEL_198;
LABEL_205:
        v67[v85] &= ~v86;
        v87 = (v70 + 1) >> 6;
        v88 = 1 << ((v70 + 1) & 0x39);
        if ((v73 & 0x40) != 0)
          goto LABEL_206;
LABEL_190:
        v67[v87] &= ~v88;
        v71 = v70 >> 6;
        v72 = 1 << (v70 & 0x38);
        if ((v73 & 0x80) == 0)
          goto LABEL_191;
LABEL_207:
        v67[v71] |= v72;
        v70 += 8;
        if (!--v63)
          break;
      }
    }
  }
LABEL_208:
  v89 = *v67;
  if ((*v67 & 1) != 0)
  {
    v92 = 0;
  }
  else if ((v89 & 2) != 0)
  {
    v92 = 1;
  }
  else
  {
    if ((v89 & 4) == 0)
    {
      *(_QWORD *)&__p = 0;
      v213 = 0uLL;
      v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
      LODWORD(v187.__r_.__value_.__r.__words[1]) = 3;
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67[v64 >> 6];
      LODWORD(v232.__r_.__value_.__r.__words[1]) = v64 & 0x38;
      sub_2081053E8(&v213, (uint64_t)&v187, (uint64_t)&v232, (v64 & 0xFFFFFFFFFFFFFFF8) - 3);
      v90 = *((_QWORD *)&v213 + 1);
      if (*((_QWORD *)&v213 + 1) == (_QWORD)__p << 6)
      {
        if (*((_QWORD *)&v213 + 1) + 1 < 0)
          goto LABEL_459;
        if (*((_QWORD *)&v213 + 1) > 0x3FFFFFFFFFFFFFFEuLL)
        {
          v91 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if ((_QWORD)__p << 7 <= (*((_QWORD *)&v213 + 1) & 0xFFFFFFFFFFFFFFC0) + 64)
        {
          v91 = (*((_QWORD *)&v213 + 1) & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        else
        {
          v91 = (_QWORD)__p << 7;
        }
        sub_207D1C104((uint64_t)&v213, v91);
        v90 = *((_QWORD *)&v213 + 1);
      }
      *((_QWORD *)&v213 + 1) = v90 + 1;
      v102 = (char *)v213;
      *(_QWORD *)(v213 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v90);
      v103 = *((_QWORD *)&v213 + 1);
      if (*((_QWORD *)&v213 + 1) == (_QWORD)__p << 6)
      {
        if (*((_QWORD *)&v213 + 1) + 1 < 0)
          goto LABEL_459;
        if (*((_QWORD *)&v213 + 1) > 0x3FFFFFFFFFFFFFFEuLL)
        {
          v104 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if ((_QWORD)__p << 7 <= (*((_QWORD *)&v213 + 1) & 0xFFFFFFFFFFFFFFC0) + 64)
        {
          v104 = (*((_QWORD *)&v213 + 1) & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        else
        {
          v104 = (_QWORD)__p << 7;
        }
        sub_207D1C104((uint64_t)&v213, v104);
        v103 = *((_QWORD *)&v213 + 1);
        v102 = (char *)v213;
      }
      *((_QWORD *)&v213 + 1) = v103 + 1;
      *(_QWORD *)&v102[(v103 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v103);
      v105 = *((_QWORD *)&v213 + 1);
      if (*((_QWORD *)&v213 + 1) != (_QWORD)__p << 6)
        goto LABEL_281;
      if (*((_QWORD *)&v213 + 1) + 1 >= 0)
      {
        if (*((_QWORD *)&v213 + 1) > 0x3FFFFFFFFFFFFFFEuLL)
        {
          v106 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if ((_QWORD)__p << 7 <= (*((_QWORD *)&v213 + 1) & 0xFFFFFFFFFFFFFFC0) + 64)
        {
          v106 = (*((_QWORD *)&v213 + 1) & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        else
        {
          v106 = (_QWORD)__p << 7;
        }
        sub_207D1C104((uint64_t)&v213, v106);
        v105 = *((_QWORD *)&v213 + 1);
        v102 = (char *)v213;
LABEL_281:
        *((_QWORD *)&v213 + 1) = v105 + 1;
        *(_QWORD *)&v102[(v105 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v105);
        v107 = *(void **)&v175[8];
        memset(&v187, 0, sizeof(v187));
        v108 = *(_QWORD *)&v175[16] - *(_QWORD *)&v175[8];
        if (*(_QWORD *)&v175[16] == *(_QWORD *)&v175[8])
        {
          v110 = 0;
          v109 = 0;
          if (*(_QWORD *)&v175[8])
            goto LABEL_286;
        }
        else
        {
          if ((v108 & 0x8000000000000000) != 0)
            sub_207CF94B8();
          v109 = (char *)operator new(*(_QWORD *)&v175[16] - *(_QWORD *)&v175[8]);
          v110 = &v109[v108];
          v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
          v187.__r_.__value_.__r.__words[2] = (std::string::size_type)&v109[v108];
          bzero(v109, v108);
          v111 = 0;
          v112 = 0;
          v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v109[v108];
          do
          {
            v113 = (v111 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v114 = v109[v112] | ((*(_QWORD *)&v102[v113] >> (v111 & 0x38)) << 7);
            v109[v112] = v114;
            v115 = v114 | (((*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 1)) & 1) << 6);
            v109[v112] = v115;
            v116 = v115 | (32 * ((*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 2)) & 1));
            v109[v112] = v116;
            v117 = v116 | (16 * ((*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 3)) & 1));
            v109[v112] = v117;
            v118 = v117 | (8 * ((*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 4)) & 1));
            v109[v112] = v118;
            v119 = v118 | (4 * ((*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 5)) & 1));
            v109[v112] = v119;
            v120 = v119 | (2 * ((*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 6)) & 1));
            v109[v112] = v120;
            v109[v112++] = v120 | (*(_QWORD *)&v102[v113] >> (v111 & 0x38 | 7)) & 1;
            v111 += 8;
          }
          while (v108 != v112);
          if (v107)
          {
LABEL_286:
            operator delete(v107);
            v102 = (char *)v213;
            *(_QWORD *)&v175[8] = v109;
            *(_QWORD *)&v175[16] = v110;
            *(_QWORD *)&v175[24] = v110;
            if (!(_QWORD)v213)
            {
LABEL_291:
              if (v67)
                operator delete(v67);
              v121 = v185;
              *(_BYTE *)a4 = 0;
              *(_BYTE *)(a4 + 120) = v121;
              if (v121)
              {
                v60 = *(_QWORD *)v175;
                goto LABEL_187;
              }
              goto LABEL_180;
            }
LABEL_290:
            operator delete(v102);
            v67 = *(uint64_t **)v203;
            goto LABEL_291;
          }
        }
        *(_QWORD *)&v175[8] = v109;
        *(_QWORD *)&v175[16] = v110;
        *(_QWORD *)&v175[24] = v110;
        goto LABEL_290;
      }
LABEL_459:
      sub_207D159B0();
    }
    v92 = 2;
  }
  LODWORD(v190) = v92;
  sub_2081051E4((int *)&v190);
  v93 = std::string::insert(&v232, 0, "The MSB padding bit at index ", 0x1DuLL);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v187.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = std::string::append(&v187, " is not zero!", 0xDuLL);
  v97 = (void *)v95->__r_.__value_.__r.__words[0];
  v96 = v95->__r_.__value_.__l.__size_;
  LODWORD(v227) = v95->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v227 + 3) = *(_DWORD *)((char *)&v95->__r_.__value_.__r.__words[2] + 3);
  v98 = SHIBYTE(v95->__r_.__value_.__r.__words[2]);
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  if (v98 < 0)
  {
    sub_207CA40D8(&__dst, v97, v96);
  }
  else
  {
    *(_QWORD *)&__dst = v97;
    *((_QWORD *)&__dst + 1) = v96;
    *(_DWORD *)v166 = v227;
    *(_DWORD *)&v166[3] = *(_DWORD *)((char *)&v227 + 3);
    v167 = v98;
  }
  v168 = 1;
  LOBYTE(v169) = 0;
  v173 = 0;
  v174 = 1;
  sub_207CCAFD0(0x2Du, &__dst, (uint64_t)&v213);
  *(_OWORD *)a4 = v213;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v223)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v174)
      goto LABEL_242;
    goto LABEL_234;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v99 = v216;
  if (v216)
  {
    *(_OWORD *)(a4 + 16) = __p;
    *(_QWORD *)(a4 + 32) = v215;
    v215 = 0;
    __p = 0uLL;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v222)
  {
    v100 = v219;
    *(_QWORD *)(a4 + 64) = v218;
    *(_OWORD *)(a4 + 48) = v217;
    v217 = 0uLL;
    *(_QWORD *)(a4 + 72) = v100;
    *(_OWORD *)(a4 + 80) = v220;
    *(_QWORD *)(a4 + 96) = v221;
    v218 = 0;
    v220 = 0uLL;
    v221 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v99 && SHIBYTE(v215) < 0)
    operator delete((void *)__p);
  if (v174)
  {
LABEL_234:
    if (v173)
    {
      if (v172 < 0)
        operator delete(v171);
      if (v170 < 0)
        operator delete(v169);
    }
    if (v168 && v167 < 0)
      operator delete((void *)__dst);
  }
LABEL_242:
  if (v98 < 0)
  {
    operator delete(v97);
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_244:
      if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_245;
LABEL_250:
      operator delete(v232.__r_.__value_.__l.__data_);
      operator delete(v67);
      if (v185)
        goto LABEL_246;
      goto LABEL_251;
    }
  }
  else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_244;
  }
  operator delete(v187.__r_.__value_.__l.__data_);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_250;
LABEL_245:
  operator delete(v67);
  if (v185)
  {
LABEL_246:
    v101 = *(void **)&v175[8];
    if (!*(_QWORD *)&v175[8])
      return;
    *(_QWORD *)&v175[16] = *(_QWORD *)&v175[8];
LABEL_258:
    operator delete(v101);
    return;
  }
LABEL_251:
  if (!v184)
    return;
LABEL_252:
  if (!v183)
    goto LABEL_255;
  if (SHIBYTE(v182) < 0)
  {
    operator delete((void *)v181);
    if ((SHIBYTE(v179) & 0x80000000) == 0)
    {
LABEL_255:
      if (!v177)
        return;
      goto LABEL_256;
    }
  }
  else if ((SHIBYTE(v179) & 0x80000000) == 0)
  {
    goto LABEL_255;
  }
  operator delete((void *)v178);
  if (v177)
  {
LABEL_256:
    if ((SHIBYTE(v176) & 0x80000000) == 0)
      return;
    v101 = *(void **)&v175[16];
    goto LABEL_258;
  }
}

void sub_208104D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *a68;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  if (__p)
    operator delete(__p);
  if (a48)
    operator delete(a48);
  if (a65)
  {
    operator delete(a65);
    v72 = a68;
    if (!a68)
    {
LABEL_7:
      v73 = (void *)STACK[0x210];
      if (!STACK[0x210])
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else
  {
    v72 = a68;
    if (!a68)
      goto LABEL_7;
  }
  operator delete(v72);
  v73 = (void *)STACK[0x210];
  if (!STACK[0x210])
  {
LABEL_8:
    v74 = (void *)STACK[0x248];
    if (!STACK[0x248])
    {
LABEL_14:
      sub_2080FFAD8((uint64_t)&STACK[0x2E8]);
      if (STACK[0x368])
        operator delete((void *)STACK[0x368]);
      if (*(_BYTE *)(v70 - 216))
      {
        v75 = *(void **)(v70 - 240);
        if (v75)
          operator delete(v75);
      }
      if (a16)
      {
        operator delete(a16);
        if (!a17)
        {
LABEL_21:
          if (!a15)
            goto LABEL_22;
          goto LABEL_27;
        }
      }
      else if (!a17)
      {
        goto LABEL_21;
      }
      operator delete(a17);
      if (!a15)
      {
LABEL_22:
        if (!a14)
          goto LABEL_23;
        goto LABEL_28;
      }
LABEL_27:
      operator delete(a15);
      if (!a14)
      {
LABEL_23:
        sub_20810D294((_QWORD **)(v70 - 208));
        if (!*(_BYTE *)(v70 - 168))
          goto LABEL_31;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(a14);
      sub_20810D294((_QWORD **)(v70 - 208));
      if (!*(_BYTE *)(v70 - 168))
        goto LABEL_31;
LABEL_29:
      v76 = *(void **)(v70 - 192);
      if (v76)
      {
        operator delete(v76);
        operator delete(v69);
        operator delete(v68);
        _Unwind_Resume(a1);
      }
LABEL_31:
      operator delete(v69);
      operator delete(v68);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(v74);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(v73);
  v74 = (void *)STACK[0x248];
  if (!STACK[0x248])
    goto LABEL_14;
  goto LABEL_13;
}

void sub_208105108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  int v56;
  uint64_t v57;

  sub_207CCB148((uint64_t)&a18);
  if (v56 < 0)
    JUMPOUT(0x208105118);
  if (a56 < 0)
    JUMPOUT(0x208105134);
  if ((*(char *)(v57 - 169) & 0x80000000) == 0)
    JUMPOUT(0x208105190);
  JUMPOUT(0x20810516CLL);
}

void sub_208105148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if ((a56 & 0x80000000) == 0)
    JUMPOUT(0x208105154);
  operator delete(a51);
  if ((*(char *)(v56 - 169) & 0x80000000) == 0)
    JUMPOUT(0x208105190);
  JUMPOUT(0x20810516CLL);
}

void sub_208105160()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    JUMPOUT(0x20810516CLL);
  JUMPOUT(0x208105190);
}

void sub_2081051A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_207D0B008((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2081051BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2081051D0(_Unwind_Exception *a1)
{
  sub_207CCB148((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t sub_2081051E4(int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_207CAB414)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C087AA8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C087A90[v3])(v5, v2);
  return result;
}

void sub_2081052D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081052E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20810530C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_208105364(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_8;
  }
LABEL_4:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_2081053E8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if (a4)
  {
    v5 = result;
    if ((a4 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v8 = (a4 - 1) >> 6;
    result = operator new(8 * (v8 + 1));
    v5[2] = v8 + 1;
    v9 = *(_QWORD **)a2;
    v10 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD **)a3;
    v12 = *(_DWORD *)(a3 + 8);
    *v5 = result;
    v5[1] = a4;
    if (a4 >= 0x41)
      v13 = (a4 - 1) >> 6;
    else
      v13 = 0;
    result[v13] = 0;
    if (v9 != v11 || v10 != v12)
    {
      v15 = 0;
      do
      {
        v16 = 1 << v15;
        if (((*v9 >> v10) & 1) != 0)
          v17 = *result | v16;
        else
          v17 = *result & ~v16;
        *result = v17;
        v9 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        result += v15 == 63;
        if (v15 == 63)
          v15 = 0;
        else
          ++v15;
      }
      while (v9 != v11 || v10 != v12);
    }
  }
  return result;
}

void sub_2081054D8(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081054F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;

  v4 = *(unint64_t **)result;
  v5 = *(unsigned int *)(result + 8);
  v6 = *(unsigned int *)(a2 + 8) + 8 * (*(_QWORD *)a2 - *(_QWORD *)result);
  v7 = v6 - v5;
  if (*a3)
  {
    if (!(_DWORD)v5)
      goto LABEL_9;
    v8 = (64 - v5);
    if (v8 >= v7)
      v9 = v6 - v5;
    else
      v9 = (64 - v5);
    v10 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v5 - v9)) & (-1 << v5) & *v4;
    if (!v10)
    {
      if (v7 > v8)
      {
        v7 -= v9;
        ++v4;
LABEL_9:
        if (v7 >= 0x40)
        {
          do
          {
            v11 = *v4;
            if (*v4)
              goto LABEL_28;
            ++v4;
            v7 -= 64;
          }
          while (v7 > 0x3F);
        }
        if (!v7 || (v11 = *v4 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7)) == 0)
        {
LABEL_14:
          *(_QWORD *)a4 = v4;
          *(_DWORD *)(a4 + 8) = v7;
          return result;
        }
LABEL_28:
        *(_QWORD *)a4 = v4;
        *(_DWORD *)(a4 + 8) = __clz(__rbit64(v11));
        return result;
      }
      goto LABEL_29;
    }
LABEL_20:
    *(_QWORD *)a4 = v4;
    *(_DWORD *)(a4 + 8) = __clz(__rbit64(v10));
    return result;
  }
  if ((_DWORD)v5)
  {
    v12 = (64 - v5);
    if (v12 >= v7)
      v13 = v6 - v5;
    else
      v13 = (64 - v5);
    v10 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v5 - v13)) & (-1 << v5) & ~*v4;
    if (v10)
      goto LABEL_20;
    if (v7 <= v12)
    {
LABEL_29:
      *(_QWORD *)a4 = &v4[v6 >> 6];
      *(_DWORD *)(a4 + 8) = v6 & 0x3F;
      return result;
    }
    v7 -= v13;
    ++v4;
  }
  if (v7 < 0x40)
  {
LABEL_26:
    if (!v7)
      goto LABEL_14;
    v11 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v7) & ~*v4;
    if (!v11)
      goto LABEL_14;
    goto LABEL_28;
  }
  while (*v4 == -1)
  {
    ++v4;
    v7 -= 64;
    if (v7 <= 0x3F)
      goto LABEL_26;
  }
  v14 = __clz(__rbit64(~*v4));
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v14;
  return result;
}

void sub_208105680(uint64_t *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  BOOL v9;
  int v10;
  void **v11;
  int v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  uint64_t *v27;
  __int128 v28;
  void *v29;
  __int128 v30;
  _BYTE v31[15];
  _BYTE v32[15];
  _BYTE v33[15];

  v7 = a2;
  if (*((_BYTE *)a1 + 120))
    v9 = *((_BYTE *)a2 + 120) == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v16 = *a1;
    *a1 = *a2;
    *a2 = v16;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    v18 = a1[2];
    a1[2] = a2[2];
    a2[2] = v18;
    return;
  }
  if (!*((_BYTE *)a1 + 120))
  {
    if (*((_BYTE *)a2 + 120))
    {
      v19 = *a2;
      v20 = *(_OWORD *)(a2 + 1);
      a2[2] = 0;
      *a2 = 0;
      a2[1] = 0;
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *((_BYTE *)a2 + 112) = 0;
      if (*((_BYTE *)a1 + 112))
      {
        v21 = (void **)(a1 + 2);
        *((_BYTE *)a2 + 40) = 0;
        if (*((_BYTE *)a1 + 40))
        {
          v22 = *(_OWORD *)v21;
          a2[4] = a1[4];
          *((_OWORD *)a2 + 1) = v22;
          a1[3] = 0;
          a1[4] = 0;
          *v21 = 0;
          *((_BYTE *)a2 + 40) = 1;
        }
        *((_BYTE *)a2 + 48) = 0;
        *((_BYTE *)a2 + 104) = 0;
        if (*((_BYTE *)a1 + 104))
        {
          v23 = *((_OWORD *)a1 + 3);
          a2[8] = a1[8];
          *((_OWORD *)a2 + 3) = v23;
          a1[7] = 0;
          a1[8] = 0;
          a1[6] = 0;
          a2[9] = a1[9];
          v24 = *((_OWORD *)a1 + 5);
          a2[12] = a1[12];
          *((_OWORD *)a2 + 5) = v24;
          a1[11] = 0;
          a1[12] = 0;
          a1[10] = 0;
          *((_BYTE *)a2 + 104) = 1;
        }
        *((_BYTE *)a2 + 112) = 1;
        if (*((_BYTE *)a1 + 112))
        {
          v28 = v20;
          if (*((_BYTE *)a1 + 104))
          {
            if (*((char *)a1 + 103) < 0)
            {
              operator delete((void *)a1[10]);
              v20 = v28;
            }
            if (*((char *)a1 + 71) < 0)
            {
              operator delete((void *)a1[6]);
              v20 = v28;
            }
          }
          if (*((_BYTE *)a1 + 40) && *((char *)a1 + 39) < 0)
          {
            operator delete(*v21);
            v20 = v28;
          }
        }
      }
      *a1 = v19;
      *(_OWORD *)(a1 + 1) = v20;
      goto LABEL_43;
    }
LABEL_29:
    sub_207D09DA8((__int128 *)a1, (__int128 *)a2);
    return;
  }
  if (*((_BYTE *)a2 + 120))
    goto LABEL_29;
  v30 = *(_OWORD *)a2;
  v10 = *((unsigned __int8 *)a2 + 112);
  if (!*((_BYTE *)a2 + 112))
  {
    v14 = 0;
    v13 = 0;
    v15 = 0;
    goto LABEL_35;
  }
  v11 = (void **)(a2 + 2);
  v12 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v13 = (void *)a2[2];
    *(_QWORD *)v33 = a2[3];
    *(_QWORD *)&v33[7] = *(uint64_t *)((char *)a2 + 31);
    v2 = *((_BYTE *)a2 + 39);
    a2[3] = 0;
    a2[4] = 0;
    *v11 = 0;
    v14 = 1;
    if (*((_BYTE *)a2 + 104))
      goto LABEL_11;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (*((_BYTE *)a2 + 104))
    {
LABEL_11:
      v3 = a2[6];
      *(_QWORD *)v32 = a2[7];
      *(_QWORD *)&v32[7] = *(uint64_t *)((char *)a2 + 63);
      v6 = *((_BYTE *)a2 + 71);
      a2[7] = 0;
      a2[8] = 0;
      a2[6] = 0;
      v5 = a2[9];
      a2 = (uint64_t *)a2[10];
      *(_QWORD *)v31 = v7[11];
      *(_QWORD *)&v31[7] = *(uint64_t *)((char *)v7 + 95);
      v4 = *((_BYTE *)v7 + 103);
      v7[11] = 0;
      v7[12] = 0;
      v15 = 1;
      v7[10] = 0;
      if (!v12)
        goto LABEL_35;
      goto LABEL_33;
    }
  }
  v15 = 0;
  v3 = 0;
  if (!v12)
    goto LABEL_35;
LABEL_33:
  if (*((char *)v7 + 39) < 0)
  {
    v27 = a2;
    v29 = v13;
    operator delete(*v11);
    a2 = v27;
    v13 = v29;
  }
LABEL_35:
  *v7 = *a1;
  v7[1] = a1[1];
  v7[2] = a1[2];
  a1[2] = 0;
  *(_OWORD *)a1 = v30;
  *((_BYTE *)a1 + 112) = 0;
  if (!v10)
  {
LABEL_43:
    v26 = *((_BYTE *)a1 + 120);
    *((_BYTE *)a1 + 120) = *((_BYTE *)v7 + 120);
    *((_BYTE *)v7 + 120) = v26;
    return;
  }
  *((_BYTE *)a1 + 40) = 0;
  if (v14)
  {
    a1[2] = (uint64_t)v13;
    a1[3] = *(_QWORD *)v33;
    *(uint64_t *)((char *)a1 + 31) = *(_QWORD *)&v33[7];
    *((_BYTE *)a1 + 39) = v2;
    *((_BYTE *)a1 + 40) = 1;
    v13 = 0;
    v2 = 0;
  }
  *((_BYTE *)a1 + 48) = 0;
  *((_BYTE *)a1 + 104) = 0;
  if (v15)
  {
    a1[6] = v3;
    a1[7] = *(_QWORD *)v32;
    *(uint64_t *)((char *)a1 + 63) = *(_QWORD *)&v32[7];
    *((_BYTE *)a1 + 71) = v6;
    a1[9] = v5;
    a1[10] = (uint64_t)a2;
    a1[11] = *(_QWORD *)v31;
    *(uint64_t *)((char *)a1 + 95) = *(_QWORD *)&v31[7];
    *((_BYTE *)a1 + 103) = v4;
    *((_BYTE *)a1 + 104) = 1;
  }
  *((_BYTE *)a1 + 112) = 1;
  v25 = *((_BYTE *)a1 + 120);
  *((_BYTE *)a1 + 120) = *((_BYTE *)v7 + 120);
  *((_BYTE *)v7 + 120) = v25;
  if (v14)
  {
    if (v2 < 0)
      operator delete(v13);
  }
}

void sub_208105A44(int a1@<W1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  const char *v5;
  char *v6;
  __int128 v7;
  const char *v8;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "No error");
      return;
    case 1:
      v3 = operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      v4 = xmmword_20822C980;
      v5 = "Error in metadata parity";
      goto LABEL_9;
    case 2:
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      v7 = xmmword_20822C950;
      v8 = "Metadata low confidence";
      goto LABEL_11;
    case 3:
      v3 = operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      v4 = xmmword_20822C980;
      v5 = "Error in gap bits parity";
      goto LABEL_9;
    case 4:
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      v7 = xmmword_20822C950;
      v8 = "Gap bits low confidence";
      goto LABEL_11;
    case 5:
      v3 = operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      v4 = xmmword_20822C980;
      v5 = "Error in arc bits parity";
LABEL_9:
      *(_OWORD *)(a2 + 8) = v4;
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v3[2] = *((_QWORD *)v5 + 2);
      *((_BYTE *)v3 + 24) = 0;
      break;
    case 6:
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      v7 = xmmword_20822C950;
      v8 = "Arc bits low confidence";
LABEL_11:
      *(_OWORD *)(a2 + 8) = v7;
      *(_OWORD *)v6 = *(_OWORD *)v8;
      *(_QWORD *)(v6 + 15) = *(_QWORD *)(v8 + 15);
      v6[23] = 0;
      break;
    case 7:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "Not enough arcs");
      break;
    case 8:
      strcpy((char *)a2, "Bad redundant arc bits");
      *(_BYTE *)(a2 + 23) = 22;
      break;
    case 9:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "Bad magic bits");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "Unknown error");
      break;
  }
}

void sub_208105C60(std::error_category *a1)
{
  void *v1;

  std::error_category::~error_category(a1);
  operator delete(v1);
}

const char *sub_208105C74()
{
  return "App Clip Code Codec Error Category";
}

double sub_208105C80@<D0>(unsigned __int8 **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (**a1 <= 0xFu)
  {
    if (**a1)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = operator new(8uLL);
      *a2 = v9;
      *(_QWORD *)&result = 6;
      *(_OWORD *)(a2 + 1) = xmmword_20826C260;
      *v9 = 13;
      return result;
    }
    goto LABEL_14;
  }
  if (**a1 != 110 || a1[2] != (unsigned __int8 *)8 || *a1[1])
  {
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = operator new(8uLL);
  v4 = 0;
  v5 = 0;
  *a2 = v3;
  *(_QWORD *)&result = 45;
  *(_OWORD *)(a2 + 1) = xmmword_20826C250;
  *v3 = 0;
  do
  {
    v8 = 1 << v4;
    if (byte_20826CCF0[v5])
      v7 = *v3 | v8;
    else
      v7 = *v3 & ~v8;
    *v3 = v7;
    ++v5;
    v3 += v4 == 63;
    if (v4 == 63)
      v4 = 0;
    else
      ++v4;
  }
  while (v5 != 45);
  return result;
}

void sub_208105D90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t *v48;
  int64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t *v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  unint64_t *v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t *v82;
  uint64_t v83;
  __int128 v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t *v89;
  char *v90;
  char *v91;
  uint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  char *v102;
  _QWORD *v103;
  unint64_t v104;
  _BYTE *v105;
  _QWORD *v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  int64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  _BYTE *v129;
  _BYTE *v130;
  int64_t v131;
  char *v132;
  char *v133;
  void *v134;
  void *v135;
  unint64_t *v136;
  unint64_t v138;
  uint64_t *v139;
  size_t __sz;
  size_t __sza;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t *v152;
  char *v153;
  unint64_t *v154;
  unint64_t *__p;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v152 = 0;
  v6 = 0;
  v7 = 0;
  v8 = &qword_20826CD20;
  do
  {
    v9 = *v8;
    v10 = v8[1];
    v11 = v10 - *v8;
    v139 = v8;
    v142 = *v8;
    v143 = v5;
    v12 = *v8;
    if (v10 == *v8)
    {
LABEL_4:
      v11 = v12 - v9;
      v13 = v10 - 1;
      v10 = v12;
      if (v12 == v13)
      {
        v14 = v3;
        v149 = v6;
        if (v3 < v152)
          goto LABEL_48;
        goto LABEL_6;
      }
    }
    else
    {
      do
      {
        if (((*(_QWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          goto LABEL_4;
        ++v12;
      }
      while (v10 != v12);
      v13 = v10 - 1;
    }
    __sz = v11;
    v14 = v3;
    v138 = v10;
    v19 = v3;
    v145 = v13;
    do
    {
      if (v14 < v152)
      {
        *v14++ = v6;
        goto LABEL_20;
      }
      v20 = v14 - v19;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        sub_207CA420C();
      if (((char *)v152 - (char *)v19) >> 2 > v21)
        v21 = ((char *)v152 - (char *)v19) >> 2;
      if ((unint64_t)((char *)v152 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v150 = v6;
      if (v22)
      {
        if (v22 >> 61)
          sub_207CA3AB8();
        v23 = v22;
        v24 = operator new(8 * v22);
        v22 = v23;
        v25 = (unint64_t *)&v24[8 * v20];
        *v25 = v150;
        v26 = (uint64_t)(v25 + 1);
        v27 = (char *)v14 - (char *)v19;
        if (v14 == v19)
        {
LABEL_38:
          v152 = (unint64_t *)&v24[8 * v22];
          if (!v19)
            goto LABEL_36;
LABEL_35:
          operator delete(v19);
          goto LABEL_36;
        }
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t *)(8 * v20);
        *(_QWORD *)(8 * v20) = v150;
        v26 = 8 * v20 + 8;
        v27 = (char *)v14 - (char *)v19;
        if (v14 == v19)
          goto LABEL_38;
      }
      v28 = v27 - 8;
      if (v28 < 0x168
        || (v31 = ((char *)(v14 - 1) - (char *)v19) & 0xFFFFFFFFFFFFFFF8,
            &v24[(char *)v14 - (char *)v19 - 8 - v31] > &v24[(char *)v14 - (char *)v19 - 8])
        || (unint64_t *)((char *)v14 - v31 - 8) > v14 - 1
        || (unint64_t)((char *)v19 - v24) < 0x20)
      {
        v29 = v14;
        do
        {
LABEL_33:
          v30 = *--v29;
          *--v25 = v30;
        }
        while (v29 != v19);
        goto LABEL_34;
      }
      v32 = (v28 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v14[v33 / 0xFFFFFFFFFFFFFFF8];
      v25 = (unint64_t *)((char *)v25 - v33);
      v34 = &v24[8 * v20 - 16];
      v35 = v14 - 2;
      v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *(_OWORD *)v35;
        *(v34 - 1) = *((_OWORD *)v35 - 1);
        *v34 = v37;
        v34 -= 2;
        v35 -= 4;
        v36 -= 4;
      }
      while (v36);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_33;
LABEL_34:
      v152 = (unint64_t *)&v24[8 * v22];
      if (v19)
        goto LABEL_35;
LABEL_36:
      v19 = v25;
      v14 = (unint64_t *)v26;
      v6 = v150;
      v13 = v145;
LABEL_20:
      ++v10;
      v6 += (~*(_QWORD *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1;
    }
    while (v10 != v13);
    v13 = v138;
    v3 = v19;
    v11 = __sz;
    v9 = v142;
    v149 = v6;
    if (v14 < v152)
    {
LABEL_48:
      *v14 = v6;
      __sza = (size_t)(v14 + 1);
      v5 = v143;
      if (v13 == v9)
        goto LABEL_58;
LABEL_88:
      v60 = 0;
      while (2)
      {
        while (v4 < v5)
        {
          *v4++ = v6;
          v2 = (uint64_t)v4;
          if (++v60 == v11)
            goto LABEL_58;
        }
        v61 = v4 - v7;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61)
          sub_207CA420C();
        if (((char *)v5 - (char *)v7) >> 2 > v62)
          v62 = ((char *)v5 - (char *)v7) >> 2;
        if ((unint64_t)((char *)v5 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63)
        {
          if (v63 >> 61)
            sub_207CA3AB8();
          v64 = operator new(8 * v63);
          v65 = (unint64_t *)&v64[8 * v61];
          *v65 = v6;
          v66 = (uint64_t)(v65 + 1);
          v67 = (char *)v4 - (char *)v7;
          if (v4 != v7)
          {
LABEL_100:
            v68 = v67 - 8;
            if (v68 < 0x168
              || (v71 = ((char *)(v4 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8,
                  &v64[(char *)v4 - (char *)v7 - 8 - v71] > &v64[(char *)v4 - (char *)v7 - 8])
              || (unint64_t *)((char *)v4 - v71 - 8) > v4 - 1
              || (unint64_t)((char *)v7 - v64) < 0x20)
            {
              v69 = v4;
              v2 = v66;
            }
            else
            {
              v72 = (v68 >> 3) + 1;
              v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              v69 = &v4[v73 / 0xFFFFFFFFFFFFFFF8];
              v65 = (unint64_t *)((char *)v65 - v73);
              v74 = &v64[8 * v61 - 16];
              v75 = v4 - 2;
              v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              v2 = v66;
              do
              {
                v77 = *(_OWORD *)v75;
                *(v74 - 1) = *((_OWORD *)v75 - 1);
                *v74 = v77;
                v74 -= 2;
                v75 -= 4;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_103:
                v5 = (unint64_t *)&v64[8 * v63];
                if (v7)
                  goto LABEL_104;
                goto LABEL_105;
              }
            }
            do
            {
              v70 = *--v69;
              *--v65 = v70;
            }
            while (v69 != v7);
            goto LABEL_103;
          }
        }
        else
        {
          v64 = 0;
          v65 = (unint64_t *)(8 * v61);
          *(_QWORD *)(8 * v61) = v6;
          v66 = 8 * v61 + 8;
          v67 = (char *)v4 - (char *)v7;
          if (v4 != v7)
            goto LABEL_100;
        }
        v2 = v66;
        v5 = (unint64_t *)&v64[8 * v63];
        if (v7)
LABEL_104:
          operator delete(v7);
LABEL_105:
        v7 = v65;
        ++v60;
        v4 = (unint64_t *)v2;
        if (v60 == v11)
          goto LABEL_58;
        continue;
      }
    }
LABEL_6:
    v15 = v14 - v3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      sub_207CA420C();
    if (((char *)v152 - (char *)v3) >> 2 > v16)
      v16 = ((char *)v152 - (char *)v3) >> 2;
    if ((unint64_t)((char *)v152 - (char *)v3) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v144 = v13;
    if (v17)
    {
      if (v17 >> 61)
        sub_207CA3AB8();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v38 = (unint64_t *)&v18[8 * v15];
    *v38 = v149;
    __sza = (size_t)(v38 + 1);
    if (v14 != v3)
    {
      v39 = (char *)v14 - (char *)v3 - 8;
      if (v39 < 0x168
        || (v78 = ((char *)(v14 - 1) - (char *)v3) & 0xFFFFFFFFFFFFFFF8,
            &v18[(char *)v14 - (char *)v3 - 8 - v78] > &v18[(char *)v14 - (char *)v3 - 8])
        || (unint64_t *)((char *)v14 - v78 - 8) > v14 - 1
        || (unint64_t)((char *)v3 - v18) < 0x20)
      {
        v40 = v14;
        v6 = v149;
        v5 = v143;
      }
      else
      {
        v79 = (v39 >> 3) + 1;
        v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v14[v80 / 0xFFFFFFFFFFFFFFF8];
        v38 = (unint64_t *)((char *)v38 - v80);
        v81 = &v18[8 * v15 - 16];
        v82 = v14 - 2;
        v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 4;
          v83 -= 4;
        }
        while (v83);
        v6 = v149;
        v5 = v143;
        if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_55:
          v152 = (unint64_t *)&v18[8 * v17];
          if (v3)
            goto LABEL_56;
          goto LABEL_57;
        }
      }
      do
      {
        v41 = *--v40;
        *--v38 = v41;
      }
      while (v40 != v3);
      goto LABEL_55;
    }
    v6 = v149;
    v5 = v143;
    v152 = (unint64_t *)&v18[8 * v17];
    if (v3)
LABEL_56:
      operator delete(v3);
LABEL_57:
    v3 = v38;
    if (v144 != v142)
      goto LABEL_88;
LABEL_58:
    if (v3 != (unint64_t *)__sza)
    {
      v42 = v3;
      while (1)
      {
        while (v4 < v5)
        {
          v43 = *v42++;
          *v4++ = v43;
          v2 = (uint64_t)v4;
          if (v42 == (unint64_t *)__sza)
            goto LABEL_2;
        }
        v44 = v4 - v7;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          sub_207CA420C();
        if (((char *)v5 - (char *)v7) >> 2 > v45)
          v45 = ((char *)v5 - (char *)v7) >> 2;
        v46 = (unint64_t)((char *)v5 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v45;
        if (v46)
        {
          if (v46 >> 61)
            sub_207CA3AB8();
          v47 = operator new(8 * v46);
          v48 = (unint64_t *)&v47[8 * v44];
          *v48 = *v42;
          v2 = (uint64_t)(v48 + 1);
          v49 = (char *)v4 - (char *)v7;
          if (v4 == v7)
          {
LABEL_79:
            v6 = v149;
            v5 = (unint64_t *)&v47[8 * v46];
            if (!v7)
              goto LABEL_76;
LABEL_75:
            operator delete(v7);
            goto LABEL_76;
          }
        }
        else
        {
          v47 = 0;
          v48 = (unint64_t *)(8 * v44);
          *(_QWORD *)(8 * v44) = *v42;
          v2 = 8 * v44 + 8;
          v49 = (char *)v4 - (char *)v7;
          if (v4 == v7)
            goto LABEL_79;
        }
        v50 = v49 - 8;
        if (v50 < 0x168)
          break;
        v53 = ((char *)(v4 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8;
        if (&v47[(char *)v4 - (char *)v7 - 8 - v53] > &v47[(char *)v4 - (char *)v7 - 8]
          || (unint64_t *)((char *)v4 - v53 - 8) > v4 - 1
          || (unint64_t)((char *)v7 - v47) < 0x20)
        {
          break;
        }
        v54 = (v50 >> 3) + 1;
        v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v51 = &v4[v55 / 0xFFFFFFFFFFFFFFF8];
        v48 = (unint64_t *)((char *)v48 - v55);
        v56 = &v47[8 * v44 - 16];
        v57 = v4 - 2;
        v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 4;
          v58 -= 4;
        }
        while (v58);
        v6 = v149;
        if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_73;
LABEL_74:
        v5 = (unint64_t *)&v47[8 * v46];
        if (v7)
          goto LABEL_75;
LABEL_76:
        v7 = v48;
        ++v42;
        v4 = (unint64_t *)v2;
        if (v42 == (unint64_t *)__sza)
          goto LABEL_2;
      }
      v51 = v4;
      v6 = v149;
      do
      {
LABEL_73:
        v52 = *--v51;
        *--v48 = v52;
      }
      while (v51 != v7);
      goto LABEL_74;
    }
LABEL_2:
    ++v6;
    v8 = v139 + 2;
  }
  while (v139 + 2 != (uint64_t *)&unk_20826CD70);
  v154 = v3;
  __p = v7;
  if (!v6)
  {
    v87 = 0;
    v86 = 0;
    v85 = a2;
    if (v7 != (unint64_t *)v2)
      goto LABEL_129;
LABEL_155:
    v119 = v86;
    v85[1] = 0;
    *v85 = 0;
    v85[2] = 0;
    goto LABEL_156;
  }
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v85 = a2;
  v86 = (char *)operator new(24 * v6);
  bzero(v86, 24 * ((24 * v6 - 24) / 0x18) + 24);
  v87 = &v86[24 * ((24 * v6 - 24) / 0x18) + 24];
  if (v7 == (unint64_t *)v2)
    goto LABEL_155;
LABEL_129:
  v146 = v87;
  v148 = v86;
  v136 = v3;
  v88 = 0;
  v89 = v7;
  v151 = (unint64_t *)v2;
  do
  {
    while (1)
    {
      v90 = &v86[24 * *v89];
      v92 = (uint64_t *)(v90 + 8);
      v91 = (char *)*((_QWORD *)v90 + 1);
      v94 = v90 + 16;
      v93 = *((_QWORD *)v90 + 2);
      if ((unint64_t)v91 >= v93)
        break;
      *(_QWORD *)v91 = v88;
      v85 = a2;
      *v92 = (uint64_t)(v91 + 8);
      ++v89;
      ++v88;
      if (v89 == (unint64_t *)v2)
        goto LABEL_152;
    }
    v95 = *(char **)v90;
    v96 = (uint64_t)&v91[-*(_QWORD *)v90];
    v97 = v96 >> 3;
    v98 = (v96 >> 3) + 1;
    if (v98 >> 61)
      sub_207CA420C();
    v99 = v93 - (_QWORD)v95;
    if (v99 >> 2 > v98)
      v98 = v99 >> 2;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (!v100)
    {
      v105 = 0;
      v106 = (_QWORD *)(8 * v97);
      *(_QWORD *)(8 * v97) = v88;
      v107 = 8 * v97 + 8;
      v108 = v91 - v95;
      if (v91 == v95)
        goto LABEL_149;
LABEL_143:
      v109 = v108 - 8;
      if (v109 < 0x58)
        goto LABEL_191;
      if ((unint64_t)(v91 - v105 - v96) < 0x20)
        goto LABEL_191;
      v110 = (v109 >> 3) + 1;
      v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
      v112 = &v91[-v111];
      v106 = (_QWORD *)((char *)v106 - v111);
      v113 = &v105[8 * v97 - 16];
      v114 = v91 - 16;
      v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v116 = *(_OWORD *)v114;
        *(v113 - 1) = *((_OWORD *)v114 - 1);
        *v113 = v116;
        v113 -= 2;
        v114 -= 32;
        v115 -= 4;
      }
      while (v115);
      v91 = v112;
      if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_191:
        do
        {
          v117 = *((_QWORD *)v91 - 1);
          v91 -= 8;
          *--v106 = v117;
        }
        while (v91 != v95);
      }
      goto LABEL_149;
    }
    v153 = &v91[-*(_QWORD *)v90];
    if (v100 >> 61)
      sub_207CA3AB8();
    v101 = (uint64_t *)(v90 + 8);
    v102 = v90;
    v103 = v90 + 16;
    v104 = v100;
    v105 = operator new(8 * v100);
    v94 = v103;
    v100 = v104;
    v90 = v102;
    v92 = v101;
    v96 = (uint64_t)v153;
    v106 = &v105[8 * v97];
    *v106 = v88;
    v107 = (uint64_t)(v106 + 1);
    v108 = v91 - v95;
    if (v91 != v95)
      goto LABEL_143;
LABEL_149:
    *(_QWORD *)v90 = v106;
    *v92 = v107;
    *v94 = &v105[8 * v100];
    if (v95)
      operator delete(v95);
    v85 = a2;
    v86 = v148;
    v2 = (uint64_t)v151;
    *v92 = v107;
    ++v89;
    ++v88;
  }
  while (v89 != v151);
LABEL_152:
  v85[1] = 0;
  *v85 = 0;
  v85[2] = 0;
  if (v2 - (uint64_t)v7 < 0)
    sub_207CA420C();
  v118 = (char *)operator new(v2 - (_QWORD)v7);
  v3 = v136;
  v119 = v86;
  *v85 = v118;
  v85[1] = v118;
  v120 = &v118[8 * ((v2 - (uint64_t)v7) >> 3)];
  v85[2] = v120;
  memcpy(v118, v7, v2 - (_QWORD)v7);
  v85[1] = v120;
  v87 = v146;
LABEL_156:
  v85[3] = 0;
  v85[5] = 0;
  v85[4] = 0;
  v121 = v87 - v119;
  if (v87 == v119)
  {
    if (v87)
      goto LABEL_169;
  }
  else
  {
    v122 = 0xAAAAAAAAAAAAAAABLL * (v121 >> 3);
    if (v122 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA420C();
    v123 = (char *)operator new(v121);
    v124 = 0;
    v85[3] = v123;
    v85[4] = v123;
    v85[5] = &v123[24 * v122];
    do
    {
      v126 = v87;
      v127 = &v123[v124];
      v128 = &v119[v124];
      *(_QWORD *)v127 = 0;
      *((_QWORD *)v127 + 1) = 0;
      *((_QWORD *)v127 + 2) = 0;
      v130 = *(_BYTE **)&v119[v124];
      v129 = *(_BYTE **)&v119[v124 + 8];
      v131 = v129 - v130;
      if (v129 != v130)
      {
        if (v131 < 0)
          sub_207CA420C();
        v132 = (char *)operator new(v129 - v130);
        *(_QWORD *)v127 = v132;
        *((_QWORD *)v127 + 1) = v132;
        v125 = &v132[8 * (v131 >> 3)];
        *((_QWORD *)v127 + 2) = v125;
        memcpy(v132, v130, v131);
        *((_QWORD *)v127 + 1) = v125;
        v85 = a2;
      }
      v124 += 24;
      v87 = v126;
    }
    while (v128 + 24 != v126);
    v85[4] = &v123[v124];
    if (v119)
    {
      v133 = v126;
      do
      {
        v135 = (void *)*((_QWORD *)v133 - 3);
        v133 -= 24;
        v134 = v135;
        if (v135)
        {
          *((_QWORD *)v87 - 2) = v134;
          operator delete(v134);
        }
        v87 = v133;
      }
      while (v133 != v119);
LABEL_169:
      operator delete(v119);
      v3 = v154;
    }
  }
  if (v3)
    operator delete(v3);
  if (__p)
    operator delete(__p);
}

void sub_208106A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  void **v29;
  _QWORD *v30;
  void *v32;
  void *v33;

  v32 = *v29;
  if (*v29)
  {
    *v30 = v32;
    operator delete(v32);
  }
  sub_207D14AB4(&a21);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
    v33 = a27;
    if (!a27)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v33 = a27;
    if (!a27)
      goto LABEL_5;
  }
  a28 = (uint64_t)v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_208106C04(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  void **v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t (***v34)();
  uint64_t (****v35)();
  uint64_t (**v36)();
  uint64_t (***v37)();
  uint64_t v38;
  uint64_t (****v39)();
  uint64_t (***v40)();
  uint64_t v41;
  _QWORD *v42;
  uint64_t (****v43)();
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _BYTE *v66;
  uint64_t v67;
  int64_t v68;
  _QWORD *v70;
  uint64_t v72;
  void *v73;
  void **v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t (***v120)();
  uint64_t v121;
  void **v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t (***v126)();
  uint64_t v127;
  uint64_t (***v128)();
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t i;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  char *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE *v141;
  int64_t v142;
  char *v143;
  char *v144;
  _BYTE *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  char *v163;
  char *v164;
  int v165;
  char *j;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  int v183;
  _QWORD *v184;
  char *v185;
  int v186;
  _QWORD *k;
  int v188;
  char v189;
  void *v190;
  uint64_t *v191;
  int v192;
  uint64_t v193;
  int v194;
  unint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  uint64_t (***v199)();
  uint64_t (****v200)();
  uint64_t (***v201)();
  char v202;
  uint64_t v203;
  uint64_t (***v204)();
  _QWORD *v205;
  uint64_t (**v206)();
  uint64_t (***v207)();
  uint64_t v208;
  uint64_t (****v209)();
  uint64_t v210;
  void **v211;
  void **v212;
  uint64_t (***v213)();
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (***v217)();
  uint64_t v218;
  uint64_t v219;
  void **v220;
  uint64_t (***v221)();
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  int64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  int64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  unint64_t v250;
  _QWORD *v251;
  int v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  BOOL v258;
  int v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  int v266;
  size_t v267;
  _QWORD *v268;
  char *v269;
  int v270;
  uint64_t v271;
  int64_t v272;
  char *v273;
  char *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  _BOOL4 v280;
  unint64_t v281;
  unint64_t v282;
  void *v283;
  _BOOL8 v284;
  unint64_t v285;
  uint64_t v287;
  uint64_t v288;
  uint64_t *__src;
  unint64_t v291;
  uint64_t v293;
  _QWORD *v294;
  void *v295[2];
  __int128 v296;
  unint64_t v297;
  void *v298;
  char *v299;
  char *v300;
  __int16 v301;
  char v302;
  _BYTE v303[7];
  void *__p[2];
  void *v305[2];
  _BYTE v306[24];
  _QWORD v307[3];
  uint64_t (***v308)();
  uint64_t v309;
  void *v310[2];
  __int128 v311;
  _OWORD v312[3];
  _OWORD v313[3];
  void *memptr[4];
  __int128 v315;
  _OWORD v316[2];
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _QWORD v321[3];
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD v325[3];
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  _BYTE v329[24];
  _BYTE *v330;
  uint64_t v331;
  uint64_t v332;
  _BYTE v333[24];
  _BYTE *v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD v337[3];
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD v341[3];
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  _BYTE v345[24];
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  _BYTE v349[24];
  _BYTE *v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE v353[24];
  _BYTE *v354;
  uint64_t v355;
  uint64_t v356;
  _BYTE v357[24];
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  _BYTE v361[24];
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  _BYTE v365[17];
  _BYTE *v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD v369[3];
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD v373[3];
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD v377[3];
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD v381[3];
  _QWORD *v382;
  uint64_t v383;
  char *v384;
  _QWORD v385[3];
  _QWORD *v386;
  __int128 v387;
  _QWORD v388[3];
  uint64_t (***v389)();
  uint64_t v390;
  uint64_t v391;
  uint64_t (**v392)();
  void **v393;
  uint64_t (***v394)();
  uint64_t v395;
  char *v396;
  uint64_t (**v397)();
  void **v398;
  uint64_t (***v399)();
  uint64_t v400;
  uint64_t v401;

  v401 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (v5 == 8)
    goto LABEL_4;
  if (v5 == 110)
  {
    v293 = 0;
    v6 = 0;
    goto LABEL_11;
  }
  if (v5 == 16)
  {
LABEL_4:
    v293 = 6;
    if (v5 == 8)
      goto LABEL_9;
  }
  else
  {
    v293 = 8;
  }
  if (v5 == 16)
  {
LABEL_9:
    v6 = 9;
    goto LABEL_11;
  }
  v6 = 5;
LABEL_11:
  v7 = v6 | (2 * (v5 != 110));
  if (v7)
    v8 = v293 == 0;
  else
    v8 = 1;
  v287 = v6 | (2 * (v5 != 110));
  if (v8)
    v9 = 0;
  else
    v9 = v293 | (v7 << 32);
  v10 = HIDWORD(v9);
  v11 = HIDWORD(v9) == 0;
  if (HIDWORD(v9))
    v12 = v9 << 32;
  else
    v12 = 0;
  v291 = v9 & 0xF;
  v283 = (void *)v9;
  v284 = v291 != 0;
  if ((v9 & 0xF) == 0)
    v11 = 1;
  v280 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = v9;
  v285 = v12;
  v14 = HIDWORD(v13) * (unint64_t)(v12 >> 29);
  v15 = 7;
  if (((v12 >> 29) & ((v12 >> 29) - 1)) == 0)
    v15 = (v12 >> 29) - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  v279 = HIDWORD(v13);
  v281 = v19;
  v282 = v14 & 0x7FFFFFFF8;
  if ((v14 & 0x7FFFFFFF8) != 0)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, v14 & 0x7FFFFFFF8, 0x1F88E90uLL);
    if (v20)
      sub_2081FBF78(v20, v281, v282);
    __src = (uint64_t *)memptr[0];
    v5 = *a3;
  }
  else
  {
    __src = 0;
  }
  v298 = 0;
  v299 = 0;
  v300 = 0;
  if (v5 <= 15)
  {
    if (!v5)
    {
LABEL_479:
      v191 = __src;
      if (HIDWORD(v285) * (_DWORD)v10)
      {
        v192 = 0;
        v193 = 1;
        do
        {
          *v191 = v193;
          v194 = v192 + 1;
          if (v192 + 1 == (_DWORD)v283)
            v192 = 0;
          else
            ++v192;
          if (v194 == (_DWORD)v283)
            v195 = HIDWORD(v285) + v284 - v291;
          else
            v195 = v291 != 0;
          v191 += v195;
          ++v193;
        }
        while (v191 != &__src[(HIDWORD(v285) * v10)]);
      }
      v196 = (char *)operator new(8uLL);
      *(_QWORD *)v196 = 0;
      v299 = v196 + 8;
      v300 = v196 + 8;
      v298 = v196;
      v197 = (char *)(v287 * (unint64_t)v293 + 1);
      v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
      for (memptr[0] = &v298; (char *)v198 != v197; ++v197)
      {
        v310[0] = v197;
        sub_207CD6B94((uint64_t *)memptr, v310);
      }
      goto LABEL_605;
    }
    if (v5 != 8)
    {
LABEL_605:
      v250 = v285 | v284;
      memptr[0] = v283;
      memptr[1] = (void *)(v285 | v284);
      LOBYTE(memptr[2]) = 0;
      *(_DWORD *)((char *)&memptr[2] + 1) = *(_DWORD *)v303;
      HIDWORD(memptr[2]) = *(_DWORD *)&v303[3];
      LOBYTE(memptr[3]) = 0;
      *(_WORD *)((char *)&memptr[3] + 1) = v301;
      BYTE3(memptr[3]) = v302;
      v251 = (_QWORD *)v282;
      v315 = v282;
      *(_QWORD *)&v316[0] = v281;
      if (v282)
      {
        v310[0] = 0;
        v252 = malloc_type_posix_memalign(v310, v281, v282, 0x1F88E90uLL);
        if (v252)
          sub_2081FBF78(v252, v281, v282);
        v251 = v310[0];
        *((void **)&v315 + 1) = v310[0];
      }
      *((_QWORD *)&v316[0] + 1) = v13;
      *(_QWORD *)&v316[1] = 8 * v250;
      v253 = v280;
      if (!(_DWORD)v13)
        v253 = 1;
      if (v253)
        v254 = 0;
      else
        v254 = v13;
      v255 = HIDWORD(v254);
      v256 = (8 * v250) >> 35;
      v257 = HIDWORD(v254) * ((v250 >> 29) >> 3);
      if ((_DWORD)v257 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_645;
      }
      if (!(_DWORD)v254 || !HIDWORD(v254))
        goto LABEL_653;
      v258 = !(_DWORD)v279 || v13 == 0;
      v259 = v258 ? 0 : v279;
      if (v259 * (_DWORD)v256 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_645;
      }
      if (v291)
      {
        if ((_DWORD)v256 == (_DWORD)v254)
        {
          if ((_DWORD)v257 && !__src)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_645;
            }
LABEL_647:
            memmove(v251, __src, 8 * v257);
            v317 = 0uLL;
            *((_QWORD *)&v316[1] + 1) = 0;
            v249 = v298;
            v272 = v299 - (_BYTE *)v298;
            if (v299 == v298)
            {
LABEL_648:
              v273 = 0;
              v274 = 0;
              goto LABEL_656;
            }
LABEL_654:
            if (v272 < 0)
              sub_207CA420C();
            v274 = (char *)operator new(v272);
            v273 = &v274[8 * (v272 >> 3)];
            memcpy(v274, v249, v272);
LABEL_656:
            v275 = v315;
            *(_OWORD *)a4 = *(_OWORD *)memptr;
            *(_OWORD *)(a4 + 12) = *(_OWORD *)((char *)&memptr[1] + 4);
            *(_OWORD *)(a4 + 32) = v275;
            *(_QWORD *)(a4 + 48) = *(_QWORD *)&v316[0];
            *(_OWORD *)(a4 + 56) = *(_OWORD *)((char *)v316 + 8);
            *(_QWORD *)(a4 + 72) = v274;
            *(_QWORD *)(a4 + 80) = v273;
            *(_QWORD *)(a4 + 88) = v273;
            *(_BYTE *)(a4 + 96) = 1;
            if (!v249)
              goto LABEL_658;
            goto LABEL_657;
          }
          if ((_DWORD)v257)
            goto LABEL_647;
LABEL_653:
          v317 = 0uLL;
          *((_QWORD *)&v316[1] + 1) = 0;
          v249 = v298;
          v272 = v299 - (_BYTE *)v298;
          if (v299 == v298)
            goto LABEL_648;
          goto LABEL_654;
        }
        if (!(_DWORD)v254)
          goto LABEL_653;
        v267 = 8 * v254;
        v268 = v251;
        v269 = (char *)__src;
        v270 = v255 - 1;
        if ((_DWORD)v255 != 1)
        {
          v271 = 0;
          do
          {
            if (!&__src[v271]
              && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_645;
            }
            memmove(&v251[v271], &__src[v271], v267);
            v271 += v256;
            --v270;
          }
          while (v270);
          v269 = (char *)&__src[v271];
          v268 = &v251[v271];
        }
        if (v269
          || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v268, v269, v267);
          goto LABEL_653;
        }
LABEL_645:
        abort();
      }
      if (!(_DWORD)v254)
        goto LABEL_653;
      v260 = v254 - 1;
      v261 = HIDWORD(v254) - 1;
      if (HIDWORD(v254) == 1)
      {
        v264 = __src;
      }
      else
      {
        if ((_DWORD)v254 == 1)
        {
          v277 = 0;
          do
          {
            v251[v277] = __src[v277];
            v277 += v256;
            --v261;
          }
          while (v261);
          v264 = &__src[v277];
          v251 = (_QWORD *)((char *)v251 + v277 * 8);
          goto LABEL_669;
        }
        v262 = 0;
        v263 = 8 * v256;
        v264 = __src;
        do
        {
          v265 = 0;
          v266 = v254 - 1;
          do
          {
            v251[v265] = v264[v265];
            v265 += v284;
            --v266;
          }
          while (v266);
          v251[v265] = v264[v265];
          v264 = (uint64_t *)((char *)v264 + v263);
          v251 = (_QWORD *)((char *)v251 + v263);
          ++v262;
        }
        while (v262 != v261);
      }
      if ((_DWORD)v254 != 1)
      {
        v276 = 0;
        do
        {
          v251[v276] = v264[v276];
          v276 += v284;
          --v260;
        }
        while (v260);
        v264 = (uint64_t *)((char *)v264 + v276 * 8);
        v251 = (_QWORD *)((char *)v251 + v276 * 8);
      }
LABEL_669:
      *v251 = *v264;
      v317 = 0uLL;
      *((_QWORD *)&v316[1] + 1) = 0;
      v249 = v298;
      v272 = v299 - (_BYTE *)v298;
      if (v299 == v298)
        goto LABEL_648;
      goto LABEL_654;
    }
  }
  else if (v5 != 16)
  {
    if (v5 == 110)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 96) = 0;
      goto LABEL_658;
    }
    if (v5 != 64)
      goto LABEL_605;
    goto LABEL_479;
  }
  v318 = 0u;
  v319 = 0u;
  v317 = 0u;
  v315 = 0u;
  memset(v316, 0, sizeof(v316));
  memset(memptr, 0, sizeof(memptr));
  *(_OWORD *)v295 = 0u;
  v296 = 0u;
  v21 = (char *)operator new(0x400uLL);
  v22 = v21 + 1024;
  v294 = v21;
  memcpy(v21, &unk_20826CD70, 0x400uLL);
  sub_207DCF3B4((uint64_t)&v295[1], 0x80uLL, 0);
  v278 = v13;
  v297 = 0;
  if (v287)
  {
    v288 = 0;
    while (1)
    {
      if ((v297 & 0x8000000000000000) != 0)
      {
        v24 = v297 - 63;
        if ((uint64_t)(v297 - 63) < 0)
          v24 = v297;
        v23 = v24 >> 6;
      }
      else
      {
        v23 = v297 >> 6;
      }
      LOBYTE(v391) = 0;
      v384 = (char *)v295[1] + 8 * v23;
      LODWORD(v385[0]) = v297 & 0x3F;
      __p[0] = (char *)v295[1] + 8 * ((unint64_t)v296 >> 6);
      LODWORD(__p[1]) = v296 & 0x3F;
      sub_2081054F0((uint64_t)&v384, (uint64_t)__p, &v391, (uint64_t)v310);
      v25 = LODWORD(v310[1]) + 8 * ((char *)v310[0] - (char *)v295[1]);
      v297 = v25;
      if (v25 < 0)
      {
        v27 = v25 - 63;
        if (v25 - 63 < 0)
          v27 = LODWORD(v310[1]) + 8 * ((char *)v310[0] - (char *)v295[1]);
        v26 = v27 >> 6;
      }
      else
      {
        v26 = (unint64_t)v25 >> 6;
      }
      v28 = v294[v25];
      LOBYTE(v391) = 0;
      v384 = (char *)v295[1] + 8 * v26;
      LODWORD(v385[0]) = v25 & 0x3F;
      __p[0] = (char *)v295[1] + 8 * ((unint64_t)v296 >> 6);
      LODWORD(__p[1]) = v296 & 0x3F;
      sub_2081054F0((uint64_t)&v384, (uint64_t)__p, &v391, (uint64_t)v310);
      v297 = LODWORD(v310[1]) + 8 * ((char *)v310[0] - (char *)v295[1]);
      *(_QWORD *)((char *)v295[1] + ((v297 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v297;
      v29 = (void **)(&off_24C087B20 + 2 * v28);
      v30 = (char *)*v29;
      v31 = v29[1];
      v396 = v30;
      v397 = &off_24C088330;
      v32 = (uint64_t)&v30[8 * (_QWORD)v31];
      v398 = memptr;
      v33 = &v397;
      v399 = &v397;
      v400 = v32;
      if (v31)
      {
        while (!((unsigned int (*)(uint64_t (***)()))(*v33)[6])(v33))
        {
          v30 = v396 + 8;
          v396 = v30;
          if (v30 == (char *)v400)
            goto LABEL_60;
          v33 = v399;
          if (!v399)
            sub_207CA408C();
        }
        v30 = v396;
LABEL_60:
        v34 = v399;
      }
      else
      {
        v34 = &v397;
      }
      v391 = v32;
      v392 = &off_24C088330;
      v393 = memptr;
      v394 = &v392;
      v395 = v32;
      v35 = (uint64_t (****)())v312;
      v310[0] = v30;
      if (!v34)
        goto LABEL_64;
      if (v34 != &v397)
        break;
      *(_QWORD *)&v312[0] = &v310[1];
      v397[3]();
      *((_QWORD *)&v312[0] + 1) = v400;
      *(_QWORD *)&v312[1] = v391;
      v39 = (uint64_t (****)())v313;
      if (v394)
      {
        if (v394 == &v392)
        {
          v36 = v392;
          goto LABEL_65;
        }
        *(_QWORD *)&v313[0] = v394;
        v39 = &v394;
      }
      *v39 = 0;
      v37 = v394;
      *((_QWORD *)&v313[0] + 1) = v395;
      if (v394 == &v392)
      {
LABEL_72:
        v37 = &v392;
        v38 = 4;
        goto LABEL_73;
      }
LABEL_66:
      if (!v37)
        goto LABEL_74;
      v38 = 5;
LABEL_73:
      (*v37)[v38]();
LABEL_74:
      v40 = v399;
      if (v399 == &v397)
      {
        v40 = &v397;
        v41 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_79;
        v41 = 5;
      }
      (*v40)[v41]();
LABEL_79:
      v384 = (char *)v310[0];
      v42 = &v386;
      if (!*(_QWORD *)&v312[0])
        goto LABEL_82;
      if (*(void ***)&v312[0] != &v310[1])
      {
        v386 = *(_QWORD **)&v312[0];
        v42 = v312;
LABEL_82:
        *v42 = 0;
        goto LABEL_84;
      }
      v386 = v385;
      (*((void (**)(void))v310[1] + 3))();
LABEL_84:
      v387 = *(_OWORD *)((char *)v312 + 8);
      v43 = &v389;
      if (!*(_QWORD *)&v313[0])
        goto LABEL_87;
      if (*(_OWORD **)&v313[0] != (_OWORD *)((char *)&v312[1] + 8))
      {
        v389 = *(uint64_t (****)())&v313[0];
        v43 = (uint64_t (****)())v313;
LABEL_87:
        *v43 = 0;
        goto LABEL_89;
      }
      v389 = (uint64_t (***)())v388;
      (*(void (**)(void))(*((_QWORD *)&v312[1] + 1) + 24))();
LABEL_89:
      v390 = *((_QWORD *)&v313[0] + 1);
      v44 = *(_QWORD **)&v313[0];
      if (*(_OWORD **)&v313[0] == (_OWORD *)((char *)&v312[1] + 8))
      {
        v44 = (_QWORD *)&v312[1] + 1;
        v45 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v313[0])
          goto LABEL_94;
        v45 = 5;
      }
      (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_94:
      v46 = *(void ***)&v312[0];
      if (*(void ***)&v312[0] == &v310[1])
      {
        v46 = &v310[1];
        v47 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v312[0])
          goto LABEL_99;
        v47 = 5;
      }
      (*((void (**)(void))*v46 + v47))();
LABEL_99:
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v305 = 0u;
      *(_OWORD *)v306 = 0u;
      v48 = (uint64_t)v386;
      v324 = (uint64_t)v384;
      if (!v386)
        goto LABEL_102;
      if (v386 != v385)
      {
        v48 = (*(uint64_t (**)(void))(*v386 + 16))();
LABEL_102:
        v326 = (_QWORD *)v48;
        goto LABEL_104;
      }
      v326 = v325;
      (*(void (**)(_QWORD *, _QWORD *))(v385[0] + 24))(v385, v325);
LABEL_104:
      v320 = *((_QWORD *)&v387 + 1);
      v327 = v387;
      v49 = (uint64_t)v389;
      if (!v389)
        goto LABEL_107;
      if (v389 != v388)
      {
        v49 = (*v389)[2]();
LABEL_107:
        v322 = (_QWORD *)v49;
        goto LABEL_109;
      }
      v322 = v321;
      (*(void (**)(_QWORD *))(v388[0] + 24))(v388);
LABEL_109:
      v323 = v390;
      v50 = (uint64_t)v326;
      v340 = v324;
      if (!v326)
        goto LABEL_112;
      if (v326 != v325)
      {
        v50 = (*(uint64_t (**)(void))(*v326 + 16))();
LABEL_112:
        v342 = (_QWORD *)v50;
        goto LABEL_114;
      }
      v342 = v341;
      (*(void (**)(_QWORD *))(v325[0] + 24))(v325);
LABEL_114:
      v343 = v327;
      v51 = (uint64_t)v322;
      v336 = v320;
      if (!v322)
        goto LABEL_117;
      if (v322 != v321)
      {
        v51 = (*(uint64_t (**)(void))(*v322 + 16))();
LABEL_117:
        v338 = (_QWORD *)v51;
        goto LABEL_119;
      }
      v338 = v337;
      (*(void (**)(_QWORD *))(v321[0] + 24))(v321);
LABEL_119:
      v339 = v323;
      v52 = (uint64_t)v326;
      v332 = v324;
      if (!v326)
        goto LABEL_122;
      if (v326 != v325)
      {
        v52 = (*(uint64_t (**)(void))(*v326 + 16))();
LABEL_122:
        v334 = (_BYTE *)v52;
        goto LABEL_124;
      }
      v334 = v333;
      (*(void (**)(_QWORD *))(v325[0] + 24))(v325);
LABEL_124:
      v335 = v327;
      v53 = (uint64_t)v322;
      v328 = v320;
      if (!v322)
        goto LABEL_127;
      if (v322 != v321)
      {
        v53 = (*(uint64_t (**)(void))(*v322 + 16))();
LABEL_127:
        v330 = (_BYTE *)v53;
        goto LABEL_129;
      }
      v330 = v329;
      (*(void (**)(_QWORD *))(v321[0] + 24))(v321);
LABEL_129:
      v331 = v323;
      v54 = sub_20810B3F0(&v332, &v328);
      v55 = (uint64_t)v305[0];
      if (v54 > ((char *)v305[0] - (char *)__p[0]) >> 3)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          v55 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v305[0] = 0;
        }
        if (v54 >> 61)
          goto LABEL_675;
        v56 = v55 >> 2;
        if (v55 >> 2 <= v54)
          v56 = v54;
        v57 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v56;
        if (v57 >> 61)
LABEL_675:
          sub_207CA420C();
        __p[0] = operator new(8 * v57);
        __p[1] = __p[0];
        v305[0] = (char *)__p[0] + 8 * v57;
        v58 = (uint64_t)v342;
        v348 = v340;
        if (v342)
        {
          if (v342 != v341)
          {
            v58 = (*(uint64_t (**)(void))(*v342 + 16))();
            goto LABEL_142;
          }
          v350 = v349;
          (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
        }
        else
        {
LABEL_142:
          v350 = (_BYTE *)v58;
        }
        v351 = v343;
        v61 = (uint64_t)v338;
        v344 = v336;
        if (v338)
        {
          if (v338 != v337)
          {
            v62 = __src;
            v61 = (*(uint64_t (**)(void))(*v338 + 16))();
            goto LABEL_157;
          }
          v346 = v345;
          v62 = __src;
          (*(void (**)(_QWORD *))(v337[0] + 24))(v337);
        }
        else
        {
          v62 = __src;
LABEL_157:
          v346 = (_BYTE *)v61;
        }
        v347 = v339;
        sub_20810B674((uint64_t)__p, &v348, &v344);
        v63 = v346;
        if (v346 == v345)
        {
          v63 = v345;
          v64 = 4;
LABEL_163:
          (*(void (**)(void))(*v63 + 8 * v64))();
        }
        else if (v346)
        {
          v64 = 5;
          goto LABEL_163;
        }
        v65 = v350;
        v66 = v349;
        if (v350 == v349)
          goto LABEL_281;
        goto LABEL_165;
      }
      if (v54 <= ((char *)__p[1] - (char *)__p[0]) >> 3)
      {
        v60 = (uint64_t)v342;
        v356 = v340;
        if (!v342)
          goto LABEL_151;
        if (v342 == v341)
        {
          v358 = v357;
          (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
        }
        else
        {
          v60 = (*(uint64_t (**)(void))(*v342 + 16))();
LABEL_151:
          v358 = (_BYTE *)v60;
        }
        v359 = v343;
        v72 = (uint64_t)v338;
        v352 = v336;
        if (v338)
        {
          if (v338 != v337)
          {
            v72 = (*(uint64_t (**)(void))(*v338 + 16))();
            goto LABEL_188;
          }
          v354 = v353;
          (*(void (**)(_QWORD *))(v337[0] + 24))(v337);
        }
        else
        {
LABEL_188:
          v354 = (_BYTE *)v72;
        }
        v355 = v339;
        sub_20810BC74(v310, &v356, &v352, (_QWORD *)__p[0]);
        v73 = *(void **)&v312[1];
        v74 = *(void ***)&v312[0];
        if (*(void ***)&v312[0] == &v310[1])
        {
          v74 = &v310[1];
          v75 = 4;
LABEL_194:
          (*((void (**)(void))*v74 + v75))();
        }
        else if (*(_QWORD *)&v312[0])
        {
          v75 = 5;
          goto LABEL_194;
        }
        v76 = v354;
        if (v354 == v353)
        {
          v76 = v353;
          v77 = 4;
LABEL_199:
          (*(void (**)(void))(*v76 + 8 * v77))();
        }
        else if (v354)
        {
          v77 = 5;
          goto LABEL_199;
        }
        v78 = v358;
        if (v358 == v357)
        {
          v78 = v357;
          v79 = 4;
LABEL_204:
          (*(void (**)(void))(*v78 + 8 * v79))();
        }
        else if (v358)
        {
          v79 = 5;
          goto LABEL_204;
        }
        __p[1] = v73;
        v62 = __src;
LABEL_206:
        v80 = v330;
        if (v330 == v329)
          goto LABEL_283;
        goto LABEL_207;
      }
      v59 = (uint64_t)v342;
      v376 = v340;
      if (!v342)
        goto LABEL_147;
      if (v342 != v341)
      {
        v59 = (*(uint64_t (**)(void))(*v342 + 16))();
LABEL_147:
        v378 = (_QWORD *)v59;
        goto LABEL_168;
      }
      v378 = v377;
      (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
LABEL_168:
      v379 = v343;
      v68 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((char *)__p[1] - (char *)__p[0] <= -8)
      {
        while (1)
        {
          v376 -= 8;
          if (!v378)
LABEL_672:
            sub_207CA408C();
          if ((*(unsigned int (**)(_QWORD *))(*v378 + 48))(v378))
          {
            if (__CFADD__(v68++, 1))
              break;
          }
        }
      }
      else if (__p[1] != __p[0])
      {
        do
        {
          do
          {
            v376 += 8;
            if (v376 == v379)
              break;
            if (!v378)
              goto LABEL_672;
          }
          while (((*(uint64_t (**)(_QWORD *))(*v378 + 48))(v378) & 1) == 0);
        }
        while (v68-- > 1);
      }
      v380 = v376;
      v70 = &v382;
      v62 = __src;
      if (!v378)
        goto LABEL_178;
      if (v378 != v377)
      {
        v382 = v378;
        v70 = &v378;
LABEL_178:
        *v70 = 0;
        goto LABEL_210;
      }
      v382 = v381;
      (*(void (**)(void))(v377[0] + 24))();
LABEL_210:
      v82 = v378;
      v383 = v379;
      if (v378 == v377)
      {
        v82 = v377;
        v83 = 4;
      }
      else
      {
        if (!v378)
          goto LABEL_215;
        v83 = 5;
      }
      (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_215:
      v84 = (uint64_t)v342;
      v372 = v340;
      if (!v342)
        goto LABEL_218;
      if (v342 != v341)
      {
        v84 = (*(uint64_t (**)(void))(*v342 + 16))();
LABEL_218:
        v374 = (_QWORD *)v84;
        goto LABEL_220;
      }
      v374 = v373;
      (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
LABEL_220:
      v375 = v343;
      v85 = (uint64_t)v382;
      v368 = v380;
      if (!v382)
        goto LABEL_223;
      if (v382 != v381)
      {
        v85 = (*(uint64_t (**)(void))(*v382 + 16))();
LABEL_223:
        v370 = (_QWORD *)v85;
        goto LABEL_225;
      }
      v370 = v369;
      (*(void (**)(_QWORD *))(v381[0] + 24))(v381);
LABEL_225:
      v371 = v383;
      v86 = __p[0];
      v87 = (uint64_t)v374;
      v396 = (char *)v372;
      if (!v374)
        goto LABEL_228;
      if (v374 != v373)
      {
        v87 = (*(uint64_t (**)(void))(*v374 + 16))();
LABEL_228:
        v399 = (uint64_t (***)())v87;
        goto LABEL_230;
      }
      v399 = &v397;
      (*(void (**)(_QWORD *))(v373[0] + 24))(v373);
LABEL_230:
      v400 = v375;
      v88 = (uint64_t)v370;
      v391 = v368;
      if (!v370)
        goto LABEL_233;
      if (v370 != v369)
      {
        v88 = (*(uint64_t (**)(void))(*v370 + 16))();
LABEL_233:
        v394 = (uint64_t (***)())v88;
        goto LABEL_235;
      }
      v394 = &v392;
      (*(void (**)(_QWORD *))(v369[0] + 24))(v369);
LABEL_235:
      v395 = v371;
      sub_20810BC74(v310, (uint64_t *)&v396, &v391, v86);
      v89 = *(void ***)&v312[0];
      if (*(void ***)&v312[0] == &v310[1])
      {
        v89 = &v310[1];
        v90 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v312[0])
          goto LABEL_240;
        v90 = 5;
      }
      (*((void (**)(void))*v89 + v90))();
LABEL_240:
      v91 = v394;
      if (v394 == &v392)
      {
        v91 = &v392;
        v92 = 4;
      }
      else
      {
        if (!v394)
          goto LABEL_245;
        v92 = 5;
      }
      (*v91)[v92]();
LABEL_245:
      v93 = v399;
      if (v399 == &v397)
      {
        v93 = &v397;
        v94 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_250;
        v94 = 5;
      }
      (*v93)[v94]();
LABEL_250:
      v95 = v370;
      if (v370 == v369)
      {
        v95 = v369;
        v96 = 4;
      }
      else
      {
        if (!v370)
          goto LABEL_255;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_255:
      v97 = v374;
      if (v374 == v373)
      {
        v97 = v373;
        v98 = 4;
      }
      else
      {
        if (!v374)
          goto LABEL_260;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_260:
      v99 = (uint64_t)v382;
      v364 = v380;
      if (!v382)
        goto LABEL_263;
      if (v382 != v381)
      {
        v99 = (*(uint64_t (**)(void))(*v382 + 16))();
LABEL_263:
        v366 = (_BYTE *)v99;
        goto LABEL_265;
      }
      v366 = v365;
      (*(void (**)(_QWORD *))(v381[0] + 24))(v381);
LABEL_265:
      v367 = v383;
      v100 = (uint64_t)v338;
      v360 = v336;
      if (!v338)
        goto LABEL_268;
      if (v338 != v337)
      {
        v100 = (*(uint64_t (**)(void))(*v338 + 16))();
LABEL_268:
        v362 = (_BYTE *)v100;
        goto LABEL_270;
      }
      v362 = v361;
      (*(void (**)(_QWORD *))(v337[0] + 24))(v337);
LABEL_270:
      v363 = v339;
      sub_20810B674((uint64_t)__p, &v364, &v360);
      v101 = v362;
      if (v362 == v361)
      {
        v101 = v361;
        v102 = 4;
      }
      else
      {
        if (!v362)
          goto LABEL_275;
        v102 = 5;
      }
      (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_275:
      v103 = v366;
      if (v366 == v365)
      {
        v103 = v365;
        v104 = 4;
      }
      else
      {
        if (!v366)
          goto LABEL_280;
        v104 = 5;
      }
      (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_280:
      v65 = v382;
      v66 = v381;
      if (v382 == v381)
      {
LABEL_281:
        v65 = v66;
        v67 = 4;
        goto LABEL_282;
      }
LABEL_165:
      if (!v65)
        goto LABEL_206;
      v67 = 5;
LABEL_282:
      (*(void (**)(void))(*v65 + 8 * v67))();
      v80 = v330;
      if (v330 == v329)
      {
LABEL_283:
        v80 = v329;
        v81 = 4;
        goto LABEL_284;
      }
LABEL_207:
      if (!v80)
        goto LABEL_285;
      v81 = 5;
LABEL_284:
      (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_285:
      v105 = v334;
      if (v334 == v333)
      {
        v105 = v333;
        v106 = 4;
      }
      else
      {
        if (!v334)
          goto LABEL_290;
        v106 = 5;
      }
      (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_290:
      v107 = v338;
      if (v338 == v337)
      {
        v107 = v337;
        v108 = 4;
      }
      else
      {
        if (!v338)
          goto LABEL_295;
        v108 = 5;
      }
      (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_295:
      v109 = v342;
      if (v342 == v341)
      {
        v109 = v341;
        v110 = 4;
      }
      else
      {
        if (!v342)
          goto LABEL_300;
        v110 = 5;
      }
      (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_300:
      v111 = v322;
      if (v322 == v321)
      {
        v111 = v321;
        v112 = 4;
      }
      else
      {
        if (!v322)
          goto LABEL_305;
        v112 = 5;
      }
      (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_305:
      v113 = v326;
      if (v326 == v325)
      {
        v113 = v325;
        v114 = 4;
      }
      else
      {
        if (!v326)
          goto LABEL_310;
        v114 = 5;
      }
      (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_310:
      v115 = (uint64_t)v386;
      v391 = (uint64_t)v384;
      if (!v386)
        goto LABEL_313;
      if (v386 != v385)
      {
        v115 = (*(uint64_t (**)(void))(*v386 + 16))();
LABEL_313:
        v394 = (uint64_t (***)())v115;
        goto LABEL_315;
      }
      v394 = &v392;
      (*(void (**)(_QWORD *))(v385[0] + 24))(v385);
LABEL_315:
      v380 = *((_QWORD *)&v387 + 1);
      v395 = v387;
      v116 = (uint64_t)v389;
      if (!v389)
        goto LABEL_318;
      if (v389 != v388)
      {
        v116 = (*v389)[2]();
LABEL_318:
        v382 = (_QWORD *)v116;
        goto LABEL_320;
      }
      v382 = v381;
      (*(void (**)(_QWORD *))(v388[0] + 24))(v388);
LABEL_320:
      v383 = v390;
      v117 = (uint64_t)v394;
      v310[0] = (void *)v391;
      if (!v394)
        goto LABEL_323;
      if (v394 != &v392)
      {
        v117 = (*v394)[2]();
LABEL_323:
        *(_QWORD *)&v312[0] = v117;
        goto LABEL_325;
      }
      *(_QWORD *)&v312[0] = &v310[1];
      ((void (*)(uint64_t (***)()))v392[3])(&v392);
LABEL_325:
      *((_QWORD *)&v312[0] + 1) = v395;
      v118 = (uint64_t)v382;
      v396 = (char *)v380;
      if (!v382)
        goto LABEL_328;
      if (v382 != v381)
      {
        v118 = (*(uint64_t (**)(void))(*v382 + 16))();
LABEL_328:
        v399 = (uint64_t (***)())v118;
        goto LABEL_330;
      }
      v399 = &v397;
      (*(void (**)(_QWORD *))(v381[0] + 24))(v381);
LABEL_330:
      v400 = v383;
      v119 = sub_20810B3F0((uint64_t *)v310, (uint64_t *)&v396);
      v120 = v399;
      if (v399 == &v397)
      {
        v120 = &v397;
        v121 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_335;
        v121 = 5;
      }
      (*v120)[v121]();
LABEL_335:
      v122 = *(void ***)&v312[0];
      if (*(void ***)&v312[0] == &v310[1])
      {
        v122 = &v310[1];
        v123 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v312[0])
          goto LABEL_340;
        v123 = 5;
      }
      (*((void (**)(void))*v122 + v123))();
LABEL_340:
      v124 = v382;
      if (v382 == v381)
      {
        v124 = v381;
        v125 = 4;
      }
      else
      {
        if (!v382)
          goto LABEL_345;
        v125 = 5;
      }
      (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_345:
      v126 = v394;
      if (v394 == &v392)
      {
        v126 = &v392;
        v127 = 4;
      }
      else
      {
        if (!v394)
          goto LABEL_350;
        v127 = 5;
      }
      (*v126)[v127]();
LABEL_350:
      sub_207DCF3B4((uint64_t)&v305[1], v119, 0);
      *(_QWORD *)&v306[16] = 0;
      v128 = v389;
      if (v389 == v388)
      {
        v128 = (uint64_t (***)())v388;
        v129 = 4;
      }
      else
      {
        if (!v389)
          goto LABEL_355;
        v129 = 5;
      }
      (*v128)[v129]();
LABEL_355:
      v130 = v386;
      if (v386 == v385)
      {
        v130 = v385;
        v131 = 4;
      }
      else
      {
        if (!v386)
          goto LABEL_360;
        v131 = 5;
      }
      (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_360:
      if (!v293)
      {
        v188 = 0;
        v189 = 1;
        v190 = v305[1];
        if (!v305[1])
          goto LABEL_469;
        goto LABEL_468;
      }
      for (i = 0; i != v293; ++i)
      {
        if (*(_QWORD *)&v306[16] == *(_QWORD *)v306)
        {
          v189 = 0;
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 96) = 0;
          v188 = 1;
          v190 = v305[1];
          if (!v305[1])
            goto LABEL_469;
LABEL_468:
          operator delete(v190);
          goto LABEL_469;
        }
        v133 = *(_QWORD *)&v306[16] - 63;
        if (*(_QWORD *)&v306[16] - 63 < 0)
          v133 = *(_QWORD *)&v306[16];
        v134 = v133 >> 6;
        if (*(uint64_t *)&v306[16] >= 0)
          v134 = *(_QWORD *)&v306[16] >> 6;
        LOBYTE(v380) = 0;
        v384 = (char *)v305[1] + 8 * v134;
        LODWORD(v385[0]) = v306[16] & 0x3F;
        v396 = (char *)v305[1] + 8 * (*(_QWORD *)v306 >> 6);
        LODWORD(v397) = v306[0] & 0x3F;
        sub_2081054F0((uint64_t)&v384, (uint64_t)&v396, &v380, (uint64_t)v310);
        v135 = v305[1];
        v136 = (char *)__p[0];
        *(_QWORD *)&v306[16] = LODWORD(v310[1]) + 8 * ((char *)v310[0] - (char *)v305[1]);
        v137 = *(_QWORD *)(*a1 + 8 * *((_QWORD *)__p[0] + *(_QWORD *)&v306[16]));
        if (v291)
          v138 = i;
        else
          v138 = 0;
        v62[(v138 + v288 * HIDWORD(v285))] = v137;
        v139 = *a2 + 24 * v137;
        *(_QWORD *)&v311 = 0;
        v310[0] = 0;
        v310[1] = 0;
        v141 = *(_BYTE **)v139;
        v140 = *(_BYTE **)(v139 + 8);
        v142 = v140 - v141;
        if (v140 != v141)
        {
          if (v142 < 0)
            sub_207CA420C();
          v143 = (char *)operator new(v140 - v141);
          v310[0] = v143;
          memcpy(v143, v141, v142);
          v144 = (char *)__p[1];
          v145 = v295[1];
          v146 = (uint64_t *)v143;
          while (1)
          {
            v147 = *v146;
            *((_BYTE *)memptr + *v146) = 1;
            if ((*(_QWORD *)&v306[16] & 0x8000000000000000) != 0)
            {
              v149 = *(_QWORD *)&v306[16] - 63;
              if (*(_QWORD *)&v306[16] - 63 < 0)
                v149 = *(_QWORD *)&v306[16];
              v148 = v149 >> 6;
            }
            else
            {
              v148 = *(_QWORD *)&v306[16] >> 6;
            }
            v150 = &v135[8 * (*(_QWORD *)v306 >> 6)];
            v151 = &v135[8 * v148];
            v152 = (v306[0] & 0x3F) + 8 * (v150 - v151);
            v153 = v152 - (v306[16] & 0x3F);
            v154 = v306[16] & 0x3F;
            if ((v306[16] & 0x3F) != 0)
            {
              v155 = (64 - v154);
              if (v155 >= v153)
                v156 = v152 - (v306[16] & 0x3F);
              else
                v156 = (64 - v154);
              v157 = (0xFFFFFFFFFFFFFFFFLL >> (v155 - v156)) & (-1 << (v306[16] & 0x3F)) & ~*(_QWORD *)v151;
              if (v157)
              {
                v158 = __clz(__rbit64(v157)) + 8 * (v151 - v135);
                *(_QWORD *)&v306[16] = v158;
                if (v158 < 0)
                  goto LABEL_388;
                goto LABEL_403;
              }
              if (v153 <= v155)
              {
                v158 = (((_BYTE)v153 + v306[16]) & 0x3F) + 8 * (&v151[8 * (v152 >> 6)] - v135);
                *(_QWORD *)&v306[16] = v158;
                if (v158 < 0)
                  goto LABEL_388;
                goto LABEL_403;
              }
              v153 -= v156;
              v151 += 8;
            }
            if (v153 >= 0x40)
            {
              while (*(_QWORD *)v151 == -1)
              {
                v151 += 8;
                v153 -= 64;
                if (v153 <= 0x3F)
                  goto LABEL_396;
              }
              v153 = __clz(__rbit64(~*(_QWORD *)v151));
LABEL_402:
              v158 = v153 + 8 * (v151 - v135);
              *(_QWORD *)&v306[16] = v158;
              if (v158 < 0)
                goto LABEL_388;
              goto LABEL_403;
            }
LABEL_396:
            if (!v153)
              goto LABEL_402;
            v161 = __clz(__rbit64((0xFFFFFFFFFFFFFFFFLL >> -(char)v153) & ~*(_QWORD *)v151));
            if (((0xFFFFFFFFFFFFFFFFLL >> -(char)v153) & ~*(_QWORD *)v151) != 0)
              v153 = v161;
            v158 = v153 + 8 * (v151 - v135);
            *(_QWORD *)&v306[16] = v158;
            if (v158 < 0)
            {
LABEL_388:
              v159 = v158 - 63;
              if (v158 - 63 < 0)
                v159 = v158;
              v160 = v159 >> 6;
              goto LABEL_404;
            }
LABEL_403:
            v160 = (unint64_t)v158 >> 6;
LABEL_404:
            v162 = v306[0] & 0x3F;
            v163 = &v136[8 * v158];
            v164 = &v135[8 * v160];
            v165 = v158 & 0x3F;
            for (j = v163; ; j += 8)
            {
              if (v163 == v144 && v164 == v150 && v165 == v162)
              {
                j = v144;
                v165 = v306[0] & 0x3F;
                goto LABEL_418;
              }
              if (*(_QWORD *)v163 == v147 && ((*(_QWORD *)v164 >> v165) & 1) == 0)
                break;
              v163 += 8;
              v164 += 8 * (v165 == 63);
              if (v165 == 63)
                v165 = 0;
              else
                ++v165;
            }
            if (v163 != v144 || v164 != v150)
            {
LABEL_421:
              *(_QWORD *)&v135[((unint64_t)-((v136 - j) >> 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << -((v136 - j) >> 3);
              v167 = v296;
              v168 = v297;
              if ((v297 & 0x8000000000000000) != 0)
                goto LABEL_422;
LABEL_420:
              v169 = v168 >> 6;
              goto LABEL_425;
            }
LABEL_418:
            if (v165 != v162)
              goto LABEL_421;
            v167 = v296;
            v168 = v297;
            if ((v297 & 0x8000000000000000) == 0)
              goto LABEL_420;
LABEL_422:
            v170 = v168 - 63;
            if ((uint64_t)(v168 - 63) < 0)
              v170 = v168;
            v169 = v170 >> 6;
LABEL_425:
            v171 = &v145[8 * (v167 >> 6)];
            v172 = &v145[8 * v169];
            v173 = (v167 & 0x3F) + 8 * (v171 - v172);
            v174 = v173 - (v168 & 0x3F);
            v175 = v168 & 0x3F;
            if ((v168 & 0x3F) != 0)
            {
              v176 = (64 - v175);
              if (v176 >= v174)
                v177 = v173 - (v168 & 0x3F);
              else
                v177 = (64 - v175);
              v178 = (0xFFFFFFFFFFFFFFFFLL >> (v176 - v177)) & (-1 << (v168 & 0x3F)) & ~*(_QWORD *)v172;
              if (v178)
              {
                v179 = __clz(__rbit64(v178)) + 8 * (v172 - v145);
                v297 = v179;
                if (v179 >= 0)
                  goto LABEL_446;
                goto LABEL_431;
              }
              if (v174 <= v176)
              {
                v179 = (((_BYTE)v174 + (_BYTE)v168) & 0x3F) + 8 * (&v172[8 * (v173 >> 6)] - v145);
                v297 = v179;
                if (v179 >= 0)
                  goto LABEL_446;
                goto LABEL_431;
              }
              v174 -= v177;
              v172 += 8;
            }
            if (v174 >= 0x40)
            {
              while (*(_QWORD *)v172 == -1)
              {
                v172 += 8;
                v174 -= 64;
                if (v174 <= 0x3F)
                  goto LABEL_439;
              }
              v174 = __clz(__rbit64(~*(_QWORD *)v172));
LABEL_445:
              v179 = v174 + 8 * (v172 - v145);
              v297 = v179;
              if (v179 >= 0)
                goto LABEL_446;
              goto LABEL_431;
            }
LABEL_439:
            if (!v174)
              goto LABEL_445;
            v182 = __clz(__rbit64((0xFFFFFFFFFFFFFFFFLL >> -(char)v174) & ~*(_QWORD *)v172));
            if (((0xFFFFFFFFFFFFFFFFLL >> -(char)v174) & ~*(_QWORD *)v172) != 0)
              v174 = v182;
            v179 = v174 + 8 * (v172 - v145);
            v297 = v179;
            if (v179 >= 0)
            {
LABEL_446:
              v181 = (unint64_t)v179 >> 6;
              goto LABEL_447;
            }
LABEL_431:
            v180 = v179 - 63;
            if (v179 - 63 < 0)
              v180 = v179;
            v181 = v180 >> 6;
LABEL_447:
            v183 = v167 & 0x3F;
            v184 = &v294[v179];
            v185 = &v145[8 * v181];
            v186 = v179 & 0x3F;
            for (k = v184; ; ++k)
            {
              if (v184 == v22 && v185 == v171 && v186 == v183)
              {
                k = v22;
                v186 = v183;
                goto LABEL_461;
              }
              if (*v184 == v147 && ((*(_QWORD *)v185 >> v186) & 1) == 0)
                break;
              ++v184;
              v185 += 8 * (v186 == 63);
              if (v186 == 63)
                v186 = 0;
              else
                ++v186;
            }
            if (v184 != v22 || v185 != v171)
              goto LABEL_375;
LABEL_461:
            if (v186 != v183)
LABEL_375:
              *(_QWORD *)&v145[((unint64_t)-(v294 - k) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << -(v294 - k);
            if (++v146 == (uint64_t *)&v143[8 * (v142 >> 3)])
            {
              operator delete(v143);
              v62 = __src;
              break;
            }
          }
        }
      }
      v188 = 0;
      v189 = 1;
      v190 = v305[1];
      if (v305[1])
        goto LABEL_468;
LABEL_469:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v189 & 1) == 0)
        goto LABEL_598;
      if (++v288 == v287)
        goto LABEL_491;
    }
    *(_QWORD *)&v312[0] = v34;
    v35 = &v399;
LABEL_64:
    *v35 = 0;
    *((_QWORD *)&v312[0] + 1) = v400;
    *(_QWORD *)&v312[1] = v32;
    v36 = &off_24C088330;
LABEL_65:
    *(_QWORD *)&v313[0] = (char *)&v312[1] + 8;
    ((void (*)(uint64_t (***)()))v36[3])(&v392);
    v37 = v394;
    *((_QWORD *)&v313[0] + 1) = v395;
    if (v394 == &v392)
      goto LABEL_72;
    goto LABEL_66;
  }
LABEL_491:
  memset(v313, 0, sizeof(v313));
  memset(v312, 0, sizeof(v312));
  *(_OWORD *)v310 = 0u;
  v311 = 0u;
  v199 = &v397;
  v200 = &v399;
  v396 = 0;
  v397 = &off_24C088330;
  v398 = memptr;
  v399 = &v397;
  v400 = 128;
  v201 = &v397;
  v384 = 0;
  while (1)
  {
    v202 = ((uint64_t (*)(uint64_t (***)(), char **))(*v201)[6])(v201, &v384);
    v203 = (uint64_t)v396;
    if ((v202 & 1) != 0)
      break;
    v203 = (uint64_t)(v396 + 1);
    v396 = (char *)v203;
    if (v203 == v400)
      break;
    v201 = v399;
    v384 = (char *)v203;
    if (!v399)
      sub_207CA408C();
  }
  v204 = &v392;
  v391 = 128;
  v392 = &off_24C088330;
  v393 = memptr;
  v394 = &v392;
  v395 = 128;
  v384 = (char *)v203;
  v205 = v385;
  if (!v399)
  {
    v200 = (uint64_t (****)())&v386;
    goto LABEL_501;
  }
  if (v399 != &v397)
  {
    v386 = v399;
LABEL_501:
    *v200 = 0;
    *(_QWORD *)&v387 = v400;
    *((_QWORD *)&v387 + 1) = 128;
    v206 = &off_24C088330;
    goto LABEL_502;
  }
  v386 = v385;
  ((void (*)(uint64_t (***)(), _QWORD *))v397[3])(&v397, v385);
  *(_QWORD *)&v387 = v400;
  *((_QWORD *)&v387 + 1) = v391;
  if (!v394)
  {
    v209 = &v389;
LABEL_509:
    *v209 = 0;
    v207 = v394;
    v390 = v395;
    if (v394 != &v392)
      goto LABEL_503;
LABEL_510:
    v208 = 4;
    goto LABEL_511;
  }
  if (v394 != &v392)
  {
    v209 = &v394;
    v389 = v394;
    goto LABEL_509;
  }
  v206 = v392;
LABEL_502:
  v389 = (uint64_t (***)())v388;
  ((void (*)(uint64_t (***)()))v206[3])(&v392);
  v207 = v394;
  v390 = v395;
  if (v394 == &v392)
    goto LABEL_510;
LABEL_503:
  if (!v207)
    goto LABEL_512;
  v208 = 5;
  v204 = v207;
LABEL_511:
  ((void (*)(uint64_t (***)()))(*v204)[v208])(v204);
LABEL_512:
  if (v399 == &v397)
  {
    v210 = 4;
  }
  else
  {
    if (!v399)
      goto LABEL_517;
    v210 = 5;
    v199 = v399;
  }
  ((void (*)(uint64_t (***)()))(*v199)[v210])(v199);
LABEL_517:
  __p[0] = v384;
  v211 = __p;
  if (!v386)
  {
LABEL_520:
    v211[4] = 0;
    goto LABEL_522;
  }
  if (v386 != v385)
  {
    v211 = (void **)&v384;
    *(_QWORD *)v306 = v386;
    goto LABEL_520;
  }
  *(_QWORD *)v306 = &__p[1];
  (*(void (**)(_QWORD *, void **))(v385[0] + 24))(v385, &__p[1]);
LABEL_522:
  *(_OWORD *)&v306[8] = v387;
  v212 = __p;
  if (!v389)
  {
LABEL_525:
    v212[10] = 0;
    goto LABEL_527;
  }
  v212 = (void **)&v384;
  if (v389 != v388)
  {
    v308 = v389;
    goto LABEL_525;
  }
  v308 = (uint64_t (***)())v307;
  (*(void (**)(void))(v388[0] + 24))();
LABEL_527:
  v213 = v389;
  v309 = v390;
  if (v389 == v388)
  {
    v214 = 4;
    v213 = (uint64_t (***)())v388;
  }
  else
  {
    if (!v389)
      goto LABEL_532;
    v214 = 5;
  }
  (*v213)[v214]();
LABEL_532:
  if (v386 == v385)
  {
    v215 = 4;
  }
  else
  {
    if (!v386)
      goto LABEL_537;
    v215 = 5;
    v205 = v386;
  }
  (*(void (**)(_QWORD *))(*v205 + 8 * v215))(v205);
LABEL_537:
  v216 = *(_QWORD *)v306;
  v384 = (char *)__p[0];
  if (!*(_QWORD *)v306)
  {
LABEL_540:
    v386 = (_QWORD *)v216;
    goto LABEL_542;
  }
  if (*(void ***)v306 != &__p[1])
  {
    v216 = (*(uint64_t (**)(void))(**(_QWORD **)v306 + 16))();
    goto LABEL_540;
  }
  v386 = v385;
  (*((void (**)(void **, _QWORD *))__p[1] + 3))(&__p[1], v385);
LABEL_542:
  *(_QWORD *)&v387 = *(_QWORD *)&v306[8];
  v396 = *(char **)&v306[16];
  v217 = &v397;
  v218 = (uint64_t)v308;
  if (!v308)
  {
LABEL_545:
    v399 = (uint64_t (***)())v218;
    goto LABEL_547;
  }
  if (v308 != v307)
  {
    v218 = (*v308)[2]();
    goto LABEL_545;
  }
  v399 = &v397;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v307[0] + 24))(v307, &v397);
LABEL_547:
  v400 = v309;
  v219 = (uint64_t)v384;
  if (v384 != v396)
  {
    while (1)
    {
      v224 = *(_QWORD *)(*a1 + 8 * v219);
      if (*((_BYTE *)v310 + v224))
        goto LABEL_576;
      *((_BYTE *)v310 + v224) = 1;
      v225 = v299;
      if (v299 >= v300)
        break;
      *(_QWORD *)v299 = v224;
      v226 = (uint64_t)(v225 + 8);
LABEL_575:
      v299 = (char *)v226;
      v219 = (uint64_t)v384;
      do
      {
LABEL_576:
        v384 = (char *)++v219;
        if (v219 == (_QWORD)v387)
          break;
        v391 = v219;
        if (!v386)
          sub_207CA408C();
        v245 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v386 + 48))(v386, &v391);
        v219 = (uint64_t)v384;
      }
      while ((v245 & 1) == 0);
      if ((char *)v219 == v396)
        goto LABEL_548;
    }
    v227 = (char *)v298;
    v228 = v299 - (_BYTE *)v298;
    v229 = (v299 - (_BYTE *)v298) >> 3;
    v230 = v229 + 1;
    if ((unint64_t)(v229 + 1) >> 61)
      sub_207CA420C();
    v231 = v300 - (_BYTE *)v298;
    if ((v300 - (_BYTE *)v298) >> 2 > v230)
      v230 = v231 >> 2;
    if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF8)
      v232 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v232 = v230;
    if (v232)
    {
      if (v232 >> 61)
        sub_207CA3AB8();
      v233 = (char *)operator new(8 * v232);
      v234 = &v233[8 * v229];
      *(_QWORD *)v234 = v224;
      v226 = (uint64_t)(v234 + 8);
      v235 = v225 - v227;
      if (v225 == v227)
        goto LABEL_573;
    }
    else
    {
      v233 = 0;
      v234 = (char *)(8 * v229);
      *(_QWORD *)(8 * v229) = v224;
      v226 = 8 * v229 + 8;
      v235 = v225 - v227;
      if (v225 == v227)
      {
LABEL_573:
        v298 = v234;
        v299 = (char *)v226;
        v300 = &v233[8 * v232];
        if (v227)
          operator delete(v227);
        goto LABEL_575;
      }
    }
    v236 = v235 - 8;
    if (v236 < 0x58)
      goto LABEL_683;
    if ((unint64_t)(v225 - v233 - v228) < 0x20)
      goto LABEL_683;
    v237 = (v236 >> 3) + 1;
    v238 = 8 * (v237 & 0x3FFFFFFFFFFFFFFCLL);
    v239 = &v225[-v238];
    v234 -= v238;
    v240 = &v233[8 * v229 - 16];
    v241 = v225 - 16;
    v242 = v237 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v243 = *(_OWORD *)v241;
      *((_OWORD *)v240 - 1) = *((_OWORD *)v241 - 1);
      *(_OWORD *)v240 = v243;
      v240 -= 32;
      v241 -= 32;
      v242 -= 4;
    }
    while (v242);
    v225 = v239;
    if (v237 != (v237 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_683:
      do
      {
        v244 = *((_QWORD *)v225 - 1);
        v225 -= 8;
        *((_QWORD *)v234 - 1) = v244;
        v234 -= 8;
      }
      while (v225 != v227);
    }
    goto LABEL_573;
  }
LABEL_548:
  if (v399 == &v397)
  {
    v223 = 4;
    v220 = &__p[1];
    v221 = (uint64_t (***)())v307;
    v222 = v385;
  }
  else
  {
    v220 = &__p[1];
    v221 = (uint64_t (***)())v307;
    v222 = v385;
    if (!v399)
      goto LABEL_582;
    v223 = 5;
    v217 = v399;
  }
  ((void (*)(uint64_t (***)()))(*v217)[v223])(v217);
LABEL_582:
  if (v386 == v385)
  {
    v246 = 4;
  }
  else
  {
    if (!v386)
      goto LABEL_587;
    v246 = 5;
    v222 = v386;
  }
  (*(void (**)(_QWORD *))(*v222 + 8 * v246))(v222);
LABEL_587:
  if (v308 == v307)
  {
    v247 = 4;
  }
  else
  {
    if (!v308)
      goto LABEL_592;
    v247 = 5;
    v221 = v308;
  }
  ((void (*)(uint64_t (***)()))(*v221)[v247])(v221);
LABEL_592:
  if (*(void ***)v306 == &__p[1])
  {
    v248 = 4;
    goto LABEL_596;
  }
  if (*(_QWORD *)v306)
  {
    v248 = 5;
    v220 = *(void ***)v306;
LABEL_596:
    (*((void (**)(void **))*v220 + v248))(v220);
  }
  v188 = 0;
LABEL_598:
  if (v295[1])
    operator delete(v295[1]);
  v13 = v278;
  if (v294)
    operator delete(v294);
  if (!v188)
    goto LABEL_605;
  v249 = v298;
  if (v298)
  {
LABEL_657:
    v299 = (char *)v249;
    operator delete(v249);
  }
LABEL_658:
  if (__src)
    free(__src);
}

void sub_20810926C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208109A30(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_208109AB0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_208109AEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;

  v6 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  v21 = 0uLL;
  v20 = 0;
  sub_207D1C104((uint64_t)&v20, v6);
  sub_207DDDC78(*(uint64_t **)a1, 0, (uint64_t *)(*(_QWORD *)a1 + 8 * (*(_QWORD *)(a1 + 8) >> 6)), *(_QWORD *)(a1 + 8) & 0x3F, &v20, &v22);
  v8 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = v7 & 0x3F;
  if (v7 > 0x3F || (v7 & 0x3F) != 0)
  {
    v10 = 0;
    v11 = &v8[v7 >> 6];
    do
    {
      v12 = *v8;
      v13 = v21;
      if ((_QWORD)v21 == *((_QWORD *)&v21 + 1) << 6)
      {
        if ((uint64_t)v21 + 1 < 0)
          sub_207D159B0();
        v14 = *((_QWORD *)&v21 + 1) << 7;
        if (*((_QWORD *)&v21 + 1) << 7 <= ((unint64_t)v21 & 0xFFFFFFFFFFFFFFC0) + 64)
          v14 = (v21 & 0xFFFFFFFFFFFFFFC0) + 64;
        if ((unint64_t)v21 <= 0x3FFFFFFFFFFFFFFELL)
          v15 = v14;
        else
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        sub_207D1C104((uint64_t)&v20, v15);
        v13 = v21;
      }
      *(_QWORD *)&v21 = v13 + 1;
      v16 = v13 >> 6;
      v17 = 1 << v13;
      if (((1 << v10) & v12) != 0)
        v18 = *(_QWORD *)(v20 + 8 * v16) | v17;
      else
        v18 = *(_QWORD *)(v20 + 8 * v16) & ~v17;
      *(_QWORD *)(v20 + 8 * v16) = v18;
      v8 += v10 == 63;
      if (v10 == 63)
        v10 = 0;
      else
        ++v10;
    }
    while (v8 != v11 || v10 != v9);
  }
  *(_QWORD *)a3 = v20;
  result = *(double *)&v21;
  *(_OWORD *)(a3 + 8) = v21;
  return result;
}

void sub_208109C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208109C78(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  char v36;
  BOOL v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  size_t v49;
  char v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  int v113;
  char *v114;
  int v115;
  char *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  int v139;
  int v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  _BYTE *v160;
  uint64_t v161;
  void *v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  int v172;
  void *__p;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 + 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  __p = 0;
  v174 = 0;
  v175 = 0;
  v8 = v7 - v5;
  if (v7 != v5)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v9 = (v8 - 1) >> 6;
    v10 = operator new(8 * (v9 + 1));
    v11 = v10;
    v174 = v7 - v5;
    v175 = v9 + 1;
    __p = v10;
    if (v8 >= 0x41)
      v12 = (v8 - 1) >> 6;
    else
      v12 = 0;
    v10[v12] = 0;
    if (v8 >= 0x40)
      bzero(v10, 8 * (v8 >> 6));
    if ((v8 & 0x3F) != 0)
      v11[v8 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v8 & 0x3F));
  }
  sub_208109AEC(a1, (uint64_t)&__p, (uint64_t)&v176);
  if (__p)
    operator delete(__p);
  if (v6 < 8)
  {
    v13 = 0;
    v14 = 0;
    goto LABEL_29;
  }
  v15 = v6 >> 3;
  v13 = (unint64_t)operator new(v6 >> 3);
  bzero((void *)v13, v6 >> 3);
  v16 = 0;
  v17 = 0;
  v18 = v176;
  do
  {
    v19 = (v16 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v20 = *(unsigned __int8 *)(v13 + v17) | ((*(_QWORD *)&v18[v19] >> (v16 & 0x38)) << 7);
    *(_BYTE *)(v13 + v17) = v20;
    v21 = v20 | (((*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 1)) & 1) << 6);
    *(_BYTE *)(v13 + v17) = v21;
    v22 = v21 | (32 * ((*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 2)) & 1));
    *(_BYTE *)(v13 + v17) = v22;
    v23 = v22 | (16 * ((*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 3)) & 1));
    *(_BYTE *)(v13 + v17) = v23;
    v24 = v23 | (8 * ((*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 4)) & 1));
    *(_BYTE *)(v13 + v17) = v24;
    v25 = v24 | (4 * ((*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 5)) & 1));
    *(_BYTE *)(v13 + v17) = v25;
    v26 = v25 | (2 * ((*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 6)) & 1));
    *(_BYTE *)(v13 + v17) = v26;
    *(_BYTE *)(v13 + v17++) = v26 | (*(_QWORD *)&v18[v19] >> (v16 & 0x38 | 7)) & 1;
    v16 += 8;
  }
  while (v15 != v17);
  v14 = (_BYTE *)(v13 + v15);
  v27 = (_BYTE *)v13;
  if (v6 < 0x40)
    goto LABEL_28;
  if (v6 < 0x100)
  {
    v28 = 0;
    goto LABEL_23;
  }
  v29 = 0;
  v28 = v15 & 0x1FFFFFFFFFFFFFE0;
  v30.i64[0] = 0xA5A5A5A5A5A5A5A5;
  v30.i64[1] = 0xA5A5A5A5A5A5A5A5;
  do
  {
    v31 = (int8x16_t *)(v13 + v29);
    v32 = veorq_s8(*(int8x16_t *)(v13 + v29 + 16), v30);
    *v31 = veorq_s8(*(int8x16_t *)(v13 + v29), v30);
    v31[1] = v32;
    v29 += 32;
  }
  while (v28 != v29);
  if (v15 != v28)
  {
    if ((v6 & 0xC0) == 0)
    {
      v27 = (_BYTE *)(v13 + v28);
      goto LABEL_28;
    }
LABEL_23:
    v33 = v15 & 0x1FFFFFFFFFFFFFF8;
    v27 = (_BYTE *)(v13 + (v15 & 0x1FFFFFFFFFFFFFF8));
    do
    {
      *(int8x8_t *)(v13 + v28) = veor_s8(*(int8x8_t *)(v13 + v28), (int8x8_t)0xA5A5A5A5A5A5A5A5);
      v28 += 8;
    }
    while (v33 != v28);
    if (v15 == v33)
      goto LABEL_29;
    do
LABEL_28:
      *v27++ ^= 0xA5u;
    while (v27 != v14);
  }
LABEL_29:
  if (v7 != v5)
    *(v14 - 1) ^= (-1 << v8) & 0xA5 ^ 0xA5;
  if ((_BYTE *)v13 != v14)
  {
    v34 = v14 - 1;
    if ((unint64_t)(v14 - 1) > v13)
    {
      v35 = v13 + 1;
      do
      {
        v36 = *(_BYTE *)(v35 - 1);
        *(_BYTE *)(v35 - 1) = *v34;
        *v34-- = v36;
        v37 = v35++ >= (unint64_t)v34;
      }
      while (!v37);
    }
  }
  if (v176)
    operator delete(v176);
  v38 = (size_t)&v14[-v13];
  v161 = *(_QWORD *)(a1 + 8);
  v39 = 8 * (_QWORD)&v14[-v13];
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v40 = v39 >> 6;
  if (!v39)
  {
    v44 = 0;
    v46 = -v161;
    if (v14 == (_BYTE *)v13)
      goto LABEL_69;
    goto LABEL_50;
  }
  if ((v39 & 0x8000000000000000) != 0)
    sub_207D159B0();
  v41 = v14;
  v42 = (v39 - 1) >> 6;
  v43 = operator new(8 * (v42 + 1));
  v44 = v43;
  v177 = v39;
  v178 = v42 + 1;
  v176 = (char *)v43;
  if (v39 >= 0x41)
    v45 = (v39 - 1) >> 6;
  else
    v45 = 0;
  v43[v45] = 0;
  if (v39 >= 0x40)
    bzero(v43, 8 * v40);
  v14 = v41;
  if ((v39 & 0x38) != 0)
    v44[v40] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v39 & 0x38));
  v46 = v39 - v161;
  if (v41 != (_BYTE *)v13)
  {
LABEL_50:
    v47 = 0;
    v48 = (char *)v13;
    v49 = v38;
    while (1)
    {
      v51 = *v48++;
      v50 = v51;
      v52 = (v47 + 7) >> 6;
      v53 = 1 << (v47 + 7);
      if ((v51 & 1) != 0)
      {
        v44[v52] |= v53;
        v54 = (v47 + 6) >> 6;
        v55 = 1 << ((v47 + 6) & 0x3E);
        if ((v50 & 2) == 0)
          goto LABEL_62;
LABEL_54:
        v44[v54] |= v55;
        v56 = (v47 + 5) >> 6;
        v57 = 1 << ((v47 + 5) & 0x3D);
        if ((v50 & 4) != 0)
          goto LABEL_55;
LABEL_63:
        v44[v56] &= ~v57;
        v58 = (v47 + 4) >> 6;
        v59 = 1 << ((v47 + 4) & 0x3C);
        if ((v50 & 8) == 0)
          goto LABEL_64;
LABEL_56:
        v44[v58] |= v59;
        v60 = (v47 + 3) >> 6;
        v61 = 1 << ((v47 + 3) & 0x3B);
        if ((v50 & 0x10) != 0)
          goto LABEL_57;
LABEL_65:
        v44[v60] &= ~v61;
        v62 = (v47 + 2) >> 6;
        v63 = 1 << ((v47 + 2) & 0x3A);
        if ((v50 & 0x20) == 0)
          goto LABEL_66;
LABEL_58:
        v44[v62] |= v63;
        v64 = (v47 + 1) >> 6;
        v65 = 1 << ((v47 + 1) & 0x39);
        if ((v50 & 0x40) != 0)
          goto LABEL_59;
LABEL_67:
        v44[v64] &= ~v65;
        v66 = v47 >> 6;
        v67 = 1 << (v47 & 0x38);
        if ((v50 & 0x80) == 0)
          goto LABEL_51;
LABEL_68:
        v44[v66] |= v67;
        v47 += 8;
        if (!--v49)
          break;
      }
      else
      {
        v44[v52] &= ~v53;
        v54 = (v47 + 6) >> 6;
        v55 = 1 << ((v47 + 6) & 0x3E);
        if ((v50 & 2) != 0)
          goto LABEL_54;
LABEL_62:
        v44[v54] &= ~v55;
        v56 = (v47 + 5) >> 6;
        v57 = 1 << ((v47 + 5) & 0x3D);
        if ((v50 & 4) == 0)
          goto LABEL_63;
LABEL_55:
        v44[v56] |= v57;
        v58 = (v47 + 4) >> 6;
        v59 = 1 << ((v47 + 4) & 0x3C);
        if ((v50 & 8) != 0)
          goto LABEL_56;
LABEL_64:
        v44[v58] &= ~v59;
        v60 = (v47 + 3) >> 6;
        v61 = 1 << ((v47 + 3) & 0x3B);
        if ((v50 & 0x10) == 0)
          goto LABEL_65;
LABEL_57:
        v44[v60] |= v61;
        v62 = (v47 + 2) >> 6;
        v63 = 1 << ((v47 + 2) & 0x3A);
        if ((v50 & 0x20) != 0)
          goto LABEL_58;
LABEL_66:
        v44[v62] &= ~v63;
        v64 = (v47 + 1) >> 6;
        v65 = 1 << ((v47 + 1) & 0x39);
        if ((v50 & 0x40) == 0)
          goto LABEL_67;
LABEL_59:
        v44[v64] |= v65;
        v66 = v47 >> 6;
        v67 = 1 << (v47 & 0x38);
        if (v50 < 0)
          goto LABEL_68;
LABEL_51:
        v44[v66] &= ~v67;
        v47 += 8;
        if (!--v49)
          break;
      }
    }
  }
LABEL_69:
  v160 = v14;
  v174 = 0;
  v175 = 0;
  v68 = v46;
  v69 = -(int)v46 & 7;
  __p = 0;
  v168 = v44;
  LODWORD(v169) = 0;
  v165 = v44;
  LODWORD(v166) = -(int)v46 & 7;
  sub_2081053E8(&__p, (uint64_t)&v168, (uint64_t)&v165, v166);
  v70 = v68 + v69 - 63;
  if (v70 < 0)
    v70 = v68 + v69;
  v71 = v70 >> 6;
  v72 = (unint64_t)(v68 + v69) >> 6;
  if (v68 < 0)
    v72 = v71;
  v73 = (v69 + v68) & 0x3F;
  v74 = v39 & 0x38;
  if (v72 != v40 || v73 != v74)
  {
    v76 = &v44[v40];
    v77 = &v44[v72];
    do
    {
      v78 = *v77;
      v79 = v174;
      if (v174 == v175 << 6)
      {
        if ((uint64_t)(v174 + 1) < 0)
          sub_207D159B0();
        v80 = v175 << 7;
        if (v175 << 7 <= (v174 & 0xFFFFFFFFFFFFFFC0) + 64)
          v80 = (v174 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v174 <= 0x3FFFFFFFFFFFFFFELL)
          v81 = v80;
        else
          v81 = 0x7FFFFFFFFFFFFFFFLL;
        sub_207D1C104((uint64_t)&__p, v81);
        v79 = v174;
      }
      v174 = v79 + 1;
      v82 = v79 >> 6;
      v83 = 1 << v79;
      if (((1 << v73) & v78) != 0)
        v84 = *((_QWORD *)__p + v82) | v83;
      else
        v84 = *((_QWORD *)__p + v82) & ~v83;
      *((_QWORD *)__p + v82) = v84;
      v77 += v73 == 63;
      if (v73 == 63)
        v73 = 0;
      else
        ++v73;
    }
    while (v77 != v76 || v73 != v74);
  }
  v85 = *a2;
  v86 = 8 * (v85 == 110);
  v87 = (v174 & 0x3F) - v86;
  if (v87 <= 0x3F)
    v88 = 0;
  else
    v88 = -1;
  v89 = v87 >> 6;
  if (v85 == 110)
    v89 = v88;
  v169 = 0;
  v170 = 0;
  v90 = ((_BYTE)v174 - (_BYTE)v86) & 0x3F;
  v168 = 0;
  v165 = __p;
  LODWORD(v166) = 0;
  v162 = (char *)__p + 8 * (v174 >> 6) + 8 * v89;
  LODWORD(v163) = v90;
  sub_2081053E8(&v168, (uint64_t)&v165, (uint64_t)&v162, v90 + 8 * (8 * (v174 >> 6) + 8 * v89));
  v91 = *a2;
  v92 = 8 * (v91 == 110);
  v93 = (v174 & 0x3F) - v92;
  if (v93 <= 0x3F)
    v94 = 0;
  else
    v94 = -1;
  v95 = v93 >> 6;
  if (v91 == 110)
    v95 = v94;
  v166 = 0;
  v167 = 0;
  v96 = ((_BYTE)v174 - (_BYTE)v92) & 0x3F;
  v165 = 0;
  v162 = (char *)__p + 8 * (v174 >> 6) + 8 * v95;
  LODWORD(v163) = v96;
  v171 = (char *)__p + 8 * (v174 >> 6);
  v172 = v174 & 0x3F;
  sub_2081053E8(&v165, (uint64_t)&v162, (uint64_t)&v171, (v174 & 0x3F) - v96 - (v95 << 6));
  v162 = 0;
  v163 = 0;
  v164 = 0;
  if (*a2 == 8)
  {
    v97 = 0;
    v98 = 0;
    v99 = (uint64_t *)v168;
    v100 = (uint64_t *)v168;
    do
    {
      v101 = *v100;
      v102 = v163;
      if (v163 == v164 << 6)
      {
        if ((uint64_t)(v163 + 1) < 0)
          goto LABEL_220;
        v103 = v164 << 7;
        if (v164 << 7 <= (v163 & 0xFFFFFFFFFFFFFFC0) + 64)
          v103 = (v163 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v163 <= 0x3FFFFFFFFFFFFFFELL)
          v104 = v103;
        else
          v104 = 0x7FFFFFFFFFFFFFFFLL;
        sub_207D1C104((uint64_t)&v162, v104);
        v97 = v162;
        v102 = v163;
      }
      v163 = v102 + 1;
      v105 = v102 >> 6;
      v106 = 1 << v102;
      if (((1 << v98) & v101) != 0)
        v107 = v97[v105] | v106;
      else
        v107 = v97[v105] & ~v106;
      v97[v105] = v107;
      v100 += v98 == 63;
      if (v98 == 63)
        v98 = 0;
      else
        ++v98;
    }
    while (v100 != v99 || v98 != 10);
    if (v68)
    {
      v108 = v161 + 8 * v13 - 8 * (_QWORD)v160;
      do
      {
        v109 = v163;
        if (v163 == v164 << 6)
        {
          if ((uint64_t)(v163 + 1) < 0)
            sub_207D159B0();
          v110 = v164 << 7;
          if (v164 << 7 <= (v163 & 0xFFFFFFFFFFFFFFC0) + 64)
            v110 = (v163 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v163 <= 0x3FFFFFFFFFFFFFFELL)
            v111 = v110;
          else
            v111 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v162, v111);
          v97 = v162;
          v109 = v163;
        }
        v163 = v109 + 1;
        *(_QWORD *)((char *)v97 + ((v109 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v109);
        v37 = __CFADD__(v108++, 1);
      }
      while (!v37);
    }
    v114 = (char *)v168;
    v115 = v169 & 0x3F;
    if (v169 > 0x3F || v115 != 10)
    {
      v116 = (char *)v168 + 8 * (v169 >> 6);
      v117 = 10;
      do
      {
        v118 = *(_QWORD *)v114;
        v119 = v163;
        if (v163 == v164 << 6)
        {
          if ((uint64_t)(v163 + 1) < 0)
            sub_207D159B0();
          v120 = v164 << 7;
          if (v164 << 7 <= (v163 & 0xFFFFFFFFFFFFFFC0) + 64)
            v120 = (v163 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v163 <= 0x3FFFFFFFFFFFFFFELL)
            v121 = v120;
          else
            v121 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v162, v121);
          v97 = v162;
          v119 = v163;
        }
        v163 = v119 + 1;
        v122 = v119 >> 6;
        v123 = 1 << v119;
        if (((1 << v117) & v118) != 0)
          v124 = v97[v122] | v123;
        else
          v124 = v97[v122] & ~v123;
        v97[v122] = v124;
        v114 += 8 * (v117 == 63);
        if (v117 == 63)
          v117 = 0;
        else
          ++v117;
      }
      while (v114 != v116 || v117 != v115);
    }
  }
  else
  {
    v112 = (char *)v165;
    v113 = v166 & 0x3F;
    if (v166 > 0x3F || (v166 & 0x3F) != 0)
    {
      v97 = 0;
      v125 = 0;
      v126 = (char *)v165 + 8 * (v166 >> 6);
      do
      {
        v127 = *(_QWORD *)v112;
        v128 = v163;
        if (v163 == v164 << 6)
        {
          if ((uint64_t)(v163 + 1) < 0)
LABEL_220:
            sub_207D159B0();
          v129 = v164 << 7;
          if (v164 << 7 <= (v163 & 0xFFFFFFFFFFFFFFC0) + 64)
            v129 = (v163 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v163 <= 0x3FFFFFFFFFFFFFFELL)
            v130 = v129;
          else
            v130 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v162, v130);
          v97 = v162;
          v128 = v163;
        }
        v163 = v128 + 1;
        v131 = v128 >> 6;
        v132 = 1 << v128;
        if (((1 << v125) & v127) != 0)
          v133 = v97[v131] | v132;
        else
          v133 = v97[v131] & ~v132;
        v97[v131] = v133;
        v112 += 8 * (v125 == 63);
        if (v125 == 63)
          v125 = 0;
        else
          ++v125;
      }
      while (v112 != v126 || v125 != v113);
    }
    else
    {
      v97 = 0;
    }
    if (v68)
    {
      v134 = v161 + 8 * v13 - 8 * (_QWORD)v160;
      do
      {
        v135 = v163;
        if (v163 == v164 << 6)
        {
          if ((uint64_t)(v163 + 1) < 0)
            sub_207D159B0();
          v136 = v164 << 7;
          if (v164 << 7 <= (v163 & 0xFFFFFFFFFFFFFFC0) + 64)
            v136 = (v163 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v163 <= 0x3FFFFFFFFFFFFFFELL)
            v137 = v136;
          else
            v137 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v162, v137);
          v97 = v162;
          v135 = v163;
        }
        v163 = v135 + 1;
        *(_QWORD *)((char *)v97 + ((v135 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v135);
        v37 = __CFADD__(v134++, 1);
      }
      while (!v37);
    }
    v138 = (char *)v168;
    v139 = v169 & 0x3F;
    if (v169 > 0x3F || (v169 & 0x3F) != 0)
    {
      v140 = 0;
      v141 = (char *)v168 + 8 * (v169 >> 6);
      do
      {
        v142 = *(_QWORD *)v138;
        v143 = v163;
        if (v163 == v164 << 6)
        {
          if ((uint64_t)(v163 + 1) < 0)
            goto LABEL_220;
          v144 = v164 << 7;
          if (v164 << 7 <= (v163 & 0xFFFFFFFFFFFFFFC0) + 64)
            v144 = (v163 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v163 <= 0x3FFFFFFFFFFFFFFELL)
            v145 = v144;
          else
            v145 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v162, v145);
          v97 = v162;
          v143 = v163;
        }
        v163 = v143 + 1;
        v146 = v143 >> 6;
        v147 = 1 << v143;
        if (((1 << v140) & v142) != 0)
          v148 = v97[v146] | v147;
        else
          v148 = v97[v146] & ~v147;
        v97[v146] = v148;
        v138 += 8 * (v140 == 63);
        if (v140 == 63)
          v140 = 0;
        else
          ++v140;
      }
      while (v138 != v141 || v140 != v139);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v160 != (_BYTE *)v13)
  {
    if ((v38 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v149 = operator new(v38);
    *a3 = v149;
    a3[2] = &v149[v38];
    bzero(v149, v38);
    v150 = 0;
    a3[1] = &v149[v38];
    do
    {
      v151 = (v150 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v152 = *v149 | ((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38)) << 7);
      *v149 = v152;
      v153 = v152 | (((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 1)) & 1) << 6);
      *v149 = v153;
      v154 = v153 | (32 * ((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 2)) & 1));
      *v149 = v154;
      v155 = v154 | (16 * ((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 3)) & 1));
      *v149 = v155;
      v156 = v155 | (8 * ((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 4)) & 1));
      *v149 = v156;
      v157 = v156 | (4 * ((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 5)) & 1));
      *v149 = v157;
      v158 = v157 | (2 * ((*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 6)) & 1));
      *v149 = v158;
      *v149++ = v158 | (*(_QWORD *)((char *)v97 + v151) >> (v150 & 0x38 | 7)) & 1;
      v150 += 8;
      --v38;
    }
    while (v38);
  }
  if (v162)
    operator delete(v162);
  if (v165)
    operator delete(v165);
  if (v168)
    operator delete(v168);
  if (__p)
    operator delete(__p);
  if (v176)
    operator delete(v176);
  if (v13)
    operator delete((void *)v13);
}

void sub_20810AA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 112);
  if (v28)
    operator delete(v28);
  _Unwind_Resume(exception_object);
}

void sub_20810ABC0(_QWORD **a1@<X0>, int64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char v3;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int8x16_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int8x16_t *v26;
  int8x16_t *v27;
  uint64_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x8_t *v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  __int8 v37;
  BOOL v38;
  _QWORD *v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  uint64_t v43;
  __int8 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__p[3];
  char *v66;
  int v67;
  char *v68;
  int v69;

  v6 = a2 + 7;
  v7 = *a1;
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  if (((v6 & 0x8000000000000000) != 0) != v3)
  {
    v10 = v8 - 63;
    if ((uint64_t)(v8 - 63) < 0)
      v10 = v6 & 0xFFFFFFFFFFFFFFF8;
    v9 = v10 >> 6;
  }
  else
  {
    v9 = v6 >> 6;
  }
  v11 = v6 & 0x38;
  memset(__p, 0, sizeof(__p));
  sub_20810B2E0(__p, v7, 0, &v7[v9], v6 & 0x38, v11 | (v9 << 6));
  if (v6 > 7)
  {
    v14 = v6 >> 3;
    v13 = (int8x16_t *)operator new(v6 >> 3);
    bzero(v13, v6 >> 3);
    v15 = 0;
    v16 = 0;
    v17 = (char *)__p[0];
    do
    {
      v18 = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v19 = v13->u8[v16] | ((*(_QWORD *)&v17[v18] >> (v15 & 0x38)) << 7);
      v13->i8[v16] = v19;
      v20 = v19 | (((*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 1)) & 1) << 6);
      v13->i8[v16] = v20;
      v21 = v20 | (32 * ((*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 2)) & 1));
      v13->i8[v16] = v21;
      v22 = v21 | (16 * ((*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 3)) & 1));
      v13->i8[v16] = v22;
      v23 = v22 | (8 * ((*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 4)) & 1));
      v13->i8[v16] = v23;
      v24 = v23 | (4 * ((*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 5)) & 1));
      v13->i8[v16] = v24;
      v25 = v24 | (2 * ((*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 6)) & 1));
      v13->i8[v16] = v25;
      v13->i8[v16++] = v25 | (*(_QWORD *)&v17[v18] >> (v15 & 0x38 | 7)) & 1;
      v15 += 8;
    }
    while (v14 != v16);
    v26 = (int8x16_t *)((char *)v13 + v14);
    v27 = v13;
    if (v6 >= 0x40)
    {
      if (v6 < 0x100)
      {
        v28 = 0;
        goto LABEL_17;
      }
      v28 = v14 & 0x1FFFFFFFFFFFFFE0;
      v29 = v13 + 1;
      v30.i64[0] = 0xA5A5A5A5A5A5A5A5;
      v30.i64[1] = 0xA5A5A5A5A5A5A5A5;
      v31 = v14 & 0x1FFFFFFFFFFFFFE0;
      do
      {
        v32 = veorq_s8(*v29, v30);
        v29[-1] = veorq_s8(v29[-1], v30);
        *v29 = v32;
        v29 += 2;
        v31 -= 32;
      }
      while (v31);
      if (v14 == v28)
        goto LABEL_23;
      if ((v6 & 0xC0) != 0)
      {
LABEL_17:
        v27 = (int8x16_t *)((char *)v13 + (v14 & 0x1FFFFFFFFFFFFFF8));
        v33 = (int8x8_t *)&v13->i8[v28];
        v34 = v28 - (v14 & 0x1FFFFFFFFFFFFFF8);
        do
        {
          *v33 = veor_s8(*v33, (int8x8_t)0xA5A5A5A5A5A5A5A5);
          ++v33;
          v34 += 8;
        }
        while (v34);
        if (v14 == (v14 & 0x1FFFFFFFFFFFFFF8))
          goto LABEL_23;
        goto LABEL_22;
      }
      v27 = (int8x16_t *)((char *)v13 + v28);
    }
    do
    {
LABEL_22:
      v27->i8[0] ^= 0xA5u;
      v27 = (int8x16_t *)((char *)v27 + 1);
    }
    while (v27 != v26);
LABEL_23:
    v35 = (int8x16_t *)((char *)v26 - 1);
    if (v35 > v13)
    {
      v36 = (int8x16_t *)&v13->i8[1];
      do
      {
        v37 = v36[-1].i8[15];
        v36[-1].i8[15] = v35->i8[0];
        v35->i8[0] = v37;
        v35 = (int8x16_t *)((char *)v35 - 1);
        v38 = v36 >= v35;
        v36 = (int8x16_t *)((char *)v36 + 1);
      }
      while (!v38);
    }
    if (v8)
    {
      if ((v6 & 0x8000000000000000) != 0)
        sub_207D159B0();
      v39 = operator new(8 * (((v8 - 1) >> 6) + 1));
      v12 = v39;
      if (v8 >= 0x41)
        v40 = (v8 - 1) >> 6;
      else
        v40 = 0;
      v39[v40] = 0;
      v41 = v6 >> 6;
      if (v8 >= 0x40)
        bzero(v39, v41 * 8);
      if (v11)
        v12[v41] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v11);
    }
    else
    {
      v12 = 0;
    }
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v44 = v13->i8[v43];
      v45 = (v42 + 7) >> 6;
      v46 = 1 << (v42 + 7);
      if ((v44 & 1) != 0)
      {
        v12[v45] |= v46;
        v47 = (v42 + 6) >> 6;
        v48 = 1 << ((v42 + 6) & 0x3E);
        if ((v44 & 2) == 0)
          goto LABEL_49;
LABEL_41:
        v12[v47] |= v48;
        v49 = (v42 + 5) >> 6;
        v50 = 1 << ((v42 + 5) & 0x3D);
        if ((v44 & 4) != 0)
          goto LABEL_42;
LABEL_50:
        v12[v49] &= ~v50;
        v51 = (v42 + 4) >> 6;
        v52 = 1 << ((v42 + 4) & 0x3C);
        if ((v44 & 8) == 0)
          goto LABEL_51;
LABEL_43:
        v12[v51] |= v52;
        v53 = (v42 + 3) >> 6;
        v54 = 1 << ((v42 + 3) & 0x3B);
        if ((v44 & 0x10) != 0)
          goto LABEL_44;
LABEL_52:
        v12[v53] &= ~v54;
        v55 = (v42 + 2) >> 6;
        v56 = 1 << ((v42 + 2) & 0x3A);
        if ((v44 & 0x20) == 0)
          goto LABEL_53;
LABEL_45:
        v12[v55] |= v56;
        v57 = (v42 + 1) >> 6;
        v58 = 1 << ((v42 + 1) & 0x39);
        if ((v44 & 0x40) != 0)
          goto LABEL_46;
LABEL_54:
        v12[v57] &= ~v58;
        v59 = v42 >> 6;
        v60 = 1 << (v42 & 0x38);
        if ((v44 & 0x80) == 0)
          goto LABEL_38;
LABEL_55:
        ++v43;
        v12[v59] |= v60;
        v42 += 8;
        if (v14 == v43)
          goto LABEL_56;
      }
      else
      {
        v12[v45] &= ~v46;
        v47 = (v42 + 6) >> 6;
        v48 = 1 << ((v42 + 6) & 0x3E);
        if ((v44 & 2) != 0)
          goto LABEL_41;
LABEL_49:
        v12[v47] &= ~v48;
        v49 = (v42 + 5) >> 6;
        v50 = 1 << ((v42 + 5) & 0x3D);
        if ((v44 & 4) == 0)
          goto LABEL_50;
LABEL_42:
        v12[v49] |= v50;
        v51 = (v42 + 4) >> 6;
        v52 = 1 << ((v42 + 4) & 0x3C);
        if ((v44 & 8) != 0)
          goto LABEL_43;
LABEL_51:
        v12[v51] &= ~v52;
        v53 = (v42 + 3) >> 6;
        v54 = 1 << ((v42 + 3) & 0x3B);
        if ((v44 & 0x10) == 0)
          goto LABEL_52;
LABEL_44:
        v12[v53] |= v54;
        v55 = (v42 + 2) >> 6;
        v56 = 1 << ((v42 + 2) & 0x3A);
        if ((v44 & 0x20) != 0)
          goto LABEL_45;
LABEL_53:
        v12[v55] &= ~v56;
        v57 = (v42 + 1) >> 6;
        v58 = 1 << ((v42 + 1) & 0x39);
        if ((v44 & 0x40) == 0)
          goto LABEL_54;
LABEL_46:
        v12[v57] |= v58;
        v59 = v42 >> 6;
        v60 = 1 << (v42 & 0x38);
        if (v44 < 0)
          goto LABEL_55;
LABEL_38:
        ++v43;
        v12[v59] &= ~v60;
        v42 += 8;
        if (v14 == v43)
          goto LABEL_56;
      }
    }
  }
  v12 = 0;
  v8 = 0;
  v13 = 0;
LABEL_56:
  if ((uint64_t)v8 >= a2)
    v61 = a2;
  else
    v61 = v8;
  v62 = v8 - v61;
  if (v62 < 0)
  {
    v64 = v62 - 63;
    if (v62 - 63 < 0)
      v64 = v62;
    v63 = v64 >> 6;
  }
  else
  {
    v63 = (unint64_t)v62 >> 6;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v68 = (char *)&v12[v63];
  v69 = v62 & 0x3F;
  v66 = (char *)&v12[v8 >> 6];
  v67 = v8 & 0x38;
  sub_2081053E8(a3, (uint64_t)&v68, (uint64_t)&v66, (v8 & 0x38) - (v62 & 0x3F) + 8 * (8 * (v8 >> 6) - 8 * v63));
  if (v12)
    operator delete(v12);
  if (v13)
    operator delete(v13);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20810B19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20810B200(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C088330;
  result[1] = v3;
  return result;
}

uint64_t sub_20810B234(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C088330;
  a2[1] = v2;
  return result;
}

BOOL sub_20810B250(uint64_t a1, _QWORD *a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 8) + *a2) == 0;
}

uint64_t sub_20810B268(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6_NS4_IS6_EE"
                     "EERKNS1_6FormatEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6"
                                "_NS4_IS6_EEEERKNS1_6FormatEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6_NS4_IS6_EEEERKNS1_6FormatEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6_NS4_IS6_EEEERKNS1_6FormatEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20810B2D4()
{
  return &unk_24C0883A0;
}

_QWORD *sub_20810B2E0(_QWORD *result, _QWORD *a2, int a3, _QWORD *a4, int a5, unint64_t a6)
{
  _QWORD *v7;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (a6)
  {
    v7 = result;
    if ((a6 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v12 = (a6 - 1) >> 6;
    result = operator new(8 * (v12 + 1));
    v7[1] = a6;
    v7[2] = v12 + 1;
    *v7 = result;
    if (a6 >= 0x41)
      v13 = (a6 - 1) >> 6;
    else
      v13 = 0;
    result[v13] = 0;
    if (a2 != a4 || a3 != a5)
    {
      v14 = 0;
      do
      {
        v15 = 1 << v14;
        if (((*a2 >> a3) & 1) != 0)
          v16 = *result | v15;
        else
          v16 = *result & ~v15;
        *result = v16;
        a2 += a3 == 63;
        if (a3 == 63)
          a3 = 0;
        else
          ++a3;
        result += v14 == 63;
        if (v14 == 63)
          v14 = 0;
        else
          ++v14;
      }
      while (a2 != a4 || a3 != a5);
    }
  }
  return result;
}

void sub_20810B3D8(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20810B3F0(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v19 = *a1;
  v4 = v20;
  v5 = (uint64_t *)a1[4];
  if (v5)
  {
    if (v5 == a1 + 1)
    {
      v21 = v20;
      (*(void (**)(uint64_t *, _BYTE *))(*v5 + 24))(v5, v20);
    }
    else
    {
      v21 = (_BYTE *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = a1[5];
  v15 = *a2;
  v6 = v16;
  v7 = a2[4];
  if (!v7)
    goto LABEL_9;
  if ((uint64_t *)v7 != a2 + 1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_9:
    v17 = (_BYTE *)v7;
    goto LABEL_11;
  }
  v17 = v16;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v16);
LABEL_11:
  v18 = a2[5];
  v8 = v19;
  v9 = v15;
  if (v19 == v15)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v8 += 8;
      v19 = v8;
      if (v8 != v22)
      {
        do
        {
          if (!v21)
            sub_207CA408C();
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v21 + 48))(v21);
          v8 = v19;
          if ((v11 & 1) != 0)
            break;
          v8 = v19 + 8;
          v19 = v8;
        }
        while (v8 != v22);
        v9 = v15;
      }
      ++v10;
    }
    while (v8 != v9);
  }
  if (v17 == v16)
  {
    v12 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_26;
    v12 = 5;
    v6 = v17;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v12))(v6);
LABEL_26:
  if (v21 == v20)
  {
    v13 = 4;
    goto LABEL_30;
  }
  if (v21)
  {
    v13 = 5;
    v4 = v21;
LABEL_30:
    (*(void (**)(_QWORD *))(*v4 + 8 * v13))(v4);
  }
  return v10;
}

void sub_20810B5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (a20 == v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    _Unwind_Resume(exception_object);
  }
  if (!a20)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a20 + 40))(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20810B674(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;
  uint64_t *v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;
  uint64_t *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t *v61;
  uint64_t *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v38 = *a2;
  v7 = v39;
  v8 = a2[4];
  if (!v8)
    goto LABEL_4;
  if ((uint64_t *)v8 != a2 + 1)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_4:
    v40 = (_QWORD *)v8;
    goto LABEL_6;
  }
  v40 = v39;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 24))(v8, v39);
LABEL_6:
  v41 = a2[5];
  v34 = *a3;
  v9 = v35;
  v10 = a3[4];
  if (!v10)
  {
LABEL_9:
    v36 = (_QWORD *)v10;
    goto LABEL_11;
  }
  if ((uint64_t *)v10 != a3 + 1)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_9;
  }
  v36 = v35;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v35);
LABEL_11:
  v37 = a3[5];
  v11 = (uint64_t)v40;
  v54 = v38;
  v12 = v55;
  if (!v40)
  {
LABEL_14:
    v56 = (_BYTE *)v11;
    goto LABEL_16;
  }
  if (v40 != v39)
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*v40 + 16))(v40);
    goto LABEL_14;
  }
  v56 = v55;
  (*(void (**)(_QWORD *, _BYTE *))(v39[0] + 24))(v39, v55);
LABEL_16:
  v57 = v41;
  v13 = (uint64_t)v36;
  v50 = v34;
  v14 = v51;
  if (!v36)
  {
LABEL_19:
    v52 = (_BYTE *)v13;
    goto LABEL_21;
  }
  if (v36 != v35)
  {
    v13 = (*(uint64_t (**)(void))(*v36 + 16))();
    goto LABEL_19;
  }
  v52 = v51;
  (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, v51);
LABEL_21:
  v53 = v37;
  sub_20810C9B8(&v58, &v54, &v50);
  if (v52 == v51)
  {
    v15 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_26;
    v15 = 5;
    v14 = v52;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_26:
  if (v56 == v55)
  {
    v16 = 4;
  }
  else
  {
    if (!v56)
      goto LABEL_31;
    v16 = 5;
    v12 = v56;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v16))(v12);
LABEL_31:
  v17 = (uint64_t)v60;
  v46 = v58;
  v18 = v47;
  if (!v60)
  {
LABEL_34:
    v48 = (_BYTE *)v17;
    goto LABEL_36;
  }
  if (v60 != v59)
  {
    v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v60 + 16))(v60);
    goto LABEL_34;
  }
  v48 = v47;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v60 + 24))(v60, v47);
LABEL_36:
  v49 = v61;
  v42 = v62;
  v19 = v43;
  v20 = (uint64_t)v64;
  if (!v64)
  {
LABEL_39:
    v44 = (_BYTE *)v20;
    goto LABEL_41;
  }
  if (v64 != v63)
  {
    v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v64 + 16))(v64);
    goto LABEL_39;
  }
  v44 = v43;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v64 + 24))(v64, v43);
LABEL_41:
  v45 = v65;
  v21 = v46;
  v22 = v42;
  if (v46 == v42)
  {
    v23 = v6;
  }
  else
  {
    v23 = v6;
    do
    {
      v24 = *v21++;
      *v23 = v24;
      v46 = v21;
      if (v21 != v49)
      {
        do
        {
          if (!v48)
            sub_207CA408C();
          v25 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v48 + 48))(v48);
          v21 = v46;
          if ((v25 & 1) != 0)
            break;
          v21 = v46 + 1;
          v46 = v21;
        }
        while (v21 != v49);
        v22 = v42;
      }
      ++v23;
    }
    while (v21 != v22);
  }
  if (v44 == v43)
  {
    v26 = 4;
  }
  else
  {
    if (!v44)
      goto LABEL_56;
    v26 = 5;
    v19 = v44;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v26))(v19);
LABEL_56:
  if (v48 == v47)
  {
    v27 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_61;
    v27 = 5;
    v18 = v48;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v27))(v18);
LABEL_61:
  v28 = v64;
  if (v64 == v63)
  {
    v29 = 4;
    v28 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_66;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_66:
  result = v60;
  if (v60 == v59)
  {
    v31 = 4;
    result = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_71;
    v31 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
LABEL_71:
  if (v36 == v35)
  {
    v32 = 4;
  }
  else
  {
    if (!v36)
      goto LABEL_76;
    v32 = 5;
    v9 = v36;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v32))(v9);
LABEL_76:
  if (v40 == v39)
  {
    v33 = 4;
    goto LABEL_80;
  }
  if (v40)
  {
    v33 = 5;
    v7 = v40;
LABEL_80:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v33))(v7);
  }
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void sub_20810BB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a32 == v35)
  {
    v39 = 4;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v39 = 5;
    v35 = a32;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v39))(v35);
LABEL_6:
  sub_208109A30((_QWORD *)(v37 - 168));
  if (a14 == v34)
  {
    v40 = 4;
  }
  else
  {
    if (!a14)
      goto LABEL_11;
    v40 = 5;
    v34 = a14;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v40))(v34);
LABEL_11:
  if (a20 == v33)
  {
    v41 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_16;
    v41 = 5;
    v33 = a20;
  }
  (*(void (**)(_QWORD *))(*v33 + 8 * v41))(v33);
LABEL_16:
  *(_QWORD *)(v32 + 8) = v36;
  _Unwind_Resume(a1);
}

_QWORD *sub_20810BC74(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[3];
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[3];
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  _QWORD v94[3];
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD v98[3];
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD v102[3];
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  _BYTE v106[24];
  _BYTE *v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD v110[3];
  _QWORD *v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD v114[3];
  _QWORD *v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  _BYTE v119[24];
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[24];
  _BYTE *v124;
  uint64_t v125;
  uint64_t *v126;
  _BYTE v127[24];
  _BYTE *v128;
  uint64_t *v129;
  uint64_t *v130;
  _BYTE v131[24];
  _BYTE *v132;
  uint64_t v133;
  uint64_t *v134;
  _QWORD v135[3];
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  _QWORD v139[3];
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD v143[3];
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD v147[3];
  _QWORD *v148;
  uint64_t v149;
  uint64_t *v150;
  _QWORD v151[3];
  _QWORD *v152;
  uint64_t *v153;
  uint64_t v154;
  _BYTE v155[24];
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v81 = *a2;
  v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      v83 = v82;
      (*(void (**)(uint64_t *, _QWORD *))(*v8 + 24))(v8, v82);
    }
    else
    {
      v83 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v83 = 0;
  }
  v84 = a2[5];
  v77 = *a3;
  v9 = (uint64_t *)a3[4];
  if (v9)
  {
    if (v9 == a3 + 1)
    {
      v79 = v78;
      (*(void (**)(uint64_t *, _QWORD *))(*v9 + 24))(v9, v78);
    }
    else
    {
      v79 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v79 = 0;
  }
  v80 = a3[5];
  v89 = v81;
  v10 = &v89;
  if (!v83)
    goto LABEL_14;
  if (v83 != v82)
  {
    v10 = &v81;
    v91 = v83;
LABEL_14:
    v10[4] = 0;
    goto LABEL_16;
  }
  v91 = v90;
  (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v90);
LABEL_16:
  v92 = v84;
  v85 = v77;
  v11 = &v85;
  if (!v79)
  {
LABEL_19:
    v11[4] = 0;
    goto LABEL_21;
  }
  if (v79 != v78)
  {
    v11 = &v77;
    v87 = v79;
    goto LABEL_19;
  }
  v87 = v86;
  (*(void (**)(_QWORD *, _QWORD *))(v78[0] + 24))(v78, v86);
LABEL_21:
  v88 = v80;
  v12 = (uint64_t)v91;
  v122 = v89;
  v13 = v123;
  if (!v91)
  {
LABEL_24:
    v124 = (_BYTE *)v12;
    goto LABEL_26;
  }
  if (v91 != v90)
  {
    v12 = (*(uint64_t (**)(void))(*v91 + 16))();
    goto LABEL_24;
  }
  v124 = v123;
  (*(void (**)(_QWORD *, _BYTE *))(v90[0] + 24))(v90, v123);
LABEL_26:
  v125 = v92;
  v118 = v85;
  v14 = &v118;
  v15 = v119;
  if (!v87)
  {
LABEL_29:
    v14[4] = 0;
    goto LABEL_31;
  }
  if (v87 != v86)
  {
    v14 = &v85;
    v120 = v87;
    goto LABEL_29;
  }
  v120 = v119;
  (*(void (**)(_QWORD *, _BYTE *))(v86[0] + 24))(v86, v119);
LABEL_31:
  v121 = v88;
  sub_20810C9B8(&v126, &v122, &v118);
  if (v120 == v119)
  {
    v16 = 4;
  }
  else
  {
    if (!v120)
      goto LABEL_36;
    v16 = 5;
    v15 = v120;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
LABEL_36:
  if (v124 == v123)
  {
    v17 = 4;
  }
  else
  {
    if (!v124)
      goto LABEL_41;
    v17 = 5;
    v13 = v124;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v17))(v13);
LABEL_41:
  v109 = v126;
  v18 = &v109;
  v19 = v110;
  if (v128)
  {
    v18 = &v126;
    if (v128 == v127)
    {
      v111 = v110;
      (*(void (**)(void))(*(_QWORD *)v128 + 24))();
      goto LABEL_46;
    }
    v111 = v128;
  }
  v18[4] = 0;
LABEL_46:
  v20 = v130;
  v112 = v129;
  v105 = v130;
  v21 = v106;
  if (v132)
  {
    if (v132 == v131)
    {
      v107 = v106;
      (*(void (**)(void))(*(_QWORD *)v132 + 24))();
      v20 = v105;
    }
    else
    {
      v107 = v132;
      v132 = 0;
    }
  }
  else
  {
    v107 = 0;
  }
  v108 = v133;
  v22 = v109;
  while (v22 != v20)
  {
    v23 = *v22++;
    *a4 = v23;
    v109 = v22;
    if (v22 != v112)
    {
      do
      {
        if (!v111)
          sub_207CA408C();
        v24 = (*(uint64_t (**)(_QWORD *))(*v111 + 48))(v111);
        v22 = v109;
        if ((v24 & 1) != 0)
          break;
        v22 = v109 + 1;
        v109 = v22;
      }
      while (v22 != v112);
      v20 = v105;
    }
    ++a4;
  }
  v113 = v20;
  v25 = &v113;
  if (!v111)
    goto LABEL_63;
  if (v111 != v110)
  {
    v25 = &v109;
    v115 = v111;
LABEL_63:
    v25[4] = 0;
    goto LABEL_65;
  }
  v115 = v114;
  (*(void (**)(_QWORD *, _QWORD *))(v110[0] + 24))(v110, v114);
LABEL_65:
  v116 = v112;
  v117 = a4;
  if (v107 == v106)
  {
    v26 = 4;
  }
  else
  {
    if (!v107)
      goto LABEL_70;
    v26 = 5;
    v21 = v107;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v26))(v21);
LABEL_70:
  if (v111 == v110)
  {
    v27 = 4;
  }
  else
  {
    if (!v111)
      goto LABEL_75;
    v27 = 5;
    v19 = v111;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v27))(v19);
LABEL_75:
  v97 = v89;
  v28 = &v97;
  if (!v91)
  {
LABEL_78:
    v28[4] = 0;
    goto LABEL_80;
  }
  if (v91 != v90)
  {
    v28 = &v89;
    v99 = v91;
    goto LABEL_78;
  }
  v99 = v98;
  (*(void (**)(_QWORD *, _QWORD *))(v90[0] + 24))(v90, v98);
LABEL_80:
  v100 = v92;
  v93 = v113;
  v29 = &v93;
  v30 = v94;
  v76 = a1;
  if (!v115)
  {
LABEL_83:
    v29[4] = 0;
    goto LABEL_85;
  }
  if (v115 != v114)
  {
    v29 = &v113;
    v95 = v115;
    goto LABEL_83;
  }
  v95 = v94;
  (*(void (**)(_QWORD *, _QWORD *))(v114[0] + 24))(v114, v94);
LABEL_85:
  v96 = v116;
  v138 = v97;
  v31 = &v138;
  v32 = v139;
  if (!v99)
  {
LABEL_88:
    v31[4] = 0;
    goto LABEL_90;
  }
  if (v99 != v98)
  {
    v31 = &v97;
    v140 = v99;
    goto LABEL_88;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v98[0] + 24))(v98, v139);
LABEL_90:
  v141 = v100;
  v134 = v93;
  v33 = (uint64_t *)&v134;
  v34 = v135;
  if (!v95)
  {
LABEL_93:
    v33[4] = 0;
    goto LABEL_95;
  }
  if (v95 != v94)
  {
    v33 = (uint64_t *)&v93;
    v136 = v95;
    goto LABEL_93;
  }
  v136 = v135;
  (*(void (**)(_QWORD *, _QWORD *))(v94[0] + 24))(v94, v135);
LABEL_95:
  v137 = v96;
  v146 = v138;
  v35 = &v146;
  v36 = v147;
  if (!v140)
  {
LABEL_98:
    v35[4] = 0;
    goto LABEL_100;
  }
  if (v140 != v139)
  {
    v35 = &v138;
    v148 = v140;
    goto LABEL_98;
  }
  v148 = v147;
  (*(void (**)(_QWORD *, _QWORD *))(v139[0] + 24))(v139, v147);
LABEL_100:
  v149 = v141;
  v142 = v134;
  v37 = v143;
  if (!v136)
  {
    v38 = &v144;
    goto LABEL_104;
  }
  if (v136 != v135)
  {
    v38 = &v136;
    v144 = v136;
LABEL_104:
    *v38 = 0;
    goto LABEL_106;
  }
  v144 = v143;
  (*(void (**)(_QWORD *, _QWORD *))(v135[0] + 24))(v135, v143);
LABEL_106:
  v145 = v137;
  v154 = v146;
  v39 = &v154;
  v40 = v155;
  if (!v148)
  {
LABEL_109:
    v39[4] = 0;
    goto LABEL_111;
  }
  if (v148 != v147)
  {
    v39 = &v146;
    v156 = v148;
    goto LABEL_109;
  }
  v156 = v155;
  (*(void (**)(_QWORD *, _BYTE *))(v147[0] + 24))(v147, v155);
LABEL_111:
  v157 = v149;
  v41 = v142;
  v150 = v142;
  v42 = (uint64_t *)&v150;
  v43 = v151;
  if (!v144)
  {
LABEL_114:
    v42[4] = 0;
    goto LABEL_116;
  }
  if (v144 != v143)
  {
    v42 = (uint64_t *)&v142;
    v152 = v144;
    goto LABEL_114;
  }
  v152 = v151;
  (*(void (**)(_QWORD *, _QWORD *))(v143[0] + 24))(v143, v151);
  v41 = v150;
LABEL_116:
  v44 = v145;
  v153 = v145;
  v101 = v41;
  v45 = (uint64_t *)&v101;
  v46 = v102;
  if (v152)
  {
    if (v152 == v151)
    {
      v103 = v102;
      (*(void (**)(_QWORD *, _QWORD *))(v151[0] + 24))(v151, v102);
      v104 = v153;
      v47 = v152;
      if (v152 != v151)
        goto LABEL_120;
LABEL_123:
      v48 = 4;
      goto LABEL_124;
    }
    v45 = (uint64_t *)&v150;
    v103 = v152;
  }
  v45[4] = 0;
  v104 = v44;
  v47 = v152;
  if (v152 == v151)
    goto LABEL_123;
LABEL_120:
  if (!v47)
    goto LABEL_125;
  v48 = 5;
  v43 = v47;
LABEL_124:
  (*(void (**)(_QWORD *))(*v43 + 8 * v48))(v43);
LABEL_125:
  if (v156 == v155)
  {
    v49 = 4;
  }
  else
  {
    if (!v156)
      goto LABEL_130;
    v49 = 5;
    v40 = v156;
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v49))(v40);
LABEL_130:
  if (v144 == v143)
  {
    v52 = 4;
    v50 = v82;
    v51 = v78;
  }
  else
  {
    v50 = v82;
    v51 = v78;
    if (!v144)
      goto LABEL_135;
    v52 = 5;
    v37 = v144;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v52))(v37);
LABEL_135:
  if (v148 == v147)
  {
    v54 = 4;
    v53 = v90;
  }
  else
  {
    v53 = v90;
    if (!v148)
      goto LABEL_140;
    v54 = 5;
    v36 = v148;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v54))(v36);
LABEL_140:
  if (v136 == v135)
  {
    v55 = 4;
  }
  else
  {
    if (!v136)
      goto LABEL_145;
    v55 = 5;
    v34 = v136;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v55))(v34);
LABEL_145:
  if (v140 == v139)
  {
    v57 = 4;
    v56 = v86;
  }
  else
  {
    v56 = v86;
    if (!v140)
      goto LABEL_150;
    v57 = 5;
    v32 = v140;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v57))(v32);
LABEL_150:
  v58 = v117;
  v59 = v103;
  *v76 = v101;
  v60 = v76 + 1;
  if (v59)
  {
    if (v59 == v102)
    {
      v76[4] = v60;
      (*(void (**)(_QWORD *))(v102[0] + 24))(v102);
    }
    else
    {
      v76[4] = v59;
      v103 = 0;
    }
  }
  else
  {
    v76[4] = 0;
  }
  v61 = v103;
  v76[5] = v104;
  v76[6] = v58;
  if (v61 == v102)
  {
    v63 = 4;
    v62 = v98;
  }
  else
  {
    v62 = v98;
    if (!v61)
      goto LABEL_160;
    v63 = 5;
    v46 = v61;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v46 + 8 * v63))(v46, v60);
LABEL_160:
  if (v95 == v94)
  {
    v65 = 4;
    v64 = v114;
  }
  else
  {
    v64 = v114;
    if (!v95)
      goto LABEL_165;
    v65 = 5;
    v30 = v95;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v30 + 8 * v65))(v30, v60);
LABEL_165:
  if (v99 == v98)
  {
    v66 = 4;
  }
  else
  {
    if (!v99)
      goto LABEL_170;
    v66 = 5;
    v62 = v99;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v62 + 8 * v66))(v62, v60);
LABEL_170:
  if (v115 == v114)
  {
    v67 = 4;
  }
  else
  {
    if (!v115)
      goto LABEL_175;
    v67 = 5;
    v64 = v115;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v64 + 8 * v67))(v64, v60);
LABEL_175:
  v68 = v132;
  if (v132 == v131)
  {
    v69 = 4;
    v68 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_180;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_180:
  result = v128;
  if (v128 == v127)
  {
    v71 = 4;
    result = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_185;
    v71 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v71))();
LABEL_185:
  if (v87 == v86)
  {
    v72 = 4;
  }
  else
  {
    if (!v87)
      goto LABEL_190;
    v72 = 5;
    v56 = v87;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v56 + 8 * v72))(v56, v60);
LABEL_190:
  if (v91 == v90)
  {
    v73 = 4;
  }
  else
  {
    if (!v91)
      goto LABEL_195;
    v73 = 5;
    v53 = v91;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v53 + 8 * v73))(v53, v60);
LABEL_195:
  if (v79 == v78)
  {
    v74 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_200;
    v74 = 5;
    v51 = v79;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v51 + 8 * v74))(v51, v60);
LABEL_200:
  if (v83 == v82)
  {
    v75 = 4;
  }
  else
  {
    if (!v83)
      return result;
    v75 = 5;
    v50 = v83;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v50 + 8 * v75))(v50, v60);
}

void sub_20810C7BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20810C9B8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v42 = *a2;
  v6 = v43;
  v7 = (uint64_t *)a2[4];
  if (v7)
  {
    if (v7 == a2 + 1)
    {
      v44 = v43;
      (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v43);
    }
    else
    {
      v44 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v44 = 0;
  }
  v45 = a2[5];
  v38 = *a3;
  v8 = v39;
  v9 = (uint64_t *)a3[4];
  if (v9)
  {
    if (v9 == a3 + 1)
    {
      v40 = v39;
      (*(void (**)(uint64_t *, _QWORD *))(*v9 + 24))(v9, v39);
    }
    else
    {
      v40 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v40 = 0;
  }
  v41 = a3[5];
  v10 = v42;
  v54 = v42;
  v11 = &v54;
  v12 = v55;
  if (!v44)
    goto LABEL_14;
  if (v44 != v43)
  {
    v11 = &v42;
    v56 = v44;
LABEL_14:
    v11[4] = 0;
    goto LABEL_16;
  }
  v56 = v55;
  (*(void (**)(_QWORD *, _QWORD *))(v43[0] + 24))(v43, v55);
  v10 = v54;
LABEL_16:
  v13 = v45;
  v57 = v45;
  v62 = v10;
  v14 = v63;
  if (!v56)
  {
    v64 = 0;
    v65 = v45;
    v58 = v10;
    goto LABEL_21;
  }
  if (v56 == v55)
  {
    v64 = v63;
    (*(void (**)(_QWORD *, _QWORD *))(v55[0] + 24))(v55, v63);
    v15 = v64;
    v13 = v57;
    v65 = v57;
    v58 = v62;
    if (!v64)
      goto LABEL_21;
LABEL_25:
    if (v15 == v63)
    {
      v60 = v59;
      (*(void (**)(_QWORD *))(v63[0] + 24))(v63);
      v16 = v64;
      v61 = v65;
      if (v64 != v63)
        goto LABEL_22;
    }
    else
    {
      v60 = v15;
      v61 = v13;
      v64 = 0;
      v16 = 0;
      if (v63)
        goto LABEL_22;
    }
LABEL_27:
    v17 = 4;
    goto LABEL_28;
  }
  v15 = (_QWORD *)(*(uint64_t (**)(void))(*v56 + 16))();
  v13 = v57;
  v64 = v15;
  v65 = v57;
  v58 = v62;
  if (v15)
    goto LABEL_25;
LABEL_21:
  v60 = 0;
  v61 = v13;
  v16 = v64;
  if (v64 == v63)
    goto LABEL_27;
LABEL_22:
  if (!v16)
    goto LABEL_29;
  v17 = 5;
  v14 = v16;
LABEL_28:
  (*(void (**)(_QWORD *))(*v14 + 8 * v17))(v14);
LABEL_29:
  v18 = v38;
  v46 = v38;
  v19 = &v46;
  v20 = v47;
  if (!v40)
  {
LABEL_32:
    v19[4] = 0;
    goto LABEL_34;
  }
  if (v40 != v39)
  {
    v19 = &v38;
    v48 = v40;
    goto LABEL_32;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v47);
  v18 = v46;
LABEL_34:
  v21 = v41;
  v49 = v41;
  v62 = v18;
  v22 = v63;
  if (!v48)
  {
    v64 = 0;
    v65 = v41;
    v50 = v18;
    goto LABEL_39;
  }
  if (v48 == v47)
  {
    v64 = v63;
    (*(void (**)(_QWORD *, _QWORD *))(v47[0] + 24))(v47, v63);
    v23 = v64;
    v21 = v49;
    v65 = v49;
    v50 = v62;
    if (!v64)
      goto LABEL_39;
LABEL_43:
    if (v23 == v63)
    {
      v52 = v51;
      (*(void (**)(_QWORD *))(v63[0] + 24))(v63);
      v24 = v64;
      v53 = v65;
      if (v64 != v63)
        goto LABEL_40;
    }
    else
    {
      v52 = v23;
      v53 = v21;
      v64 = 0;
      v24 = 0;
      if (v63)
        goto LABEL_40;
    }
LABEL_45:
    v25 = 4;
    goto LABEL_46;
  }
  v23 = (_QWORD *)(*(uint64_t (**)(void))(*v48 + 16))();
  v21 = v49;
  v64 = v23;
  v65 = v49;
  v50 = v62;
  if (v23)
    goto LABEL_43;
LABEL_39:
  v52 = 0;
  v53 = v21;
  v24 = v64;
  if (v64 == v63)
    goto LABEL_45;
LABEL_40:
  if (!v24)
    goto LABEL_47;
  v25 = 5;
  v22 = v24;
LABEL_46:
  (*(void (**)(_QWORD *))(*v22 + 8 * v25))(v22);
LABEL_47:
  v26 = v60;
  *a1 = v58;
  v27 = a1 + 1;
  if (v26)
  {
    if (v26 == v59)
    {
      a1[4] = v27;
      (*(void (**)(void))(v59[0] + 24))();
    }
    else
    {
      a1[4] = v26;
      v60 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v28 = v50;
  v29 = v52;
  a1[5] = v61;
  a1[6] = v28;
  if (v29)
  {
    if (v29 == v51)
    {
      a1[10] = a1 + 7;
      (*(void (**)(void))(v51[0] + 24))();
    }
    else
    {
      a1[10] = v29;
      v52 = 0;
    }
  }
  else
  {
    a1[10] = 0;
  }
  v30 = v52;
  a1[11] = v53;
  if (v30 == v51)
  {
    v31 = 4;
    v30 = v51;
  }
  else
  {
    if (!v30)
      goto LABEL_62;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_62:
  if (v48 == v47)
  {
    v32 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_67;
    v32 = 5;
    v20 = v48;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v20 + 8 * v32))(v20, v27);
LABEL_67:
  result = v60;
  if (v60 == v59)
  {
    v34 = 4;
    result = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_72;
    v34 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
LABEL_72:
  if (v56 == v55)
  {
    v35 = 4;
  }
  else
  {
    if (!v56)
      goto LABEL_77;
    v35 = 5;
    v12 = v56;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v12 + 8 * v35))(v12, v27);
LABEL_77:
  if (v40 == v39)
  {
    v36 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_82;
    v36 = 5;
    v8 = v40;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v8 + 8 * v36))(v8, v27);
LABEL_82:
  if (v44 == v43)
  {
    v37 = 4;
  }
  else
  {
    if (!v44)
      return result;
    v37 = 5;
    v6 = v44;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v6 + 8 * v37))(v6, v27);
}

void sub_20810CF58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void sub_20810CFA8(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *__p;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  int64_t v36;
  char *v37;
  int v38;

  v6 = a2[1];
  __p = 0;
  v33 = 0;
  v34 = 0;
  v7 = v6 - 1;
  if (v6 != 1)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v8 = (unint64_t)(v6 - 2) >> 6;
    v9 = operator new(8 * (v8 + 1));
    v10 = v9;
    v33 = v7;
    v34 = v8 + 1;
    __p = v9;
    if (v7 >= 0x41)
      v11 = v8;
    else
      v11 = 0;
    v9[v11] = 0;
    if (v7 >= 0x40)
      bzero(v9, 8 * (v7 >> 6));
    if ((v7 & 0x3F) != 0)
      v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  sub_208109AEC(a1, (uint64_t)&__p, (uint64_t)&v35);
  if (__p)
    operator delete(__p);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (char *)v35;
  if (v12)
  {
    v14 = 0;
    v15 = *a2;
    do
    {
      if (((*(_QWORD *)&v13[(v14 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v14) & 1) != 0)
      {
        v16 = a2[1];
        if (v16)
        {
          for (i = 0; i != v16; ++i)
          {
            v18 = ((v14 + i) >> 3) & 0x1FFFFFFFFFFFFFF8;
            v19 = 1 << (v14 + i);
            v20 = *(_QWORD *)&v13[v18];
            v21 = (v19 & v20) != 0;
            v22 = v20 & ~v19;
            v23 = v19 | v20;
            if ((((*(_QWORD *)(v15 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) ^ v21) & 1) == 0)
              v23 = v22;
            *(_QWORD *)&v13[v18] = v23;
          }
        }
      }
      ++v14;
    }
    while (v14 != v12);
  }
  v24 = v36;
  if (v36 >= (uint64_t)v7)
    v25 = v7;
  else
    v25 = v36;
  v26 = v36 - v25;
  if (v26 < 0)
  {
    v28 = v26 - 63;
    if (v26 - 63 < 0)
      v28 = v26;
    v27 = v28 >> 6;
  }
  else
  {
    v27 = (unint64_t)v26 >> 6;
  }
  v29 = &v13[8 * v27];
  v30 = &v13[8 * ((unint64_t)v36 >> 6)];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31 = v26 & 0x3F;
  __p = v29;
  LODWORD(v33) = v31;
  v37 = v30;
  v38 = v24 & 0x3F;
  sub_2081053E8(a3, (uint64_t)&__p, (uint64_t)&v37, (v24 & 0x3F) - v31 + 8 * (v30 - v29));
  if (v35)
    operator delete(v35);
}

void sub_20810D1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20810D1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9)
    JUMPOUT(0x20810D1C4);
  JUMPOUT(0x20810D1C0);
}

uint64_t sub_20810D1DC(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v4;
  char *v5;
  _BOOL8 v6;
  char *v8;
  unint64_t v9;

  if (!a2[1])
    return 1;
  sub_20810CFA8(a1, a2, &v8);
  v2 = v9 & 0x3F;
  if (v9 <= 0x3F && v2 == 0)
  {
    v6 = 1;
  }
  else
  {
    v4 = 0;
    v5 = v8;
    do
    {
      v6 = (*(_QWORD *)v5 & (1 << v4)) == 0;
      if ((*(_QWORD *)v5 & (1 << v4)) != 0)
        break;
      v5 += 8 * (v4 == 63);
      if (v4 == 63)
        v4 = 0;
      else
        ++v4;
    }
    while (v4 != v2 || v5 != &v8[8 * (v9 >> 6)]);
  }
  if (!v8)
    return v6;
  operator delete(v8);
  return v6;
}

_QWORD **sub_20810D294(_QWORD **a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[6];
    if (v3)
    {
      v2[7] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[3];
    if (v4)
    {
      v2[4] = v4;
      operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

BOOL sub_20810D2E8(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v6 = a2[1];
  v7 = v6 == *a2 || (unint64_t)(v6 - *a2) >= 0x1FFFFFFFDLL;
  if (v7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/ErrorCorrection/src/ReedSolomon.cpp", 79, (uint64_t)"!data.empty() && data.size() <= std::numeric_limits<int>::max()", 63, (uint64_t)&unk_2082275CE, 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_12;
  }
  if (!a3 || (v8 = a2[1] - *a2, a3 >= v8 >> 2))
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/ErrorCorrection/src/ReedSolomon.cpp", 80, (uint64_t)"len > 0 && len < data.size()", 28, (uint64_t)&unk_2082275CE, 0, (void (*)(void **))sub_208216974))
    {
      v8 = a2[1] - *a2;
      return sub_207CB9E70(*a1 + 16, a2, ((unint64_t)v8 >> 2) - a3);
    }
LABEL_12:
    abort();
  }
  return sub_207CB9E70(*a1 + 16, a2, ((unint64_t)v8 >> 2) - a3);
}

uint64_t sub_20810D3CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20810D3E8(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 4) = a3;
  if (a3 != 1)
  {
    if (a3)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Calibration/src/HardwareParams.cpp", 137, (uint64_t)"", 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_208216974);
      goto LABEL_13;
    }
    if (a4
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Calibration/src/HardwareParams.cpp", 126, (uint64_t)"camera_stream_id == 0", 21, (uint64_t)"Incorrect stread id", 19, (void (*)(void **))sub_208216974))
    {
LABEL_13:
      abort();
    }
    return sub_207CDC6A4(a1 + 8, a2);
  }
  if (a4 >= 2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Calibration/src/HardwareParams.cpp", 130, (uint64_t)"(camera_stream_id == 0 || camera_stream_id == 1)", 48, (uint64_t)"Incorrect stread id", 19, (void (*)(void **))sub_208216974))
    {
      goto LABEL_13;
    }
    return sub_207CDC6A4(a1 + 432, a2);
  }
  if (a4)
    return sub_207CDC6A4(a1 + 432, a2);
  return sub_207CDC6A4(a1 + 8, a2);
}

uint64_t sub_20810D4E4(char **a1, unsigned int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _OWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  void *v141;
  void *v142;
  _OWORD *v143;
  void *v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  int v170;
  void *v171;
  void *v172;
  _OWORD *v173;
  __int128 __p;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  unint64_t v196;
  __int128 v197;
  __int128 v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  _QWORD *v203;

  v5 = *a1;
  v4 = (unint64_t)a1[1];
  v6 = *a1;
  if (*a1 != (char *)v4)
  {
    while (*(_DWORD *)v6 != a2)
    {
      v6 += 856;
      if (v6 == (char *)v4)
        goto LABEL_10;
    }
  }
  if (v6 != (char *)v4 && v6 != 0)
    return 0;
LABEL_10:
  v139 = 0;
  v140 = -1;
  v8 = operator new(0x20uLL);
  v142 = v8 + 2;
  v143 = v8 + 2;
  *v8 = 0u;
  v8[1] = 0u;
  v141 = v8;
  *(_OWORD *)v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v157 = xmmword_20827D4D0;
  v158 = unk_20827D4E0;
  v155 = xmmword_20827D4B0;
  v156 = unk_20827D4C0;
  v154 = 0u;
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v160 = 0u;
  v161 = 0u;
  v159 = 0x3FF0000000000000;
  v166 = 0xBFF0000000000000;
  v167 = 0u;
  v168 = 0u;
  v169 = 0;
  v170 = -1;
  v9 = operator new(0x20uLL);
  *v9 = 0u;
  v9[1] = 0u;
  v171 = v9;
  v172 = v9 + 2;
  __p = 0u;
  v175 = 0u;
  v176 = 0u;
  v177 = 0u;
  v178 = 0u;
  v179 = 0u;
  v180 = 0u;
  v181 = 0u;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v188 = unk_20827D4E0;
  v187 = xmmword_20827D4D0;
  v186 = unk_20827D4C0;
  v185 = xmmword_20827D4B0;
  v173 = v9 + 2;
  v189 = 0x3FF0000000000000;
  v194 = 0u;
  v195 = 0u;
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  v196 = 0xBFF0000000000000;
  v197 = 0u;
  v198 = 0u;
  v138 = a2;
  v10 = (unint64_t)a1[2];
  if (v4 < v10)
  {
    *(_QWORD *)v4 = a2;
    sub_207CDAFE4(v4 + 8, &v139);
    v11 = v160;
    v12 = v162;
    *(_OWORD *)(v4 + 312) = v161;
    *(_OWORD *)(v4 + 328) = v12;
    *(_OWORD *)(v4 + 296) = v11;
    v13 = v163;
    v14 = v164;
    v15 = v165;
    *(_QWORD *)(v4 + 392) = v166;
    *(_OWORD *)(v4 + 360) = v14;
    *(_OWORD *)(v4 + 376) = v15;
    *(_OWORD *)(v4 + 344) = v13;
    *(_QWORD *)(v4 + 400) = v167;
    v16 = *((_QWORD *)&v167 + 1);
    *(_QWORD *)(v4 + 408) = *((_QWORD *)&v167 + 1);
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_QWORD *)(v4 + 416) = v168;
    v19 = *((_QWORD *)&v168 + 1);
    *(_QWORD *)(v4 + 424) = *((_QWORD *)&v168 + 1);
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    sub_207CDAFE4(v4 + 432, &v169);
    v22 = v190;
    v23 = v192;
    *(_OWORD *)(v4 + 736) = v191;
    *(_OWORD *)(v4 + 752) = v23;
    *(_OWORD *)(v4 + 720) = v22;
    v24 = v193;
    v25 = v194;
    v26 = v195;
    *(_QWORD *)(v4 + 816) = v196;
    *(_OWORD *)(v4 + 784) = v25;
    *(_OWORD *)(v4 + 800) = v26;
    *(_OWORD *)(v4 + 768) = v24;
    *(_QWORD *)(v4 + 824) = v197;
    v27 = *((_QWORD *)&v197 + 1);
    *(_QWORD *)(v4 + 832) = *((_QWORD *)&v197 + 1);
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    *(_QWORD *)(v4 + 840) = v198;
    v30 = *((_QWORD *)&v198 + 1);
    *(_QWORD *)(v4 + 848) = *((_QWORD *)&v198 + 1);
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = (char *)(v4 + 856);
    a1[1] = (char *)(v4 + 856);
    goto LABEL_53;
  }
  v35 = 0x77A04C8F8D28AC43 * ((uint64_t)(v4 - (_QWORD)v5) >> 3);
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) > 0x4C8F8D28AC42FDLL)
    sub_207CA420C();
  v37 = 0x77A04C8F8D28AC43 * ((uint64_t)(v10 - (_QWORD)v5) >> 3);
  if (2 * v37 > v36)
    v36 = 2 * v37;
  if (v37 >= 0x2647C69456217ELL)
    v38 = 0x4C8F8D28AC42FDLL;
  else
    v38 = v36;
  v203 = a1 + 2;
  if (v38)
  {
    if (v38 > 0x4C8F8D28AC42FDLL)
      sub_207CA3AB8();
    v39 = (char *)operator new(856 * v38);
  }
  else
  {
    v39 = 0;
  }
  v40 = &v39[856 * v35];
  v199 = v39;
  v200 = v40;
  v201 = v40;
  v202 = &v39[856 * v38];
  *(_QWORD *)v40 = v138;
  sub_207CDAFE4((uint64_t)(v40 + 8), &v139);
  v41 = v166;
  v42 = v165;
  *(_OWORD *)(v40 + 360) = v164;
  *(_OWORD *)(v40 + 376) = v42;
  v43 = v161;
  *(_OWORD *)(v40 + 296) = v160;
  *(_OWORD *)(v40 + 312) = v43;
  v44 = v163;
  *(_OWORD *)(v40 + 328) = v162;
  *(_OWORD *)(v40 + 344) = v44;
  v45 = v167;
  *((_QWORD *)v40 + 49) = v41;
  *((_OWORD *)v40 + 25) = v45;
  if (*((_QWORD *)&v45 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *((_QWORD *)&v168 + 1);
  v49 = &v39[856 * v35];
  *((_QWORD *)v49 + 52) = v168;
  *((_QWORD *)v49 + 53) = v48;
  if (v48)
  {
    v50 = (unint64_t *)(v48 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  sub_207CDAFE4((uint64_t)&v39[856 * v35 + 432], &v169);
  v52 = v195;
  v53 = &v39[856 * v35];
  *((_OWORD *)v53 + 49) = v194;
  *((_OWORD *)v53 + 50) = v52;
  *((_QWORD *)v53 + 102) = v196;
  v54 = v191;
  *((_OWORD *)v53 + 45) = v190;
  *((_OWORD *)v53 + 46) = v54;
  v55 = v193;
  *((_OWORD *)v53 + 47) = v192;
  *((_OWORD *)v53 + 48) = v55;
  *((_QWORD *)v53 + 103) = v197;
  v56 = *((_QWORD *)&v197 + 1);
  *((_QWORD *)v53 + 104) = *((_QWORD *)&v197 + 1);
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = &v39[856 * v35];
  *((_QWORD *)v59 + 105) = v198;
  v60 = *((_QWORD *)&v198 + 1);
  *((_QWORD *)v59 + 106) = *((_QWORD *)&v198 + 1);
  if (v60)
  {
    v61 = (unint64_t *)(v60 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = v200;
  v33 = v201 + 856;
  v64 = *a1;
  v65 = a1[1];
  if (v65 != *a1)
  {
    v66 = 0;
    do
    {
      v67 = &v63[v66];
      v68 = &v65[v66];
      v69 = (uint64_t)&v63[v66 - 848];
      *(_QWORD *)&v63[v66 - 856] = *(_QWORD *)&v65[v66 - 856];
      v70 = *(_QWORD *)&v65[v66 - 848];
      *(_DWORD *)(v69 + 8) = *(_DWORD *)&v65[v66 - 840];
      v71 = (uint64_t)&v63[v66 - 832];
      *(_QWORD *)v69 = v70;
      v72 = (uint64_t)&v65[v66 - 832];
      *(_QWORD *)v71 = 0;
      *(_OWORD *)(v71 + 8) = 0uLL;
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *(_QWORD *)&v63[v66 - 816] = *(_QWORD *)&v65[v66 - 816];
      *(_QWORD *)(v72 + 16) = 0;
      v73 = (uint64_t)&v63[v66 - 808];
      *(_OWORD *)v72 = 0uLL;
      v74 = (uint64_t)&v65[v66 - 808];
      *(_QWORD *)(v73 + 16) = 0;
      *(_OWORD *)v73 = 0uLL;
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_QWORD *)&v63[v66 - 792] = *(_QWORD *)&v65[v66 - 792];
      *(_QWORD *)(v74 + 16) = 0;
      v75 = (uint64_t)&v63[v66 - 784];
      *(_OWORD *)v74 = 0uLL;
      v77 = *(_OWORD *)&v65[v66 - 704];
      v76 = *(_OWORD *)&v65[v66 - 688];
      v78 = *(_OWORD *)&v65[v66 - 720];
      *(_QWORD *)(v75 + 112) = *(_QWORD *)&v65[v66 - 672];
      *(_OWORD *)(v75 + 80) = v77;
      *(_OWORD *)(v75 + 96) = v76;
      *(_OWORD *)(v75 + 64) = v78;
      v79 = *(_OWORD *)&v65[v66 - 784];
      v80 = *(_OWORD *)&v65[v66 - 768];
      v81 = *(_OWORD *)&v65[v66 - 736];
      *(_OWORD *)(v75 + 32) = *(_OWORD *)&v65[v66 - 752];
      *(_OWORD *)(v75 + 48) = v81;
      *(_OWORD *)v75 = v79;
      *(_OWORD *)(v75 + 16) = v80;
      v82 = &v65[v66 - 664];
      *(_OWORD *)&v63[v66 - 664] = *(_OWORD *)v82;
      v83 = (uint64_t)&v63[v66 - 648];
      *(_OWORD *)v82 = 0uLL;
      v85 = *(_OWORD *)&v65[v66 - 600];
      v84 = *(_OWORD *)&v65[v66 - 584];
      v86 = *(_OWORD *)&v65[v66 - 616];
      *(_QWORD *)(v83 + 80) = *(_QWORD *)&v65[v66 - 568];
      *(_OWORD *)(v83 + 48) = v85;
      *(_OWORD *)(v83 + 64) = v84;
      *(_OWORD *)(v83 + 32) = v86;
      v87 = *(_OWORD *)&v65[v66 - 632];
      *(_OWORD *)v83 = *(_OWORD *)&v65[v66 - 648];
      *(_OWORD *)(v83 + 16) = v87;
      v89 = *(_OWORD *)&v65[v66 - 496];
      v88 = *(_OWORD *)&v65[v66 - 480];
      v90 = *(_OWORD *)&v65[v66 - 512];
      v91 = (uint64_t)&v63[v66 - 560];
      *(_QWORD *)(v91 + 96) = *(_QWORD *)&v65[v66 - 464];
      *(_OWORD *)(v91 + 64) = v89;
      *(_OWORD *)(v91 + 80) = v88;
      *(_OWORD *)(v91 + 48) = v90;
      v92 = *(_OWORD *)&v65[v66 - 560];
      v93 = *(_OWORD *)&v65[v66 - 528];
      *(_OWORD *)(v91 + 16) = *(_OWORD *)&v65[v66 - 544];
      *(_OWORD *)(v91 + 32) = v93;
      *(_OWORD *)v91 = v92;
      v94 = &v65[v66 - 456];
      *(_OWORD *)&v63[v66 - 456] = *(_OWORD *)v94;
      *(_QWORD *)&v65[v66 - 448] = 0;
      *(_QWORD *)v94 = 0;
      v95 = &v65[v66 - 440];
      *(_OWORD *)&v63[v66 - 440] = *(_OWORD *)v95;
      *(_QWORD *)&v65[v66 - 432] = 0;
      *(_QWORD *)v95 = 0;
      v96 = (uint64_t)&v63[v66 - 424];
      v97 = *(_QWORD *)&v65[v66 - 424];
      *(_DWORD *)(v96 + 8) = *(_DWORD *)&v65[v66 - 416];
      *(_QWORD *)v96 = v97;
      v98 = &v63[v66 - 408];
      v99 = (uint64_t)&v65[v66 - 408];
      *((_QWORD *)v98 + 1) = 0;
      *((_QWORD *)v98 + 2) = 0;
      *(_QWORD *)v98 = 0;
      *(_OWORD *)v98 = *(_OWORD *)v99;
      *(_QWORD *)&v63[v66 - 392] = *(_QWORD *)&v65[v66 - 392];
      *(_QWORD *)&v65[v66 - 400] = 0;
      *(_QWORD *)v99 = 0;
      v100 = &v63[v66 - 384];
      v101 = (uint64_t)&v65[v66 - 384];
      *(_QWORD *)(v99 + 16) = 0;
      *(_QWORD *)&v63[v66 - 376] = 0;
      *(_QWORD *)v100 = 0;
      *((_QWORD *)v100 + 2) = 0;
      *(_OWORD *)v100 = *(_OWORD *)v101;
      *(_QWORD *)&v63[v66 - 368] = *(_QWORD *)&v65[v66 - 368];
      *(_QWORD *)(v101 + 16) = 0;
      *(_QWORD *)&v65[v66 - 376] = 0;
      *(_QWORD *)v101 = 0;
      v102 = &v63[v66 - 360];
      v104 = *(_OWORD *)&v65[v66 - 280];
      v103 = *(_OWORD *)&v65[v66 - 264];
      v105 = *(_OWORD *)&v65[v66 - 296];
      *((_QWORD *)v67 - 31) = *(_QWORD *)&v65[v66 - 248];
      *((_OWORD *)v102 + 5) = v104;
      *((_OWORD *)v102 + 6) = v103;
      *((_OWORD *)v102 + 4) = v105;
      v106 = *(_OWORD *)&v65[v66 - 360];
      v107 = *(_OWORD *)&v65[v66 - 344];
      v108 = *(_OWORD *)&v65[v66 - 312];
      *((_OWORD *)v102 + 2) = *(_OWORD *)&v65[v66 - 328];
      *((_OWORD *)v102 + 3) = v108;
      *(_OWORD *)v102 = v106;
      *((_OWORD *)v102 + 1) = v107;
      *((_OWORD *)v67 - 15) = *(_OWORD *)&v65[v66 - 240];
      *((_QWORD *)v68 - 30) = 0;
      *((_QWORD *)v68 - 29) = 0;
      v110 = *(_OWORD *)&v65[v66 - 176];
      v109 = *(_OWORD *)&v65[v66 - 160];
      v111 = *(_OWORD *)&v65[v66 - 192];
      *((_QWORD *)v67 - 18) = *(_QWORD *)&v65[v66 - 144];
      *((_OWORD *)v67 - 11) = v110;
      *((_OWORD *)v67 - 10) = v109;
      *((_OWORD *)v67 - 12) = v111;
      v112 = *(_OWORD *)&v65[v66 - 208];
      *((_OWORD *)v67 - 14) = *(_OWORD *)&v65[v66 - 224];
      *((_OWORD *)v67 - 13) = v112;
      v113 = *(_OWORD *)&v65[v66 - 72];
      v114 = *(_OWORD *)&v65[v66 - 56];
      v115 = *(_QWORD *)&v65[v66 - 40];
      *(_OWORD *)(v67 - 88) = *(_OWORD *)&v65[v66 - 88];
      *((_QWORD *)v67 - 5) = v115;
      *(_OWORD *)(v67 - 56) = v114;
      *(_OWORD *)(v67 - 72) = v113;
      v116 = *(_OWORD *)&v65[v66 - 136];
      v117 = *(_OWORD *)&v65[v66 - 120];
      *(_OWORD *)(v67 - 104) = *(_OWORD *)&v65[v66 - 104];
      *(_OWORD *)(v67 - 120) = v117;
      *(_OWORD *)(v67 - 136) = v116;
      *((_OWORD *)v67 - 2) = *(_OWORD *)&v65[v66 - 32];
      v118 = *(_OWORD *)&v65[v66 - 16];
      *((_QWORD *)v68 - 4) = 0;
      *((_QWORD *)v68 - 3) = 0;
      *((_OWORD *)v67 - 1) = v118;
      *((_QWORD *)v68 - 2) = 0;
      *((_QWORD *)v68 - 1) = 0;
      v66 -= 856;
    }
    while (&v65[v66] != v64);
    v65 = *a1;
    v119 = a1[1];
    *a1 = &v63[v66];
    a1[1] = v33;
    for (a1[2] = v202; v119 != v65; v119 -= 856)
    {
      sub_207CDAEE4((_QWORD *)v119 - 53);
      sub_207CDAEE4((_QWORD *)v119 - 106);
    }
    if (!v65)
      goto LABEL_53;
    goto LABEL_52;
  }
  *a1 = v200;
  a1[1] = v33;
  a1[2] = v202;
  if (v65)
LABEL_52:
    operator delete(v65);
LABEL_53:
  a1[1] = v33;
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  if (*((_QWORD *)&v197 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  if (v144[0])
  {
    v144[1] = v144[0];
    operator delete(v144[0]);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  return 1;
}

void sub_20810DE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  _QWORD *v71;
  uint64_t v72;

  sub_207CDAEE4(v71);
  sub_20810DEF8(v72 - 120);
  sub_207CDAEE4(&a71);
  sub_207CDAEE4(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20810DEF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 856;
    sub_207CDAEE4((_QWORD *)(i - 424));
    sub_207CDAEE4((_QWORD *)(i - 848));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20810DF5C(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X8>)
{
  _QWORD *v8;
  _BOOL4 v9;
  float64x2_t *v10;
  unsigned int v11;
  unsigned int v12;
  float64x2_t *v13;
  unsigned int v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  int v21;
  float64x2_t *v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  unint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64_t v78;
  float64x2_t v79;
  unint64_t v80;
  float64x2_t v81;
  unint64_t v82;
  float64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  unint64_t v91;
  float64x2_t v92;
  unint64_t v93;
  float64x2_t v94;
  unint64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int8x16_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  int8x16_t v195;
  float64x2_t v196;
  int8x16_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  int8x16_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  _BYTE v210[32];
  double v211;
  double v212;
  double v213;
  double v214;
  float64_t v215;
  float64_t v216;
  float64_t v217;
  float64_t v218;
  double v219;
  double v220;
  double v221;
  double v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  _OWORD v229[6];
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  int8x16_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  int8x16_t v243;
  float64x2_t v244;
  int8x16_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  uint64_t v266;

  v266 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 8);
  v9 = a3 == 0;
  if (a3)
    v10 = (float64x2_t *)&v215;
  else
    v10 = 0;
  sub_20810E980((double **)(a1 + 8), &v219, v10, *a2);
  v12 = v11;
  if (v9)
    v13 = 0;
  else
    v13 = (float64x2_t *)v210;
  sub_20810E980((double **)(a1 + 32), &v211, v13, a2[1]);
  v15 = *(double *)(*v8 + 8 * (v12 + 1)) - *(double *)(*v8 + 8 * v12);
  v16 = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (v14 + 1)) - *(double *)(*(_QWORD *)(a1 + 32) + 8 * v14);
  v17 = *(_DWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = (float64x2_t *)(v18 + 192 * (v17 * v14 + v12));
  v20 = (float64x2_t *)(v18 + 192 * (v17 * v14 + v12 + 1));
  v21 = v17 * (v14 + 1);
  v22 = (float64x2_t *)(v18 + 192 * (v21 + v12));
  v23 = (float64x2_t *)(v18 + 192 * (v21 + v12 + 1));
  v201 = v19[2];
  v204 = (int8x16_t)vmulq_n_f64(v19[5], v15);
  v206 = vmulq_n_f64(v19[4], v15);
  v208 = vmulq_n_f64(v19[3], v15);
  v24 = vmulq_n_f64(v20[5], v15);
  v25 = vmulq_n_f64(v20[4], v15);
  v56 = vmulq_n_f64(v20[3], v15);
  v57 = vmulq_n_f64(v22[5], v15);
  v26 = vmulq_n_f64(v22[4], v15);
  v27 = vmulq_n_f64(v22[3], v15);
  v28 = vmulq_n_f64(v23[5], v15);
  v29 = vmulq_n_f64(v23[4], v15);
  v189 = v23[2];
  v192 = v22[2];
  v197 = (int8x16_t)vmulq_n_f64(v23[3], v15);
  v199 = v20[2];
  v30 = vmulq_n_f64(v19[8], v16);
  v195 = (int8x16_t)vmulq_n_f64(v19[7], v16);
  v58 = vmulq_n_f64(v19[6], v16);
  v31 = vmulq_n_f64(v20[8], v16);
  v32 = vmulq_n_f64(v20[7], v16);
  v187 = (int8x16_t)vmulq_n_f64(v20[6], v16);
  v33 = v15 * v16;
  v34 = vmulq_n_f64(v22[8], v16);
  v35 = vmulq_n_f64(v22[7], v16);
  v36 = vmulq_n_f64(v22[6], v16);
  v37 = vmulq_n_f64(v23[8], v16);
  v38 = vmulq_n_f64(v23[7], v16);
  v39 = vmulq_n_f64(v23[6], v16);
  v40 = vmulq_n_f64(v19[11], v33);
  v41 = vmulq_n_f64(v19[10], v33);
  v42 = vmulq_n_f64(v19[9], v33);
  v43 = vmulq_n_f64(v20[11], v33);
  v44 = vmulq_n_f64(v20[10], v33);
  v45 = vmulq_n_f64(v20[9], v33);
  v46 = vmulq_n_f64(v22[11], v33);
  v47 = vmulq_n_f64(v22[10], v33);
  v48 = vmulq_n_f64(v22[9], v33);
  v49 = vmulq_n_f64(v23[11], v33);
  v50 = vmulq_n_f64(v23[10], v33);
  v51 = vmulq_n_f64(v23[9], v33);
  v52 = v19[1];
  v223 = *v19;
  v224 = v52;
  v225 = v201;
  v53 = v20[1];
  v226 = *v20;
  v227 = v53;
  v228 = v199;
  v54 = v22[1];
  v230 = *v22;
  v231 = v54;
  v232 = v192;
  v55 = v23[1];
  v233 = *v23;
  v234 = v55;
  v235 = v189;
  v229[2] = v204;
  v229[1] = v206;
  v229[0] = v208;
  v229[5] = v24;
  v229[4] = v25;
  v167 = v56;
  v229[3] = v56;
  v168 = v27;
  v169 = v29;
  v236 = v27;
  v237 = v26;
  v171 = v57;
  v238 = v57;
  *(_QWORD *)&v56.f64[0] = v195.i64[0];
  *(_QWORD *)&v57.f64[0] = v197.i64[0];
  v239 = v197;
  v240 = v29;
  v170 = v28;
  v241 = v28;
  v242 = v58;
  v178 = v30;
  v180 = v58;
  *(_QWORD *)&v58.f64[0] = v187.i64[0];
  v243 = v195;
  v244 = v30;
  v245 = v187;
  v246 = v32;
  v174 = v31;
  v176 = v32;
  v247 = v31;
  v248 = v42;
  v249 = v41;
  v250 = v40;
  v182 = v40;
  v59 = v44;
  v251 = v45;
  v252 = v44;
  v253 = v43;
  v254 = v36;
  v185 = v35;
  v255 = v35;
  v256 = v34;
  v190 = v34;
  v193 = v39;
  v257 = v39;
  v258 = v38;
  v202 = v37;
  v259 = v37;
  v260 = v48;
  v261 = v47;
  v262 = v46;
  v263 = v51;
  v264 = v50;
  v265 = v49;
  if (v9)
  {
    v122 = v43;
    v123 = v49;
    *(_QWORD *)&v124.f64[0] = v204.i64[0];
    *(_QWORD *)&v124.f64[1] = vextq_s8(v204, v204, 8uLL).u64[0];
    v125 = v206;
    *(_QWORD *)&v125.f64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
    v126 = v50;
    v127 = v51;
    v128 = v208;
    *(_QWORD *)&v128.f64[1] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u64[0];
    v129 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v223, v219), (float64x2_t)0), vmulq_n_f64(v226, v220)), vmulq_n_f64(v128, v221));
    v130 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v224, v219), (float64x2_t)0), vmulq_n_f64(v227, v220)), vmulq_n_f64(v125, v221));
    v131 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v225, v219), (float64x2_t)0), vmulq_n_f64(v228, v220)), vmulq_n_f64(v124, v221));
    v133 = v167;
    v132 = v24;
    *(_QWORD *)&v133.f64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
    v134 = v25;
    *(_QWORD *)&v134.f64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
    *(_QWORD *)&v132.f64[1] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
    v135 = vmulq_n_f64(vaddq_f64(v129, vmulq_n_f64(v133, v222)), v211);
    v136 = vmulq_n_f64(vaddq_f64(v130, vmulq_n_f64(v134, v222)), v211);
    v137 = vmulq_n_f64(vaddq_f64(v131, vmulq_n_f64(v132, v222)), v211);
    v138 = v168;
    *(_QWORD *)&v138.f64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
    v140 = v171;
    v139 = v26;
    *(_QWORD *)&v139.f64[1] = vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL).u64[0];
    *(_QWORD *)&v140.f64[1] = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
    v141 = vaddq_f64(vmulq_n_f64(v140, v221), vaddq_f64(vaddq_f64(vmulq_n_f64(v232, v219), (float64x2_t)0), vmulq_n_f64(v235, v220)));
    v142 = vaddq_f64(vmulq_n_f64(v139, v221), vaddq_f64(vaddq_f64(vmulq_n_f64(v231, v219), (float64x2_t)0), vmulq_n_f64(v234, v220)));
    v144 = v169;
    v143 = v170;
    *(_QWORD *)&v143.f64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
    *(_QWORD *)&v144.f64[1] = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
    *(_QWORD *)&v57.f64[1] = vextq_s8(v197, v197, 8uLL).u64[0];
    v145 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v143, v222), v141), v212);
    v146 = vaddq_f64(vaddq_f64(v135, (float64x2_t)0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v57, v222), vaddq_f64(vmulq_n_f64(v138, v221), vaddq_f64(vaddq_f64(vmulq_n_f64(v230, v219), (float64x2_t)0), vmulq_n_f64(v233, v220)))), v212));
    v147 = vaddq_f64(vaddq_f64(v136, (float64x2_t)0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v144, v222), v142), v212));
    v148 = v178;
    v149 = v180;
    *(_QWORD *)&v148.f64[1] = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u64[0];
    *(_QWORD *)&v56.f64[1] = vextq_s8(v195, v195, 8uLL).u64[0];
    *(_QWORD *)&v149.f64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
    *(_QWORD *)&v58.f64[1] = vextq_s8(v187, v187, 8uLL).u64[0];
    v151 = v174;
    v150 = v176;
    *(_QWORD *)&v150.f64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u64[0];
    *(_QWORD *)&v151.f64[1] = vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
    v152 = vaddq_f64(vaddq_f64(v137, (float64x2_t)0), v145);
    v153 = vaddq_f64(vaddq_f64(vmulq_n_f64(v148, v219), (float64x2_t)0), vmulq_n_f64(v151, v220));
    v154 = v182;
    *(_QWORD *)&v154.f64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
    *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    *(_QWORD *)&v45.f64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
    *(_QWORD *)&v59.f64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
    *(_QWORD *)&v122.f64[1] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u64[0];
    v155 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(v153, vmulq_n_f64(v154, v221)), vmulq_n_f64(v122, v222)), v213), v152);
    v156 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v56, v219), (float64x2_t)0), vmulq_n_f64(v150, v220)), vmulq_n_f64(v41, v221)), vmulq_n_f64(v59, v222)), v213), v147);
    v157 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v149, v219), (float64x2_t)0), vmulq_n_f64(v58, v220)), vmulq_n_f64(v42, v221)), vmulq_n_f64(v45, v222)), v213), v146);
    v159 = v36;
    v158 = v185;
    *(_QWORD *)&v159.f64[1] = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
    *(_QWORD *)&v158.f64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
    v160 = v190;
    v161 = v193;
    *(_QWORD *)&v160.f64[1] = vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL).u64[0];
    v162 = vaddq_f64(vmulq_n_f64(v160, v219), (float64x2_t)0);
    v163 = vaddq_f64(vmulq_n_f64(v159, v219), (float64x2_t)0);
    v165 = v38;
    v164 = v202;
    *(_QWORD *)&v164.f64[1] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
    *(_QWORD *)&v165.f64[1] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
    *(_QWORD *)&v161.f64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u64[0];
    *(_QWORD *)&v48.f64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
    *(_QWORD *)&v47.f64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
    *(_QWORD *)&v46.f64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
    *(_QWORD *)&v123.f64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
    *(_QWORD *)&v126.f64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
    *(_QWORD *)&v127.f64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
    v166 = vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(v162, vmulq_n_f64(v164, v220)), vmulq_n_f64(v46, v221)), vmulq_n_f64(v123, v222)), v214);
    v84 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(v163, vmulq_n_f64(v161, v220)), vmulq_n_f64(v48, v221)), vmulq_n_f64(v127, v222)), v214), v157);
    v91 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
    v92 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v158, v219), (float64x2_t)0), vmulq_n_f64(v165, v220)), vmulq_n_f64(v47, v221)), vmulq_n_f64(v126, v222)), v214), v156);
    v93 = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
    v94 = vaddq_f64(v166, v155);
    v95 = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  }
  else
  {
    v60 = 0;
    v61.f64[0] = v215;
    v62.f64[0] = v216;
    v63.f64[0] = v220;
    v64.f64[0] = v221;
    v65.f64[0] = v222;
    v66.f64[0] = v217;
    v67.f64[0] = v218;
    v68.f64[0] = v219;
    v69.f64[0] = v219;
    v69.f64[1] = v219;
    v196 = v69;
    v69.f64[1] = v219;
    v68.f64[1] = v219;
    v198 = v68;
    v68.f64[0] = v215;
    v70.f64[1] = v215;
    v191 = v70;
    v194 = v69;
    v70.f64[0] = 0.0;
    v69.f64[0] = v215;
    v71.f64[0] = v220;
    v72.f64[0] = v220;
    v73.f64[0] = v216;
    v74 = 0;
    v75.f64[0] = v216;
    v76.f64[0] = v221;
    v77.f64[0] = v221;
    v78 = v217;
    v79.f64[0] = 0.0;
    v80 = 0;
    v81.f64[0] = 0.0;
    v69.f64[1] = v215;
    v61.f64[1] = v215;
    v82 = 0;
    v71.f64[1] = v220;
    v186 = v71;
    v188 = v69;
    v72.f64[1] = v220;
    v184 = v72;
    v63.f64[1] = v220;
    v200 = v63;
    v85.f64[0] = v217;
    v86.f64[0] = v222;
    v87.f64[0] = v222;
    v83 = v218;
    v73.f64[1] = v216;
    v84.f64[0] = 0.0;
    v75.f64[1] = v216;
    v181 = v75;
    v183 = v73;
    v89.f64[0] = v218;
    v62.f64[1] = v216;
    v207 = v62;
    v209 = v61;
    v76.f64[1] = v221;
    v77.f64[1] = v221;
    v175 = v77;
    v177 = v76;
    v64.f64[1] = v221;
    v94.f64[1] = v217;
    v85.f64[1] = v217;
    v66.f64[1] = v217;
    v203 = v66;
    v205 = v64;
    v86.f64[1] = v222;
    v87.f64[1] = v222;
    v65.f64[1] = v222;
    v179 = v65;
    v92.f64[1] = v218;
    v88 = v92;
    v89.f64[1] = v218;
    v67.f64[1] = v218;
    v172 = v94;
    v173 = v67;
    v90 = (float64x2_t *)v229;
    v91 = 0;
    v92.f64[0] = 0.0;
    v93 = 0;
    v94.f64[0] = 0.0;
    v95 = 0;
    v96 = 0uLL;
    v97 = 0uLL;
    v98 = 0uLL;
    do
    {
      v99 = v90[-6];
      v100 = v90[-5];
      v101 = v90[-4];
      v102 = v90[-3];
      v103 = v90[-2];
      v104 = v90[-1];
      v105 = vaddq_f64(vaddq_f64(vmulq_f64(v196, v99), (float64x2_t)0), vmulq_f64(v200, v102));
      v106 = vaddq_f64(vaddq_f64(vmulq_f64(v194, v100), (float64x2_t)0), vmulq_f64(v184, v103));
      v107 = vaddq_f64(vaddq_f64(vmulq_f64(v198, v101), (float64x2_t)0), vmulq_f64(v186, v104));
      v108 = vaddq_f64(vaddq_f64(vmulq_f64(v191, v101), (float64x2_t)0), vmulq_f64(v207, v104));
      v109 = vaddq_f64(vaddq_f64(vmulq_f64(v188, v100), (float64x2_t)0), vmulq_f64(v181, v103));
      v110 = v90[1];
      v111 = v90[2];
      v112 = v90[3];
      v113 = vaddq_f64(v106, vmulq_f64(v175, v110));
      v114 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v209, v99), (float64x2_t)0), vmulq_f64(v183, v102)), vmulq_f64(v203, *v90));
      v115 = vaddq_f64(v109, vmulq_f64(v85, v110));
      v116 = v90[4];
      v117 = v90[5];
      v118 = vaddq_f64(vaddq_f64(v105, vmulq_f64(v177, *v90)), vmulq_f64(v179, v112));
      v119 = vaddq_f64(v113, vmulq_f64(v87, v116));
      v120 = vaddq_f64(vaddq_f64(v107, vmulq_f64(v205, v111)), vmulq_f64(v86, v117));
      v121 = vaddq_f64(v115, vmulq_f64(v89, v116));
      *(_QWORD *)&v84.f64[1] = v91;
      v116.f64[0] = *(double *)((char *)&v211 + v60);
      *(_QWORD *)&v92.f64[1] = v93;
      v84 = vaddq_f64(v84, vmulq_n_f64(v118, v116.f64[0]));
      v92 = vaddq_f64(v92, vmulq_n_f64(v119, v116.f64[0]));
      *(_QWORD *)&v94.f64[1] = v95;
      v94 = vaddq_f64(v94, vmulq_n_f64(v120, v116.f64[0]));
      v97 = vaddq_f64(v97, vmulq_n_f64(vaddq_f64(vaddq_f64(v108, vmulq_f64(v172, v111)), vmulq_f64(v173, v117)), v116.f64[0]));
      v96 = vaddq_f64(v96, vmulq_n_f64(v121, v116.f64[0]));
      v98 = vaddq_f64(v98, vmulq_n_f64(vaddq_f64(v114, vmulq_f64(v88, v112)), v116.f64[0]));
      *(_QWORD *)&v70.f64[1] = v74;
      *(_QWORD *)&v79.f64[1] = v80;
      v91 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
      v114.f64[0] = *(float64_t *)&v210[v60];
      *(_QWORD *)&v81.f64[1] = v82;
      v93 = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
      v81 = vaddq_f64(v81, vmulq_n_f64(v120, v114.f64[0]));
      v79 = vaddq_f64(v79, vmulq_n_f64(v119, v114.f64[0]));
      v70 = vaddq_f64(v70, vmulq_n_f64(v118, v114.f64[0]));
      v95 = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
      v74 = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
      v80 = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
      v82 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
      v60 += 8;
      v90 += 12;
    }
    while (v60 != 32);
    *(_QWORD *)&v98.f64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
    *(_QWORD *)&v96.f64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u64[0];
    *a3 = v98;
    a3[1] = v96;
    *(_QWORD *)&v97.f64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
    *(_QWORD *)&v70.f64[1] = v74;
    a3[2] = v97;
    a3[3] = v70;
    *(_QWORD *)&v79.f64[1] = v80;
    *(_QWORD *)&v81.f64[1] = v82;
    a3[4] = v79;
    a3[5] = v81;
  }
  *(_QWORD *)&v84.f64[1] = v91;
  *(_QWORD *)&v92.f64[1] = v93;
  *a4 = v84;
  a4[1] = v92;
  *(_QWORD *)&v94.f64[1] = v95;
  a4[2] = v94;
}

float64x2_t sub_20810E980(double **a1, double *a2, float64x2_t *a3, double a4)
{
  double *v4;
  double *v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  double v16;
  float64x2_t result;
  float64_t v18;
  double v19;
  float64_t v20;
  float64x2_t v21;

  v4 = *a1;
  v5 = a1[1];
  if (*(v5 - 1) <= a4)
  {
    v12 = (char *)v5 - (char *)v4;
    v13 = -2;
  }
  else
  {
    if (v5 != v4)
    {
      v6 = *v4;
      v7 = v5 - v4;
      if (*v4 <= a4)
        v6 = a4;
      v5 = *a1;
      do
      {
        v8 = v7 >> 1;
        v9 = &v5[v7 >> 1];
        v11 = *v9;
        v10 = v9 + 1;
        v7 += ~(v7 >> 1);
        if (v6 < v11)
          v7 = v8;
        else
          v5 = v10;
      }
      while (v7);
    }
    v12 = (char *)v5 - (char *)v4;
    v13 = -1;
  }
  v14 = v13 + (v12 >> 3);
  v15 = v4[v14];
  v16 = 1.0 / (v4[v14 + 1] - v15);
  result.f64[0] = (a4 - v15) * v16;
  v18 = result.f64[0] * (result.f64[0] * result.f64[0]);
  v19 = result.f64[0] * result.f64[0] * 3.0;
  *a2 = v18 + v18 - v19 + 1.0;
  a2[1] = v19 - (v18 + v18);
  a2[2] = result.f64[0] + v18 - (result.f64[0] * result.f64[0] + result.f64[0] * result.f64[0]);
  a2[3] = v18 - result.f64[0] * result.f64[0];
  if (a3)
  {
    v20 = result.f64[0] * result.f64[0] * 6.0;
    a3->f64[0] = v20 - result.f64[0] * 6.0;
    a3->f64[1] = result.f64[0] * 6.0 - v20;
    a3[1].f64[0] = v19 + result.f64[0] * -4.0 + 1.0;
    a3[1].f64[1] = v19 - (result.f64[0] + result.f64[0]);
    v21 = vmulq_n_f64(a3[1], v16);
    result = vmulq_n_f64(*a3, v16);
    *a3 = result;
    a3[1] = v21;
  }
  return result;
}

_DWORD *sub_20810EA98(_DWORD ***a1)
{
  return sub_207F11630(**a1, (char *)(*a1)[1]);
}

void sub_20810EAA4(uint64_t a1, uint64_t a2)
{
  sub_20810EAB4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20810EAB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C0883B0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20810EC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20810ECAC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20810EDA4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20810ED9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20810EDA4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20810EFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20810EFB4(uint64_t a1@<X0>, float64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t v29;
  __int128 v31;
  float64x2_t v32;
  __int128 v33;
  __int128 v34;
  float64x2_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  int64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  __int128 v46;
  float64x2_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float64x2_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  double v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v65;
  int64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int64x2_t v73;
  float64x2_t v74;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  __int128 v84;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  __int128 v91;
  __int128 v92;
  float64x2_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  float64x2_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  float64x2_t v106;
  __int128 v107;
  __int128 v108;
  float64x2_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  float64x2_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  float64x2_t v122;
  __int128 v123;
  __int128 v124;
  float64x2_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  float64x2_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  float64x2_t v138;
  __int128 v139;
  __int128 v140;
  float64x2_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  float64x2_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  float64x2_t v154;
  __int128 v155;
  __int128 v156;
  float64x2_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  float64x2_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  float64x2_t v170;
  __int128 v171;
  __int128 v172;
  float64x2_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  float64x2_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  float64x2_t v186;
  float64_t v187;
  float64x2_t v188;
  float64_t v189;
  double v190[2];
  char v191;
  double v192[2];
  char v193;
  float64x2_t v194;
  float64_t v195;
  float64x2_t v196;
  float64_t v197;
  float64x2_t v198;
  float64_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64_t v202;
  float64x2_t v203;
  uint64_t v204;
  double v205[2];
  char v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  __int128 v212;
  uint64_t v213;

  if (a3)
  {
    v198.f64[0] = a2;
    *(_QWORD *)&v198.f64[1] = &v207;
    v7 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v7 == -1)
      goto LABEL_19;
    *(_QWORD *)&v210.f64[0] = &v198;
    ((void (*)(double *__return_ptr, float64x2_t *, uint64_t))off_24C0883C8[v7])(v205, &v210, a1 + 88);
    if (v206)
    {
      sub_20810DF5C(a1, v205, &v198, &v210);
      if (!v206)
        sub_207CA2A4C();
      if (v205[1] < 2.22044605e-16)
      {
        v12 = 0;
        v13 = 5;
        v89 = (float64x2_t)vdupq_n_s64(0x3EC0C6F7A0B5ED8DuLL);
        while (1)
        {
          v196 = **(float64x2_t **)&a2;
          v197 = *(double *)(*(_QWORD *)&a2 + 16);
          v194 = **(float64x2_t **)&a2;
          v14 = v196.f64[v12];
          v195 = *(double *)(*(_QWORD *)&a2 + 16);
          v196.f64[v12] = v14 + 0.000001;
          v194.f64[v12] = v194.f64[v12] + -0.000001;
          *(_QWORD *)&v186.f64[0] = &v196;
          v15 = *(unsigned int *)(a1 + 104);
          if ((_DWORD)v15 == -1)
            break;
          *(_QWORD *)&v188.f64[0] = &v186;
          ((void (*)(double *__return_ptr, float64x2_t *, uint64_t))off_24C0883D8[v15])(v192, &v188, a1 + 88);
          *(_QWORD *)&v186.f64[0] = &v194;
          v16 = *(unsigned int *)(a1 + 104);
          if ((_DWORD)v16 == -1)
            break;
          *(_QWORD *)&v188.f64[0] = &v186;
          ((void (*)(double *__return_ptr, float64x2_t *, uint64_t))off_24C0883E8[v16])(v190, &v188, a1 + 88);
          if (!v193 || !v191)
            goto LABEL_16;
          sub_20810DF5C(a1, v192, 0, &v188);
          sub_20810DF5C(a1, v190, 0, &v186);
          v17.f64[0] = v189;
          v18.f64[0] = v187;
          v19 = v186;
          v20 = (int64x2_t)vsubq_f64(v17, v18);
          v21.f64[0] = v197;
          _Q4 = v196;
          _Q7 = vmulq_f64(_Q4, _Q4);
          _D16 = v196.f64[1];
          __asm { FMLA            D7, D16, V4.D[1] }
          v29.f64[0] = v195;
          _Q17 = v194;
          v31 = *(_OWORD *)(a3 + 128);
          v32 = *(float64x2_t *)a3;
          v33 = *(_OWORD *)(a3 + 16);
          v34 = *(_OWORD *)(a3 + 32);
          v35 = *(float64x2_t *)(a3 + 48);
          v36 = *(_OWORD *)(a3 + 64);
          v37 = *(_OWORD *)(a3 + 80);
          v38 = *(_OWORD *)(a3 + 96);
          _Q7.f64[0] = sqrt(_Q7.f64[0] + v21.f64[0] * v21.f64[0]);
          v39 = vmlaq_f64(v21, v17, _Q7);
          v40 = vmlaq_n_f64(v196, v188, _Q7.f64[0]);
          _Q6 = vmulq_f64(_Q17, _Q17);
          _Q7.f64[0] = v194.f64[1];
          __asm { FMLA            D6, D7, V17.D[1] }
          v42 = vdivq_f64(vsubq_f64(v188, v186), v89);
          v177 = *(float64x2_t *)(a3 + 112);
          v176 = v38;
          v175 = v37;
          v174 = v36;
          v173 = v35;
          v172 = v34;
          v171 = v33;
          v170 = v32;
          v178 = v31;
          v170.f64[((_BYTE)v13 - 5) & 0x1F] = v42.f64[0];
          _Q6.f64[0] = sqrt(_Q6.f64[0] + v29.f64[0] * v29.f64[0]);
          v43 = (int64x2_t)vmlsq_lane_f64(vsubq_f64(v40, _Q17), v19, _Q6.f64[0], 0);
          v44 = vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)vmlsq_f64(vsubq_f64(v39, v29), v18, _Q6), 8uLL), v89);
          v45 = vdivq_f64((float64x2_t)vzip1q_s64(v20, v43), v89);
          v169 = v185;
          v168 = v184;
          v167 = v183;
          v166 = v182;
          v165 = v181;
          v164 = v180;
          v163 = v179;
          v162 = v178;
          v161 = v177;
          v160 = v176;
          v159 = v175;
          v158 = v174;
          v157 = v173;
          v156 = v172;
          v155 = v171;
          v154 = v170;
          v154.f64[((_BYTE)v13 - 4) & 0x1F] = v42.f64[1];
          v152 = v168;
          v153 = v169;
          v150 = v166;
          v151 = v167;
          v148 = v164;
          v149 = v165;
          v146 = v162;
          v147 = v163;
          v144 = v160;
          v145 = v161;
          v142 = v158;
          v143 = v159;
          v140 = v156;
          v141 = v157;
          v138 = v154;
          v139 = v155;
          v138.f64[((_BYTE)v13 - 3) & 0x1F] = v45.f64[0];
          v136 = v152;
          v137 = v153;
          v134 = v150;
          v135 = v151;
          v132 = v148;
          v133 = v149;
          v130 = v146;
          v131 = v147;
          v128 = v144;
          v129 = v145;
          v126 = v142;
          v127 = v143;
          v124 = v140;
          v125 = v141;
          v122 = v138;
          v123 = v139;
          v122.f64[((_BYTE)v13 - 2) & 0x1F] = v45.f64[1];
          v120 = v136;
          v121 = v137;
          v118 = v134;
          v119 = v135;
          v116 = v132;
          v117 = v133;
          v114 = v130;
          v115 = v131;
          v112 = v128;
          v113 = v129;
          v110 = v126;
          v111 = v127;
          v108 = v124;
          v109 = v125;
          v106 = v122;
          v107 = v123;
          v106.f64[((_BYTE)v13 - 1) & 0x1F] = v44.f64[0];
          v104 = v120;
          v105 = v121;
          v102 = v118;
          v103 = v119;
          v100 = v116;
          v101 = v117;
          v98 = v114;
          v99 = v115;
          v96 = v112;
          v97 = v113;
          v94 = v110;
          v95 = v111;
          v92 = v108;
          v93 = v109;
          v90 = v106;
          v91 = v107;
          v90.f64[v13 & 0x1F] = v44.f64[1];
          v47 = v97;
          v46 = v98;
          v49 = v95;
          v48 = v96;
          v51 = v93;
          v50 = v94;
          v53 = v91;
          v52 = v92;
          *(float64x2_t *)a3 = v90;
          *(_OWORD *)(a3 + 16) = v53;
          *(_OWORD *)(a3 + 32) = v52;
          *(float64x2_t *)(a3 + 48) = v51;
          *(_OWORD *)(a3 + 64) = v50;
          *(_OWORD *)(a3 + 80) = v49;
          *(_OWORD *)(a3 + 96) = v48;
          *(float64x2_t *)(a3 + 112) = v47;
          v13 += 6;
          ++v12;
          *(_OWORD *)(a3 + 128) = v46;
          if (v13 == 23)
            goto LABEL_18;
        }
LABEL_19:
        sub_207CA9F48();
      }
      _Q2 = v207;
      _Q1 = v208;
      _Q0 = v209;
      v9.f64[0] = v199;
      _D17 = v204;
      v10.f64[0] = v202;
      __asm { FMLA            D16, D17, V2.D[1] }
      v60 = v207.f64[1];
      v61 = vmlaq_laneq_f64(vmulq_n_f64(v200, v208.f64[0]), v203, v208, 1);
      __asm { FMLA            D21, D17, V1.D[1] }
      v62 = v208.f64[1];
      v63 = vmlaq_laneq_f64(vmulq_n_f64(v200, v209.f64[0]), v203, v209, 1);
      __asm { FMLA            D4, D17, V0.D[1] }
      v65 = v209.f64[1];
      *(float64x2_t *)a3 = vmlaq_laneq_f64(vmulq_n_f64(v200, v207.f64[0]), v203, v207, 1);
      *(_QWORD *)(a3 + 16) = _D16;
      *(float64x2_t *)(a3 + 48) = v61;
      *(_QWORD *)(a3 + 64) = _Q21.i64[0];
      *(float64x2_t *)(a3 + 96) = v63;
      *(_QWORD *)(a3 + 112) = _D4;
      v63.f64[0] = *(float64_t *)(*(_QWORD *)&a2 + 16);
      _Q4 = **(float64x2_t **)&a2;
      _Q5 = vmulq_f64(_Q4, _Q4);
      _D16 = *(_QWORD *)(*(_QWORD *)&a2 + 8);
      __asm { FMLA            D5, D16, V4.D[1] }
      _Q5.f64[0] = sqrt(_Q5.f64[0] + v63.f64[0] * v63.f64[0]);
      *(double *)_Q21.i64 = v211 * **(double **)&a2;
      v69 = (int64x2_t)vmulq_laneq_f64(v210, **(float64x2_t **)&a2, 1);
      _Q4.f64[0] = vmuld_lane_f64(v211, **(float64x2_t **)&a2, 1);
      v70 = vmulq_n_f64(v210, v63.f64[0]);
      v63.f64[0] = v211 * v63.f64[0];
      v71 = (float64x2_t)vzip1q_s64(_Q21, v69);
      v72 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0);
      v73 = (int64x2_t)vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)_Q4, 8uLL), v72);
      v74 = vdivq_f64(v71, v72);
      __asm { FMOV            V23.2D, #1.0 }
      v76 = vaddq_f64(vdivq_f64(v63, _Q5), _Q23);
      *(_QWORD *)&v77 = *(_OWORD *)&vmulq_f64(v9, _Q5);
      v78 = vmulq_n_f64(v198, _Q5.f64[0]);
      *(_QWORD *)&v79 = *(_OWORD *)&vmulq_f64(v10, _Q5);
      v80 = vmulq_n_f64(v201, _Q5.f64[0]);
      v81 = vmlaq_laneq_f64(vmulq_n_f64(v78, _Q2.f64[0]), v80, _Q2, 1);
      _Q2.f64[0] = vmlad_n_f64(vmuld_n_f64(v77, _Q2.f64[0]), v60, v79);
      v82 = vmlaq_laneq_f64(vmulq_n_f64(v78, _Q1.f64[0]), v80, _Q1, 1);
      _Q1.f64[0] = vmlad_n_f64(vmuld_n_f64(v77, _Q1.f64[0]), v62, v79);
      v83 = vmlaq_laneq_f64(vmulq_n_f64(v78, _Q0.f64[0]), v80, _Q0, 1);
      _Q0.f64[0] = vmlad_n_f64(vmuld_n_f64(v77, _Q0.f64[0]), v65, v79);
      v51 = vaddq_f64(vaddq_f64(vdivq_f64(vmulq_n_f64(v210, **(double **)&a2), v72), (float64x2_t)xmmword_20822E370), v81);
      *(float64x2_t *)(a3 + 24) = v51;
      *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(vaddq_f64(v74, (float64x2_t)0), _Q2);
      *(float64x2_t *)(a3 + 72) = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v74, (int8x16_t)v73, 8uLL), (float64x2_t)xmmword_2082339F0), v82);
      *(_QWORD *)(a3 + 88) = *(_OWORD *)&vaddq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64(v73, 1), (float64x2_t)0), _Q1);
      v47 = vaddq_f64(vaddq_f64(vdivq_f64(v70, v72), (float64x2_t)0), v83);
      *(float64x2_t *)(a3 + 120) = v47;
      *(_QWORD *)(a3 + 136) = *(_OWORD *)&vaddq_f64(v76, _Q0);
      goto LABEL_18;
    }
LABEL_16:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 48) = 0;
    return;
  }
  v207.f64[0] = a2;
  v54 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v54 == -1)
    goto LABEL_19;
  *(_QWORD *)&v210.f64[0] = &v207;
  ((void (*)(float64x2_t *__return_ptr, float64x2_t *, uint64_t))off_24C0883F8[v54])(&v198, &v210, a1 + 88);
  if (!LOBYTE(v199))
    goto LABEL_16;
  sub_20810DF5C(a1, v198.f64, 0, &v210);
LABEL_18:
  v84 = v212;
  v47.f64[0] = *(float64_t *)(*(_QWORD *)&a2 + 16);
  _Q2 = **(float64x2_t **)&a2;
  _Q3 = vmulq_f64(_Q2, _Q2);
  _D4 = *(_QWORD *)(*(_QWORD *)&a2 + 8);
  __asm { FMLA            D3, D4, V2.D[1] }
  _Q3.f64[0] = sqrt(_Q3.f64[0] + v47.f64[0] * v47.f64[0]);
  v51.f64[0] = v211;
  v88 = v210;
  *(_QWORD *)(a4 + 16) = v213;
  *(_OWORD *)a4 = v84;
  *(float64x2_t *)(a4 + 24) = vmlaq_n_f64(_Q2, v88, _Q3.f64[0]);
  *(_QWORD *)(a4 + 40) = *(_OWORD *)&vmlaq_f64(v47, v51, _Q3);
  *(_BYTE *)(a4 + 48) = 1;
}

void sub_20810F6CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, float64x2_t a8@<Q1>)
{
  int v22;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  int v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  int64x2_t v39;
  BOOL v40;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v63;
  int64x2_t v64;
  int8x16_t v65;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int64x2_t v71;
  float64_t v74;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v98;
  double v104;
  float64x2_t v106;
  float64x2_t v111;
  int8x16_t v112;
  float64x2_t v113;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  double v123;
  int64x2_t v124;
  BOOL v125;
  int64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  int8x16_t v133;
  float64x2_t v134;
  float64x2_t v136;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v147;
  float64x2_t v148;
  int64x2_t v149;
  float64x2_t v150;
  int64x2_t v151;
  float64_t v154;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v165;
  float64x2_t v168;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v183;
  double v189;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  int64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  int v202;
  float64x2_t v203;
  int8x16_t v204;
  int8x16_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  double v212;
  unint64_t v213;
  double v214;
  float64x2_t v215;
  float64x2_t v216;
  float64_t v217;
  char v218;
  int8x16_t v219;
  double v220;
  float64x2_t v221;
  float64_t v222;
  float64x2_t v223;
  uint64_t v224;
  float64x2_t v225;
  uint64_t v226;
  float64x2_t v227;
  uint64_t v228;
  float64x2_t v229;
  float64x2_t v230;
  uint64_t v231;
  float64x2_t v232;
  double v233;
  float64x2_t v234;
  float64_t v235;
  float64x2_t v236;
  double v237;
  char v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64_t v249;

  if (*(double *)(a2 + 16) < 0.0)
    goto LABEL_3;
  a8.f64[0] = *(float64_t *)(a2 + 16);
  _Q0 = *(float64x2_t *)a2;
  _Q2 = vmulq_f64(_Q0, _Q0);
  _D3 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D2, D3, V0.D[1] }
  _Q2.f64[0] = _Q2.f64[0] + a8.f64[0] * a8.f64[0];
  if (_Q2.f64[0] == 0.0)
    goto LABEL_3;
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0]);
  *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  v221 = vmulq_n_f64(_Q0, _Q2.f64[0]);
  *(_QWORD *)&v222 = *(_OWORD *)&vmulq_f64(a8, _Q2);
  v22 = a3 <= 1 ? 1 : a3;
  v202 = v22;
  sub_20810EFB4(a1, COERCE_FLOAT64_T(&v221), (uint64_t)&v239, (uint64_t)&v234);
  if (!v238)
    goto LABEL_3;
  __asm { FMOV            V0.2D, #1.0 }
  v203 = _Q0;
  v28 = v202;
  while (1)
  {
    _Q0 = v236;
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q2.f64[0] = v236.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    _Q2.f64[0] = v237;
    v24.f64[0] = v235;
    _Q1.f64[0] = _Q1.f64[0] + _Q2.f64[0] * _Q2.f64[0];
    v25.f64[0] = *(float64_t *)(a2 + 16);
    _Q5 = *(float64x2_t *)a2;
    v31 = vsubq_f64(v25, v24);
    v32 = vsubq_f64(*(float64x2_t *)a2, v234);
    _D6 = v32.f64[1];
    __asm { FMLA            D5, D6, V0.D[1] }
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v237, v31.f64[0]);
    v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
    v36 = vdivq_f64(vmulq_n_f64(v236, _Q5.f64[0]), v35);
    v37 = vdivq_f64(vmulq_f64(_Q2, _Q5), _Q1);
    *(_QWORD *)&v38 = *(_OWORD *)&vabdq_f64(v37, v31);
    v39 = (int64x2_t)vabdq_f64(v36, v32);
    v40 = *(double *)v39.i64 > a7 || *(double *)&v39.i64[1] > a7;
    if (!v40 && v38 <= a7)
      break;
    if (--v28)
    {
      *(double *)v39.i64 = v237 * v236.f64[0];
      v42 = (int64x2_t)vmulq_laneq_f64(v236, v236, 1);
      *(double *)v26.i64 = vmuld_lane_f64(v237, v236, 1);
      v43 = (float64x2_t)vextq_s8((int8x16_t)v42, v26, 8uLL);
      v44 = vdivq_f64(vmulq_n_f64(v236, v236.f64[0]), v35);
      v45 = vdivq_f64((float64x2_t)vzip1q_s64(v39, v42), v35);
      v46 = vdivq_f64(v43, v35);
      _Q26 = (int8x16_t)vsubq_f64((float64x2_t)xmmword_20822E370, v46);
      v48 = (int8x16_t)vsubq_f64((float64x2_t)0, v45);
      v49 = vsubq_f64((float64x2_t)xmmword_20822E370, v44);
      _Q22 = (float64x2_t)vextq_s8(_Q26, _Q26, 8uLL);
      *(_QWORD *)&v51.f64[0] = vextq_s8(v48, v48, 8uLL).u64[0];
      _V27.D[1] = v239.f64[1];
      _V29.D[1] = v242.f64[1];
      *(_QWORD *)&v49.f64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      *(_QWORD *)&v51.f64[1] = _Q26.i64[0];
      v54 = vmlaq_laneq_f64(vmulq_n_f64(v49, v239.f64[0]), v51, v239, 1);
      __asm { FMLA            D26, D22, V27.D[1] }
      v55 = vmlaq_laneq_f64(vmulq_n_f64(v49, v242.f64[0]), v51, v242, 1);
      __asm { FMLA            D28, D22, V29.D[1] }
      _V29.D[1] = v245.f64[1];
      v58 = vmlaq_laneq_f64(vmulq_n_f64(v49, v245.f64[0]), v51, v245, 1);
      v49.f64[0] = v237 * v237;
      v59 = vdivq_f64(vmulq_n_f64(v236, v237), v35);
      v60 = vdivq_f64(v49, _Q1);
      __asm { FMLA            D10, D22, V29.D[1] }
      v62 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 8uLL);
      v63 = vsubq_f64((float64x2_t)0, vaddq_f64(v45, v45));
      _Q22.f64[0] = v237 * v32.f64[0];
      v64 = (int64x2_t)vmlaq_f64(_Q22, _Q5, v63);
      v63.f64[0] = vmuld_lane_f64(v237, v32, 1);
      v65 = (int8x16_t)vmlaq_f64(v63, _Q5, vsubq_f64((float64x2_t)0, (float64x2_t)vdupq_laneq_s64((int64x2_t)vaddq_f64(v46, v46), 1)));
      _Q2.f64[0] = v237 * v31.f64[0];
      _Q2 = vmlaq_f64(_Q2, _Q5, vsubq_f64(v203, vaddq_f64(v60, v60)));
      v67 = vmulq_n_f64(vsubq_f64((float64x2_t)xmmword_20822E370, vaddq_f64(v44, v44)), _Q5.f64[0]);
      v68 = vmulq_n_f64(vsubq_f64((float64x2_t)xmmword_2082339F0, vaddq_f64(v62, v62)), _Q5.f64[0]);
      v212 = vsubq_f64(v37, v31).f64[0];
      v69 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64((float64x2_t)0, vaddq_f64(v59, v59)), _Q5.f64[0]), v236, v31.f64[0]);
      v70 = vmlaq_n_f64(v67, v236, v32.f64[0]);
      v71 = (int64x2_t)vmlaq_laneq_f64(v68, v236, v32, 1);
      v204 = (int8x16_t)vsubq_f64(v36, v32);
      _D1 = *(_OWORD *)&vdivq_f64(_Q2, _Q1);
      _Q4 = vsubq_f64((float64x2_t)0, v59);
      *(_QWORD *)&v74 = *(_OWORD *)&vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v71, v65, 8uLL), v35);
      _Q0 = (int8x16_t)vdivq_f64((float64x2_t)vzip1q_s64(v64, v71), v35);
      v76 = vdivq_f64(v69, v35);
      v77 = vdivq_f64(v70, v35);
      *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
      *(_QWORD *)&v77.f64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
      *(_QWORD *)&v76.f64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
      _V7.D[1] = v240.f64[1];
      _Q2.f64[1] = v241.f64[1];
      __asm { FMLA            D26, D0, V7.D[1] }
      *(_QWORD *)&v79.f64[0] = vextq_s8(_Q0, _Q0, 8uLL).u64[0];
      v79.f64[1] = v74;
      v80 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v54, _Q4, v240.f64[0]), v77, v240, 1), v79, v241.f64[0]), v76, v241, 1);
      __asm { FMLA            D26, D1, V2.D[1] }
      _Q2.f64[1] = v243.f64[1];
      __asm { FMLA            D28, D0, V2.D[1] }
      _Q2.f64[1] = v244.f64[1];
      v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v55, _Q4, v243.f64[0]), v77, v243, 1), v79, v244.f64[0]), v76, v244, 1);
      __asm { FMLA            D28, D1, V2.D[1] }
      _Q2.f64[1] = v246.f64[1];
      v84 = vmlaq_laneq_f64(vmlaq_n_f64(v58, _Q4, v246.f64[0]), v77, v246, 1);
      _Q4.f64[1] = v247.f64[1];
      _Q9 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v79, v247.f64[0]), v76, v247, 1);
      __asm
      {
        FMLA            D10, D0, V2.D[1]
        FMLA            D10, D1, V4.D[1]
      }
      _Q5 = (float64x2_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v82);
      v89 = (float64x2_t)vzip2q_s64((int64x2_t)v80, (int64x2_t)v82);
      *(_QWORD *)&_Q4.f64[0] = _Q26.i64[0];
      _Q4.f64[1] = _D28;
      v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, v80.f64[0]), v89, v80, 1), _Q4, *(double *)_Q26.i64);
      _Q1 = vmulq_f64(_Q9, v80);
      _Q2.f64[0] = v80.f64[1];
      __asm { FMLA            D1, D2, V9.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + _D10 * *(double *)_Q26.i64;
      v92 = _Q5;
      v206 = _Q5;
      v208 = v89;
      v93 = v89;
      v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, v82.f64[0]), v89, v82, 1), _Q4, _D28);
      v95 = _Q4;
      v210 = _Q4;
      _Q3 = vmulq_f64(_Q9, v82);
      _Q4.f64[0] = v82.f64[1];
      __asm { FMLA            D3, D4, V9.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D10 * _D28;
      _Q4 = vmulq_f64(_Q9, _Q9);
      _Q5.f64[0] = _Q9.f64[1];
      __asm { FMLA            D4, D5, V9.D[1] }
      _Q4.f64[0] = _Q4.f64[0] + _D10 * _D10;
      _Q5.f64[1] = 0.001;
      _Q5.f64[0] = 0.001;
      v223 = vaddq_f64(v90, (float64x2_t)xmmword_20827D500);
      v224 = *(_OWORD *)&vaddq_f64(_Q1, (float64x2_t)0);
      v225 = vaddq_f64(v94, (float64x2_t)xmmword_20827D510);
      v226 = *(_OWORD *)&vaddq_f64(_Q3, (float64x2_t)0);
      v227 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, _Q9.f64[0]), v93, _Q9, 1), v95, _D10), (float64x2_t)0);
      v228 = *(_OWORD *)&vaddq_f64(_Q4, _Q5);
      sub_207CC48B4((uint64_t)&v229);
      v98.f64[0] = v222;
      _D4 = v231;
      *(_QWORD *)&_D20 = vextq_s8(v204, v204, 8uLL).u64[0];
      _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v206, *(double *)v204.i64), v208, _D20), v210, v212);
      _V19.D[1] = _Q9.f64[1];
      __asm { FMLA            D17, D20, V19.D[1] }
      v104 = _D17 + _D10 * v212;
      __asm { FMLA            D3, D4, V16.D[1] }
      v106.f64[0] = _D3 + v233 * v104;
      v221 = vsubq_f64(v221, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v229, _Q16.f64[0]), v230, _Q16, 1), v232, v104));
      *(_QWORD *)&v222 = *(_OWORD *)&vsubq_f64(v98, v106);
      sub_20810EFB4(a1, COERCE_FLOAT64_T(&v221), (uint64_t)&v239, (uint64_t)&v234);
      if (v238)
        continue;
    }
    goto LABEL_3;
  }
  if (a5)
  {
    *(float64x2_t *)a5 = v234;
    *(float64_t *)(a5 + 16) = v235;
    *(float64x2_t *)(a5 + 24) = v236;
    *(double *)(a5 + 40) = v237;
  }
  if (!a4)
    goto LABEL_46;
  v219 = *(int8x16_t *)a2;
  v220 = *(double *)(a2 + 16);
  *(double *)v219.i64 = *(double *)v219.i64 + 0.0001;
  if (v220 < 0.0)
    goto LABEL_3;
  v32.f64[0] = v220;
  _Q2 = (float64x2_t)v219;
  _Q0 = vmulq_f64(_Q2, _Q2);
  _D1 = v219.i64[1];
  __asm { FMLA            D0, D1, V2.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v32.f64[0] * v32.f64[0];
  if (_Q0.f64[0] == 0.0)
    goto LABEL_3;
  _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0]);
  v201 = v32;
  v213 = vextq_s8(v219, v219, 8uLL).u64[0];
  *(_QWORD *)&_Q2.f64[1] = v213;
  v248 = vmulq_n_f64(_Q2, _Q0.f64[0]);
  *(_QWORD *)&v249 = *(_OWORD *)&vmulq_f64(v32, _Q0);
  sub_20810EFB4(a1, COERCE_FLOAT64_T(&v248), (uint64_t)&v239, (uint64_t)&v234);
  if (!v238)
    goto LABEL_3;
  *(_QWORD *)&v113.f64[0] = v219.i64[0];
  *(_QWORD *)&v113.f64[1] = v213;
  v200 = v113;
  while (1)
  {
    _Q0 = v236;
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q2.f64[0] = v236.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v111.f64[0] = v237;
    _Q2.f64[0] = v235;
    _Q1.f64[0] = _Q1.f64[0] + v111.f64[0] * v111.f64[0];
    _Q5.f64[1] = v234.f64[1];
    v116 = vsubq_f64(v201, _Q2);
    v117 = vsubq_f64(v200, v234);
    _D6 = v117.f64[1];
    __asm { FMLA            D5, D6, V0.D[1] }
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v237, v116.f64[0]);
    v120 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
    v121 = vdivq_f64(vmulq_n_f64(v236, _Q5.f64[0]), v120);
    v122 = vdivq_f64(vmulq_f64(v111, _Q5), _Q1);
    *(_QWORD *)&v123 = *(_OWORD *)&vabdq_f64(v122, v116);
    v124 = (int64x2_t)vabdq_f64(v121, v117);
    v125 = *(double *)v124.i64 > a7 || *(double *)&v124.i64[1] > a7;
    if (!v125 && v123 <= a7)
      break;
    if (--v202)
    {
      *(double *)v124.i64 = v237 * v236.f64[0];
      v127 = (int64x2_t)vmulq_laneq_f64(v236, v236, 1);
      *(double *)v112.i64 = vmuld_lane_f64(v237, v236, 1);
      v128 = (float64x2_t)vextq_s8((int8x16_t)v127, v112, 8uLL);
      v129 = vdivq_f64(vmulq_n_f64(v236, v236.f64[0]), v120);
      v130 = vdivq_f64((float64x2_t)vzip1q_s64(v124, v127), v120);
      v131 = vdivq_f64(v128, v120);
      _Q26 = (int8x16_t)vsubq_f64((float64x2_t)xmmword_20822E370, v131);
      v133 = (int8x16_t)vsubq_f64((float64x2_t)0, v130);
      v134 = vsubq_f64((float64x2_t)xmmword_20822E370, v129);
      _Q22 = (float64x2_t)vextq_s8(_Q26, _Q26, 8uLL);
      *(_QWORD *)&v136.f64[0] = vextq_s8(v133, v133, 8uLL).u64[0];
      _V27.D[1] = v239.f64[1];
      _V29.D[1] = v242.f64[1];
      *(_QWORD *)&v134.f64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
      *(_QWORD *)&v136.f64[1] = _Q26.i64[0];
      v139 = vmlaq_laneq_f64(vmulq_n_f64(v134, v239.f64[0]), v136, v239, 1);
      __asm { FMLA            D26, D22, V27.D[1] }
      v140 = vmlaq_laneq_f64(vmulq_n_f64(v134, v242.f64[0]), v136, v242, 1);
      __asm { FMLA            D28, D22, V29.D[1] }
      _V29.D[1] = v245.f64[1];
      v143 = vmlaq_laneq_f64(vmulq_n_f64(v134, v245.f64[0]), v136, v245, 1);
      v134.f64[0] = v237 * v237;
      v144 = vdivq_f64(vmulq_n_f64(v236, v237), v120);
      v145 = vdivq_f64(v134, _Q1);
      __asm { FMLA            D11, D22, V29.D[1] }
      v147 = (float64x2_t)vextq_s8((int8x16_t)v130, (int8x16_t)v131, 8uLL);
      v148 = vsubq_f64((float64x2_t)0, vaddq_f64(v130, v130));
      _Q22.f64[0] = v237 * v117.f64[0];
      v149 = (int64x2_t)vmlaq_f64(_Q22, _Q5, v148);
      v148.f64[0] = vmuld_lane_f64(v237, v117, 1);
      v111.f64[0] = v237 * v116.f64[0];
      v214 = vsubq_f64(v122, v116).f64[0];
      v150 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64((float64x2_t)xmmword_20822E370, vaddq_f64(v129, v129)), _Q5.f64[0]), v236, v117.f64[0]);
      v151 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64(vsubq_f64((float64x2_t)xmmword_2082339F0, vaddq_f64(v147, v147)), _Q5.f64[0]), v236, v117, 1);
      v205 = (int8x16_t)vsubq_f64(v121, v117);
      _D1 = *(_OWORD *)&vdivq_f64(vmlaq_f64(v111, _Q5, vsubq_f64(v203, vaddq_f64(v145, v145))), _Q1);
      _Q4 = vsubq_f64((float64x2_t)0, v144);
      *(_QWORD *)&v154 = *(_OWORD *)&vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v151, (int8x16_t)vmlaq_f64(v148, _Q5, vsubq_f64((float64x2_t)0, (float64x2_t)vdupq_laneq_s64((int64x2_t)vaddq_f64(v131, v131), 1))), 8uLL), v120);
      _Q0 = (int8x16_t)vdivq_f64((float64x2_t)vzip1q_s64(v149, v151), v120);
      v156 = vdivq_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64((float64x2_t)0, vaddq_f64(v144, v144)), _Q5.f64[0]), v236, v116.f64[0]), v120);
      v157 = vdivq_f64(v150, v120);
      *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
      *(_QWORD *)&v157.f64[1] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
      *(_QWORD *)&v156.f64[1] = vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL).u64[0];
      _V7.D[1] = v240.f64[1];
      _V3.D[1] = v241.f64[1];
      __asm { FMLA            D26, D0, V7.D[1] }
      *(_QWORD *)&v160.f64[0] = vextq_s8(_Q0, _Q0, 8uLL).u64[0];
      v160.f64[1] = v154;
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v139, _Q4, v240.f64[0]), v157, v240, 1), v160, v241.f64[0]), v156, v241, 1);
      __asm { FMLA            D26, D1, V3.D[1] }
      _V3.D[1] = v243.f64[1];
      __asm { FMLA            D28, D0, V3.D[1] }
      _V3.D[1] = v244.f64[1];
      v165 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v140, _Q4, v243.f64[0]), v157, v243, 1), v160, v244.f64[0]), v156, v244, 1);
      __asm { FMLA            D28, D1, V3.D[1] }
      _V3.D[1] = v246.f64[1];
      v168 = vmlaq_laneq_f64(vmlaq_n_f64(v143, _Q4, v246.f64[0]), v157, v246, 1);
      _Q4.f64[1] = v247.f64[1];
      _Q10 = vmlaq_laneq_f64(vmlaq_n_f64(v168, v160, v247.f64[0]), v156, v247, 1);
      __asm
      {
        FMLA            D11, D0, V3.D[1]
        FMLA            D11, D1, V4.D[1]
      }
      _Q5 = (float64x2_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v165);
      v173 = (float64x2_t)vzip2q_s64((int64x2_t)v161, (int64x2_t)v165);
      *(_QWORD *)&_Q4.f64[0] = _Q26.i64[0];
      _Q4.f64[1] = _D28;
      v174 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, v161.f64[0]), v173, v161, 1), _Q4, *(double *)_Q26.i64);
      _Q1 = vmulq_f64(_Q10, v161);
      _D2 = v161.f64[1];
      __asm { FMLA            D1, D2, V10.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + _D11 * *(double *)_Q26.i64;
      v177 = _Q5;
      v207 = _Q5;
      v209 = v173;
      v178 = v173;
      v179 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, v165.f64[0]), v173, v165, 1), _Q4, _D28);
      v180 = _Q4;
      v211 = _Q4;
      _Q3 = vmulq_f64(_Q10, v165);
      _Q4.f64[0] = v165.f64[1];
      __asm { FMLA            D3, D4, V10.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D11 * _D28;
      _Q4 = vmulq_f64(_Q10, _Q10);
      _Q5.f64[0] = _Q10.f64[1];
      __asm { FMLA            D4, D5, V10.D[1] }
      _Q4.f64[0] = _Q4.f64[0] + _D11 * _D11;
      _Q5.f64[1] = 0.001;
      _Q5.f64[0] = 0.001;
      v223 = vaddq_f64(v174, (float64x2_t)xmmword_20827D500);
      v224 = *(_OWORD *)&vaddq_f64(_Q1, (float64x2_t)0);
      v225 = vaddq_f64(v179, (float64x2_t)xmmword_20827D510);
      v226 = *(_OWORD *)&vaddq_f64(_Q3, (float64x2_t)0);
      v227 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, _Q10.f64[0]), v178, _Q10, 1), v180, _D11), (float64x2_t)0);
      v228 = *(_OWORD *)&vaddq_f64(_Q4, _Q5);
      sub_207CC48B4((uint64_t)&v229);
      v183.f64[0] = v249;
      _D4 = v231;
      *(_QWORD *)&_D20 = vextq_s8(v205, v205, 8uLL).u64[0];
      _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v207, *(double *)v205.i64), v209, _D20), v211, v214);
      _V19.D[1] = _Q10.f64[1];
      __asm { FMLA            D17, D20, V19.D[1] }
      v189 = _D17 + _D11 * v214;
      __asm { FMLA            D3, D4, V16.D[1] }
      v191.f64[0] = _D3 + v233 * v189;
      v248 = vsubq_f64(v248, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v229, _Q16.f64[0]), v230, _Q16, 1), v232, v189));
      *(_QWORD *)&v249 = *(_OWORD *)&vsubq_f64(v183, v191);
      sub_20810EFB4(a1, COERCE_FLOAT64_T(&v248), (uint64_t)&v239, (uint64_t)&v234);
      if (v238)
        continue;
    }
    goto LABEL_3;
  }
  v216 = v248;
  v217 = v249;
  *(double *)v219.i64 = *(double *)v219.i64 + -0.0002;
  sub_20810F6CC(&v239, a1, &v219, a3, 0, 0, a7);
  if (!LOBYTE(v240.f64[1]))
    goto LABEL_3;
  v192.f64[0] = v217;
  v193.f64[0] = v240.f64[0];
  v194 = vsubq_f64(v192, v193);
  v193.f64[0] = 0.0002;
  v215 = v193;
  *(_QWORD *)&v194.f64[0] = *(_OWORD *)&vdivq_f64(v194, v193);
  v194.f64[1] = *(float64_t *)(a4 + 24);
  *(float64x2_t *)a4 = vdivq_f64(vsubq_f64(v216, v239), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  *(float64x2_t *)(a4 + 16) = v194;
  v219 = *(int8x16_t *)a2;
  v220 = *(double *)(a2 + 16);
  *(double *)&v219.i64[1] = *(double *)&v219.i64[1] + 0.0001;
  sub_20810F6CC(&v216, a1, &v219, a3, 0, 0, a7);
  if (!v218)
    goto LABEL_3;
  *(double *)&v219.i64[1] = *(double *)&v219.i64[1] + -0.0002;
  sub_20810F6CC(&v239, a1, &v219, a3, 0, 0, a7);
  if (!LOBYTE(v240.f64[1]))
    goto LABEL_3;
  if (!v218)
    goto LABEL_47;
  v195.f64[0] = v217;
  v196.f64[0] = v240.f64[0];
  v197 = (int64x2_t)vdivq_f64(vsubq_f64(v216, v239), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  *(int64x2_t *)(a4 + 16) = vzip1q_s64(*(int64x2_t *)(a4 + 16), v197);
  *(int8x16_t *)(a4 + 32) = vextq_s8((int8x16_t)v197, (int8x16_t)vdivq_f64(vsubq_f64(v195, v196), v215), 8uLL);
  v220 = *(double *)(a2 + 16);
  v219 = *(int8x16_t *)a2;
  v220 = v220 + 0.0001;
  sub_20810F6CC(&v216, a1, &v219, a3, 0, 0, a7);
  if (!v218 || (v220 = v220 + -0.0002, sub_20810F6CC(&v239, a1, &v219, a3, 0, 0, a7), !LOBYTE(v240.f64[1])))
  {
LABEL_3:
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 24) = 0;
    return;
  }
  if (!v218)
LABEL_47:
    sub_207CA2A4C();
  v198.f64[0] = v217;
  v199.f64[0] = v240.f64[0];
  *(float64x2_t *)(a4 + 48) = vdivq_f64(vsubq_f64(v216, v239), (float64x2_t)vdupq_n_s64(0x3F2A36E2EB1C432DuLL));
  *(_QWORD *)(a4 + 64) = *(_OWORD *)&vdivq_f64(vsubq_f64(v198, v199), v215);
LABEL_46:
  *(float64x2_t *)a6 = v221;
  *(float64_t *)(a6 + 16) = v222;
  *(_BYTE *)(a6 + 24) = 1;
}

uint64_t sub_208110298(uint64_t a1)
{
  uint64_t v1;
  double v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  int8x16_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v32;
  float64x2_t v33;
  int8x16_t v34;
  float64x2_t v35;
  char v36;
  char *v37;

  v1 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v1 == -1)
    sub_207CA9F48();
  v37 = &v36;
  v3 = ((double (*)(char **, uint64_t))off_24C088408[v1])(&v37, a1 + 88);
  result = 0;
  if (v3 >= 0.0 && v3 <= 3.14159265)
  {
    v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v6 = v5 >> 3;
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
    if ((v7 & 0x7FFFFFFF8) != 0)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (v7 >> 3);
      v11 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
      result = 0;
      while (1)
      {
        v12 = (float64x2_t *)(v9 + 192 * v8);
        v13 = (float64x2_t *)(v9 + 192 * ((_DWORD)v6 - 1 + v8));
        v14 = (int8x16_t)vabdq_f64(*v12, *v13);
        if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, (float64x2_t)vextq_s8(v14, v14, 8uLL)), (int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[1], v13[1]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[2], v13[2])), (int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[3], v13[3]))))), vmvnq_s8((int8x16_t)vuzp1q_s16(
                                                            (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[4], v13[4])), (int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[5], v13[5]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[6], v13[6])), (int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[7], v13[7]))))))) & 1) != 0|| vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_20827D520, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11,
                                                                                             vabdq_f64(v12[8], v13[8])),
                                                                                (int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[9], v13[9]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[10], v13[10])), (int32x4_t)vcgeq_f64(v11, vabdq_f64(v12[11], v13[11])))))))
        {
          break;
        }
        v8 += *(_DWORD *)(a1 + 72);
        if (!--v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((_DWORD)v6)
      {
        v15 = *(float64x2_t **)(a1 + 56);
        v20 = *v15;
        v18 = v15[1];
        v16 = v15 + 2;
        v19 = v15[2];
        v17 = (v5 >> 3);
        *(_QWORD *)&v18.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
        *(_QWORD *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        *(_QWORD *)&v20.f64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
        v21 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
        v22 = v17;
        result = 0;
        while (1)
        {
          v23 = (int8x16_t)vabsq_f64(vsubq_f64(v20, v16[-2]));
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v21, (float64x2_t)vextq_s8(v23, v23, 8uLL)), (int32x4_t)vcgeq_f64(v21, vabsq_f64(vsubq_f64(v18, v16[-1]))))))) & 1) != 0)break;
          v24 = vabsq_f64(vsubq_f64(v19, *v16));
          if (v24.f64[0] > 0.00000001 || v24.f64[1] > 0.00000001)
            break;
          v16 += 12;
          if (!--v22)
          {
            v25 = v15 + 5;
            v26 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
            result = 0;
            while (1)
            {
              v27 = (int8x16_t)vabsq_f64(v25[-2]);
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v26, (float64x2_t)vextq_s8(v27, v27, 8uLL)), (int32x4_t)vcgeq_f64(v26, vabsq_f64(v25[-1])))))) & 1) != 0)break;
              v28 = vabsq_f64(*v25);
              if (v28.f64[0] > 0.00000001 || v28.f64[1] > 0.00000001)
                break;
              v25 += 12;
              if (!--v17)
              {
                if ((v6 & 1) == 0)
                  return 1;
                v29 = 192 * ((v6 - 1) >> 1);
                v30 = -192;
                v31 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
                do
                {
                  result = 0;
                  v32 = (int8x16_t)vabsq_f64(vsubq_f64(vnegq_f64(v15[6]), v15[(unint64_t)v29 / 0x10 + 6]));
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v31, (float64x2_t)vextq_s8(v32, v32, 8uLL)), (int32x4_t)vcgeq_f64(v31, vabsq_f64(vsubq_f64(vnegq_f64(v15[7]), v15[(unint64_t)v29 / 0x10 + 7]))))))) & 1) != 0)break;
                  v33 = vabsq_f64(vsubq_f64(vnegq_f64(v15[8]), v15[(unint64_t)v29 / 0x10 + 8]));
                  if (v33.f64[0] > 0.00000001)
                    break;
                  if (v33.f64[1] > 0.00000001)
                    break;
                  result = 0;
                  v34 = (int8x16_t)vabsq_f64(vsubq_f64(vnegq_f64(v15[9]), v15[(unint64_t)v29 / 0x10 + 9]));
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v31, (float64x2_t)vextq_s8(v34, v34, 8uLL)), (int32x4_t)vcgeq_f64(v31, vabsq_f64(vsubq_f64(vnegq_f64(v15[10]), v15[(unint64_t)v29 / 0x10 + 10]))))))) & 1) != 0)break;
                  v35 = vabsq_f64(vsubq_f64(vnegq_f64(v15[11]), v15[(unint64_t)v29 / 0x10 + 11]));
                  if (v35.f64[0] > 0.00000001)
                    break;
                  if (v35.f64[1] > 0.00000001)
                    break;
                  v15 += 12;
                  v30 += 192;
                  result = 1;
                }
                while (v29 != v30);
                return result;
              }
            }
            return result;
          }
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_2081106C8(__int128 ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  float64x2_t *v6;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  char v20;
  long double v21;
  double v22;
  double v23;
  long double v24;
  long double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;

  v5 = **a1;
  v6 = (float64x2_t *)(*a1)[1];
  _Q0 = *v5;
  _D1 = *((double *)v5 + 1);
  __asm { FMLA            D2, D1, V0.D[1] }
  v35 = _D2;
  v14 = sqrt(_D2);
  v16 = *(double *)v5;
  v15 = _D1;
  v17 = *((double *)v5 + 2);
  v18 = 1.57079633 - atan2(v17, v14);
  v19 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v18 <= v19)
  {
    v21 = atan2(v15, v16) + 3.14159265;
    v22 = 1.0 / (1.0 - cos(v19));
    v34 = fmin(fmax(v21 * 0.159154943, 0.0), 1.0);
    v23 = fmin(fmax((1.0 - cos(v18)) * v22, 0.0), 1.0);
    if (v6)
    {
      if (v14 <= 2.22044605e-16)
      {
        v27 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        v28 = v27;
        v29 = v27;
      }
      else
      {
        v31 = -v15 / v35;
        v33 = v16 / v35;
        v24 = v35 + v17 * v17;
        v30 = v16 * v17 / (v14 * v24);
        v32 = v15 * v17 / (v14 * v24);
        v36 = -v14 / v24;
        v25 = sin(v18);
        v26.f64[0] = 0.0;
        v26.f64[1] = v25 * v22;
        v27 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_20827D530, v31), v26, v30);
        v28 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_20827D530, v33), v26, v32);
        v29 = vmlaq_n_f64((float64x2_t)0, v26, v36);
      }
      *v6 = v27;
      v6[1] = v28;
      v6[2] = v29;
    }
    *(double *)a3 = v34;
    *(double *)(a3 + 8) = v23;
    v20 = 1;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v20;
}

void sub_2081108A4(__int128 ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  float64x2_t *v6;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  double v18;
  double v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;

  v5 = **a1;
  v6 = (float64x2_t *)(*a1)[1];
  _Q0 = *v5;
  _D1 = *((double *)v5 + 1);
  __asm { FMLA            D2, D1, V0.D[1] }
  v31 = _D2;
  v14 = sqrt(_D2);
  v16 = *(double *)v5;
  v15 = _D1;
  v17 = *((double *)v5 + 2);
  v18 = 1.57079633 - atan2(v17, v14);
  v19 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v18 <= v19)
  {
    v21 = 1.0 / v19;
    v22 = fmin(fmax((atan2(v15, v16) + 3.14159265) * 0.159154943, 0.0), 1.0);
    v23 = fmax(v18 * v21, 0.0);
    if (v23 >= 1.0)
      v24 = 0.95;
    else
      v24 = v23 * -0.05 + 1.0;
    v25 = log(v24);
    if (v6)
    {
      if (v14 <= 2.22044605e-16)
      {
        v28 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        v29 = v28;
        v30 = v28;
      }
      else
      {
        v26 = v31 + v17 * v17;
        v27.f64[0] = 0.0;
        v27.f64[1] = v21 * (0.974786287 / v24);
        v28 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_20827D530, -v15 / v31), v27, v16 * v17 / (v14 * v26));
        v29 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_20827D530, v16 / v31), v27, v15 * v17 / (v14 * v26));
        v30 = vmlaq_n_f64((float64x2_t)0, v27, -v14 / v26);
      }
      *v6 = v28;
      v6[1] = v29;
      v6[2] = v30;
    }
    *(double *)a3 = v22;
    *(double *)(a3 + 8) = v25 * -19.4957257;
    v20 = 1;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v20;
}

void sub_208110A74(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double v13;
  long double v14;
  char v15;
  long double v16;
  long double v17;
  long double v18;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  v13 = 1.57079633 - atan2(v5[2], sqrt(_D1));
  v14 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v13 <= v14)
  {
    v16 = atan2(v5[1], *v5) + 3.14159265;
    v17 = 1.0 / (1.0 - cos(v14));
    v18 = cos(v13);
    *(double *)a3 = fmin(fmax(v16 * 0.159154943, 0.0), 1.0);
    *(double *)(a3 + 8) = fmin(fmax((1.0 - v18) * v17, 0.0), 1.0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
}

long double sub_208110B68@<D0>(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double result;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  result = atan2(v5[2], sqrt(_D1));
  v14 = 1.57079633 - result;
  v15 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v14 <= v15)
  {
    v16 = atan2(v5[1], *v5);
    v17 = 1.0 / v15;
    v18 = fmin(fmax((v16 + 3.14159265) * 0.159154943, 0.0), 1.0);
    v19 = fmax(v14 * v17, 0.0);
    v20 = v19 * -0.05 + 1.0;
    _NF = v19 < 1.0;
    v21 = 0.95;
    if (_NF)
      v21 = v20;
    result = log(v21) * -19.4957257;
    *(double *)a3 = v18;
    *(long double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void sub_208110C78(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double v13;
  long double v14;
  char v15;
  long double v16;
  long double v17;
  long double v18;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  v13 = 1.57079633 - atan2(v5[2], sqrt(_D1));
  v14 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v13 <= v14)
  {
    v16 = atan2(v5[1], *v5) + 3.14159265;
    v17 = 1.0 / (1.0 - cos(v14));
    v18 = cos(v13);
    *(double *)a3 = fmin(fmax(v16 * 0.159154943, 0.0), 1.0);
    *(double *)(a3 + 8) = fmin(fmax((1.0 - v18) * v17, 0.0), 1.0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
}

long double sub_208110D6C@<D0>(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double result;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  result = atan2(v5[2], sqrt(_D1));
  v14 = 1.57079633 - result;
  v15 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v14 <= v15)
  {
    v16 = atan2(v5[1], *v5);
    v17 = 1.0 / v15;
    v18 = fmin(fmax((v16 + 3.14159265) * 0.159154943, 0.0), 1.0);
    v19 = fmax(v14 * v17, 0.0);
    v20 = v19 * -0.05 + 1.0;
    _NF = v19 < 1.0;
    v21 = 0.95;
    if (_NF)
      v21 = v20;
    result = log(v21) * -19.4957257;
    *(double *)a3 = v18;
    *(long double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void sub_208110E7C(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double v13;
  long double v14;
  char v15;
  long double v16;
  long double v17;
  long double v18;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  v13 = 1.57079633 - atan2(v5[2], sqrt(_D1));
  v14 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v13 <= v14)
  {
    v16 = atan2(v5[1], *v5) + 3.14159265;
    v17 = 1.0 / (1.0 - cos(v14));
    v18 = cos(v13);
    *(double *)a3 = fmin(fmax(v16 * 0.159154943, 0.0), 1.0);
    *(double *)(a3 + 8) = fmin(fmax((1.0 - v18) * v17, 0.0), 1.0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
}

long double sub_208110F70@<D0>(long double ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double *v5;
  long double result;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = **a1;
  _Q0 = *(_OWORD *)v5;
  _D2 = *((_QWORD *)v5 + 1);
  __asm { FMLA            D1, D2, V0.D[1] }
  result = atan2(v5[2], sqrt(_D1));
  v14 = 1.57079633 - result;
  v15 = *(double *)a2;
  if (*(_BYTE *)(a2 + 8) || v14 <= v15)
  {
    v16 = atan2(v5[1], *v5);
    v17 = 1.0 / v15;
    v18 = fmin(fmax((v16 + 3.14159265) * 0.159154943, 0.0), 1.0);
    v19 = fmax(v14 * v17, 0.0);
    v20 = v19 * -0.05 + 1.0;
    _NF = v19 < 1.0;
    v21 = 0.95;
    if (_NF)
      v21 = v20;
    result = log(v21) * -19.4957257;
    *(double *)a3 = v18;
    *(long double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

double sub_208111080(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_208111088(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t sub_208111090(uint64_t a1, double *a2, int64x2_t *a3, uint64_t a4, double a5, double a6, double a7, double a8, int64x2_t a9, float64x2_t a10)
{
  double v10;
  double v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  uint64_t v21;
  double v22;
  float64x2_t v28;
  int64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  double v32;
  double v33;

  v10 = *a2;
  v11 = sqrt(v10 * v10 + a2[1] * a2[1]);
  if (a4)
  {
    v12 = a3[1];
    v13 = (float64x2_t)vzip1q_s64(*a3, v12);
    a9 = vzip2q_s64(*a3, v12);
    a10 = vmulq_f64((float64x2_t)a9, (float64x2_t)xmmword_208233A50);
    v14 = vmulq_f64(v13, (float64x2_t)xmmword_208233A40);
    v15 = v11;
    do
    {
      v16 = vmulq_n_f64(vaddq_f64(v14, vmulq_n_f64(a10, v15 * v15)), v15 * v15);
      v17 = v15 * v15 * (v15 * v15);
      v18 = v16.f64[0] + vmuld_lane_f64(v17, v16, 1) + 1.0;
      v19 = vmulq_n_f64(vaddq_f64(v13, vmulq_n_f64((float64x2_t)a9, v15 * v15)), v15 * v15);
      v20 = v11 - (v15 + v15 * (v19.f64[0] + vmuld_lane_f64(v17, v19, 1)));
      if (v18 == 0.0)
        break;
      v15 = fmax(v15 + v20 / v18, 0.0);
      --a4;
    }
    while (a4);
  }
  else
  {
    v20 = 0.0;
    v15 = v11;
  }
  LODWORD(v21) = fabs(v20) <= 0.0001;
  a9.i32[1] = 1074340347;
  if (v15 <= 3.14159265)
    v21 = v21;
  else
    v21 = 0;
  if ((_DWORD)v21 == 1)
  {
    a9.i32[0] = 0;
    a10.f64[0] = v15 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
    v22 = v15 + a10.f64[0] * -1.57079633 + a10.f64[0] * -5.39030286e-15 + a10.f64[0] * -8.84372057e-29;
    __asm { FMOV            V20.2D, #1.0 }
    v28 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A60, v22 * v22), _Q20), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233AA0, v22 * v22), (float64x2_t)xmmword_208233AB0), v22 * v22 * (v22 * v22))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A70, v22 * v22), (float64x2_t)xmmword_208233A80), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A90, v22 * v22), (float64x2_t)xmmword_208233AC0), v22 * v22 * (v22 * v22))), v22 * v22 * (v22 * v22) * (v22 * v22 * (v22 * v22))));
    _Q20.f64[0] = v22;
    v29 = (int64x2_t)vmulq_f64(v28, vmulq_f64(_Q20, xmmword_20827D5A0[(int)a10.f64[0] & 3]));
    LODWORD(a10.f64[0]) = (int)a10.f64[0] & 1;
    v30 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)a10, (int32x4_t)a9), 0);
    v31 = vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)vdupq_lane_s64(v29.i64[0], 0));
    v32 = *(double *)vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)vdupq_laneq_s64(v29, 1)).i64 / v11;
    _NF = v11 < 0.0001;
    v33 = 1.0;
    if (!_NF)
      v33 = v32;
    *(double *)a1 = v10 * v33;
    *(double *)(a1 + 8) = a2[1] * v33;
    *(_QWORD *)(a1 + 16) = v31.i64[1];
  }
  return v21;
}

uint64_t sub_2081112B8(uint64_t a1, double *a2, double *a3, uint64_t a4, double a5, double a6, double a7, int32x4_t a8, int32x4_t a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  float64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  double v29;

  if (a4)
  {
    v9 = a3[1];
    v10 = a3[2];
    v11 = a3[3];
    v12 = a3[4];
    v13 = a3[5];
    v14 = a3[6];
    do
    {
      v15 = a6
          * a6
          * (*a3 * 3.0
           + a6
           * a6
           * (v9 * 5.0
            + a6
            * a6
            * (v10 * 7.0
             + a6 * a6 * (v11 * 9.0 + a6 * a6 * (v12 * 11.0 + a6 * a6 * (v13 * 13.0 + v14 * (a6 * a6 * 15.0)))))))
          + 1.0;
      v16 = a5
          - a6
          * (a6
           * a6
           * (*a3
            + a6 * a6 * (v9 + a6 * a6 * (v10 + a6 * a6 * (v11 + a6 * a6 * (v12 + a6 * a6 * (v13 + v14 * (a6 * a6)))))))
           + 1.0);
      if (v15 == 0.0)
        break;
      a6 = fmax(a6 + v16 / v15, 0.0);
      --a4;
    }
    while (a4);
  }
  else
  {
    v16 = 0.0;
  }
  LODWORD(v17) = fabs(v16) <= 0.0001;
  a8.i32[1] = 1074340347;
  if (a6 <= 3.14159265)
    v17 = v17;
  else
    v17 = 0;
  if ((_DWORD)v17 == 1)
  {
    a8.i32[0] = 0;
    *(double *)a9.i64 = a6 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
    v18 = a6
        + *(double *)a9.i64 * -1.57079633
        + *(double *)a9.i64 * -5.39030286e-15
        + *(double *)a9.i64 * -8.84372057e-29;
    __asm { FMOV            V19.2D, #1.0 }
    v24 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A60, v18 * v18), _Q19), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233AA0, v18 * v18), (float64x2_t)xmmword_208233AB0), v18 * v18 * (v18 * v18))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A70, v18 * v18), (float64x2_t)xmmword_208233A80), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A90, v18 * v18), (float64x2_t)xmmword_208233AC0), v18 * v18 * (v18 * v18))), v18 * v18 * (v18 * v18) * (v18 * v18 * (v18 * v18))));
    _Q19.f64[0] = v18;
    v25 = (int64x2_t)vmulq_f64(v24, vmulq_f64(_Q19, xmmword_20827D5A0[(int)*(double *)a9.i64 & 3]));
    a9.i32[0] = (int)*(double *)a9.i64 & 1;
    v26 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a9, a8), 0);
    v27 = vbslq_s8(v26, (int8x16_t)v25, (int8x16_t)vdupq_lane_s64(v25.i64[0], 0));
    v28 = *(double *)vbslq_s8(v26, (int8x16_t)v25, (int8x16_t)vdupq_laneq_s64(v25, 1)).i64 / a5;
    _NF = a5 < 0.0001;
    v29 = 1.0;
    if (!_NF)
      v29 = v28;
    *(double *)a1 = *a2 * v29;
    *(double *)(a1 + 8) = a2[1] * v29;
    *(_QWORD *)(a1 + 16) = v27.i64[1];
  }
  return v17;
}

uint64_t sub_208111528(float64x2_t *a1, uint64_t a2, double *a3, double a4)
{
  double v4;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  double v33;
  double v35;
  int v36;
  double v37;
  int v38;
  double v39;

  v4 = *(double *)(a2 + 16);
  _Q1 = *(float64x2_t *)a2;
  _D2 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D6, D2, V1.D[1] }
  v11 = sqrt(_D6);
  v12 = fabs(v4);
  v13 = fabs(v11);
  if (v12 < v13)
  {
    v14 = v12 / v13;
    if (v12 / v13 <= 0.414213562)
      goto LABEL_3;
LABEL_28:
    v17 = (v13 - v12) / (v12 + v13);
    if (v12 >= v13)
      v17 = -v17;
    v15 = -1;
    v16 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_4;
LABEL_31:
    *a1 = vmulq_n_f64(_Q1, 1.0 / v4);
    return 1;
  }
  v14 = v13 / v12;
  if (v13 / v12 > 0.414213562)
    goto LABEL_28;
LABEL_3:
  v15 = 1;
  v16 = 2;
  v17 = v14;
  if (_D6 < 0.00000001)
    goto LABEL_31;
LABEL_4:
  v18 = a3[8] / a4;
  v19 = a3[9] / a4;
  v20 = a3[10] / a4;
  v21 = a3[11] / a4;
  v22 = a3[12] / a4;
  v23 = a3[13] / a4;
  v24 = *a3 + a3[7] / a4;
  v25 = a3[1] + v18;
  v26 = a3[2] + v19;
  v27 = a3[3] + v20;
  v28 = a3[4] + v21;
  v29 = a3[5] + v22;
  if (v12 < v13)
    v15 = -v15;
  else
    v16 = v14 > 0.414213562;
  v30 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v17 * v17), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v17 * v17), (float64x2_t)xmmword_208233A20), v17 * v17 * (v17 * v17))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v17 * v17), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v17 * v17), (float64x2_t)xmmword_208233A30), v17 * v17 * (v17 * v17))), v17 * v17 * (v17 * v17) * (v17 * v17 * (v17 * v17))));
  v31 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1);
  _ZF = v11 == INFINITY && v12 == INFINITY;
  v33 = v17 + v17 * vdivq_f64(v30, v31).f64[0];
  if (_ZF)
    v33 = 0.785398163;
  if (v11 == 0.0 && v4 == 0.0)
    v35 = 0.0;
  else
    v35 = v33;
  if (*(uint64_t *)(a2 + 16) < 0)
  {
    v16 = 4 - v16;
    v15 = -v15;
  }
  if (v11 >= 0.0)
    v36 = v16;
  else
    v36 = -v16;
  v37 = (double)v36;
  if (v11 >= 0.0)
    v38 = v15;
  else
    v38 = -v15;
  v39 = v37 * 3.061617e-17 + v37 * 0.785398163 + v35 * (double)v38;
  *a1 = vmulq_n_f64(_Q1, 1.0/ v11* (v39* (v39* v39* (v24+ v39* v39* (v25+ v39* v39* (v26 + v39 * v39 * (v27 + v39 * v39 * (v28 + v39 * v39 * (v29 + (a3[6] + v23) * (v39 * v39)))))))+ 1.0)));
  return 1;
}

uint64_t sub_2081117AC(float64x2_t *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, double a6)
{
  long double v17;
  long double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;
  long double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  double v40;
  double v41;
  long double v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  double v48;
  float64x2_t v50;
  double v51;

  _Q2 = *(float64x2_t *)a4;
  _D0 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D1, D0, V2.D[1] }
  v17 = *(double *)(a4 + 16);
  if (_D1 == 0.0)
  {
    a1->f64[0] = 0.0;
    a1->f64[1] = 0.0;
    *(long double *)a2 = 1.0 / v17;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(long double *)(a2 + 32) = 1.0 / v17;
    *(_QWORD *)(a2 + 40) = 0;
    if (a3)
    {
      a3->f64[0] = 0.0;
      a3->f64[1] = 0.0;
    }
  }
  else
  {
    v20 = v17 * v17 + _D1;
    v21 = sqrt(_D1);
    v50 = *(float64x2_t *)a4;
    v51 = _D1;
    v22 = atan2(v21, v17);
    v23 = a5[1];
    v24 = a5[2];
    v25 = a5[3];
    v26 = a5[4];
    v27 = a5[5];
    v28 = v22 * v22 * 15.0;
    v29 = a5[6];
    v30 = a5[7];
    v31 = v22
        * v22
        * (*a5 * 3.0
         + v22
         * v22
         * (v23 * 5.0
          + v22
          * v22
          * (v24 * 7.0 + v22 * v22 * (v25 * 9.0 + v22 * v22 * (v26 * 11.0 + v22 * v22 * (v27 * 13.0 + v28 * v29))))))
        + 1.0;
    v32 = v22
        * (v22
         * v22
         * (*a5
          + v22
          * v22
          * (v23 + v22 * v22 * (v24 + v22 * v22 * (v25 + v22 * v22 * (v26 + v22 * v22 * (v27 + v22 * v22 * v29))))))
         + 1.0);
    v33 = a5[8];
    v34 = a5[9];
    v35 = a5[10];
    v36 = a5[11];
    v37 = a5[12];
    v38 = a5[13];
    v39 = v22
        * v22
        * (v30 * 3.0
         + v22
         * v22
         * (v33 * 5.0
          + v22
          * v22
          * (v34 * 7.0 + v22 * v22 * (v35 * 9.0 + v22 * v22 * (v36 * 11.0 + v22 * v22 * (v37 * 13.0 + v28 * v38))))))
        + 1.0;
    v40 = v22
        * (v22
         * v22
         * (v30
          + v22
          * v22
          * (v33 + v22 * v22 * (v34 + v22 * v22 * (v35 + v22 * v22 * (v36 + v22 * v22 * (v37 + v22 * v22 * v38))))))
         + 1.0)
        - v22;
    v41 = (v32 + v40 / a6) / v21;
    *a1 = vmulq_n_f64(v50, v41);
    v42 = (v31 + (v39 + -1.0) / a6) / v20;
    v43 = vmulq_n_f64(*(float64x2_t *)a4, (v17 * v42 - v41) / v51);
    v44 = -v42;
    v45 = vmulq_n_f64(v43, *(double *)a4);
    v46 = v44 * *(double *)a4;
    v47 = vmulq_laneq_f64(v43, *(float64x2_t *)a4, 1);
    v48 = vmuld_lane_f64(v44, *(float64x2_t *)a4, 1);
    *(float64x2_t *)a2 = v45;
    *(double *)(a2 + 16) = v46;
    *(float64x2_t *)(a2 + 24) = v47;
    *(double *)a2 = v41 + v45.f64[0];
    *(double *)(a2 + 32) = v41 + v47.f64[1];
    *(double *)(a2 + 40) = v48;
    if (a3)
      *a3 = vmulq_n_f64(*(float64x2_t *)a4, -v40 / (a6 * a6) / v21);
  }
  return 1;
}

uint64_t sub_208111A60(float64x2_t *a1, uint64_t a2, double *a3, double a4)
{
  long double v15;
  long double v16;
  float64x2_t v17;

  _Q2 = *(float64x2_t *)a2;
  _D1 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D0, D1, V2.D[1] }
  if (_D0 == 0.0)
  {
    a1->f64[0] = 0.0;
    a1->f64[1] = 0.0;
  }
  else
  {
    v15 = sqrt(_D0);
    v17 = *(float64x2_t *)a2;
    v16 = atan2(v15, *(long double *)(a2 + 16));
    *a1 = vmulq_n_f64(v17, (v16* (v16* (*a3+ v16* (a3[1]+ v16* (a3[2]+ v16* (a3[3]+ v16* (a3[4]+ v16* (a3[5]+ v16* (a3[6]+ v16* (a3[7]+ v16
                    * (a3[8] + v16 * (a3[9] + v16 * (a3[10] + v16 * (a3[11] + v16 * (a3[12] + v16 * (a3[13] + 0.0))))))))))))))
            + 1.0)
           + (v16
            * (v16
             * (a3[14]
              + v16
              * (a3[15]
               + v16
               * (a3[16]
                + v16
                * (a3[17]
                 + v16
                 * (a3[18]
                  + v16
                  * (a3[19]
                   + v16
                   * (a3[20]
                    + v16
                    * (a3[21]
                     + v16
                     * (a3[22] + v16
                               * (a3[23] + v16 * (a3[24] + v16 * (a3[25] + v16 * (a3[26] + v16 * (a3[27] + 0.0))))))))))))))
             + 1.0)
            - v16)
           / a4)
          / v15);
  }
  return 1;
}

uint64_t sub_208111C2C(float64x2_t *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, double a6)
{
  long double v16;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;

  _Q3 = *(float64x2_t *)a4;
  _D1 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D2, D1, V3.D[1] }
  v16 = *(double *)(a4 + 16);
  if (_D2 == 0.0)
  {
    a1->f64[0] = 0.0;
    a1->f64[1] = 0.0;
    if (a2)
    {
      *(long double *)a2 = 1.0 / v16;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(long double *)(a2 + 32) = 1.0 / v16;
      *(_QWORD *)(a2 + 40) = 0;
    }
    if (a3)
    {
      a3->f64[0] = 0.0;
      a3->f64[1] = 0.0;
    }
  }
  else
  {
    v61 = _D2;
    v20 = sqrt(_D2);
    v62 = *(float64x2_t *)a4;
    v21 = atan2(v20, v16);
    v22 = a5[12];
    v60 = a5[13];
    v23 = a5[10];
    v58 = a5[11];
    v25 = a5[8];
    v24 = a5[9];
    v27 = a5[6];
    v26 = a5[7];
    v29 = a5[4];
    v28 = a5[5];
    v31 = a5[2];
    v30 = a5[3];
    v33 = *a5;
    v32 = a5[1];
    v34 = a5[26];
    v59 = a5[27];
    v36 = a5[24];
    v35 = a5[25];
    v38 = a5[22];
    v37 = a5[23];
    v40 = a5[20];
    v39 = a5[21];
    v41 = a5[18];
    v42 = a5[19];
    v44 = a5[16];
    v43 = a5[17];
    v46 = a5[14];
    v45 = a5[15];
    v47 = v21
        * (v21
         * (v46
          + v21
          * (v45
           + v21
           * (v44
            + v21
            * (v43
             + v21
             * (v41
              + v21
              * (v42
               + v21
               * (v40
                + v21 * (v39 + v21 * (v38 + v21 * (v37 + v21 * (v36 + v21 * (v35 + v21 * (v34 + v21 * (v59 + 0.0))))))))))))))
         + 1.0)
        - v21;
    v48 = (v21
         * (v21
          * (*a5
           + v21
           * (v32
            + v21
            * (v31
             + v21
             * (v30
              + v21
              * (v29
               + v21
               * (v28
                + v21
                * (v27
                 + v21 * (v26 + v21 * (v25 + v21 * (v24 + v21 * (v23 + v21 * (v58 + v21 * (v22 + v21 * (v60 + 0.0))))))))))))))
          + 1.0)
         + v47 / a6)
        / v20;
    *a1 = vmulq_n_f64(v62, v48);
    if (a2)
    {
      v49 = (v21
           * (v33
            + v33
            + v21
            * (v32 * 3.0
             + v21
             * (v31 * 4.0
              + v21
              * (v30 * 5.0
               + v21
               * (v29 * 6.0
                + v21
                * (v28 * 7.0
                 + v21
                 * (v27 * 8.0
                  + v21
                  * (v26 * 9.0
                   + v21
                   * (v25 * 10.0
                    + v21
                    * (v24 * 11.0
                     + v21 * (v23 * 12.0 + v21 * (v58 * 13.0 + v21 * (v22 * 14.0 + v21 * (v60 * 15.0 + 0.0))))))))))))))
           + 1.0
           + (v21
            * (v46
             + v46
             + v21
             * (v45 * 3.0
              + v21
              * (v44 * 4.0
               + v21
               * (v43 * 5.0
                + v21
                * (v41 * 6.0
                 + v21
                 * (v42 * 7.0
                  + v21
                  * (v40 * 8.0
                   + v21
                   * (v39 * 9.0
                    + v21
                    * (v38 * 10.0
                     + v21
                     * (v37 * 11.0
                      + v21 * (v36 * 12.0 + v21 * (v35 * 13.0 + v21 * (v34 * 14.0 + v21 * (v59 * 15.0 + 0.0))))))))))))))
            + 1.0
            + -1.0)
           / a6)
          / (v16 * v16 + v61);
      v50 = vmulq_n_f64(*(float64x2_t *)a4, (v16 * v49 - v48) / v61);
      v51 = -v49;
      v52 = vmulq_n_f64(v50, *(double *)a4);
      v53 = v51 * *(double *)a4;
      v54 = vmulq_laneq_f64(v50, *(float64x2_t *)a4, 1);
      v55 = vmuld_lane_f64(v51, *(float64x2_t *)a4, 1);
      *(double *)(a2 + 16) = v53;
      *(float64x2_t *)a2 = v52;
      *(float64x2_t *)(a2 + 24) = v54;
      v52.f64[1] = v54.f64[1];
      *(double *)(a2 + 40) = v55;
      v56 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48, 0), v52);
      *(float64_t *)a2 = v56.f64[0];
      *(float64_t *)(a2 + 32) = v56.f64[1];
    }
    if (a3)
      *a3 = vmulq_n_f64(*(float64x2_t *)a4, -v47 / (a6 * a6) / v20);
  }
  return 1;
}

BOOL sub_2081120A4(float64x2_t *a1, uint64_t a2, double *a3, double a4)
{
  double v11;
  double v12;
  double v13;
  double v14;
  _BOOL8 v15;
  long double v17;
  float64x2_t v19;

  _Q19 = *(float64x2_t *)a2;
  _D2 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D1, D2, V19.D[1] }
  v11 = sqrt(_D1);
  v12 = v11
      * v11
      * (*a3
       + a3[7] / a4
       + v11
       * v11
       * (a3[1]
        + a3[8] / a4
        + v11
        * v11
        * (a3[2]
         + a3[9] / a4
         + v11
         * v11
         * (a3[3]
          + a3[10] / a4
          + v11 * v11 * (a3[4] + a3[11] / a4 + v11 * v11 * (a3[5] + a3[12] / a4 + v11 * v11 * (a3[6] + a3[13] / a4)))))));
  v13 = 1.0;
  v14 = v11 * (v12 + 1.0);
  v15 = v14 <= 3.14159265 && v14 >= 0.0;
  if (v15)
  {
    if (v11 >= 0.0001)
    {
      v19 = *(float64x2_t *)a2;
      v17 = sin(v14);
      _Q19 = v19;
      v13 = v17 / v11;
    }
    *a1 = vmulq_n_f64(_Q19, v13);
    a1[1].f64[0] = cos(v14);
  }
  return v15;
}

uint64_t sub_2081121D8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unsigned int a5, double a6)
{
  uint64_t result;
  long double v11;
  double v19;
  int32x4_t v23;
  double v24;
  _OWORD v25[3];
  double v26;

  if (a4)
  {
    v24 = a6;
    result = sub_2081120A4((float64x2_t *)a1, a2, a4, a6);
    if (!(_DWORD)result)
      return result;
    v11 = *(double *)(a1 + 16);
    a6 = v24;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
    v11 = 1.0;
  }
  _Q2 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
  _Q3 = vaddq_f64(*(float64x2_t *)(a3 + 16), vdivq_f64(*(float64x2_t *)(a3 + 72), _Q2));
  v25[0] = vaddq_f64(*(float64x2_t *)a3, vdivq_f64(*(float64x2_t *)(a3 + 56), _Q2));
  v25[1] = _Q3;
  v25[2] = vaddq_f64(*(float64x2_t *)(a3 + 32), vdivq_f64(*(float64x2_t *)(a3 + 88), _Q2));
  v26 = *(double *)(a3 + 48) + *(double *)(a3 + 104) / a6;
  _Q0 = *(float64x2_t *)a1;
  _Q3.f64[0] = *(float64_t *)(a1 + 8);
  __asm { FMLA            D2, D3, V0.D[1] }
  v19 = atan2(sqrt(_Q2.f64[0]), v11);
  _Q0 = *(_OWORD *)a2;
  _Q3.i64[0] = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D2, D3, V0.D[1] }
  return sub_2081112B8(a1, (double *)a2, (double *)v25, a5, sqrt(_D2), v19, _D2, _Q3, v23);
}

uint64_t sub_2081122E4(uint64_t a1, uint64_t a2, double *a3, double *a4, unsigned int a5, double a6)
{
  uint64_t result;
  double v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v35;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;

  if (a4)
  {
    result = 0;
    _Q25 = *(float64x2_t *)a2;
    _D0 = *(_QWORD *)(a2 + 8);
    __asm { FMLA            D3, D0, V25.D[1] }
    v19 = sqrt(_D3);
    v20 = v19
        * (v19
         * (*a4
          + a4[14] / a6
          + v19
          * (a4[1]
           + a4[15] / a6
           + v19
           * (a4[2]
            + a4[16] / a6
            + v19
            * (a4[3]
             + a4[17] / a6
             + v19
             * (a4[4]
              + a4[18] / a6
              + v19
              * (a4[5]
               + a4[19] / a6
               + v19
               * (a4[6]
                + a4[20] / a6
                + v19
                * (a4[7]
                 + a4[21] / a6
                 + v19
                 * (a4[8]
                  + a4[22] / a6
                  + v19
                  * (a4[9]
                   + a4[23] / a6
                   + v19
                   * (a4[10]
                    + a4[24] / a6
                    + v19 * (a4[11] + a4[25] / a6 + v19 * (a4[12] + a4[26] / a6 + v19 * (a4[13] + a4[27] / a6 + 0.0))))))))))))))
         + 1.0);
    if (v20 < 0.0 || v20 > 3.14159265)
      return result;
    v21 = 1.0;
    if (v19 >= 0.0001)
    {
      v81 = *(float64x2_t *)a2;
      v22 = sin(v20);
      _Q25 = v81;
      v21 = v22 / v19;
    }
    v82 = vmulq_n_f64(_Q25, v21);
    *(float64x2_t *)a1 = v82;
    v23 = cos(v20);
    _Q3.f64[1] = v82.f64[1];
    v25 = v23;
    *(long double *)(a1 + 16) = v23;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
    _Q3 = *(float64x2_t *)a1;
    v25 = 1.0;
  }
  v79 = a3[1];
  v80 = *a3;
  v26 = a3[14];
  v77 = a3[3];
  v78 = a3[2];
  v27 = a3[16];
  v66 = a3[17];
  v67 = a3[15];
  v75 = a3[5];
  v76 = a3[4];
  v28 = a3[18];
  v73 = a3[7];
  v74 = a3[6];
  v29 = a3[20];
  v64 = a3[21];
  v65 = a3[19];
  v71 = a3[9];
  v72 = a3[8];
  v30 = a3[22];
  v69 = a3[11];
  v70 = a3[10];
  v31 = a3[24];
  v62 = a3[25];
  v63 = a3[23];
  v68 = a3[12];
  v32 = a3[26];
  _D2 = _Q3.f64[1];
  __asm { FMLA            D0, D2, V3.D[1] }
  v35 = atan2(sqrt(_D0), v25);
  _Q3 = *(float64x2_t *)a2;
  _Q1 = (int32x4_t)vmulq_f64(_Q3, _Q3);
  _Q2.i64[0] = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D1, D2, V3.D[1] }
  v83 = sqrt(*(double *)_Q1.i64);
  if (a5)
  {
    v39 = v80 + v26 / a6;
    v40 = v79 + v67 / a6;
    v41 = a3[13] + a3[27] / a6;
    v42 = v68 + v32 / a6;
    v43 = v69 + v62 / a6;
    v44 = a5;
    v45 = v70 + v31 / a6;
    v46 = v71 + v63 / a6;
    v47 = v72 + v30 / a6;
    v48 = v73 + v64 / a6;
    v49 = v74 + v29 / a6;
    v50 = v75 + v65 / a6;
    v51 = v76 + v28 / a6;
    v52 = v77 + v66 / a6;
    do
    {
      v53 = v35
          * (v39
           + v39
           + v35
           * (v40 * 3.0
            + v35
            * ((v78 + v27 / a6) * 4.0
             + v35
             * (v52 * 5.0
              + v35
              * (v51 * 6.0
               + v35
               * (v50 * 7.0
                + v35
                * (v49 * 8.0
                 + v35
                 * (v48 * 9.0
                  + v35
                  * (v47 * 10.0
                   + v35
                   * (v46 * 11.0
                    + v35 * (v45 * 12.0 + v35 * (v43 * 13.0 + v35 * (v42 * 14.0 + (v41 * 15.0 + 0.0) * v35)))))))))))))
          + 1.0;
      v54 = v83
          - v35
          * (v35
           * (v39
            + v35
            * (v40
             + v35
             * (v78
              + v27 / a6
              + v35
              * (v52
               + v35
               * (v51
                + v35
                * (v50
                 + v35
                 * (v49
                  + v35
                  * (v48 + v35 * (v47 + v35 * (v46 + v35 * (v45 + v35 * (v43 + v35 * (v42 + (v41 + 0.0) * v35)))))))))))))
           + 1.0);
      if (v53 == 0.0)
        break;
      v35 = fmax(v35 + v54 / v53, 0.0);
      --v44;
    }
    while (v44);
  }
  else
  {
    v54 = 0.0;
  }
  result = 0;
  if (fabs(v54) <= 0.0001)
  {
    _Q1.i32[1] = 1074340347;
    if (v35 <= 3.14159265)
    {
      _Q1.i32[0] = 0;
      *(double *)_Q2.i64 = v35 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
      v55 = v35
          + *(double *)_Q2.i64 * -1.57079633
          + *(double *)_Q2.i64 * -5.39030286e-15
          + *(double *)_Q2.i64 * -8.84372057e-29;
      __asm { FMOV            V18.2D, #1.0 }
      v57 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A60, v55 * v55), _Q18), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233AA0, v55 * v55), (float64x2_t)xmmword_208233AB0), v55 * v55 * (v55 * v55))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A70, v55 * v55), (float64x2_t)xmmword_208233A80), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A90, v55 * v55), (float64x2_t)xmmword_208233AC0), v55 * v55 * (v55 * v55))), v55 * v55 * (v55 * v55) * (v55 * v55 * (v55 * v55))));
      _Q18.f64[0] = v55;
      v58 = (int64x2_t)vmulq_f64(v57, vmulq_f64(_Q18, xmmword_20827D5A0[(int)*(double *)_Q2.i64 & 3]));
      _Q2.i32[0] = (int)*(double *)_Q2.i64 & 1;
      v59 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(_Q2, _Q1), 0);
      v60 = vbslq_s8(v59, (int8x16_t)v58, (int8x16_t)vdupq_lane_s64(v58.i64[0], 0));
      v61 = *(double *)vbslq_s8(v59, (int8x16_t)v58, (int8x16_t)vdupq_laneq_s64(v58, 1)).i64 / v83;
      if (v83 < 0.0001)
        v61 = 1.0;
      *(double *)a1 = *(double *)a2 * v61;
      *(double *)(a1 + 8) = *(double *)(a2 + 8) * v61;
      *(_QWORD *)(a1 + 16) = v60.i64[1];
      return 1;
    }
  }
  return result;
}

uint64_t sub_2081129B0(double *a1, uint64_t a2, double *a3, int64x2_t *a4, uint64_t a5, double a6, double a7, double a8, double a9, int64x2_t a10)
{
  double v13;
  double v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  uint64_t result;
  double v26;
  double v27;
  double v28;
  float64x2_t v34;
  float64x2_t v35;
  int v36;
  float64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  int8x16_t v40;
  long double v41;
  double v42;
  double v43;
  double v45;
  float64x2_t v48;
  unint64_t v49;
  long double v50;
  long double v51;
  long double v52;
  int64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64_t v57;
  __int128 v59;
  float64x2_t v60;
  __int128 v61;
  int8x16_t v62;
  float64x2_t v64;
  __int128 v66;
  __int128 v67;
  int64x2_t v68;
  double v69;
  double v70;
  float64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  int64x2_t v74;
  uint64_t v75;
  __int128 v76;
  double v77;
  __int128 v78;
  unint64_t v79;
  __int128 v80;
  float64_t v81;

  v13 = *a3;
  v14 = sqrt(v13 * v13 + a3[1] * a3[1]);
  if (a5)
  {
    v15 = a4[1];
    v16 = (float64x2_t)vzip1q_s64(*a4, v15);
    a10 = vzip2q_s64(*a4, v15);
    v17 = vmulq_f64((float64x2_t)a10, (float64x2_t)xmmword_208233A50);
    v18 = vmulq_f64(v16, (float64x2_t)xmmword_208233A40);
    v19 = v14;
    do
    {
      v20 = vmulq_n_f64(vaddq_f64(v18, vmulq_n_f64(v17, v19 * v19)), v19 * v19);
      v21 = v19 * v19 * (v19 * v19);
      v22 = v20.f64[0] + vmuld_lane_f64(v21, v20, 1) + 1.0;
      v23 = vmulq_n_f64(vaddq_f64(v16, vmulq_n_f64((float64x2_t)a10, v19 * v19)), v19 * v19);
      v24 = v14 - (v19 + v19 * (v23.f64[0] + vmuld_lane_f64(v21, v23, 1)));
      if (v22 == 0.0)
        break;
      v19 = fmax(v19 + v24 / v22, 0.0);
      --a5;
    }
    while (a5);
  }
  else
  {
    v24 = 0.0;
    v19 = v14;
  }
  result = 0;
  if (fabs(v24) <= 0.0001)
  {
    a10.i32[1] = 1074340347;
    if (v19 <= 3.14159265)
    {
      a10.i32[0] = 0;
      v26 = v19 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
      v27 = v19 + v26 * -1.57079633 + v26 * -5.39030286e-15 + v26 * -8.84372057e-29;
      v28 = v27 * v27 * (v27 * v27);
      __asm { FMOV            V20.2D, #1.0 }
      v34 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A60, v27 * v27), _Q20), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233AA0, v27 * v27), (float64x2_t)xmmword_208233AB0), v28));
      v35 = vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A70, v27 * v27), (float64x2_t)xmmword_208233A80), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A90, v27 * v27), (float64x2_t)xmmword_208233AC0), v28)), v28 * v28);
      _Q20.f64[0] = v27;
      v36 = (int)v26;
      v37 = vmulq_f64(_Q20, xmmword_20827D5A0[(int)v26 & 3]);
      v38 = (int64x2_t)vmulq_f64(vaddq_f64(v34, v35), v37);
      LODWORD(v37.f64[0]) = v36 & 1;
      v39 = (float64x2_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v37, (int32x4_t)a10), 0);
      v40 = vbslq_s8((int8x16_t)v39, (int8x16_t)v38, (int8x16_t)vdupq_lane_s64(v38.i64[0], 0));
      v41 = *(double *)&v40.i64[1];
      v42 = *(double *)vbslq_s8((int8x16_t)v39, (int8x16_t)v38, (int8x16_t)vdupq_laneq_s64(v38, 1)).i64 / v14;
      if (v14 >= 0.0001)
        v43 = v42;
      else
        v43 = 1.0;
      *a1 = v13 * v43;
      a1[1] = a3[1] * v43;
      a1[2] = *(double *)&v40.i64[1];
      _Q5 = *(float64x2_t *)a1;
      *(_QWORD *)&v45 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      _Q1 = vmulq_f64(_Q5, _Q5);
      _D0 = *((_QWORD *)a1 + 1);
      __asm { FMLA            D1, D0, V5.D[1] }
      if (_Q1.f64[0] >= 0.00000001)
      {
        v50 = v41 * v41 + _Q1.f64[0];
        v51 = sqrt(_Q1.f64[0]);
        v69 = _Q1.f64[0];
        v70 = v45;
        v71 = *(float64x2_t *)a1;
        v52 = atan2(v51, v41);
        v53 = a4[1];
        v54 = (float64x2_t)vzip2q_s64(*a4, v53);
        v55 = (float64x2_t)vzip1q_s64(*a4, v53);
        v39 = vmulq_n_f64(vmulq_f64(v54, (float64x2_t)xmmword_208233A50), v52 * v52);
        v56 = vmulq_n_f64(vaddq_f64(vmulq_f64(v55, (float64x2_t)xmmword_208233A40), v39), v52 * v52);
        v39.f64[0] = v52 * v52 * (v52 * v52);
        v56.f64[0] = v56.f64[0] + vmuld_lane_f64(v39.f64[0], v56, 1) + 1.0;
        _Q1 = vmulq_n_f64(vaddq_f64(v55, vmulq_n_f64(v54, v52 * v52)), v52 * v52);
        v45 = v70;
        _Q5 = v71;
        v39.f64[0] = (v52 + v52 * (_Q1.f64[0] + vmuld_lane_f64(v39.f64[0], _Q1, 1))) / v51;
        v57 = v56.f64[0] / v50;
        v48 = vmulq_n_f64(v71, (v41 * (v56.f64[0] / v50) - v39.f64[0]) / v69);
        _Q1.f64[0] = -v57;
        v49 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      }
      else
      {
        v39.f64[0] = 1.0 / v41;
        _Q1.f64[0] = -(v39.f64[0] * v39.f64[0]);
        v48.f64[0] = 0.0;
        v49 = 0;
      }
      *(_QWORD *)&v48.f64[1] = v49;
      _Q3 = (int64x2_t)vmulq_n_f64(v48, _Q5.f64[0]);
      *(double *)&v59 = _Q1.f64[0] * _Q5.f64[0];
      v60 = vmulq_laneq_f64(v48, _Q5, 1);
      _Q1.f64[0] = _Q1.f64[0] * v45;
      *(double *)&v61 = v39.f64[0] + *(double *)_Q3.i64;
      v35.f64[0] = v39.f64[0] + v60.f64[1];
      v39.f64[0] = a1[2];
      v62 = *(int8x16_t *)a1;
      _Q17.f64[0] = v35.f64[0];
      _Q17.f64[1] = _Q1.f64[0];
      v64.f64[0] = v39.f64[0];
      v64.f64[1] = *a1;
      _Q17.f64[0] = vmlsq_f64(vmulq_f64(_Q17, v64), (float64x2_t)vzip1q_s64(*(int64x2_t *)&_Q1, *(int64x2_t *)&v60), (float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)&v39, 8uLL)).f64[1];
      __asm { FMLA            D16, D17, V3.D[1] }
      if (fabs(vmlad_n_f64(_D16, *(double *)&v59, vmlsq_f64(vmulq_laneq_f64(v60, *(float64x2_t *)a1, 1), v35, *(float64x2_t *)a1).f64[0])) < 0.00000001)
      {
        return 0;
      }
      else
      {
        *((_QWORD *)&v61 + 1) = *(_QWORD *)&v60.f64[0];
        *(_QWORD *)&v66 = vdupq_laneq_s64(_Q3, 1).u64[0];
        *((_QWORD *)&v66 + 1) = *(_QWORD *)&v35.f64[0];
        *((_QWORD *)&v59 + 1) = *(_QWORD *)&_Q1.f64[0];
        v77 = *a1;
        v76 = v61;
        v79 = vextq_s8(v62, v62, 8uLL).u64[0];
        v78 = v66;
        v81 = v39.f64[0];
        v80 = v59;
        sub_207CC48B4((uint64_t)&v72);
        *(_QWORD *)&v67 = v73;
        v68 = vzip2q_s64(v72, v74);
        *((_QWORD *)&v67 + 1) = v75;
        *(int64x2_t *)a2 = vzip1q_s64(v72, v74);
        *(int64x2_t *)(a2 + 16) = v68;
        *(_OWORD *)(a2 + 32) = v67;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_208112DDC(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  double v13;
  uint64_t result;
  float64x2_t v15;
  float64x2_t v16;
  long double v17;
  double v19;
  float64x2_t v26;
  unint64_t v27;
  long double v28;
  long double v29;
  long double v30;
  int64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v35;
  __int128 v37;
  float64x2_t v38;
  __int128 v39;
  int8x16_t v40;
  float64x2_t v42;
  __int128 v44;
  __int128 v45;
  int64x2_t v46;
  double v47;
  double v48;
  float64x2_t v49;
  int64x2_t v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  __int128 v58;
  float64_t v59;

  v13 = sqrt(*a3 * *a3 + a3[1] * a3[1]);
  result = sub_2081112B8(a1, a3, (double *)a4, a5, v13, v13, a8, a9, a10);
  if ((_DWORD)result)
  {
    v17 = *(double *)(a1 + 16);
    _Q5 = *(float64x2_t *)a1;
    *(_QWORD *)&v19 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _Q1 = vmulq_f64(_Q5, _Q5);
    _D0 = *(_QWORD *)(a1 + 8);
    __asm { FMLA            D1, D0, V5.D[1] }
    if (_Q1.f64[0] >= 0.00000001)
    {
      v28 = v17 * v17 + _Q1.f64[0];
      v29 = sqrt(_Q1.f64[0]);
      v47 = _Q1.f64[0];
      v48 = v19;
      v49 = *(float64x2_t *)a1;
      v30 = atan2(v29, v17);
      v31 = *(int64x2_t *)(a4 + 16);
      v32 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, v31);
      v33 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a4, v31);
      v15 = vmulq_n_f64(vmulq_f64(v32, (float64x2_t)xmmword_208233A50), v30 * v30);
      v34 = vmulq_n_f64(vaddq_f64(vmulq_f64(v33, (float64x2_t)xmmword_208233A40), v15), v30 * v30);
      v15.f64[0] = v30 * v30 * (v30 * v30);
      v34.f64[0] = v34.f64[0] + vmuld_lane_f64(v15.f64[0], v34, 1) + 1.0;
      _Q1 = vmulq_n_f64(vaddq_f64(v33, vmulq_n_f64(v32, v30 * v30)), v30 * v30);
      v19 = v48;
      _Q5 = v49;
      v15.f64[0] = (v30 + v30 * (_Q1.f64[0] + vmuld_lane_f64(v15.f64[0], _Q1, 1))) / v29;
      v35 = v34.f64[0] / v28;
      v26 = vmulq_n_f64(v49, (v17 * (v34.f64[0] / v28) - v15.f64[0]) / v47);
      _Q1.f64[0] = -v35;
      v27 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    }
    else
    {
      v15.f64[0] = 1.0 / v17;
      _Q1.f64[0] = -(v15.f64[0] * v15.f64[0]);
      v26.f64[0] = 0.0;
      v27 = 0;
    }
    *(_QWORD *)&v26.f64[1] = v27;
    _Q3 = (int64x2_t)vmulq_n_f64(v26, _Q5.f64[0]);
    *(double *)&v37 = _Q1.f64[0] * _Q5.f64[0];
    v38 = vmulq_laneq_f64(v26, _Q5, 1);
    _Q1.f64[0] = _Q1.f64[0] * v19;
    *(double *)&v39 = v15.f64[0] + *(double *)_Q3.i64;
    v16.f64[0] = v15.f64[0] + v38.f64[1];
    v15.f64[0] = *(float64_t *)(a1 + 16);
    v40 = *(int8x16_t *)a1;
    _Q17.f64[0] = v16.f64[0];
    _Q17.f64[1] = _Q1.f64[0];
    v42.f64[0] = v15.f64[0];
    v42.f64[1] = *(float64_t *)a1;
    _Q17.f64[0] = vmlsq_f64(vmulq_f64(_Q17, v42), (float64x2_t)vzip1q_s64(*(int64x2_t *)&_Q1, *(int64x2_t *)&v38), (float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)&v15, 8uLL)).f64[1];
    __asm { FMLA            D16, D17, V3.D[1] }
    if (fabs(vmlad_n_f64(_D16, *(double *)&v37, vmlsq_f64(vmulq_laneq_f64(v38, *(float64x2_t *)a1, 1), v16, *(float64x2_t *)a1).f64[0])) < 0.00000001)
    {
      return 0;
    }
    else
    {
      *((_QWORD *)&v39 + 1) = *(_QWORD *)&v38.f64[0];
      *(_QWORD *)&v44 = vdupq_laneq_s64(_Q3, 1).u64[0];
      *((_QWORD *)&v44 + 1) = *(_QWORD *)&v16.f64[0];
      *((_QWORD *)&v37 + 1) = *(_QWORD *)&_Q1.f64[0];
      v55 = *(_QWORD *)a1;
      v54 = v39;
      v57 = vextq_s8(v40, v40, 8uLL).u64[0];
      v56 = v44;
      v59 = v15.f64[0];
      v58 = v37;
      sub_207CC48B4((uint64_t)&v50);
      *(_QWORD *)&v45 = v51;
      v46 = vzip2q_s64(v50, v52);
      *((_QWORD *)&v45 + 1) = v53;
      *(int64x2_t *)a2 = vzip1q_s64(v50, v52);
      *(int64x2_t *)(a2 + 16) = v46;
      *(_OWORD *)(a2 + 32) = v45;
      return 1;
    }
  }
  return result;
}

uint64_t sub_208113018(double *a1, int8x16_t a2, double a3, int8x16_t a4, int8x16_t a5, double a6)
{
  double v7;
  uint64_t result;
  double v9;
  double v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  float64x2_t v27;
  double v28[3];

  if (*(double *)a2.i64 == 0.0)
  {
    *(double *)a2.i64 = a3;
    v7 = *(double *)a4.i64;
    a4.i64[0] = a5.i64[0];
    *(double *)a5.i64 = a6;
    return sub_208114A7C(a1, a2, v7, a4, a5);
  }
  else
  {
    *(double *)a2.i64 = 1.0 / *(double *)a2.i64;
    v9 = *(double *)a2.i64 * a3;
    v10 = *(double *)a2.i64 * *(double *)a4.i64;
    v11 = *(double *)a2.i64 * *(double *)a5.i64;
    v12 = -(*(double *)a2.i64 * *(double *)a4.i64);
    *(double *)a4.i64 = v9 * (*(double *)a2.i64 * *(double *)a5.i64) - *(double *)a2.i64 * a6 * 4.0;
    *(double *)a5.i64 = v10 * (*(double *)a2.i64 * a6 * 4.0) - v9 * (v9 * (*(double *)a2.i64 * a6)) - v11 * v11;
    a2.i64[0] = 1.0;
    result = sub_208114A7C(v28, a2, v12, a4, a5);
    if (result)
    {
      v17 = v9 * v9 * 0.25 - v10 + v28[0];
      if (v17 <= 0.0)
      {
        return 0;
      }
      else
      {
        v18 = sqrt(v17);
        if (v18 == 0.0)
        {
          return 0;
        }
        else
        {
          v19 = (v9 * v28[0] * 0.5 - v11) / (v18 + v18);
          *(double *)v15.i64 = v9 * 0.5 - v18;
          v20 = v28[0] * 0.5;
          *(double *)v16.i64 = *(double *)v15.i64 * *(double *)v15.i64 + (v28[0] * 0.5 - v19) * -4.0;
          if (*(double *)v16.i64 >= 0.0)
          {
            *(double *)v16.i64 = sqrt(*(double *)v16.i64);
            v22.f64[0] = NAN;
            v22.f64[1] = NAN;
            v23 = (*(double *)v15.i64 + *(double *)vbslq_s8((int8x16_t)vnegq_f64(v22), v16, v15).i64) * -0.5;
            *a1 = v23;
            if (v23 == 0.0)
            {
              v21 = 1;
            }
            else
            {
              a1[1] = (v20 - v19) / v23;
              v21 = 2;
            }
          }
          else
          {
            v21 = 0;
          }
          *(double *)v14.i64 = v9 * 0.5 + v18;
          v24 = v20 + v19;
          *(double *)v13.i64 = *(double *)v14.i64 * *(double *)v14.i64 + (v20 + v19) * -4.0;
          if (*(double *)v13.i64 >= 0.0)
          {
            v26 = &a1[v21];
            *(double *)v13.i64 = sqrt(*(double *)v13.i64);
            v27.f64[0] = NAN;
            v27.f64[1] = NAN;
            *(double *)v13.i64 = (*(double *)v14.i64 + *(double *)vbslq_s8((int8x16_t)vnegq_f64(v27), v13, v14).i64)
                               * -0.5;
            *v26 = *(double *)v13.i64;
            if (*(double *)v13.i64 == 0.0)
            {
              v25 = 1;
            }
            else
            {
              v26[1] = v24 / *(double *)v13.i64;
              v25 = 2;
            }
          }
          else
          {
            v25 = 0;
          }
          return v25 + v21;
        }
      }
    }
  }
  return result;
}

float32x4_t sub_208113224(uint64_t a1, double *a2, unint64_t a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  float v14;
  double v15;
  int64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  double v19;
  float v20;
  double v21;
  double v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  unint64_t i;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float32x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float32x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float32x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float32x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float32x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float32x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float32x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float32x2_t v68;
  float64x2_t v69;
  float32x4_t result;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  _BYTE v89[264];

  *(double *)a4.i64 = a2[3] * 9.0;
  *(double *)a6.i64 = a2[1] * 5.0;
  *(double *)a7.i64 = *a2 * 3.0;
  v10 = sub_208113018((double *)v89, a4, a2[2] * 7.0, a6, a7, 1.0);
  std::__sort<std::__less<double,double> &,double *>();
  if (v10)
  {
    v11 = 8 * v10;
    v12 = (double *)v89;
    while (*v12 <= 0.274155678)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_11;
    }
  }
  else
  {
    v12 = (double *)v89;
  }
  if (v12 == (double *)&v89[8 * v10])
  {
LABEL_11:
    v14 = 1.0;
  }
  else
  {
    v13 = sqrt(*v12) + -0.0174532925;
    if (v13 > 1.57079633)
      v13 = 1.57079633;
    v14 = v13;
  }
  *(float *)(a1 + 4) = v14;
  v15 = v14;
  v17 = *(int64x2_t *)a2;
  v16 = *(int64x2_t *)(a2 + 2);
  v18 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, v16), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)a2, v16), v15 * v15)), v15 * v15);
  *(_QWORD *)v89 = 0;
  v73.f64[0] = 0.0;
  v19 = ((v18.f64[0] + vmuld_lane_f64(v15 * v15 * (v15 * v15), v18, 1)) * v15 + v15) * 0.03125;
  v20 = 1.0 / v19;
  *(float *)a1 = v20;
  v21 = *(double *)&v16.i64[1] + *(double *)v16.i64 + *(double *)&v17.i64[1] + *(double *)v17.i64 + 1.0;
  if (v21 <= 1.0)
    v22 = 1.0;
  else
    v22 = 1.0 / v21;
  if (a3)
  {
    v23 = *(int64x2_t *)(a2 + 2);
    v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, v23);
    v25 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, v23);
    v26 = vmulq_f64(v25, (float64x2_t)xmmword_208233A50);
    v27 = vmulq_f64(v24, (float64x2_t)xmmword_208233A40);
    for (i = 1; i != 33; ++i)
    {
      v29 = v19 * (double)i;
      v73.f64[i] = v29;
      v30 = v22 * v29;
      v31 = 1;
      do
      {
        v32 = v30 * v30;
        v33 = vmulq_n_f64(vaddq_f64(v27, vmulq_n_f64(v26, v30 * v30)), v30 * v30);
        v34 = v32 * v32;
        v35 = v33.f64[0] + vmuld_lane_f64(v32 * v32, v33, 1) + 1.0;
        if (v35 == 0.0)
          break;
        v36 = vmulq_n_f64(vaddq_f64(v24, vmulq_n_f64(v25, v32)), v32);
        v36.f64[0] = (v29 - (v30 + v30 * (v36.f64[0] + vmuld_lane_f64(v34, v36, 1)))) / v35;
        v30 = v30 + v36.f64[0];
      }
      while (fabs(v36.f64[0]) >= 2.22044605e-16 && v31++ < a3);
      *(double *)&v89[8 * i] = v30;
    }
  }
  else
  {
    v73.f64[1] = v19;
    v74.f64[0] = v19 + v19;
    *(double *)&v89[8] = v22 * v19;
    *(double *)&v89[16] = v22 * (v19 + v19);
    v74.f64[1] = v19 * 3.0;
    v75.f64[0] = v19 * 4.0;
    *(double *)&v89[24] = v22 * (v19 * 3.0);
    *(double *)&v89[32] = v22 * (v19 * 4.0);
    v75.f64[1] = v19 * 5.0;
    v76.f64[0] = v19 * 6.0;
    *(double *)&v89[40] = v22 * (v19 * 5.0);
    *(double *)&v89[48] = v22 * (v19 * 6.0);
    v76.f64[1] = v19 * 7.0;
    v77.f64[0] = v19 * 8.0;
    *(double *)&v89[56] = v22 * (v19 * 7.0);
    *(double *)&v89[64] = v22 * (v19 * 8.0);
    v77.f64[1] = v19 * 9.0;
    v78.f64[0] = v19 * 10.0;
    *(double *)&v89[72] = v22 * (v19 * 9.0);
    *(double *)&v89[80] = v22 * (v19 * 10.0);
    v78.f64[1] = v19 * 11.0;
    v79.f64[0] = v19 * 12.0;
    *(double *)&v89[88] = v22 * (v19 * 11.0);
    *(double *)&v89[96] = v22 * (v19 * 12.0);
    v79.f64[1] = v19 * 13.0;
    v80.f64[0] = v19 * 14.0;
    *(double *)&v89[104] = v22 * (v19 * 13.0);
    *(double *)&v89[112] = v22 * (v19 * 14.0);
    v80.f64[1] = v19 * 15.0;
    v81.f64[0] = v19 * 16.0;
    *(double *)&v89[120] = v22 * (v19 * 15.0);
    *(double *)&v89[128] = v22 * (v19 * 16.0);
    v81.f64[1] = v19 * 17.0;
    v82.f64[0] = v19 * 18.0;
    *(double *)&v89[136] = v22 * (v19 * 17.0);
    *(double *)&v89[144] = v22 * (v19 * 18.0);
    v82.f64[1] = v19 * 19.0;
    v83.f64[0] = v19 * 20.0;
    *(double *)&v89[152] = v22 * (v19 * 19.0);
    *(double *)&v89[160] = v22 * (v19 * 20.0);
    v83.f64[1] = v19 * 21.0;
    v84.f64[0] = v19 * 22.0;
    *(double *)&v89[168] = v22 * (v19 * 21.0);
    *(double *)&v89[176] = v22 * (v19 * 22.0);
    v84.f64[1] = v19 * 23.0;
    v85.f64[0] = v19 * 24.0;
    *(double *)&v89[184] = v22 * (v19 * 23.0);
    *(double *)&v89[192] = v22 * (v19 * 24.0);
    v85.f64[1] = v19 * 25.0;
    v86.f64[0] = v19 * 26.0;
    *(double *)&v89[200] = v22 * (v19 * 25.0);
    *(double *)&v89[208] = v22 * (v19 * 26.0);
    v86.f64[1] = v19 * 27.0;
    v87.f64[0] = v19 * 28.0;
    *(double *)&v89[216] = v22 * (v19 * 27.0);
    *(double *)&v89[224] = v22 * (v19 * 28.0);
    v87.f64[1] = v19 * 29.0;
    v88.f64[0] = v19 * 30.0;
    *(double *)&v89[232] = v22 * (v19 * 29.0);
    *(double *)&v89[240] = v22 * (v19 * 30.0);
    v38 = vmulq_n_f64((float64x2_t)xmmword_20827D570, v19);
    v88.f64[1] = v38.f64[0];
    *(float64x2_t *)&v89[248] = vmulq_n_f64(v38, v22);
  }
  v39 = v20;
  v40 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[216], *(float64x2_t *)&v89[208]), v39);
  v41 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[184], *(float64x2_t *)&v89[176]), v39);
  v42 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[152], *(float64x2_t *)&v89[144]), v39);
  v72 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[248], *(float64x2_t *)&v89[240]), v39);
  v71 = vmlsq_f64(*(float64x2_t *)&v89[240], v88, vcvtq_f64_f32(vcvt_f32_f64(v72)));
  v43 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[232], *(float64x2_t *)&v89[224]), v39));
  v44 = vmlsq_f64(*(float64x2_t *)&v89[224], v87, vcvtq_f64_f32(v43));
  v45 = vmlsq_f64(*(float64x2_t *)&v89[208], v86, vcvtq_f64_f32(vcvt_f32_f64(v40)));
  v46 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[200], *(float64x2_t *)&v89[192]), v39));
  v47 = vmlsq_f64(*(float64x2_t *)&v89[192], v85, vcvtq_f64_f32(v46));
  v48 = vmlsq_f64(*(float64x2_t *)&v89[176], v84, vcvtq_f64_f32(vcvt_f32_f64(v41)));
  v49 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[168], *(float64x2_t *)&v89[160]), v39));
  v50 = vmlsq_f64(*(float64x2_t *)&v89[160], v83, vcvtq_f64_f32(v49));
  v51 = vmlsq_f64(*(float64x2_t *)&v89[144], v82, vcvtq_f64_f32(vcvt_f32_f64(v42)));
  v52 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[120], *(float64x2_t *)&v89[112]), v39);
  v53 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[136], *(float64x2_t *)&v89[128]), v39));
  v54 = vmlsq_f64(*(float64x2_t *)&v89[128], v81, vcvtq_f64_f32(v53));
  v55 = vmlsq_f64(*(float64x2_t *)&v89[112], v80, vcvtq_f64_f32(vcvt_f32_f64(v52)));
  v56 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[88], *(float64x2_t *)&v89[80]), v39);
  v57 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[56], *(float64x2_t *)&v89[48]), v39);
  v58 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[104], *(float64x2_t *)&v89[96]), v39));
  v59 = vmlsq_f64(*(float64x2_t *)&v89[96], v79, vcvtq_f64_f32(v58));
  v60 = vmlsq_f64(*(float64x2_t *)&v89[80], v78, vcvtq_f64_f32(vcvt_f32_f64(v56)));
  v61 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[72], *(float64x2_t *)&v89[64]), v39));
  v62 = vmlsq_f64(*(float64x2_t *)&v89[64], v77, vcvtq_f64_f32(v61));
  v63 = vmlsq_f64(*(float64x2_t *)&v89[48], v76, vcvtq_f64_f32(vcvt_f32_f64(v57)));
  v64 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[40], *(float64x2_t *)&v89[32]), v39));
  v65 = vmlsq_f64(*(float64x2_t *)&v89[32], v75, vcvtq_f64_f32(v64));
  v66 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[24], *(float64x2_t *)&v89[16]), v39);
  v67 = vmlsq_f64(*(float64x2_t *)&v89[16], v74, vcvtq_f64_f32(vcvt_f32_f64(v66)));
  v68 = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v89[8], *(float64x2_t *)v89), v39));
  v69 = vmlsq_f64(*(float64x2_t *)v89, v73, vcvtq_f64_f32(v68));
  *(float32x4_t *)(a1 + 8) = vcvt_hight_f32_f64((int32x2_t)v68, v66);
  *(float32x4_t *)(a1 + 24) = vcvt_hight_f32_f64((int32x2_t)v64, v57);
  *(float32x4_t *)(a1 + 40) = vcvt_hight_f32_f64((int32x2_t)v61, v56);
  *(float32x4_t *)(a1 + 56) = vcvt_hight_f32_f64((int32x2_t)v58, v52);
  *(float32x4_t *)(a1 + 72) = vcvt_hight_f32_f64((int32x2_t)v53, v42);
  *(float32x4_t *)(a1 + 88) = vcvt_hight_f32_f64((int32x2_t)v49, v41);
  *(float32x4_t *)(a1 + 104) = vcvt_hight_f32_f64((int32x2_t)v46, v40);
  *(float32x4_t *)(a1 + 120) = vcvt_hight_f32_f64((int32x2_t)v43, v72);
  *(float32x4_t *)(a1 + 136) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v69), v67);
  *(float32x4_t *)(a1 + 152) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v65), v63);
  *(float32x4_t *)(a1 + 168) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v60);
  *(float32x4_t *)(a1 + 184) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v59), v55);
  *(float32x4_t *)(a1 + 200) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v54), v51);
  *(float32x4_t *)(a1 + 216) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v48);
  *(float32x4_t *)(a1 + 232) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v45);
  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44), v71);
  *(float32x4_t *)(a1 + 248) = result;
  return result;
}

BOOL sub_208113994(float64x2_t *a1, simd_double2 *a2, float64x2_t *a3, double *a4, float64x2_t *a5, uint64_t a6)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  simd_double2 v36;
  simd_double2x2 v38;
  simd_double2x2 v39;

  v7 = *a3;
  if (a6)
  {
    v8 = *a5;
    v9 = vaddq_f64(v8, v8);
    v10 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
    v11 = *a3;
    do
    {
      v12 = vmulq_f64(v11, v11);
      v13 = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12);
      v12.f64[0] = vaddvq_f64(v12);
      v14 = *a4 * v12.f64[0]
          + 1.0
          + v12.f64[0] * (a4[1] * v12.f64[0])
          + v12.f64[0] * (v12.f64[0] * (a4[2] * v12.f64[0]));
      v15 = vmulq_n_f64(v9, v11.f64[0]);
      v16 = vaddq_f64(v11, v11);
      if (v14 == 0.0)
        v14 = 1.0;
      v11 = vdivq_f64(vsubq_f64(v7, vaddq_f64(vmulq_laneq_f64(v15, v11, 1), vmulq_f64(v10, vaddq_f64(vmulq_f64(v11, v16), (float64x2_t)vdupq_lane_s64(v13, 0))))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
      --a6;
    }
    while (a6);
    v17 = v11.f64[1];
    v7.f64[0] = v11.f64[0];
  }
  else
  {
    v17 = a3->f64[1];
  }
  a1->f64[0] = v7.f64[0];
  a1->f64[1] = v17;
  v18 = a4[1];
  v19 = a4[2];
  _Q4 = *a1;
  _D6 = _Q4.f64[1];
  __asm { FMLA            D5, D6, V4.D[1] }
  v27 = *a4 * _D5 + 1.0 + _D5 * _D5 * (v18 + v19 * _D5);
  v28 = vmulq_n_f64(*a1, *a4 + *a4 + _D5 * (v18 * 4.0 + v19 * 6.0 * _D5));
  v29 = vmulq_n_f64(v28, a1->f64[0]);
  v30 = vmulq_laneq_f64(v28, *a1, 1);
  v31 = *a5;
  v32 = vaddq_f64(v31, v31);
  v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0);
  v33.f64[0] = vmuld_lane_f64(6.0, *a5, 1);
  v34 = vaddq_f64(vmulq_n_f64(v32, v17), vmulq_n_f64(v33, a1->f64[0]));
  v29.f64[0] = v27 + v29.f64[0];
  v39.columns[0] = (simd_double2)vaddq_f64(v34, v29);
  *(_QWORD *)&v39.columns[1].f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1), v30);
  v39.columns[1].f64[1] = v17 * (6.0 * v31.f64[0]) + vmulq_laneq_f64(_Q4, v32, 1).f64[0] + v27 + v30.f64[1];
  v35 = sub_207CC482C((double *)&v39);
  if (v35 != 0.0)
  {
    sub_207CC4840(&v39, &v38);
    v36 = v38.columns[1];
    *a2 = v38.columns[0];
    a2[1] = v36;
  }
  return v35 != 0.0;
}

BOOL sub_208113B5C(double *a1, simd_double2 *a2, double *a3, double *a4, double *a5, double *a6, uint64_t a7)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  simd_double2 v46;
  simd_double2x2 v48;
  simd_double2x2 v49;

  v8 = *a3 - *a6;
  v9 = a3[1] - a6[1];
  v10 = 1.0;
  if (a7)
  {
    v11 = sqrt(v8 * v8 + v9 * v9);
    v12 = a4[1];
    v13 = a4[2];
    v10 = 1.0;
    do
    {
      v14 = v11 * v10 * (v11 * v10 * (*a4 * 3.0 + v11 * v10 * (v12 * 4.0 + v13 * 5.0 * (v11 * v10)))) + 1.0;
      if (v14 == 0.0)
        v14 = 1.0;
      v10 = v10 - (v10 * (v11 * v10 * (v11 * v10 * (*a4 + v11 * v10 * (v12 + v13 * (v11 * v10)))) + 1.0) + -1.0) / v14;
      --a7;
    }
    while (a7);
  }
  v15 = v8 * v10 - *a5;
  *a1 = v15;
  v16 = v9 * v10 - a5[1];
  a1[1] = v16;
  v17 = v15 + *a5;
  v18 = v16 + a5[1];
  v19 = sqrt(v17 * v17 + v18 * v18);
  v20 = a4[1];
  v21 = a4[2];
  v22 = v19 * (v19 * (*a4 + v19 * (v20 + v21 * v19))) + 1.0;
  v23 = *a4 + *a4;
  v24 = v20 * 3.0;
  v25 = v19 * (v21 * 4.0);
  v26 = v19 <= 0.00001;
  v27 = v23 + v24 * v19;
  v28 = v27 + v17 * (v19 * v25);
  v29 = v27 + v18 * (v19 * v25);
  v30 = v17 * v28;
  v31 = v17 * v29;
  v32 = v18 * v28;
  v33 = v18 * v29;
  v34 = v19 * (v23 + v19 * (v24 + v25));
  v35 = 1.0 / v19;
  v36 = v17 * (1.0 / v19);
  v37 = v18 * v35;
  v38 = v17 * v34;
  v39 = v36 * v38;
  v40 = v37 * v38;
  v41 = v18 * v34;
  v42 = v36 * v41;
  v43 = v37 * v41;
  if (v26)
    v44 = v30;
  else
    v44 = v39;
  if (v26)
  {
    v40 = v31;
    v42 = v32;
    v43 = v33;
  }
  v49.columns[0].f64[0] = v22 + v44;
  v49.columns[0].f64[1] = v40;
  v49.columns[1].f64[0] = v42;
  v49.columns[1].f64[1] = v22 + v43;
  v45 = sub_207CC482C((double *)&v49);
  if (v45 != 0.0)
  {
    sub_207CC4840(&v49, &v48);
    v46 = v48.columns[1];
    *a2 = v48.columns[0];
    a2[1] = v46;
  }
  return v45 != 0.0;
}

uint64_t sub_208113D70(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int32x4_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v45;
  int v46;
  float64x2_t v47;
  int64x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  double v51;

  v6 = *a2;
  v7 = sqrt(v6 * v6 + a2[1] * a2[1]);
  v8 = *(double *)a3 + 1.0 + *(double *)(a3 + 8) + *(double *)(a3 + 16) + *(double *)(a3 + 24);
  if (v8 <= 1.0)
    v9 = 1.0;
  else
    v9 = 1.0 / v8;
  v10 = v7 * v9;
  if (a4)
  {
    v11 = *(int64x2_t *)(a3 + 16);
    v12 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v11);
    v13 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v11);
    v14 = vmulq_f64(v13, (float64x2_t)xmmword_208233A50);
    v15 = vmulq_f64(v12, (float64x2_t)xmmword_208233A40);
    do
    {
      v16 = vmulq_n_f64(vaddq_f64(v15, vmulq_n_f64(v14, v10 * v10)), v10 * v10);
      v17 = v10 * v10 * (v10 * v10);
      v18 = v16.f64[0] + vmuld_lane_f64(v17, v16, 1) + 1.0;
      v19 = vmulq_n_f64(vaddq_f64(v12, vmulq_n_f64(v13, v10 * v10)), v10 * v10);
      v20 = v7 - (v10 + v10 * (v19.f64[0] + vmuld_lane_f64(v17, v19, 1)));
      if (v18 == 0.0)
        v18 = 1.0;
      v10 = fmax(v10 + v20 / v18, 0.0);
      --a4;
    }
    while (a4);
  }
  if (v10 > 3.14159265)
    return 0;
  v22 = 1.0 / tan(v10);
  if (v22 >= 1.0)
  {
    v24 = 1.0 / v22 * 0.785398163 - 1.0 / v22 * (1.0 / v22 + -1.0) * (1.0 / v22 * 0.0663008339 + 0.244711287);
  }
  else if (v22 <= -1.0)
  {
    v24 = 1.0 / v22 * 0.785398163
        - 1.0 / v22 * (-1.0 - 1.0 / v22) * (1.0 / v22 * -0.0663008339 + 0.244711287)
        + 3.14159265;
  }
  else
  {
    v23 = fabs(v22);
    v24 = v22 * (v23 + -1.0) * (v23 * 0.0663008339 + 0.244711287) + v22 * -0.785398163 + 1.57079633;
  }
  v25 = fmax(v10 + v10 - v24, 0.0);
  v26 = 1.0 / tan(v25);
  if (v26 >= 1.0)
  {
    v28 = 1.0 / v26 * 0.785398163 - 1.0 / v26 * (1.0 / v26 + -1.0) * (1.0 / v26 * 0.0663008339 + 0.244711287);
  }
  else if (v26 <= -1.0)
  {
    v28 = 1.0 / v26 * 0.785398163
        - 1.0 / v26 * (-1.0 - 1.0 / v26) * (1.0 / v26 * -0.0663008339 + 0.244711287)
        + 3.14159265;
  }
  else
  {
    v27 = fabs(v26);
    v28 = v26 * (v27 + -1.0) * (v27 * 0.0663008339 + 0.244711287) + v26 * -0.785398163 + 1.57079633;
  }
  v29 = fmax(v25 + v10 - v28, 0.0);
  v30 = 1.0 / tan(v29);
  if (v30 >= 1.0)
  {
    v32 = 1.0 / v30 * 0.785398163 - 1.0 / v30 * (1.0 / v30 + -1.0) * (1.0 / v30 * 0.0663008339 + 0.244711287);
  }
  else if (v30 <= -1.0)
  {
    v32 = 1.0 / v30 * 0.785398163
        - 1.0 / v30 * (-1.0 - 1.0 / v30) * (1.0 / v30 * -0.0663008339 + 0.244711287)
        + 3.14159265;
  }
  else
  {
    v31 = fabs(v30);
    v32 = v30 * (v31 + -1.0) * (v31 * 0.0663008339 + 0.244711287) + v30 * -0.785398163 + 1.57079633;
  }
  v33 = fmax(v29 + v10 - v32, 0.0);
  *(double *)v34.i64 = 1.0 / tan(v33);
  if (*(double *)v34.i64 >= 1.0)
  {
    *(double *)v34.i64 = v33
                       + v10
                       - (1.0 / *(double *)v34.i64 * 0.785398163
                        - 1.0
                        / *(double *)v34.i64
                        * (1.0 / *(double *)v34.i64 + -1.0)
                        * (1.0 / *(double *)v34.i64 * 0.0663008339 + 0.244711287));
    v36 = fmax(*(double *)v34.i64, 0.0);
    if (v36 <= 3.14159265)
      goto LABEL_33;
    return 0;
  }
  if (*(double *)v34.i64 <= -1.0)
  {
    *(double *)v34.i64 = v33
                       + v10
                       - (1.0 / *(double *)v34.i64 * 0.785398163
                        - 1.0
                        / *(double *)v34.i64
                        * (-1.0 - 1.0 / *(double *)v34.i64)
                        * (1.0 / *(double *)v34.i64 * -0.0663008339 + 0.244711287)
                        + 3.14159265);
    v36 = fmax(*(double *)v34.i64, 0.0);
    if (v36 <= 3.14159265)
      goto LABEL_33;
    return 0;
  }
  v35 = fabs(*(double *)v34.i64);
  *(double *)v34.i64 = v33
                     + v10
                     - (*(double *)v34.i64 * (v35 + -1.0) * (v35 * 0.0663008339 + 0.244711287)
                      + *(double *)v34.i64 * -0.785398163
                      + 1.57079633);
  v36 = fmax(*(double *)v34.i64, 0.0);
  if (v36 > 3.14159265)
    return 0;
LABEL_33:
  v34.i32[0] = 0;
  v37 = v36 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
  v38 = v36 + v37 * -1.57079633 + v37 * -5.39030286e-15 + v37 * -8.84372057e-29;
  v39 = v38 * v38 * (v38 * v38);
  __asm { FMOV            V17.2D, #1.0 }
  v45 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A60, v38 * v38), _Q17), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233AA0, v38 * v38), (float64x2_t)xmmword_208233AB0), v39));
  _Q17.f64[0] = v38;
  v46 = (int)v37;
  v47 = vmulq_f64(_Q17, xmmword_20827D5A0[(int)v37 & 3]);
  v48 = (int64x2_t)vmulq_f64(vaddq_f64(v45, vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A70, v38 * v38), (float64x2_t)xmmword_208233A80), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A90, v38 * v38), (float64x2_t)xmmword_208233AC0), v39)), v39 * v39)), v47);
  LODWORD(v47.f64[0]) = v46 & 1;
  v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v47, v34), 0);
  v50 = vbslq_s8(v49, (int8x16_t)v48, (int8x16_t)vdupq_lane_s64(v48.i64[0], 0));
  v51 = *(double *)vbslq_s8(v49, (int8x16_t)v48, (int8x16_t)vdupq_laneq_s64(v48, 1)).i64 / v7;
  if (v7 < 0.0001)
    v51 = 1.0;
  *(double *)a1 = v6 * v51;
  *(double *)(a1 + 8) = a2[1] * v51;
  *(_QWORD *)(a1 + 16) = v50.i64[1];
  return 1;
}

uint64_t sub_208114414(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  unint64_t v20;
  double v21;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64_t v27;
  __int128 v29;
  float64x2_t v30;
  int64x2_t v31;
  int8x16_t v33;
  float64x2_t v35;
  __int128 v41;
  __int128 v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  float64x2_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  float64_t v53;

  result = sub_208113D70(a1, a3, a4, a5);
  if ((_DWORD)result)
  {
    v11 = *(float64x2_t *)a1;
    v12 = *(double *)(a1 + 16);
    v13 = vaddvq_f64(vmulq_f64(v11, v11));
    if (v13 >= 0.00000001)
    {
      v14 = sqrt(v13);
      if (v14 <= v12)
      {
        v18 = v14 / v12 * 0.785398163 - v14 / v12 * (v14 / v12 + -1.0) * (v14 / v12 * 0.0663008339 + 0.244711287);
      }
      else
      {
        if (v14 <= -v12)
        {
          v16 = v14 / v12 * 0.785398163 - v14 / v12 * (-1.0 - v14 / v12) * (v14 / v12 * -0.0663008339 + 0.244711287);
          v17 = 3.14159265;
        }
        else
        {
          v15 = fabs(v12 / v14);
          v16 = v12 / v14 * (v15 + -1.0) * (v15 * 0.0663008339 + 0.244711287) + v12 / v14 * -0.785398163;
          v17 = 1.57079633;
        }
        v18 = v16 + v17;
      }
      v22 = *(int64x2_t *)(a4 + 16);
      v23 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, v22);
      v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a4, v22);
      v10 = vmulq_n_f64(vaddq_f64(vmulq_f64(v24, (float64x2_t)xmmword_208233A40), vmulq_n_f64(vmulq_f64(v23, (float64x2_t)xmmword_208233A50), v18 * v18)), v18 * v18);
      v25 = v18 * v18 * (v18 * v18);
      v26 = vmulq_n_f64(vaddq_f64(v24, vmulq_n_f64(v23, v18 * v18)), v18 * v18);
      v21 = (v18 + v18 * (v26.f64[0] + vmuld_lane_f64(v25, v26, 1))) / v14;
      v27 = (v10.f64[0] + vmuld_lane_f64(v25, v10, 1) + 1.0) / (v13 + v12 * v12);
      v19 = vmulq_n_f64(v11, (v12 * v27 - v21) / v13);
      v9.f64[0] = -v27;
      v20 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    }
    else
    {
      if (v12 == 0.0)
        return 0;
      v9.f64[0] = v12 * v12;
      v19.f64[0] = 0.0;
      v20 = 0;
      v21 = 1.0 / v12;
    }
    *(_QWORD *)&v19.f64[1] = v20;
    _Q5 = (int8x16_t)vmulq_n_f64(v19, v11.f64[0]);
    *(_QWORD *)&v29 = *(_OWORD *)&vmulq_f64(v11, v9);
    v30 = vmulq_laneq_f64(v19, v11, 1);
    v31 = (int64x2_t)vmulq_laneq_f64(v9, v11, 1);
    v11.f64[0] = v21 + *(double *)_Q5.i64;
    v10.f64[0] = v21 + v30.f64[1];
    v19.f64[0] = *(float64_t *)(a1 + 16);
    v33 = *(int8x16_t *)a1;
    _Q18.f64[0] = v10.f64[0];
    *(_QWORD *)&_Q18.f64[1] = v31.i64[0];
    v35.f64[0] = v19.f64[0];
    v35.f64[1] = *(float64_t *)a1;
    _Q18.f64[0] = vmlsq_f64(vmulq_f64(_Q18, v35), (float64x2_t)vzip1q_s64(v31, *(int64x2_t *)&v30), (float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)&v19, 8uLL)).f64[1];
    __asm { FMLA            D17, D18, V5.D[1] }
    if (fabs(vmlad_n_f64(_D17, vmlsq_f64(vmulq_laneq_f64(v30, *(float64x2_t *)a1, 1), v10, *(float64x2_t *)a1).f64[0], *(double *)&v29)) >= 0.00000001)
    {
      v11.f64[1] = v30.f64[0];
      *(_QWORD *)&v41 = vextq_s8(_Q5, _Q5, 8uLL).u64[0];
      *((_QWORD *)&v41 + 1) = *(_QWORD *)&v10.f64[0];
      *((_QWORD *)&v29 + 1) = v31.i64[0];
      v49 = *(_QWORD *)a1;
      v48 = v11;
      v51 = vextq_s8(v33, v33, 8uLL).u64[0];
      v50 = v41;
      v53 = v19.f64[0];
      v52 = v29;
      sub_207CC48B4((uint64_t)&v44);
      *(_QWORD *)&v42 = v45;
      v43 = vzip2q_s64(v44, v46);
      *((_QWORD *)&v42 + 1) = v47;
      *(int64x2_t *)a2 = vzip1q_s64(v44, v46);
      *(int64x2_t *)(a2 + 16) = v43;
      *(_OWORD *)(a2 + 32) = v42;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20811471C(double *a1, double *a2, int64x2_t *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  double v15;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = v4 * v4 + v3 * v3;
  if (v6 >= 0.00000001)
  {
    v8 = sqrt(v6);
    if (v8 <= v5)
    {
      v13 = v8 / v5 * 0.785398163 - v8 / v5 * (v8 / v5 + -1.0) * (v8 / v5 * 0.0663008339 + 0.244711287);
    }
    else
    {
      if (v8 <= -v5)
      {
        v11 = v8 / v5 * 0.785398163 - v8 / v5 * (-1.0 - v8 / v5) * (v8 / v5 * -0.0663008339 + 0.244711287);
        v12 = 3.14159265;
      }
      else
      {
        v9 = v5 / v8;
        v10 = fabs(v9);
        v11 = v9 * (v10 + -1.0) * (v10 * 0.0663008339 + 0.244711287) + v9 * -0.785398163;
        v12 = 1.57079633;
      }
      v13 = v11 + v12;
    }
    v14 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*a3, a3[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*a3, a3[1]), v13 * v13)), v13 * v13);
    v15 = (v13 + v13 * (v14.f64[0] + vmuld_lane_f64(v13 * v13 * (v13 * v13), v14, 1))) / v8;
    *a1 = v4 * v15;
    a1[1] = v3 * v15;
    return 1;
  }
  else if (v5 == 0.0)
  {
    *a1 = 0.0;
    a1[1] = 0.0;
    return 0;
  }
  else
  {
    *a1 = v4 * (1.0 / v5);
    a1[1] = v3 * (1.0 / v5);
    return 1;
  }
}

uint64_t sub_2081148A4(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, double *a5, double a6)
{
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  double v44;
  double v45;
  float64x2_t v46;
  double v47;

  _Q3 = *(float64x2_t *)a4;
  _D2 = *(_QWORD *)(a4 + 8);
  __asm { FMLA            D1, D2, V3.D[1] }
  v13 = _D1 * a6 * a6;
  v15 = a5[12];
  v14 = a5[13];
  v16 = a5[7];
  v17 = a5[6] + v14 * a6;
  v18 = a5[5] + v15 * a6;
  v19 = v13 * (v13 * (v17 + 0.0) + v18);
  v20 = v18 * 6.0 + v13 * (v17 * 7.0 + v13 * 0.0);
  v21 = a5[10];
  v22 = a5[11];
  v23 = a5[4] + v22 * a6;
  v24 = v13 * (v19 + v23);
  v25 = v23 * 5.0 + v13 * v20;
  v26 = a5[3] + v21 * a6;
  v27 = v13 * (v24 + v26);
  v28 = v26 * 4.0 + v13 * v25;
  v29 = a5[8];
  v30 = a5[9];
  v31 = a5[2] + v30 * a6;
  v32 = v13 * (v27 + v31);
  v33 = v31 * 3.0 + v13 * v28;
  v34 = a5[1] + v29 * a6;
  v35 = v13 * (v32 + v34);
  v36 = v34 + v34 + v13 * v33;
  v37 = *a5 + v16 * a6;
  v38 = v37 + v13 * v36;
  v39 = 1.0 / (v13 * (v35 + v37) / 100.0 + 1.0);
  *a1 = vmulq_n_f64(*(float64x2_t *)a4, v39);
  v40 = -(v39 * v39) / 100.0;
  v41 = a6 + a6;
  v42 = (a6 + a6) * a6;
  v43 = vmulq_n_f64(*(float64x2_t *)a4, v38 * v40);
  v44 = v42 * *(double *)a4;
  v45 = vmuld_lane_f64(v42, *(float64x2_t *)a4, 1);
  v46.f64[0] = 0.0;
  v46.f64[1] = v39;
  *a2 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v39, v43, v44);
  a2[1] = vmlaq_n_f64(v46, v43, v45);
  if (a3)
  {
    v47 = v13 * (v16 + v13 * (v29 + v13 * (v30 + v13 * (v21 + v13 * (v22 + v13 * (v15 + (v14 + 0.0) * v13))))));
    _Q1 = *(float64x2_t *)a4;
    _D4 = *(_QWORD *)(a4 + 8);
    __asm { FMLA            D2, D4, V1.D[1] }
    *a3 = vmulq_n_f64(*(float64x2_t *)a4, v40 * (v47 + v38 * (v41 * _D2)));
  }
  return 1;
}

uint64_t sub_208114A7C(double *a1, int8x16_t a2, double a3, int8x16_t a4, int8x16_t a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  long double v15;
  double v16;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;

  if (*(double *)a2.i64 != 0.0)
  {
    v7 = a3 / *(double *)a2.i64;
    v8 = *(double *)a4.i64 / *(double *)a2.i64;
    v9 = (v7 * v7 + v8 * -3.0) / 9.0;
    v10 = (*(double *)a5.i64 / *(double *)a2.i64 * 27.0 + v7 * (v7 * v7 + v7 * v7) - v7 * 9.0 * v8) / 54.0;
    v11 = v10 * v10 - v9 * (v9 * v9);
    if (v11 < 0.0)
    {
      v12 = sqrt(v9);
      v13 = acos(fmax(fmin(v10 / (v9 * v12), 1.0), -1.0));
      v14 = v7 / 3.0;
      v15 = cos(v13 / 3.0);
      v16 = sqrt(fmax(1.0 - v15 * v15, 0.0)) * 1.73205081;
      *a1 = v12 * -2.0 * v15 - v14;
      a1[1] = v12 * (v15 + v16) - v14;
      a1[2] = v12 * (v15 - v16) - v14;
      return 3;
    }
    if (v11 > 0.0)
    {
      *(double *)a4.i64 = -v10;
      a5.i64[0] = 1.0;
      v18.f64[0] = NAN;
      v18.f64[1] = NAN;
      v19 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v18), a5, a4).i64 * cbrt(fabs(v10) + sqrt(v11));
      v20 = v7 / 3.0;
      if (v19 == 0.0)
        v6 = -v20;
      else
        v6 = v19 + v9 / v19 - v20;
      goto LABEL_19;
    }
    v23 = v7 / 3.0;
    v24 = *(_QWORD *)&v10;
    v25 = sqrt(v9);
    if (v24 < 0)
      v25 = -v25;
    v26 = v25 * -2.0 - v23;
    v22 = v25 - v23;
    *a1 = v26;
LABEL_17:
    a1[1] = v22;
    return 2;
  }
  if (a3 == 0.0)
  {
    if (*(double *)a4.i64 != 0.0)
    {
      v6 = -*(double *)a5.i64 / *(double *)a4.i64;
LABEL_19:
      *a1 = v6;
      return 1;
    }
    return 0;
  }
  *(double *)a2.i64 = *(double *)a4.i64 * *(double *)a4.i64 + a3 * -4.0 * *(double *)a5.i64;
  if (*(double *)a2.i64 < 0.0)
    return 0;
  *(double *)a2.i64 = sqrt(*(double *)a2.i64);
  v21.f64[0] = NAN;
  v21.f64[1] = NAN;
  *(double *)a2.i64 = (*(double *)vbslq_s8((int8x16_t)vnegq_f64(v21), a2, a4).i64 + *(double *)a4.i64) * -0.5;
  *a1 = *(double *)a2.i64 / a3;
  if (*(double *)a2.i64 != 0.0)
  {
    v22 = *(double *)a5.i64 / *(double *)a2.i64;
    goto LABEL_17;
  }
  return 1;
}

uint64_t sub_208114CF4(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, unint64_t a5, uint64_t a6, double a7, double a8, int8x16_t a9, int8x16_t a10, double a11, double a12, float64x2_t a13)
{
  float64x2_t v18;
  int8x16_t v19;
  double *v20;
  uint64_t result;
  int64x2_t *v22;
  float64x2_t v24;
  int8x16_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64_t v35;
  int64x2_t v36;
  double v37;
  float64x2_t v39;
  float64_t v40;
  float64x2_t v41;
  float64x2_t v42;
  unint64_t v45;
  float64_t v46;
  float64_t v48;
  float64x2_t v49;
  int8x16_t v50;
  float64x2_t v54;
  float64x2_t v56;
  double v57;
  unint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  unint64_t v68;
  float64x2_t v69;
  unint64_t v70;
  double v71;
  int8x16_t v73;
  int8x16_t v74;
  double v75;
  int8x16_t v76;
  double v77;
  int8x16_t v78;
  double v79;
  float64x2_t v80;
  double v81;
  int8x16_t v82;
  float64x2_t v83;
  double v85;
  float64x2_t v86;
  float64x2_t v88;
  float64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v96;
  float64x2_t v99;
  int64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v112;
  float64x2_t v113;
  double v117;
  float64x2_t v118;
  double v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  int8x16_t v128;
  double v129;
  double v130;
  double v131;
  float64x2_t v132;
  int64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  float64x2_t v141;
  double v142;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v156;
  float64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  float64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  int64x2_t v171;
  float64x2_t v172;
  double v174;
  unint64_t v176;
  double v178;
  float64x2_t v179;
  float64x2_t v181;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v186;
  unint64_t v187;
  unint64_t v188;
  float64x2_t v189;
  unint64_t v190;
  int8x16_t v191;
  float64_t v192;
  float64_t v193;
  float64_t v194;
  float64x2_t v195;
  unint64_t v196;
  float64_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64_t v202;
  double v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  double v207;
  float64x2_t v208;
  float64_t v209;
  char v210;
  int8x16_t v211;
  float64_t v212;
  float64x2_t v213;
  double v214;
  float64x2_t v215;
  uint64_t v216;
  int8x16_t v217;
  double v218;
  int8x16_t v219;
  float64_t v220;
  int8x16_t v221;
  double v222;
  float64x2_t v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double v229;
  int8x16_t v230;
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v18 = *(float64x2_t *)(a1 + 560);
  v19 = (int8x16_t)vsubq_f64(*a3, v18);
  v230 = v19;
  v20 = (double *)(a1 + 168);
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 468))
    {
      v19.i64[0] = sub_208113224(a1 + 204, v20, 0x32uLL, v19, v18.f64[0], a9, a10).u64[0];
      *(_BYTE *)(a1 + 468) = 1;
    }
    if ((sub_207D34B98((uint64_t)&v228, (uint64_t)&v230, (int64x2_t *)v20, (float *)(a1 + 204), &v225, 5, *(double *)v19.i64, v18.f64[0], *(double *)a9.i64, *(double *)a10.i64, a11, a12, a13) & 1) == 0)return 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 468))
    {
      v19.i64[0] = sub_208113224(a1 + 204, v20, 0x32uLL, v19, v18.f64[0], a9, a10).u64[0];
      *(_BYTE *)(a1 + 468) = 1;
    }
    result = sub_207D34B98((uint64_t)&v228, (uint64_t)&v230, (int64x2_t *)v20, (float *)(a1 + 204), 0, 5, *(double *)v19.i64, v18.f64[0], *(double *)a9.i64, *(double *)a10.i64, a11, a12, a13);
    if (!(_DWORD)result)
      return result;
  }
  if (v229 < 0.0)
    return 0;
  v22 = (int64x2_t *)(a1 + 488);
  v228 = vaddq_f64(v228, vmulq_n_f64(*(float64x2_t *)(a1 + 560), v229));
  _D3 = *(_QWORD *)(a1 + 528);
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), v228.f64[0]), *(float64x2_t *)(a1 + 512), v228, 1), *(float64x2_t *)(a1 + 536), v229);
  __asm { FMLA            D1, D3, V0.D[1] }
  v224 = _D1 + *(double *)(a1 + 552) * v229;
  v223 = v24;
  if (a5 | a6)
    v30 = &v211;
  else
    v30 = 0;
  sub_20810EFB4(*(_QWORD *)(a1 + 472), COERCE_FLOAT64_T(&v223), (uint64_t)v30, (uint64_t)&v206);
  result = v210 != 0;
  if (v210)
  {
    _Q3.f64[0] = *(float64_t *)(a1 + 504);
    v35 = *(double *)(a1 + 528);
    v36 = *(int64x2_t *)(a1 + 512);
    v37 = *(double *)(a1 + 552);
    _Q5 = *(_OWORD *)(a1 + 536);
    v39 = (float64x2_t)vzip1q_s64(*v22, v36);
    v40 = _Q3.f64[0];
    _Q7.f64[1] = v35;
    v31.f64[0] = v207;
    v41 = v206;
    v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v206.f64[0]), (float64x2_t)vzip2q_s64(*v22, v36), v206, 1), _Q7, v207);
    _Q7.f64[0] = v206.f64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    v205 = v31;
    _Q7.f64[0] = _D4 + v37 * v207;
    v45 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v46 = v42.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v45;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(a1 + 504);
      v35 = *(double *)(a1 + 528);
      v39 = (float64x2_t)vzip1q_s64(*v22, *(int64x2_t *)(a1 + 512));
      _D20 = *(_QWORD *)(a1 + 544);
      v48 = *(double *)(a1 + 520);
      v49.f64[0] = *(float64_t *)(a1 + 496);
      v37 = *(double *)(a1 + 552);
    }
    else
    {
      _D20 = *(_QWORD *)(a1 + 544);
      v48 = *(double *)(a1 + 520);
      v49.f64[0] = *(float64_t *)(a1 + 496);
    }
    v50 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
    v32.f64[0] = v209;
    _Q26 = v208;
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = v208.f64[1];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v32.f64[0] * v32.f64[0]);
    v54 = vmulq_f64(v32, _Q16);
    _Q21 = vmulq_n_f64(v208, _Q16.f64[0]);
    _Q3.f64[1] = v35;
    *(_QWORD *)&v39.f64[1] = v50.i64[0];
    v49.f64[1] = v48;
    v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q21.f64[0]), v49, _Q21, 1), _Q3, v54.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v37, v54.f64[0]);
    *(_QWORD *)&v42.f64[1] = v45;
    *(float64x2_t *)a2 = vaddq_f64(v42, v56);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if (a5 | a6)
    {
      v57 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v58 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
      v59.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v59.f64[1] = v58;
      v60.f64[0] = _Q16.f64[0];
      v60.f64[1] = _Q16.f64[0];
      v61 = vmulq_f64(v60, v59);
      v195 = v54;
      v62 = vmulq_f64(_Q16, v54);
      v63 = v32.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v62.f64[0];
      v32.f64[0] = v57 * _Q16.f64[0] * v62.f64[0];
      v62.f64[0] = v63 * v62.f64[0];
      v64.f64[0] = 0.0;
      v64.f64[1] = _Q16.f64[0];
      v65 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v61, _Q21.f64[0], 0);
      v66 = (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL);
      *(_QWORD *)&v204 = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q7);
      v67 = vmlsq_lane_f64(v64, v61, v57 * _Q16.f64[0], 0);
      v68 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
      *(_QWORD *)&v203 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v32);
      v69 = vmlsq_lane_f64((float64x2_t)0, v61, v63, 0);
      v70 = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
      v201 = vsubq_f64(_Q16, v62);
      v71 = v214;
      _Q22 = v213;
      v73 = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL);
      v74 = v217;
      *(_QWORD *)&v75 = vextq_s8(v74, v74, 8uLL).u64[0];
      v76 = v221;
      *(_QWORD *)&v77 = vextq_s8(v76, v76, 8uLL).u64[0];
      v61.f64[0] = v212;
      v78 = v211;
      v79 = v218;
      v50.i64[0] = v216;
      v80 = v215;
      *(_QWORD *)&v197 = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
      v198 = v61;
      v81 = v222;
      v33.f64[0] = v220;
      v82 = v219;
      v83 = (float64x2_t)vextq_s8(v82, v82, 8uLL);
      v202 = v83.f64[0];
      v199 = (float64x2_t)v50;
      v200 = v33;
      v196 = vextq_s8(v78, v78, 8uLL).u64[0];
      if (a5)
      {
        _Q5.f64[0] = *(float64_t *)(a1 + 504);
        v85 = *(double *)(a1 + 528);
        v86 = *(float64x2_t *)(a1 + 512);
        _Q3 = *(float64x2_t *)(a1 + 536);
        v188 = v58;
        v189 = v66;
        v88.f64[0] = v65.f64[0];
        v88.f64[1] = v66.f64[0];
        _Q18.f64[0] = v67.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v68;
        v191 = v73;
        v193 = v213.f64[0];
        v90 = v69.f64[0];
        *(_QWORD *)&_Q22.f64[1] = v70;
        v91 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v88, v213.f64[0]), _Q18, *(double *)v73.i64), _Q22, v214);
        v190 = v70;
        v83.f64[0] = v204 * v213.f64[0] + v203 * *(double *)v73.i64 + v201.f64[0] * v214;
        v187 = v68;
        v92 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v217.i64), _Q18, v75), _Q22, v218);
        v93 = vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v221.i64), _Q18, v77);
        *(_QWORD *)&_Q18.f64[0] = v219.i64[0];
        _Q18.f64[1] = v202;
        _Q17 = vaddq_f64(vmlaq_n_f64(v93, _Q22, v222), _Q18);
        _Q22.f64[0] = *(float64_t *)(a1 + 496);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(a1 + 520);
        __asm { FMLA            D22, D2, V17.D[1] }
        v96 = v77;
        _D31 = *(_QWORD *)(a1 + 544);
        __asm { FMLA            D2, D31, V17.D[1] }
        _Q17.f64[0] = v204 * *(double *)v217.i64 + v203 * v75 + v201.f64[0] * v218;
        *(_QWORD *)&v99.f64[0] = v211.i64[0];
        *(_QWORD *)&v99.f64[1] = v196;
        v100 = (int64x2_t)vaddq_f64(v91, v99);
        v101.f64[0] = v215.f64[0];
        v101.f64[1] = v197;
        v102 = (int64x2_t)vaddq_f64(v92, v101);
        v103 = (float64x2_t)vzip1q_s64(v100, v102);
        _Q30 = (float64x2_t)vzip2q_s64(v100, v102);
        v105 = vmlaq_laneq_f64(vmulq_n_f64(v103, *(double *)v22->i64), _Q30, *(float64x2_t *)v22, 1);
        v106 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v83, v198), (int64x2_t)vaddq_f64(_Q17, v199));
        v107 = vmlaq_laneq_f64(vmulq_n_f64(v103, v86.f64[0]), _Q30, v86, 1);
        v108 = vmlaq_laneq_f64(vmulq_n_f64(v103, _Q3.f64[0]), _Q30, _Q3, 1);
        _Q30.f64[0] = *(float64_t *)(a1 + 552);
        _Q8 = vmlaq_n_f64(v105, v106, _Q5.f64[0]);
        _Q31 = vmlaq_n_f64(v107, v106, v85);
        _Q10 = vmlaq_n_f64(v108, v106, _Q30.f64[0]);
        v106.f64[0] = v204 * *(double *)v221.i64 + v203 * v96 + v201.f64[0] * v222;
        *(_QWORD *)&v106.f64[0] = *(_OWORD *)&vaddq_f64(v106, v200);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q5.f64[0], v106.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v85, v106.f64[0]);
        v112 = vmlad_n_f64(_D2, _Q30.f64[0], v106.f64[0]);
        v113 = (float64x2_t)vzip1q_s64(*v22, (int64x2_t)v86);
        _Q16 = (float64x2_t)vzip2q_s64(*v22, (int64x2_t)v86);
        _Q5.f64[1] = v85;
        _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, _Q8.f64[0]), _Q16, _Q8, 1), _Q5, _Q18.f64[0]);
        _Q8.f64[0] = _Q8.f64[1];
        __asm { FMLA            D6, D8, V3.D[1] }
        v117 = _D6 + _Q30.f64[0] * _Q18.f64[0];
        v118 = vmlaq_laneq_f64(vmulq_n_f64(v113, _Q31.f64[0]), _Q16, _Q31, 1);
        _Q31.f64[0] = _Q31.f64[1];
        __asm { FMLA            D8, D31, V3.D[1] }
        _Q18 = vmlaq_n_f64(v118, _Q5, _Q22.f64[0]);
        _Q22.f64[0] = _Q8.f64[0] + _Q30.f64[0] * _Q22.f64[0];
        _Q8.f64[0] = *(float64_t *)(a1 + 568);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, _Q10.f64[0]), _Q16, _Q10, 1), _Q5, v112);
        _Q16.f64[0] = _Q10.f64[1];
        __asm { FMLA            D5, D16, V3.D[1] }
        v121 = _Q5.f64[0] + _Q30.f64[0] * v112;
        __asm
        {
          FMLA            D30, D8, V25.D[1]
          FMLA            D10, D8, V18.D[1]
          FMLA            D16, D8, V17.D[1]
        }
        v70 = v190;
        v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q25.f64[0]), (float64x2_t)xmmword_2082339F0, _Q25, 1), (float64x2_t)0, v117);
        v123 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q18.f64[0]), (float64x2_t)xmmword_2082339F0, _Q18, 1), (float64x2_t)0, _Q22.f64[0]);
        v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q17.f64[0]), (float64x2_t)xmmword_2082339F0, _Q17, 1), (float64x2_t)0, v121);
        v125 = vmlaq_laneq_f64(vmulq_n_f64(v225, v122.f64[0]), v226, v122, 1);
        v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v123.f64[0]), v226, v123, 1), v227, _Q22.f64[0] + _Q10.f64[0]);
        v127 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v124.f64[0]), v226, v124, 1), v227, v121 + _Q16.f64[0]);
        v66 = v189;
        v71 = v214;
        *(float64x2_t *)a5 = vmlaq_n_f64(v125, v227, v117 + _Q30.f64[0]);
        *(float64x2_t *)(a5 + 16) = v126;
        v77 = v96;
        v73 = v191;
        _Q22.f64[0] = v193;
        *(float64x2_t *)(a5 + 32) = v127;
        v68 = v187;
        v58 = v188;
      }
      v192 = *(double *)v82.i64;
      v194 = v80.f64[0];
      *(_QWORD *)&v80.f64[0] = v78.i64[0];
      if (a6)
      {
        v128 = v73;
        v129 = *(double *)v76.i64;
        v130 = v79;
        v131 = v71;
        v132.f64[0] = 0.0;
        v132.f64[1] = v224;
        *(_QWORD *)&_Q21.f64[1] = v58;
        v133 = (int64x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL);
        *(_QWORD *)&v41.f64[1] = v133.i64[0];
        v134 = vaddq_f64(v41, _Q21);
        v135 = vaddq_f64(v205, v195);
        v65.f64[1] = v66.f64[0];
        *(_QWORD *)&v67.f64[1] = v68;
        v133.i64[0] = *(_QWORD *)(a1 + 504);
        v136.i64[1] = v128.i64[1];
        v137 = vmlaq_n_f64(vmulq_n_f64(v65, _Q22.f64[0]), v67, *(double *)v128.i64);
        _Q21.f64[0] = v204 * _Q22.f64[0] + v203 * *(double *)v128.i64;
        v138 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v74.i64), v67, v75);
        v139 = v204 * *(double *)v74.i64 + v203 * v75;
        _Q30 = vmlaq_n_f64(vmulq_n_f64(v65, v129), v67, v77);
        v136.i64[0] = *(_QWORD *)(a1 + 528);
        v141 = *(float64x2_t *)(a1 + 512);
        v142 = v204 * v129 + v203 * v77;
        v66.f64[0] = *(float64_t *)(a1 + 552);
        _Q20 = *(float64x2_t *)(a1 + 536);
        *(_QWORD *)&v69.f64[1] = v70;
        v144 = (float64x2_t)vzip1q_s64(*v22, (int64x2_t)v141);
        v145 = vmlaq_n_f64(v137, v69, v131);
        v146.f64[1] = v201.f64[1];
        _Q21.f64[0] = _Q21.f64[0] + v201.f64[0] * v131;
        v147 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)v133, 8uLL);
        v148 = vmlaq_n_f64(v138, v69, v130);
        v67.f64[0] = v139 + v201.f64[0] * v130;
        v149.f64[0] = v192;
        v150 = (float64x2_t)vzip2q_s64(*v22, (int64x2_t)v141);
        v146.f64[0] = v142 + v201.f64[0] * v81;
        v149.f64[1] = v202;
        _Q27 = vaddq_f64(vmlaq_n_f64(_Q30, v69, v81), v149);
        _D29 = *(_QWORD *)(a1 + 496);
        __asm { FMLA            D22, D29, V27.D[1] }
        _Q30.f64[0] = *(float64_t *)(a1 + 520);
        __asm { FMLA            D29, D30, V27.D[1] }
        _D31 = *(_QWORD *)(a1 + 544);
        __asm { FMLA            D30, D31, V27.D[1] }
        v156 = (float64x2_t)vextq_s8((int8x16_t)v147, v136, 8uLL);
        v157 = vmulq_f64(v135, v147);
        v158 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v150, v135.f64[0]), (float64x2_t)vzip1q_s64(v133, (int64x2_t)v136), v134, 1);
        v159 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v134, v66.f64[0]), v135, _Q20);
        v160 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v156, v134.f64[0]), v144, v135.f64[0], 0);
        *(_QWORD *)&v80.f64[1] = v196;
        v161.f64[0] = v194;
        v161.f64[1] = v197;
        v162 = (int64x2_t)vaddq_f64(v145, v80);
        v163 = (int64x2_t)vaddq_f64(v148, v161);
        v164 = (float64x2_t)vzip1q_s64(v162, v163);
        v165 = (float64x2_t)vzip2q_s64(v162, v163);
        v166 = vmlaq_laneq_f64(vmulq_n_f64(v164, *(double *)v22->i64), v165, *(float64x2_t *)v22, 1);
        v167 = vmlaq_laneq_f64(vmulq_n_f64(v164, v141.f64[0]), v165, v141, 1);
        v168 = vmlaq_laneq_f64(vmulq_n_f64(v164, _Q20.f64[0]), v165, _Q20, 1);
        v169 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v134, 1), v134, _Q20, 1);
        v170 = vmlsq_lane_f64(vmulq_laneq_f64(v144, v134, 1), v150, v134.f64[0], 0);
        v171 = (int64x2_t)vmlsq_laneq_f64(v157, v66, v134, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v146, v200);
        v172 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v198), (int64x2_t)vaddq_f64(v67, v199));
        _Q4 = vmlaq_n_f64(v166, v172, *(double *)v133.i64);
        v174 = vmlad_n_f64(_D22, *(double *)v133.i64, _Q20.f64[0]);
        _Q5 = v223;
        v176 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v224);
        _Q7 = vmlaq_n_f64(v167, v172, *(double *)v136.i64);
        v178 = vmlad_n_f64(_D29, *(double *)v136.i64, _Q20.f64[0]);
        v179 = vnegq_f64(v223);
        _Q6 = vmlaq_n_f64(v168, v172, v66.f64[0]);
        _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v66.f64[0], _Q20.f64[0]);
        v181 = vmlaq_laneq_f64(vmulq_n_f64(v132, _Q4.f64[0]), (float64x2_t)v176, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v183 = vmlaq_laneq_f64(vmulq_n_f64(v132, _Q7.f64[0]), (float64x2_t)v176, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v184 = vmlaq_laneq_f64(vmulq_n_f64(v132, _Q6.f64[0]), (float64x2_t)v176, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v186 = (float64x2_t)vextq_s8((int8x16_t)v223, (int8x16_t)v179, 8uLL);
        _Q7.f64[0] = _D18 + v174 * 0.0;
        v179.f64[0] = _Q20.f64[0] + v178 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v158, v160), vmlaq_n_f64(v181, v186, v174));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v170, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v158, v160), vmlaq_n_f64(v183, v186, v178));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v170, 1), v179);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v171, v159), vmlaq_n_f64(v184, v186, _Q30.f64[0]));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v169, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + _Q30.f64[0] * 0.0));
      }
    }
  }
  return result;
}

uint64_t sub_2081155AC(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  float64x2_t v9;
  double v17;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  uint64_t v29;
  float64x2_t v31;
  double v32;
  double v34;
  int v35;
  double v36;
  int v37;
  double v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  int8x16_t v42;
  double v43;
  char v44;
  float64x2_t v45;
  double v46;
  float64x2x3_t v47;

  v5 = a1 + 488;
  _D2 = *(_QWORD *)(a1 + 528);
  v7 = a3[1].f64[0];
  _Q7 = *a3;
  v9 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 488), a3->f64[0]), *(float64x2_t *)(a1 + 512), *a3, 1), *(float64x2_t *)(a1 + 536), v7);
  __asm { FMLA            D0, D2, V7.D[1] }
  v46 = _D0 + *(double *)(a1 + 552) * v7;
  v45 = v9;
  sub_20810F6CC(*(_QWORD *)(a1 + 472), (uint64_t)&v45, 30, 0, 0, (uint64_t)&v42, 0.00000001, v9);
  if (!v44)
    return 0;
  _Q3 = *(_OWORD *)(v5 + 48);
  _D5 = v42.i64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  v17 = _D4 + *(double *)(v5 + 64) * v43;
  if (v17 < 0.0)
    return 0;
  v47 = vld3q_f64((const double *)v5);
  _Q0 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v47.val[0], *(double *)v42.i64), v47.val[1], *(double *)vextq_s8(v42, v42, 8uLL).i64), v47.val[2], v43), vmulq_n_f64(*(float64x2_t *)(a1 + 560), v17));
  _D1 = _Q0.f64[1];
  __asm { FMLA            D6, D1, V0.D[1] }
  v22 = sqrt(_D6);
  v23 = fabs(v17);
  v24 = fabs(v22);
  v25 = v23 / v24;
  if (v23 >= v24)
    v25 = v24 / v23;
  if (v25 <= 0.414213562)
  {
    v27 = 1;
    v28 = 2;
    v26 = v25;
    if (_D6 >= 0.00000001)
    {
LABEL_10:
      v29 = *(_QWORD *)&v17;
      if (v23 < v24)
        v27 = -v27;
      else
        v28 = v25 > 0.414213562;
      _ZF = v22 == INFINITY && v23 == INFINITY;
      v31 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v26 * v26), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v26 * v26), (float64x2_t)xmmword_208233A20), v26 * v26 * (v26 * v26))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v26 * v26), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v26 * v26), (float64x2_t)xmmword_208233A30), v26 * v26 * (v26 * v26))), v26 * v26 * (v26 * v26) * (v26 * v26 * (v26 * v26))));
      v32 = v26 + v26 * vdivq_f64(v31, (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1)).f64[0];
      if (_ZF)
        v32 = 0.785398163;
      if (v22 == 0.0 && v17 == 0.0)
        v34 = 0.0;
      else
        v34 = v32;
      if (v29 < 0)
      {
        v28 = 4 - v28;
        v27 = -v27;
      }
      if (v22 >= 0.0)
        v35 = v28;
      else
        v35 = -v28;
      v36 = (double)v35;
      if (v22 >= 0.0)
        v37 = v27;
      else
        v37 = -v27;
      v38 = v36 * 3.061617e-17 + v36 * 0.785398163 + v34 * (double)v37;
      v39 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v38 * v38)), v38 * v38);
      v40 = 1.0 / v22 * (v38 + v38 * (v39.f64[0] + vmuld_lane_f64(v38 * v38 * (v38 * v38), v39, 1)));
      goto LABEL_35;
    }
  }
  else
  {
    v26 = (v24 - v23) / (v23 + v24);
    if (v23 >= v24)
      v26 = -v26;
    v27 = -1;
    v28 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_10;
  }
  v40 = 1.0 / v17;
LABEL_35:
  v41 = vmulq_n_f64(_Q0, v40);
  *a2 = v41;
  a2->f64[0] = *(double *)(a1 + 560) + v41.f64[0];
  a2->f64[1] = *(double *)(a1 + 568) + v41.f64[1];
  return 1;
}

uint64_t sub_2081158C4(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, unint64_t a5, uint64_t a6, double a7, double a8, double a9, int32x4_t a10, int32x4_t a11)
{
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double *v19;
  double v20;
  uint64_t result;
  float64x2_t v23;
  int8x16_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64_t v34;
  int64x2_t v35;
  double v36;
  float64x2_t v38;
  float64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  unint64_t v44;
  float64_t v45;
  float64_t v47;
  float64x2_t v48;
  int8x16_t v49;
  float64x2_t v53;
  float64x2_t v55;
  double v56;
  unint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  float64x2_t v68;
  unint64_t v69;
  double v70;
  int8x16_t v72;
  int8x16_t v73;
  double v74;
  int8x16_t v75;
  double v76;
  int8x16_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  int8x16_t v81;
  float64x2_t v82;
  double v84;
  float64x2_t v85;
  float64x2_t v87;
  float64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v95;
  float64x2_t v98;
  int64x2_t v99;
  float64x2_t v100;
  int64x2_t v101;
  float64x2_t v102;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  double v111;
  float64x2_t v112;
  double v116;
  float64x2_t v117;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int8x16_t v127;
  double v128;
  double v129;
  double v130;
  float64x2_t v131;
  int64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  int8x16_t v135;
  float64x2_t v136;
  float64x2_t v137;
  double v138;
  float64x2_t v140;
  double v141;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v155;
  float64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  int64x2_t v170;
  float64x2_t v171;
  double v173;
  unint64_t v175;
  double v177;
  float64x2_t v178;
  float64x2_t v180;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v185;
  unint64_t v186;
  unint64_t v187;
  float64x2_t v188;
  unint64_t v189;
  int8x16_t v190;
  float64_t v191;
  float64_t v192;
  float64_t v193;
  float64x2_t v194;
  unint64_t v195;
  float64_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64_t v201;
  double v202;
  double v203;
  float64x2_t v204;
  float64x2_t v205;
  double v206;
  float64x2_t v207;
  float64_t v208;
  char v209;
  int8x16_t v210;
  float64_t v211;
  float64x2_t v212;
  double v213;
  float64x2_t v214;
  uint64_t v215;
  int8x16_t v216;
  double v217;
  int8x16_t v218;
  float64_t v219;
  int8x16_t v220;
  double v221;
  float64x2_t v222;
  double v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  double v228;
  float64x2_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  v16 = a1 + 512;
  v17 = *(float64x2_t *)(a1 + 584);
  v18 = vsubq_f64(*a3, v17);
  v229 = v18;
  v19 = (double *)(a1 + 168);
  if (a5)
  {
    if ((sub_208112DDC((uint64_t)&v227, (uint64_t)&v224, v229.f64, (uint64_t)v19, 20, v18.f64[0], v17.f64[0], a9, a10, a11) & 1) == 0)return 0;
  }
  else
  {
    v20 = sqrt(vaddvq_f64(vmulq_f64(v18, v18)));
    result = sub_2081112B8((uint64_t)&v227, v229.f64, v19, 20, v20, v20, a9, a10, a11);
    if (!(_DWORD)result)
      return result;
  }
  if (v228 < 0.0)
    return 0;
  v227 = vaddq_f64(v227, vmulq_n_f64(*(float64x2_t *)(v16 + 72), v228));
  _D3 = *(_QWORD *)(v16 + 40);
  v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v16, v227.f64[0]), *(float64x2_t *)(v16 + 24), v227, 1), *(float64x2_t *)(v16 + 48), v228);
  __asm { FMLA            D1, D3, V0.D[1] }
  v223 = _D1 + *(double *)(v16 + 64) * v228;
  v222 = v23;
  if (a5 | a6)
    v29 = &v210;
  else
    v29 = 0;
  sub_20810EFB4(*(_QWORD *)(a1 + 496), COERCE_FLOAT64_T(&v222), (uint64_t)v29, (uint64_t)&v205);
  result = v209 != 0;
  if (v209)
  {
    _Q3.f64[0] = *(float64_t *)(v16 + 16);
    v34 = *(double *)(v16 + 40);
    v35 = *(int64x2_t *)(v16 + 24);
    v36 = *(double *)(v16 + 64);
    _Q5 = *(_OWORD *)(v16 + 48);
    v38 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v16, v35);
    v39 = _Q3.f64[0];
    _Q7.f64[1] = v34;
    v30.f64[0] = v206;
    v40 = v205;
    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v205.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v16, v35), v205, 1), _Q7, v206);
    _Q7.f64[0] = v205.f64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    v204 = v30;
    _Q7.f64[0] = _D4 + v36 * v206;
    v44 = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v45 = v41.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v44;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(v16 + 16);
      v34 = *(double *)(v16 + 40);
      v38 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v16, *(int64x2_t *)(v16 + 24));
      _D20 = *(_QWORD *)(v16 + 56);
      v47 = *(double *)(v16 + 32);
      v48.f64[0] = *(float64_t *)(v16 + 8);
      v36 = *(double *)(v16 + 64);
    }
    else
    {
      _D20 = *(_QWORD *)(v16 + 56);
      v47 = *(double *)(v16 + 32);
      v48.f64[0] = *(float64_t *)(v16 + 8);
    }
    v49 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
    v31.f64[0] = v208;
    _Q26 = v207;
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = v207.f64[1];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v31.f64[0] * v31.f64[0]);
    v53 = vmulq_f64(v31, _Q16);
    _Q21 = vmulq_n_f64(v207, _Q16.f64[0]);
    _Q3.f64[1] = v34;
    *(_QWORD *)&v38.f64[1] = v49.i64[0];
    v48.f64[1] = v47;
    v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, _Q21.f64[0]), v48, _Q21, 1), _Q3, v53.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v36, v53.f64[0]);
    *(_QWORD *)&v41.f64[1] = v44;
    *(float64x2_t *)a2 = vaddq_f64(v41, v55);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if (a5 | a6)
    {
      v56 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v57 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
      v58.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v58.f64[1] = v57;
      v59.f64[0] = _Q16.f64[0];
      v59.f64[1] = _Q16.f64[0];
      v60 = vmulq_f64(v59, v58);
      v194 = v53;
      v61 = vmulq_f64(_Q16, v53);
      v62 = v31.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v61.f64[0];
      v31.f64[0] = v56 * _Q16.f64[0] * v61.f64[0];
      v61.f64[0] = v62 * v61.f64[0];
      v63.f64[0] = 0.0;
      v63.f64[1] = _Q16.f64[0];
      v64 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v60, _Q21.f64[0], 0);
      v65 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
      *(_QWORD *)&v203 = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q7);
      v66 = vmlsq_lane_f64(v63, v60, v56 * _Q16.f64[0], 0);
      v67 = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
      *(_QWORD *)&v202 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v31);
      v68 = vmlsq_lane_f64((float64x2_t)0, v60, v62, 0);
      v69 = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
      v200 = vsubq_f64(_Q16, v61);
      v70 = v213;
      _Q22 = v212;
      v72 = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL);
      v73 = v216;
      *(_QWORD *)&v74 = vextq_s8(v73, v73, 8uLL).u64[0];
      v75 = v220;
      *(_QWORD *)&v76 = vextq_s8(v75, v75, 8uLL).u64[0];
      v60.f64[0] = v211;
      v77 = v210;
      v78 = v217;
      v49.i64[0] = v215;
      v79 = v214;
      *(_QWORD *)&v196 = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
      v197 = v60;
      v80 = v221;
      v32.f64[0] = v219;
      v81 = v218;
      v82 = (float64x2_t)vextq_s8(v81, v81, 8uLL);
      v201 = v82.f64[0];
      v198 = (float64x2_t)v49;
      v199 = v32;
      v195 = vextq_s8(v77, v77, 8uLL).u64[0];
      if (a5)
      {
        _Q5.f64[0] = *(float64_t *)(v16 + 16);
        v84 = *(double *)(v16 + 40);
        v85 = *(float64x2_t *)(v16 + 24);
        _Q3 = *(float64x2_t *)(v16 + 48);
        v187 = v57;
        v188 = v65;
        v87.f64[0] = v64.f64[0];
        v87.f64[1] = v65.f64[0];
        _Q18.f64[0] = v66.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v67;
        v190 = v72;
        v192 = v212.f64[0];
        v89 = v68.f64[0];
        *(_QWORD *)&_Q22.f64[1] = v69;
        v90 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, v212.f64[0]), _Q18, *(double *)v72.i64), _Q22, v213);
        v189 = v69;
        v82.f64[0] = v203 * v212.f64[0] + v202 * *(double *)v72.i64 + v200.f64[0] * v213;
        v186 = v67;
        v91 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, *(double *)v216.i64), _Q18, v74), _Q22, v217);
        v92 = vmlaq_n_f64(vmulq_n_f64(v87, *(double *)v220.i64), _Q18, v76);
        *(_QWORD *)&_Q18.f64[0] = v218.i64[0];
        _Q18.f64[1] = v201;
        _Q17 = vaddq_f64(vmlaq_n_f64(v92, _Q22, v221), _Q18);
        _Q22.f64[0] = *(float64_t *)(v16 + 8);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(v16 + 32);
        __asm { FMLA            D22, D2, V17.D[1] }
        v95 = v76;
        _D31 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D2, D31, V17.D[1] }
        _Q17.f64[0] = v203 * *(double *)v216.i64 + v202 * v74 + v200.f64[0] * v217;
        *(_QWORD *)&v98.f64[0] = v210.i64[0];
        *(_QWORD *)&v98.f64[1] = v195;
        v99 = (int64x2_t)vaddq_f64(v90, v98);
        v100.f64[0] = v214.f64[0];
        v100.f64[1] = v196;
        v101 = (int64x2_t)vaddq_f64(v91, v100);
        v102 = (float64x2_t)vzip1q_s64(v99, v101);
        _Q30 = (float64x2_t)vzip2q_s64(v99, v101);
        v104 = vmlaq_laneq_f64(vmulq_n_f64(v102, *(double *)v16), _Q30, *(float64x2_t *)v16, 1);
        v105 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v82, v197), (int64x2_t)vaddq_f64(_Q17, v198));
        v106 = vmlaq_laneq_f64(vmulq_n_f64(v102, v85.f64[0]), _Q30, v85, 1);
        v107 = vmlaq_laneq_f64(vmulq_n_f64(v102, _Q3.f64[0]), _Q30, _Q3, 1);
        _Q30.f64[0] = *(float64_t *)(v16 + 64);
        _Q8 = vmlaq_n_f64(v104, v105, _Q5.f64[0]);
        _Q31 = vmlaq_n_f64(v106, v105, v84);
        _Q10 = vmlaq_n_f64(v107, v105, _Q30.f64[0]);
        v105.f64[0] = v203 * *(double *)v220.i64 + v202 * v95 + v200.f64[0] * v221;
        *(_QWORD *)&v105.f64[0] = *(_OWORD *)&vaddq_f64(v105, v199);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q5.f64[0], v105.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v84, v105.f64[0]);
        v111 = vmlad_n_f64(_D2, _Q30.f64[0], v105.f64[0]);
        v112 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v16, (int64x2_t)v85);
        _Q16 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v16, (int64x2_t)v85);
        _Q5.f64[1] = v84;
        _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, _Q8.f64[0]), _Q16, _Q8, 1), _Q5, _Q18.f64[0]);
        _Q8.f64[0] = _Q8.f64[1];
        __asm { FMLA            D6, D8, V3.D[1] }
        v116 = _D6 + _Q30.f64[0] * _Q18.f64[0];
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v112, _Q31.f64[0]), _Q16, _Q31, 1);
        _Q31.f64[0] = _Q31.f64[1];
        __asm { FMLA            D8, D31, V3.D[1] }
        _Q18 = vmlaq_n_f64(v117, _Q5, _Q22.f64[0]);
        _Q22.f64[0] = _Q8.f64[0] + _Q30.f64[0] * _Q22.f64[0];
        _Q8.f64[0] = *(float64_t *)(a1 + 592);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, _Q10.f64[0]), _Q16, _Q10, 1), _Q5, v111);
        _Q16.f64[0] = _Q10.f64[1];
        __asm { FMLA            D5, D16, V3.D[1] }
        v120 = _Q5.f64[0] + _Q30.f64[0] * v111;
        __asm
        {
          FMLA            D30, D8, V25.D[1]
          FMLA            D10, D8, V18.D[1]
          FMLA            D16, D8, V17.D[1]
        }
        v69 = v189;
        v121 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q25.f64[0]), (float64x2_t)xmmword_2082339F0, _Q25, 1), (float64x2_t)0, v116);
        v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q18.f64[0]), (float64x2_t)xmmword_2082339F0, _Q18, 1), (float64x2_t)0, _Q22.f64[0]);
        v123 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q17.f64[0]), (float64x2_t)xmmword_2082339F0, _Q17, 1), (float64x2_t)0, v120);
        v124 = vmlaq_laneq_f64(vmulq_n_f64(v224, v121.f64[0]), v225, v121, 1);
        v125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v122.f64[0]), v225, v122, 1), v226, _Q22.f64[0] + _Q10.f64[0]);
        v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v123.f64[0]), v225, v123, 1), v226, v120 + _Q16.f64[0]);
        v65 = v188;
        v70 = v213;
        *(float64x2_t *)a5 = vmlaq_n_f64(v124, v226, v116 + _Q30.f64[0]);
        *(float64x2_t *)(a5 + 16) = v125;
        v76 = v95;
        v72 = v190;
        _Q22.f64[0] = v192;
        *(float64x2_t *)(a5 + 32) = v126;
        v67 = v186;
        v57 = v187;
      }
      v191 = *(double *)v81.i64;
      v193 = v79.f64[0];
      *(_QWORD *)&v79.f64[0] = v77.i64[0];
      if (a6)
      {
        v127 = v72;
        v128 = *(double *)v75.i64;
        v129 = v78;
        v130 = v70;
        v131.f64[0] = 0.0;
        v131.f64[1] = v223;
        *(_QWORD *)&_Q21.f64[1] = v57;
        v132 = (int64x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL);
        *(_QWORD *)&v40.f64[1] = v132.i64[0];
        v133 = vaddq_f64(v40, _Q21);
        v134 = vaddq_f64(v204, v194);
        v64.f64[1] = v65.f64[0];
        *(_QWORD *)&v66.f64[1] = v67;
        v132.i64[0] = *(_QWORD *)(v16 + 16);
        v135.i64[1] = v127.i64[1];
        v136 = vmlaq_n_f64(vmulq_n_f64(v64, _Q22.f64[0]), v66, *(double *)v127.i64);
        _Q21.f64[0] = v203 * _Q22.f64[0] + v202 * *(double *)v127.i64;
        v137 = vmlaq_n_f64(vmulq_n_f64(v64, *(double *)v73.i64), v66, v74);
        v138 = v203 * *(double *)v73.i64 + v202 * v74;
        _Q30 = vmlaq_n_f64(vmulq_n_f64(v64, v128), v66, v76);
        v135.i64[0] = *(_QWORD *)(v16 + 40);
        v140 = *(float64x2_t *)(v16 + 24);
        v141 = v203 * v128 + v202 * v76;
        v65.f64[0] = *(float64_t *)(v16 + 64);
        _Q20 = *(float64x2_t *)(v16 + 48);
        *(_QWORD *)&v68.f64[1] = v69;
        v143 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v16, (int64x2_t)v140);
        v144 = vmlaq_n_f64(v136, v68, v130);
        v145.f64[1] = v200.f64[1];
        _Q21.f64[0] = _Q21.f64[0] + v200.f64[0] * v130;
        v146 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)v132, 8uLL);
        v147 = vmlaq_n_f64(v137, v68, v129);
        v66.f64[0] = v138 + v200.f64[0] * v129;
        v148.f64[0] = v191;
        v149 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v16, (int64x2_t)v140);
        v145.f64[0] = v141 + v200.f64[0] * v80;
        v148.f64[1] = v201;
        _Q27 = vaddq_f64(vmlaq_n_f64(_Q30, v68, v80), v148);
        _D29 = *(_QWORD *)(v16 + 8);
        __asm { FMLA            D22, D29, V27.D[1] }
        _Q30.f64[0] = *(float64_t *)(v16 + 32);
        __asm { FMLA            D29, D30, V27.D[1] }
        _D31 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D30, D31, V27.D[1] }
        v155 = (float64x2_t)vextq_s8((int8x16_t)v146, v135, 8uLL);
        v156 = vmulq_f64(v134, v146);
        v157 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v149, v134.f64[0]), (float64x2_t)vzip1q_s64(v132, (int64x2_t)v135), v133, 1);
        v158 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v133, v65.f64[0]), v134, _Q20);
        v159 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v155, v133.f64[0]), v143, v134.f64[0], 0);
        *(_QWORD *)&v79.f64[1] = v195;
        v160.f64[0] = v193;
        v160.f64[1] = v196;
        v161 = (int64x2_t)vaddq_f64(v144, v79);
        v162 = (int64x2_t)vaddq_f64(v147, v160);
        v163 = (float64x2_t)vzip1q_s64(v161, v162);
        v164 = (float64x2_t)vzip2q_s64(v161, v162);
        v165 = vmlaq_laneq_f64(vmulq_n_f64(v163, *(double *)v16), v164, *(float64x2_t *)v16, 1);
        v166 = vmlaq_laneq_f64(vmulq_n_f64(v163, v140.f64[0]), v164, v140, 1);
        v167 = vmlaq_laneq_f64(vmulq_n_f64(v163, _Q20.f64[0]), v164, _Q20, 1);
        v168 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v133, 1), v133, _Q20, 1);
        v169 = vmlsq_lane_f64(vmulq_laneq_f64(v143, v133, 1), v149, v133.f64[0], 0);
        v170 = (int64x2_t)vmlsq_laneq_f64(v156, v65, v133, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v145, v199);
        v171 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v197), (int64x2_t)vaddq_f64(v66, v198));
        _Q4 = vmlaq_n_f64(v165, v171, *(double *)v132.i64);
        v173 = vmlad_n_f64(_D22, *(double *)v132.i64, _Q20.f64[0]);
        _Q5 = v222;
        v175 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v223);
        _Q7 = vmlaq_n_f64(v166, v171, *(double *)v135.i64);
        v177 = vmlad_n_f64(_D29, *(double *)v135.i64, _Q20.f64[0]);
        v178 = vnegq_f64(v222);
        _Q6 = vmlaq_n_f64(v167, v171, v65.f64[0]);
        _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v65.f64[0], _Q20.f64[0]);
        v180 = vmlaq_laneq_f64(vmulq_n_f64(v131, _Q4.f64[0]), (float64x2_t)v175, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v182 = vmlaq_laneq_f64(vmulq_n_f64(v131, _Q7.f64[0]), (float64x2_t)v175, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v183 = vmlaq_laneq_f64(vmulq_n_f64(v131, _Q6.f64[0]), (float64x2_t)v175, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v185 = (float64x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)v178, 8uLL);
        _Q7.f64[0] = _D18 + v173 * 0.0;
        v178.f64[0] = _Q20.f64[0] + v177 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v157, v159), vmlaq_n_f64(v180, v185, v173));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v169, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v157, v159), vmlaq_n_f64(v182, v185, v177));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v169, 1), v178);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v170, v158), vmlaq_n_f64(v183, v185, _Q30.f64[0]));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v168, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + _Q30.f64[0] * 0.0));
      }
    }
  }
  return result;
}

uint64_t sub_208116140(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v5;
  double v7;
  double v8;
  double v17;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v33;
  double v35;
  int v36;
  double v37;
  int v38;
  double v39;
  double v40;
  float64x2_t v41;
  int8x16_t v42;
  double v43;
  char v44;
  float64x2_t v45;
  double v46;
  float64x2x3_t v47;

  v5 = a1 + 512;
  _D2 = *(_QWORD *)(a1 + 552);
  v7 = *(double *)(a1 + 576);
  v8 = a3[1].f64[0];
  _Q7 = *a3;
  __asm { FMLA            D0, D2, V7.D[1] }
  v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 512), a3->f64[0]), *(float64x2_t *)(a1 + 536), *a3, 1), *(float64x2_t *)(a1 + 560), v8);
  v46 = _D0 + v7 * v8;
  sub_20810F6CC(*(_QWORD *)(a1 + 496), (uint64_t)&v45, 30, 0, 0, (uint64_t)&v42, 0.00000001, v45);
  if (!v44)
    return 0;
  _Q3 = *(_OWORD *)(v5 + 48);
  _D5 = v42.i64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  v17 = _D4 + *(double *)(v5 + 64) * v43;
  if (v17 < 0.0)
    return 0;
  v47 = vld3q_f64((const double *)v5);
  _Q0 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v47.val[0], *(double *)v42.i64), v47.val[1], *(double *)vextq_s8(v42, v42, 8uLL).i64), v47.val[2], v43), vmulq_n_f64(*(float64x2_t *)(v5 + 72), v17));
  _D1 = _Q0.f64[1];
  __asm { FMLA            D6, D1, V0.D[1] }
  v22 = sqrt(_D6);
  v23 = fabs(v17);
  v24 = fabs(v22);
  v25 = v23 / v24;
  if (v23 >= v24)
    v25 = v24 / v23;
  if (v25 <= 0.414213562)
  {
    v27 = 1;
    v28 = 2;
    v26 = v25;
    if (_D6 >= 0.00000001)
    {
LABEL_10:
      v29 = *(_QWORD *)&v17;
      if (v23 < v24)
        v27 = -v27;
      else
        v28 = v25 > 0.414213562;
      v30 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v26 * v26), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v26 * v26), (float64x2_t)xmmword_208233A20), v26 * v26 * (v26 * v26))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v26 * v26), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v26 * v26), (float64x2_t)xmmword_208233A30), v26 * v26 * (v26 * v26))), v26 * v26 * (v26 * v26) * (v26 * v26 * (v26 * v26))));
      v31 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1);
      _ZF = v22 == INFINITY && v23 == INFINITY;
      v33 = v26 + v26 * vdivq_f64(v30, v31).f64[0];
      if (_ZF)
        v33 = 0.785398163;
      if (v22 == 0.0 && v17 == 0.0)
        v35 = 0.0;
      else
        v35 = v33;
      if (v29 < 0)
      {
        v28 = 4 - v28;
        v27 = -v27;
      }
      if (v22 >= 0.0)
        v36 = v28;
      else
        v36 = -v28;
      v37 = (double)v36;
      if (v22 >= 0.0)
        v38 = v27;
      else
        v38 = -v27;
      v39 = v37 * 3.061617e-17 + v37 * 0.785398163 + v35 * (double)v38;
      v40 = 1.0
          / v22
          * (v39
           * (v39
            * v39
            * (*(double *)(a1 + 168)
             + v39
             * v39
             * (*(double *)(a1 + 176)
              + v39
              * v39
              * (*(double *)(a1 + 184)
               + v39
               * v39
               * (*(double *)(a1 + 192)
                + v39
                * v39
                * (*(double *)(a1 + 200) + v39 * v39 * (*(double *)(a1 + 208) + v39 * v39 * *(double *)(a1 + 216)))))))
            + 1.0));
      goto LABEL_35;
    }
  }
  else
  {
    v26 = (v24 - v23) / (v23 + v24);
    if (v23 >= v24)
      v26 = -v26;
    v27 = -1;
    v28 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_10;
  }
  v40 = 1.0 / v17;
LABEL_35:
  v41 = vmulq_n_f64(_Q0, v40);
  *a2 = v41;
  a2->f64[0] = *(double *)(a1 + 584) + v41.f64[0];
  a2->f64[1] = *(double *)(a1 + 592) + v41.f64[1];
  return 1;
}

uint64_t sub_208116474(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, unint64_t a5, uint64_t a6)
{
  _BOOL4 v11;
  double *v12;
  double v13;
  uint64_t result;
  double v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v25;
  double v26;
  int64x2_t *v27;
  float64x2_t v29;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v36;
  int64x2_t v37;
  double v38;
  float64x2_t v40;
  float64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unint64_t v46;
  float64_t v47;
  float64_t v49;
  float64x2_t v50;
  float64x2_t v54;
  float64x2_t v56;
  double v57;
  unint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  unint64_t v66;
  float64x2_t v68;
  unint64_t v69;
  double v70;
  float64x2_t v71;
  unint64_t v72;
  double v73;
  int8x16_t v74;
  double v75;
  double v76;
  int8x16_t v77;
  int64x2_t v78;
  int8x16_t v79;
  double v80;
  float64x2_t v81;
  int8x16_t v82;
  float64x2_t v83;
  unint64_t v84;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v91;
  float64x2_t v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v102;
  double v103;
  int64x2_t v104;
  int64x2_t v105;
  float64x2_t v106;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  double v114;
  float64x2_t v115;
  double v120;
  double v123;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  int64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v141;
  float64_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64_t v145;
  float64x2_t v146;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v161;
  float64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  int64x2_t v175;
  float64x2_t v176;
  double v178;
  unint64_t v180;
  double v182;
  float64x2_t v183;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v190;
  unint64_t v191;
  unint64_t v192;
  float64x2_t v193;
  unint64_t v194;
  unint64_t v195;
  double v196;
  double v197;
  float64x2_t v198;
  unint64_t v199;
  float64x2_t v200;
  float64x2_t v201;
  unint64_t v202;
  int64x2_t v203;
  unint64_t v204;
  unint64_t v205;
  float64_t v206;
  int8x16_t v207;
  float64_t v208;
  int8x16_t v209;
  float64x2_t v210;
  float64_t v211;
  int8x16_t v212;
  double v213;
  int8x16_t v214;
  double v215;
  int8x16_t v216;
  double v217;
  float64x2_t v218;
  unint64_t v219;
  int8x16_t v220;
  double v221;
  int8x16_t v222;
  double v223;
  int64x2_t v224;
  double v225;
  int64x2_t v226;
  double v227;
  float64x2_t v228;
  uint64_t v229;
  float64x2_t v230;
  int8x16_t v231;
  _BYTE v232[32];
  int8x16_t v233;
  double v234;
  float64x2_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  v235 = vsubq_f64(*a3, *(float64x2_t *)(a1 + 752));
  v11 = a5 != 0;
  v12 = (double *)(a1 + 168);
  v13 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  result = sub_2081121D8((uint64_t)&v222, (uint64_t)&v235, a1 + 168, (double *)(a1 + 280), 0x14u, v13);
  if (!v11)
  {
    if (!(_DWORD)result)
      return result;
    *(double *)v209.i64 = v15;
    v205 = *(_QWORD *)&v15;
    *(double *)v207.i64 = v15;
    v204 = *(_QWORD *)&v15;
    v208 = v15;
    v206 = v15;
    v26 = v223;
    if (v223 >= 0.0)
      goto LABEL_6;
    return 0;
  }
  if (!(_DWORD)result)
    return result;
  if (!sub_2081117AC(&v230, (uint64_t)&v231, &v228, (uint64_t)&v222, v12, v13))
    return 0;
  *(double *)v16.i64 = v223;
  v17.i64[0] = *(_QWORD *)v232;
  _Q3 = v231;
  v233 = v222;
  v234 = v223;
  v229 = 0;
  _Q5.f64[0] = v223;
  *(_QWORD *)&_Q5.f64[1] = v222.i64[0];
  _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)(v232 + 16), _Q5), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v232 + 16), *(int64x2_t *)v232), (float64x2_t)vextq_s8(v222, v16, 8uLL)).f64[1];
  __asm { FMLA            D6, D5, V3.D[1] }
  if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)v232, (float64x2_t)v222), 1), *(float64x2_t *)&v232[16], (float64x2_t)v222).f64[0], *(double *)v232)) < 0.00000001)return 0;
  v25.i64[0] = vextq_s8(v231, v231, 8uLL).u64[0];
  _Q3.i64[1] = vextq_s8(*(int8x16_t *)v232, *(int8x16_t *)v232, 8uLL).u64[0];
  v25.i64[1] = *(_QWORD *)&v232[16];
  v17.i64[1] = vextq_s8(*(int8x16_t *)&v232[16], *(int8x16_t *)&v232[16], 8uLL).u64[0];
  v211 = *(double *)v222.i64;
  v210 = (float64x2_t)_Q3;
  *(_QWORD *)&v213 = vextq_s8(v222, v222, 8uLL).u64[0];
  v212 = v25;
  v215 = v223;
  v214 = v17;
  sub_207CC48B4((uint64_t)&v224);
  v206 = v227;
  v207 = (int8x16_t)vzip2q_s64(v224, v226);
  v208 = v225;
  v209 = (int8x16_t)vzip1q_s64(v224, v226);
  v204 = vextq_s8(v207, v207, 8uLL).u64[0];
  v205 = vextq_s8(v209, v209, 8uLL).u64[0];
  v26 = v223;
  if (v223 < 0.0)
    return 0;
LABEL_6:
  v27 = (int64x2_t *)(a1 + 680);
  v222 = (int8x16_t)vaddq_f64((float64x2_t)v222, vmulq_n_f64(*(float64x2_t *)(a1 + 752), v26));
  _D3 = *(_QWORD *)(a1 + 720);
  v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 680), *(double *)v222.i64), *(float64x2_t *)(a1 + 704), (float64x2_t)v222, 1), *(float64x2_t *)(a1 + 728), v223);
  __asm { FMLA            D1, D3, V0.D[1] }
  v225 = _D1 + *(double *)(a1 + 744) * v223;
  v224 = (int64x2_t)v29;
  if (a5 | a6)
    v31 = &v210;
  else
    v31 = 0;
  sub_20810EFB4(*(_QWORD *)(a1 + 664), COERCE_FLOAT64_T(&v224), (uint64_t)v31, (uint64_t)&v231);
  result = v233.i8[0] != 0;
  if (v233.i8[0])
  {
    _Q3.f64[0] = *(float64_t *)(a1 + 696);
    v36 = *(double *)(a1 + 720);
    v37 = *(int64x2_t *)(a1 + 704);
    v38 = *(double *)(a1 + 744);
    _Q5 = *(_OWORD *)(a1 + 728);
    v40 = (float64x2_t)vzip1q_s64(*v27, v37);
    v41 = _Q3.f64[0];
    _Q7.f64[1] = v36;
    v32.f64[0] = *(float64_t *)v232;
    v42 = (float64x2_t)v231;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, *(double *)v231.i64), (float64x2_t)vzip2q_s64(*v27, v37), (float64x2_t)v231, 1), _Q7, *(double *)v232);
    *(_QWORD *)&_Q7.f64[0] = v231.i64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    _Q7.f64[0] = _D4 + v38 * *(double *)v232;
    v46 = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v47 = v43.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v46;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(a1 + 696);
      v36 = *(double *)(a1 + 720);
      v40 = (float64x2_t)vzip1q_s64(*v27, *(int64x2_t *)(a1 + 704));
      _D20 = *(_QWORD *)(a1 + 736);
      v49 = *(double *)(a1 + 712);
      v50.f64[0] = *(float64_t *)(a1 + 688);
      v38 = *(double *)(a1 + 744);
    }
    else
    {
      _D20 = *(_QWORD *)(a1 + 736);
      v49 = *(double *)(a1 + 712);
      v50.f64[0] = *(float64_t *)(a1 + 688);
    }
    v33.f64[0] = *(float64_t *)&v232[24];
    _Q26 = *(float64x2_t *)&v232[8];
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = *(_QWORD *)&v232[16];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v33.f64[0] * v33.f64[0]);
    v54 = vmulq_f64(v33, _Q16);
    _Q21 = vmulq_n_f64(*(float64x2_t *)&v232[8], _Q16.f64[0]);
    _Q3.f64[1] = v36;
    *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    v50.f64[1] = v49;
    v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, _Q21.f64[0]), v50, _Q21, 1), _Q3, v54.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v38, v54.f64[0]);
    *(_QWORD *)&v43.f64[1] = v46;
    *(float64x2_t *)a2 = vaddq_f64(v43, v56);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if (a5 | a6)
    {
      v57 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v58 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
      v59.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v59.f64[1] = v58;
      v60.f64[0] = _Q16.f64[0];
      v60.f64[1] = _Q16.f64[0];
      v61 = vmulq_f64(v60, v59);
      v62 = vmulq_f64(_Q16, v54);
      v63 = v33.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v62.f64[0];
      v33.f64[0] = v57 * _Q16.f64[0] * v62.f64[0];
      v62.f64[0] = v63 * v62.f64[0];
      v64.f64[0] = 0.0;
      v64.f64[1] = _Q16.f64[0];
      v65 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v61, _Q21.f64[0], 0);
      v66 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
      _Q9 = vsubq_f64((float64x2_t)0, _Q7);
      v68 = vmlsq_lane_f64(v64, v61, v57 * _Q16.f64[0], 0);
      v69 = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
      *(_QWORD *)&v70 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v33);
      v71 = vmlsq_lane_f64((float64x2_t)0, v61, v63, 0);
      v72 = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
      *(_QWORD *)&v73 = *(_OWORD *)&vsubq_f64(_Q16, v62);
      v34.f64[0] = v213;
      v74 = v212;
      *(_QWORD *)&v75 = vextq_s8(v74, v74, 8uLL).u64[0];
      v76 = v217;
      v77 = v216;
      v78 = (int64x2_t)vextq_s8(v77, v77, 8uLL);
      v197 = v221;
      v79 = v220;
      *(_QWORD *)&v80 = vextq_s8(v79, v79, 8uLL).u64[0];
      v198 = (float64x2_t)*(unint64_t *)&v211;
      v81 = v210;
      v201 = (float64x2_t)*(unint64_t *)&v215;
      v82 = v214;
      v199 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
      v200 = (float64x2_t)v219;
      v83 = v218;
      v84 = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
      v202 = vextq_s8(v82, v82, 8uLL).u64[0];
      v195 = v84;
      if (a5)
      {
        _Q3.f64[0] = *(float64_t *)(a1 + 696);
        v86 = *(double *)(a1 + 720);
        v191 = v58;
        v192 = v66;
        v87 = *(float64x2_t *)(a1 + 704);
        v203 = v78;
        v88.f64[0] = v65.f64[0];
        *(_QWORD *)&v88.f64[1] = v66;
        _Q5 = *(float64x2_t *)(a1 + 728);
        _Q18.f64[0] = v68.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v69;
        v91 = vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v212.i64), _Q18, v75);
        v196 = v75;
        _Q22.f64[0] = v71.f64[0];
        *(_QWORD *)&_Q22.f64[1] = v72;
        v93 = vmlaq_n_f64(v91, _Q22, v213);
        v193 = v34;
        v194 = v72;
        v94 = _Q9.f64[0];
        _Q9.f64[0] = _Q9.f64[0] * *(double *)v212.i64 + v70 * v196 + v73 * v213;
        v95 = v70;
        v96 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v216.i64), _Q18, *(double *)v203.i64), _Q22, v217);
        v97 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v220.i64), _Q18, v80), _Q22, v221);
        _Q18.f64[0] = v218.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v84;
        _Q17 = vaddq_f64(v97, _Q18);
        _Q22.f64[0] = *(float64_t *)(a1 + 688);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(a1 + 712);
        __asm { FMLA            D22, D2, V17.D[1] }
        _D28 = *(_QWORD *)(a1 + 736);
        __asm { FMLA            D2, D28, V17.D[1] }
        _Q17.f64[0] = v94 * *(double *)v216.i64 + v95 * *(double *)v203.i64 + v73 * v217;
        v102.f64[0] = v210.f64[0];
        v103 = v80;
        *(_QWORD *)&v102.f64[1] = v199;
        v104 = (int64x2_t)vaddq_f64(v93, v102);
        *(_QWORD *)&v93.f64[0] = v214.i64[0];
        *(_QWORD *)&v93.f64[1] = v202;
        v105 = (int64x2_t)vaddq_f64(v96, v93);
        v106 = (float64x2_t)vzip1q_s64(v104, v105);
        _Q28 = (float64x2_t)vzip2q_s64(v104, v105);
        v108 = vmlaq_laneq_f64(vmulq_n_f64(v106, *(double *)v27->i64), _Q28, *(float64x2_t *)v27, 1);
        v109 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q9, (float64x2_t)*(unint64_t *)&v211), (int64x2_t)vaddq_f64(_Q17, (float64x2_t)*(unint64_t *)&v215));
        v110 = vmlaq_laneq_f64(vmulq_n_f64(v106, v87.f64[0]), _Q28, v87, 1);
        v111 = vmlaq_laneq_f64(vmulq_n_f64(v106, _Q5.f64[0]), _Q28, _Q5, 1);
        _Q28.f64[0] = *(float64_t *)(a1 + 744);
        _Q8 = vmlaq_n_f64(v108, v109, _Q3.f64[0]);
        _Q9 = vmlaq_n_f64(v110, v109, v86);
        v113 = vmlaq_n_f64(v111, v109, _Q28.f64[0]);
        v109.f64[0] = v94 * *(double *)v220.i64 + v95 * v80 + v73 * v221;
        *(_QWORD *)&v109.f64[0] = *(_OWORD *)&vaddq_f64(v109, (float64x2_t)v219);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q3.f64[0], v109.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v86, v109.f64[0]);
        v114 = vmlad_n_f64(_D2, _Q28.f64[0], v109.f64[0]);
        v115 = (float64x2_t)vzip1q_s64(*v27, (int64x2_t)v87);
        _Q25 = (float64x2_t)vzip2q_s64(*v27, (int64x2_t)v87);
        _Q3.f64[1] = v86;
        _Q31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, _Q8.f64[0]), _Q25, _Q8, 1), _Q3, _Q18.f64[0]);
        _D16 = _Q8.f64[1];
        __asm { FMLA            D6, D16, V5.D[1] }
        v120 = _D6 + _Q28.f64[0] * _Q18.f64[0];
        _Q8.f64[0] = _Q9.f64[1];
        __asm { FMLA            D16, D8, V5.D[1] }
        _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, _Q9.f64[0]), _Q25, _Q9, 1), _Q3, _Q22.f64[0]);
        v123 = _D16 + _Q28.f64[0] * _Q22.f64[0];
        _Q22.f64[0] = *(float64_t *)(a1 + 760);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v113.f64[0]), _Q25, v113, 1), _Q3, v114);
        _Q25.f64[0] = v113.f64[1];
        v70 = v95;
        v34 = v193;
        __asm { FMLA            D3, D25, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _Q28.f64[0] * v114;
        v125 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q31.f64[0]), (float64x2_t)xmmword_2082339F0, _Q31, 1);
        __asm { FMLA            D28, D22, V31.D[1] }
        v126 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q18.f64[0]), (float64x2_t)xmmword_2082339F0, _Q18, 1);
        __asm
        {
          FMLA            D9, D22, V18.D[1]
          FMLA            D18, D22, V17.D[1]
        }
        *(_QWORD *)&_Q25.f64[0] = v207.i64[0];
        *(_QWORD *)&_Q25.f64[1] = v204;
        *(_QWORD *)&_Q22.f64[0] = v209.i64[0];
        *(_QWORD *)&_Q22.f64[1] = v205;
        v127 = vmlaq_n_f64(v125, (float64x2_t)0, v120);
        v128 = vmlaq_n_f64(v126, (float64x2_t)0, v123);
        v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q17.f64[0]), (float64x2_t)xmmword_2082339F0, _Q17, 1), (float64x2_t)0, _Q3.f64[0]);
        v130 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v127.f64[0]), _Q25, v127, 1);
        v131 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v128.f64[0]), _Q25, v128, 1);
        v80 = v103;
        v83.f64[0] = v218.f64[0];
        v132 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v129.f64[0]), _Q25, v129, 1);
        v129.f64[0] = v120 + _Q28.f64[0];
        v133 = v123 + _Q9.f64[0];
        _Q9.f64[0] = v94;
        v72 = v194;
        _Q3.f64[0] = _Q3.f64[0] + _Q18.f64[0];
        v134.f64[0] = v208;
        v134.f64[1] = v206;
        v58 = v191;
        v66 = v192;
        *(float64x2_t *)a5 = vmlaq_n_f64(v130, v134, v129.f64[0]);
        *(float64x2_t *)(a5 + 16) = vmlaq_n_f64(v131, v134, v133);
        v78 = v203;
        *(float64x2_t *)(a5 + 32) = vmlaq_n_f64(v132, v134, _Q3.f64[0]);
        v75 = v196;
      }
      if (a6)
      {
        v135.f64[0] = 0.0;
        v135.f64[1] = v225;
        *(_QWORD *)&_Q21.f64[1] = v58;
        v136 = (int64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
        *(_QWORD *)&v42.f64[1] = v136.i64[0];
        v137 = vaddq_f64(v42, _Q21);
        v138 = vaddq_f64(v32, v54);
        *(_QWORD *)&v65.f64[1] = v66;
        *(_QWORD *)&v68.f64[1] = v69;
        v136.i64[0] = *(_QWORD *)(a1 + 696);
        v139 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v74.i64), v68, v75);
        _Q21.f64[0] = _Q9.f64[0] * *(double *)v74.i64 + v70 * v75;
        *(_QWORD *)&_Q18.f64[1] = v78.i64[1];
        v141 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v77.i64), v68, *(double *)v78.i64);
        v142 = _Q9.f64[0] * *(double *)v77.i64 + v70 * *(double *)v78.i64;
        v143 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v79.i64), v68, v80);
        v78.i64[0] = *(_QWORD *)(a1 + 720);
        v144 = *(float64x2_t *)(a1 + 704);
        v145 = _Q9.f64[0] * *(double *)v79.i64 + v70 * v80;
        _Q18.f64[0] = *(float64_t *)(a1 + 744);
        *(_QWORD *)&v146.f64[0] = v82.i64[0];
        _Q20 = *(float64x2_t *)(a1 + 728);
        *(_QWORD *)&v71.f64[1] = v72;
        v148 = (float64x2_t)vzip1q_s64(*v27, (int64x2_t)v144);
        v149 = vmlaq_n_f64(v139, v71, v34.f64[0]);
        _Q21.f64[0] = _Q21.f64[0] + v73 * v34.f64[0];
        v150 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)v136, 8uLL);
        v151 = vmlaq_n_f64(v141, v71, v76);
        v68.f64[0] = v142 + v73 * v76;
        v152 = vmlaq_n_f64(v143, v71, v197);
        v153 = (float64x2_t)vzip2q_s64(*v27, (int64x2_t)v144);
        v34.f64[0] = v145 + v73 * v197;
        *(_QWORD *)&v83.f64[1] = v195;
        _Q28 = vaddq_f64(v152, v83);
        _D29 = *(_QWORD *)(a1 + 688);
        __asm { FMLA            D22, D29, V28.D[1] }
        _D30 = *(_QWORD *)(a1 + 712);
        __asm { FMLA            D29, D30, V28.D[1] }
        _D9 = *(_QWORD *)(a1 + 736);
        __asm { FMLA            D30, D9, V28.D[1] }
        v161 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v78, 8uLL);
        v162 = vmulq_f64(v138, v150);
        v163 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v153, v138.f64[0]), (float64x2_t)vzip1q_s64(v136, v78), v137, 1);
        v164 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v137, _Q18.f64[0]), v138, _Q20);
        v165 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v161, v137.f64[0]), v148, v138.f64[0], 0);
        *(_QWORD *)&v81.f64[1] = v199;
        *(_QWORD *)&v146.f64[1] = v202;
        v166 = (int64x2_t)vaddq_f64(v149, v81);
        v167 = (int64x2_t)vaddq_f64(v151, v146);
        v168 = (float64x2_t)vzip1q_s64(v166, v167);
        v169 = (float64x2_t)vzip2q_s64(v166, v167);
        v170 = vmlaq_laneq_f64(vmulq_n_f64(v168, *(double *)v27->i64), v169, *(float64x2_t *)v27, 1);
        v171 = vmlaq_laneq_f64(vmulq_n_f64(v168, v144.f64[0]), v169, v144, 1);
        v172 = vmlaq_laneq_f64(vmulq_n_f64(v168, _Q20.f64[0]), v169, _Q20, 1);
        v173 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v137, 1), v137, _Q20, 1);
        v174 = vmlsq_lane_f64(vmulq_laneq_f64(v148, v137, 1), v153, v137.f64[0], 0);
        v175 = (int64x2_t)vmlsq_laneq_f64(v162, _Q18, v137, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v34, v200);
        v176 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v198), (int64x2_t)vaddq_f64(v68, v201));
        _Q4 = vmlaq_n_f64(v170, v176, *(double *)v136.i64);
        v178 = vmlad_n_f64(_D22, *(double *)v136.i64, _Q20.f64[0]);
        _Q5 = v224;
        v180 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v225);
        _Q7 = vmlaq_n_f64(v171, v176, *(double *)v78.i64);
        v182 = vmlad_n_f64(_D29, *(double *)v78.i64, _Q20.f64[0]);
        v183 = vnegq_f64((float64x2_t)v224);
        _Q6 = vmlaq_n_f64(v172, v176, _Q18.f64[0]);
        v185 = vmlad_n_f64(_D30, _Q18.f64[0], _Q20.f64[0]);
        v186 = vmlaq_laneq_f64(vmulq_n_f64(v135, _Q4.f64[0]), (float64x2_t)v180, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v187 = vmlaq_laneq_f64(vmulq_n_f64(v135, _Q7.f64[0]), (float64x2_t)v180, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v188 = vmlaq_laneq_f64(vmulq_n_f64(v135, _Q6.f64[0]), (float64x2_t)v180, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v190 = (float64x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v183, 8uLL);
        _Q7.f64[0] = _Q18.f64[0] + v178 * 0.0;
        v183.f64[0] = _Q20.f64[0] + v182 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v163, v165), vmlaq_n_f64(v186, v190, v178));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v174, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v163, v165), vmlaq_n_f64(v187, v190, v182));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v174, 1), v183);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v175, v164), vmlaq_n_f64(v188, v190, v185));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v173, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + v185 * 0.0));
      }
    }
  }
  return result;
}

uint64_t sub_208116DF0(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  _OWORD v32[4];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  _QWORD v41[63];
  std::__shared_weak_count *v42;
  __n128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;

  v2 = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = (*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v2 == 64;
    v2 += 8;
  }
  while (!v4);
  if (!v3)
    return 0;
  v5 = 72;
  do
  {
    v6 = (*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v5 == 136;
    v5 += 8;
  }
  while (!v4);
  if (!v6
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v7 = 168;
  do
  {
    v8 = (*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v7 == 272;
    v7 += 8;
  }
  while (!v4);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 664);
  if (!v9 || !sub_208110298(v9))
    return 0;
  v10 = *(_OWORD *)(a1 + 48);
  v32[2] = *(_OWORD *)(a1 + 32);
  v32[3] = v10;
  v11 = *(_OWORD *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v11;
  v12 = *(_OWORD *)(a1 + 72);
  v35 = *(_OWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 104);
  v37 = v13;
  v33 = *(_QWORD *)(a1 + 64);
  v38 = *(_QWORD *)(a1 + 136);
  v34 = v12;
  v40 = *(_BYTE *)(a1 + 160);
  v39 = *(_OWORD *)(a1 + 144);
  memcpy(v41, (const void *)(a1 + 168), 0x1E9uLL);
  v41[62] = *(_QWORD *)(a1 + 664);
  v19 = *(std::__shared_weak_count **)(a1 + 672);
  v42 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = *(_OWORD *)(a1 + 728);
  v45 = *(_OWORD *)(a1 + 712);
  v46 = v22;
  v23 = *(__n128 *)(a1 + 696);
  v43 = *(__n128 *)(a1 + 680);
  v44 = v23;
  v47 = *(_QWORD *)(a1 + 744);
  v48 = *(_OWORD *)(a1 + 752);
  v50 = 11;
  v51 = 0x7FF8000000000000;
  v52 = 0xFFEFFFFFFFFFFFFFLL;
  v23.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v53 = xmmword_2082339B0;
  v23.n128_u64[0] = 0.5;
  v24 = sub_20811851C((uint64_t)v32, 0, 0, v23, v43, v14, v15, v16, v17, v18);
  if (v50 != -1)
  {
    if (v50 > 7)
    {
      if (v50 > 0xB)
      {
        if (v50 < 0xF)
          return v24;
        v25 = v49;
        if (!v49)
          return v24;
        v30 = (unint64_t *)&v49->__shared_owners_;
        do
          v27 = __ldaxr(v30);
        while (__stlxr(v27 - 1, v30));
      }
      else if (v50 > 9)
      {
        if (v50 == 10)
          return v24;
        v25 = v42;
        if (!v42)
          return v24;
        v31 = (unint64_t *)&v42->__shared_owners_;
        do
          v27 = __ldaxr(v31);
        while (__stlxr(v27 - 1, v31));
      }
      else
      {
        if (v50 != 9)
          return v24;
        v25 = (std::__shared_weak_count *)v41[42];
        if (!v41[42])
          return v24;
        v29 = (unint64_t *)(v41[42] + 8);
        do
          v27 = __ldaxr(v29);
        while (__stlxr(v27 - 1, v29));
      }
    }
    else
    {
      if (v50 != 7)
        return v24;
      v25 = (std::__shared_weak_count *)v41[39];
      if (!v41[39])
        return v24;
      v26 = (unint64_t *)(v41[39] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
    }
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v24;
}

void sub_208117110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D32A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208117124(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, unint64_t a5, uint64_t a6)
{
  _BOOL4 v11;
  double *v12;
  double v13;
  uint64_t result;
  double v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v25;
  double v26;
  int64x2_t *v27;
  float64x2_t v29;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v36;
  int64x2_t v37;
  double v38;
  float64x2_t v40;
  float64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unint64_t v46;
  float64_t v47;
  float64_t v49;
  float64x2_t v50;
  float64x2_t v54;
  float64x2_t v56;
  double v57;
  unint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  unint64_t v66;
  float64x2_t v68;
  unint64_t v69;
  double v70;
  float64x2_t v71;
  unint64_t v72;
  double v73;
  int8x16_t v74;
  double v75;
  double v76;
  int8x16_t v77;
  int64x2_t v78;
  int8x16_t v79;
  double v80;
  float64x2_t v81;
  int8x16_t v82;
  float64x2_t v83;
  unint64_t v84;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v91;
  float64x2_t v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v102;
  double v103;
  int64x2_t v104;
  int64x2_t v105;
  float64x2_t v106;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  double v114;
  float64x2_t v115;
  double v120;
  double v123;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  int64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v141;
  float64_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64_t v145;
  float64x2_t v146;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v161;
  float64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  int64x2_t v175;
  float64x2_t v176;
  double v178;
  unint64_t v180;
  double v182;
  float64x2_t v183;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v190;
  unint64_t v191;
  unint64_t v192;
  float64x2_t v193;
  unint64_t v194;
  unint64_t v195;
  double v196;
  double v197;
  float64x2_t v198;
  unint64_t v199;
  float64x2_t v200;
  float64x2_t v201;
  unint64_t v202;
  int64x2_t v203;
  unint64_t v204;
  unint64_t v205;
  float64_t v206;
  int8x16_t v207;
  float64_t v208;
  int8x16_t v209;
  float64x2_t v210;
  float64_t v211;
  int8x16_t v212;
  double v213;
  int8x16_t v214;
  double v215;
  int8x16_t v216;
  double v217;
  float64x2_t v218;
  unint64_t v219;
  int8x16_t v220;
  double v221;
  int8x16_t v222;
  double v223;
  int64x2_t v224;
  double v225;
  int64x2_t v226;
  double v227;
  float64x2_t v228;
  uint64_t v229;
  float64x2_t v230;
  int8x16_t v231;
  _BYTE v232[32];
  int8x16_t v233;
  double v234;
  float64x2_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  v235 = vsubq_f64(*a3, *(float64x2_t *)(a1 + 976));
  v11 = a5 != 0;
  v12 = (double *)(a1 + 168);
  v13 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  result = sub_2081122E4((uint64_t)&v222, (uint64_t)&v235, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v13);
  if (!v11)
  {
    if (!(_DWORD)result)
      return result;
    *(double *)v209.i64 = v15;
    v205 = *(_QWORD *)&v15;
    *(double *)v207.i64 = v15;
    v204 = *(_QWORD *)&v15;
    v208 = v15;
    v206 = v15;
    v26 = v223;
    if (v223 >= 0.0)
      goto LABEL_6;
    return 0;
  }
  if (!(_DWORD)result)
    return result;
  if (!sub_208111C2C(&v230, (uint64_t)&v231, &v228, (uint64_t)&v222, v12, v13))
    return 0;
  *(double *)v16.i64 = v223;
  v17.i64[0] = *(_QWORD *)v232;
  _Q3 = v231;
  v233 = v222;
  v234 = v223;
  v229 = 0;
  _Q5.f64[0] = v223;
  *(_QWORD *)&_Q5.f64[1] = v222.i64[0];
  _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)(v232 + 16), _Q5), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v232 + 16), *(int64x2_t *)v232), (float64x2_t)vextq_s8(v222, v16, 8uLL)).f64[1];
  __asm { FMLA            D6, D5, V3.D[1] }
  if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)v232, (float64x2_t)v222), 1), *(float64x2_t *)&v232[16], (float64x2_t)v222).f64[0], *(double *)v232)) < 0.00000001)return 0;
  v25.i64[0] = vextq_s8(v231, v231, 8uLL).u64[0];
  _Q3.i64[1] = vextq_s8(*(int8x16_t *)v232, *(int8x16_t *)v232, 8uLL).u64[0];
  v25.i64[1] = *(_QWORD *)&v232[16];
  v17.i64[1] = vextq_s8(*(int8x16_t *)&v232[16], *(int8x16_t *)&v232[16], 8uLL).u64[0];
  v211 = *(double *)v222.i64;
  v210 = (float64x2_t)_Q3;
  *(_QWORD *)&v213 = vextq_s8(v222, v222, 8uLL).u64[0];
  v212 = v25;
  v215 = v223;
  v214 = v17;
  sub_207CC48B4((uint64_t)&v224);
  v206 = v227;
  v207 = (int8x16_t)vzip2q_s64(v224, v226);
  v208 = v225;
  v209 = (int8x16_t)vzip1q_s64(v224, v226);
  v204 = vextq_s8(v207, v207, 8uLL).u64[0];
  v205 = vextq_s8(v209, v209, 8uLL).u64[0];
  v26 = v223;
  if (v223 < 0.0)
    return 0;
LABEL_6:
  v27 = (int64x2_t *)(a1 + 904);
  v222 = (int8x16_t)vaddq_f64((float64x2_t)v222, vmulq_n_f64(*(float64x2_t *)(a1 + 976), v26));
  _D3 = *(_QWORD *)(a1 + 944);
  v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), *(double *)v222.i64), *(float64x2_t *)(a1 + 928), (float64x2_t)v222, 1), *(float64x2_t *)(a1 + 952), v223);
  __asm { FMLA            D1, D3, V0.D[1] }
  v225 = _D1 + *(double *)(a1 + 968) * v223;
  v224 = (int64x2_t)v29;
  if (a5 | a6)
    v31 = &v210;
  else
    v31 = 0;
  sub_20810EFB4(*(_QWORD *)(a1 + 888), COERCE_FLOAT64_T(&v224), (uint64_t)v31, (uint64_t)&v231);
  result = v233.i8[0] != 0;
  if (v233.i8[0])
  {
    _Q3.f64[0] = *(float64_t *)(a1 + 920);
    v36 = *(double *)(a1 + 944);
    v37 = *(int64x2_t *)(a1 + 928);
    v38 = *(double *)(a1 + 968);
    _Q5 = *(_OWORD *)(a1 + 952);
    v40 = (float64x2_t)vzip1q_s64(*v27, v37);
    v41 = _Q3.f64[0];
    _Q7.f64[1] = v36;
    v32.f64[0] = *(float64_t *)v232;
    v42 = (float64x2_t)v231;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, *(double *)v231.i64), (float64x2_t)vzip2q_s64(*v27, v37), (float64x2_t)v231, 1), _Q7, *(double *)v232);
    *(_QWORD *)&_Q7.f64[0] = v231.i64[1];
    __asm { FMLA            D4, D7, V5.D[1] }
    _Q7.f64[0] = _D4 + v38 * *(double *)v232;
    v46 = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
    if (a4)
    {
      a4[1].f64[0] = _Q7.f64[0];
      v47 = v43.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v46;
      *a4 = _Q3;
      _Q3.f64[0] = *(float64_t *)(a1 + 920);
      v36 = *(double *)(a1 + 944);
      v40 = (float64x2_t)vzip1q_s64(*v27, *(int64x2_t *)(a1 + 928));
      _D20 = *(_QWORD *)(a1 + 960);
      v49 = *(double *)(a1 + 936);
      v50.f64[0] = *(float64_t *)(a1 + 912);
      v38 = *(double *)(a1 + 968);
    }
    else
    {
      _D20 = *(_QWORD *)(a1 + 960);
      v49 = *(double *)(a1 + 936);
      v50.f64[0] = *(float64_t *)(a1 + 912);
    }
    v33.f64[0] = *(float64_t *)&v232[24];
    _Q26 = *(float64x2_t *)&v232[8];
    _Q16 = vmulq_f64(_Q26, _Q26);
    _D19 = *(_QWORD *)&v232[16];
    __asm { FMLA            D16, D19, V26.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(_Q16.f64[0] + v33.f64[0] * v33.f64[0]);
    v54 = vmulq_f64(v33, _Q16);
    _Q21 = vmulq_n_f64(*(float64x2_t *)&v232[8], _Q16.f64[0]);
    _Q3.f64[1] = v36;
    *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    v50.f64[1] = v49;
    v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, _Q21.f64[0]), v50, _Q21, 1), _Q3, v54.f64[0]);
    __asm { FMLA            D3, D20, V21.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v38, v54.f64[0]);
    *(_QWORD *)&v43.f64[1] = v46;
    *(float64x2_t *)a2 = vaddq_f64(v43, v56);
    *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(_Q7, _Q3);
    if (a5 | a6)
    {
      v57 = *(double *)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).i64;
      v58 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
      v59.f64[0] = _Q21.f64[0];
      *(_QWORD *)&v59.f64[1] = v58;
      v60.f64[0] = _Q16.f64[0];
      v60.f64[1] = _Q16.f64[0];
      v61 = vmulq_f64(v60, v59);
      v62 = vmulq_f64(_Q16, v54);
      v63 = v33.f64[0] * _Q16.f64[0];
      _Q7.f64[0] = _Q21.f64[0] * v62.f64[0];
      v33.f64[0] = v57 * _Q16.f64[0] * v62.f64[0];
      v62.f64[0] = v63 * v62.f64[0];
      v64.f64[0] = 0.0;
      v64.f64[1] = _Q16.f64[0];
      v65 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v61, _Q21.f64[0], 0);
      v66 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
      _Q9 = vsubq_f64((float64x2_t)0, _Q7);
      v68 = vmlsq_lane_f64(v64, v61, v57 * _Q16.f64[0], 0);
      v69 = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
      *(_QWORD *)&v70 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v33);
      v71 = vmlsq_lane_f64((float64x2_t)0, v61, v63, 0);
      v72 = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
      *(_QWORD *)&v73 = *(_OWORD *)&vsubq_f64(_Q16, v62);
      v34.f64[0] = v213;
      v74 = v212;
      *(_QWORD *)&v75 = vextq_s8(v74, v74, 8uLL).u64[0];
      v76 = v217;
      v77 = v216;
      v78 = (int64x2_t)vextq_s8(v77, v77, 8uLL);
      v197 = v221;
      v79 = v220;
      *(_QWORD *)&v80 = vextq_s8(v79, v79, 8uLL).u64[0];
      v198 = (float64x2_t)*(unint64_t *)&v211;
      v81 = v210;
      v201 = (float64x2_t)*(unint64_t *)&v215;
      v82 = v214;
      v199 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
      v200 = (float64x2_t)v219;
      v83 = v218;
      v84 = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
      v202 = vextq_s8(v82, v82, 8uLL).u64[0];
      v195 = v84;
      if (a5)
      {
        _Q3.f64[0] = *(float64_t *)(a1 + 920);
        v86 = *(double *)(a1 + 944);
        v191 = v58;
        v192 = v66;
        v87 = *(float64x2_t *)(a1 + 928);
        v203 = v78;
        v88.f64[0] = v65.f64[0];
        *(_QWORD *)&v88.f64[1] = v66;
        _Q5 = *(float64x2_t *)(a1 + 952);
        _Q18.f64[0] = v68.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v69;
        v91 = vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v212.i64), _Q18, v75);
        v196 = v75;
        _Q22.f64[0] = v71.f64[0];
        *(_QWORD *)&_Q22.f64[1] = v72;
        v93 = vmlaq_n_f64(v91, _Q22, v213);
        v193 = v34;
        v194 = v72;
        v94 = _Q9.f64[0];
        _Q9.f64[0] = _Q9.f64[0] * *(double *)v212.i64 + v70 * v196 + v73 * v213;
        v95 = v70;
        v96 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v216.i64), _Q18, *(double *)v203.i64), _Q22, v217);
        v97 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v88, *(double *)v220.i64), _Q18, v80), _Q22, v221);
        _Q18.f64[0] = v218.f64[0];
        *(_QWORD *)&_Q18.f64[1] = v84;
        _Q17 = vaddq_f64(v97, _Q18);
        _Q22.f64[0] = *(float64_t *)(a1 + 912);
        __asm { FMLA            D18, D22, V17.D[1] }
        _D2 = *(_QWORD *)(a1 + 936);
        __asm { FMLA            D22, D2, V17.D[1] }
        _D28 = *(_QWORD *)(a1 + 960);
        __asm { FMLA            D2, D28, V17.D[1] }
        _Q17.f64[0] = v94 * *(double *)v216.i64 + v95 * *(double *)v203.i64 + v73 * v217;
        v102.f64[0] = v210.f64[0];
        v103 = v80;
        *(_QWORD *)&v102.f64[1] = v199;
        v104 = (int64x2_t)vaddq_f64(v93, v102);
        *(_QWORD *)&v93.f64[0] = v214.i64[0];
        *(_QWORD *)&v93.f64[1] = v202;
        v105 = (int64x2_t)vaddq_f64(v96, v93);
        v106 = (float64x2_t)vzip1q_s64(v104, v105);
        _Q28 = (float64x2_t)vzip2q_s64(v104, v105);
        v108 = vmlaq_laneq_f64(vmulq_n_f64(v106, *(double *)v27->i64), _Q28, *(float64x2_t *)v27, 1);
        v109 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q9, (float64x2_t)*(unint64_t *)&v211), (int64x2_t)vaddq_f64(_Q17, (float64x2_t)*(unint64_t *)&v215));
        v110 = vmlaq_laneq_f64(vmulq_n_f64(v106, v87.f64[0]), _Q28, v87, 1);
        v111 = vmlaq_laneq_f64(vmulq_n_f64(v106, _Q5.f64[0]), _Q28, _Q5, 1);
        _Q28.f64[0] = *(float64_t *)(a1 + 968);
        _Q8 = vmlaq_n_f64(v108, v109, _Q3.f64[0]);
        _Q9 = vmlaq_n_f64(v110, v109, v86);
        v113 = vmlaq_n_f64(v111, v109, _Q28.f64[0]);
        v109.f64[0] = v94 * *(double *)v220.i64 + v95 * v80 + v73 * v221;
        *(_QWORD *)&v109.f64[0] = *(_OWORD *)&vaddq_f64(v109, (float64x2_t)v219);
        _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q3.f64[0], v109.f64[0]);
        _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v86, v109.f64[0]);
        v114 = vmlad_n_f64(_D2, _Q28.f64[0], v109.f64[0]);
        v115 = (float64x2_t)vzip1q_s64(*v27, (int64x2_t)v87);
        _Q25 = (float64x2_t)vzip2q_s64(*v27, (int64x2_t)v87);
        _Q3.f64[1] = v86;
        _Q31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, _Q8.f64[0]), _Q25, _Q8, 1), _Q3, _Q18.f64[0]);
        _D16 = _Q8.f64[1];
        __asm { FMLA            D6, D16, V5.D[1] }
        v120 = _D6 + _Q28.f64[0] * _Q18.f64[0];
        _Q8.f64[0] = _Q9.f64[1];
        __asm { FMLA            D16, D8, V5.D[1] }
        _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, _Q9.f64[0]), _Q25, _Q9, 1), _Q3, _Q22.f64[0]);
        v123 = _D16 + _Q28.f64[0] * _Q22.f64[0];
        _Q22.f64[0] = *(float64_t *)(a1 + 984);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v113.f64[0]), _Q25, v113, 1), _Q3, v114);
        _Q25.f64[0] = v113.f64[1];
        v70 = v95;
        v34 = v193;
        __asm { FMLA            D3, D25, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _Q28.f64[0] * v114;
        v125 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q31.f64[0]), (float64x2_t)xmmword_2082339F0, _Q31, 1);
        __asm { FMLA            D28, D22, V31.D[1] }
        v126 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q18.f64[0]), (float64x2_t)xmmword_2082339F0, _Q18, 1);
        __asm
        {
          FMLA            D9, D22, V18.D[1]
          FMLA            D18, D22, V17.D[1]
        }
        *(_QWORD *)&_Q25.f64[0] = v207.i64[0];
        *(_QWORD *)&_Q25.f64[1] = v204;
        *(_QWORD *)&_Q22.f64[0] = v209.i64[0];
        *(_QWORD *)&_Q22.f64[1] = v205;
        v127 = vmlaq_n_f64(v125, (float64x2_t)0, v120);
        v128 = vmlaq_n_f64(v126, (float64x2_t)0, v123);
        v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_20822E370, _Q17.f64[0]), (float64x2_t)xmmword_2082339F0, _Q17, 1), (float64x2_t)0, _Q3.f64[0]);
        v130 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v127.f64[0]), _Q25, v127, 1);
        v131 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v128.f64[0]), _Q25, v128, 1);
        v80 = v103;
        v83.f64[0] = v218.f64[0];
        v132 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v129.f64[0]), _Q25, v129, 1);
        v129.f64[0] = v120 + _Q28.f64[0];
        v133 = v123 + _Q9.f64[0];
        _Q9.f64[0] = v94;
        v72 = v194;
        _Q3.f64[0] = _Q3.f64[0] + _Q18.f64[0];
        v134.f64[0] = v208;
        v134.f64[1] = v206;
        v58 = v191;
        v66 = v192;
        *(float64x2_t *)a5 = vmlaq_n_f64(v130, v134, v129.f64[0]);
        *(float64x2_t *)(a5 + 16) = vmlaq_n_f64(v131, v134, v133);
        v78 = v203;
        *(float64x2_t *)(a5 + 32) = vmlaq_n_f64(v132, v134, _Q3.f64[0]);
        v75 = v196;
      }
      if (a6)
      {
        v135.f64[0] = 0.0;
        v135.f64[1] = v225;
        *(_QWORD *)&_Q21.f64[1] = v58;
        v136 = (int64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
        *(_QWORD *)&v42.f64[1] = v136.i64[0];
        v137 = vaddq_f64(v42, _Q21);
        v138 = vaddq_f64(v32, v54);
        *(_QWORD *)&v65.f64[1] = v66;
        *(_QWORD *)&v68.f64[1] = v69;
        v136.i64[0] = *(_QWORD *)(a1 + 920);
        v139 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v74.i64), v68, v75);
        _Q21.f64[0] = _Q9.f64[0] * *(double *)v74.i64 + v70 * v75;
        *(_QWORD *)&_Q18.f64[1] = v78.i64[1];
        v141 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v77.i64), v68, *(double *)v78.i64);
        v142 = _Q9.f64[0] * *(double *)v77.i64 + v70 * *(double *)v78.i64;
        v143 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v79.i64), v68, v80);
        v78.i64[0] = *(_QWORD *)(a1 + 944);
        v144 = *(float64x2_t *)(a1 + 928);
        v145 = _Q9.f64[0] * *(double *)v79.i64 + v70 * v80;
        _Q18.f64[0] = *(float64_t *)(a1 + 968);
        *(_QWORD *)&v146.f64[0] = v82.i64[0];
        _Q20 = *(float64x2_t *)(a1 + 952);
        *(_QWORD *)&v71.f64[1] = v72;
        v148 = (float64x2_t)vzip1q_s64(*v27, (int64x2_t)v144);
        v149 = vmlaq_n_f64(v139, v71, v34.f64[0]);
        _Q21.f64[0] = _Q21.f64[0] + v73 * v34.f64[0];
        v150 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)v136, 8uLL);
        v151 = vmlaq_n_f64(v141, v71, v76);
        v68.f64[0] = v142 + v73 * v76;
        v152 = vmlaq_n_f64(v143, v71, v197);
        v153 = (float64x2_t)vzip2q_s64(*v27, (int64x2_t)v144);
        v34.f64[0] = v145 + v73 * v197;
        *(_QWORD *)&v83.f64[1] = v195;
        _Q28 = vaddq_f64(v152, v83);
        _D29 = *(_QWORD *)(a1 + 912);
        __asm { FMLA            D22, D29, V28.D[1] }
        _D30 = *(_QWORD *)(a1 + 936);
        __asm { FMLA            D29, D30, V28.D[1] }
        _D9 = *(_QWORD *)(a1 + 960);
        __asm { FMLA            D30, D9, V28.D[1] }
        v161 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v78, 8uLL);
        v162 = vmulq_f64(v138, v150);
        v163 = (int64x2_t)vmlsq_laneq_f64(vmulq_n_f64(v153, v138.f64[0]), (float64x2_t)vzip1q_s64(v136, v78), v137, 1);
        v164 = (int64x2_t)vmlsq_f64(vmulq_n_f64(v137, _Q18.f64[0]), v138, _Q20);
        v165 = (int64x2_t)vmlsq_lane_f64(vmulq_n_f64(v161, v137.f64[0]), v148, v138.f64[0], 0);
        *(_QWORD *)&v81.f64[1] = v199;
        *(_QWORD *)&v146.f64[1] = v202;
        v166 = (int64x2_t)vaddq_f64(v149, v81);
        v167 = (int64x2_t)vaddq_f64(v151, v146);
        v168 = (float64x2_t)vzip1q_s64(v166, v167);
        v169 = (float64x2_t)vzip2q_s64(v166, v167);
        v170 = vmlaq_laneq_f64(vmulq_n_f64(v168, *(double *)v27->i64), v169, *(float64x2_t *)v27, 1);
        v171 = vmlaq_laneq_f64(vmulq_n_f64(v168, v144.f64[0]), v169, v144, 1);
        v172 = vmlaq_laneq_f64(vmulq_n_f64(v168, _Q20.f64[0]), v169, _Q20, 1);
        v173 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v137, 1), v137, _Q20, 1);
        v174 = vmlsq_lane_f64(vmulq_laneq_f64(v148, v137, 1), v153, v137.f64[0], 0);
        v175 = (int64x2_t)vmlsq_laneq_f64(v162, _Q18, v137, 1);
        *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v34, v200);
        v176 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q21, v198), (int64x2_t)vaddq_f64(v68, v201));
        _Q4 = vmlaq_n_f64(v170, v176, *(double *)v136.i64);
        v178 = vmlad_n_f64(_D22, *(double *)v136.i64, _Q20.f64[0]);
        _Q5 = v224;
        v180 = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v225);
        _Q7 = vmlaq_n_f64(v171, v176, *(double *)v78.i64);
        v182 = vmlad_n_f64(_D29, *(double *)v78.i64, _Q20.f64[0]);
        v183 = vnegq_f64((float64x2_t)v224);
        _Q6 = vmlaq_n_f64(v172, v176, _Q18.f64[0]);
        v185 = vmlad_n_f64(_D30, _Q18.f64[0], _Q20.f64[0]);
        v186 = vmlaq_laneq_f64(vmulq_n_f64(v135, _Q4.f64[0]), (float64x2_t)v180, _Q4, 1);
        __asm { FMLA            D18, D19, V4.D[1] }
        v187 = vmlaq_laneq_f64(vmulq_n_f64(v135, _Q7.f64[0]), (float64x2_t)v180, _Q7, 1);
        __asm { FMLA            D20, D19, V7.D[1] }
        v188 = vmlaq_laneq_f64(vmulq_n_f64(v135, _Q6.f64[0]), (float64x2_t)v180, _Q6, 1);
        __asm { FMLA            D3, D19, V6.D[1] }
        v190 = (float64x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v183, 8uLL);
        _Q7.f64[0] = _Q18.f64[0] + v178 * 0.0;
        v183.f64[0] = _Q20.f64[0] + v182 * 0.0;
        *(float64x2_t *)a6 = vaddq_f64((float64x2_t)vzip1q_s64(v163, v165), vmlaq_n_f64(v186, v190, v178));
        *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v174, _Q7);
        *(float64x2_t *)(a6 + 24) = vaddq_f64((float64x2_t)vzip2q_s64(v163, v165), vmlaq_n_f64(v187, v190, v182));
        *(_QWORD *)(a6 + 40) = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v174, 1), v183);
        *(float64x2_t *)(a6 + 48) = vaddq_f64((float64x2_t)vzip1q_s64(v175, v164), vmlaq_n_f64(v188, v190, v185));
        *(_QWORD *)(a6 + 64) = *(_OWORD *)&vaddq_f64(v173, (float64x2_t)COERCE_UNSIGNED_INT64(_D3 + v185 * 0.0));
      }
    }
  }
  return result;
}

uint64_t sub_208117AA0(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  _OWORD v32[4];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  _QWORD v41[91];
  std::__shared_weak_count *v42;
  __n128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;

  v2 = 0;
  v53 = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = (*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v2 == 64;
    v2 += 8;
  }
  while (!v4);
  if (!v3)
    return 0;
  v5 = 72;
  do
  {
    v6 = (*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v5) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v5 == 136;
    v5 += 8;
  }
  while (!v4);
  if (!v6
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v7 = 168;
  do
  {
    v8 = (*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v7) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v4 = v7 == 384;
    v7 += 8;
  }
  while (!v4);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 888);
  if (!v9 || !sub_208110298(v9))
    return 0;
  v10 = *(_OWORD *)(a1 + 48);
  v32[2] = *(_OWORD *)(a1 + 32);
  v32[3] = v10;
  v11 = *(_OWORD *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v11;
  v12 = *(_OWORD *)(a1 + 72);
  v35 = *(_OWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 104);
  v37 = v13;
  v33 = *(_QWORD *)(a1 + 64);
  v38 = *(_QWORD *)(a1 + 136);
  v34 = v12;
  v40 = *(_BYTE *)(a1 + 160);
  v39 = *(_OWORD *)(a1 + 144);
  memcpy(v41, (const void *)(a1 + 168), 0x2C9uLL);
  v41[90] = *(_QWORD *)(a1 + 888);
  v19 = *(std::__shared_weak_count **)(a1 + 896);
  v42 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = *(_OWORD *)(a1 + 952);
  v45 = *(_OWORD *)(a1 + 936);
  v46 = v22;
  v23 = *(__n128 *)(a1 + 920);
  v43 = *(__n128 *)(a1 + 904);
  v44 = v23;
  v47 = *(_QWORD *)(a1 + 968);
  v48 = *(_OWORD *)(a1 + 976);
  v49 = 15;
  v50 = 0x7FF8000000000000;
  v51 = 0xFFEFFFFFFFFFFFFFLL;
  v23.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v52 = xmmword_2082339B0;
  v23.n128_u64[0] = 0.5;
  v24 = sub_20811851C((uint64_t)v32, 0, 0, v23, v43, v14, v15, v16, v17, v18);
  if (v49 != -1)
  {
    if (v49 > 7)
    {
      if (v49 > 0xB)
      {
        if (v49 < 0xF)
          return v24;
        v25 = v42;
        if (!v42)
          return v24;
        v30 = (unint64_t *)&v42->__shared_owners_;
        do
          v27 = __ldaxr(v30);
        while (__stlxr(v27 - 1, v30));
      }
      else if (v49 > 9)
      {
        if (v49 == 10)
          return v24;
        v25 = (std::__shared_weak_count *)v41[63];
        if (!v41[63])
          return v24;
        v31 = (unint64_t *)(v41[63] + 8);
        do
          v27 = __ldaxr(v31);
        while (__stlxr(v27 - 1, v31));
      }
      else
      {
        if (v49 != 9)
          return v24;
        v25 = (std::__shared_weak_count *)v41[42];
        if (!v41[42])
          return v24;
        v29 = (unint64_t *)(v41[42] + 8);
        do
          v27 = __ldaxr(v29);
        while (__stlxr(v27 - 1, v29));
      }
    }
    else
    {
      if (v49 != 7)
        return v24;
      v25 = (std::__shared_weak_count *)v41[39];
      if (!v41[39])
        return v24;
      v26 = (unint64_t *)(v41[39] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
    }
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v24;
}

void sub_208117DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D32A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_208117DD4(double *a1, uint64_t a2, double *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;

  if (!a5)
  {
    v11 = *a3 - a1[26];
    v12 = a3[1] - a1[27];
    v13 = sqrt(v11 * v11 + v12 * v12);
    v14 = a1[21];
    v15 = a1[22];
    v16 = v14 * 3.0;
    v17 = v15 * 4.0;
    v18 = a1[23];
    v19 = v18 * 5.0;
    v20 = v13 * (v13 * (v14 * 3.0 + v13 * (v15 * 4.0 + v18 * 5.0 * v13))) + 1.0;
    if (v20 == 0.0)
      v20 = 1.0;
    v21 = 1.0 - (v13 * (v13 * (v14 + v13 * (v15 + v18 * v13))) + 1.0 + -1.0) / v20;
    v22 = v13 * v21 * (v13 * v21 * (v16 + v13 * v21 * (v17 + v19 * (v13 * v21)))) + 1.0;
    if (v22 == 0.0)
      v22 = 1.0;
    v23 = v21 - (v21 * (v13 * v21 * (v13 * v21 * (v14 + v13 * v21 * (v15 + v18 * (v13 * v21)))) + 1.0) + -1.0) / v22;
    v24 = v13 * v23 * (v13 * v23 * (v16 + v13 * v23 * (v17 + v19 * (v13 * v23)))) + 1.0;
    if (v24 == 0.0)
      v24 = 1.0;
    v25 = v23 - (v23 * (v13 * v23 * (v13 * v23 * (v14 + v13 * v23 * (v15 + v18 * (v13 * v23)))) + 1.0) + -1.0) / v24;
    v26 = v13 * v25 * (v13 * v25 * (v16 + v13 * v25 * (v17 + v19 * (v13 * v25)))) + 1.0;
    if (v26 == 0.0)
      v26 = 1.0;
    v27 = v25 - (v25 * (v13 * v25 * (v13 * v25 * (v14 + v13 * v25 * (v15 + v18 * (v13 * v25)))) + 1.0) + -1.0) / v26;
    v28 = v13 * v27;
    v29 = v27 * (v28 * (v28 * (v14 + v28 * (v15 + v18 * v28))) + 1.0) + -1.0;
    v30 = v28 * (v28 * (v16 + v28 * (v17 + v19 * v28))) + 1.0;
    if (v30 == 0.0)
      v30 = 1.0;
    v31 = v27 - v29 / v30;
    *(double *)a2 = v11 * v31 - a1[24];
    *(double *)(a2 + 8) = v12 * v31 - a1[25];
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    if (!a4)
      goto LABEL_17;
    goto LABEL_16;
  }
  result = sub_208113B5C((double *)a2, (simd_double2 *)a5, a3, a1 + 21, a1 + 24, a1 + 26, 5);
  if (!result)
    return result;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  if (a4)
  {
LABEL_16:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
LABEL_17:
  if (a6)
  {
    *(_QWORD *)(a6 + 64) = 0;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return 1;
}

uint64_t sub_208118068(double *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  double v9;
  uint64_t result;
  double v19;

  v9 = (*a1 + a1[4]) * 0.5;
  if (!a5)
  {
    _Q1 = *(float64x2_t *)a3;
    _D3 = *(_QWORD *)(a3 + 8);
    __asm { FMLA            D2, D3, V1.D[1] }
    v19 = v9 * (v9 * _D2);
    *(float64x2_t *)a2 = vdivq_f64(*(float64x2_t *)a3, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v19* (a1[35]+ v9 * a1[42]+ v19* (a1[36]+ v9 * a1[43]+ v19* (a1[37]+ v9 * a1[44]+ v19* (a1[38]+ v9 * a1[45]+ v19* (a1[39]+ v9 * a1[46]+ v19 * (a1[40] + v9 * a1[47] + v19 * (a1[41] + v9 * a1[48] + v19 * 0.0)))))))
                                          / 100.0
                                          + 1.0),
                                          0));
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    if (!a4)
      goto LABEL_7;
LABEL_6:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_7;
  }
  result = sub_2081148A4((float64x2_t *)a2, (float64x2_t *)a5, 0, a3, a1 + 35, v9);
  if (!(_DWORD)result)
    return result;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  if (a4)
    goto LABEL_6;
LABEL_7:
  if (a6)
  {
    *(_QWORD *)(a6 + 64) = 0;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return 1;
}

uint64_t sub_2081181D8(uint64_t a1, double a2, double a3, double a4, double a5, int64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  uint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v33;
  unint64_t *p_shared_owners;
  unint64_t *v35;
  _OWORD v36[4];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int8x16_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;

  v8 = 0;
  v67 = *MEMORY[0x24BDAC8D0];
  do
  {
    v9 = (*(_QWORD *)(a1 + v8) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v8 == 64;
    v8 += 8;
  }
  while (!v10);
  if (!v9)
    return 0;
  v11 = 72;
  do
  {
    v12 = (*(_QWORD *)(a1 + v11) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v11) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v11 == 136;
    v11 += 8;
  }
  while (!v10);
  if (!v12
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v13 = 280;
  do
  {
    v14 = (*(_QWORD *)(a1 + v13) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v13) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v13 == 384;
    v13 += 8;
  }
  while (!v10);
  if (!v14)
    return 0;
  v15 = 168;
  do
  {
    v16 = (*(_QWORD *)(a1 + v15) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v15) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v10 = v15 == 272;
    v15 += 8;
  }
  while (!v10);
  if (!v16)
    return 0;
  v17 = *(_OWORD *)(a1 + 48);
  v36[2] = *(_OWORD *)(a1 + 32);
  v36[3] = v17;
  v18 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v18;
  v19 = *(_OWORD *)(a1 + 72);
  v39 = *(_OWORD *)(a1 + 88);
  v20 = *(int8x16_t *)(a1 + 120);
  v40 = *(_OWORD *)(a1 + 104);
  v41 = v20;
  v38 = v19;
  v43 = *(_OWORD *)(a1 + 144);
  v21 = *(_OWORD *)(a1 + 312);
  v53 = *(_OWORD *)(a1 + 296);
  v54 = v21;
  v22 = *(_OWORD *)(a1 + 280);
  v51 = *(_OWORD *)(a1 + 264);
  v52 = v22;
  v23 = *(_OWORD *)(a1 + 376);
  v57 = *(_OWORD *)(a1 + 360);
  v58 = v23;
  v24 = *(__n128 *)(a1 + 344);
  v55 = *(_OWORD *)(a1 + 328);
  v56 = v24;
  v25 = *(_OWORD *)(a1 + 168);
  v46 = *(_OWORD *)(a1 + 184);
  v45 = v25;
  v26 = *(_OWORD *)(a1 + 232);
  v50 = *(_OWORD *)(a1 + 248);
  v49 = v26;
  v27 = *(__n128 *)(a1 + 200);
  v48 = *(_OWORD *)(a1 + 216);
  v37 = *(_QWORD *)(a1 + 64);
  v42 = *(_QWORD *)(a1 + 136);
  v44 = *(_BYTE *)(a1 + 160);
  v47 = v27;
  v63 = 13;
  v64 = 0x7FF8000000000000;
  v65 = 0xFFEFFFFFFFFFFFFFLL;
  v24.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v66 = xmmword_2082339B0;
  v24.n128_u64[0] = 0.5;
  v28 = sub_20811851C((uint64_t)v36, 0, 0, v24, v27, v20, a5, a6, a7, a8);
  if (v63 != -1)
  {
    if (v63 > 7)
    {
      if (v63 > 0xB)
      {
        if (v63 < 0xF)
          return v28;
        v29 = v62;
        if (!v62)
          return v28;
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
      }
      else if (v63 > 9)
      {
        if (v63 == 10)
          return v28;
        v29 = v61;
        if (!v61)
          return v28;
        v35 = (unint64_t *)&v61->__shared_owners_;
        do
          v31 = __ldaxr(v35);
        while (__stlxr(v31 - 1, v35));
      }
      else
      {
        if (v63 != 9)
          return v28;
        v29 = v60;
        if (!v60)
          return v28;
        v33 = (unint64_t *)&v60->__shared_owners_;
        do
          v31 = __ldaxr(v33);
        while (__stlxr(v31 - 1, v33));
      }
    }
    else
    {
      if (v63 != 7)
        return v28;
      v29 = v59;
      if (!v59)
        return v28;
      v30 = (unint64_t *)&v59->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v28;
}

void sub_208118508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D32A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20811851C(uint64_t a1, uint64_t a2, char a3, __n128 a4, __n128 a5, int8x16_t a6, double a7, int64x2_t a8, float64x2_t a9, float64x2_t a10)
{
  double v12;
  unsigned int v14;
  double v15;
  uint64_t v16;
  float64x2_t *v17;
  int64x2_t *v18;
  unsigned int v19;
  double v20;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __double2 v26;
  unsigned int v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  char v32;
  double v33;
  double v35;
  float64x2_t v40;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  int v56;
  double v57;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  int v65;
  int v66;
  double v67;
  double v71;
  double v72;
  int v73;
  int v74;
  double v75;
  float64x2_t v78;
  const double *v80;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float64x2_t v94;
  const double *v96;
  float64x2_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  float64x2_t v105;
  double v106;
  double v108;
  double v109;
  int v110;
  double v111;
  BOOL v112;
  float64x2_t v113;
  double v114;
  double v116;
  double v117;
  int v118;
  double v119;
  int64x2_t v120;
  double v121;
  BOOL v122;
  float64x2_t v123;
  double v124;
  double v126;
  double v127;
  int v128;
  double v129;
  int64x2_t v130;
  float64x2_t v131;
  int32x4_t v132;
  double v133;
  float64x2_t v136;
  float64_t v137;
  _OWORD *v138;
  float64x2_t *v139;
  uint64_t v140;
  unsigned int v141;
  char v142;
  double v144;
  double v147;
  float64x2_t v148;
  float64x2_t *v149;
  float64x2_t *v150;
  uint64_t v151;
  char v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  float64x2_t *v158;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  int v167;
  int v168;
  double v169;
  float64x2_t v172;
  const double *v174;
  float64x2_t v176;
  double v177;
  float64x2_t v178;
  float64x2_t v181;
  const double *v183;
  float64x2_t v185;
  double v186;
  float64x2_t v187;
  uint64_t v188;
  float64x2_t *v189;
  uint64_t v190;
  uint64_t v191;
  float64x2_t *v192;
  uint64_t v193;
  float64x2_t *v194;
  _OWORD *v195;
  uint64_t v196;
  double v197;
  int8x16_t v198;
  float64x2_t v199;
  __int128 v200;
  double v204;
  int v205;
  __int128 v208;
  __int128 v209;
  int64x2_t v210;
  BOOL v211;
  float64x2_t v212;
  double v213;
  double v215;
  double v216;
  int v217;
  double v218;
  float64x2_t v219;
  double v220;
  double v221;
  double v222;
  double v223;
  float64x2_t v224;
  double v225;
  float64x2_t v229;
  float64x2_t v230;
  double v231;
  BOOL v232;
  int v233;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  int v242;
  int v243;
  double v244;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  int v253;
  int v254;
  double v255;
  double v256;
  float64x2_t v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  BOOL v264;
  float64x2_t v265;
  double v266;
  double v268;
  double v269;
  int v270;
  double v271;
  float64x2_t v272;
  BOOL v273;
  float64x2_t v274;
  double v275;
  double v277;
  double v278;
  int v279;
  double v280;
  float64x2_t v281;
  double v287;
  double v288;
  int64x2_t v289;
  double v290;
  float64x2_t v291;
  double v292;
  float64x2_t v293;
  double v294;
  double v295;
  double v296;
  unsigned int v297;
  int8x16_t v298;
  int32x4_t v299;
  double v300;
  float64_t v301;
  _OWORD *v302;
  float64x2_t *v303;
  uint64_t v304;
  uint64_t v305;
  float64x2_t *v306;
  uint64_t v307;
  unint64_t v308;
  float64x2_t *v309;
  float64x2_t v310;
  float64x2_t *v311;
  float64x2_t *v312;
  uint64_t v313;
  char v314;
  float64x2_t v315;
  uint64_t v316;
  float64x2_t *v317;
  uint64_t v318;
  float64x2_t v319;
  float64x2_t *v320;
  uint64_t v321;
  _OWORD *v322;
  uint64_t v323;
  float64x2_t *v324;
  float64_t v325;
  double v326;
  int8x16_t v327;
  float64x2_t v328;
  __int128 v329;
  double v333;
  int v334;
  __int128 v337;
  __int128 v338;
  int64x2_t v339;
  double v340;
  double v344;
  float *v346;
  float *v347;
  float64x2_t *v348;
  __n128 v349;
  __n128 v350;
  float64x2_t v351;
  float64x2_t v352;
  uint64_t v353;
  float64x2_t v354;
  double __x;
  int64x2_t v356;
  double v357;
  int64x2_t v358;
  uint64_t v359;
  float64x2_t v360;
  uint64_t v361;
  int8x16_t v362;
  int64x2_t v363;
  int64x2_t v364;
  float64x2_t v365;
  uint64_t v366;
  float64x2_t v367;
  double v368;
  __int128 v369;
  unint64_t v370;
  __int128 v371;
  uint64_t v372;
  double v373;
  double v374;
  float64x2_t v375;
  float64x2_t *v376;
  unint64_t v377;
  uint64_t v378;
  float64x2_t v379;
  uint64_t v380;
  float64x2x3_t v381;
  float64x2x3_t v382;
  float64x2x3_t v383;
  float64x2x3_t v384;

  v12 = a4.n128_f64[0];
  v380 = *MEMORY[0x24BDAC8D0];
  v14 = *(_DWORD *)(a1 + 992);
  if (v14 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_656;
    }
    v14 = *(_DWORD *)(a1 + 992);
    if (v14 <= 7)
    {
LABEL_3:
      if (!v14)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (v14 <= 7)
  {
    goto LABEL_3;
  }
  if (v14 >= 0xF)
  {
    a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
    v350 = a4;
    if (v14 != -1)
      goto LABEL_9;
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      if (!*(_DWORD *)(a1 + 992))
      {
LABEL_4:
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
        abort();
      }
      goto LABEL_9;
    }
LABEL_656:
    abort();
  }
LABEL_8:
  a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v350 = a4;
LABEL_9:
  if (a3)
  {
    v15 = *(double *)&a2;
    goto LABEL_11;
  }
  a5.n128_u64[0] = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v293.f64[0] = v350.n128_u64[0];
  v349 = a5;
  *(_QWORD *)&v293.f64[1] = a5.n128_u64[0];
  v294 = vmaxnmvq_f64(v293);
  if (v294 <= 0.0)
    return 0;
  v347 = (float *)(a1 + 204);
  v295 = -1.0;
  v296 = 0.0;
  while (1)
  {
    v297 = *(_DWORD *)(a1 + 992);
    if (v297 == -1)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v297 = *(_DWORD *)(a1 + 992);
      v298.i64[1] = v350.n128_i64[1];
      *(double *)v298.i64 = v350.n128_f64[0] + v296;
      if (v297 <= 7)
      {
LABEL_536:
        if (!v297)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
          abort();
        }
        a6.i64[0] = *(_QWORD *)(a1 + 80);
        v299 = (int32x4_t)v349;
        v379.f64[0] = *(double *)(a1 + 88)
                    + *(double *)v298.i64 * *(double *)(a1 + 72)
                    + v349.n128_f64[0] * *(double *)a6.i64;
        v300 = *(double *)(a1 + 112);
        *(double *)v298.i64 = v349.n128_f64[0] * *(double *)(a1 + 104) + v300;
LABEL_541:
        *(_QWORD *)&v379.f64[1] = v298.i64[0];
LABEL_542:
        *(_QWORD *)&v375.f64[0] = &v354;
        *(_QWORD *)&v375.f64[1] = &v379;
        v377 = 0;
        v378 = 0;
        v376 = 0;
        if (v297 <= 7)
          goto LABEL_543;
        goto LABEL_584;
      }
    }
    else
    {
      v298.i64[1] = v350.n128_i64[1];
      *(double *)v298.i64 = v350.n128_f64[0] + v296;
      if (v297 <= 7)
        goto LABEL_536;
    }
    a6.i64[0] = *(_QWORD *)(a1 + 80);
    v299 = (int32x4_t)v349;
    v379.f64[0] = *(double *)(a1 + 88)
                + *(double *)v298.i64 * *(double *)(a1 + 72)
                + v349.n128_f64[0] * *(double *)a6.i64;
    v300 = *(double *)(a1 + 112);
    *(double *)v298.i64 = v349.n128_f64[0] * *(double *)(a1 + 104) + v300;
    if (v297 < 0xE)
      goto LABEL_541;
    v379.f64[1] = v349.n128_f64[0] * *(double *)(a1 + 104) + v300;
    if (v297 == 14)
      goto LABEL_542;
    v305 = (uint64_t)&v354;
    v306 = &v379;
    *(_QWORD *)&v375.f64[0] = &v354;
    *(_QWORD *)&v375.f64[1] = &v379;
    v377 = 0;
    v378 = 0;
    v376 = 0;
    if (v297 != -1)
    {
      v307 = 0;
      v308 = 0;
      v309 = 0;
LABEL_611:
      v314 = sub_208117124(a1, v305, v306, v309, v308, v307);
LABEL_625:
      if ((v314 & 1) == 0)
        goto LABEL_647;
      goto LABEL_626;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v297 = *(_DWORD *)(a1 + 992);
    if (v297 <= 7)
    {
LABEL_543:
      if (v297 > 3)
      {
        v310 = v375;
        v311 = v376;
        v312 = (float64x2_t *)v377;
        v313 = v378;
        if (v297 > 5)
        {
          if (v297 == 6)
            v314 = sub_208117DD4((double *)a1, *(uint64_t *)&v375.f64[0], *(double **)&v375.f64[1], v376, v377, v378);
          else
            v314 = sub_208114CF4(a1, *(uint64_t *)&v375.f64[0], *(float64x2_t **)&v375.f64[1], v376, v377, v378, *(double *)v298.i64, v300, a6, (int8x16_t)v299, *(double *)a8.i64, a9.f64[0], a10);
        }
        else if (v297 == 5)
        {
          if (v376)
          {
            v376->f64[0] = 0.0;
            v311->f64[1] = 0.0;
            v311[1].f64[0] = 0.0;
          }
          if (v313)
          {
            *(_QWORD *)(v313 + 64) = 0;
            *(_OWORD *)(v313 + 32) = 0u;
            *(_OWORD *)(v313 + 48) = 0u;
            *(_OWORD *)v313 = 0u;
            *(_OWORD *)(v313 + 16) = 0u;
          }
          if (v312)
            v314 = sub_208114414(*(uint64_t *)&v310.f64[0], (uint64_t)v312, *(double **)&v310.f64[1], a1 + 168, 5);
          else
            v314 = sub_208113D70(*(uint64_t *)&v310.f64[0], *(double **)&v310.f64[1], a1 + 168, 5);
        }
        else
        {
          if (v376)
          {
            v376->f64[0] = 0.0;
            v311->f64[1] = 0.0;
            v311[1].f64[0] = 0.0;
          }
          if (v313)
          {
            *(_QWORD *)(v313 + 64) = 0;
            v298 = 0uLL;
            *(_OWORD *)(v313 + 32) = 0u;
            *(_OWORD *)(v313 + 48) = 0u;
            *(_OWORD *)v313 = 0u;
            *(_OWORD *)(v313 + 16) = 0u;
          }
          if (v312)
          {
            if (!*(_BYTE *)(a1 + 468))
            {
              v298.i64[0] = sub_208113224((uint64_t)v347, (double *)(a1 + 168), 0x32uLL, v298, v300, a6, (int8x16_t)v299).u64[0];
              *(_BYTE *)(a1 + 468) = 1;
            }
            v314 = sub_207D34B98(*(uint64_t *)&v310.f64[0], *(uint64_t *)&v310.f64[1], (int64x2_t *)(a1 + 168), v347, v312, 5, *(double *)v298.i64, v300, *(double *)a6.i64, *(double *)v299.i64, *(double *)a8.i64, a9.f64[0], a10);
          }
          else
          {
            if (!*(_BYTE *)(a1 + 468))
            {
              v298.i64[0] = sub_208113224((uint64_t)v347, (double *)(a1 + 168), 0x32uLL, v298, v300, a6, (int8x16_t)v299).u64[0];
              *(_BYTE *)(a1 + 468) = 1;
            }
            v314 = sub_207D34B98(*(uint64_t *)&v310.f64[0], *(uint64_t *)&v310.f64[1], (int64x2_t *)(a1 + 168), v347, 0, 5, *(double *)v298.i64, v300, *(double *)a6.i64, *(double *)v299.i64, *(double *)a8.i64, a9.f64[0], a10);
          }
        }
      }
      else
      {
        if (v297 <= 1)
        {
          if (!v297)
          {
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
            abort();
          }
          v301 = v375.f64[0];
          v303 = v376;
          v302 = (_OWORD *)v377;
          v304 = v378;
          **(_OWORD **)&v375.f64[0] = **(_OWORD **)&v375.f64[1];
          *(_QWORD *)(*(_QWORD *)&v301 + 16) = 0x3FF0000000000000;
          if (v303)
          {
            v303->f64[0] = 0.0;
            v303->f64[1] = 0.0;
            v303[1].f64[0] = 0.0;
          }
          if (v302)
          {
            *v302 = xmmword_208233B78;
            v302[1] = unk_208233B88;
            v302[2] = xmmword_208233B98;
          }
          if (v304)
          {
            *(_QWORD *)(v304 + 64) = 0;
            *(_OWORD *)(v304 + 32) = 0u;
            *(_OWORD *)(v304 + 48) = 0u;
            *(_OWORD *)v304 = 0u;
            *(_OWORD *)(v304 + 16) = 0u;
          }
          goto LABEL_626;
        }
        if (v297 == 2)
        {
          v314 = sub_207D34740((uint64_t)&v375, a1);
        }
        else
        {
          v315 = v375;
          v317 = v376;
          v316 = v377;
          v318 = v378;
          if (v376)
          {
            v376->f64[0] = 0.0;
            v317->f64[1] = 0.0;
            v317[1].f64[0] = 0.0;
          }
          if (v318)
          {
            *(_QWORD *)(v318 + 64) = 0;
            v298.i64[0] = 0;
            *(_OWORD *)(v318 + 32) = 0u;
            *(_OWORD *)(v318 + 48) = 0u;
            *(_OWORD *)v318 = 0u;
            *(_OWORD *)(v318 + 16) = 0u;
          }
          if (v316)
            v314 = sub_2081129B0(*(double **)&v315.f64[0], v316, *(double **)&v315.f64[1], (int64x2_t *)(a1 + 168), 20, *(double *)v298.i64, v300, *(double *)a6.i64, *(double *)v299.i64, a8);
          else
            v314 = sub_208111090(*(uint64_t *)&v315.f64[0], *(double **)&v315.f64[1], (int64x2_t *)(a1 + 168), 20, *(double *)v298.i64, v300, *(double *)a6.i64, *(double *)v299.i64, a8, a9);
        }
      }
      goto LABEL_625;
    }
LABEL_584:
    if (v297 <= 0xB)
    {
      v319 = v375;
      v320 = v376;
      v308 = v377;
      v321 = v378;
      if (v297 > 9)
      {
        if (v297 == 10)
        {
          if (v376)
          {
            v376->f64[0] = 0.0;
            v320->f64[1] = 0.0;
            v320[1].f64[0] = 0.0;
          }
          if (v321)
          {
            *(_QWORD *)(v321 + 64) = 0;
            *(_OWORD *)(v321 + 32) = 0u;
            *(_OWORD *)(v321 + 48) = 0u;
            *(_OWORD *)v321 = 0u;
            *(_OWORD *)(v321 + 16) = 0u;
          }
          v326 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
          v314 = sub_2081121D8(*(uint64_t *)&v319.f64[0], *(uint64_t *)&v319.f64[1], a1 + 168, (double *)(a1 + 280), 0x14u, v326);
          if (v308)
          {
            if ((v314 & 1) == 0)
              goto LABEL_647;
            if (!sub_2081117AC(&v352, (uint64_t)&v362, &v360, *(uint64_t *)&v319.f64[0], (double *)(a1 + 168), v326))goto LABEL_647;
            v327.i64[0] = *(_QWORD *)(*(_QWORD *)&v319.f64[0] + 16);
            v328 = **(float64x2_t **)&v319.f64[0];
            *(_QWORD *)&v329 = v363.i64[0];
            _Q3 = (float64x2_t)v362;
            v365 = v328;
            v366 = v327.i64[0];
            v361 = 0;
            *(_QWORD *)&_Q5.f64[0] = v327.i64[0];
            _Q5.f64[1] = v328.f64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v364, _Q5), (float64x2_t)vzip2q_s64(v364, v363), (float64x2_t)vextq_s8(*(int8x16_t *)&v328, v327, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v363, v328), 1), (float64x2_t)v364, v328).f64[0], *(double *)v363.i64)) < 0.00000001)goto LABEL_647;
LABEL_610:
            *(_QWORD *)&v337 = vextq_s8(v362, v362, 8uLL).u64[0];
            *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v363, (int8x16_t)v363, 8uLL).u64[0];
            *((_QWORD *)&v337 + 1) = v364.i64[0];
            *((_QWORD *)&v329 + 1) = vextq_s8((int8x16_t)v364, (int8x16_t)v364, 8uLL).u64[0];
            v367 = _Q3;
            v368 = v328.f64[0];
            v370 = vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
            v369 = v337;
            v372 = v327.i64[0];
            v371 = v329;
            sub_207CC48B4((uint64_t)&v356);
            *(double *)&v338 = v357;
            v339 = vzip2q_s64(v356, v358);
            *((_QWORD *)&v338 + 1) = v359;
            *(int64x2_t *)v308 = vzip1q_s64(v356, v358);
            *(int64x2_t *)(v308 + 16) = v339;
            *(_OWORD *)(v308 + 32) = v338;
            goto LABEL_626;
          }
        }
        else
        {
          v314 = sub_208116474(a1, *(uint64_t *)&v375.f64[0], *(float64x2_t **)&v375.f64[1], v376, v377, v378);
        }
      }
      else if (v297 == 9)
      {
        v314 = sub_2081158C4(a1, *(uint64_t *)&v375.f64[0], *(float64x2_t **)&v375.f64[1], v376, v377, v378, *(double *)v298.i64, v300, *(double *)a6.i64, v299, (int32x4_t)a8);
      }
      else
      {
        if (v376)
        {
          v376->f64[0] = 0.0;
          v320->f64[1] = 0.0;
          v320[1].f64[0] = 0.0;
        }
        if (v321)
        {
          *(_QWORD *)(v321 + 64) = 0;
          v298.i64[0] = 0;
          *(_OWORD *)(v321 + 32) = 0u;
          *(_OWORD *)(v321 + 48) = 0u;
          *(_OWORD *)v321 = 0u;
          *(_OWORD *)(v321 + 16) = 0u;
        }
        if (v308)
        {
          v314 = sub_208112DDC(*(uint64_t *)&v319.f64[0], v308, *(double **)&v319.f64[1], a1 + 168, 20, *(double *)v298.i64, v300, *(double *)a6.i64, v299, (int32x4_t)a8);
        }
        else
        {
          v340 = sqrt(**(double **)&v319.f64[1] * **(double **)&v319.f64[1]+ *(double *)(*(_QWORD *)&v319.f64[1] + 8) * *(double *)(*(_QWORD *)&v319.f64[1] + 8));
          v314 = sub_2081112B8(*(uint64_t *)&v319.f64[0], *(double **)&v319.f64[1], (double *)(a1 + 168), 20, v340, v340, *(double *)a6.i64, v299, (int32x4_t)a8);
        }
      }
      goto LABEL_625;
    }
    if (v297 <= 0xD)
      break;
    v306 = *(float64x2_t **)&v375.f64[1];
    v305 = *(_QWORD *)&v375.f64[0];
    v309 = v376;
    v308 = v377;
    v307 = v378;
    if (v297 != 14)
      goto LABEL_611;
    if (v376)
    {
      v376->f64[0] = 0.0;
      v309->f64[1] = 0.0;
      v309[1].f64[0] = 0.0;
    }
    if (v307)
    {
      *(_QWORD *)(v307 + 64) = 0;
      *(_OWORD *)(v307 + 32) = 0u;
      *(_OWORD *)(v307 + 48) = 0u;
      *(_OWORD *)v307 = 0u;
      *(_OWORD *)(v307 + 16) = 0u;
    }
    v333 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
    v334 = sub_2081122E4(v305, (uint64_t)v306, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v333);
    if (v308)
    {
      if ((v334 & 1) == 0)
        goto LABEL_647;
      if (!sub_208111C2C(&v352, (uint64_t)&v362, &v360, v305, (double *)(a1 + 168), v333))
        goto LABEL_647;
      v327.i64[0] = *(_QWORD *)(v305 + 16);
      v328 = *(float64x2_t *)v305;
      *(_QWORD *)&v329 = v363.i64[0];
      _Q3 = (float64x2_t)v362;
      v365 = v328;
      v366 = v327.i64[0];
      v361 = 0;
      *(_QWORD *)&_Q5.f64[0] = v327.i64[0];
      _Q5.f64[1] = v328.f64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v364, _Q5), (float64x2_t)vzip2q_s64(v364, v363), (float64x2_t)vextq_s8(*(int8x16_t *)&v328, v327, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v363, v328), 1), (float64x2_t)v364, v328).f64[0], *(double *)v363.i64)) < 0.00000001)goto LABEL_647;
      goto LABEL_610;
    }
    if (!v334)
      goto LABEL_647;
LABEL_626:
    _V0.D[1] = v354.f64[1];
    _D2 = v354.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v344 = atan2(sqrt(_D1), __x);
    if (v344 <= v295)
      goto LABEL_647;
    v15 = v344;
    v296 = v296 + 1.0;
    v295 = v344;
    if (v296 >= v294)
      goto LABEL_648;
  }
  v322 = (_OWORD *)v377;
  v323 = v378;
  v324 = v376;
  v325 = v375.f64[0];
  if (v297 == 13)
  {
    v314 = sub_208118068((double *)a1, *(uint64_t *)&v375.f64[0], *(uint64_t *)&v375.f64[1], v376, v377, v378);
    goto LABEL_625;
  }
  if (v376)
  {
    v376->f64[0] = 0.0;
    v324->f64[1] = 0.0;
    v324[1].f64[0] = 0.0;
  }
  if (v323)
  {
    *(_QWORD *)(v323 + 64) = 0;
    *(_OWORD *)(v323 + 32) = 0u;
    *(_OWORD *)(v323 + 48) = 0u;
    *(_OWORD *)v323 = 0u;
    *(_OWORD *)(v323 + 16) = 0u;
  }
  **(_QWORD **)&v325 = 0;
  *(_QWORD *)(*(_QWORD *)&v325 + 8) = 0;
  *(_QWORD *)(*(_QWORD *)&v325 + 16) = 0;
  if (v322)
  {
    v322[1] = 0u;
    v322[2] = 0u;
    *v322 = 0u;
  }
LABEL_647:
  v15 = v295;
LABEL_648:
  if (v15 < 0.0)
    return 0;
LABEL_11:
  v16 = 1;
  if (v15 < 0.0)
    return v16;
  v17 = (float64x2_t *)(a1 + 680);
  v18 = (int64x2_t *)(a1 + 168);
  v19 = *(_DWORD *)(a1 + 992);
  v346 = (float *)(a1 + 204);
  v348 = (float64x2_t *)(a1 + 952);
  v20 = 0.0;
  while (2)
  {
    v26 = __sincos_stret(v20);
    v354 = (float64x2_t)*(unint64_t *)&v26.__sinval;
    __x = v26.__cosval;
    if (v19 == -1)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v19 = *(_DWORD *)(a1 + 992);
      if (v19 > 7)
        goto LABEL_28;
LABEL_15:
      if (v19 <= 3)
      {
        if (v19 > 1)
        {
          if (v19 == 2)
          {
            if (*(_DWORD *)(a1 + 212))
            {
              if (__x < 0.00000001)
                return 0;
              _Q2 = vmulq_n_f64(v354, 1.0 / __x);
              _D0 = vmuld_lane_f64(1.0 / __x, v354, 1);
              __asm { FMLA            D1, D0, V2.D[1] }
              v44 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1)));
              v45 = *(float64x2_t *)(a1 + 192);
              v23 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
              v24 = vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2));
              _Q2 = vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v45, v45), _Q2.f64[0]), _Q2, 1);
              _Q0 = vaddq_f64(vaddq_f64(vmulq_f64(v23, vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), v24)), _Q2), v44);
              v375.f64[0] = _Q0.f64[0];
            }
            else
            {
              if (__x < 0.00000001)
                return 0;
              _Q2 = vmulq_n_f64(v354, 1.0 / __x);
              _D0 = vmuld_lane_f64(1.0 / __x, v354, 1);
              __asm { FMLA            D1, D0, V2.D[1] }
              v23.f64[0] = *(double *)(a1 + 184) * _D1;
              _Q0 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(a1 + 176) + v23.f64[0]));
            }
LABEL_226:
            v136.f64[0] = *(double *)(a1 + 16)
                        + *(double *)a1 * _Q0.f64[0]
                        + vmuld_lane_f64(*(double *)(a1 + 8), _Q0, 1);
            v136.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), _Q0, 1) + *(double *)(a1 + 40);
            v351 = v136;
            v27 = 2;
            goto LABEL_210;
          }
          _V0.D[1] = v354.f64[1];
          _D1 = v354.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v71 = sqrt(_D7);
          v23.f64[0] = fabs(__x);
          v24.f64[0] = fabs(v71);
          v25.f64[0] = v23.f64[0] / v24.f64[0];
          if (v23.f64[0] >= v24.f64[0])
            v25.f64[0] = v24.f64[0] / v23.f64[0];
          v72 = (v24.f64[0] - v23.f64[0]) / (v23.f64[0] + v24.f64[0]);
          if (v23.f64[0] >= v24.f64[0])
            v72 = -v72;
          if (v25.f64[0] > 0.414213562)
            v73 = 1;
          else
            v73 = 2;
          if (v25.f64[0] > 0.414213562)
            v74 = -1;
          else
            v74 = 1;
          if (v25.f64[0] <= 0.414213562)
            v72 = v25.f64[0];
          if (_D7 >= 0.00000001)
          {
            if (v23.f64[0] < v24.f64[0])
              v74 = -v74;
            else
              v73 = v25.f64[0] > 0.414213562;
            v122 = v71 == INFINITY && v23.f64[0] == INFINITY;
            v123 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v72 * v72), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v72 * v72), (float64x2_t)xmmword_208233A20), v72 * v72 * (v72 * v72))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v72 * v72), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v72 * v72), (float64x2_t)xmmword_208233A30), v72 * v72 * (v72 * v72))), v72 * v72 * (v72 * v72) * (v72 * v72 * (v72 * v72))));
            v124 = v72 + v72 * vdivq_f64(v123, (float64x2_t)vdupq_laneq_s64((int64x2_t)v123, 1)).f64[0];
            if (v122)
              v124 = 0.785398163;
            if (v71 == 0.0 && __x == 0.0)
              v126 = 0.0;
            else
              v126 = v124;
            if (__x < 0.0)
            {
              v73 = 4 - v73;
              v74 = -v74;
            }
            if (v71 < 0.0)
              v73 = -v73;
            v127 = (double)v73;
            if (v71 >= 0.0)
              v128 = v74;
            else
              v128 = -v74;
            v129 = v127 * 3.061617e-17 + v127 * 0.785398163 + v126 * (double)v128;
            v24 = *(float64x2_t *)v18;
            v130 = *(int64x2_t *)(a1 + 184);
            v25 = (float64x2_t)vzip1q_s64(*v18, v130);
            v23 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64((float64x2_t)vzip2q_s64(*v18, v130), v129 * v129)), v129 * v129);
            v75 = 1.0 / v71 * (v129 + v129 * (v23.f64[0] + vmuld_lane_f64(v129 * v129 * (v129 * v129), v23, 1)));
          }
          else
          {
            v75 = 1.0 / __x;
          }
          _Q0 = vmulq_n_f64(v354, v75);
LABEL_208:
          v131.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * _Q0.f64[0] + vmuld_lane_f64(*(double *)(a1 + 8), _Q0, 1);
          v131.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), _Q0, 1) + *(double *)(a1 + 40);
          v351 = v131;
          v27 = 3;
          goto LABEL_209;
        }
        if (!v19)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
          abort();
        }
        if (__x < 0.00000001)
          return 0;
        _Q0 = vmulq_n_f64(v354, 1.0 / __x);
        v375 = _Q0;
        v27 = *(_DWORD *)(a1 + 992);
        if (v27 == -1)
          goto LABEL_20;
        goto LABEL_115;
      }
      if (v19 <= 5)
      {
        if (v19 != 5)
        {
          _Q0.f64[1] = v354.f64[1];
          _D1 = v354.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v60 = sqrt(_D7);
          v61 = fabs(__x);
          v62 = fabs(v60);
          v63 = v61 / v62;
          if (v61 >= v62)
            v63 = v62 / v61;
          v64 = (v62 - v61) / (v61 + v62);
          if (v61 >= v62)
            v64 = -v64;
          if (v63 > 0.414213562)
            v65 = 1;
          else
            v65 = 2;
          if (v63 > 0.414213562)
            v66 = -1;
          else
            v66 = 1;
          if (v63 <= 0.414213562)
            v64 = v63;
          if (_D7 >= 0.00000001)
          {
            if (v61 < v62)
              v66 = -v66;
            else
              v65 = v63 > 0.414213562;
            v112 = v60 == INFINITY && v61 == INFINITY;
            v113 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v64 * v64), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v64 * v64), (float64x2_t)xmmword_208233A20), v64 * v64 * (v64 * v64))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v64 * v64), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v64 * v64), (float64x2_t)xmmword_208233A30), v64 * v64 * (v64 * v64))), v64 * v64 * (v64 * v64) * (v64 * v64 * (v64 * v64))));
            v114 = v64 + v64 * vdivq_f64(v113, (float64x2_t)vdupq_laneq_s64((int64x2_t)v113, 1)).f64[0];
            if (v112)
              v114 = 0.785398163;
            if (v60 == 0.0 && __x == 0.0)
              v116 = 0.0;
            else
              v116 = v114;
            if (__x < 0.0)
            {
              v65 = 4 - v65;
              v66 = -v66;
            }
            if (v60 < 0.0)
              v65 = -v65;
            v117 = (double)v65;
            if (v60 >= 0.0)
              v118 = v66;
            else
              v118 = -v66;
            v119 = v117 * 3.061617e-17 + v117 * 0.785398163 + v116 * (double)v118;
            v24 = *(float64x2_t *)v18;
            v120 = *(int64x2_t *)(a1 + 184);
            v25 = (float64x2_t)vzip1q_s64(*v18, v120);
            v23 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64((float64x2_t)vzip2q_s64(*v18, v120), v119 * v119)), v119 * v119);
            v67 = 1.0 / v60 * (v119 + v119 * (v23.f64[0] + vmuld_lane_f64(v119 * v119 * (v119 * v119), v23, 1)));
          }
          else
          {
            v67 = 1.0 / __x;
          }
          v86 = vmulq_n_f64(v354, v67);
          v85 = *(double *)a1;
          v25.f64[0] = *(float64_t *)(a1 + 8);
          v24.f64[0] = v86.f64[1];
          v87 = *(double *)(a1 + 16);
          v89 = *(double *)(a1 + 32);
          v88 = *(double *)(a1 + 40);
          goto LABEL_184;
        }
        v23.f64[0] = v354.f64[1] * v354.f64[1];
        v33 = v354.f64[0] * v354.f64[0] + v354.f64[1] * v354.f64[1];
        if (v33 >= 0.00000001)
        {
          v100 = sqrt(v33);
          if (v100 <= __x)
          {
            v287 = v100 / __x * 0.785398163
                 - v100 / __x * (v100 / __x + -1.0) * (v100 / __x * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v100 <= -__x)
            {
              v102 = v100 / __x * 0.785398163
                   - v100 / __x * (-1.0 - v100 / __x) * (v100 / __x * -0.0663008339 + 0.244711287);
              v103 = 3.14159265;
            }
            else
            {
              v101 = fabs(__x / v100);
              v102 = __x / v100 * (v101 + -1.0) * (v101 * 0.0663008339 + 0.244711287) + __x / v100 * -0.785398163;
              v103 = 1.57079633;
            }
            v287 = v102 + v103;
          }
          v24 = *(float64x2_t *)v18;
          v289 = *(int64x2_t *)(a1 + 184);
          v25 = (float64x2_t)vzip1q_s64(*v18, v289);
          v23 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64((float64x2_t)vzip2q_s64(*v18, v289), v287 * v287)), v287 * v287);
          v24.f64[0] = vmuld_lane_f64(v287 * v287 * (v287 * v287), v23, 1);
          v23.f64[0] = v287 * (v23.f64[0] + v24.f64[0]);
          v290 = (v287 + v23.f64[0]) / v100;
          v375.f64[0] = v354.f64[0] * v290;
          v375.f64[1] = v354.f64[1] * v290;
          v27 = *(_DWORD *)(a1 + 992);
          if (v27 == -1)
            goto LABEL_20;
        }
        else
        {
          if (__x == 0.0)
            return 0;
          v375.f64[0] = v354.f64[0] * (1.0 / __x);
          v375.f64[1] = v354.f64[1] * (1.0 / __x);
          v27 = *(_DWORD *)(a1 + 992);
          if (v27 == -1)
            goto LABEL_20;
        }
        goto LABEL_115;
      }
      if (v19 == 6)
      {
        _Q2 = *(float64x2_t *)(a1 + 208);
        v46 = vaddq_f64(vdivq_f64(v354, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0)), *(float64x2_t *)(a1 + 192));
        v47 = sqrt(vaddvq_f64(vmulq_f64(v46, v46)));
        v24.f64[0] = *(double *)(a1 + 184) * v47;
        v23.f64[0] = v47 * (*(double *)(a1 + 176) + v24.f64[0]);
        _Q0 = vaddq_f64(_Q2, vmulq_n_f64(v46, v47 * (v47 * (*(double *)(a1 + 168) + v23.f64[0])) + 1.0));
        v375 = _Q0;
        v27 = *(_DWORD *)(a1 + 992);
        if (v27 == -1)
          goto LABEL_20;
        goto LABEL_115;
      }
      v32 = sub_2081155AC(a1, &v375, &v354);
      goto LABEL_113;
    }
    if (v19 <= 7)
      goto LABEL_15;
LABEL_28:
    if (v19 > 0xB)
    {
      if (v19 <= 0xD)
      {
        if (v19 != 13 || __x < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(v354, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0));
        v35 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
        _Q2 = vmulq_f64(_Q0, _Q0);
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        _Q2.f64[0] = v35 * (_Q2.f64[0] * v35);
        v25.f64[0] = *(float64_t *)(a1 + 224);
        v24.f64[0] = *(float64_t *)(a1 + 176);
        v23.f64[0] = v24.f64[0] + v35 * *(double *)(a1 + 232);
        _Q0 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(_Q2.f64[0]* (*(double *)(a1 + 168)+ v35 * v25.f64[0]+ _Q2.f64[0]* (v23.f64[0]+ _Q2.f64[0]* (*(double *)(a1 + 184)+ v35 * *(double *)(a1 + 240)+ _Q2.f64[0]* (*(double *)(a1 + 192)+ v35 * *(double *)(a1 + 248)+ _Q2.f64[0]* (*(double *)(a1 + 200)+ v35 * *(double *)(a1 + 256)+ _Q2.f64[0]* (*(double *)(a1 + 208)
                                     + v35 * *(double *)(a1 + 264)
                                     + _Q2.f64[0]
                                     * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v35 + _Q2.f64[0] * 0.0)))))))
                               / 100.0
                               + 1.0),
                               0));
        v375 = _Q0;
        v27 = *(_DWORD *)(a1 + 992);
        if (v27 == -1)
          goto LABEL_20;
LABEL_115:
        if (v27 > 7)
          goto LABEL_22;
        goto LABEL_116;
      }
      if (v19 != 14)
      {
        _D2 = *(_QWORD *)(a1 + 944);
        _V7.D[1] = v354.f64[1];
        v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), v354.f64[0]), *(float64x2_t *)(a1 + 928), v354, 1), *v348, __x);
        __asm { FMLA            D0, D2, V7.D[1] }
        *(double *)v363.i64 = _D0 + *(double *)(a1 + 968) * __x;
        v362 = (int8x16_t)v94;
        sub_20810F6CC(*(_QWORD *)(a1 + 888), (uint64_t)&v362, 30, 0, 0, (uint64_t)&v367, 0.00000001, v94);
        if (!(_BYTE)v369)
          return 0;
        v96 = (const double *)(a1 + 904);
        v382 = vld3q_f64(v96);
        _Q5 = *v348;
        v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382.val[0], v367.f64[0]), v382.val[1], v367, 1), v382.val[2], v368);
        v382.val[1].f64[0] = v367.f64[1];
        __asm { FMLA            D1, D2, V5.D[1] }
        v99 = v382.val[0].f64[0] + *(double *)(a1 + 968) * v368;
        v357 = v99;
        v356 = (int64x2_t)v98;
        if (v99 < 0.0)
          return 0;
        v356 = (int64x2_t)vsubq_f64(v98, vmulq_n_f64(*(float64x2_t *)(a1 + 976), v99));
        if ((sub_208111A60(&v375, (uint64_t)&v356, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) == 0)
          return 0;
        v84 = *(float64x2_t *)(a1 + 976);
        goto LABEL_132;
      }
      v32 = sub_208111A60(&v375, (uint64_t)&v354, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
LABEL_113:
      if ((v32 & 1) == 0)
        return 0;
      v27 = *(_DWORD *)(a1 + 992);
      if (v27 == -1)
        goto LABEL_20;
      goto LABEL_115;
    }
    if (v19 <= 9)
    {
      if (v19 == 9)
      {
        v32 = sub_208116140(a1, &v375, &v354);
        goto LABEL_113;
      }
      _Q0.f64[1] = v354.f64[1];
      _D1 = v354.f64[1];
      __asm { FMLA            D7, D1, V0.D[1] }
      v50 = sqrt(_D7);
      v51 = fabs(__x);
      v52 = fabs(v50);
      v53 = v51 / v52;
      if (v51 >= v52)
        v53 = v52 / v51;
      v54 = (v52 - v51) / (v51 + v52);
      if (v51 >= v52)
        v54 = -v54;
      if (v53 > 0.414213562)
        v55 = 1;
      else
        v55 = 2;
      if (v53 > 0.414213562)
        v56 = -1;
      else
        v56 = 1;
      if (v53 <= 0.414213562)
        v54 = v53;
      if (_D7 >= 0.00000001)
      {
        if (v51 < v52)
          v56 = -v56;
        else
          v55 = v53 > 0.414213562;
        _ZF = v50 == INFINITY && v51 == INFINITY;
        v25 = vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v54 * v54), (float64x2_t)xmmword_2082339E0);
        v105 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v54 * v54), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v54 * v54), (float64x2_t)xmmword_208233A20), v54 * v54 * (v54 * v54))), vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v54 * v54), (float64x2_t)xmmword_208233A30), v54 * v54 * (v54 * v54))), v54 * v54 * (v54 * v54) * (v54 * v54 * (v54 * v54))));
        v24 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v105, 1);
        v23 = vdivq_f64(v105, v24);
        v106 = v54 + v54 * v23.f64[0];
        if (_ZF)
          v106 = 0.785398163;
        if (v50 == 0.0 && __x == 0.0)
          v108 = 0.0;
        else
          v108 = v106;
        if (__x < 0.0)
        {
          v55 = 4 - v55;
          v56 = -v56;
        }
        if (v50 < 0.0)
          v55 = -v55;
        v109 = (double)v55;
        if (v50 >= 0.0)
          v110 = v56;
        else
          v110 = -v56;
        v111 = v109 * 3.061617e-17 + v109 * 0.785398163 + v108 * (double)v110;
        v57 = 1.0
            / v50
            * (v111
             * (v111
              * v111
              * (*(double *)(a1 + 168)
               + v111
               * v111
               * (*(double *)(a1 + 176)
                + v111
                * v111
                * (*(double *)(a1 + 184)
                 + v111
                 * v111
                 * (*(double *)(a1 + 192)
                  + v111
                  * v111
                  * (*(double *)(a1 + 200) + v111 * v111 * (*(double *)(a1 + 208) + v111 * v111 * *(double *)(a1 + 216)))))))
              + 1.0));
      }
      else
      {
        v57 = 1.0 / __x;
      }
      v29 = vmulq_n_f64(v354, v57);
      v28 = *(double *)a1;
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = v29.f64[1];
      v23.f64[0] = *(float64_t *)(a1 + 16);
      v31 = *(double *)(a1 + 32);
      v30 = *(double *)(a1 + 40);
LABEL_160:
      _Q2.f64[0] = v23.f64[0] + v28 * v29.f64[0] + v25.f64[0] * v24.f64[0];
      _Q2.f64[1] = v24.f64[0] * v31 + v30;
      v351 = _Q2;
      v27 = 8;
      goto LABEL_227;
    }
    if (v19 == 10)
    {
      v32 = sub_208111528(&v375, (uint64_t)&v354, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
      goto LABEL_113;
    }
    _D2 = *(_QWORD *)(a1 + 720);
    _V7.D[1] = v354.f64[1];
    v78 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v354.f64[0]), *(float64x2_t *)(a1 + 704), v354, 1), *(float64x2_t *)(a1 + 728), __x);
    __asm { FMLA            D0, D2, V7.D[1] }
    *(double *)v363.i64 = _D0 + *(double *)(a1 + 744) * __x;
    v362 = (int8x16_t)v78;
    sub_20810F6CC(*(_QWORD *)(a1 + 664), (uint64_t)&v362, 30, 0, 0, (uint64_t)&v367, 0.00000001, v78);
    if (!(_BYTE)v369)
      return 0;
    v80 = (const double *)(a1 + 680);
    v381 = vld3q_f64(v80);
    v80 += 6;
    _Q5 = *(_OWORD *)v80;
    v82 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381.val[0], v367.f64[0]), v381.val[1], v367, 1), v381.val[2], v368);
    v381.val[1].f64[0] = v367.f64[1];
    __asm { FMLA            D1, D2, V5.D[1] }
    v83 = v381.val[0].f64[0] + *(double *)(a1 + 744) * v368;
    v356 = (int64x2_t)v82;
    v357 = v83;
    if (v83 < 0.0)
      return 0;
    v356 = (int64x2_t)vsubq_f64(v82, vmulq_n_f64(*(float64x2_t *)(a1 + 752), v83));
    if ((sub_208111528(&v375, (uint64_t)&v356, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) == 0)
      return 0;
    v84 = *(float64x2_t *)(a1 + 752);
LABEL_132:
    _Q0 = vaddq_f64(v84, v375);
    v375 = _Q0;
    v27 = *(_DWORD *)(a1 + 992);
    if (v27 != -1)
      goto LABEL_115;
LABEL_20:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v27 = *(_DWORD *)(a1 + 992);
    if (v27 <= 7)
    {
LABEL_116:
      if (v27 <= 3)
      {
        if (v27 <= 1)
        {
          if (!v27)
          {
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
            abort();
          }
          _Q2.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
          _Q2.f64[1] = v375.f64[1] * *(double *)(a1 + 32) + *(double *)(a1 + 40);
          v351 = _Q2;
          v27 = 1;
          goto LABEL_210;
        }
        _Q0 = v375;
        if (v27 == 2)
          goto LABEL_226;
        goto LABEL_208;
      }
      v85 = *(double *)a1;
      v86.f64[0] = v375.f64[0];
      v87 = *(double *)(a1 + 16);
      v89 = *(double *)(a1 + 32);
      v88 = *(double *)(a1 + 40);
      if (v27 > 5)
      {
        v91 = v85 * v375.f64[0];
        v24.f64[0] = v375.f64[1];
        v23.f64[0] = *(double *)(a1 + 8) * v375.f64[1];
        _Q2.f64[0] = v87 + v91 + v23.f64[0];
        _Q2.f64[1] = v88 + v89 * v375.f64[1];
        v351 = _Q2;
        if (v27 == 6)
          v27 = 6;
        else
          v27 = 7;
        goto LABEL_210;
      }
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = v375.f64[1];
      if (v27 == 5)
      {
        v90 = v85 * v375.f64[0];
        v23.f64[0] = v25.f64[0] * v375.f64[1];
        _Q2.f64[0] = v87 + v90 + v25.f64[0] * v375.f64[1];
        _Q2.f64[1] = v375.f64[1] * v89 + v88;
        v351 = _Q2;
        v27 = 5;
        goto LABEL_210;
      }
LABEL_184:
      v121 = v85 * v86.f64[0];
      v23.f64[0] = v25.f64[0] * v24.f64[0];
      _Q2.f64[0] = v87 + v121 + v25.f64[0] * v24.f64[0];
      _Q2.f64[1] = v24.f64[0] * v89 + v88;
      v351 = _Q2;
      v27 = 4;
      goto LABEL_210;
    }
LABEL_22:
    v28 = *(double *)a1;
    v29.f64[0] = v375.f64[0];
    if (v27 > 0xB)
    {
      v23.f64[0] = *(float64_t *)(a1 + 40);
      v24.f64[0] = v375.f64[1];
      v40.f64[0] = *(double *)(a1 + 16) + v28 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
      v40.f64[1] = v23.f64[0] + *(double *)(a1 + 32) * v375.f64[1];
      v351 = v40;
      if (v27 <= 0xD)
      {
        if (v27 == 13)
          v27 = 13;
        else
          v27 = 12;
        goto LABEL_227;
      }
      if (v27 != 14)
      {
        if (v27 != -1)
          goto LABEL_278;
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v27 = *(_DWORD *)(a1 + 992);
        if (v27 > 7)
          goto LABEL_227;
LABEL_210:
        if (v27 > 3)
        {
          v132 = (int32x4_t)v351;
          _Q0.f64[0] = *(double *)(a1 + 88)
                     + *(double *)(a1 + 72) * v351.f64[0]
                     + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
          _Q2.f64[0] = *(float64_t *)(a1 + 112);
          v133 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + _Q2.f64[0];
          v373 = _Q0.f64[0];
          v374 = v133;
          if (v27 > 5)
          {
            if (v27 == 6)
              v27 = 6;
            else
              v27 = 7;
          }
          else if (v27 == 5)
          {
            v27 = 5;
          }
          else
          {
            v27 = 4;
          }
        }
        else if (v27 > 1)
        {
          v132 = (int32x4_t)v351;
          _Q0.f64[0] = *(double *)(a1 + 88)
                     + *(double *)(a1 + 72) * v351.f64[0]
                     + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
          _Q2.f64[0] = *(float64_t *)(a1 + 112);
          v133 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + _Q2.f64[0];
          v373 = _Q0.f64[0];
          v374 = v133;
          if (v27 == 2)
            v27 = 2;
          else
            v27 = 3;
        }
        else
        {
          if (!v27)
          {
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
            abort();
          }
          v132 = (int32x4_t)v351;
          _Q0.f64[0] = *(double *)(a1 + 88)
                     + *(double *)(a1 + 72) * v351.f64[0]
                     + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
          _Q2.f64[0] = *(float64_t *)(a1 + 112);
          v133 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + _Q2.f64[0];
          v373 = _Q0.f64[0];
          v374 = v133;
          v27 = 1;
        }
LABEL_241:
        *(_QWORD *)&v375.f64[0] = &v352;
        *(_QWORD *)&v375.f64[1] = &v373;
        v377 = 0;
        v378 = 0;
        v376 = 0;
        if (v27 > 7)
          goto LABEL_320;
        goto LABEL_242;
      }
LABEL_209:
      if (v27 > 7)
        goto LABEL_227;
      goto LABEL_210;
    }
    v23.f64[0] = *(float64_t *)(a1 + 16);
    v31 = *(double *)(a1 + 32);
    v30 = *(double *)(a1 + 40);
    if (v27 > 9)
    {
      v24.f64[0] = v375.f64[1];
      _Q2.f64[0] = v23.f64[0] + v28 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
      _Q2.f64[1] = v30 + v31 * v375.f64[1];
      v351 = _Q2;
      if (v27 == 10)
        v27 = 10;
      else
        v27 = 11;
    }
    else
    {
      v25.f64[0] = *(float64_t *)(a1 + 8);
      v24.f64[0] = v375.f64[1];
      if (v27 != 9)
        goto LABEL_160;
      _Q2.f64[0] = v23.f64[0] + v28 * v375.f64[0] + v25.f64[0] * v375.f64[1];
      _Q2.f64[1] = v375.f64[1] * v31 + v30;
      v351 = _Q2;
      v27 = 9;
    }
LABEL_227:
    if (v27 <= 0xB)
    {
      v132 = (int32x4_t)v351;
      _Q0.f64[0] = *(double *)(a1 + 88)
                 + *(double *)(a1 + 72) * v351.f64[0]
                 + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
      _Q2.f64[0] = *(float64_t *)(a1 + 112);
      v133 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + _Q2.f64[0];
      v373 = _Q0.f64[0];
      v374 = v133;
      if (v27 > 9)
      {
        if (v27 == 10)
          v27 = 10;
        else
          v27 = 11;
      }
      else if (v27 == 9)
      {
        v27 = 9;
      }
      else
      {
        v27 = 8;
      }
      goto LABEL_241;
    }
    if (v27 <= 0xD)
    {
      v132 = (int32x4_t)v351;
      _Q0.f64[0] = *(double *)(a1 + 88)
                 + *(double *)(a1 + 72) * v351.f64[0]
                 + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
      _Q2.f64[0] = *(float64_t *)(a1 + 112);
      v133 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + _Q2.f64[0];
      v373 = _Q0.f64[0];
      v374 = v133;
      if (v27 == 13)
        v27 = 13;
      else
        v27 = 12;
      goto LABEL_241;
    }
    if (v27 == 14)
    {
      v132 = (int32x4_t)v351;
      _Q0.f64[0] = *(double *)(a1 + 88)
                 + *(double *)(a1 + 72) * v351.f64[0]
                 + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
      _Q2.f64[0] = *(float64_t *)(a1 + 112);
      v133 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + _Q2.f64[0];
      v373 = _Q0.f64[0];
      v374 = v133;
      goto LABEL_241;
    }
LABEL_278:
    v153 = vmuld_lane_f64(*(double *)(a1 + 104), v351, 1) + *(double *)(a1 + 112);
    v373 = *(double *)(a1 + 88) + *(double *)(a1 + 72) * v351.f64[0] + vmuld_lane_f64(*(double *)(a1 + 80), v351, 1);
    v374 = v153;
    v154 = (uint64_t)&v352;
    v155 = (uint64_t)&v373;
    *(_QWORD *)&v375.f64[0] = &v352;
    *(_QWORD *)&v375.f64[1] = &v373;
    v377 = 0;
    v378 = 0;
    v376 = 0;
    if (v27 != -1)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      goto LABEL_348;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v27 = *(_DWORD *)(a1 + 992);
    if (v27 <= 7)
    {
LABEL_242:
      if (v27 > 3)
      {
        v148 = v375;
        v149 = v376;
        v150 = (float64x2_t *)v377;
        v151 = v378;
        if (v27 > 5)
        {
          if (v27 == 6)
            v152 = sub_208117DD4((double *)a1, *(uint64_t *)&v375.f64[0], *(double **)&v375.f64[1], v376, v377, v378);
          else
            v152 = sub_208114CF4(a1, *(uint64_t *)&v375.f64[0], *(float64x2_t **)&v375.f64[1], v376, v377, v378, _Q0.f64[0], v133, (int8x16_t)_Q2, (int8x16_t)v132, v23.f64[0], v24.f64[0], v25);
        }
        else if (v27 == 5)
        {
          if (v376)
          {
            v376->f64[0] = 0.0;
            v149->f64[1] = 0.0;
            v149[1].f64[0] = 0.0;
          }
          if (v151)
          {
            *(_QWORD *)(v151 + 64) = 0;
            *(_OWORD *)(v151 + 32) = 0u;
            *(_OWORD *)(v151 + 48) = 0u;
            *(_OWORD *)v151 = 0u;
            *(_OWORD *)(v151 + 16) = 0u;
          }
          if (v150)
            v152 = sub_208114414(*(uint64_t *)&v148.f64[0], (uint64_t)v150, *(double **)&v148.f64[1], a1 + 168, 5);
          else
            v152 = sub_208113D70(*(uint64_t *)&v148.f64[0], *(double **)&v148.f64[1], a1 + 168, 5);
        }
        else
        {
          if (v376)
          {
            v376->f64[0] = 0.0;
            v149->f64[1] = 0.0;
            v149[1].f64[0] = 0.0;
          }
          if (v151)
          {
            *(_QWORD *)(v151 + 64) = 0;
            _Q0.f64[0] = 0.0;
            _Q0.f64[1] = 0.0;
            *(_OWORD *)(v151 + 32) = 0u;
            *(_OWORD *)(v151 + 48) = 0u;
            *(_OWORD *)v151 = 0u;
            *(_OWORD *)(v151 + 16) = 0u;
          }
          if (v150)
          {
            if (!*(_BYTE *)(a1 + 468))
            {
              *(_QWORD *)&_Q0.f64[0] = sub_208113224((uint64_t)v346, (double *)(a1 + 168), 0x32uLL, (int8x16_t)_Q0, v133, (int8x16_t)_Q2, (int8x16_t)v132).u64[0];
              *(_BYTE *)(a1 + 468) = 1;
            }
            v152 = sub_207D34B98(*(uint64_t *)&v148.f64[0], *(uint64_t *)&v148.f64[1], (int64x2_t *)(a1 + 168), v346, v150, 5, _Q0.f64[0], v133, _Q2.f64[0], *(double *)v132.i64, v23.f64[0], v24.f64[0], v25);
          }
          else
          {
            if (!*(_BYTE *)(a1 + 468))
            {
              *(_QWORD *)&_Q0.f64[0] = sub_208113224((uint64_t)v346, (double *)(a1 + 168), 0x32uLL, (int8x16_t)_Q0, v133, (int8x16_t)_Q2, (int8x16_t)v132).u64[0];
              *(_BYTE *)(a1 + 468) = 1;
            }
            v152 = sub_207D34B98(*(uint64_t *)&v148.f64[0], *(uint64_t *)&v148.f64[1], (int64x2_t *)(a1 + 168), v346, 0, 5, _Q0.f64[0], v133, _Q2.f64[0], *(double *)v132.i64, v23.f64[0], v24.f64[0], v25);
          }
        }
        goto LABEL_385;
      }
      if (v27 > 1)
      {
        if (v27 == 2)
        {
          v152 = sub_207D34740((uint64_t)&v375, a1);
        }
        else
        {
          v187 = v375;
          v189 = v376;
          v188 = v377;
          v190 = v378;
          if (v376)
          {
            v376->f64[0] = 0.0;
            v189->f64[1] = 0.0;
            v189[1].f64[0] = 0.0;
          }
          if (v190)
          {
            *(_QWORD *)(v190 + 64) = 0;
            _Q0.f64[0] = 0.0;
            *(_OWORD *)(v190 + 32) = 0u;
            *(_OWORD *)(v190 + 48) = 0u;
            *(_OWORD *)v190 = 0u;
            *(_OWORD *)(v190 + 16) = 0u;
          }
          if (v188)
            v152 = sub_2081129B0(*(double **)&v187.f64[0], v188, *(double **)&v187.f64[1], (int64x2_t *)(a1 + 168), 20, _Q0.f64[0], v133, _Q2.f64[0], *(double *)v132.i64, (int64x2_t)v23);
          else
            v152 = sub_208111090(*(uint64_t *)&v187.f64[0], *(double **)&v187.f64[1], (int64x2_t *)(a1 + 168), 20, _Q0.f64[0], v133, _Q2.f64[0], *(double *)v132.i64, (int64x2_t)v23, v24);
        }
        goto LABEL_385;
      }
      if (!v27)
      {
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
        abort();
      }
      v137 = v375.f64[0];
      v139 = v376;
      v138 = (_OWORD *)v377;
      v140 = v378;
      **(_OWORD **)&v375.f64[0] = **(_OWORD **)&v375.f64[1];
      *(_QWORD *)(*(_QWORD *)&v137 + 16) = 0x3FF0000000000000;
      if (v139)
      {
        v139->f64[0] = 0.0;
        v139->f64[1] = 0.0;
        v139[1].f64[0] = 0.0;
      }
      if (v138)
      {
        *v138 = xmmword_208233B78;
        v138[1] = unk_208233B88;
        v138[2] = xmmword_208233B98;
      }
      if (v140)
      {
        *(_QWORD *)(v140 + 64) = 0;
        *(_OWORD *)(v140 + 32) = 0u;
        *(_OWORD *)(v140 + 48) = 0u;
        *(_OWORD *)v140 = 0u;
        *(_OWORD *)(v140 + 16) = 0u;
        v141 = *(_DWORD *)(a1 + 992);
        if (v141 == -1)
          goto LABEL_251;
        goto LABEL_387;
      }
      goto LABEL_386;
    }
LABEL_320:
    v154 = *(_QWORD *)&v375.f64[0];
    if (v27 <= 0xB)
    {
      v191 = *(_QWORD *)&v375.f64[1];
      v192 = v376;
      v157 = v377;
      v193 = v378;
      if (v27 <= 9)
      {
        if (v27 == 9)
        {
          v152 = sub_2081158C4(a1, *(uint64_t *)&v375.f64[0], *(float64x2_t **)&v375.f64[1], v376, v377, v378, _Q0.f64[0], v133, _Q2.f64[0], v132, (int32x4_t)v23);
        }
        else
        {
          if (v376)
          {
            v376->f64[0] = 0.0;
            v192->f64[1] = 0.0;
            v192[1].f64[0] = 0.0;
          }
          if (v193)
          {
            *(_QWORD *)(v193 + 64) = 0;
            _Q0.f64[0] = 0.0;
            *(_OWORD *)(v193 + 32) = 0u;
            *(_OWORD *)(v193 + 48) = 0u;
            *(_OWORD *)v193 = 0u;
            *(_OWORD *)(v193 + 16) = 0u;
          }
          if (v157)
          {
            v152 = sub_208112DDC(v154, v157, (double *)v191, a1 + 168, 20, _Q0.f64[0], v133, _Q2.f64[0], v132, (int32x4_t)v23);
          }
          else
          {
            v223 = sqrt(*(double *)v191 * *(double *)v191 + *(double *)(v191 + 8) * *(double *)(v191 + 8));
            v152 = sub_2081112B8(v154, (double *)v191, (double *)(a1 + 168), 20, v223, v223, _Q2.f64[0], v132, (int32x4_t)v23);
          }
        }
        goto LABEL_385;
      }
      if (v27 == 10)
      {
        if (v376)
        {
          v376->f64[0] = 0.0;
          v192->f64[1] = 0.0;
          v192[1].f64[0] = 0.0;
        }
        if (v193)
        {
          *(_QWORD *)(v193 + 64) = 0;
          *(_OWORD *)(v193 + 32) = 0u;
          *(_OWORD *)(v193 + 48) = 0u;
          *(_OWORD *)v193 = 0u;
          *(_OWORD *)(v193 + 16) = 0u;
        }
        v197 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
        v152 = sub_2081121D8(v154, v191, a1 + 168, (double *)(a1 + 280), 0x14u, v197);
        if (!v157)
          goto LABEL_385;
        if ((v152 & 1) == 0)
          return 0;
        if (!sub_2081117AC(&v379, (uint64_t)&v362, &v360, v154, (double *)(a1 + 168), v197))
          return 0;
        v198.i64[0] = *(_QWORD *)(v154 + 16);
        v199 = *(float64x2_t *)v154;
        *(_QWORD *)&v200 = v363.i64[0];
        _Q3 = (float64x2_t)v362;
        v365 = v199;
        v366 = v198.i64[0];
        v361 = 0;
        *(_QWORD *)&_Q5.f64[0] = v198.i64[0];
        _Q5.f64[1] = v199.f64[0];
        _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v364, _Q5), (float64x2_t)vzip2q_s64(v364, v363), (float64x2_t)vextq_s8(*(int8x16_t *)&v199, v198, 8uLL)).f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v363, v199), 1), (float64x2_t)v364, v199).f64[0], *(double *)v363.i64)) < 0.00000001)return 0;
LABEL_346:
        *(_QWORD *)&v208 = vextq_s8(v362, v362, 8uLL).u64[0];
        *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v363, (int8x16_t)v363, 8uLL).u64[0];
        *((_QWORD *)&v208 + 1) = v364.i64[0];
        *((_QWORD *)&v200 + 1) = vextq_s8((int8x16_t)v364, (int8x16_t)v364, 8uLL).u64[0];
        v367 = _Q3;
        v368 = v199.f64[0];
        v370 = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u64[0];
        v369 = v208;
        v372 = v198.i64[0];
        v371 = v200;
        sub_207CC48B4((uint64_t)&v356);
        *(double *)&v209 = v357;
        v210 = vzip2q_s64(v356, v358);
        *((_QWORD *)&v209 + 1) = v359;
        *(int64x2_t *)v157 = vzip1q_s64(v356, v358);
        *(int64x2_t *)(v157 + 16) = v210;
        *(_OWORD *)(v157 + 32) = v209;
        v141 = *(_DWORD *)(a1 + 992);
        if (v141 == -1)
        {
LABEL_251:
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v141 = *(_DWORD *)(a1 + 992);
          if (v141 > 7)
          {
LABEL_253:
            if (v141 > 0xB)
            {
              if (v141 <= 0xD)
              {
                if (v141 != 13 || *(double *)&v353 < 0.00000001)
                  return 0;
                _Q0 = vdivq_f64(v352, (float64x2_t)vdupq_lane_s64(v353, 0));
                v144 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
                _D3 = _Q0.f64[1];
                __asm { FMLA            D2, D3, V0.D[1] }
                v147 = v144 * (_D2 * v144);
                v375 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v147* (*(double *)(a1 + 168)+ v144 * *(double *)(a1 + 224)+ v147* (*(double *)(a1 + 176)+ v144 * *(double *)(a1 + 232)+ v147* (*(double *)(a1 + 184)+ v144 * *(double *)(a1 + 240)+ v147* (*(double *)(a1 + 192)+ v144 * *(double *)(a1 + 248)+ v147* (*(double *)(a1 + 200)+ v144 * *(double *)(a1 + 256)+ v147
                                             * (*(double *)(a1 + 208)
                                              + v144 * *(double *)(a1 + 264)
                                              + v147
                                              * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v144 + v147 * 0.0)))))))
                                        / 100.0
                                        + 1.0),
                                        0));
                v19 = *(_DWORD *)(a1 + 992);
                if (v19 != -1)
                  goto LABEL_449;
                goto LABEL_393;
              }
              if (v141 == 14)
              {
                v142 = sub_208111A60(&v375, (uint64_t)&v352, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
                goto LABEL_447;
              }
              _D2 = *(_QWORD *)(a1 + 944);
              _V7.D[1] = v352.f64[1];
              v181 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), v352.f64[0]), *(float64x2_t *)(a1 + 928), v352, 1), *v348, *(double *)&v353);
              __asm { FMLA            D0, D2, V7.D[1] }
              *(double *)v363.i64 = _D0 + *(double *)(a1 + 968) * *(double *)&v353;
              v362 = (int8x16_t)v181;
              sub_20810F6CC(*(_QWORD *)(a1 + 888), (uint64_t)&v362, 30, 0, 0, (uint64_t)&v367, 0.00000001, v181);
              if (!(_BYTE)v369)
                return 0;
              v183 = (const double *)(a1 + 904);
              v384 = vld3q_f64(v183);
              _Q5 = *v348;
              v185 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v384.val[0], v367.f64[0]), v384.val[1], v367, 1), v384.val[2], v368);
              v384.val[1].f64[0] = v367.f64[1];
              __asm { FMLA            D1, D2, V5.D[1] }
              v186 = v384.val[0].f64[0] + *(double *)(a1 + 968) * v368;
              v357 = v186;
              v356 = (int64x2_t)v185;
              if (v186 < 0.0)
                return 0;
              v356 = (int64x2_t)vsubq_f64(v185, vmulq_n_f64(*(float64x2_t *)(a1 + 976), v186));
              if ((sub_208111A60(&v375, (uint64_t)&v356, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) == 0)return 0;
              v178 = *(float64x2_t *)(a1 + 976);
            }
            else
            {
              if (v141 <= 9)
              {
                if (v141 != 9)
                {
                  _V0.D[1] = v352.f64[1];
                  _D1 = v352.f64[1];
                  __asm { FMLA            D7, D1, V0.D[1] }
                  v162 = sqrt(_D7);
                  v163 = fabs(*(double *)&v353);
                  v164 = fabs(v162);
                  v165 = v163 / v164;
                  if (v163 >= v164)
                    v165 = v164 / v163;
                  v166 = (v164 - v163) / (v163 + v164);
                  if (v163 >= v164)
                    v166 = -v166;
                  if (v165 > 0.414213562)
                    v167 = 1;
                  else
                    v167 = 2;
                  if (v165 > 0.414213562)
                    v168 = -1;
                  else
                    v168 = 1;
                  if (v165 <= 0.414213562)
                    v166 = v165;
                  if (_D7 >= 0.00000001)
                  {
                    if (v163 < v164)
                      v168 = -v168;
                    else
                      v167 = v165 > 0.414213562;
                    v211 = v162 == INFINITY && v163 == INFINITY;
                    v212 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v166 * v166), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v166 * v166), (float64x2_t)xmmword_208233A20), v166 * v166 * (v166 * v166))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v166 * v166), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v166 * v166), (float64x2_t)xmmword_208233A30), v166 * v166 * (v166 * v166))),
                               v166 * v166 * (v166 * v166) * (v166 * v166 * (v166 * v166))));
                    v213 = v166 + v166 * vdivq_f64(v212, (float64x2_t)vdupq_laneq_s64((int64x2_t)v212, 1)).f64[0];
                    if (v211)
                      v213 = 0.785398163;
                    if (v162 == 0.0 && *(double *)&v353 == 0.0)
                      v215 = 0.0;
                    else
                      v215 = v213;
                    if (v353 < 0)
                    {
                      v167 = 4 - v167;
                      v168 = -v168;
                    }
                    if (v162 < 0.0)
                      v167 = -v167;
                    v216 = (double)v167;
                    if (v162 >= 0.0)
                      v217 = v168;
                    else
                      v217 = -v168;
                    v218 = v216 * 3.061617e-17 + v216 * 0.785398163 + v215 * (double)v217;
                    v169 = 1.0
                         / v162
                         * (v218
                          * (v218
                           * v218
                           * (*(double *)(a1 + 168)
                            + v218
                            * v218
                            * (*(double *)(a1 + 176)
                             + v218
                             * v218
                             * (*(double *)(a1 + 184)
                              + v218
                              * v218
                              * (*(double *)(a1 + 192)
                               + v218
                               * v218
                               * (*(double *)(a1 + 200)
                                + v218 * v218 * (*(double *)(a1 + 208) + v218 * v218 * *(double *)(a1 + 216)))))))
                           + 1.0));
                  }
                  else
                  {
                    v169 = 1.0 / *(double *)&v353;
                  }
                  v219 = vmulq_n_f64(v352, v169);
                  v220 = *(double *)a1;
                  v221 = v219.f64[1];
                  v222 = *(double *)(a1 + 32);
                  goto LABEL_416;
                }
                v142 = sub_208116140(a1, &v375, &v352);
LABEL_447:
                if ((v142 & 1) == 0)
                  return 0;
LABEL_448:
                v19 = *(_DWORD *)(a1 + 992);
                if (v19 != -1)
                {
LABEL_449:
                  if (v19 <= 7)
                    goto LABEL_450;
LABEL_395:
                  v220 = *(double *)a1;
                  v219.f64[0] = v375.f64[0];
                  if (v19 > 0xB)
                  {
                    v224.f64[0] = *(double *)(a1 + 16) + v220 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
                    v224.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v375.f64[1];
                    if (v19 <= 0xD)
                    {
                      if (v19 == 13)
                        v19 = 13;
                      else
                        v19 = 12;
                    }
                    goto LABEL_517;
                  }
                  if (v19 <= 9)
                  {
                    v221 = v375.f64[1];
                    v222 = *(double *)(a1 + 32);
                    if (v19 == 9)
                    {
                      v224.f64[0] = *(double *)(a1 + 16) + v220 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
                      v224.f64[1] = v375.f64[1] * v222 + *(double *)(a1 + 40);
                      v19 = 9;
                      goto LABEL_517;
                    }
LABEL_416:
                    v224.f64[0] = *(double *)(a1 + 16) + v220 * v219.f64[0] + *(double *)(a1 + 8) * v221;
                    v224.f64[1] = v221 * v222 + *(double *)(a1 + 40);
                    v19 = 8;
LABEL_517:
                    _D2 = vsubq_f64(v351, v224).f64[1];
                    __asm { FMLA            D1, D2, V0.D[1] }
                    if (_D1 > v12 * v12)
                      return 0;
                    v20 = v20 + 0.01;
                    if (v20 > v15)
                      return 1;
                    continue;
                  }
                  v224.f64[0] = *(double *)(a1 + 16) + v220 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
                  v224.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v375.f64[1];
                  v232 = v19 == 10;
                  v233 = 10;
LABEL_460:
                  if (v232)
                    v19 = v233;
                  else
                    v19 = v233 + 1;
                  goto LABEL_517;
                }
LABEL_393:
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  abort();
                }
                v19 = *(_DWORD *)(a1 + 992);
                if (v19 > 7)
                  goto LABEL_395;
LABEL_450:
                if (v19 <= 3)
                {
                  if (v19 <= 1)
                  {
                    if (!v19)
                    {
                      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
                      abort();
                    }
                    v224.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
                    v224.f64[1] = v375.f64[1] * *(double *)(a1 + 32) + *(double *)(a1 + 40);
                    v19 = 1;
                    goto LABEL_517;
                  }
                  v229 = v375;
                  if (v19 == 2)
                  {
LABEL_516:
                    v224.f64[0] = *(double *)(a1 + 16)
                                + *(double *)a1 * v229.f64[0]
                                + vmuld_lane_f64(*(double *)(a1 + 8), v229, 1);
                    v224.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), v229, 1) + *(double *)(a1 + 40);
                    v19 = 2;
                    goto LABEL_517;
                  }
                  goto LABEL_513;
                }
                v256 = *(double *)a1;
                v257.f64[0] = v375.f64[0];
                if (v19 > 5)
                {
                  v224.f64[0] = *(double *)(a1 + 16) + v256 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
                  v224.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v375.f64[1];
                  v232 = v19 == 6;
                  v233 = 6;
                  goto LABEL_460;
                }
                v258 = v375.f64[1];
                v259 = *(double *)(a1 + 32);
                if (v19 == 5)
                {
                  v224.f64[0] = *(double *)(a1 + 16) + v256 * v375.f64[0] + *(double *)(a1 + 8) * v375.f64[1];
                  v224.f64[1] = v375.f64[1] * v259 + *(double *)(a1 + 40);
                  v19 = 5;
                  goto LABEL_517;
                }
                goto LABEL_489;
              }
              if (v141 == 10)
              {
                v142 = sub_208111528(&v375, (uint64_t)&v352, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
                goto LABEL_447;
              }
              _D2 = *(_QWORD *)(a1 + 720);
              _V7.D[1] = v352.f64[1];
              v172 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v352.f64[0]), *(float64x2_t *)(a1 + 704), v352, 1), *(float64x2_t *)(a1 + 728), *(double *)&v353);
              __asm { FMLA            D0, D2, V7.D[1] }
              *(double *)v363.i64 = _D0 + *(double *)(a1 + 744) * *(double *)&v353;
              v362 = (int8x16_t)v172;
              sub_20810F6CC(*(_QWORD *)(a1 + 664), (uint64_t)&v362, 30, 0, 0, (uint64_t)&v367, 0.00000001, v172);
              if (!(_BYTE)v369)
                return 0;
              v174 = (const double *)(a1 + 680);
              v383 = vld3q_f64(v174);
              v174 += 6;
              _Q5 = *(_OWORD *)v174;
              v176 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v383.val[0], v367.f64[0]), v383.val[1], v367, 1), v383.val[2], v368);
              v383.val[1].f64[0] = v367.f64[1];
              __asm { FMLA            D1, D2, V5.D[1] }
              v177 = v383.val[0].f64[0] + *(double *)(a1 + 744) * v368;
              v356 = (int64x2_t)v176;
              v357 = v177;
              if (v177 < 0.0)
                return 0;
              v356 = (int64x2_t)vsubq_f64(v176, vmulq_n_f64(*(float64x2_t *)(a1 + 752), v177));
              if ((sub_208111528(&v375, (uint64_t)&v356, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) == 0)return 0;
              v178 = *(float64x2_t *)(a1 + 752);
            }
            v375 = vaddq_f64(v178, v375);
            goto LABEL_448;
          }
LABEL_388:
          if (v141 <= 3)
          {
            if (v141 <= 1)
            {
              if (!v141)
              {
                sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
                abort();
              }
              if (*(double *)&v353 < 0.00000001)
                return 0;
              v375 = vmulq_n_f64(v352, 1.0 / *(double *)&v353);
              v19 = *(_DWORD *)(a1 + 992);
              if (v19 != -1)
                goto LABEL_449;
              goto LABEL_393;
            }
            if (v141 == 2)
            {
              if (*(_DWORD *)(a1 + 212))
              {
                if (*(double *)&v353 < 0.00000001)
                  return 0;
                _Q2 = vmulq_n_f64(v352, 1.0 / *(double *)&v353);
                _D0 = vmuld_lane_f64(1.0 / *(double *)&v353, v352, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v229 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
                v375.f64[0] = v229.f64[0];
              }
              else
              {
                if (*(double *)&v353 < 0.00000001)
                  return 0;
                _Q2 = vmulq_n_f64(v352, 1.0 / *(double *)&v353);
                _D0 = vmuld_lane_f64(1.0 / *(double *)&v353, v352, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v229 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
              }
              goto LABEL_516;
            }
            _V0.D[1] = v352.f64[1];
            _D1 = v352.f64[1];
            __asm { FMLA            D7, D1, V0.D[1] }
            v248 = sqrt(_D7);
            v249 = fabs(*(double *)&v353);
            v250 = fabs(v248);
            v251 = v249 / v250;
            if (v249 >= v250)
              v251 = v250 / v249;
            v252 = (v250 - v249) / (v249 + v250);
            if (v249 >= v250)
              v252 = -v252;
            if (v251 > 0.414213562)
              v253 = 1;
            else
              v253 = 2;
            if (v251 > 0.414213562)
              v254 = -1;
            else
              v254 = 1;
            if (v251 <= 0.414213562)
              v252 = v251;
            if (_D7 >= 0.00000001)
            {
              if (v249 < v250)
                v254 = -v254;
              else
                v253 = v251 > 0.414213562;
              v273 = v248 == INFINITY && v249 == INFINITY;
              v274 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v252 * v252), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v252 * v252), (float64x2_t)xmmword_208233A20), v252 * v252 * (v252 * v252))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v252 * v252), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v252 * v252), (float64x2_t)xmmword_208233A30), v252 * v252 * (v252 * v252))),
                         v252 * v252 * (v252 * v252) * (v252 * v252 * (v252 * v252))));
              v275 = v252 + v252 * vdivq_f64(v274, (float64x2_t)vdupq_laneq_s64((int64x2_t)v274, 1)).f64[0];
              if (v273)
                v275 = 0.785398163;
              if (v248 == 0.0 && *(double *)&v353 == 0.0)
                v277 = 0.0;
              else
                v277 = v275;
              if (v353 < 0)
              {
                v253 = 4 - v253;
                v254 = -v254;
              }
              if (v248 < 0.0)
                v253 = -v253;
              v278 = (double)v253;
              if (v248 >= 0.0)
                v279 = v254;
              else
                v279 = -v254;
              v280 = v278 * 3.061617e-17 + v278 * 0.785398163 + v277 * (double)v279;
              v281 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v18, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v18, *(int64x2_t *)(a1 + 184)), v280 * v280)), v280 * v280);
              v255 = 1.0 / v248 * (v280 + v280 * (v281.f64[0] + vmuld_lane_f64(v280 * v280 * (v280 * v280), v281, 1)));
            }
            else
            {
              v255 = 1.0 / *(double *)&v353;
            }
            v229 = vmulq_n_f64(v352, v255);
LABEL_513:
            v224.f64[0] = *(double *)(a1 + 16)
                        + *(double *)a1 * v229.f64[0]
                        + vmuld_lane_f64(*(double *)(a1 + 8), v229, 1);
            v224.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), v229, 1) + *(double *)(a1 + 40);
            v19 = 3;
            goto LABEL_517;
          }
          if (v141 > 5)
          {
            if (v141 != 6)
            {
              v142 = sub_2081155AC(a1, &v375, &v352);
              goto LABEL_447;
            }
            v230 = vaddq_f64(vdivq_f64(v352, (float64x2_t)vdupq_lane_s64(v353, 0)), *(float64x2_t *)(a1 + 192));
            v231 = sqrt(vaddvq_f64(vmulq_f64(v230, v230)));
            v375 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v230, v231* (v231* (*(double *)(a1 + 168) + v231 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v231)))+ 1.0));
            v19 = *(_DWORD *)(a1 + 992);
            if (v19 != -1)
              goto LABEL_449;
            goto LABEL_393;
          }
          if (v141 == 5)
          {
            v225 = v352.f64[0] * v352.f64[0] + v352.f64[1] * v352.f64[1];
            if (v225 >= 0.00000001)
            {
              v260 = sqrt(v225);
              if (v260 <= *(double *)&v353)
              {
                v288 = v260 / *(double *)&v353 * 0.785398163
                     - v260
                     / *(double *)&v353
                     * (v260 / *(double *)&v353 + -1.0)
                     * (v260 / *(double *)&v353 * 0.0663008339 + 0.244711287);
              }
              else
              {
                if (v260 <= -*(double *)&v353)
                {
                  v262 = v260 / *(double *)&v353 * 0.785398163
                       - v260
                       / *(double *)&v353
                       * (-1.0 - v260 / *(double *)&v353)
                       * (v260 / *(double *)&v353 * -0.0663008339 + 0.244711287);
                  v263 = 3.14159265;
                }
                else
                {
                  v261 = fabs(*(double *)&v353 / v260);
                  v262 = *(double *)&v353 / v260 * (v261 + -1.0) * (v261 * 0.0663008339 + 0.244711287)
                       + *(double *)&v353 / v260 * -0.785398163;
                  v263 = 1.57079633;
                }
                v288 = v262 + v263;
              }
              v291 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v18, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v18, *(int64x2_t *)(a1 + 184)), v288 * v288)), v288 * v288);
              v292 = (v288 + v288 * (v291.f64[0] + vmuld_lane_f64(v288 * v288 * (v288 * v288), v291, 1))) / v260;
              v375.f64[0] = v352.f64[0] * v292;
              v375.f64[1] = v352.f64[1] * v292;
              v19 = *(_DWORD *)(a1 + 992);
              if (v19 != -1)
                goto LABEL_449;
            }
            else
            {
              if (*(double *)&v353 == 0.0)
                return 0;
              v375.f64[0] = v352.f64[0] * (1.0 / *(double *)&v353);
              v375.f64[1] = v352.f64[1] * (1.0 / *(double *)&v353);
              v19 = *(_DWORD *)(a1 + 992);
              if (v19 != -1)
                goto LABEL_449;
            }
            goto LABEL_393;
          }
          _V0.D[1] = v352.f64[1];
          _D1 = v352.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v237 = sqrt(_D7);
          v238 = fabs(*(double *)&v353);
          v239 = fabs(v237);
          v240 = v238 / v239;
          if (v238 >= v239)
            v240 = v239 / v238;
          v241 = (v239 - v238) / (v238 + v239);
          if (v238 >= v239)
            v241 = -v241;
          if (v240 > 0.414213562)
            v242 = 1;
          else
            v242 = 2;
          if (v240 > 0.414213562)
            v243 = -1;
          else
            v243 = 1;
          if (v240 <= 0.414213562)
            v241 = v240;
          if (_D7 >= 0.00000001)
          {
            if (v238 < v239)
              v243 = -v243;
            else
              v242 = v240 > 0.414213562;
            v264 = v237 == INFINITY && v238 == INFINITY;
            v265 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v241 * v241), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v241 * v241), (float64x2_t)xmmword_208233A20), v241 * v241 * (v241 * v241))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v241 * v241), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v241 * v241), (float64x2_t)xmmword_208233A30), v241 * v241 * (v241 * v241))),
                       v241 * v241 * (v241 * v241) * (v241 * v241 * (v241 * v241))));
            v266 = v241 + v241 * vdivq_f64(v265, (float64x2_t)vdupq_laneq_s64((int64x2_t)v265, 1)).f64[0];
            if (v264)
              v266 = 0.785398163;
            if (v237 == 0.0 && *(double *)&v353 == 0.0)
              v268 = 0.0;
            else
              v268 = v266;
            if (v353 < 0)
            {
              v242 = 4 - v242;
              v243 = -v243;
            }
            if (v237 < 0.0)
              v242 = -v242;
            v269 = (double)v242;
            if (v237 >= 0.0)
              v270 = v243;
            else
              v270 = -v243;
            v271 = v269 * 3.061617e-17 + v269 * 0.785398163 + v268 * (double)v270;
            v272 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v18, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v18, *(int64x2_t *)(a1 + 184)), v271 * v271)), v271 * v271);
            v244 = 1.0 / v237 * (v271 + v271 * (v272.f64[0] + vmuld_lane_f64(v271 * v271 * (v271 * v271), v272, 1)));
          }
          else
          {
            v244 = 1.0 / *(double *)&v353;
          }
          v257 = vmulq_n_f64(v352, v244);
          v256 = *(double *)a1;
          v258 = v257.f64[1];
          v259 = *(double *)(a1 + 32);
LABEL_489:
          v224.f64[0] = *(double *)(a1 + 16) + v256 * v257.f64[0] + *(double *)(a1 + 8) * v258;
          v224.f64[1] = v258 * v259 + *(double *)(a1 + 40);
          v19 = 4;
          goto LABEL_517;
        }
LABEL_387:
        if (v141 > 7)
          goto LABEL_253;
        goto LABEL_388;
      }
      v152 = sub_208116474(a1, *(uint64_t *)&v375.f64[0], *(float64x2_t **)&v375.f64[1], v376, v377, v378);
LABEL_385:
      if ((v152 & 1) == 0)
        return 0;
LABEL_386:
      v141 = *(_DWORD *)(a1 + 992);
      if (v141 == -1)
        goto LABEL_251;
      goto LABEL_387;
    }
    break;
  }
  if (v27 > 0xD)
  {
    v155 = *(_QWORD *)&v375.f64[1];
    v158 = v376;
    v157 = v377;
    v156 = v378;
    if (v27 != 14)
    {
LABEL_348:
      v152 = sub_208117124(a1, v154, (float64x2_t *)v155, v158, v157, v156);
      goto LABEL_385;
    }
    if (v376)
    {
      v376->f64[0] = 0.0;
      v158->f64[1] = 0.0;
      v158[1].f64[0] = 0.0;
    }
    if (v156)
    {
      *(_QWORD *)(v156 + 64) = 0;
      *(_OWORD *)(v156 + 32) = 0u;
      *(_OWORD *)(v156 + 48) = 0u;
      *(_OWORD *)v156 = 0u;
      *(_OWORD *)(v156 + 16) = 0u;
    }
    v204 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
    v205 = sub_2081122E4(v154, v155, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v204);
    if (v157)
    {
      if ((v205 & 1) == 0)
        return 0;
      if (!sub_208111C2C(&v379, (uint64_t)&v362, &v360, v154, (double *)(a1 + 168), v204))
        return 0;
      v198.i64[0] = *(_QWORD *)(v154 + 16);
      v199 = *(float64x2_t *)v154;
      *(_QWORD *)&v200 = v363.i64[0];
      _Q3 = (float64x2_t)v362;
      v365 = v199;
      v366 = v198.i64[0];
      v361 = 0;
      *(_QWORD *)&_Q5.f64[0] = v198.i64[0];
      _Q5.f64[1] = v199.f64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v364, _Q5), (float64x2_t)vzip2q_s64(v364, v363), (float64x2_t)vextq_s8(*(int8x16_t *)&v199, v198, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v363, v199), 1), (float64x2_t)v364, v199).f64[0], *(double *)v363.i64)) < 0.00000001)return 0;
      goto LABEL_346;
    }
    if (!v205)
      return 0;
    goto LABEL_386;
  }
  v194 = v376;
  v195 = (_OWORD *)v377;
  v196 = v378;
  if (v27 == 13)
  {
    v152 = sub_208118068((double *)a1, *(uint64_t *)&v375.f64[0], *(uint64_t *)&v375.f64[1], v376, v377, v378);
    goto LABEL_385;
  }
  if (v376)
  {
    v376->f64[0] = 0.0;
    v194->f64[1] = 0.0;
    v194[1].f64[0] = 0.0;
  }
  if (v196)
  {
    *(_QWORD *)(v196 + 64) = 0;
    *(_OWORD *)(v196 + 32) = 0u;
    *(_OWORD *)(v196 + 48) = 0u;
    *(_OWORD *)v196 = 0u;
    *(_OWORD *)(v196 + 16) = 0u;
  }
  *(_QWORD *)v154 = 0;
  *(_QWORD *)(v154 + 8) = 0;
  *(_QWORD *)(v154 + 16) = 0;
  if (v195)
  {
    v195[1] = 0u;
    v195[2] = 0u;
    *v195 = 0u;
  }
  return 0;
}

uint64_t sub_20811B8AC(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, _QWORD *a5, char **a6, char a7, float64x2_t a8)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  double v42;
  unint64_t v43;
  int64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  float64x2_t *v54;
  unsigned int v55;
  float64x2_t *v56;
  float64x2_t v57;
  unint64_t v58;
  double *v59;
  float64_t *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64_t v66;
  char *v67;
  __int128 v68;
  float64x2_t v69;
  float64_t v70;
  char *v71;
  float64x2_t v72;
  float64_t v73;
  char *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  float64_t *v79;
  int v80;
  double *v81;
  char *v82;
  double *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  double *v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  double *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  float64x2_t *v106;
  char *v107;
  char v108;
  char *v109;
  double *v110;
  unsigned int v111;
  double *v112;
  double *v113;
  double **v114;
  double *v115;
  double *v116;
  double **v117;
  double *v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double *v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  int64_t v136;
  unint64_t v137;
  unint64_t v138;
  double *v139;
  unint64_t v140;
  uint64_t v141;
  double *v142;
  double v143;
  unint64_t v144;
  double *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  double *v150;
  double *v151;
  double v152;
  double *v153;
  double v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  float64x2_t v159;
  __int128 v160;
  __int128 v161;
  int8x16_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  float64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  double *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  float64x2_t v184;
  __int128 v185;
  float64x2_t v186;
  __int128 v187;
  int8x16_t v188;
  float64x2_t *v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  __int128 v195;
  float64x2_t v196;
  __int128 v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64_t v202;
  float64x2_t v203;
  float64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  float64x2_t v210;
  __int128 v211;
  float64x2_t v212;
  __int128 v213;
  int8x16_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  float64x2_t v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  int8x16_t v231;
  double *v232;
  double v233;
  double v234;
  float64x2_t *v235;
  double v236;
  double *v238;
  double v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  __int128 v246;
  float64x2_t v247;
  int8x16_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  float64_t v261;
  __int128 v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  float64x2_t v268;
  __int128 v269;
  __int128 v270;
  int8x16_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  float64_t v284;
  __int128 v285;
  uint64_t v286;
  double v287;
  double v288;
  double *v289;
  double v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  float64x2_t v295;
  __int128 v296;
  float64x2_t v297;
  __int128 v298;
  int8x16_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  float64_t v312;
  __int128 v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  double *v319;
  double v320;
  double v321;
  double *v322;
  double *v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  float64x2_t v328;
  __int128 v329;
  float64x2_t v330;
  __int128 v331;
  int8x16_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  float64x2_t v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  int8x16_t v349;
  char *v350;
  size_t v351;
  double *v352;
  double *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  void *v364;
  double v365;
  double *v366;
  unint64_t v367;
  uint64_t v368;
  double *v369;
  double v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  char *v389;
  char *v390;
  unint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  char *v399;
  char *v400;
  unint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  char *v410;
  unint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  double v421;
  char *v422;
  char *v423;
  int v424;
  double v426;
  float64x2_t v427;
  double v428;
  int8x16_t v429;
  double v430;
  double v431;
  float64x2_t v432;
  double v433;
  __int128 v434;
  __int128 v435;
  float64x2_t v436;
  double v437;
  double v438;
  uint64_t v439;
  float64x2_t v440;
  double v441;
  double v447;
  double v448;
  double v449;
  unint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  _BYTE *v457;
  _DWORD *v458;
  int64_t v459;
  unint64_t v460;
  char *v461;
  int v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  _OWORD *v466;
  char *v467;
  uint64_t v468;
  __int128 v469;
  char *v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  __int128 v476;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v481;
  double v484;
  double v485;
  double v486;
  double v487;
  __double2 v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v493;
  uint64_t v494;
  unint64_t v495;
  float64x2_t v496;
  float64x2_t v497;
  unint64_t v498;
  _OWORD *v499;
  uint64_t v500;
  __int128 v501;
  __int128 v502;
  char *v503;
  _OWORD *v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  char *v508;
  char *v509;
  __int128 v510;
  __int128 v511;
  void *v512;
  __int128 v513;
  __int128 v514;
  unint64_t v515;
  char *v516;
  _OWORD *v517;
  float64x2_t v518;
  int8x16_t v519;
  float64x2_t v520;
  float64x2_t v521;
  double v522;
  double v523;
  double cosval;
  double v525;
  __double2 v526;
  float64x2_t v527;
  double v528;
  float64_t v529;
  float64_t v530;
  float64_t v531;
  float64_t v532;
  float64_t v533;
  double v534;
  float64_t v535;
  float64_t v536;
  float64_t v537;
  float64_t v538;
  float64_t v539;
  float64_t v540;
  float64_t v541;
  float64_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  unsigned int v553;
  double v554;
  double v555;
  unint64_t v556;
  float64x2_t *v557;
  void *v558;
  float64x2_t v559;
  int8x16_t v560;
  unint64_t v561;
  int8x16_t v562;
  unint64_t v563;
  double v564;
  float64x2_t v565;
  int8x16_t v566;
  unint64_t v567;
  int8x16_t v568;
  double v569;
  int8x16_t v570;
  float64x2_t v571;
  double v572;
  float64x2_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  unint64_t v577;
  float64x2_t v578;
  unint64_t v579;
  float64x2_t v580;
  unint64_t v581;
  float64x2_t v582;
  double v583;
  int8x16_t v584;
  unint64_t v585;
  int8x16_t v586;
  unint64_t v587;
  int8x16_t v588;
  unint64_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  int8x16_t v618;
  int8x16_t v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  double v625;
  float64x2_t v628;
  float64x2_t v630;
  float64x2_t v631;
  double v632;
  double v633;
  double v634;
  double v635;
  double v636;
  float64x2_t v637;
  float64x2_t v638;
  double v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  double v660;
  double v661;
  float v662;
  int8x16_t v663;
  __int128 v664;
  void *v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  double v676;
  double v677;
  double v678;
  double v679;
  __double2 v680;
  float64x2_t v681;
  double v682;
  float64_t v683;
  double v684;
  float64_t v685;
  float64_t v686;
  float64_t v687;
  double v688;
  float64_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  void *v714;
  void *v715;
  void *v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  double v725;
  double v726;
  double v727;
  __double2 v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v742;
  float64x2_t v743;
  double v746;
  double v747;
  double v748;
  __double2 v749;
  float64_t v750;
  double v751;
  float64_t v752;
  double v753;
  float64_t v754;
  float64_t v755;
  float64_t v756;
  double v757;
  float64_t v758;
  double v759;
  float64_t v760;
  double v761;
  float64_t v762;
  float64_t v763;
  float64_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  void *v775;
  void *v776;
  void *v777;
  std::locale::__imp *v778;
  float64x2_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t *v796;
  void *v797;
  unint64_t v799;
  double v800;
  float64x2_t v802;
  float64x2_t v804;
  double v805;
  double v808;
  double v809;
  double v810;
  const char *v811;
  _QWORD *v812;
  _QWORD *v813;
  _QWORD *v814;
  _QWORD *v815;
  _QWORD *v823;
  _QWORD *v824;
  const std::locale::facet *v825;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v834;
  float64x2_t v836;
  float64x2_t v840;
  float64x2_t v841;
  double v842;
  double v843;
  double v844;
  double v845;
  float v846;
  double v847;
  __double2 v848;
  float64x2_t v849;
  double v850;
  float64_t v851;
  float64_t v852;
  float64_t v853;
  float64_t v854;
  float64_t v855;
  double v856;
  float64_t v857;
  float64_t v858;
  float64_t v859;
  float64_t v860;
  float64_t v861;
  float64_t v862;
  float64_t v863;
  float64_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  void *v874;
  void *v875;
  void *v876;
  float64x2_t v877;
  float64x2_t v878;
  double v879;
  double v880;
  float64x2_t v881;
  float64x2_t v882;
  double v883;
  double v884;
  double v885;
  double v886;
  __double2 v887;
  double v888;
  float64_t v889;
  double v890;
  float64_t v891;
  double v892;
  double v893;
  double v894;
  float64_t v895;
  double v896;
  float64_t v897;
  double v898;
  float64_t v899;
  double v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  double v905;
  float64x2_t v906;
  __int128 v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  int64x2_t v915;
  int64x2_t v916;
  int64x2_t v917;
  __int128 v918;
  void *v919;
  void *v920;
  void *v921;
  void *v922;
  void *v923;
  void *v924;
  void *v925;
  float v926;
  float v927;
  float64x2_t v928;
  double v929;
  uint64_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  int8x16_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  unint64_t v939;
  char *__p;
  char *__pa;
  double v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  double v949;
  float64_t v950;
  float64_t v951;
  char v952;
  float64_t v953;
  char *v954;
  unint64_t v955;
  unint64_t v956;
  float64_t v957;
  double v958;
  double v959;
  float64_t v960;
  float64_t v961;
  float64_t v962;
  unint64_t v963;
  float64_t v964;
  char *v965;
  float64_t v966;
  unint64_t v968;
  float64x2_t v969;
  _QWORD *v970;
  unint64_t v971;
  float64x2_t v972;
  uint64_t v973;
  unint64_t v974;
  unint64_t v975;
  unint64_t v976;
  unint64_t v977;
  double v978;
  unint64_t v979;
  double **v980;
  double **v981;
  unint64_t v982;
  unint64_t v983;
  float64x2_t v984;
  char *v985;
  int8x16_t v986;
  unint64_t v987;
  float64x2_t v988;
  float64x2_t v989;
  int8x16_t v990;
  float64x2_t v991;
  char *v992;
  float64_t v993;
  void *v994[2];
  void *v995[2];
  void *v996[2];
  void *v997[2];
  double *v998;
  void *v999[2];
  float64_t v1000;
  void *v1001[2];
  void *v1002[2];
  void *v1003[2];
  unsigned int v1004;
  uint64_t v1005;
  float64_t v1006;
  float64x2_t v1007;
  std::locale::__imp *locale;
  float64_t v1009;
  unint64_t v1010;
  float64_t v1011;
  int8x16_t v1012;
  float64x2_t v1013;
  int8x16_t v1014;
  double v1015;
  double v1016;
  double v1017;
  double v1018;
  float64_t v1019;
  float64_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  char *__dst;
  double __dsta;
  int8x16_t __dstb;
  unint64_t __dstc;
  float64_t __dstd;
  double v1028;
  float64_t v1029;
  unint64_t v1030;
  float64_t v1031;
  unint64_t v1032;
  double v1033;
  unint64_t v1034;
  float64x2_t v1035;
  unint64_t v1036;
  float64_t v1037;
  unint64_t v1038;
  double v1039;
  int8x16_t v1040;
  float64x2_t v1041;
  uint64_t v1042;
  float64_t v1043;
  double v1044;
  double v1045;
  float64_t v1046;
  uint64_t v1047;
  float64_t v1048;
  uint64_t v1049;
  double v1050;
  unint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  __int128 v1054;
  uint64_t v1055;
  float64_t v1056;
  _BYTE __src[264];
  void *v1058;
  void *v1059;
  void **v1060;
  unint64_t v1061;
  float64x2_t v1062;
  __int128 v1063;
  __int128 v1064;
  unint64_t v1065;
  double *v1066;
  void *v1067;
  char *v1068;
  char *v1069;
  float64x2_t v1070;
  void *v1071;
  void *v1072;
  _OWORD *v1073;
  __int128 v1074;
  double v1075;
  double v1076;
  double v1077;
  void *v1078[2];
  char *v1079;
  float64x2_t v1080;
  _BYTE v1081[32];
  _BYTE v1082[40];
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  int8x16_t v1087;
  __int128 v1088;
  _BYTE v1089[32];
  uint64_t v1090;
  __int128 v1091;
  __int128 v1092;
  uint64_t v1093;
  __int16 v1094;
  char v1095;
  void *v1096;
  void *v1097;
  void *v1098;
  float64x2_t v1099;
  _BYTE v1100[32];
  float64x2_t v1101[11];
  float64x2_t v1102;
  int8x16_t v1103;
  int8x16_t v1104;
  int8x16_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  std::locale v1109[2];
  _OWORD v1110[2];
  float64x2_t v1111;
  float64x2_t v1112;
  uint64_t v1113;

  v1113 = *MEMORY[0x24BDAC8D0];
  if (((a2[2] - *a2) & 8) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 40, (uint64_t)"xs.size() % 2 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_546;
  }
  v14 = (a3[1] - *a3) >> 3;
  if (0xAAAAAAAAAAAAAAABLL * v14 >= 0x5555555555555556)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 41, (uint64_t)"Xs.size() % 3 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_546;
    }
    v14 = (a3[1] - *a3) >> 3;
  }
  v15 = *(_QWORD *)a2;
  v16 = (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >> 1;
  if (v16 == v14 / 3)
    goto LABEL_9;
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 42, (uint64_t)"xs.size() / 2 == Xs.size() / 3", 30, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_546:
    abort();
  }
  v15 = *(_QWORD *)a2;
  v16 = (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >> 1;
LABEL_9:
  v17 = *(unint64_t **)(a1 + 32);
  v18 = *(unint64_t **)(a1 + 40);
  if (v17 == v18)
    return 0;
  while (v16 < *v17)
  {
    if (++v17 == v18)
      return 0;
  }
  v973 = a1;
  v970 = a5;
  v930 = a4;
  v952 = a7;
  if (v16)
  {
    if (v16 > 0x666666666666666)
      sub_207CA420C();
    v20 = *a3;
    v21 = (char *)operator new(40 * v16);
    v22 = 0;
    v23 = &v21[40 * v16];
    v24 = v21;
    while (1)
    {
      while (1)
      {
        v26 = (uint64_t *)(v15 + 16 * v22);
        v28 = *v26;
        v27 = v26[1];
        v29 = (uint64_t *)(v20 + 24 * v22);
        v31 = *v29;
        v30 = v29[1];
        v32 = v29[2];
        if (v21 >= v23)
          break;
        *(_QWORD *)v21 = v28;
        *((_QWORD *)v21 + 1) = v27;
        *((_QWORD *)v21 + 2) = v31;
        *((_QWORD *)v21 + 3) = v30;
        v25 = v21 + 40;
        *((_QWORD *)v21 + 4) = v32;
        ++v22;
        v21 += 40;
        if (v22 == v16)
          goto LABEL_38;
      }
      v33 = v24;
      v34 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v24) >> 3);
      v35 = v34 + 1;
      if (v34 + 1 > 0x666666666666666)
        sub_207CA420C();
      __p = v33;
      v36 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v33) >> 3);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x333333333333333)
        v37 = 0x666666666666666;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 > 0x666666666666666)
          sub_207CA3AB8();
        v38 = (char *)operator new(40 * v37);
      }
      else
      {
        v38 = 0;
      }
      v24 = &v38[40 * v34];
      *(_QWORD *)v24 = v28;
      *((_QWORD *)v24 + 1) = v27;
      v23 = &v38[40 * v37];
      *((_QWORD *)v24 + 2) = v31;
      *((_QWORD *)v24 + 3) = v30;
      *((_QWORD *)v24 + 4) = v32;
      v39 = v24 + 40;
      if (v21 == __p)
      {
        v40 = __p;
      }
      else
      {
        v40 = __p;
        do
        {
          a8 = *(float64x2_t *)(v21 - 40);
          v41 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v24 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v24 - 24) = v41;
          *(float64x2_t *)(v24 - 40) = a8;
          v24 -= 40;
          v21 -= 40;
        }
        while (v21 != __p);
        if (!__p)
          goto LABEL_35;
      }
      operator delete(v40);
LABEL_35:
      v25 = v39;
      ++v22;
      v21 = v39;
      if (v22 == v16)
        goto LABEL_38;
    }
  }
  v25 = 0;
  v24 = 0;
LABEL_38:
  v42 = *(double *)(a1 + 24);
  v43 = *(_QWORD *)a1;
  v1032 = *(_QWORD *)(a1 + 8);
  v1038 = *(_QWORD *)(a1 + 16);
  v44 = v25 - v24;
  __pa = v24;
  v45 = v25;
  if (v25 == v24)
  {
    v47 = 0;
    v52 = 0;
    v55 = 12345;
    v992 = 0;
    if (v43)
      goto LABEL_51;
  }
  else
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v44 >> 3) > 0x666666666666666)
      sub_207CA420C();
    v46 = (char *)operator new(v44);
    v47 = v46;
    v48 = 0;
    do
    {
      v49 = &v24[v48];
      v50 = &v46[v48];
      *(_OWORD *)v50 = *(_OWORD *)&v24[v48];
      a8 = *(float64x2_t *)&v24[v48 + 16];
      *((_QWORD *)v50 + 4) = *(_QWORD *)&v24[v48 + 32];
      *((float64x2_t *)v50 + 1) = a8;
      v48 += 40;
    }
    while (v49 + 40 != v45);
    v51 = v48 / 40;
    v52 = &v46[40 * (v48 / 40)];
    if (v48)
    {
      v53 = 0;
      v54 = (float64x2_t *)(v46 + 32);
      v55 = 12345;
      do
      {
        v55 = 214013 * v55 + 2531011;
        v56 = (float64x2_t *)&v46[40 * ((HIWORD(v55) & 0x7FFF) % v51) + 40 * v53];
        v57 = *v56;
        *v56 = v54[-2];
        v54[-2] = v57;
        a8 = v56[1];
        v56[1] = v54[-1];
        v54[-1] = a8;
        a8.f64[0] = v56[2].f64[0];
        v56[2].f64[0] = v54->f64[0];
        v54->f64[0] = a8.f64[0];
        v54 = (float64x2_t *)((char *)v54 + 40);
        ++v53;
        --v51;
      }
      while (v51);
      v992 = v46;
      if (v43)
        goto LABEL_51;
    }
    else
    {
      v55 = 12345;
      v992 = v46;
      if (v43)
        goto LABEL_51;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_550;
  }
LABEL_51:
  if (v43 > v1032
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_550:
    abort();
  }
  v58 = 0xCCCCCCCCCCCCCCCDLL * ((v52 - v47) >> 3);
  v965 = v45;
  v954 = v52;
  if (v58 < 4)
  {
    v998 = 0;
    __dst = 0;
    v985 = 0;
    goto LABEL_97;
  }
  if (v43)
  {
    if (v43 > 0xF83E0F83E0F83ELL)
      sub_207CA420C();
    v59 = (double *)operator new(264 * v43);
    v985 = (char *)&v59[33 * v43];
    v998 = v59;
    if (v1032)
      goto LABEL_58;
  }
  else
  {
    v59 = 0;
    v985 = 0;
    v998 = 0;
    if (v1032)
    {
LABEL_58:
      v963 = v43;
      v1049 = 0;
      v60 = &v1101[2].f64[1];
      __dst = (char *)v59;
      while (1)
      {
        v61 = 0;
        *(_QWORD *)__src = 0;
        memset(&__src[104], 0, 160);
        do
        {
          v55 = 214013 * v55 + 2531011;
          v62 = (HIWORD(v55) & 0x7FFF) % v58;
          v1109[v61].__locale_ = (std::locale::__imp *)v62;
          if (v61
            && (v1109[0].__locale_ == (std::locale::__imp *)v62
             || v61 != 1 && (v1109[1].__locale_ == (std::locale::__imp *)v62 || v61 != 2 && *(_QWORD *)&v1110[0] == v62)))
          {
            --v61;
          }
          ++v61;
        }
        while (v61 < 4);
        v63 = &v992[40 * (uint64_t)v1109[0].__locale_];
        *(_QWORD *)&v1082[32] = *((_QWORD *)v63 + 4);
        v64 = *(float64x2_t *)v63;
        *(_OWORD *)&v1082[16] = *((_OWORD *)v63 + 1);
        v65 = *(float64x2_t *)&v1082[16];
        v66 = *(double *)&v1082[32];
        v67 = &v992[40 * (uint64_t)v1109[1].__locale_];
        *(_QWORD *)&v1082[32] = *((_QWORD *)v67 + 4);
        v68 = *(_OWORD *)v67;
        *(_OWORD *)&v1082[16] = *((_OWORD *)v67 + 1);
        v69 = *(float64x2_t *)&v1082[16];
        v70 = *(double *)&v1082[32];
        v71 = &v992[40 * *(_QWORD *)&v1110[0]];
        *(_QWORD *)&v1082[32] = *((_QWORD *)v71 + 4);
        v72 = *(float64x2_t *)v71;
        *(_OWORD *)&v1082[16] = *((_OWORD *)v71 + 1);
        v77 = *(float64x2_t *)&v1082[16];
        v73 = *(double *)&v1082[32];
        v74 = &v992[40 * *((_QWORD *)&v1110[0] + 1)];
        *(_QWORD *)&v1082[32] = *((_QWORD *)v74 + 4);
        v1101[0] = v64;
        v76 = *(float64x2_t *)v74;
        v75 = *((float64x2_t *)v74 + 1);
        v1101[1] = v65;
        *(_OWORD *)v60 = v68;
        *(float64x2_t *)((char *)&v1101[3] + 8) = v69;
        v1101[5] = v72;
        v1101[6] = v77;
        *(float64x2_t *)&v1082[16] = v75;
        *(float64x2_t *)((char *)&v1101[7] + 8) = v76;
        a8.f64[1] = v75.f64[1];
        *(float64x2_t *)((char *)&v1101[8] + 8) = v75;
        v77.f64[0] = v1101[0].f64[0] * (v1101[3].f64[0] - v72.f64[1]);
        v1101[2].f64[0] = v66;
        v1101[4].f64[1] = v70;
        v1101[7].f64[0] = v73;
        v1101[9].f64[1] = *(float64_t *)&v1082[32];
        v78 = v77.f64[0] + v1101[2].f64[1] * (v72.f64[1] - v1101[0].f64[1]);
        a8.f64[0] = fabs(v72.f64[0] * (v1101[0].f64[1] - v1101[3].f64[0]) + v78);
        if (a8.f64[0] < 0.001)
          goto LABEL_60;
        v79 = v60;
        v69.f64[0] = v72.f64[1] - v1101[0].f64[1];
        v80 = sub_208127878(&__src[8], v1101, (uint64_t)v60, &v1101[5], &v1101[7].f64[1], &v1101[1], (float64x2_t *)&v1101[3].f64[1], (uint64_t)&v1101[6], a8, v78, v69, v72.f64[0], v77, &v1101[8].f64[1]);
        *(float64x2_t *)&__src[104] = v1101[0];
        *(float64x2_t *)&__src[120] = v1101[1];
        *(float64_t *)&__src[136] = v1101[2].f64[0];
        *(_OWORD *)&__src[144] = *(_OWORD *)v79;
        *(float64x2_t *)&__src[160] = *(float64x2_t *)((char *)&v1101[3] + 8);
        *(float64_t *)&__src[176] = v1101[4].f64[1];
        *(float64x2_t *)&__src[184] = v1101[5];
        *(float64_t *)&__src[216] = v1101[7].f64[0];
        *(float64x2_t *)&__src[200] = v1101[6];
        *(float64x2_t *)&__src[224] = *(float64x2_t *)((char *)&v1101[7] + 8);
        *(float64_t *)&__src[256] = v1101[9].f64[1];
        a8.f64[1] = v1101[9].f64[0];
        *(float64x2_t *)&__src[240] = *(float64x2_t *)((char *)&v1101[8] + 8);
        if (!v80)
        {
          v60 = v79;
          v24 = __pa;
          goto LABEL_60;
        }
        v81 = (double *)__dst;
        if (__dst >= v985)
          break;
        memcpy(__dst, __src, 0x108uLL);
        v82 = __dst + 264;
        v24 = __pa;
        v83 = v998;
LABEL_91:
        v998 = v83;
        __dst = v82;
        if (0xF83E0F83E0F83E1 * ((v82 - (char *)v83) >> 3) == v963)
          goto LABEL_97;
        v60 = &v1101[2].f64[1];
LABEL_60:
        if (++v1049 == v1032)
          goto LABEL_97;
      }
      v84 = 0xF83E0F83E0F83E1 * ((__dst - (char *)v998) >> 3) + 1;
      if (v84 > 0xF83E0F83E0F83ELL)
        sub_207CA420C();
      if (0x1F07C1F07C1F07C2 * ((v985 - (char *)v998) >> 3) > v84)
        v84 = 0x1F07C1F07C1F07C2 * ((v985 - (char *)v998) >> 3);
      if ((unint64_t)(0xF83E0F83E0F83E1 * ((v985 - (char *)v998) >> 3)) >= 0x7C1F07C1F07C1FLL)
        v85 = 0xF83E0F83E0F83ELL;
      else
        v85 = v84;
      if (v85)
      {
        if (v85 > 0xF83E0F83E0F83ELL)
          sub_207CA3AB8();
        v86 = (char *)operator new(264 * v85);
        v81 = (double *)__dst;
      }
      else
      {
        v86 = 0;
      }
      v87 = &v86[8 * ((__dst - (char *)v998) >> 3)];
      memcpy(v87, __src, 0x108uLL);
      v88 = v87;
      if (v81 == v998)
      {
        v89 = v998;
        v985 = &v86[264 * v85];
        v82 = v87 + 264;
        if (!v998)
          goto LABEL_90;
      }
      else
      {
        v89 = v998;
        do
        {
          v88 -= 264;
          v81 -= 33;
          memcpy(v88, v81, 0x108uLL);
        }
        while (v81 != v998);
        v985 = &v86[264 * v85];
        v82 = v87 + 264;
        if (!v998)
          goto LABEL_90;
      }
      operator delete(v89);
LABEL_90:
      v83 = (double *)v88;
      v24 = __pa;
      goto LABEL_91;
    }
  }
  __dst = (char *)v59;
LABEL_97:
  v90 = v1038;
  v91 = v58 / v1038 + 1;
  if (v58 / v1038 != -1)
  {
    if (v91 >> 60)
      sub_207CA420C();
    v94 = (double *)__dst;
    v92 = (char *)operator new(16 * v91);
    v93 = &v92[16 * v91];
    v95 = v992;
    if (v954 != v992)
      goto LABEL_99;
LABEL_243:
    v108 = 0;
    v1053 = 0;
    v1045 = 0.0;
    v355 = 0;
    v356 = 0;
    v357 = 0;
    v358 = 0;
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 0;
    v1017 = 0.0;
    v1040.i64[0] = 0;
    v1034 = 0;
    v1029 = 0.0;
    a8.f64[0] = 0.0;
    v986 = (int8x16_t)a8;
    *(double *)&v982 = 0.0;
    v978 = 0.0;
    a8.f64[0] = 0.0;
    __dstb = (int8x16_t)a8;
    v1010 = 0;
    v1005 = 0;
    v363 = v970;
    v109 = v965;
    v364 = v95;
    v110 = v998;
    goto LABEL_261;
  }
  v92 = 0;
  v93 = 0;
  v94 = (double *)__dst;
  v95 = v992;
  if (v954 == v992)
    goto LABEL_243;
LABEL_99:
  v96 = &v95[40 * v58];
  v97 = v92;
  v98 = v95;
  do
  {
    while (1)
    {
      v99 = v98;
      v100 = 0xCCCCCCCCCCCCCCCDLL * ((v96 - v98) >> 3);
      if (v100 >= v90)
        v100 = v90;
      v98 += 40 * v100;
      if (v97 >= v93)
        break;
      *(_QWORD *)v97 = v99;
      *((_QWORD *)v97 + 1) = v98;
      v97 += 16;
      if (v98 == v96)
        goto LABEL_120;
    }
    v101 = (v97 - v92) >> 4;
    v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 60)
      sub_207CA420C();
    if ((v93 - v92) >> 3 > v102)
      v102 = (v93 - v92) >> 3;
    if ((unint64_t)(v93 - v92) >= 0x7FFFFFFFFFFFFFF0)
      v103 = 0xFFFFFFFFFFFFFFFLL;
    else
      v103 = v102;
    if (v103 >> 60)
      sub_207CA3AB8();
    v104 = (char *)operator new(16 * v103);
    v105 = &v104[16 * v101];
    *(_QWORD *)v105 = v99;
    *((_QWORD *)v105 + 1) = v98;
    if (v97 == v92)
    {
      v107 = &v104[16 * v101];
      v93 = &v104[16 * v103];
      v97 = v105 + 16;
      if (v92)
        goto LABEL_115;
    }
    else
    {
      v106 = (float64x2_t *)&v104[16 * v101];
      do
      {
        a8 = *((float64x2_t *)v97 - 1);
        v107 = (char *)&v106[-1];
        v106[-1] = a8;
        v97 -= 16;
        --v106;
      }
      while (v97 != v92);
      v93 = &v104[16 * v103];
      v97 = v105 + 16;
      if (v92)
LABEL_115:
        operator delete(v92);
    }
    v92 = v107;
    v90 = v1038;
  }
  while (v98 != v96);
LABEL_120:
  v108 = 0;
  v109 = v965;
  if (v92 == v97)
  {
    v1053 = 0;
    v1045 = 0.0;
    v355 = 0;
    v356 = 0;
    v357 = 0;
    v358 = 0;
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 0;
    v1017 = 0.0;
    v1040.i64[0] = 0;
    v1034 = 0;
    v1029 = 0.0;
    a8.f64[0] = 0.0;
    v986 = (int8x16_t)a8;
    *(double *)&v982 = 0.0;
    v978 = 0.0;
    a8.f64[0] = 0.0;
    __dstb = (int8x16_t)a8;
    v1010 = 0;
    v1005 = 0;
    v24 = __pa;
    v363 = v970;
    v364 = v992;
    v110 = v998;
    goto LABEL_261;
  }
  v110 = v998;
  if (v998 == v94)
  {
    v1053 = 0;
    v1045 = 0.0;
    v355 = 0;
    v356 = 0;
    v357 = 0;
    v358 = 0;
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 0;
    v1017 = 0.0;
    v1040.i64[0] = 0;
    v1034 = 0;
    v1029 = 0.0;
    a8.f64[0] = 0.0;
    v986 = (int8x16_t)a8;
    *(double *)&v982 = 0.0;
    v978 = 0.0;
    a8.f64[0] = 0.0;
    __dstb = (int8x16_t)a8;
    v1010 = 0;
    v1005 = 0;
    v24 = __pa;
    goto LABEL_260;
  }
  v111 = 0;
  v112 = v998;
  v113 = v94;
  v114 = (double **)v92;
  while (2)
  {
    v1004 = v111;
    if (v112 == v113)
    {
      v115 = *v114;
      v116 = v114[1];
      v136 = (char *)v113 - (char *)v112;
      v137 = 0xF83E0F83E0F83E1 * (v113 - v112);
      if (v137 >= 2)
        goto LABEL_141;
      goto LABEL_236;
    }
    v115 = *v114;
    v116 = v114[1];
    v117 = v114;
    v118 = v112;
    if (*v114 == v116)
    {
      v138 = (char *)v113 - (char *)v112 - 264;
      v139 = v112;
      if (v138 < 0x108)
        goto LABEL_566;
      v140 = v138 / 0x108 + 1;
      v139 = &v112[33 * (v140 & 0x1FFFFFFFFFFFFFELL)];
      v141 = v140 & 0x1FFFFFFFFFFFFFELL;
      v142 = v112;
      do
      {
        v143 = v142[33] + 0.0;
        *v142 = *v142 + 0.0;
        v142[33] = v143;
        v142 += 66;
        v141 -= 2;
      }
      while (v141);
      if (v140 != (v140 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_566:
        do
        {
          *v139 = *v139 + 0.0;
          v139 += 33;
        }
        while (v139 != v113);
      }
      v116 = v115;
      v136 = (char *)v113 - (char *)v112;
      v137 = 0xF83E0F83E0F83E1 * (v113 - v112);
      if (v137 < 2)
        goto LABEL_236;
LABEL_141:
      v144 = (v137 - 1) >> 1;
      if (v136 == 528)
        v144 = 1;
      v145 = &v112[33 * v144];
      if (v145 != v113)
      {
        v1051 = v144;
        v980 = v114;
        do
        {
          v146 = 0xF83E0F83E0F83E1 * (v113 - v112);
          if (v146 < 2)
            break;
          if (v146 == 3)
          {
            sub_208123D30((uint64_t)v112, (uint64_t)(v112 + 33), (uint64_t)(v113 - 33));
            break;
          }
          if (v146 == 2)
          {
            v289 = v113 - 33;
            v290 = *v112;
            if (*(v113 - 33) < *v112)
            {
              v291 = *(_OWORD *)(v112 + 1);
              *(_OWORD *)&__src[16] = *(_OWORD *)(v112 + 3);
              *(_OWORD *)__src = v291;
              v292 = *(_OWORD *)(v112 + 5);
              v293 = *(_OWORD *)(v112 + 7);
              v294 = *(_OWORD *)(v112 + 9);
              *(_OWORD *)&__src[80] = *(_OWORD *)(v112 + 11);
              *(_OWORD *)&__src[64] = v294;
              *(_OWORD *)&__src[48] = v293;
              *(_OWORD *)&__src[32] = v292;
              v1080 = *(float64x2_t *)(v112 + 13);
              v295 = *(float64x2_t *)(v112 + 15);
              v1101[1].f64[0] = v112[17];
              v1101[0] = v295;
              v296 = *((_OWORD *)v112 + 10);
              *(_OWORD *)v1078 = *((_OWORD *)v112 + 9);
              *(double *)&v1082[16] = v112[22];
              *(_OWORD *)v1082 = v296;
              v297 = *(float64x2_t *)(v112 + 23);
              v298 = *(_OWORD *)(v112 + 25);
              *(double *)v1110 = v112[27];
              *(_OWORD *)&v1109[0].__locale_ = v298;
              v299 = *(int8x16_t *)(v112 + 30);
              v1111 = *(float64x2_t *)(v112 + 28);
              v1112 = v297;
              *(double *)v1100 = v112[32];
              v1099 = (float64x2_t)v299;
              *v112 = *v289;
              v300 = *((_OWORD *)v113 - 16);
              *(_OWORD *)(v112 + 3) = *((_OWORD *)v113 - 15);
              *(_OWORD *)(v112 + 1) = v300;
              v301 = *((_OWORD *)v113 - 14);
              v302 = *((_OWORD *)v113 - 13);
              v303 = *((_OWORD *)v113 - 12);
              *(_OWORD *)(v112 + 11) = *((_OWORD *)v113 - 11);
              *(_OWORD *)(v112 + 9) = v303;
              *(_OWORD *)(v112 + 7) = v302;
              *(_OWORD *)(v112 + 5) = v301;
              *(_OWORD *)(v112 + 13) = *((_OWORD *)v113 - 10);
              v304 = *((_OWORD *)v113 - 9);
              v112[17] = *(v113 - 16);
              *(_OWORD *)(v112 + 15) = v304;
              *((_OWORD *)v112 + 9) = *(_OWORD *)(v113 - 15);
              v305 = *(_OWORD *)(v113 - 13);
              v112[22] = *(v113 - 11);
              *((_OWORD *)v112 + 10) = v305;
              *(_OWORD *)(v112 + 23) = *((_OWORD *)v113 - 5);
              v306 = *((_OWORD *)v113 - 4);
              v112[27] = *(v113 - 6);
              *(_OWORD *)(v112 + 25) = v306;
              *((_OWORD *)v112 + 14) = *(_OWORD *)(v113 - 5);
              v307 = *(_OWORD *)(v113 - 3);
              v112[32] = *(v113 - 1);
              *((_OWORD *)v112 + 15) = v307;
              *v289 = v290;
              v308 = *(_OWORD *)&__src[16];
              *((_OWORD *)v113 - 16) = *(_OWORD *)__src;
              *((_OWORD *)v113 - 15) = v308;
              v309 = *(_OWORD *)&__src[32];
              v310 = *(_OWORD *)&__src[48];
              v311 = *(_OWORD *)&__src[80];
              *((_OWORD *)v113 - 12) = *(_OWORD *)&__src[64];
              *((_OWORD *)v113 - 11) = v311;
              *((_OWORD *)v113 - 14) = v309;
              *((_OWORD *)v113 - 13) = v310;
              *((float64x2_t *)v113 - 10) = v1080;
              v312 = v1101[1].f64[0];
              *((float64x2_t *)v113 - 9) = v1101[0];
              *(v113 - 16) = v312;
              *(_OWORD *)(v113 - 15) = *(_OWORD *)v1078;
              v313 = *(_OWORD *)v1082;
              *(v113 - 11) = *(double *)&v1082[16];
              *(_OWORD *)(v113 - 13) = v313;
              *((float64x2_t *)v113 - 5) = v1112;
              v314 = *(_QWORD *)&v1110[0];
              *((_OWORD *)v113 - 4) = *(_OWORD *)&v1109[0].__locale_;
              *((_QWORD *)v113 - 6) = v314;
              *(float64x2_t *)(v113 - 5) = v1111;
              a8 = v1099;
              *(v113 - 1) = *(double *)v1100;
              *(float64x2_t *)(v113 - 3) = a8;
            }
            break;
          }
          if ((char *)v113 - (char *)v112 <= 2111)
          {
            while (v112 != v113 - 33)
            {
              v319 = v112;
              v112 += 33;
              if (v319 != v113 && v112 != v113)
              {
                v320 = *v319;
                v321 = *v319;
                v322 = v112;
                v323 = v319;
                do
                {
                  if (*v322 < v321)
                  {
                    v321 = *v322;
                    v323 = v322;
                  }
                  v322 += 33;
                }
                while (v322 != v113);
                if (v323 != v319)
                {
                  v324 = *(_OWORD *)(v319 + 1);
                  *(_OWORD *)&__src[16] = *(_OWORD *)(v319 + 3);
                  *(_OWORD *)__src = v324;
                  v325 = *(_OWORD *)(v319 + 5);
                  v326 = *(_OWORD *)(v319 + 7);
                  v327 = *(_OWORD *)(v319 + 9);
                  *(_OWORD *)&__src[80] = *(_OWORD *)(v319 + 11);
                  *(_OWORD *)&__src[64] = v327;
                  *(_OWORD *)&__src[48] = v326;
                  *(_OWORD *)&__src[32] = v325;
                  v1080 = *(float64x2_t *)(v319 + 13);
                  v328 = *(float64x2_t *)(v319 + 15);
                  v1101[1].f64[0] = v319[17];
                  v1101[0] = v328;
                  v329 = *((_OWORD *)v319 + 10);
                  *(_OWORD *)v1078 = *((_OWORD *)v319 + 9);
                  *(double *)&v1082[16] = v319[22];
                  *(_OWORD *)v1082 = v329;
                  v330 = *(float64x2_t *)(v319 + 23);
                  v331 = *(_OWORD *)(v319 + 25);
                  *(double *)v1110 = v319[27];
                  *(_OWORD *)&v1109[0].__locale_ = v331;
                  v332 = *(int8x16_t *)(v319 + 30);
                  v1111 = *(float64x2_t *)(v319 + 28);
                  v1112 = v330;
                  *(double *)v1100 = v319[32];
                  v1099 = (float64x2_t)v332;
                  *v319 = *v323;
                  v333 = *(_OWORD *)(v323 + 1);
                  *(_OWORD *)(v319 + 3) = *(_OWORD *)(v323 + 3);
                  *(_OWORD *)(v319 + 1) = v333;
                  v334 = *(_OWORD *)(v323 + 5);
                  v335 = *(_OWORD *)(v323 + 7);
                  v336 = *(_OWORD *)(v323 + 9);
                  *(_OWORD *)(v319 + 11) = *(_OWORD *)(v323 + 11);
                  *(_OWORD *)(v319 + 9) = v336;
                  *(_OWORD *)(v319 + 7) = v335;
                  *(_OWORD *)(v319 + 5) = v334;
                  *(_OWORD *)(v319 + 13) = *(_OWORD *)(v323 + 13);
                  v337 = *(_OWORD *)(v323 + 15);
                  v319[17] = v323[17];
                  *(_OWORD *)(v319 + 15) = v337;
                  *((_OWORD *)v319 + 9) = *((_OWORD *)v323 + 9);
                  v338 = *((_OWORD *)v323 + 10);
                  v319[22] = v323[22];
                  *((_OWORD *)v319 + 10) = v338;
                  *(_OWORD *)(v319 + 23) = *(_OWORD *)(v323 + 23);
                  v339 = *(_OWORD *)(v323 + 25);
                  v319[27] = v323[27];
                  *(_OWORD *)(v319 + 25) = v339;
                  *((_OWORD *)v319 + 14) = *((_OWORD *)v323 + 14);
                  v340 = *((_OWORD *)v323 + 15);
                  v319[32] = v323[32];
                  *((_OWORD *)v319 + 15) = v340;
                  *v323 = v320;
                  v341 = *(_OWORD *)&__src[16];
                  *(_OWORD *)(v323 + 1) = *(_OWORD *)__src;
                  *(_OWORD *)(v323 + 3) = v341;
                  v342 = *(_OWORD *)&__src[32];
                  v343 = *(_OWORD *)&__src[48];
                  v344 = *(_OWORD *)&__src[64];
                  *(_OWORD *)(v323 + 11) = *(_OWORD *)&__src[80];
                  *(_OWORD *)(v323 + 9) = v344;
                  *(_OWORD *)(v323 + 7) = v343;
                  *(_OWORD *)(v323 + 5) = v342;
                  *(float64x2_t *)(v323 + 13) = v1080;
                  v345 = v1101[0];
                  v323[17] = v1101[1].f64[0];
                  *(float64x2_t *)(v323 + 15) = v345;
                  v346 = *(_OWORD *)v1078;
                  v347 = *(_OWORD *)v1082;
                  v323[22] = *(double *)&v1082[16];
                  *((_OWORD *)v323 + 9) = v346;
                  *((_OWORD *)v323 + 10) = v347;
                  *(float64x2_t *)(v323 + 23) = v1112;
                  v348 = *(_OWORD *)&v1109[0].__locale_;
                  v323[27] = *(double *)v1110;
                  *(_OWORD *)(v323 + 25) = v348;
                  a8 = v1111;
                  v349 = (int8x16_t)v1099;
                  v323[32] = *(double *)v1100;
                  *((float64x2_t *)v323 + 14) = a8;
                  *((int8x16_t *)v323 + 15) = v349;
                }
              }
            }
            break;
          }
          v147 = (uint64_t)&v112[33 * (v146 >> 1)];
          v148 = (unint64_t)(v113 - 33);
          v149 = sub_208123D30((uint64_t)v112, v147, (uint64_t)(v113 - 33));
          a8.f64[0] = *v112;
          if (*v112 >= *(double *)v147)
          {
            v178 = 0;
            while (1)
            {
              v179 = &v113[v178 - 66];
              if (v179 == v112)
                break;
              v178 -= 33;
              if (*v179 < *(double *)v147)
              {
                v180 = *(_OWORD *)(v112 + 1);
                *(_OWORD *)&__src[16] = *(_OWORD *)(v112 + 3);
                *(_OWORD *)__src = v180;
                v181 = *(_OWORD *)(v112 + 5);
                v182 = *(_OWORD *)(v112 + 7);
                v183 = *(_OWORD *)(v112 + 9);
                *(_OWORD *)&__src[80] = *(_OWORD *)(v112 + 11);
                *(_OWORD *)&__src[64] = v183;
                *(_OWORD *)&__src[48] = v182;
                *(_OWORD *)&__src[32] = v181;
                v1080 = *(float64x2_t *)(v112 + 13);
                v184 = *(float64x2_t *)(v112 + 15);
                v1101[1].f64[0] = v112[17];
                v1101[0] = v184;
                v185 = *((_OWORD *)v112 + 10);
                *(_OWORD *)v1078 = *((_OWORD *)v112 + 9);
                *(double *)&v1082[16] = v112[22];
                *(_OWORD *)v1082 = v185;
                v186 = *(float64x2_t *)(v112 + 23);
                v187 = *(_OWORD *)(v112 + 25);
                *(double *)v1110 = v112[27];
                *(_OWORD *)&v1109[0].__locale_ = v187;
                v188 = *(int8x16_t *)(v112 + 30);
                v1111 = *(float64x2_t *)(v112 + 28);
                v1112 = v186;
                *(double *)v1100 = v112[32];
                v1099 = (float64x2_t)v188;
                v189 = (float64x2_t *)&v113[v178];
                v148 = (unint64_t)&v189[-17].f64[1];
                *v112 = v189[-17].f64[1];
                v190 = v189[-16];
                *(float64x2_t *)(v112 + 3) = v189[-15];
                *(float64x2_t *)(v112 + 1) = v190;
                v191 = v189[-14];
                v192 = v189[-13];
                v193 = v189[-12];
                *(float64x2_t *)(v112 + 11) = v189[-11];
                *(float64x2_t *)(v112 + 9) = v193;
                *(float64x2_t *)(v112 + 7) = v192;
                *(float64x2_t *)(v112 + 5) = v191;
                *(float64x2_t *)(v112 + 13) = v189[-10];
                v194 = v189[-9];
                v112[17] = v189[-8].f64[0];
                *(float64x2_t *)(v112 + 15) = v194;
                *((float64x2_t *)v112 + 9) = *(float64x2_t *)((char *)v189 - 120);
                v195 = *(__int128 *)((char *)&v189[-7] + 8);
                v112[22] = v189[-6].f64[1];
                *((_OWORD *)v112 + 10) = v195;
                *(float64x2_t *)(v112 + 23) = v189[-5];
                v196 = v189[-4];
                v112[27] = v189[-3].f64[0];
                *(float64x2_t *)(v112 + 25) = v196;
                *((float64x2_t *)v112 + 14) = *(float64x2_t *)((char *)v189 - 40);
                v197 = *(__int128 *)((char *)&v189[-2] + 8);
                v112[32] = v189[-1].f64[1];
                *((_OWORD *)v112 + 15) = v197;
                *(float64_t *)v148 = a8.f64[0];
                v198 = *(float64x2_t *)&__src[16];
                v189[-16] = *(float64x2_t *)__src;
                v189[-15] = v198;
                v199 = *(float64x2_t *)&__src[32];
                v200 = *(float64x2_t *)&__src[48];
                v201 = *(float64x2_t *)&__src[80];
                v189[-12] = *(float64x2_t *)&__src[64];
                v189[-11] = v201;
                v189[-14] = v199;
                v189[-13] = v200;
                v189[-10] = v1080;
                v202 = v1101[1].f64[0];
                v189[-9] = v1101[0];
                v189[-8].f64[0] = v202;
                *(float64x2_t *)((char *)v189 - 120) = *(float64x2_t *)v1078;
                v203 = *(float64x2_t *)v1082;
                v189[-6].f64[1] = *(float64_t *)&v1082[16];
                *(float64x2_t *)((char *)v189 - 104) = v203;
                v189[-5] = v1112;
                v204 = *(double *)v1110;
                v189[-4] = *(float64x2_t *)&v1109[0].__locale_;
                v189[-3].f64[0] = v204;
                *(float64x2_t *)((char *)v189 - 40) = v1111;
                a8 = v1099;
                v189[-1].f64[1] = *(float64_t *)v1100;
                *(float64x2_t *)((char *)v189 - 24) = a8;
                ++v149;
                v150 = v112 + 33;
                if ((unint64_t)(v112 + 33) < v148)
                  goto LABEL_151;
                goto LABEL_164;
              }
            }
            v235 = (float64x2_t *)(v112 + 33);
            if (a8.f64[0] >= *(double *)v148)
            {
              if (v235 == (float64x2_t *)v148)
                break;
              v235 = (float64x2_t *)(v112 + 66);
              while (1)
              {
                v236 = v235[-17].f64[1];
                if (a8.f64[0] < v236)
                  break;
                _ZF = v235 == (float64x2_t *)v148;
                v235 = (float64x2_t *)((char *)v235 + 264);
                if (_ZF)
                  goto LABEL_204;
              }
              v241 = v235[-16];
              *(float64x2_t *)&__src[16] = v235[-15];
              *(float64x2_t *)__src = v241;
              v242 = v235[-14];
              v243 = v235[-13];
              v244 = v235[-12];
              *(float64x2_t *)&__src[80] = v235[-11];
              *(float64x2_t *)&__src[64] = v244;
              *(float64x2_t *)&__src[48] = v243;
              *(float64x2_t *)&__src[32] = v242;
              v1080 = v235[-10];
              v245 = v235[-9];
              v1101[1].f64[0] = v235[-8].f64[0];
              v1101[0] = v245;
              *(float64x2_t *)v1078 = *(float64x2_t *)((char *)v235 - 120);
              v246 = *(__int128 *)((char *)&v235[-7] + 8);
              *(float64_t *)&v1082[16] = v235[-6].f64[1];
              *(_OWORD *)v1082 = v246;
              v1112 = v235[-5];
              v247 = v235[-4];
              *(float64_t *)v1110 = v235[-3].f64[0];
              *(float64x2_t *)&v1109[0].__locale_ = v247;
              v1111 = *(float64x2_t *)((char *)v235 - 40);
              v248 = *(int8x16_t *)((char *)&v235[-2] + 8);
              *(float64_t *)v1100 = v235[-1].f64[1];
              v1099 = (float64x2_t)v248;
              v235[-17].f64[1] = *(float64_t *)v148;
              v249 = *(float64x2_t *)(v113 - 30);
              v235[-16] = *(float64x2_t *)(v113 - 32);
              v235[-15] = v249;
              v250 = *(float64x2_t *)(v113 - 28);
              v251 = *(float64x2_t *)(v113 - 26);
              v252 = *(float64x2_t *)(v113 - 22);
              v235[-12] = *(float64x2_t *)(v113 - 24);
              v235[-11] = v252;
              v235[-14] = v250;
              v235[-13] = v251;
              v235[-10] = *(float64x2_t *)(v113 - 20);
              v253 = *(float64x2_t *)(v113 - 18);
              v235[-8].f64[0] = *(v113 - 16);
              v235[-9] = v253;
              *(float64x2_t *)((char *)v235 - 120) = *(float64x2_t *)(v113 - 15);
              v254 = *(float64x2_t *)(v113 - 13);
              v235[-6].f64[1] = *(v113 - 11);
              *(float64x2_t *)((char *)v235 - 104) = v254;
              v235[-5] = *(float64x2_t *)(v113 - 10);
              v255 = *(float64x2_t *)(v113 - 8);
              v235[-3].f64[0] = *(v113 - 6);
              v235[-4] = v255;
              *(float64x2_t *)((char *)v235 - 40) = *(float64x2_t *)(v113 - 5);
              v256 = *(float64x2_t *)(v113 - 3);
              v235[-1].f64[1] = *(v113 - 1);
              *(float64x2_t *)((char *)v235 - 24) = v256;
              *(double *)v148 = v236;
              v257 = *(_OWORD *)&__src[16];
              *((_OWORD *)v113 - 16) = *(_OWORD *)__src;
              *((_OWORD *)v113 - 15) = v257;
              v258 = *(_OWORD *)&__src[32];
              v259 = *(_OWORD *)&__src[48];
              v260 = *(_OWORD *)&__src[80];
              *((_OWORD *)v113 - 12) = *(_OWORD *)&__src[64];
              *((_OWORD *)v113 - 11) = v260;
              *((_OWORD *)v113 - 14) = v258;
              *((_OWORD *)v113 - 13) = v259;
              *((float64x2_t *)v113 - 10) = v1080;
              v261 = v1101[1].f64[0];
              *((float64x2_t *)v113 - 9) = v1101[0];
              *(v113 - 16) = v261;
              *(_OWORD *)(v113 - 15) = *(_OWORD *)v1078;
              v262 = *(_OWORD *)v1082;
              *(v113 - 11) = *(double *)&v1082[16];
              *(_OWORD *)(v113 - 13) = v262;
              *((float64x2_t *)v113 - 5) = v1112;
              v263 = *(_QWORD *)&v1110[0];
              *((_OWORD *)v113 - 4) = *(_OWORD *)&v1109[0].__locale_;
              *((_QWORD *)v113 - 6) = v263;
              *(float64x2_t *)(v113 - 5) = v1111;
              a8 = v1099;
              *(v113 - 1) = *(double *)v1100;
              *(float64x2_t *)(v113 - 3) = a8;
            }
            if (v235 == (float64x2_t *)v148)
              break;
            while (1)
            {
              v287 = *v112;
              v232 = &v235[-17].f64[1];
              do
              {
                v288 = v232[33];
                v232 += 33;
              }
              while (v287 >= v288);
              v235 = (float64x2_t *)(v232 + 33);
              do
                v148 -= 264;
              while (v287 < *(double *)v148);
              if ((unint64_t)v232 >= v148)
                break;
              v264 = *(_OWORD *)(v232 + 1);
              *(_OWORD *)&__src[16] = *(_OWORD *)(v232 + 3);
              *(_OWORD *)__src = v264;
              v265 = *(_OWORD *)(v232 + 5);
              v266 = *(_OWORD *)(v232 + 7);
              v267 = *(_OWORD *)(v232 + 9);
              *(_OWORD *)&__src[80] = *(_OWORD *)(v232 + 11);
              *(_OWORD *)&__src[64] = v267;
              *(_OWORD *)&__src[48] = v266;
              *(_OWORD *)&__src[32] = v265;
              v1080 = *(float64x2_t *)(v232 + 13);
              v268 = *(float64x2_t *)(v232 + 15);
              v1101[1].f64[0] = v232[17];
              v1101[0] = v268;
              *(_OWORD *)v1078 = *((_OWORD *)v232 + 9);
              v269 = *((_OWORD *)v232 + 10);
              *(double *)&v1082[16] = v232[22];
              *(_OWORD *)v1082 = v269;
              v1112 = *(float64x2_t *)(v232 + 23);
              v270 = *(_OWORD *)(v232 + 25);
              *(double *)v1110 = v232[27];
              *(_OWORD *)&v1109[0].__locale_ = v270;
              v1111 = *(float64x2_t *)(v232 + 28);
              v271 = *(int8x16_t *)(v232 + 30);
              *(double *)v1100 = v232[32];
              v1099 = (float64x2_t)v271;
              *v232 = *(double *)v148;
              v272 = *(_OWORD *)(v148 + 8);
              *(_OWORD *)(v232 + 3) = *(_OWORD *)(v148 + 24);
              *(_OWORD *)(v232 + 1) = v272;
              v273 = *(_OWORD *)(v148 + 40);
              v274 = *(_OWORD *)(v148 + 56);
              v275 = *(_OWORD *)(v148 + 72);
              *(_OWORD *)(v232 + 11) = *(_OWORD *)(v148 + 88);
              *(_OWORD *)(v232 + 9) = v275;
              *(_OWORD *)(v232 + 7) = v274;
              *(_OWORD *)(v232 + 5) = v273;
              *(_OWORD *)(v232 + 13) = *(_OWORD *)(v148 + 104);
              v276 = *(_OWORD *)(v148 + 120);
              v232[17] = *(double *)(v148 + 136);
              *(_OWORD *)(v232 + 15) = v276;
              *((_OWORD *)v232 + 9) = *(_OWORD *)(v148 + 144);
              v277 = *(_OWORD *)(v148 + 160);
              v232[22] = *(double *)(v148 + 176);
              *((_OWORD *)v232 + 10) = v277;
              *(_OWORD *)(v232 + 23) = *(_OWORD *)(v148 + 184);
              v278 = *(_OWORD *)(v148 + 200);
              v232[27] = *(double *)(v148 + 216);
              *(_OWORD *)(v232 + 25) = v278;
              *((_OWORD *)v232 + 14) = *(_OWORD *)(v148 + 224);
              v279 = *(_OWORD *)(v148 + 240);
              v232[32] = *(double *)(v148 + 256);
              *((_OWORD *)v232 + 15) = v279;
              *(double *)v148 = v288;
              v280 = *(_OWORD *)&__src[16];
              *(_OWORD *)(v148 + 8) = *(_OWORD *)__src;
              *(_OWORD *)(v148 + 24) = v280;
              v281 = *(_OWORD *)&__src[32];
              v282 = *(_OWORD *)&__src[48];
              v283 = *(_OWORD *)&__src[64];
              *(_OWORD *)(v148 + 88) = *(_OWORD *)&__src[80];
              *(_OWORD *)(v148 + 72) = v283;
              *(_OWORD *)(v148 + 56) = v282;
              *(_OWORD *)(v148 + 40) = v281;
              *(float64x2_t *)(v148 + 104) = v1080;
              v284 = v1101[1].f64[0];
              *(float64x2_t *)(v148 + 120) = v1101[0];
              *(float64_t *)(v148 + 136) = v284;
              *(_OWORD *)(v148 + 144) = *(_OWORD *)v1078;
              v285 = *(_OWORD *)v1082;
              *(_QWORD *)(v148 + 176) = *(_QWORD *)&v1082[16];
              *(_OWORD *)(v148 + 160) = v285;
              *(float64x2_t *)(v148 + 184) = v1112;
              v286 = *(_QWORD *)&v1110[0];
              *(_OWORD *)(v148 + 200) = *(_OWORD *)&v1109[0].__locale_;
              *(_QWORD *)(v148 + 216) = v286;
              *(float64x2_t *)(v148 + 224) = v1111;
              a8 = v1099;
              *(_QWORD *)(v148 + 256) = *(_QWORD *)v1100;
              *(float64x2_t *)(v148 + 240) = a8;
            }
            if (v232 > v145)
              break;
          }
          else
          {
            v150 = v112 + 33;
            if ((unint64_t)(v112 + 33) >= v148)
            {
LABEL_164:
              v153 = v150;
            }
            else
            {
LABEL_151:
              v151 = v150;
              while (1)
              {
                v152 = *(double *)v147;
                v153 = v151 - 33;
                do
                {
                  v154 = v153[33];
                  v153 += 33;
                }
                while (v154 < v152);
                v151 = v153 + 33;
                do
                  v148 -= 264;
                while (*(double *)v148 >= v152);
                if ((unint64_t)v153 >= v148)
                  break;
                v155 = *(_OWORD *)(v153 + 1);
                *(_OWORD *)&__src[16] = *(_OWORD *)(v153 + 3);
                *(_OWORD *)__src = v155;
                v156 = *(_OWORD *)(v153 + 5);
                v157 = *(_OWORD *)(v153 + 7);
                v158 = *(_OWORD *)(v153 + 9);
                *(_OWORD *)&__src[80] = *(_OWORD *)(v153 + 11);
                *(_OWORD *)&__src[64] = v158;
                *(_OWORD *)&__src[48] = v157;
                *(_OWORD *)&__src[32] = v156;
                v1080 = *(float64x2_t *)(v153 + 13);
                v159 = *(float64x2_t *)(v153 + 15);
                v1101[1].f64[0] = v153[17];
                v1101[0] = v159;
                *(_OWORD *)v1078 = *((_OWORD *)v153 + 9);
                v160 = *((_OWORD *)v153 + 10);
                *(double *)&v1082[16] = v153[22];
                *(_OWORD *)v1082 = v160;
                v1112 = *(float64x2_t *)(v153 + 23);
                v161 = *(_OWORD *)(v153 + 25);
                *(double *)v1110 = v153[27];
                *(_OWORD *)&v1109[0].__locale_ = v161;
                v1111 = *(float64x2_t *)(v153 + 28);
                v162 = *(int8x16_t *)(v153 + 30);
                *(double *)v1100 = v153[32];
                v1099 = (float64x2_t)v162;
                *v153 = *(double *)v148;
                v163 = *(_OWORD *)(v148 + 8);
                *(_OWORD *)(v153 + 3) = *(_OWORD *)(v148 + 24);
                *(_OWORD *)(v153 + 1) = v163;
                v164 = *(_OWORD *)(v148 + 40);
                v165 = *(_OWORD *)(v148 + 56);
                v166 = *(_OWORD *)(v148 + 72);
                *(_OWORD *)(v153 + 11) = *(_OWORD *)(v148 + 88);
                *(_OWORD *)(v153 + 9) = v166;
                *(_OWORD *)(v153 + 7) = v165;
                *(_OWORD *)(v153 + 5) = v164;
                *(_OWORD *)(v153 + 13) = *(_OWORD *)(v148 + 104);
                v167 = *(_OWORD *)(v148 + 120);
                v153[17] = *(double *)(v148 + 136);
                *(_OWORD *)(v153 + 15) = v167;
                *((_OWORD *)v153 + 9) = *(_OWORD *)(v148 + 144);
                v168 = *(_OWORD *)(v148 + 160);
                v153[22] = *(double *)(v148 + 176);
                *((_OWORD *)v153 + 10) = v168;
                *(_OWORD *)(v153 + 23) = *(_OWORD *)(v148 + 184);
                v169 = *(_OWORD *)(v148 + 200);
                v153[27] = *(double *)(v148 + 216);
                *(_OWORD *)(v153 + 25) = v169;
                *((_OWORD *)v153 + 14) = *(_OWORD *)(v148 + 224);
                v170 = *(_OWORD *)(v148 + 240);
                v153[32] = *(double *)(v148 + 256);
                *((_OWORD *)v153 + 15) = v170;
                *(double *)v148 = v154;
                v171 = *(_OWORD *)&__src[16];
                *(_OWORD *)(v148 + 8) = *(_OWORD *)__src;
                *(_OWORD *)(v148 + 24) = v171;
                v172 = *(_OWORD *)&__src[32];
                v173 = *(_OWORD *)&__src[48];
                v174 = *(_OWORD *)&__src[64];
                *(_OWORD *)(v148 + 88) = *(_OWORD *)&__src[80];
                *(_OWORD *)(v148 + 72) = v174;
                *(_OWORD *)(v148 + 56) = v173;
                *(_OWORD *)(v148 + 40) = v172;
                *(float64x2_t *)(v148 + 104) = v1080;
                v175 = v1101[1].f64[0];
                *(float64x2_t *)(v148 + 120) = v1101[0];
                *(float64_t *)(v148 + 136) = v175;
                *(_OWORD *)(v148 + 144) = *(_OWORD *)v1078;
                v176 = *(_OWORD *)v1082;
                *(_QWORD *)(v148 + 176) = *(_QWORD *)&v1082[16];
                *(_OWORD *)(v148 + 160) = v176;
                *(float64x2_t *)(v148 + 184) = v1112;
                v177 = *(_QWORD *)&v1110[0];
                *(_OWORD *)(v148 + 200) = *(_OWORD *)&v1109[0].__locale_;
                *(_QWORD *)(v148 + 216) = v177;
                *(float64x2_t *)(v148 + 224) = v1111;
                a8 = v1099;
                *(_QWORD *)(v148 + 256) = *(_QWORD *)v1100;
                *(float64x2_t *)(v148 + 240) = a8;
                ++v149;
                if (v153 == (double *)v147)
                  v147 = v148;
              }
            }
            if (v153 != (double *)v147)
            {
              v205 = *(_QWORD *)v153;
              if (*(double *)v147 < *v153)
              {
                v206 = *(_OWORD *)(v153 + 1);
                *(_OWORD *)&__src[16] = *(_OWORD *)(v153 + 3);
                *(_OWORD *)__src = v206;
                v207 = *(_OWORD *)(v153 + 5);
                v208 = *(_OWORD *)(v153 + 7);
                v209 = *(_OWORD *)(v153 + 9);
                *(_OWORD *)&__src[80] = *(_OWORD *)(v153 + 11);
                *(_OWORD *)&__src[64] = v209;
                *(_OWORD *)&__src[48] = v208;
                *(_OWORD *)&__src[32] = v207;
                v1080 = *(float64x2_t *)(v153 + 13);
                v210 = *(float64x2_t *)(v153 + 15);
                v1101[1].f64[0] = v153[17];
                v1101[0] = v210;
                v211 = *((_OWORD *)v153 + 10);
                *(_OWORD *)v1078 = *((_OWORD *)v153 + 9);
                *(double *)&v1082[16] = v153[22];
                *(_OWORD *)v1082 = v211;
                v212 = *(float64x2_t *)(v153 + 23);
                v213 = *(_OWORD *)(v153 + 25);
                *(double *)v1110 = v153[27];
                *(_OWORD *)&v1109[0].__locale_ = v213;
                v214 = *(int8x16_t *)(v153 + 30);
                v1111 = *(float64x2_t *)(v153 + 28);
                v1112 = v212;
                *(double *)v1100 = v153[32];
                v1099 = (float64x2_t)v214;
                *v153 = *(double *)v147;
                v215 = *(_OWORD *)(v147 + 8);
                *(_OWORD *)(v153 + 3) = *(_OWORD *)(v147 + 24);
                *(_OWORD *)(v153 + 1) = v215;
                v216 = *(_OWORD *)(v147 + 40);
                v217 = *(_OWORD *)(v147 + 56);
                v218 = *(_OWORD *)(v147 + 72);
                *(_OWORD *)(v153 + 11) = *(_OWORD *)(v147 + 88);
                *(_OWORD *)(v153 + 9) = v218;
                *(_OWORD *)(v153 + 7) = v217;
                *(_OWORD *)(v153 + 5) = v216;
                *(_OWORD *)(v153 + 13) = *(_OWORD *)(v147 + 104);
                v219 = *(_OWORD *)(v147 + 120);
                v153[17] = *(double *)(v147 + 136);
                *(_OWORD *)(v153 + 15) = v219;
                *((_OWORD *)v153 + 9) = *(_OWORD *)(v147 + 144);
                v220 = *(_OWORD *)(v147 + 160);
                v153[22] = *(double *)(v147 + 176);
                *((_OWORD *)v153 + 10) = v220;
                *(_OWORD *)(v153 + 23) = *(_OWORD *)(v147 + 184);
                v221 = *(_OWORD *)(v147 + 200);
                v153[27] = *(double *)(v147 + 216);
                *(_OWORD *)(v153 + 25) = v221;
                *((_OWORD *)v153 + 14) = *(_OWORD *)(v147 + 224);
                v222 = *(_OWORD *)(v147 + 240);
                v153[32] = *(double *)(v147 + 256);
                *((_OWORD *)v153 + 15) = v222;
                *(_QWORD *)v147 = v205;
                v223 = *(_OWORD *)&__src[16];
                *(_OWORD *)(v147 + 8) = *(_OWORD *)__src;
                *(_OWORD *)(v147 + 24) = v223;
                v224 = *(_OWORD *)&__src[32];
                v225 = *(_OWORD *)&__src[48];
                v226 = *(_OWORD *)&__src[64];
                *(_OWORD *)(v147 + 88) = *(_OWORD *)&__src[80];
                *(_OWORD *)(v147 + 72) = v226;
                *(_OWORD *)(v147 + 56) = v225;
                *(_OWORD *)(v147 + 40) = v224;
                *(float64x2_t *)(v147 + 104) = v1080;
                v227 = v1101[0];
                *(float64_t *)(v147 + 136) = v1101[1].f64[0];
                *(float64x2_t *)(v147 + 120) = v227;
                v228 = *(_OWORD *)v1078;
                v229 = *(_OWORD *)v1082;
                *(_QWORD *)(v147 + 176) = *(_QWORD *)&v1082[16];
                *(_OWORD *)(v147 + 144) = v228;
                *(_OWORD *)(v147 + 160) = v229;
                *(float64x2_t *)(v147 + 184) = v1112;
                v230 = *(_OWORD *)&v1109[0].__locale_;
                *(_QWORD *)(v147 + 216) = *(_QWORD *)&v1110[0];
                *(_OWORD *)(v147 + 200) = v230;
                a8 = v1111;
                v231 = (int8x16_t)v1099;
                *(_QWORD *)(v147 + 256) = *(_QWORD *)v1100;
                *(float64x2_t *)(v147 + 224) = a8;
                *(int8x16_t *)(v147 + 240) = v231;
                ++v149;
              }
            }
            if (v153 == v145)
              break;
            if (!v149)
            {
              if (v153 <= v145)
              {
                v238 = v153 + 33;
                while (v238 != v113)
                {
                  v239 = *v238;
                  v240 = *(v238 - 33);
                  v238 += 33;
                  if (v239 < v240)
                    goto LABEL_170;
                }
              }
              else
              {
                while (v150 != v153)
                {
                  v233 = *v150;
                  v234 = *(v150 - 33);
                  v150 += 33;
                  if (v233 < v234)
                    goto LABEL_170;
                }
              }
              break;
            }
LABEL_170:
            if (v153 <= v145)
            {
              v232 = v153 + 33;
            }
            else
            {
              v113 = v153;
              v232 = v112;
            }
          }
          v112 = v232;
        }
        while (v113 != v145);
LABEL_204:
        v112 = v998;
        v137 = 0xF83E0F83E0F83E1 * (v94 - v998);
        v113 = v94;
        v114 = v980;
        v144 = v1051;
      }
      v315 = v144 - v137;
      if (v144 <= v137)
      {
        if (v144 < v137)
        {
          v94 = &v112[33 * v144];
          v113 = v94;
        }
        goto LABEL_236;
      }
      if (0xF83E0F83E0F83E1 * ((v985 - (char *)v113) >> 3) >= v315)
      {
        bzero(v113, 264 * ((264 * v315 - 264) / 0x108) + 264);
        v94 = &v113[33 * ((264 * v315 - 264) / 0x108) + 33];
        v112 = v998;
        v113 = v94;
        goto LABEL_236;
      }
      v316 = 0xF83E0F83E0F83E1 * (v113 - v998) + v315;
      if (v316 > 0xF83E0F83E0F83ELL)
        sub_207CA420C();
      if (0x1F07C1F07C1F07C2 * ((v985 - (char *)v998) >> 3) > v316)
        v316 = 0x1F07C1F07C1F07C2 * ((v985 - (char *)v998) >> 3);
      if ((unint64_t)(0xF83E0F83E0F83E1 * ((v985 - (char *)v998) >> 3)) >= 0x7C1F07C1F07C1FLL)
        v317 = 0xF83E0F83E0F83ELL;
      else
        v317 = v316;
      v981 = v114;
      if (v317)
      {
        if (v317 > 0xF83E0F83E0F83ELL)
          sub_207CA3AB8();
        v318 = (char *)operator new(264 * v317);
      }
      else
      {
        v318 = 0;
      }
      v1052 = v317;
      v350 = &v318[8 * (v113 - v998)];
      v351 = 264 * ((264 * v315 - 264) / 0x108) + 264;
      bzero(v350, v351);
      v112 = (double *)v350;
      if (v113 == v998)
      {
        v352 = v998;
        v985 = &v318[264 * v1052];
        v353 = (double *)&v350[v351];
        if (!v998)
          goto LABEL_235;
      }
      else
      {
        v352 = v998;
        do
        {
          v112 -= 33;
          v113 -= 33;
          memcpy(v112, v113, 0x108uLL);
        }
        while (v113 != v998);
        v985 = &v318[264 * v1052];
        v353 = (double *)&v350[v351];
        if (!v998)
          goto LABEL_235;
      }
      operator delete(v352);
LABEL_235:
      v998 = v112;
      v113 = v353;
      v94 = v353;
      v114 = v981;
      goto LABEL_236;
    }
    do
    {
      v1050 = v118[1];
      v1044 = v118[2];
      v1039 = v118[3];
      v1033 = v118[4];
      v1028 = v118[5];
      __dsta = v118[6];
      v119 = v118[8];
      v1016 = v118[7];
      v120 = v118[9];
      v121 = v118[10];
      v122 = 0.0;
      v123 = v115;
      v124 = v118[11];
      v125 = v118[12];
      do
      {
        v126 = v123[2];
        v127 = v123[3];
        v128 = v123[4];
        v129 = v1033 + v1050 * v126 + v1044 * v127 + v1039 * v128;
        v130 = v119 + v1028 * v126 + __dsta * v127 + v1016 * v128;
        v131 = v125 + v120 * v126 + v121 * v127 + v124 * v128;
        if (v131 == 0.0)
          v132 = 1.0;
        else
          v132 = 1.0 / v131;
        v133 = v129 * v132;
        v134 = *v123;
        v135 = v123[1];
        v123 += 5;
        v122 = v122
             + log1p(1.0 / (v42 * v42) * ((v133 - v134) * (v133 - v134) + (v130 * v132 - v135) * (v130 * v132 - v135)));
      }
      while (v123 != v116);
      *v118 = v122 + *v118;
      v118 += 33;
    }
    while (v118 != v113);
    v114 = v117;
    v136 = (char *)v113 - (char *)v112;
    v137 = 0xF83E0F83E0F83E1 * (v113 - v112);
    if (v137 >= 2)
      goto LABEL_141;
LABEL_236:
    v111 = v1004 - 858993459 * ((unint64_t)((char *)v116 - (char *)v115) >> 3);
    v354 = (char *)v113 - (char *)v112 - 264;
    if ((char *)v113 - (char *)v112 != 264)
    {
      v114 += 2;
      if (v114 != (double **)v97)
        continue;
    }
    break;
  }
  v24 = __pa;
  v109 = v965;
  if (v111)
  {
    if (v112 != v113)
    {
      v365 = (double)v111;
      v366 = v112;
      if (v354 < 0x108)
        goto LABEL_567;
      v367 = v354 / 0x108 + 1;
      v366 = &v112[33 * (v367 & 0x1FFFFFFFFFFFFFELL)];
      v368 = v367 & 0x1FFFFFFFFFFFFFELL;
      v369 = v112;
      do
      {
        v370 = v369[33] / v365;
        *v369 = *v369 / v365;
        v369[33] = v370;
        v369 += 66;
        v368 -= 2;
      }
      while (v368);
      if (v367 != (v367 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_567:
        do
        {
          *v366 = *v366 / v365;
          v366 += 33;
        }
        while (v366 != v113);
      }
    }
    v371 = 126 - 2 * __clz(0xF83E0F83E0F83E1 * (v113 - v112));
    if (v112 == v113)
      v372 = 0;
    else
      v372 = v371;
    sub_20812459C((uint64_t)v112, (unint64_t)v113, v372, 1);
  }
  v110 = v998;
  if (v998 == v94)
  {
    v108 = 0;
    v1053 = 0;
    v1045 = 0.0;
    v355 = 0;
    v356 = 0;
    v357 = 0;
    v358 = 0;
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 0;
    v1017 = 0.0;
    v1040.i64[0] = 0;
    v1034 = 0;
    v1029 = 0.0;
    a8.f64[0] = 0.0;
    v986 = (int8x16_t)a8;
    *(double *)&v982 = 0.0;
    v978 = 0.0;
    a8.f64[0] = 0.0;
    __dstb = (int8x16_t)a8;
    v1010 = 0;
    v1005 = 0;
  }
  else
  {
    __dstb = *(int8x16_t *)(v998 + 1);
    v1010 = vextq_s8(__dstb, __dstb, 8uLL).u64[0];
    v1005 = *((_QWORD *)v998 + 3);
    v1053 = *((_QWORD *)v998 + 4);
    v986 = *(int8x16_t *)(v998 + 5);
    v978 = v998[7];
    v982 = vextq_s8(v986, v986, 8uLL).u64[0];
    v1045 = v998[8];
    v1040 = *(int8x16_t *)(v998 + 9);
    v1034 = vextq_s8(v1040, v1040, 8uLL).u64[0];
    v1029 = v998[11];
    v355 = *((_QWORD *)v998 + 13);
    v1017 = v998[12];
    v356 = *((_QWORD *)v998 + 14);
    v357 = *((_QWORD *)v998 + 18);
    v358 = *((_QWORD *)v998 + 19);
    v359 = *((_QWORD *)v998 + 23);
    v360 = *((_QWORD *)v998 + 24);
    v108 = 1;
    v361 = *((_QWORD *)v998 + 28);
    v362 = *((_QWORD *)v998 + 29);
  }
LABEL_260:
  v363 = v970;
  v364 = v992;
LABEL_261:
  if (v92)
    operator delete(v92);
  if (v110)
    operator delete(v110);
  v373 = v973;
  if (v364)
    operator delete(v364);
  if ((v108 & 1) == 0)
  {
    v19 = 0;
    if (!v24)
      return v19;
    goto LABEL_278;
  }
  if (!v952)
    goto LABEL_350;
  v374 = a6[2];
  v375 = *a6;
  if ((unint64_t)(v374 - *a6) <= 0x3F)
  {
    v376 = a6[1];
    v377 = (char *)operator new(0x40uLL);
    v374 = v377 + 64;
    v378 = &v377[(v376 - v375) & 0xFFFFFFFFFFFFFFF0];
    v379 = v378;
    if (v376 != v375)
    {
      v380 = &v377[(v376 - v375) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v379 = v380 - 16;
        *((_OWORD *)v380 - 1) = *((_OWORD *)v376 - 1);
        v376 -= 16;
        v380 -= 16;
      }
      while (v376 != v375);
    }
    *a6 = v379;
    a6[1] = v378;
    a6[2] = v374;
    if (v375)
    {
      operator delete(v375);
      v374 = a6[2];
    }
  }
  v381 = a6[1];
  if (v381 < v374)
  {
    *(_QWORD *)v381 = v355;
    *((_QWORD *)v381 + 1) = v356;
    v382 = v381 + 16;
    goto LABEL_295;
  }
  v384 = *a6;
  v385 = (v381 - *a6) >> 4;
  v386 = v385 + 1;
  if ((unint64_t)(v385 + 1) >> 60)
    goto LABEL_555;
  v387 = v374 - v384;
  if (v387 >> 3 > v386)
    v386 = v387 >> 3;
  if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFF0)
    v388 = 0xFFFFFFFFFFFFFFFLL;
  else
    v388 = v386;
  if (!v388)
  {
    v389 = 0;
    goto LABEL_290;
  }
  if (v388 >> 60)
    goto LABEL_559;
  v389 = (char *)operator new(16 * v388);
LABEL_290:
  v390 = &v389[16 * v385];
  *(_QWORD *)v390 = v355;
  *((_QWORD *)v390 + 1) = v356;
  v382 = v390 + 16;
  if (v381 != v384)
  {
    do
    {
      *((_OWORD *)v390 - 1) = *((_OWORD *)v381 - 1);
      v390 -= 16;
      v381 -= 16;
    }
    while (v381 != v384);
    v381 = *a6;
  }
  *a6 = v390;
  a6[1] = v382;
  a6[2] = &v389[16 * v388];
  if (v381)
    operator delete(v381);
LABEL_295:
  a6[1] = v382;
  v391 = (unint64_t)a6[2];
  if ((unint64_t)v382 < v391)
  {
    *(_QWORD *)v382 = v357;
    *((_QWORD *)v382 + 1) = v358;
    v392 = v382 + 16;
    goto LABEL_313;
  }
  v393 = *a6;
  v394 = (v382 - *a6) >> 4;
  v395 = v394 + 1;
  if ((unint64_t)(v394 + 1) >> 60)
    goto LABEL_555;
  v396 = v391 - (_QWORD)v393;
  if (v396 >> 3 > v395)
    v395 = v396 >> 3;
  if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF0)
    v397 = 0xFFFFFFFFFFFFFFFLL;
  else
    v397 = v395;
  if (!v397)
  {
    v399 = (char *)(16 * v394);
    v400 = 0;
    *(_QWORD *)v399 = v357;
    *((_QWORD *)v399 + 1) = v358;
    v392 = (char *)(16 * v394 + 16);
    if (v382 == v393)
      goto LABEL_311;
    goto LABEL_308;
  }
  if (v397 >> 60)
    goto LABEL_559;
  v398 = (char *)operator new(16 * v397);
  v399 = &v398[16 * v394];
  v400 = &v398[16 * v397];
  *(_QWORD *)v399 = v357;
  *((_QWORD *)v399 + 1) = v358;
  v392 = v399 + 16;
  if (v382 == v393)
  {
LABEL_311:
    *a6 = v399;
    a6[1] = v392;
    a6[2] = v400;
    goto LABEL_312;
  }
  do
  {
LABEL_308:
    *((_OWORD *)v399 - 1) = *((_OWORD *)v382 - 1);
    v399 -= 16;
    v382 -= 16;
  }
  while (v382 != v393);
  v382 = *a6;
  *a6 = v399;
  a6[1] = v392;
  a6[2] = v400;
  if (v382)
LABEL_312:
    operator delete(v382);
LABEL_313:
  a6[1] = v392;
  v401 = (unint64_t)a6[2];
  if ((unint64_t)v392 < v401)
  {
    *(_QWORD *)v392 = v359;
    *((_QWORD *)v392 + 1) = v360;
    v402 = v392 + 16;
    goto LABEL_331;
  }
  v403 = *a6;
  v404 = (v392 - *a6) >> 4;
  v405 = v404 + 1;
  if ((unint64_t)(v404 + 1) >> 60)
    goto LABEL_555;
  v406 = v401 - (_QWORD)v403;
  if (v406 >> 3 > v405)
    v405 = v406 >> 3;
  if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFF0)
    v407 = 0xFFFFFFFFFFFFFFFLL;
  else
    v407 = v405;
  if (!v407)
  {
    v409 = (char *)(16 * v404);
    v410 = 0;
    *(_QWORD *)v409 = v359;
    *((_QWORD *)v409 + 1) = v360;
    v402 = (char *)(16 * v404 + 16);
    if (v392 == v403)
      goto LABEL_329;
    goto LABEL_326;
  }
  if (v407 >> 60)
    goto LABEL_559;
  v408 = (char *)operator new(16 * v407);
  v409 = &v408[16 * v404];
  v410 = &v408[16 * v407];
  *(_QWORD *)v409 = v359;
  *((_QWORD *)v409 + 1) = v360;
  v402 = v409 + 16;
  if (v392 == v403)
  {
LABEL_329:
    *a6 = v409;
    a6[1] = v402;
    a6[2] = v410;
    goto LABEL_330;
  }
  do
  {
LABEL_326:
    *((_OWORD *)v409 - 1) = *((_OWORD *)v392 - 1);
    v409 -= 16;
    v392 -= 16;
  }
  while (v392 != v403);
  v392 = *a6;
  *a6 = v409;
  a6[1] = v402;
  a6[2] = v410;
  if (v392)
LABEL_330:
    operator delete(v392);
LABEL_331:
  a6[1] = v402;
  v411 = (unint64_t)a6[2];
  if ((unint64_t)v402 < v411)
  {
    *(_QWORD *)v402 = v361;
    *((_QWORD *)v402 + 1) = v362;
    v412 = (uint64_t)(v402 + 16);
    goto LABEL_349;
  }
  v413 = *a6;
  v414 = (v402 - *a6) >> 4;
  v415 = v414 + 1;
  if ((unint64_t)(v414 + 1) >> 60)
LABEL_555:
    sub_207CA420C();
  v416 = v411 - (_QWORD)v413;
  if (v416 >> 3 > v415)
    v415 = v416 >> 3;
  if ((unint64_t)v416 >= 0x7FFFFFFFFFFFFFF0)
    v417 = 0xFFFFFFFFFFFFFFFLL;
  else
    v417 = v415;
  if (!v417)
  {
    v419 = (char *)(16 * v414);
    v420 = 0;
    *(_QWORD *)v419 = v361;
    *((_QWORD *)v419 + 1) = v362;
    v412 = 16 * v414 + 16;
    if (v402 == v413)
      goto LABEL_347;
    goto LABEL_344;
  }
  if (v417 >> 60)
LABEL_559:
    sub_207CA3AB8();
  v418 = (char *)operator new(16 * v417);
  v419 = &v418[16 * v414];
  v420 = &v418[16 * v417];
  *(_QWORD *)v419 = v361;
  *((_QWORD *)v419 + 1) = v362;
  v412 = (uint64_t)(v419 + 16);
  if (v402 == v413)
  {
LABEL_347:
    *a6 = v419;
    a6[1] = (char *)v412;
    a6[2] = v420;
    goto LABEL_348;
  }
  do
  {
LABEL_344:
    *((_OWORD *)v419 - 1) = *((_OWORD *)v402 - 1);
    v419 -= 16;
    v402 -= 16;
  }
  while (v402 != v413);
  v402 = *a6;
  *a6 = v419;
  a6[1] = (char *)v412;
  a6[2] = v420;
  if (v402)
LABEL_348:
    operator delete(v402);
LABEL_349:
  a6[1] = (char *)v412;
LABEL_350:
  v421 = *(double *)(v973 + 24);
  v422 = (char *)*v363;
  v363[1] = *v363;
  v423 = __pa;
  if (v109 == __pa)
  {
    v470 = v422;
    v429.i64[0] = v1053;
    v430 = v1045;
    v431 = *(double *)v1040.i64;
    _D16 = v1034;
    v426 = v1029;
    *(_QWORD *)&v432.f64[0] = __dstb.i64[0];
    v433 = v1017;
    *(_QWORD *)&v434 = v1010;
    *(_QWORD *)&v435 = v1005;
    v437 = *(double *)&v982;
    *(_QWORD *)&v436.f64[0] = v986.i64[0];
    v438 = v978;
    v471 = *(unint64_t **)(v973 + 32);
    v472 = *(_QWORD *)(v973 + 40) - (_QWORD)v471;
    if ((v472 & 0x7FFFFFFF8) != 0)
      goto LABEL_387;
LABEL_390:
    v19 = 0;
    v24 = __pa;
    if (!__pa)
      return v19;
    goto LABEL_278;
  }
  v424 = 0;
  _D16 = v1034;
  *(_QWORD *)&v427.f64[0] = v1034;
  v426 = v1029;
  v427.f64[1] = v1029;
  v428 = v421 + v421;
  v429.i64[0] = v1053;
  v430 = v1045;
  v431 = *(double *)v1040.i64;
  v432 = (float64x2_t)__dstb;
  v433 = v1017;
  *(_QWORD *)&v434 = v1010;
  *(_QWORD *)&v435 = v1005;
  v437 = *(double *)&v982;
  v436 = (float64x2_t)v986;
  v438 = v978;
  *(float64x2_t *)v999 = v427;
  while (2)
  {
    v440 = vmulq_f64(v427, *(float64x2_t *)(v423 + 24));
    if (v433 + v431 * *((double *)v423 + 2) + v440.f64[0] + v440.f64[1] > 0.0)
    {
      v441 = *((double *)v423 + 4);
      _Q2 = *((float64x2_t *)v423 + 1);
      __asm { FMLA            D0, D16, V2.D[1] }
      v447 = v433 + _D0 + v426 * v441;
      if (v447 >= 0.00000001)
      {
        _Q2.f64[1] = *(double *)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).i64;
        v448 = v430 + vmulq_f64(v436, _Q2).f64[0] + v437 * _Q2.f64[1] + v438 * v441;
        v449 = *(double *)v429.i64
             + vmulq_f64(v432, _Q2).f64[0]
             + *(double *)&v434 * _Q2.f64[1]
             + *(double *)&v435 * v441;
        if ((v447 * *(double *)v423 - v449) * (v447 * *(double *)v423 - v449)
           + (v447 * *((double *)v423 + 1) - v448) * (v447 * *((double *)v423 + 1) - v448) < v428 * v447 * (v428 * v447))
        {
          v450 = v363[2];
          if ((unint64_t)v422 < v450)
          {
            *(_DWORD *)v422 = v424;
            v439 = (uint64_t)(v422 + 4);
          }
          else
          {
            v451 = (char *)*v363;
            v452 = (uint64_t)&v422[-*v363];
            v453 = v452 >> 2;
            v454 = (v452 >> 2) + 1;
            if (v454 >> 62)
              sub_207CA420C();
            v455 = v450 - (_QWORD)v451;
            if (v455 >> 1 > v454)
              v454 = v455 >> 1;
            if ((unint64_t)v455 >= 0x7FFFFFFFFFFFFFFCLL)
              v456 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v456 = v454;
            if (v456)
            {
              if (v456 >> 62)
                sub_207CA3AB8();
              v457 = operator new(4 * v456);
              v429.i64[0] = v1053;
              v430 = v1045;
              v431 = *(double *)v1040.i64;
              _D16 = v1034;
              v426 = v1029;
              v432 = (float64x2_t)__dstb;
              v433 = v1017;
              *(_QWORD *)&v434 = v1010;
              v427 = *(float64x2_t *)v999;
              *(_QWORD *)&v435 = v1005;
              v437 = *(double *)&v982;
              v436 = (float64x2_t)v986;
              v438 = v978;
              v458 = &v457[4 * v453];
              *v458 = v424;
              v439 = (uint64_t)(v458 + 1);
              v459 = v422 - v451;
              if (v422 != v451)
              {
LABEL_368:
                v460 = v459 - 4;
                if (v460 < 0xBC
                  || (v463 = (v422 - 4 - v451) & 0xFFFFFFFFFFFFFFFCLL, &v457[v452 - 4 - v463] > &v457[v452 - 4])
                  || &v422[-v463 - 4] > v422 - 4
                  || (unint64_t)(v422 - v457 - v452) < 0x20)
                {
                  v461 = v422;
                  v363 = v970;
                  v373 = v973;
                }
                else
                {
                  v464 = (v460 >> 2) + 1;
                  v465 = 4 * (v464 & 0x7FFFFFFFFFFFFFF8);
                  v461 = &v422[-v465];
                  v458 = (_DWORD *)((char *)v458 - v465);
                  v466 = &v457[4 * v453 - 16];
                  v467 = v422 - 16;
                  v468 = v464 & 0x7FFFFFFFFFFFFFF8;
                  v373 = v973;
                  do
                  {
                    v469 = *(_OWORD *)v467;
                    *(v466 - 1) = *((_OWORD *)v467 - 1);
                    *v466 = v469;
                    v466 -= 2;
                    v467 -= 32;
                    v468 -= 8;
                  }
                  while (v468);
                  v363 = v970;
                  if (v464 == (v464 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_371:
                    *v363 = v458;
                    v363[1] = v439;
                    v363[2] = &v457[4 * v456];
                    if (v451)
                      goto LABEL_372;
                    goto LABEL_373;
                  }
                }
                do
                {
                  v462 = *((_DWORD *)v461 - 1);
                  v461 -= 4;
                  *--v458 = v462;
                }
                while (v461 != v451);
                goto LABEL_371;
              }
            }
            else
            {
              v457 = 0;
              v458 = (_DWORD *)(4 * v453);
              *(_DWORD *)(4 * v453) = v424;
              v439 = 4 * v453 + 4;
              v459 = v422 - v451;
              if (v422 != v451)
                goto LABEL_368;
            }
            v363 = v970;
            v373 = v973;
            *v970 = v458;
            v970[1] = v439;
            v970[2] = &v457[4 * v456];
            if (v451)
            {
LABEL_372:
              operator delete(v451);
              v427 = *(float64x2_t *)v999;
              *(_QWORD *)&v435 = v1005;
              v438 = v978;
              v437 = *(double *)&v982;
              v436 = (float64x2_t)v986;
              *(_QWORD *)&v434 = v1010;
              v433 = v1017;
              v432 = (float64x2_t)__dstb;
              v426 = v1029;
              _D16 = v1034;
              v431 = *(double *)v1040.i64;
              v430 = v1045;
              v429.i64[0] = v1053;
            }
LABEL_373:
            v109 = v965;
          }
          v363[1] = v439;
          v422 = (char *)v439;
        }
      }
    }
    ++v424;
    v423 += 40;
    if (v423 != v109)
      continue;
    break;
  }
  v470 = (char *)*v363;
  v471 = *(unint64_t **)(v373 + 32);
  v472 = *(_QWORD *)(v373 + 40) - (_QWORD)v471;
  if ((v472 & 0x7FFFFFFF8) == 0)
    goto LABEL_390;
LABEL_387:
  v473 = (v422 - v470) >> 2;
  v474 = (v472 >> 3);
  while (1)
  {
    v475 = *v471++;
    if (v473 >= v475)
      break;
    if (!--v474)
      goto LABEL_390;
  }
  *(float64_t *)&v476 = v432.f64[0];
  *((_QWORD *)&v476 + 1) = v434;
  *(_OWORD *)v930 = v476;
  *(_QWORD *)(v930 + 16) = v435;
  *(_QWORD *)(v930 + 24) = v429.i64[0];
  *(float64_t *)&v476 = v436.f64[0];
  *((double *)&v476 + 1) = v437;
  *(_OWORD *)(v930 + 32) = v476;
  *(double *)(v930 + 48) = v438;
  *(double *)(v930 + 56) = v430;
  *(double *)&v476 = v431;
  *((_QWORD *)&v476 + 1) = _D16;
  *(_OWORD *)(v930 + 64) = v476;
  *(double *)(v930 + 80) = v426;
  *(double *)(v930 + 88) = v433;
  v24 = __pa;
  if (!*(_BYTE *)(v373 + 56))
    goto LABEL_540;
  *((double *)&v435 + 1) = v438;
  *((double *)&v434 + 1) = v437;
  v432.f64[1] = v436.f64[0];
  *(double *)&v429.i64[1] = v430;
  __asm { FMOV            V0.2D, #1.0 }
  v1054 = _Q0;
  *(double *)&_Q0 = v433;
  v1088 = _Q0;
  v1087 = v429;
  *(_OWORD *)&v1082[24] = *(unint64_t *)&v431;
  *(float64x2_t *)&v1082[8] = v432;
  v1084 = _D16;
  v1083 = v434;
  v1086 = *(unint64_t *)&v426;
  v1085 = v435;
  v1095 = 0;
  memset(v1089, 0, sizeof(v1089));
  *(_QWORD *)v1082 = &off_24C088428;
  v1090 = 0;
  v1091 = 0u;
  v1092 = 0u;
  v1093 = 0;
  v1094 = 3;
  sub_208120918((uint64_t)v1089);
  v1097 = 0;
  v1096 = 0;
  v1098 = 0;
  memset(__src, 0, 48);
  v1101[0] = (float64x2_t)(unint64_t)&v1082[8];
  v1109[0].__locale_ = (std::locale::__imp *)__src;
  v1109[1].__locale_ = 0;
  sub_207DCDCE0((float64x2_t **)v1101, (double **)v1109);
  v479.f64[0] = *(float64_t *)&__src[16];
  _Q17 = *(float64x2_t *)__src;
  v481 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
  _Q0 = vmulq_f64(_Q17, _Q17);
  _D1 = *(_QWORD *)&__src[8];
  __asm { FMLA            D0, D1, V17.D[1] }
  v484 = _Q0.f64[0] + v479.f64[0] * v479.f64[0];
  if (v484 >= 0.0000002635)
  {
    v487 = sqrt(v484);
    v1046 = *(double *)&__src[16];
    v1041 = *(float64x2_t *)__src;
    v1035 = v481;
    v488 = __sincos_stret(v487);
    v481 = v1035;
    _Q17 = v1041;
    v479.f64[0] = v1046;
    v486 = v488.__sinval / v487;
    _Q0.f64[0] = 1.0 / v484 * (1.0 - v488.__cosval);
    v485 = 1.0 / v484 * (1.0 - v488.__sinval / v487);
  }
  else
  {
    _Q0.f64[0] = 0.5 - v484 * (v484 / -720.0 + 0.0416666667);
    v485 = 0.166666667 - v484 * (v484 / -5040.0 + 0.00833333333);
    v486 = 1.0 - v484 * v485;
  }
  if (v484 >= 2.775e-15)
  {
    if (v484 <= 9.0)
      _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v485) / v486;
    else
      _Q0.f64[0] = (_Q0.f64[0] + v486 * -0.5) / (v484 * _Q0.f64[0]);
  }
  else
  {
    _Q0.f64[0] = v484 * 0.0000330687831 + v484 * 0.00138888889 + 0.0833333333;
  }
  *(_QWORD *)&v478.f64[0] = v1088;
  v489.f64[0] = v481.f64[0];
  v489.f64[1] = v479.f64[0];
  v490 = (float64x2_t)vextq_s8(v1087, (int8x16_t)v478, 8uLL);
  v491 = vsubq_f64(vmulq_laneq_f64(_Q17, (float64x2_t)v1087, 1), vmulq_f64(v481, (float64x2_t)v1087));
  __asm { FMOV            V7.2D, #-0.5 }
  v493 = vaddq_f64(v478, vmulq_f64(v491, _Q7));
  *(_QWORD *)&v478.f64[1] = v1087.i64[0];
  v494 = *(_QWORD *)(v373 + 72);
  HIDWORD(v1080.f64[0]) = *(_QWORD *)(v373 + 64);
  LODWORD(v1080.f64[0]) = v494;
  v495 = *(_QWORD *)(v373 + 80);
  v1081[0] = *(_QWORD *)(v373 + 88) != 0;
  v479.f64[1] = _Q17.f64[0];
  v496 = vsubq_f64(vmulq_f64(v489, v478), vmulq_f64(v479, v490));
  v928 = _Q7;
  v497 = (float64x2_t)vextq_s8((int8x16_t)v496, (int8x16_t)v491, 8uLL);
  v491.f64[1] = v496.f64[0];
  *(_QWORD *)&__src[40] = *(_OWORD *)&vaddq_f64(v493, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v496, 1), vmulq_f64(v481, v496))));
  *(float64x2_t *)&__src[24] = vaddq_f64(vaddq_f64((float64x2_t)v1087, vmulq_f64(v496, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v489, v491), vmulq_f64(v479, v497)), _Q0.f64[0]));
  v933 = *(float64x2_t *)&__src[32];
  v935 = *(int8x16_t *)__src;
  v936 = *(float64x2_t *)&__src[16];
  *(_OWORD *)&v1081[8] = *(_OWORD *)(v373 + 96);
  *(_QWORD *)&v1081[24] = *(_QWORD *)(v373 + 112);
  v1080.f64[1] = *(double *)(v373 + 24) + *(double *)(v373 + 24);
  if (v495 >= (uint64_t)(v363[1] - *v363) >> 2)
    v498 = (uint64_t)(v363[1] - *v363) >> 2;
  else
    v498 = v495;
  v1078[1] = 0;
  v1078[0] = 0;
  v1079 = 0;
  if (v498)
  {
    if (v498 > 0x666666666666666)
      sub_207CA420C();
    v499 = operator new(40 * v498);
    v500 = 0;
    v1078[0] = v499;
    v1078[1] = v499;
    v1079 = (char *)v499 + 40 * v498;
    while (1)
    {
      while (1)
      {
        v503 = &__pa[40 * *(unsigned int *)(*v363 + 4 * v500)];
        if (v499 >= (_OWORD *)v1079)
          break;
        v501 = *(_OWORD *)v503;
        v502 = *((_OWORD *)v503 + 1);
        *((_QWORD *)v499 + 4) = *((_QWORD *)v503 + 4);
        *v499 = v501;
        v499[1] = v502;
        v499 = (_OWORD *)((char *)v499 + 40);
        v1078[1] = v499;
        if (++v500 == v498)
          goto LABEL_427;
      }
      v504 = v1078[0];
      v505 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v499 - (char *)v1078[0]) >> 3);
      v506 = v505 + 1;
      if (v505 + 1 > 0x666666666666666)
        sub_207CA420C();
      if (0x999999999999999ALL * ((v1079 - (char *)v1078[0]) >> 3) > v506)
        v506 = 0x999999999999999ALL * ((v1079 - (char *)v1078[0]) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v1079 - (char *)v1078[0]) >> 3) >= 0x333333333333333)
        v507 = 0x666666666666666;
      else
        v507 = v506;
      if (v507)
      {
        if (v507 > 0x666666666666666)
          sub_207CA3AB8();
        v508 = (char *)operator new(40 * v507);
      }
      else
      {
        v508 = 0;
      }
      v509 = &v508[40 * v505];
      v510 = *(_OWORD *)v503;
      v511 = *((_OWORD *)v503 + 1);
      *((_QWORD *)v509 + 4) = *((_QWORD *)v503 + 4);
      *(_OWORD *)v509 = v510;
      *((_OWORD *)v509 + 1) = v511;
      v512 = v509 + 40;
      if (v499 == v504)
      {
        v1078[0] = &v508[40 * v505];
        v1078[1] = v509 + 40;
        v504 = v499;
        v1079 = &v508[40 * v507];
        v363 = v970;
      }
      else
      {
        v363 = v970;
        do
        {
          v513 = *(_OWORD *)((char *)v499 - 40);
          v514 = *(_OWORD *)((char *)v499 - 24);
          *((_QWORD *)v509 - 1) = *((_QWORD *)v499 - 1);
          *(_OWORD *)(v509 - 24) = v514;
          *(_OWORD *)(v509 - 40) = v513;
          v509 -= 40;
          v499 = (_OWORD *)((char *)v499 - 40);
        }
        while (v499 != v504);
        v1078[0] = v509;
        v1078[1] = v512;
        v1079 = &v508[40 * v507];
        if (!v504)
          goto LABEL_426;
      }
      operator delete(v504);
LABEL_426:
      v499 = v512;
      v1078[1] = v512;
      if (++v500 == v498)
      {
LABEL_427:
        v498 = (unint64_t)v1078[0];
        v24 = __pa;
        goto LABEL_429;
      }
    }
  }
  v499 = 0;
LABEL_429:
  *(_QWORD *)__src = &off_24C088428;
  *(_OWORD *)&__src[88] = unk_20827D6D0;
  *(_OWORD *)&__src[104] = xmmword_20827D6E0;
  *(_OWORD *)&__src[120] = unk_20827D6F0;
  *(_OWORD *)&__src[8] = xmmword_20827D680;
  *(_OWORD *)&__src[24] = *(_OWORD *)algn_20827D690;
  *(_OWORD *)&__src[40] = xmmword_20827D6A0;
  memset(&__src[56], 0, 32);
  __src[250] = 0;
  memset(&__src[136], 0, 40);
  memset(&__src[208], 0, 40);
  *(_WORD *)&__src[248] = 3;
  sub_208120918((uint64_t)&__src[136]);
  v1058 = 0;
  *(_QWORD *)&__src[256] = 0;
  v1059 = 0;
  v1060 = v1078;
  v1062 = v1080;
  v1063 = *(_OWORD *)v1081;
  v1064 = *(_OWORD *)&v1081[16];
  v1066 = (double *)&v1080;
  v1067 = 0;
  v1069 = 0;
  v1068 = 0;
  _ZF = v499 == (_OWORD *)v498;
  v515 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v499 - v498) >> 3);
  v1061 = v515;
  v1065 = v515;
  if (!_ZF)
  {
    if (v515 >> 61)
      sub_207CA420C();
    v516 = (char *)operator new(8 * v515);
    v1067 = v516;
    v1069 = &v516[8 * v515];
    bzero(v516, 8 * v515);
    v1068 = &v516[8 * v515];
  }
  v1072 = 0;
  v1071 = 0;
  v1073 = 0;
  v517 = operator new(0x30uLL);
  v518 = v936;
  v519 = vextq_s8(v935, v935, 8uLL);
  v931 = (float64x2_t)vextq_s8((int8x16_t)v518, (int8x16_t)v518, 8uLL);
  v932 = (float64x2_t)vextq_s8((int8x16_t)v933, (int8x16_t)v933, 8uLL);
  v1073 = v517 + 3;
  *v517 = 0u;
  v517[1] = 0u;
  v517[2] = 0u;
  v1071 = v517;
  v1072 = v517 + 3;
  v1074 = v1054;
  v1075 = v1062.f64[1];
  v1076 = v1075 * v1075;
  v1077 = v1075 + v1075;
  *(_QWORD *)&v520.f64[0] = v935.i64[0];
  *(_QWORD *)&v520.f64[1] = v519.i64[0];
  v521 = vmulq_f64(v520, v520);
  v934 = (float64x2_t)v519;
  v522 = v521.f64[0] + *(double *)v519.i64 * *(double *)v519.i64 + v518.f64[0] * v518.f64[0];
  if (v522 >= 0.0000002635)
  {
    v525 = sqrt(v522);
    v526 = __sincos_stret(v525);
    cosval = v526.__cosval;
    v523 = v526.__sinval / v525;
    v518.f64[0] = 1.0 / v522 * (1.0 - v526.__cosval);
    v521.f64[0] = 1.0 / v522 * (1.0 - v526.__sinval / v525);
  }
  else
  {
    v518.f64[0] = 0.5 - v522 * (v522 / -720.0 + 0.0416666667);
    v521.f64[0] = 0.166666667 - v522 * (v522 / -5040.0 + 0.00833333333);
    v523 = 1.0 - v522 * v521.f64[0];
    cosval = 1.0 - v522 * v518.f64[0];
  }
  v527.f64[0] = v936.f64[0];
  v528 = *(double *)v935.i64 * (*(double *)v935.i64 * v518.f64[0]) + cosval;
  v529 = v934.f64[0] * (v934.f64[0] * v518.f64[0]) + cosval;
  v530 = v936.f64[0] * (v936.f64[0] * v518.f64[0]) + cosval;
  v531 = v934.f64[0] * (*(double *)v935.i64 * v518.f64[0]);
  v532 = v936.f64[0] * (*(double *)v935.i64 * v518.f64[0]);
  v533 = v936.f64[0] * (v934.f64[0] * v518.f64[0]);
  v534 = *(double *)v935.i64 * v523;
  v535 = v934.f64[0] * v523;
  v536 = v936.f64[0] * v523;
  v537 = v531 - v536;
  v538 = v532 + v535;
  v539 = v531 + v536;
  v540 = v533 - v534;
  v541 = v532 - v535;
  v542 = v533 + v534;
  *(_QWORD *)&v543.f64[0] = v935.i64[0];
  v543.f64[1] = v934.f64[0];
  v544.f64[0] = v934.f64[0];
  v544.f64[1] = v936.f64[0];
  v545.f64[0] = v932.f64[0];
  v545.f64[1] = v931.f64[0];
  v546.f64[0] = v931.f64[0];
  v546.f64[1] = v933.f64[0];
  *(_QWORD *)&v527.f64[1] = v935.i64[0];
  v547.f64[0] = v933.f64[0];
  v547.f64[1] = v932.f64[0];
  v548 = vsubq_f64(vmulq_f64(v544, v545), vmulq_f64(v527, v547));
  v549 = vsubq_f64(vmulq_f64(v543, v933), vmulq_f64(v934, v931));
  v550 = vaddq_f64(v546, vmulq_n_f64(v548, v518.f64[0]));
  v551 = vaddq_f64(v932, vmulq_f64(v549, v518));
  v552 = (float64x2_t)vextq_s8((int8x16_t)v548, (int8x16_t)v549, 8uLL);
  v549.f64[1] = v548.f64[0];
  *(double *)&__src[8] = v528;
  *(float64_t *)&__src[16] = v539;
  *(float64_t *)&__src[24] = v541;
  *(_QWORD *)&__src[32] = 0;
  *(float64_t *)&__src[40] = v537;
  *(float64_t *)&__src[48] = v529;
  *(float64_t *)&__src[56] = v542;
  *(_QWORD *)&__src[64] = 0;
  *(float64_t *)&__src[72] = v538;
  *(float64_t *)&__src[80] = v540;
  *(float64_t *)&__src[88] = v530;
  *(_QWORD *)&__src[96] = 0;
  *(_QWORD *)&__src[120] = *(_OWORD *)&vaddq_f64(v551, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v543, v548, 1), vmulq_f64(v934, v548)), v521));
  *(float64x2_t *)&__src[104] = vaddq_f64(v550, vmulq_n_f64(vsubq_f64(vmulq_f64(v544, v549), vmulq_f64(v527, v552)), v521.f64[0]));
  *(_QWORD *)&__src[128] = 0x3FF0000000000000;
  v1058 = 0;
  v1059 = 0;
  *(_QWORD *)&__src[256] = 0;
  if (!HIDWORD(v1062.f64[0]))
    goto LABEL_522;
  v553 = 0;
  v929 = 0.0;
  v926 = -1.0;
  v927 = -1.0;
  v554 = 0.5;
  v555 = 1.0;
  while (2)
  {
    v1108 = 0u;
    v1107 = 0u;
    v1106 = 0u;
    v1105 = 0u;
    v1104 = 0u;
    v1103 = 0u;
    v1102 = 0u;
    memset(v1101, 0, sizeof(v1101));
    v557 = (float64x2_t *)*v1060;
    v558 = v1060[1];
    if (*v1060 == v558)
    {
      v560.i64[0] = 0;
      v584.i64[0] = 0;
      *(double *)&v585 = 0.0;
      v586.i64[0] = 0;
      *(double *)&v587 = 0.0;
      v588.i64[0] = 0;
      *(double *)&v589 = 0.0;
      v583 = 0.0;
      v576.i64[0] = 0;
      v572 = 0.0;
      v568.i64[0] = 0;
      v564 = 0.0;
      v660 = 0.0;
      if (v553)
        goto LABEL_449;
    }
    else
    {
      v559.f64[1] = *(float64_t *)&__src[112];
      v1018 = 0.0;
      v560.i64[0] = 0;
      v939 = vextq_s8(*(int8x16_t *)&__src[104], *(int8x16_t *)&__src[104], 8uLL).u64[0];
      *(double *)&v561 = 0.0;
      v562.i64[0] = 0;
      *(double *)&v563 = 0.0;
      v1011 = 0.0;
      v983 = 0;
      v1006 = 0.0;
      v559.f64[0] = *(float64_t *)&__src[88];
      v938 = v559;
      v564 = 0.0;
      v565.f64[0] = 0.0;
      v987 = 0;
      v566.i64[0] = 0;
      v559.f64[0] = *(float64_t *)&__src[120];
      v937 = v559;
      v977 = 0;
      v1000 = 0.0;
      *(double *)&v567 = 0.0;
      v568.i64[0] = 0;
      v979 = 0;
      v569 = v1076;
      v570.i64[0] = 0;
      v974 = 0;
      v993 = 0.0;
      v976 = 0;
      v571.f64[0] = 0.0;
      v572 = 0.0;
      v573.f64[0] = 0.0;
      v975 = 0;
      v574.i64[0] = 0;
      v971 = 0;
      v575.i64[0] = 0;
      v968 = 0;
      v576.i64[0] = 0;
      *(double *)&v577 = 0.0;
      v578.f64[0] = 0.0;
      v579 = 0;
      v580.f64[0] = 0.0;
      v581 = 0;
      v582.f64[0] = 0.0;
      v583 = 0.0;
      v584.i64[0] = 0;
      *(double *)&v585 = 0.0;
      v586.i64[0] = 0;
      *(double *)&v587 = 0.0;
      v588.i64[0] = 0;
      *(double *)&v589 = 0.0;
      do
      {
        v953 = *(double *)&v577;
        v955 = v581;
        v957 = *(double *)&v567;
        v958 = v572;
        __dstc = v589;
        v1030 = v587;
        v1036 = v585;
        v625 = v557[2].f64[0];
        _Q2 = v557[1];
        _D17 = *(_QWORD *)&__src[56];
        v628 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&__src[8], _Q2.f64[0]), *(float64x2_t *)&__src[40], _Q2, 1), *(float64x2_t *)&__src[72], v625);
        __asm { FMLA            D5, D17, V2.D[1] }
        _Q2.f64[1] = v938.f64[1];
        _Q2.f64[0] = _D5 + v938.f64[0] * v625;
        v630.f64[0] = *(float64_t *)&__src[104];
        *(_QWORD *)&v630.f64[1] = v939;
        v631 = vaddq_f64(v630, v628);
        v632 = vaddq_f64(v937, _Q2).f64[0];
        v633 = 1.0;
        v634 = 1.0 / v632;
        if (v632 == 0.0)
          v634 = 1.0;
        v942 = v634 * v631.f64[0] - v557->f64[0];
        v949 = vmuld_lane_f64(v634, v631, 1) - v557->f64[1];
        v950 = *(double *)&v563;
        v635 = *((double *)&v1074 + 1) * (v942 * v942 + v949 * v949);
        v1055 = v586.i64[0];
        v1047 = v584.i64[0];
        v1042 = v588.i64[0];
        v964 = *(double *)v568.i64;
        v966 = *(double *)v560.i64;
        v961 = v564;
        v962 = *(double *)v576.i64;
        v959 = v583;
        v960 = *(double *)v562.i64;
        v956 = v579;
        v951 = *(double *)&v561;
        if (v635 > v569)
        {
          v636 = sqrt(v635);
          v635 = v1077 * v636 - v569;
          v633 = v1075 / v636;
        }
        v637 = vnegq_f64(v631);
        v638 = vmulq_n_f64(v637, v634 * v634);
        v639 = v634;
        v640.f64[0] = 0.0;
        v640.f64[1] = v634;
        v641 = vmulq_f64((float64x2_t)*(unint64_t *)&v634, (float64x2_t)0);
        v642 = vmlaq_laneq_f64(vmlsq_lane_f64(v641, v640, v632, 0), v638, v631, 1);
        v643 = vmlsq_lane_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v639, v632), (float64x2_t)0, v640), v638, v631.f64[0], 0);
        v644 = vmlaq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v639, v637, 1), v640, v631.f64[0]), (float64x2_t)0, v638);
        v645 = vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v639, (float64x2_t)0, v640), (float64x2_t)0, v638);
        v646 = vmlaq_f64(vaddq_f64(v640, v641), (float64x2_t)0, v638);
        v647 = vaddq_f64(v638, vmlaq_f64(v641, (float64x2_t)0, v640));
        v648 = (float64x2_t)vzip1q_s64((int64x2_t)v646, (int64x2_t)v647);
        v649 = (float64x2_t)vzip1q_s64((int64x2_t)v644, (int64x2_t)v645);
        v650 = (float64x2_t)vzip1q_s64((int64x2_t)v642, (int64x2_t)v643);
        v651 = vextq_s8((int8x16_t)v648, (int8x16_t)v648, 8uLL).u64[0];
        v652 = vextq_s8((int8x16_t)v649, (int8x16_t)v649, 8uLL).u64[0];
        v653 = vextq_s8((int8x16_t)v650, (int8x16_t)v650, 8uLL).u64[0];
        v654 = (float64x2_t)vzip2q_s64((int64x2_t)v646, (int64x2_t)v647);
        v655 = (float64x2_t)vzip2q_s64((int64x2_t)v644, (int64x2_t)v645);
        v656 = (float64x2_t)vzip2q_s64((int64x2_t)v642, (int64x2_t)v643);
        v657 = vextq_s8((int8x16_t)v654, (int8x16_t)v654, 8uLL).u64[0];
        v658 = vextq_s8((int8x16_t)v655, (int8x16_t)v655, 8uLL).u64[0];
        v659 = vextq_s8((int8x16_t)v656, (int8x16_t)v656, 8uLL).u64[0];
        if (vabdd_f64(1.0, v633) > 2.22044605e-16)
        {
          *(_QWORD *)&v648.f64[1] = v651;
          v648 = vmulq_n_f64(v648, v633);
          *(_QWORD *)&v649.f64[1] = v652;
          v649 = vmulq_n_f64(v649, v633);
          *(_QWORD *)&v650.f64[1] = v653;
          v650 = vmulq_n_f64(v650, v633);
          *(_QWORD *)&v654.f64[1] = v657;
          v654 = vmulq_n_f64(v654, v633);
          *(_QWORD *)&v655.f64[1] = v658;
          v655 = vmulq_n_f64(v655, v633);
          *(_QWORD *)&v656.f64[1] = v659;
          v656 = vmulq_n_f64(v656, v633);
          v659 = vextq_s8((int8x16_t)v656, (int8x16_t)v656, 8uLL).u64[0];
          v653 = vextq_s8((int8x16_t)v650, (int8x16_t)v650, 8uLL).u64[0];
          v658 = vextq_s8((int8x16_t)v655, (int8x16_t)v655, 8uLL).u64[0];
          v652 = vextq_s8((int8x16_t)v649, (int8x16_t)v649, 8uLL).u64[0];
          v657 = vextq_s8((int8x16_t)v654, (int8x16_t)v654, 8uLL).u64[0];
          v651 = vextq_s8((int8x16_t)v648, (int8x16_t)v648, 8uLL).u64[0];
        }
        v1018 = v1018 + v635;
        *(_QWORD *)&v654.f64[1] = v657;
        *(_QWORD *)&v648.f64[1] = v651;
        *(_QWORD *)&v655.f64[1] = v658;
        *(_QWORD *)&v649.f64[1] = v652;
        *(_QWORD *)&v656.f64[1] = v659;
        *(_QWORD *)&v650.f64[1] = v653;
        v943 = vmlaq_laneq_f64(vmulq_n_f64(v648, v642.f64[0]), v654, v642, 1);
        v590 = vmlaq_laneq_f64(vmulq_n_f64(v650, v642.f64[0]), v656, v642, 1);
        v591 = vmlaq_laneq_f64(vmulq_n_f64(v649, v642.f64[0]), v655, v642, 1);
        v592 = vmlaq_laneq_f64(vmulq_n_f64(v650, v643.f64[0]), v656, v643, 1);
        v593 = vmlaq_laneq_f64(vmulq_n_f64(v649, v643.f64[0]), v655, v643, 1);
        v594 = vmlaq_laneq_f64(vmulq_n_f64(v648, v643.f64[0]), v654, v643, 1);
        v595 = vmlaq_laneq_f64(vmulq_n_f64(v650, v644.f64[0]), v656, v644, 1);
        v596 = vmlaq_laneq_f64(vmulq_n_f64(v649, v644.f64[0]), v655, v644, 1);
        v597 = vmlaq_laneq_f64(vmulq_n_f64(v648, v644.f64[0]), v654, v644, 1);
        v945 = vmlaq_laneq_f64(vmulq_n_f64(v650, v645.f64[0]), v656, v645, 1);
        v947 = vmlaq_laneq_f64(vmulq_n_f64(v649, v645.f64[0]), v655, v645, 1);
        v946 = vmlaq_laneq_f64(vmulq_n_f64(v648, v645.f64[0]), v654, v645, 1);
        v944 = vmlaq_laneq_f64(vmulq_n_f64(v650, v646.f64[0]), v656, v646, 1);
        v598 = vmlaq_laneq_f64(vmulq_n_f64(v649, v646.f64[0]), v655, v646, 1);
        v599 = vmlaq_laneq_f64(vmulq_n_f64(v648, v646.f64[0]), v654, v646, 1);
        v600 = vmlaq_laneq_f64(vmulq_n_f64(v650, v647.f64[0]), v656, v647, 1);
        v601 = vmlaq_laneq_f64(vmulq_n_f64(v649, v647.f64[0]), v655, v647, 1);
        v602 = vmlaq_laneq_f64(vmulq_n_f64(v648, v647.f64[0]), v654, v647, 1);
        v603 = vmlaq_n_f64(vmulq_n_f64(v650, v942), v656, v949);
        v604 = vmlaq_n_f64(vmulq_n_f64(v649, v942), v655, v949);
        v948 = vmlaq_n_f64(vmulq_n_f64(v648, v942), v654, v949);
        v605.f64[0] = v962;
        v605.f64[1] = v953;
        v606.f64[0] = v966;
        v575.i64[1] = v968;
        v574.i64[1] = v971;
        v969 = (float64x2_t)v575;
        v972 = (float64x2_t)v574;
        v607.f64[0] = v1011;
        *(_QWORD *)&v607.f64[1] = v983;
        v608.f64[0] = v960;
        v608.f64[1] = v950;
        v606.f64[1] = v951;
        v566.i64[1] = v977;
        *(_QWORD *)&v565.f64[1] = v987;
        v609 = (float64x2_t)v566;
        v610 = v565;
        v611.f64[0] = v1006;
        v611.f64[1] = v961;
        v570.i64[1] = v974;
        v612.f64[0] = v964;
        *(_QWORD *)&v612.f64[1] = v979;
        v613 = (float64x2_t)v570;
        v614.f64[0] = v1000;
        v614.f64[1] = v957;
        *(_QWORD *)&v573.f64[1] = v975;
        v571.f64[1] = v958;
        v615 = v573;
        v616 = v571;
        v617.f64[0] = v993;
        *(_QWORD *)&v617.f64[1] = v976;
        v582.f64[1] = v959;
        *(_QWORD *)&v580.f64[1] = v955;
        *(_QWORD *)&v578.f64[1] = v956;
        v560 = (int8x16_t)vaddq_f64(v606, v590);
        v561 = vextq_s8(v560, v560, 8uLL).u64[0];
        v562 = (int8x16_t)vaddq_f64(v608, v591);
        v563 = vextq_s8(v562, v562, 8uLL).u64[0];
        v618 = (int8x16_t)vaddq_f64(v607, v943);
        v983 = vextq_s8(v618, v618, 8uLL).u64[0];
        v619 = (int8x16_t)vaddq_f64(v611, v592);
        *(_QWORD *)&v564 = vextq_s8(v619, v619, 8uLL).u64[0];
        v566 = (int8x16_t)vaddq_f64(v610, v593);
        v987 = vextq_s8(v566, v566, 8uLL).u64[0];
        v620 = (int8x16_t)vaddq_f64(v609, v594);
        v977 = vextq_s8(v620, v620, 8uLL).u64[0];
        v570 = (int8x16_t)vaddq_f64(v614, v595);
        v567 = vextq_s8(v570, v570, 8uLL).u64[0];
        v568 = (int8x16_t)vaddq_f64(v612, v596);
        v979 = vextq_s8(v568, v568, 8uLL).u64[0];
        v621 = (int8x16_t)vaddq_f64(v613, v597);
        v1101[0] = (float64x2_t)v560;
        v1101[1] = (float64x2_t)v562;
        v974 = vextq_s8(v621, v621, 8uLL).u64[0];
        v622 = (int8x16_t)vaddq_f64(v617, v945);
        v1011 = *(double *)v618.i64;
        v1101[2] = (float64x2_t)v618;
        v1000 = *(double *)v570.i64;
        v1006 = *(double *)v619.i64;
        v1101[3] = (float64x2_t)v619;
        v565 = (float64x2_t)v566;
        v566.i64[0] = v620.i64[0];
        v623 = (int8x16_t)vaddq_f64(v616, v947);
        *(_QWORD *)&v572 = vextq_s8(v623, v623, 8uLL).u64[0];
        v1101[4] = v565;
        v1101[5] = (float64x2_t)v620;
        v624 = (int8x16_t)vaddq_f64(v615, v946);
        v975 = vextq_s8(v624, v624, 8uLL).u64[0];
        v976 = vextq_s8(v622, v622, 8uLL).u64[0];
        v574 = (int8x16_t)vaddq_f64(v972, v944);
        v1101[6] = (float64x2_t)v570;
        v570.i64[0] = v621.i64[0];
        v1101[7] = (float64x2_t)v568;
        v575 = (int8x16_t)vaddq_f64(v969, v598);
        v968 = vextq_s8(v575, v575, 8uLL).u64[0];
        v971 = vextq_s8(v574, v574, 8uLL).u64[0];
        v1101[8] = (float64x2_t)v621;
        v993 = *(double *)v622.i64;
        v1101[9] = (float64x2_t)v622;
        v571 = (float64x2_t)v623;
        v573 = (float64x2_t)v624;
        v576 = (int8x16_t)vaddq_f64(v605, v599);
        v577 = vextq_s8(v576, v576, 8uLL).u64[0];
        v578 = vaddq_f64(v578, v600);
        v1101[10] = v571;
        v1102 = v573;
        v579 = vextq_s8((int8x16_t)v578, (int8x16_t)v578, 8uLL).u64[0];
        v580 = vaddq_f64(v580, v601);
        v581 = vextq_s8((int8x16_t)v580, (int8x16_t)v580, 8uLL).u64[0];
        v1103 = v574;
        v1104 = v575;
        v582 = vaddq_f64(v582, v602);
        *(_QWORD *)&v583 = vextq_s8((int8x16_t)v582, (int8x16_t)v582, 8uLL).u64[0];
        v1105 = v576;
        v1106 = v578;
        v1107 = v580;
        v1108 = v582;
        *(_QWORD *)&v600.f64[0] = v1047;
        *(_QWORD *)&v600.f64[1] = v1036;
        v584 = (int8x16_t)vsubq_f64(v600, v603);
        v585 = vextq_s8(v584, v584, 8uLL).u64[0];
        *(_QWORD *)&v603.f64[0] = v1055;
        *(_QWORD *)&v603.f64[1] = v1030;
        v586 = (int8x16_t)vsubq_f64(v603, v604);
        v587 = vextq_s8(v586, v586, 8uLL).u64[0];
        *(_QWORD *)&v599.f64[0] = v1042;
        *(_QWORD *)&v599.f64[1] = __dstc;
        v588 = (int8x16_t)vsubq_f64(v599, v948);
        v557 = (float64x2_t *)((char *)v557 + 40);
        v589 = vextq_s8(v588, v588, 8uLL).u64[0];
        v569 = v1076;
      }
      while (v557 != v558);
      v554 = 0.5;
      v555 = 1.0;
      v660 = v1018;
      if (v553)
      {
LABEL_449:
        v661 = v1070.f64[0];
        goto LABEL_452;
      }
    }
    v1070 = (float64x2_t)xmmword_20827D5E0;
    v929 = v660 * v554;
    v662 = v660 * v554;
    v661 = 0.001;
    v926 = v662;
    v927 = v662;
LABEL_452:
    v1101[0].f64[0] = *(double *)v560.i64 + v661;
    v1101[3].f64[1] = v564 + v661;
    v1101[7].f64[0] = *(double *)v568.i64 + v661;
    v1101[10].f64[1] = v572 + v661;
    *(double *)v1105.i64 = *(double *)v576.i64 + v661;
    v1108.f64[1] = v583 + v661;
    v1048 = *(double *)v584.i64;
    v663.i64[0] = v584.i64[0];
    v1037 = *(double *)&v585;
    v663.i64[1] = v585;
    v1056 = *(double *)v586.i64;
    *(_QWORD *)&v664 = v586.i64[0];
    v1031 = *(double *)&v587;
    *((_QWORD *)&v664 + 1) = v587;
    v1099 = (float64x2_t)v663;
    *(_OWORD *)v1100 = v664;
    v1043 = *(double *)v588.i64;
    v663.i64[0] = v588.i64[0];
    __dstd = *(double *)&v589;
    v663.i64[1] = v589;
    *(int8x16_t *)&v1100[16] = v663;
    v665 = (void *)MEMORY[0x20BD028B4](32, 32);
    LODWORD(v1112.f64[0]) = 0;
    v1109[0].__locale_ = 0;
    sub_207CC4CB8();
    if (!LODWORD(v1112.f64[0]))
    {
      v925 = (void *)MEMORY[0x20BD028B4]((8 * (int)*(double *)&v1109[0].__locale_ + 31) & 0xFFFFFFFE0, 32);
      sub_207CC4CB8();
      operator delete[](v925);
    }
    operator delete[](v665);
    _Q23 = v1099;
    v669 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)_Q23, 8uLL);
    v670.f64[0] = *(float64_t *)v1100;
    v671.f64[0] = *(float64_t *)&v1100[24];
    v672 = *(float64x2_t *)&v1100[8];
    v673 = (float64x2_t)vextq_s8((int8x16_t)v672, (int8x16_t)v672, 8uLL);
    _D9 = v1099.f64[1];
    __asm { FMLA            D0, D9, V23.D[1] }
    v676 = _D0 + v670.f64[0] * v670.f64[0];
    if (v676 >= 0.0000002635)
    {
      v679 = sqrt(v676);
      v1019 = *(double *)v1100;
      v1012 = (int8x16_t)v1099;
      *(float64x2_t *)v1001 = v671;
      v1007 = v669;
      v988 = v673;
      *(_OWORD *)v994 = *(_OWORD *)&v1100[8];
      v680 = __sincos_stret(v679);
      v678 = v680.__cosval;
      v673 = v988;
      v672 = *(float64x2_t *)v994;
      v671 = *(float64x2_t *)v1001;
      v669 = v1007;
      _Q23 = (float64x2_t)v1012;
      v670.f64[0] = v1019;
      v677 = v680.__sinval / v679;
      v667.f64[0] = v555 / v676 * (v555 - v680.__cosval);
      v666.f64[0] = v555 / v676 * (v555 - v680.__sinval / v679);
    }
    else
    {
      v667.f64[0] = v554 - v676 * (v676 / -720.0 + 0.0416666667);
      v666.f64[0] = 0.166666667 - v676 * (v676 / -5040.0 + 0.00833333333);
      v677 = v555 - v676 * v666.f64[0];
      v678 = v555 - v676 * v667.f64[0];
    }
    v681.f64[0] = _Q23.f64[0] * (_Q23.f64[0] * v667.f64[0]) + v678;
    v682 = _D9 * (_D9 * v667.f64[0]) + v678;
    v683 = v670.f64[0] * (v670.f64[0] * v667.f64[0]) + v678;
    v684 = _D9 * (_Q23.f64[0] * v667.f64[0]);
    v685 = v670.f64[0] * (_Q23.f64[0] * v667.f64[0]);
    v686 = v670.f64[0] * (_D9 * v667.f64[0]);
    v687 = _Q23.f64[0] * v677;
    v688 = _D9 * v677;
    v689 = v670.f64[0] * v677;
    v690.f64[0] = v684 - v670.f64[0] * v677;
    v691.f64[0] = v685 + v688;
    v681.f64[1] = v684 + v689;
    v692.f64[1] = 0.0;
    v692.f64[0] = v685 - v688;
    v690.f64[1] = v682;
    *(_QWORD *)&v693.f64[1] = unk_20827D6B8;
    v693.f64[0] = v686 + v687;
    v691.f64[1] = v686 - v687;
    *(_QWORD *)&v694.f64[1] = unk_20827D6D8;
    v694.f64[0] = v683;
    v695.f64[0] = v669.f64[0];
    v695.f64[1] = v670.f64[0];
    v696.f64[0] = v671.f64[0];
    v696.f64[1] = v672.f64[0];
    v697.f64[0] = v672.f64[0];
    v697.f64[1] = v673.f64[0];
    v670.f64[1] = _Q23.f64[0];
    v698.f64[0] = v673.f64[0];
    v698.f64[1] = v671.f64[0];
    v699 = vsubq_f64(vmulq_f64(v695, v696), vmulq_f64(v670, v698));
    v700 = vsubq_f64(vmulq_f64(_Q23, v673), vmulq_f64(v669, v672));
    v701 = vaddq_f64(v697, vmulq_n_f64(v699, v667.f64[0]));
    v702 = vaddq_f64(v671, vmulq_f64(v700, v667));
    v703 = (float64x2_t)vextq_s8((int8x16_t)v699, (int8x16_t)v700, 8uLL);
    v700.f64[1] = v699.f64[0];
    v704 = vaddq_f64(v701, vmulq_n_f64(vsubq_f64(vmulq_f64(v695, v700), vmulq_f64(v670, v703)), v666.f64[0]));
    *(_QWORD *)&v702.f64[0] = *(_OWORD *)&vaddq_f64(v702, vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q23, v699, 1), vmulq_f64(v669, v699)), v666));
    *(_QWORD *)&v705.f64[1] = unk_20827D6F8;
    v705.f64[0] = v702.f64[0];
    v706 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v681, *(double *)&__src[8]), v690, *(float64x2_t *)&__src[8], 1), v691, *(double *)&__src[24]), v704, *(float64x2_t *)&__src[24], 1);
    v707 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692, *(double *)&__src[8]), v693, *(float64x2_t *)&__src[8], 1), v694, *(double *)&__src[24]), v705, *(float64x2_t *)&__src[24], 1);
    v708 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v681, *(double *)&__src[40]), v690, *(float64x2_t *)&__src[40], 1), v691, *(double *)&__src[56]), v704, *(float64x2_t *)&__src[56], 1);
    v709 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692, *(double *)&__src[40]), v693, *(float64x2_t *)&__src[40], 1), v694, *(double *)&__src[56]), v705, *(float64x2_t *)&__src[56], 1);
    v710 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v681, *(double *)&__src[72]), v690, *(float64x2_t *)&__src[72], 1), v691, *(double *)&__src[88]), v704, *(float64x2_t *)&__src[88], 1);
    v711 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692, *(double *)&__src[72]), v693, *(float64x2_t *)&__src[72], 1), v694, *(double *)&__src[88]), v705, *(float64x2_t *)&__src[88], 1);
    v712 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v681, *(double *)&__src[104]), v690, *(float64x2_t *)&__src[104], 1), v691, *(double *)&__src[120]), v704, *(float64x2_t *)&__src[120], 1);
    v713 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692, *(double *)&__src[104]), v693, *(float64x2_t *)&__src[104], 1), v694, *(double *)&__src[120]), v705, *(float64x2_t *)&__src[120], 1);
    *(float64x2_t *)&__src[8] = v706;
    *(float64x2_t *)&__src[24] = v707;
    *(float64x2_t *)&__src[40] = v708;
    *(float64x2_t *)&__src[56] = v709;
    *(float64x2_t *)&__src[72] = v710;
    *(float64x2_t *)&__src[88] = v711;
    *(float64x2_t *)&__src[104] = v712;
    *(float64x2_t *)&__src[120] = v713;
    v714 = *(void **)&__src[256];
    *(_QWORD *)&__src[256] = 0;
    if (v714)
      operator delete(v714);
    v715 = v1058;
    v1058 = 0;
    if (v715)
      operator delete(v715);
    v716 = v1059;
    v1059 = 0;
    if (v716)
      operator delete(v716);
    memset(v1110, 0, sizeof(v1110));
    *(_OWORD *)&v1109[0].__locale_ = 0u;
    v1112 = (float64x2_t)(unint64_t)&__src[8];
    v1111 = (float64x2_t)(unint64_t)v1109;
    sub_207DCDCE0((float64x2_t **)&v1112, (double **)&v1111);
    v721.f64[0] = *(float64_t *)v1110;
    _Q18 = *(float64x2_t *)&v1109[0].__locale_;
    _Q0 = vmulq_f64(_Q18, _Q18);
    _D1 = v1109[1].__locale_;
    __asm { FMLA            D0, D1, V18.D[1] }
    v725 = _Q0.f64[0] + v721.f64[0] * v721.f64[0];
    if (v725 >= 0.0000002635)
    {
      v727 = sqrt(v725);
      v1020 = *(double *)v1110;
      v1013 = *(float64x2_t *)&v1109[0].__locale_;
      v728 = __sincos_stret(v727);
      _Q18 = v1013;
      v721.f64[0] = v1020;
      v717.f64[0] = v728.__sinval / v727;
      _Q0.f64[0] = v555 / v725 * (v555 - v728.__cosval);
      v726 = v555 / v725 * (v555 - v728.__sinval / v727);
      if (v725 >= 2.775e-15)
        goto LABEL_465;
    }
    else
    {
      _Q0.f64[0] = v554 - v725 * (v725 / -720.0 + 0.0416666667);
      v726 = 0.166666667 - v725 * (v725 / -5040.0 + 0.00833333333);
      v717.f64[0] = v555 - v725 * v726;
      if (v725 >= 2.775e-15)
      {
LABEL_465:
        if (v725 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * v554 - v726) / v717.f64[0];
        else
          _Q0.f64[0] = (_Q0.f64[0] + v717.f64[0] * -0.5) / (v725 * _Q0.f64[0]);
        goto LABEL_470;
      }
    }
    _Q0.f64[0] = v725 * 0.0000330687831 + v725 * 0.00138888889 + 0.0833333333;
LABEL_470:
    v729 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
    v717.f64[0] = *(float64_t *)&__src[120];
    v730.f64[0] = v729.f64[0];
    v730.f64[1] = v721.f64[0];
    v731 = (float64x2_t)vextq_s8(*(int8x16_t *)&__src[104], (int8x16_t)v717, 8uLL);
    v732 = vsubq_f64(vmulq_laneq_f64(_Q18, *(float64x2_t *)&__src[104], 1), vmulq_f64(v729, *(float64x2_t *)&__src[104]));
    v733 = vaddq_f64(v717, vmulq_f64(v732, v928));
    v717.f64[1] = *(float64_t *)&__src[104];
    v721.f64[1] = _Q18.f64[0];
    v734 = vsubq_f64(vmulq_f64(v730, v717), vmulq_f64(v721, v731));
    v735 = (float64x2_t)vextq_s8((int8x16_t)v734, (int8x16_t)v732, 8uLL);
    v732.f64[1] = v734.f64[0];
    v736 = vaddq_f64(*(float64x2_t *)&__src[104], vmulq_f64(v734, v928));
    v737 = vmulq_laneq_f64(_Q18, v734, 1);
    v738 = vmulq_f64(v729, v734);
    v739 = vsubq_f64(vmulq_f64(v730, v732), vmulq_f64(v721, v735));
    *((_QWORD *)&v1110[1] + 1) = *(_OWORD *)&vaddq_f64(v733, vmulq_f64(_Q0, vsubq_f64(v737, v738)));
    *(float64x2_t *)((char *)v1110 + 8) = vaddq_f64(v736, vmulq_n_f64(v739, _Q0.f64[0]));
    _Q24 = *(float64x2_t *)&v1109[0].__locale_;
    v740.f64[0] = *(float64_t *)v1110;
    v742 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
    v1021 = v742;
    v743 = (float64x2_t)v1110[1];
    v720.f64[0] = *((float64_t *)&v1110[1] + 1);
    v719.f64[0] = *((float64_t *)v1110 + 1);
    _Q3 = vmulq_f64(_Q24, _Q24);
    _D9 = v1109[1].__locale_;
    __asm { FMLA            D3, D9, V24.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v740.f64[0], v740.f64[0]);
    v1014 = (int8x16_t)v1110[0];
    *(_OWORD *)v1002 = v1110[1];
    locale = v1109[0].__locale_;
    if (_Q3.f64[0] >= 0.0000002635)
    {
      v748 = sqrt(_Q3.f64[0]);
      v989 = v719;
      *(float64x2_t *)v995 = v720;
      v984 = _Q3;
      v749 = __sincos_stret(v748);
      v747 = v749.__cosval;
      v719 = v989;
      v720 = *(float64x2_t *)v995;
      v743 = *(float64x2_t *)v1002;
      *(_QWORD *)&_Q24.f64[0] = locale;
      *(_QWORD *)&v740.f64[0] = v1014.i64[0];
      v739.f64[1] = v984.f64[1];
      v746 = v749.__sinval / v748;
      v739.f64[0] = v555 / v984.f64[0] * (v555 - v749.__cosval);
      v742.f64[0] = v555 / v984.f64[0] * (v555 - v749.__sinval / v748);
    }
    else
    {
      v739.f64[0] = v554 - _Q3.f64[0] * (_Q3.f64[0] / -720.0 + 0.0416666667);
      v742.f64[0] = 0.166666667 - _Q3.f64[0] * (_Q3.f64[0] / -5040.0 + 0.00833333333);
      v746 = v555 - _Q3.f64[0] * v742.f64[0];
      v747 = v555 - _Q3.f64[0] * v739.f64[0];
    }
    v750 = _Q24.f64[0] * (_Q24.f64[0] * v739.f64[0]) + v747;
    v751 = *(double *)&_D9 * (*(double *)&_D9 * v739.f64[0]) + v747;
    v752 = v740.f64[0] * (v740.f64[0] * v739.f64[0]) + v747;
    v753 = *(double *)&_D9 * (_Q24.f64[0] * v739.f64[0]);
    v754 = v740.f64[0] * (_Q24.f64[0] * v739.f64[0]);
    v755 = v740.f64[0] * (*(double *)&_D9 * v739.f64[0]);
    v756 = _Q24.f64[0] * v746;
    v757 = *(double *)&_D9 * v746;
    v758 = v740.f64[0] * v746;
    v759 = v753 - v758;
    v760 = v754 + v757;
    v761 = v753 + v758;
    v762 = v755 - v756;
    v763 = v754 - v757;
    v764 = v755 + v756;
    v765.f64[0] = _Q24.f64[0];
    v765.f64[1] = v1021.f64[0];
    v766.f64[0] = v1021.f64[0];
    v766.f64[1] = v740.f64[0];
    v767.f64[0] = v720.f64[0];
    v767.f64[1] = v719.f64[0];
    v768.f64[0] = v719.f64[0];
    v768.f64[1] = v743.f64[0];
    v740.f64[1] = _Q24.f64[0];
    v769.f64[0] = v743.f64[0];
    v769.f64[1] = v720.f64[0];
    v770 = vsubq_f64(vmulq_f64(v766, v767), vmulq_f64(v740, v769));
    _Q24 = vsubq_f64(vmulq_f64(v765, v743), vmulq_f64(v1021, v719));
    v771 = vaddq_f64(v768, vmulq_n_f64(v770, v739.f64[0]));
    v772 = vaddq_f64(v720, vmulq_f64(_Q24, v739));
    v773 = (float64x2_t)vextq_s8((int8x16_t)v770, (int8x16_t)_Q24, 8uLL);
    _Q24.f64[1] = v770.f64[0];
    *(float64_t *)&__src[8] = v750;
    *(double *)&__src[16] = v761;
    *(float64_t *)&__src[24] = v763;
    *(_QWORD *)&__src[32] = 0;
    *(double *)&__src[40] = v759;
    *(double *)&__src[48] = v751;
    *(float64_t *)&__src[56] = v764;
    *(_QWORD *)&__src[64] = 0;
    *(float64_t *)&__src[72] = v760;
    *(float64_t *)&__src[80] = v762;
    *(float64_t *)&__src[88] = v752;
    *(_QWORD *)&__src[96] = 0;
    *(_QWORD *)&__src[120] = *(_OWORD *)&vaddq_f64(v772, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v765, v770, 1), vmulq_f64(v1021, v770)), v742));
    *(float64x2_t *)&__src[104] = vaddq_f64(v771, vmulq_n_f64(vsubq_f64(vmulq_f64(v766, _Q24), vmulq_f64(v740, v773)), v742.f64[0]));
    v775 = *(void **)&__src[256];
    *(_QWORD *)&__src[128] = 0x3FF0000000000000;
    *(_QWORD *)&__src[256] = 0;
    if (v775)
      operator delete(v775);
    v776 = v1058;
    v1058 = 0;
    if (v776)
      operator delete(v776);
    v777 = v1059;
    v1059 = 0;
    if (v777)
      operator delete(v777);
    v779 = *(float64x2_t *)v1002;
    v778 = locale;
    v780 = vextq_s8((int8x16_t)v779, (int8x16_t)v779, 8uLL);
    v781 = v1014;
    v782 = vextq_s8(v781, v781, 8uLL);
    v783.i64[1] = *(_QWORD *)&v1100[24];
    _Q2 = v1099;
    _D4 = *(_QWORD *)&v1099.f64[1];
    __asm { FMLA            D3, D4, V2.D[1] }
    _D4 = *(_QWORD *)&v1100[8];
    __asm { FMLA            D3, D4, V1.D[1] }
    _D4 = *(_QWORD *)&v1100[24];
    __asm { FMLA            D3, D4, V0.D[1] }
    *(_QWORD *)&v791.f64[0] = locale;
    v792 = v1021;
    v791.f64[1] = v1021.f64[0];
    if (sqrt(_D3) < v1066[4]
                   * (sqrt(vmulq_f64(v791, v791).f64[0]+ v792.f64[0] * v792.f64[0]+ *(double *)v781.i64 * *(double *)v781.i64+ *(double *)v782.i64 * *(double *)v782.i64+ v779.f64[0] * v779.f64[0]+ *(double *)v780.i64 * *(double *)v780.i64)+ v1066[4]))
    {
      v556 = 0x100000000;
      if (v553 >= LODWORD(v1062.f64[0]))
        goto LABEL_516;
LABEL_438:
      ++v553;
      v935.i64[0] = (uint64_t)v778;
      v783.i64[0] = *(_QWORD *)&v792.f64[0];
      v934 = (float64x2_t)v783;
      *(_QWORD *)&v936.f64[0] = v781.i64[0];
      v783.i64[0] = v782.i64[0];
      v931 = (float64x2_t)v783;
      v783.i64[0] = *(_QWORD *)&v779.f64[0];
      v933 = (float64x2_t)v783;
      v783.i64[0] = v780.i64[0];
      v932 = (float64x2_t)v783;
      if (v553 >= HIDWORD(v1062.f64[0]))
        goto LABEL_516;
      continue;
    }
    break;
  }
  v793.f64[0] = v1056;
  v793.f64[1] = v1031;
  v794.f64[0] = v1048;
  v794.f64[1] = v1037;
  v795.f64[0] = v1043;
  v795.f64[1] = __dstd;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v794), vabsq_f64(v795)), vabsq_f64(v793))) < v1066[3])
  {
    v556 = 0x200000000;
    if (v553 >= LODWORD(v1062.f64[0]))
      goto LABEL_516;
    goto LABEL_438;
  }
  v796 = (float64x2_t *)*v1060;
  v797 = v1060[1];
  if (*v1060 == v797)
  {
    v800 = 0.0;
  }
  else
  {
    _D5 = *(_QWORD *)&__src[56];
    v799 = vextq_s8(*(int8x16_t *)&__src[104], *(int8x16_t *)&__src[104], 8uLL).u64[0];
    v718.f64[0] = *(float64_t *)&__src[120];
    v800 = 0.0;
    do
    {
      _Q24.f64[0] = v796[2].f64[0];
      _Q26 = v796[1];
      v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&__src[8], _Q26.f64[0]), *(float64x2_t *)&__src[40], _Q26, 1), *(float64x2_t *)&__src[72], _Q24.f64[0]);
      __asm { FMLA            D28, D5, V26.D[1] }
      _Q24.f64[0] = _D28 + *(double *)&__src[88] * _Q24.f64[0];
      _Q26.f64[0] = *(float64_t *)&__src[104];
      *(_QWORD *)&_Q26.f64[1] = v799;
      v804 = vaddq_f64(_Q26, v802);
      _Q24.f64[0] = vaddq_f64(v718, _Q24).f64[0];
      if (_Q24.f64[0] == 0.0)
        v805 = v555;
      else
        v805 = v555 / _Q24.f64[0];
      _Q25 = vmlaq_n_f64(vnegq_f64(*v796), v804, v805);
      _Q24 = vmulq_f64(_Q25, _Q25);
      _D26 = _Q25.f64[1];
      __asm { FMLA            D24, D26, V25.D[1] }
      _Q24.f64[0] = *((double *)&v1074 + 1) * _Q24.f64[0];
      v808 = v1077 * sqrt(_Q24.f64[0]) - v1076;
      if (_Q24.f64[0] > v1076)
        _Q24.f64[0] = v808;
      v800 = v800 + _Q24.f64[0];
      v796 = (float64x2_t *)((char *)v796 + 40);
    }
    while (v796 != v797);
  }
  v809 = v800 * v554;
  v810 = v929 - v800 * v554;
  if (fabs(v810 / v929) >= *((double *)&v1064 + 1))
  {
    if (*((_BYTE *)v1066 + 16))
    {
      v990 = v782;
      *(int8x16_t *)v996 = v780;
      if (v929 <= v809)
        v811 = "I";
      else
        v811 = "D";
      v812 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)v811, 1);
      sub_207CBAB98(v812, (uint64_t)"[last error]->[new error][lambda][delta]  : [", 45);
      v813 = (_QWORD *)std::ostream::operator<<();
      sub_207CBAB98(v813, (uint64_t)" -> ", 4);
      v814 = (_QWORD *)std::ostream::operator<<();
      sub_207CBAB98(v814, (uint64_t)"][", 2);
      v815 = (_QWORD *)std::ostream::operator<<();
      sub_207CBAB98(v815, (uint64_t)"][", 2);
      _V2.D[1] = *(_QWORD *)&v1099.f64[1];
      _D4 = *(_QWORD *)&v1099.f64[1];
      __asm { FMLA            D3, D4, V2.D[1] }
      _D2 = *(_QWORD *)&v1100[8];
      __asm { FMLA            D3, D2, V1.D[1] }
      _D1 = *(_QWORD *)&v1100[24];
      __asm { FMLA            D3, D1, V0.D[1] }
      v823 = (_QWORD *)std::ostream::operator<<();
      v824 = sub_207CBAB98(v823, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v824 + *(_QWORD *)(*v824 - 24)));
      v825 = std::locale::use_facet(v1109, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v825->__vftable[2].~facet_0)(v825, 10);
      std::locale::~locale(v1109);
      std::ostream::put();
      std::ostream::flush();
      v783 = *(int8x16_t *)&v1100[16];
      _Q2 = v1099;
      _D3 = vextq_s8(v783, v783, 8uLL).u64[0];
      _D4 = vextq_s8(*(int8x16_t *)v1100, *(int8x16_t *)v1100, 8uLL).u64[0];
      _D5 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
      v829.f64[0] = v1099.f64[0];
      v830.f64[0] = *(float64_t *)v1100;
      v831.f64[0] = *(float64_t *)&v1100[16];
      v781.i64[0] = v1014.i64[0];
      v779 = *(float64x2_t *)v1002;
      v778 = locale;
      v782 = v990;
      v780 = *(int8x16_t *)v996;
    }
    else
    {
      _D3 = vextq_s8(*(int8x16_t *)&v1100[16], *(int8x16_t *)&v1100[16], 8uLL).u64[0];
      _D4 = vextq_s8(*(int8x16_t *)v1100, *(int8x16_t *)v1100, 8uLL).u64[0];
      _D5 = vextq_s8((int8x16_t)v1099, (int8x16_t)v1099, 8uLL).u64[0];
      v829.f64[0] = v1099.f64[0];
      v830.f64[0] = *(float64_t *)v1100;
      v831.f64[0] = *(float64_t *)&v1100[16];
      v781.i64[0] = v1014.i64[0];
      v779 = *(float64x2_t *)v1002;
      v778 = locale;
    }
    *(_QWORD *)&v829.f64[1] = _D5;
    *(_QWORD *)&v830.f64[1] = _D4;
    *(_QWORD *)&v831.f64[1] = _D3;
    v832.f64[0] = v1043;
    v832.f64[1] = __dstd;
    _Q18 = vmlaq_n_f64(v832, v831, v1070.f64[0]);
    v834.f64[0] = v1056;
    v834.f64[1] = v1031;
    _Q17 = vmlaq_n_f64(v834, v830, v1070.f64[0]);
    v836.f64[0] = v1048;
    v836.f64[1] = v1037;
    _Q16 = vmlaq_n_f64(v836, v829, v1070.f64[0]);
    _Q2 = vmulq_f64(_Q2, _Q16);
    __asm
    {
      FMLA            D2, D5, V16.D[1]
      FMLA            D2, D4, V17.D[1]
      FMLA            D2, D3, V18.D[1]
    }
    if (v810 / _Q2.f64[0] >= 0.0)
    {
      v556 = 0;
      v845 = v555
           - (v810 / _Q2.f64[0] + v810 / _Q2.f64[0] + -1.0)
           * ((v810 / _Q2.f64[0] + v810 / _Q2.f64[0] + -1.0)
            * (v810 / _Q2.f64[0] + v810 / _Q2.f64[0] + -1.0));
      if (v845 > 0.666666667)
        v845 = 0.666666667;
      v1070.f64[0] = v1070.f64[0] * fmax(v845, 0.333333333);
      v1070.f64[1] = 2.0;
      v846 = v809;
      v927 = v846;
      v929 = v809;
      v792 = v1021;
    }
    else
    {
      __asm { FMOV            V1.2D, #2.0 }
      _Q1.f64[0] = v1070.f64[0];
      v1070 = vmulq_n_f64(_Q1, v1070.f64[1]);
      *(_QWORD *)&v840.f64[0] = v935.i64[0];
      v840.f64[1] = v934.f64[0];
      v841 = vmulq_f64(v840, v840);
      v842 = v841.f64[0] + v934.f64[0] * v934.f64[0] + v936.f64[0] * v936.f64[0];
      if (v842 >= 0.0000002635)
      {
        v847 = sqrt(v842);
        v848 = __sincos_stret(v847);
        v844 = v848.__cosval;
        v843 = v848.__sinval / v847;
        _Q2.f64[0] = v555 / v842 * (v555 - v848.__cosval);
        v841.f64[0] = v555 / v842 * (v555 - v848.__sinval / v847);
      }
      else
      {
        _Q2.f64[0] = v554 - v842 * (v842 / -720.0 + 0.0416666667);
        v841.f64[0] = 0.166666667 - v842 * (v842 / -5040.0 + 0.00833333333);
        v843 = v555 - v842 * v841.f64[0];
        v844 = v555 - v842 * _Q2.f64[0];
      }
      v849.f64[0] = v936.f64[0];
      v850 = *(double *)v935.i64 * (*(double *)v935.i64 * _Q2.f64[0]) + v844;
      v851 = v934.f64[0] * (v934.f64[0] * _Q2.f64[0]) + v844;
      v852 = v936.f64[0] * (v936.f64[0] * _Q2.f64[0]) + v844;
      v853 = v934.f64[0] * (*(double *)v935.i64 * _Q2.f64[0]);
      v854 = v936.f64[0] * (*(double *)v935.i64 * _Q2.f64[0]);
      v855 = v936.f64[0] * (v934.f64[0] * _Q2.f64[0]);
      v856 = *(double *)v935.i64 * v843;
      v857 = v934.f64[0] * v843;
      v858 = v936.f64[0] * v843;
      v859 = v853 - v858;
      v860 = v854 + v857;
      v861 = v853 + v858;
      v862 = v855 - v856;
      v863 = v854 - v857;
      v864 = v855 + v856;
      *(_QWORD *)&v865.f64[0] = v935.i64[0];
      v865.f64[1] = v934.f64[0];
      v866.f64[0] = v934.f64[0];
      v866.f64[1] = v936.f64[0];
      v867.f64[0] = v932.f64[0];
      v867.f64[1] = v931.f64[0];
      v868.f64[0] = v931.f64[0];
      v868.f64[1] = v933.f64[0];
      *(_QWORD *)&v849.f64[1] = v935.i64[0];
      v869.f64[0] = v933.f64[0];
      v869.f64[1] = v932.f64[0];
      v870 = vsubq_f64(vmulq_f64(v866, v867), vmulq_f64(v849, v869));
      v871 = vsubq_f64(vmulq_f64(v865, v933), vmulq_f64(v934, v931));
      v779 = vaddq_f64(v868, vmulq_n_f64(v870, _Q2.f64[0]));
      v872 = vaddq_f64(v932, vmulq_f64(v871, _Q2));
      v873 = (float64x2_t)vextq_s8((int8x16_t)v870, (int8x16_t)v871, 8uLL);
      v871.f64[1] = v870.f64[0];
      *(double *)&__src[8] = v850;
      *(float64_t *)&__src[16] = v861;
      *(float64_t *)&__src[24] = v863;
      *(_QWORD *)&__src[32] = 0;
      *(float64_t *)&__src[40] = v859;
      *(float64_t *)&__src[48] = v851;
      *(float64_t *)&__src[56] = v864;
      *(_QWORD *)&__src[64] = 0;
      *(float64_t *)&__src[72] = v860;
      *(float64_t *)&__src[80] = v862;
      *(float64_t *)&__src[88] = v852;
      *(_QWORD *)&__src[96] = 0;
      *(_QWORD *)&__src[120] = *(_OWORD *)&vaddq_f64(v872, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v865, v870, 1), vmulq_f64(v934, v870)), v841));
      *(float64x2_t *)&__src[104] = vaddq_f64(v779, vmulq_n_f64(vsubq_f64(vmulq_f64(v866, v871), vmulq_f64(v849, v873)), v841.f64[0]));
      v874 = *(void **)&__src[256];
      *(_QWORD *)&__src[128] = 0x3FF0000000000000;
      *(_QWORD *)&__src[256] = 0;
      if (v874)
        operator delete(v874);
      v875 = v1058;
      v1058 = 0;
      if (v875)
        operator delete(v875);
      v876 = v1059;
      v1059 = 0;
      if (v876)
        operator delete(v876);
      v556 = 0;
      v778 = (std::locale::__imp *)v935.i64[0];
      v792.f64[0] = v934.f64[0];
      v781.i64[0] = *(_QWORD *)&v936.f64[0];
      v782.i64[0] = *(_QWORD *)&v931.f64[0];
      v779.f64[0] = v933.f64[0];
      v783.i64[1] = *(_QWORD *)&v932.f64[1];
      v780.i64[0] = *(_QWORD *)&v932.f64[0];
    }
    goto LABEL_438;
  }
  v556 = 0x300000000;
  v792 = v1021;
  v781.i64[0] = v1014.i64[0];
  v779 = *(float64x2_t *)v1002;
  v778 = locale;
LABEL_516:
  v24 = __pa;
  if (HIDWORD(v556) && v927 <= v926)
  {
    v991 = (float64x2_t)v782;
    *(int8x16_t *)v997 = v780;
    *(float64x2_t *)v1003 = v779;
    *(float64x2_t *)((char *)&v1101[5] + 8) = (float64x2_t)unk_20827D6D0;
    *(float64x2_t *)((char *)&v1101[6] + 8) = (float64x2_t)xmmword_20827D6E0;
    *(float64x2_t *)((char *)&v1101[7] + 8) = (float64x2_t)unk_20827D6F0;
    *(float64x2_t *)((char *)v1101 + 8) = (float64x2_t)xmmword_20827D680;
    *(float64x2_t *)((char *)&v1101[1] + 8) = *(float64x2_t *)algn_20827D690;
    *(float64x2_t *)((char *)&v1101[2] + 8) = (float64x2_t)xmmword_20827D6A0;
    memset(&v1101[3].f64[1], 0, 32);
    BYTE2(v1106.f64[1]) = 0;
    *(_QWORD *)&v1101[0].f64[0] = &off_24C088428;
    memset(&v1101[8].f64[1], 0, 40);
    v1104 = 0u;
    v1105 = 0u;
    v1106.f64[0] = 0.0;
    LOWORD(v1106.f64[1]) = 3;
    v1022 = v792;
    v1015 = *(double *)v781.i64;
    v1009 = *(double *)&v778;
    sub_208120918((uint64_t)&v1101[8].f64[1]);
    v879 = v1009;
    v880 = v1015;
    v881 = v1022;
    v882.f64[0] = v1009;
    v882.f64[1] = v1022.f64[0];
    v883 = vmulq_f64(v882, v882).f64[0] + v881.f64[0] * v881.f64[0] + v880 * v880;
    if (v883 >= 0.0000002635)
    {
      v886 = sqrt(v883);
      v887 = __sincos_stret(v886);
      v885 = v887.__cosval;
      v879 = v1009;
      v880 = v1015;
      v881 = v1022;
      v884 = v887.__sinval / v886;
      v878.f64[0] = 1.0 / v883 * (1.0 - v887.__cosval);
      v877.f64[0] = 1.0 / v883 * (1.0 - v887.__sinval / v886);
    }
    else
    {
      v878.f64[0] = 0.5 - v883 * (v883 / -720.0 + 0.0416666667);
      v877.f64[0] = 0.166666667 - v883 * (v883 / -5040.0 + 0.00833333333);
      v884 = 1.0 - v883 * v877.f64[0];
      v885 = 1.0 - v883 * v878.f64[0];
    }
    v888 = v879 * (v879 * v878.f64[0]) + v885;
    v889 = v881.f64[0] * (v881.f64[0] * v878.f64[0]) + v885;
    v890 = v880 * (v880 * v878.f64[0]) + v885;
    v891 = v881.f64[0] * (v879 * v878.f64[0]);
    v892 = v880 * (v879 * v878.f64[0]);
    v893 = v880 * (v881.f64[0] * v878.f64[0]);
    v894 = v879 * v884;
    v895 = v881.f64[0] * v884;
    v896 = v880 * v884;
    v897 = v891 - v896;
    v898 = v892 + v895;
    v899 = v891 + v896;
    v900 = v892 - v895;
    v901.f64[0] = v879;
    v901.f64[1] = v881.f64[0];
    v902.f64[0] = v881.f64[0];
    v902.f64[1] = v880;
    *(void **)&v903.f64[0] = v997[0];
    v903.f64[1] = v991.f64[0];
    v904.f64[0] = v880;
    v905 = v893 - v894;
    v904.f64[1] = v879;
    v906.f64[0] = v991.f64[0];
    *(void **)&v906.f64[1] = v1003[0];
    *(double *)&v907 = v893 + v894;
    *(void **)&v908.f64[0] = v1003[0];
    *(void **)&v908.f64[1] = v997[0];
    v909 = vsubq_f64(vmulq_f64(v902, v903), vmulq_f64(v904, v908));
    v910 = vsubq_f64(vmulq_f64(v901, *(float64x2_t *)v1003), vmulq_f64(v881, v991));
    v911 = vaddq_f64(v906, vmulq_n_f64(v909, v878.f64[0]));
    v912 = vaddq_f64(*(float64x2_t *)v997, vmulq_f64(v910, v878));
    v913 = (float64x2_t)vextq_s8((int8x16_t)v909, (int8x16_t)v910, 8uLL);
    v910.f64[1] = v909.f64[0];
    v914 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v901, v909, 1), vmulq_f64(v881, v909)), v877);
    v1101[0].f64[1] = v888;
    v1101[1].f64[0] = v899;
    v915 = (int64x2_t)vaddq_f64(v911, vmulq_n_f64(vsubq_f64(vmulq_f64(v902, v910), vmulq_f64(v904, v913)), v877.f64[0]));
    *(_QWORD *)&v912.f64[0] = *(_OWORD *)&vaddq_f64(v912, v914);
    v1101[1].f64[1] = v900;
    v1101[2].f64[0] = 0.0;
    v1101[2].f64[1] = v897;
    v1101[3].f64[0] = v889;
    *(_QWORD *)&v1101[3].f64[1] = v907;
    v1101[4].f64[0] = 0.0;
    v1101[4].f64[1] = v898;
    v1101[5].f64[0] = v905;
    v1101[5].f64[1] = v890;
    v1101[6].f64[0] = 0.0;
    v1101[7].f64[1] = v912.f64[0];
    *(int64x2_t *)((char *)&v1101[6] + 8) = v915;
    v1101[8].f64[0] = 1.0;
    v1108.f64[0] = 0.0;
    v1107 = 0uLL;
    v916 = *(int64x2_t *)((char *)&v1101[2] + 8);
    v917 = *(int64x2_t *)((char *)&v1101[4] + 8);
    *(int64x2_t *)v930 = vzip1q_s64(*(int64x2_t *)((char *)v1101 + 8), *(int64x2_t *)((char *)&v1101[2] + 8));
    *(_QWORD *)(v930 + 16) = v917.i64[0];
    *(_QWORD *)&v918 = vdupq_laneq_s64(v915, 1).u64[0];
    *(float64_t *)&v915.i64[1] = v899;
    *(int64x2_t *)(v930 + 24) = v915;
    *((double *)&v918 + 1) = v900;
    *(int64x2_t *)(v930 + 40) = vzip2q_s64(v916, v917);
    *(_OWORD *)(v930 + 56) = v918;
    *((double *)&v907 + 1) = v890;
    *(_OWORD *)(v930 + 72) = v907;
    *(float64_t *)(v930 + 88) = v912.f64[0];
  }
LABEL_522:
  if (v1071)
  {
    v1072 = v1071;
    operator delete(v1071);
  }
  if (v1067)
  {
    v1068 = (char *)v1067;
    operator delete(v1067);
  }
  v919 = v1059;
  *(_QWORD *)__src = &off_24C088428;
  v1059 = 0;
  if (v919)
    operator delete(v919);
  v920 = v1058;
  v1058 = 0;
  if (v920)
    operator delete(v920);
  v921 = *(void **)&__src[256];
  *(_QWORD *)&__src[256] = 0;
  if (v921)
    operator delete(v921);
  if (v1078[0])
  {
    v1078[1] = v1078[0];
    operator delete(v1078[0]);
  }
  v922 = v1098;
  *(_QWORD *)v1082 = &off_24C088428;
  v1098 = 0;
  if (v922)
    operator delete(v922);
  v923 = v1097;
  v1097 = 0;
  if (v923)
    operator delete(v923);
  v924 = v1096;
  v1096 = 0;
  if (v924)
    operator delete(v924);
LABEL_540:
  v19 = 1;
  if (v24)
LABEL_278:
    operator delete(v24);
  return v19;
}

void sub_208120670(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;

  if (v1)
  {
    STACK[0x600] = (unint64_t)v1;
    operator delete(v1);
  }
  sub_208123CD4(&STACK[0x490]);
  v3 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v3;
    operator delete(v3);
  }
  sub_2081207E4(&STACK[0x6B0]);
  if (STACK[0x208])
  {
    operator delete((void *)STACK[0x208]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2081207E4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24C088428;
  v2 = (void *)a1[34];
  a1[34] = 0;
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[33];
  a1[33] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[32];
  a1[32] = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_208120840(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[45];
  if (v3)
  {
    a1[46] = v3;
    operator delete(v3);
  }
  *a1 = &off_24C088428;
  v4 = (void *)a1[34];
  a1[34] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[33];
  a1[33] = 0;
  if (v5)
    operator delete(v5);
  v6 = (void *)a1[32];
  a1[32] = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_2081208BC(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  *__p = &off_24C088428;
  v2 = (void *)__p[34];
  __p[34] = 0;
  if (v2)
    operator delete(v2);
  v3 = (void *)__p[33];
  __p[33] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)__p[32];
  __p[32] = 0;
  if (v4)
    operator delete(v4);
  operator delete(__p);
}

uint64_t sub_208120918(uint64_t result)
{
  float64x2_t v1;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  float64x2_t v23;
  double v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  double v40;
  uint64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  float64x2_t v48;
  double v49;
  int8x16_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  float64x2_t v77;
  double v78;
  int8x16_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  float64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  double v94;
  uint64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  float64x2_t v102;
  double v103;
  int8x16_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  double v117;
  double v118;
  uint64_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  uint64_t v125;
  float64x2_t v126;
  double v127;
  int8x16_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  double v140;
  double v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  double v145;
  uint64_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  uint64_t v152;
  float64x2_t v153;
  double v154;
  int8x16_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  double v168;
  uint64_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  double v177;
  int8x16_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  float64x2_t v188;
  float64x2_t v189;
  double v190;
  double v191;
  uint64_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t v199;
  double v200;
  int8x16_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;
  double v437;
  double v438;
  double v439;
  double v440;
  double v441;
  double v442;
  double v443;
  double v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  double v498;
  double v499;
  double v500;

  *(_OWORD *)(result + 40) = xmmword_20827D5F0;
  *(_OWORD *)(result + 56) = xmmword_20827D5F0;
  if (*(double *)(result + 24) == 0.0 || *(double *)(result + 32) == 0.0)
    return result;
  v1 = *(float64x2_t *)(result + 8);
  __asm { FMOV            V6.2D, #-0.5 }
  v7 = *(float64x2_t *)(result + 24);
  v8 = vdivq_f64(vsubq_f64(_Q6, v1), v7);
  v9 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
  v11 = *(double *)(result + 72);
  v10 = *(double *)(result + 80);
  v12 = *(double *)(result + 104);
  v13 = *(unsigned __int8 *)(result + 114);
  *(_QWORD *)&v14 = *(_OWORD *)&vmulq_f64(v8, v8);
  v15 = vmuld_lane_f64(v8.f64[1], v8, 1);
  if (*(_BYTE *)(result + 114))
  {
    *(double *)&v16 = v14 + v15;
    v17 = *(float64x2_t *)(result + 88);
    v18 = vaddq_f64(v17, v17);
    v19 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
    v20 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
    v21 = vmulq_n_f64(vsubq_f64(v8, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v8, vaddq_f64(v8, v8)), (float64x2_t)vdupq_lane_s64(v16, 0)), v20), vmulq_n_f64(v18, vmuld_lane_f64(v8.f64[0], v8, 1)))), 1.0/ (v11 * *(double *)&v16+ 1.0+ v10 * (*(double *)&v16 * *(double *)&v16)+ v12 * (*(double *)&v16 * (*(double *)&v16 * *(double *)&v16))));
    *(double *)&v22 = vmulq_f64(v21, v21).f64[0] + vmuld_lane_f64(v21.f64[1], v21, 1);
    v23 = vmulq_n_f64(vsubq_f64(v8, vaddq_f64(vmulq_n_f64(v18, vmuld_lane_f64(v21.f64[0], v21, 1)), vmulq_f64(v20, vaddq_f64(vmulq_f64(v21, vaddq_f64(v21, v21)), (float64x2_t)vdupq_lane_s64(v22, 0))))), 1.0/ (v11 * *(double *)&v22+ 1.0+ v10 * (*(double *)&v22 * *(double *)&v22)+ v12 * (*(double *)&v22 * (*(double *)&v22 * *(double *)&v22))));
    v21.f64[0] = vmulq_f64(v23, v23).f64[0] + vmuld_lane_f64(v23.f64[1], v23, 1);
    v24 = vmuld_lane_f64(v23.f64[0], v23, 1);
    v25 = (int8x16_t)vmulq_f64(v23, vaddq_f64(v23, v23));
    v26 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, v24), vmulq_f64(v17, vaddq_f64((float64x2_t)vextq_s8(v25, v25, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v26.f64[1], v26, 1) + vmulq_f64(v26, v26).f64[0];
    v27 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v26.f64[0], v26, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v26, vaddq_f64(v26, v26)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v27.f64[1], v27, 1) + vmulq_f64(v27, v27).f64[0];
    v28 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v27.f64[0], v27, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v27, vaddq_f64(v27, v27)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v28.f64[1], v28, 1) + vmulq_f64(v28, v28).f64[0];
    v29 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v28.f64[0], v28, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v28, vaddq_f64(v28, v28)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v29.f64[1], v29, 1) + vmulq_f64(v29, v29).f64[0];
    v30 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v29.f64[0], v29, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v29, vaddq_f64(v29, v29)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v30.f64[1], v30, 1) + vmulq_f64(v30, v30).f64[0];
    v31 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v30.f64[0], v30, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v30, vaddq_f64(v30, v30)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v31.f64[1], v31, 1) + vmulq_f64(v31, v31).f64[0];
    v32 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v31.f64[0], v31, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v31, vaddq_f64(v31, v31)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v32.f64[1], v32, 1) + vmulq_f64(v32, v32).f64[0];
    v33 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v32.f64[0], v32, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v32, vaddq_f64(v32, v32)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v34 = v33.f64[1];
    if (v33.f64[1] >= 1.79769313e308)
      goto LABEL_6;
    goto LABEL_5;
  }
  v211 = 1.0
       / (v11 * (v14 + v15) + 1.0 + v10 * ((v14 + v15) * (v14 + v15)) + v12
                                                                      * ((v14 + v15)
                                                                       * ((v14 + v15)
                                                                        * (v14 + v15))));
  v212 = v211 * v8.f64[0];
  v213 = vmuld_lane_f64(v211, v8, 1);
  v214 = v212 * v212 + v213 * v213;
  v215 = 1.0 / (v11 * v214 + 1.0 + v10 * (v214 * v214) + v12 * (v214 * (v214 * v214)));
  v216 = v215 * v8.f64[0];
  v217 = vmuld_lane_f64(v215, v8, 1);
  v218 = v216 * v216 + v217 * v217;
  v219 = 1.0 / (v11 * v218 + 1.0 + v10 * (v218 * v218) + v12 * (v218 * (v218 * v218)));
  v220 = v219 * v8.f64[0];
  v221 = vmuld_lane_f64(v219, v8, 1);
  v222 = v220 * v220 + v221 * v221;
  v223 = 1.0 / (v11 * v222 + 1.0 + v10 * (v222 * v222) + v12 * (v222 * (v222 * v222)));
  v224 = v223 * v8.f64[0];
  v225 = vmuld_lane_f64(v223, v8, 1);
  v226 = v224 * v224 + v225 * v225;
  v227 = 1.0 / (v11 * v226 + 1.0 + v10 * (v226 * v226) + v12 * (v226 * (v226 * v226)));
  v228 = v227 * v8.f64[0];
  v229 = vmuld_lane_f64(v227, v8, 1);
  v230 = v228 * v228 + v229 * v229;
  v231 = 1.0 / (v11 * v230 + 1.0 + v10 * (v230 * v230) + v12 * (v230 * (v230 * v230)));
  v232 = v231 * v8.f64[0];
  v233 = vmuld_lane_f64(v231, v8, 1);
  v234 = v232 * v232 + v233 * v233;
  v235 = 1.0 / (v11 * v234 + 1.0 + v10 * (v234 * v234) + v12 * (v234 * (v234 * v234)));
  v236 = v235 * v8.f64[0];
  v237 = vmuld_lane_f64(v235, v8, 1);
  v238 = v236 * v236 + v237 * v237;
  v239 = 1.0 / (v11 * v238 + 1.0 + v10 * (v238 * v238) + v12 * (v238 * (v238 * v238)));
  v240 = v239 * v8.f64[0];
  v241 = vmuld_lane_f64(v239, v8, 1);
  v242 = v240 * v240 + v241 * v241;
  v243 = 1.0 / (v11 * v242 + 1.0 + v10 * (v242 * v242) + v12 * (v242 * (v242 * v242)));
  v244 = v243 * v8.f64[0];
  v245 = vmuld_lane_f64(v243, v8, 1);
  v246 = v244 * v244 + v245 * v245;
  v33 = vmulq_n_f64(v9, 1.0 / (v11 * v246 + 1.0 + v10 * (v246 * v246) + v12 * (v246 * (v246 * v246))));
  v34 = v33.f64[1];
  if (v33.f64[1] < 1.79769313e308)
LABEL_5:
    *(double *)(result + 40) = v34;
LABEL_6:
  if (v34 > -1.79769313e308)
  {
    *(double *)(result + 48) = v34;
    if (v33.f64[0] >= 1.79769313e308)
    {
LABEL_8:
      v35.f64[0] = *(float64_t *)(result + 8);
      if (v33.f64[0] <= -1.79769313e308)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if (v33.f64[0] >= 1.79769313e308)
  {
    goto LABEL_8;
  }
  *(float64_t *)(result + 56) = v33.f64[0];
  v35.f64[0] = *(float64_t *)(result + 8);
  if (v33.f64[0] > -1.79769313e308)
LABEL_9:
    *(float64_t *)(result + 64) = v33.f64[0];
LABEL_10:
  v36.f64[0] = v35.f64[0];
  v36.f64[1] = -0.5;
  v37 = vdivq_f64(vsubq_f64(v36, v1), v7);
  v38 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
  *(_QWORD *)&v39 = *(_OWORD *)&vmulq_f64(v37, v37);
  v40 = vmuld_lane_f64(v37.f64[1], v37, 1);
  if (v13)
  {
    *(double *)&v41 = v39 + v40;
    v42 = *(float64x2_t *)(result + 88);
    v43 = vaddq_f64(v42, v42);
    v44 = (float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL);
    v45 = (float64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
    v46 = vmulq_n_f64(vsubq_f64(v37, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v37, vaddq_f64(v37, v37)), (float64x2_t)vdupq_lane_s64(v41, 0)), v45), vmulq_n_f64(v43, vmuld_lane_f64(v37.f64[0], v37, 1)))), 1.0/ (v11 * *(double *)&v41+ 1.0+ v10 * (*(double *)&v41 * *(double *)&v41)+ v12 * (*(double *)&v41 * (*(double *)&v41 * *(double *)&v41))));
    *(double *)&v47 = vmulq_f64(v46, v46).f64[0] + vmuld_lane_f64(v46.f64[1], v46, 1);
    v48 = vmulq_n_f64(vsubq_f64(v37, vaddq_f64(vmulq_n_f64(v43, vmuld_lane_f64(v46.f64[0], v46, 1)), vmulq_f64(v45, vaddq_f64(vmulq_f64(v46, vaddq_f64(v46, v46)), (float64x2_t)vdupq_lane_s64(v47, 0))))), 1.0/ (v11 * *(double *)&v47+ 1.0+ v10 * (*(double *)&v47 * *(double *)&v47)+ v12 * (*(double *)&v47 * (*(double *)&v47 * *(double *)&v47))));
    v46.f64[0] = vmulq_f64(v48, v48).f64[0] + vmuld_lane_f64(v48.f64[1], v48, 1);
    v49 = vmuld_lane_f64(v48.f64[0], v48, 1);
    v50 = (int8x16_t)vmulq_f64(v48, vaddq_f64(v48, v48));
    v51 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, v49), vmulq_f64(v42, vaddq_f64((float64x2_t)vextq_s8(v50, v50, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v51.f64[1], v51, 1) + vmulq_f64(v51, v51).f64[0];
    v52 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v51.f64[0], v51, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v51, vaddq_f64(v51, v51)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v52.f64[1], v52, 1) + vmulq_f64(v52, v52).f64[0];
    v53 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v52.f64[0], v52, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v52, vaddq_f64(v52, v52)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v53.f64[1], v53, 1) + vmulq_f64(v53, v53).f64[0];
    v54 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v53.f64[0], v53, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v53, vaddq_f64(v53, v53)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v54.f64[1], v54, 1) + vmulq_f64(v54, v54).f64[0];
    v55 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v54.f64[0], v54, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v54, vaddq_f64(v54, v54)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v55.f64[1], v55, 1) + vmulq_f64(v55, v55).f64[0];
    v56 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v55.f64[0], v55, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v55, vaddq_f64(v55, v55)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v56.f64[1], v56, 1) + vmulq_f64(v56, v56).f64[0];
    v57 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v56.f64[0], v56, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v56, vaddq_f64(v56, v56)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v57.f64[1], v57, 1) + vmulq_f64(v57, v57).f64[0];
    v59 = vmulq_n_f64(v44, vmuld_lane_f64(v57.f64[0], v57, 1));
    v58 = vsubq_f64(v38, vaddq_f64(v59, vmulq_f64(v42, vaddq_f64(vmulq_f64(v57, vaddq_f64(v57, v57)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0)))));
    LODWORD(v59.f64[0]) = *(_DWORD *)result;
    v60 = vmulq_n_f64(v58, 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v61 = v60.f64[1];
    if (v60.f64[1] >= *(double *)(result + 40))
      goto LABEL_13;
    goto LABEL_12;
  }
  v247 = 1.0
       / (v11 * (v39 + v40) + 1.0 + v10 * ((v39 + v40) * (v39 + v40)) + v12
                                                                      * ((v39 + v40)
                                                                       * ((v39 + v40)
                                                                        * (v39 + v40))));
  v248 = v247 * v37.f64[0];
  v249 = vmuld_lane_f64(v247, v37, 1);
  v250 = v248 * v248 + v249 * v249;
  v251 = 1.0 / (v11 * v250 + 1.0 + v10 * (v250 * v250) + v12 * (v250 * (v250 * v250)));
  v252 = v251 * v37.f64[0];
  v253 = vmuld_lane_f64(v251, v37, 1);
  v254 = v252 * v252 + v253 * v253;
  v255 = 1.0 / (v11 * v254 + 1.0 + v10 * (v254 * v254) + v12 * (v254 * (v254 * v254)));
  v256 = v255 * v37.f64[0];
  v257 = vmuld_lane_f64(v255, v37, 1);
  v258 = v256 * v256 + v257 * v257;
  v259 = 1.0 / (v11 * v258 + 1.0 + v10 * (v258 * v258) + v12 * (v258 * (v258 * v258)));
  v260 = v259 * v37.f64[0];
  v261 = vmuld_lane_f64(v259, v37, 1);
  v262 = v260 * v260 + v261 * v261;
  v263 = 1.0 / (v11 * v262 + 1.0 + v10 * (v262 * v262) + v12 * (v262 * (v262 * v262)));
  v264 = v263 * v37.f64[0];
  v265 = vmuld_lane_f64(v263, v37, 1);
  v266 = v264 * v264 + v265 * v265;
  v267 = 1.0 / (v11 * v266 + 1.0 + v10 * (v266 * v266) + v12 * (v266 * (v266 * v266)));
  v268 = v267 * v37.f64[0];
  v269 = vmuld_lane_f64(v267, v37, 1);
  v270 = v268 * v268 + v269 * v269;
  v271 = 1.0 / (v11 * v270 + 1.0 + v10 * (v270 * v270) + v12 * (v270 * (v270 * v270)));
  v272 = v271 * v37.f64[0];
  v273 = vmuld_lane_f64(v271, v37, 1);
  v274 = v272 * v272 + v273 * v273;
  v275 = 1.0 / (v11 * v274 + 1.0 + v10 * (v274 * v274) + v12 * (v274 * (v274 * v274)));
  v276 = v275 * v37.f64[0];
  v277 = vmuld_lane_f64(v275, v37, 1);
  v278 = v276 * v276 + v277 * v277;
  v279 = 1.0 / (v11 * v278 + 1.0 + v10 * (v278 * v278) + v12 * (v278 * (v278 * v278)));
  v280 = v279 * v37.f64[0];
  v281 = vmuld_lane_f64(v279, v37, 1);
  v282 = v280 * v280 + v281 * v281;
  v283 = v282 * (v282 * v282);
  v59.f64[0] = v12 * v283;
  LODWORD(v59.f64[0]) = *(_DWORD *)result;
  v60 = vmulq_n_f64(v38, 1.0 / (v11 * v282 + 1.0 + v10 * (v282 * v282) + v12 * v283));
  v61 = v60.f64[1];
  if (v60.f64[1] < *(double *)(result + 40))
LABEL_12:
    *(double *)(result + 40) = v61;
LABEL_13:
  if (v61 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v61;
    v62 = -0.5;
    v63 = (double)*(unint64_t *)&v59.f64[0];
    if (v60.f64[0] >= *(double *)(result + 56))
    {
LABEL_15:
      v64.f64[0] = v63 + v62;
      if (v60.f64[0] <= *(double *)(result + 64))
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v62 = -0.5;
    v63 = (double)*(unint64_t *)&v59.f64[0];
    if (v60.f64[0] >= *(double *)(result + 56))
      goto LABEL_15;
  }
  *(float64_t *)(result + 56) = v60.f64[0];
  v64.f64[0] = v63 + v62;
  if (v60.f64[0] > *(double *)(result + 64))
LABEL_16:
    *(float64_t *)(result + 64) = v60.f64[0];
LABEL_17:
  v65.f64[0] = v64.f64[0];
  v65.f64[1] = -0.5;
  v66 = vdivq_f64(vsubq_f64(v65, v1), v7);
  v67 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL);
  *(_QWORD *)&v68 = *(_OWORD *)&vmulq_f64(v66, v66);
  v69 = vmuld_lane_f64(v66.f64[1], v66, 1);
  if (v13)
  {
    *(double *)&v70 = v68 + v69;
    v71 = *(float64x2_t *)(result + 88);
    v72 = vaddq_f64(v71, v71);
    v73 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
    v74 = (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL);
    v75 = vmulq_n_f64(vsubq_f64(v66, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v66, vaddq_f64(v66, v66)), (float64x2_t)vdupq_lane_s64(v70, 0)), v74), vmulq_n_f64(v72, vmuld_lane_f64(v66.f64[0], v66, 1)))), 1.0/ (v11 * *(double *)&v70+ 1.0+ v10 * (*(double *)&v70 * *(double *)&v70)+ v12 * (*(double *)&v70 * (*(double *)&v70 * *(double *)&v70))));
    *(double *)&v76 = vmulq_f64(v75, v75).f64[0] + vmuld_lane_f64(v75.f64[1], v75, 1);
    v77 = vmulq_n_f64(vsubq_f64(v66, vaddq_f64(vmulq_n_f64(v72, vmuld_lane_f64(v75.f64[0], v75, 1)), vmulq_f64(v74, vaddq_f64(vmulq_f64(v75, vaddq_f64(v75, v75)), (float64x2_t)vdupq_lane_s64(v76, 0))))), 1.0/ (v11 * *(double *)&v76+ 1.0+ v10 * (*(double *)&v76 * *(double *)&v76)+ v12 * (*(double *)&v76 * (*(double *)&v76 * *(double *)&v76))));
    v75.f64[0] = vmulq_f64(v77, v77).f64[0] + vmuld_lane_f64(v77.f64[1], v77, 1);
    v78 = vmuld_lane_f64(v77.f64[0], v77, 1);
    v79 = (int8x16_t)vmulq_f64(v77, vaddq_f64(v77, v77));
    v80 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, v78), vmulq_f64(v71, vaddq_f64((float64x2_t)vextq_s8(v79, v79, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v80.f64[1], v80, 1) + vmulq_f64(v80, v80).f64[0];
    v81 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v80.f64[0], v80, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v80, vaddq_f64(v80, v80)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v81.f64[1], v81, 1) + vmulq_f64(v81, v81).f64[0];
    v82 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v81.f64[0], v81, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v81, vaddq_f64(v81, v81)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v82.f64[1], v82, 1) + vmulq_f64(v82, v82).f64[0];
    v83 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v82.f64[0], v82, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v82, vaddq_f64(v82, v82)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v83.f64[1], v83, 1) + vmulq_f64(v83, v83).f64[0];
    v84 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v83.f64[0], v83, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v83, vaddq_f64(v83, v83)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v84.f64[1], v84, 1) + vmulq_f64(v84, v84).f64[0];
    v85 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v84.f64[0], v84, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v84, vaddq_f64(v84, v84)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v85.f64[1], v85, 1) + vmulq_f64(v85, v85).f64[0];
    v86 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v85.f64[0], v85, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v85, vaddq_f64(v85, v85)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v86.f64[1], v86, 1) + vmulq_f64(v86, v86).f64[0];
    v87 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v86.f64[0], v86, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v86, vaddq_f64(v86, v86)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v88 = v87.f64[1];
    if (v87.f64[1] >= *(double *)(result + 40))
      goto LABEL_20;
    goto LABEL_19;
  }
  v284 = 1.0
       / (v11 * (v68 + v69) + 1.0 + v10 * ((v68 + v69) * (v68 + v69)) + v12
                                                                      * ((v68 + v69)
                                                                       * ((v68 + v69)
                                                                        * (v68 + v69))));
  v285 = v284 * v66.f64[0];
  v286 = vmuld_lane_f64(v284, v66, 1);
  v287 = v285 * v285 + v286 * v286;
  v288 = 1.0 / (v11 * v287 + 1.0 + v10 * (v287 * v287) + v12 * (v287 * (v287 * v287)));
  v289 = v288 * v66.f64[0];
  v290 = vmuld_lane_f64(v288, v66, 1);
  v291 = v289 * v289 + v290 * v290;
  v292 = 1.0 / (v11 * v291 + 1.0 + v10 * (v291 * v291) + v12 * (v291 * (v291 * v291)));
  v293 = v292 * v66.f64[0];
  v294 = vmuld_lane_f64(v292, v66, 1);
  v295 = v293 * v293 + v294 * v294;
  v296 = 1.0 / (v11 * v295 + 1.0 + v10 * (v295 * v295) + v12 * (v295 * (v295 * v295)));
  v297 = v296 * v66.f64[0];
  v298 = vmuld_lane_f64(v296, v66, 1);
  v299 = v297 * v297 + v298 * v298;
  v300 = 1.0 / (v11 * v299 + 1.0 + v10 * (v299 * v299) + v12 * (v299 * (v299 * v299)));
  v301 = v300 * v66.f64[0];
  v302 = vmuld_lane_f64(v300, v66, 1);
  v303 = v301 * v301 + v302 * v302;
  v304 = 1.0 / (v11 * v303 + 1.0 + v10 * (v303 * v303) + v12 * (v303 * (v303 * v303)));
  v305 = v304 * v66.f64[0];
  v306 = vmuld_lane_f64(v304, v66, 1);
  v307 = v305 * v305 + v306 * v306;
  v308 = 1.0 / (v11 * v307 + 1.0 + v10 * (v307 * v307) + v12 * (v307 * (v307 * v307)));
  v309 = v308 * v66.f64[0];
  v310 = vmuld_lane_f64(v308, v66, 1);
  v311 = v309 * v309 + v310 * v310;
  v312 = 1.0 / (v11 * v311 + 1.0 + v10 * (v311 * v311) + v12 * (v311 * (v311 * v311)));
  v313 = v312 * v66.f64[0];
  v314 = vmuld_lane_f64(v312, v66, 1);
  v315 = v313 * v313 + v314 * v314;
  v316 = 1.0 / (v11 * v315 + 1.0 + v10 * (v315 * v315) + v12 * (v315 * (v315 * v315)));
  v317 = v316 * v66.f64[0];
  v318 = vmuld_lane_f64(v316, v66, 1);
  v319 = v317 * v317 + v318 * v318;
  v87 = vmulq_n_f64(v67, 1.0 / (v11 * v319 + 1.0 + v10 * (v319 * v319) + v12 * (v319 * (v319 * v319))));
  v88 = v87.f64[1];
  if (v87.f64[1] < *(double *)(result + 40))
LABEL_19:
    *(double *)(result + 40) = v88;
LABEL_20:
  if (v88 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v88;
    if (v87.f64[0] >= *(double *)(result + 56))
    {
LABEL_22:
      v89 = *(double *)(result + 16);
      if (v87.f64[0] <= *(double *)(result + 64))
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  else if (v87.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_22;
  }
  *(float64_t *)(result + 56) = v87.f64[0];
  v89 = *(double *)(result + 16);
  if (v87.f64[0] > *(double *)(result + 64))
LABEL_23:
    *(float64_t *)(result + 64) = v87.f64[0];
LABEL_24:
  v90.f64[0] = _Q6.f64[0];
  v90.f64[1] = v89;
  v91 = vdivq_f64(vsubq_f64(v90, v1), v7);
  v92 = (float64x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL);
  *(_QWORD *)&v93 = *(_OWORD *)&vmulq_f64(v91, v91);
  v94 = vmuld_lane_f64(v91.f64[1], v91, 1);
  if (v13)
  {
    *(double *)&v95 = v93 + v94;
    v96 = *(float64x2_t *)(result + 88);
    v97 = vaddq_f64(v96, v96);
    v98 = (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL);
    v99 = (float64x2_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL);
    v100 = vmulq_n_f64(vsubq_f64(v91, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v91, vaddq_f64(v91, v91)), (float64x2_t)vdupq_lane_s64(v95, 0)), v99), vmulq_n_f64(v97, vmuld_lane_f64(v91.f64[0], v91, 1)))), 1.0/ (v11 * *(double *)&v95+ 1.0+ v10 * (*(double *)&v95 * *(double *)&v95)+ v12 * (*(double *)&v95 * (*(double *)&v95 * *(double *)&v95))));
    *(double *)&v101 = vmulq_f64(v100, v100).f64[0] + vmuld_lane_f64(v100.f64[1], v100, 1);
    v102 = vmulq_n_f64(vsubq_f64(v91, vaddq_f64(vmulq_n_f64(v97, vmuld_lane_f64(v100.f64[0], v100, 1)), vmulq_f64(v99, vaddq_f64(vmulq_f64(v100, vaddq_f64(v100, v100)), (float64x2_t)vdupq_lane_s64(v101, 0))))), 1.0/ (v11 * *(double *)&v101+ 1.0+ v10 * (*(double *)&v101 * *(double *)&v101)+ v12 * (*(double *)&v101 * (*(double *)&v101 * *(double *)&v101))));
    v100.f64[0] = vmulq_f64(v102, v102).f64[0] + vmuld_lane_f64(v102.f64[1], v102, 1);
    v103 = vmuld_lane_f64(v102.f64[0], v102, 1);
    v104 = (int8x16_t)vmulq_f64(v102, vaddq_f64(v102, v102));
    v105 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, v103), vmulq_f64(v96, vaddq_f64((float64x2_t)vextq_s8(v104, v104, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v105.f64[1], v105, 1) + vmulq_f64(v105, v105).f64[0];
    v106 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v105.f64[0], v105, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v105, vaddq_f64(v105, v105)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v106.f64[1], v106, 1) + vmulq_f64(v106, v106).f64[0];
    v107 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v106.f64[0], v106, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v106, vaddq_f64(v106, v106)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v107.f64[1], v107, 1) + vmulq_f64(v107, v107).f64[0];
    v108 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v107.f64[0], v107, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v107, vaddq_f64(v107, v107)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v108.f64[1], v108, 1) + vmulq_f64(v108, v108).f64[0];
    v109 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v108.f64[0], v108, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v108, vaddq_f64(v108, v108)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v109.f64[1], v109, 1) + vmulq_f64(v109, v109).f64[0];
    v110 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v109.f64[0], v109, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v109, vaddq_f64(v109, v109)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v110.f64[1], v110, 1) + vmulq_f64(v110, v110).f64[0];
    v111 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v110.f64[0], v110, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v110, vaddq_f64(v110, v110)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v111.f64[1], v111, 1) + vmulq_f64(v111, v111).f64[0];
    v112 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v111.f64[0], v111, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v111, vaddq_f64(v111, v111)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v113 = v112.f64[1];
    if (v112.f64[1] >= *(double *)(result + 40))
      goto LABEL_27;
    goto LABEL_26;
  }
  v320 = 1.0
       / (v11 * (v93 + v94) + 1.0 + v10 * ((v93 + v94) * (v93 + v94)) + v12
                                                                      * ((v93 + v94)
                                                                       * ((v93 + v94)
                                                                        * (v93 + v94))));
  v321 = v320 * v91.f64[0];
  v322 = vmuld_lane_f64(v320, v91, 1);
  v323 = v321 * v321 + v322 * v322;
  v324 = 1.0 / (v11 * v323 + 1.0 + v10 * (v323 * v323) + v12 * (v323 * (v323 * v323)));
  v325 = v324 * v91.f64[0];
  v326 = vmuld_lane_f64(v324, v91, 1);
  v327 = v325 * v325 + v326 * v326;
  v328 = 1.0 / (v11 * v327 + 1.0 + v10 * (v327 * v327) + v12 * (v327 * (v327 * v327)));
  v329 = v328 * v91.f64[0];
  v330 = vmuld_lane_f64(v328, v91, 1);
  v331 = v329 * v329 + v330 * v330;
  v332 = 1.0 / (v11 * v331 + 1.0 + v10 * (v331 * v331) + v12 * (v331 * (v331 * v331)));
  v333 = v332 * v91.f64[0];
  v334 = vmuld_lane_f64(v332, v91, 1);
  v335 = v333 * v333 + v334 * v334;
  v336 = 1.0 / (v11 * v335 + 1.0 + v10 * (v335 * v335) + v12 * (v335 * (v335 * v335)));
  v337 = v336 * v91.f64[0];
  v338 = vmuld_lane_f64(v336, v91, 1);
  v339 = v337 * v337 + v338 * v338;
  v340 = 1.0 / (v11 * v339 + 1.0 + v10 * (v339 * v339) + v12 * (v339 * (v339 * v339)));
  v341 = v340 * v91.f64[0];
  v342 = vmuld_lane_f64(v340, v91, 1);
  v343 = v341 * v341 + v342 * v342;
  v344 = 1.0 / (v11 * v343 + 1.0 + v10 * (v343 * v343) + v12 * (v343 * (v343 * v343)));
  v345 = v344 * v91.f64[0];
  v346 = vmuld_lane_f64(v344, v91, 1);
  v347 = v345 * v345 + v346 * v346;
  v348 = 1.0 / (v11 * v347 + 1.0 + v10 * (v347 * v347) + v12 * (v347 * (v347 * v347)));
  v349 = v348 * v91.f64[0];
  v350 = vmuld_lane_f64(v348, v91, 1);
  v351 = v349 * v349 + v350 * v350;
  v352 = 1.0 / (v11 * v351 + 1.0 + v10 * (v351 * v351) + v12 * (v351 * (v351 * v351)));
  v353 = v352 * v91.f64[0];
  v354 = vmuld_lane_f64(v352, v91, 1);
  v355 = v353 * v353 + v354 * v354;
  v112 = vmulq_n_f64(v92, 1.0 / (v11 * v355 + 1.0 + v10 * (v355 * v355) + v12 * (v355 * (v355 * v355))));
  v113 = v112.f64[1];
  if (v112.f64[1] < *(double *)(result + 40))
LABEL_26:
    *(double *)(result + 40) = v113;
LABEL_27:
  if (v113 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v113;
    if (v112.f64[0] >= *(double *)(result + 56))
    {
LABEL_29:
      if (v112.f64[0] <= *(double *)(result + 64))
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  else if (v112.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_29;
  }
  *(float64_t *)(result + 56) = v112.f64[0];
  if (v112.f64[0] > *(double *)(result + 64))
LABEL_30:
    *(float64_t *)(result + 64) = v112.f64[0];
LABEL_31:
  v114.f64[0] = v64.f64[0];
  v114.f64[1] = v89;
  v115 = vdivq_f64(vsubq_f64(v114, v1), v7);
  v116 = (float64x2_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL);
  *(_QWORD *)&v117 = *(_OWORD *)&vmulq_f64(v115, v115);
  v118 = vmuld_lane_f64(v115.f64[1], v115, 1);
  if (v13)
  {
    *(double *)&v119 = v117 + v118;
    v120 = *(float64x2_t *)(result + 88);
    v121 = vaddq_f64(v120, v120);
    v122 = (float64x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL);
    v123 = (float64x2_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
    v124 = vmulq_n_f64(vsubq_f64(v115, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v115, vaddq_f64(v115, v115)), (float64x2_t)vdupq_lane_s64(v119, 0)), v123), vmulq_n_f64(v121, vmuld_lane_f64(v115.f64[0], v115, 1)))), 1.0/ (v11 * *(double *)&v119+ 1.0+ v10 * (*(double *)&v119 * *(double *)&v119)+ v12 * (*(double *)&v119 * (*(double *)&v119 * *(double *)&v119))));
    *(double *)&v125 = vmulq_f64(v124, v124).f64[0] + vmuld_lane_f64(v124.f64[1], v124, 1);
    v126 = vmulq_n_f64(vsubq_f64(v115, vaddq_f64(vmulq_n_f64(v121, vmuld_lane_f64(v124.f64[0], v124, 1)), vmulq_f64(v123, vaddq_f64(vmulq_f64(v124, vaddq_f64(v124, v124)), (float64x2_t)vdupq_lane_s64(v125, 0))))), 1.0/ (v11 * *(double *)&v125+ 1.0+ v10 * (*(double *)&v125 * *(double *)&v125)+ v12 * (*(double *)&v125 * (*(double *)&v125 * *(double *)&v125))));
    v124.f64[0] = vmulq_f64(v126, v126).f64[0] + vmuld_lane_f64(v126.f64[1], v126, 1);
    v127 = vmuld_lane_f64(v126.f64[0], v126, 1);
    v128 = (int8x16_t)vmulq_f64(v126, vaddq_f64(v126, v126));
    v129 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, v127), vmulq_f64(v120, vaddq_f64((float64x2_t)vextq_s8(v128, v128, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v129.f64[1], v129, 1) + vmulq_f64(v129, v129).f64[0];
    v130 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v129.f64[0], v129, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v129, vaddq_f64(v129, v129)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v130.f64[1], v130, 1) + vmulq_f64(v130, v130).f64[0];
    v131 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v130.f64[0], v130, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v130, vaddq_f64(v130, v130)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v131.f64[1], v131, 1) + vmulq_f64(v131, v131).f64[0];
    v132 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v131.f64[0], v131, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v131, vaddq_f64(v131, v131)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v132.f64[1], v132, 1) + vmulq_f64(v132, v132).f64[0];
    v133 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v132.f64[0], v132, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v132, vaddq_f64(v132, v132)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v133.f64[1], v133, 1) + vmulq_f64(v133, v133).f64[0];
    v134 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v133.f64[0], v133, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v133, vaddq_f64(v133, v133)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v134.f64[1], v134, 1) + vmulq_f64(v134, v134).f64[0];
    v135 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v134.f64[0], v134, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v134, vaddq_f64(v134, v134)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v135.f64[1], v135, 1) + vmulq_f64(v135, v135).f64[0];
    v137 = vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v135.f64[0], v135, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v135, vaddq_f64(v135, v135)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))));
    v136 = vsubq_f64(v116, v137);
    LODWORD(v137.f64[0]) = *(_DWORD *)(result + 4);
    v138 = vmulq_n_f64(v136, 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v139 = v138.f64[1];
    if (v138.f64[1] >= *(double *)(result + 40))
      goto LABEL_34;
    goto LABEL_33;
  }
  v356 = 1.0
       / (v11 * (v117 + v118)
        + 1.0
        + v10 * ((v117 + v118) * (v117 + v118))
        + v12 * ((v117 + v118) * ((v117 + v118) * (v117 + v118))));
  v357 = v356 * v115.f64[0];
  v358 = vmuld_lane_f64(v356, v115, 1);
  v359 = v357 * v357 + v358 * v358;
  v360 = 1.0 / (v11 * v359 + 1.0 + v10 * (v359 * v359) + v12 * (v359 * (v359 * v359)));
  v361 = v360 * v115.f64[0];
  v362 = vmuld_lane_f64(v360, v115, 1);
  v363 = v361 * v361 + v362 * v362;
  v364 = 1.0 / (v11 * v363 + 1.0 + v10 * (v363 * v363) + v12 * (v363 * (v363 * v363)));
  v365 = v364 * v115.f64[0];
  v366 = vmuld_lane_f64(v364, v115, 1);
  v367 = v365 * v365 + v366 * v366;
  v368 = 1.0 / (v11 * v367 + 1.0 + v10 * (v367 * v367) + v12 * (v367 * (v367 * v367)));
  v369 = v368 * v115.f64[0];
  v370 = vmuld_lane_f64(v368, v115, 1);
  v371 = v369 * v369 + v370 * v370;
  v372 = 1.0 / (v11 * v371 + 1.0 + v10 * (v371 * v371) + v12 * (v371 * (v371 * v371)));
  v373 = v372 * v115.f64[0];
  v374 = vmuld_lane_f64(v372, v115, 1);
  v375 = v373 * v373 + v374 * v374;
  v376 = 1.0 / (v11 * v375 + 1.0 + v10 * (v375 * v375) + v12 * (v375 * (v375 * v375)));
  v377 = v376 * v115.f64[0];
  v378 = vmuld_lane_f64(v376, v115, 1);
  v379 = v377 * v377 + v378 * v378;
  v380 = 1.0 / (v11 * v379 + 1.0 + v10 * (v379 * v379) + v12 * (v379 * (v379 * v379)));
  v381 = v380 * v115.f64[0];
  v382 = vmuld_lane_f64(v380, v115, 1);
  v383 = v381 * v381 + v382 * v382;
  v384 = 1.0 / (v11 * v383 + 1.0 + v10 * (v383 * v383) + v12 * (v383 * (v383 * v383)));
  v385 = v384 * v115.f64[0];
  v386 = vmuld_lane_f64(v384, v115, 1);
  v387 = v385 * v385 + v386 * v386;
  v388 = 1.0 / (v11 * v387 + 1.0 + v10 * (v387 * v387) + v12 * (v387 * (v387 * v387)));
  v389 = v388 * v115.f64[0];
  v390 = vmuld_lane_f64(v388, v115, 1);
  v391 = v389 * v389 + v390 * v390;
  v137.f64[0] = v11 * v391 + 1.0 + v10 * (v391 * v391) + v12 * (v391 * (v391 * v391));
  v392 = 1.0 / v137.f64[0];
  LODWORD(v137.f64[0]) = *(_DWORD *)(result + 4);
  v138 = vmulq_n_f64(v116, v392);
  v139 = v138.f64[1];
  if (v138.f64[1] < *(double *)(result + 40))
LABEL_33:
    *(double *)(result + 40) = v139;
LABEL_34:
  if (v139 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v139;
    v140 = (double)*(unint64_t *)&v137.f64[0];
    if (v138.f64[0] >= *(double *)(result + 56))
    {
LABEL_36:
      v141 = v140 + v62;
      if (v138.f64[0] <= *(double *)(result + 64))
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  else
  {
    v140 = (double)*(unint64_t *)&v137.f64[0];
    if (v138.f64[0] >= *(double *)(result + 56))
      goto LABEL_36;
  }
  *(float64_t *)(result + 56) = v138.f64[0];
  v141 = v140 + v62;
  if (v138.f64[0] > *(double *)(result + 64))
LABEL_37:
    *(float64_t *)(result + 64) = v138.f64[0];
LABEL_38:
  _Q6.f64[1] = v141;
  v142 = vdivq_f64(vsubq_f64(_Q6, v1), v7);
  v143 = (float64x2_t)vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL);
  *(_QWORD *)&v144 = *(_OWORD *)&vmulq_f64(v142, v142);
  v145 = vmuld_lane_f64(v142.f64[1], v142, 1);
  if (v13)
  {
    *(double *)&v146 = v144 + v145;
    v147 = *(float64x2_t *)(result + 88);
    v148 = vaddq_f64(v147, v147);
    v149 = (float64x2_t)vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL);
    v150 = (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL);
    v151 = vmulq_n_f64(vsubq_f64(v142, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v142, vaddq_f64(v142, v142)), (float64x2_t)vdupq_lane_s64(v146, 0)), v150), vmulq_n_f64(v148, vmuld_lane_f64(v142.f64[0], v142, 1)))), 1.0/ (v11 * *(double *)&v146+ 1.0+ v10 * (*(double *)&v146 * *(double *)&v146)+ v12 * (*(double *)&v146 * (*(double *)&v146 * *(double *)&v146))));
    *(double *)&v152 = vmulq_f64(v151, v151).f64[0] + vmuld_lane_f64(v151.f64[1], v151, 1);
    v153 = vmulq_n_f64(vsubq_f64(v142, vaddq_f64(vmulq_n_f64(v148, vmuld_lane_f64(v151.f64[0], v151, 1)), vmulq_f64(v150, vaddq_f64(vmulq_f64(v151, vaddq_f64(v151, v151)), (float64x2_t)vdupq_lane_s64(v152, 0))))), 1.0/ (v11 * *(double *)&v152+ 1.0+ v10 * (*(double *)&v152 * *(double *)&v152)+ v12 * (*(double *)&v152 * (*(double *)&v152 * *(double *)&v152))));
    v151.f64[0] = vmulq_f64(v153, v153).f64[0] + vmuld_lane_f64(v153.f64[1], v153, 1);
    v154 = vmuld_lane_f64(v153.f64[0], v153, 1);
    v155 = (int8x16_t)vmulq_f64(v153, vaddq_f64(v153, v153));
    v156 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, v154), vmulq_f64(v147, vaddq_f64((float64x2_t)vextq_s8(v155, v155, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v156.f64[1], v156, 1) + vmulq_f64(v156, v156).f64[0];
    v157 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v156.f64[0], v156, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v156, vaddq_f64(v156, v156)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v157.f64[1], v157, 1) + vmulq_f64(v157, v157).f64[0];
    v158 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v157.f64[0], v157, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v157, vaddq_f64(v157, v157)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v158.f64[1], v158, 1) + vmulq_f64(v158, v158).f64[0];
    v159 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v158.f64[0], v158, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v158, vaddq_f64(v158, v158)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v159.f64[1], v159, 1) + vmulq_f64(v159, v159).f64[0];
    v160 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v159.f64[0], v159, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v159, vaddq_f64(v159, v159)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v160.f64[1], v160, 1) + vmulq_f64(v160, v160).f64[0];
    v161 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v160.f64[0], v160, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v160, vaddq_f64(v160, v160)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v161.f64[1], v161, 1) + vmulq_f64(v161, v161).f64[0];
    v162 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v161.f64[0], v161, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v161, vaddq_f64(v161, v161)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v162.f64[1], v162, 1) + vmulq_f64(v162, v162).f64[0];
    v163 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v162.f64[0], v162, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v162, vaddq_f64(v162, v162)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v164 = v163.f64[1];
    if (v163.f64[1] >= *(double *)(result + 40))
      goto LABEL_41;
    goto LABEL_40;
  }
  v393 = 1.0
       / (v11 * (v144 + v145)
        + 1.0
        + v10 * ((v144 + v145) * (v144 + v145))
        + v12 * ((v144 + v145) * ((v144 + v145) * (v144 + v145))));
  v394 = v393 * v142.f64[0];
  v395 = vmuld_lane_f64(v393, v142, 1);
  v396 = v394 * v394 + v395 * v395;
  v397 = 1.0 / (v11 * v396 + 1.0 + v10 * (v396 * v396) + v12 * (v396 * (v396 * v396)));
  v398 = v397 * v142.f64[0];
  v399 = vmuld_lane_f64(v397, v142, 1);
  v400 = v398 * v398 + v399 * v399;
  v401 = 1.0 / (v11 * v400 + 1.0 + v10 * (v400 * v400) + v12 * (v400 * (v400 * v400)));
  v402 = v401 * v142.f64[0];
  v403 = vmuld_lane_f64(v401, v142, 1);
  v404 = v402 * v402 + v403 * v403;
  v405 = 1.0 / (v11 * v404 + 1.0 + v10 * (v404 * v404) + v12 * (v404 * (v404 * v404)));
  v406 = v405 * v142.f64[0];
  v407 = vmuld_lane_f64(v405, v142, 1);
  v408 = v406 * v406 + v407 * v407;
  v409 = 1.0 / (v11 * v408 + 1.0 + v10 * (v408 * v408) + v12 * (v408 * (v408 * v408)));
  v410 = v409 * v142.f64[0];
  v411 = vmuld_lane_f64(v409, v142, 1);
  v412 = v410 * v410 + v411 * v411;
  v413 = 1.0 / (v11 * v412 + 1.0 + v10 * (v412 * v412) + v12 * (v412 * (v412 * v412)));
  v414 = v413 * v142.f64[0];
  v415 = vmuld_lane_f64(v413, v142, 1);
  v416 = v414 * v414 + v415 * v415;
  v417 = 1.0 / (v11 * v416 + 1.0 + v10 * (v416 * v416) + v12 * (v416 * (v416 * v416)));
  v418 = v417 * v142.f64[0];
  v419 = vmuld_lane_f64(v417, v142, 1);
  v420 = v418 * v418 + v419 * v419;
  v421 = 1.0 / (v11 * v420 + 1.0 + v10 * (v420 * v420) + v12 * (v420 * (v420 * v420)));
  v422 = v421 * v142.f64[0];
  v423 = vmuld_lane_f64(v421, v142, 1);
  v424 = v422 * v422 + v423 * v423;
  v425 = 1.0 / (v11 * v424 + 1.0 + v10 * (v424 * v424) + v12 * (v424 * (v424 * v424)));
  v426 = v425 * v142.f64[0];
  v427 = vmuld_lane_f64(v425, v142, 1);
  v428 = v426 * v426 + v427 * v427;
  v163 = vmulq_n_f64(v143, 1.0 / (v11 * v428 + 1.0 + v10 * (v428 * v428) + v12 * (v428 * (v428 * v428))));
  v164 = v163.f64[1];
  if (v163.f64[1] < *(double *)(result + 40))
LABEL_40:
    *(double *)(result + 40) = v164;
LABEL_41:
  if (v164 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v164;
    if (v163.f64[0] >= *(double *)(result + 56))
    {
LABEL_43:
      if (v163.f64[0] <= *(double *)(result + 64))
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  else if (v163.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_43;
  }
  *(float64_t *)(result + 56) = v163.f64[0];
  if (v163.f64[0] > *(double *)(result + 64))
LABEL_44:
    *(float64_t *)(result + 64) = v163.f64[0];
LABEL_45:
  v35.f64[1] = v141;
  v165 = vdivq_f64(vsubq_f64(v35, v1), v7);
  v166 = (float64x2_t)vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL);
  *(_QWORD *)&v167 = *(_OWORD *)&vmulq_f64(v165, v165);
  v168 = vmuld_lane_f64(v165.f64[1], v165, 1);
  if (v13)
  {
    *(double *)&v169 = v167 + v168;
    v170 = *(float64x2_t *)(result + 88);
    v171 = vaddq_f64(v170, v170);
    v172 = (float64x2_t)vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL);
    v173 = (float64x2_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL);
    v174 = vmulq_n_f64(vsubq_f64(v165, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v165, vaddq_f64(v165, v165)), (float64x2_t)vdupq_lane_s64(v169, 0)), v173), vmulq_n_f64(v171, vmuld_lane_f64(v165.f64[0], v165, 1)))), 1.0/ (v11 * *(double *)&v169+ 1.0+ v10 * (*(double *)&v169 * *(double *)&v169)+ v12 * (*(double *)&v169 * (*(double *)&v169 * *(double *)&v169))));
    *(double *)&v175 = vmulq_f64(v174, v174).f64[0] + vmuld_lane_f64(v174.f64[1], v174, 1);
    v176 = vmulq_n_f64(vsubq_f64(v165, vaddq_f64(vmulq_n_f64(v171, vmuld_lane_f64(v174.f64[0], v174, 1)), vmulq_f64(v173, vaddq_f64(vmulq_f64(v174, vaddq_f64(v174, v174)), (float64x2_t)vdupq_lane_s64(v175, 0))))), 1.0/ (v11 * *(double *)&v175+ 1.0+ v10 * (*(double *)&v175 * *(double *)&v175)+ v12 * (*(double *)&v175 * (*(double *)&v175 * *(double *)&v175))));
    v174.f64[0] = vmulq_f64(v176, v176).f64[0] + vmuld_lane_f64(v176.f64[1], v176, 1);
    v177 = vmuld_lane_f64(v176.f64[0], v176, 1);
    v178 = (int8x16_t)vmulq_f64(v176, vaddq_f64(v176, v176));
    v179 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, v177), vmulq_f64(v170, vaddq_f64((float64x2_t)vextq_s8(v178, v178, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v179.f64[1], v179, 1) + vmulq_f64(v179, v179).f64[0];
    v180 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v179.f64[0], v179, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v179, vaddq_f64(v179, v179)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v180.f64[1], v180, 1) + vmulq_f64(v180, v180).f64[0];
    v181 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v180.f64[0], v180, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v180, vaddq_f64(v180, v180)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v181.f64[1], v181, 1) + vmulq_f64(v181, v181).f64[0];
    v182 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v181.f64[0], v181, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v181, vaddq_f64(v181, v181)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v182.f64[1], v182, 1) + vmulq_f64(v182, v182).f64[0];
    v183 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v182.f64[0], v182, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v182, vaddq_f64(v182, v182)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v183.f64[1], v183, 1) + vmulq_f64(v183, v183).f64[0];
    v184 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v183.f64[0], v183, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v183, vaddq_f64(v183, v183)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v184.f64[1], v184, 1) + vmulq_f64(v184, v184).f64[0];
    v185 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v184.f64[0], v184, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v184, vaddq_f64(v184, v184)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v185.f64[1], v185, 1) + vmulq_f64(v185, v185).f64[0];
    v186 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v185.f64[0], v185, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v185, vaddq_f64(v185, v185)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v187 = v186.f64[1];
    if (v186.f64[1] >= *(double *)(result + 40))
      goto LABEL_48;
    goto LABEL_47;
  }
  v429 = 1.0
       / (v11 * (v167 + v168)
        + 1.0
        + v10 * ((v167 + v168) * (v167 + v168))
        + v12 * ((v167 + v168) * ((v167 + v168) * (v167 + v168))));
  v430 = v429 * v165.f64[0];
  v431 = vmuld_lane_f64(v429, v165, 1);
  v432 = v430 * v430 + v431 * v431;
  v433 = 1.0 / (v11 * v432 + 1.0 + v10 * (v432 * v432) + v12 * (v432 * (v432 * v432)));
  v434 = v433 * v165.f64[0];
  v435 = vmuld_lane_f64(v433, v165, 1);
  v436 = v434 * v434 + v435 * v435;
  v437 = 1.0 / (v11 * v436 + 1.0 + v10 * (v436 * v436) + v12 * (v436 * (v436 * v436)));
  v438 = v437 * v165.f64[0];
  v439 = vmuld_lane_f64(v437, v165, 1);
  v440 = v438 * v438 + v439 * v439;
  v441 = 1.0 / (v11 * v440 + 1.0 + v10 * (v440 * v440) + v12 * (v440 * (v440 * v440)));
  v442 = v441 * v165.f64[0];
  v443 = vmuld_lane_f64(v441, v165, 1);
  v444 = v442 * v442 + v443 * v443;
  v445 = 1.0 / (v11 * v444 + 1.0 + v10 * (v444 * v444) + v12 * (v444 * (v444 * v444)));
  v446 = v445 * v165.f64[0];
  v447 = vmuld_lane_f64(v445, v165, 1);
  v448 = v446 * v446 + v447 * v447;
  v449 = 1.0 / (v11 * v448 + 1.0 + v10 * (v448 * v448) + v12 * (v448 * (v448 * v448)));
  v450 = v449 * v165.f64[0];
  v451 = vmuld_lane_f64(v449, v165, 1);
  v452 = v450 * v450 + v451 * v451;
  v453 = 1.0 / (v11 * v452 + 1.0 + v10 * (v452 * v452) + v12 * (v452 * (v452 * v452)));
  v454 = v453 * v165.f64[0];
  v455 = vmuld_lane_f64(v453, v165, 1);
  v456 = v454 * v454 + v455 * v455;
  v457 = 1.0 / (v11 * v456 + 1.0 + v10 * (v456 * v456) + v12 * (v456 * (v456 * v456)));
  v458 = v457 * v165.f64[0];
  v459 = vmuld_lane_f64(v457, v165, 1);
  v460 = v458 * v458 + v459 * v459;
  v461 = 1.0 / (v11 * v460 + 1.0 + v10 * (v460 * v460) + v12 * (v460 * (v460 * v460)));
  v462 = v461 * v165.f64[0];
  v463 = vmuld_lane_f64(v461, v165, 1);
  v464 = v462 * v462 + v463 * v463;
  v186 = vmulq_n_f64(v166, 1.0 / (v11 * v464 + 1.0 + v10 * (v464 * v464) + v12 * (v464 * (v464 * v464))));
  v187 = v186.f64[1];
  if (v186.f64[1] < *(double *)(result + 40))
LABEL_47:
    *(double *)(result + 40) = v187;
LABEL_48:
  if (v187 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v187;
    if (v186.f64[0] >= *(double *)(result + 56))
    {
LABEL_50:
      if (v186.f64[0] <= *(double *)(result + 64))
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  else if (v186.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_50;
  }
  *(float64_t *)(result + 56) = v186.f64[0];
  if (v186.f64[0] > *(double *)(result + 64))
LABEL_51:
    *(float64_t *)(result + 64) = v186.f64[0];
LABEL_52:
  v64.f64[1] = v141;
  v188 = vdivq_f64(vsubq_f64(v64, v1), v7);
  v189 = (float64x2_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL);
  *(_QWORD *)&v190 = *(_OWORD *)&vmulq_f64(v188, v188);
  v191 = vmuld_lane_f64(v188.f64[1], v188, 1);
  if (!v13)
  {
    v465 = 1.0
         / (v11 * (v190 + v191)
          + 1.0
          + v10 * ((v190 + v191) * (v190 + v191))
          + v12 * ((v190 + v191) * ((v190 + v191) * (v190 + v191))));
    v466 = v465 * v188.f64[0];
    v467 = vmuld_lane_f64(v465, v188, 1);
    v468 = v466 * v466 + v467 * v467;
    v469 = 1.0 / (v11 * v468 + 1.0 + v10 * (v468 * v468) + v12 * (v468 * (v468 * v468)));
    v470 = v469 * v188.f64[0];
    v471 = vmuld_lane_f64(v469, v188, 1);
    v472 = v470 * v470 + v471 * v471;
    v473 = 1.0 / (v11 * v472 + 1.0 + v10 * (v472 * v472) + v12 * (v472 * (v472 * v472)));
    v474 = v473 * v188.f64[0];
    v475 = vmuld_lane_f64(v473, v188, 1);
    v476 = v474 * v474 + v475 * v475;
    v477 = 1.0 / (v11 * v476 + 1.0 + v10 * (v476 * v476) + v12 * (v476 * (v476 * v476)));
    v478 = v477 * v188.f64[0];
    v479 = vmuld_lane_f64(v477, v188, 1);
    v480 = v478 * v478 + v479 * v479;
    v481 = 1.0 / (v11 * v480 + 1.0 + v10 * (v480 * v480) + v12 * (v480 * (v480 * v480)));
    v482 = v481 * v188.f64[0];
    v483 = vmuld_lane_f64(v481, v188, 1);
    v484 = v482 * v482 + v483 * v483;
    v485 = 1.0 / (v11 * v484 + 1.0 + v10 * (v484 * v484) + v12 * (v484 * (v484 * v484)));
    v486 = v485 * v188.f64[0];
    v487 = vmuld_lane_f64(v485, v188, 1);
    v488 = v486 * v486 + v487 * v487;
    v489 = 1.0 / (v11 * v488 + 1.0 + v10 * (v488 * v488) + v12 * (v488 * (v488 * v488)));
    v490 = v489 * v188.f64[0];
    v491 = vmuld_lane_f64(v489, v188, 1);
    v492 = v490 * v490 + v491 * v491;
    v493 = 1.0 / (v11 * v492 + 1.0 + v10 * (v492 * v492) + v12 * (v492 * (v492 * v492)));
    v494 = v493 * v188.f64[0];
    v495 = vmuld_lane_f64(v493, v188, 1);
    v496 = v494 * v494 + v495 * v495;
    v497 = 1.0 / (v11 * v496 + 1.0 + v10 * (v496 * v496) + v12 * (v496 * (v496 * v496)));
    v498 = v497 * v188.f64[0];
    v499 = vmuld_lane_f64(v497, v188, 1);
    v500 = v498 * v498 + v499 * v499;
    v209 = vmulq_n_f64(v189, 1.0 / (v11 * v500 + 1.0 + v10 * (v500 * v500) + v12 * (v500 * (v500 * v500))));
    v210 = v209.f64[1];
    if (v209.f64[1] >= *(double *)(result + 40))
      goto LABEL_55;
    goto LABEL_54;
  }
  *(double *)&v192 = v190 + v191;
  v193 = *(float64x2_t *)(result + 88);
  v194 = vaddq_f64(v193, v193);
  v195 = (float64x2_t)vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL);
  v196 = (float64x2_t)vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL);
  v197 = vmulq_n_f64(vsubq_f64(v188, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v188, vaddq_f64(v188, v188)), (float64x2_t)vdupq_lane_s64(v192, 0)), v196), vmulq_n_f64(v194, vmuld_lane_f64(v188.f64[0], v188, 1)))), 1.0/ (v11 * *(double *)&v192+ 1.0+ v10 * (*(double *)&v192 * *(double *)&v192)+ v12 * (*(double *)&v192 * (*(double *)&v192 * *(double *)&v192))));
  *(double *)&v198 = vmulq_f64(v197, v197).f64[0] + vmuld_lane_f64(v197.f64[1], v197, 1);
  v199 = vmulq_n_f64(vsubq_f64(v188, vaddq_f64(vmulq_n_f64(v194, vmuld_lane_f64(v197.f64[0], v197, 1)), vmulq_f64(v196, vaddq_f64(vmulq_f64(v197, vaddq_f64(v197, v197)), (float64x2_t)vdupq_lane_s64(v198, 0))))), 1.0/ (v11 * *(double *)&v198+ 1.0+ v10 * (*(double *)&v198 * *(double *)&v198)+ v12 * (*(double *)&v198 * (*(double *)&v198 * *(double *)&v198))));
  v197.f64[0] = vmulq_f64(v199, v199).f64[0] + vmuld_lane_f64(v199.f64[1], v199, 1);
  v200 = vmuld_lane_f64(v199.f64[0], v199, 1);
  v201 = (int8x16_t)vmulq_f64(v199, vaddq_f64(v199, v199));
  v202 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, v200), vmulq_f64(v193, vaddq_f64((float64x2_t)vextq_s8(v201, v201, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v202.f64[1], v202, 1) + vmulq_f64(v202, v202).f64[0];
  v203 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v202.f64[0], v202, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v202, vaddq_f64(v202, v202)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v203.f64[1], v203, 1) + vmulq_f64(v203, v203).f64[0];
  v204 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v203.f64[0], v203, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v203, vaddq_f64(v203, v203)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v204.f64[1], v204, 1) + vmulq_f64(v204, v204).f64[0];
  v205 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v204.f64[0], v204, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v204, vaddq_f64(v204, v204)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v205.f64[1], v205, 1) + vmulq_f64(v205, v205).f64[0];
  v206 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v205.f64[0], v205, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v205, vaddq_f64(v205, v205)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v206.f64[1], v206, 1) + vmulq_f64(v206, v206).f64[0];
  v207 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v206.f64[0], v206, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v206, vaddq_f64(v206, v206)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v207.f64[1], v207, 1) + vmulq_f64(v207, v207).f64[0];
  v208 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v207.f64[0], v207, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v207, vaddq_f64(v207, v207)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v208.f64[1], v208, 1) + vmulq_f64(v208, v208).f64[0];
  v209 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v208.f64[0], v208, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v208, vaddq_f64(v208, v208)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v210 = v209.f64[1];
  if (v209.f64[1] < *(double *)(result + 40))
LABEL_54:
    *(double *)(result + 40) = v210;
LABEL_55:
  if (v210 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v210;
    if (v209.f64[0] >= *(double *)(result + 56))
    {
LABEL_57:
      if (v209.f64[0] <= *(double *)(result + 64))
        return result;
      goto LABEL_58;
    }
  }
  else if (v209.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_57;
  }
  *(float64_t *)(result + 56) = v209.f64[0];
  if (v209.f64[0] > *(double *)(result + 64))
LABEL_58:
    *(float64_t *)(result + 64) = v209.f64[0];
  return result;
}

_QWORD *sub_208123CD4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24C088428;
  v2 = (void *)a1[34];
  a1[34] = 0;
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[33];
  a1[33] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[32];
  a1[32] = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_208123D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 >= v3)
      return 0;
    v130 = *(_OWORD *)(a2 + 40);
    v135 = *(_OWORD *)(a2 + 56);
    v140 = *(_OWORD *)(a2 + 72);
    v145 = *(_OWORD *)(a2 + 88);
    v120 = *(_OWORD *)(a2 + 8);
    v125 = *(_OWORD *)(a2 + 24);
    v115 = *(_OWORD *)(a2 + 104);
    v110 = *(_QWORD *)(a2 + 136);
    v100 = *(_OWORD *)(a2 + 144);
    v105 = *(_OWORD *)(a2 + 120);
    v95 = *(_QWORD *)(a2 + 176);
    v85 = *(_OWORD *)(a2 + 184);
    v90 = *(_OWORD *)(a2 + 160);
    v80 = *(_QWORD *)(a2 + 216);
    v70 = *(_OWORD *)(a2 + 224);
    v75 = *(_OWORD *)(a2 + 200);
    v65 = *(_QWORD *)(a2 + 256);
    v60 = *(_OWORD *)(a2 + 240);
    *(double *)a2 = v5;
    v26 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v26;
    v27 = *(_OWORD *)(a3 + 40);
    v28 = *(_OWORD *)(a3 + 56);
    v29 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a2 + 72) = v29;
    *(_OWORD *)(a2 + 56) = v28;
    *(_OWORD *)(a2 + 40) = v27;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
    v30 = *(_OWORD *)(a3 + 120);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v30;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
    v31 = *(_OWORD *)(a3 + 160);
    *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
    *(_OWORD *)(a2 + 160) = v31;
    *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
    v32 = *(_OWORD *)(a3 + 200);
    *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
    *(_OWORD *)(a2 + 200) = v32;
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
    v33 = *(_OWORD *)(a3 + 240);
    *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
    *(_OWORD *)(a2 + 240) = v33;
    *(double *)a3 = v3;
    *(_OWORD *)(a3 + 24) = v125;
    *(_OWORD *)(a3 + 8) = v120;
    *(_OWORD *)(a3 + 72) = v140;
    *(_OWORD *)(a3 + 56) = v135;
    *(_OWORD *)(a3 + 40) = v130;
    *(_OWORD *)(a3 + 88) = v145;
    *(_OWORD *)(a3 + 104) = v115;
    *(_QWORD *)(a3 + 136) = v110;
    *(_OWORD *)(a3 + 120) = v105;
    *(_QWORD *)(a3 + 176) = v95;
    *(_OWORD *)(a3 + 144) = v100;
    *(_OWORD *)(a3 + 160) = v90;
    *(_OWORD *)(a3 + 184) = v85;
    *(_QWORD *)(a3 + 216) = v80;
    *(_OWORD *)(a3 + 200) = v75;
    *(_QWORD *)(a3 + 256) = v65;
    *(_OWORD *)(a3 + 224) = v70;
    *(_OWORD *)(a3 + 240) = v60;
    v34 = *(double *)a1;
    if (*(double *)a2 < *(double *)a1)
    {
      v131 = *(_OWORD *)(a1 + 40);
      v136 = *(_OWORD *)(a1 + 56);
      v141 = *(_OWORD *)(a1 + 72);
      v146 = *(_OWORD *)(a1 + 88);
      v121 = *(_OWORD *)(a1 + 8);
      v126 = *(_OWORD *)(a1 + 24);
      v116 = *(_OWORD *)(a1 + 104);
      v111 = *(_QWORD *)(a1 + 136);
      v101 = *(_OWORD *)(a1 + 144);
      v106 = *(_OWORD *)(a1 + 120);
      v96 = *(_QWORD *)(a1 + 176);
      v86 = *(_OWORD *)(a1 + 184);
      v91 = *(_OWORD *)(a1 + 160);
      v81 = *(_QWORD *)(a1 + 216);
      v71 = *(_OWORD *)(a1 + 224);
      v76 = *(_OWORD *)(a1 + 200);
      v66 = *(_QWORD *)(a1 + 256);
      v61 = *(_OWORD *)(a1 + 240);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v35 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v35;
      v36 = *(_OWORD *)(a2 + 40);
      v37 = *(_OWORD *)(a2 + 56);
      v38 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v38;
      *(_OWORD *)(a1 + 56) = v37;
      *(_OWORD *)(a1 + 40) = v36;
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      v39 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v39;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      v40 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = v40;
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      v41 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v41;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      v42 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 240) = v42;
      *(double *)a2 = v34;
      *(_OWORD *)(a2 + 40) = v131;
      *(_OWORD *)(a2 + 56) = v136;
      *(_OWORD *)(a2 + 72) = v141;
      *(_OWORD *)(a2 + 88) = v146;
      *(_OWORD *)(a2 + 8) = v121;
      *(_OWORD *)(a2 + 24) = v126;
      *(_OWORD *)(a2 + 104) = v116;
      *(_QWORD *)(a2 + 136) = v111;
      *(_OWORD *)(a2 + 120) = v106;
      *(_OWORD *)(a2 + 144) = v101;
      *(_QWORD *)(a2 + 176) = v96;
      *(_OWORD *)(a2 + 160) = v91;
      *(_OWORD *)(a2 + 184) = v86;
      *(_QWORD *)(a2 + 216) = v81;
      *(_OWORD *)(a2 + 200) = v76;
      *(_OWORD *)(a2 + 224) = v71;
      *(_QWORD *)(a2 + 256) = v66;
      result = 2;
      *(_OWORD *)(a2 + 240) = v61;
      return result;
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 104);
    v8 = (__int128 *)(a1 + 120);
    v9 = (__int128 *)(a1 + 144);
    v10 = (__int128 *)(a1 + 160);
    v11 = (__int128 *)(a1 + 184);
    v12 = (__int128 *)(a1 + 200);
    v13 = (__int128 *)(a1 + 224);
    v14 = (__int128 *)(a1 + 240);
    if (v5 < v3)
    {
      v129 = *(_OWORD *)(a1 + 40);
      v134 = *(_OWORD *)(a1 + 56);
      v139 = *(_OWORD *)(a1 + 72);
      v144 = *(_OWORD *)(a1 + 88);
      v119 = *v6;
      v124 = *(_OWORD *)(a1 + 24);
      v114 = *v7;
      v109 = *(_QWORD *)(a1 + 136);
      v99 = *v9;
      v104 = *v8;
      v94 = *(_QWORD *)(a1 + 176);
      v84 = *v11;
      v89 = *v10;
      v79 = *(_QWORD *)(a1 + 216);
      v69 = *v13;
      v74 = *v12;
      v64 = *(_QWORD *)(a1 + 256);
      v59 = *v14;
      *(double *)a1 = v5;
      v15 = *(_OWORD *)(a3 + 24);
      *v6 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v15;
      v16 = *(_OWORD *)(a3 + 40);
      v17 = *(_OWORD *)(a3 + 56);
      v18 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 88) = v18;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 56) = v17;
      *v7 = *(_OWORD *)(a3 + 104);
      v19 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 136);
      *v8 = v19;
      *v9 = *(_OWORD *)(a3 + 144);
      v20 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a3 + 176);
      *v10 = v20;
      *v11 = *(_OWORD *)(a3 + 184);
      v21 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a3 + 216);
      *v12 = v21;
      *v13 = *(_OWORD *)(a3 + 224);
      v22 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a3 + 256);
      *v14 = v22;
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 24) = v124;
      *(_OWORD *)(a3 + 8) = v119;
      *(_OWORD *)(a3 + 72) = v139;
      *(_OWORD *)(a3 + 56) = v134;
      *(_OWORD *)(a3 + 40) = v129;
      *(_OWORD *)(a3 + 88) = v144;
      *(_OWORD *)(a3 + 104) = v114;
      *(_QWORD *)(a3 + 136) = v109;
      *(_OWORD *)(a3 + 120) = v104;
      *(_QWORD *)(a3 + 176) = v94;
      *(_OWORD *)(a3 + 144) = v99;
      *(_OWORD *)(a3 + 160) = v89;
      *(_OWORD *)(a3 + 184) = v84;
      *(_QWORD *)(a3 + 216) = v79;
      *(_OWORD *)(a3 + 200) = v74;
      v23 = v69;
      v24 = v59;
      *(_QWORD *)(a3 + 256) = v64;
      result = 1;
LABEL_9:
      *(_OWORD *)(a3 + 224) = v23;
      *(_OWORD *)(a3 + 240) = v24;
      return result;
    }
    v132 = *(_OWORD *)(a1 + 40);
    v137 = *(_OWORD *)(a1 + 56);
    v142 = *(_OWORD *)(a1 + 72);
    v147 = *(_OWORD *)(a1 + 88);
    v122 = *v6;
    v127 = *(_OWORD *)(a1 + 24);
    v117 = *v7;
    v112 = *(_QWORD *)(a1 + 136);
    v102 = *v9;
    v107 = *v8;
    v97 = *(_QWORD *)(a1 + 176);
    v87 = *v11;
    v92 = *v10;
    v82 = *(_QWORD *)(a1 + 216);
    v72 = *v13;
    v77 = *v12;
    v67 = *(_QWORD *)(a1 + 256);
    v62 = *v14;
    *(double *)a1 = v3;
    v43 = *(_OWORD *)(a2 + 24);
    *v6 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v43;
    v44 = *(_OWORD *)(a2 + 40);
    v45 = *(_OWORD *)(a2 + 56);
    v46 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v46;
    *(_OWORD *)(a1 + 40) = v44;
    *(_OWORD *)(a1 + 56) = v45;
    *v7 = *(_OWORD *)(a2 + 104);
    v47 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *v8 = v47;
    *v9 = *(_OWORD *)(a2 + 144);
    v48 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *v10 = v48;
    *v11 = *(_OWORD *)(a2 + 184);
    v49 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *v12 = v49;
    *v13 = *(_OWORD *)(a2 + 224);
    v50 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *v14 = v50;
    *(double *)a2 = v4;
    *(_OWORD *)(a2 + 24) = v127;
    *(_OWORD *)(a2 + 8) = v122;
    *(_OWORD *)(a2 + 72) = v142;
    *(_OWORD *)(a2 + 56) = v137;
    *(_OWORD *)(a2 + 40) = v132;
    *(_OWORD *)(a2 + 88) = v147;
    *(_OWORD *)(a2 + 104) = v117;
    *(_QWORD *)(a2 + 136) = v112;
    *(_OWORD *)(a2 + 120) = v107;
    *(_QWORD *)(a2 + 176) = v97;
    *(_OWORD *)(a2 + 144) = v102;
    *(_OWORD *)(a2 + 160) = v92;
    *(_OWORD *)(a2 + 184) = v87;
    *(_QWORD *)(a2 + 216) = v82;
    *(_OWORD *)(a2 + 200) = v77;
    *(_QWORD *)(a2 + 256) = v67;
    *(_OWORD *)(a2 + 224) = v72;
    *(_OWORD *)(a2 + 240) = v62;
    if (*(double *)a3 < v4)
    {
      v133 = *(_OWORD *)(a2 + 40);
      v138 = *(_OWORD *)(a2 + 56);
      v143 = *(_OWORD *)(a2 + 72);
      v148 = *(_OWORD *)(a2 + 88);
      v123 = *(_OWORD *)(a2 + 8);
      v128 = *(_OWORD *)(a2 + 24);
      v118 = *(_OWORD *)(a2 + 104);
      v113 = *(_QWORD *)(a2 + 136);
      v103 = *(_OWORD *)(a2 + 144);
      v108 = *(_OWORD *)(a2 + 120);
      v98 = *(_QWORD *)(a2 + 176);
      v88 = *(_OWORD *)(a2 + 184);
      v93 = *(_OWORD *)(a2 + 160);
      v83 = *(_QWORD *)(a2 + 216);
      v73 = *(_OWORD *)(a2 + 224);
      v78 = *(_OWORD *)(a2 + 200);
      v68 = *(_QWORD *)(a2 + 256);
      v63 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v51 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v51;
      v52 = *(_OWORD *)(a3 + 40);
      v53 = *(_OWORD *)(a3 + 56);
      v54 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = v54;
      *(_OWORD *)(a2 + 40) = v52;
      *(_OWORD *)(a2 + 56) = v53;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v55 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v55;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v56 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v56;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
      v57 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
      *(_OWORD *)(a2 + 200) = v57;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
      v58 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
      *(_OWORD *)(a2 + 240) = v58;
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 24) = v128;
      *(_OWORD *)(a3 + 8) = v123;
      *(_OWORD *)(a3 + 72) = v143;
      *(_OWORD *)(a3 + 56) = v138;
      *(_OWORD *)(a3 + 40) = v133;
      *(_OWORD *)(a3 + 88) = v148;
      *(_OWORD *)(a3 + 104) = v118;
      *(_QWORD *)(a3 + 136) = v113;
      *(_OWORD *)(a3 + 120) = v108;
      *(_QWORD *)(a3 + 176) = v98;
      *(_OWORD *)(a3 + 144) = v103;
      *(_OWORD *)(a3 + 160) = v93;
      *(_OWORD *)(a3 + 184) = v88;
      *(_QWORD *)(a3 + 216) = v83;
      *(_OWORD *)(a3 + 200) = v78;
      v23 = v73;
      v24 = v63;
      *(_QWORD *)(a3 + 256) = v68;
      result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

void sub_20812459C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  double *v32;
  double *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  BOOL v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  double v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  double *v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int64_t v101;
  int64_t v102;
  _OWORD *v103;
  _OWORD *v104;
  unint64_t v105;
  _OWORD *v106;
  unint64_t v107;
  _OWORD *v108;
  unint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  double v116;
  double v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  __int128 *v130;
  uint64_t v132;
  double v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  __int128 *v146;
  __int128 *v147;
  __int128 *v148;
  __int128 *v149;
  __int128 *v150;
  __int128 *v151;
  __int128 *v152;
  __int128 *v153;
  __int128 *v154;
  _QWORD *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _OWORD *v178;
  _OWORD *v179;
  uint64_t v180;
  _OWORD *v181;
  uint64_t v182;
  _OWORD *v183;
  uint64_t v184;
  _OWORD *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  double v189;
  unint64_t v190;
  double v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;

__n128 sub_208125EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  __n128 result;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __n128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;

  v3 = *(double *)a2;
  result.n128_u64[0] = *(_QWORD *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 < v3)
    {
      v109 = *(_OWORD *)(a2 + 40);
      v113 = *(_OWORD *)(a2 + 56);
      v117 = *(_OWORD *)(a2 + 72);
      v121 = *(_OWORD *)(a2 + 88);
      v101 = *(_OWORD *)(a2 + 8);
      v105 = *(_OWORD *)(a2 + 24);
      v97 = *(_OWORD *)(a2 + 104);
      v93 = *(_QWORD *)(a2 + 136);
      v85 = *(_OWORD *)(a2 + 144);
      v89 = *(_OWORD *)(a2 + 120);
      v81 = *(_QWORD *)(a2 + 176);
      v73 = *(_OWORD *)(a2 + 184);
      v77 = *(_OWORD *)(a2 + 160);
      v69 = *(_QWORD *)(a2 + 216);
      v61 = *(_OWORD *)(a2 + 224);
      v65 = *(_OWORD *)(a2 + 200);
      v57 = *(_QWORD *)(a2 + 256);
      v53 = *(_OWORD *)(a2 + 240);
      *(double *)a2 = v5;
      v21 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v21;
      v22 = *(_OWORD *)(a3 + 40);
      v23 = *(_OWORD *)(a3 + 56);
      v24 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v24;
      *(_OWORD *)(a2 + 56) = v23;
      *(_OWORD *)(a2 + 40) = v22;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v25 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v25;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v26 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v26;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
      v27 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
      *(_OWORD *)(a2 + 200) = v27;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
      result = *(__n128 *)(a3 + 240);
      *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
      *(__n128 *)(a2 + 240) = result;
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 24) = v105;
      *(_OWORD *)(a3 + 8) = v101;
      *(_OWORD *)(a3 + 72) = v117;
      *(_OWORD *)(a3 + 56) = v113;
      *(_OWORD *)(a3 + 40) = v109;
      *(_OWORD *)(a3 + 88) = v121;
      *(_OWORD *)(a3 + 104) = v97;
      *(_QWORD *)(a3 + 136) = v93;
      *(_OWORD *)(a3 + 120) = v89;
      *(_QWORD *)(a3 + 176) = v81;
      *(_OWORD *)(a3 + 144) = v85;
      *(_OWORD *)(a3 + 160) = v77;
      *(_OWORD *)(a3 + 184) = v73;
      *(_QWORD *)(a3 + 216) = v69;
      *(_OWORD *)(a3 + 200) = v65;
      *(_QWORD *)(a3 + 256) = v57;
      *(_OWORD *)(a3 + 224) = v61;
      *(_OWORD *)(a3 + 240) = v53;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v110 = *(_OWORD *)(a1 + 40);
        v114 = *(_OWORD *)(a1 + 56);
        v118 = *(_OWORD *)(a1 + 72);
        v122 = *(_OWORD *)(a1 + 88);
        v102 = *(_OWORD *)(a1 + 8);
        v106 = *(_OWORD *)(a1 + 24);
        v98 = *(_OWORD *)(a1 + 104);
        v94 = *(_QWORD *)(a1 + 136);
        v86 = *(_OWORD *)(a1 + 144);
        v90 = *(_OWORD *)(a1 + 120);
        v82 = *(_QWORD *)(a1 + 176);
        v74 = *(_OWORD *)(a1 + 184);
        v78 = *(_OWORD *)(a1 + 160);
        v70 = *(_QWORD *)(a1 + 216);
        v62 = *(_OWORD *)(a1 + 224);
        v66 = *(_OWORD *)(a1 + 200);
        v58 = *(_QWORD *)(a1 + 256);
        v54 = *(__n128 *)(a1 + 240);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v28 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v28;
        v29 = *(_OWORD *)(a2 + 40);
        v30 = *(_OWORD *)(a2 + 56);
        v31 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = v31;
        *(_OWORD *)(a1 + 56) = v30;
        *(_OWORD *)(a1 + 40) = v29;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        v32 = *(_OWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 120) = v32;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        v33 = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = v33;
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
        v34 = *(_OWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = v34;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
        v35 = *(_OWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        *(_OWORD *)(a1 + 240) = v35;
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_OWORD *)(a2 + 72) = v118;
        *(_OWORD *)(a2 + 88) = v122;
        *(_OWORD *)(a2 + 40) = v110;
        *(_OWORD *)(a2 + 56) = v114;
        *(_OWORD *)(a2 + 8) = v102;
        *(_OWORD *)(a2 + 24) = v106;
        *(_OWORD *)(a2 + 104) = v98;
        *(_QWORD *)(a2 + 136) = v94;
        *(_OWORD *)(a2 + 120) = v90;
        *(_OWORD *)(a2 + 144) = v86;
        *(_QWORD *)(a2 + 176) = v82;
        *(_OWORD *)(a2 + 160) = v78;
        *(_OWORD *)(a2 + 184) = v74;
        *(_QWORD *)(a2 + 216) = v70;
        *(_OWORD *)(a2 + 200) = v66;
        *(_OWORD *)(a2 + 224) = v62;
        result = v54;
        *(_QWORD *)(a2 + 256) = v58;
        *(__n128 *)(a2 + 240) = v54;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 104);
    v8 = (__int128 *)(a1 + 120);
    v9 = (__int128 *)(a1 + 144);
    v10 = (__int128 *)(a1 + 160);
    v11 = (__int128 *)(a1 + 184);
    v12 = (__int128 *)(a1 + 200);
    v13 = (__n128 *)(a1 + 224);
    v14 = (__int128 *)(a1 + 240);
    if (v5 >= v3)
    {
      v111 = *(_OWORD *)(a1 + 40);
      v115 = *(_OWORD *)(a1 + 56);
      v119 = *(_OWORD *)(a1 + 72);
      v123 = *(_OWORD *)(a1 + 88);
      v103 = *v6;
      v107 = *(_OWORD *)(a1 + 24);
      v99 = *v7;
      v95 = *(_QWORD *)(a1 + 136);
      v87 = *v9;
      v91 = *v8;
      v83 = *(_QWORD *)(a1 + 176);
      v75 = *v11;
      v79 = *v10;
      v71 = *(_QWORD *)(a1 + 216);
      v63 = *v13;
      v67 = *v12;
      v59 = *(_QWORD *)(a1 + 256);
      v55 = *v14;
      *(double *)a1 = v3;
      v36 = *(_OWORD *)(a2 + 24);
      *v6 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v36;
      v37 = *(_OWORD *)(a2 + 40);
      v38 = *(_OWORD *)(a2 + 56);
      v39 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v39;
      *(_OWORD *)(a1 + 40) = v37;
      *(_OWORD *)(a1 + 56) = v38;
      *v7 = *(_OWORD *)(a2 + 104);
      v40 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *v8 = v40;
      *v9 = *(_OWORD *)(a2 + 144);
      v41 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *v10 = v41;
      *v11 = *(_OWORD *)(a2 + 184);
      v42 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *v12 = v42;
      *v13 = *(__n128 *)(a2 + 224);
      v43 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *v14 = v43;
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_OWORD *)(a2 + 24) = v107;
      *(_OWORD *)(a2 + 8) = v103;
      *(_OWORD *)(a2 + 72) = v119;
      *(_OWORD *)(a2 + 56) = v115;
      *(_OWORD *)(a2 + 40) = v111;
      *(_OWORD *)(a2 + 88) = v123;
      *(_OWORD *)(a2 + 104) = v99;
      *(_QWORD *)(a2 + 136) = v95;
      *(_OWORD *)(a2 + 120) = v91;
      *(_QWORD *)(a2 + 176) = v83;
      *(_OWORD *)(a2 + 144) = v87;
      *(_OWORD *)(a2 + 160) = v79;
      *(_OWORD *)(a2 + 184) = v75;
      *(_QWORD *)(a2 + 216) = v71;
      *(_OWORD *)(a2 + 200) = v67;
      *(_QWORD *)(a2 + 256) = v59;
      *(__n128 *)(a2 + 224) = v63;
      *(_OWORD *)(a2 + 240) = v55;
      if (*(double *)a3 >= result.n128_f64[0])
        return result;
      v12 = (__int128 *)(a2 + 200);
      v108 = *(_OWORD *)(a2 + 40);
      v112 = *(_OWORD *)(a2 + 56);
      v13 = (__n128 *)(a2 + 224);
      v14 = (__int128 *)(a2 + 240);
      v116 = *(_OWORD *)(a2 + 72);
      v120 = *(_OWORD *)(a2 + 88);
      v100 = *(_OWORD *)(a2 + 8);
      v104 = *(_OWORD *)(a2 + 24);
      v96 = *(_OWORD *)(a2 + 104);
      v92 = *(_QWORD *)(a2 + 136);
      v84 = *(_OWORD *)(a2 + 144);
      v88 = *(_OWORD *)(a2 + 120);
      v80 = *(_QWORD *)(a2 + 176);
      v72 = *(_OWORD *)(a2 + 184);
      v76 = *(_OWORD *)(a2 + 160);
      v68 = *(_QWORD *)(a2 + 216);
      v60 = *(__n128 *)(a2 + 224);
      v64 = *(_OWORD *)(a2 + 200);
      v56 = *(_QWORD *)(a2 + 256);
      v52 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v44 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v44;
      v45 = *(_OWORD *)(a3 + 40);
      v46 = *(_OWORD *)(a3 + 56);
      v47 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = v47;
      *(_OWORD *)(a2 + 40) = v45;
      *(_OWORD *)(a2 + 56) = v46;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v48 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v48;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v49 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v49;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
    }
    else
    {
      v108 = *(_OWORD *)(a1 + 40);
      v112 = *(_OWORD *)(a1 + 56);
      v116 = *(_OWORD *)(a1 + 72);
      v120 = *(_OWORD *)(a1 + 88);
      v100 = *v6;
      v104 = *(_OWORD *)(a1 + 24);
      v96 = *v7;
      v92 = *(_QWORD *)(a1 + 136);
      v84 = *v9;
      v88 = *v8;
      v80 = *(_QWORD *)(a1 + 176);
      v72 = *v11;
      v76 = *v10;
      v68 = *(_QWORD *)(a1 + 216);
      v60 = *v13;
      v64 = *v12;
      v56 = *(_QWORD *)(a1 + 256);
      v52 = *v14;
      *(double *)a1 = v5;
      v15 = *(_OWORD *)(a3 + 24);
      *v6 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v15;
      v16 = *(_OWORD *)(a3 + 40);
      v17 = *(_OWORD *)(a3 + 56);
      v18 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 88) = v18;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 56) = v17;
      *v7 = *(_OWORD *)(a3 + 104);
      v19 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 136);
      *v8 = v19;
      *v9 = *(_OWORD *)(a3 + 144);
      v20 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a3 + 176);
      *v10 = v20;
      *v11 = *(_OWORD *)(a3 + 184);
    }
    v50 = *(_OWORD *)(a3 + 200);
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a3 + 216);
    *v12 = v50;
    *v13 = *(__n128 *)(a3 + 224);
    v51 = *(_OWORD *)(a3 + 240);
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a3 + 256);
    *v14 = v51;
    *(_QWORD *)a3 = result.n128_u64[0];
    *(_OWORD *)(a3 + 24) = v104;
    *(_OWORD *)(a3 + 8) = v100;
    *(_OWORD *)(a3 + 72) = v116;
    *(_OWORD *)(a3 + 56) = v112;
    *(_OWORD *)(a3 + 40) = v108;
    *(_OWORD *)(a3 + 88) = v120;
    *(_OWORD *)(a3 + 104) = v96;
    *(_QWORD *)(a3 + 136) = v92;
    *(_OWORD *)(a3 + 120) = v88;
    *(_QWORD *)(a3 + 176) = v80;
    *(_OWORD *)(a3 + 144) = v84;
    *(_OWORD *)(a3 + 160) = v76;
    *(_OWORD *)(a3 + 184) = v72;
    *(_QWORD *)(a3 + 216) = v68;
    *(_OWORD *)(a3 + 200) = v64;
    result = v60;
    *(_QWORD *)(a3 + 256) = v56;
    *(__n128 *)(a3 + 224) = v60;
    *(_OWORD *)(a3 + 240) = v52;
  }
  return result;
}

BOOL sub_208126688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = 0xF83E0F83E0F83E1 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 264);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v60 = *(_OWORD *)(a1 + 40);
        v62 = *(_OWORD *)(a1 + 56);
        v64 = *(_OWORD *)(a1 + 72);
        v66 = *(_OWORD *)(a1 + 88);
        v56 = *(_OWORD *)(a1 + 8);
        v58 = *(_OWORD *)(a1 + 24);
        v54 = *(_OWORD *)(a1 + 104);
        v52 = *(_QWORD *)(a1 + 136);
        v48 = *(_OWORD *)(a1 + 144);
        v50 = *(_OWORD *)(a1 + 120);
        v46 = *(_QWORD *)(a1 + 176);
        v42 = *(_OWORD *)(a1 + 184);
        v44 = *(_OWORD *)(a1 + 160);
        v40 = *(_QWORD *)(a1 + 216);
        v36 = *(_OWORD *)(a1 + 224);
        v38 = *(_OWORD *)(a1 + 200);
        v34 = *(_QWORD *)(a1 + 256);
        v32 = *(_OWORD *)(a1 + 240);
        *(double *)a1 = v6;
        v8 = *(_OWORD *)(a2 - 256);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 240);
        *(_OWORD *)(a1 + 8) = v8;
        v9 = *(_OWORD *)(a2 - 224);
        v10 = *(_OWORD *)(a2 - 208);
        v11 = *(_OWORD *)(a2 - 192);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 - 176);
        *(_OWORD *)(a1 + 72) = v11;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 40) = v9;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 - 160);
        v12 = *(_OWORD *)(a2 - 144);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 - 128);
        *(_OWORD *)(a1 + 120) = v12;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 - 120);
        v13 = *(_OWORD *)(a2 - 104);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 - 80);
        v14 = *(_OWORD *)(a2 - 64);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 200) = v14;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 40);
        v15 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 240) = v15;
        *(double *)(a2 - 264) = v7;
        *(_OWORD *)(a2 - 256) = v56;
        *(_OWORD *)(a2 - 240) = v58;
        *(_OWORD *)(a2 - 224) = v60;
        *(_OWORD *)(a2 - 208) = v62;
        *(_OWORD *)(a2 - 192) = v64;
        *(_OWORD *)(a2 - 176) = v66;
        *(_QWORD *)(a2 - 128) = v52;
        *(_OWORD *)(a2 - 160) = v54;
        *(_OWORD *)(a2 - 144) = v50;
        *(_OWORD *)(a2 - 120) = v48;
        *(_QWORD *)(a2 - 88) = v46;
        *(_OWORD *)(a2 - 104) = v44;
        *(_QWORD *)(a2 - 48) = v40;
        *(_OWORD *)(a2 - 80) = v42;
        *(_OWORD *)(a2 - 64) = v38;
        *(_OWORD *)(a2 - 40) = v36;
        *(_QWORD *)(a2 - 8) = v34;
        *(_OWORD *)(a2 - 24) = v32;
      }
      return result;
    case 3:
      sub_208125EDC(a1, a1 + 264, a2 - 264);
      return 1;
    case 4:
      sub_208126B34(a1, a1 + 264, a1 + 528, a2 - 264);
      return 1;
    case 5:
      sub_208127088(a1, a1 + 264, a1 + 528, a1 + 792, a2 - 264);
      return 1;
    default:
      v16 = (double *)(a1 + 528);
      sub_208125EDC(a1, a1 + 264, a1 + 528);
      v17 = a1 + 792;
      if (a1 + 792 == a2)
        return 1;
      v18 = 0;
      v19 = 528;
      break;
  }
  while (1)
  {
    v21 = *(double *)v17;
    if (*(double *)v17 < *v16)
    {
      v61 = *(_OWORD *)(v17 + 40);
      v63 = *(_OWORD *)(v17 + 56);
      v65 = *(_OWORD *)(v17 + 72);
      v67 = *(_OWORD *)(v17 + 88);
      v57 = *(_OWORD *)(v17 + 8);
      v59 = *(_OWORD *)(v17 + 24);
      v55 = *(_OWORD *)(v17 + 104);
      v49 = *(_OWORD *)(v17 + 144);
      v51 = *(_OWORD *)(v17 + 120);
      v43 = *(_OWORD *)(v17 + 184);
      v45 = *(_OWORD *)(v17 + 160);
      v37 = *(_OWORD *)(v17 + 224);
      v39 = *(_OWORD *)(v17 + 200);
      v53 = *(_QWORD *)(v17 + 136);
      v47 = *(_QWORD *)(v17 + 176);
      v41 = *(_QWORD *)(v17 + 216);
      v35 = *(_QWORD *)(v17 + 256);
      v33 = *(_OWORD *)(v17 + 240);
      v22 = v19;
      v23 = *v16;
      do
      {
        v24 = a1 + v22;
        *(double *)(v24 + 264) = v23;
        v25 = *(_OWORD *)(a1 + v22 + 56);
        *(_OWORD *)(v24 + 304) = *(_OWORD *)(a1 + v22 + 40);
        *(_OWORD *)(v24 + 320) = v25;
        v26 = *(_OWORD *)(a1 + v22 + 88);
        *(_OWORD *)(v24 + 336) = *(_OWORD *)(a1 + v22 + 72);
        *(_OWORD *)(v24 + 352) = v26;
        v27 = *(_OWORD *)(a1 + v22 + 24);
        *(_OWORD *)(v24 + 272) = *(_OWORD *)(a1 + v22 + 8);
        *(_OWORD *)(v24 + 288) = v27;
        v28 = *(_OWORD *)(a1 + v22 + 120);
        *(_OWORD *)(v24 + 368) = *(_OWORD *)(a1 + v22 + 104);
        *(_OWORD *)(v24 + 384) = v28;
        v29 = *(_OWORD *)(a1 + v22 + 160);
        *(_OWORD *)(a1 + v22 + 408) = *(_OWORD *)(a1 + v22 + 144);
        *(_OWORD *)(a1 + v22 + 424) = v29;
        v30 = *(_OWORD *)(a1 + v22 + 200);
        *(_OWORD *)(v24 + 448) = *(_OWORD *)(a1 + v22 + 184);
        *(_OWORD *)(v24 + 464) = v30;
        v31 = *(_OWORD *)(a1 + v22 + 240);
        *(_OWORD *)(a1 + v22 + 488) = *(_OWORD *)(a1 + v22 + 224);
        *(_QWORD *)(v24 + 400) = *(_QWORD *)(a1 + v22 + 136);
        *(_QWORD *)(v24 + 440) = *(_QWORD *)(a1 + v22 + 176);
        *(_QWORD *)(v24 + 480) = *(_QWORD *)(a1 + v22 + 216);
        *(_QWORD *)(v24 + 520) = *(_QWORD *)(a1 + v22 + 256);
        *(_OWORD *)(a1 + v22 + 504) = v31;
        if (!v22)
        {
          v20 = (double *)a1;
          goto LABEL_7;
        }
        v22 -= 264;
        v23 = *(double *)(v22 + a1);
      }
      while (v21 < v23);
      v20 = (double *)(a1 + v22 + 264);
LABEL_7:
      *v20 = v21;
      *(_OWORD *)(v24 + 40) = v61;
      *(_OWORD *)(v24 + 56) = v63;
      *(_OWORD *)(v24 + 72) = v65;
      *(_OWORD *)(v24 + 88) = v67;
      *(_OWORD *)(v24 + 8) = v57;
      *(_OWORD *)(v24 + 24) = v59;
      *(_OWORD *)(v24 + 104) = v55;
      *(_QWORD *)(v24 + 136) = v53;
      *(_OWORD *)(v24 + 120) = v51;
      *(_QWORD *)(v24 + 176) = v47;
      *(_OWORD *)(v24 + 144) = v49;
      *(_OWORD *)(v24 + 160) = v45;
      *(_OWORD *)(v24 + 184) = v43;
      *(_QWORD *)(v24 + 216) = v41;
      *(_OWORD *)(v24 + 200) = v39;
      *(_QWORD *)(v24 + 256) = v35;
      ++v18;
      *(_OWORD *)(v24 + 224) = v37;
      *(_OWORD *)(v24 + 240) = v33;
      if (v18 == 8)
        return v17 + 264 == a2;
    }
    v16 = (double *)v17;
    v19 += 264;
    v17 += 264;
    if (v17 == a2)
      return 1;
  }
}

__n128 sub_208126B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  sub_208125EDC(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    v75 = *(_OWORD *)(a3 + 40);
    v78 = *(_OWORD *)(a3 + 56);
    v81 = *(_OWORD *)(a3 + 72);
    v84 = *(_OWORD *)(a3 + 88);
    v69 = *(_OWORD *)(a3 + 8);
    v72 = *(_OWORD *)(a3 + 24);
    v66 = *(_OWORD *)(a3 + 104);
    v63 = *(_QWORD *)(a3 + 136);
    v57 = *(_OWORD *)(a3 + 144);
    v60 = *(_OWORD *)(a3 + 120);
    v54 = *(_QWORD *)(a3 + 176);
    v48 = *(_OWORD *)(a3 + 184);
    v51 = *(_OWORD *)(a3 + 160);
    v45 = *(_QWORD *)(a3 + 216);
    v39 = *(_OWORD *)(a3 + 224);
    v42 = *(_OWORD *)(a3 + 200);
    v36 = *(_QWORD *)(a3 + 256);
    v33 = *(_OWORD *)(a3 + 240);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v9 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v9;
    v10 = *(_OWORD *)(a4 + 40);
    v11 = *(_OWORD *)(a4 + 56);
    v12 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(a3 + 72) = v12;
    *(_OWORD *)(a3 + 56) = v11;
    *(_OWORD *)(a3 + 40) = v10;
    *(_OWORD *)(a3 + 104) = *(_OWORD *)(a4 + 104);
    v13 = *(_OWORD *)(a4 + 120);
    *(_QWORD *)(a3 + 136) = *(_QWORD *)(a4 + 136);
    *(_OWORD *)(a3 + 120) = v13;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
    v14 = *(_OWORD *)(a4 + 160);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 176);
    *(_OWORD *)(a3 + 160) = v14;
    *(_OWORD *)(a3 + 184) = *(_OWORD *)(a4 + 184);
    v15 = *(_OWORD *)(a4 + 200);
    *(_QWORD *)(a3 + 216) = *(_QWORD *)(a4 + 216);
    *(_OWORD *)(a3 + 200) = v15;
    *(_OWORD *)(a3 + 224) = *(_OWORD *)(a4 + 224);
    v16 = *(_OWORD *)(a4 + 240);
    *(_QWORD *)(a3 + 256) = *(_QWORD *)(a4 + 256);
    *(_OWORD *)(a3 + 240) = v16;
    *(_QWORD *)a4 = result.n128_u64[0];
    *(_OWORD *)(a4 + 24) = v72;
    *(_OWORD *)(a4 + 8) = v69;
    *(_OWORD *)(a4 + 72) = v81;
    *(_OWORD *)(a4 + 56) = v78;
    *(_OWORD *)(a4 + 40) = v75;
    *(_OWORD *)(a4 + 88) = v84;
    *(_OWORD *)(a4 + 104) = v66;
    *(_QWORD *)(a4 + 136) = v63;
    *(_OWORD *)(a4 + 120) = v60;
    *(_QWORD *)(a4 + 176) = v54;
    *(_OWORD *)(a4 + 144) = v57;
    *(_OWORD *)(a4 + 160) = v51;
    *(_OWORD *)(a4 + 184) = v48;
    *(_QWORD *)(a4 + 216) = v45;
    *(_OWORD *)(a4 + 200) = v42;
    *(_QWORD *)(a4 + 256) = v36;
    *(_OWORD *)(a4 + 224) = v39;
    *(_OWORD *)(a4 + 240) = v33;
    result.n128_u64[0] = *(_QWORD *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      v76 = *(_OWORD *)(a2 + 40);
      v79 = *(_OWORD *)(a2 + 56);
      v82 = *(_OWORD *)(a2 + 72);
      v85 = *(_OWORD *)(a2 + 88);
      v70 = *(_OWORD *)(a2 + 8);
      v73 = *(_OWORD *)(a2 + 24);
      v67 = *(_OWORD *)(a2 + 104);
      v64 = *(_QWORD *)(a2 + 136);
      v58 = *(_OWORD *)(a2 + 144);
      v61 = *(_OWORD *)(a2 + 120);
      v55 = *(_QWORD *)(a2 + 176);
      v49 = *(_OWORD *)(a2 + 184);
      v52 = *(_OWORD *)(a2 + 160);
      v46 = *(_QWORD *)(a2 + 216);
      v40 = *(_OWORD *)(a2 + 224);
      v43 = *(_OWORD *)(a2 + 200);
      v37 = *(_QWORD *)(a2 + 256);
      v34 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v17 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v17;
      v18 = *(_OWORD *)(a3 + 40);
      v19 = *(_OWORD *)(a3 + 56);
      v20 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 56) = v19;
      *(_OWORD *)(a2 + 40) = v18;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v21 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v21;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v22 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v22;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
      v23 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
      *(_OWORD *)(a2 + 200) = v23;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
      v24 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
      *(_OWORD *)(a2 + 240) = v24;
      *(_QWORD *)a3 = result.n128_u64[0];
      *(_OWORD *)(a3 + 72) = v82;
      *(_OWORD *)(a3 + 88) = v85;
      *(_OWORD *)(a3 + 40) = v76;
      *(_OWORD *)(a3 + 56) = v79;
      *(_OWORD *)(a3 + 8) = v70;
      *(_OWORD *)(a3 + 24) = v73;
      *(_OWORD *)(a3 + 104) = v67;
      *(_QWORD *)(a3 + 136) = v64;
      *(_OWORD *)(a3 + 120) = v61;
      *(_OWORD *)(a3 + 144) = v58;
      *(_QWORD *)(a3 + 176) = v55;
      *(_OWORD *)(a3 + 160) = v52;
      *(_OWORD *)(a3 + 184) = v49;
      *(_QWORD *)(a3 + 216) = v46;
      *(_OWORD *)(a3 + 200) = v43;
      *(_OWORD *)(a3 + 224) = v40;
      *(_QWORD *)(a3 + 256) = v37;
      *(_OWORD *)(a3 + 240) = v34;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v77 = *(_OWORD *)(a1 + 40);
        v80 = *(_OWORD *)(a1 + 56);
        v83 = *(_OWORD *)(a1 + 72);
        v86 = *(_OWORD *)(a1 + 88);
        v71 = *(_OWORD *)(a1 + 8);
        v74 = *(_OWORD *)(a1 + 24);
        v68 = *(_OWORD *)(a1 + 104);
        v65 = *(_QWORD *)(a1 + 136);
        v59 = *(_OWORD *)(a1 + 144);
        v62 = *(_OWORD *)(a1 + 120);
        v56 = *(_QWORD *)(a1 + 176);
        v50 = *(_OWORD *)(a1 + 184);
        v53 = *(_OWORD *)(a1 + 160);
        v47 = *(_QWORD *)(a1 + 216);
        v41 = *(_OWORD *)(a1 + 224);
        v44 = *(_OWORD *)(a1 + 200);
        v38 = *(_QWORD *)(a1 + 256);
        v35 = *(__n128 *)(a1 + 240);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v25 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v25;
        v26 = *(_OWORD *)(a2 + 40);
        v27 = *(_OWORD *)(a2 + 56);
        v28 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = v28;
        *(_OWORD *)(a1 + 56) = v27;
        *(_OWORD *)(a1 + 40) = v26;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        v29 = *(_OWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 120) = v29;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        v30 = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = v30;
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
        v31 = *(_OWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = v31;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
        v32 = *(_OWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        *(_OWORD *)(a1 + 240) = v32;
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_OWORD *)(a2 + 72) = v83;
        *(_OWORD *)(a2 + 88) = v86;
        *(_OWORD *)(a2 + 40) = v77;
        *(_OWORD *)(a2 + 56) = v80;
        *(_OWORD *)(a2 + 8) = v71;
        *(_OWORD *)(a2 + 24) = v74;
        *(_OWORD *)(a2 + 104) = v68;
        *(_QWORD *)(a2 + 136) = v65;
        *(_OWORD *)(a2 + 120) = v62;
        *(_OWORD *)(a2 + 144) = v59;
        *(_QWORD *)(a2 + 176) = v56;
        *(_OWORD *)(a2 + 160) = v53;
        *(_OWORD *)(a2 + 184) = v50;
        *(_QWORD *)(a2 + 216) = v47;
        *(_OWORD *)(a2 + 200) = v44;
        *(_OWORD *)(a2 + 224) = v41;
        result = v35;
        *(_QWORD *)(a2 + 256) = v38;
        *(__n128 *)(a2 + 240) = v35;
      }
    }
  }
  return result;
}

__n128 sub_208127088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  sub_208126B34(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    v99 = *(_OWORD *)(a4 + 40);
    v103 = *(_OWORD *)(a4 + 56);
    v107 = *(_OWORD *)(a4 + 72);
    v111 = *(_OWORD *)(a4 + 88);
    v91 = *(_OWORD *)(a4 + 8);
    v95 = *(_OWORD *)(a4 + 24);
    v87 = *(_OWORD *)(a4 + 104);
    v83 = *(_QWORD *)(a4 + 136);
    v75 = *(_OWORD *)(a4 + 144);
    v79 = *(_OWORD *)(a4 + 120);
    v71 = *(_QWORD *)(a4 + 176);
    v63 = *(_OWORD *)(a4 + 184);
    v67 = *(_OWORD *)(a4 + 160);
    v59 = *(_QWORD *)(a4 + 216);
    v51 = *(_OWORD *)(a4 + 224);
    v55 = *(_OWORD *)(a4 + 200);
    v47 = *(_QWORD *)(a4 + 256);
    v43 = *(_OWORD *)(a4 + 240);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v11 = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v11;
    v12 = *(_OWORD *)(a5 + 40);
    v13 = *(_OWORD *)(a5 + 56);
    v14 = *(_OWORD *)(a5 + 72);
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(a5 + 88);
    *(_OWORD *)(a4 + 72) = v14;
    *(_OWORD *)(a4 + 56) = v13;
    *(_OWORD *)(a4 + 40) = v12;
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(a5 + 104);
    v15 = *(_OWORD *)(a5 + 120);
    *(_QWORD *)(a4 + 136) = *(_QWORD *)(a5 + 136);
    *(_OWORD *)(a4 + 120) = v15;
    *(_OWORD *)(a4 + 144) = *(_OWORD *)(a5 + 144);
    v16 = *(_OWORD *)(a5 + 160);
    *(_QWORD *)(a4 + 176) = *(_QWORD *)(a5 + 176);
    *(_OWORD *)(a4 + 160) = v16;
    *(_OWORD *)(a4 + 184) = *(_OWORD *)(a5 + 184);
    v17 = *(_OWORD *)(a5 + 200);
    *(_QWORD *)(a4 + 216) = *(_QWORD *)(a5 + 216);
    *(_OWORD *)(a4 + 200) = v17;
    *(_OWORD *)(a4 + 224) = *(_OWORD *)(a5 + 224);
    v18 = *(_OWORD *)(a5 + 240);
    *(_QWORD *)(a4 + 256) = *(_QWORD *)(a5 + 256);
    *(_OWORD *)(a4 + 240) = v18;
    *(_QWORD *)a5 = result.n128_u64[0];
    *(_OWORD *)(a5 + 24) = v95;
    *(_OWORD *)(a5 + 8) = v91;
    *(_OWORD *)(a5 + 72) = v107;
    *(_OWORD *)(a5 + 56) = v103;
    *(_OWORD *)(a5 + 40) = v99;
    *(_OWORD *)(a5 + 88) = v111;
    *(_OWORD *)(a5 + 104) = v87;
    *(_QWORD *)(a5 + 136) = v83;
    *(_OWORD *)(a5 + 120) = v79;
    *(_QWORD *)(a5 + 176) = v71;
    *(_OWORD *)(a5 + 144) = v75;
    *(_OWORD *)(a5 + 160) = v67;
    *(_OWORD *)(a5 + 184) = v63;
    *(_QWORD *)(a5 + 216) = v59;
    *(_OWORD *)(a5 + 200) = v55;
    *(_QWORD *)(a5 + 256) = v47;
    *(_OWORD *)(a5 + 224) = v51;
    *(_OWORD *)(a5 + 240) = v43;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      v100 = *(_OWORD *)(a3 + 40);
      v104 = *(_OWORD *)(a3 + 56);
      v108 = *(_OWORD *)(a3 + 72);
      v112 = *(_OWORD *)(a3 + 88);
      v92 = *(_OWORD *)(a3 + 8);
      v96 = *(_OWORD *)(a3 + 24);
      v88 = *(_OWORD *)(a3 + 104);
      v84 = *(_QWORD *)(a3 + 136);
      v76 = *(_OWORD *)(a3 + 144);
      v80 = *(_OWORD *)(a3 + 120);
      v72 = *(_QWORD *)(a3 + 176);
      v64 = *(_OWORD *)(a3 + 184);
      v68 = *(_OWORD *)(a3 + 160);
      v60 = *(_QWORD *)(a3 + 216);
      v52 = *(_OWORD *)(a3 + 224);
      v56 = *(_OWORD *)(a3 + 200);
      v48 = *(_QWORD *)(a3 + 256);
      v44 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v19 = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v19;
      v20 = *(_OWORD *)(a4 + 40);
      v21 = *(_OWORD *)(a4 + 56);
      v22 = *(_OWORD *)(a4 + 72);
      *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 88);
      *(_OWORD *)(a3 + 72) = v22;
      *(_OWORD *)(a3 + 56) = v21;
      *(_OWORD *)(a3 + 40) = v20;
      *(_OWORD *)(a3 + 104) = *(_OWORD *)(a4 + 104);
      v23 = *(_OWORD *)(a4 + 120);
      *(_QWORD *)(a3 + 136) = *(_QWORD *)(a4 + 136);
      *(_OWORD *)(a3 + 120) = v23;
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
      v24 = *(_OWORD *)(a4 + 160);
      *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 176);
      *(_OWORD *)(a3 + 160) = v24;
      *(_OWORD *)(a3 + 184) = *(_OWORD *)(a4 + 184);
      v25 = *(_OWORD *)(a4 + 200);
      *(_QWORD *)(a3 + 216) = *(_QWORD *)(a4 + 216);
      *(_OWORD *)(a3 + 200) = v25;
      *(_OWORD *)(a3 + 224) = *(_OWORD *)(a4 + 224);
      v26 = *(_OWORD *)(a4 + 240);
      *(_QWORD *)(a3 + 256) = *(_QWORD *)(a4 + 256);
      *(_OWORD *)(a3 + 240) = v26;
      *(_QWORD *)a4 = result.n128_u64[0];
      *(_OWORD *)(a4 + 72) = v108;
      *(_OWORD *)(a4 + 88) = v112;
      *(_OWORD *)(a4 + 40) = v100;
      *(_OWORD *)(a4 + 56) = v104;
      *(_OWORD *)(a4 + 8) = v92;
      *(_OWORD *)(a4 + 24) = v96;
      *(_OWORD *)(a4 + 104) = v88;
      *(_QWORD *)(a4 + 136) = v84;
      *(_OWORD *)(a4 + 120) = v80;
      *(_OWORD *)(a4 + 144) = v76;
      *(_QWORD *)(a4 + 176) = v72;
      *(_OWORD *)(a4 + 160) = v68;
      *(_OWORD *)(a4 + 184) = v64;
      *(_QWORD *)(a4 + 216) = v60;
      *(_OWORD *)(a4 + 200) = v56;
      *(_OWORD *)(a4 + 224) = v52;
      *(_QWORD *)(a4 + 256) = v48;
      *(_OWORD *)(a4 + 240) = v44;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        v101 = *(_OWORD *)(a2 + 40);
        v105 = *(_OWORD *)(a2 + 56);
        v109 = *(_OWORD *)(a2 + 72);
        v113 = *(_OWORD *)(a2 + 88);
        v93 = *(_OWORD *)(a2 + 8);
        v97 = *(_OWORD *)(a2 + 24);
        v89 = *(_OWORD *)(a2 + 104);
        v85 = *(_QWORD *)(a2 + 136);
        v77 = *(_OWORD *)(a2 + 144);
        v81 = *(_OWORD *)(a2 + 120);
        v73 = *(_QWORD *)(a2 + 176);
        v65 = *(_OWORD *)(a2 + 184);
        v69 = *(_OWORD *)(a2 + 160);
        v61 = *(_QWORD *)(a2 + 216);
        v53 = *(_OWORD *)(a2 + 224);
        v57 = *(_OWORD *)(a2 + 200);
        v49 = *(_QWORD *)(a2 + 256);
        v45 = *(_OWORD *)(a2 + 240);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v27 = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v27;
        v28 = *(_OWORD *)(a3 + 40);
        v29 = *(_OWORD *)(a3 + 56);
        v30 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
        *(_OWORD *)(a2 + 72) = v30;
        *(_OWORD *)(a2 + 56) = v29;
        *(_OWORD *)(a2 + 40) = v28;
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
        v31 = *(_OWORD *)(a3 + 120);
        *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
        *(_OWORD *)(a2 + 120) = v31;
        *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
        v32 = *(_OWORD *)(a3 + 160);
        *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
        *(_OWORD *)(a2 + 160) = v32;
        *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
        v33 = *(_OWORD *)(a3 + 200);
        *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
        *(_OWORD *)(a2 + 200) = v33;
        *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
        v34 = *(_OWORD *)(a3 + 240);
        *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
        *(_OWORD *)(a2 + 240) = v34;
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_OWORD *)(a3 + 72) = v109;
        *(_OWORD *)(a3 + 88) = v113;
        *(_OWORD *)(a3 + 40) = v101;
        *(_OWORD *)(a3 + 56) = v105;
        *(_OWORD *)(a3 + 8) = v93;
        *(_OWORD *)(a3 + 24) = v97;
        *(_OWORD *)(a3 + 104) = v89;
        *(_QWORD *)(a3 + 136) = v85;
        *(_OWORD *)(a3 + 120) = v81;
        *(_OWORD *)(a3 + 144) = v77;
        *(_QWORD *)(a3 + 176) = v73;
        *(_OWORD *)(a3 + 160) = v69;
        *(_OWORD *)(a3 + 184) = v65;
        *(_QWORD *)(a3 + 216) = v61;
        *(_OWORD *)(a3 + 200) = v57;
        *(_OWORD *)(a3 + 224) = v53;
        *(_QWORD *)(a3 + 256) = v49;
        *(_OWORD *)(a3 + 240) = v45;
        result.n128_u64[0] = *(_QWORD *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          v102 = *(_OWORD *)(a1 + 40);
          v106 = *(_OWORD *)(a1 + 56);
          v110 = *(_OWORD *)(a1 + 72);
          v114 = *(_OWORD *)(a1 + 88);
          v94 = *(_OWORD *)(a1 + 8);
          v98 = *(_OWORD *)(a1 + 24);
          v90 = *(_OWORD *)(a1 + 104);
          v86 = *(_QWORD *)(a1 + 136);
          v78 = *(_OWORD *)(a1 + 144);
          v82 = *(_OWORD *)(a1 + 120);
          v74 = *(_QWORD *)(a1 + 176);
          v66 = *(_OWORD *)(a1 + 184);
          v70 = *(_OWORD *)(a1 + 160);
          v62 = *(_QWORD *)(a1 + 216);
          v54 = *(_OWORD *)(a1 + 224);
          v58 = *(_OWORD *)(a1 + 200);
          v50 = *(_QWORD *)(a1 + 256);
          v46 = *(__n128 *)(a1 + 240);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v35 = *(_OWORD *)(a2 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v35;
          v36 = *(_OWORD *)(a2 + 40);
          v37 = *(_OWORD *)(a2 + 56);
          v38 = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = v38;
          *(_OWORD *)(a1 + 56) = v37;
          *(_OWORD *)(a1 + 40) = v36;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          v39 = *(_OWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(a1 + 120) = v39;
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
          v40 = *(_OWORD *)(a2 + 160);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = v40;
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
          v41 = *(_OWORD *)(a2 + 200);
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 200) = v41;
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
          v42 = *(_OWORD *)(a2 + 240);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          *(_OWORD *)(a1 + 240) = v42;
          *(_QWORD *)a2 = result.n128_u64[0];
          *(_OWORD *)(a2 + 72) = v110;
          *(_OWORD *)(a2 + 88) = v114;
          *(_OWORD *)(a2 + 40) = v102;
          *(_OWORD *)(a2 + 56) = v106;
          *(_OWORD *)(a2 + 8) = v94;
          *(_OWORD *)(a2 + 24) = v98;
          *(_OWORD *)(a2 + 104) = v90;
          *(_QWORD *)(a2 + 136) = v86;
          *(_OWORD *)(a2 + 120) = v82;
          *(_OWORD *)(a2 + 144) = v78;
          *(_QWORD *)(a2 + 176) = v74;
          *(_OWORD *)(a2 + 160) = v70;
          *(_OWORD *)(a2 + 184) = v66;
          *(_QWORD *)(a2 + 216) = v62;
          *(_OWORD *)(a2 + 200) = v58;
          *(_OWORD *)(a2 + 224) = v54;
          result = v46;
          *(_QWORD *)(a2 + 256) = v50;
          *(__n128 *)(a2 + 240) = v46;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_208127788(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C088460[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_208127878(_OWORD *a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, double *a5, float64x2_t *a6, float64x2_t *a7, uint64_t a8, float64x2_t a9, double a10, float64x2_t a11, double a12, float64x2_t a13, double *a14)
{
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v28;
  double v35;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  double v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  unint64_t v73;
  float64x2_t v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  float64_t v85;
  float64x2_t v86;
  float64_t v87;
  unint64_t v90;
  double v91;
  unint64_t v93;
  double v94;
  float64x2_t v95;
  double v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  float64x2_t v104;
  float64x2_t v105;
  int8x16_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v113;
  float64x2_t v114;
  double v116;
  float64_t v117;
  float64_t v118;
  float64_t v121;
  float64_t v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  uint64_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64_t v140;
  double v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  double v151;
  float64x2_t v152;
  float64x2_t v153;
  int8x16_t v154;
  float64x2_t v155;
  float64x2_t v156;
  uint64_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  uint64_t v162;
  float64x2_t v163;
  uint64_t *v165;
  float64x2_t *v166;
  float64x2_t v167;
  float64x2_t v168;
  int8x16_t v169;
  uint64_t v170;
  float64_t v171;
  double v172;
  float64x2_t v175;
  double v176;
  double v177;
  float64x2_t v178;
  int64x2_t v179;
  float64_t v180;
  double v181;
  float64x2_t v182;
  float64_t v183;
  float64_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  int64x2_t v190;
  float64x2_t v192;
  float64x2_t v193;
  int64x2_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  double *v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  BOOL v213;
  _OWORD *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v227;
  float64x2_t v228;
  float64_t v229;
  float64_t v230;
  double v231;
  double v232;
  float64x2_t v233;
  _OWORD *v234;
  float64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64_t v242;
  float64x2_t v243;
  float64x2_t v244;
  uint64_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v254;
  unint64_t v255;
  double v256;
  uint64_t v257;
  float64x2_t v258;
  unint64_t v259;
  float64x2_t v260;
  float64x2_t v262;
  unint64_t v263;
  float64x2_t v264;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v269;
  float64x2_t v271;
  float64x2_t v272;
  float64_t v274;
  float64x2_t v275;
  unsigned int v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  unint64_t v287;
  float64x2_t v288;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v293;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  unint64_t v298;
  float64x2_t v299;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v311;
  float64x2_t v313;
  float64x2_t v314;
  char *v315;
  uint64_t v316;
  float64x2_t v317;
  int8x16_t v318;
  float64x2_t v319;
  double v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  int64x2_t v325;
  float64x2_t v326;
  uint64_t v327;
  int8x16_t v328;
  double v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v335;
  float64x2_t v336;
  int8x16_t v340;
  double v343;
  float64x2_t v344;
  int8x16_t v348;
  float64x2_t v349;
  double v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v361;
  float64x2_t v362;
  double v363;
  double v364;
  float64x2_t v365;
  float64x2_t *v367;
  double v370;
  double v372;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64_t v385;
  uint64_t v386;
  float64x2_t v387;
  float64x2_t v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  float64x2_t v394;
  double v395;
  float64x2_t v396;
  uint64_t v397;
  double v398;
  int8x16_t v399;
  double v400;
  uint64_t v401;
  float64x2_t v402;
  float64x2_t v403;
  int8x16_t v404;
  float64x2_t v405;
  int8x16_t v406;
  double v407;
  float64x2_t v408;
  float64x2_t v409;
  float64_t v410;
  uint64_t v411;
  double v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  double v419;
  _OWORD v420[3];
  uint64_t v421;
  uint64_t v422;
  float64x2_t v423;
  uint64_t v424;
  float64x2_t v425;
  uint64_t v426;
  float64x2_t v427;
  uint64_t v428;
  float64x2_t v429;
  float64_t v430;
  double v431;
  float64x2_t v432;
  float64_t v433;
  double v434;
  float64x2_t v435;
  float64_t v436;
  double v437;
  float64x2_t v438;
  float64_t v439;
  double v440;
  uint64_t v441;

  v441 = *MEMORY[0x24BDAC8D0];
  a9.f64[0] = a6[1].f64[0];
  v16 = *a6;
  a11.f64[0] = a7[1].f64[0];
  v17 = *a7;
  v18 = vsubq_f64(a9, a11);
  _Q17 = vsubq_f64(*a6, *a7);
  a13.f64[0] = *(float64_t *)(a8 + 16);
  v20 = *(float64x2_t *)a8;
  v21 = (int8x16_t)vsubq_f64(a9, a13);
  v22 = vsubq_f64(*a6, *(float64x2_t *)a8);
  v23 = (float64x2_t)vextq_s8((int8x16_t)v22, v21, 8uLL);
  v24.f64[0] = v18.f64[0];
  v24.f64[1] = _Q17.f64[0];
  *(_QWORD *)&v25.f64[0] = v21.i64[0];
  v25.f64[1] = v22.f64[0];
  v26 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)v18, 8uLL);
  _Q23 = vmlsq_f64(vmulq_f64(v24, v23), v26, v25);
  v28 = vmlsq_laneq_f64(vmulq_laneq_f64(v22, _Q17, 1), _Q17, v22, 1);
  _D16 = _Q23.f64[1];
  __asm { FMLA            D6, D16, V23.D[1] }
  v35 = sqrt(vmlad_n_f64(_D6, v28.f64[0], v28.f64[0]));
  if (v35 < 0.00000001)
    return 0;
  v383 = _Q23;
  v387 = v28;
  v415 = a13;
  _Q11 = *a2;
  _Q8 = *(float64x2_t *)a3;
  _Q9 = *(int8x16_t *)a4;
  _D18 = _Q11.f64[1];
  __asm { FMLA            D16, D18, V11.D[1] }
  v15.f64[0] = 1.0 / sqrt(_D16 + 1.0);
  v46 = vmulq_n_f64(*a2, v15.f64[0]);
  v47 = (float64x2_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL);
  _D23 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D16, D23, V8.D[1] }
  v50.f64[0] = 1.0 / sqrt(_D16 + 1.0);
  v51 = vmulq_n_f64(*(float64x2_t *)a3, v50.f64[0]);
  v52 = (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL);
  _D24 = _Q9.i64[1];
  __asm { FMLA            D23, D24, V9.D[1] }
  v14.f64[0] = 1.0 / sqrt(_D23 + 1.0);
  v55 = vmulq_n_f64(*a4, v14.f64[0]);
  _Q14 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL);
  v57.f64[0] = v47.f64[0];
  v57.f64[1] = v15.f64[0];
  _Q25.f64[0] = v15.f64[0];
  _Q25.f64[1] = v46.f64[0];
  v59.f64[0] = v52.f64[0];
  v59.f64[1] = v50.f64[0];
  v60.f64[0] = v50.f64[0];
  v60.f64[1] = v51.f64[0];
  _Q4 = vmlsq_f64(vmulq_f64(v57, v60), _Q25, v59);
  *(_QWORD *)&v62 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
  v63 = vmlsq_f64(vmulq_f64(v46, v52), v47, v51);
  __asm { FMLA            D25, D14, V4.D[1] }
  v64 = vmlad_n_f64(_Q25.f64[0], v14.f64[0], v63.f64[0]);
  v375 = v46;
  v376 = v15;
  v374 = v47;
  v385 = v55.f64[0];
  if (fabs(v64) < 0.00000001)
  {
    v65.f64[0] = _Q14.f64[0];
    v65.f64[1] = v14.f64[0];
    v66.f64[0] = v14.f64[0];
    v66.f64[1] = v55.f64[0];
    v67.f64[0] = v47.f64[0];
    v67.f64[1] = v15.f64[0];
    v68.f64[0] = v15.f64[0];
    v68.f64[1] = v46.f64[0];
    v69 = vsubq_f64(vmulq_f64(v67, v66), vmulq_f64(v68, v65));
    v65.f64[0] = _Q4.f64[0];
    v65.f64[1] = v62;
    v70 = vsubq_f64(vmulq_f64(v46, _Q14), vmulq_f64(v47, v55));
    v71 = vmulq_f64(v65, v65);
    v71.f64[0] = sqrt(vmulq_f64(v63, v63).f64[0] + vaddvq_f64(v71));
    v72 = vmulq_f64(v69, v69);
    v72.f64[0] = sqrt(vmulq_f64(v70, v70).f64[0] + vaddvq_f64(v72));
    if (v71.f64[0] == 0.0 && v72.f64[0] == 0.0)
      return 0;
    v403 = v70;
    v406 = (int8x16_t)v69;
    v391 = _Q14.f64[0];
    v409 = v72;
    v412 = v62;
    v73 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    v74.f64[0] = a6->f64[0];
    *(_QWORD *)&v74.f64[1] = v73;
    *(_QWORD *)&v75 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v76.f64[0] = a7->f64[0];
    v76.f64[1] = v75;
    v77 = vsubq_f64(v76, v74);
    v78 = vsubq_f64(a11, a9);
    v79 = v14.f64[0];
    v80 = vmlsq_laneq_f64(vmulq_f64(v77, (float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1)), v22, v77, 1);
    v81 = (float64x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 8uLL);
    v78.f64[1] = v77.f64[0];
    *(_QWORD *)&v25.f64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    *(_QWORD *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v82 = vmulq_f64(v81, v25);
    *(_QWORD *)&v83 = vextq_s8((int8x16_t)_Q8, (int8x16_t)_Q8, 8uLL).u64[0];
    _Q7 = vmlsq_f64(v82, v78, v23);
    v84 = (float64x2_t)vextq_s8(_Q9, _Q9, 8uLL);
    *(_QWORD *)&v85 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v86 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q17, 1);
    v87 = _Q11.f64[0] * v376.f64[0] * v51.f64[0]
        + *(double *)vextq_s8((int8x16_t)_Q11, (int8x16_t)_Q11, 8uLL).i64 * v376.f64[0] * v52.f64[0];
    _Q29 = vmulq_f64(_Q7, _Q7);
    _D31 = _Q7.f64[1];
    __asm { FMLA            D29, D31, V7.D[1] }
    _Q29.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q29.f64[0], v80.f64[0], v80.f64[0]));
    v90 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(_QWORD *)&v51.f64[0] = *(_OWORD *)&vmulq_f64(v80, _Q29);
    v91 = v79;
    _Q29 = vmulq_n_f64(_Q7, _Q29.f64[0]);
    v93 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    v94 = *(double *)_Q9.i64 * v79 * v375.f64[0] + v84.f64[0] * v79 * v374.f64[0];
    v95 = (float64x2_t)vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 8uLL);
    _Q7.f64[0] = v87 + v376.f64[0] * v50.f64[0];
    v97 = _Q8.f64[0] * v50.f64[0];
    v98 = v71;
    if (v71.f64[0] == 0.0)
    {
      v99.f64[0] = v95.f64[0];
      v99.f64[1] = v51.f64[0];
      v100.f64[0] = v51.f64[0];
      v100.f64[1] = _Q29.f64[0];
      *(_QWORD *)&v26.f64[1] = v93;
      *(_QWORD *)&v24.f64[1] = v90;
      *(_QWORD *)&v430 = *(_OWORD *)&vmlsq_f64(vmulq_f64(_Q17, v95), v86, _Q29);
      v429 = vmlsq_f64(vmulq_f64(v26, v100), v24, v99);
      v431 = 0.0;
      v101 = 1;
    }
    else
    {
      v84.f64[0] = v71.f64[0] + v71.f64[0];
      v219.f64[0] = v95.f64[0];
      v219.f64[1] = v51.f64[0];
      v220.f64[0] = v51.f64[0];
      v220.f64[1] = _Q29.f64[0];
      *(_QWORD *)&v26.f64[1] = v93;
      v221 = vmulq_f64(v26, v220);
      v91 = v79;
      *(_QWORD *)&v24.f64[1] = v90;
      v222 = vdivq_f64(vmulq_n_f64(vsubq_f64(v221, vmulq_f64(v24, v219)), _Q7.f64[0]), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v71.f64[0] + v71.f64[0]), 0));
      v223.f64[0] = a7->f64[0];
      v223.f64[1] = v75;
      v221.f64[0] = a6->f64[0];
      *(_QWORD *)&v221.f64[1] = v73;
      v224 = vdivq_f64(vmulq_f64(_Q7, vsubq_f64(vmulq_f64(_Q17, v95), vmulq_f64(v86, _Q29))), v84);
      v225 = vaddq_f64(v221, v223);
      __asm { FMOV            V30.2D, #0.5 }
      v227 = vmulq_f64(v225, _Q30);
      v228 = vmulq_f64(vaddq_f64(a9, a11), _Q30);
      v26 = vaddq_f64(v227, v222);
      *(_QWORD *)&v430 = *(_OWORD *)&vaddq_f64(v228, v224);
      v429 = v26;
      v431 = 1.0;
      *(_QWORD *)&v433 = *(_OWORD *)&vsubq_f64(v228, v224);
      v432 = vsubq_f64(v227, v222);
      v434 = 1.0;
      v101 = 2;
    }
    v229 = *(double *)&v73;
    v230 = v75;
    v231 = v83 * v50.f64[0];
    v232 = v97 * v55.f64[0];
    v233.f64[1] = v375.f64[1];
    v71.f64[0] = v94 + v91 * v376.f64[0];
    v234 = (_OWORD *)&v429.f64[4 * v101];
    v235 = v16.f64[0];
    *(_QWORD *)&v239.f64[1] = v73;
    v236.f64[0] = v20.f64[0];
    v236.f64[1] = v85;
    v237 = vsubq_f64(v236, v239);
    v238 = (float64x2_t)vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL);
    *(_QWORD *)&v239.f64[0] = *(_OWORD *)&vsubq_f64(v415, a9);
    v241 = (float64x2_t)v406;
    v240 = v409;
    v419 = v71.f64[0];
    if (v409.f64[0] == 0.0)
    {
      v242 = v85;
      v243.f64[0] = v238.f64[0];
      v243.f64[1] = v239.f64[0];
      v239.f64[1] = v237.f64[0];
      v244.f64[0] = v95.f64[0];
      v244.f64[1] = v51.f64[0];
      v51.f64[1] = _Q29.f64[0];
      *((_QWORD *)v234 + 2) = *(_OWORD *)&vmlsq_f64(vmulq_f64(v237, v95), v238, _Q29);
      *v234 = vmlsq_f64(vmulq_f64(v243, v51), v239, v244);
      *((_QWORD *)v234 + 3) = 0;
      v245 = 1;
    }
    else
    {
      v246.f64[0] = v238.f64[0];
      v246.f64[1] = v239.f64[0];
      v239.f64[1] = v237.f64[0];
      v247.f64[0] = v95.f64[0];
      v247.f64[1] = v51.f64[0];
      v51.f64[1] = _Q29.f64[0];
      _Q11.f64[0] = v409.f64[0] + v409.f64[0];
      v248 = vsubq_f64(vmulq_f64(v246, v51), vmulq_f64(v239, v247));
      v249 = vmulq_f64(v71, vsubq_f64(vmulq_f64(v237, v95), vmulq_f64(v238, _Q29)));
      v250 = vdivq_f64(vmulq_n_f64(v248, v71.f64[0]), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v409.f64[0] + v409.f64[0]), 0));
      v247.f64[0] = v20.f64[0];
      v247.f64[1] = v85;
      v251.f64[0] = v16.f64[0];
      v251.f64[1] = v229;
      v252 = vdivq_f64(v249, _Q11);
      v242 = v85;
      __asm { FMOV            V31.2D, #0.5 }
      v254 = vmulq_f64(vaddq_f64(v251, v247), _Q31);
      _Q29 = vmulq_f64(vaddq_f64(a9, v415), _Q31);
      *((_QWORD *)v234 + 2) = *(_OWORD *)&vaddq_f64(_Q29, v252);
      *v234 = vaddq_f64(v254, v250);
      *((_QWORD *)v234 + 3) = 0x3FF0000000000000;
      *((_QWORD *)v234 + 6) = *(_OWORD *)&vsubq_f64(_Q29, v252);
      v234[2] = vsubq_f64(v254, v250);
      *((_QWORD *)v234 + 7) = 0x3FF0000000000000;
      v245 = 2;
    }
    v255 = *(_QWORD *)&v412;
    v256 = v232 + v231 * v391;
    v257 = v245 + v101;
    if (v98.f64[0] == 0.0)
    {
      v255 = vextq_s8(v406, v406, 8uLL).u64[0];
      if (v431 == 0.0)
      {
        v26.f64[0] = v433;
        v258 = v432;
        v259 = vextq_s8((int8x16_t)v258, (int8x16_t)v258, 8uLL).u64[0];
        v63.f64[0] = v430;
        v260 = v429;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
      }
      else
      {
        v26.f64[0] = v430;
        v258 = v429;
        v259 = vextq_s8((int8x16_t)v258, (int8x16_t)v258, 8uLL).u64[0];
        v63.f64[0] = v433;
        v260 = v432;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
        if (v434 != 0.0)
        {
          v266.f64[0] = v429.f64[0];
          *(_QWORD *)&v266.f64[1] = v259;
          v260.f64[1] = _D8;
          v260 = vsubq_f64(v260, v266);
          *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
          v63 = vsubq_f64(v63, v26);
        }
      }
      *(_QWORD *)&v258.f64[1] = v259;
      v267.f64[0] = v16.f64[0];
      v267.f64[1] = v229;
      _Q21 = vsubq_f64(v267, v258);
      v269 = vsubq_f64(a9, v26);
      v260.f64[1] = _D8;
      _Q30 = vmulq_f64(_Q21, v260);
      __asm { FMLA            D30, D8, V21.D[1] }
      _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v63.f64[0], v269.f64[0])
                  / (vmulq_f64(v260, v260).f64[0] + _D8 * _D8 + v63.f64[0] * v63.f64[0]);
      v271 = vmlaq_f64(vnegq_f64(v269), v63, _Q30);
      v272 = vmlaq_n_f64(vnegq_f64(_Q21), v260, _Q30.f64[0]);
      v423 = vaddq_f64(v267, vaddq_f64(v272, v272));
      v424 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v271, v271));
      if (v431 == 0.0)
      {
        _Q29.f64[0] = v436;
        _Q31 = v435;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v430;
        v275 = v429;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        v277 = 1;
      }
      else
      {
        _Q29.f64[0] = v430;
        _Q31 = v429;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v436;
        v275 = v435;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        if (v437 != 0.0)
        {
          v301.f64[0] = v429.f64[0];
          v301.f64[1] = v274;
          v275.f64[1] = _D10;
          v275 = vsubq_f64(v275, v301);
          *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
          _Q30 = vsubq_f64(_Q30, _Q29);
        }
        v277 = 1;
      }
    }
    else
    {
      if (v431 == 0.0)
      {
        v26.f64[0] = v436;
        v262 = v435;
        v263 = vextq_s8((int8x16_t)v262, (int8x16_t)v262, 8uLL).u64[0];
        v241.f64[0] = v430;
        v264 = v429;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
      }
      else
      {
        v26.f64[0] = v430;
        v262 = v429;
        v263 = vextq_s8((int8x16_t)v262, (int8x16_t)v262, 8uLL).u64[0];
        v241.f64[0] = v436;
        v264 = v435;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
        if (v437 != 0.0)
        {
          v278.f64[0] = v429.f64[0];
          *(_QWORD *)&v278.f64[1] = v263;
          v264.f64[1] = _D8;
          v264 = vsubq_f64(v264, v278);
          *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
          v241 = vsubq_f64(v241, v26);
        }
      }
      *(_QWORD *)&v262.f64[1] = v263;
      v279.f64[0] = v16.f64[0];
      v279.f64[1] = v229;
      _Q21 = vsubq_f64(v279, v262);
      v281 = vsubq_f64(a9, v26);
      v264.f64[1] = _D8;
      _Q30 = vmulq_f64(_Q21, v264);
      __asm { FMLA            D30, D8, V21.D[1] }
      v283 = vmulq_f64(v264, v264);
      _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v241.f64[0], v281.f64[0])
                  / (v283.f64[0] + _D8 * _D8 + v241.f64[0] * v241.f64[0]);
      v284 = vmlaq_f64(vnegq_f64(v281), v241, _Q30);
      v285 = vmlaq_n_f64(vnegq_f64(_Q21), v264, _Q30.f64[0]);
      v423 = vaddq_f64(v279, vaddq_f64(v285, v285));
      v424 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v284, v284));
      if (v434 == 0.0)
      {
        v283.f64[0] = v436;
        v286 = v435;
        v287 = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u64[0];
        v264.f64[0] = v433;
        v288 = v432;
        *(_QWORD *)&_D9 = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
      }
      else
      {
        v283.f64[0] = v433;
        v286 = v432;
        v287 = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u64[0];
        v264.f64[0] = v436;
        v288 = v435;
        *(_QWORD *)&_D9 = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
        if (v437 != 0.0)
        {
          v290.f64[0] = v432.f64[0];
          *(_QWORD *)&v290.f64[1] = v287;
          v288.f64[1] = _D9;
          v288 = vsubq_f64(v288, v290);
          *(_QWORD *)&_D9 = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
          v264 = vsubq_f64(v264, v283);
        }
      }
      *(_QWORD *)&v286.f64[1] = v287;
      v291.f64[0] = v16.f64[0];
      v291.f64[1] = v229;
      _Q21 = vsubq_f64(v291, v286);
      v293 = vsubq_f64(a9, v283);
      v288.f64[1] = _D9;
      _Q31 = vmulq_f64(_Q21, v288);
      __asm { FMLA            D31, D9, V21.D[1] }
      _Q31.f64[0] = vmlad_n_f64(_Q31.f64[0], v264.f64[0], v293.f64[0])
                  / (vmulq_f64(v288, v288).f64[0] + _D9 * _D9 + v264.f64[0] * v264.f64[0]);
      v295 = vmlaq_f64(vnegq_f64(v293), v264, _Q31);
      v296 = vmlaq_n_f64(vnegq_f64(_Q21), v288, _Q31.f64[0]);
      v425 = vaddq_f64(v291, vaddq_f64(v296, v296));
      v426 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v295, v295));
      if (v409.f64[0] == 0.0)
      {
        v240.f64[0] = v98.f64[0];
        goto LABEL_69;
      }
      if (v431 == 0.0)
      {
        _Q29.f64[0] = v439;
        v297 = v438;
        v298 = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
        v240.f64[0] = v430;
        v299 = v429;
        *(_QWORD *)&_D31 = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u64[0];
      }
      else
      {
        _Q29.f64[0] = v430;
        v297 = v429;
        v298 = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
        v240.f64[0] = v439;
        v299 = v438;
        *(_QWORD *)&_D31 = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u64[0];
        if (v440 != 0.0)
        {
          v302.f64[0] = v429.f64[0];
          *(_QWORD *)&v302.f64[1] = v298;
          v299.f64[1] = _D31;
          v299 = vsubq_f64(v299, v302);
          *(_QWORD *)&_D31 = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u64[0];
          v240 = vsubq_f64(v240, _Q29);
        }
      }
      *(_QWORD *)&v297.f64[1] = v298;
      v303.f64[0] = v16.f64[0];
      v303.f64[1] = v229;
      _Q21 = vsubq_f64(v303, v297);
      v305 = vsubq_f64(a9, _Q29);
      v299.f64[1] = _D31;
      _Q29 = vmulq_f64(_Q21, v299);
      __asm { FMLA            D29, D31, V21.D[1] }
      _Q30 = vmulq_f64(v299, v299);
      _Q29.f64[0] = vmlad_n_f64(_Q29.f64[0], v240.f64[0], v305.f64[0])
                  / (_Q30.f64[0] + _D31 * _D31 + v240.f64[0] * v240.f64[0]);
      v306 = vmlaq_f64(vnegq_f64(v305), v240, _Q29);
      v307 = vmlaq_n_f64(vnegq_f64(_Q21), v299, _Q29.f64[0]);
      v427 = vaddq_f64(v303, vaddq_f64(v307, v307));
      v428 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v306, v306));
      if (v434 == 0.0)
      {
        _Q29.f64[0] = v439;
        _Q31 = v438;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v433;
        v275 = v432;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
      }
      else
      {
        _Q29.f64[0] = v433;
        _Q31 = v432;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v439;
        v275 = v438;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        if (v440 != 0.0)
        {
          v308.f64[0] = v432.f64[0];
          v308.f64[1] = v274;
          v275.f64[1] = _D10;
          v275 = vsubq_f64(v275, v308);
          *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
          _Q30 = vsubq_f64(_Q30, _Q29);
        }
      }
      v277 = 3;
      v240.f64[0] = v98.f64[0];
      v241.f64[0] = _Q4.f64[0];
      v403 = v63;
    }
    _Q31.f64[1] = v274;
    v309.f64[0] = v16.f64[0];
    v309.f64[1] = v229;
    _Q21 = vsubq_f64(v309, _Q31);
    v311 = vsubq_f64(a9, _Q29);
    v275.f64[1] = _D10;
    _Q23 = vmulq_f64(_Q21, v275);
    __asm { FMLA            D23, D10, V21.D[1] }
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], _Q30.f64[0], v311.f64[0])
                / (vmulq_f64(v275, v275).f64[0] + _D10 * _D10 + _Q30.f64[0] * _Q30.f64[0]);
    v313 = vmlaq_f64(vnegq_f64(v311), _Q30, _Q23);
    v314 = vmlaq_n_f64(vnegq_f64(_Q21), v275, _Q23.f64[0]);
    v315 = (char *)&v423 + 24 * v277;
    *(float64x2_t *)v315 = vaddq_f64(v309, vaddq_f64(v314, v314));
    *((_QWORD *)v315 + 2) = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v313, v313));
    _Q4.f64[0] = v241.f64[0];
    v63 = v403;
LABEL_69:
    v316 = 0;
    v132 = 0;
    *(_QWORD *)&_Q4.f64[1] = v255;
    v317 = vdivq_f64(_Q4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v240.f64[0], 0));
    v318 = (int8x16_t)vdivq_f64(v63, v240);
    *(_QWORD *)&v319.f64[0] = v318.i64[0];
    v319.f64[1] = v317.f64[0];
    v320 = v256 + v50.f64[0] * v91;
    v414 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v317, 1);
    v321.f64[0] = v374.f64[0];
    v321.f64[1] = v376.f64[0];
    v322 = vmulq_f64(v321, v319);
    v323 = vmulq_laneq_f64(v375, v317, 1);
    v324.f64[0] = v376.f64[0];
    v324.f64[1] = v375.f64[0];
    v325 = (int64x2_t)vsubq_f64(v322, vmulq_f64(v324, (float64x2_t)vextq_s8((int8x16_t)v317, v318, 8uLL)));
    v405 = (float64x2_t)vdupq_lane_s64(v325.i64[0], 0);
    v408 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v317.f64[0], 0);
    *(_QWORD *)&v400 = vextq_s8((int8x16_t)v317, (int8x16_t)v317, 8uLL).u64[0];
    v402 = (float64x2_t)vdupq_laneq_s64(v325, 1);
    v326 = (float64x2_t)vdupq_lane_s64(v318.i64[0], 0);
    v396 = v326;
    *(_QWORD *)&v398 = vextq_s8((int8x16_t)v325, (int8x16_t)v325, 8uLL).u64[0];
    v411 = *(_OWORD *)&vsubq_f64(v323, vmulq_f64(v374, v317));
    v394 = (float64x2_t)vdupq_lane_s64(v411, 0);
    v327 = 24 * v257;
    v16.f64[1] = v229;
    v17.f64[1] = v230;
    v20.f64[1] = v242;
    v326.f64[0] = 0.0;
    v328 = (int8x16_t)vceqq_f64(v98, v326);
    v329 = v419;
    do
    {
      v330 = *(float64x2_t *)((char *)&v423 + v316);
      v323.f64[0] = *(float64_t *)((char *)&v423 + v316 + 16);
      v331 = vsubq_f64(a9, v323);
      _Q27 = vsubq_f64(v16, v330);
      _D24 = _Q27.f64[1];
      __asm { FMLA            D17, D24, V27.D[1] }
      v233.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D17, v331.f64[0], v331.f64[0]));
      v335 = vmulq_n_f64(_Q27, v233.f64[0]);
      v336 = vsubq_f64(a11, v323);
      _Q24 = vsubq_f64(v17, v330);
      _Q28 = vmulq_f64(_Q24, _Q24);
      _D29 = _Q24.f64[1];
      __asm { FMLA            D28, D29, V24.D[1] }
      _Q28.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q28.f64[0], v336.f64[0], v336.f64[0]));
      v340 = (int8x16_t)vmulq_f64(v336, _Q28);
      _Q14 = vmulq_n_f64(_Q24, _Q28.f64[0]);
      _Q27.f64[0] = vmuld_lane_f64(v233.f64[0], _Q27, 1);
      __asm { FMLA            D30, D27, V14.D[1] }
      if (vabdd_f64(vmlad_n_f64(_D30, v233.f64[0] * v331.f64[0], *(double *)v340.i64), _Q7.f64[0]) < 0.00000001)
      {
        v343 = *(double *)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL).i64;
        v344 = vsubq_f64(v415, v323);
        _Q30 = vsubq_f64(v20, v330);
        _D27 = _Q30.f64[1];
        __asm { FMLA            D24, D27, V30.D[1] }
        _Q31.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D24, v344.f64[0], v344.f64[0]));
        v348 = (int8x16_t)vmulq_f64(v344, _Q31);
        v349 = vmulq_n_f64(_Q30, _Q31.f64[0]);
        v350 = *(double *)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).i64;
        if (vabdd_f64(vmulq_f64(_Q14, v349).f64[0]+ v343 * _Q28.f64[0] * v350+ v336.f64[0] * _Q28.f64[0] * *(double *)v348.i64, v320) < 0.00000001)
        {
          v233 = vmulq_f64(v331, v233);
          v351 = (float64x2_t)vextq_s8((int8x16_t)v335, (int8x16_t)v335, 8uLL);
          if (vabdd_f64(vmulq_f64(v349, v335).f64[0]+ *(double *)vextq_s8((int8x16_t)_Q30, (int8x16_t)_Q30, 8uLL).i64 * _Q31.f64[0] * v351.f64[0]+ v344.f64[0] * _Q31.f64[0] * v233.f64[0], v329) < 0.00000001)
          {
            *(_QWORD *)&_Q14.f64[1] = vextq_s8((int8x16_t)_Q14, (int8x16_t)_Q14, 8uLL).u64[0];
            v349.f64[1] = v350;
            v352 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(v328.i64[0], 0), (int8x16_t)v349, (int8x16_t)_Q14);
            v353 = (float64x2_t)vbslq_s8(v328, v348, v340);
            v354.f64[0] = v351.f64[0];
            v354.f64[1] = v233.f64[0];
            v355.f64[0] = v233.f64[0];
            v355.f64[1] = v335.f64[0];
            _Q27 = (float64x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v353, 8uLL);
            v353.f64[1] = v352.f64[0];
            v357 = vmlsq_f64(vmulq_laneq_f64(v335, v352, 1), v351, v352);
            _Q24 = vmlsq_f64(vmulq_f64(v354, v353), v355, _Q27);
            _Q17 = vmulq_f64(_Q24, _Q24);
            _Q27.f64[0] = _Q24.f64[1];
            __asm { FMLA            D17, D27, V24.D[1] }
            _Q17.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q17.f64[0], v357.f64[0], v357.f64[0]));
            _Q24 = vmulq_n_f64(_Q24, _Q17.f64[0]);
            v361 = vmulq_f64(v357, _Q17);
            v362 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)v361, 8uLL);
            v357.f64[0] = vmlad_n_f64(v233.f64[0] * v375.f64[0], v317.f64[0], v361.f64[0]);
            v363 = vmlad_n_f64(v233.f64[0] * v374.f64[0], v400, v361.f64[0]);
            v364 = vmlad_n_f64(vmulq_f64(v233, v376).f64[0], *(double *)v318.i64, v361.f64[0]);
            v361.f64[1] = _Q24.f64[0];
            _Q31 = (float64x2_t)vextq_s8((int8x16_t)v330, (int8x16_t)v330, 8uLL);
            v365.f64[0] = v335.f64[0];
            v365.f64[1] = v351.f64[0];
            _Q17 = vsubq_f64(vmulq_f64(v354, v361), vmulq_f64(v355, v362));
            *(_QWORD *)&v362.f64[0] = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v335, _Q24, 1), vmulq_f64(v351, _Q24));
            v367 = (float64x2_t *)&v420[6 * v132];
            _Q10 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v365, v375.f64[0]), v408, _Q24), v405, _Q17);
            v357.f64[0] = vmlad_n_f64(v357.f64[0], *(double *)v325.i64, v362.f64[0]);
            v329 = v419;
            _Q11 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v365, v374.f64[0]), v414, _Q24), v402, _Q17);
            v370 = vmlad_n_f64(v363, v398, v362.f64[0]);
            _Q8 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v365, v376.f64[0]), v396, _Q24), v394, _Q17);
            v372 = vmlad_n_f64(v364, *(double *)&v411, v362.f64[0]);
            *v367 = _Q10;
            v367[2] = _Q11;
            v367[4] = _Q8;
            __asm
            {
              FMLA            D17, D31, V10.D[1]
              FMLA            D24, D31, V11.D[1]
              FMLA            D22, D31, V8.D[1]
            }
            v367[1].f64[0] = v357.f64[0];
            v367[1].f64[1] = -(_Q17.f64[0] + v323.f64[0] * v357.f64[0]);
            v367[3].f64[0] = v370;
            v367[3].f64[1] = -(_Q24.f64[0] + v323.f64[0] * v370);
            v367[5].f64[0] = v372;
            v367[5].f64[1] = -(_D22 + v323.f64[0] * v372);
            ++v132;
          }
        }
      }
      v316 += 24;
    }
    while (v327 != v316);
    goto LABEL_19;
  }
  _D2 = _Q17.f64[1];
  __asm { FMLA            D1, D2, V17.D[1] }
  _Q8.f64[0] = sqrt(vmlad_n_f64(_D1, v18.f64[0], v18.f64[0]));
  v59.f64[0] = v35 / _Q8.f64[0];
  *(_QWORD *)&_Q17.f64[1] = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
  v104 = vdivq_f64(_Q17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q8.f64[0], 0));
  _Q4.f64[1] = v62;
  v105 = vmulq_f64(_Q4, _Q4);
  v105.f64[0] = sqrt(v105.f64[0] + v62 * v62 + v63.f64[0] * v63.f64[0]);
  _Q18 = vdivq_f64(_Q4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v105.f64[0], 0));
  v107 = (int8x16_t)vdivq_f64(v63, v105);
  *(_QWORD *)&v108.f64[0] = v107.i64[0];
  v108.f64[1] = _Q18.f64[0];
  v63.f64[0] = v64 / v105.f64[0];
  v109.f64[0] = v47.f64[0];
  v109.f64[1] = v15.f64[0];
  v110 = vmulq_f64(v109, v108);
  v108.f64[0] = v15.f64[0];
  v108.f64[1] = v46.f64[0];
  _Q25 = vmlsq_f64(v110, v108, (float64x2_t)vextq_s8((int8x16_t)_Q18, v107, 8uLL));
  _Q3.f64[0] = _Q14.f64[0];
  _Q3.f64[1] = v14.f64[0];
  v113.f64[0] = v14.f64[0];
  v113.f64[1] = v55.f64[0];
  v114.f64[0] = v52.f64[0];
  v114.f64[1] = v50.f64[0];
  v50.f64[1] = v51.f64[0];
  _Q6 = vmlsq_f64(vmulq_f64(v114, v113), v50, _Q3);
  *(_QWORD *)&v116 = *(_OWORD *)&vmlsq_f64(vmulq_f64(v51, _Q14), v52, v55);
  v416 = v104;
  v418 = vdivq_f64(v18, _Q8);
  v378 = _Q8;
  v380 = (float64x2_t)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL);
  v117 = vmulq_f64(v22, v104).f64[0]
       + *(double *)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).i64 * v380.f64[0]
       + *(double *)v21.i64 * v418.f64[0];
  v118 = -(v117 * v63.f64[0]);
  _Q4 = vmlsq_f64(vmulq_f64(v109, v113), v108, _Q3);
  _Q2 = (int8x16_t)vmulq_f64(_Q18, _Q4);
  _Q3.f64[0] = _Q4.f64[1];
  __asm { FMLA            D2, D3, V18.D[1] }
  *(double *)_Q2.i64 = v59.f64[0]
                     * vmlad_n_f64(*(double *)_Q2.i64, vmlsq_f64(vmulq_f64(v46, _Q14), v47, v55).f64[0], *(double *)v107.i64);
  v121 = v117 - _Q8.f64[0];
  _Q4.f64[0] = _Q6.f64[1];
  v397 = *(_OWORD *)&vmlsq_f64(vmulq_laneq_f64(v46, _Q18, 1), v47, _Q18);
  v399 = (int8x16_t)_Q25;
  __asm { FMLA            D3, D4, V25.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v116, *(double *)&v397);
  v413 = v63;
  v105.f64[0] = v105.f64[0] * v63.f64[0];
  v113.f64[0] = v121 * v105.f64[0];
  v122 = -(v121 * _Q3.f64[0]);
  _Q3.f64[0] = v59.f64[0] * _Q3.f64[0];
  v105.f64[0] = v59.f64[0] * v105.f64[0];
  v401 = v107.i64[0];
  v404 = (int8x16_t)_Q18;
  __asm { FMLA            D6, D4, V18.D[1] }
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v116, *(double *)v107.i64);
  v382 = v59;
  _Q18.f64[0] = v105.f64[0] * *(double *)_Q2.i64;
  v123 = *(double *)_Q2.i64 * v122 - v118 * (v59.f64[0] * _Q6.f64[0]);
  _Q6.f64[0] = v59.f64[0] * v63.f64[0] * (v59.f64[0] * _Q6.f64[0]) - *(double *)_Q2.i64 * _Q3.f64[0];
  v124 = v59.f64[0] * v63.f64[0] * v105.f64[0];
  v125 = v59.f64[0] * v63.f64[0] * v122 - v118 * _Q3.f64[0];
  v126 = -(v118 * v113.f64[0]);
  v105.f64[0] = v124 * v124 + _Q18.f64[0] * _Q18.f64[0] + _Q6.f64[0] * _Q6.f64[0];
  v407 = v123;
  v410 = _Q18.f64[0];
  v393 = -(*(double *)_Q2.i64 * v113.f64[0]);
  v395 = _Q6.f64[0];
  v127 = v393 * _Q6.f64[0] + v124 * v125 + _Q18.f64[0] * v123;
  *(double *)_Q2.i64 = v393 * v393
                     + v123 * v123
                     + v126 * (v124 + v124)
                     + v125 * v125
                     - _Q18.f64[0] * _Q18.f64[0]
                     - _Q6.f64[0] * _Q6.f64[0];
  _Q3.f64[0] = v126 * v125
             - _Q18.f64[0] * v123
             - v393 * _Q6.f64[0]
             + v126 * v125
             - _Q18.f64[0] * v123
             - v393 * _Q6.f64[0];
  v128 = sub_208113018((double *)v420, (int8x16_t)v105, v127 + v127, _Q2, (int8x16_t)_Q3, v126 * v126 - v123 * v123 - v393 * v393);
  v129 = v126;
  v130 = v125;
  v131 = v124;
  v132 = 0;
  if (v128)
  {
    v133 = (double *)v420;
    v134 = v14;
    v135 = _Q14.f64[0];
    v136.f64[0] = v385;
    v138 = v416;
    v137.f64[0] = v418.f64[0];
    v140 = v410;
    _Q8 = (int8x16_t)v413;
    v141 = v407;
    do
    {
      if (fabs(*v133) < 1.0)
        v429.f64[v132++] = *v133;
      ++v133;
      --v128;
    }
    while (v128);
  }
  else
  {
    v134 = v14;
    v135 = _Q14.f64[0];
    v136.f64[0] = v385;
    v138 = v416;
    v137.f64[0] = v418.f64[0];
    v140 = v410;
    _Q8 = (int8x16_t)v413;
    v141 = v407;
  }
  v392 = v131;
  v389 = v129;
  v390 = v130;
  if (v132)
  {
    v142 = v383;
    v143.f64[0] = v378.f64[0];
    v143.f64[1] = v378.f64[0];
    *(_QWORD *)&v142.f64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
    v150 = vdivq_f64(vdivq_f64(v142, v143), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v382.f64[0], 0));
    v144 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL);
    *(_QWORD *)&v145 = *(_OWORD *)&vdivq_f64(vdivq_f64(v387, v378), v382);
    v146.f64[0] = v380.f64[0];
    v146.f64[1] = v137.f64[0];
    v137.f64[1] = v138.f64[0];
    v147.f64[0] = v145;
    v147.f64[1] = v150.f64[0];
    v148 = vmulq_f64(v138, v144);
    v149 = vmulq_f64(v380, v150);
    v150.f64[1] = v144.f64[0];
    v144.f64[1] = v145;
    v155 = vsubq_f64(vmulq_f64(v146, v147), vmulq_f64(v137, v144));
    *(_QWORD *)&v151 = *(_OWORD *)&vsubq_f64(v148, v149);
    v148.f64[0] = v382.f64[0] / *(double *)_Q8.i64;
    v388 = vmulq_f64(v134, v148);
    v136.f64[1] = v135;
    v167 = vmulq_n_f64(v136, v382.f64[0] / *(double *)_Q8.i64);
    v152.f64[0] = v140;
    v152.f64[1] = v395;
    v153.f64[0] = v141;
    v153.f64[1] = v393;
    v154 = *(int8x16_t *)a8;
    v142.f64[0] = v416.f64[0];
    v142.f64[1] = v380.f64[0];
    v417 = v142;
    *(_QWORD *)&v155.f64[1] = vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
    v384 = vmulq_f64(v142, (float64x2_t)0);
    v386 = vextq_s8(v404, v404, 8uLL).u64[0];
    v156 = v142;
    v381 = (float64x2_t)vdupq_lane_s64(v404.i64[0], 0);
    v379 = (float64x2_t)vdupq_lane_s64(v399.i64[0], 0);
    v377 = (float64x2_t)vdupq_lane_s64(v386, 0);
    v157 = vextq_s8(v399, v399, 8uLL).u64[0];
    v158 = (float64x2_t)vdupq_lane_s64(v157, 0);
    v159 = (float64x2_t)vdupq_lane_s64(v401, 0);
    v160 = (float64x2_t)vdupq_lane_s64(v397, 0);
    v161 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)a8, 1);
    v162 = *(uint64_t *)(a8 + 16);
    v163 = (float64x2_t)vdupq_lane_s64(v162, 0);
    _D31 = vextq_s8(v154, v154, 8uLL).u64[0];
    v165 = &v422;
    v166 = &v429;
    *(_QWORD *)&v167.f64[1] = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
    v168.f64[0] = NAN;
    v168.f64[1] = NAN;
    v169 = (int8x16_t)vnegq_f64(v168);
    v170 = v132;
    do
    {
      v171 = v166->f64[0];
      v166 = (float64x2_t *)((char *)v166 + 8);
      v172 = v171;
      if (v172 * v172 >= 1.0)
        v47.f64[0] = 0.0;
      else
        v47.f64[0] = 1.0 - v172 * v172;
      v47.f64[0] = sqrt(v47.f64[0]);
      v47 = (float64x2_t)vbslq_s8(v169, (int8x16_t)v47, _Q8);
      _Q17 = vmlaq_n_f64(v153, v152, v172);
      v14.f64[0] = (v389 + v172 * (v390 + v392 * v172)) * v47.f64[0];
      _D9 = v393 + v395 * v172;
      __asm { FMLA            D8, D9, V17.D[1] }
      *(double *)_Q8.i64 = sqrt(*(double *)_Q8.i64);
      v175 = vdivq_f64(_Q17, (float64x2_t)vdupq_lane_s64(vbslq_s8(v169, _Q8, (int8x16_t)v14).i64[0], 0));
      v176 = vmuld_lane_f64(v47.f64[0], v175, 1);
      v177 = vmuld_lane_f64(v172, v175, 1);
      v178 = vmlaq_n_f64(vmulq_n_f64(v156, v175.f64[0]), v150, v176);
      v179.i64[1] = *(_QWORD *)&v418.f64[1];
      v180 = v418.f64[0] * v175.f64[0] + v145 * v176;
      v181 = v47.f64[0] * v175.f64[0];
      v182 = vmlaq_n_f64(v178, v155, v177);
      v183 = v180 + v151 * v177;
      v14 = vmlsq_lane_f64(vmlaq_n_f64(v384, v150, v172), v155, v47.f64[0], 0);
      v175.f64[0] = v172 * v175.f64[0];
      v184 = v418.f64[0] * 0.0 + v145 * v172 - v151 * v47.f64[0];
      v185 = vmlaq_n_f64(vmulq_n_f64(v156, -v175.f64[1]), v150, v181);
      v156 = v417;
      v186 = vmlaq_n_f64(v185, v155, v175.f64[0]);
      v175.f64[0] = v145 * v181 - v175.f64[1] * v418.f64[0] + v151 * v175.f64[0];
      v187 = (int64x2_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v182, v375.f64[0]), v381, v14), v379, v186);
      v188 = vmlaq_f64(vmulq_n_f64(v182, v374.f64[0]), v377, v14);
      v189 = vmlaq_f64(vmulq_n_f64(v182, v376.f64[0]), v159, v14);
      v14.f64[0] = v183 * v375.f64[0] + v184 * *(double *)v404.i64 + v175.f64[0] * *(double *)v399.i64;
      v190 = (int64x2_t)vmlaq_f64(v188, v158, v186);
      _Q2 = vmlaq_f64(v189, v160, v186);
      v186.f64[0] = v183 * v374.f64[0] + v184 * *(double *)&v386 + v175.f64[0] * *(double *)&v157;
      *(double *)v179.i64 = v183 * v376.f64[0] + v184 * *(double *)&v401 + v175.f64[0] * *(double *)&v397;
      v192.f64[0] = v14.f64[0];
      v192.f64[1] = v186.f64[0];
      v193 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v187, v190), *(double *)v154.i64), v161, (float64x2_t)vzip2q_s64(v187, v190)), v163, v192);
      _Q14 = vmulq_n_f64(v167, v47.f64[0]);
      v195 = (int64x2_t)vsubq_f64(_Q14, v193);
      __asm { FMLA            D14, D31, V2.D[1] }
      _Q14.f64[0] = _Q14.f64[0] + *(double *)v179.i64 * *(double *)&v162;
      *(int64x2_t *)(v165 - 7) = v187;
      *(int64x2_t *)(v165 - 3) = v190;
      *(_QWORD *)&v186.f64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u64[0];
      *(int64x2_t *)(v165 - 5) = vzip1q_s64((int64x2_t)v14, v195);
      _Q8 = (int8x16_t)v413;
      *(float64x2_t *)(v165 - 1) = v186;
      *(float64x2_t *)(v165 + 1) = _Q2;
      *(int64x2_t *)(v165 + 3) = vzip1q_s64(v179, (int64x2_t)vmlaq_f64(vnegq_f64(_Q14), v388, v47));
      v165 += 12;
      --v170;
    }
    while (v170);
  }
LABEL_19:
  if (v132)
  {
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = (double *)&v421;
    v200 = 1.79769313e308;
    do
    {
      v201 = v199[2];
      v202 = v199[3];
      v203 = v199[4];
      v204 = v199[5];
      if (v204 + a6->f64[0] * v201 + a6->f64[1] * v202 + a6[1].f64[0] * v203 > 0.0
        && v204 + v201 * a7->f64[0] + v202 * a7->f64[1] + v203 * a7[1].f64[0] > 0.0
        && v204 + v201 * *(double *)a8 + v202 * *(double *)(a8 + 8) + v203 * *(double *)(a8 + 16) > 0.0)
      {
        v205 = *a14;
        v206 = a14[1];
        v207 = a14[2];
        v208 = v204 + v201 * *a14 + v202 * v206 + v203 * v207;
        if (v208 > 0.0)
        {
          if (v208 == 0.0)
            v209 = 1.0;
          else
            v209 = 1.0 / v208;
          v210 = v209 * (*(v199 - 3) + v205 * *(v199 - 6) + v206 * *(v199 - 5) + v207 * *(v199 - 4));
          v211 = v209 * (v199[1] + v205 * *(v199 - 2) + v206 * *(v199 - 1) + v207 * *v199);
          v212 = (v210 - *a5) * (v210 - *a5) + (v211 - a5[1]) * (v211 - a5[1]);
          v213 = v212 < v200;
          if (v212 < v200)
          {
            v200 = v212;
            v198 = v196;
          }
          v197 |= v213;
        }
      }
      ++v196;
      v199 += 12;
    }
    while (v132 != v196);
    if ((v197 & 1) != 0)
    {
      v214 = &v420[6 * v198];
      v215 = v214[1];
      *a1 = *v214;
      a1[1] = v215;
      v216 = v214[3];
      a1[2] = v214[2];
      a1[3] = v216;
      v217 = v214[5];
      a1[4] = v214[4];
      a1[5] = v217;
      return 1;
    }
  }
  return 0;
}

BOOL sub_208128C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t a5, float64x2_t a6)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v11;
  double v12;
  double v13;
  unint64_t v15;
  float64x2_t v16;
  double v24;
  int64x2_t v25;
  double v30;
  float64x2_t v33;
  float64x2_t v35;
  double v36;
  double v39;
  float64x2_t v41;
  int64x2_t v44;
  float64x2_t v45;
  unint64_t v46;
  float64x2_t v48;
  int64x2_t v51;
  float64x2_t v52;
  unint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v59;
  float64x2_t v60;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  float64_t v72;
  double v73;
  double v74;
  float64_t v75;
  double v76;
  double v77;
  float64x2_t v78;
  int8x16_t v79;

  _D7 = *(_QWORD *)(a4 + 72);
  v11.f64[0] = *(float64_t *)(a4 + 24);
  v12 = *(double *)(a4 + 56);
  v6.f64[0] = *(float64_t *)(a4 + 88);
  *(double *)a5.i64 = sqrt(v11.f64[0] * v11.f64[0] + v12 * v12 + v6.f64[0] * v6.f64[0]);
  v13 = 1.0;
  if (*(double *)a5.i64 == 0.0)
    v7.f64[0] = 1.0;
  else
    v7.f64[0] = 1.0 / *(double *)a5.i64;
  v11.f64[1] = *(float64_t *)(a4 + 56);
  _Q3 = vmulq_n_f64(v11, v7.f64[0]);
  v15 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
  v16 = vmulq_f64(v6, v7);
  v8.f64[0] = *(float64_t *)(a2 + 16);
  _Q24 = *(float64x2_t *)a2;
  _D26 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D23, D26, V24.D[1] }
  v24 = sqrt(_D23 + v8.f64[0] * v8.f64[0]);
  v9.f64[0] = 1.0 / v24;
  if (v24 == 0.0)
    v9.f64[0] = 1.0;
  v25 = (int64x2_t)vmulq_f64(v8, v9);
  _Q24 = vmulq_n_f64(_Q24, v9.f64[0]);
  v8.f64[0] = *(float64_t *)(a3 + 16);
  _Q26 = *(float64x2_t *)a3;
  _Q27 = vmulq_f64(_Q26, _Q26);
  _D28 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D27, D28, V26.D[1] }
  _Q27.f64[0] = sqrt(_Q27.f64[0] + v8.f64[0] * v8.f64[0]);
  if (_Q27.f64[0] == 0.0)
    _Q27.f64[0] = 1.0;
  else
    _Q27.f64[0] = 1.0 / _Q27.f64[0];
  *(_QWORD *)&v30 = *(_OWORD *)&vmulq_f64(v8, _Q27);
  _Q5.f64[1] = *(float64_t *)(a4 + 32);
  _Q26 = vmulq_n_f64(_Q26, _Q27.f64[0]);
  v33.f64[1] = *(float64_t *)(a4 + 40);
  _Q19.f64[1] = *(float64_t *)(a4 + 48);
  _Q5.f64[0] = *(float64_t *)a4;
  v33.f64[0] = *(float64_t *)(a4 + 8);
  _Q19.f64[0] = *(float64_t *)(a4 + 16);
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q26.f64[0]), v33, _Q26, 1), _Q19, v30);
  __asm { FMLA            D19, D7, V26.D[1] }
  v36 = vmlad_n_f64(_Q19.f64[0], *(double *)(a4 + 80), v30);
  _D26 = _Q24.f64[1];
  _Q5.f64[0] = v12 * v7.f64[0];
  __asm { FMLA            D7, D5, V24.D[1] }
  v39 = vmlad_n_f64(_D7, v6.f64[0] * v7.f64[0], *(double *)v25.i64);
  v41 = vmulq_n_f64(_Q3, v39);
  _Q6 = vsubq_f64(_Q24, v41);
  v41.f64[0] = *(double *)v25.i64 - v39 * v16.f64[0];
  _Q7 = vmulq_f64(_Q6, _Q6);
  _D16 = _Q6.f64[1];
  __asm { FMLA            D7, D16, V6.D[1] }
  _Q7.f64[0] = sqrt(_Q7.f64[0] + v41.f64[0] * v41.f64[0]);
  if (_Q7.f64[0] == 0.0)
    _Q7.f64[0] = 1.0;
  else
    _Q7.f64[0] = 1.0 / _Q7.f64[0];
  v44 = (int64x2_t)vmulq_f64(v41, _Q7);
  v45 = vmulq_n_f64(_Q6, _Q7.f64[0]);
  v46 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
  v48 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)v16, 8uLL), (float64x2_t)vzip1q_s64(v25, (int64x2_t)_Q24));
  _Q17 = vsubq_f64(v48, vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v16, (int64x2_t)_Q3), (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)v25, 8uLL)));
  v48.f64[0] = vmuld_lane_f64(_Q3.f64[0], _Q24, 1) - vmuld_lane_f64(_Q24.f64[0], _Q3, 1);
  _Q18 = vmulq_f64(_Q17, _Q17);
  _D20 = _Q17.f64[1];
  __asm { FMLA            D18, D20, V17.D[1] }
  _Q18.f64[0] = sqrt(_Q18.f64[0] + v48.f64[0] * v48.f64[0]);
  if (_Q18.f64[0] == 0.0)
    _Q18.f64[0] = 1.0;
  else
    _Q18.f64[0] = 1.0 / _Q18.f64[0];
  v51 = (int64x2_t)vmulq_f64(v48, _Q18);
  v52 = vmulq_n_f64(_Q17, _Q18.f64[0]);
  v53 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  v54 = (float64x2_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v52);
  v55 = (float64x2_t)vzip2q_s64((int64x2_t)v45, (int64x2_t)v52);
  v56 = (float64x2_t)vzip1q_s64(v44, v51);
  v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, _Q24.f64[0]), v55, _Q24, 1), v56, *(double *)v25.i64);
  __asm { FMLA            D20, D26, V3.D[1] }
  v59 = vmlad_n_f64(_D20, *(double *)v25.i64, v16.f64[0]);
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, v35.f64[0]), v55, v35, 1), v56, v36);
  _D22 = v35.f64[1];
  __asm { FMLA            D24, D22, V3.D[1] }
  v63 = vmlad_n_f64(_D24, v36, v16.f64[0]);
  v64 = vmulq_f64(v57, v57);
  v65 = vmulq_f64(v60, v60);
  v66 = vmuld_lane_f64(v60.f64[1], v60, 1);
  v67 = vsubq_f64(v64, v65).f64[0] - v66;
  v68 = sqrt(v67 * v67 + 4.0 * v57.f64[0] * v57.f64[0] * v60.f64[0] * v60.f64[0]);
  v69 = v57.f64[0] * v63 - v59 * v60.f64[0];
  if (v69 == 0.0)
    v69 = 1.0;
  v70 = -v60.f64[0] / v69;
  v60.f64[0] = v60.f64[0] + v60.f64[0];
  v71 = v67 - v68;
  v72 = v57.f64[0] * (v63 * v60.f64[0]) + v59 * v71;
  v73 = v60.f64[1] * v71;
  v74 = v60.f64[1] * v72;
  if (v74 != 0.0)
    v13 = v74;
  a6.f64[0] = v73 / v13;
  if (v60.f64[1] == 0.0)
    a6.f64[0] = v70;
  v75 = v57.f64[0] / (v68 + v68);
  v76 = (vaddq_f64(v64, v65).f64[0] - v66 + v68) * v75 * a6.f64[0];
  v77 = a6.f64[0] * (v75 * (v60.f64[1] * v60.f64[0]));
  a6.f64[0] = v59 * a6.f64[0];
  *(_QWORD *)&v45.f64[1] = v46;
  *(_QWORD *)&v52.f64[1] = v53;
  *(_QWORD *)&_Q3.f64[1] = v15;
  v78 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v76), v52, v77), _Q3, a6.f64[0]);
  a6.f64[0] = *(double *)v44.i64 * v76 + *(double *)v51.i64 * v77 + v16.f64[0] * a6.f64[0];
  v16.f64[0] = 0.0;
  v79 = (int8x16_t)vcgtq_f64(v16, a6);
  __asm { FMOV            V3.2D, #1.0 }
  *(_QWORD *)(a1 + 16) = *(_OWORD *)&vmulq_f64(a6, (float64x2_t)vbslq_s8(v79, _Q3, a5));
  *(float64x2_t *)a1 = vmulq_f64(v78, (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8(v79).i64[0], 0), (int8x16_t)vdupq_lane_s64(a5.i64[0], 0), _Q3));
  return a6.f64[0] >= 0.0;
}

double sub_208128F54(uint64_t a1, unsigned int *a2)
{
  BOOL v3;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, a2, 0x4C303038u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_208129038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208129054(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[2];

  if (*(_DWORD *)(a1 + 24))
    sub_207CA9F48();
  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = off_24C08A598;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_11;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_11:
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_12:
      sub_20815FC78((uint64_t)v21);
  }
LABEL_13:
  sub_20812923C(v23, (uint64_t)&v20);
  v10 = v23[1];
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v12)
LABEL_20:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_21:
  v20 = &off_24C08A5D8;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_208129228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

size_t sub_20812923C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a1 = v10;
  a1[1] = v17;
  a1[2] = (result << 32) | 1;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_208129398(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_2081294DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081294F0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088488;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_208129554(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_2081295AC(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[3];
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  size_t v24[2];

  *(_QWORD *)a1 = off_24C088488;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_208128F54(a1 + 16, a2);
  if (*a2)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_208129054(v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  if ((sub_208129B58(a1) & 1) != 0)
    return a1;
  sub_208129D38(&v21, a1);
  sub_208129E2C(v20, a1);
  v24[0] = (size_t)&v18;
  v24[1] = (size_t)v20;
  sub_2080F2F3C(v24);
  if (!v22)
    goto LABEL_16;
  v10 = *v22;
  v9 = (std::__shared_weak_count *)v22[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v10)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v10)
LABEL_15:
    sub_20815FF44((uint64_t)v22);
LABEL_16:
  v21 = &off_24C08A5D8;
  v14 = v23;
  if (!v23)
    return a1;
  v15 = (unint64_t *)&v23->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_208129738(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812974C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20815AF50((uint64_t *)va);
  sub_2081294F0(v8);
  _Unwind_Resume(a1);
}

void sub_208129768(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081294F0(v1);
  _Unwind_Resume(a1);
}

void sub_208129784(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2081299C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_2081299D4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C08A5D8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
}

uint64_t sub_208129B58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208129D38(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_208129398(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208129E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208129E2C(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_208129B58(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812923C(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20812A068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812A07C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_208129398(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20812A15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_20812A170(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x32433038u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20812A254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20812A270(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20812A474((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20812A460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20812A474(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 2;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20812A648(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20812A78C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812A7A0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088518;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20812A804(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _OWORD v21[3];
  _BYTE v22[48];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  size_t v26[2];

  *(_QWORD *)a1 = off_24C088518;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20812A170(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20812A270((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v21[0] = *a3;
  v21[1] = v11;
  v21[2] = a3[2];
  if ((sub_20812ADB4(a1) & 1) != 0)
    return a1;
  sub_20812AF94(&v23, a1);
  sub_20812B088((uint64_t)v22, a1);
  v26[0] = (size_t)v21;
  v26[1] = (size_t)v22;
  sub_2080F33F8(v26);
  if (!v24)
    goto LABEL_16;
  v13 = *v24;
  v12 = (std::__shared_weak_count *)v24[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v13)
LABEL_15:
    sub_20815FF44((uint64_t)v24);
LABEL_16:
  v23 = &off_24C08A5D8;
  v17 = v25;
  if (!v25)
    return a1;
  v18 = (unint64_t *)&v25->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20812A994(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812A9A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 72));
  sub_20812A7A0(v1);
  _Unwind_Resume(a1);
}

void sub_20812A9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20812A7A0(v1);
  _Unwind_Resume(a1);
}

void sub_20812A9E0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20812AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20812AC30(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C08A5D8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
}

uint64_t sub_20812ADB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_20812AF94(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_20812A648(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_20812B074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812B088(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20812ADB4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812A474(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20812B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20812B300(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20812A648(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20812B3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_20812B3F4(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x18u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20812B4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20812B4F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20812B6F4((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20812B6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20812B6F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 3;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x300000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 3;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20812B8C8(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20812BA0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812BA20(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0885A8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20812BA84(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[2];
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t (**v42)();
  uint64_t *v43;
  std::__shared_weak_count *v44;
  size_t v45[2];

  *(_QWORD *)a1 = off_24C0885A8;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20812B3F4(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20812B4F0((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v35 = *a3;
  v36 = v11;
  v37 = a3[2];
  if ((sub_20812BFF0(a1) & 1) != 0)
    return a1;
  sub_20812C1D0(&v42, a1);
  sub_20812C2C4((uint64_t)v38, a1);
  v45[0] = (size_t)&v35;
  v45[1] = (size_t)v38;
  if (DWORD1(v36) == 1 && v39 == 1)
  {
    sub_2080F3514(v45);
  }
  else if (DWORD2(v35) && HIDWORD(v35) && (_DWORD)v36)
  {
    v12 = HIDWORD(v35) - 1;
    v13 = DWORD2(v36);
    v14 = v40;
    v15 = (_BYTE *)v35;
    v16 = (_BYTE *)v38[0];
    v17 = v36 - 1;
    if ((_DWORD)v36 != 1)
    {
      v18 = v41;
      v19 = HIDWORD(v36);
      if (HIDWORD(v35) == 1)
      {
        do
        {
          *v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v19;
          v16 += v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        v20 = 0;
        v21 = v38[0] + 2;
        v22 = (_BYTE *)(v35 + 2);
        do
        {
          v23 = v22;
          v24 = (_BYTE *)v21;
          v25 = v12;
          do
          {
            *(v24 - 2) = *(v23 - 2);
            *(v24 - 1) = *(v23 - 1);
            *v24 = *v23;
            v24 += v14;
            v23 += v13;
            --v25;
          }
          while (v25);
          *(v24 - 2) = *(v23 - 2);
          *(v24 - 1) = *(v23 - 1);
          *v24 = *v23;
          v15 += v19;
          v16 += v18;
          ++v20;
          v21 += v18;
          v22 += v19;
        }
        while (v20 != v17);
      }
    }
    for (; v12; --v12)
    {
      *v16 = *v15;
      v16[1] = v15[1];
      v16[2] = v15[2];
      v15 += v13;
      v16 += v14;
    }
    *v16 = *v15;
    v16[1] = v15[1];
    v16[2] = v15[2];
  }
  if (!v43)
    goto LABEL_33;
  v27 = *v43;
  v26 = (std::__shared_weak_count *)v43[1];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v27)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  if (v27)
LABEL_32:
    sub_20815FF44((uint64_t)v43);
LABEL_33:
  v42 = &off_24C08A5D8;
  v31 = v44;
  if (!v44)
    return a1;
  v32 = (unint64_t *)&v44->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
    return a1;
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  return a1;
}

void sub_20812BD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812BD68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 72));
  sub_20812BA20(v1);
  _Unwind_Resume(a1);
}

void sub_20812BD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20812BA20(v1);
  _Unwind_Resume(a1);
}

void sub_20812BDA0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20812BFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20812BFF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_20812C1D0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_20812B8C8(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_20812C2B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812C2C4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20812BFF0(a2))
  {
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24C08A5D8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812B6F4(a1, (uint64_t)&v27);
    v27 = &off_24C08A5D8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20812C4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812C4B4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20812B8C8(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20812C594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_20812C5A8(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v4;
  BOOL v5;
  unsigned int v6;
  double result;
  void *__p;
  __int128 v9;
  _BYTE v10[8];
  __int128 v11;

  v4 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v5 = *(_DWORD *)(a3 + 28) == 0;
  else
    v5 = 1;
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    if ((a2 - 25) > 0xC)
      v6 = 0;
    else
      v6 = dword_2082805BC[a2 - 25] | dword_208280588[a2 - 25];
    __p = operator new(0x58uLL);
    v9 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v10, v4, v6, (uint64_t *)&__p, 0);
    if (SHIBYTE(v9) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v11;
    *(_OWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20812C6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20812C6E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20812C8E8((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20812C8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20812C8E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 4;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20812CABC(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20812CC00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812CC14(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];
  char *v31;
  char **v32;
  _DWORD v33[7];
  _QWORD v34[2];

  v19 = 0;
  *(_QWORD *)a1 = off_24C088638;
  *(_DWORD *)(a1 + 8) = 0;
  v5 = a1 + 16;
  sub_20812C5A8(a1 + 16, a2, a3);
  v6 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *(_OWORD *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 32);
    *v6 = v8;
    *(_OWORD *)(a1 + 64) = v9;
  }
  else
  {
    sub_20812C6E4((uint64_t)v6, v5);
  }
  if ((sub_20812D80C(a1) & 1) != 0)
    return a1;
  sub_20812D9EC(&v27, a1);
  sub_20812DAE0((uint64_t)&v20, a1);
  v30[0] = &v20;
  v30[1] = &v19;
  if (v24 == 1)
  {
    sub_2080F324C(v30);
  }
  else
  {
    v31 = &v19;
    if (v21 && v22 && v23)
    {
      v32 = &v31;
      v33[0] = 0;
      v33[1] = v21 - 1;
      v33[2] = v24;
      v33[3] = v22 - 1;
      v33[4] = v25;
      v33[5] = v23 - 1;
      v33[6] = v26;
      v34[1] = 0;
      v34[0] = 0;
      sub_2080F3E38(v33, (uint64_t)v34, &v32, v20);
    }
  }
  if (!v28)
    goto LABEL_22;
  v11 = *v28;
  v10 = (std::__shared_weak_count *)v28[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  if (v11)
LABEL_21:
    sub_20815FF44((uint64_t)v28);
LABEL_22:
  v27 = &off_24C08A5D8;
  v15 = v29;
  if (!v29)
    return a1;
  v16 = (unint64_t *)&v29->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20812CE08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  sub_208129554(v2);
  _Unwind_Resume(a1);
}

void sub_20812CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20815AF50((uint64_t *)va);
  sub_20812CE50(v8);
  _Unwind_Resume(a1);
}

void sub_20812CE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20812CE50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812CE50(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088638;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20812CEB4(uint64_t a1, int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[20];
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  size_t v30[2];
  char v31;
  char *v32;

  *(_QWORD *)a1 = off_24C088638;
  *(_DWORD *)(a1 + 8) = 0;
  v7 = a1 + 16;
  sub_20812C5A8(a1 + 16, a2, a3);
  v8 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24))
    v9 = *(_DWORD *)(a3 + 28) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_OWORD *)a3;
    v11 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 32);
    *v8 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    sub_20812C6E4((uint64_t)v8, v7);
  }
  v12 = a4[1];
  v22 = *a4;
  v23 = v12;
  v24 = a4[2];
  if ((sub_20812D80C(a1) & 1) != 0)
    return a1;
  sub_20812D9EC(&v27, a1);
  sub_20812DAE0((uint64_t)v25, a1);
  v30[0] = (size_t)&v22;
  v30[1] = (size_t)v25;
  if (DWORD1(v23) == 1 && v26 == 1)
  {
    sub_2080F3514(v30);
  }
  else
  {
    v31 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && (_DWORD)v23)
    {
      v32 = &v31;
      sub_2080F3FF4((uint64_t)&v32, (uint64_t)&v22, (uint64_t)v25);
    }
  }
  if (!v28)
    goto LABEL_23;
  v14 = *v28;
  v13 = (std::__shared_weak_count *)v28[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v14)
LABEL_22:
    sub_20815FF44((uint64_t)v28);
LABEL_23:
  v27 = &off_24C08A5D8;
  v18 = v29;
  if (!v29)
    return a1;
  v19 = (unint64_t *)&v29->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20812D094(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812D0A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 88));
  sub_20812CE50(v1);
  _Unwind_Resume(a1);
}

void sub_20812D0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20812CE50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812D0D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;

  *(_QWORD *)a1 = off_24C088638;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C08A5D8;
  *(_DWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v4;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  v15 = *(uint64_t **)(a2 + 8);
  if (v15)
  {
    v17 = *v15;
    v16 = (std::__shared_weak_count *)v15[1];
    if (!v16)
      goto LABEL_22;
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (v17)
        goto LABEL_24;
    }
    else
    {
LABEL_22:
      if (v17)
        goto LABEL_24;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_49;
  }
LABEL_24:
  v21 = sub_20815C130(a2);
  v22 = sub_20815C3B0(a2);
  v23 = sub_20815C630(a2);
  v24 = v21 | ((unint64_t)v22 << 32);
  LODWORD(v37) = 4;
  HIDWORD(v37) = v24;
  *(_QWORD *)(a1 + 48) = v37;
  *(_DWORD *)(a1 + 56) = v22;
  *(_QWORD *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v23;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = (v23 << 32) | 4;
  v25 = *(_QWORD *)(a2 + 8);
  if (!v25)
  {
    v32 = 0;
    goto LABEL_39;
  }
  v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      v30 = *(uint64_t **)(a2 + 8);
      if (v30)
        goto LABEL_31;
LABEL_45:
      v32 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_46;
LABEL_40:
      if ((v32 == 0) == (*(_DWORD *)(a1 + 76) == 0))
        return a1;
LABEL_47:
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_208216974))return a1;
LABEL_49:
      abort();
    }
  }
  v30 = *(uint64_t **)(a2 + 8);
  if (!v30)
    goto LABEL_45;
LABEL_31:
  v32 = *v30;
  v31 = (std::__shared_weak_count *)v30[1];
  if (!v31)
    goto LABEL_39;
  v33 = (unint64_t *)&v31->__shared_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  do
    v35 = __ldaxr(v33);
  while (__stlxr(v35 - 1, v33));
  if (v35)
  {
LABEL_39:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_46;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (*(_DWORD *)(a1 + 72))
    goto LABEL_40;
LABEL_46:
  if (v32)
    goto LABEL_47;
  return a1;
}

void sub_20812D41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812D438(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20812D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20812D688(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C08A5D8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
}

uint64_t sub_20812D80C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_20812D9EC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_20812CABC(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_20812DACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812DAE0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20812D80C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812C8E8(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20812DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20812DD58(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20812CABC(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20812DE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_20812DE4C(uint64_t a1, unsigned int *a2)
{
  BOOL v3;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, a2, 0x62313667u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20812DF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20812DF4C(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[2];

  if (*(_DWORD *)(a1 + 24))
    sub_207CA9F48();
  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = off_24C08A598;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_11;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_11:
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_12:
      sub_20815FC78((uint64_t)v21);
  }
LABEL_13:
  sub_20812E134(v23, (uint64_t)&v20);
  v10 = v23[1];
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v12)
LABEL_20:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_21:
  v20 = &off_24C08A5D8;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_20812E120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

size_t sub_20812E134(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a1 = v10;
  a1[1] = v17;
  a1[2] = ((unint64_t)(result >> 1) << 32) | 1;
  if (HIDWORD(v17) * (result >> 1) == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20812E294(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20812E3D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812E3EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0886C8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20812E450(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[3];
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;

  *(_QWORD *)a1 = off_24C0886C8;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20812DE4C(a1 + 16, a2);
  if (*a2)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20812DF4C(v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  if ((sub_20812E870(a1) & 1) != 0)
    return a1;
  sub_20812EA50(&v21, a1);
  sub_20812EB44(v20, a1);
  sub_2080F44E4((uint64_t *)&v18, (uint64_t)v20);
  if (!v22)
    goto LABEL_16;
  v10 = *v22;
  v9 = (std::__shared_weak_count *)v22[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v10)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v10)
LABEL_15:
    sub_20815FF44((uint64_t)v22);
LABEL_16:
  v21 = &off_24C08A5D8;
  v14 = v23;
  if (!v23)
    return a1;
  v15 = (unint64_t *)&v23->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_20812E5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812E5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20815AF50((uint64_t *)va);
  sub_20812E3EC(v8);
  _Unwind_Resume(a1);
}

void sub_20812E604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20812E3EC(v1);
  _Unwind_Resume(a1);
}

void sub_20812E620(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20812E85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20812E870(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_20812EA50(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_20812E294(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_20812EB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812EB44(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20812E870(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812E134(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20812ED80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812ED94(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20812E294(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20812EE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_20812EE88(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x62343872u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20812EF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20812EF88(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20812F18C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20812F178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20812F18C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 3;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x300000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 3;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20812F368(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20812F4AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20812F4C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088758;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20812F524(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  uint64_t v47[2];

  *(_QWORD *)a1 = off_24C088758;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20812EE88(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20812EF88((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v37 = *a3;
  v38 = v11;
  v39 = a3[2];
  if ((sub_20812FAB0(a1) & 1) != 0)
    return a1;
  sub_20812FC90(&v44, a1);
  sub_20812FD84((uint64_t)v40, a1);
  v47[0] = (uint64_t)&v37;
  v47[1] = (uint64_t)v40;
  if (DWORD1(v38) == 1 && v41 == 1)
  {
    sub_2080F4F10(v47);
    goto LABEL_25;
  }
  if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v12 = HIDWORD(v37) - 1;
    v13 = DWORD2(v38);
    v14 = v42;
    v15 = (_WORD *)v37;
    v16 = (_WORD *)v40[0];
    v17 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v18 = v43;
      v19 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v19;
          v16 += v18;
          --v17;
        }
        while (v17);
LABEL_24:
        *v16 = *v15;
        v16[1] = v15[1];
        v16[2] = v15[2];
        goto LABEL_25;
      }
      v20 = 0;
      v21 = v40[0] + 4;
      v22 = (_WORD *)(v37 + 4);
      v23 = 2 * HIDWORD(v38);
      v24 = 2 * DWORD2(v38);
      do
      {
        v25 = v22;
        v26 = (_WORD *)v21;
        v27 = v12;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v14;
          v25 = (_WORD *)((char *)v25 + v24);
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v15 += v19;
        v16 += v18;
        ++v20;
        v21 += 2 * v18;
        v22 = (_WORD *)((char *)v22 + v23);
      }
      while (v20 != v17);
    }
    for (; v12; --v12)
    {
      *v16 = *v15;
      v16[1] = v15[1];
      v16[2] = v15[2];
      v15 += v13;
      v16 += v14;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v45)
  {
    v29 = *v45;
    v28 = (std::__shared_weak_count *)v45[1];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (!v29)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    if (v29)
LABEL_32:
      sub_20815FF44((uint64_t)v45);
  }
LABEL_33:
  v44 = &off_24C08A5D8;
  v33 = v46;
  if (!v46)
    return a1;
  v34 = (unint64_t *)&v46->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
    return a1;
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  return a1;
}

void sub_20812F814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_20812F828(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 72));
  sub_20812F4C0(v1);
  _Unwind_Resume(a1);
}

void sub_20812F844(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20812F4C0(v1);
  _Unwind_Resume(a1);
}

void sub_20812F860(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20812FA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20812FAB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_20812FC90(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_20812F368(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_20812FD70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812FD84(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20812FAB0(a2))
  {
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24C08A5D8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812F18C(a1, (uint64_t)&v27);
    v27 = &off_24C08A5D8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20812FF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20812FF74(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20812F368(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_208130054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_208130068(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x62363461u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20813014C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208130168(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20813036C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_208130358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20813036C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 4;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_208130548(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20813068C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081306A0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0887E8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_208130704(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[20];
  int v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29[2];
  char v30;
  char *v31;

  *(_QWORD *)a1 = off_24C0887E8;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_208130068(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_208130168((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v21 = *a3;
  v22 = v11;
  v23 = a3[2];
  if ((sub_208130B80(a1) & 1) != 0)
    return a1;
  sub_208130D60(&v26, a1);
  sub_208130E54((uint64_t)v24, a1);
  v29[0] = (uint64_t)&v21;
  v29[1] = (uint64_t)v24;
  if (DWORD1(v22) == 1 && v25 == 1)
  {
    sub_2080F4F10(v29);
  }
  else
  {
    v30 = 0;
    if (DWORD2(v21) && HIDWORD(v21) && (_DWORD)v22)
    {
      v31 = &v30;
      sub_2080F58C4((uint64_t)&v31, (uint64_t)&v21, (uint64_t)v24);
    }
  }
  if (!v27)
    goto LABEL_23;
  v13 = *v27;
  v12 = (std::__shared_weak_count *)v27[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v13)
LABEL_22:
    sub_20815FF44((uint64_t)v27);
LABEL_23:
  v26 = &off_24C08A5D8;
  v17 = v28;
  if (!v28)
    return a1;
  v18 = (unint64_t *)&v28->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2081308E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_2081308F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 88));
  sub_2081306A0(v1);
  _Unwind_Resume(a1);
}

void sub_208130914(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081306A0(v1);
  _Unwind_Resume(a1);
}

void sub_208130930(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208130B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208130B80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208130D60(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_208130548(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208130E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208130E54(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208130B80(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813036C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2081310B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_2081310CC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_208130548(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_2081311AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2081311C0(uint64_t a1, unsigned int *a2)
{
  BOOL v3;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, a2, 0x4C303068u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2081312A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081312C0(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[2];

  if (*(_DWORD *)(a1 + 24))
    sub_207CA9F48();
  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = off_24C08A598;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_11;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_11:
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_12:
      sub_20815FC78((uint64_t)v21);
  }
LABEL_13:
  sub_20812E134(v23, (uint64_t)&v20);
  v10 = v23[1];
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v12)
LABEL_20:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_21:
  v20 = &off_24C08A5D8;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_208131494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_2081314A8(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_2081315EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_208131600(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088878;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_208131664(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25[2];

  *(_QWORD *)a1 = off_24C088878;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2081311C0(a1 + 16, a2);
  if (*a2)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2081312C0(v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if ((sub_208131C10(a1) & 1) != 0)
    return a1;
  sub_208131DF0(&v22, a1);
  sub_208131EE4(v21, a1);
  v25[0] = (uint64_t)&v19;
  v25[1] = (uint64_t)v21;
  v9.n128_u64[0] = sub_2080F5DDC(v25);
  if (!v23)
    goto LABEL_16;
  v11 = *v23;
  v10 = (std::__shared_weak_count *)v23[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v11)
LABEL_15:
    sub_20815FF44((uint64_t)v23);
LABEL_16:
  v22 = &off_24C08A5D8;
  v15 = v24;
  if (!v24)
    return a1;
  v16 = (unint64_t *)&v24->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v9);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_2081317F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_208131804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20815AF50((uint64_t *)va);
  sub_208131600(v8);
  _Unwind_Resume(a1);
}

void sub_208131820(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208131600(v1);
  _Unwind_Resume(a1);
}

void sub_20813183C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208131A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_208131A8C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C08A5D8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C08A5D8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
}

uint64_t sub_208131C10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208131DF0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_2081314A8(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208131ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208131EE4(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_208131C10(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812E134(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_208132120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208132134(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2081314A8(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_208132214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_208132228(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x32433068u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20813230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208132328(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20813252C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_208132518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20813252C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 2;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_208132708(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_20813284C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_208132860(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088908;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2081328C4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  *(_QWORD *)a1 = off_24C088908;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_208132228(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_208132328((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_208132CF0(a1) & 1) != 0)
    return a1;
  sub_208132ED0(&v24, a1);
  sub_208132FC4((uint64_t)v23, a1);
  v27[0] = (uint64_t)v22;
  v27[1] = (uint64_t)v23;
  v12.n128_u64[0] = sub_2080F680C(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20815FF44((uint64_t)v25);
LABEL_16:
  v24 = &off_24C08A5D8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_208132A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_208132A68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 72));
  sub_208132860(v1);
  _Unwind_Resume(a1);
}

void sub_208132A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208132860(v1);
  _Unwind_Resume(a1);
}

void sub_208132AA0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208132CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208132CF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208132ED0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_208132708(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208132FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208132FC4(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208132CF0(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813252C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208133228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20813323C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_208132708(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20813331C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_208133330(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x52476841u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_208133414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208133430(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20813036C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_208133620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208133634(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_208133778(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20813378C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088998;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2081337F0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];

  *(_QWORD *)a1 = off_24C088998;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_208133330(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_208133430((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_208133C1C(a1) & 1) != 0)
    return a1;
  sub_208133DFC(&v24, a1);
  sub_208133EF0((uint64_t)v23, a1);
  v27[0] = v22;
  v27[1] = v23;
  v12.n128_f64[0] = sub_2080F7420(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20815FF44((uint64_t)v25);
LABEL_16:
  v24 = &off_24C08A5D8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_208133980(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_208133994(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 72));
  sub_20813378C(v1);
  _Unwind_Resume(a1);
}

void sub_2081339B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20813378C(v1);
  _Unwind_Resume(a1);
}

void sub_2081339CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208133C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208133C1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208133DFC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_208133634(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208133EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208133EF0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208133C1C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813036C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208134154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_208134168(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_208133634(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_208134248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_20813425C(uint64_t a1, unsigned int *a2)
{
  BOOL v3;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, a2, 0x4C303066u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_208134340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813435C(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[2];

  if (*(_DWORD *)(a1 + 24))
    sub_207CA9F48();
  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = off_24C08A598;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_11;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_11:
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_12:
      sub_20815FC78((uint64_t)v21);
  }
LABEL_13:
  sub_208134544(v23, (uint64_t)&v20);
  v10 = v23[1];
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v12)
LABEL_20:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_21:
  v20 = &off_24C08A5D8;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_208134530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

size_t sub_208134544(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a1 = v10;
  a1[1] = v17;
  a1[2] = ((unint64_t)(result >> 2) << 32) | 1;
  if (HIDWORD(v17) * (result >> 2) == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2081346A4(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_2081347E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081347FC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088A28;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_208134860(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  *(_QWORD *)a1 = off_24C088A28;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20813425C(a1 + 16, a2);
  if (*a2)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20813435C(v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if ((sub_208134C80(a1) & 1) != 0)
    return a1;
  sub_208134E60(&v22, a1);
  sub_208134F54(v21, a1);
  v9.n128_f32[0] = sub_207D5A1F4((uint64_t)&v19, (uint64_t)v21);
  if (!v23)
    goto LABEL_16;
  v11 = *v23;
  v10 = (std::__shared_weak_count *)v23[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v11)
LABEL_15:
    sub_20815FF44((uint64_t)v23);
LABEL_16:
  v22 = &off_24C08A5D8;
  v15 = v24;
  if (!v24)
    return a1;
  v16 = (unint64_t *)&v24->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v9);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_2081349E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_2081349F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20815AF50((uint64_t *)va);
  sub_2081347FC(v8);
  _Unwind_Resume(a1);
}

void sub_208134A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081347FC(v1);
  _Unwind_Resume(a1);
}

void sub_208134A30(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208134C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208134C80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208134E60(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_2081346A4(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208134F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208134F54(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_208134C80(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_208134544(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_208135190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2081351A4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2081346A4(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_208135284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_208135298(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x32433066u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_20813537C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208135398(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_20813559C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_208135588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20813559C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = result >> 2;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 2;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_208135778(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_2081358BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081358D0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088AB8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_208135934(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  *(_QWORD *)a1 = off_24C088AB8;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_208135298(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_208135398((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_208135D60(a1) & 1) != 0)
    return a1;
  sub_208135F40(&v24, a1);
  sub_208136034((uint64_t)v23, a1);
  v27[0] = (uint64_t)v22;
  v27[1] = (uint64_t)v23;
  v12.n128_f32[0] = sub_2080F800C(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20815FF44((uint64_t)v25);
LABEL_16:
  v24 = &off_24C08A5D8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_208135AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_208135AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 72));
  sub_2081358D0(v1);
  _Unwind_Resume(a1);
}

void sub_208135AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081358D0(v1);
  _Unwind_Resume(a1);
}

void sub_208135B10(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208135D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208135D60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

